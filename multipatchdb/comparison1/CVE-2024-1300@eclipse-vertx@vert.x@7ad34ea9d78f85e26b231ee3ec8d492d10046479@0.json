{
  "cve_id": "CVE-2024-1300",
  "cve_desc": "A vulnerability in the Eclipse Vert.x toolkit causes a memory leak in TCP servers configured with TLS and SNI support. When processing an unknown SNI server name assigned the default certificate instead of a mapped certificate, the SSL context is erroneously cached in the server name map, leading to memory exhaustion. This flaw allows attackers to send TLS client hello messages with fake server names, triggering a JVM out-of-memory error.",
  "repo": "eclipse-vertx/vert.x",
  "patch_hash": "7ad34ea9d78f85e26b231ee3ec8d492d10046479",
  "patch_info": {
    "commit_hash": "7ad34ea9d78f85e26b231ee3ec8d492d10046479",
    "repo": "eclipse-vertx/vert.x",
    "commit_url": "https://github.com/eclipse-vertx/vert.x/commit/7ad34ea9d78f85e26b231ee3ec8d492d10046479",
    "files": [
      "src/main/java/io/vertx/core/net/impl/SSLHelper.java",
      "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
      "src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
      "src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
      "src/test/java/io/vertx/core/net/NetTest.java"
    ],
    "message": "The SslChannelProvider class maintains a map of server name to Netty SslContext that is filled when a client provides a server name. When a server name does not resolve to a KeyManagerFactory or TrustManagerFactory, the default factories are used and the entry is stored in the map. Instead no specific factory is resolved the default Netty SslContext is used, since this can lead to a a memory leak when a client specifies spurious SNI server names. This affects only a TCP server when SNI is set in the HttpServerOptions.",
    "before_after_code_files": [
      "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
      "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
      "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
      "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
      "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java": [
      "File: src/main/java/io/vertx/core/net/impl/SSLHelper.java -> src/main/java/io/vertx/core/net/impl/SSLHelper.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "126:     this.applicationProtocols = applicationProtocols;",
      "127:   }",
      "129:   private static class CachedProvider {",
      "130:     final SSLOptions options;",
      "131:     final long id;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:   public synchronized int sniEntrySize() {",
      "130:     CachedProvider res = cachedProvider.result();",
      "131:     if (res != null) {",
      "132:       return res.sslChannelProvider.sniEntrySize();",
      "133:     }",
      "134:     return 0;",
      "135:   }",
      "",
      "---------------"
    ],
    "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java": [
      "File: src/main/java/io/vertx/core/net/impl/SslChannelProvider.java -> src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:     this.sslContextProvider = sslContextProvider;",
      "66:   }",
      "68:   public SslContextProvider sslContextProvider() {",
      "69:     return sslContextProvider;",
      "70:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "68:   public int sniEntrySize() {",
      "69:     return sslContextMaps[0].size() + sslContextMaps[1].size();",
      "70:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:   public SslContext sslContext(String serverName, boolean useAlpn, boolean server, boolean trustAll) throws Exception {",
      "85:     int idx = idx(useAlpn);",
      "93:       KeyManagerFactory kmf = sslContextProvider.resolveKeyManagerFactory(serverName);",
      "94:       TrustManager[] trustManagers = trustAll ? null : sslContextProvider.resolveTrustManagers(serverName);",
      "96:     }",
      "97:   }",
      "99:   public SslContext sslServerContext(boolean useAlpn) {",
      "",
      "[Removed Lines]",
      "86:     if (serverName == null) {",
      "87:       if (sslContexts[idx] == null) {",
      "88:         SslContext context = sslContextProvider.createContext(server, null, null, null, useAlpn, trustAll);",
      "89:         sslContexts[idx] = context;",
      "90:       }",
      "91:       return sslContexts[idx];",
      "92:     } else {",
      "95:       return sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createContext(server, kmf, trustManagers, s, useAlpn, trustAll));",
      "",
      "[Added Lines]",
      "90:     if (serverName != null) {",
      "93:       if (kmf != null || trustManagers != null || !server) {",
      "94:         return sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createContext(server, kmf, trustManagers, s, useAlpn, trustAll));",
      "95:       }",
      "96:     }",
      "97:     if (sslContexts[idx] == null) {",
      "98:       SslContext context = sslContextProvider.createContext(server, null, null, serverName, useAlpn, trustAll);",
      "99:       sslContexts[idx] = context;",
      "101:     return sslContexts[idx];",
      "",
      "---------------"
    ],
    "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java": [
      "File: src/main/java/io/vertx/core/net/impl/SslContextProvider.java -> src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "154:     }",
      "155:   }",
      "164:   public TrustManager[] defaultTrustManagers() {",
      "165:     return trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null;",
      "166:   }",
      "",
      "[Removed Lines]",
      "157:   public KeyManagerFactory loadKeyManagerFactory(String serverName) throws Exception {",
      "158:     if (keyManagerFactoryMapper != null) {",
      "159:       return keyManagerFactoryMapper.apply(serverName);",
      "160:     }",
      "161:     return null;",
      "162:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "186:   public KeyManagerFactory resolveKeyManagerFactory(String serverName) throws Exception {",
      "197:     }",
      "198:     return null;",
      "199:   }",
      "",
      "[Removed Lines]",
      "187:     KeyManagerFactory kmf = loadKeyManagerFactory(serverName);",
      "188:     if (kmf == null) {",
      "189:       kmf = keyManagerFactory;",
      "190:     }",
      "191:     return kmf;",
      "192:   }",
      "194:   public TrustManager[] loadTrustManagers(String serverName) throws Exception {",
      "195:     if (trustManagerMapper != null) {",
      "196:       return trustManagerMapper.apply(serverName);",
      "",
      "[Added Lines]",
      "179:     if (keyManagerFactoryMapper != null) {",
      "180:       return keyManagerFactoryMapper.apply(serverName);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "211:   public TrustManager[] resolveTrustManagers(String serverName) throws Exception {",
      "215:     }",
      "217:   }",
      "219:   private VertxTrustManagerFactory buildVertxTrustManagerFactory(TrustManager[] mgrs) {",
      "",
      "[Removed Lines]",
      "212:     TrustManager[] trustManagers = loadTrustManagers(serverName);",
      "213:     if (trustManagers == null && trustManagerFactory != null) {",
      "214:       trustManagers = trustManagerFactory.getTrustManagers();",
      "216:     return trustManagers;",
      "",
      "[Added Lines]",
      "195:     if (trustManagerMapper != null) {",
      "196:       return trustManagerMapper.apply(serverName);",
      "198:     return null;",
      "",
      "---------------"
    ],
    "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java": [
      "File: src/main/java/io/vertx/core/net/impl/TCPServerBase.java -> src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "125:     return trafficShapingHandler;",
      "126:   }",
      "128:   public Future<Boolean> updateSSLOptions(SSLOptions options, boolean force) {",
      "129:     TCPServerBase server = actualServer;",
      "130:     if (server != null && server != this) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "128:   public int sniEntrySize() {",
      "129:     return sslHelper.sniEntrySize();",
      "130:   }",
      "",
      "---------------"
    ],
    "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java": [
      "File: src/test/java/io/vertx/core/net/NetTest.java -> src/test/java/io/vertx/core/net/NetTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "58: import io.vertx.core.impl.logging.LoggerFactory;",
      "59: import io.vertx.core.json.JsonArray;",
      "60: import io.vertx.core.json.JsonObject;",
      "65: import io.vertx.core.spi.tls.SslContextFactory;",
      "66: import io.vertx.core.streams.ReadStream;",
      "67: import io.vertx.test.core.CheckingSender;",
      "",
      "[Removed Lines]",
      "61: import io.vertx.core.net.impl.HAProxyMessageCompletionHandler;",
      "62: import io.vertx.core.net.impl.NetServerImpl;",
      "63: import io.vertx.core.net.impl.NetSocketInternal;",
      "64: import io.vertx.core.net.impl.VertxHandler;",
      "",
      "[Added Lines]",
      "61: import io.vertx.core.net.impl.*;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1538:       receivedServerNames.add(so.indicatedServerName());",
      "1539:     });",
      "1540:     startServer();",
      "1542:     client = vertx.createNetClient(new NetClientOptions().setSsl(true).setTrustAll(true));",
      "1543:     for (String serverName : serverNames) {",
      "1544:       NetSocket so = client.connect(testAddress, serverName).toCompletionStage().toCompletableFuture().get();",
      "1545:       String host = cnOf(so.peerCertificates().get(0));",
      "1547:     }",
      "1549:     assertEquals(receivedServerNames, serverNames);",
      "1550:   }",
      "",
      "[Removed Lines]",
      "1541:     List<String> serverNames = Arrays.asList(\"host1\", \"host2.com\");",
      "1546:       assertEquals(serverName, host);",
      "1548:     assertWaitUntil(() -> receivedServerNames.size() == 2);",
      "",
      "[Added Lines]",
      "1538:     List<String> serverNames = Arrays.asList(\"host1\", \"host2.com\", \"fake\");",
      "1539:     List<String> cns = new ArrayList<>();",
      "1544:       cns.add(host);",
      "1546:     assertEquals(Arrays.asList(\"host1\", \"host2.com\", \"localhost\"), cns);",
      "1547:     assertEquals(2, ((TCPServerBase)server).sniEntrySize());",
      "1548:     assertWaitUntil(() -> receivedServerNames.size() == 3);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea749f678a429a97c10d4207104c469c6a856561",
      "candidate_info": {
        "commit_hash": "ea749f678a429a97c10d4207104c469c6a856561",
        "repo": "eclipse-vertx/vert.x",
        "commit_url": "https://github.com/eclipse-vertx/vert.x/commit/ea749f678a429a97c10d4207104c469c6a856561",
        "files": [
          "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "src/test/java/io/vertx/core/net/SSLHelperTest.java",
          "src/test/java/io/vertx/it/SSLEngineTest.java"
        ],
        "message": "Refactor and unify client/server code in SslChannelProvider/SslContextProvider",
        "before_after_code_files": [
          "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "src/test/java/io/vertx/core/net/SSLHelperTest.java||src/test/java/io/vertx/core/net/SSLHelperTest.java",
          "src/test/java/io/vertx/it/SSLEngineTest.java||src/test/java/io/vertx/it/SSLEngineTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
            "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java"
          ],
          "candidate": [
            "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
            "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java": [
          "File: src/main/java/io/vertx/core/net/impl/SslChannelProvider.java -> src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import java.util.concurrent.Executor;",
          "28: import java.util.concurrent.TimeUnit;",
          "",
          "[Removed Lines]",
          "30: import static io.vertx.core.net.impl.SslContextProvider.createTrustAllTrustManager;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   }",
          "78:   public SslContext sslClientContext(String serverName, boolean useAlpn, boolean trustAll) {",
          "79:     int idx = idx(useAlpn);",
          "80:     if (serverName == null) {",
          "81:       if (sslContexts[idx] == null) {",
          "83:         sslContexts[idx] = context;",
          "84:       }",
          "85:       return sslContexts[idx];",
          "86:     } else {",
          "104:     }",
          "105:   }",
          "107:   public SslContext sslServerContext(boolean useAlpn) {",
          "111:     }",
          "113:   }",
          "",
          "[Removed Lines]",
          "82:         SslContext context = sslContextProvider.createClientContext(useAlpn, trustAll);",
          "87:       KeyManagerFactory kmf;",
          "88:       try {",
          "89:         kmf = sslContextProvider.resolveKeyManagerFactory(serverName);",
          "90:       } catch (Exception e) {",
          "91:         throw new VertxException(e);",
          "92:       }",
          "93:       TrustManager[] trustManagers;",
          "94:       if (trustAll) {",
          "95:         trustManagers = new TrustManager[] { createTrustAllTrustManager() };",
          "96:       } else {",
          "97:         try {",
          "98:           trustManagers = sslContextProvider.resolveTrustManagers(serverName);",
          "99:         } catch (Exception e) {",
          "100:           throw new VertxException(e);",
          "101:         }",
          "102:       }",
          "103:       return sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createClientContext(kmf, trustManagers, s, useAlpn));",
          "108:     int idx = idx(useAlpn);",
          "109:     if (sslContexts[idx] == null) {",
          "110:       sslContexts[idx] = sslContextProvider.createServerContext(useAlpn);",
          "112:     return sslContexts[idx];",
          "",
          "[Added Lines]",
          "77:     try {",
          "78:       return sslContext(serverName, useAlpn, false, trustAll);",
          "79:     } catch (Exception e) {",
          "80:       throw new VertxException(e);",
          "81:     }",
          "82:   }",
          "84:   public SslContext sslContext(String serverName, boolean useAlpn, boolean server, boolean trustAll) throws Exception {",
          "88:         SslContext context = sslContextProvider.createContext(server, null, null, null, useAlpn, trustAll);",
          "93:       KeyManagerFactory kmf = sslContextProvider.resolveKeyManagerFactory(serverName);",
          "94:       TrustManager[] trustManagers = trustAll ? null : sslContextProvider.resolveTrustManagers(serverName);",
          "95:       return sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createContext(server, kmf, trustManagers, s, useAlpn, trustAll));",
          "100:     try {",
          "101:       return sslContext(null, useAlpn, true, false);",
          "102:     } catch (Exception e) {",
          "103:       throw new VertxException(e);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:   public AsyncMapping<? super String, ? extends SslContext> serverNameMapping() {",
          "121:     return (AsyncMapping<String, SslContext>) (serverName, promise) -> {",
          "122:       workerPool.execute(() -> {",
          "143:         }",
          "144:       });",
          "145:       return promise;",
          "146:     };",
          "",
          "[Removed Lines]",
          "123:         if (serverName == null) {",
          "124:           promise.setSuccess(sslServerContext(useAlpn));",
          "125:         } else {",
          "126:           KeyManagerFactory kmf;",
          "127:           try {",
          "128:             kmf = sslContextProvider.resolveKeyManagerFactory(serverName);",
          "129:           } catch (Exception e) {",
          "130:             promise.setFailure(e);",
          "131:             return;",
          "132:           }",
          "133:           TrustManager[] trustManagers;",
          "134:           try {",
          "135:             trustManagers = sslContextProvider.resolveTrustManagers(serverName);",
          "136:           } catch (Exception e) {",
          "137:             promise.setFailure(e);",
          "138:             return;",
          "139:           }",
          "140:           int idx = idx(useAlpn);",
          "141:           SslContext sslContext = sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createServerContext(kmf, trustManagers, s, useAlpn));",
          "142:           promise.setSuccess(sslContext);",
          "",
          "[Added Lines]",
          "115:         SslContext sslContext;",
          "116:         try {",
          "117:           sslContext = sslContext(serverName, useAlpn, true, false);",
          "118:         } catch (Exception e) {",
          "119:           promise.setFailure(e);",
          "120:           return;",
          "122:         promise.setSuccess(sslContext);",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java": [
          "File: src/main/java/io/vertx/core/net/impl/SslContextProvider.java -> src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     this.crls = crls;",
          "67:   }",
          "73:     if (trustAll) {",
          "77:     }",
          "79:   }",
          "81:   public VertxSslContext createClientContext(",
          "",
          "[Removed Lines]",
          "69:   public VertxSslContext createClientContext(",
          "70:     boolean useAlpn,",
          "71:     boolean trustAll) {",
          "72:     TrustManager[] trustManagers = null;",
          "74:       trustManagers = new TrustManager[] { createTrustAllTrustManager() };",
          "75:     } else if (trustManagerFactory != null) {",
          "76:       trustManagers = trustManagerFactory.getTrustManagers();",
          "78:     return createClientContext(keyManagerFactory, trustManagers, null, useAlpn);",
          "",
          "[Added Lines]",
          "69:   public VertxSslContext createContext(boolean server,",
          "70:                                        KeyManagerFactory keyManagerFactory,",
          "71:                                        TrustManager[] trustManagers,",
          "72:                                        String serverName,",
          "73:                                        boolean useAlpn,",
          "74:                                        boolean trustAll) {",
          "75:     if (keyManagerFactory == null) {",
          "76:       keyManagerFactory = defaultKeyManagerFactory();",
          "77:     }",
          "79:       trustManagers = SslContextProvider.createTrustAllManager();",
          "80:     } else if (trustManagers == null) {",
          "81:       trustManagers = defaultTrustManagers();",
          "83:     if (server) {",
          "84:       return createServerContext(keyManagerFactory, trustManagers, serverName, useAlpn);",
          "85:     } else {",
          "86:       return createClientContext(keyManagerFactory, trustManagers, serverName, useAlpn);",
          "87:     }",
          "88:   }",
          "90:   public VertxSslContext createContext(boolean server, boolean useAlpn) {",
          "91:     return createContext(server, defaultKeyManagerFactory(), defaultTrustManagers(), null, useAlpn, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     }",
          "109:   }",
          "115:   public VertxSslContext createServerContext(KeyManagerFactory keyManagerFactory,",
          "116:                                         TrustManager[] trustManagers,",
          "117:                                         String serverName,",
          "",
          "[Removed Lines]",
          "111:   public VertxSslContext createServerContext(boolean useAlpn) {",
          "112:     return createServerContext(keyManagerFactory, trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null, null, useAlpn);",
          "113:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:     return null;",
          "153:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:   public TrustManager[] defaultTrustManagers() {",
          "165:     return trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null;",
          "166:   }",
          "168:   public TrustManagerFactory defaultTrustManagerFactory() {",
          "169:     return trustManagerFactory;",
          "170:   }",
          "172:   public KeyManagerFactory defaultKeyManagerFactory() {",
          "173:     return keyManagerFactory;",
          "174:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:     return trustMgrs;",
          "243:   }",
          "261:   }",
          "263:   public void configureEngine(SSLEngine engine, Set<String> enabledProtocols, String serverName, boolean client) {",
          "",
          "[Removed Lines]",
          "246:   static TrustManager createTrustAllTrustManager() {",
          "247:     return new X509TrustManager() {",
          "248:       @Override",
          "249:       public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "250:       }",
          "252:       @Override",
          "253:       public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "254:       }",
          "256:       @Override",
          "257:       public X509Certificate[] getAcceptedIssuers() {",
          "258:         return new X509Certificate[0];",
          "259:       }",
          "260:     };",
          "",
          "[Added Lines]",
          "266:   private static final TrustManager TRUST_ALL_MANAGER = new X509TrustManager() {",
          "267:     @Override",
          "268:     public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "269:     }",
          "271:     @Override",
          "272:     public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "273:     }",
          "275:     @Override",
          "276:     public X509Certificate[] getAcceptedIssuers() {",
          "277:       return new X509Certificate[0];",
          "278:     }",
          "279:   };",
          "282:   private static TrustManager[] createTrustAllManager() {",
          "283:     return new TrustManager[] { TRUST_ALL_MANAGER };",
          "",
          "---------------"
        ],
        "src/test/java/io/vertx/core/net/SSLHelperTest.java||src/test/java/io/vertx/core/net/SSLHelperTest.java": [
          "File: src/test/java/io/vertx/core/net/SSLHelperTest.java -> src/test/java/io/vertx/core/net/SSLHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     helper",
          "47:       .buildContextProvider(new SSLOptions().setKeyCertOptions(Cert.CLIENT_JKS.get()).setTrustOptions(Trust.SERVER_JKS.get()), (ContextInternal) vertx.getOrCreateContext())",
          "48:       .onComplete(onSuccess(provider -> {",
          "50:         assertEquals(new HashSet<>(Arrays.asList(expected)), new HashSet<>(ctx.cipherSuites()));",
          "51:         testComplete();",
          "52:     }));",
          "",
          "[Removed Lines]",
          "49:         SslContext ctx = provider.createClientContext(false, false);",
          "",
          "[Added Lines]",
          "49:         SslContext ctx = provider.createContext(false, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:         new HttpClientOptions().setOpenSslEngineOptions(new OpenSSLEngineOptions()).setPemKeyCertOptions(Cert.CLIENT_PEM.get()).setTrustOptions(Trust.SERVER_PEM.get()),",
          "61:       null);",
          "62:     helper.buildContextProvider(new SSLOptions().setKeyCertOptions(Cert.CLIENT_PEM.get()).setTrustOptions(Trust.SERVER_PEM.get()), (ContextInternal) vertx.getOrCreateContext()).onComplete(onSuccess(provider -> {",
          "64:       assertEquals(expected, new HashSet<>(ctx.cipherSuites()));",
          "65:       testComplete();",
          "66:     }));",
          "",
          "[Removed Lines]",
          "63:       SslContext ctx = provider.createClientContext(false, false);",
          "",
          "[Added Lines]",
          "63:       SslContext ctx = provider.createContext(false, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:     defaultHelper",
          "91:       .buildContextProvider(httpServerOptions.getSslOptions(), (ContextInternal) vertx.getOrCreateContext())",
          "92:       .onComplete(onSuccess(provider -> {",
          "95:         SSLSessionContext sslSessionContext = ctx.sessionContext();",
          "96:         assertTrue(sslSessionContext instanceof OpenSslServerSessionContext);",
          "",
          "[Removed Lines]",
          "93:         SslContext ctx = provider.createServerContext(false);",
          "",
          "[Added Lines]",
          "93:         SslContext ctx = provider.createContext(true, false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "185:   }",
          "187:   public SSLEngine createEngine(SslContextProvider provider) {",
          "189:   }",
          "190: }",
          "",
          "[Removed Lines]",
          "188:     return provider.createClientContext(false, false).newEngine(ByteBufAllocator.DEFAULT);",
          "",
          "[Added Lines]",
          "188:     return provider.createContext(false, false).newEngine(ByteBufAllocator.DEFAULT);",
          "",
          "---------------"
        ],
        "src/test/java/io/vertx/it/SSLEngineTest.java||src/test/java/io/vertx/it/SSLEngineTest.java": [
          "File: src/test/java/io/vertx/it/SSLEngineTest.java -> src/test/java/io/vertx/it/SSLEngineTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:       }",
          "106:     }",
          "107:     SslContextProvider provider = ((HttpServerImpl)server).sslContextProvider();",
          "109:     switch (expectedSslContext != null ? expectedSslContext : \"jdk\") {",
          "110:       case \"jdk\":",
          "111:         assertTrue(ctx.sessionContext().getClass().getName().equals(\"sun.security.ssl.SSLSessionContextImpl\"));",
          "",
          "[Removed Lines]",
          "108:     SslContext ctx = provider.createClientContext(false, false);",
          "",
          "[Added Lines]",
          "108:     SslContext ctx = provider.createContext(false, false);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3ea09cb9cbb7e58c48428d59c04162042c5ba3c",
      "candidate_info": {
        "commit_hash": "a3ea09cb9cbb7e58c48428d59c04162042c5ba3c",
        "repo": "eclipse-vertx/vert.x",
        "commit_url": "https://github.com/eclipse-vertx/vert.x/commit/a3ea09cb9cbb7e58c48428d59c04162042c5ba3c",
        "files": [
          "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
          "src/main/java/io/vertx/core/http/impl/Http1xUpgradeToH2CHandler.java",
          "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
          "src/main/java/io/vertx/core/http/impl/HttpServerWorker.java",
          "src/main/java/io/vertx/core/net/impl/ChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
          "src/main/java/io/vertx/core/net/impl/NetServerImpl.java",
          "src/main/java/io/vertx/core/net/impl/NetSocketImpl.java",
          "src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "src/test/java/io/vertx/core/net/SSLHelperTest.java",
          "src/test/java/io/vertx/it/SSLEngineTest.java"
        ],
        "message": "Refactor to encapsulate SslChannel creation and context caching in SslChannelProvider class and encapsulate SslContext creation in SslContextProvider.\n\nWhen a provider is created, KeyManagerFactory/TrustManagerFactory and certificate revocation list are loaded and cached. Dynamic KeyManagerFactory/TrustManagerFactory are loaded when a server name is provided.",
        "before_after_code_files": [
          "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java||src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
          "src/main/java/io/vertx/core/http/impl/Http1xUpgradeToH2CHandler.java||src/main/java/io/vertx/core/http/impl/Http1xUpgradeToH2CHandler.java",
          "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java||src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
          "src/main/java/io/vertx/core/http/impl/HttpServerWorker.java||src/main/java/io/vertx/core/http/impl/HttpServerWorker.java",
          "src/main/java/io/vertx/core/net/impl/ChannelProvider.java||src/main/java/io/vertx/core/net/impl/ChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/NetClientImpl.java||src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
          "src/main/java/io/vertx/core/net/impl/NetServerImpl.java||src/main/java/io/vertx/core/net/impl/NetServerImpl.java",
          "src/main/java/io/vertx/core/net/impl/NetSocketImpl.java||src/main/java/io/vertx/core/net/impl/NetSocketImpl.java",
          "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "src/test/java/io/vertx/core/net/SSLHelperTest.java||src/test/java/io/vertx/core/net/SSLHelperTest.java",
          "src/test/java/io/vertx/it/SSLEngineTest.java||src/test/java/io/vertx/it/SSLEngineTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
            "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
            "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
            "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java"
          ],
          "candidate": [
            "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
            "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
            "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
            "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java||src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java": [
          "File: src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java -> src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import io.vertx.core.impl.logging.LoggerFactory;",
          "33: import io.vertx.core.net.NetSocket;",
          "34: import io.vertx.core.net.impl.NetSocketImpl;",
          "36: import io.vertx.core.net.impl.VertxHandler;",
          "37: import io.vertx.core.spi.metrics.HttpServerMetrics;",
          "38: import io.vertx.core.spi.tracing.VertxTracer;",
          "",
          "[Removed Lines]",
          "35: import io.vertx.core.net.impl.SslContextProvider;",
          "",
          "[Added Lines]",
          "35: import io.vertx.core.net.impl.SslChannelProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   private final String serverOrigin;",
          "77:   private final Supplier<ContextInternal> streamContextSupplier;",
          "79:   private final TracingPolicy tracingPolicy;",
          "80:   private boolean requestFailed;",
          "",
          "[Removed Lines]",
          "78:   private final SslContextProvider sslContextProvider ;",
          "",
          "[Added Lines]",
          "78:   private final SslChannelProvider sslChannelProvider;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:   final HttpServerOptions options;",
          "93:   public Http1xServerConnection(Supplier<ContextInternal> streamContextSupplier,",
          "95:                                 HttpServerOptions options,",
          "96:                                 ChannelHandlerContext chctx,",
          "97:                                 ContextInternal context,",
          "",
          "[Removed Lines]",
          "94:                                 SslContextProvider sslContextProvider,",
          "",
          "[Added Lines]",
          "94:                                 SslChannelProvider sslChannelProvider,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "101:     this.serverOrigin = serverOrigin;",
          "102:     this.streamContextSupplier = streamContextSupplier;",
          "103:     this.options = options;",
          "105:     this.metrics = metrics;",
          "106:     this.handle100ContinueAutomatically = options.isHandle100ContinueAutomatically();",
          "107:     this.tracingPolicy = options.getTracingPolicy();",
          "",
          "[Removed Lines]",
          "104:     this.sslContextProvider = sslContextProvider;",
          "",
          "[Added Lines]",
          "104:     this.sslChannelProvider = sslChannelProvider;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "382:       }",
          "384:       pipeline.replace(\"handler\", \"handler\", VertxHandler.create(ctx -> {",
          "386:           @Override",
          "387:           protected void handleClosed() {",
          "388:             if (metrics != null) {",
          "",
          "[Removed Lines]",
          "385:         NetSocketImpl socket = new NetSocketImpl(context, ctx, sslContextProvider, metrics) {",
          "",
          "[Added Lines]",
          "385:         NetSocketImpl socket = new NetSocketImpl(context, ctx, sslChannelProvider, metrics) {",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/http/impl/Http1xUpgradeToH2CHandler.java||src/main/java/io/vertx/core/http/impl/Http1xUpgradeToH2CHandler.java": [
          "File: src/main/java/io/vertx/core/http/impl/Http1xUpgradeToH2CHandler.java -> src/main/java/io/vertx/core/http/impl/Http1xUpgradeToH2CHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import io.netty.handler.codec.http2.*;",
          "22: import io.netty.handler.timeout.IdleState;",
          "23: import io.netty.handler.timeout.IdleStateEvent;",
          "25: import io.vertx.core.net.impl.VertxHandler;",
          "27: import java.util.Map;",
          "",
          "[Removed Lines]",
          "24: import io.vertx.core.net.impl.SslContextProvider;",
          "",
          "[Added Lines]",
          "24: import io.vertx.core.net.impl.SslChannelProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: public class Http1xUpgradeToH2CHandler extends ChannelInboundHandlerAdapter {",
          "35:   private final HttpServerWorker initializer;",
          "37:   private VertxHttp2ConnectionHandler<Http2ServerConnection> handler;",
          "38:   private final boolean isCompressionSupported;",
          "39:   private final boolean isDecompressionSupported;",
          "42:     this.initializer = initializer;",
          "44:     this.isCompressionSupported = isCompressionSupported;",
          "45:     this.isDecompressionSupported = isDecompressionSupported;",
          "46:   }",
          "",
          "[Removed Lines]",
          "36:   private final SslContextProvider sslContextProvider;",
          "41:   Http1xUpgradeToH2CHandler(HttpServerWorker initializer, SslContextProvider sslContextProvider, boolean isCompressionSupported, boolean isDecompressionSupported) {",
          "43:     this.sslContextProvider = sslContextProvider;",
          "",
          "[Added Lines]",
          "36:   private final SslChannelProvider sslChannelProvider;",
          "41:   Http1xUpgradeToH2CHandler(HttpServerWorker initializer, SslChannelProvider sslChannelProvider, boolean isCompressionSupported, boolean isDecompressionSupported) {",
          "43:     this.sslChannelProvider = sslChannelProvider;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:           ctx.writeAndFlush(res);",
          "119:         }",
          "120:       } else {",
          "122:         ctx.fireChannelRead(msg);",
          "123:         ctx.pipeline().remove(this);",
          "124:       }",
          "",
          "[Removed Lines]",
          "121:         initializer.configureHttp1(ctx.pipeline(), sslContextProvider);",
          "",
          "[Added Lines]",
          "121:         initializer.configureHttp1(ctx.pipeline(), sslChannelProvider);",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/http/impl/HttpServerImpl.java||src/main/java/io/vertx/core/http/impl/HttpServerImpl.java": [
          "File: src/main/java/io/vertx/core/http/impl/HttpServerImpl.java -> src/main/java/io/vertx/core/http/impl/HttpServerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:   }",
          "139:   @Override",
          "141:     EventLoopContext connContext;",
          "142:     if (context instanceof EventLoopContext) {",
          "143:       connContext = (EventLoopContext) context;",
          "",
          "[Removed Lines]",
          "140:   protected BiConsumer<Channel, SslContextProvider> childHandler(ContextInternal context, SocketAddress address) {",
          "",
          "[Added Lines]",
          "140:   protected BiConsumer<Channel, SslChannelProvider> childHandler(ContextInternal context, SocketAddress address) {",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/http/impl/HttpServerWorker.java||src/main/java/io/vertx/core/http/impl/HttpServerWorker.java": [
          "File: src/main/java/io/vertx/core/http/impl/HttpServerWorker.java -> src/main/java/io/vertx/core/http/impl/HttpServerWorker.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import io.vertx.core.impl.ContextInternal;",
          "32: import io.vertx.core.impl.EventLoopContext;",
          "33: import io.vertx.core.impl.VertxInternal;",
          "38: import io.vertx.core.spi.metrics.HttpServerMetrics;",
          "40: import java.nio.charset.StandardCharsets;",
          "",
          "[Removed Lines]",
          "34: import io.vertx.core.net.impl.SslContextProvider;",
          "35: import io.vertx.core.net.impl.SslHandshakeCompletionHandler;",
          "36: import io.vertx.core.net.impl.VertxHandler;",
          "37: import io.vertx.core.net.impl.HAProxyMessageCompletionHandler;",
          "",
          "[Added Lines]",
          "34: import io.vertx.core.net.impl.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:   final EventLoopContext context;",
          "55:   private final Supplier<ContextInternal> streamContextSupplier;",
          "",
          "[Removed Lines]",
          "52: public class HttpServerWorker implements BiConsumer<Channel, SslContextProvider> {",
          "",
          "[Added Lines]",
          "49: public class HttpServerWorker implements BiConsumer<Channel, SslChannelProvider> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:   }",
          "102:   @Override",
          "104:     if (HAProxyMessageCompletionHandler.canUseProxyProtocol(options.isUseProxyProtocol())) {",
          "105:       IdleStateHandler idle;",
          "106:       io.netty.util.concurrent.Promise<Channel> p = ch.eventLoop().newPromise();",
          "",
          "[Removed Lines]",
          "103:   public void accept(Channel ch, SslContextProvider sslContextProvider) {",
          "",
          "[Added Lines]",
          "100:   public void accept(Channel ch, SslChannelProvider sslChannelProvider) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:           if (idle != null) {",
          "117:             ch.pipeline().remove(idle);",
          "118:           }",
          "120:         } else {",
          "122:           handleException(future.cause());",
          "123:         }",
          "124:       });",
          "125:     } else {",
          "127:     }",
          "128:   }",
          "131:     ChannelPipeline pipeline = ch.pipeline();",
          "134:       ChannelPromise p = ch.newPromise();",
          "135:       pipeline.addLast(\"handshaker\", new SslHandshakeCompletionHandler(p));",
          "136:       p.addListener(future -> {",
          "",
          "[Removed Lines]",
          "119:           configurePipeline(future.getNow(), sslContextProvider);",
          "126:       configurePipeline(ch, sslContextProvider);",
          "130:   private void configurePipeline(Channel ch, SslContextProvider sslContextProvider) {",
          "132:     if (sslContextProvider.isSsl()) {",
          "133:       pipeline.addLast(\"ssl\", sslContextProvider.createHandler(vertx, context));",
          "",
          "[Added Lines]",
          "116:           configurePipeline(future.getNow(), sslChannelProvider);",
          "123:       configurePipeline(ch, sslChannelProvider);",
          "127:   private void configurePipeline(Channel ch, SslChannelProvider sslChannelProvider) {",
          "129:     if (options.isSsl()) {",
          "130:       pipeline.addLast(\"ssl\", sslChannelProvider.createServerHandler());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141:             if (\"h2\".equals(protocol)) {",
          "142:               handleHttp2(ch);",
          "143:             } else {",
          "145:             }",
          "146:           } else {",
          "148:           }",
          "149:         } else {",
          "150:           handleException(future.cause());",
          "",
          "[Removed Lines]",
          "144:               handleHttp1(ch, sslContextProvider);",
          "147:             handleHttp1(ch, sslContextProvider);",
          "",
          "[Added Lines]",
          "141:               handleHttp1(ch, sslChannelProvider);",
          "144:             handleHttp1(ch, sslChannelProvider);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152:       });",
          "153:     } else {",
          "154:       if (disableH2C) {",
          "156:       } else {",
          "157:         IdleStateHandler idle;",
          "158:         int idleTimeout = options.getIdleTimeout();",
          "",
          "[Removed Lines]",
          "155:         handleHttp1(ch, sslContextProvider);",
          "",
          "[Added Lines]",
          "152:         handleHttp1(ch, sslChannelProvider);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "176:             if (h2c) {",
          "177:               handleHttp2(ctx.channel());",
          "178:             } else {",
          "180:             }",
          "181:           }",
          "",
          "[Removed Lines]",
          "179:               handleHttp1(ch, sslContextProvider);",
          "",
          "[Added Lines]",
          "176:               handleHttp1(ch, sslChannelProvider);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "201:     context.emit(cause, exceptionHandler);",
          "202:   }",
          "206:   }",
          "208:   private void sendServiceUnavailable(Channel ch) {",
          "",
          "[Removed Lines]",
          "204:   private void handleHttp1(Channel ch, SslContextProvider sslContextProvider) {",
          "205:     configureHttp1OrH2C(ch.pipeline(), sslContextProvider);",
          "",
          "[Added Lines]",
          "201:   private void handleHttp1(Channel ch, SslChannelProvider sslChannelProvider) {",
          "202:     configureHttp1OrH2C(ch.pipeline(), sslChannelProvider);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "258:     return handler;",
          "259:   }",
          "262:     if (logEnabled) {",
          "263:       pipeline.addLast(\"logging\", new LoggingHandler(options.getActivityLogDataFormat()));",
          "264:     }",
          "",
          "[Removed Lines]",
          "261:   private void configureHttp1OrH2C(ChannelPipeline pipeline, SslContextProvider sslContextProvider) {",
          "",
          "[Added Lines]",
          "258:   private void configureHttp1OrH2C(ChannelPipeline pipeline, SslChannelProvider sslChannelProvider) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "273:     if (options.isCompressionSupported()) {",
          "274:       pipeline.addLast(\"deflater\", new HttpChunkContentCompressor(compressionOptions));",
          "275:     }",
          "278:       pipeline.addLast(\"chunkedWriter\", new ChunkedWriteHandler());       // For large file / sendfile support",
          "279:     }",
          "",
          "[Removed Lines]",
          "276:     if (sslContextProvider.isSsl() || options.isCompressionSupported()) {",
          "",
          "[Added Lines]",
          "273:     if (options.isSsl() || options.isCompressionSupported()) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "284:       pipeline.addLast(\"idle\", new IdleStateHandler(readIdleTimeout, writeIdleTimeout, idleTimeout, options.getIdleTimeoutUnit()));",
          "285:     }",
          "286:     if (disableH2C) {",
          "288:     } else {",
          "290:     }",
          "291:   }",
          "294:     if (!server.requestAccept()) {",
          "295:       sendServiceUnavailable(pipeline.channel());",
          "296:       return;",
          "",
          "[Removed Lines]",
          "287:       configureHttp1(pipeline, sslContextProvider);",
          "289:       pipeline.addLast(\"h2c\", new Http1xUpgradeToH2CHandler(this, sslContextProvider, options.isCompressionSupported(), options.isDecompressionSupported()));",
          "293:   void configureHttp1(ChannelPipeline pipeline, SslContextProvider sslContextProvider) {",
          "",
          "[Added Lines]",
          "284:       configureHttp1(pipeline, sslChannelProvider);",
          "286:       pipeline.addLast(\"h2c\", new Http1xUpgradeToH2CHandler(this, sslChannelProvider, options.isCompressionSupported(), options.isDecompressionSupported()));",
          "290:   void configureHttp1(ChannelPipeline pipeline, SslChannelProvider sslChannelProvider) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "299:     VertxHandler<Http1xServerConnection> handler = VertxHandler.create(chctx -> {",
          "300:       Http1xServerConnection conn = new Http1xServerConnection(",
          "301:         streamContextSupplier,",
          "303:         options,",
          "304:         chctx,",
          "305:         context,",
          "",
          "[Removed Lines]",
          "302:         sslContextProvider,",
          "",
          "[Added Lines]",
          "299:         sslChannelProvider,",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/ChannelProvider.java||src/main/java/io/vertx/core/net/impl/ChannelProvider.java": [
          "File: src/main/java/io/vertx/core/net/impl/ChannelProvider.java -> src/main/java/io/vertx/core/net/impl/ChannelProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import io.vertx.core.net.ProxyType;",
          "27: import io.vertx.core.net.SocketAddress;",
          "30: import javax.net.ssl.SSLHandshakeException;",
          "31: import java.net.InetAddress;",
          "32: import java.net.InetSocketAddress;",
          "",
          "[Removed Lines]",
          "29: import javax.net.ssl.SSLEngine;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: public final class ChannelProvider {",
          "44:   private final Bootstrap bootstrap;",
          "46:   private final ContextInternal context;",
          "47:   private ProxyOptions proxyOptions;",
          "48:   private String applicationProtocol;",
          "49:   private Handler<Channel> handler;",
          "51:   public ChannelProvider(Bootstrap bootstrap,",
          "53:                          ContextInternal context) {",
          "54:     this.bootstrap = bootstrap;",
          "55:     this.context = context;",
          "",
          "[Removed Lines]",
          "45:   private final SslContextProvider sslContextProvider;",
          "52:                          SslContextProvider sslContextProvider,",
          "",
          "[Added Lines]",
          "44:   private final SslChannelProvider sslContextProvider;",
          "51:                          SslChannelProvider sslContextProvider,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:   private void initSSL(Handler<Channel> handler, SocketAddress peerAddress, String serverName, boolean ssl, boolean useAlpn, Channel ch, Promise<Channel> channelHandler) {",
          "109:     if (ssl) {",
          "111:       ChannelPipeline pipeline = ch.pipeline();",
          "112:       pipeline.addLast(\"ssl\", sslHandler);",
          "113:       pipeline.addLast(new ChannelInboundHandlerAdapter() {",
          "",
          "[Removed Lines]",
          "110:       SslHandler sslHandler = sslContextProvider.createSslHandler(context.owner(), peerAddress, serverName, useAlpn);",
          "",
          "[Added Lines]",
          "109:       SslHandler sslHandler = sslContextProvider.createClientSslHandler(peerAddress, serverName, useAlpn);",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/NetClientImpl.java||src/main/java/io/vertx/core/net/impl/NetClientImpl.java": [
          "File: src/main/java/io/vertx/core/net/impl/NetClientImpl.java -> src/main/java/io/vertx/core/net/impl/NetClientImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:   private final VertxInternal vertx;",
          "71:   private final NetClientOptions options;",
          "72:   private final SSLHelper sslHelper;",
          "74:   private final ChannelGroup channelGroup;",
          "75:   private final TCPMetrics metrics;",
          "76:   private final CloseFuture closeFuture;",
          "",
          "[Removed Lines]",
          "73:   private final AtomicReference<Future<SslContextProvider>> sslContextProvider = new AtomicReference<>();",
          "",
          "[Added Lines]",
          "73:   private final AtomicReference<Future<SslChannelProvider>> sslChannelProvider = new AtomicReference<>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:   @Override",
          "182:   public Future<Void> updateSSLOptions(SSLOptions options) {",
          "185:     return fut.mapEmpty();",
          "186:   }",
          "",
          "[Removed Lines]",
          "183:     Future<SslContextProvider> fut = sslHelper.init(new SSLOptions(options), vertx.getOrCreateContext());",
          "184:     fut.onSuccess(v -> sslContextProvider.set(fut));",
          "",
          "[Added Lines]",
          "183:     Future<SslChannelProvider> fut = sslHelper.buildChannelProvider(new SSLOptions(options), vertx.getOrCreateContext());",
          "184:     fut.onSuccess(v -> sslChannelProvider.set(fut));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245:     if (closeFuture.isClosed()) {",
          "246:       connectHandler.fail(new IllegalStateException(\"Client is closed\"));",
          "247:     } else {",
          "249:       while (true) {",
          "251:         if (fut == null) {",
          "254:             break;",
          "255:           }",
          "256:         } else {",
          "",
          "[Removed Lines]",
          "248:       Future<SslContextProvider> fut;",
          "250:         fut = sslContextProvider.get();",
          "252:           fut = sslHelper.init(options.getSslOptions(), context);",
          "253:           if (sslContextProvider.compareAndSet(null, fut)) {",
          "",
          "[Added Lines]",
          "248:       Future<SslChannelProvider> fut;",
          "250:         fut = sslChannelProvider.get();",
          "252:           fut = sslHelper.buildChannelProvider(options.getSslOptions(), context);",
          "253:           if (sslChannelProvider.compareAndSet(null, fut)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "270:   private void connectInternal2(ProxyOptions proxyOptions,",
          "271:                               SocketAddress remoteAddress,",
          "272:                               SocketAddress peerAddress,",
          "274:                               String serverName,",
          "275:                               boolean ssl,",
          "276:                               boolean useAlpn,",
          "",
          "[Removed Lines]",
          "273:                               SslContextProvider sslContextProvider,",
          "",
          "[Added Lines]",
          "273:                               SslChannelProvider sslChannelProvider,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "289:       vertx.transport().configure(options, remoteAddress.isDomainSocket(), bootstrap);",
          "292:         .proxyOptions(proxyOptions);",
          "296:       io.netty.util.concurrent.Future<Channel> fut = channelProvider.connect(remoteAddress, peerAddress, serverName, ssl, useAlpn);",
          "297:       fut.addListener((GenericFutureListener<io.netty.util.concurrent.Future<Channel>>) future -> {",
          "",
          "[Removed Lines]",
          "291:       ChannelProvider channelProvider = new ChannelProvider(bootstrap, sslContextProvider, context)",
          "294:       channelProvider.handler(ch -> connected(context, ch, connectHandler, remoteAddress, sslContextProvider, channelProvider.applicationProtocol(), registerWriteHandlers));",
          "",
          "[Added Lines]",
          "291:       ChannelProvider channelProvider = new ChannelProvider(bootstrap, sslChannelProvider, context)",
          "294:       channelProvider.handler(ch -> connected(context, ch, connectHandler, remoteAddress, sslChannelProvider, channelProvider.applicationProtocol(), registerWriteHandlers));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "313:         }",
          "314:       });",
          "315:     } else {",
          "317:     }",
          "318:   }",
          "321:     channelGroup.add(ch);",
          "322:     initChannel(ch.pipeline());",
          "324:     if (registerWriteHandlers) {",
          "325:       handler.removeHandler(NetSocketImpl::unregisterEventBusHandler);",
          "326:     }",
          "",
          "[Removed Lines]",
          "316:       eventLoop.execute(() -> connectInternal2(proxyOptions, remoteAddress, peerAddress, sslContextProvider, serverName, ssl, useAlpn, registerWriteHandlers, connectHandler, context, remainingAttempts));",
          "320:   private void connected(ContextInternal context, Channel ch, Promise<NetSocket> connectHandler, SocketAddress remoteAddress, SslContextProvider sslContextProvider, String applicationLayerProtocol, boolean registerWriteHandlers) {",
          "323:     VertxHandler<NetSocketImpl> handler = VertxHandler.create(ctx -> new NetSocketImpl(context, ctx, remoteAddress, sslContextProvider, metrics, applicationLayerProtocol));",
          "",
          "[Added Lines]",
          "316:       eventLoop.execute(() -> connectInternal2(proxyOptions, remoteAddress, peerAddress, sslChannelProvider, serverName, ssl, useAlpn, registerWriteHandlers, connectHandler, context, remainingAttempts));",
          "320:   private void connected(ContextInternal context, Channel ch, Promise<NetSocket> connectHandler, SocketAddress remoteAddress, SslChannelProvider sslChannelProvider, String applicationLayerProtocol, boolean registerWriteHandlers) {",
          "323:     VertxHandler<NetSocketImpl> handler = VertxHandler.create(ctx -> new NetSocketImpl(context, ctx, remoteAddress, sslChannelProvider, metrics, applicationLayerProtocol));",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/NetServerImpl.java||src/main/java/io/vertx/core/net/impl/NetServerImpl.java": [
          "File: src/main/java/io/vertx/core/net/impl/NetServerImpl.java -> src/main/java/io/vertx/core/net/impl/NetServerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:   }",
          "123:   @Override",
          "125:     return new NetServerWorker(context, handler, exceptionHandler);",
          "126:   }",
          "",
          "[Removed Lines]",
          "124:   protected BiConsumer<Channel, SslContextProvider> childHandler(ContextInternal context, SocketAddress socketAddress) {",
          "",
          "[Added Lines]",
          "124:   protected BiConsumer<Channel, SslChannelProvider> childHandler(ContextInternal context, SocketAddress socketAddress) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:     return !isListening();",
          "169:   }",
          "173:     private final ContextInternal context;",
          "174:     private final Handler<NetSocket> connectionHandler;",
          "",
          "[Removed Lines]",
          "171:   private class NetServerWorker implements BiConsumer<Channel, SslContextProvider> {",
          "",
          "[Added Lines]",
          "171:   private class NetServerWorker implements BiConsumer<Channel, SslChannelProvider> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:     }",
          "183:     @Override",
          "185:       if (!NetServerImpl.this.accept()) {",
          "186:         ch.close();",
          "187:         return;",
          "",
          "[Removed Lines]",
          "184:     public void accept(Channel ch, SslContextProvider sslContextProvider) {",
          "",
          "[Added Lines]",
          "184:     public void accept(Channel ch, SslChannelProvider sslChannelProvider) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:             if (idle != null) {",
          "202:               ch.pipeline().remove(idle);",
          "203:             }",
          "205:           } else {",
          "207:             handleException(future.cause());",
          "208:           }",
          "209:         });",
          "210:       } else {",
          "212:       }",
          "213:     }",
          "218:         ChannelPromise p = ch.newPromise();",
          "219:         ch.pipeline().addLast(\"handshaker\", new SslHandshakeCompletionHandler(p));",
          "220:         p.addListener(future -> {",
          "221:           if (future.isSuccess()) {",
          "223:           } else {",
          "224:             handleException(future.cause());",
          "225:           }",
          "226:         });",
          "227:       } else {",
          "229:       }",
          "230:     }",
          "",
          "[Removed Lines]",
          "204:             configurePipeline(future.getNow(), sslContextProvider);",
          "211:         configurePipeline(ch, sslContextProvider);",
          "215:     private void configurePipeline(Channel ch, SslContextProvider sslContextProvider) {",
          "216:       if (sslContextProvider.isSsl()) {",
          "217:         ch.pipeline().addLast(\"ssl\", sslContextProvider.createHandler(vertx, context));",
          "222:             connected(ch, sslContextProvider);",
          "228:         connected(ch, sslContextProvider);",
          "",
          "[Added Lines]",
          "204:             configurePipeline(future.getNow(), sslChannelProvider);",
          "211:         configurePipeline(ch, sslChannelProvider);",
          "215:     private void configurePipeline(Channel ch, SslChannelProvider sslChannelProvider) {",
          "216:       if (options.isSsl()) {",
          "217:         ch.pipeline().addLast(\"ssl\", sslChannelProvider.createServerHandler());",
          "222:             connected(ch, sslChannelProvider);",
          "228:         connected(ch, sslChannelProvider);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235:       }",
          "236:     }",
          "240:       TCPMetrics<?> metrics = getMetrics();",
          "242:       handler.removeHandler(NetSocketImpl::unregisterEventBusHandler);",
          "243:       handler.addHandler(conn -> {",
          "244:         if (metrics != null) {",
          "",
          "[Removed Lines]",
          "238:     private void connected(Channel ch, SslContextProvider sslContextProvider) {",
          "239:       NetServerImpl.this.initChannel(ch.pipeline(), sslContextProvider.isSsl());",
          "241:       VertxHandler<NetSocketImpl> handler = VertxHandler.create(ctx -> new NetSocketImpl(context, ctx, sslContextProvider, metrics));",
          "",
          "[Added Lines]",
          "238:     private void connected(Channel ch, SslChannelProvider sslChannelProvider) {",
          "239:       NetServerImpl.this.initChannel(ch.pipeline(), options.isSsl());",
          "241:       VertxHandler<NetSocketImpl> handler = VertxHandler.create(ctx -> new NetSocketImpl(context, ctx, sslChannelProvider, metrics));",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/NetSocketImpl.java||src/main/java/io/vertx/core/net/impl/NetSocketImpl.java": [
          "File: src/main/java/io/vertx/core/net/impl/NetSocketImpl.java -> src/main/java/io/vertx/core/net/impl/NetSocketImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   private static final Logger log = LoggerFactory.getLogger(NetSocketImpl.class);",
          "54:   private final String writeHandlerID;",
          "56:   private final SocketAddress remoteAddress;",
          "57:   private final TCPMetrics metrics;",
          "58:   private final InboundBuffer<Object> pending;",
          "",
          "[Removed Lines]",
          "55:   private final SslContextProvider sslContextProvider;",
          "",
          "[Added Lines]",
          "55:   private final SslChannelProvider sslChannelProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   private Handler<Object> messageHandler;",
          "65:   private Handler<Object> eventHandler;",
          "69:   }",
          "71:   public NetSocketImpl(ContextInternal context,",
          "72:                        ChannelHandlerContext channel,",
          "73:                        SocketAddress remoteAddress,",
          "75:                        TCPMetrics metrics,",
          "76:                        String negotiatedApplicationLayerProtocol) {",
          "77:     super(context, channel);",
          "79:     this.writeHandlerID = \"__vertx.net.\" + UUID.randomUUID().toString();",
          "80:     this.remoteAddress = remoteAddress;",
          "81:     this.metrics = metrics;",
          "",
          "[Removed Lines]",
          "67:   public NetSocketImpl(ContextInternal context, ChannelHandlerContext channel, SslContextProvider sslContextProvider, TCPMetrics metrics) {",
          "68:     this(context, channel, null, sslContextProvider, metrics, null);",
          "74:                        SslContextProvider sslContextProvider,",
          "78:     this.sslContextProvider = sslContextProvider;",
          "",
          "[Added Lines]",
          "67:   public NetSocketImpl(ContextInternal context, ChannelHandlerContext channel, SslChannelProvider sslChannelProvider, TCPMetrics metrics) {",
          "68:     this(context, channel, null, sslChannelProvider, metrics, null);",
          "74:                        SslChannelProvider sslChannelProvider,",
          "78:     this.sslChannelProvider = sslChannelProvider;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "351:         }",
          "352:       });",
          "353:       if (remoteAddress != null) {",
          "355:       } else {",
          "357:       }",
          "358:       chctx.pipeline().addFirst(\"ssl\", sslHandler);",
          "359:     }",
          "",
          "[Removed Lines]",
          "354:         sslHandler = sslContextProvider.createSslHandler(vertx, remoteAddress, serverName, false);",
          "356:         sslHandler = sslContextProvider.createHandler(vertx, context);",
          "",
          "[Added Lines]",
          "354:         sslHandler = sslChannelProvider.createClientSslHandler(remoteAddress, serverName, false);",
          "356:         sslHandler = sslChannelProvider.createServerHandler();",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java": [
          "File: src/main/java/io/vertx/core/net/impl/SSLHelper.java -> src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import io.vertx.core.buffer.Buffer;",
          "20: import io.vertx.core.http.ClientAuth;",
          "21: import io.vertx.core.impl.ContextInternal;",
          "25: import io.vertx.core.net.ClientOptionsBase;",
          "26: import io.vertx.core.net.JdkSSLEngineOptions;",
          "27: import io.vertx.core.net.KeyCertOptions;",
          "",
          "[Removed Lines]",
          "22: import io.vertx.core.impl.VertxInternal;",
          "23: import io.vertx.core.impl.logging.Logger;",
          "24: import io.vertx.core.impl.logging.LoggerFactory;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: import javax.net.ssl.*;",
          "39: import java.io.ByteArrayInputStream;",
          "41: import java.security.cert.CRL;",
          "43: import java.security.cert.CertificateFactory;",
          "45: import java.util.*;",
          "46: import java.util.function.Function;",
          "47: import java.util.function.Supplier;",
          "48: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "40: import java.security.KeyStore;",
          "42: import java.security.cert.CertificateException;",
          "44: import java.security.cert.X509Certificate;",
          "49: import java.util.stream.Stream;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:     return engineOptions;",
          "104:   }",
          "108:   private final boolean ssl;",
          "114:   private final String endpointIdentificationAlgorithm;",
          "115:   private final SSLEngineOptions sslEngineOptions;",
          "118:   public SSLHelper(TCPSSLOptions options, List<String> applicationProtocols) {",
          "119:     this.sslEngineOptions = options.getSslEngineOptions();",
          "",
          "[Removed Lines]",
          "106:   private static final Logger log = LoggerFactory.getLogger(SSLHelper.class);",
          "109:   final boolean sni;",
          "110:   final boolean trustAll;",
          "111:   final ClientAuth clientAuth;",
          "112:   final boolean client;",
          "113:   final boolean useAlpn;",
          "116:   final List<String> applicationProtocols;",
          "",
          "[Added Lines]",
          "100:   private final boolean sni;",
          "101:   private final boolean trustAll;",
          "102:   private final ClientAuth clientAuth;",
          "103:   private final boolean client;",
          "104:   private final boolean useAlpn;",
          "107:   private final List<String> applicationProtocols;",
          "108:   private KeyManagerFactory keyManagerFactory;",
          "109:   private TrustManagerFactory trustManagerFactory;",
          "110:   private Function<String, X509KeyManager> keyManagerMapper;",
          "111:   private Function<String, TrustManager[]> trustManagerMapper;",
          "112:   private List<CRL> crls;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:     this.applicationProtocols = applicationProtocols;",
          "128:   }",
          "158:     private final Supplier<SslContextFactory> supplier;",
          "159:     private final boolean useWorkerPool;",
          "162:       this.supplier = supplier;",
          "163:       this.useWorkerPool = useWorkerPool;",
          "164:     }",
          "165:   }",
          "",
          "[Removed Lines]",
          "130:   public boolean isSSL() {",
          "131:     return ssl;",
          "132:   }",
          "134:   public boolean isSNI() {",
          "135:     return sni;",
          "136:   }",
          "138:   void configureEngine(SSLEngine engine, Set<String> enabledProtocols, String serverName) {",
          "139:     Set<String> protocols = new LinkedHashSet<>(enabledProtocols);",
          "140:     protocols.retainAll(Arrays.asList(engine.getSupportedProtocols()));",
          "141:     if (protocols.isEmpty()) {",
          "142:       log.warn(\"no SSL/TLS protocols are enabled due to configuration restrictions\");",
          "143:     }",
          "144:     engine.setEnabledProtocols(protocols.toArray(new String[protocols.size()]));",
          "145:     if (client && !endpointIdentificationAlgorithm.isEmpty()) {",
          "146:       SSLParameters sslParameters = engine.getSSLParameters();",
          "147:       sslParameters.setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm);",
          "148:       engine.setSSLParameters(sslParameters);",
          "149:     }",
          "150:     if (serverName != null) {",
          "151:       SSLParameters sslParameters = engine.getSSLParameters();",
          "152:       sslParameters.setServerNames(Collections.singletonList(new SNIHostName(serverName)));",
          "153:       engine.setSSLParameters(sslParameters);",
          "154:     }",
          "155:   }",
          "157:   private static class EngineConfig {",
          "161:     public EngineConfig(Supplier<SslContextFactory> supplier, boolean useWorkerPool) {",
          "",
          "[Added Lines]",
          "126:   private class EngineConfig {",
          "128:     private final SSLOptions sslOptions;",
          "132:     public EngineConfig(SSLOptions sslOptions, Supplier<SslContextFactory> supplier, boolean useWorkerPool) {",
          "133:       this.sslOptions = sslOptions;",
          "138:     SslContextProvider sslContextProvider() {",
          "139:       return new SslContextProvider(",
          "140:         clientAuth,",
          "141:         endpointIdentificationAlgorithm,",
          "142:         applicationProtocols,",
          "143:         sslOptions.getEnabledCipherSuites(),",
          "144:         sslOptions.getEnabledSecureTransportProtocols(),",
          "145:         keyManagerFactory,",
          "146:         keyManagerMapper,",
          "147:         trustManagerFactory,",
          "148:         trustManagerMapper,",
          "149:         crls,",
          "150:         supplier);",
          "151:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "175:   }",
          "",
          "[Removed Lines]",
          "173:   public Future<SslContextProvider> init(SSLOptions sslOptions, ContextInternal ctx) {",
          "174:     return initInternal(new SSLOptions(sslOptions), ctx);",
          "",
          "[Added Lines]",
          "160:   public Future<SslContextProvider> buildContextProvider(SSLOptions sslOptions, ContextInternal ctx) {",
          "161:     return build(new SSLOptions(sslOptions), ctx).map(EngineConfig::sslContextProvider);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "184:     Future<EngineConfig> sslContextFactorySupplier;",
          "185:     KeyCertOptions keyCertOptions = sslOptions.getKeyCertOptions();",
          "186:     TrustOptions trustOptions = sslOptions.getTrustOptions();",
          "",
          "[Removed Lines]",
          "183:   private Future<SslContextProvider> initInternal(SSLOptions sslOptions, ContextInternal ctx) {",
          "",
          "[Added Lines]",
          "170:   public Future<SslChannelProvider> buildChannelProvider(SSLOptions sslOptions, ContextInternal ctx) {",
          "171:     return build(new SSLOptions(sslOptions), ctx).map(c -> new SslChannelProvider(",
          "172:       c.sslContextProvider(), c.sslOptions.getSslHandshakeTimeout(), c.sslOptions.getSslHandshakeTimeoutUnit(), sni,",
          "173:       trustAll,",
          "174:       useAlpn,",
          "175:       ctx.owner().getInternalWorkerPool().executor(),",
          "176:       c.useWorkerPool",
          "177:     ));",
          "178:   }",
          "186:   private Future<EngineConfig> build(SSLOptions sslOptions, ContextInternal ctx) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "188:       Promise<EngineConfig> promise = Promise.promise();",
          "189:       sslContextFactorySupplier = promise.future();",
          "190:       ctx.<Void>executeBlockingInternal(p -> {",
          "192:         try {",
          "195:         } catch (Exception e) {",
          "196:           p.fail(e);",
          "197:           return;",
          "198:         }",
          "200:           p.complete();",
          "201:         } else {",
          "202:           p.fail(\"Key/certificate is mandatory for SSL\");",
          "",
          "[Removed Lines]",
          "191:         KeyManagerFactory kmf;",
          "193:           getTrustMgrFactory(ctx.owner(), sslOptions.getTrustOptions(), sslOptions.getCrlPaths(), sslOptions.getCrlValues(), null, false);",
          "194:           kmf = getKeyMgrFactory(ctx.owner(), sslOptions.getKeyCertOptions());",
          "199:         if (client || kmf != null) {",
          "",
          "[Added Lines]",
          "195:           if (sslOptions.getKeyCertOptions() != null) {",
          "196:             keyManagerFactory = sslOptions.getKeyCertOptions().getKeyManagerFactory(ctx.owner());",
          "197:             keyManagerMapper = sslOptions.getKeyCertOptions().keyManagerMapper(ctx.owner());",
          "198:           }",
          "199:           if (sslOptions.getTrustOptions() != null) {",
          "200:             trustManagerFactory = sslOptions.getTrustOptions().getTrustManagerFactory(ctx.owner());",
          "201:             trustManagerMapper = sslOptions.getTrustOptions().trustManagerMapper(ctx.owner());",
          "202:           }",
          "203:           crls = new ArrayList<>();",
          "204:           List<Buffer> tmp = new ArrayList<>();",
          "205:           if (sslOptions.getCrlPaths() != null) {",
          "206:             tmp.addAll(sslOptions.getCrlPaths()",
          "207:               .stream()",
          "208:               .map(path -> ctx.owner().resolveFile(path).getAbsolutePath())",
          "209:               .map(ctx.owner().fileSystem()::readFileBlocking)",
          "210:               .collect(Collectors.toList()));",
          "211:           }",
          "212:           if (sslOptions.getCrlValues() != null) {",
          "213:             tmp.addAll(sslOptions.getCrlValues());",
          "214:           }",
          "215:           CertificateFactory certificatefactory = CertificateFactory.getInstance(\"X.509\");",
          "216:           for (Buffer crlValue : tmp) {",
          "217:             crls.addAll(certificatefactory.generateCRLs(new ByteArrayInputStream(crlValue.getBytes())));",
          "218:           }",
          "223:         if (client || sslOptions.getKeyCertOptions() != null) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "212:           p.fail(e);",
          "213:           return;",
          "214:         }",
          "216:       })).onComplete(promise);",
          "217:     } else {",
          "239:     }",
          "345:   }",
          "346: }",
          "",
          "[Removed Lines]",
          "215:         p.complete(new EngineConfig(supplier, useWorkerPool));",
          "218:       sslContextFactorySupplier = Future.succeededFuture(new EngineConfig(() -> new DefaultSslContextFactory(SslProvider.JDK, false), SSLEngineOptions.DEFAULT_USE_WORKER_POOL));",
          "219:     }",
          "220:     return sslContextFactorySupplier.map(sslp -> new SslContextProvider(this, sslOptions, sslp.useWorkerPool, sslp.supplier));",
          "221:   }",
          "223:   static KeyManagerFactory getKeyMgrFactory(VertxInternal vertx, KeyCertOptions keyCertOptions, String serverName) throws Exception {",
          "224:     KeyManagerFactory kmf = null;",
          "225:     if (serverName != null) {",
          "226:       X509KeyManager mgr = keyCertOptions.keyManagerMapper(vertx).apply(serverName);",
          "227:       if (mgr != null) {",
          "228:         String keyStoreType = KeyStore.getDefaultType();",
          "229:         KeyStore ks = KeyStore.getInstance(keyStoreType);",
          "230:         ks.load(null, null);",
          "231:         ks.setKeyEntry(\"key\", mgr.getPrivateKey(null), new char[0], mgr.getCertificateChain(null));",
          "232:         String keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm();",
          "233:         kmf = KeyManagerFactory.getInstance(keyAlgorithm);",
          "234:         kmf.init(ks, new char[0]);",
          "235:       }",
          "236:     }",
          "237:     if (kmf == null) {",
          "238:       kmf = getKeyMgrFactory(vertx, keyCertOptions);",
          "240:     return kmf;",
          "241:   }",
          "243:   private static KeyManagerFactory getKeyMgrFactory(VertxInternal vertx, KeyCertOptions keyCertOptions) throws Exception {",
          "244:     return keyCertOptions == null ? null : keyCertOptions.getKeyManagerFactory(vertx);",
          "245:   }",
          "247:   static TrustManagerFactory getTrustMgrFactory(VertxInternal vertx, TrustOptions trustOptions, List<String> crlPaths, List<Buffer> crlValues, String serverName, boolean trustAll) throws Exception {",
          "248:     TrustManager[] mgrs = null;",
          "249:     if (trustAll) {",
          "250:       mgrs = new TrustManager[]{createTrustAllTrustManager()};",
          "251:     } else if (trustOptions != null) {",
          "252:       if (serverName != null) {",
          "253:         Function<String, TrustManager[]> mapper = trustOptions.trustManagerMapper(vertx);",
          "254:         if (mapper != null) {",
          "255:           mgrs = mapper.apply(serverName);",
          "256:         }",
          "257:         if (mgrs == null) {",
          "258:           TrustManagerFactory fact = trustOptions.getTrustManagerFactory(vertx);",
          "259:           if (fact != null) {",
          "260:             mgrs = fact.getTrustManagers();",
          "261:           }",
          "262:         }",
          "263:       } else {",
          "264:         TrustManagerFactory fact = trustOptions.getTrustManagerFactory(vertx);",
          "265:         if (fact != null) {",
          "266:           mgrs = fact.getTrustManagers();",
          "267:         }",
          "268:       }",
          "269:     }",
          "270:     if (mgrs == null) {",
          "271:       return null;",
          "272:     }",
          "273:     if (crlPaths != null && crlValues != null && (crlPaths.size() > 0 || crlValues.size() > 0)) {",
          "274:       Stream<Buffer> tmp = crlPaths.",
          "275:         stream().",
          "276:         map(path -> vertx.resolveFile(path).getAbsolutePath()).",
          "277:         map(vertx.fileSystem()::readFileBlocking);",
          "278:       tmp = Stream.concat(tmp, crlValues.stream());",
          "279:       CertificateFactory certificatefactory = CertificateFactory.getInstance(\"X.509\");",
          "280:       ArrayList<CRL> crls = new ArrayList<>();",
          "281:       for (Buffer crlValue : tmp.collect(Collectors.toList())) {",
          "282:         crls.addAll(certificatefactory.generateCRLs(new ByteArrayInputStream(crlValue.getBytes())));",
          "283:       }",
          "284:       mgrs = createUntrustRevokedCertTrustManager(mgrs, crls);",
          "285:     }",
          "286:     return new VertxTrustManagerFactory(mgrs);",
          "287:   }",
          "290:   Proxy the specified trust managers with an implementation checking first the provided certificates",
          "291:   against the Certificate Revocation List (crl) before delegating to the original trust managers.",
          "293:   static TrustManager[] createUntrustRevokedCertTrustManager(TrustManager[] trustMgrs, ArrayList<CRL> crls) {",
          "294:     trustMgrs = trustMgrs.clone();",
          "295:     for (int i = 0;i < trustMgrs.length;i++) {",
          "296:       TrustManager trustMgr = trustMgrs[i];",
          "297:       if (trustMgr instanceof X509TrustManager) {",
          "298:         X509TrustManager x509TrustManager = (X509TrustManager) trustMgr;",
          "299:         trustMgrs[i] = new X509TrustManager() {",
          "300:           @Override",
          "301:           public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "302:             checkRevoked(x509Certificates);",
          "303:             x509TrustManager.checkClientTrusted(x509Certificates, s);",
          "304:           }",
          "305:           @Override",
          "306:           public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "307:             checkRevoked(x509Certificates);",
          "308:             x509TrustManager.checkServerTrusted(x509Certificates, s);",
          "309:           }",
          "310:           private void checkRevoked(X509Certificate[] x509Certificates) throws CertificateException {",
          "311:             for (X509Certificate cert : x509Certificates) {",
          "312:               for (CRL crl : crls) {",
          "313:                 if (crl.isRevoked(cert)) {",
          "314:                   throw new CertificateException(\"Certificate revoked\");",
          "315:                 }",
          "316:               }",
          "317:             }",
          "318:           }",
          "319:           @Override",
          "320:           public X509Certificate[] getAcceptedIssuers() {",
          "321:             return x509TrustManager.getAcceptedIssuers();",
          "322:           }",
          "323:         };",
          "324:       }",
          "325:     }",
          "326:     return trustMgrs;",
          "327:   }",
          "330:   private static TrustManager createTrustAllTrustManager() {",
          "331:     return new X509TrustManager() {",
          "332:       @Override",
          "333:       public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "334:       }",
          "336:       @Override",
          "337:       public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "338:       }",
          "340:       @Override",
          "341:       public X509Certificate[] getAcceptedIssuers() {",
          "342:         return new X509Certificate[0];",
          "343:       }",
          "344:     };",
          "",
          "[Added Lines]",
          "239:         p.complete(new EngineConfig(sslOptions, supplier, useWorkerPool));",
          "242:       sslContextFactorySupplier = Future.succeededFuture(new EngineConfig(sslOptions, () -> new DefaultSslContextFactory(SslProvider.JDK, false), SSLEngineOptions.DEFAULT_USE_WORKER_POOL));",
          "244:     return sslContextFactorySupplier;",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java": [
          "File: src/main/java/io/vertx/core/net/impl/SslChannelProvider.java -> src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: package io.vertx.core.net.impl;",
          "13: import io.netty.buffer.ByteBufAllocator;",
          "14: import io.netty.channel.ChannelHandler;",
          "15: import io.netty.handler.ssl.SniHandler;",
          "16: import io.netty.handler.ssl.SslContext;",
          "17: import io.netty.handler.ssl.SslHandler;",
          "18: import io.netty.util.AsyncMapping;",
          "19: import io.netty.util.concurrent.ImmediateExecutor;",
          "20: import io.vertx.core.net.SocketAddress;",
          "22: import javax.net.ssl.KeyManagerFactory;",
          "23: import javax.net.ssl.TrustManager;",
          "24: import java.util.Map;",
          "25: import java.util.concurrent.ConcurrentHashMap;",
          "26: import java.util.concurrent.Executor;",
          "27: import java.util.concurrent.TimeUnit;",
          "34: public class SslChannelProvider {",
          "36:   private final long sslHandshakeTimeout;",
          "37:   private final TimeUnit sslHandshakeTimeoutUnit;",
          "38:   private final Executor workerPool;",
          "39:   private final boolean useWorkerPool;",
          "40:   private final boolean sni;",
          "41:   private final boolean useAlpn;",
          "42:   private final boolean trustAll;",
          "43:   private final SslContextProvider sslContextProvider;",
          "44:   private final SslContext[] sslContexts = new SslContext[2];",
          "45:   private final Map<String, SslContext>[] sslContextMaps = new Map[]{",
          "46:     new ConcurrentHashMap<>(), new ConcurrentHashMap<>()",
          "47:   };",
          "49:   public SslChannelProvider(SslContextProvider sslContextProvider,",
          "50:                             long sslHandshakeTimeout,",
          "51:                             TimeUnit sslHandshakeTimeoutUnit,",
          "52:                             boolean sni,",
          "53:                             boolean trustAll,",
          "54:                             boolean useAlpn,",
          "55:                             Executor workerPool,",
          "56:                             boolean useWorkerPool) {",
          "57:     this.workerPool = workerPool;",
          "58:     this.useWorkerPool = useWorkerPool;",
          "59:     this.useAlpn = useAlpn;",
          "60:     this.sni = sni;",
          "61:     this.trustAll = trustAll;",
          "62:     this.sslHandshakeTimeout = sslHandshakeTimeout;",
          "63:     this.sslHandshakeTimeoutUnit = sslHandshakeTimeoutUnit;",
          "64:     this.sslContextProvider = sslContextProvider;",
          "65:   }",
          "67:   public SslContextProvider sslContextProvider() {",
          "68:     return sslContextProvider;",
          "69:   }",
          "71:   public SslContext sslClientContext(String serverName, boolean useAlpn) {",
          "72:     return sslClientContext(serverName, useAlpn, trustAll);",
          "73:   }",
          "75:   public SslContext sslClientContext(String serverName, boolean useAlpn, boolean trustAll) {",
          "76:     int idx = idx(useAlpn);",
          "77:     if (sslContexts[idx] == null) {",
          "78:       SslContext context = sslContextProvider.createClientContext(serverName, useAlpn, trustAll);",
          "79:       sslContexts[idx] = context;",
          "80:     }",
          "81:     return sslContexts[idx];",
          "82:   }",
          "84:   public SslContext sslServerContext(boolean useAlpn) {",
          "85:     int idx = idx(useAlpn);",
          "86:     if (sslContexts[idx] == null) {",
          "87:       sslContexts[idx] = sslContextProvider.createServerContext(useAlpn);",
          "88:     }",
          "89:     return sslContexts[idx];",
          "90:   }",
          "97:   public AsyncMapping<? super String, ? extends SslContext> serverNameMapping() {",
          "98:     return (AsyncMapping<String, SslContext>) (serverName, promise) -> {",
          "99:       workerPool.execute(() -> {",
          "100:         if (serverName == null) {",
          "101:           promise.setSuccess(sslServerContext(useAlpn));",
          "102:         } else {",
          "103:           KeyManagerFactory kmf;",
          "104:           try {",
          "105:             kmf = sslContextProvider.resolveKeyManagerFactory(serverName);",
          "106:           } catch (Exception e) {",
          "107:             promise.setFailure(e);",
          "108:             return;",
          "109:           }",
          "110:           TrustManager[] trustManagers;",
          "111:           try {",
          "112:             trustManagers = sslContextProvider.resolveTrustManagers(serverName);",
          "113:           } catch (Exception e) {",
          "114:             promise.setFailure(e);",
          "115:             return;",
          "116:           }",
          "117:           int idx = idx(useAlpn);",
          "118:           SslContext sslContext = sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createServerContext(kmf, trustManagers, s, useAlpn));",
          "119:           promise.setSuccess(sslContext);",
          "120:         }",
          "121:       });",
          "122:       return promise;",
          "123:     };",
          "124:   }",
          "126:   public SslHandler createClientSslHandler(SocketAddress remoteAddress, String serverName, boolean useAlpn) {",
          "127:     SslContext sslContext = sslClientContext(serverName, useAlpn);",
          "128:     SslHandler sslHandler;",
          "129:     Executor delegatedTaskExec = useWorkerPool ? workerPool : ImmediateExecutor.INSTANCE;",
          "130:     if (remoteAddress.isDomainSocket()) {",
          "131:       sslHandler = sslContext.newHandler(ByteBufAllocator.DEFAULT, delegatedTaskExec);",
          "132:     } else {",
          "133:       sslHandler = sslContext.newHandler(ByteBufAllocator.DEFAULT, remoteAddress.host(), remoteAddress.port(), delegatedTaskExec);",
          "134:     }",
          "135:     sslHandler.setHandshakeTimeout(sslHandshakeTimeout, sslHandshakeTimeoutUnit);",
          "136:     return sslHandler;",
          "137:   }",
          "139:   public ChannelHandler createServerHandler() {",
          "140:     if (sni) {",
          "141:       return createSniHandler();",
          "142:     } else {",
          "143:       return createServerSslHandler(useAlpn);",
          "144:     }",
          "145:   }",
          "147:   private SslHandler createServerSslHandler(boolean useAlpn) {",
          "148:     SslContext sslContext = sslServerContext(useAlpn);",
          "149:     Executor delegatedTaskExec = useWorkerPool ? workerPool : ImmediateExecutor.INSTANCE;",
          "150:     SslHandler sslHandler = sslContext.newHandler(ByteBufAllocator.DEFAULT, delegatedTaskExec);",
          "151:     sslHandler.setHandshakeTimeout(sslHandshakeTimeout, sslHandshakeTimeoutUnit);",
          "152:     return sslHandler;",
          "153:   }",
          "155:   private SniHandler createSniHandler() {",
          "156:     Executor delegatedTaskExec = useWorkerPool ? workerPool : ImmediateExecutor.INSTANCE;",
          "157:     return new VertxSniHandler(serverNameMapping(), sslHandshakeTimeoutUnit.toMillis(sslHandshakeTimeout), delegatedTaskExec);",
          "158:   }",
          "160:   private static int idx(boolean useAlpn) {",
          "161:     return useAlpn ? 0 : 1;",
          "162:   }",
          "163: }",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java": [
          "File: src/main/java/io/vertx/core/net/impl/SslContextProvider.java -> src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: package io.vertx.core.net.impl;",
          "15: import io.netty.handler.ssl.DelegatingSslContext;",
          "17: import io.netty.handler.ssl.SslContext;",
          "24: import io.vertx.core.VertxException;",
          "32: import io.vertx.core.spi.tls.SslContextFactory;",
          "44: import java.util.function.Supplier;",
          "",
          "[Removed Lines]",
          "13: import io.netty.buffer.ByteBufAllocator;",
          "14: import io.netty.channel.ChannelHandler;",
          "16: import io.netty.handler.ssl.SniHandler;",
          "18: import io.netty.handler.ssl.SslHandler;",
          "19: import io.netty.util.AsyncMapping;",
          "20: import io.netty.util.Mapping;",
          "21: import io.netty.util.concurrent.Future;",
          "22: import io.netty.util.concurrent.ImmediateExecutor;",
          "23: import io.netty.util.concurrent.Promise;",
          "25: import io.vertx.core.buffer.Buffer;",
          "26: import io.vertx.core.impl.ContextInternal;",
          "27: import io.vertx.core.impl.VertxInternal;",
          "28: import io.vertx.core.net.KeyCertOptions;",
          "29: import io.vertx.core.net.SSLOptions;",
          "30: import io.vertx.core.net.SocketAddress;",
          "31: import io.vertx.core.net.TrustOptions;",
          "34: import javax.net.ssl.KeyManagerFactory;",
          "35: import javax.net.ssl.SSLEngine;",
          "36: import javax.net.ssl.TrustManagerFactory;",
          "37: import java.util.ArrayList;",
          "38: import java.util.HashSet;",
          "39: import java.util.Map;",
          "40: import java.util.Set;",
          "41: import java.util.concurrent.ConcurrentHashMap;",
          "42: import java.util.concurrent.Executor;",
          "43: import java.util.concurrent.TimeUnit;",
          "",
          "[Added Lines]",
          "16: import io.vertx.core.http.ClientAuth;",
          "19: import javax.net.ssl.*;",
          "20: import java.security.KeyStore;",
          "21: import java.security.cert.CRL;",
          "22: import java.security.cert.CertificateException;",
          "23: import java.security.cert.X509Certificate;",
          "24: import java.util.*;",
          "25: import java.util.function.Function;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: public class SslContextProvider {",
          "54:   private final Supplier<SslContextFactory> provider;",
          "62:   private final Set<String> enabledCipherSuites;",
          "85:   }",
          "92:       }",
          "96:     }",
          "97:   }",
          "100:     try {",
          "103:       SslContextFactory factory = provider.get()",
          "104:         .useAlpn(useAlpn)",
          "106:         .enabledCipherSuites(enabledCipherSuites)",
          "110:       }",
          "113:       }",
          "115:         factory.trustManagerFactory(tmf);",
          "116:       }",
          "121:     } catch (Exception e) {",
          "122:       throw new VertxException(e);",
          "123:     }",
          "124:   }",
          "136:       }",
          "138:   }",
          "162:   }",
          "168:   }",
          "172:   }",
          "176:   }",
          "186:     }",
          "189:   }",
          "197:   }",
          "202:   }",
          "203: }",
          "",
          "[Removed Lines]",
          "53:   private final SSLHelper sslHelper;",
          "55:   private final long sslHandshakeTimeout;",
          "56:   private final TimeUnit sslHandshakeTimeoutUnit;",
          "57:   final Set<String> enabledProtocols;",
          "58:   private final KeyCertOptions keyCertOptions;",
          "59:   private final TrustOptions trustOptions;",
          "60:   private final ArrayList<String> crlPaths;",
          "61:   private final ArrayList<Buffer> crlValues;",
          "63:   private final SslContext[] sslContexts = new SslContext[2];",
          "64:   private final Map<String, SslContext>[] sslContextMaps = new Map[]{",
          "65:     new ConcurrentHashMap<>(), new ConcurrentHashMap<>()",
          "66:   };",
          "67:   private final boolean useWorkerPool;",
          "69:   public SslContextProvider(SSLHelper sslHelper, SSLOptions options, boolean useWorkerPool, Supplier<SslContextFactory> provider) {",
          "70:     this.sslHelper = sslHelper;",
          "71:     this.provider = provider;",
          "72:     this.crlPaths = new ArrayList<>(options.getCrlPaths());",
          "73:     this.crlValues = new ArrayList<>(options.getCrlValues());",
          "74:     this.enabledCipherSuites = new HashSet<>(options.getEnabledCipherSuites());",
          "75:     this.sslHandshakeTimeout = options.getSslHandshakeTimeout();",
          "76:     this.sslHandshakeTimeoutUnit = options.getSslHandshakeTimeoutUnit();",
          "77:     this.enabledProtocols = options.getEnabledSecureTransportProtocols();",
          "78:     this.keyCertOptions = options.getKeyCertOptions();",
          "79:     this.trustOptions = options.getTrustOptions();",
          "80:     this.useWorkerPool = useWorkerPool;",
          "81:   }",
          "83:   public boolean isSsl() {",
          "84:     return sslHelper.isSSL();",
          "87:   public SslContext createContext(VertxInternal vertx, String serverName, boolean useAlpn, boolean client, boolean trustAll) {",
          "88:     int idx = useAlpn ? 0 : 1;",
          "89:     if (serverName == null) {",
          "90:       if (sslContexts[idx] == null) {",
          "91:         sslContexts[idx] = createContext2(vertx, serverName, useAlpn, client, trustAll);",
          "93:       return sslContexts[idx];",
          "94:     } else {",
          "95:       return sslContextMaps[idx].computeIfAbsent(serverName, s -> createContext2(vertx, serverName, useAlpn, client, trustAll));",
          "99:   private SslContext createContext2(VertxInternal vertx, String serverName, boolean useAlpn, boolean client, boolean trustAll) {",
          "101:       TrustManagerFactory tmf = SSLHelper.getTrustMgrFactory(vertx, trustOptions, crlPaths, crlValues, serverName, trustAll);",
          "102:       KeyManagerFactory kmf = SSLHelper.getKeyMgrFactory(vertx, keyCertOptions, serverName);",
          "105:         .forClient(client)",
          "107:         .applicationProtocols(sslHelper.applicationProtocols);",
          "108:       if (!client) {",
          "109:         factory.clientAuth(SSLHelper.CLIENT_AUTH_MAPPING.get(sslHelper.clientAuth));",
          "111:       if (kmf != null) {",
          "112:         factory.keyMananagerFactory(kmf);",
          "114:       if (tmf != null) {",
          "117:       if (serverName != null) {",
          "118:         factory.serverName(serverName);",
          "119:       }",
          "120:       return factory.create();",
          "126:   public SslContext createContext(VertxInternal vertx) {",
          "127:     return createContext(vertx, null, sslHelper.useAlpn, sslHelper.client, sslHelper.trustAll);",
          "128:   }",
          "130:   public SslContext sslContext(VertxInternal vertx, String serverName, boolean useAlpn) {",
          "131:     SslContext context = createContext(vertx, null, useAlpn, sslHelper.client, sslHelper.trustAll);",
          "132:     return new DelegatingSslContext(context) {",
          "133:       @Override",
          "134:       protected void initEngine(SSLEngine engine) {",
          "135:         sslHelper.configureEngine(engine, enabledProtocols, serverName);",
          "137:     };",
          "140:   public AsyncMapping<? super String, ? extends SslContext> serverNameMapper(VertxInternal vertx, ContextInternal ctx) {",
          "141:     return (AsyncMapping<String, SslContext>) (serverName, promise) -> {",
          "142:       ctx.<SslContext>executeBlockingInternal(p -> {",
          "143:         SslContext sslContext = createContext(vertx, serverName, sslHelper.useAlpn, sslHelper.client, sslHelper.trustAll);",
          "144:         if (sslContext != null) {",
          "145:           sslContext = new DelegatingSslContext(sslContext) {",
          "146:             @Override",
          "147:             protected void initEngine(SSLEngine engine) {",
          "148:               sslHelper.configureEngine(engine, enabledProtocols, serverName);",
          "149:             }",
          "150:           };",
          "151:         }",
          "152:         p.complete(sslContext);",
          "153:       }, ar -> {",
          "154:         if (ar.succeeded()) {",
          "155:           promise.setSuccess(ar.result());",
          "156:         } else {",
          "157:           promise.setFailure(ar.cause());",
          "158:         }",
          "159:       });",
          "160:       return promise;",
          "161:     };",
          "164:   public SSLEngine createEngine(VertxInternal vertx) {",
          "165:     SSLEngine engine = createContext(vertx).newEngine(ByteBufAllocator.DEFAULT);",
          "166:     sslHelper.configureEngine(engine, enabledProtocols, null);",
          "167:     return engine;",
          "170:   public SslHandler createSslHandler(VertxInternal vertx, String serverName) {",
          "171:     return createSslHandler(vertx, null, serverName);",
          "174:   public SslHandler createSslHandler(VertxInternal vertx, SocketAddress remoteAddress, String serverName) {",
          "175:     return createSslHandler(vertx, remoteAddress, serverName, sslHelper.useAlpn);",
          "178:   public SslHandler createSslHandler(VertxInternal vertx, SocketAddress remoteAddress, String serverName, boolean useAlpn) {",
          "179:     SslContext sslContext = sslContext(vertx, serverName, useAlpn);",
          "180:     SslHandler sslHandler;",
          "181:     Executor delegatedTaskExec = useWorkerPool ? vertx.getInternalWorkerPool().executor() : ImmediateExecutor.INSTANCE;",
          "182:     if (remoteAddress == null || remoteAddress.isDomainSocket()) {",
          "183:       sslHandler = sslContext.newHandler(ByteBufAllocator.DEFAULT, delegatedTaskExec);",
          "184:     } else {",
          "185:       sslHandler = sslContext.newHandler(ByteBufAllocator.DEFAULT, remoteAddress.host(), remoteAddress.port(), delegatedTaskExec);",
          "187:     sslHandler.setHandshakeTimeout(sslHandshakeTimeout, sslHandshakeTimeoutUnit);",
          "188:     return sslHandler;",
          "191:   public ChannelHandler createHandler(VertxInternal vertx, ContextInternal ctx) {",
          "192:     if (sslHelper.sni) {",
          "193:       return createSniHandler(vertx, ctx);",
          "194:     } else {",
          "195:       return createSslHandler(vertx, null);",
          "196:     }",
          "199:   public SniHandler createSniHandler(VertxInternal vertx, ContextInternal ctx) {",
          "200:     Executor delegatedTaskExec = useWorkerPool ? vertx.getInternalWorkerPool().executor() : ImmediateExecutor.INSTANCE;",
          "201:     return new VertxSniHandler(serverNameMapper(vertx, ctx), sslHandshakeTimeoutUnit.toMillis(sslHandshakeTimeout), delegatedTaskExec);",
          "",
          "[Added Lines]",
          "36:   private final Set<String> enabledProtocols;",
          "37:   private final List<CRL> crls;",
          "38:   private final ClientAuth clientAuth;",
          "40:   private final List<String> applicationProtocols;",
          "41:   private final String endpointIdentificationAlgorithm;",
          "42:   private final KeyManagerFactory keyManagerFactory;",
          "43:   private final TrustManagerFactory trustManagerFactory;",
          "44:   private final Function<String, X509KeyManager> keyManagerMapper;",
          "45:   private final Function<String, TrustManager[]> trustManagerMapper;",
          "47:   public SslContextProvider(ClientAuth clientAuth,",
          "48:                             String endpointIdentificationAlgorithm,",
          "49:                             List<String> applicationProtocols,",
          "50:                             Set<String> enabledCipherSuites,",
          "51:                             Set<String> enabledProtocols,",
          "52:                             KeyManagerFactory keyManagerFactory,",
          "53:                             Function<String, X509KeyManager> keyManagerMapper,",
          "54:                             TrustManagerFactory trustManagerFactory,",
          "55:                             Function<String, TrustManager[]> trustManagerMapper,",
          "56:                             List<CRL> crls,",
          "57:                             Supplier<SslContextFactory> provider) {",
          "58:     this.provider = provider;",
          "59:     this.clientAuth = clientAuth;",
          "60:     this.endpointIdentificationAlgorithm = endpointIdentificationAlgorithm;",
          "61:     this.applicationProtocols = applicationProtocols;",
          "62:     this.enabledCipherSuites = new HashSet<>(enabledCipherSuites);",
          "63:     this.enabledProtocols = enabledProtocols;",
          "64:     this.keyManagerFactory = keyManagerFactory;",
          "65:     this.trustManagerFactory = trustManagerFactory;",
          "66:     this.keyManagerMapper = keyManagerMapper;",
          "67:     this.trustManagerMapper = trustManagerMapper;",
          "68:     this.crls = crls;",
          "71:   public SslContext createClientContext(String serverName, boolean useAlpn, boolean trustAll) {",
          "72:     try {",
          "73:       SslContextFactory factory = provider.get()",
          "74:         .useAlpn(useAlpn)",
          "75:         .forClient(true)",
          "76:         .enabledCipherSuites(enabledCipherSuites)",
          "77:         .applicationProtocols(applicationProtocols);",
          "78:       if (keyManagerFactory != null) {",
          "79:         factory.keyMananagerFactory(keyManagerFactory);",
          "80:       }",
          "81:       TrustManager[] trustManagers = null;",
          "82:       if (trustAll) {",
          "83:         trustManagers = new TrustManager[] { createTrustAllTrustManager() };",
          "84:       } else if (trustManagerFactory != null) {",
          "85:         trustManagers = trustManagerFactory.getTrustManagers();",
          "86:       }",
          "87:       if (trustManagers != null) {",
          "88:         TrustManagerFactory tmf = buildVertxTrustManagerFactory(trustManagers);",
          "89:         factory.trustManagerFactory(tmf);",
          "91:       SslContext context = factory.create();",
          "92:       return new DelegatingSslContext(context) {",
          "93:         @Override",
          "94:         protected void initEngine(SSLEngine engine) {",
          "95:           configureEngine(engine, enabledProtocols, serverName, true);",
          "96:         }",
          "97:       };",
          "98:     } catch (Exception e) {",
          "99:       throw new VertxException(e);",
          "103:   public SslContext createServerContext(boolean useAlpn) {",
          "104:     return createServerContext(keyManagerFactory, trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null, null, useAlpn);",
          "105:   }",
          "107:   public SslContext createServerContext(KeyManagerFactory keyManagerFactory,",
          "108:                                         TrustManager[] trustManagers,",
          "109:                                         String serverName,",
          "110:                                         boolean useAlpn) {",
          "114:         .forClient(false)",
          "116:         .applicationProtocols(applicationProtocols);",
          "117:       factory.clientAuth(SSLHelper.CLIENT_AUTH_MAPPING.get(clientAuth));",
          "118:       if (serverName != null) {",
          "119:         factory.serverName(serverName);",
          "121:       if (keyManagerFactory != null) {",
          "122:         factory.keyMananagerFactory(keyManagerFactory);",
          "124:       if (trustManagers != null) {",
          "125:         TrustManagerFactory tmf = buildVertxTrustManagerFactory(trustManagers);",
          "128:       SslContext context = factory.create();",
          "129:       return new DelegatingSslContext(context) {",
          "130:         @Override",
          "131:         protected void initEngine(SSLEngine engine) {",
          "132:           configureEngine(engine, enabledProtocols, serverName, false);",
          "133:         }",
          "134:       };",
          "140:   public KeyManagerFactory loadKeyManagerFactory(String serverName) throws Exception {",
          "141:     if (keyManagerMapper != null) {",
          "142:       X509KeyManager mgr = keyManagerMapper.apply(serverName);",
          "143:       if (mgr != null) {",
          "144:         String keyStoreType = KeyStore.getDefaultType();",
          "145:         KeyStore ks = KeyStore.getInstance(keyStoreType);",
          "146:         ks.load(null, null);",
          "147:         ks.setKeyEntry(\"key\", mgr.getPrivateKey(null), new char[0], mgr.getCertificateChain(null));",
          "148:         String keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm();",
          "149:         KeyManagerFactory kmf = KeyManagerFactory.getInstance(keyAlgorithm);",
          "150:         kmf.init(ks, new char[0]);",
          "151:         return kmf;",
          "153:     }",
          "154:     return null;",
          "167:   public KeyManagerFactory resolveKeyManagerFactory(String serverName) throws Exception {",
          "168:     KeyManagerFactory kmf = loadKeyManagerFactory(serverName);",
          "169:     if (kmf == null) {",
          "170:       kmf = keyManagerFactory;",
          "171:     }",
          "172:     return kmf;",
          "175:   public TrustManager[] loadTrustManagers(String serverName) throws Exception {",
          "176:     if (trustManagerMapper != null) {",
          "177:       return trustManagerMapper.apply(serverName);",
          "178:     }",
          "179:     return null;",
          "192:   public TrustManager[] resolveTrustManagers(String serverName) throws Exception {",
          "193:     TrustManager[] trustManagers = loadTrustManagers(serverName);",
          "194:     if (trustManagers == null && trustManagerFactory != null) {",
          "195:       trustManagers = trustManagerFactory.getTrustManagers();",
          "196:     }",
          "197:     return trustManagers;",
          "200:   private VertxTrustManagerFactory buildVertxTrustManagerFactory(TrustManager[] mgrs) {",
          "201:     if (crls != null && crls.size() > 0) {",
          "202:       mgrs = createUntrustRevokedCertTrustManager(mgrs, crls);",
          "203:     }",
          "204:     return new VertxTrustManagerFactory(mgrs);",
          "208:   Proxy the specified trust managers with an implementation checking first the provided certificates",
          "209:   against the Certificate Revocation List (crl) before delegating to the original trust managers.",
          "211:   private static TrustManager[] createUntrustRevokedCertTrustManager(TrustManager[] trustMgrs, List<CRL> crls) {",
          "212:     trustMgrs = trustMgrs.clone();",
          "213:     for (int i = 0;i < trustMgrs.length;i++) {",
          "214:       TrustManager trustMgr = trustMgrs[i];",
          "215:       if (trustMgr instanceof X509TrustManager) {",
          "216:         X509TrustManager x509TrustManager = (X509TrustManager) trustMgr;",
          "217:         trustMgrs[i] = new X509TrustManager() {",
          "218:           @Override",
          "219:           public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "220:             checkRevoked(x509Certificates);",
          "221:             x509TrustManager.checkClientTrusted(x509Certificates, s);",
          "222:           }",
          "223:           @Override",
          "224:           public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "225:             checkRevoked(x509Certificates);",
          "226:             x509TrustManager.checkServerTrusted(x509Certificates, s);",
          "227:           }",
          "228:           private void checkRevoked(X509Certificate[] x509Certificates) throws CertificateException {",
          "229:             for (X509Certificate cert : x509Certificates) {",
          "230:               for (CRL crl : crls) {",
          "231:                 if (crl.isRevoked(cert)) {",
          "232:                   throw new CertificateException(\"Certificate revoked\");",
          "233:                 }",
          "234:               }",
          "235:             }",
          "236:           }",
          "237:           @Override",
          "238:           public X509Certificate[] getAcceptedIssuers() {",
          "239:             return x509TrustManager.getAcceptedIssuers();",
          "240:           }",
          "241:         };",
          "242:       }",
          "244:     return trustMgrs;",
          "248:   private static TrustManager createTrustAllTrustManager() {",
          "249:     return new X509TrustManager() {",
          "250:       @Override",
          "251:       public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "252:       }",
          "254:       @Override",
          "255:       public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "256:       }",
          "258:       @Override",
          "259:       public X509Certificate[] getAcceptedIssuers() {",
          "260:         return new X509Certificate[0];",
          "261:       }",
          "262:     };",
          "265:   public void configureEngine(SSLEngine engine, Set<String> enabledProtocols, String serverName, boolean client) {",
          "266:     Set<String> protocols = new LinkedHashSet<>(enabledProtocols);",
          "267:     protocols.retainAll(Arrays.asList(engine.getSupportedProtocols()));",
          "268:     engine.setEnabledProtocols(protocols.toArray(new String[protocols.size()]));",
          "269:     if (client && !endpointIdentificationAlgorithm.isEmpty()) {",
          "270:       SSLParameters sslParameters = engine.getSSLParameters();",
          "271:       sslParameters.setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm);",
          "272:       engine.setSSLParameters(sslParameters);",
          "273:     }",
          "274:     if (serverName != null) {",
          "275:       SSLParameters sslParameters = engine.getSSLParameters();",
          "276:       sslParameters.setServerNames(Collections.singletonList(new SNIHostName(serverName)));",
          "277:       engine.setSSLParameters(sslParameters);",
          "278:     }",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java": [
          "File: src/main/java/io/vertx/core/net/impl/TCPServerBase.java -> src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import io.netty.channel.ChannelOption;",
          "19: import io.netty.channel.EventLoop;",
          "20: import io.netty.util.concurrent.GenericFutureListener;",
          "22: import io.vertx.core.Closeable;",
          "23: import io.vertx.core.Context;",
          "24: import io.vertx.core.Future;",
          "",
          "[Removed Lines]",
          "21: import io.vertx.core.AsyncResult;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   private EventLoop eventLoop;",
          "63:   private Handler<Channel> worker;",
          "64:   private volatile boolean listening;",
          "65:   private ContextInternal listenContext;",
          "",
          "[Removed Lines]",
          "62:   private BiConsumer<Channel, SslContextProvider> childHandler;",
          "",
          "[Added Lines]",
          "61:   private BiConsumer<Channel, SslChannelProvider> childHandler;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   private SSLHelper sslHelper;",
          "71:   private ServerChannelLoadBalancer channelBalancer;",
          "72:   private Future<Channel> bindFuture;",
          "73:   private Set<TCPServerBase> servers;",
          "",
          "[Removed Lines]",
          "70:   private AtomicReference<SslContextProvider> sslContextProvider;",
          "",
          "[Added Lines]",
          "69:   private AtomicReference<SslChannelProvider> sslChannelProvider;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:     this.vertx = vertx;",
          "79:     this.options = new NetServerOptions(options);",
          "80:     this.creatingContext = vertx.getContext();",
          "82:   }",
          "84:   public SslContextProvider sslContextProvider() {",
          "86:   }",
          "88:   public int actualPort() {",
          "",
          "[Removed Lines]",
          "81:     this.sslContextProvider = new AtomicReference<>();",
          "85:     return sslContextProvider.get();",
          "",
          "[Added Lines]",
          "80:     this.sslChannelProvider = new AtomicReference<>();",
          "84:     SslChannelProvider ref = sslChannelProvider.get();",
          "85:     return ref != null ? ref.sslContextProvider() : null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "90:     return server != null ? server.actualPort : actualPort;",
          "91:   }",
          "95:   protected SSLHelper createSSLHelper() {",
          "96:     return new SSLHelper(options, null);",
          "97:   }",
          "99:   public Future<Void> updateSSLOptions(SSLOptions options) {",
          "101:       if (ar.succeeded()) {",
          "103:       }",
          "104:     }).<Void>mapEmpty();",
          "105:   }",
          "",
          "[Removed Lines]",
          "93:   protected abstract BiConsumer<Channel, SslContextProvider> childHandler(ContextInternal context, SocketAddress socketAddress);",
          "100:     return sslHelper.init(new SSLOptions(options), listenContext).andThen(ar -> {",
          "102:         TCPServerBase.this.sslContextProvider.set(ar.result());",
          "",
          "[Added Lines]",
          "93:   protected abstract BiConsumer<Channel, SslChannelProvider> childHandler(ContextInternal context, SocketAddress socketAddress);",
          "100:     return sslHelper.buildChannelProvider(new SSLOptions(options), listenContext).andThen(ar -> {",
          "102:         TCPServerBase.this.sslChannelProvider.set(ar.result());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "151:         bindFuture = promise;",
          "152:         sslHelper = createSSLHelper();",
          "153:         childHandler =  childHandler(listenContext, localAddress);",
          "155:         servers = new HashSet<>();",
          "156:         servers.add(this);",
          "157:         channelBalancer = new ServerChannelLoadBalancer(vertx.getAcceptorEventLoopGroup().next());",
          "",
          "[Removed Lines]",
          "154:         worker = ch -> childHandler.accept(ch, sslContextProvider.get());",
          "",
          "[Added Lines]",
          "154:         worker = ch -> childHandler.accept(ch, sslChannelProvider.get());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "164:         listenContext.addCloseHook(this);",
          "168:           if (ar.succeeded()) {",
          "174:             channelBalancer.addWorker(eventLoop, worker);",
          "175:             ServerBootstrap bootstrap = new ServerBootstrap();",
          "176:             bootstrap.group(vertx.getAcceptorEventLoopGroup(), channelBalancer.workers());",
          "178:               bootstrap.childOption(ChannelOption.ALLOCATOR, PartialPooledByteBufAllocator.INSTANCE);",
          "179:             } else {",
          "180:               bootstrap.childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);",
          "",
          "[Removed Lines]",
          "167:         sslHelper.init(options.getSslOptions(), listenContext).onComplete(ar -> {",
          "171:             sslContextProvider.set(ar.result());",
          "177:             if (sslHelper.isSSL()) {",
          "",
          "[Added Lines]",
          "167:         sslHelper.buildChannelProvider(options.getSslOptions(), listenContext).onComplete(ar -> {",
          "171:             sslChannelProvider.set(ar.result());",
          "177:             if (options.isSsl()) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "226:         actualServer = main;",
          "227:         metrics = main.metrics;",
          "229:         childHandler =  childHandler(listenContext, localAddress);",
          "231:         actualServer.servers.add(this);",
          "232:         actualServer.channelBalancer.addWorker(eventLoop, worker);",
          "233:         listenContext.addCloseHook(this);",
          "",
          "[Removed Lines]",
          "228:         sslContextProvider = main.sslContextProvider;",
          "230:         worker = ch -> childHandler.accept(ch, sslContextProvider.get());",
          "",
          "[Added Lines]",
          "228:         sslChannelProvider = main.sslChannelProvider;",
          "230:         worker = ch -> childHandler.accept(ch, sslChannelProvider.get());",
          "",
          "---------------"
        ],
        "src/test/java/io/vertx/core/net/SSLHelperTest.java||src/test/java/io/vertx/core/net/SSLHelperTest.java": [
          "File: src/test/java/io/vertx/core/net/SSLHelperTest.java -> src/test/java/io/vertx/core/net/SSLHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: package io.vertx.core.net;",
          "18: import io.vertx.core.http.HttpClientOptions;",
          "19: import io.vertx.core.http.HttpServerOptions;",
          "20: import io.vertx.core.impl.ContextInternal;",
          "22: import io.vertx.core.json.JsonObject;",
          "23: import io.vertx.core.net.impl.SSLHelper;",
          "24: import io.vertx.test.core.VertxTestBase;",
          "25: import io.vertx.test.tls.Cert;",
          "26: import io.vertx.test.tls.Trust;",
          "",
          "[Removed Lines]",
          "14: import io.netty.handler.ssl.OpenSsl;",
          "15: import io.netty.handler.ssl.OpenSslServerContext;",
          "16: import io.netty.handler.ssl.OpenSslServerSessionContext;",
          "17: import io.netty.handler.ssl.SslContext;",
          "21: import io.vertx.core.impl.VertxInternal;",
          "",
          "[Added Lines]",
          "14: import io.netty.buffer.ByteBufAllocator;",
          "15: import io.netty.handler.ssl.*;",
          "21: import io.vertx.core.net.impl.SslContextProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     SSLHelper helper = new SSLHelper(new HttpClientOptions().setKeyStoreOptions(Cert.CLIENT_JKS.get()).setTrustOptions(Trust.SERVER_JKS.get()),",
          "47:       null);",
          "48:     helper",
          "50:       .onComplete(onSuccess(provider -> {",
          "52:         assertEquals(new HashSet<>(Arrays.asList(expected)), new HashSet<>(ctx.cipherSuites()));",
          "53:         testComplete();",
          "54:     }));",
          "",
          "[Removed Lines]",
          "49:       .init(new SSLOptions().setKeyCertOptions(Cert.CLIENT_JKS.get()).setTrustOptions(Trust.SERVER_JKS.get()), (ContextInternal) vertx.getOrCreateContext())",
          "51:         SslContext ctx = provider.createContext((VertxInternal) vertx);",
          "",
          "[Added Lines]",
          "47:       .buildContextProvider(new SSLOptions().setKeyCertOptions(Cert.CLIENT_JKS.get()).setTrustOptions(Trust.SERVER_JKS.get()), (ContextInternal) vertx.getOrCreateContext())",
          "49:         SslContext ctx = provider.createClientContext(null, false, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     SSLHelper helper = new SSLHelper(",
          "62:         new HttpClientOptions().setOpenSslEngineOptions(new OpenSSLEngineOptions()).setPemKeyCertOptions(Cert.CLIENT_PEM.get()).setTrustOptions(Trust.SERVER_PEM.get()),",
          "63:       null);",
          "66:       assertEquals(expected, new HashSet<>(ctx.cipherSuites()));",
          "67:       testComplete();",
          "68:     }));",
          "",
          "[Removed Lines]",
          "64:     helper.init(new SSLOptions().setKeyCertOptions(Cert.CLIENT_PEM.get()).setTrustOptions(Trust.SERVER_PEM.get()), (ContextInternal) vertx.getOrCreateContext()).onComplete(onSuccess(provider -> {",
          "65:       SslContext ctx = provider.createContext((VertxInternal) vertx);",
          "",
          "[Added Lines]",
          "62:     helper.buildContextProvider(new SSLOptions().setKeyCertOptions(Cert.CLIENT_PEM.get()).setTrustOptions(Trust.SERVER_PEM.get()), (ContextInternal) vertx.getOrCreateContext()).onComplete(onSuccess(provider -> {",
          "63:       SslContext ctx = provider.createClientContext(null, false, false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:       null);",
          "92:     defaultHelper",
          "94:       .onComplete(onSuccess(provider -> {",
          "98:         SSLSessionContext sslSessionContext = ctx.sessionContext();",
          "99:         assertTrue(sslSessionContext instanceof OpenSslServerSessionContext);",
          "",
          "[Removed Lines]",
          "93:       .init(httpServerOptions.getSslOptions(), (ContextInternal) vertx.getOrCreateContext())",
          "95:         SslContext ctx = provider.createContext((VertxInternal) vertx);",
          "96:         assertTrue(ctx instanceof OpenSslServerContext);",
          "",
          "[Added Lines]",
          "91:       .buildContextProvider(httpServerOptions.getSslOptions(), (ContextInternal) vertx.getOrCreateContext())",
          "93:         SslContext ctx = provider.createServerContext(false);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:     assertEquals(new ArrayList<>(new HttpServerOptions(json).getEnabledCipherSuites()), Arrays.asList(engine.getEnabledCipherSuites()));",
          "123:     SSLHelper helper = new SSLHelper(options.setKeyCertOptions(Cert.SERVER_JKS.get()), null);",
          "124:     helper",
          "126:       .onComplete(onSuccess(sslContextProvider -> {",
          "128:         testComplete();",
          "129:       }));",
          "130:     await();",
          "",
          "[Removed Lines]",
          "125:       .init(options.getSslOptions(), (ContextInternal) vertx.getOrCreateContext())",
          "127:         assertEquals(new HashSet<>(Arrays.asList(sslContextProvider.createEngine((VertxInternal) vertx).getEnabledCipherSuites())), new HashSet<>(Arrays.asList(engine.getEnabledCipherSuites())));",
          "",
          "[Added Lines]",
          "122:       .buildContextProvider(options.getSslOptions(), (ContextInternal) vertx.getOrCreateContext())",
          "124:         assertEquals(new HashSet<>(Arrays.asList(createEngine(sslContextProvider).getEnabledCipherSuites())), new HashSet<>(Arrays.asList(engine.getEnabledCipherSuites())));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178:   private void testTLSVersions(HttpServerOptions options, Consumer<SSLEngine> check) {",
          "179:     SSLHelper helper = new SSLHelper(options.setSsl(true).setKeyCertOptions(Cert.SERVER_JKS.get()), null);",
          "180:     helper",
          "182:       .onComplete(onSuccess(sslContextProvider -> {",
          "184:         check.accept(engine);",
          "185:         testComplete();",
          "186:       }));",
          "187:     await();",
          "188:   }",
          "189: }",
          "",
          "[Removed Lines]",
          "181:       .init(options.getSslOptions(), (ContextInternal) vertx.getOrCreateContext())",
          "183:         SSLEngine engine = sslContextProvider.createEngine((VertxInternal) vertx);",
          "",
          "[Added Lines]",
          "178:       .buildContextProvider(options.getSslOptions(), (ContextInternal) vertx.getOrCreateContext())",
          "180:         SSLEngine engine = createEngine(sslContextProvider);",
          "187:   public SSLEngine createEngine(SslContextProvider provider) {",
          "188:     return provider.createClientContext(null, false, false).newEngine(ByteBufAllocator.DEFAULT);",
          "189:   }",
          "",
          "---------------"
        ],
        "src/test/java/io/vertx/it/SSLEngineTest.java||src/test/java/io/vertx/it/SSLEngineTest.java": [
          "File: src/test/java/io/vertx/it/SSLEngineTest.java -> src/test/java/io/vertx/it/SSLEngineTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: import io.netty.handler.ssl.JdkSslContext;",
          "15: import io.netty.handler.ssl.OpenSslContext;",
          "16: import io.netty.handler.ssl.SslContext;",
          "17: import io.vertx.core.http.HttpClientOptions;",
          "18: import io.vertx.core.http.HttpMethod;",
          "19: import io.vertx.core.http.HttpServerOptions;",
          "20: import io.vertx.core.http.HttpVersion;",
          "21: import io.vertx.core.http.impl.HttpServerImpl;",
          "23: import io.vertx.core.net.JdkSSLEngineOptions;",
          "24: import io.vertx.core.net.OpenSSLEngineOptions;",
          "25: import io.vertx.core.net.SSLEngineOptions;",
          "27: import io.vertx.core.http.HttpTestBase;",
          "28: import io.vertx.core.net.impl.SslContextProvider;",
          "29: import io.vertx.test.tls.Cert;",
          "",
          "[Removed Lines]",
          "22: import io.vertx.core.impl.VertxInternal;",
          "26: import io.vertx.core.net.impl.SSLHelper;",
          "",
          "[Added Lines]",
          "16: import io.netty.handler.ssl.OpenSslSessionContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:       }",
          "107:     }",
          "108:     SslContextProvider provider = ((HttpServerImpl)server).sslContextProvider();",
          "110:     switch (expectedSslContext != null ? expectedSslContext : \"jdk\") {",
          "111:       case \"jdk\":",
          "113:         break;",
          "114:       case \"openssl\":",
          "116:         break;",
          "117:     }",
          "118:     client = vertx.createHttpClient(new HttpClientOptions()",
          "",
          "[Removed Lines]",
          "109:     SslContext ctx = provider.createContext((VertxInternal) vertx);",
          "112:         assertTrue(ctx instanceof JdkSslContext);",
          "115:         assertTrue(ctx instanceof OpenSslContext);",
          "",
          "[Added Lines]",
          "108:     SslContext ctx = provider.createClientContext(null, false, false);",
          "111:         assertTrue(ctx.sessionContext().getClass().getName().equals(\"sun.security.ssl.SSLSessionContextImpl\"));",
          "114:         assertTrue(ctx.sessionContext() instanceof OpenSslSessionContext);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1487999acadc5beff4590c4fefd70a169515c440",
      "candidate_info": {
        "commit_hash": "1487999acadc5beff4590c4fefd70a169515c440",
        "repo": "eclipse-vertx/vert.x",
        "commit_url": "https://github.com/eclipse-vertx/vert.x/commit/1487999acadc5beff4590c4fefd70a169515c440",
        "files": [
          "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "src/test/java/io/vertx/core/net/NetTest.java",
          "src/test/java/io/vertx/core/net/SSLHelperTest.java",
          "src/test/java/io/vertx/it/SSLEngineTest.java"
        ],
        "message": "The TCP client will not send the correct server name to the client due to SSL client resumption performed by the SSL implementation although we are using a new engine implementation.\n\nThe SSL channel provider when a server name is specified for a client should use the SSL context map to avoid this.",
        "before_after_code_files": [
          "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java",
          "src/test/java/io/vertx/core/net/SSLHelperTest.java||src/test/java/io/vertx/core/net/SSLHelperTest.java",
          "src/test/java/io/vertx/it/SSLEngineTest.java||src/test/java/io/vertx/it/SSLEngineTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
            "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
            "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
          ],
          "candidate": [
            "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
            "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
            "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java": [
          "File: src/main/java/io/vertx/core/net/impl/SslChannelProvider.java -> src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import io.netty.handler.ssl.SslHandler;",
          "18: import io.netty.util.AsyncMapping;",
          "19: import io.netty.util.concurrent.ImmediateExecutor;",
          "20: import io.vertx.core.net.SocketAddress;",
          "22: import javax.net.ssl.KeyManagerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import io.vertx.core.VertxException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: import java.util.concurrent.Executor;",
          "27: import java.util.concurrent.TimeUnit;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import static io.vertx.core.net.impl.SslContextProvider.createTrustAllTrustManager;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:   public SslContext sslClientContext(String serverName, boolean useAlpn, boolean trustAll) {",
          "76:     int idx = idx(useAlpn);",
          "80:     }",
          "82:   }",
          "84:   public SslContext sslServerContext(boolean useAlpn) {",
          "",
          "[Removed Lines]",
          "77:     if (sslContexts[idx] == null) {",
          "78:       SslContext context = sslContextProvider.createClientContext(serverName, useAlpn, trustAll);",
          "79:       sslContexts[idx] = context;",
          "81:     return sslContexts[idx];",
          "",
          "[Added Lines]",
          "80:     if (serverName == null) {",
          "81:       if (sslContexts[idx] == null) {",
          "82:         SslContext context = sslContextProvider.createClientContext(useAlpn, trustAll);",
          "83:         sslContexts[idx] = context;",
          "84:       }",
          "85:       return sslContexts[idx];",
          "86:     } else {",
          "87:       KeyManagerFactory kmf;",
          "88:       try {",
          "89:         kmf = sslContextProvider.resolveKeyManagerFactory(serverName);",
          "90:       } catch (Exception e) {",
          "91:         throw new VertxException(e);",
          "92:       }",
          "93:       TrustManager[] trustManagers;",
          "94:       if (trustAll) {",
          "95:         trustManagers = new TrustManager[] { createTrustAllTrustManager() };",
          "96:       } else {",
          "97:         try {",
          "98:           trustManagers = sslContextProvider.resolveTrustManagers(serverName);",
          "99:         } catch (Exception e) {",
          "100:           throw new VertxException(e);",
          "101:         }",
          "102:       }",
          "103:       return sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createClientContext(kmf, trustManagers, s, useAlpn));",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java": [
          "File: src/main/java/io/vertx/core/net/impl/SslContextProvider.java -> src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     this.crls = crls;",
          "67:   }",
          "70:     try {",
          "71:       SslContextFactory factory = provider.get()",
          "72:         .useAlpn(useAlpn)",
          "",
          "[Removed Lines]",
          "69:   public VertxSslContext createClientContext(String serverName, boolean useAlpn, boolean trustAll) {",
          "",
          "[Added Lines]",
          "69:   public VertxSslContext createClientContext(",
          "70:     boolean useAlpn,",
          "71:     boolean trustAll) {",
          "72:     TrustManager[] trustManagers = null;",
          "73:     if (trustAll) {",
          "74:       trustManagers = new TrustManager[] { createTrustAllTrustManager() };",
          "75:     } else if (trustManagerFactory != null) {",
          "76:       trustManagers = trustManagerFactory.getTrustManagers();",
          "77:     }",
          "78:     return createClientContext(keyManagerFactory, trustManagers, null, useAlpn);",
          "79:   }",
          "81:   public VertxSslContext createClientContext(",
          "82:     KeyManagerFactory keyManagerFactory,",
          "83:     TrustManager[] trustManagers,",
          "84:     String serverName,",
          "85:     boolean useAlpn) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:       if (keyManagerFactory != null) {",
          "77:         factory.keyMananagerFactory(keyManagerFactory);",
          "78:       }",
          "85:       if (trustManagers != null) {",
          "86:         TrustManagerFactory tmf = buildVertxTrustManagerFactory(trustManagers);",
          "87:         factory.trustManagerFactory(tmf);",
          "",
          "[Removed Lines]",
          "79:       TrustManager[] trustManagers = null;",
          "80:       if (trustAll) {",
          "81:         trustManagers = new TrustManager[] { createTrustAllTrustManager() };",
          "82:       } else if (trustManagerFactory != null) {",
          "83:         trustManagers = trustManagerFactory.getTrustManagers();",
          "84:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:   }",
          "237:     return new X509TrustManager() {",
          "238:       @Override",
          "239:       public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {",
          "",
          "[Removed Lines]",
          "236:   private static TrustManager createTrustAllTrustManager() {",
          "",
          "[Added Lines]",
          "246:   static TrustManager createTrustAllTrustManager() {",
          "",
          "---------------"
        ],
        "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java": [
          "File: src/test/java/io/vertx/core/net/NetTest.java -> src/test/java/io/vertx/core/net/NetTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: import java.nio.charset.StandardCharsets;",
          "96: import java.security.KeyStore;",
          "97: import java.security.cert.Certificate;",
          "104: import java.util.concurrent.CompletableFuture;",
          "105: import java.util.concurrent.ConcurrentHashMap;",
          "106: import java.util.concurrent.CountDownLatch;",
          "",
          "[Removed Lines]",
          "98: import java.util.ArrayList;",
          "99: import java.util.Arrays;",
          "100: import java.util.List;",
          "101: import java.util.Map;",
          "102: import java.util.Random;",
          "103: import java.util.Set;",
          "",
          "[Added Lines]",
          "98: import java.util.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1532:     assertEquals(\"host2.com\", cnOf(test.clientPeerCert()));",
          "1533:   }",
          "1535:   @Test",
          "1537:   public void testSniWithUnknownServer1() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1530:   @Test",
          "1531:   public void testClientSniMultipleServerName() throws Exception {",
          "1532:     List<String> receivedServerNames = Collections.synchronizedList(new ArrayList<>());",
          "1533:     server = vertx.createNetServer(new NetServerOptions()",
          "1534:       .setSni(true)",
          "1535:       .setSsl(true)",
          "1536:       .setKeyCertOptions(Cert.SNI_JKS.get())",
          "1537:     ).connectHandler(so -> {",
          "1538:       receivedServerNames.add(so.indicatedServerName());",
          "1539:     });",
          "1540:     startServer();",
          "1541:     List<String> serverNames = Arrays.asList(\"host1\", \"host2.com\");",
          "1542:     client = vertx.createNetClient(new NetClientOptions().setSsl(true).setTrustAll(true));",
          "1543:     for (String serverName : serverNames) {",
          "1544:       NetSocket so = client.connect(testAddress, serverName).toCompletionStage().toCompletableFuture().get();",
          "1545:       String host = cnOf(so.peerCertificates().get(0));",
          "1546:       assertEquals(serverName, host);",
          "1547:     }",
          "1548:     assertWaitUntil(() -> receivedServerNames.size() == 2);",
          "1549:     assertEquals(receivedServerNames, serverNames);",
          "1550:   }",
          "",
          "---------------"
        ],
        "src/test/java/io/vertx/core/net/SSLHelperTest.java||src/test/java/io/vertx/core/net/SSLHelperTest.java": [
          "File: src/test/java/io/vertx/core/net/SSLHelperTest.java -> src/test/java/io/vertx/core/net/SSLHelperTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     helper",
          "47:       .buildContextProvider(new SSLOptions().setKeyCertOptions(Cert.CLIENT_JKS.get()).setTrustOptions(Trust.SERVER_JKS.get()), (ContextInternal) vertx.getOrCreateContext())",
          "48:       .onComplete(onSuccess(provider -> {",
          "50:         assertEquals(new HashSet<>(Arrays.asList(expected)), new HashSet<>(ctx.cipherSuites()));",
          "51:         testComplete();",
          "52:     }));",
          "",
          "[Removed Lines]",
          "49:         SslContext ctx = provider.createClientContext(null, false, false);",
          "",
          "[Added Lines]",
          "49:         SslContext ctx = provider.createClientContext(false, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:         new HttpClientOptions().setOpenSslEngineOptions(new OpenSSLEngineOptions()).setPemKeyCertOptions(Cert.CLIENT_PEM.get()).setTrustOptions(Trust.SERVER_PEM.get()),",
          "61:       null);",
          "62:     helper.buildContextProvider(new SSLOptions().setKeyCertOptions(Cert.CLIENT_PEM.get()).setTrustOptions(Trust.SERVER_PEM.get()), (ContextInternal) vertx.getOrCreateContext()).onComplete(onSuccess(provider -> {",
          "64:       assertEquals(expected, new HashSet<>(ctx.cipherSuites()));",
          "65:       testComplete();",
          "66:     }));",
          "",
          "[Removed Lines]",
          "63:       SslContext ctx = provider.createClientContext(null, false, false);",
          "",
          "[Added Lines]",
          "63:       SslContext ctx = provider.createClientContext(false, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:   }",
          "187:   public SSLEngine createEngine(SslContextProvider provider) {",
          "189:   }",
          "190: }",
          "",
          "[Removed Lines]",
          "188:     return provider.createClientContext(null, false, false).newEngine(ByteBufAllocator.DEFAULT);",
          "",
          "[Added Lines]",
          "188:     return provider.createClientContext(false, false).newEngine(ByteBufAllocator.DEFAULT);",
          "",
          "---------------"
        ],
        "src/test/java/io/vertx/it/SSLEngineTest.java||src/test/java/io/vertx/it/SSLEngineTest.java": [
          "File: src/test/java/io/vertx/it/SSLEngineTest.java -> src/test/java/io/vertx/it/SSLEngineTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:       }",
          "106:     }",
          "107:     SslContextProvider provider = ((HttpServerImpl)server).sslContextProvider();",
          "109:     switch (expectedSslContext != null ? expectedSslContext : \"jdk\") {",
          "110:       case \"jdk\":",
          "111:         assertTrue(ctx.sessionContext().getClass().getName().equals(\"sun.security.ssl.SSLSessionContextImpl\"));",
          "",
          "[Removed Lines]",
          "108:     SslContext ctx = provider.createClientContext(null, false, false);",
          "",
          "[Added Lines]",
          "108:     SslContext ctx = provider.createClientContext(false, false);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d9235cadf44df39a70dc75bddfe0b8fcbd6a683",
      "candidate_info": {
        "commit_hash": "3d9235cadf44df39a70dc75bddfe0b8fcbd6a683",
        "repo": "eclipse-vertx/vert.x",
        "commit_url": "https://github.com/eclipse-vertx/vert.x/commit/3d9235cadf44df39a70dc75bddfe0b8fcbd6a683",
        "files": [
          "src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "src/test/java/io/vertx/core/net/NetTest.java"
        ],
        "message": "The SslChannelProvider class maintains a map of server name to Netty SslContext that is filled when a client provides a server name. When a server name does not resolve to a KeyManagerFactory or TrustManagerFactory, the default factories are used and the entry is stored in the map. Instead no specific factory is resolved the default Netty SslContext is used, since this can lead to a a memory leak when a client specifies spurious SNI server names. This affects only a TCP server when SNI is set in the HttpServerOptions.",
        "before_after_code_files": [
          "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
            "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
            "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
            "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
            "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
          ],
          "candidate": [
            "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
            "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
            "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
            "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
            "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java": [
          "File: src/main/java/io/vertx/core/net/impl/SSLHelper.java -> src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     this.applicationProtocols = applicationProtocols;",
          "125:   }",
          "127:   private static class CachedProvider {",
          "128:     final SSLOptions options;",
          "129:     final SslChannelProvider sslChannelProvider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:   public synchronized int sniEntrySize() {",
          "128:     CachedProvider res = cachedProvider.result();",
          "129:     if (res != null) {",
          "130:       return res.sslChannelProvider.sniEntrySize();",
          "131:     }",
          "132:     return 0;",
          "133:   }",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java": [
          "File: src/main/java/io/vertx/core/net/impl/SslChannelProvider.java -> src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     this.sslContextProvider = sslContextProvider;",
          "66:   }",
          "68:   public SslContextProvider sslContextProvider() {",
          "69:     return sslContextProvider;",
          "70:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   public int sniEntrySize() {",
          "69:     return sslContextMaps[0].size() + sslContextMaps[1].size();",
          "70:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   public SslContext sslContext(String serverName, boolean useAlpn, boolean server, boolean trustAll) throws Exception {",
          "85:     int idx = idx(useAlpn);",
          "93:       KeyManagerFactory kmf = sslContextProvider.resolveKeyManagerFactory(serverName);",
          "94:       TrustManager[] trustManagers = trustAll ? null : sslContextProvider.resolveTrustManagers(serverName);",
          "96:     }",
          "97:   }",
          "99:   public SslContext sslServerContext(boolean useAlpn) {",
          "",
          "[Removed Lines]",
          "86:     if (serverName == null) {",
          "87:       if (sslContexts[idx] == null) {",
          "88:         SslContext context = sslContextProvider.createContext(server, null, null, null, useAlpn, trustAll);",
          "89:         sslContexts[idx] = context;",
          "90:       }",
          "91:       return sslContexts[idx];",
          "92:     } else {",
          "95:       return sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createContext(server, kmf, trustManagers, s, useAlpn, trustAll));",
          "",
          "[Added Lines]",
          "90:     if (serverName != null) {",
          "93:       if (kmf != null || trustManagers != null || !server) {",
          "94:         return sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createContext(server, kmf, trustManagers, s, useAlpn, trustAll));",
          "95:       }",
          "96:     }",
          "97:     if (sslContexts[idx] == null) {",
          "98:       SslContext context = sslContextProvider.createContext(server, null, null, serverName, useAlpn, trustAll);",
          "99:       sslContexts[idx] = context;",
          "101:     return sslContexts[idx];",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java": [
          "File: src/main/java/io/vertx/core/net/impl/SslContextProvider.java -> src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:     }",
          "155:   }",
          "164:   public TrustManager[] defaultTrustManagers() {",
          "165:     return trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null;",
          "166:   }",
          "",
          "[Removed Lines]",
          "157:   public KeyManagerFactory loadKeyManagerFactory(String serverName) throws Exception {",
          "158:     if (keyManagerFactoryMapper != null) {",
          "159:       return keyManagerFactoryMapper.apply(serverName);",
          "160:     }",
          "161:     return null;",
          "162:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:   public KeyManagerFactory resolveKeyManagerFactory(String serverName) throws Exception {",
          "197:     }",
          "198:     return null;",
          "199:   }",
          "",
          "[Removed Lines]",
          "187:     KeyManagerFactory kmf = loadKeyManagerFactory(serverName);",
          "188:     if (kmf == null) {",
          "189:       kmf = keyManagerFactory;",
          "190:     }",
          "191:     return kmf;",
          "192:   }",
          "194:   public TrustManager[] loadTrustManagers(String serverName) throws Exception {",
          "195:     if (trustManagerMapper != null) {",
          "196:       return trustManagerMapper.apply(serverName);",
          "",
          "[Added Lines]",
          "179:     if (keyManagerFactoryMapper != null) {",
          "180:       return keyManagerFactoryMapper.apply(serverName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211:   public TrustManager[] resolveTrustManagers(String serverName) throws Exception {",
          "215:     }",
          "217:   }",
          "219:   private VertxTrustManagerFactory buildVertxTrustManagerFactory(TrustManager[] mgrs) {",
          "",
          "[Removed Lines]",
          "212:     TrustManager[] trustManagers = loadTrustManagers(serverName);",
          "213:     if (trustManagers == null && trustManagerFactory != null) {",
          "214:       trustManagers = trustManagerFactory.getTrustManagers();",
          "216:     return trustManagers;",
          "",
          "[Added Lines]",
          "195:     if (trustManagerMapper != null) {",
          "196:       return trustManagerMapper.apply(serverName);",
          "198:     return null;",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java": [
          "File: src/main/java/io/vertx/core/net/impl/TCPServerBase.java -> src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:     return trafficShapingHandler;",
          "128:   }",
          "130:   public Future<Void> updateSSLOptions(SSLOptions options) {",
          "131:     TCPServerBase server = actualServer;",
          "132:     if (server != null && server != this) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:   public int sniEntrySize() {",
          "131:     return sslHelper.sniEntrySize();",
          "132:   }",
          "",
          "---------------"
        ],
        "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java": [
          "File: src/test/java/io/vertx/core/net/NetTest.java -> src/test/java/io/vertx/core/net/NetTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: import io.vertx.core.impl.logging.LoggerFactory;",
          "59: import io.vertx.core.json.JsonArray;",
          "60: import io.vertx.core.json.JsonObject;",
          "65: import io.vertx.core.spi.tls.SslContextFactory;",
          "66: import io.vertx.core.streams.ReadStream;",
          "67: import io.vertx.test.core.CheckingSender;",
          "",
          "[Removed Lines]",
          "61: import io.vertx.core.net.impl.HAProxyMessageCompletionHandler;",
          "62: import io.vertx.core.net.impl.NetServerImpl;",
          "63: import io.vertx.core.net.impl.NetSocketInternal;",
          "64: import io.vertx.core.net.impl.VertxHandler;",
          "",
          "[Added Lines]",
          "61: import io.vertx.core.net.impl.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1536:       receivedServerNames.add(so.indicatedServerName());",
          "1537:     });",
          "1538:     startServer();",
          "1540:     client = vertx.createNetClient(new NetClientOptions().setSsl(true).setTrustAll(true));",
          "1541:     for (String serverName : serverNames) {",
          "1542:       NetSocket so = client.connect(testAddress, serverName).toCompletionStage().toCompletableFuture().get();",
          "1543:       String host = cnOf(so.peerCertificates().get(0));",
          "1545:     }",
          "1547:     assertEquals(receivedServerNames, serverNames);",
          "1548:   }",
          "",
          "[Removed Lines]",
          "1539:     List<String> serverNames = Arrays.asList(\"host1\", \"host2.com\");",
          "1544:       assertEquals(serverName, host);",
          "1546:     assertWaitUntil(() -> receivedServerNames.size() == 2);",
          "",
          "[Added Lines]",
          "1536:     List<String> serverNames = Arrays.asList(\"host1\", \"host2.com\", \"fake\");",
          "1537:     List<String> cns = new ArrayList<>();",
          "1542:       cns.add(host);",
          "1544:     assertEquals(Arrays.asList(\"host1\", \"host2.com\", \"localhost\"), cns);",
          "1545:     assertEquals(2, ((TCPServerBase)server).sniEntrySize());",
          "1546:     assertWaitUntil(() -> receivedServerNames.size() == 3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b8a5bd4662a1dc0e7f4a39ad78dd5b3b75589ad",
      "candidate_info": {
        "commit_hash": "1b8a5bd4662a1dc0e7f4a39ad78dd5b3b75589ad",
        "repo": "eclipse-vertx/vert.x",
        "commit_url": "https://github.com/eclipse-vertx/vert.x/commit/1b8a5bd4662a1dc0e7f4a39ad78dd5b3b75589ad",
        "files": [
          "src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "src/test/java/io/vertx/core/net/NetTest.java"
        ],
        "message": "The SslChannelProvider class maintains a map of server name to Netty SslContext that is filled when a client provides a server name. When a server name does not resolve to a KeyManagerFactory or TrustManagerFactory, the default factories are used and the entry is stored in the map. Instead no specific factory is resolved the default Netty SslContext is used, since this can lead to a a memory leak when a client specifies spurious SNI server names. This affects only a TCP server when SNI is set in the HttpServerOptions.",
        "before_after_code_files": [
          "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
            "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
            "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
            "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
            "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
          ],
          "candidate": [
            "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java",
            "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
            "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
            "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
            "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/io/vertx/core/net/impl/SSLHelper.java||src/main/java/io/vertx/core/net/impl/SSLHelper.java": [
          "File: src/main/java/io/vertx/core/net/impl/SSLHelper.java -> src/main/java/io/vertx/core/net/impl/SSLHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     this.useWorkerPool = sslEngineOptions.getUseWorkerThread();",
          "101:   }",
          "103:   public SSLHelper(SSLEngineOptions sslEngineOptions) {",
          "104:     this(sslEngineOptions, 256);",
          "105:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:   public synchronized int sniEntrySize() {",
          "104:     int size = 0;",
          "105:     for (Future<SslChannelProvider> fut : sslChannelProviderMap.values()) {",
          "106:       SslChannelProvider result = fut.result();",
          "107:       if (result != null) {",
          "108:         size += result.sniEntrySize();",
          "109:       }",
          "110:     }",
          "111:     return size;",
          "112:   }",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/SslChannelProvider.java||src/main/java/io/vertx/core/net/impl/SslChannelProvider.java": [
          "File: src/main/java/io/vertx/core/net/impl/SslChannelProvider.java -> src/main/java/io/vertx/core/net/impl/SslChannelProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     this.sslContextProvider = sslContextProvider;",
          "54:   }",
          "56:   public SslContextProvider sslContextProvider() {",
          "57:     return sslContextProvider;",
          "58:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:   public int sniEntrySize() {",
          "57:     return sslContextMaps[0].size() + sslContextMaps[1].size();",
          "58:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:   public SslContext sslContext(String serverName, boolean useAlpn, boolean server, boolean trustAll) throws Exception {",
          "69:     int idx = idx(useAlpn);",
          "77:       KeyManagerFactory kmf = sslContextProvider.resolveKeyManagerFactory(serverName);",
          "78:       TrustManager[] trustManagers = trustAll ? null : sslContextProvider.resolveTrustManagers(serverName);",
          "80:     }",
          "81:   }",
          "83:   public SslContext sslServerContext(boolean useAlpn) {",
          "",
          "[Removed Lines]",
          "70:     if (serverName == null) {",
          "71:       if (sslContexts[idx] == null) {",
          "72:         SslContext context = sslContextProvider.createContext(server, null, null, null, useAlpn, trustAll);",
          "73:         sslContexts[idx] = context;",
          "74:       }",
          "75:       return sslContexts[idx];",
          "76:     } else {",
          "79:       return sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createContext(server, kmf, trustManagers, s, useAlpn, trustAll));",
          "",
          "[Added Lines]",
          "74:     if (serverName != null) {",
          "77:       if (kmf != null || trustManagers != null || !server) {",
          "78:         return sslContextMaps[idx].computeIfAbsent(serverName, s -> sslContextProvider.createContext(server, kmf, trustManagers, s, useAlpn, trustAll));",
          "79:       }",
          "80:     }",
          "81:     if (sslContexts[idx] == null) {",
          "82:       SslContext context = sslContextProvider.createContext(server, null, null, serverName, useAlpn, trustAll);",
          "83:       sslContexts[idx] = context;",
          "85:     return sslContexts[idx];",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/SslContextProvider.java||src/main/java/io/vertx/core/net/impl/SslContextProvider.java": [
          "File: src/main/java/io/vertx/core/net/impl/SslContextProvider.java -> src/main/java/io/vertx/core/net/impl/SslContextProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:     }",
          "155:   }",
          "164:   public TrustManager[] defaultTrustManagers() {",
          "165:     return trustManagerFactory != null ? trustManagerFactory.getTrustManagers() : null;",
          "166:   }",
          "",
          "[Removed Lines]",
          "157:   public KeyManagerFactory loadKeyManagerFactory(String serverName) throws Exception {",
          "158:     if (keyManagerFactoryMapper != null) {",
          "159:       return keyManagerFactoryMapper.apply(serverName);",
          "160:     }",
          "161:     return null;",
          "162:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:   public KeyManagerFactory resolveKeyManagerFactory(String serverName) throws Exception {",
          "197:     }",
          "198:     return null;",
          "199:   }",
          "",
          "[Removed Lines]",
          "187:     KeyManagerFactory kmf = loadKeyManagerFactory(serverName);",
          "188:     if (kmf == null) {",
          "189:       kmf = keyManagerFactory;",
          "190:     }",
          "191:     return kmf;",
          "192:   }",
          "194:   public TrustManager[] loadTrustManagers(String serverName) throws Exception {",
          "195:     if (trustManagerMapper != null) {",
          "196:       return trustManagerMapper.apply(serverName);",
          "",
          "[Added Lines]",
          "179:     if (keyManagerFactoryMapper != null) {",
          "180:       return keyManagerFactoryMapper.apply(serverName);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211:   public TrustManager[] resolveTrustManagers(String serverName) throws Exception {",
          "215:     }",
          "217:   }",
          "219:   private VertxTrustManagerFactory buildVertxTrustManagerFactory(TrustManager[] mgrs) {",
          "",
          "[Removed Lines]",
          "212:     TrustManager[] trustManagers = loadTrustManagers(serverName);",
          "213:     if (trustManagers == null && trustManagerFactory != null) {",
          "214:       trustManagers = trustManagerFactory.getTrustManagers();",
          "216:     return trustManagers;",
          "",
          "[Added Lines]",
          "195:     if (trustManagerMapper != null) {",
          "196:       return trustManagerMapper.apply(serverName);",
          "198:     return null;",
          "",
          "---------------"
        ],
        "src/main/java/io/vertx/core/net/impl/TCPServerBase.java||src/main/java/io/vertx/core/net/impl/TCPServerBase.java": [
          "File: src/main/java/io/vertx/core/net/impl/TCPServerBase.java -> src/main/java/io/vertx/core/net/impl/TCPServerBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   protected void configure(SSLOptions options) {",
          "123:   }",
          "125:   public Future<Boolean> updateSSLOptions(ServerSSLOptions options, boolean force) {",
          "126:     TCPServerBase server = actualServer;",
          "127:     if (server != null && server != this) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:   public int sniEntrySize() {",
          "126:     return sslHelper.sniEntrySize();",
          "127:   }",
          "",
          "---------------"
        ],
        "src/test/java/io/vertx/core/net/NetTest.java||src/test/java/io/vertx/core/net/NetTest.java": [
          "File: src/test/java/io/vertx/core/net/NetTest.java -> src/test/java/io/vertx/core/net/NetTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1481:       receivedServerNames.add(so.indicatedServerName());",
          "1482:     });",
          "1483:     startServer();",
          "1485:     client = vertx.createNetClient(new NetClientOptions().setSsl(true).setTrustAll(true));",
          "1486:     for (String serverName : serverNames) {",
          "1487:       NetSocket so = awaitFuture(client.connect(testAddress, serverName));",
          "1488:       String host = cnOf(so.peerCertificates().get(0));",
          "1490:     }",
          "1492:     assertEquals(receivedServerNames, serverNames);",
          "1493:   }",
          "",
          "[Removed Lines]",
          "1484:     List<String> serverNames = Arrays.asList(\"host1\", \"host2.com\");",
          "1489:       assertEquals(serverName, host);",
          "1491:     assertWaitUntil(() -> receivedServerNames.size() == 2);",
          "",
          "[Added Lines]",
          "1484:     List<String> serverNames = Arrays.asList(\"host1\", \"host2.com\", \"fake\");",
          "1485:     List<String> cns = new ArrayList<>();",
          "1490:       cns.add(host);",
          "1492:     assertEquals(Arrays.asList(\"host1\", \"host2.com\", \"localhost\"), cns);",
          "1493:     assertEquals(2, ((TCPServerBase)server).sniEntrySize());",
          "1494:     assertWaitUntil(() -> receivedServerNames.size() == 3);",
          "",
          "---------------"
        ]
      }
    }
  ]
}