{
  "cve_id": "CVE-2018-1000107",
  "cve_desc": "An improper authorization vulnerability exists in Jenkins Job and Node Ownership Plugin 0.11.0 and earlier in OwnershipDescription.java, JobOwnerJobProperty.java, and OwnerNodeProperty.java that allow an attacker with Job/Configure or Computer/Configure permission and without Ownership related permissions to override ownership metadata.",
  "repo": "jenkinsci/ownership-plugin",
  "patch_hash": "42487df17cd272e504d3cd3e09abb4904f80dba2",
  "patch_info": {
    "commit_hash": "42487df17cd272e504d3cd3e09abb4904f80dba2",
    "repo": "jenkinsci/ownership-plugin",
    "commit_url": "https://github.com/jenkinsci/ownership-plugin/commit/42487df17cd272e504d3cd3e09abb4904f80dba2",
    "files": [
      "pom.xml",
      "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java",
      "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobProperty.java",
      "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodeProperty.java",
      "src/test/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobPropertyTest.java",
      "src/test/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodePropertyTest.java"
    ],
    "message": "[SECURITY-498] - Prevent users from modifying ownership via REST or CLI",
    "before_after_code_files": [
      "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java",
      "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobProperty.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobProperty.java",
      "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodeProperty.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodeProperty.java",
      "src/test/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobPropertyTest.java||src/test/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobPropertyTest.java",
      "src/test/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodePropertyTest.java||src/test/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodePropertyTest.java"
    ]
  },
  "patch_diff": {
    "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java": [
      "File: src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java -> src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package com.synopsys.arc.jenkins.plugins.ownership;",
      "26: import com.synopsys.arc.jenkins.plugins.ownership.util.IdStrategyComparator;",
      "27: import com.synopsys.arc.jenkins.plugins.ownership.util.OwnershipDescriptionHelper;",
      "28: import com.synopsys.arc.jenkins.plugins.ownership.nodes.OwnerNodeProperty;",
      "29: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
      "30: import hudson.Util;",
      "31: import hudson.model.Descriptor;",
      "32: import hudson.model.User;",
      "33: import java.io.Serializable;",
      "34: import java.util.Collection;",
      "35: import java.util.Set;",
      "36: import java.util.TreeSet;",
      "37: import javax.annotation.CheckForNull;",
      "38: import javax.annotation.Nonnull;",
      "39: import javax.annotation.Nullable;",
      "40: import net.sf.json.JSONObject;",
      "41: import org.jenkinsci.plugins.scriptsecurity.sandbox.whitelists.Whitelisted;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import com.synopsys.arc.jenkins.plugins.ownership.jobs.JobOwnerJobProperty;",
      "32: import hudson.model.Computer;",
      "34: import hudson.model.Job;",
      "35: import hudson.model.Node;",
      "37: import hudson.security.ACL;",
      "38: import hudson.security.AccessControlled;",
      "39: import hudson.security.Permission;",
      "40: import java.io.InvalidObjectException;",
      "41: import java.io.ObjectStreamException;",
      "44: import java.util.Objects;",
      "50: import jenkins.model.Jenkins;",
      "52: import org.acegisecurity.AccessDeniedException;",
      "53: import org.acegisecurity.Authentication;",
      "55: import org.kohsuke.stapler.Stapler;",
      "56: import org.kohsuke.stapler.StaplerRequest;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "359:         return true;",
      "360:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "377:     protected Object readResolve() throws ObjectStreamException {",
      "378:         checkUnsecuredConfiguration();",
      "379:         return this;",
      "380:     }",
      "387:     private void checkUnsecuredConfiguration() throws ObjectStreamException {",
      "388:         Authentication authentication = Jenkins.getAuthentication();",
      "389:         if (authentication == ACL.SYSTEM) {",
      "390:             return;",
      "391:         }",
      "392:         StaplerRequest request = Stapler.getCurrentRequest();",
      "393:         if (request != null) {",
      "394:             AccessControlled context = request.findAncestorObject(AccessControlled.class);",
      "395:             if (context instanceof Job) {",
      "396:                 Job<?, ?> job = (Job)context;",
      "397:                 JobOwnerJobProperty existing = job.getProperty(JobOwnerJobProperty.class);",
      "398:                 if (existing == null || !Objects.equals(existing.getOwnership(), this)) {",
      "399:                     throwIfMissingPermission(job, OwnershipPlugin.MANAGE_ITEMS_OWNERSHIP);",
      "400:                 }",
      "401:                 return;",
      "402:             } else if (context instanceof Computer) {",
      "403:                 Node node = ((Computer)context).getNode();",
      "404:                 if (node != null) {",
      "405:                     OwnerNodeProperty existing = node.getNodeProperties().get(OwnerNodeProperty.class);",
      "406:                     if (existing == null || !Objects.equals(existing.getOwnership(), this)) {",
      "407:                         throwIfMissingPermission(node, OwnershipPlugin.MANAGE_SLAVES_OWNERSHIP);",
      "408:                     }",
      "409:                     return;",
      "410:                 }",
      "411:             } else if (context instanceof Node) {",
      "412:                 Node node = ((Node)context);",
      "413:                 OwnerNodeProperty existing = node.getNodeProperties().get(OwnerNodeProperty.class);",
      "414:                 if (existing == null || !Objects.equals(existing.getOwnership(), this)) {",
      "415:                     throwIfMissingPermission(node, OwnershipPlugin.MANAGE_SLAVES_OWNERSHIP);",
      "416:                 }",
      "417:                 return;",
      "418:             }",
      "419:         }",
      "422:         throwIfMissingPermission(Jenkins.getActiveInstance(), Jenkins.ADMINISTER);",
      "423:     }",
      "425:     private void throwIfMissingPermission(AccessControlled context, Permission permission) throws ObjectStreamException {",
      "426:         try {",
      "427:             context.checkPermission(permission);",
      "428:         } catch (AccessDeniedException e) {",
      "429:             throw new InvalidObjectException(e.getMessage());",
      "430:         }",
      "431:     }",
      "",
      "---------------"
    ],
    "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobProperty.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobProperty.java": [
      "File: src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobProperty.java -> src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobProperty.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: import hudson.Extension;",
      "42: import hudson.model.Descriptor;",
      "43: import hudson.model.Job;",
      "44: import hudson.model.JobProperty;",
      "45: import hudson.model.JobPropertyDescriptor;",
      "46: import hudson.model.User;",
      "47: import java.io.IOException;",
      "48: import java.io.UnsupportedEncodingException;",
      "49: import java.util.Collection;",
      "50: import javax.annotation.CheckForNull;",
      "51: import javax.servlet.ServletException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43: import hudson.model.Items;",
      "48: import hudson.util.XStream2;",
      "51: import java.lang.reflect.InvocationTargetException;",
      "52: import java.lang.reflect.Method;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "172:         itemSpecificSecurity = security;",
      "173:         owner.save();",
      "174:     }",
      "175: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "180:     static {",
      "182:         try {",
      "183:             Method m = XStream2.class.getMethod(\"addCriticalField\", Class.class, String.class);",
      "184:             m.invoke(Items.XSTREAM2, JobOwnerJobProperty.class, \"ownership\");",
      "185:         } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {",
      "186:             throw new ExceptionInInitializerError(e);",
      "187:         }",
      "188:     }",
      "",
      "---------------"
    ],
    "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodeProperty.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodeProperty.java": [
      "File: src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodeProperty.java -> src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodeProperty.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: import hudson.slaves.NodeProperty;",
      "36: import hudson.slaves.NodePropertyDescriptor;",
      "37: import hudson.slaves.SlaveComputer;",
      "38: import java.util.List;",
      "39: import javax.annotation.CheckForNull;",
      "40: import jenkins.model.Jenkins;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38: import hudson.util.XStream2;",
      "39: import java.lang.reflect.InvocationTargetException;",
      "40: import java.lang.reflect.Method;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "147:                 return true;",
      "148:         }",
      "149:     }",
      "150: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "154:     static {",
      "156:         try {",
      "157:             Method m = XStream2.class.getMethod(\"addCriticalField\", Class.class, String.class);",
      "158:             m.invoke(Jenkins.XSTREAM2, OwnerNodeProperty.class, \"ownership\");",
      "159:         } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {",
      "160:             throw new ExceptionInInitializerError(e);",
      "161:         }",
      "162:     }",
      "",
      "---------------"
    ],
    "src/test/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobPropertyTest.java||src/test/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobPropertyTest.java": [
      "File: src/test/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobPropertyTest.java -> src/test/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerJobPropertyTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: package com.synopsys.arc.jenkins.plugins.ownership.jobs;",
      "27: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
      "28: import com.gargoylesoftware.htmlunit.HttpMethod;",
      "29: import com.gargoylesoftware.htmlunit.WebRequest;",
      "30: import com.synopsys.arc.jenkins.plugins.ownership.OwnershipDescription;",
      "31: import hudson.cli.CLICommandInvoker;",
      "32: import hudson.cli.UpdateJobCommand;",
      "33: import hudson.model.FreeStyleProject;",
      "34: import hudson.model.Item;",
      "35: import hudson.model.Job;",
      "36: import java.io.ByteArrayInputStream;",
      "37: import java.io.InputStream;",
      "38: import java.nio.charset.StandardCharsets;",
      "39: import jenkins.model.Jenkins;",
      "40: import org.junit.Before;",
      "41: import org.junit.Rule;",
      "42: import org.junit.Test;",
      "43: import org.jvnet.hudson.test.JenkinsRule;",
      "44: import org.jvnet.hudson.test.JenkinsRule.WebClient;",
      "45: import org.jvnet.hudson.test.MockAuthorizationStrategy;",
      "47: import static hudson.cli.CLICommandInvoker.Matcher.failedWith;",
      "48: import static hudson.cli.CLICommandInvoker.Matcher.succeededSilently;",
      "49: import static org.hamcrest.Matchers.equalTo;",
      "50: import static org.hamcrest.Matchers.is;",
      "51: import static org.junit.Assert.assertThat;",
      "52: import static org.junit.Assert.fail;",
      "54: public class JobOwnerJobPropertyTest {",
      "56:     @Rule",
      "57:     public JenkinsRule r = new JenkinsRule();",
      "59:     @Before",
      "60:     public void setupSecurity() {",
      "61:         r.jenkins.setSecurityRealm(r.createDummySecurityRealm());",
      "62:         MockAuthorizationStrategy mas = new MockAuthorizationStrategy();",
      "63:         mas.grant(Jenkins.ADMINISTER) // Implies MANAGE_ITEMS_OWNERSHIP.",
      "64:                 .everywhere()",
      "65:                 .to(\"admin\");",
      "66:         mas.grant(Item.CONFIGURE, Item.READ, Jenkins.READ)",
      "67:                 .everywhere()",
      "68:                 .to(\"non-admin\");",
      "69:         r.jenkins.setAuthorizationStrategy(mas);",
      "70:     }",
      "72:     @Test",
      "73:     public void changeOwnerViaPost() throws Exception {",
      "74:         FreeStyleProject p = r.createFreeStyleProject();",
      "75:         p.getProperty(JobOwnerJobProperty.class).setOwnershipDescription(new OwnershipDescription(true, \"admin\", null));",
      "77:         WebClient wc = r.createWebClient();",
      "78:         wc.login(\"non-admin\", \"non-admin\");",
      "79:         WebRequest req = new WebRequest(wc.createCrumbedUrl(String.format(\"%sconfig.xml\", p.getUrl())), HttpMethod.POST);",
      "80:         req.setAdditionalHeader(\"Content-Type\", \"application/xml\");",
      "81:         req.setRequestBody(getJobXml(\"admin\"));",
      "82:         wc.getPage(req);",
      "83:         assertThat(\"Users should be able to configure jobs when ownership is unchanged\",",
      "84:                 getPrimaryOwner(p), is(equalTo(\"admin\")));",
      "86:         try {",
      "87:             wc.login(\"non-admin\", \"non-admin\");",
      "88:             req.setRequestBody(getJobXml(\"non-admin\"));",
      "89:             wc.getPage(req);",
      "90:             fail(\"Users should not be able to configure job ownership without Manger Ownership/Jobs permissions\");",
      "91:         } catch (FailingHttpStatusCodeException e) {",
      "92:             assertThat(getPrimaryOwner(p), is(equalTo(\"admin\")));",
      "93:         }",
      "95:         wc.login(\"admin\", \"admin\");",
      "96:         req.setRequestBody(getJobXml(\"non-admin\"));",
      "97:         wc.getPage(req);",
      "98:         assertThat(\"Users with Manage Ownership/Jobs permissions should be able to change ownership\",",
      "99:                 getPrimaryOwner(p), is(equalTo(\"non-admin\")));",
      "100:     }",
      "102:     @Test",
      "103:     public void changeOwnerViaCLI() throws Exception {",
      "104:         FreeStyleProject p = r.createFreeStyleProject();",
      "105:         p.getProperty(JobOwnerJobProperty.class).setOwnershipDescription(new OwnershipDescription(true, \"admin\", null));",
      "107:         CLICommandInvoker command = new CLICommandInvoker(r, new UpdateJobCommand())",
      "108:                 .asUser(\"non-admin\")",
      "109:                 .withArgs(p.getFullName())",
      "110:                 .withStdin(getJobXmlAsStream(\"admin\"));",
      "111:         assertThat(\"Users without Overall/Administer permissions should not be able to configure jobs via CLI\",",
      "112:                 command.invoke(), failedWith(1));",
      "113:         assertThat(getPrimaryOwner(p), is(equalTo(\"admin\")));",
      "115:         command.asUser(\"admin\")",
      "116:                 .withArgs(p.getFullName())",
      "117:                 .withStdin(getJobXmlAsStream(\"non-admin\"));",
      "118:         assertThat(\"Users with Overall/Administer permissions should be able to configure jobs via CLI\",",
      "119:                 command.invoke(), succeededSilently());",
      "120:         assertThat(getPrimaryOwner(p), is(equalTo(\"non-admin\")));",
      "121:     }",
      "123:     private String getPrimaryOwner(Job<?,?> job) {",
      "124:         return job.getProperty(JobOwnerJobProperty.class).getOwnership().getPrimaryOwnerId();",
      "125:     }",
      "127:     private String getJobXml(String ownerSid) {",
      "128:         return String.format(JOB_XML_TEMPLATE, ownerSid);",
      "129:     }",
      "131:     private InputStream getJobXmlAsStream(String ownerSid) {",
      "132:         return new ByteArrayInputStream(getJobXml(ownerSid).getBytes(StandardCharsets.UTF_8));",
      "133:     }",
      "135:     private static final String JOB_XML_TEMPLATE =",
      "136:             \"<?xml version='1.0' encoding='UTF-8'?>\" +",
      "137:             \"<project>\" +",
      "138:             \"<properties>\" +",
      "139:             \"    <com.synopsys.arc.jenkins.plugins.ownership.jobs.JobOwnerJobProperty plugin=\\\"ownership@0.10.1-SNAPSHOT\\\">\" +",
      "140:             \"        <ownership>\" +",
      "141:             \"           <ownershipEnabled>true</ownershipEnabled>\" +",
      "142:             \"           <primaryOwnerId>%s</primaryOwnerId>\" +",
      "143:             \"           <coownersIds class=\\\"sorted-set\\\"/>\" +",
      "144:             \"       </ownership>\" +",
      "145:             \"   </com.synopsys.arc.jenkins.plugins.ownership.jobs.JobOwnerJobProperty>\" +",
      "146:             \"</properties>\" +",
      "147:             \"</project>\";",
      "148: }",
      "",
      "---------------"
    ],
    "src/test/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodePropertyTest.java||src/test/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodePropertyTest.java": [
      "File: src/test/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodePropertyTest.java -> src/test/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/OwnerNodePropertyTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package com.synopsys.arc.jenkins.plugins.ownership.nodes;",
      "26: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
      "27: import com.gargoylesoftware.htmlunit.HttpMethod;",
      "28: import com.gargoylesoftware.htmlunit.WebRequest;",
      "29: import com.synopsys.arc.jenkins.plugins.ownership.OwnershipDescription;",
      "30: import hudson.cli.CLICommandInvoker;",
      "31: import hudson.cli.UpdateNodeCommand;",
      "32: import hudson.model.Computer;",
      "33: import hudson.model.Node;",
      "34: import java.io.ByteArrayInputStream;",
      "35: import java.io.InputStream;",
      "36: import java.nio.charset.StandardCharsets;",
      "37: import jenkins.model.Jenkins;",
      "38: import org.junit.Before;",
      "39: import org.junit.Rule;",
      "40: import org.junit.Test;",
      "41: import org.jvnet.hudson.test.JenkinsRule;",
      "42: import org.jvnet.hudson.test.MockAuthorizationStrategy;",
      "44: import static hudson.cli.CLICommandInvoker.Matcher.failedWith;",
      "45: import static hudson.cli.CLICommandInvoker.Matcher.succeededSilently;",
      "46: import static org.hamcrest.Matchers.equalTo;",
      "47: import static org.hamcrest.Matchers.is;",
      "48: import static org.junit.Assert.assertThat;",
      "49: import static org.junit.Assert.fail;",
      "51: public class OwnerNodePropertyTest {",
      "53:     @Rule",
      "54:     public JenkinsRule r = new JenkinsRule();",
      "56:     @Before",
      "57:     public void setupSecurity() {",
      "58:         r.jenkins.setSecurityRealm(r.createDummySecurityRealm());",
      "59:         MockAuthorizationStrategy mas = new MockAuthorizationStrategy();",
      "60:         mas.grant(Jenkins.ADMINISTER) // Implies MANAGE_SLAVES_OWNERSHIP.",
      "61:                 .everywhere()",
      "62:                 .to(\"admin\");",
      "63:         mas.grant(Computer.CONFIGURE, Jenkins.READ)",
      "64:                 .everywhere()",
      "65:                 .to(\"non-admin\");",
      "66:         r.jenkins.setAuthorizationStrategy(mas);",
      "67:     }",
      "69:     @Test",
      "70:     public void changeOwnerViaPost() throws Exception {",
      "71:         String nodeName; // Computer#updateByXml replaces the existing node with a new instance, so we always need to look up the current instance.",
      "72:         String nodeUrl;",
      "73:         {",
      "74:             Node n = r.createSlave();",
      "75:             n.getNodeProperties().add(new OwnerNodeProperty(n, new OwnershipDescription(true, \"admin\", null)));",
      "76:             nodeName = n.getNodeName();",
      "77:             nodeUrl = n.toComputer().getUrl();",
      "78:         }",
      "80:         JenkinsRule.WebClient wc = r.createWebClient();",
      "81:         wc.login(\"non-admin\", \"non-admin\");",
      "82:         WebRequest req = new WebRequest(wc.createCrumbedUrl(String.format(\"%sconfig.xml\", nodeUrl)), HttpMethod.POST);",
      "83:         req.setAdditionalHeader(\"Content-Type\", \"application/xml\");",
      "84:         req.setRequestBody(getNodeXml(nodeName, \"admin\"));",
      "85:         wc.getPage(req);",
      "86:         assertThat(\"Users should be able to configure jobs when ownership is unchanged\",",
      "87:                 getPrimaryOwner(nodeName), is(equalTo(\"admin\")));",
      "89:         try {",
      "90:             wc.login(\"non-admin\", \"non-admin\");",
      "91:             req.setRequestBody(getNodeXml(nodeName, \"non-admin\"));",
      "92:             wc.getPage(req);",
      "93:             fail(\"Users should not be able to configure job ownership without Manger Ownership/Jobs permissions\");",
      "94:         } catch (FailingHttpStatusCodeException e) {",
      "95:             assertThat(getPrimaryOwner(nodeName), is(equalTo(\"admin\")));",
      "96:         }",
      "98:         wc.login(\"admin\", \"admin\");",
      "99:         req.setRequestBody(getNodeXml(nodeName, \"non-admin\"));",
      "100:         wc.getPage(req);",
      "101:         assertThat(\"Users with Manage Ownership/Jobs permissions should be able to change ownership\",",
      "102:                 getPrimaryOwner(nodeName), is(equalTo(\"non-admin\")));",
      "103:     }",
      "105:     @Test",
      "106:     public void changeOwnerViaCLI() throws Exception {",
      "107:         String nodeName;",
      "108:         {",
      "109:             Node n = r.createSlave();",
      "110:             n.getNodeProperties().add(new OwnerNodeProperty(n, new OwnershipDescription(true, \"admin\", null)));",
      "111:             nodeName = n.getNodeName();",
      "112:         }",
      "114:         CLICommandInvoker command = new CLICommandInvoker(r, new UpdateNodeCommand())",
      "115:                 .asUser(\"non-admin\")",
      "116:                 .withArgs(nodeName)",
      "117:                 .withStdin(getNodeXmlAsStream(nodeName, \"admin\"));",
      "118:         assertThat(\"Users without Overall/Administer permissions should not be able to configure nodes via CLI\",",
      "119:                 command.invoke(), failedWith(1));",
      "120:         assertThat(getPrimaryOwner(nodeName), is(equalTo(\"admin\")));",
      "122:         command.asUser(\"admin\")",
      "123:                 .withArgs(nodeName)",
      "124:                 .withStdin(getNodeXmlAsStream(nodeName, \"non-admin\"));",
      "125:         assertThat(\"Users with Overall/Administer permissions should be able to configure jobs via CLI\",",
      "126:                 command.invoke(), succeededSilently());",
      "127:         assertThat(getPrimaryOwner(nodeName), is(equalTo(\"non-admin\")));",
      "128:     }",
      "130:     private String getPrimaryOwner(String nodeName) {",
      "131:         return r.jenkins.getNode(nodeName).getNodeProperties().get(OwnerNodeProperty.class).getOwnership().getPrimaryOwnerId();",
      "132:     }",
      "134:     private String getNodeXml(String nodeName, String ownerSid) {",
      "135:         return String.format(NODE_XML_TEMPLATE, nodeName, ownerSid);",
      "136:     }",
      "138:     private InputStream getNodeXmlAsStream(String nodeName, String ownerSid) {",
      "139:         return new ByteArrayInputStream(getNodeXml(nodeName, ownerSid).getBytes(StandardCharsets.UTF_8));",
      "140:     }",
      "142:     private static final String NODE_XML_TEMPLATE =",
      "143:             \"<?xml version='1.0' encoding='UTF-8'?>\" +",
      "144:             \"<slave>\" +",
      "145:             \"    <name>%s</name>\" +",
      "146:             \"    <description/>\" +",
      "147:             \"    <remoteFS>/tmp/dumbnode</remoteFS>\" +",
      "148:             \"    <numExecutors>1</numExecutors>\" +",
      "149:             \"    <mode>NORMAL</mode>\" +",
      "150:             \"    <retentionStrategy class=\\\"hudson.slaves.RetentionStrategy$Always\\\"/>\" +",
      "151:             \"    <launcher/>\" +",
      "152:             \"    <label/>\" +",
      "153:             \"    <nodeProperties>\" +",
      "154:             \"        <com.synopsys.arc.jenkins.plugins.ownership.nodes.OwnerNodeProperty plugin=\\\"ownership@0.10.1-SNAPSHOT\\\">\" +",
      "155:             \"            <ownership>\" +",
      "156:             \"                <ownershipEnabled>true</ownershipEnabled>\" +",
      "157:             \"                <primaryOwnerId>%s</primaryOwnerId>\" +",
      "158:             \"                <coownersIds class=\\\"sorted-set\\\"/>\" +",
      "159:             \"            </ownership>\" +",
      "160:             \"            <nodeName>DumbNode</nodeName>\" +",
      "161:             \"        </com.synopsys.arc.jenkins.plugins.ownership.nodes.OwnerNodeProperty>\" +",
      "162:             \"    </nodeProperties>\" +",
      "163:             \"</slave>\";",
      "165: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bcc2c27aae247a8359a74c639eba54976a416be4",
      "candidate_info": {
        "commit_hash": "bcc2c27aae247a8359a74c639eba54976a416be4",
        "repo": "jenkinsci/ownership-plugin",
        "commit_url": "https://github.com/jenkinsci/ownership-plugin/commit/bcc2c27aae247a8359a74c639eba54976a416be4",
        "files": [
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java"
        ],
        "message": "[JENKINS-49744] - Improve diagnostics messages when permission is missing",
        "before_after_code_files": [
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java"
          ],
          "candidate": [
            "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java": [
          "File: src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java -> src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "422:         throwIfMissingPermission(Jenkins.getActiveInstance(), Jenkins.ADMINISTER);",
          "423:     }",
          "426:         try {",
          "427:             context.checkPermission(permission);",
          "428:         } catch (AccessDeniedException e) {",
          "430:         }",
          "431:     }",
          "",
          "[Removed Lines]",
          "425:     private void throwIfMissingPermission(AccessControlled context, Permission permission) throws ObjectStreamException {",
          "429:             throw new InvalidObjectException(e.getMessage());",
          "",
          "[Added Lines]",
          "425:     private void throwIfMissingPermission(@Nonnull AccessControlled context, Permission permission) throws ObjectStreamException {",
          "429:             final String name;",
          "430:             if (context instanceof ModelObject) {",
          "431:                 name = ((ModelObject)context).getDisplayName();",
          "432:             } else {",
          "433:                 name = context.toString();",
          "434:             }",
          "436:             InvalidObjectException ex = new InvalidObjectException(",
          "437:                     String.format(\"Cannot modify permissions of %s of type %s: %s\", name,",
          "438:                             context.getClass(), e.getMessage()));",
          "439:             ex.addSuppressed(e);",
          "440:             throw ex;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2212e574d5bcd4a0552c882e066a0c5a8705bf02",
      "candidate_info": {
        "commit_hash": "2212e574d5bcd4a0552c882e066a0c5a8705bf02",
        "repo": "jenkinsci/ownership-plugin",
        "commit_url": "https://github.com/jenkinsci/ownership-plugin/commit/2212e574d5bcd4a0552c882e066a0c5a8705bf02",
        "files": [
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java",
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerHelper.java",
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/ComputerOwnerHelper.java",
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerHelper.java",
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerPropertyHelper.java",
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/util/AbstractOwnershipHelper.java",
          "src/main/java/org/jenkinsci/plugins/ownership/model/folders/FolderOwnershipHelper.java",
          "src/main/java/org/jenkinsci/plugins/ownership/model/runs/RunOwnershipHelper.java"
        ],
        "message": "[JENKINS-49744] - Generalize the permission handling logic using OwnershipHelper and locator extensions",
        "before_after_code_files": [
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java",
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerHelper.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerHelper.java",
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/ComputerOwnerHelper.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/ComputerOwnerHelper.java",
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerHelper.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerHelper.java",
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerPropertyHelper.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerPropertyHelper.java",
          "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/util/AbstractOwnershipHelper.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/util/AbstractOwnershipHelper.java",
          "src/main/java/org/jenkinsci/plugins/ownership/model/folders/FolderOwnershipHelper.java||src/main/java/org/jenkinsci/plugins/ownership/model/folders/FolderOwnershipHelper.java",
          "src/main/java/org/jenkinsci/plugins/ownership/model/runs/RunOwnershipHelper.java||src/main/java/org/jenkinsci/plugins/ownership/model/runs/RunOwnershipHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java"
          ],
          "candidate": [
            "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java": [
          "File: src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java -> src/main/java/com/synopsys/arc/jenkins/plugins/ownership/OwnershipDescription.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package com.synopsys.arc.jenkins.plugins.ownership;",
          "27: import com.synopsys.arc.jenkins.plugins.ownership.util.IdStrategyComparator;",
          "28: import com.synopsys.arc.jenkins.plugins.ownership.util.OwnershipDescriptionHelper;",
          "29: import com.synopsys.arc.jenkins.plugins.ownership.nodes.OwnerNodeProperty;",
          "30: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "31: import hudson.Util;",
          "33: import hudson.model.Descriptor;",
          "36: import hudson.model.User;",
          "37: import hudson.security.ACL;",
          "38: import hudson.security.AccessControlled;",
          "",
          "[Removed Lines]",
          "26: import com.synopsys.arc.jenkins.plugins.ownership.jobs.JobOwnerJobProperty;",
          "32: import hudson.model.Computer;",
          "34: import hudson.model.Job;",
          "35: import hudson.model.Node;",
          "",
          "[Added Lines]",
          "26: import com.synopsys.arc.jenkins.plugins.ownership.util.AbstractOwnershipHelper;",
          "33: import hudson.model.ModelObject;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: import java.util.Objects;",
          "45: import java.util.Set;",
          "46: import java.util.TreeSet;",
          "47: import javax.annotation.CheckForNull;",
          "48: import javax.annotation.Nonnull;",
          "49: import javax.annotation.Nullable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import java.util.logging.Level;",
          "46: import java.util.logging.Logger;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51: import net.sf.json.JSONObject;",
          "52: import org.acegisecurity.AccessDeniedException;",
          "53: import org.acegisecurity.Authentication;",
          "54: import org.jenkinsci.plugins.scriptsecurity.sandbox.whitelists.Whitelisted;",
          "55: import org.kohsuke.stapler.Stapler;",
          "56: import org.kohsuke.stapler.StaplerRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: import org.jenkinsci.plugins.ownership.model.OwnershipHelperLocator;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64: public class OwnershipDescription implements Serializable {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     private static final Logger LOGGER = Logger.getLogger(OwnershipDescription.class.getName());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "392:         StaplerRequest request = Stapler.getCurrentRequest();",
          "393:         if (request != null) {",
          "394:             AccessControlled context = request.findAncestorObject(AccessControlled.class);",
          "408:                     }",
          "409:                     return;",
          "410:                 }",
          "418:             }",
          "419:         }",
          "",
          "[Removed Lines]",
          "395:             if (context instanceof Job) {",
          "396:                 Job<?, ?> job = (Job)context;",
          "397:                 JobOwnerJobProperty existing = job.getProperty(JobOwnerJobProperty.class);",
          "398:                 if (existing == null || !Objects.equals(existing.getOwnership(), this)) {",
          "399:                     throwIfMissingPermission(job, OwnershipPlugin.MANAGE_ITEMS_OWNERSHIP);",
          "400:                 }",
          "401:                 return;",
          "402:             } else if (context instanceof Computer) {",
          "403:                 Node node = ((Computer)context).getNode();",
          "404:                 if (node != null) {",
          "405:                     OwnerNodeProperty existing = node.getNodeProperties().get(OwnerNodeProperty.class);",
          "406:                     if (existing == null || !Objects.equals(existing.getOwnership(), this)) {",
          "407:                         throwIfMissingPermission(node, OwnershipPlugin.MANAGE_SLAVES_OWNERSHIP);",
          "411:             } else if (context instanceof Node) {",
          "412:                 Node node = ((Node)context);",
          "413:                 OwnerNodeProperty existing = node.getNodeProperties().get(OwnerNodeProperty.class);",
          "414:                 if (existing == null || !Objects.equals(existing.getOwnership(), this)) {",
          "415:                     throwIfMissingPermission(node, OwnershipPlugin.MANAGE_SLAVES_OWNERSHIP);",
          "416:                 }",
          "417:                 return;",
          "",
          "[Added Lines]",
          "399:             if (context != null) {",
          "400:                 final AbstractOwnershipHelper<AccessControlled> helper = OwnershipHelperLocator.locate(context);",
          "401:                 if (helper != null) {",
          "402:                     final OwnershipDescription d = helper.getOwnershipDescription(context);",
          "403:                     if (!helper.hasLocallyDefinedOwnership(context) || !Objects.equals(d, this)) {",
          "404:                         throwIfMissingPermission(context, helper.getRequiredPermission());",
          "407:                 } else {",
          "408:                     LOGGER.log(Level.WARNING, \"Cannot locate OwnershipHelperClass for object {0}. \" +",
          "409:                             \"Jenkins.ADMINISTER permissions will be required to change ownership\", context);",
          "411:             } else {",
          "413:                 LOGGER.log(Level.WARNING, \"Ownership Description is used outside the object context. \" +",
          "414:                         \"Jenkins.ADMINISTER permissions will be required to change ownership\");",
          "",
          "---------------"
        ],
        "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerHelper.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerHelper.java": [
          "File: src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerHelper.java -> src/main/java/com/synopsys/arc/jenkins/plugins/ownership/jobs/JobOwnerHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import java.util.Collection;",
          "43: import javax.annotation.CheckForNull;",
          "44: import javax.annotation.Nonnull;",
          "45: import org.jenkinsci.plugins.ownership.model.OwnershipHelperLocator;",
          "46: import org.jenkinsci.plugins.ownership.model.OwnershipInfo;",
          "47: import org.jenkinsci.plugins.ownership.model.jobs.JobOwnershipDescriptionSource;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import hudson.security.Permission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:         return getOwnershipInfo(job).getDescription();",
          "95:     }",
          "97:     @Override",
          "98:     public OwnershipInfo getOwnershipInfo(Job<?, ?> job) {",
          "99:         JobOwnerJobProperty prop = getOwnerProperty(job);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     @Override",
          "100:     public Permission getRequiredPermission() {",
          "101:         return OwnershipPlugin.MANAGE_ITEMS_OWNERSHIP;",
          "102:     }",
          "104:     @Override",
          "105:     public boolean hasLocallyDefinedOwnership(@Nonnull Job<?, ?> job) {",
          "106:         return getOwnerProperty(job) != null;",
          "107:     }",
          "",
          "---------------"
        ],
        "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/ComputerOwnerHelper.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/ComputerOwnerHelper.java": [
          "File: src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/ComputerOwnerHelper.java -> src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/ComputerOwnerHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: package com.synopsys.arc.jenkins.plugins.ownership.nodes;",
          "26: import com.synopsys.arc.jenkins.plugins.ownership.OwnershipDescription;",
          "27: import com.synopsys.arc.jenkins.plugins.ownership.util.AbstractOwnershipHelper;",
          "28: import hudson.model.Computer;",
          "29: import hudson.model.Node;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import com.synopsys.arc.jenkins.plugins.ownership.OwnershipPlugin;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import java.util.Collections;",
          "34: import javax.annotation.CheckForNull;",
          "35: import javax.annotation.Nonnull;",
          "36: import org.jenkinsci.plugins.ownership.model.OwnershipInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import hudson.security.Permission;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:         NodeOwnerHelper.setOwnership(node, descr);",
          "84:     }",
          "86:     @Override",
          "87:     public String getItemTypeName(Computer item) {",
          "88:         return \"computer\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     @Override",
          "90:     public Permission getRequiredPermission() {",
          "91:         return OwnershipPlugin.MANAGE_SLAVES_OWNERSHIP;",
          "92:     }",
          "94:     @Override",
          "95:     public boolean hasLocallyDefinedOwnership(@Nonnull Computer computer) {",
          "96:         Node node = computer.getNode();",
          "97:         if (node == null) {",
          "99:             return false;",
          "100:         }",
          "101:         return NodeOwnerHelper.Instance.hasLocallyDefinedOwnership(node);",
          "102:     }",
          "",
          "---------------"
        ],
        "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerHelper.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerHelper.java": [
          "File: src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerHelper.java -> src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import java.util.Collection;",
          "38: import javax.annotation.CheckForNull;",
          "39: import javax.annotation.Nonnull;",
          "40: import org.jenkinsci.plugins.ownership.model.OwnershipInfo;",
          "41: import org.jenkinsci.plugins.ownership.model.nodes.NodeOwnershipDescriptionSource;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import hudson.security.Permission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:         return prop != null ? new OwnershipInfo(OwnershipDescription.DISABLED_DESCR,",
          "84:                 new NodeOwnershipDescriptionSource(item)) : OwnershipInfo.DISABLED_INFO;",
          "85:     }",
          "87:     @Override",
          "88:     public Collection<User> getPossibleOwners(Node item) {",
          "89:         if (OwnershipPlugin.getInstance().isRequiresConfigureRights()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     @Override",
          "90:     public Permission getRequiredPermission() {",
          "91:         return OwnershipPlugin.MANAGE_SLAVES_OWNERSHIP;",
          "92:     }",
          "94:     @Override",
          "95:     public boolean hasLocallyDefinedOwnership(@Nonnull Node node) {",
          "96:         return getOwnerProperty(node) != null;",
          "97:     }",
          "",
          "---------------"
        ],
        "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerPropertyHelper.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerPropertyHelper.java": [
          "File: src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerPropertyHelper.java -> src/main/java/com/synopsys/arc/jenkins/plugins/ownership/nodes/NodeOwnerPropertyHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import com.synopsys.arc.jenkins.plugins.ownership.util.UserCollectionFilter;",
          "30: import hudson.model.Node;",
          "31: import hudson.model.User;",
          "32: import hudson.slaves.NodeProperty;",
          "33: import java.util.Collection;",
          "34: import javax.annotation.CheckForNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import hudson.security.Permission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:         return null;",
          "95:     }",
          "97:     @Override",
          "98:     public String getItemTypeName(NodeProperty item) {",
          "99:         return NodeOwnerHelper.ITEM_TYPE_NAME;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:     @Override",
          "99:     public Permission getRequiredPermission() {",
          "100:         return OwnershipPlugin.MANAGE_SLAVES_OWNERSHIP;",
          "101:     }",
          "103:     @Override",
          "104:     public boolean hasLocallyDefinedOwnership(@Nonnull NodeProperty item) {",
          "106:         return true;",
          "107:     }",
          "",
          "---------------"
        ],
        "src/main/java/com/synopsys/arc/jenkins/plugins/ownership/util/AbstractOwnershipHelper.java||src/main/java/com/synopsys/arc/jenkins/plugins/ownership/util/AbstractOwnershipHelper.java": [
          "File: src/main/java/com/synopsys/arc/jenkins/plugins/ownership/util/AbstractOwnershipHelper.java -> src/main/java/com/synopsys/arc/jenkins/plugins/ownership/util/AbstractOwnershipHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import java.util.Collections;",
          "32: import javax.annotation.CheckForNull;",
          "33: import javax.annotation.Nonnull;",
          "34: import org.jenkinsci.plugins.ownership.model.OwnershipInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import hudson.security.Permission;",
          "36: import jenkins.model.Jenkins;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     @Nonnull",
          "107:     public abstract OwnershipInfo getOwnershipInfo(@Nonnull TObjectType item);",
          "108: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:     @Nonnull",
          "119:     public Permission getRequiredPermission() {",
          "120:         return Jenkins.ADMINISTER;",
          "121:     }",
          "130:     public boolean hasLocallyDefinedOwnership(@Nonnull TObjectType item) { return false; }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/ownership/model/folders/FolderOwnershipHelper.java||src/main/java/org/jenkinsci/plugins/ownership/model/folders/FolderOwnershipHelper.java": [
          "File: src/main/java/org/jenkinsci/plugins/ownership/model/folders/FolderOwnershipHelper.java -> src/main/java/org/jenkinsci/plugins/ownership/model/folders/FolderOwnershipHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import java.util.Collection;",
          "40: import javax.annotation.CheckForNull;",
          "41: import javax.annotation.Nonnull;",
          "42: import org.jenkinsci.plugins.ownership.model.OwnershipHelperLocator;",
          "43: import org.jenkinsci.plugins.ownership.model.OwnershipInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import hudson.security.Permission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         return getOwnershipInfo(item).getDescription();",
          "89:     }",
          "91:     @Override",
          "92:     public OwnershipInfo getOwnershipInfo(AbstractFolder<?> item) {",
          "93:         if (item == null) { // Handle renames, etc.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:     @Nonnull",
          "94:     @Override",
          "95:     public Permission getRequiredPermission() {",
          "96:         return OwnershipPlugin.MANAGE_ITEMS_OWNERSHIP;",
          "97:     }",
          "99:     @Override",
          "100:     public boolean hasLocallyDefinedOwnership(@Nonnull AbstractFolder<?> folder) {",
          "101:         return getOwnerProperty(folder) != null;",
          "102:     }",
          "",
          "---------------"
        ],
        "src/main/java/org/jenkinsci/plugins/ownership/model/runs/RunOwnershipHelper.java||src/main/java/org/jenkinsci/plugins/ownership/model/runs/RunOwnershipHelper.java": [
          "File: src/main/java/org/jenkinsci/plugins/ownership/model/runs/RunOwnershipHelper.java -> src/main/java/org/jenkinsci/plugins/ownership/model/runs/RunOwnershipHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import java.util.Map;",
          "38: import javax.annotation.CheckForNull;",
          "39: import javax.annotation.Nonnull;",
          "40: import org.jenkinsci.plugins.ownership.model.OwnershipInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import hudson.security.Permission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     public OwnershipInfo getOwnershipInfo(Run item) {",
          "77:         return JobOwnerHelper.Instance.getOwnershipInfo(item.getParent());",
          "78:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:     @Override",
          "83:     public Permission getRequiredPermission() {",
          "85:         return OwnershipPlugin.MANAGE_ITEMS_OWNERSHIP;",
          "86:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}