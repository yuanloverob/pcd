{
  "cve_id": "CVE-2023-39441",
  "cve_desc": "Apache Airflow SMTP Provider before 1.3.0, Apache Airflow IMAP Provider before 3.3.0, and\u00a0Apache Airflow before 2.7.0 are affected by the\u00a0Validation of OpenSSL Certificate vulnerability.\n\nThe default SSL context with SSL library did not check a server's X.509\u00a0certificate.\u00a0 Instead, the code accepted any certificate, which could\u00a0result in the disclosure of mail server credentials or mail contents\u00a0when the client connects to an attacker in a MITM position.\n\nUsers are strongly advised to upgrade to Apache Airflow version 2.7.0 or newer, Apache Airflow IMAP Provider version 3.3.0 or newer, and Apache Airflow SMTP Provider version 1.3.0 or newer to mitigate the risk associated with this vulnerability",
  "repo": "apache/airflow",
  "patch_hash": "38fc9cd823feafd8ec61d5d5c7eddb9e9162f755",
  "patch_info": {
    "commit_hash": "38fc9cd823feafd8ec61d5d5c7eddb9e9162f755",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/38fc9cd823feafd8ec61d5d5c7eddb9e9162f755",
    "files": [
      "airflow/providers/imap/CHANGELOG.rst",
      "airflow/providers/imap/hooks/imap.py",
      "airflow/providers/imap/provider.yaml",
      "docs/apache-airflow-providers-imap/configurations-ref.rst",
      "docs/apache-airflow-providers-imap/index.rst",
      "docs/apache-airflow/configurations-ref.rst",
      "tests/providers/imap/hooks/test_imap.py"
    ],
    "message": "Allows to choose SSL context for IMAP provider (#33108)\n\n* Allows to choose SSL context for IMAP provider\n\nThis change add two options to choose from when SSL IMAP connection is created:\n\n* default - for balance between compatibility and security\n* none - in case compatibility with existing infrastructure is preferred\n\nThe fallback is:\n\n* The Airflow \"email\", \"ssl_context\"\n* \"default\"\n\nCo-authored-by: Ephraim Anierobi <splendidzigy24@gmail.com>\n(cherry picked from commit 52ca7bfc988f4c9b608f544bc3e9524fd6564639)",
    "before_after_code_files": [
      "airflow/providers/imap/hooks/imap.py||airflow/providers/imap/hooks/imap.py",
      "tests/providers/imap/hooks/test_imap.py||tests/providers/imap/hooks/test_imap.py"
    ]
  },
  "patch_diff": {
    "airflow/providers/imap/hooks/imap.py||airflow/providers/imap/hooks/imap.py": [
      "File: airflow/providers/imap/hooks/imap.py -> airflow/providers/imap/hooks/imap.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import imaplib",
      "27: import os",
      "28: import re",
      "29: from typing import Any, Iterable",
      "31: from airflow.exceptions import AirflowException",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import ssl",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "78:         return self",
      "80:     def _build_client(self, conn: Connection) -> imaplib.IMAP4_SSL | imaplib.IMAP4:",
      "84:         else:",
      "92:         return mail_client",
      "",
      "[Removed Lines]",
      "81:         IMAP: type[imaplib.IMAP4_SSL] | type[imaplib.IMAP4]",
      "82:         if conn.extra_dejson.get(\"use_ssl\", True):",
      "83:             IMAP = imaplib.IMAP4_SSL",
      "85:             IMAP = imaplib.IMAP4",
      "87:         if conn.port:",
      "88:             mail_client = IMAP(conn.host, conn.port)",
      "89:         else:",
      "90:             mail_client = IMAP(conn.host)",
      "",
      "[Added Lines]",
      "82:         mail_client: imaplib.IMAP4_SSL | imaplib.IMAP4",
      "83:         use_ssl = conn.extra_dejson.get(\"use_ssl\", True)",
      "84:         if use_ssl:",
      "85:             from airflow.configuration import conf",
      "87:             ssl_context_string = conf.get(\"imap\", \"SSL_CONTEXT\", fallback=None)",
      "88:             if ssl_context_string is None:",
      "89:                 ssl_context_string = conf.get(\"email\", \"SSL_CONTEXT\", fallback=None)",
      "90:             if ssl_context_string is None:",
      "91:                 ssl_context_string = \"default\"",
      "92:             if ssl_context_string == \"default\":",
      "93:                 ssl_context = ssl.create_default_context()",
      "94:             elif ssl_context_string == \"none\":",
      "95:                 ssl_context = None",
      "96:             else:",
      "97:                 raise RuntimeError(",
      "98:                     f\"The email.ssl_context configuration variable must \"",
      "99:                     f\"be set to 'default' or 'none' and is '{ssl_context_string}'.\"",
      "100:                 )",
      "101:             if conn.port:",
      "102:                 mail_client = imaplib.IMAP4_SSL(conn.host, conn.port, ssl_context=ssl_context)",
      "103:             else:",
      "104:                 mail_client = imaplib.IMAP4_SSL(conn.host, ssl_context=ssl_context)",
      "106:             if conn.port:",
      "107:                 mail_client = imaplib.IMAP4(conn.host, conn.port)",
      "108:             else:",
      "109:                 mail_client = imaplib.IMAP4(conn.host)",
      "",
      "---------------"
    ],
    "tests/providers/imap/hooks/test_imap.py||tests/providers/imap/hooks/test_imap.py": [
      "File: tests/providers/imap/hooks/test_imap.py -> tests/providers/imap/hooks/test_imap.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: from airflow.models import Connection",
      "28: from airflow.providers.imap.hooks.imap import ImapHook",
      "29: from airflow.utils import db",
      "31: imaplib_string = \"airflow.providers.imap.hooks.imap.imaplib\"",
      "32: open_string = \"airflow.providers.imap.hooks.imap.open\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: from tests.test_utils.config import conf_vars",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:         )",
      "87:     @patch(imaplib_string)",
      "89:         mock_conn = _create_fake_imap(mock_imaplib)",
      "91:         with ImapHook():",
      "92:             pass",
      "95:         mock_conn.login.assert_called_once_with(\"imap_user\", \"imap_password\")",
      "96:         assert mock_conn.logout.call_count == 1",
      "",
      "[Removed Lines]",
      "88:     def test_connect_and_disconnect(self, mock_imaplib):",
      "94:         mock_imaplib.IMAP4_SSL.assert_called_once_with(\"imap_server_address\", 1993)",
      "",
      "[Added Lines]",
      "89:     @patch(\"ssl.create_default_context\")",
      "90:     def test_connect_and_disconnect(self, create_default_context, mock_imaplib):",
      "96:         assert create_default_context.called",
      "97:         mock_imaplib.IMAP4_SSL.assert_called_once_with(",
      "98:             \"imap_server_address\", 1993, ssl_context=create_default_context.return_value",
      "99:         )",
      "100:         mock_conn.login.assert_called_once_with(\"imap_user\", \"imap_password\")",
      "101:         assert mock_conn.logout.call_count == 1",
      "103:     @patch(imaplib_string)",
      "104:     @patch(\"ssl.create_default_context\")",
      "105:     def test_connect_and_disconnect_imap_ssl_context_none(self, create_default_context, mock_imaplib):",
      "106:         mock_conn = _create_fake_imap(mock_imaplib)",
      "108:         with conf_vars({(\"imap\", \"ssl_context\"): \"none\"}):",
      "109:             with ImapHook():",
      "110:                 pass",
      "112:         assert not create_default_context.called",
      "113:         mock_imaplib.IMAP4_SSL.assert_called_once_with(\"imap_server_address\", 1993, ssl_context=None)",
      "114:         mock_conn.login.assert_called_once_with(\"imap_user\", \"imap_password\")",
      "115:         assert mock_conn.logout.call_count == 1",
      "117:     @patch(imaplib_string)",
      "118:     @patch(\"ssl.create_default_context\")",
      "119:     def test_connect_and_disconnect_imap_ssl_context_default(self, create_default_context, mock_imaplib):",
      "120:         mock_conn = _create_fake_imap(mock_imaplib)",
      "122:         with conf_vars({(\"imap\", \"ssl_context\"): \"default\"}):",
      "123:             with ImapHook():",
      "124:                 pass",
      "126:         assert create_default_context.called",
      "127:         mock_imaplib.IMAP4_SSL.assert_called_once_with(",
      "128:             \"imap_server_address\", 1993, ssl_context=create_default_context.return_value",
      "129:         )",
      "130:         mock_conn.login.assert_called_once_with(\"imap_user\", \"imap_password\")",
      "131:         assert mock_conn.logout.call_count == 1",
      "133:     @patch(imaplib_string)",
      "134:     @patch(\"ssl.create_default_context\")",
      "135:     def test_connect_and_disconnect_email_ssl_context_none(self, create_default_context, mock_imaplib):",
      "136:         mock_conn = _create_fake_imap(mock_imaplib)",
      "138:         with conf_vars({(\"email\", \"ssl_context\"): \"none\"}):",
      "139:             with ImapHook():",
      "140:                 pass",
      "142:         assert not create_default_context.called",
      "143:         mock_imaplib.IMAP4_SSL.assert_called_once_with(\"imap_server_address\", 1993, ssl_context=None)",
      "144:         mock_conn.login.assert_called_once_with(\"imap_user\", \"imap_password\")",
      "145:         assert mock_conn.logout.call_count == 1",
      "147:     @patch(imaplib_string)",
      "148:     @patch(\"ssl.create_default_context\")",
      "149:     def test_connect_and_disconnect_imap_ssl_context_override(self, create_default_context, mock_imaplib):",
      "150:         mock_conn = _create_fake_imap(mock_imaplib)",
      "152:         with conf_vars({(\"email\", \"ssl_context\"): \"none\", (\"imap\", \"ssl_context\"): \"default\"}):",
      "153:             with ImapHook():",
      "154:                 pass",
      "156:         assert create_default_context.called",
      "157:         mock_imaplib.IMAP4_SSL.assert_called_once_with(",
      "158:             \"imap_server_address\", 1993, ssl_context=create_default_context.return_value",
      "159:         )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "52ca7bfc988f4c9b608f544bc3e9524fd6564639",
      "candidate_info": {
        "commit_hash": "52ca7bfc988f4c9b608f544bc3e9524fd6564639",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/52ca7bfc988f4c9b608f544bc3e9524fd6564639",
        "files": [
          "airflow/providers/imap/CHANGELOG.rst",
          "airflow/providers/imap/hooks/imap.py",
          "airflow/providers/imap/provider.yaml",
          "docs/apache-airflow-providers-imap/configurations-ref.rst",
          "docs/apache-airflow-providers-imap/index.rst",
          "docs/apache-airflow/configurations-ref.rst",
          "tests/providers/imap/hooks/test_imap.py"
        ],
        "message": "Allows to choose SSL context for IMAP provider (#33108)\n\n* Allows to choose SSL context for IMAP provider\n\nThis change add two options to choose from when SSL IMAP connection is created:\n\n* default - for balance between compatibility and security\n* none - in case compatibility with existing infrastructure is preferred\n\nThe fallback is:\n\n* The Airflow \"email\", \"ssl_context\"\n* \"default\"\n\nCo-authored-by: Ephraim Anierobi <splendidzigy24@gmail.com>",
        "before_after_code_files": [
          "airflow/providers/imap/hooks/imap.py||airflow/providers/imap/hooks/imap.py",
          "tests/providers/imap/hooks/test_imap.py||tests/providers/imap/hooks/test_imap.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "airflow/providers/imap/hooks/imap.py||airflow/providers/imap/hooks/imap.py",
            "tests/providers/imap/hooks/test_imap.py||tests/providers/imap/hooks/test_imap.py"
          ],
          "candidate": [
            "airflow/providers/imap/hooks/imap.py||airflow/providers/imap/hooks/imap.py",
            "tests/providers/imap/hooks/test_imap.py||tests/providers/imap/hooks/test_imap.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/providers/imap/hooks/imap.py||airflow/providers/imap/hooks/imap.py": [
          "File: airflow/providers/imap/hooks/imap.py -> airflow/providers/imap/hooks/imap.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import imaplib",
          "27: import os",
          "28: import re",
          "29: from typing import Any, Iterable",
          "31: from airflow.exceptions import AirflowException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import ssl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         return self",
          "80:     def _build_client(self, conn: Connection) -> imaplib.IMAP4_SSL | imaplib.IMAP4:",
          "84:         else:",
          "92:         return mail_client",
          "",
          "[Removed Lines]",
          "81:         IMAP: type[imaplib.IMAP4_SSL] | type[imaplib.IMAP4]",
          "82:         if conn.extra_dejson.get(\"use_ssl\", True):",
          "83:             IMAP = imaplib.IMAP4_SSL",
          "85:             IMAP = imaplib.IMAP4",
          "87:         if conn.port:",
          "88:             mail_client = IMAP(conn.host, conn.port)",
          "89:         else:",
          "90:             mail_client = IMAP(conn.host)",
          "",
          "[Added Lines]",
          "82:         mail_client: imaplib.IMAP4_SSL | imaplib.IMAP4",
          "83:         use_ssl = conn.extra_dejson.get(\"use_ssl\", True)",
          "84:         if use_ssl:",
          "85:             from airflow.configuration import conf",
          "87:             ssl_context_string = conf.get(\"imap\", \"SSL_CONTEXT\", fallback=None)",
          "88:             if ssl_context_string is None:",
          "89:                 ssl_context_string = conf.get(\"email\", \"SSL_CONTEXT\", fallback=None)",
          "90:             if ssl_context_string is None:",
          "91:                 ssl_context_string = \"default\"",
          "92:             if ssl_context_string == \"default\":",
          "93:                 ssl_context = ssl.create_default_context()",
          "94:             elif ssl_context_string == \"none\":",
          "95:                 ssl_context = None",
          "96:             else:",
          "97:                 raise RuntimeError(",
          "98:                     f\"The email.ssl_context configuration variable must \"",
          "99:                     f\"be set to 'default' or 'none' and is '{ssl_context_string}'.\"",
          "100:                 )",
          "101:             if conn.port:",
          "102:                 mail_client = imaplib.IMAP4_SSL(conn.host, conn.port, ssl_context=ssl_context)",
          "103:             else:",
          "104:                 mail_client = imaplib.IMAP4_SSL(conn.host, ssl_context=ssl_context)",
          "106:             if conn.port:",
          "107:                 mail_client = imaplib.IMAP4(conn.host, conn.port)",
          "108:             else:",
          "109:                 mail_client = imaplib.IMAP4(conn.host)",
          "",
          "---------------"
        ],
        "tests/providers/imap/hooks/test_imap.py||tests/providers/imap/hooks/test_imap.py": [
          "File: tests/providers/imap/hooks/test_imap.py -> tests/providers/imap/hooks/test_imap.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from airflow.models import Connection",
          "28: from airflow.providers.imap.hooks.imap import ImapHook",
          "29: from airflow.utils import db",
          "31: imaplib_string = \"airflow.providers.imap.hooks.imap.imaplib\"",
          "32: open_string = \"airflow.providers.imap.hooks.imap.open\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: from tests.test_utils.config import conf_vars",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         )",
          "87:     @patch(imaplib_string)",
          "89:         mock_conn = _create_fake_imap(mock_imaplib)",
          "91:         with ImapHook():",
          "92:             pass",
          "95:         mock_conn.login.assert_called_once_with(\"imap_user\", \"imap_password\")",
          "96:         assert mock_conn.logout.call_count == 1",
          "",
          "[Removed Lines]",
          "88:     def test_connect_and_disconnect(self, mock_imaplib):",
          "94:         mock_imaplib.IMAP4_SSL.assert_called_once_with(\"imap_server_address\", 1993)",
          "",
          "[Added Lines]",
          "89:     @patch(\"ssl.create_default_context\")",
          "90:     def test_connect_and_disconnect(self, create_default_context, mock_imaplib):",
          "96:         assert create_default_context.called",
          "97:         mock_imaplib.IMAP4_SSL.assert_called_once_with(",
          "98:             \"imap_server_address\", 1993, ssl_context=create_default_context.return_value",
          "99:         )",
          "100:         mock_conn.login.assert_called_once_with(\"imap_user\", \"imap_password\")",
          "101:         assert mock_conn.logout.call_count == 1",
          "103:     @patch(imaplib_string)",
          "104:     @patch(\"ssl.create_default_context\")",
          "105:     def test_connect_and_disconnect_imap_ssl_context_none(self, create_default_context, mock_imaplib):",
          "106:         mock_conn = _create_fake_imap(mock_imaplib)",
          "108:         with conf_vars({(\"imap\", \"ssl_context\"): \"none\"}):",
          "109:             with ImapHook():",
          "110:                 pass",
          "112:         assert not create_default_context.called",
          "113:         mock_imaplib.IMAP4_SSL.assert_called_once_with(\"imap_server_address\", 1993, ssl_context=None)",
          "114:         mock_conn.login.assert_called_once_with(\"imap_user\", \"imap_password\")",
          "115:         assert mock_conn.logout.call_count == 1",
          "117:     @patch(imaplib_string)",
          "118:     @patch(\"ssl.create_default_context\")",
          "119:     def test_connect_and_disconnect_imap_ssl_context_default(self, create_default_context, mock_imaplib):",
          "120:         mock_conn = _create_fake_imap(mock_imaplib)",
          "122:         with conf_vars({(\"imap\", \"ssl_context\"): \"default\"}):",
          "123:             with ImapHook():",
          "124:                 pass",
          "126:         assert create_default_context.called",
          "127:         mock_imaplib.IMAP4_SSL.assert_called_once_with(",
          "128:             \"imap_server_address\", 1993, ssl_context=create_default_context.return_value",
          "129:         )",
          "130:         mock_conn.login.assert_called_once_with(\"imap_user\", \"imap_password\")",
          "131:         assert mock_conn.logout.call_count == 1",
          "133:     @patch(imaplib_string)",
          "134:     @patch(\"ssl.create_default_context\")",
          "135:     def test_connect_and_disconnect_email_ssl_context_none(self, create_default_context, mock_imaplib):",
          "136:         mock_conn = _create_fake_imap(mock_imaplib)",
          "138:         with conf_vars({(\"email\", \"ssl_context\"): \"none\"}):",
          "139:             with ImapHook():",
          "140:                 pass",
          "142:         assert not create_default_context.called",
          "143:         mock_imaplib.IMAP4_SSL.assert_called_once_with(\"imap_server_address\", 1993, ssl_context=None)",
          "144:         mock_conn.login.assert_called_once_with(\"imap_user\", \"imap_password\")",
          "145:         assert mock_conn.logout.call_count == 1",
          "147:     @patch(imaplib_string)",
          "148:     @patch(\"ssl.create_default_context\")",
          "149:     def test_connect_and_disconnect_imap_ssl_context_override(self, create_default_context, mock_imaplib):",
          "150:         mock_conn = _create_fake_imap(mock_imaplib)",
          "152:         with conf_vars({(\"email\", \"ssl_context\"): \"none\", (\"imap\", \"ssl_context\"): \"default\"}):",
          "153:             with ImapHook():",
          "154:                 pass",
          "156:         assert create_default_context.called",
          "157:         mock_imaplib.IMAP4_SSL.assert_called_once_with(",
          "158:             \"imap_server_address\", 1993, ssl_context=create_default_context.return_value",
          "159:         )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7af9938a924f66b749c63fe302fcf865789b6b26",
      "candidate_info": {
        "commit_hash": "7af9938a924f66b749c63fe302fcf865789b6b26",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/7af9938a924f66b749c63fe302fcf865789b6b26",
        "files": [
          "airflow/config_templates/config.yml",
          "airflow/providers/openlineage/plugins/openlineage.py",
          "airflow/providers/openlineage/provider.yaml",
          "docs/apache-airflow-providers-openlineage/configurations-ref.rst",
          "docs/apache-airflow-providers-openlineage/index.rst",
          "docs/apache-airflow/configurations-ref.rst"
        ],
        "message": "Move openlineage configuration to provider (#33124)\n\n(cherry picked from commit bdc10a5ff6fea0fd968345fd4a9b732be49b9761)",
        "before_after_code_files": [
          "airflow/providers/openlineage/plugins/openlineage.py||airflow/providers/openlineage/plugins/openlineage.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33247"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/providers/openlineage/plugins/openlineage.py||airflow/providers/openlineage/plugins/openlineage.py": [
          "File: airflow/providers/openlineage/plugins/openlineage.py -> airflow/providers/openlineage/plugins/openlineage.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: def _is_disabled() -> bool:",
          "27:     return (",
          "29:         or os.getenv(\"OPENLINEAGE_DISABLED\", \"false\").lower() == \"true\"",
          "30:         or (",
          "33:             and os.getenv(\"OPENLINEAGE_URL\", \"\") == \"\"",
          "34:             and os.getenv(\"OPENLINEAGE_CONFIG\", \"\") == \"\"",
          "35:         )",
          "",
          "[Removed Lines]",
          "28:         conf.getboolean(\"openlineage\", \"disabled\")",
          "31:             conf.get(\"openlineage\", \"transport\") == \"\"",
          "32:             and conf.get(\"openlineage\", \"config_path\") == \"\"",
          "",
          "[Added Lines]",
          "28:         conf.getboolean(\"openlineage\", \"disabled\", fallback=False)",
          "31:             conf.get(\"openlineage\", \"transport\", fallback=\"\") == \"\"",
          "32:             and conf.get(\"openlineage\", \"config_path\", fallback=\"\") == \"\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e817c46b4c94d44b5c50665f23f19d7284b42be",
      "candidate_info": {
        "commit_hash": "4e817c46b4c94d44b5c50665f23f19d7284b42be",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/4e817c46b4c94d44b5c50665f23f19d7284b42be",
        "files": [
          "tests/models/test_xcom_arg_map.py"
        ],
        "message": "Fix flaky sqlite tests with `test_xcom_map_nest` hopefully (#33145)\n\nRecently sqlite started to fail randomly during teardown of\n`test_xcom_map_nest` or `test_xcom_map_zip_nest`. This happpened\nafter adding `test_xcom_map_zip_nest` . It looked very strange:\n\n```\nsqlite3.ProgrammingError: SQLite objects created in a thread can only be\nused in that same thread\n```\n\nBy analysing possible reasons it seems that it was a side effect\nof the existing `test_xcom_map_nest` that allocated a new\nsession in the run method of task instance rather than pass\nthe sesion that is created and torrn down in the pytest fixture.\n\nThe hypothesis is that the session created in the ``test_xcom_map_nest``\nwere being reclaimed and closed while the `test_xcom_map_zip_nest` test\nwas already starting in a different thread started by Pytest.\n\nThe fix is to pass the session object to run method of the taskinstance\nin the ``test_xcom_map_nest`` test.\n\n(cherry picked from commit d1d6fc994d46aaed9c801162595cae91a1ffc19c)",
        "before_after_code_files": [
          "tests/models/test_xcom_arg_map.py||tests/models/test_xcom_arg_map.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33247"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/models/test_xcom_arg_map.py||tests/models/test_xcom_arg_map.py": [
          "File: tests/models/test_xcom_arg_map.py -> tests/models/test_xcom_arg_map.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:     # Run \"push\".",
          "252:     decision = dr.task_instance_scheduling_decisions(session=session)",
          "253:     for ti in decision.schedulable_tis:",
          "256:     session.flush()",
          "257:     session.commit()",
          "",
          "[Removed Lines]",
          "254:         ti.run()",
          "",
          "[Added Lines]",
          "254:         ti.run(session=session)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     # Now \"pull\" should apply the mapping functions in order.",
          "263:     decision = dr.task_instance_scheduling_decisions(session=session)",
          "264:     for ti in decision.schedulable_tis:",
          "266:     assert results == {\"aa\", \"bb\", \"cc\"}",
          "",
          "[Removed Lines]",
          "265:         ti.run()",
          "",
          "[Added Lines]",
          "265:         ti.run(session=session)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1109ea9003216a4fea1967f4f22cdae955ccd153",
      "candidate_info": {
        "commit_hash": "1109ea9003216a4fea1967f4f22cdae955ccd153",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/1109ea9003216a4fea1967f4f22cdae955ccd153",
        "files": [
          "airflow/executors/base_executor.py",
          "airflow/providers/celery/executors/celery_executor.py",
          "airflow/providers/cncf/kubernetes/executors/kubernetes_executor.py",
          "docs/apache-airflow-providers-celery/cli-ref.rst",
          "docs/apache-airflow-providers-celery/index.rst",
          "docs/apache-airflow-providers-cncf-kubernetes/cli-ref.rst",
          "docs/apache-airflow-providers-cncf-kubernetes/index.rst"
        ],
        "message": "aDd documentation generation for CLI commands from executors (#33081)\n\nThe #29055 moved relevant CLI command definition to executors but\nit automatically removed the command from generated documentation.\n\nThis PR brings it back for both Celery and Cncf Kubernetes provider\n\nCloses: #27932\n(cherry picked from commit 879fd34e97a5343e6d2bbf3d5373831b9641b5ad)",
        "before_after_code_files": [
          "airflow/executors/base_executor.py||airflow/executors/base_executor.py",
          "airflow/providers/celery/executors/celery_executor.py||airflow/providers/celery/executors/celery_executor.py",
          "airflow/providers/cncf/kubernetes/executors/kubernetes_executor.py||airflow/providers/cncf/kubernetes/executors/kubernetes_executor.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33247"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/executors/base_executor.py||airflow/executors/base_executor.py": [
          "File: airflow/executors/base_executor.py -> airflow/executors/base_executor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: \"\"\"Base executor - this is the base class for all the implemented executors.\"\"\"",
          "18: from __future__ import annotations",
          "20: import logging",
          "21: import sys",
          "22: import warnings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import argparse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: import pendulum",
          "31: from airflow.configuration import conf",
          "32: from airflow.exceptions import RemovedInAirflow3Warning",
          "33: from airflow.stats import Stats",
          "",
          "[Removed Lines]",
          "30: from airflow.cli.cli_config import GroupCommand",
          "",
          "[Added Lines]",
          "31: from airflow.cli.cli_config import DefaultHelpParser, GroupCommand",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "489:         be commands to setup/teardown the executor, inspect state, etc.",
          "490:         \"\"\"",
          "491:         return []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:     @classmethod",
          "495:     def _get_parser(cls) -> argparse.ArgumentParser:",
          "496:         \"\"\"This method is used by Sphinx argparse to generate documentation.",
          "498:         :meta private:",
          "499:         \"\"\"",
          "500:         from airflow.cli.cli_parser import AirflowHelpFormatter, _add_command",
          "502:         parser = DefaultHelpParser(prog=\"airflow\", formatter_class=AirflowHelpFormatter)",
          "503:         subparsers = parser.add_subparsers(dest=\"subcommand\", metavar=\"GROUP_OR_COMMAND\")",
          "504:         for group_command in cls.get_cli_commands():",
          "505:             _add_command(subparsers, group_command)",
          "506:         return parser",
          "",
          "---------------"
        ],
        "airflow/providers/celery/executors/celery_executor.py||airflow/providers/celery/executors/celery_executor.py": [
          "File: airflow/providers/celery/executors/celery_executor.py -> airflow/providers/celery/executors/celery_executor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: \"\"\"",
          "24: from __future__ import annotations",
          "26: import logging",
          "27: import math",
          "28: import operator",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import argparse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "480:                 subcommands=CELERY_COMMANDS,",
          "481:             ),",
          "482:         ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486: def _get_parser() -> argparse.ArgumentParser:",
          "487:     \"\"\"This method is used by Sphinx to generate documentation.",
          "489:     :meta private:",
          "490:     \"\"\"",
          "491:     return CeleryExecutor._get_parser()",
          "",
          "---------------"
        ],
        "airflow/providers/cncf/kubernetes/executors/kubernetes_executor.py||airflow/providers/cncf/kubernetes/executors/kubernetes_executor.py": [
          "File: airflow/providers/cncf/kubernetes/executors/kubernetes_executor.py -> airflow/providers/cncf/kubernetes/executors/kubernetes_executor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: \"\"\"",
          "24: from __future__ import annotations",
          "26: import json",
          "27: import logging",
          "28: import multiprocessing",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import argparse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "728:                 subcommands=KUBERNETES_COMMANDS,",
          "729:             )",
          "730:         ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "734: def _get_parser() -> argparse.ArgumentParser:",
          "735:     \"\"\"This method is used by Sphinx to generate documentation.",
          "737:     :meta private:",
          "738:     \"\"\"",
          "739:     return KubernetesExecutor._get_parser()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "489d3dd6e91b1320d072a8a919890db3241e1756",
      "candidate_info": {
        "commit_hash": "489d3dd6e91b1320d072a8a919890db3241e1756",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/489d3dd6e91b1320d072a8a919890db3241e1756",
        "files": [
          "tests/models/test_xcom_arg_map.py"
        ],
        "message": "Give the the test_xcom_ar_map test opportunity to flush the data (#33153)\n\nUsing same session in different steps of the same test has the\npotential of not flishing/committing the changes between.\n\nSeems that the #33150 traded one flakiness with another. Attempting to\nmake sure that the flash/commit is executed before the second run.\n\nError:\n\nThe test RuntimeError: number of values in row (0) differ from number of\ncolumn processors (29)\n\nThe error is strange however and indicates a bug in sqlite library.\n\n(cherry picked from commit 6b21b79f33e245ff1612b1970d05ef692c41f15c)",
        "before_after_code_files": [
          "tests/models/test_xcom_arg_map.py||tests/models/test_xcom_arg_map.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/33247"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/models/test_xcom_arg_map.py||tests/models/test_xcom_arg_map.py": [
          "File: tests/models/test_xcom_arg_map.py -> tests/models/test_xcom_arg_map.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:     for ti in decision.schedulable_tis:",
          "254:         ti.run()",
          "256:     # Now \"pull\" should apply the mapping functions in order.",
          "257:     decision = dr.task_instance_scheduling_decisions(session=session)",
          "258:     for ti in decision.schedulable_tis:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:     session.flush()",
          "257:     session.commit()",
          "",
          "---------------"
        ]
      }
    }
  ]
}