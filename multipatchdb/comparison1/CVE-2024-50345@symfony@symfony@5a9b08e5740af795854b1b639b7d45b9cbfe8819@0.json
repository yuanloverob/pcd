{
  "cve_id": "CVE-2024-50345",
  "cve_desc": "symfony/http-foundation is a module for the Symphony PHP framework which defines an object-oriented layer for the HTTP specification. The `Request` class, does not parse URI with special characters the same way browsers do. As a result, an attacker can trick a validator relying on the `Request` class to redirect users to another domain. The `Request::create` methods now assert the URI does not contain invalid characters as defined by https://url.spec.whatwg.org/. This issue has been patched in versions 5.4.46, 6.4.14, and 7.1.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "symfony/symfony",
  "patch_hash": "5a9b08e5740af795854b1b639b7d45b9cbfe8819",
  "patch_info": {
    "commit_hash": "5a9b08e5740af795854b1b639b7d45b9cbfe8819",
    "repo": "symfony/symfony",
    "commit_url": "https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819",
    "files": [
      "src/Symfony/Component/HttpFoundation/Request.php",
      "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
    ],
    "message": "[HttpFoundation] Reject URIs that contain invalid characters",
    "before_after_code_files": [
      "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
      "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
    ]
  },
  "patch_diff": {
    "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
      "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "12: namespace Symfony\\Component\\HttpFoundation;",
      "14: use Symfony\\Component\\HttpFoundation\\Exception\\ConflictingHeadersException;",
      "15: use Symfony\\Component\\HttpFoundation\\Exception\\JsonException;",
      "16: use Symfony\\Component\\HttpFoundation\\Exception\\SessionNotFoundException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: use Symfony\\Component\\HttpFoundation\\Exception\\BadRequestException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "360:             unset($components['fragment']);",
      "361:         }",
      "363:         if (isset($components['host'])) {",
      "364:             $server['SERVER_NAME'] = $components['host'];",
      "365:             $server['HTTP_HOST'] = $components['host'];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "366:         if (false === $components) {",
      "367:             throw new BadRequestException('Invalid URI.');",
      "368:         }",
      "370:         if (false !== ($i = strpos($uri, '\\\\')) && $i < strcspn($uri, '?#')) {",
      "371:             throw new BadRequestException('Invalid URI: A URI cannot contain a backslash.');",
      "372:         }",
      "373:         if (\\strlen($uri) !== strcspn($uri, \"\\r\\n\\t\")) {",
      "374:             throw new BadRequestException('Invalid URI: A URI cannot contain CR/LF/TAB characters.');",
      "375:         }",
      "376:         if ('' !== $uri && (\\ord($uri[0]) <= 32 || \\ord($uri[-1]) <= 32)) {",
      "377:             throw new BadRequestException('Invalid URI: A URI must not start nor end with ASCII control characters or spaces.');",
      "378:         }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php": [
      "File: src/Symfony/Component/HttpFoundation/Tests/RequestTest.php -> src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: use PHPUnit\\Framework\\TestCase;",
      "15: use Symfony\\Bridge\\PhpUnit\\ExpectDeprecationTrait;",
      "16: use Symfony\\Component\\HttpFoundation\\Exception\\ConflictingHeadersException;",
      "17: use Symfony\\Component\\HttpFoundation\\Exception\\JsonException;",
      "18: use Symfony\\Component\\HttpFoundation\\Exception\\SuspiciousOperationException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: use Symfony\\Component\\HttpFoundation\\Exception\\BadRequestException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "289:         $this->assertTrue($request->isSecure());",
      "294:         $this->assertEquals('http://test.com/foo', $request->getUri());",
      "295:     }",
      "",
      "[Removed Lines]",
      "292:         $request = Request::create('http://test.com/foo#bar');",
      "293:         $request->server->set('REQUEST_URI', 'http://test.com/foo#bar');",
      "",
      "[Added Lines]",
      "293:         $request = Request::create('http://test.com/foo#bar\\\\baz');",
      "294:         $request->server->set('REQUEST_URI', 'http://test.com/foo#bar\\\\baz');",
      "297:         $request = Request::create('http://test.com/foo?bar=f\\\\o');",
      "298:         $this->assertEquals('http://test.com/foo?bar=f%5Co', $request->getUri());",
      "299:         $this->assertEquals('/foo', $request->getPathInfo());",
      "300:         $this->assertEquals('bar=f%5Co', $request->getQueryString());",
      "301:     }",
      "315:     public function testCreateWithBadRequestUri(string $uri)",
      "316:     {",
      "317:         $this->expectException(BadRequestException::class);",
      "318:         $this->expectExceptionMessage('Invalid URI');",
      "320:         Request::create($uri);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "80257eabfaedcadd0cf151774c3751754deb336d",
      "candidate_info": {
        "commit_hash": "80257eabfaedcadd0cf151774c3751754deb336d",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/80257eabfaedcadd0cf151774c3751754deb336d",
        "files": [
          "src/Symfony/Component/DomCrawler/Tests/UriResolverTest.php",
          "src/Symfony/Component/DomCrawler/UriResolver.php",
          "src/Symfony/Component/HttpClient/CurlHttpClient.php",
          "src/Symfony/Component/HttpClient/HttpClientTrait.php",
          "src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php",
          "src/Symfony/Component/HttpClient/Tests/HttpClientTraitTest.php",
          "src/Symfony/Component/HttpClient/composer.json",
          "src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
          "src/Symfony/Contracts/HttpClient/Test/Fixtures/web/index.php"
        ],
        "message": "Work around parse_url() bug (bis)",
        "before_after_code_files": [
          "src/Symfony/Component/DomCrawler/Tests/UriResolverTest.php||src/Symfony/Component/DomCrawler/Tests/UriResolverTest.php",
          "src/Symfony/Component/DomCrawler/UriResolver.php||src/Symfony/Component/DomCrawler/UriResolver.php",
          "src/Symfony/Component/HttpClient/CurlHttpClient.php||src/Symfony/Component/HttpClient/CurlHttpClient.php",
          "src/Symfony/Component/HttpClient/HttpClientTrait.php||src/Symfony/Component/HttpClient/HttpClientTrait.php",
          "src/Symfony/Component/HttpClient/NativeHttpClient.php||src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "src/Symfony/Component/HttpClient/Response/CurlResponse.php||src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php||src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php",
          "src/Symfony/Component/HttpClient/Tests/HttpClientTraitTest.php||src/Symfony/Component/HttpClient/Tests/HttpClientTraitTest.php",
          "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
          "src/Symfony/Contracts/HttpClient/Test/Fixtures/web/index.php||src/Symfony/Contracts/HttpClient/Test/Fixtures/web/index.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
            "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
            "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/DomCrawler/Tests/UriResolverTest.php||src/Symfony/Component/DomCrawler/Tests/UriResolverTest.php": [
          "File: src/Symfony/Component/DomCrawler/Tests/UriResolverTest.php -> src/Symfony/Component/DomCrawler/Tests/UriResolverTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:             ['http://', 'http://localhost', 'http://'],",
          "89:             ['/foo:123', 'http://localhost', 'http://localhost/foo:123'],",
          "90:         ];",
          "91:     }",
          "92: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:             ['foo:123', 'http://localhost/', 'foo:123'],",
          "91:             ['foo/bar:1/baz', 'http://localhost/', 'http://localhost/foo/bar:1/baz'],",
          "",
          "---------------"
        ],
        "src/Symfony/Component/DomCrawler/UriResolver.php||src/Symfony/Component/DomCrawler/UriResolver.php": [
          "File: src/Symfony/Component/DomCrawler/UriResolver.php -> src/Symfony/Component/DomCrawler/UriResolver.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     {",
          "33:         $uri = trim($uri);",
          "41:             return $uri;",
          "42:         }",
          "",
          "[Removed Lines]",
          "35:         if (false === ($scheme = parse_url($uri, \\PHP_URL_SCHEME)) && '/' === ($uri[0] ?? '')) {",
          "36:             $scheme = parse_url($uri.'#', \\PHP_URL_SCHEME);",
          "37:         }",
          "40:         if (null !== $scheme) {",
          "",
          "[Added Lines]",
          "36:         if (null !== parse_url(\\strlen($uri) !== strcspn($uri, '?#') ? $uri : $uri.'#', \\PHP_URL_SCHEME)) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/CurlHttpClient.php||src/Symfony/Component/HttpClient/CurlHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/CurlHttpClient.php -> src/Symfony/Component/HttpClient/CurlHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "421:             }",
          "422:         }",
          "425:             try {",
          "426:                 $location = self::parseUrl($location);",
          "427:             } catch (InvalidArgumentException $e) {",
          "428:                 return null;",
          "",
          "[Removed Lines]",
          "424:         return static function ($ch, string $location, bool $noContent) use (&$redirectHeaders, $options) {",
          "",
          "[Added Lines]",
          "424:         return static function ($ch, string $location, bool $noContent, bool &$locationHasHost) use (&$redirectHeaders, $options) {",
          "426:                 $locationHasHost = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:                 $redirectHeaders['with_auth'] = array_filter($redirectHeaders['with_auth'], $filterContentHeaders);",
          "437:             }",
          "441:                 curl_setopt($ch, \\CURLOPT_HTTPHEADER, $requestHeaders);",
          "442:             } elseif ($noContent && $redirectHeaders) {",
          "443:                 curl_setopt($ch, \\CURLOPT_HTTPHEADER, $redirectHeaders['with_auth']);",
          "",
          "[Removed Lines]",
          "439:             if ($redirectHeaders && $host = parse_url('http:'.$location['authority'], \\PHP_URL_HOST)) {",
          "440:                 $requestHeaders = $redirectHeaders['host'] === $host ? $redirectHeaders['with_auth'] : $redirectHeaders['no_auth'];",
          "",
          "[Added Lines]",
          "440:             $locationHasHost = isset($location['authority']);",
          "442:             if ($redirectHeaders && $locationHasHost) {",
          "443:                 $requestHeaders = parse_url($location['authority'], \\PHP_URL_HOST) === $redirectHeaders['host'] ? $redirectHeaders['with_auth'] : $redirectHeaders['no_auth'];",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/HttpClientTrait.php||src/Symfony/Component/HttpClient/HttpClientTrait.php": [
          "File: src/Symfony/Component/HttpClient/HttpClientTrait.php -> src/Symfony/Component/HttpClient/HttpClientTrait.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "515:     private static function parseUrl(string $url, array $query = [], array $allowedSchemes = ['http' => 80, 'https' => 443]): array",
          "516:     {",
          "522:         }",
          "524:         if ($query) {",
          "525:             $parts['query'] = self::mergeQueryString($parts['query'] ?? null, $query, true);",
          "526:         }",
          "528:         $port = $parts['port'] ?? 0;",
          "531:             if (!isset($allowedSchemes[$scheme = strtolower($scheme)])) {",
          "533:             }",
          "535:             $port = $allowedSchemes[$scheme] === $port ? 0 : $port;",
          "536:             $scheme .= ':';",
          "537:         }",
          "540:             if (!\\defined('INTL_IDNA_VARIANT_UTS46') && preg_match('/[\\x80-\\xFF]/', $host)) {",
          "541:                 throw new InvalidArgumentException(sprintf('Unsupported IDN \"%s\", try enabling the \"intl\" PHP extension or running \"composer require symfony/polyfill-intl-idn\".', $host));",
          "542:             }",
          "",
          "[Removed Lines]",
          "517:         if (false === $parts = parse_url($url)) {",
          "518:             if ('/' !== ($url[0] ?? '') || false === $parts = parse_url($url.'#')) {",
          "519:                 throw new InvalidArgumentException(sprintf('Malformed URL \"%s\".', $url));",
          "520:             }",
          "521:             unset($parts['fragment']);",
          "530:         if (null !== $scheme = $parts['scheme'] ?? null) {",
          "532:                 throw new InvalidArgumentException(sprintf('Unsupported scheme in \"%s\".', $url));",
          "539:         if (null !== $host = $parts['host'] ?? null) {",
          "",
          "[Added Lines]",
          "517:         $tail = '';",
          "519:         if (false === $parts = parse_url(\\strlen($url) !== strcspn($url, '?#') ? $url : $url.$tail = '#')) {",
          "520:             throw new InvalidArgumentException(sprintf('Malformed URL \"%s\".', $url));",
          "527:         $scheme = $parts['scheme'] ?? null;",
          "528:         $host = $parts['host'] ?? null;",
          "530:         if (!$scheme && $host && !str_starts_with($url, '//')) {",
          "531:             $parts = parse_url(':/'.$url.$tail);",
          "532:             $parts['path'] = substr($parts['path'], 2);",
          "533:             $scheme = $host = null;",
          "534:         }",
          "538:         if (null !== $scheme) {",
          "540:                 throw new InvalidArgumentException(sprintf('Unsupported scheme in \"%s\": \"%s\" expected.', $url, implode('\" or \"', array_keys($allowedSchemes))));",
          "547:         if (null !== $host) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "564:             'authority' => null !== $host ? '//'.(isset($parts['user']) ? $parts['user'].(isset($parts['pass']) ? ':'.$parts['pass'] : '').'@' : '').$host : null,",
          "565:             'path' => isset($parts['path'][0]) ? $parts['path'] : null,",
          "566:             'query' => isset($parts['query']) ? '?'.$parts['query'] : null,",
          "568:         ];",
          "569:     }",
          "",
          "[Removed Lines]",
          "567:             'fragment' => isset($parts['fragment']) ? '#'.$parts['fragment'] : null,",
          "",
          "[Added Lines]",
          "575:             'fragment' => isset($parts['fragment']) && !$tail ? '#'.$parts['fragment'] : null,",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/NativeHttpClient.php||src/Symfony/Component/HttpClient/NativeHttpClient.php": [
          "File: src/Symfony/Component/HttpClient/NativeHttpClient.php -> src/Symfony/Component/HttpClient/NativeHttpClient.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "389:                 return null;",
          "390:             }",
          "392:             $url = self::resolveUrl($url, $info['url']);",
          "393:             $info['redirect_url'] = implode('', $url);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "392:             $locationHasHost = isset($url['authority']);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:             [$host, $port] = self::parseHostPort($url, $info);",
          "429:                 $requestHeaders = $redirectHeaders['host'] === $host ? $redirectHeaders['with_auth'] : $redirectHeaders['no_auth'];",
          "430:                 $requestHeaders[] = 'Host: '.$host.$port;",
          "",
          "[Removed Lines]",
          "427:             if (false !== (parse_url($location.'#', \\PHP_URL_HOST) ?? false)) {",
          "",
          "[Added Lines]",
          "428:             if ($locationHasHost) {",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Response/CurlResponse.php||src/Symfony/Component/HttpClient/Response/CurlResponse.php": [
          "File: src/Symfony/Component/HttpClient/Response/CurlResponse.php -> src/Symfony/Component/HttpClient/Response/CurlResponse.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:                 $info['http_method'] = 'HEAD' === $info['http_method'] ? 'HEAD' : 'GET';",
          "437:                 curl_setopt($ch, \\CURLOPT_CUSTOMREQUEST, $info['http_method']);",
          "438:             }",
          "441:                 $options['max_redirects'] = curl_getinfo($ch, \\CURLINFO_REDIRECT_COUNT);",
          "442:                 curl_setopt($ch, \\CURLOPT_FOLLOWLOCATION, false);",
          "443:                 curl_setopt($ch, \\CURLOPT_MAXREDIRS, $options['max_redirects']);",
          "450:                     curl_setopt($ch, \\CURLOPT_RESOLVE, [\"{$url['host']}:$port:$ip\"]);",
          "451:                     $multi->dnsCache->removals[\"-{$url['host']}:$port\"] = \"-{$url['host']}:$port\";",
          "452:                 }",
          "",
          "[Removed Lines]",
          "440:             if (null === $info['redirect_url'] = $resolveRedirect($ch, $location, $noContent)) {",
          "444:             } else {",
          "445:                 $url = parse_url($location ?? ':');",
          "447:                 if (isset($url['host']) && null !== $ip = $multi->dnsCache->hostnames[$url['host'] = strtolower($url['host'])] ?? null) {",
          "449:                     $port = $url['port'] ?? ('http' === ($url['scheme'] ?? parse_url(curl_getinfo($ch, \\CURLINFO_EFFECTIVE_URL), \\PHP_URL_SCHEME)) ? 80 : 443);",
          "",
          "[Added Lines]",
          "439:             $locationHasHost = false;",
          "441:             if (null === $info['redirect_url'] = $resolveRedirect($ch, $location, $noContent, $locationHasHost)) {",
          "445:             } elseif ($locationHasHost) {",
          "446:                 $url = parse_url($info['redirect_url']);",
          "448:                 if (null !== $ip = $multi->dnsCache->hostnames[$url['host'] = strtolower($url['host'])] ?? null) {",
          "450:                     $port = $url['port'] ?? ('http' === $url['scheme'] ? 80 : 443);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php||src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php": [
          "File: src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php -> src/Symfony/Component/HttpClient/Tests/HttpClientTestCase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "490:         $client->request('GET', 'http://symfony.com', ['resolve' => ['symfony.com' => '127.0.0.1']]);",
          "491:     }",
          "492: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:     public function testNoRedirectWithInvalidLocation()",
          "494:     {",
          "495:         $client = $this->getHttpClient(__FUNCTION__);",
          "497:         $response = $client->request('GET', 'http://localhost:8057/302-no-scheme');",
          "499:         $this->assertSame(302, $response->getStatusCode());",
          "500:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpClient/Tests/HttpClientTraitTest.php||src/Symfony/Component/HttpClient/Tests/HttpClientTraitTest.php": [
          "File: src/Symfony/Component/HttpClient/Tests/HttpClientTraitTest.php -> src/Symfony/Component/HttpClient/Tests/HttpClientTraitTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:             [self::RFC3986_BASE, 'g/../h',        'http://a/b/c/h'],",
          "103:             [self::RFC3986_BASE, 'g;x=1/./y',     'http://a/b/c/g;x=1/y'],",
          "104:             [self::RFC3986_BASE, 'g;x=1/../y',    'http://a/b/c/y'],",
          "106:             [self::RFC3986_BASE, 'g?y/./x',       'http://a/b/c/g?y/./x'],",
          "107:             [self::RFC3986_BASE, 'g?y/../x',      'http://a/b/c/g?y/../x'],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:             [self::RFC3986_BASE, 'g/h:123/i',     'http://a/b/c/g/h:123/i'],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:     public function testResolveUrlWithoutScheme()",
          "128:     {",
          "129:         $this->expectException(InvalidArgumentException::class);",
          "131:         self::resolveUrl(self::parseUrl('localhost:8080'), null);",
          "132:     }",
          "135:     {",
          "136:         $this->expectException(InvalidArgumentException::class);",
          "138:         self::resolveUrl(self::parseUrl('/foo'), self::parseUrl('localhost:8081'));",
          "139:     }",
          "",
          "[Removed Lines]",
          "130:         $this->expectExceptionMessage('Invalid URL: scheme is missing in \"//localhost:8080\". Did you forget to add \"http(s)://\"?');",
          "134:     public function testResolveBaseUrlWitoutScheme()",
          "137:         $this->expectExceptionMessage('Invalid URL: scheme is missing in \"//localhost:8081\". Did you forget to add \"http(s)://\"?');",
          "",
          "[Added Lines]",
          "131:         $this->expectExceptionMessage('Unsupported scheme in \"localhost:8080\": \"http\" or \"https\" expected.');",
          "135:     public function testResolveBaseUrlWithoutScheme()",
          "138:         $this->expectExceptionMessage('Unsupported scheme in \"localhost:8081\": \"http\" or \"https\" expected.');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
          "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:         $server['PATH_INFO'] = '';",
          "359:         $server['REQUEST_METHOD'] = strtoupper($method);",
          "367:             throw new BadRequestException('Invalid URI.');",
          "368:         }",
          "",
          "[Removed Lines]",
          "361:         if (false === ($components = parse_url($uri)) && '/' === ($uri[0] ?? '')) {",
          "362:             $components = parse_url($uri.'#');",
          "363:             unset($components['fragment']);",
          "364:         }",
          "366:         if (false === $components) {",
          "",
          "[Added Lines]",
          "361:         if (false === $components = parse_url(\\strlen($uri) !== strcspn($uri, '?#') ? $uri : $uri.'#')) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:             if ('https' === $components['scheme']) {",
          "387:                 $server['HTTPS'] = 'on';",
          "388:                 $server['SERVER_PORT'] = 443;",
          "390:                 unset($server['HTTPS']);",
          "391:                 $server['SERVER_PORT'] = 80;",
          "392:             }",
          "393:         }",
          "",
          "[Removed Lines]",
          "389:             } else {",
          "",
          "[Added Lines]",
          "384:             } elseif ('http' === $components['scheme']) {",
          "387:             } else {",
          "388:                 throw new BadRequestException('Invalid URI: http(s) scheme expected.');",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php": [
          "File: src/Symfony/Component/HttpFoundation/Tests/RequestTest.php -> src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
        ],
        "src/Symfony/Contracts/HttpClient/Test/Fixtures/web/index.php||src/Symfony/Contracts/HttpClient/Test/Fixtures/web/index.php": [
          "File: src/Symfony/Contracts/HttpClient/Test/Fixtures/web/index.php -> src/Symfony/Contracts/HttpClient/Test/Fixtures/web/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:         }",
          "99:         break;",
          "101:     case '/302/relative':",
          "102:         header('Location: ..', true, 302);",
          "103:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     case '/302-no-scheme':",
          "102:         if (!isset($vars['HTTP_AUTHORIZATION'])) {",
          "103:             header('Location: localhost:8067', true, 302);",
          "104:         }",
          "105:         break;",
          "",
          "---------------"
        ]
      }
    }
  ]
}