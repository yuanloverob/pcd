{
  "cve_id": "CVE-2023-33202",
  "cve_desc": "Bouncy Castle for Java before 1.73 contains a potential Denial of Service (DoS) issue within the Bouncy Castle org.bouncycastle.openssl.PEMParser class. This class parses OpenSSL PEM encoded streams containing X.509 certificates, PKCS8 encoded keys, and PKCS7 objects. Parsing a file that has crafted ASN.1 data through the PEMParser causes an OutOfMemoryError, which can enable a denial of service attack. (For users of the FIPS Java API: BC-FJA 1.0.2.3 and earlier are affected; BC-FJA 1.0.2.4 is fixed.)",
  "repo": "bcgit/bc-java",
  "patch_hash": "0c576892862ed41894f49a8f639112e8d66d229c",
  "patch_info": {
    "commit_hash": "0c576892862ed41894f49a8f639112e8d66d229c",
    "repo": "bcgit/bc-java",
    "commit_url": "https://github.com/bcgit/bc-java/commit/0c576892862ed41894f49a8f639112e8d66d229c",
    "files": [
      "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
      "core/src/main/java/org/bouncycastle/asn1/DERSet.java",
      "core/src/main/java/org/bouncycastle/asn1/DLSet.java"
    ],
    "message": "removed isSorted boolean",
    "before_after_code_files": [
      "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
      "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
      "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java": [
      "File: core/src/main/java/org/bouncycastle/asn1/ASN1Set.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "166:     }",
      "168:     protected final ASN1Encodable[] elements;",
      "171:     protected ASN1Encodable[] sortedElements;",
      "173:     protected ASN1Set()",
      "174:     {",
      "175:         this.elements = ASN1EncodableVector.EMPTY_ELEMENTS;",
      "177:     }",
      "",
      "[Removed Lines]",
      "169:     protected final boolean isSorted;",
      "176:         this.isSorted = true;",
      "",
      "[Added Lines]",
      "175:         this.sortedElements = elements;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:         }",
      "190:         this.elements = new ASN1Encodable[]{ element };",
      "192:     }",
      "",
      "[Removed Lines]",
      "191:         this.isSorted = true;",
      "",
      "[Added Lines]",
      "190:         this.sortedElements = elements;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "215:         }",
      "217:         this.elements = tmp;",
      "219:     }",
      "",
      "[Removed Lines]",
      "218:         this.isSorted = doSort || tmp.length < 2;",
      "",
      "[Added Lines]",
      "217:         this.sortedElements = (doSort || tmp.length < 2) ? elements : null;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "237:         }",
      "239:         this.elements = tmp;",
      "241:     }",
      "243:     ASN1Set(boolean isSorted, ASN1Encodable[] elements)",
      "244:     {",
      "245:         this.elements = elements;",
      "247:     }",
      "249:     public Enumeration getObjects()",
      "",
      "[Removed Lines]",
      "240:         this.isSorted = doSort || tmp.length < 2;",
      "246:         this.isSorted = isSorted || elements.length < 2;",
      "",
      "[Added Lines]",
      "239:         this.sortedElements = (doSort || tmp.length < 2) ? elements : null;",
      "245:         this.sortedElements = (isSorted || elements.length < 2) ? elements : null;",
      "246:     }",
      "248:     ASN1Set(ASN1Encodable[] elements, ASN1Encodable[] sortedElements)",
      "249:     {",
      "250:         this.elements = elements;",
      "251:         this.sortedElements = sortedElements;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "356:     ASN1Primitive toDERObject()",
      "357:     {",
      "360:         {",
      "371:         }",
      "374:     }",
      "",
      "[Removed Lines]",
      "358:         ASN1Encodable[] tmp;",
      "359:         if (isSorted)",
      "361:             tmp = elements;",
      "362:         }",
      "363:         else",
      "364:         {",
      "365:             if (sortedElements == null)",
      "366:             {",
      "367:                 sortedElements = (ASN1Encodable[])elements.clone();",
      "368:                 sort(sortedElements);",
      "369:             }",
      "370:             tmp = sortedElements;",
      "373:         return new DERSet(true, tmp);",
      "",
      "[Added Lines]",
      "363:         if (sortedElements == null)",
      "365:             sortedElements = (ASN1Encodable[])elements.clone();",
      "366:             sort(sortedElements);",
      "369:         return new DERSet(true, sortedElements);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "380:     ASN1Primitive toDLObject()",
      "381:     {",
      "383:     }",
      "385:     boolean asn1Equals(ASN1Primitive other)",
      "",
      "[Removed Lines]",
      "382:         return new DLSet(isSorted, elements);",
      "",
      "[Added Lines]",
      "378:         return new DLSet(elements, sortedElements);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "483:         if (a0 != b0)",
      "484:         {",
      "485:             return a0 < b0;",
      "",
      "[Removed Lines]",
      "481:         int a0 = a[0] & ~BERTags.CONSTRUCTED & 0xFF;",
      "482:         int b0 = b[0] & ~BERTags.CONSTRUCTED & 0xFF;",
      "",
      "[Added Lines]",
      "477:         int a0 = a[0] & (~BERTags.CONSTRUCTED & 0xff);",
      "478:         int b0 = b[0] & (~BERTags.CONSTRUCTED & 0xff);",
      "",
      "---------------"
    ],
    "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java": [
      "File: core/src/main/java/org/bouncycastle/asn1/DERSet.java -> core/src/main/java/org/bouncycastle/asn1/DERSet.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "135:     ASN1Primitive toDERObject()",
      "136:     {",
      "138:     }",
      "140:     ASN1Primitive toDLObject()",
      "",
      "[Removed Lines]",
      "137:         return isSorted ? this : super.toDERObject();",
      "",
      "[Added Lines]",
      "137:         return (sortedElements != null) ? this : super.toDERObject();",
      "",
      "---------------"
    ],
    "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java": [
      "File: core/src/main/java/org/bouncycastle/asn1/DLSet.java -> core/src/main/java/org/bouncycastle/asn1/DLSet.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:         super(isSorted, elements);",
      "92:     }",
      "94:     private int getContentsLength() throws IOException",
      "95:     {",
      "96:         if (contentsLength < 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "94:     DLSet(ASN1Encodable[] elements, ASN1Encodable[] sortedElements)",
      "95:     {",
      "96:         super(elements, sortedElements);",
      "97:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cb459541c46ceeed1db7d284173acd27ddbe52ab",
      "candidate_info": {
        "commit_hash": "cb459541c46ceeed1db7d284173acd27ddbe52ab",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/cb459541c46ceeed1db7d284173acd27ddbe52ab",
        "files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
        ],
        "message": "Fix a corner-case for DER set-value sorting",
        "before_after_code_files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
          ],
          "candidate": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1Set.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:     {",
          "519:         {",
          "520:             if (a[i] != b[i])",
          "521:             {",
          "523:             }",
          "524:         }",
          "526:     }",
          "528:     private static void sort(ASN1Encodable[] t)",
          "",
          "[Removed Lines]",
          "513:     private static boolean lessThanOrEqual(",
          "514:          byte[] a,",
          "515:          byte[] b)",
          "517:         int len = Math.min(a.length, b.length);",
          "518:         for (int i = 0; i != len; ++i)",
          "522:                 return (a[i] & 0xff) < (b[i] & 0xff);",
          "525:         return len == a.length;",
          "",
          "[Added Lines]",
          "513:     private static boolean lessThanOrEqual(byte[] a, byte[] b)",
          "529:         int a0 = a[0] & ~BERTags.CONSTRUCTED;",
          "530:         int b0 = b[0] & ~BERTags.CONSTRUCTED;",
          "531:         if (a0 != b0)",
          "532:         {",
          "533:             return a0 < b0;",
          "534:         }",
          "536:         int last = Math.min(a.length, b.length) - 1;",
          "537:         for (int i = 1; i < last; ++i)",
          "541:                 return (a[i] & 0xFF) < (b[i] & 0xFF);",
          "544:         return (a[last] & 0xFF) <= (b[last] & 0xFF);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "111e27716362889e637705a0ae6f2536220b76f3",
      "candidate_info": {
        "commit_hash": "111e27716362889e637705a0ae6f2536220b76f3",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/111e27716362889e637705a0ae6f2536220b76f3",
        "files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
        ],
        "message": "added sorting cache for DL/BER to DER conversion",
        "before_after_code_files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
          ],
          "candidate": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1Set.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     protected final ASN1Encodable[] elements;",
          "169:     protected final boolean isSorted;",
          "171:     protected ASN1Set()",
          "172:     {",
          "173:         this.elements = ASN1EncodableVector.EMPTY_ELEMENTS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:     protected ASN1Encodable[] sortedElements;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:         }",
          "361:         else",
          "362:         {",
          "365:         }",
          "367:         return new DERSet(true, tmp);",
          "",
          "[Removed Lines]",
          "363:             tmp = (ASN1Encodable[])elements.clone();",
          "364:             sort(tmp);",
          "",
          "[Added Lines]",
          "365:             if (sortedElements == null)",
          "366:             {",
          "367:                 sortedElements = (ASN1Encodable[])elements.clone();",
          "368:                 sort(sortedElements);",
          "369:             }",
          "370:             tmp = sortedElements;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "056cead7f325dcac42f698cd5d1bf213ae34c743",
      "candidate_info": {
        "commit_hash": "056cead7f325dcac42f698cd5d1bf213ae34c743",
        "repo": "bcgit/bc-java",
        "commit_url": "https://github.com/bcgit/bc-java/commit/056cead7f325dcac42f698cd5d1bf213ae34c743",
        "files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1BitString.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1ObjectIdentifier.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/BERSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/BERSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DERIA5String.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSet.java",
          "core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java",
          "core/src/main/java/org/bouncycastle/util/Arrays.java"
        ],
        "message": "Rewrite ASN1EncodableVector to not use a Vector internally\n\n- improved integration with sequences and sets\n- improved null checking",
        "before_after_code_files": [
          "core/src/main/java/org/bouncycastle/asn1/ASN1BitString.java||core/src/main/java/org/bouncycastle/asn1/ASN1BitString.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java||core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1ObjectIdentifier.java||core/src/main/java/org/bouncycastle/asn1/ASN1ObjectIdentifier.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java||core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java||core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java",
          "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "core/src/main/java/org/bouncycastle/asn1/BERSequence.java||core/src/main/java/org/bouncycastle/asn1/BERSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/BERSet.java||core/src/main/java/org/bouncycastle/asn1/BERSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DERIA5String.java||core/src/main/java/org/bouncycastle/asn1/DERIA5String.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSequence.java||core/src/main/java/org/bouncycastle/asn1/DERSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSequence.java||core/src/main/java/org/bouncycastle/asn1/DLSequence.java",
          "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java",
          "core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java||core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java",
          "core/src/main/java/org/bouncycastle/util/Arrays.java||core/src/main/java/org/bouncycastle/util/Arrays.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
            "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
            "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
          ],
          "candidate": [
            "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
            "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java",
            "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/bouncycastle/asn1/ASN1BitString.java||core/src/main/java/org/bouncycastle/asn1/ASN1BitString.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1BitString.java -> core/src/main/java/org/bouncycastle/asn1/ASN1BitString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     {",
          "112:         if (data == null)",
          "113:         {",
          "115:         }",
          "116:         if (data.length == 0 && padBits != 0)",
          "117:         {",
          "",
          "[Removed Lines]",
          "114:             throw new NullPointerException(\"data cannot be null\");",
          "",
          "[Added Lines]",
          "114:             throw new NullPointerException(\"'data' cannot be null\");",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java||core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java -> core/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package org.bouncycastle.asn1;",
          "9: public class ASN1EncodableVector",
          "10: {",
          "16:     public ASN1EncodableVector()",
          "17:     {",
          "18:     }",
          "26:     {",
          "28:     }",
          "35:     public void addAll(ASN1EncodableVector other)",
          "36:     {",
          "38:         {",
          "40:         }",
          "41:     }",
          "",
          "[Removed Lines]",
          "3: import java.util.Enumeration;",
          "4: import java.util.Vector;",
          "11:     private final Vector v = new Vector();",
          "25:     public void add(ASN1Encodable obj)",
          "27:         v.addElement(obj);",
          "37:         for (Enumeration en = other.v.elements(); en.hasMoreElements();)",
          "39:             v.addElement(en.nextElement());",
          "",
          "[Added Lines]",
          "8:     static final ASN1Encodable[] EMPTY_ELEMENTS = new ASN1Encodable[0];",
          "10:     private static final int DEFAULT_CAPACITY = 10;",
          "12:     private ASN1Encodable[] elements;",
          "13:     private int elementCount;",
          "14:     private boolean copyOnWrite;",
          "18:         this(DEFAULT_CAPACITY);",
          "21:     public ASN1EncodableVector(int initialCapacity)",
          "23:         if (initialCapacity < 0)",
          "24:         {",
          "25:             throw new IllegalArgumentException(\"'initialCapacity' must not ne negative\");",
          "26:         }",
          "28:         this.elements = (initialCapacity == 0) ? EMPTY_ELEMENTS : new ASN1Encodable[initialCapacity];",
          "29:         this.elementCount = 0;",
          "30:         this.copyOnWrite = false;",
          "31:     }",
          "33:     public void add(ASN1Encodable element)",
          "34:     {",
          "35:         if (null == element)",
          "36:         {",
          "37:             throw new NullPointerException(\"'element' cannot be null\");",
          "38:         }",
          "40:         int capacity = elements.length;",
          "41:         int minCapacity = elementCount + 1;",
          "42:         if ((minCapacity > capacity) | copyOnWrite)",
          "43:         {",
          "44:             reallocate(minCapacity);",
          "45:         }",
          "47:         this.elements[elementCount] = element;",
          "48:         this.elementCount = minCapacity;",
          "53:         if (null == other)",
          "54:         {",
          "55:             throw new NullPointerException(\"'other' cannot be null\");",
          "56:         }",
          "58:         int otherElementCount = other.size();",
          "60:         int capacity = elements.length;",
          "61:         int minCapacity = elementCount + otherElementCount;",
          "62:         if ((minCapacity > capacity) | copyOnWrite)",
          "63:         {",
          "64:             reallocate(minCapacity);",
          "65:         }",
          "67:         for (int i = 0; i < otherElementCount; ++i)",
          "69:             ASN1Encodable otherElement = other.get(i);",
          "70:             if (null == otherElement)",
          "71:             {",
          "72:                 throw new NullPointerException(\"'other' elements cannot be null\");",
          "73:             }",
          "75:             this.elements[elementCount + i] = otherElement;",
          "78:         this.elementCount = minCapacity;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     public ASN1Encodable get(int i)",
          "50:     {",
          "52:     }",
          "",
          "[Removed Lines]",
          "51:         return (ASN1Encodable)v.elementAt(i);",
          "",
          "[Added Lines]",
          "89:         if (i >= elementCount)",
          "90:         {",
          "91:             throw new ArrayIndexOutOfBoundsException(i + \" >= \" + elementCount);",
          "92:         }",
          "94:         return elements[i];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:     public int size()",
          "60:     {",
          "62:     }",
          "63: }",
          "",
          "[Removed Lines]",
          "61:         return v.size();",
          "",
          "[Added Lines]",
          "104:         return elementCount;",
          "105:     }",
          "107:     ASN1Encodable[] copyElements()",
          "108:     {",
          "109:         if (0 == elementCount)",
          "110:         {",
          "111:             return EMPTY_ELEMENTS;",
          "112:         }",
          "114:         ASN1Encodable[] copy = new ASN1Encodable[elementCount];",
          "115:         System.arraycopy(elements, 0, copy, 0, elementCount);",
          "116:         return copy;",
          "117:     }",
          "119:     ASN1Encodable[] takeElements()",
          "120:     {",
          "121:         if (0 == elementCount)",
          "122:         {",
          "123:             return EMPTY_ELEMENTS;",
          "124:         }",
          "126:         if (elements.length == elementCount)",
          "127:         {",
          "128:             this.copyOnWrite = true;",
          "129:             return elements;",
          "130:         }",
          "132:         ASN1Encodable[] copy = new ASN1Encodable[elementCount];",
          "133:         System.arraycopy(elements, 0, copy, 0, elementCount);",
          "134:         return copy;",
          "135:     }",
          "137:     private void reallocate(int minCapacity)",
          "138:     {",
          "139:         int oldCapacity = elements.length;",
          "140:         int newCapacity = Math.max(oldCapacity, minCapacity + (minCapacity >> 1));",
          "142:         ASN1Encodable[] copy = new ASN1Encodable[newCapacity];",
          "143:         System.arraycopy(elements, 0, copy, 0, elementCount);",
          "145:         this.elements = copy;",
          "146:         this.copyOnWrite = false;",
          "147:     }",
          "149:     static ASN1Encodable[] cloneElements(ASN1Encodable[] elements)",
          "150:     {",
          "151:         return elements.length < 1 ? EMPTY_ELEMENTS : elements.clone();",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1ObjectIdentifier.java||core/src/main/java/org/bouncycastle/asn1/ASN1ObjectIdentifier.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1ObjectIdentifier.java -> core/src/main/java/org/bouncycastle/asn1/ASN1ObjectIdentifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:     {",
          "175:         if (identifier == null)",
          "176:         {",
          "178:         }",
          "179:         if (!isValidIdentifier(identifier))",
          "180:         {",
          "",
          "[Removed Lines]",
          "177:             throw new IllegalArgumentException(\"'identifier' cannot be null\");",
          "",
          "[Added Lines]",
          "177:             throw new NullPointerException(\"'identifier' cannot be null\");",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java||core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java -> core/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:     {",
          "175:         if (string == null)",
          "176:         {",
          "178:         }",
          "179:         this.string = string;",
          "180:     }",
          "",
          "[Removed Lines]",
          "177:             throw new NullPointerException(\"string cannot be null\");",
          "",
          "[Added Lines]",
          "177:             throw new NullPointerException(\"'string' cannot be null\");",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java||core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Sequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:     extends ASN1Primitive",
          "61:     implements org.bouncycastle.util.Iterable<ASN1Encodable>",
          "62: {",
          "66:     ASN1Encodable[] elements;",
          "",
          "[Removed Lines]",
          "63:     private static final ASN1Encodable[] EMPTY_ELEMENTS = new ASN1Encodable[0];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:     protected ASN1Sequence()",
          "176:     {",
          "178:     }",
          "185:     {",
          "187:     }",
          "194:     {",
          "199:         {",
          "209:         }",
          "212:     }",
          "219:     {",
          "221:     }",
          "224:     {",
          "228:     }",
          "230:     public ASN1Encodable[] toArray()",
          "231:     {",
          "233:     }",
          "235:     public Enumeration getObjects()",
          "",
          "[Removed Lines]",
          "177:         this.elements = EMPTY_ELEMENTS;",
          "184:     protected ASN1Sequence(ASN1Encodable obj)",
          "186:         this.elements = new ASN1Encodable[]{ obj };",
          "193:     protected ASN1Sequence(ASN1EncodableVector v)",
          "195:         int count = v.size();",
          "197:         ASN1Encodable[] tmp;",
          "198:         if (count < 1)",
          "200:             tmp = EMPTY_ELEMENTS;",
          "201:         }",
          "202:         else",
          "203:         {",
          "204:             tmp = new ASN1Encodable[count];",
          "205:             for (int i = 0; i < count; ++i)",
          "206:             {",
          "207:                 tmp[i] = v.get(i);",
          "208:             }",
          "211:         this.elements = tmp;",
          "218:     protected ASN1Sequence(ASN1Encodable[] array)",
          "220:         this(array, true);",
          "223:     ASN1Sequence(ASN1Encodable[] array, boolean clone)",
          "225:         this.elements = !clone              ? array",
          "226:                       : array.length < 1    ? EMPTY_ELEMENTS",
          "227:                       : array.clone();",
          "232:         return elements.length < 1 ? EMPTY_ELEMENTS : elements.clone();",
          "",
          "[Added Lines]",
          "175:         this.elements = ASN1EncodableVector.EMPTY_ELEMENTS;",
          "182:     protected ASN1Sequence(ASN1Encodable element)",
          "184:         if (null == element)",
          "185:         {",
          "186:             throw new NullPointerException(\"'element' cannot be null\");",
          "187:         }",
          "189:         this.elements = new ASN1Encodable[]{ element };",
          "196:     protected ASN1Sequence(ASN1EncodableVector elementVector)",
          "198:         if (null == elementVector)",
          "200:             throw new NullPointerException(\"'elementVector' cannot be null\");",
          "203:         this.elements = elementVector.takeElements();",
          "210:     protected ASN1Sequence(ASN1Encodable[] elements)",
          "212:         if (Arrays.isNullOrContainsNull(elements))",
          "213:         {",
          "214:             throw new NullPointerException(\"'elements' cannot be null, or contain null\");",
          "215:         }",
          "217:         this.elements = ASN1EncodableVector.cloneElements(elements);",
          "220:     ASN1Sequence(ASN1Encodable[] elements, boolean clone)",
          "222:         this.elements = clone ? ASN1EncodableVector.cloneElements(elements) : elements;",
          "227:         return ASN1EncodableVector.cloneElements(elements);",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/ASN1Set.java||core/src/main/java/org/bouncycastle/asn1/ASN1Set.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/ASN1Set.java -> core/src/main/java/org/bouncycastle/asn1/ASN1Set.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     extends ASN1Primitive",
          "99:     implements org.bouncycastle.util.Iterable<ASN1Encodable>",
          "100: {",
          "103:     protected final ASN1Encodable[] elements;",
          "104:     protected final boolean isSorted;",
          "",
          "[Removed Lines]",
          "101:     private static final ASN1Encodable[] EMPTY_ELEMENTS = new ASN1Encodable[0];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:     protected ASN1Set()",
          "229:     {",
          "231:         this.isSorted = true;",
          "232:     }",
          "239:     {",
          "241:         this.isSorted = true;",
          "242:     }",
          "250:     {",
          "253:         ASN1Encodable[] tmp;",
          "255:         {",
          "274:         }",
          "275:         }",
          "277:         this.elements = tmp;",
          "279:     }",
          "287:     {",
          "300:         {",
          "307:         }",
          "308:         }",
          "310:         this.elements = tmp;",
          "312:     }",
          "314:     ASN1Set(boolean isSorted, ASN1Encodable[] elements)",
          "315:     {",
          "316:         this.elements = elements;",
          "318:     }",
          "320:     public Enumeration getObjects()",
          "",
          "[Removed Lines]",
          "230:         this.elements = EMPTY_ELEMENTS;",
          "238:     protected ASN1Set(ASN1Encodable obj)",
          "240:         this.elements = new ASN1Encodable[]{ obj };",
          "249:     protected ASN1Set(ASN1EncodableVector v, boolean doSort)",
          "251:         int count = v.size();",
          "254:         switch (count)",
          "256:         case 0:",
          "257:             tmp = EMPTY_ELEMENTS;",
          "258:             break;",
          "259:         case 1:",
          "260:             tmp = new ASN1Encodable[]{ v.get(0) };",
          "261:             break;",
          "262:         default:",
          "263:         {",
          "264:             tmp = new ASN1Encodable[count];",
          "265:             for (int i = 0; i < count; ++i)",
          "266:             {",
          "267:                 tmp[i] = v.get(i);",
          "268:             }",
          "269:             if (doSort)",
          "270:             {",
          "271:                 sort(tmp);",
          "272:             }",
          "273:             break;",
          "278:         this.isSorted = doSort;",
          "286:     protected ASN1Set(ASN1Encodable[] array, boolean doSort)",
          "288:         int count = array.length;",
          "290:         ASN1Encodable[] tmp;",
          "291:         switch (count)",
          "292:         {",
          "293:         case 0:",
          "294:             tmp = EMPTY_ELEMENTS;",
          "295:             break;",
          "296:         case 1:",
          "297:             tmp = new ASN1Encodable[]{ array[0] };",
          "298:             break;",
          "299:         default:",
          "301:             tmp = array.clone();",
          "302:             if (doSort)",
          "303:             {",
          "304:                 sort(tmp);",
          "305:             }",
          "306:             break;",
          "311:         this.isSorted = doSort;",
          "317:         this.isSorted = isSorted;",
          "",
          "[Added Lines]",
          "228:         this.elements = ASN1EncodableVector.EMPTY_ELEMENTS;",
          "236:     protected ASN1Set(ASN1Encodable element)",
          "238:         if (null == element)",
          "239:         {",
          "240:             throw new NullPointerException(\"'element' cannot be null\");",
          "241:         }",
          "243:         this.elements = new ASN1Encodable[]{ element };",
          "252:     protected ASN1Set(ASN1EncodableVector elementVector, boolean doSort)",
          "254:         if (null == elementVector)",
          "255:         {",
          "256:             throw new NullPointerException(\"'elementVector' cannot be null\");",
          "257:         }",
          "260:         if (doSort && elementVector.size() >= 2)",
          "262:             tmp = elementVector.copyElements();",
          "263:             sort(tmp);",
          "265:         else",
          "266:         {",
          "267:             tmp = elementVector.takeElements();",
          "271:         this.isSorted = doSort || tmp.length < 2;",
          "279:     protected ASN1Set(ASN1Encodable[] elements, boolean doSort)",
          "281:         if (Arrays.isNullOrContainsNull(elements))",
          "283:             throw new NullPointerException(\"'elements' cannot be null, or contain null\");",
          "286:         ASN1Encodable[] tmp = ASN1EncodableVector.cloneElements(elements);",
          "287:         if (doSort && tmp.length >= 2)",
          "288:         {",
          "289:             sort(tmp);",
          "293:         this.isSorted = doSort || tmp.length < 2;",
          "299:         this.isSorted = isSorted || elements.length < 2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "363:     public ASN1Encodable[] toArray()",
          "364:     {",
          "366:     }",
          "368:     public ASN1SetParser parser()",
          "",
          "[Removed Lines]",
          "365:         return elements.length < 1 ? EMPTY_ELEMENTS : elements.clone();",
          "",
          "[Added Lines]",
          "347:         return ASN1EncodableVector.cloneElements(elements);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "424:         else",
          "425:         {",
          "426:             tmp = elements.clone();",
          "428:             sort(tmp);",
          "429:         }",
          "432:     }",
          "",
          "[Removed Lines]",
          "431:         return new DERSet(isSorted, tmp);",
          "",
          "[Added Lines]",
          "412:         return new DERSet(true, tmp);",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/BERSequence.java||core/src/main/java/org/bouncycastle/asn1/BERSequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/BERSequence.java -> core/src/main/java/org/bouncycastle/asn1/BERSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     {",
          "30:     }",
          "37:     {",
          "39:     }",
          "46:     {",
          "48:     }",
          "52:     {",
          "53:         int count = elements.length;",
          "54:         int totalLength = 0;",
          "",
          "[Removed Lines]",
          "26:     public BERSequence(",
          "27:         ASN1Encodable obj)",
          "29:         super(obj);",
          "35:     public BERSequence(",
          "36:         ASN1EncodableVector v)",
          "38:         super(v);",
          "44:     public BERSequence(",
          "45:         ASN1Encodable[]   array)",
          "47:         super(array);",
          "50:     int encodedLength()",
          "51:         throws IOException",
          "",
          "[Added Lines]",
          "26:     public BERSequence(ASN1Encodable element)",
          "28:         super(element);",
          "34:     public BERSequence(ASN1EncodableVector elementVector)",
          "36:         super(elementVector);",
          "42:     public BERSequence(ASN1Encodable[] elements)",
          "44:         super(elements);",
          "47:     int encodedLength() throws IOException",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/BERSet.java||core/src/main/java/org/bouncycastle/asn1/BERSet.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/BERSet.java -> core/src/main/java/org/bouncycastle/asn1/BERSet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     {",
          "38:     }",
          "46:     {",
          "48:     }",
          "56:     {",
          "58:     }",
          "62:     {",
          "63:         int count = elements.length;",
          "64:         int totalLength = 0;",
          "",
          "[Removed Lines]",
          "34:     public BERSet(",
          "35:         ASN1Encodable obj)",
          "37:         super(obj);",
          "44:     public BERSet(",
          "45:         ASN1EncodableVector v)",
          "47:         super(v, false);",
          "54:     public BERSet(",
          "55:         ASN1Encodable[]   a)",
          "57:         super(a, false);",
          "60:     int encodedLength()",
          "61:         throws IOException",
          "",
          "[Added Lines]",
          "34:     public BERSet(ASN1Encodable element)",
          "36:         super(element);",
          "43:     public BERSet(ASN1EncodableVector elementVector)",
          "45:         super(elementVector, false);",
          "52:     public BERSet(ASN1Encodable[] elements)",
          "54:         super(elements, false);",
          "57:     int encodedLength() throws IOException",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERIA5String.java||core/src/main/java/org/bouncycastle/asn1/DERIA5String.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERIA5String.java -> core/src/main/java/org/bouncycastle/asn1/DERIA5String.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     {",
          "108:         if (string == null)",
          "109:         {",
          "111:         }",
          "112:         if (validate && !isIA5String(string))",
          "113:         {",
          "115:         }",
          "117:         this.string = Strings.toByteArray(string);",
          "",
          "[Removed Lines]",
          "110:             throw new NullPointerException(\"string cannot be null\");",
          "114:             throw new IllegalArgumentException(\"string contains illegal characters\");",
          "",
          "[Added Lines]",
          "110:             throw new NullPointerException(\"'string' cannot be null\");",
          "114:             throw new IllegalArgumentException(\"'string' contains illegal characters\");",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERSequence.java||core/src/main/java/org/bouncycastle/asn1/DERSequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERSequence.java -> core/src/main/java/org/bouncycastle/asn1/DERSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:     {",
          "37:     }",
          "45:     {",
          "47:     }",
          "55:     {",
          "57:     }",
          "60:     {",
          "62:     }",
          "64:     public void encodeTo(OutputStream output) throws IOException",
          "",
          "[Removed Lines]",
          "33:     public DERSequence(",
          "34:         ASN1Encodable obj)",
          "36:         super(obj);",
          "43:     public DERSequence(",
          "44:         ASN1EncodableVector v)",
          "46:         super(v);",
          "53:     public DERSequence(",
          "54:         ASN1Encodable[]   array)",
          "56:         super(array);",
          "59:     DERSequence(ASN1Encodable[] array, boolean clone)",
          "61:         super(array, clone);",
          "",
          "[Added Lines]",
          "33:     public DERSequence(ASN1Encodable element)",
          "35:         super(element);",
          "42:     public DERSequence(ASN1EncodableVector elementVector)",
          "44:         super(elementVector);",
          "51:     public DERSequence(ASN1Encodable[] elements)",
          "53:         super(elements);",
          "56:     DERSequence(ASN1Encodable[] elements, boolean clone)",
          "58:         super(elements, clone);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:         encode(new DEROutputStream(output));",
          "72:     }",
          "76:     {",
          "77:         if (bodyLength < 0)",
          "78:         {",
          "",
          "[Removed Lines]",
          "74:     private int getBodyLength()",
          "75:         throws IOException",
          "",
          "[Added Lines]",
          "71:     private int getBodyLength() throws IOException",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:         return bodyLength;",
          "92:     }",
          "96:     {",
          "97:         int length = getBodyLength();",
          "",
          "[Removed Lines]",
          "94:     int encodedLength()",
          "95:         throws IOException",
          "",
          "[Added Lines]",
          "90:     int encodedLength() throws IOException",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DERSet.java||core/src/main/java/org/bouncycastle/asn1/DERSet.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DERSet.java -> core/src/main/java/org/bouncycastle/asn1/DERSet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     {",
          "41:     }",
          "49:     {",
          "51:     }",
          "59:     {",
          "61:     }",
          "66:     {",
          "68:     }",
          "70:     DERSet(boolean isSorted, ASN1Encodable[] elements)",
          "",
          "[Removed Lines]",
          "37:     public DERSet(",
          "38:         ASN1Encodable obj)",
          "40:         super(obj);",
          "47:     public DERSet(",
          "48:         ASN1EncodableVector v)",
          "50:         super(v, true);",
          "57:     public DERSet(",
          "58:         ASN1Encodable[]   a)",
          "60:         super(a, true);",
          "63:     DERSet(",
          "64:         ASN1EncodableVector v,",
          "65:         boolean                  doSort)",
          "67:         super(v, doSort);",
          "",
          "[Added Lines]",
          "37:     public DERSet(ASN1Encodable element)",
          "39:         super(element);",
          "46:     public DERSet(ASN1EncodableVector elementVector)",
          "48:         super(elementVector, true);",
          "55:     public DERSet(ASN1Encodable[] elements)",
          "57:         super(elements, true);",
          "61:     DERSet(ASN1EncodableVector elementVector, boolean doSort)",
          "63:         super(elementVector, doSort);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:         encode(new DEROutputStream(output));",
          "83:     }",
          "87:     {",
          "88:         if (bodyLength < 0)",
          "89:         {",
          "",
          "[Removed Lines]",
          "85:     private int getBodyLength()",
          "86:         throws IOException",
          "",
          "[Added Lines]",
          "81:     private int getBodyLength() throws IOException",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:         return bodyLength;",
          "103:     }",
          "107:     {",
          "108:         int length = getBodyLength();",
          "",
          "[Removed Lines]",
          "105:     int encodedLength()",
          "106:         throws IOException",
          "",
          "[Added Lines]",
          "100:     int encodedLength() throws IOException",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DLSequence.java||core/src/main/java/org/bouncycastle/asn1/DLSequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DLSequence.java -> core/src/main/java/org/bouncycastle/asn1/DLSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     {",
          "28:     }",
          "36:     {",
          "38:     }",
          "46:     {",
          "48:     }",
          "51:     {",
          "53:     }",
          "57:     {",
          "58:         if (bodyLength < 0)",
          "59:         {",
          "",
          "[Removed Lines]",
          "24:     public DLSequence(",
          "25:         ASN1Encodable obj)",
          "27:         super(obj);",
          "34:     public DLSequence(",
          "35:         ASN1EncodableVector v)",
          "37:         super(v);",
          "44:     public DLSequence(",
          "45:         ASN1Encodable[] array)",
          "47:         super(array);",
          "50:     DLSequence(ASN1Encodable[] array, boolean clone)",
          "52:         super(array, clone);",
          "55:     private int getBodyLength()",
          "56:         throws IOException",
          "",
          "[Added Lines]",
          "24:     public DLSequence(ASN1Encodable element)",
          "26:         super(element);",
          "33:     public DLSequence(ASN1EncodableVector elementVector)",
          "35:         super(elementVector);",
          "42:     public DLSequence(ASN1Encodable[] elements)",
          "44:         super(elements);",
          "47:     DLSequence(ASN1Encodable[] elements, boolean clone)",
          "49:         super(elements, clone);",
          "52:     private int getBodyLength() throws IOException",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:         return bodyLength;",
          "73:     }",
          "77:     {",
          "78:         int length = getBodyLength();",
          "",
          "[Removed Lines]",
          "75:     int encodedLength()",
          "76:         throws IOException",
          "",
          "[Added Lines]",
          "71:     int encodedLength() throws IOException",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/DLSet.java||core/src/main/java/org/bouncycastle/asn1/DLSet.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/DLSet.java -> core/src/main/java/org/bouncycastle/asn1/DLSet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     }",
          "70:     {",
          "72:     }",
          "79:     {",
          "81:     }",
          "88:     {",
          "90:     }",
          "92:     DLSet(boolean isSorted, ASN1Encodable[] elements)",
          "",
          "[Removed Lines]",
          "68:     public DLSet(",
          "69:         ASN1Encodable obj)",
          "71:         super(obj);",
          "77:     public DLSet(",
          "78:         ASN1EncodableVector v)",
          "80:         super(v, false);",
          "86:     public DLSet(",
          "87:         ASN1Encodable[] a)",
          "89:         super(a, false);",
          "",
          "[Added Lines]",
          "68:     public DLSet(ASN1Encodable element)",
          "70:         super(element);",
          "76:     public DLSet(ASN1EncodableVector elementVector)",
          "78:         super(elementVector, false);",
          "84:     public DLSet(ASN1Encodable[] elements)",
          "86:         super(elements, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:         super(isSorted, elements);",
          "95:     }",
          "99:     {",
          "100:         if (bodyLength < 0)",
          "101:         {",
          "",
          "[Removed Lines]",
          "97:     private int getBodyLength()",
          "98:         throws IOException",
          "",
          "[Added Lines]",
          "94:     private int getBodyLength() throws IOException",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:         return bodyLength;",
          "115:     }",
          "119:     {",
          "120:         int length = getBodyLength();",
          "",
          "[Removed Lines]",
          "117:     int encodedLength()",
          "118:         throws IOException",
          "",
          "[Added Lines]",
          "113:     int encodedLength() throws IOException",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java||core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java": [
          "File: core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java -> core/src/main/java/org/bouncycastle/asn1/LazyEncodedSequence.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import java.io.IOException;",
          "4: import java.util.Enumeration;",
          "5: import java.util.Iterator;",
          "",
          "[Removed Lines]",
          "6: import java.util.Vector;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     {",
          "108:         if (null != encoded)",
          "109:         {",
          "111:             Enumeration en = new LazyConstructionEnumeration(encoded);",
          "112:             while (en.hasMoreElements())",
          "113:             {",
          "122:             }",
          "125:             this.encoded = null;",
          "126:         }",
          "127:     }",
          "",
          "[Removed Lines]",
          "110:             Vector v = new Vector();",
          "114:                 v.addElement(en.nextElement());",
          "115:             }",
          "117:             int count = v.size();",
          "118:             ASN1Encodable[] tmp = new ASN1Encodable[count];",
          "119:             for (int i = 0; i < count; ++i)",
          "120:             {",
          "121:                 tmp[i] = (ASN1Primitive)v.elementAt(i);",
          "124:             this.elements = tmp;",
          "",
          "[Added Lines]",
          "109:             ASN1EncodableVector v = new ASN1EncodableVector();",
          "114:                 v.add((ASN1Primitive)en.nextElement());",
          "117:             this.elements = v.takeElements();",
          "",
          "---------------"
        ],
        "core/src/main/java/org/bouncycastle/util/Arrays.java||core/src/main/java/org/bouncycastle/util/Arrays.java": [
          "File: core/src/main/java/org/bouncycastle/util/Arrays.java -> core/src/main/java/org/bouncycastle/util/Arrays.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1044:             java.util.Arrays.fill(data, (byte)0x00);",
          "1045:         }",
          "1046:     }",
          "1047: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1048:     public static boolean isNullOrContainsNull(Object[] array)",
          "1049:     {",
          "1050:         if (null == array)",
          "1051:         {",
          "1052:             return true;",
          "1053:         }",
          "1054:         int count = array.length;",
          "1055:         for (int i = 0; i < count; ++i)",
          "1056:         {",
          "1057:             if (null == array[i])",
          "1058:             {",
          "1059:                 return true;",
          "1060:             }",
          "1061:         }",
          "1062:         return false;",
          "1063:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}