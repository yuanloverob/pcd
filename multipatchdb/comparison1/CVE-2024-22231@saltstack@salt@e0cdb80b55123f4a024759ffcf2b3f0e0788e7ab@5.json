{
  "cve_id": "CVE-2024-22231",
  "cve_desc": "Syndic cache directory creation is vulnerable to a directory traversal attack in salt project which can lead\u00a0a malicious attacker to create an arbitrary directory on a Salt master.",
  "repo": "saltstack/salt",
  "patch_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
  "patch_info": {
    "commit_hash": "e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab",
    "files": [
      "salt/fileserver/__init__.py",
      "salt/fileserver/roots.py",
      "salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py"
    ],
    "message": "CVE fix",
    "before_after_code_files": [
      "salt/fileserver/__init__.py||salt/fileserver/__init__.py",
      "salt/fileserver/roots.py||salt/fileserver/roots.py",
      "salt/master.py||salt/master.py",
      "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py",
      "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py",
      "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
      "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py"
    ]
  },
  "patch_diff": {
    "salt/fileserver/__init__.py||salt/fileserver/__init__.py": [
      "File: salt/fileserver/__init__.py -> salt/fileserver/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "568:         saltenv = salt.utils.stringutils.to_unicode(saltenv)",
      "569:         back = self.backends(back)",
      "570:         kwargs = {}",
      "576:         if salt.utils.url.is_escaped(path):",
      "577:             # don't attempt to find URL query arguments in the path",
      "578:             path = salt.utils.url.unescape(path)",
      "",
      "[Removed Lines]",
      "571:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "572:         if os.path.isabs(path):",
      "573:             return fnd",
      "574:         if \"../\" in path:",
      "575:             return fnd",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:                     args = comp.split(\"=\", 1)",
      "589:                     kwargs[args[0]] = args[1]",
      "591:         if \"env\" in kwargs:",
      "592:             # \"env\" is not supported; Use \"saltenv\".",
      "593:             kwargs.pop(\"env\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586:         fnd = {\"path\": \"\", \"rel\": \"\"}",
      "587:         if os.path.isabs(path) or \"../\" in path:",
      "588:             return fnd",
      "",
      "---------------"
    ],
    "salt/fileserver/roots.py||salt/fileserver/roots.py": [
      "File: salt/fileserver/roots.py -> salt/fileserver/roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import salt.utils.path",
      "28: import salt.utils.platform",
      "29: import salt.utils.stringutils",
      "30: import salt.utils.versions",
      "32: log = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import salt.utils.verify",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "98:         if saltenv == \"__env__\":",
      "99:             root = root.replace(\"__env__\", actual_saltenv)",
      "100:         full = os.path.join(root, path)",
      "101:         if os.path.isfile(full) and not salt.fileserver.is_file_ignored(__opts__, full):",
      "102:             fnd[\"path\"] = full",
      "103:             fnd[\"rel\"] = path",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:         # Refuse to serve file that is not under the root.",
      "104:         if not salt.utils.verify.clean_path(root, full, subdir=True):",
      "105:             continue",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:     ret[\"dest\"] = fnd[\"rel\"]",
      "129:     gzip = load.get(\"gzip\", None)",
      "130:     fpath = os.path.normpath(fnd[\"path\"])",
      "131:     with salt.utils.files.fopen(fpath, \"rb\") as fp_:",
      "132:         fp_.seek(load[\"loc\"])",
      "133:         data = fp_.read(__opts__[\"file_buffer_size\"])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     actual_saltenv = saltenv = load[\"saltenv\"]",
      "139:     if saltenv not in __opts__[\"file_roots\"]:",
      "140:         if \"__env__\" in __opts__[\"file_roots\"]:",
      "141:             log.debug(",
      "142:                 \"salt environment '%s' maps to __env__ file_roots directory\", saltenv",
      "143:             )",
      "144:             saltenv = \"__env__\"",
      "145:         else:",
      "146:             return fnd",
      "147:     file_in_root = False",
      "148:     for root in __opts__[\"file_roots\"][saltenv]:",
      "149:         if saltenv == \"__env__\":",
      "150:             root = root.replace(\"__env__\", actual_saltenv)",
      "151:         # Refuse to serve file that is not under the root.",
      "152:         if salt.utils.verify.clean_path(root, fpath, subdir=True):",
      "153:             file_in_root = True",
      "154:     if not file_in_root:",
      "155:         return ret",
      "",
      "---------------"
    ],
    "salt/master.py||salt/master.py": [
      "File: salt/master.py -> salt/master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1036:         \"\"\"",
      "1037:         key = payload[\"enc\"]",
      "1038:         load = payload[\"load\"]",
      "1040:         raise salt.ext.tornado.gen.Return(ret)",
      "1042:     def _post_stats(self, start, cmd):",
      "",
      "[Removed Lines]",
      "1039:         ret = {\"aes\": self._handle_aes, \"clear\": self._handle_clear}[key](load)",
      "",
      "[Added Lines]",
      "1039:         if key == \"aes\":",
      "1040:             ret = self.handle_aes(load)",
      "1041:         else:",
      "1042:             ret = self.handle_clear(load)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1738:                 self.mminion.returners[fstr](load[\"jid\"], load[\"load\"])",
      "1740:             # Register the syndic",
      "1741:             syndic_cache_path = os.path.join(",
      "1742:                 self.opts[\"cachedir\"], \"syndics\", load[\"id\"]",
      "1743:             )",
      "1745:                 path_name = os.path.split(syndic_cache_path)[0]",
      "1746:                 if not os.path.exists(path_name):",
      "1747:                     os.makedirs(path_name)",
      "",
      "[Removed Lines]",
      "1744:             if not os.path.exists(syndic_cache_path):",
      "",
      "[Added Lines]",
      "1745:             # We are creating a path using user suplied input. Use the",
      "1746:             # clean_path to prevent a directory traversal.",
      "1747:             root = os.path.join(self.opts[\"cachedir\"], \"syndics\")",
      "1751:             if salt.utils.verify.clean_path(",
      "1752:                 root, syndic_cache_path",
      "1753:             ) and not os.path.exists(syndic_cache_path):",
      "",
      "---------------"
    ],
    "tests/pytests/unit/fileserver/test_roots.py||tests/pytests/unit/fileserver/test_roots.py": [
      "File: tests/pytests/unit/fileserver/test_roots.py -> tests/pytests/unit/fileserver/test_roots.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:     return dirname",
      "56: @pytest.fixture",
      "57: def configure_loader_modules(tmp_state_tree, temp_salt_master):",
      "58:     opts = temp_salt_master.config.copy()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "56: @pytest.fixture(autouse=True)",
      "57: def testfilepath(tmp_state_tree, testfile):",
      "58:     return tmp_state_tree / testfile.name",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "75:     assert full_path_to_file == ret[\"path\"]",
      "79:     with patch.dict(roots.__opts__, {\"file_buffer_size\": 262144}):",
      "80:         load = {",
      "81:             \"saltenv\": \"base\",",
      "83:             \"loc\": 0,",
      "84:         }",
      "86:         ret = roots.serve_file(load, fnd)",
      "89:             data = fp_.read()",
      "91:         assert ret == {\"data\": data, \"dest\": \"testfile\"}",
      "",
      "[Removed Lines]",
      "78: def test_serve_file(testfile):",
      "82:             \"path\": str(testfile),",
      "85:         fnd = {\"path\": str(testfile), \"rel\": \"testfile\"}",
      "88:         with salt.utils.files.fopen(str(testfile), \"rb\") as fp_:",
      "",
      "[Added Lines]",
      "83: def test_serve_file(testfilepath):",
      "87:             \"path\": str(testfilepath),",
      "90:         fnd = {\"path\": str(testfilepath), \"rel\": \"testfile\"}",
      "93:         with salt.utils.files.fopen(str(testfilepath), \"rb\") as fp_:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "236:     # between Python releases.",
      "237:     lines_written = sorted(mtime_map_mock.write_calls())",
      "238:     expected = sorted(",
      "240:         for key, val in new_mtime_map.items()",
      "241:     )",
      "242:     assert lines_written == expected, lines_written",
      "",
      "[Removed Lines]",
      "239:         salt.utils.stringutils.to_bytes(\"{key}:{val}\\n\".format(key=key, val=val))",
      "",
      "[Added Lines]",
      "244:         salt.utils.stringutils.to_bytes(f\"{key}:{val}\\n\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "277:         },",
      "278:         \"backend\": \"roots\",",
      "279:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "287: def test_find_file_not_in_root(tmp_state_tree):",
      "288:     \"\"\"",
      "289:     Fileroots should never 'find' a file that is outside of it's root.",
      "290:     \"\"\"",
      "291:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "292:     badfile.write_text(\"Bad file\")",
      "293:     badpath = f\"../bar\"",
      "294:     ret = roots.find_file(badpath)",
      "295:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "296:     badpath = f\"{tmp_state_tree / '..' / 'bar'}\"",
      "297:     ret = roots.find_file(badpath)",
      "298:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "301: def test_serve_file_not_in_root(tmp_state_tree):",
      "302:     \"\"\"",
      "303:     Fileroots should never 'serve' a file that is outside of it's root.",
      "304:     \"\"\"",
      "305:     badfile = pathlib.Path(tmp_state_tree).parent / \"bar\"",
      "306:     badfile.write_text(\"Bad file\")",
      "307:     badpath = f\"../bar\"",
      "308:     load = {\"path\": \"salt://|..\\\\bar\", \"saltenv\": \"base\", \"loc\": 0}",
      "309:     fnd = {",
      "310:         \"path\": f\"{tmp_state_tree / '..' / 'bar'}\",",
      "311:         \"rel\": f\"{pathlib.Path('..') / 'bar'}\",",
      "312:     }",
      "313:     ret = roots.serve_file(load, fnd)",
      "314:     assert ret == {\"data\": \"\", \"dest\": \"../bar\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_fileserver.py||tests/pytests/unit/test_fileserver.py": [
      "File: tests/pytests/unit/test_fileserver.py -> tests/pytests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: \"\"\"",
      "5: import datetime",
      "6: import os",
      "7: import time",
      "9: import salt.fileserver",
      "10: import salt.utils.files",
      "13: def test_diff_with_diffent_keys():",
      "14:     \"\"\"",
      "15:     Test that different maps are indeed reported different",
      "16:     \"\"\"",
      "17:     map1 = {\"file1\": 1234}",
      "18:     map2 = {\"file2\": 1234}",
      "19:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "22: def test_diff_with_diffent_values():",
      "23:     \"\"\"",
      "24:     Test that different maps are indeed reported different",
      "25:     \"\"\"",
      "26:     map1 = {\"file1\": 12345}",
      "27:     map2 = {\"file1\": 1234}",
      "28:     assert salt.fileserver.diff_mtime_map(map1, map2) is True",
      "31: def test_whitelist():",
      "32:     opts = {",
      "33:         \"fileserver_backend\": [\"roots\", \"git\", \"s3fs\", \"hgfs\", \"svn\"],",
      "34:         \"extension_modules\": \"\",",
      "35:     }",
      "36:     fs = salt.fileserver.Fileserver(opts)",
      "37:     assert sorted(fs.servers.whitelist) == sorted(",
      "38:         [\"git\", \"gitfs\", \"hg\", \"hgfs\", \"svn\", \"svnfs\", \"roots\", \"s3fs\"]",
      "39:     ), fs.servers.whitelist",
      "42: def test_future_file_list_cache_file_ignored(tmp_path):",
      "43:     opts = {",
      "44:         \"fileserver_backend\": [\"roots\"],",
      "45:         \"cachedir\": tmp_path,",
      "46:         \"extension_modules\": \"\",",
      "47:     }",
      "49:     back_cachedir = os.path.join(tmp_path, \"file_lists/roots\")",
      "50:     os.makedirs(os.path.join(back_cachedir))",
      "52:     # Touch a couple files",
      "53:     for filename in (\"base.p\", \"foo.txt\"):",
      "54:         with salt.utils.files.fopen(os.path.join(back_cachedir, filename), \"wb\") as _f:",
      "55:             if filename == \"base.p\":",
      "56:                 _f.write(b\"\\x80\")",
      "58:     # Set modification time to file list cache file to 1 year in the future",
      "59:     now = datetime.datetime.utcnow()",
      "60:     future = now + datetime.timedelta(days=365)",
      "61:     mod_time = time.mktime(future.timetuple())",
      "62:     os.utime(os.path.join(back_cachedir, \"base.p\"), (mod_time, mod_time))",
      "64:     list_cache = os.path.join(back_cachedir, \"base.p\")",
      "65:     w_lock = os.path.join(back_cachedir, \".base.w\")",
      "66:     ret = salt.fileserver.check_file_list_cache(opts, \"files\", list_cache, w_lock)",
      "67:     assert (",
      "68:         ret[1] is True",
      "69:     ), \"Cache file list cache file is not refreshed when future modification time\"",
      "72: def test_file_server_url_escape(tmp_path):",
      "73:     (tmp_path / \"srv\").mkdir()",
      "74:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "75:     (tmp_path / \"foo\").mkdir()",
      "76:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "77:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "78:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "79:     opts = {",
      "80:         \"fileserver_backend\": [\"roots\"],",
      "81:         \"extension_modules\": \"\",",
      "82:         \"optimization_order\": [",
      "83:             0,",
      "84:         ],",
      "85:         \"file_roots\": {",
      "86:             \"base\": [fileroot],",
      "87:         },",
      "88:         \"file_ignore_regex\": \"\",",
      "89:         \"file_ignore_glob\": \"\",",
      "90:     }",
      "91:     fs = salt.fileserver.Fileserver(opts)",
      "92:     ret = fs.find_file(",
      "93:         \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "94:         \"base\",",
      "95:     )",
      "96:     assert ret == {\"path\": \"\", \"rel\": \"\"}",
      "99: def test_file_server_serve_url_escape(tmp_path):",
      "100:     (tmp_path / \"srv\").mkdir()",
      "101:     (tmp_path / \"srv\" / \"salt\").mkdir()",
      "102:     (tmp_path / \"foo\").mkdir()",
      "103:     (tmp_path / \"foo\" / \"bar\").write_text(\"Bad file\")",
      "104:     fileroot = str(tmp_path / \"srv\" / \"salt\")",
      "105:     badfile = str(tmp_path / \"foo\" / \"bar\")",
      "106:     opts = {",
      "107:         \"fileserver_backend\": [\"roots\"],",
      "108:         \"extension_modules\": \"\",",
      "109:         \"optimization_order\": [",
      "110:             0,",
      "111:         ],",
      "112:         \"file_roots\": {",
      "113:             \"base\": [fileroot],",
      "114:         },",
      "115:         \"file_ignore_regex\": \"\",",
      "116:         \"file_ignore_glob\": \"\",",
      "117:         \"file_buffer_size\": 2048,",
      "118:     }",
      "119:     fs = salt.fileserver.Fileserver(opts)",
      "120:     ret = fs.serve_file(",
      "121:         {",
      "122:             \"path\": \"salt://|..\\\\..\\\\..\\\\foo/bar\",",
      "123:             \"saltenv\": \"base\",",
      "124:             \"loc\": 0,",
      "125:         }",
      "126:     )",
      "127:     assert ret == {\"data\": \"\", \"dest\": \"\"}",
      "",
      "---------------"
    ],
    "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
      "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import time",
      "3: import pytest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pathlib",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     with patch.object(encrypted_requests, \"_return\", autospec=True) as fake_return:",
      "161:         encrypted_requests._syndic_return(payload)",
      "162:         fake_return.assert_called_with(expected_return)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "166: def test_syndic_return_cache_dir_creation(encrypted_requests):",
      "167:     \"\"\"master's cachedir for a syndic will be created by AESFuncs._syndic_return method\"\"\"",
      "168:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "169:     assert not (cachedir / \"syndics\").exists()",
      "170:     encrypted_requests._syndic_return(",
      "171:         {",
      "172:             \"id\": \"mamajama\",",
      "173:             \"jid\": \"\",",
      "174:             \"return\": {},",
      "175:         }",
      "176:     )",
      "177:     assert (cachedir / \"syndics\").exists()",
      "178:     assert (cachedir / \"syndics\" / \"mamajama\").exists()",
      "181: def test_syndic_return_cache_dir_creation_traversal(encrypted_requests):",
      "182:     \"\"\"",
      "183:     master's  AESFuncs._syndic_return method cachdir creation is not vulnerable to a directory traversal",
      "184:     \"\"\"",
      "185:     cachedir = pathlib.Path(encrypted_requests.opts[\"cachedir\"])",
      "186:     assert not (cachedir / \"syndics\").exists()",
      "187:     encrypted_requests._syndic_return(",
      "188:         {",
      "189:             \"id\": \"../mamajama\",",
      "190:             \"jid\": \"\",",
      "191:             \"return\": {},",
      "192:         }",
      "193:     )",
      "194:     assert not (cachedir / \"syndics\").exists()",
      "195:     assert not (cachedir / \"mamajama\").exists()",
      "",
      "---------------"
    ],
    "tests/unit/test_fileserver.py||tests/unit/test_fileserver.py": [
      "File: tests/unit/test_fileserver.py -> tests/unit/test_fileserver.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "688093c4aa151598e117725d2173e6feabfb09a0",
      "candidate_info": {
        "commit_hash": "688093c4aa151598e117725d2173e6feabfb09a0",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/688093c4aa151598e117725d2173e6feabfb09a0",
        "files": [
          "salt/minion.py",
          "tests/pytests/integration/minion/test_return_retries.py"
        ],
        "message": "Fix up test and close minion channels",
        "before_after_code_files": [
          "salt/minion.py||salt/minion.py",
          "tests/pytests/integration/minion/test_return_retries.py||tests/pytests/integration/minion/test_return_retries.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "salt/minion.py||salt/minion.py": [
          "File: salt/minion.py -> salt/minion.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1286:         self.ready = False",
          "1287:         self.jid_queue = [] if jid_queue is None else jid_queue",
          "1288:         self.periodic_callbacks = {}",
          "1290:         if io_loop is None:",
          "1291:             self.io_loop = salt.ext.tornado.ioloop.IOLoop.current()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1289:         self.req_channel = None",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1396:         \"\"\"",
          "1397:         Return a future which will complete when you are connected to a master",
          "1398:         \"\"\"",
          "1399:         # Consider refactoring so that eval_master does not have a subtle side-effect on the contents of the opts array",
          "1400:         master, self.pub_channel = yield self.eval_master(",
          "1401:             self.opts, self.timeout, self.safe, failed",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1400:         if hasattr(self, \"pub_channel\") and self.pub_channel:",
          "1401:             self.pub_channel.on_recv(None)",
          "1402:             if hasattr(self.pub_channel, \"auth\"):",
          "1403:                 self.pub_channel.auth.invalidate()",
          "1404:             if hasattr(self.pub_channel, \"close\"):",
          "1405:                 self.pub_channel.close()",
          "1406:         if hasattr(self, \"req_channel\") and self.req_channel:",
          "1407:             self.req_channel.close()",
          "1408:             self.req_channel = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2870:                             self.pub_channel.auth.invalidate()",
          "2871:                         if hasattr(self.pub_channel, \"close\"):",
          "2872:                             self.pub_channel.close()",
          "2875:                     # if eval_master finds a new master for us, self.connected",
          "2876:                     # will be True again on successful master authentication",
          "",
          "[Removed Lines]",
          "2873:                         del self.pub_channel",
          "",
          "[Added Lines]",
          "2884:                     if hasattr(self, \"req_channel\") and self.req_channel:",
          "2885:                         self.req_channel.close()",
          "2886:                         self.req_channel = None",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3303:             if hasattr(self.pub_channel, \"close\"):",
          "3304:                 self.pub_channel.close()",
          "3305:             del self.pub_channel",
          "3306:         if hasattr(self, \"periodic_callbacks\"):",
          "3307:             for cb in self.periodic_callbacks.values():",
          "3308:                 cb.stop()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3319:         if hasattr(self, \"req_channel\") and self.req_channel:",
          "3320:             self.req_channel.close()",
          "3321:             self.req_channel = None",
          "",
          "---------------"
        ],
        "tests/pytests/integration/minion/test_return_retries.py||tests/pytests/integration/minion/test_return_retries.py": [
          "File: tests/pytests/integration/minion/test_return_retries.py -> tests/pytests/integration/minion/test_return_retries.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: @pytest.mark.slow_test",
          "29: def test_publish_retry(salt_master, salt_minion_retry, salt_cli, salt_run_cli):",
          "30:     # run job that takes some time for warmup",
          "32:     # obtain JID",
          "33:     jid = rtn.stdout.strip().split(\" \")[-1]",
          "",
          "[Removed Lines]",
          "31:     rtn = salt_cli.run(\"test.sleep\", \"5\", \"--async\", minion_tgt=salt_minion_retry.id)",
          "",
          "[Added Lines]",
          "31:     rtn = salt_cli.run(\"test.sleep\", \"3.5\", \"--async\", minion_tgt=salt_minion_retry.id)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: @pytest.mark.slow_test",
          "56: def test_pillar_timeout(salt_master_factory):",
          "57:     cmd = \"\"\"",
          "59:     \"\"\".strip()",
          "60:     master_overrides = {",
          "61:         \"ext_pillar\": [",
          "",
          "[Removed Lines]",
          "58:     python -c \"import time; time.sleep(5); print('{\\\\\"foo\\\\\": \\\\\"bar\\\\\"}');\\\"",
          "",
          "[Added Lines]",
          "58:     python -c \"import time; time.sleep(4); print('{\\\\\"foo\\\\\": \\\\\"bar\\\\\"}');\\\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70589fe8c62909e17a68de1cc1d35290662cf41b",
      "candidate_info": {
        "commit_hash": "70589fe8c62909e17a68de1cc1d35290662cf41b",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/70589fe8c62909e17a68de1cc1d35290662cf41b",
        "files": [
          ".github/workflows/build-deps-ci-action.yml",
          ".github/workflows/build-deps-onedir.yml",
          ".github/workflows/build-packages.yml",
          ".github/workflows/build-salt-onedir.yml",
          ".github/workflows/ci.yml",
          ".github/workflows/nightly.yml",
          ".github/workflows/release.yml",
          ".github/workflows/scheduled.yml",
          ".github/workflows/staging.yml",
          ".github/workflows/templates/build-deps-ci-action.yml.jinja",
          ".github/workflows/templates/build-onedir-repo.yml.jinja",
          ".github/workflows/templates/release.yml.jinja",
          ".github/workflows/templates/test-package-downloads-action.yml.jinja",
          ".github/workflows/templates/test-salt-pkg.yml.jinja",
          ".github/workflows/templates/test-salt.yml.jinja",
          ".github/workflows/test-package-downloads-action.yml",
          "tools/pkg/build.py"
        ],
        "message": "Prefer using `macos` instead of `darwin`\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          ".github/workflows/templates/build-deps-ci-action.yml.jinja||.github/workflows/templates/build-deps-ci-action.yml.jinja",
          ".github/workflows/templates/build-onedir-repo.yml.jinja||.github/workflows/templates/build-onedir-repo.yml.jinja",
          ".github/workflows/templates/release.yml.jinja||.github/workflows/templates/release.yml.jinja",
          ".github/workflows/templates/test-package-downloads-action.yml.jinja||.github/workflows/templates/test-package-downloads-action.yml.jinja",
          ".github/workflows/templates/test-salt-pkg.yml.jinja||.github/workflows/templates/test-salt-pkg.yml.jinja",
          ".github/workflows/templates/test-salt.yml.jinja||.github/workflows/templates/test-salt.yml.jinja",
          "tools/pkg/build.py||tools/pkg/build.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        ".github/workflows/templates/build-deps-ci-action.yml.jinja||.github/workflows/templates/build-deps-ci-action.yml.jinja": [
          "File: .github/workflows/templates/build-deps-ci-action.yml.jinja -> .github/workflows/templates/build-deps-ci-action.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "191:         uses: actions/download-artifact@v3",
          "192:         with:",
          "194:           path: artifacts/",
          "196:       - name: Decompress Onedir Tarball",
          "",
          "[Removed Lines]",
          "193:           name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-darwin-${{ matrix.arch }}.tar.xz",
          "",
          "[Added Lines]",
          "193:           name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-macos-${{ matrix.arch }}.tar.xz",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:         run: |",
          "200:           python3 -c \"import os; os.makedirs('artifacts', exist_ok=True)\"",
          "201:           cd artifacts",
          "204:       - name: Set up Python ${{ inputs.python-version }}",
          "205:         if: steps.nox-dependencies-cache.outputs.cache-hit != 'true'",
          "",
          "[Removed Lines]",
          "202:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-darwin-${{ matrix.arch }}.tar.xz",
          "",
          "[Added Lines]",
          "202:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-macos-${{ matrix.arch }}.tar.xz",
          "",
          "---------------"
        ],
        ".github/workflows/templates/build-onedir-repo.yml.jinja||.github/workflows/templates/build-onedir-repo.yml.jinja": [
          "File: .github/workflows/templates/build-onedir-repo.yml.jinja -> .github/workflows/templates/build-onedir-repo.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:       - name: Download macOS x86_64 Onedir Archive",
          "35:         uses: actions/download-artifact@v3",
          "36:         with:",
          "38:           path: artifacts/pkgs/incoming",
          "40:       - name: Download macOS arm64 Onedir Archive",
          "41:         uses: actions/download-artifact@v3",
          "42:         with:",
          "44:           path: artifacts/pkgs/incoming",
          "46:       - name: Download Windows amd64 Onedir Archive",
          "",
          "[Removed Lines]",
          "37:           name: salt-${{ needs.prepare-workflow.outputs.salt-version }}-onedir-darwin-x86_64.tar.xz",
          "43:           name: salt-${{ needs.prepare-workflow.outputs.salt-version }}-onedir-darwin-arm64.tar.xz",
          "",
          "[Added Lines]",
          "37:           name: salt-${{ needs.prepare-workflow.outputs.salt-version }}-onedir-macos-x86_64.tar.xz",
          "43:           name: salt-${{ needs.prepare-workflow.outputs.salt-version }}-onedir-macos-arm64.tar.xz",
          "",
          "---------------"
        ],
        ".github/workflows/templates/release.yml.jinja||.github/workflows/templates/release.yml.jinja": [
          "File: .github/workflows/templates/release.yml.jinja -> .github/workflows/templates/release.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:             arch: amd64",
          "172:           - platform: windows",
          "173:             arch: x86",
          "175:             arch: x86_64",
          "177:             arch: arm64",
          "178:     steps:",
          "179:       - uses: actions/checkout@v4",
          "",
          "[Removed Lines]",
          "174:           - platform: darwin",
          "176:           - platform: darwin",
          "",
          "[Added Lines]",
          "174:           - platform: macos",
          "176:           - platform: macos",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-package-downloads-action.yml.jinja||.github/workflows/templates/test-package-downloads-action.yml.jinja": [
          "File: .github/workflows/templates/test-package-downloads-action.yml.jinja -> .github/workflows/templates/test-package-downloads-action.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "318:       - name: Download Onedir Tarball as an Artifact",
          "319:         uses: actions/download-artifact@v3",
          "320:         with:",
          "322:           path: artifacts/",
          "324:       - name: Install System Dependencies",
          "",
          "[Removed Lines]",
          "321:           name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-darwin-${{ matrix.arch }}.tar.xz",
          "",
          "[Added Lines]",
          "321:           name: ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-macos-${{ matrix.arch }}.tar.xz",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:         run: |",
          "331:           python3 -c \"import os; os.makedirs('artifacts', exist_ok=True)\"",
          "332:           cd artifacts",
          "335:       - name: Set up Python ${{ inputs.python-version }}",
          "336:         uses: actions/setup-python@v4",
          "",
          "[Removed Lines]",
          "333:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-darwin-${{ matrix.arch }}.tar.xz",
          "",
          "[Added Lines]",
          "333:           tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-macos-${{ matrix.arch }}.tar.xz",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-salt-pkg.yml.jinja||.github/workflows/templates/test-salt-pkg.yml.jinja": [
          "File: .github/workflows/templates/test-salt-pkg.yml.jinja -> .github/workflows/templates/test-salt-pkg.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     with:",
          "47:       distro-slug: <{ slug }>",
          "48:       nox-session: ci-test-onedir",
          "50:       arch: <{ arch }>",
          "51:       salt-version: \"${{ needs.prepare-workflow.outputs.salt-version }}\"",
          "52:       pkg-type: macos",
          "",
          "[Removed Lines]",
          "49:       platform: darwin",
          "",
          "[Added Lines]",
          "49:       platform: macos",
          "",
          "---------------"
        ],
        ".github/workflows/templates/test-salt.yml.jinja||.github/workflows/templates/test-salt.yml.jinja": [
          "File: .github/workflows/templates/test-salt.yml.jinja -> .github/workflows/templates/test-salt.yml.jinja",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     with:",
          "46:       distro-slug: <{ slug }>",
          "47:       nox-session: ci-test-onedir",
          "49:       arch: <{ arch }>",
          "50:       nox-version: <{ nox_version  }>",
          "51:       gh-actions-python-version: \"<{ gh_actions_workflows_python_version }>\"",
          "",
          "[Removed Lines]",
          "48:       platform: darwin",
          "",
          "[Added Lines]",
          "48:       platform: macos",
          "",
          "---------------"
        ],
        "tools/pkg/build.py||tools/pkg/build.py": [
          "File: tools/pkg/build.py -> tools/pkg/build.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "562:         / \"static\"",
          "563:         / \"pkg\"",
          "564:         / f\"py{requirements_version}\"",
          "566:     )",
          "567:     _check_pkg_build_files_exist(ctx, requirements_file=requirements_file)",
          "",
          "[Removed Lines]",
          "565:         / f\"{platform}.txt\"",
          "",
          "[Added Lines]",
          "565:         / f\"{platform if platform != 'macos' else 'darwin'}.txt\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58dfffa162b99e23291e57a8382e9dc755348c9c",
      "candidate_info": {
        "commit_hash": "58dfffa162b99e23291e57a8382e9dc755348c9c",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/58dfffa162b99e23291e57a8382e9dc755348c9c",
        "files": [
          "noxfile.py"
        ],
        "message": "Run salt's daemons as system services for the package tests\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "noxfile.py||noxfile.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "noxfile.py||noxfile.py": [
          "File: noxfile.py -> noxfile.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1894:     if chunk in (\"upgrade-classic\", \"downgrade-classic\"):",
          "1895:         cmd_args.append(\"--classic\")",
          "1897:     pytest_args = (",
          "1898:         cmd_args[:]",
          "1899:         + [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1897:     cmd_args.append(\"--pkg-system-service\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b170454e92cf1f4df40897258271c87d1ef37bb",
      "candidate_info": {
        "commit_hash": "4b170454e92cf1f4df40897258271c87d1ef37bb",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/4b170454e92cf1f4df40897258271c87d1ef37bb",
        "files": [
          "tools/release.py"
        ],
        "message": "Force arm64 not aarch64",
        "before_after_code_files": [
          "tools/release.py||tools/release.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/release.py||tools/release.py": [
          "File: tools/release.py -> tools/release.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:         arch = \"arm64\"",
          "138:     arch = arch.lower()",
          "139:     platform = platform.lower()",
          "141:         ctx.error(",
          "143:         )",
          "144:         ctx.exit(1)",
          "145:     if platform == \"windows\" and arch not in (\"x86\", \"amd64\"):",
          "",
          "[Removed Lines]",
          "140:     if platform in (\"linux\", \"macos\") and arch not in (\"x86_64\", \"aarch64\"):",
          "142:             f\"The 'arch' value for {platform} must be one of: 'x86_64', 'aarch64', 'arm64'\"",
          "",
          "[Added Lines]",
          "140:     if platform in (\"linux\", \"macos\") and arch not in (\"x86_64\", \"arm64\"):",
          "142:             f\"The 'arch' value for {platform} must be one of: 'x86_64', 'aarch64', 'aarch64'\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ec9295d7dfc406ddb76b51bebcd2b403f62d787",
      "candidate_info": {
        "commit_hash": "4ec9295d7dfc406ddb76b51bebcd2b403f62d787",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/4ec9295d7dfc406ddb76b51bebcd2b403f62d787",
        "files": [
          "salt/modules/aptpkg.py",
          "tests/pytests/unit/modules/test_aptpkg.py"
        ],
        "message": "Remove deprecation warning which turned into an error on Jan 2024\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "salt/modules/aptpkg.py||salt/modules/aptpkg.py",
          "tests/pytests/unit/modules/test_aptpkg.py||tests/pytests/unit/modules/test_aptpkg.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65969"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "salt/modules/aptpkg.py||salt/modules/aptpkg.py": [
          "File: salt/modules/aptpkg.py -> salt/modules/aptpkg.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     SaltInvocationError,",
          "48: )",
          "49: from salt.modules.cmdmod import _parse_env",
          "52: log = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "50: from salt.utils.versions import warn_until_date",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3113:     return sanitized",
          "3149: def _parse_selections(dpkgselection):",
          "3150:     \"\"\"",
          "3151:     Parses the format from ``dpkg --get-selections`` and return a format that",
          "",
          "[Removed Lines]",
          "3116: def expand_repo_def(**kwargs):",
          "3117:     \"\"\"",
          "3118:     Take a repository definition and expand it to the full pkg repository dict",
          "3119:     that can be used for comparison.  This is a helper function to make",
          "3120:     the Debian/Ubuntu apt sources sane for comparison in the pkgrepo states.",
          "3122:     This is designed to be called from pkgrepo states and will have little use",
          "3123:     being called on the CLI.",
          "3125:     CLI Examples:",
          "3127:     .. code-block:: bash",
          "3129:         NOT USABLE IN THE CLI",
          "3130:     \"\"\"",
          "3131:     warn_until_date(",
          "3132:         \"20240101\",",
          "3133:         \"The pkg.expand_repo_def function is deprecated and set for removal \"",
          "3134:         \"after {date}. This is only unsed internally by the apt pkg state \"",
          "3135:         \"module. If that's not the case, please file an new issue requesting \"",
          "3136:         \"the removal of this deprecation warning\",",
          "3137:         stacklevel=3,",
          "3138:     )",
          "3139:     if \"os_name\" not in kwargs:",
          "3140:         kwargs[\"os_name\"] = __grains__[\"os\"]",
          "3141:     if \"os_codename\" not in kwargs:",
          "3142:         if \"lsb_distrib_codename\" in kwargs:",
          "3143:             kwargs[\"os_codename\"] = kwargs[\"lsb_distrib_codename\"]",
          "3144:         else:",
          "3145:             kwargs[\"os_codename\"] = __grains__.get(\"oscodename\")",
          "3146:     return _expand_repo_def(**kwargs)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/unit/modules/test_aptpkg.py||tests/pytests/unit/modules/test_aptpkg.py": [
          "File: tests/pytests/unit/modules/test_aptpkg.py -> tests/pytests/unit/modules/test_aptpkg.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1270:     # Valid source",
          "1271:     repo = \"# deb cdrom:[Debian GNU/Linux 11.4.0 _Bullseye_ - Official amd64 NETINST 20220709-10:31]/ bullseye main\\n\"",
          "1275:     assert isinstance(sanitized, dict)",
          "1276:     assert \"uri\" in sanitized",
          "",
          "[Removed Lines]",
          "1272:     sanitized = aptpkg.expand_repo_def(os_name=\"debian\", repo=repo, file=source_file)",
          "1273:     log.warning(\"SAN: %s\", sanitized)",
          "",
          "[Added Lines]",
          "1272:     sanitized = aptpkg._expand_repo_def(os_name=\"debian\", repo=repo, file=source_file)",
          "1273:     log.debug(\"SAN: %s\", sanitized)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1281:     # Pass the architecture and make sure it is added the the line attribute",
          "1282:     repo = \"deb http://cdn-aws.deb.debian.org/debian/ stretch main\\n\"",
          "1284:         os_name=\"debian\", repo=repo, file=source_file, architectures=\"amd64\"",
          "1285:     )",
          "",
          "[Removed Lines]",
          "1283:     sanitized = aptpkg.expand_repo_def(",
          "",
          "[Added Lines]",
          "1283:     sanitized = aptpkg._expand_repo_def(",
          "",
          "---------------"
        ]
      }
    }
  ]
}