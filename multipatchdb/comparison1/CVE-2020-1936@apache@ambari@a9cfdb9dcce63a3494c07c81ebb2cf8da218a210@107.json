{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "48c616ae1d9de05124167a2f413ec8e8e520f6bc",
      "candidate_info": {
        "commit_hash": "48c616ae1d9de05124167a2f413ec8e8e520f6bc",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/48c616ae1d9de05124167a2f413ec8e8e520f6bc",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.spec.ts"
        ],
        "message": "[AMBARI-24610] [Log Search UI] Show user friendly component name in query input (#2278)\n\n(cherry picked from commit 7f4d05bf5ee89dd771637dbca5164ace95383ac7)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.spec.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.spec.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.html": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.html -> ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: <ng-container *ngFor=\"let parameter of parameters\">",
          "22: <label class=\"parameter-label\" [class.exclude]=\"parameter.isExclude\" [class.include]=\"!parameter.isExclude\">",
          "23:   {{parameter.label | translate}}:",
          "25:   <span class=\"fa toggle-parameter action-icon\" [ngClass]=\"{'fa-search-minus': parameter.isExclude, 'fa-search-plus': !parameter.isExclude}\"",
          "26:         (click)=\"toggleParameter($event, parameter.id)\" tooltip=\"{{('filter.toggleTo.' + (parameter.isExclude ? 'include' : 'exclude')) | translate}}\"></span>",
          "27:   <span class=\"fa fa-times remove-parameter action-icon\" (click)=\"removeParameter($event, parameter.id)\"></span>",
          "",
          "[Removed Lines]",
          "24:   <span class=\"parameter-value\">{{parameter.value}}</span>",
          "",
          "[Added Lines]",
          "24:   <span class=\"parameter-value\">{{(parameter.name === 'type' ? (parameter.value | componentLabel | async) : parameter.value)}}</span>",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.spec.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.spec.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.spec.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/search-box/search-box.component.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import {NO_ERRORS_SCHEMA} from '@angular/core';",
          "20: import {async, ComponentFixture, TestBed} from '@angular/core/testing';",
          "21: import {TranslationModules} from '@app/test-config.spec';",
          "22: import {UtilsService} from '@app/services/utils.service';",
          "24: import {SearchBoxComponent} from './search-box.component';",
          "26: describe('SearchBoxComponent', () => {",
          "27:   let component: SearchBoxComponent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import {StoreModule} from '@ngrx/store';",
          "27: import {ComponentsService, components} from '@app/services/storage/components.service';",
          "28: import {ComponentLabelPipe} from '@app/pipes/component-label';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   beforeEach(async(() => {",
          "31:     TestBed.configureTestingModule({",
          "34:       providers: [",
          "35:         UtilsService",
          "36:       ],",
          "37:       schemas: [NO_ERRORS_SCHEMA]",
          "",
          "[Removed Lines]",
          "32:       declarations: [SearchBoxComponent],",
          "33:       imports: TranslationModules,",
          "",
          "[Added Lines]",
          "36:       declarations: [",
          "37:         ComponentLabelPipe,",
          "38:         SearchBoxComponent",
          "39:       ],",
          "40:       imports: [",
          "41:         ...TranslationModules,",
          "42:         StoreModule.provideStore({",
          "43:           components",
          "44:         })",
          "45:       ],",
          "47:         ComponentsService,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1ddba68dc6df57354682cd83ed869771aa0342d",
      "candidate_info": {
        "commit_hash": "b1ddba68dc6df57354682cd83ed869771aa0342d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b1ddba68dc6df57354682cd83ed869771aa0342d",
        "files": [
          "contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py"
        ],
        "message": "AMBARI-25403 Ambari Management Pack: Ambari throws 500 error while downloading OneFS client configuration (santal)",
        "before_after_code_files": [
          "contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py||contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py||contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py": [
          "File: contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py -> contrib/management-packs/isilon-onefs-mpack/src/main/resources/addon-services/ONEFS/1.0.0/package/scripts/params_linux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: from resource_management.libraries.functions.get_not_managed_resources import get_not_managed_resources",
          "25: from resource_management.libraries.resources.hdfs_resource import HdfsResource",
          "26: from resource_management.libraries.functions import stack_select",
          "28: config = Script.get_config()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: from resource_management.libraries.functions.expect import expect",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: hadoop_conf_dir = conf_select.get_hadoop_conf_dir()",
          "43: hdfs_site = config['configurations']['hdfs-site']",
          "44: default_fs = config['configurations']['core-site']['fs.defaultFS']",
          "46: ambari_libs_dir = \"/var/lib/ambari-agent/lib\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: java_version = expect(\"/ambariLevelParams/java_version\", int)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a801d3cdd5a7ac47d9984d39a1328772764a4a9",
      "candidate_info": {
        "commit_hash": "7a801d3cdd5a7ac47d9984d39a1328772764a4a9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/7a801d3cdd5a7ac47d9984d39a1328772764a4a9",
        "files": [
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/metainfo.xml",
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/files/hbase_replication.rb",
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/hbase_master.py",
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py",
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_windows.py",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/BackgroundCustomCommandExecutionTest.java",
          "ambari-server/src/test/resources/stacks/HDP/2.0.5/services/HBASE/metainfo.xml",
          "ambari-web/app/controllers/main/service/item.js",
          "ambari-web/app/messages.js",
          "ambari-web/app/models/host_component.js",
          "ambari-web/app/styles/alerts.less",
          "ambari-web/app/styles/application.less",
          "ambari-web/app/templates/common/modal_popups/update_replication_popup.hbs",
          "ambari-web/app/utils/ajax/ajax.js",
          "ambari-web/app/views/main/service/item.js"
        ],
        "message": "[AMBARI-25208] : Enable/Disable HBase Cross Cluster Replication (with common-service changes for branch-2.7) (#3013) (virajjasani  via dgrinenko)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/files/hbase_replication.rb||ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/files/hbase_replication.rb",
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/hbase_master.py||ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/hbase_master.py",
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py",
          "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_windows.py||ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_windows.py",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/BackgroundCustomCommandExecutionTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/BackgroundCustomCommandExecutionTest.java",
          "ambari-web/app/controllers/main/service/item.js||ambari-web/app/controllers/main/service/item.js",
          "ambari-web/app/messages.js||ambari-web/app/messages.js",
          "ambari-web/app/models/host_component.js||ambari-web/app/models/host_component.js",
          "ambari-web/app/styles/alerts.less||ambari-web/app/styles/alerts.less",
          "ambari-web/app/styles/application.less||ambari-web/app/styles/application.less",
          "ambari-web/app/templates/common/modal_popups/update_replication_popup.hbs||ambari-web/app/templates/common/modal_popups/update_replication_popup.hbs",
          "ambari-web/app/utils/ajax/ajax.js||ambari-web/app/utils/ajax/ajax.js",
          "ambari-web/app/views/main/service/item.js||ambari-web/app/views/main/service/item.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/files/hbase_replication.rb||ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/files/hbase_replication.rb": [
          "File: ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/files/hbase_replication.rb -> ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/files/hbase_replication.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #     http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing, software",
          "13: # distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: # See the License for the specific language governing permissions and",
          "16: # limitations under the License.",
          "17: #",
          "19: # Add or remove replication peers",
          "21: require 'optparse'",
          "22: include Java",
          "24: java_import org.apache.hadoop.hbase.HBaseConfiguration",
          "25: java_import org.apache.hadoop.hbase.HConstants",
          "26: java_import org.apache.hadoop.hbase.client.replication.ReplicationAdmin",
          "27: java_import org.apache.hadoop.hbase.replication.ReplicationPeerConfig",
          "28: java_import org.apache.commons.logging.Log",
          "29: java_import org.apache.commons.logging.LogFactory",
          "30: java_import org.apache.hadoop.hbase.util.VersionInfo",
          "32: # Name of this script",
          "33: NAME = \"hbase_replication\"",
          "35: # Do command-line parsing",
          "36: options = {}",
          "37: optparse = OptionParser.new do |opts|",
          "38:   opts.banner = \"Usage: ./hbase org.jruby.Main #{NAME}.rb [options] add|remove|update|list <peerId|delimited_peerIds> <cluster_key|delimited_cluster_keys>\"",
          "39:   opts.separator 'Add remote a single Slave cluster for replication.  List Slave Clusters.  Or Update Slave clusters to given hash delimited new slave clusters.'",
          "40:   opts.on('-h', '--help', 'Display usage information') do",
          "41:     puts opts",
          "42:     exit",
          "43:   end",
          "44:   options[:debug] = false",
          "45:   opts.on('-d', '--debug', 'Display extra debug logging') do",
          "46:     options[:debug] = true",
          "47:   end",
          "48: end",
          "49: optparse.parse!",
          "51: def getConfiguration()",
          "52:   hbase_twenty = VersionInfo.getVersion().match('0\\.20\\..*')",
          "53:   # Get configuration to use.",
          "54:   if hbase_twenty",
          "55:     c = HBaseConfiguration.new()",
          "56:   else",
          "57:     c = HBaseConfiguration.create()",
          "58:     end",
          "59:     # Set hadoop filesystem configuration using the hbase.rootdir.",
          "60:     # Otherwise, we'll always use localhost though the hbase.rootdir",
          "61:     # might be pointing at hdfs location. Do old and new key for fs.",
          "62:     c.set(\"fs.default.name\", c.get(HConstants::HBASE_DIR))",
          "63:     c.set(\"fs.defaultFS\", c.get(HConstants::HBASE_DIR))",
          "64:     return c",
          "65: end",
          "67: def removePeer(options, peerId)",
          "68:     unless peerId !~ /\\D/",
          "69:       raise 'peerId should be Integer ID for peer cluster'",
          "70:     end",
          "71:     replAdm = ReplicationAdmin.new(getConfiguration())",
          "72:     replAdm.removePeer(peerId)",
          "73: end",
          "75: #wrapper over addPeer method of ReplicationAdmin",
          "76: #args - tableCfs the table and column-family list which will be replicated for this peer.",
          "77: #A map from tableName to column family names. An empty collection can be passed",
          "78: #to indicate replicating all column families. Pass null(nil in ruby) for replicating all table and column",
          "79: #families",
          "80: # clusterKey:  zkquorum:port:parentzkey",
          "81: # c7007.ambari.apache.org,c7008.ambari.apache.org,c7009.ambari.apache.org:2181:/hbase",
          "82: def addPeer(options, peerId, clusterKey, tableCfs=nil, endpointClass=nil, isTemporary=\"false\")",
          "83:     unless peerId !~ /\\D/",
          "84:       raise 'peerId should be Integer ID for peer cluster'",
          "85:     end",
          "86:     replAdm = ReplicationAdmin.new(getConfiguration())",
          "87:     replPeerConfig = ReplicationPeerConfig.new()",
          "88:     replPeerConfig.setClusterKey(clusterKey)",
          "89:     printf \"Ading Peer Id %s with ClusterKey %s\\n\", peerId, clusterKey",
          "90:     #replPeerConfig.getConfiguration().put(\"IS_TEMPORARY\", cluster.isTemporary)",
          "91:     if endpointClass",
          "92:         replPeerConfig.setReplicationEndpointImpl(endpointClass)",
          "93:         peerId.gsub!(\"-\", \"*\") # odr TenantReplicationEndpoint expects hyphens to be escaped to astericks",
          "94:     end",
          "95:     replPeerConfig.getConfiguration().put(\"IS_TEMPORARY\", isTemporary)",
          "97:     replAdm.addPeer(peerId, replPeerConfig, tableCfs)",
          "98: end",
          "100: # Gets the list of configured replication peers for a cluster.",
          "101: #",
          "102: #This method will return list of peers using ReplicationAdmin interface",
          "103: #  The resulting array will be the rows of existing peers.",
          "104: #   [[\"id1\",\"hosts:port\",\"state\"],",
          "105: #    [\"id2\",\"hosts:port\",\"state\"]]",
          "106: #",
          "107: def getReplicationPeers()",
          "108:   replAdm = ReplicationAdmin.new(getConfiguration())",
          "110:   repPeers = Array.new()",
          "111:   repPeers = replAdm.listPeerConfigs",
          "112:   existingPeerClusters = Array.new",
          "113:   repPeers.entrySet().each do |e|",
          "114:     state = replAdm.getPeerState(e.key)",
          "115:     existingPeerClusters.push([ e.key, e.value.getClusterKey, state ])",
          "116:   end",
          "118:   replAdm.close()",
          "120:   return existingPeerClusters",
          "121: end",
          "124: # list peers",
          "125: def listPeers(options)",
          "126:   '''",
          "127:   peersList = getReplicationPeers",
          "128:   puts \"\\n\\nOutput\\n PEER_ID  CLUSTER_KEY  STATE :\\n\"",
          "129:   peersList.each {|peer| puts \"#{peer[0]}  #{peer[1]}  #{peer[2]}\"",
          "130:   '''",
          "131:   servers = getReplicationPeers",
          "132:   puts \"Replication Peers are: \" + servers.size().to_s",
          "133:   servers.each {|server| puts server}",
          "134: end",
          "136: arguments = ARGV[1..ARGV.size()]",
          "138: # Create a logger and disable the DEBUG-level annoying client logging",
          "139: def configureLogging(options)",
          "140:   apacheLogger = LogFactory.getLog(NAME)",
          "141:   # Configure log4j to not spew so much",
          "142:   unless (options[:debug])",
          "143:     logger = org.apache.log4j.Logger.getLogger(\"org.apache.hadoop.hbase\")",
          "144:     logger.setLevel(org.apache.log4j.Level::WARN)",
          "145:   end",
          "146:   return apacheLogger",
          "147: end",
          "150: def updateReplicationPeers(options, delimitedPeerIds, delimitedClusterKeys, delimiterChar='#')",
          "151:     # Using delimited Given PeerIds and ClusterKeys, get All Slave Clusters Desired and fill in inputSlaveClusters",
          "152:     peerIds = delimitedPeerIds.split(delimiterChar)",
          "153:     clusterKeys = delimitedClusterKeys.split(delimiterChar)",
          "154:     peer_ids_count = peerIds.size()",
          "156:     if peer_ids_count != clusterKeys.size()",
          "157:       raise \"PeerIds \" + peer_ids_count.to_s + \" and ClusterKeys \" + clusterKeys.size().to_s + \" must be equal in number\"",
          "158:     end",
          "160:     inputSlaveClusters = Array.new",
          "161:     i = 0",
          "163:     while i < peer_ids_count  do",
          "164:       inputSlaveClusters.push([ peerIds[i], clusterKeys[i] ])",
          "165:       i +=1",
          "166:     end",
          "168:     toBeAddedClusters = inputSlaveClusters.dup",
          "169:     existingPeerClusters = getReplicationPeers",
          "170:     toBeRemovedClusters = existingPeerClusters.dup",
          "172:     #Validate existing instance file and figure out new clusters to be added",
          "173:     inputSlaveClusters.each do |inputSlaveCluster|",
          "174:         # Handle case for empty slave list",
          "175:         printf \"Required Peer Id %s with ClusterKey %s\\n \", inputSlaveCluster[0], inputSlaveCluster[1]",
          "176:         existingPeerClusters.each do |existingPeerCluster|",
          "177:             # Handle case for empty slave list",
          "178:             printf \"Comparing with existing replication peer %s and Cluster Key %s\\n\", existingPeerCluster[0], existingPeerCluster[1]",
          "179:             if existingPeerCluster[0].eql? inputSlaveCluster[0]  and !existingPeerCluster[1].eql? inputSlaveCluster[1]",
          "180:                   raise \"Conflict in instance file with existing peers, same peer id already exists for different cluster \" + existingPeerCluster[1]",
          "181:             elsif !existingPeerCluster[0].eql? inputSlaveCluster[0]  and existingPeerCluster[1].eql? inputSlaveCluster[1]",
          "182:                   raise \"Conflict in instance file with existing peers, same cluster already exists with different peer id \" + existingPeerCluster[0]",
          "183:             end",
          "184:             if existingPeerCluster[0].eql? inputSlaveCluster[0]",
          "185:                   puts \"Cluster already exists in peers list. So ignoring...\"",
          "186:                   toBeAddedClusters.delete(inputSlaveCluster)",
          "187:                   break",
          "188:             end",
          "189:           end",
          "190:     end",
          "192:     #Compare existing peers with new peers from instance file and fetch peers to be removed",
          "193:     existingPeerClusters.each do |toBeRemovedCluster|",
          "194:         printf \"Existing replication peer %s and Cluster Key %s\\n\", toBeRemovedCluster[0], toBeRemovedCluster[1]",
          "195:         inputSlaveClusters.each do |inputSlaveCluster|",
          "196:             # Handle case for empty slave list",
          "197:             printf \"Comparing with configured replication peer %s and ClusterKey %s\\n\", inputSlaveCluster[0], inputSlaveCluster[1]",
          "198:             if toBeRemovedCluster[0].eql? inputSlaveCluster[0]",
          "199:                   puts \"Same also exists in ml configued so deleting from remove list\"",
          "200:                   toBeRemovedClusters.delete(toBeRemovedCluster)",
          "201:                   break",
          "202:             end",
          "203:         end",
          "204:       end",
          "206:     if toBeAddedClusters.size == 0",
          "207:         puts \"Nothing need to be added...\"",
          "208:     else",
          "209:         toBeAddedClusters.each do |toBeAddedCluster|",
          "210:             printf \"To Be Added Cluster peerId: %s, clusterKey: %s\\n\", toBeAddedCluster[0], toBeAddedCluster[1]",
          "211:             addPeer(options, toBeAddedCluster[0], toBeAddedCluster[1])",
          "212:         end",
          "213:     end",
          "215:     if toBeRemovedClusters.size == 0",
          "216:         puts \"Nothing need to be removed...\"",
          "217:     else",
          "218:         toBeRemovedClusters.each do |toBeRemovedCluster|",
          "219:             printf \"To Be Removed Cluster peerId: %s, clusterKey: %s\\n\", toBeRemovedCluster[0], toBeRemovedCluster[1]",
          "220:             removePeer(options, toBeRemovedCluster[0])",
          "221:         end",
          "222:     end",
          "223: end",
          "226: # Create a logger and save it to ruby global",
          "227: $LOG = configureLogging(options)",
          "228: case ARGV[0]",
          "229:   when 'add'",
          "230:     if ARGV.length < 3",
          "231:       puts optparse",
          "232:       exit 1",
          "233:     end",
          "234:     peerId = ARGV[1]",
          "235:     clusterKey = ARGV[2]",
          "236:     addPeer(options, peerId, clusterKey)",
          "237:   when 'remove'",
          "238:     if ARGV.length < 2",
          "239:       puts optparse",
          "240:       exit 1",
          "241:     end",
          "242:     peerId = ARGV[1]",
          "243:     removePeer(options, peerId)",
          "244:   when 'update'",
          "245:     if ARGV.length < 2",
          "246:       puts optparse",
          "247:       exit 1",
          "248:     end",
          "249:     delimitedPeerIds = ARGV[1]",
          "250:     delimitedClusterKeys = ARGV[2]",
          "251:     updateReplicationPeers(options, delimitedPeerIds, delimitedClusterKeys)",
          "252:   when 'list'",
          "253:     listPeers(options)",
          "254:   else",
          "255:     puts optparse",
          "256:     exit 3",
          "257: end",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/hbase_master.py||ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/hbase_master.py": [
          "File: ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/hbase_master.py -> ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/hbase_master.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: \"\"\"",
          "21: import sys",
          "22: from resource_management.libraries.script.script import Script",
          "23: from resource_management.libraries.functions.format import format",
          "24: from resource_management.libraries.functions.check_process_status import check_process_status",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from resource_management.core.resources.system import Execute, File",
          "24: from resource_management.core.source import StaticFile",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     env.set_params(status_params)",
          "69:     check_windows_service_status(status_params.hbase_master_win_service_name)",
          "73: @OsFamilyImpl(os_family=OsFamilyImpl.DEFAULT)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:   def stop_replication(self, env):",
          "75:     import params",
          "76:     env.set_params(params)",
          "77:     File(params.hbase_replication, content=StaticFile(\"hbase_replication.rb\"), owner=params.hbase_user, mode=\"f\")",
          "78:     remove_replication_values = \"remove {0}\".format(params.hbase_replication_peers)",
          "79:     replication_cmd = format(",
          "80:       \"cmd /c {hbase_executable} org.jruby.Main {hbase_replication} \" + remove_replication_values)",
          "81:     Execute(replication_cmd, user=params.hbase_user, logoutput=True)",
          "83:   def update_replication(self, env):",
          "84:     import params",
          "85:     env.set_params(params)",
          "86:     File(params.hbase_replication, content=StaticFile(\"hbase_replication.rb\"), owner=params.hbase_user, mode=\"f\")",
          "87:     update_replication_values = \"update {0} {1}\".format(params.hbase_replication_peers,",
          "88:                                                         params.hbase_replication_cluster_keys)",
          "89:     update_replication_cmd = format(",
          "90:       \"cmd /c {hbase_executable} org.jruby.Main {hbase_replication} \" + update_replication_values)",
          "91:     Execute(update_replication_cmd, user=params.hbase_user, logoutput=True)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:     check_process_status(status_params.hbase_master_pid_file)",
          "98:   def get_log_folder(self):",
          "99:     import params",
          "100:     return params.log_dir",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:   def stop_replication(self, env, upgrade_type=None):",
          "120:     import params",
          "121:     env.set_params(params)",
          "122:     File(params.hbase_replication, content=StaticFile(\"hbase_replication.rb\"), owner=params.hbase_user, mode=0755)",
          "123:     remove_replication_values = \"remove {0}\".format(params.hbase_replication_peers)",
          "124:     replication_cmd = format(",
          "125:       \"{kinit_cmd} {hbase_cmd} --config {hbase_conf_dir} {master_security_config} org.jruby.Main {hbase_replication} \"",
          "126:       + remove_replication_values)",
          "127:     Execute(replication_cmd, user=params.hbase_user, logoutput=True)",
          "129:   def update_replication(self, env, upgrade_type=None):",
          "130:     import params",
          "131:     env.set_params(params)",
          "132:     File(params.hbase_replication, content=StaticFile(\"hbase_replication.rb\"), owner=params.hbase_user, mode=0755)",
          "133:     update_replication_values = \"update {0} {1}\".format(params.hbase_replication_peers,",
          "134:                                                         params.hbase_replication_cluster_keys)",
          "135:     update_replication_cmd = format(",
          "136:       \"{kinit_cmd} {hbase_cmd} --config {hbase_conf_dir} {master_security_config} org.jruby.Main {hbase_replication} \"",
          "137:       + update_replication_values)",
          "138:     Execute(update_replication_cmd, user=params.hbase_user, logoutput=True)",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py": [
          "File: ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py -> ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_linux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: daemon_script = \"/usr/lib/hbase/bin/hbase-daemon.sh\"",
          "77: region_mover = \"/usr/lib/hbase/bin/region_mover.rb\"",
          "78: region_drainer = \"/usr/lib/hbase/bin/draining_servers.rb\"",
          "79: hbase_cmd = \"/usr/lib/hbase/bin/hbase\"",
          "80: hbase_max_direct_memory_size = None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: hbase_replication = \"/usr/lib/hbase/bin/hbase_replication.rb\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   daemon_script=format(\"{stack_root}/current/{component_directory}/bin/hbase-daemon.sh\")",
          "92:   region_mover = format(\"{stack_root}/current/{component_directory}/bin/region_mover.rb\")",
          "93:   region_drainer = format(\"{stack_root}/current/{component_directory}/bin/draining_servers.rb\")",
          "94:   hbase_cmd = format(\"{stack_root}/current/{component_directory}/bin/hbase\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95:   hbase_replication = format(\"{stack_root}/current/{component_directory}/bin/hbase_replication.rb\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313: enable_ranger_hbase = default(\"/configurations/ranger-hbase-plugin-properties/ranger-hbase-plugin-enabled\", \"No\")",
          "314: enable_ranger_hbase = True if enable_ranger_hbase.lower() == 'yes' else False",
          "316: # ranger hbase properties",
          "317: if enable_ranger_hbase:",
          "318:   # get ranger policy url",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318: # HBase Cross Cluster Replication",
          "319: hbase_replication_peers=default(\"/commandParams/replication_peers\", \"\")",
          "320: hbase_replication_cluster_keys=default(\"/commandParams/replication_cluster_keys\", \"\")",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_windows.py||ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_windows.py": [
          "File: ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_windows.py -> ambari-server/src/main/resources/common-services/HBASE/0.96.0.2.0/package/scripts/params_windows.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #decomm params",
          "35: region_drainer = os.path.join(hbase_bin_dir,\"draining_servers.rb\")",
          "36: region_mover = os.path.join(hbase_bin_dir,\"region_mover.rb\")",
          "37: hbase_excluded_hosts = config['commandParams']['excluded_hosts']",
          "38: hbase_drain_only = config['commandParams']['mark_draining_only']",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: hbase_replication = os.path.join(hbase_bin_dir, \"hbase_replication.rb\")",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/BackgroundCustomCommandExecutionTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/BackgroundCustomCommandExecutionTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/BackgroundCustomCommandExecutionTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/BackgroundCustomCommandExecutionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:   private Clusters clusters;",
          "79:   private static final String REQUEST_CONTEXT_PROPERTY = \"context\";",
          "81:   @Captor ArgumentCaptor<Request> requestCapture;",
          "82:   @Mock ActionManager am;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   private static final String UPDATE_REPLICATION_PARAMS = \"{\\n\" +",
          "81:           \"              \\\"replication_cluster_keys\\\": c7007.ambari.apache.org,c7008.ambari.apache.org,c7009.ambari.apache.org:2181:/hbase,\\n\" +",
          "82:           \"              \\\"replication_peers\\\": 1\\n\" +",
          "83:           \"            }\";",
          "84:   private static final String STOP_REPLICATION_PARAMS = \"{\\n\" +",
          "85:           \"              \\\"replication_peers\\\": 1\\n\" +",
          "86:           \"            }\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:     createCluster(\"c1\");",
          "181:     addHost(\"c6401\",\"c1\");",
          "182:     addHost(\"c6402\",\"c1\");",
          "183:     clusters.updateHostMappings(clusters.getHost(\"c6401\"));",
          "184:     clusters.updateHostMappings(clusters.getHost(\"c6402\"));",
          "186:     clusters.getCluster(\"c1\");",
          "187:     createService(\"c1\", \"HDFS\", null);",
          "192:   }",
          "193:   private void addHost(String hostname, String clusterName) throws AmbariException {",
          "194:     clusters.addHost(hostname);",
          "",
          "[Removed Lines]",
          "189:     createServiceComponent(\"c1\",\"HDFS\",\"NAMENODE\", State.INIT);",
          "191:     createServiceComponentHost(\"c1\",\"HDFS\",\"NAMENODE\",\"c6401\", null);",
          "",
          "[Added Lines]",
          "190:     addHost(\"c7007\", \"c1\");",
          "193:     clusters.updateHostMappings(clusters.getHost(\"c7007\"));",
          "197:     createService(\"c1\", \"HBASE\", null);",
          "198:     createServiceComponent(\"c1\", \"HDFS\", \"NAMENODE\", State.INIT);",
          "199:     createServiceComponent(\"c1\", \"HBASE\", \"HBASE_MASTER\", State.INIT);",
          "200:     createServiceComponentHost(\"c1\", \"HDFS\", \"NAMENODE\", \"c6401\", null);",
          "201:     createServiceComponentHost(\"c1\", \"HBASE\", \"HBASE_MASTER\", \"c7007\", null);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:     host.setHostAttributes(hostAttributes);",
          "207:   }",
          "209:   private void createCluster(String clusterName) throws AmbariException, AuthorizationException {",
          "210:     ClusterRequest r = new ClusterRequest(null, clusterName, State.INSTALLED.name(),",
          "211:         SecurityType.NONE, STACK_ID.getStackId(), null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:   @SuppressWarnings(\"serial\")",
          "221:   @Test",
          "222:   public void testUpdateHBaseReplicationCustomCommand()",
          "223:           throws AuthorizationException, AmbariException, IllegalAccessException,",
          "224:           NoSuchFieldException {",
          "225:     createClusterFixture();",
          "226:     Map<String, String> requestProperties = new HashMap<String, String>() {",
          "227:       {",
          "228:         put(REQUEST_CONTEXT_PROPERTY, \"Enable Cross Cluster HBase Replication\");",
          "229:         put(\"command\", \"UPDATE_REPLICATION\");",
          "230:         put(\"parameters\", UPDATE_REPLICATION_PARAMS);",
          "231:       }",
          "232:     };",
          "233:     ExecuteActionRequest actionRequest = new ExecuteActionRequest(\"c1\",",
          "234:             \"UPDATE_REPLICATION\", new HashMap<>(), false);",
          "235:     actionRequest.getResourceFilters().add(new RequestResourceFilter(\"HBASE\", \"HBASE_MASTER\",",
          "236:             Collections.singletonList(\"c7007\")));",
          "238:     controller.createAction(actionRequest, requestProperties);",
          "240:     Mockito.verify(am, Mockito.times(1))",
          "241:             .sendActions(requestCapture.capture(), any(ExecuteActionRequest.class));",
          "243:     Request request = requestCapture.getValue();",
          "244:     Assert.assertNotNull(request);",
          "245:     Assert.assertNotNull(request.getStages());",
          "246:     Assert.assertEquals(1, request.getStages().size());",
          "247:     Stage stage = request.getStages().iterator().next();",
          "249:     Assert.assertEquals(1, stage.getHosts().size());",
          "251:     List<ExecutionCommandWrapper> commands = stage.getExecutionCommands(\"c7007\");",
          "252:     Assert.assertEquals(1, commands.size());",
          "253:     ExecutionCommand command = commands.get(0).getExecutionCommand();",
          "254:     Assert.assertEquals(AgentCommandType.EXECUTION_COMMAND, command.getCommandType());",
          "255:     Assert.assertEquals(\"UPDATE_REPLICATION\", command.getCommandParams().get(\"custom_command\"));",
          "256:   }",
          "258:   @SuppressWarnings(\"serial\")",
          "259:   @Test",
          "260:   public void testStopHBaseReplicationCustomCommand()",
          "261:           throws AuthorizationException, AmbariException, IllegalAccessException,",
          "262:           NoSuchFieldException {",
          "263:     createClusterFixture();",
          "264:     Map<String, String> requestProperties = new HashMap<String, String>() {",
          "265:       {",
          "266:         put(REQUEST_CONTEXT_PROPERTY, \"Disable Cross Cluster HBase Replication\");",
          "267:         put(\"command\", \"STOP_REPLICATION\");",
          "268:         put(\"parameters\", STOP_REPLICATION_PARAMS);",
          "269:       }",
          "270:     };",
          "271:     ExecuteActionRequest actionRequest = new ExecuteActionRequest(\"c1\",",
          "272:             \"STOP_REPLICATION\", new HashMap<>(), false);",
          "273:     actionRequest.getResourceFilters().add(new RequestResourceFilter(\"HBASE\", \"HBASE_MASTER\",",
          "274:             Collections.singletonList(\"c7007\")));",
          "276:     controller.createAction(actionRequest, requestProperties);",
          "278:     Mockito.verify(am, Mockito.times(1))",
          "279:             .sendActions(requestCapture.capture(), any(ExecuteActionRequest.class));",
          "281:     Request request = requestCapture.getValue();",
          "282:     Assert.assertNotNull(request);",
          "283:     Assert.assertNotNull(request.getStages());",
          "284:     Assert.assertEquals(1, request.getStages().size());",
          "285:     Stage stage = request.getStages().iterator().next();",
          "287:     Assert.assertEquals(1, stage.getHosts().size());",
          "289:     List<ExecutionCommandWrapper> commands = stage.getExecutionCommands(\"c7007\");",
          "290:     Assert.assertEquals(1, commands.size());",
          "291:     ExecutionCommand command = commands.get(0).getExecutionCommand();",
          "292:     Assert.assertEquals(AgentCommandType.EXECUTION_COMMAND, command.getCommandType());",
          "293:     Assert.assertEquals(\"STOP_REPLICATION\", command.getCommandParams().get(\"custom_command\"));",
          "294:   }",
          "",
          "---------------"
        ],
        "ambari-web/app/controllers/main/service/item.js||ambari-web/app/controllers/main/service/item.js": [
          "File: ambari-web/app/controllers/main/service/item.js -> ambari-web/app/controllers/main/service/item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "942:     });",
          "943:   },",
          "945:   restartAllHostComponents: function (serviceName) {",
          "946:     const serviceDisplayName = this.get('content.displayName'),",
          "947:       bodyMessage = Em.Object.create({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "948:   updateHBaseReplication: function () {",
          "949:     const controller = this;",
          "950:     App.ModalPopup.show({",
          "951:       classNames: ['sixty-percent-width-modal', 'service-params-popup'],",
          "952:       header: Em.I18n.t('services.service.actions.run.updateHBaseReplication.context'),",
          "953:       primary: Em.I18n.t('common.enable'),",
          "954:       secondary: Em.I18n.t('common.cancel'),",
          "955:       peerId: '',",
          "956:       parentzkey: '/hbase',",
          "957:       zkport: '2181',",
          "958:       zkquorum: '',",
          "959:       errorMessage: Em.I18n.t('services.service.actions.run.updateHBaseReplication.promptError'),",
          "960:       isInvalid: function () {",
          "961:         const zkquorum = this.get('zkquorum');",
          "962:         const zkport = this.get('zkport');",
          "963:         const parentzkey = this.get('parentzkey');",
          "964:         const peerId = this.get('peerId');",
          "965:         if (zkquorum && zkport && parentzkey && peerId) {",
          "966:           if (isNaN(zkport) || isNaN(peerId)) {",
          "967:             return true;",
          "968:           }",
          "969:           const zkquorumArray = zkquorum.split(',');",
          "970:           return zkquorumArray.length < 2;",
          "971:         } else {",
          "972:           return true;",
          "973:         }",
          "974:       }.property('zkquorum', 'zkport', 'parentzkey', 'peerId'),",
          "975:       disablePrimary: Em.computed.alias('isInvalid'),",
          "976:       onPrimary: function () {",
          "977:         if (this.get('isInvalid')) {",
          "978:           return;",
          "979:         }",
          "980:         App.ajax.send({",
          "981:           name: 'service.item.updateHBaseReplication',",
          "982:           sender: controller,",
          "983:           data: {",
          "984:             hosts: App.Service.find('HBASE').get('hostComponents').findProperty('componentName', 'HBASE_MASTER').get('hostName'),",
          "985:             replication_peers: this.get('peerId'),",
          "986:             replication_cluster_keys: this.get('zkquorum') + ':' + this.get('zkport') + \":\" + this.get('parentzkey')",
          "987:           },",
          "988:           success: 'updateHBaseReplicationSuccessCallback',",
          "989:           error: 'updateHBaseReplicationErrorCallback',",
          "990:           showLoadingPopup: true",
          "991:         });",
          "992:         this.hide();",
          "993:       },",
          "994:       bodyClass: Ember.View.extend({",
          "995:         templateName: require('templates/common/modal_popups/update_replication_popup'),",
          "996:         zkquorumText: Em.I18n.t('services.service.actions.run.updateHBaseReplication.zkquorumText.prompt'),",
          "997:         zkportText: Em.I18n.t('services.service.actions.run.updateHBaseReplication.zkportText.prompt'),",
          "998:         parentzkeyText: Em.I18n.t('services.service.actions.run.updateHBaseReplication.parentzkeyText.prompt'),",
          "999:         peerIdText: Em.I18n.t('services.service.actions.run.updateHBaseReplication.peerIdText.prompt')",
          "1000:       })",
          "1001:     });",
          "1002:   },",
          "1004:   updateHBaseReplicationSuccessCallback: function (data) {",
          "1005:     if (data.Requests.id) {",
          "1006:       App.router.get('backgroundOperationsController').showPopup();",
          "1007:     }",
          "1008:   },",
          "1010:   updateHBaseReplicationErrorCallback: function (data) {",
          "1011:     var error = Em.I18n.t('services.service.actions.run.updateHBaseReplication.error');",
          "1012:     if (data && data.responseText) {",
          "1013:       try {",
          "1014:         const json = $.parseJSON(data.responseText);",
          "1015:         error += json.message;",
          "1016:       } catch (err) {",
          "1017:         console.log(err);",
          "1018:       }",
          "1019:     }",
          "1020:     App.showAlertPopup(Em.I18n.t('services.service.actions.run.updateHBaseReplication.error'), error);",
          "1021:   },",
          "1027:   stopHBaseReplication: function () {",
          "1028:     const controller = this;",
          "1029:     App.ModalPopup.show({",
          "1030:       classNames: ['forty-percent-width-modal'],",
          "1031:       header: Em.I18n.t('services.service.actions.run.stopHBaseReplication.context'),",
          "1032:       primary: Em.I18n.t('common.disable'),",
          "1033:       secondary: Em.I18n.t('common.cancel'),",
          "1034:       inputValue: '',",
          "1035:       errorMessage: Em.I18n.t('services.service.actions.run.stopHBaseReplication.promptError'),",
          "1036:       isInvalid: function () {",
          "1037:         const inputValue = this.get('inputValue');",
          "1038:         return !inputValue || isNaN(inputValue);",
          "1039:       }.property('inputValue'),",
          "1040:       disablePrimary: Em.computed.alias('isInvalid'),",
          "1041:       onPrimary: function () {",
          "1042:         if (this.get('isInvalid')) {",
          "1043:           return;",
          "1044:         }",
          "1045:         App.ajax.send({",
          "1046:           name: 'service.item.stopHBaseReplication',",
          "1047:           sender: controller,",
          "1048:           data: {",
          "1049:             hosts: App.Service.find('HBASE').get('hostComponents').findProperty('componentName', 'HBASE_MASTER').get('hostName'),",
          "1050:             replication_peers: this.get('inputValue')",
          "1051:           },",
          "1052:           success: 'stopHBaseReplicationSuccessCallback',",
          "1053:           error: 'stopHBaseReplicationErrorCallback',",
          "1054:           showLoadingPopup: true",
          "1055:         });",
          "1056:         this.hide();",
          "1057:       },",
          "1058:       bodyClass: Ember.View.extend({",
          "1059:         templateName: require('templates/common/modal_popups/prompt_popup'),",
          "1060:         text: Em.I18n.t('services.service.actions.run.stopHBaseReplication.prompt'),",
          "1061:       })",
          "1062:     });",
          "1063:   },",
          "1065:   stopHBaseReplicationSuccessCallback: function (data) {",
          "1066:     if (data.Requests.id) {",
          "1067:       App.router.get('backgroundOperationsController').showPopup();",
          "1068:     }",
          "1069:   },",
          "1071:   stopHBaseReplicationErrorCallback: function (data) {",
          "1072:     var error = Em.I18n.t('services.service.actions.run.stopHBaseReplication.error');",
          "1073:     if (data && data.responseText) {",
          "1074:       try {",
          "1075:         const json = $.parseJSON(data.responseText);",
          "1076:         error += json.message;",
          "1077:       } catch (err) {",
          "1078:         console.log(err);",
          "1079:       }",
          "1080:     }",
          "1081:     App.showAlertPopup(Em.I18n.t('services.service.actions.run.stopHBaseReplication.error'), error);",
          "1082:   },",
          "",
          "---------------"
        ],
        "ambari-web/app/messages.js||ambari-web/app/messages.js": [
          "File: ambari-web/app/messages.js -> ambari-web/app/messages.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2097:   'services.service.actions.run.stopLdapKnox.title':'Stop Demo LDAP Knox Gateway',",
          "2098:   'services.service.actions.run.stopLdapKnox.context':'Stop Demo LDAP',",
          "2099:   'services.service.actions.run.startStopLdapKnox.error': 'Error during remote command: ',",
          "2102:   'services.service.actions.run.restartLLAP':'Restart LLAP',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2100:   'services.service.actions.run.updateHBaseReplication.label': 'Start/Update HBase Replication',",
          "2101:   'services.service.actions.run.updateHBaseReplication.context': 'Enable Cross Cluster HBase Replication',",
          "2102:   'services.service.actions.run.updateHBaseReplication.title': 'HBase Replication: Start/Update',",
          "2103:   'services.service.actions.run.updateHBaseReplication.promptError': 'ZKQuorum should be comma(,) separated ZK nodes. Port and Peer ID should be number',",
          "2104:   'services.service.actions.run.updateHBaseReplication.zkquorumText.prompt': 'Peer Cluster ZK Quorum: ',",
          "2105:   'services.service.actions.run.updateHBaseReplication.zkportText.prompt': 'Peer Cluster ZK Port: ',",
          "2106:   'services.service.actions.run.updateHBaseReplication.parentzkeyText.prompt': 'Parent ZKey for HBase: ',",
          "2107:   'services.service.actions.run.updateHBaseReplication.peerIdText.prompt': 'Peer Cluster ID: ',",
          "2108:   'services.service.actions.run.updateHBaseReplication.error':'Error while setting up HBase Cross Cluster Replication ',",
          "2109:   'services.service.actions.run.stopHBaseReplication.label': 'Stop HBase Replication',",
          "2110:   'services.service.actions.run.stopHBaseReplication.context': 'Disable Cross Cluster HBase Replication',",
          "2111:   'services.service.actions.run.stopHBaseReplication.title': 'HBase Replication: Stop',",
          "2112:   'services.service.actions.run.stopHBaseReplication.promptError': 'Peer ID should be number',",
          "2113:   'services.service.actions.run.stopHBaseReplication.error': 'Error while disabling HBase Cross Cluster Replication ',",
          "2114:   'services.service.actions.run.stopHBaseReplication.prompt': 'Peer Cluster ID to remove from Replication Peer list: ',",
          "",
          "---------------"
        ],
        "ambari-web/app/models/host_component.js||ambari-web/app/models/host_component.js": [
          "File: ambari-web/app/models/host_component.js -> ambari-web/app/models/host_component.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:         label: Em.I18n.t('admin.nameNodeFederation.button.enable'),",
          "556:         cssClass: 'icon icon-sitemap',",
          "557:         disabled: !App.get('isHaEnabled')",
          "558:       }",
          "559:     };",
          "560:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558:       },",
          "559:       UPDATE_REPLICATION: {",
          "560:         action: 'updateHBaseReplication',",
          "561:         customCommand: 'UPDATE_REPLICATION',",
          "562:         context: Em.I18n.t('services.service.actions.run.updateHBaseReplication.context'),",
          "563:         label: Em.I18n.t('services.service.actions.run.updateHBaseReplication.label'),",
          "564:         cssClass: 'glyphicon glyphicon-refresh',",
          "565:         disabled: false",
          "566:       },",
          "567:       STOP_REPLICATION: {",
          "568:         action: 'stopHBaseReplication',",
          "569:         customCommand: 'STOP_REPLICATION',",
          "570:         context: Em.I18n.t('services.service.actions.run.stopHBaseReplication.context'),",
          "571:         label: Em.I18n.t('services.service.actions.run.stopHBaseReplication.label'),",
          "572:         cssClass: 'glyphicon glyphicon-refresh',",
          "573:         disabled: false",
          "",
          "---------------"
        ],
        "ambari-web/app/styles/alerts.less||ambari-web/app/styles/alerts.less": [
          "File: ambari-web/app/styles/alerts.less -> ambari-web/app/styles/alerts.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "528:   width: 95%;",
          "529: }",
          "531: .alerts-popup-wrap {",
          "532:   #alert-info {",
          "533:     overflow: auto;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531: .service-params-popup {",
          "532:   .modal {",
          "533:     .modal-dialog {",
          "534:       width: 55%;",
          "535:       .modal-content {",
          "536:         height: 60%;",
          "537:         .modal-body {",
          "538:           padding-left: 0;",
          "539:           padding-right: 0;",
          "540:           height: 75%;",
          "541:           font-size: 14px;",
          "542:           .definition-latest-text, .timeago {",
          "543:             font-size: 12px;",
          "544:           }",
          "545:         }",
          "546:       }",
          "547:     }",
          "548:   }",
          "549: }",
          "",
          "---------------"
        ],
        "ambari-web/app/styles/application.less||ambari-web/app/styles/application.less": [
          "File: ambari-web/app/styles/application.less -> ambari-web/app/styles/application.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "2081:   .prompt-input {",
          "2082:     width: 80px;",
          "2083:   }",
          "2084: }",
          "2086: #views {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2084:   .large-prompt-input {",
          "2085:     width: 70%;",
          "2086:   }",
          "",
          "---------------"
        ],
        "ambari-web/app/templates/common/modal_popups/update_replication_popup.hbs||ambari-web/app/templates/common/modal_popups/update_replication_popup.hbs": [
          "File: ambari-web/app/templates/common/modal_popups/update_replication_popup.hbs -> ambari-web/app/templates/common/modal_popups/update_replication_popup.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "17: }}",
          "18: <div class=\"prompt-popup\">",
          "19:     <form>",
          "20:         <div {{bindAttr class=\":form-group view.parentView.isInvalid:has-error\"}}>",
          "21:             <h4>{{view.title}}</h4>",
          "22:             <p>{{view.description}}</p>",
          "23:             <br/>",
          "24:             <label class=\"control-label\">{{view.zkquorumText}}</label>",
          "25:             <div>",
          "26:                 &nbsp;&nbsp;",
          "27:                 {{view Em.TextField class=\"large-prompt-input form-control\" valueBinding=\"view.parentView.zkquorum\"}}",
          "28:             </div>",
          "29:             <br/>",
          "30:             <label class=\"control-label\">{{view.zkportText}}</label>",
          "31:             <div>",
          "32:                 &nbsp;&nbsp;",
          "33:                 {{view Em.TextField class=\"prompt-input form-control\" valueBinding=\"view.parentView.zkport\"}}",
          "34:             </div>",
          "35:             <br/>",
          "36:             <label class=\"control-label\">{{view.parentzkeyText}}</label>",
          "37:             <div>",
          "38:                 &nbsp;&nbsp;",
          "39:                 {{view Em.TextField class=\"prompt-input form-control\" valueBinding=\"view.parentView.parentzkey\"}}",
          "40:             </div>",
          "41:             <br/>",
          "42:             <label class=\"control-label\">{{view.peerIdText}}</label>",
          "43:             <div>",
          "44:                 &nbsp;&nbsp;",
          "45:                 {{view Em.TextField class=\"prompt-input form-control\" valueBinding=\"view.parentView.peerId\"}}",
          "46:             </div>",
          "47:             <div>",
          "48:                 {{#if view.parentView.isChanged}}",
          "49:                     <a href=\"#\" data-toggle=\"tooltip\" class=\"btn-sm\"",
          "50:                         {{action \"doRestoreDefaultValue\" this target=\"view.parentView\"}}",
          "51:                         {{translateAttr data-original-title=\"common.reset.default\"}}>",
          "52:                         <i class=\"icon-undo\"></i>",
          "53:                     </a>",
          "54:                 {{/if}}",
          "55:             </div>",
          "56:             {{#if view.parentView.isInvalid}}",
          "57:                 <span class=\"help-block validation-block\">{{view.parentView.errorMessage}}</span>",
          "58:             {{/if}}",
          "59:         </div>",
          "60:     </form>",
          "61: </div>",
          "",
          "---------------"
        ],
        "ambari-web/app/utils/ajax/ajax.js||ambari-web/app/utils/ajax/ajax.js": [
          "File: ambari-web/app/utils/ajax/ajax.js -> ambari-web/app/utils/ajax/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "701:     }",
          "702:   },",
          "704:   'service.item.executeCustomCommand': {",
          "705:     'real': '/clusters/{clusterName}/requests',",
          "706:     'mock': '',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:   'service.item.updateHBaseReplication': {",
          "705:     'real': '/clusters/{clusterName}/requests',",
          "706:     'mock': '',",
          "707:     'format': function (data) {",
          "708:       return {",
          "709:         type: 'POST',",
          "710:         data: JSON.stringify({",
          "711:           RequestInfo: {",
          "712:             'context': Em.I18n.t('services.service.actions.run.updateHBaseReplication.context'),",
          "713:             'command': 'UPDATE_REPLICATION',",
          "714:             \"parameters\": {",
          "715:               \"replication_cluster_keys\": data.replication_cluster_keys,",
          "716:               \"replication_peers\": data.replication_peers",
          "717:             }",
          "718:           },",
          "719:           \"Requests/resource_filters\": [{",
          "720:             'service_name': 'HBASE',",
          "721:             'component_name': 'HBASE_MASTER',",
          "722:             'hosts': data.hosts",
          "723:           }]",
          "724:         })",
          "725:       }",
          "726:     }",
          "727:   },",
          "729:   'service.item.stopHBaseReplication': {",
          "730:     'real': '/clusters/{clusterName}/requests',",
          "731:     'mock': '',",
          "732:     'format': function (data) {",
          "733:       return {",
          "734:         type: 'POST',",
          "735:         data: JSON.stringify({",
          "736:           RequestInfo: {",
          "737:             'context': Em.I18n.t('services.service.actions.run.stopHBaseReplication.context'),",
          "738:             'command': 'STOP_REPLICATION',",
          "739:             \"parameters\": {",
          "740:               \"replication_peers\": data.replication_peers",
          "741:             }",
          "742:           },",
          "743:           \"Requests/resource_filters\": [{",
          "744:             'service_name': 'HBASE',",
          "745:             'component_name': 'HBASE_MASTER',",
          "746:             'hosts': data.hosts",
          "747:           }]",
          "748:         })",
          "749:       }",
          "750:     }",
          "751:   },",
          "",
          "---------------"
        ],
        "ambari-web/app/views/main/service/item.js||ambari-web/app/views/main/service/item.js": [
          "File: ambari-web/app/views/main/service/item.js -> ambari-web/app/views/main/service/item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   mastersExcludedCommands: {",
          "36:     'NAMENODE': ['DECOMMISSION', 'REBALANCEHDFS'],",
          "37:     'RESOURCEMANAGER': ['DECOMMISSION', 'REFRESHQUEUES'],",
          "39:     'KNOX_GATEWAY': ['STARTDEMOLDAP','STOPDEMOLDAP'],",
          "40:     'HAWQMASTER': ['IMMEDIATE_STOP_HAWQ_SERVICE', 'RUN_HAWQ_CHECK', 'HAWQ_CLEAR_CACHE', 'REMOVE_HAWQ_STANDBY', 'RESYNC_HAWQ_STANDBY'],",
          "41:     'HAWQSEGMENT': ['IMMEDIATE_STOP_HAWQ_SEGMENT'],",
          "",
          "[Removed Lines]",
          "38:     'HBASE_MASTER': ['DECOMMISSION'],",
          "",
          "[Added Lines]",
          "38:     'HBASE_MASTER': ['DECOMMISSION', 'UPDATE_REPLICATION', 'STOP_REPLICATION'],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "269:           }",
          "270:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:         const hMasterComponent = App.StackServiceComponent.find().findProperty('componentName', 'HBASE_MASTER');",
          "273:         if (serviceName === 'HBASE' && hMasterComponent) {",
          "274:           const hMasterCustomCommands = hMasterComponent.get('customCommands');",
          "275:           if (hMasterCustomCommands && hMasterCustomCommands.contains('UPDATE_REPLICATION')) {",
          "276:             options.push(actionMap.UPDATE_REPLICATION);",
          "277:           }",
          "278:           if (hMasterCustomCommands && hMasterCustomCommands.contains('STOP_REPLICATION')) {",
          "279:             options.push(actionMap.STOP_REPLICATION);",
          "280:           }",
          "281:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37cd6ef4db9532ddb1d3994e4c5de97a617e40ff",
      "candidate_info": {
        "commit_hash": "37cd6ef4db9532ddb1d3994e4c5de97a617e40ff",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/37cd6ef4db9532ddb1d3994e4c5de97a617e40ff",
        "files": [
          "ambari-web/app/templates/common/configs/widgets/service_config_password_field.hbs",
          "ambari-web/app/views/common/controls_view.js"
        ],
        "message": "AMBARI-24242 data-qa attribute present not for all properties",
        "before_after_code_files": [
          "ambari-web/app/templates/common/configs/widgets/service_config_password_field.hbs||ambari-web/app/templates/common/configs/widgets/service_config_password_field.hbs",
          "ambari-web/app/views/common/controls_view.js||ambari-web/app/views/common/controls_view.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/templates/common/configs/widgets/service_config_password_field.hbs||ambari-web/app/templates/common/configs/widgets/service_config_password_field.hbs": [
          "File: ambari-web/app/templates/common/configs/widgets/service_config_password_field.hbs -> ambari-web/app/templates/common/configs/widgets/service_config_password_field.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: <div class=\"row\">",
          "20:   <div class=\"col-md-6\">",
          "22:   </div>",
          "23:   <div class=\"col-md-6\">",
          "25:   </div>",
          "26: </div>",
          "",
          "[Removed Lines]",
          "21:     {{view Em.TextField class=\"form-control\" readOnlyBinding=\"view.readOnly\" valueBinding=\"view.serviceConfig.value\" type=\"password\" placeholderBinding=\"view.placeholder\"}}",
          "24:     {{view Em.TextField class=\"form-control retyped-password\" readOnlyBinding=\"view.readOnly\" valueBinding=\"view.serviceConfig.retypedPassword\" type=\"password\" placeholderBinding=\"view.placeholderRetype\"}}",
          "",
          "[Added Lines]",
          "21:     {{view Em.TextField",
          "22:            data-qaBinding=\"view.data-qa\"",
          "23:            class=\"form-control\"",
          "24:            readOnlyBinding=\"view.readOnly\"",
          "25:            valueBinding=\"view.serviceConfig.value\"",
          "26:            type=\"password\"",
          "27:            placeholderBinding=\"view.placeholder\"}}",
          "30:     {{view Em.TextField",
          "31:            data-qaBinding=\"view.data-qa\"",
          "32:            class=\"form-control retyped-password\"",
          "33:            readOnlyBinding=\"view.readOnly\"",
          "34:            valueBinding=\"view.serviceConfig.retypedPassword\"",
          "35:            type=\"password\"",
          "36:            placeholderBinding=\"view.placeholderRetype\"}}",
          "",
          "---------------"
        ],
        "ambari-web/app/views/common/controls_view.js||ambari-web/app/views/common/controls_view.js": [
          "File: ambari-web/app/views/common/controls_view.js -> ambari-web/app/views/common/controls_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:   serviceConfig: null,",
          "",
          "[Removed Lines]",
          "303: App.ServiceConfigPasswordField = Ember.View.extend(App.ServiceConfigPopoverSupport, {",
          "",
          "[Added Lines]",
          "303: App.ServiceConfigPasswordField = Ember.View.extend(App.ServiceConfigPopoverSupport, App.ServiceConfigCalculateId, {",
          "",
          "---------------"
        ]
      }
    }
  ]
}