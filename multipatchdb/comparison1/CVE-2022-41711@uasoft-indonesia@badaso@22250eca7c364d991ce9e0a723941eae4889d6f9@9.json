{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e47e37bb4866bbcd95ab02f92b9779327619a3fb",
      "candidate_info": {
        "commit_hash": "e47e37bb4866bbcd95ab02f92b9779327619a3fb",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/e47e37bb4866bbcd95ab02f92b9779327619a3fb",
        "files": [
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "update integration testing",
        "before_after_code_files": [
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "12: use Uasoft\\Badaso\\Models\\DataType;",
          "13: use Uasoft\\Badaso\\Models\\Migration;",
          "15: class BadasoApiCrudManagementTest extends TestCase",
          "16: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: use Uasoft\\Badaso\\Models\\Permission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:         $table_names = [];",
          "246:         for ($index = 1; $index <= $max_count_table_generate; $index++) {",
          "247:             $table_name = \"{$this->TABLE_TEST_PREFIX}{$index}\";",
          "249:                 Schema::create($table_name, function (Blueprint $table) use ($index, $table_names) {",
          "250:                     $table->id();",
          "",
          "[Removed Lines]",
          "248:             if (! Schema::hasTable($table_name)) {",
          "",
          "[Added Lines]",
          "249:             if (!Schema::hasTable($table_name)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "438:                 }",
          "439:                 PHP;",
          "440:                 $model_path = app_path(\"Models/$model_file_name\");",
          "442:                     file_put_contents($model_path, $model_body);",
          "443:                 }",
          "",
          "[Removed Lines]",
          "441:                 if (! file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "442:                 if (!file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "459:             $controller_data = [];",
          "460:             if (rand(0, 1)) {",
          "463:                 $controller_file_name = \"{$controller_name}.php\";",
          "464:                 $controller_body = <<<PHP",
          "465:                 <?php",
          "",
          "[Removed Lines]",
          "462:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "[Added Lines]",
          "463:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "468:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "469:                 PHP;",
          "470:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "472:                     file_put_contents($controller_path, $controller_body);",
          "473:                 }",
          "",
          "[Removed Lines]",
          "471:                 if (! file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "472:                 if (!file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "519:         CallHelperTest::setCache($this->KEY_DATA_RESPONSE_ADD_CRUD_MANAGEMENT, $data_response_add_crud_management);",
          "520:     }",
          "522:     public function testReadCrudManagement()",
          "523:     {",
          "524:         $data_table_crud_management_logs = CallHelperTest::getCache($this->KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:     public function testAddIsPublicCrudManagement()",
          "524:     {",
          "526:         $table_names = 'table_public';",
          "527:         Schema::dropIfExists($table_names);",
          "528:         if (!Schema::hasTable($table_names)) {",
          "529:             Schema::create($table_names, function (Blueprint $table) use ($table_names) {",
          "530:                 $table->id();",
          "531:                 $table->text('name')->nullable();",
          "532:                 $table->bigInteger('user_id')->nullable()->unsigned();",
          "533:                 $table->foreign('user_id')->references('id')->on(config('badaso.database.prefix') . 'users')->onDelete('cascade');",
          "534:                 $table->softDeletes();",
          "535:                 $table->timestamps();",
          "536:             });",
          "537:         }",
          "539:         $table_name = $table_names;",
          "542:         $rows = [",
          "543:             [",
          "544:                 'field' => 'id',",
          "545:                 'type' => 'integer',",
          "546:                 'displayName' => 'Id',",
          "547:                 'required' => rand(0, 1),",
          "548:                 'browse' => rand(0, 1),",
          "549:                 'read' => rand(0, 1),",
          "550:                 'edit' => 0,",
          "551:                 'add' => 0,",
          "552:                 'delete' => rand(0, 1),",
          "553:                 'details' => json_encode((object) []),",
          "554:                 'order' => 1,",
          "555:                 'setRelation' => false,",
          "556:             ],",
          "557:             [",
          "558:                 'field' => 'name',",
          "559:                 'type' => 'text',",
          "560:                 'displayName' => 'Name',",
          "561:                 'required' => rand(0, 1),",
          "562:                 'browse' => rand(0, 1),",
          "563:                 'read' => rand(0, 1),",
          "564:                 'edit' => 0,",
          "565:                 'add' => 0,",
          "566:                 'delete' => rand(0, 1),",
          "567:                 'details' => json_encode((object) []),",
          "568:                 'order' => 1,",
          "569:                 'setRelation' => false,",
          "570:             ],",
          "571:             [",
          "572:                 'field' => 'user_id',",
          "573:                 'type' => 'data_identifier',",
          "574:                 'displayName' => 'User Id',",
          "575:                 'required' => rand(0, 1),",
          "576:                 'browse' => rand(0, 1),",
          "577:                 'read' => rand(0, 1),",
          "578:                 'edit' => 0,",
          "579:                 'add' => 0,",
          "580:                 'delete' => rand(0, 1),",
          "581:                 'details' => json_encode((object) []),",
          "582:                 'order' => 1,",
          "583:                 'setRelation' => false,",
          "584:             ],",
          "585:             [",
          "586:                 'field' => 'created_at',",
          "587:                 'type' => 'datetime',",
          "588:                 'displayName' => 'Created At',",
          "589:                 'required' => rand(0, 1),",
          "590:                 'browse' => rand(0, 1),",
          "591:                 'read' => rand(0, 1),",
          "592:                 'edit' => 0,",
          "593:                 'add' => 0,",
          "594:                 'delete' => rand(0, 1),",
          "595:                 'details' => json_encode((object) []),",
          "596:                 'order' => 1,",
          "597:                 'setRelation' => false,",
          "598:             ],",
          "599:             [",
          "600:                 'field' => 'updated_at',",
          "601:                 'type' => 'datetime',",
          "602:                 'displayName' => 'Update At',",
          "603:                 'required' => rand(0, 1),",
          "604:                 'browse' => rand(0, 1),",
          "605:                 'read' => rand(0, 1),",
          "606:                 'edit' => 0,",
          "607:                 'add' => 0,",
          "608:                 'delete' => rand(0, 1),",
          "609:                 'details' => json_encode((object) []),",
          "610:                 'order' => 1,",
          "611:                 'setRelation' => false,",
          "612:             ],",
          "613:             [",
          "614:                 'field' => 'deleted_at',",
          "615:                 'type' => 'datetime',",
          "616:                 'displayName' => 'Deleted At',",
          "617:                 'required' => rand(0, 1),",
          "618:                 'browse' => rand(0, 1),",
          "619:                 'read' => rand(0, 1),",
          "620:                 'edit' => 0,",
          "621:                 'add' => 0,",
          "622:                 'delete' => rand(0, 1),",
          "623:                 'details' => json_encode((object) []),",
          "624:                 'order' => 1,",
          "625:                 'setRelation' => false,",
          "626:             ],",
          "627:         ];",
          "628:         $table_label = ucwords(str_replace(['_'], ' ', $table_name));",
          "629:         $request_body = [",
          "630:             'name' =>  $table_name,",
          "631:             'slug' =>  $table_name,",
          "632:             'displayNameSingular' =>  $table_label,",
          "633:             'displayNamePlural' =>  $table_label,",
          "634:             'icon' =>  'add',",
          "635:             'modelName' =>  '',",
          "636:             'policyName' =>  '',",
          "637:             'description' => 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',",
          "638:             'generatePermissions' =>  1,",
          "639:             'createSoftDelete' =>  rand(0, 1),",
          "640:             'serverSide' =>  rand(0, 1),",
          "641:             'details' =>  json_encode((object) []),",
          "642:             'controller' =>  '',",
          "643:             'orderColumn' =>  '',",
          "644:             'orderDisplayColumn' =>  '',",
          "645:             'orderDirection' =>  '',",
          "646:             'notification' =>   array_slice(['onCreate', 'onDelete', 'onUpdate', 'onRead'], 0, rand(0, 3)),",
          "647:             'isMaintenance' => rand(0, 1),",
          "648:             'rows' => $rows,",
          "649:         ];",
          "650:         $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/crud/add'), $request_body);",
          "651:         $response->assertSuccessful();",
          "654:         $permissions = Permission::where('key', 'browse_' . $table_name)->get();",
          "655:         foreach ($permissions as $key => $value) {",
          "656:             $permission_id = $value->id;",
          "657:         }",
          "658:         $request_data = [",
          "659:             'always_allow' =>  false,",
          "660:             'is_public' =>  true,",
          "661:             'key' =>  'browse_' . $table_name,",
          "662:             'id' => $permission_id,",
          "663:         ];",
          "664:         $response_permission = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/permissions/edit'), $request_data);",
          "665:         $response_permission->assertSuccessful();",
          "668:         $response_entity = $this->json('GET', CallHelperTest::getUrlApiV1Prefix('/table/read'), [",
          "669:             'table' => $request_body['slug'],",
          "670:         ]);",
          "671:         $response_entity->assertSuccessful();",
          "674:         $data_types = DataType::whereIn('name', $table_name)->get();",
          "675:         foreach ($data_types as $key => $data_type) {",
          "676:             $table_name = $data_type['name'];",
          "677:             $name = ucwords(str_replace('_', '', $table_name));",
          "679:             $id = $data_type->id;",
          "680:             $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/crud/delete'), [",
          "681:                 'id' => $id,",
          "682:             ]);",
          "683:             $response->assertSuccessful();",
          "684:         }",
          "687:         foreach ($data_types as $key => $data_type) {",
          "688:             $data_type->delete();",
          "689:         }",
          "692:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/permissions/delete'), [",
          "693:             'id' => $permission_id,",
          "694:         ]);",
          "695:         $response->assertSuccessful();",
          "697:         $permission = Permission::find($permission_id);",
          "698:         $this->assertEmpty($permission);",
          "699:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "911:             if ($table['table'] == 'table_relation') {",
          "912:                 for ($i = 0; $i < 2; $i++) {",
          "913:                     $field[$i] = [",
          "916:                         'fieldType' => 'bigint',",
          "917:                         'fieldLength' => null,",
          "918:                         'fieldNull' => false,",
          "",
          "[Removed Lines]",
          "914:                         'id' => $name_table[$i].'_id',",
          "915:                         'fieldName' => $name_table[$i].'_id',",
          "",
          "[Added Lines]",
          "1093:                         'id' => $name_table[$i] . '_id',",
          "1094:                         'fieldName' => $name_table[$i] . '_id',",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "925:                     array_push($table['rows'], $field[$i]);",
          "926:                 }",
          "927:                 $table['relations'] = [",
          "930:                         'target_table' => $name_table[1],",
          "931:                         'target_field' => 'id',",
          "932:                         'on_delete' => 'cascade',",
          "933:                         'on_update' => 'restrict',",
          "934:                     ],",
          "937:                         'target_table' => $name_table[0],",
          "938:                         'target_field' => 'id',",
          "939:                         'on_delete' => 'cascade',",
          "",
          "[Removed Lines]",
          "928:                     $name_table[1].'_id' => [",
          "929:                         'source_field' => $name_table[1].'_id',",
          "935:                     $name_table[0].'_id' => [",
          "936:                         'source_field' => $name_table[0].'_id',",
          "",
          "[Added Lines]",
          "1107:                     $name_table[1] . '_id' => [",
          "1108:                         'source_field' => $name_table[1] . '_id',",
          "1114:                     $name_table[0] . '_id' => [",
          "1115:                         'source_field' => $name_table[0] . '_id',",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "947:         foreach ($name_table as $key => $crud_table) {",
          "948:             $crud_table = [",
          "949:                 'name' => $crud_table,",
          "951:                 'displayNameSingular' => $crud_table,",
          "952:                 'displayNamePlural' => $crud_table,",
          "953:                 'icon' => '',",
          "",
          "[Removed Lines]",
          "950:                 'slug' => 'table-'.$key + 1,",
          "",
          "[Added Lines]",
          "1129:                 'slug' => 'table-' . $key + 1,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1074:         foreach ($name_table as $key => $table) {",
          "1075:             if ($table == 'table-2') {",
          "1076:                 for ($i = 1; $i < 4; $i++) {",
          "1078:                         'data' => [",
          "1080:                         ],",
          "1081:                     ]);",
          "1082:                 }",
          "1083:             } else {",
          "1085:                 $response->assertSuccessful();",
          "1086:             }",
          "1087:         }",
          "1091:         $response->assertSuccessful();",
          "1092:         $data_browse = $response['data']['data'][0];",
          "1096:             'data' => [",
          "1097:                 'id' => $data_browse['id'],",
          "1098:                 'name' => 'lorem ipsum',",
          "",
          "[Removed Lines]",
          "1077:                     $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/add'), [",
          "1079:                             'name' => 'option '.$i,",
          "1084:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/add'), $data_table_primary);",
          "1090:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table));",
          "1095:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/edit'), [",
          "",
          "[Added Lines]",
          "1256:                     $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/add'), [",
          "1258:                             'name' => 'option ' . $i,",
          "1263:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/add'), $data_table_primary);",
          "1269:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table));",
          "1274:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/edit'), [",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1102:         $response->assertSuccessful();",
          "1106:             'slug' => $table,",
          "1107:             'data' => [",
          "1108:                 [",
          "",
          "[Removed Lines]",
          "1105:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/delete'), [",
          "",
          "[Added Lines]",
          "1284:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/delete'), [",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1468:                 }",
          "1469:                 PHP;",
          "1470:                 $model_path = app_path(\"Models/$model_file_name\");",
          "1472:                     file_put_contents($model_path, $model_body);",
          "1473:                 }",
          "",
          "[Removed Lines]",
          "1471:                 if (! file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "1650:                 if (!file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1489:             $controller_data = [];",
          "1490:             if (rand(0, 1)) {",
          "1493:                 $controller_file_name = \"{$controller_name}.php\";",
          "1494:                 $controller_body = <<<PHP",
          "1495:                 <?php",
          "",
          "[Removed Lines]",
          "1492:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "[Added Lines]",
          "1671:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1498:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "1499:                 PHP;",
          "1500:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "1502:                     file_put_contents($controller_path, $controller_body);",
          "1503:                 }",
          "",
          "[Removed Lines]",
          "1501:                 if (! file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "1680:                 if (!file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1518:             $request_body = [",
          "1519:                 'name' =>  $table_name,",
          "1520:                 'slug' =>  $table_name,",
          "1523:                 'icon' =>  'add',",
          "1524:                 'modelName' =>  $model,",
          "1525:                 'policyName' =>  '',",
          "",
          "[Removed Lines]",
          "1521:                 'displayNameSingular' =>  $table_label.'(update)',",
          "1522:                 'displayNamePlural' =>  $table_label.'(update)',",
          "",
          "[Added Lines]",
          "1700:                 'displayNameSingular' =>  $table_label . '(update)',",
          "1701:                 'displayNamePlural' =>  $table_label . '(update)',",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1605:             $controller_name = \"{$name}Controller.php\";",
          "1607:             if (file_exists($controller_path)) {",
          "1608:                 unlink($controller_path);",
          "1609:             }",
          "1612:             $model_name = \"{$name}.php\";",
          "1614:             if (file_exists($model_path)) {",
          "1615:                 unlink($model_path);",
          "1616:             }",
          "",
          "[Removed Lines]",
          "1606:             $controller_path = app_path('Http/Controllers/'.$controller_name);",
          "1613:             $model_path = app_path('Models/'.$model_name);",
          "",
          "[Added Lines]",
          "1785:             $controller_path = app_path('Http/Controllers/' . $controller_name);",
          "1792:             $model_path = app_path('Models/' . $model_name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2be1227f1c9e81b79b0e3f3383c6dcfab97edd5f",
      "candidate_info": {
        "commit_hash": "2be1227f1c9e81b79b0e3f3383c6dcfab97edd5f",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/2be1227f1c9e81b79b0e3f3383c6dcfab97edd5f",
        "files": [
          "src/Controllers/Controller.php"
        ],
        "message": "update unit test and crud management",
        "before_after_code_files": [
          "src/Controllers/Controller.php||src/Controllers/Controller.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/Controller.php||src/Controllers/Controller.php": [
          "File: src/Controllers/Controller.php -> src/Controllers/Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Controllers;",
          "5: use Exception;",
          "6: use Illuminate\\Http\\Request;",
          "7: use Illuminate\\Routing\\Controller as BaseController;",
          "8: use Illuminate\\Support\\Collection;",
          "9: use Illuminate\\Support\\Facades\\DB;",
          "10: use Illuminate\\Support\\Facades\\Hash;",
          "11: use Illuminate\\Support\\Facades\\Validator;",
          "12: use ReflectionClass;",
          "13: use Uasoft\\Badaso\\Facades\\Badaso;",
          "14: use Uasoft\\Badaso\\Helpers\\CaseConvert;",
          "15: use Uasoft\\Badaso\\Helpers\\GetData;",
          "16: use Uasoft\\Badaso\\Traits\\FileHandler;",
          "18: abstract class Controller extends BaseController",
          "19: {",
          "20:     use FileHandler;",
          "22:     public function getSlug(Request $request)",
          "23:     {",
          "24:         $slug = explode('.', $request->route()->getName())[1];",
          "26:         return $slug;",
          "27:     }",
          "29:     public function getDataType($slug)",
          "30:     {",
          "31:         $data_type = Badaso::model('DataType')::where('slug', $slug)->first();",
          "32:         $data_type->data_rows = $data_type->dataRows;",
          "34:         return $data_type;",
          "35:     }",
          "37:     public function isAuthorize($method, $data_type)",
          "38:     {",
          "39:         $prefix = config('badaso.database.prefix');",
          "40:         if ($user = auth()->user()) {",
          "41:             $permissions = DB::SELECT('",
          "42:                 SELECT *",
          "43:                 FROM '.$prefix.'permissions p",
          "44:                 JOIN '.$prefix.'role_permissions rp ON p.id = rp.permission_id",
          "45:                 JOIN '.$prefix.'roles r ON rp.role_id  = r.id",
          "46:                 JOIN '.$prefix.'user_roles ur ON r.id = ur.role_id",
          "47:                 JOIN '.$prefix.'users u ON ur.user_id = u.id",
          "48:                 WHERE u.id = :user_id",
          "49:                 AND p.key = :permission",
          "50:             ', [",
          "51:                 'user_id'    => $user->id,",
          "52:                 'permission' => $method.'_'.$data_type->name,",
          "53:             ]);",
          "55:             if (count($permissions) > 0) {",
          "56:                 return true;",
          "57:             }",
          "58:         }",
          "60:         return true;",
          "61:     }",
          "63:     public function createDataFromRaw($data_raws, $data_type)",
          "64:     {",
          "65:         $data = [];",
          "66:         foreach ($data_raws as $data_raw) {",
          "67:             $data[$data_raw['field']] = $data_raw['value'];",
          "68:         }",
          "70:         return $data;",
          "71:     }",
          "73:     public function validateData($data, $data_type)",
          "74:     {",
          "75:         $data_rows = collect($data_type->dataRows)->where('add', 1)->all();",
          "76:         $rules = [];",
          "77:         foreach ($data_rows as $row) {",
          "78:             if ($row->required == 1) {",
          "79:                 $rules[$row->field][] = 'required';",
          "80:                 if ($row->type == 'relation') {",
          "81:                     $relation_detail = [];",
          "83:                     try {",
          "84:                         $relation_detail = is_string($row->relation) ? json_decode($row->relation) : $row->relation;",
          "85:                         $relation_detail = CaseConvert::snake($relation_detail);",
          "86:                     } catch (\\Exception $e) {",
          "87:                     }",
          "89:                     $relation_type = array_key_exists('relation_type', $relation_detail) ? $relation_detail['relation_type'] : null;",
          "90:                     $destination_table = array_key_exists('destination_table', $relation_detail) ? $relation_detail['destination_table'] : null;",
          "91:                     $destination_table_column = array_key_exists('destination_table_column', $relation_detail) ? $relation_detail['destination_table_column'] : null;",
          "93:                     if ($relation_type == 'belongs_to') {",
          "94:                         $rules[$row->field][] = 'exists:'.$destination_table.','.$destination_table_column;",
          "95:                     }",
          "96:                 }",
          "97:             }",
          "98:         }",
          "100:         return Validator::make($data, $rules)->validate();",
          "101:     }",
          "103:     public function getContentByType($data_type, $data_row, $value)",
          "104:     {",
          "105:         $type = $data_row->type;",
          "106:         $return_value = null;",
          "107:         switch ($type) {",
          "108:             case 'text':",
          "109:                 $return_value = $value;",
          "110:                 break;",
          "111:             case 'password':",
          "112:                 $return_value = Hash::make($value);",
          "113:                 break;",
          "114:             case 'textarea':",
          "115:                 $return_value = $value;",
          "116:                 break;",
          "117:             case 'checkbox':",
          "118:                 $return_value = implode(',', $value);",
          "119:                 break;",
          "120:             case 'search':",
          "121:                 $return_value = $value;",
          "122:                 break;",
          "123:             case 'number':",
          "124:                 $return_value = $value;",
          "125:                 break;",
          "126:             case 'url':",
          "127:                 $return_value = $value;",
          "128:                 break;",
          "129:             case 'time':",
          "130:                 $z_removed = explode('.', $value)[0];",
          "131:                 $time = explode('T', $z_removed)[1];",
          "132:                 $return_value = $time;",
          "133:                 break;",
          "134:             case 'date':",
          "135:                 $z_removed = explode('.', $value)[0];",
          "136:                 $date = explode('T', $z_removed)[0];",
          "137:                 $return_value = $date;",
          "138:                 break;",
          "139:             case 'datetime':",
          "140:                 $z_removed = explode('.', $value)[0];",
          "141:                 $date_time = str_replace('T', ' ', $z_removed);",
          "142:                 $return_value = $date_time;",
          "143:                 break;",
          "144:             case 'select':",
          "145:                 $return_value = $value;",
          "146:                 break;",
          "147:             case 'select_multiple':",
          "148:                 $return_value = implode(',', $value);",
          "149:                 break;",
          "150:             case 'radio':",
          "151:                 $return_value = $value;",
          "152:                 break;",
          "153:             case 'switch':",
          "154:                 $return_value = $value;",
          "155:                 break;",
          "156:             case 'slider':",
          "157:                 $return_value = $value;",
          "158:                 break;",
          "159:             case 'editor':",
          "160:                 $return_value = $value;",
          "161:                 break;",
          "162:             case 'tags':",
          "163:                 $return_value = $value;",
          "164:                 break;",
          "165:             case 'color_picker':",
          "166:                 $return_value = $value;",
          "167:                 break;",
          "168:             case 'upload_image':",
          "169:                 $uploaded_path = $this->handleUploadFiles([$value], $data_type);",
          "170:                 $return_value = implode(',', $uploaded_path);",
          "171:                 break;",
          "172:             case 'upload_image_multiple':",
          "173:                 $return_value = $value;",
          "174:                 break;",
          "175:             case 'upload_file':",
          "176:                 $uploaded_path = $this->handleUploadFiles([$value], $data_type);",
          "177:                 $return_value = implode(',', $uploaded_path);",
          "178:                 break;",
          "179:             case 'upload_file_multiple':",
          "180:                 $uploaded_path = $this->handleUploadFiles($value, $data_type);",
          "181:                 $return_value = implode(',', $uploaded_path);",
          "182:                 break;",
          "183:             case 'hidden':",
          "184:                 $return_value = $value;",
          "185:                 break;",
          "186:             case 'relation':",
          "187:                 $return_value = $value;",
          "188:                 break;",
          "189:             default:",
          "190:                 $return_value = $value;",
          "191:                 break;",
          "192:         }",
          "194:         return $return_value;",
          "195:     }",
          "197:     public function getDataList($slug, $request, $only_data_soft_delete = false)",
          "198:     {",
          "199:         $data_type = $this->getDataType($slug);",
          "200:         $data = [];",
          "201:         $records = [];",
          "202:         $builder_params = [",
          "203:             'limit'           => isset($request['limit']) ? $request['limit'] : 10,",
          "204:             'page'            => isset($request['page']) ? $request['page'] : null,",
          "205:             'order_field'     => isset($request['order_field']) ? $request['order_field'] : $data_type->order_column,",
          "206:             'order_direction' => isset($request['order_direction']) ? $request['order_direction'] : $data_type->order_direction,",
          "207:             'filter_key'      => isset($request['filter_key']) ? $request['filter_key'] : null,",
          "208:             'filter_operator' => isset($request['filter_operator']) ? $request['filter_operator'] : 'containts',",
          "209:             'filter_value'    => isset($request['filter_value']) ? $request['filter_value'] : '',",
          "210:         ];",
          "212:         if ($data_type->model_name) {",
          "213:             if ($data_type->server_side) {",
          "214:                 $records = GetData::serverSideWithModel($data_type, $builder_params, $only_data_soft_delete);",
          "215:             } else {",
          "216:                 $records = GetData::clientSideWithModel($data_type, $builder_params, $only_data_soft_delete);",
          "217:             }",
          "218:         } else {",
          "219:             if ($data_type->server_side) {",
          "220:                 $records = GetData::serverSideWithQueryBuilder($data_type, $builder_params, $only_data_soft_delete);",
          "221:             } else {",
          "222:                 $records = GetData::clientSideWithQueryBuilder($data_type, $builder_params, $only_data_soft_delete);",
          "223:             }",
          "224:         }",
          "226:         return $records;",
          "227:     }",
          "229:     public function getDataDetail($slug, $id)",
          "230:     {",
          "231:         $data_type = $this->getDataType($slug);",
          "232:         $fields = collect($data_type->dataRows)->where('read', 1)->pluck('field')->all();",
          "233:         $ids = collect($data_type->dataRows)->where('field', 'id')->pluck('field')->all();",
          "234:         $fields = array_merge($fields, $ids);",
          "235:         $data = null;",
          "236:         $record = null;",
          "238:         if ($data_type->model_name) {",
          "239:             $model = app($data_type->model_name);",
          "240:             $row = $model::query()->select($fields)->where('id', $id)->first();",
          "241:             if ($row) {",
          "242:                 $class = new ReflectionClass(get_class($row));",
          "243:                 $class_methods = $class->getMethods();",
          "244:                 $record = json_decode(json_encode($row));",
          "245:                 foreach ($class_methods as $class_method) {",
          "246:                     if ($class_method->class == $class->name) {",
          "247:                         try {",
          "248:                             $record->{$class_method->name} = json_decode(json_encode($row->{$class_method->name}));",
          "249:                         } catch (Exception $e) {",
          "251:                         }",
          "252:                     }",
          "253:                 }",
          "254:             }",
          "255:         } else {",
          "256:             $record = DB::table($data_type->name)->select($fields)->where('id', $id)->first();",
          "257:         }",
          "259:         $record = GetData::getRelationData($data_type, $record);",
          "261:         return $record;",
          "262:     }",
          "264:     public function insertData($data, $data_type)",
          "265:     {",
          "266:         $data_rows = collect($data_type->dataRows)->where('add', 1)->all();",
          "267:         $model = null;",
          "268:         if ($data_type->model_name) {",
          "269:             $model = app($data_type->model_name);",
          "270:             foreach ($data as $key => $value) {",
          "271:                 $data_row = collect($data_rows)->where('field', $key)->first();",
          "272:                 if (! is_null($data_row)) {",
          "273:                     $model->{$key} = $this->getContentByType($data_type, $data_row, $value);",
          "274:                 }",
          "275:             }",
          "276:             $model->save();",
          "277:         } else {",
          "278:             $new_data = [];",
          "279:             $timestamp = date('Y-m-d H:i:s');",
          "280:             $data['created_at'] = $timestamp;",
          "281:             $data['updated_at'] = $timestamp;",
          "282:             foreach ($data as $key => $value) {",
          "283:                 $data_row = collect($data_rows)->where('field', $key)->first();",
          "284:                 if (! is_null($data_row)) {",
          "285:                     if ($data_row['type'] == 'upload_image_multiple') {",
          "286:                         $new_data[$key] = $this->getContentByType($data_type, $data_row, $value);",
          "287:                     }",
          "288:                     $new_data[$key] = $this->getContentByType($data_type, $data_row, $value);",
          "289:                 } else {",
          "290:                     if (in_array($key, ['created_at', 'updated_at'])) {",
          "291:                         $new_data[$key] = $value;",
          "292:                     }",
          "293:                 }",
          "294:             }",
          "295:             $id = DB::table($data_type->name)->insertGetId($new_data);",
          "296:             $model = DB::table($data_type->name)->where('id', $id)->first();",
          "297:         }",
          "299:         return $model;",
          "300:     }",
          "302:     public function updateData($data, $data_type)",
          "303:     {",
          "304:         $data_rows = collect($data_type->dataRows)->where('edit', 1)->all();",
          "305:         $model = null;",
          "306:         $id = $data['id'];",
          "307:         $data = collect($data)->forget('id')->all();",
          "308:         if ($data_type->model_name) {",
          "309:             $model = app($data_type->model_name);",
          "310:             $model = $model::find($id);",
          "311:             $old_data = json_decode(json_encode($model));",
          "312:             foreach ($data as $key => $value) {",
          "313:                 $data_row = collect($data_rows)->where('field', $key)->first();",
          "314:                 if (is_null($data_row)) {",
          "316:                 } else {",
          "317:                     if (in_array($data_row->type, [",
          "318:                         'upload_image',",
          "319:                         'upload_image_multiple',",
          "320:                         'upload_file',",
          "321:                         'upload_file_multiple',",
          "322:                     ])) {",
          "323:                         $files = explode(',', $model->{$data_row->field});",
          "324:                         foreach ($files as $file) {",
          "325:                             if (is_array($value)) {",
          "326:                                 if (! in_array($file, $value)) {",
          "327:                                     $this->handleDeleteFile($file);",
          "328:                                 }",
          "329:                             } else {",
          "330:                                 if ($file != $value) {",
          "331:                                     $this->handleDeleteFile($file);",
          "332:                                 }",
          "333:                             }",
          "334:                         }",
          "335:                     }",
          "336:                     $model->{$key} = $this->getContentByType($data_type, $data_row, $value);",
          "337:                 }",
          "338:             }",
          "339:             $model->save();",
          "340:         } else {",
          "341:             $new_data = [];",
          "342:             $data['updated_at'] = date('Y-m-d H:i:s');",
          "343:             $model = DB::table($data_type->name)->where('id', $id)->first();",
          "344:             $old_data = json_decode(json_encode($model));",
          "345:             foreach ($data as $key => $value) {",
          "346:                 $data_row = collect($data_rows)->where('field', $key)->first();",
          "347:                 if (is_null($data_row)) {",
          "349:                 } else {",
          "350:                     if (in_array($data_row->type, [",
          "351:                         'upload_image',",
          "352:                         'upload_image_multiple',",
          "353:                         'upload_file',",
          "354:                         'upload_file_multiple',",
          "355:                     ])) {",
          "356:                         $files = explode(',', $model->{$data_row->field});",
          "357:                         foreach ($files as $file) {",
          "358:                             if (is_array($value)) {",
          "359:                                 if (! in_array($file, $value)) {",
          "360:                                     $this->handleDeleteFile($file);",
          "361:                                 }",
          "362:                             } else {",
          "363:                                 if ($file != $value) {",
          "364:                                     $this->handleDeleteFile($file);",
          "365:                                 }",
          "366:                             }",
          "367:                         }",
          "368:                     }",
          "369:                     $new_data[$key] = $this->getContentByType($data_type, $data_row, $value);",
          "370:                 }",
          "371:             }",
          "372:             DB::table($data_type->name)->where('id', $id)->update($new_data);",
          "373:             $model = DB::table($data_type->name)->where('id', $id)->first();",
          "374:         }",
          "376:         return [",
          "377:             'old_data'     => $old_data,",
          "378:             'updated_data' => $model,",
          "379:         ];",
          "380:     }",
          "382:     public function deleteData($data, $data_type, $is_hard_delete = false)",
          "383:     {",
          "384:         $data_rows = $data_type->dataRows;",
          "385:         $model = null;",
          "386:         $id = $data['id'];",
          "387:         if ($data_type->model_name) {",
          "388:             $model = app($data_type->model_name);",
          "389:             $model = $model::find($id);",
          "390:             if (! is_null($model)) {",
          "391:                 foreach ($data_rows as $data_row) {",
          "392:                     if (in_array($data_row->type, [",
          "393:                         'upload_image',",
          "394:                         'upload_image_multiple',",
          "395:                         'upload_file',",
          "396:                         'upload_file_multiple',",
          "397:                     ])) {",
          "398:                         $files = explode(',', $model->{$data_row->field});",
          "399:                         foreach ($files as $file) {",
          "400:                             $this->handleDeleteFile($file);",
          "401:                         }",
          "402:                     }",
          "403:                 }",
          "404:                 if ($is_hard_delete) {",
          "405:                     $model->delete();",
          "406:                 } else {",
          "407:                     if ($data_type->is_soft_delete) {",
          "408:                         $model->update([",
          "409:                             'deleted_at' => date('Y-m-d H:i:s'),",
          "410:                         ]);",
          "411:                     } else {",
          "412:                         $model->delete();",
          "413:                     }",
          "414:                 }",
          "415:             }",
          "416:         } else {",
          "417:             $model = DB::table($data_type->name)->where('id', $id)->first();",
          "418:             if (! is_null($model)) {",
          "419:                 foreach ($data_rows as $data_row) {",
          "420:                     if (in_array($data_row->type, [",
          "421:                         'upload_image',",
          "422:                         'upload_image_multiple',",
          "423:                         'upload_file',",
          "424:                         'upload_file_multiple',",
          "425:                     ])) {",
          "426:                         $files = explode(',', $model->{$data_row->field});",
          "427:                         foreach ($files as $file) {",
          "428:                             $this->handleDeleteFile($file);",
          "429:                         }",
          "430:                     }",
          "431:                 }",
          "432:                 $model = DB::table($data_type->name)->where('id', $id);",
          "434:                 if ($is_hard_delete) {",
          "435:                     $model->delete();",
          "436:                 } else {",
          "437:                     if ($data_type->is_soft_delete) {",
          "438:                         $model->update([",
          "439:                             'deleted_at' => date('Y-m-d H:i:s'),",
          "440:                         ]);",
          "441:                     } else {",
          "442:                         $model->delete();",
          "443:                     }",
          "444:                 }",
          "445:             }",
          "446:         }",
          "447:     }",
          "449:     public function restoreData($data, $data_type)",
          "450:     {",
          "451:         $data_rows = $data_type->dataRows;",
          "452:         $model = null;",
          "453:         $id = $data['id'];",
          "454:         if ($data_type->model_name) {",
          "455:             $model = app($data_type->model_name);",
          "456:             $model = $model::find($id);",
          "457:             if (! is_null($model)) {",
          "458:                 foreach ($data_rows as $data_row) {",
          "459:                     if (in_array($data_row->type, [",
          "460:                         'upload_image',",
          "461:                         'upload_image_multiple',",
          "462:                         'upload_file',",
          "463:                         'upload_file_multiple',",
          "464:                     ])) {",
          "465:                         $files = explode(',', $model->{$data_row->field});",
          "466:                         foreach ($files as $file) {",
          "467:                             $this->handleDeleteFile($file);",
          "468:                         }",
          "469:                     }",
          "470:                 }",
          "471:                 $model->update([",
          "472:                     'deleted_at' => null,",
          "473:                 ]);",
          "474:             }",
          "475:         } else {",
          "476:             $model = DB::table($data_type->name)->where('id', $id)->first();",
          "477:             if (! is_null($model)) {",
          "478:                 foreach ($data_rows as $data_row) {",
          "479:                     if (in_array($data_row->type, [",
          "480:                         'upload_image',",
          "481:                         'upload_image_multiple',",
          "482:                         'upload_file',",
          "483:                         'upload_file_multiple',",
          "484:                     ])) {",
          "485:                         $files = explode(',', $model->{$data_row->field});",
          "486:                         foreach ($files as $file) {",
          "487:                             $this->handleDeleteFile($file);",
          "488:                         }",
          "489:                     }",
          "490:                 }",
          "491:                 $model = DB::table($data_type->name)->where('id', $id);",
          "493:                 $model->update([",
          "494:                     'deleted_at' => null,",
          "495:                 ]);",
          "496:             }",
          "497:         }",
          "498:     }",
          "500:     public function getDataRelations($data)",
          "501:     {",
          "502:         $records = [];",
          "503:         foreach ($data as $row) {",
          "504:             $class = new ReflectionClass(get_class($row));",
          "505:             $class_methods = $class->getMethods();",
          "506:             $record = json_decode(json_encode($row));",
          "507:             foreach ($class_methods as $class_method) {",
          "508:                 if ($class_method->class == $class->name) {",
          "509:                     try {",
          "510:                         $record->{$class_method->name} = json_decode(json_encode($row->{$class_method->name}));",
          "511:                     } catch (Exception $e) {",
          "513:                     }",
          "514:                 }",
          "515:             }",
          "516:             $records[] = $record;",
          "517:         }",
          "519:         return $records;",
          "520:     }",
          "522:     protected function dataRowsTypeReplace(Collection $data_rows): Collection",
          "523:     {",
          "524:         if (env('DB_CONNECTION') == 'sqlite') {",
          "525:             foreach ($data_rows as $index => $rows) {",
          "526:                 foreach ($rows->toArray() as $key => $value) {",
          "527:                     if (is_numeric($value)) {",
          "528:                         if (is_double($value)) {",
          "529:                             $value = doubleval($value);",
          "530:                         } else {",
          "531:                             $value = intval($value);",
          "532:                         }",
          "533:                     }",
          "535:                     $data_rows[$index][$key] = $value;",
          "536:                 }",
          "537:             }",
          "538:         }",
          "540:         return $data_rows;",
          "541:     }",
          "542: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1656aceff8a49eb45d5b13ae9731184cf66ef71",
      "candidate_info": {
        "commit_hash": "c1656aceff8a49eb45d5b13ae9731184cf66ef71",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/c1656aceff8a49eb45d5b13ae9731184cf66ef71",
        "files": [
          "tests/Feature/ExampleTest.php",
          "tests/Unit/ExampleTest.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "tests/Feature/ExampleTest.php||tests/Feature/ExampleTest.php",
          "tests/Unit/ExampleTest.php||tests/Unit/ExampleTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/ExampleTest.php||tests/Feature/ExampleTest.php": [
          "File: tests/Feature/ExampleTest.php -> tests/Feature/ExampleTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "6: use Tests\\TestCase;",
          "8: class ExampleTest extends TestCase",
          "",
          "[Removed Lines]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature ;",
          "5: use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
          "",
          "[Added Lines]",
          "3: namespace Uasoft\\Badaso\\Tests\\Feature;",
          "",
          "---------------"
        ],
        "tests/Unit/ExampleTest.php||tests/Unit/ExampleTest.php": [
          "File: tests/Unit/ExampleTest.php -> tests/Unit/ExampleTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace Uasoft\\Badaso\\Tests\\Unit;",
          "5: use PHPUnit\\Framework\\TestCase;",
          "8: class ExampleTest extends TestCase",
          "9: {",
          "",
          "[Removed Lines]",
          "6: use Uasoft\\Badaso\\Models\\User;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a37cfcf2df25bb63227b331a1711509f7cb104e",
      "candidate_info": {
        "commit_hash": "2a37cfcf2df25bb63227b331a1711509f7cb104e",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/2a37cfcf2df25bb63227b331a1711509f7cb104e",
        "files": [
          "src/Models/Permission.php",
          "src/Seeder/Configurations/PermissionsSeeder.php"
        ],
        "message": "add generate for table CRUD",
        "before_after_code_files": [
          "src/Models/Permission.php||src/Models/Permission.php",
          "src/Seeder/Configurations/PermissionsSeeder.php||src/Seeder/Configurations/PermissionsSeeder.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Models/Permission.php||src/Models/Permission.php": [
          "File: src/Models/Permission.php -> src/Models/Permission.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     public static function generateFor($table_name, $is_maintenance = false)",
          "28:     {",
          "52:                 }",
          "53:             }",
          "54:         }",
          "",
          "[Removed Lines]",
          "29:         $permissions = [];",
          "30:         $permissions[] = self::firstOrCreate(['key' => 'browse_'.$table_name, 'description' => 'Browse '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "31:         $permissions[] = self::firstOrCreate(['key' => 'read_'.$table_name, 'description' => 'Read '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "32:         $permissions[] = self::firstOrCreate(['key' => 'edit_'.$table_name, 'description' => 'Edit '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "33:         $permissions[] = self::firstOrCreate(['key' => 'add_'.$table_name, 'description' => 'Add '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "34:         $permissions[] = self::firstOrCreate(['key' => 'delete_'.$table_name, 'description' => 'Delete '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "36:         if ($is_maintenance) {",
          "37:             $permissions[] = self::firstOrCreate(['key' => 'maintenance_'.$table_name, 'description' => 'Maintenance '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "38:         }",
          "40:         $administrator = Role::where('name', 'administrator')->firstOrFail();",
          "42:         if (! is_null($administrator)) {",
          "43:             foreach ($permissions as $row) {",
          "44:                 $role_permission = RolePermission::where('role_id', $administrator->id)",
          "45:                         ->where('permission_id', $row->id)",
          "46:                         ->first();",
          "47:                 if (is_null($role_permission)) {",
          "48:                     $role_permission = new RolePermission();",
          "49:                     $role_permission->role_id = $administrator->id;",
          "50:                     $role_permission->permission_id = $row->id;",
          "51:                     $role_permission->save();",
          "",
          "[Added Lines]",
          "29:         if(!Permission::where('table_name', $table_name)->first()){",
          "30:             $permissions = [];",
          "31:             $permissions[] = self::firstOrCreate(['key' => 'browse_'.$table_name, 'description' => 'Browse '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "32:             $permissions[] = self::firstOrCreate(['key' => 'read_'.$table_name, 'description' => 'Read '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "33:             $permissions[] = self::firstOrCreate(['key' => 'edit_'.$table_name, 'description' => 'Edit '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "34:             $permissions[] = self::firstOrCreate(['key' => 'add_'.$table_name, 'description' => 'Add '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "35:             $permissions[] = self::firstOrCreate(['key' => 'delete_'.$table_name, 'description' => 'Delete '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "37:             if ($is_maintenance) {",
          "38:                 $permissions[] = self::firstOrCreate(['key' => 'maintenance_'.$table_name, 'description' => 'Maintenance '.$table_name, 'table_name' => $table_name, 'roles_can_see_all_data' => '[\"administrator\"]', 'field_identify_related_user' => 'user_id']);",
          "39:             }",
          "41:             $administrator = Role::where('name', 'administrator')->firstOrFail();",
          "43:             if (! is_null($administrator)) {",
          "44:                 foreach ($permissions as $row) {",
          "45:                     $role_permission = RolePermission::where('role_id', $administrator->id)",
          "46:                             ->where('permission_id', $row->id)",
          "47:                             ->first();",
          "48:                     if (is_null($role_permission)) {",
          "49:                         $role_permission = new RolePermission();",
          "50:                         $role_permission->role_id = $administrator->id;",
          "51:                         $role_permission->permission_id = $row->id;",
          "52:                         $role_permission->save();",
          "53:                     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     {",
          "96:         return LogOptions::defaults()->dontSubmitEmptyLogs();",
          "97:     }",
          "98: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     public static function generateForTableCRUD(){",
          "102:         $get_all_table_name = DataType::all();",
          "103:         foreach ($get_all_table_name as $key => $table) {",
          "104:             $permission_table_name = Permission::where('table_name', $table->name)->get();",
          "105:             foreach ($permission_table_name as $key => $table_name) {",
          "106:                 if ($table->roles_can_see_all_data  == NULL && $table_name->field_identify_related_user == NULL) {",
          "107:                     $table_name->roles_can_see_all_data = '[\"administrator\"]';",
          "108:                     $table_name->field_identify_related_user = 'user_id';",
          "109:                     $table_name->save();",
          "110:                 }",
          "111:             }",
          "112:         }",
          "113:     }",
          "",
          "---------------"
        ],
        "src/Seeder/Configurations/PermissionsSeeder.php||src/Seeder/Configurations/PermissionsSeeder.php": [
          "File: src/Seeder/Configurations/PermissionsSeeder.php -> src/Seeder/Configurations/PermissionsSeeder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         Permission::generateFor('configurations');",
          "63:         Permission::generateFor('database');",
          "64:     }",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:         Permission::generateForTableCRUD();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4edfb562dc56dda69a7e51872cbba4bcc0214f38",
      "candidate_info": {
        "commit_hash": "4edfb562dc56dda69a7e51872cbba4bcc0214f38",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/4edfb562dc56dda69a7e51872cbba4bcc0214f38",
        "files": [
          "src/Controllers/Controller.php",
          "src/Helpers/GetData.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Controllers/Controller.php||src/Controllers/Controller.php",
          "src/Helpers/GetData.php||src/Helpers/GetData.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/Controller.php||src/Controllers/Controller.php": [
          "File: src/Controllers/Controller.php -> src/Controllers/Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "540:         return $data_rows;",
          "541:     }",
          "",
          "[Removed Lines]",
          "542: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:         $records = $records->get()->map(function ($record) use ($data_rows) {",
          "223:             foreach ($data_rows as $index => $data_row) {",
          "256:                     }",
          "257:                 }",
          "261:         $data = [];",
          "263:         foreach ($records as $row) {",
          "",
          "[Removed Lines]",
          "224:                     if($data_row->type == 'upload_image_multiple'){",
          "225:                         $upload_image_multiples = json_decode($record->{$data_row->field}, true) ;",
          "226:                         if(isset($upload_image_multiples)){",
          "227:                             $upload_image_multiples = collect($upload_image_multiples)->map(function($upload_image_multiple){",
          "228:                                 $put_thumbs = \"thumbs\" ;",
          "229:                                 $upload_image_multiple = explode(\"/\", $upload_image_multiple);",
          "230:                                 $file_name = $upload_image_multiple[count($upload_image_multiple) -1];",
          "231:                                 $upload_image_multiple[count($upload_image_multiple) -1] = $put_thumbs ;",
          "232:                                 $upload_image_multiple[] = $file_name ;",
          "233:                                 $upload_image_multiple = join(\"/\", $upload_image_multiple);",
          "235:                                 $asset = asset(\"storage/\".$upload_image_multiple);",
          "237:                                 return $asset;",
          "238:                             });",
          "239:                             $upload_image_multiples = implode(\",\",json_decode($upload_image_multiples));",
          "240:                         }",
          "241:                         $record->{$data_row->field} = $upload_image_multiples ;",
          "243:                     }elseif($data_row->type == 'upload_image'){",
          "244:                         $upload_image = $record->{$data_row->field};",
          "245:                         if(isset($upload_image)){",
          "246:                                 $put_thumbs = \"thumbs\" ;",
          "247:                                 $upload_image = explode(\"/\", $upload_image);",
          "248:                                 $file_name = $upload_image[count($upload_image) -1];",
          "249:                                 $upload_image[count($upload_image) -1] = $put_thumbs ;",
          "250:                                 $upload_image[] = $file_name ;",
          "251:                                 $upload_image = join(\"/\", $upload_image);",
          "253:                                 $upload_image = asset(\"storage/\".$upload_image);",
          "254:                                 $record->{$data_row->field} = $upload_image;",
          "255:                         }",
          "258:                 return $record ;",
          "259:             });",
          "",
          "[Added Lines]",
          "224:                 if ($data_row->type == 'upload_image_multiple') {",
          "225:                     $upload_image_multiples = json_decode($record->{$data_row->field}, true);",
          "226:                     if (isset($upload_image_multiples)) {",
          "227:                         $upload_image_multiples = collect($upload_image_multiples)->map(function ($upload_image_multiple) {",
          "228:                             $put_thumbs = 'thumbs';",
          "229:                             $upload_image_multiple = explode('/', $upload_image_multiple);",
          "230:                             $file_name = $upload_image_multiple[count($upload_image_multiple) - 1];",
          "231:                             $upload_image_multiple[count($upload_image_multiple) - 1] = $put_thumbs;",
          "232:                             $upload_image_multiple[] = $file_name;",
          "233:                             $upload_image_multiple = join('/', $upload_image_multiple);",
          "235:                             $asset = asset('storage/'.$upload_image_multiple);",
          "237:                             return $asset;",
          "238:                         });",
          "239:                         $upload_image_multiples = implode(',', json_decode($upload_image_multiples));",
          "240:                     }",
          "241:                     $record->{$data_row->field} = $upload_image_multiples;",
          "242:                 } elseif ($data_row->type == 'upload_image') {",
          "243:                     $upload_image = $record->{$data_row->field};",
          "244:                     if (isset($upload_image)) {",
          "245:                         $put_thumbs = 'thumbs';",
          "246:                         $upload_image = explode('/', $upload_image);",
          "247:                         $file_name = $upload_image[count($upload_image) - 1];",
          "248:                         $upload_image[count($upload_image) - 1] = $put_thumbs;",
          "249:                         $upload_image[] = $file_name;",
          "250:                         $upload_image = join('/', $upload_image);",
          "252:                         $upload_image = asset('storage/'.$upload_image);",
          "253:                         $record->{$data_row->field} = $upload_image;",
          "256:             }",
          "258:             return $record;",
          "259:         });",
          "",
          "---------------"
        ]
      }
    }
  ]
}