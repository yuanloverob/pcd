{
  "cve_id": "CVE-2024-3572",
  "cve_desc": "The scrapy/scrapy project is vulnerable to XML External Entity (XXE) attacks due to the use of lxml.etree.fromstring for parsing untrusted XML data without proper validation. This vulnerability allows attackers to perform denial of service attacks, access local files, generate network connections, or circumvent firewalls by submitting specially crafted XML data. ",
  "repo": "scrapy/scrapy",
  "patch_hash": "809bfac4890f75fc73607318a04d2ccba71b3d9f",
  "patch_info": {
    "commit_hash": "809bfac4890f75fc73607318a04d2ccba71b3d9f",
    "repo": "scrapy/scrapy",
    "commit_url": "https://github.com/scrapy/scrapy/commit/809bfac4890f75fc73607318a04d2ccba71b3d9f",
    "files": [
      "docs/news.rst",
      "docs/topics/request-response.rst",
      "docs/topics/settings.rst",
      "scrapy/downloadermiddlewares/decompression.py",
      "scrapy/downloadermiddlewares/httpcompression.py",
      "scrapy/spiders/sitemap.py",
      "scrapy/utils/_compression.py",
      "scrapy/utils/gz.py",
      "tests/sample_data/compressed/bomb-br.bin",
      "tests/sample_data/compressed/bomb-deflate.bin",
      "tests/sample_data/compressed/bomb-gzip.bin",
      "tests/sample_data/compressed/bomb-zstd.bin",
      "tests/test_downloadermiddleware_decompression.py",
      "tests/test_downloadermiddleware_httpcompression.py",
      "tests/test_spider.py"
    ],
    "message": "Merge branch '2.11-compression-bomb' into 2.11",
    "before_after_code_files": [
      "scrapy/downloadermiddlewares/decompression.py||scrapy/downloadermiddlewares/decompression.py",
      "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
      "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py",
      "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
      "scrapy/utils/gz.py||scrapy/utils/gz.py",
      "tests/test_downloadermiddleware_decompression.py||tests/test_downloadermiddleware_decompression.py",
      "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py",
      "tests/test_spider.py||tests/test_spider.py"
    ]
  },
  "patch_diff": {
    "scrapy/downloadermiddlewares/decompression.py||scrapy/downloadermiddlewares/decompression.py": [
      "File: scrapy/downloadermiddlewares/decompression.py -> scrapy/downloadermiddlewares/decompression.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
      "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import warnings",
      "6: from scrapy.http import Response, TextResponse",
      "7: from scrapy.responsetypes import responsetypes",
      "8: from scrapy.utils.deprecate import ScrapyDeprecationWarning",
      "9: from scrapy.utils.gz import gunzip",
      "11: ACCEPTED_ENCODINGS = [b\"gzip\", b\"deflate\"]",
      "13: try:",
      "17: except ImportError:",
      "18:     pass",
      "20: try:",
      "24: except ImportError:",
      "25:     pass",
      "28: class HttpCompressionMiddleware:",
      "29:     \"\"\"This middleware allows compressed (gzip, deflate) traffic to be",
      "30:     sent/received from web sites\"\"\"",
      "35:     @classmethod",
      "36:     def from_crawler(cls, crawler):",
      "37:         if not crawler.settings.getbool(\"COMPRESSION_ENABLED\"):",
      "38:             raise NotConfigured",
      "39:         try:",
      "41:         except TypeError:",
      "42:             warnings.warn(",
      "43:                 \"HttpCompressionMiddleware subclasses must either modify \"",
      "46:                 ScrapyDeprecationWarning,",
      "47:             )",
      "52:     def process_request(self, request, spider):",
      "53:         request.headers.setdefault(\"Accept-Encoding\", b\", \".join(ACCEPTED_ENCODINGS))",
      "",
      "[Removed Lines]",
      "1: import io",
      "3: import zlib",
      "5: from scrapy.exceptions import NotConfigured",
      "14:     import brotli",
      "16:     ACCEPTED_ENCODINGS.append(b\"br\")",
      "21:     import zstandard",
      "23:     ACCEPTED_ENCODINGS.append(b\"zstd\")",
      "32:     def __init__(self, stats=None):",
      "33:         self.stats = stats",
      "40:             return cls(stats=crawler.stats)",
      "44:                 \"their '__init__' method to support a 'stats' parameter or \"",
      "45:                 \"reimplement the 'from_crawler' method.\",",
      "48:             result = cls()",
      "49:             result.stats = crawler.stats",
      "50:             return result",
      "",
      "[Added Lines]",
      "2: from logging import getLogger",
      "4: from scrapy import signals",
      "5: from scrapy.exceptions import IgnoreRequest, NotConfigured",
      "8: from scrapy.utils._compression import (",
      "9:     _DecompressionMaxSizeExceeded,",
      "10:     _inflate,",
      "11:     _unbrotli,",
      "12:     _unzstd,",
      "13: )",
      "17: logger = getLogger(__name__)",
      "22:     import brotli  # noqa: F401",
      "25: else:",
      "26:     ACCEPTED_ENCODINGS.append(b\"br\")",
      "29:     import zstandard  # noqa: F401",
      "32: else:",
      "33:     ACCEPTED_ENCODINGS.append(b\"zstd\")",
      "40:     def __init__(self, stats=None, *, crawler=None):",
      "41:         if not crawler:",
      "42:             self.stats = stats",
      "43:             self._max_size = 1073741824",
      "44:             self._warn_size = 33554432",
      "45:             return",
      "46:         self.stats = crawler.stats",
      "47:         self._max_size = crawler.settings.getint(\"DOWNLOAD_MAXSIZE\")",
      "48:         self._warn_size = crawler.settings.getint(\"DOWNLOAD_WARNSIZE\")",
      "49:         crawler.signals.connect(self.open_spider, signals.spider_opened)",
      "56:             return cls(crawler=crawler)",
      "60:                 \"their '__init__' method to support a 'crawler' parameter or \"",
      "61:                 \"reimplement their 'from_crawler' method.\",",
      "64:             mw = cls()",
      "65:             mw.stats = crawler.stats",
      "66:             mw._max_size = crawler.settings.getint(\"DOWNLOAD_MAXSIZE\")",
      "67:             mw._warn_size = crawler.settings.getint(\"DOWNLOAD_WARNSIZE\")",
      "68:             crawler.signals.connect(mw.open_spider, signals.spider_opened)",
      "69:             return mw",
      "71:     def open_spider(self, spider):",
      "72:         if hasattr(spider, \"download_maxsize\"):",
      "73:             self._max_size = spider.download_maxsize",
      "74:         if hasattr(spider, \"download_warnsize\"):",
      "75:             self._warn_size = spider.download_warnsize",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:             content_encoding = response.headers.getlist(\"Content-Encoding\")",
      "60:             if content_encoding:",
      "61:                 encoding = content_encoding.pop()",
      "63:                 if self.stats:",
      "64:                     self.stats.inc_value(",
      "65:                         \"httpcompression/response_bytes\",",
      "",
      "[Removed Lines]",
      "62:                 decoded_body = self._decode(response.body, encoding.lower())",
      "",
      "[Added Lines]",
      "87:                 max_size = request.meta.get(\"download_maxsize\", self._max_size)",
      "88:                 warn_size = request.meta.get(\"download_warnsize\", self._warn_size)",
      "89:                 try:",
      "90:                     decoded_body = self._decode(",
      "91:                         response.body, encoding.lower(), max_size",
      "92:                     )",
      "93:                 except _DecompressionMaxSizeExceeded:",
      "94:                     raise IgnoreRequest(",
      "95:                         f\"Ignored response {response} because its body \"",
      "96:                         f\"({len(response.body)} B) exceeded DOWNLOAD_MAXSIZE \"",
      "97:                         f\"({max_size} B) during decompression.\"",
      "98:                     )",
      "99:                 if len(response.body) < warn_size <= len(decoded_body):",
      "100:                     logger.warning(",
      "101:                         f\"{response} body size after decompression \"",
      "102:                         f\"({len(decoded_body)} B) is larger than the \"",
      "103:                         f\"download warning size ({warn_size} B).\"",
      "104:                     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "84:         return response",
      "87:         if encoding == b\"gzip\" or encoding == b\"x-gzip\":",
      "90:         if encoding == b\"deflate\":",
      "100:         if encoding == b\"br\" and b\"br\" in ACCEPTED_ENCODINGS:",
      "102:         if encoding == b\"zstd\" and b\"zstd\" in ACCEPTED_ENCODINGS:",
      "107:         return body",
      "",
      "[Removed Lines]",
      "86:     def _decode(self, body, encoding):",
      "88:             body = gunzip(body)",
      "91:             try:",
      "92:                 body = zlib.decompress(body)",
      "93:             except zlib.error:",
      "94:                 # ugly hack to work with raw deflate content that may",
      "95:                 # be sent by microsoft servers. For more information, see:",
      "96:                 # http://carsten.codimi.de/gzip.yaws/",
      "97:                 # http://www.port80software.com/200ok/archive/2005/10/31/868.aspx",
      "98:                 # http://www.gzip.org/zlib/zlib_faq.html#faq38",
      "99:                 body = zlib.decompress(body, -15)",
      "101:             body = brotli.decompress(body)",
      "103:             # Using its streaming API since its simple API could handle only cases",
      "104:             # where there is content size data embedded in the frame",
      "105:             reader = zstandard.ZstdDecompressor().stream_reader(io.BytesIO(body))",
      "106:             body = reader.read()",
      "",
      "[Added Lines]",
      "128:     def _decode(self, body, encoding, max_size):",
      "130:             return gunzip(body, max_size=max_size)",
      "132:             return _inflate(body, max_size=max_size)",
      "134:             return _unbrotli(body, max_size=max_size)",
      "136:             return _unzstd(body, max_size=max_size)",
      "",
      "---------------"
    ],
    "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py": [
      "File: scrapy/spiders/sitemap.py -> scrapy/spiders/sitemap.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import logging",
      "2: import re",
      "4: from scrapy.http import Request, XmlResponse",
      "5: from scrapy.spiders import Spider",
      "6: from scrapy.utils.gz import gunzip, gzip_magic_number",
      "7: from scrapy.utils.sitemap import Sitemap, sitemap_urls_from_robots",
      "9: logger = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: from typing import TYPE_CHECKING, Any",
      "7: from scrapy.utils._compression import _DecompressionMaxSizeExceeded",
      "11: if TYPE_CHECKING:",
      "12:     # typing.Self requires Python 3.11",
      "13:     from typing_extensions import Self",
      "15:     from scrapy.crawler import Crawler",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14:     sitemap_rules = [(\"\", \"parse\")]",
      "15:     sitemap_follow = [\"\"]",
      "16:     sitemap_alternate_links = False",
      "18:     def __init__(self, *a, **kw):",
      "19:         super().__init__(*a, **kw)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:     _max_size: int",
      "26:     _warn_size: int",
      "28:     @classmethod",
      "29:     def from_crawler(cls, crawler: \"Crawler\", *args: Any, **kwargs: Any) -> \"Self\":",
      "30:         spider = super().from_crawler(crawler, *args, **kwargs)",
      "31:         spider._max_size = getattr(",
      "32:             spider, \"download_maxsize\", spider.settings.getint(\"DOWNLOAD_MAXSIZE\")",
      "33:         )",
      "34:         spider._warn_size = getattr(",
      "35:             spider, \"download_warnsize\", spider.settings.getint(\"DOWNLOAD_WARNSIZE\")",
      "36:         )",
      "37:         return spider",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "71:         if isinstance(response, XmlResponse):",
      "72:             return response.body",
      "73:         if gzip_magic_number(response):",
      "75:         # actual gzipped sitemap files are decompressed above ;",
      "76:         # if we are here (response body is not gzipped)",
      "77:         # and have a response for .xml.gz,",
      "",
      "[Removed Lines]",
      "74:             return gunzip(response.body)",
      "",
      "[Added Lines]",
      "95:             uncompressed_size = len(response.body)",
      "96:             max_size = response.meta.get(\"download_maxsize\", self._max_size)",
      "97:             warn_size = response.meta.get(\"download_warnsize\", self._warn_size)",
      "98:             try:",
      "99:                 body = gunzip(response.body, max_size=max_size)",
      "100:             except _DecompressionMaxSizeExceeded:",
      "101:                 return None",
      "102:             if uncompressed_size < warn_size <= len(body):",
      "103:                 logger.warning(",
      "104:                     f\"{response} body size after decompression ({len(body)} B) \"",
      "105:                     f\"is larger than the download warning size ({warn_size} B).\"",
      "106:                 )",
      "107:             return body",
      "",
      "---------------"
    ],
    "scrapy/utils/_compression.py||scrapy/utils/_compression.py": [
      "File: scrapy/utils/_compression.py -> scrapy/utils/_compression.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import zlib",
      "2: from io import BytesIO",
      "4: try:",
      "5:     import brotli",
      "6: except ImportError:",
      "7:     pass",
      "9: try:",
      "10:     import zstandard",
      "11: except ImportError:",
      "12:     pass",
      "15: _CHUNK_SIZE = 65536  # 64 KiB",
      "18: class _DecompressionMaxSizeExceeded(ValueError):",
      "19:     pass",
      "22: def _inflate(data: bytes, *, max_size: int = 0) -> bytes:",
      "23:     decompressor = zlib.decompressobj()",
      "24:     raw_decompressor = zlib.decompressobj(wbits=-15)",
      "25:     input_stream = BytesIO(data)",
      "26:     output_stream = BytesIO()",
      "27:     output_chunk = b\".\"",
      "28:     decompressed_size = 0",
      "29:     while output_chunk:",
      "30:         input_chunk = input_stream.read(_CHUNK_SIZE)",
      "31:         try:",
      "32:             output_chunk = decompressor.decompress(input_chunk)",
      "33:         except zlib.error:",
      "34:             if decompressor != raw_decompressor:",
      "35:                 # ugly hack to work with raw deflate content that may",
      "36:                 # be sent by microsoft servers. For more information, see:",
      "37:                 # http://carsten.codimi.de/gzip.yaws/",
      "38:                 # http://www.port80software.com/200ok/archive/2005/10/31/868.aspx",
      "39:                 # http://www.gzip.org/zlib/zlib_faq.html#faq38",
      "40:                 decompressor = raw_decompressor",
      "41:                 output_chunk = decompressor.decompress(input_chunk)",
      "42:             else:",
      "43:                 raise",
      "44:         decompressed_size += len(output_chunk)",
      "45:         if max_size and decompressed_size > max_size:",
      "46:             raise _DecompressionMaxSizeExceeded(",
      "47:                 f\"The number of bytes decompressed so far \"",
      "48:                 f\"({decompressed_size} B) exceed the specified maximum \"",
      "49:                 f\"({max_size} B).\"",
      "50:             )",
      "51:         output_stream.write(output_chunk)",
      "52:     output_stream.seek(0)",
      "53:     return output_stream.read()",
      "56: def _unbrotli(data: bytes, *, max_size: int = 0) -> bytes:",
      "57:     decompressor = brotli.Decompressor()",
      "58:     input_stream = BytesIO(data)",
      "59:     output_stream = BytesIO()",
      "60:     output_chunk = b\".\"",
      "61:     decompressed_size = 0",
      "62:     while output_chunk:",
      "63:         input_chunk = input_stream.read(_CHUNK_SIZE)",
      "64:         output_chunk = decompressor.process(input_chunk)",
      "65:         decompressed_size += len(output_chunk)",
      "66:         if max_size and decompressed_size > max_size:",
      "67:             raise _DecompressionMaxSizeExceeded(",
      "68:                 f\"The number of bytes decompressed so far \"",
      "69:                 f\"({decompressed_size} B) exceed the specified maximum \"",
      "70:                 f\"({max_size} B).\"",
      "71:             )",
      "72:         output_stream.write(output_chunk)",
      "73:     output_stream.seek(0)",
      "74:     return output_stream.read()",
      "77: def _unzstd(data: bytes, *, max_size: int = 0) -> bytes:",
      "78:     decompressor = zstandard.ZstdDecompressor()",
      "79:     stream_reader = decompressor.stream_reader(BytesIO(data))",
      "80:     output_stream = BytesIO()",
      "81:     output_chunk = b\".\"",
      "82:     decompressed_size = 0",
      "83:     while output_chunk:",
      "84:         output_chunk = stream_reader.read(_CHUNK_SIZE)",
      "85:         decompressed_size += len(output_chunk)",
      "86:         if max_size and decompressed_size > max_size:",
      "87:             raise _DecompressionMaxSizeExceeded(",
      "88:                 f\"The number of bytes decompressed so far \"",
      "89:                 f\"({decompressed_size} B) exceed the specified maximum \"",
      "90:                 f\"({max_size} B).\"",
      "91:             )",
      "92:         output_stream.write(output_chunk)",
      "93:     output_stream.seek(0)",
      "94:     return output_stream.read()",
      "",
      "---------------"
    ],
    "scrapy/utils/gz.py||scrapy/utils/gz.py": [
      "File: scrapy/utils/gz.py -> scrapy/utils/gz.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import struct",
      "2: from gzip import GzipFile",
      "3: from io import BytesIO",
      "6: from scrapy.http import Response",
      "10:     \"\"\"Gunzip the given data and return as much data as possible.",
      "12:     This is resilient to CRC checksum errors.",
      "13:     \"\"\"",
      "14:     f = GzipFile(fileobj=BytesIO(data))",
      "16:     chunk = b\".\"",
      "17:     while chunk:",
      "18:         try:",
      "21:         except (OSError, EOFError, struct.error):",
      "22:             # complete only if there is some data, otherwise re-raise",
      "23:             # see issue 87 about catching struct.error",
      "26:                 break",
      "27:             raise",
      "31: def gzip_magic_number(response: Response) -> bool:",
      "",
      "[Removed Lines]",
      "4: from typing import List",
      "9: def gunzip(data: bytes) -> bytes:",
      "15:     output_list: List[bytes] = []",
      "19:             chunk = f.read1(8196)",
      "20:             output_list.append(chunk)",
      "24:             # some pages are quite small so output_list is empty",
      "25:             if output_list:",
      "28:     return b\"\".join(output_list)",
      "",
      "[Added Lines]",
      "7: from ._compression import _CHUNK_SIZE, _DecompressionMaxSizeExceeded",
      "10: def gunzip(data: bytes, *, max_size: int = 0) -> bytes:",
      "16:     output_stream = BytesIO()",
      "18:     decompressed_size = 0",
      "21:             chunk = f.read1(_CHUNK_SIZE)",
      "25:             # some pages are quite small so output_stream is empty",
      "26:             if output_stream.getbuffer().nbytes > 0:",
      "29:         decompressed_size += len(chunk)",
      "30:         if max_size and decompressed_size > max_size:",
      "31:             raise _DecompressionMaxSizeExceeded(",
      "32:                 f\"The number of bytes decompressed so far \"",
      "33:                 f\"({decompressed_size} B) exceed the specified maximum \"",
      "34:                 f\"({max_size} B).\"",
      "35:             )",
      "36:         output_stream.write(chunk)",
      "37:     output_stream.seek(0)",
      "38:     return output_stream.read()",
      "",
      "---------------"
    ],
    "tests/test_downloadermiddleware_decompression.py||tests/test_downloadermiddleware_decompression.py": [
      "File: tests/test_downloadermiddleware_decompression.py -> tests/test_downloadermiddleware_decompression.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py": [
      "File: tests/test_downloadermiddleware_httpcompression.py -> tests/test_downloadermiddleware_httpcompression.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: from gzip import GzipFile",
      "2: from io import BytesIO",
      "3: from pathlib import Path",
      "4: from unittest import SkipTest, TestCase",
      "5: from warnings import catch_warnings",
      "7: from w3lib.encoding import resolve_encoding",
      "9: from scrapy.downloadermiddlewares.httpcompression import (",
      "10:     ACCEPTED_ENCODINGS,",
      "11:     HttpCompressionMiddleware,",
      "12: )",
      "14: from scrapy.http import HtmlResponse, Request, Response",
      "15: from scrapy.responsetypes import responsetypes",
      "16: from scrapy.spiders import Spider",
      "",
      "[Removed Lines]",
      "13: from scrapy.exceptions import NotConfigured, ScrapyDeprecationWarning",
      "",
      "[Added Lines]",
      "3: from logging import WARNING",
      "8: from testfixtures import LogCapture",
      "15: from scrapy.exceptions import IgnoreRequest, NotConfigured, ScrapyDeprecationWarning",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35:         \"html-zstd-streaming-no-content-size.bin\",",
      "36:         \"zstd\",",
      "37:     ),",
      "38: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41:         f\"bomb-{format_id}\": (f\"bomb-{format_id}.bin\", format_id)",
      "42:         for format_id in (",
      "43:             \"br\",  # 34 \u2192 11 511 612",
      "44:             \"deflate\",  # 27 968 \u2192 11 511 612",
      "45:             \"gzip\",  # 27 988 \u2192 11 511 612",
      "46:             \"zstd\",  # 1 096 \u2192 11 511 612",
      "47:         )",
      "48:     },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "115:         self.assertStatsEqual(\"httpcompression/response_count\", 1)",
      "116:         self.assertStatsEqual(\"httpcompression/response_bytes\", 74837)",
      "130:     def test_process_response_br(self):",
      "131:         try:",
      "132:             import brotli  # noqa: F401",
      "",
      "[Removed Lines]",
      "118:     def test_process_response_gzip_no_stats(self):",
      "119:         mw = HttpCompressionMiddleware()",
      "120:         response = self._getresponse(\"gzip\")",
      "121:         request = response.request",
      "123:         self.assertEqual(response.headers[\"Content-Encoding\"], b\"gzip\")",
      "124:         newresponse = mw.process_response(request, response, self.spider)",
      "125:         self.assertEqual(mw.stats, None)",
      "126:         assert newresponse is not response",
      "127:         assert newresponse.body.startswith(b\"<!DOCTYPE\")",
      "128:         assert \"Content-Encoding\" not in newresponse.headers",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "373:         self.assertStatsEqual(\"httpcompression/response_count\", None)",
      "374:         self.assertStatsEqual(\"httpcompression/response_bytes\", None)",
      "377: class HttpCompressionSubclassTest(TestCase):",
      "378:     def test_init_missing_stats(self):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "375:     def _test_compression_bomb_setting(self, compression_id):",
      "376:         settings = {\"DOWNLOAD_MAXSIZE\": 10_000_000}",
      "377:         crawler = get_crawler(Spider, settings_dict=settings)",
      "378:         spider = crawler._create_spider(\"scrapytest.org\")",
      "379:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "380:         mw.open_spider(spider)",
      "382:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "383:         self.assertRaises(",
      "384:             IgnoreRequest,",
      "385:             mw.process_response,",
      "386:             response.request,",
      "387:             response,",
      "388:             spider,",
      "389:         )",
      "391:     def test_compression_bomb_setting_br(self):",
      "392:         try:",
      "393:             import brotli  # noqa: F401",
      "394:         except ImportError:",
      "395:             raise SkipTest(\"no brotli\")",
      "396:         self._test_compression_bomb_setting(\"br\")",
      "398:     def test_compression_bomb_setting_deflate(self):",
      "399:         self._test_compression_bomb_setting(\"deflate\")",
      "401:     def test_compression_bomb_setting_gzip(self):",
      "402:         self._test_compression_bomb_setting(\"gzip\")",
      "404:     def test_compression_bomb_setting_zstd(self):",
      "405:         self._test_compression_bomb_setting(\"zstd\")",
      "407:     def _test_compression_bomb_spider_attr(self, compression_id):",
      "408:         class DownloadMaxSizeSpider(Spider):",
      "409:             download_maxsize = 10_000_000",
      "411:         crawler = get_crawler(DownloadMaxSizeSpider)",
      "412:         spider = crawler._create_spider(\"scrapytest.org\")",
      "413:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "414:         mw.open_spider(spider)",
      "416:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "417:         self.assertRaises(",
      "418:             IgnoreRequest,",
      "419:             mw.process_response,",
      "420:             response.request,",
      "421:             response,",
      "422:             spider,",
      "423:         )",
      "425:     def test_compression_bomb_spider_attr_br(self):",
      "426:         try:",
      "427:             import brotli  # noqa: F401",
      "428:         except ImportError:",
      "429:             raise SkipTest(\"no brotli\")",
      "430:         self._test_compression_bomb_spider_attr(\"br\")",
      "432:     def test_compression_bomb_spider_attr_deflate(self):",
      "433:         self._test_compression_bomb_spider_attr(\"deflate\")",
      "435:     def test_compression_bomb_spider_attr_gzip(self):",
      "436:         self._test_compression_bomb_spider_attr(\"gzip\")",
      "438:     def test_compression_bomb_spider_attr_zstd(self):",
      "439:         self._test_compression_bomb_spider_attr(\"zstd\")",
      "441:     def _test_compression_bomb_request_meta(self, compression_id):",
      "442:         crawler = get_crawler(Spider)",
      "443:         spider = crawler._create_spider(\"scrapytest.org\")",
      "444:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "445:         mw.open_spider(spider)",
      "447:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "448:         response.meta[\"download_maxsize\"] = 10_000_000",
      "449:         self.assertRaises(",
      "450:             IgnoreRequest,",
      "451:             mw.process_response,",
      "452:             response.request,",
      "453:             response,",
      "454:             spider,",
      "455:         )",
      "457:     def test_compression_bomb_request_meta_br(self):",
      "458:         try:",
      "459:             import brotli  # noqa: F401",
      "460:         except ImportError:",
      "461:             raise SkipTest(\"no brotli\")",
      "462:         self._test_compression_bomb_request_meta(\"br\")",
      "464:     def test_compression_bomb_request_meta_deflate(self):",
      "465:         self._test_compression_bomb_request_meta(\"deflate\")",
      "467:     def test_compression_bomb_request_meta_gzip(self):",
      "468:         self._test_compression_bomb_request_meta(\"gzip\")",
      "470:     def test_compression_bomb_request_meta_zstd(self):",
      "471:         self._test_compression_bomb_request_meta(\"zstd\")",
      "473:     def _test_download_warnsize_setting(self, compression_id):",
      "474:         settings = {\"DOWNLOAD_WARNSIZE\": 10_000_000}",
      "475:         crawler = get_crawler(Spider, settings_dict=settings)",
      "476:         spider = crawler._create_spider(\"scrapytest.org\")",
      "477:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "478:         mw.open_spider(spider)",
      "479:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "481:         with LogCapture(",
      "482:             \"scrapy.downloadermiddlewares.httpcompression\",",
      "483:             propagate=False,",
      "484:             level=WARNING,",
      "485:         ) as log:",
      "486:             mw.process_response(response.request, response, spider)",
      "487:         log.check(",
      "488:             (",
      "489:                 \"scrapy.downloadermiddlewares.httpcompression\",",
      "490:                 \"WARNING\",",
      "491:                 (",
      "492:                     \"<200 http://scrapytest.org/> body size after \"",
      "493:                     \"decompression (11511612 B) is larger than the download \"",
      "494:                     \"warning size (10000000 B).\"",
      "495:                 ),",
      "496:             ),",
      "497:         )",
      "499:     def test_download_warnsize_setting_br(self):",
      "500:         try:",
      "501:             import brotli  # noqa: F401",
      "502:         except ImportError:",
      "503:             raise SkipTest(\"no brotli\")",
      "504:         self._test_download_warnsize_setting(\"br\")",
      "506:     def test_download_warnsize_setting_deflate(self):",
      "507:         self._test_download_warnsize_setting(\"deflate\")",
      "509:     def test_download_warnsize_setting_gzip(self):",
      "510:         self._test_download_warnsize_setting(\"gzip\")",
      "512:     def test_download_warnsize_setting_zstd(self):",
      "513:         self._test_download_warnsize_setting(\"zstd\")",
      "515:     def _test_download_warnsize_spider_attr(self, compression_id):",
      "516:         class DownloadWarnSizeSpider(Spider):",
      "517:             download_warnsize = 10_000_000",
      "519:         crawler = get_crawler(DownloadWarnSizeSpider)",
      "520:         spider = crawler._create_spider(\"scrapytest.org\")",
      "521:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "522:         mw.open_spider(spider)",
      "523:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "525:         with LogCapture(",
      "526:             \"scrapy.downloadermiddlewares.httpcompression\",",
      "527:             propagate=False,",
      "528:             level=WARNING,",
      "529:         ) as log:",
      "530:             mw.process_response(response.request, response, spider)",
      "531:         log.check(",
      "532:             (",
      "533:                 \"scrapy.downloadermiddlewares.httpcompression\",",
      "534:                 \"WARNING\",",
      "535:                 (",
      "536:                     \"<200 http://scrapytest.org/> body size after \"",
      "537:                     \"decompression (11511612 B) is larger than the download \"",
      "538:                     \"warning size (10000000 B).\"",
      "539:                 ),",
      "540:             ),",
      "541:         )",
      "543:     def test_download_warnsize_spider_attr_br(self):",
      "544:         try:",
      "545:             import brotli  # noqa: F401",
      "546:         except ImportError:",
      "547:             raise SkipTest(\"no brotli\")",
      "548:         self._test_download_warnsize_spider_attr(\"br\")",
      "550:     def test_download_warnsize_spider_attr_deflate(self):",
      "551:         self._test_download_warnsize_spider_attr(\"deflate\")",
      "553:     def test_download_warnsize_spider_attr_gzip(self):",
      "554:         self._test_download_warnsize_spider_attr(\"gzip\")",
      "556:     def test_download_warnsize_spider_attr_zstd(self):",
      "557:         self._test_download_warnsize_spider_attr(\"zstd\")",
      "559:     def _test_download_warnsize_request_meta(self, compression_id):",
      "560:         crawler = get_crawler(Spider)",
      "561:         spider = crawler._create_spider(\"scrapytest.org\")",
      "562:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "563:         mw.open_spider(spider)",
      "564:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "565:         response.meta[\"download_warnsize\"] = 10_000_000",
      "567:         with LogCapture(",
      "568:             \"scrapy.downloadermiddlewares.httpcompression\",",
      "569:             propagate=False,",
      "570:             level=WARNING,",
      "571:         ) as log:",
      "572:             mw.process_response(response.request, response, spider)",
      "573:         log.check(",
      "574:             (",
      "575:                 \"scrapy.downloadermiddlewares.httpcompression\",",
      "576:                 \"WARNING\",",
      "577:                 (",
      "578:                     \"<200 http://scrapytest.org/> body size after \"",
      "579:                     \"decompression (11511612 B) is larger than the download \"",
      "580:                     \"warning size (10000000 B).\"",
      "581:                 ),",
      "582:             ),",
      "583:         )",
      "585:     def test_download_warnsize_request_meta_br(self):",
      "586:         try:",
      "587:             import brotli  # noqa: F401",
      "588:         except ImportError:",
      "589:             raise SkipTest(\"no brotli\")",
      "590:         self._test_download_warnsize_request_meta(\"br\")",
      "592:     def test_download_warnsize_request_meta_deflate(self):",
      "593:         self._test_download_warnsize_request_meta(\"deflate\")",
      "595:     def test_download_warnsize_request_meta_gzip(self):",
      "596:         self._test_download_warnsize_request_meta(\"gzip\")",
      "598:     def test_download_warnsize_request_meta_zstd(self):",
      "599:         self._test_download_warnsize_request_meta(\"zstd\")",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "393:             (",
      "394:                 (",
      "395:                     \"HttpCompressionMiddleware subclasses must either modify \"",
      "398:                 ),",
      "399:             ),",
      "400:         )",
      "",
      "[Removed Lines]",
      "396:                     \"their '__init__' method to support a 'stats' parameter \"",
      "397:                     \"or reimplement the 'from_crawler' method.\"",
      "",
      "[Added Lines]",
      "621:                     \"their '__init__' method to support a 'crawler' parameter \"",
      "622:                     \"or reimplement their 'from_crawler' method.\"",
      "",
      "---------------"
    ],
    "tests/test_spider.py||tests/test_spider.py": [
      "File: tests/test_spider.py -> tests/test_spider.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import inspect",
      "3: import warnings",
      "4: from io import BytesIO",
      "5: from typing import Any",
      "6: from unittest import mock",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: from logging import WARNING",
      "6: from pathlib import Path",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25: )",
      "26: from scrapy.spiders.init import InitSpider",
      "27: from scrapy.utils.test import get_crawler",
      "31: class SpiderTest(unittest.TestCase):",
      "",
      "[Removed Lines]",
      "28: from tests import get_testdata",
      "",
      "[Added Lines]",
      "30: from tests import get_testdata, tests_datadir",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "489:     GZBODY = f.getvalue()",
      "491:     def assertSitemapBody(self, response, body):",
      "493:         self.assertEqual(spider._get_sitemap_body(response), body)",
      "495:     def test_get_sitemap_body(self):",
      "",
      "[Removed Lines]",
      "492:         spider = self.spider_class(\"example.com\")",
      "",
      "[Added Lines]",
      "494:         crawler = get_crawler()",
      "495:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "507:             url=\"http://www.example.com/sitemap\",",
      "508:             body=self.GZBODY,",
      "509:             headers={\"content-type\": \"application/gzip\"},",
      "510:         )",
      "511:         self.assertSitemapBody(r, self.BODY)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "513:             request=Request(\"http://www.example.com/sitemap\"),",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "515:         self.assertSitemapBody(r, self.BODY)",
      "517:     def test_get_sitemap_body_xml_url_compressed(self):",
      "519:         self.assertSitemapBody(r, self.BODY)",
      "521:         # .xml.gz but body decoded by HttpCompression middleware already",
      "",
      "[Removed Lines]",
      "518:         r = Response(url=\"http://www.example.com/sitemap.xml.gz\", body=self.GZBODY)",
      "",
      "[Added Lines]",
      "522:         r = Response(",
      "523:             url=\"http://www.example.com/sitemap.xml.gz\",",
      "524:             body=self.GZBODY,",
      "525:             request=Request(\"http://www.example.com/sitemap\"),",
      "526:         )",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "692:             [\"http://www.example.com/sitemap2.xml\"],",
      "693:         )",
      "696: class DeprecationTest(unittest.TestCase):",
      "697:     def test_crawl_spider(self):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "703:     def test_compression_bomb_setting(self):",
      "704:         settings = {\"DOWNLOAD_MAXSIZE\": 10_000_000}",
      "705:         crawler = get_crawler(settings_dict=settings)",
      "706:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
      "707:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "708:         body = body_path.read_bytes()",
      "709:         request = Request(url=\"https://example.com\")",
      "710:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "711:         self.assertIsNone(spider._get_sitemap_body(response))",
      "713:     def test_compression_bomb_spider_attr(self):",
      "714:         class DownloadMaxSizeSpider(self.spider_class):",
      "715:             download_maxsize = 10_000_000",
      "717:         crawler = get_crawler()",
      "718:         spider = DownloadMaxSizeSpider.from_crawler(crawler, \"example.com\")",
      "719:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "720:         body = body_path.read_bytes()",
      "721:         request = Request(url=\"https://example.com\")",
      "722:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "723:         self.assertIsNone(spider._get_sitemap_body(response))",
      "725:     def test_compression_bomb_request_meta(self):",
      "726:         crawler = get_crawler()",
      "727:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
      "728:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "729:         body = body_path.read_bytes()",
      "730:         request = Request(",
      "731:             url=\"https://example.com\", meta={\"download_maxsize\": 10_000_000}",
      "732:         )",
      "733:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "734:         self.assertIsNone(spider._get_sitemap_body(response))",
      "736:     def test_download_warnsize_setting(self):",
      "737:         settings = {\"DOWNLOAD_WARNSIZE\": 10_000_000}",
      "738:         crawler = get_crawler(settings_dict=settings)",
      "739:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
      "740:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "741:         body = body_path.read_bytes()",
      "742:         request = Request(url=\"https://example.com\")",
      "743:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "744:         with LogCapture(",
      "745:             \"scrapy.spiders.sitemap\", propagate=False, level=WARNING",
      "746:         ) as log:",
      "747:             spider._get_sitemap_body(response)",
      "748:         log.check(",
      "749:             (",
      "750:                 \"scrapy.spiders.sitemap\",",
      "751:                 \"WARNING\",",
      "752:                 (",
      "753:                     \"<200 https://example.com> body size after decompression \"",
      "754:                     \"(11511612 B) is larger than the download warning size \"",
      "755:                     \"(10000000 B).\"",
      "756:                 ),",
      "757:             ),",
      "758:         )",
      "760:     def test_download_warnsize_spider_attr(self):",
      "761:         class DownloadWarnSizeSpider(self.spider_class):",
      "762:             download_warnsize = 10_000_000",
      "764:         crawler = get_crawler()",
      "765:         spider = DownloadWarnSizeSpider.from_crawler(crawler, \"example.com\")",
      "766:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "767:         body = body_path.read_bytes()",
      "768:         request = Request(",
      "769:             url=\"https://example.com\", meta={\"download_warnsize\": 10_000_000}",
      "770:         )",
      "771:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "772:         with LogCapture(",
      "773:             \"scrapy.spiders.sitemap\", propagate=False, level=WARNING",
      "774:         ) as log:",
      "775:             spider._get_sitemap_body(response)",
      "776:         log.check(",
      "777:             (",
      "778:                 \"scrapy.spiders.sitemap\",",
      "779:                 \"WARNING\",",
      "780:                 (",
      "781:                     \"<200 https://example.com> body size after decompression \"",
      "782:                     \"(11511612 B) is larger than the download warning size \"",
      "783:                     \"(10000000 B).\"",
      "784:                 ),",
      "785:             ),",
      "786:         )",
      "788:     def test_download_warnsize_request_meta(self):",
      "789:         crawler = get_crawler()",
      "790:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
      "791:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "792:         body = body_path.read_bytes()",
      "793:         request = Request(",
      "794:             url=\"https://example.com\", meta={\"download_warnsize\": 10_000_000}",
      "795:         )",
      "796:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "797:         with LogCapture(",
      "798:             \"scrapy.spiders.sitemap\", propagate=False, level=WARNING",
      "799:         ) as log:",
      "800:             spider._get_sitemap_body(response)",
      "801:         log.check(",
      "802:             (",
      "803:                 \"scrapy.spiders.sitemap\",",
      "804:                 \"WARNING\",",
      "805:                 (",
      "806:                     \"<200 https://example.com> body size after decompression \"",
      "807:                     \"(11511612 B) is larger than the download warning size \"",
      "808:                     \"(10000000 B).\"",
      "809:                 ),",
      "810:             ),",
      "811:         )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "150d96764b5a455c75315596ca8ba5ded0f416dd",
      "candidate_info": {
        "commit_hash": "150d96764b5a455c75315596ca8ba5ded0f416dd",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/150d96764b5a455c75315596ca8ba5ded0f416dd",
        "files": [
          "docs/faq.rst",
          "docs/news.rst",
          "scrapy/spiders/feed.py",
          "scrapy/utils/iterators.py",
          "tests/test_utils_iterators.py",
          "tests/test_utils_response.py"
        ],
        "message": "Deprecate xmliter in favor of xmliter_lxml",
        "before_after_code_files": [
          "scrapy/spiders/feed.py||scrapy/spiders/feed.py",
          "scrapy/utils/iterators.py||scrapy/utils/iterators.py",
          "tests/test_utils_iterators.py||tests/test_utils_iterators.py",
          "tests/test_utils_response.py||tests/test_utils_response.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scrapy/spiders/feed.py||scrapy/spiders/feed.py": [
          "File: scrapy/spiders/feed.py -> scrapy/spiders/feed.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from scrapy.exceptions import NotConfigured, NotSupported",
          "8: from scrapy.selector import Selector",
          "9: from scrapy.spiders import Spider",
          "11: from scrapy.utils.spider import iterate_spider_output",
          "",
          "[Removed Lines]",
          "10: from scrapy.utils.iterators import csviter, xmliter",
          "",
          "[Added Lines]",
          "10: from scrapy.utils.iterators import csviter, xmliter_lxml",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:         return self.parse_nodes(response, nodes)",
          "86:     def _iternodes(self, response):",
          "88:             self._register_namespaces(node)",
          "89:             yield node",
          "",
          "[Removed Lines]",
          "87:         for node in xmliter(response, self.itertag):",
          "",
          "[Added Lines]",
          "87:         for node in xmliter_lxml(response, self.itertag):",
          "",
          "---------------"
        ],
        "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
          "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     cast,",
          "18:     overload,",
          "19: )",
          "21: from lxml import etree",
          "23: from scrapy.http import Response, TextResponse",
          "24: from scrapy.selector import Selector",
          "25: from scrapy.utils.python import re_rsearch, to_unicode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: from warnings import warn",
          "23: from packaging.version import Version",
          "25: from scrapy.exceptions import ScrapyDeprecationWarning",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: logger = logging.getLogger(__name__)",
          "33: def xmliter(",
          "34:     obj: Union[Response, str, bytes], nodename: str",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: _LXML_VERSION = Version(etree.__version__)",
          "36: _LXML_HUGE_TREE_VERSION = Version(\"4.2\")",
          "37: _ITERPARSE_KWARGS = {}",
          "38: if _LXML_VERSION >= _LXML_HUGE_TREE_VERSION:",
          "39:     _ITERPARSE_KWARGS[\"huge_tree\"] = True",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     - a unicode string",
          "42:     - a string encoded as utf-8",
          "43:     \"\"\"",
          "44:     nodename_patt = re.escape(nodename)",
          "46:     DOCUMENT_HEADER_RE = re.compile(r\"<\\?xml[^>]+>\\s*\", re.S)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     warn(",
          "54:         (",
          "55:             \"xmliter is deprecated and its use strongly discouraged because \"",
          "56:             \"it is vulnerable to ReDoS attacks. Use xmliter_lxml instead. See \"",
          "57:             \"https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9\"",
          "58:         ),",
          "59:         ScrapyDeprecationWarning,",
          "60:         stacklevel=2,",
          "61:     )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:         reader,",
          "88:         encoding=reader.encoding,",
          "89:         events=(\"start-ns\",),",
          "91:     )",
          "92:     for event, (_prefix, _namespace) in ns_iterator:",
          "93:         if _prefix != node_prefix:",
          "",
          "[Removed Lines]",
          "90:         huge_tree=True,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:         reader,",
          "112:         tag=tag,",
          "113:         encoding=reader.encoding,",
          "115:     )",
          "116:     selxpath = \"//\" + (f\"{prefix}:{nodename}\" if namespace else nodename)",
          "117:     for _, node in iterable:",
          "",
          "[Removed Lines]",
          "114:         huge_tree=True,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/test_utils_iterators.py||tests/test_utils_iterators.py": [
          "File: tests/test_utils_iterators.py -> tests/test_utils_iterators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from twisted.trial import unittest",
          "3: from scrapy.http import Response, TextResponse, XmlResponse",
          "4: from scrapy.utils.iterators import _body_or_str, csviter, xmliter, xmliter_lxml",
          "5: from tests import get_testdata",
          "11:     def test_xmliter(self):",
          "12:         body = b\"\"\"",
          "13:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "",
          "[Removed Lines]",
          "8: class XmliterTestCase(unittest.TestCase):",
          "9:     xmliter = staticmethod(xmliter)",
          "",
          "[Added Lines]",
          "1: import pytest",
          "4: from scrapy.exceptions import ScrapyDeprecationWarning",
          "10: class XmliterBaseTestCase:",
          "11:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:             attrs, [(\"001\", [\"Name 1\"], [\"Type 1\"]), (\"002\", [\"Name 2\"], [\"Type 2\"])]",
          "40:         )",
          "42:     def test_xmliter_unusual_node(self):",
          "43:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "44:             <root>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:         ]",
          "53:         self.assertEqual(nodenames, [[\"matchme...\"]])",
          "55:     def test_xmliter_unicode(self):",
          "56:         # example taken from https://github.com/scrapy/scrapy/issues/1665",
          "57:         body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:                 [(\"26\", [\"-\"], [\"80\"]), (\"21\", [\"Ab\"], [\"76\"]), (\"27\", [\"A\"], [\"27\"])],",
          "112:             )",
          "114:     def test_xmliter_text(self):",
          "115:         body = (",
          "116:             '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:             [[\"one\"], [\"two\"]],",
          "123:         )",
          "125:     def test_xmliter_namespaces(self):",
          "126:         body = b\"\"\"",
          "127:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:         self.assertEqual(node.xpath(\"id/text()\").getall(), [])",
          "162:         self.assertEqual(node.xpath(\"price/text()\").getall(), [])",
          "164:     def test_xmliter_namespaced_nodename(self):",
          "165:         body = b\"\"\"",
          "166:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "189:             [\"http://www.mydummycompany.com/images/item1.jpg\"],",
          "190:         )",
          "192:     def test_xmliter_namespaced_nodename_missing(self):",
          "193:         body = b\"\"\"",
          "194:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "213:         with self.assertRaises(StopIteration):",
          "214:             next(my_iter)",
          "216:     def test_xmliter_exception(self):",
          "217:         body = (",
          "218:             '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "226:         self.assertRaises(StopIteration, next, iter)",
          "228:     def test_xmliter_objtype_exception(self):",
          "229:         i = self.xmliter(42, \"product\")",
          "230:         self.assertRaises(TypeError, next, i)",
          "232:     def test_xmliter_encoding(self):",
          "233:         body = (",
          "234:             b'<?xml version=\"1.0\" encoding=\"ISO-8859-9\"?>\\n'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "241:     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "243:         )",
          "247:     xmliter = staticmethod(xmliter_lxml)",
          "249:     def test_xmliter_iterate_namespace(self):",
          "",
          "[Removed Lines]",
          "246: class LxmlXmliterTestCase(XmliterTestCase):",
          "",
          "[Added Lines]",
          "256: class XmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
          "257:     xmliter = staticmethod(xmliter)",
          "259:     def test_deprecation(self):",
          "260:         body = b\"\"\"",
          "261:             <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "262:             <products>",
          "263:               <product></product>",
          "264:             </products>",
          "265:         \"\"\"",
          "266:         with pytest.warns(",
          "267:             ScrapyDeprecationWarning,",
          "268:             match=\"xmliter\",",
          "269:         ):",
          "270:             next(self.xmliter(body, \"product\"))",
          "273: class LxmlXmliterTestCase(XmliterBaseTestCase, unittest.TestCase):",
          "",
          "---------------"
        ],
        "tests/test_utils_response.py||tests/test_utils_response.py": [
          "File: tests/test_utils_response.py -> tests/test_utils_response.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:             r5, _openfunc=check_base_url",
          "204:         ), \"Inject unique base url with conditional comment\"",
          "",
          "[Removed Lines]",
          "207: @pytest.mark.slow",
          "208: def test_open_in_browser_redos_comment():",
          "209:     MAX_CPU_TIME = 30",
          "211:     # Exploit input from",
          "212:     # https://makenowjust-labs.github.io/recheck/playground/",
          "213:     # for /<!--.*?-->/ (old pattern to remove comments).",
          "214:     body = b\"-><!--\\x00\" * (int(DOWNLOAD_MAXSIZE / 7) - 10) + b\"->\\n<!---->\"",
          "216:     response = HtmlResponse(\"https://example.com\", body=body)",
          "218:     start_time = process_time()",
          "220:     open_in_browser(response, lambda url: True)",
          "222:     end_time = process_time()",
          "223:     assert (end_time - start_time) < MAX_CPU_TIME",
          "226: @pytest.mark.slow",
          "227: def test_open_in_browser_redos_head():",
          "228:     MAX_CPU_TIME = 15",
          "230:     # Exploit input from",
          "231:     # https://makenowjust-labs.github.io/recheck/playground/",
          "232:     # for /(<head(?:>|\\s.*?>))/ (old pattern to find the head element).",
          "233:     body = b\"<head\\t\" * int(DOWNLOAD_MAXSIZE / 6)",
          "235:     response = HtmlResponse(\"https://example.com\", body=body)",
          "237:     start_time = process_time()",
          "239:     open_in_browser(response, lambda url: True)",
          "241:     end_time = process_time()",
          "242:     assert (end_time - start_time) < MAX_CPU_TIME",
          "",
          "[Added Lines]",
          "206:     @pytest.mark.slow",
          "207:     def test_open_in_browser_redos_comment(self):",
          "208:         MAX_CPU_TIME = 30",
          "210:         # Exploit input from",
          "211:         # https://makenowjust-labs.github.io/recheck/playground/",
          "212:         # for /<!--.*?-->/ (old pattern to remove comments).",
          "213:         body = b\"-><!--\\x00\" * (int(DOWNLOAD_MAXSIZE / 7) - 10) + b\"->\\n<!---->\"",
          "215:         response = HtmlResponse(\"https://example.com\", body=body)",
          "217:         start_time = process_time()",
          "219:         open_in_browser(response, lambda url: True)",
          "221:         end_time = process_time()",
          "222:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
          "224:     @pytest.mark.slow",
          "225:     def test_open_in_browser_redos_head(self):",
          "226:         MAX_CPU_TIME = 15",
          "228:         # Exploit input from",
          "229:         # https://makenowjust-labs.github.io/recheck/playground/",
          "230:         # for /(<head(?:>|\\s.*?>))/ (old pattern to find the head element).",
          "231:         body = b\"<head\\t\" * int(DOWNLOAD_MAXSIZE / 6)",
          "233:         response = HtmlResponse(\"https://example.com\", body=body)",
          "235:         start_time = process_time()",
          "237:         open_in_browser(response, lambda url: True)",
          "239:         end_time = process_time()",
          "240:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a73c6c90c5984292d39a0a9d4be86e792d81cb4",
      "candidate_info": {
        "commit_hash": "8a73c6c90c5984292d39a0a9d4be86e792d81cb4",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/8a73c6c90c5984292d39a0a9d4be86e792d81cb4",
        "files": [
          "scrapy/downloadermiddlewares/httpcompression.py"
        ],
        "message": "Fix HttpCompressionMiddleware backward compatibility",
        "before_after_code_files": [
          "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py"
          ],
          "candidate": [
            "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
          "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     def __init__(self, stats=None, *, crawler=None):",
          "41:         if not crawler:",
          "44:             return",
          "45:         self.stats = crawler.stats",
          "46:         self._max_size = crawler.settings.getint(\"DOWNLOAD_MAXSIZE\")",
          "",
          "[Removed Lines]",
          "42:             if stats:",
          "43:                 self.stats = stats",
          "",
          "[Added Lines]",
          "42:             self.stats = stats",
          "43:             self._max_size = 1073741824",
          "44:             self._warn_size = 33554432",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a49c8762dd163b60cc73c4486a662471cfa7ac7d",
      "candidate_info": {
        "commit_hash": "a49c8762dd163b60cc73c4486a662471cfa7ac7d",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/a49c8762dd163b60cc73c4486a662471cfa7ac7d",
        "files": [
          "scrapy/utils/iterators.py"
        ],
        "message": "Avoid calling iterparse twice",
        "before_after_code_files": [
          "scrapy/utils/iterators.py||scrapy/utils/iterators.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scrapy/utils/iterators.py||scrapy/utils/iterators.py": [
          "File: scrapy/utils/iterators.py -> scrapy/utils/iterators.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     List,",
          "13:     Literal,",
          "14:     Optional,",
          "16:     Union,",
          "17:     cast,",
          "18:     overload,",
          "",
          "[Removed Lines]",
          "15:     Tuple,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:         yield Selector(text=nodetext, type=\"xml\")",
          "118: def xmliter_lxml(",
          "119:     obj: Union[Response, str, bytes],",
          "120:     nodename: str,",
          "121:     namespace: Optional[str] = None,",
          "122:     prefix: str = \"x\",",
          "123: ) -> Generator[Selector, Any, None]:",
          "127:     reader: \"SupportsReadClose[bytes]\" = _StreamReader(obj)",
          "128:     tag = f\"{{{namespace}}}{nodename}\" if namespace else nodename",
          "129:     iterable = etree.iterparse(",
          "130:         reader,",
          "132:         encoding=reader.encoding,",
          "134:     )",
          "135:     selxpath = \"//\" + (f\"{prefix}:{nodename}\" if namespace else nodename)",
          "137:         nodetext = etree.tostring(node, encoding=\"unicode\")",
          "138:         node.clear()",
          "139:         xs = Selector(text=nodetext, type=\"xml\")",
          "",
          "[Removed Lines]",
          "100: def _resolve_xml_namespace(element_name: str, data: bytes) -> Tuple[str, str]:",
          "101:     if \":\" not in element_name:",
          "102:         return element_name, None, None",
          "103:     reader: \"SupportsReadClose[bytes]\" = _StreamReader(data)",
          "104:     input_prefix, element_name = element_name.split(\":\", maxsplit=1)",
          "105:     ns_iterator = etree.iterparse(",
          "106:         reader,",
          "107:         encoding=reader.encoding,",
          "108:         events=(\"start-ns\",),",
          "110:     )",
          "111:     for event, (prefix, namespace) in ns_iterator:",
          "112:         if prefix != input_prefix:",
          "113:             continue",
          "114:         return element_name, prefix, namespace",
          "115:     return f\"{input_prefix}:{element_name}\", None, None",
          "124:     if not namespace:",
          "125:         nodename, prefix, namespace = _resolve_xml_namespace(nodename, obj)",
          "131:         tag=tag,",
          "136:     for _, node in iterable:",
          "",
          "[Added Lines]",
          "110:         events=(\"end\", \"start-ns\"),",
          "114:     needs_namespace_resolution = not namespace and \":\" in nodename",
          "115:     if needs_namespace_resolution:",
          "116:         prefix, nodename = nodename.split(\":\", maxsplit=1)",
          "117:     for event, data in iterable:",
          "118:         if event == \"start-ns\":",
          "119:             if needs_namespace_resolution:",
          "120:                 _prefix, _namespace = data",
          "121:                 if _prefix != prefix:",
          "122:                     continue",
          "123:                 namespace = _namespace",
          "124:                 needs_namespace_resolution = False",
          "125:                 selxpath = f\"//{prefix}:{nodename}\"",
          "126:                 tag = f\"{{{namespace}}}{nodename}\"",
          "127:             continue",
          "128:         node = data",
          "129:         if node.tag != tag:",
          "130:             continue",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb74badd1bd66c59a63268c52342507c76d290b8",
      "candidate_info": {
        "commit_hash": "bb74badd1bd66c59a63268c52342507c76d290b8",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/bb74badd1bd66c59a63268c52342507c76d290b8",
        "files": [
          "scrapy/downloadermiddlewares/httpcompression.py"
        ],
        "message": "spider \u2192 mw",
        "before_after_code_files": [
          "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py"
          ],
          "candidate": [
            "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
          "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:                 \"reimplement their 'from_crawler' method.\",",
          "62:                 ScrapyDeprecationWarning,",
          "63:             )",
          "71:     def open_spider(self, spider):",
          "72:         if hasattr(spider, \"download_maxsize\"):",
          "",
          "[Removed Lines]",
          "64:             spider = cls()",
          "65:             spider.stats = crawler.stats",
          "66:             spider._max_size = crawler.settings.getint(\"DOWNLOAD_MAXSIZE\")",
          "67:             spider._warn_size = crawler.settings.getint(\"DOWNLOAD_WARNSIZE\")",
          "68:             crawler.signals.connect(spider.open_spider, signals.spider_opened)",
          "69:             return spider",
          "",
          "[Added Lines]",
          "64:             mw = cls()",
          "65:             mw.stats = crawler.stats",
          "66:             mw._max_size = crawler.settings.getint(\"DOWNLOAD_MAXSIZE\")",
          "67:             mw._warn_size = crawler.settings.getint(\"DOWNLOAD_WARNSIZE\")",
          "68:             crawler.signals.connect(mw.open_spider, signals.spider_opened)",
          "69:             return mw",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "538192916f496eb21846d797a6feff5c05f501cf",
      "candidate_info": {
        "commit_hash": "538192916f496eb21846d797a6feff5c05f501cf",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/538192916f496eb21846d797a6feff5c05f501cf",
        "files": [
          "scrapy/crawler.py",
          "scrapy/utils/ossignal.py",
          "scrapy/utils/testproc.py",
          "setup.py",
          "tests/CrawlerProcess/sleeping.py",
          "tests/requirements.txt",
          "tests/test_command_shell.py",
          "tests/test_crawler.py"
        ],
        "message": "Merge pull request #6064 from wRAR/signals-proper\n\nRefactor installing signals.",
        "before_after_code_files": [
          "scrapy/crawler.py||scrapy/crawler.py",
          "scrapy/utils/ossignal.py||scrapy/utils/ossignal.py",
          "scrapy/utils/testproc.py||scrapy/utils/testproc.py",
          "setup.py||setup.py",
          "tests/CrawlerProcess/sleeping.py||tests/CrawlerProcess/sleeping.py",
          "tests/test_command_shell.py||tests/test_command_shell.py",
          "tests/test_crawler.py||tests/test_crawler.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scrapy/crawler.py||scrapy/crawler.py": [
          "File: scrapy/crawler.py -> scrapy/crawler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "404:         :param bool stop_after_crawl: stop or not the reactor when all",
          "405:             crawlers have finished",
          "409:         \"\"\"",
          "410:         from twisted.internet import reactor",
          "",
          "[Removed Lines]",
          "407:         :param bool install_signal_handlers: whether to install the shutdown",
          "408:             handlers (default: True)",
          "",
          "[Added Lines]",
          "407:         :param bool install_signal_handlers: whether to install the OS signal",
          "408:             handlers from Twisted and Scrapy (default: True)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "416:                 return",
          "417:             d.addBoth(self._stop_reactor)",
          "421:         resolver_class = load_object(self.settings[\"DNS_RESOLVER\"])",
          "422:         resolver = create_instance(resolver_class, self.settings, self, reactor=reactor)",
          "423:         resolver.install_on_reactor()",
          "424:         tp = reactor.getThreadPool()",
          "425:         tp.adjustPoolsize(maxthreads=self.settings.getint(\"REACTOR_THREADPOOL_MAXSIZE\"))",
          "426:         reactor.addSystemEventTrigger(\"before\", \"shutdown\", self.stop)",
          "429:     def _graceful_stop_reactor(self) -> Deferred:",
          "430:         d = self.stop()",
          "",
          "[Removed Lines]",
          "419:         if install_signal_handlers:",
          "420:             install_shutdown_handlers(self._signal_shutdown)",
          "427:         reactor.run(installSignalHandlers=False)  # blocking call",
          "",
          "[Added Lines]",
          "425:         if install_signal_handlers:",
          "426:             reactor.addSystemEventTrigger(",
          "427:                 \"after\", \"startup\", install_shutdown_handlers, self._signal_shutdown",
          "428:             )",
          "429:         reactor.run(installSignalHandlers=install_signal_handlers)  # blocking call",
          "",
          "---------------"
        ],
        "scrapy/utils/ossignal.py||scrapy/utils/ossignal.py": [
          "File: scrapy/utils/ossignal.py -> scrapy/utils/ossignal.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     function: SignalHandlerT, override_sigint: bool = True",
          "20: ) -> None:",
          "21:     \"\"\"Install the given function as a signal handler for all common shutdown",
          "25:     \"\"\"",
          "29:     signal.signal(signal.SIGTERM, function)",
          "30:     if signal.getsignal(signal.SIGINT) == signal.default_int_handler or override_sigint:",
          "31:         signal.signal(signal.SIGINT, function)",
          "",
          "[Removed Lines]",
          "22:     signals (such as SIGINT, SIGTERM, etc). If override_sigint is ``False`` the",
          "23:     SIGINT handler won't be install if there is already a handler in place",
          "24:     (e.g.  Pdb)",
          "26:     from twisted.internet import reactor",
          "28:     reactor._handleSignals()",
          "",
          "[Added Lines]",
          "22:     signals (such as SIGINT, SIGTERM, etc). If ``override_sigint`` is ``False`` the",
          "23:     SIGINT handler won't be installed if there is already a handler in place",
          "24:     (e.g. Pdb)",
          "",
          "---------------"
        ],
        "scrapy/utils/testproc.py||scrapy/utils/testproc.py": [
          "File: scrapy/utils/testproc.py -> scrapy/utils/testproc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import os",
          "4: import sys",
          "7: from twisted.internet.defer import Deferred",
          "8: from twisted.internet.error import ProcessTerminated",
          "",
          "[Removed Lines]",
          "5: from typing import Iterable, Optional, Tuple, cast",
          "",
          "[Added Lines]",
          "5: from typing import Iterable, List, Optional, Tuple, cast",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:         env = os.environ.copy()",
          "27:         if settings is not None:",
          "28:             env[\"SCRAPY_SETTINGS_MODULE\"] = settings",
          "29:         cmd = self.prefix + [self.command] + list(args)",
          "30:         pp = TestProcessProtocol()",
          "32:         reactor.spawnProcess(pp, cmd[0], cmd, env=env, path=self.cwd)",
          "33:         return pp.deferred",
          "35:     def _process_finished(",
          "37:     ) -> Tuple[int, bytes, bytes]:",
          "38:         if pp.exitcode and check_code:",
          "39:             msg = f\"process {cmd} exit with code {pp.exitcode}\"",
          "",
          "[Removed Lines]",
          "31:         pp.deferred.addBoth(self._process_finished, cmd, check_code)",
          "36:         self, pp: TestProcessProtocol, cmd: str, check_code: bool",
          "",
          "[Added Lines]",
          "29:         assert self.command",
          "32:         pp.deferred.addCallback(self._process_finished, cmd, check_code)",
          "37:         self, pp: TestProcessProtocol, cmd: List[str], check_code: bool",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: install_requires = [",
          "11:     \"cryptography>=36.0.0\",",
          "12:     \"cssselect>=0.9.1\",",
          "13:     \"itemloaders>=1.0.1\",",
          "",
          "[Removed Lines]",
          "9:     # 23.8.0 incompatibility: https://github.com/scrapy/scrapy/issues/6024",
          "10:     \"Twisted>=18.9.0,<23.8.0\",",
          "",
          "[Added Lines]",
          "9:     \"Twisted>=18.9.0\",",
          "",
          "---------------"
        ],
        "tests/CrawlerProcess/sleeping.py||tests/CrawlerProcess/sleeping.py": [
          "File: tests/CrawlerProcess/sleeping.py -> tests/CrawlerProcess/sleeping.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from twisted.internet.defer import Deferred",
          "3: import scrapy",
          "4: from scrapy.crawler import CrawlerProcess",
          "5: from scrapy.utils.defer import maybe_deferred_to_future",
          "8: class SleepingSpider(scrapy.Spider):",
          "9:     name = \"sleeping\"",
          "11:     start_urls = [\"data:,;\"]",
          "13:     async def parse(self, response):",
          "14:         from twisted.internet import reactor",
          "16:         d = Deferred()",
          "17:         reactor.callLater(3, d.callback, None)",
          "18:         await maybe_deferred_to_future(d)",
          "21: process = CrawlerProcess(settings={})",
          "23: process.crawl(SleepingSpider)",
          "24: process.start()",
          "",
          "---------------"
        ],
        "tests/test_command_shell.py||tests/test_command_shell.py": [
          "File: tests/test_command_shell.py -> tests/test_command_shell.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from pathlib import Path",
          "3: from twisted.internet import defer",
          "4: from twisted.trial import unittest",
          "6: from scrapy.utils.testproc import ProcessTest",
          "7: from scrapy.utils.testsite import SiteTest",
          "8: from tests import NON_EXISTING_RESOLVABLE, tests_datadir",
          "11: class ShellTest(ProcessTest, SiteTest, unittest.TestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import sys",
          "2: from io import BytesIO",
          "5: from pexpect.popen_spawn import PopenSpawn",
          "12: from tests.mockserver import MockServer",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:         args = [\"-c\", code, \"--set\", f\"TWISTED_REACTOR={reactor_path}\"]",
          "134:         _, _, err = yield self.execute(args, check_code=True)",
          "135:         self.assertNotIn(b\"RuntimeError: There is no current event loop in thread\", err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142: class InteractiveShellTest(unittest.TestCase):",
          "143:     def test_fetch(self):",
          "144:         args = (",
          "145:             sys.executable,",
          "146:             \"-m\",",
          "147:             \"scrapy.cmdline\",",
          "148:             \"shell\",",
          "149:         )",
          "150:         logfile = BytesIO()",
          "151:         p = PopenSpawn(args, timeout=5)",
          "152:         p.logfile_read = logfile",
          "153:         p.expect_exact(\"Available Scrapy objects\")",
          "154:         with MockServer() as mockserver:",
          "155:             p.sendline(f\"fetch('{mockserver.url('/')}')\")",
          "156:             p.sendline(\"type(response)\")",
          "157:             p.expect_exact(\"HtmlResponse\")",
          "158:         p.sendeof()",
          "159:         p.wait()",
          "160:         logfile.seek(0)",
          "161:         self.assertNotIn(\"Traceback\", logfile.read().decode())",
          "",
          "---------------"
        ],
        "tests/test_crawler.py||tests/test_crawler.py": [
          "File: tests/test_crawler.py -> tests/test_crawler.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import logging",
          "2: import os",
          "3: import platform",
          "4: import subprocess",
          "5: import sys",
          "6: import warnings",
          "7: from pathlib import Path",
          "9: import pytest",
          "10: from packaging.version import parse as parse_version",
          "11: from pytest import mark, raises",
          "12: from twisted.internet import defer",
          "13: from twisted.trial import unittest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import signal",
          "9: from typing import List",
          "13: from pexpect.popen_spawn import PopenSpawn",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "289:     script_dir: Path",
          "290:     cwd = os.getcwd()",
          "293:         script_path = self.script_dir / script_name",
          "295:         p = subprocess.Popen(",
          "296:             args,",
          "297:             env=get_mockserver_env(),",
          "",
          "[Removed Lines]",
          "292:     def run_script(self, script_name: str, *script_args):",
          "294:         args = [sys.executable, str(script_path)] + list(script_args)",
          "",
          "[Added Lines]",
          "295:     def get_script_args(self, script_name: str, *script_args: str) -> List[str]:",
          "297:         return [sys.executable, str(script_path)] + list(script_args)",
          "299:     def run_script(self, script_name: str, *script_args: str) -> str:",
          "300:         args = self.get_script_args(script_name, *script_args)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "517:         self.assertIn(\"Spider closed (finished)\", log)",
          "518:         self.assertIn(\"The value of FOO is 42\", log)",
          "521: class CrawlerRunnerSubprocess(ScriptRunnerMixin, unittest.TestCase):",
          "522:     script_dir = Path(__file__).parent.resolve() / \"CrawlerRunner\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:     def test_shutdown_graceful(self):",
          "527:         sig = signal.SIGINT if sys.platform != \"win32\" else signal.SIGBREAK",
          "528:         args = self.get_script_args(\"sleeping.py\")",
          "529:         p = PopenSpawn(args, timeout=5)",
          "530:         p.expect_exact(\"Spider opened\")",
          "531:         p.expect_exact(\"Crawled (200)\")",
          "532:         p.kill(sig)",
          "533:         p.expect_exact(\"shutting down gracefully\")",
          "534:         p.expect_exact(\"Spider closed (shutdown)\")",
          "535:         p.wait()",
          "537:     def test_shutdown_forced(self):",
          "538:         sig = signal.SIGINT if sys.platform != \"win32\" else signal.SIGBREAK",
          "539:         args = self.get_script_args(\"sleeping.py\")",
          "540:         p = PopenSpawn(args, timeout=5)",
          "541:         p.expect_exact(\"Spider opened\")",
          "542:         p.expect_exact(\"Crawled (200)\")",
          "543:         p.kill(sig)",
          "544:         p.expect_exact(\"shutting down gracefully\")",
          "545:         p.kill(sig)",
          "546:         p.expect_exact(\"forcing unclean shutdown\")",
          "547:         p.wait()",
          "",
          "---------------"
        ]
      }
    }
  ]
}