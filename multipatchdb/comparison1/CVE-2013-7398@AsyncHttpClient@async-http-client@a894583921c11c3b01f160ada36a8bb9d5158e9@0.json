{
  "cve_id": "CVE-2013-7398",
  "cve_desc": "main/java/com/ning/http/client/AsyncHttpClientConfig.java in Async Http Client (aka AHC or async-http-client) before 1.9.0 does not require a hostname match during verification of X.509 certificates, which allows man-in-the-middle attackers to spoof HTTPS servers via an arbitrary valid certificate.",
  "repo": "AsyncHttpClient/async-http-client",
  "patch_hash": "a894583921c11c3b01f160ada36a8bb9d5158e96",
  "patch_info": {
    "commit_hash": "a894583921c11c3b01f160ada36a8bb9d5158e96",
    "repo": "AsyncHttpClient/async-http-client",
    "commit_url": "https://github.com/AsyncHttpClient/async-http-client/commit/a894583921c11c3b01f160ada36a8bb9d5158e9",
    "files": [
      "src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java",
      "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java",
      "src/main/java/com/ning/http/util/HostnameChecker.java",
      "src/main/java/com/ning/http/util/ProxyHostnameChecker.java",
      "src/test/resources/ssltest-cacerts.jks",
      "src/test/resources/ssltest-keystore.jks"
    ],
    "message": "Use a hostname verifier that does hostname verification, backport #510, close #197",
    "before_after_code_files": [
      "src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java||src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java",
      "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java||src/main/java/com/ning/http/util/DefaultHostnameVerifier.java",
      "src/main/java/com/ning/http/util/HostnameChecker.java||src/main/java/com/ning/http/util/HostnameChecker.java",
      "src/main/java/com/ning/http/util/ProxyHostnameChecker.java||src/main/java/com/ning/http/util/ProxyHostnameChecker.java"
    ]
  },
  "patch_diff": {
    "src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java||src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java": [
      "File: src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java -> src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: package com.ning.http.client;",
      "16: import static com.ning.http.util.MiscUtils.getBoolean;",
      "18: import javax.net.ssl.HostnameVerifier;",
      "20: public final class AsyncHttpClientConfigDefaults {",
      "",
      "[Removed Lines]",
      "15: import com.ning.http.util.AllowAllHostnameVerifier;",
      "",
      "[Added Lines]",
      "17: import com.ning.http.util.DefaultHostnameVerifier;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118:     }",
      "120:     public static HostnameVerifier defaultHostnameVerifier() {",
      "122:     }",
      "123: }",
      "",
      "[Removed Lines]",
      "121:         return new AllowAllHostnameVerifier();",
      "",
      "[Added Lines]",
      "122:         return new DefaultHostnameVerifier();",
      "",
      "---------------"
    ],
    "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java||src/main/java/com/ning/http/util/DefaultHostnameVerifier.java": [
      "File: src/main/java/com/ning/http/util/DefaultHostnameVerifier.java -> src/main/java/com/ning/http/util/DefaultHostnameVerifier.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: package com.ning.http.util;",
      "9: import javax.net.ssl.HostnameVerifier;",
      "10: import javax.net.ssl.SSLPeerUnverifiedException;",
      "11: import javax.net.ssl.SSLSession;",
      "12: import javax.security.auth.kerberos.KerberosPrincipal;",
      "13: import java.security.Principal;",
      "14: import java.security.cert.Certificate;",
      "15: import java.security.cert.CertificateException;",
      "16: import java.security.cert.X509Certificate;",
      "17: import java.util.logging.Level;",
      "18: import java.util.logging.Logger;",
      "32: public class DefaultHostnameVerifier implements HostnameVerifier {",
      "34:     private HostnameChecker checker;",
      "36:     private HostnameVerifier extraHostnameVerifier;",
      "39:     private static final Logger log = Logger.getLogger(DefaultHostnameVerifier.class.getName());",
      "44:     public DefaultHostnameVerifier() {",
      "45:         this.checker = new ProxyHostnameChecker();",
      "46:     }",
      "53:     public DefaultHostnameVerifier(HostnameChecker checker) {",
      "54:         this.checker = checker;",
      "55:     }",
      "62:     public DefaultHostnameVerifier(HostnameVerifier extraHostnameVerifier) {",
      "63:         this.checker = new ProxyHostnameChecker();",
      "64:         this.extraHostnameVerifier = extraHostnameVerifier;",
      "65:     }",
      "73:     public DefaultHostnameVerifier(HostnameChecker checker, HostnameVerifier extraHostnameVerifier) {",
      "74:         this.checker = checker;",
      "75:         this.extraHostnameVerifier = extraHostnameVerifier;",
      "76:     }",
      "85:     private boolean hostnameMatches(String hostname, SSLSession session) {",
      "86:         log.log(Level.FINE, \"hostname = {0}, session = {1}\", new Object[] { hostname, Base64.encode(session.getId()) });",
      "88:         try {",
      "89:             final Certificate[] peerCertificates = session.getPeerCertificates();",
      "90:             if (peerCertificates.length == 0) {",
      "91:                 log.log(Level.FINE, \"No peer certificates\");",
      "92:                 return false;",
      "93:             }",
      "95:             if (peerCertificates[0] instanceof X509Certificate) {",
      "96:                 X509Certificate peerCertificate = (X509Certificate) peerCertificates[0];",
      "97:                 log.log(Level.FINE, \"peerCertificate = {0}\", peerCertificate);",
      "98:                 try {",
      "99:                     checker.match(hostname, peerCertificate);",
      "101:                     return true;",
      "102:                 } catch (CertificateException ex) {",
      "103:                     log.log(Level.FINE, \"Certificate does not match hostname\", ex);",
      "104:                 }",
      "105:             } else {",
      "106:                 log.log(Level.FINE, \"Peer does not have any certificates or they aren't X.509\");",
      "107:             }",
      "108:             return false;",
      "109:         } catch (SSLPeerUnverifiedException ex) {",
      "110:             log.log(Level.FINE, \"Not using certificates for peers, try verifying the principal\");",
      "111:             try {",
      "112:                 Principal peerPrincipal = session.getPeerPrincipal();",
      "113:                 log.log(Level.FINE, \"peerPrincipal = {0}\", peerPrincipal);",
      "114:                 if (peerPrincipal instanceof KerberosPrincipal) {",
      "115:                     return checker.match(hostname, (KerberosPrincipal) peerPrincipal);",
      "116:                 } else {",
      "117:                     log.log(Level.FINE, \"Can't verify principal, not Kerberos\");",
      "118:                 }",
      "119:             } catch (SSLPeerUnverifiedException ex2) {",
      "121:                 log.log(Level.FINE, \"Can't verify principal, no principal\", ex2);",
      "122:             }",
      "123:             return false;",
      "124:         }",
      "125:     }",
      "135:     public boolean verify(String hostname, SSLSession session) {",
      "136:         if (hostnameMatches(hostname, session)) {",
      "137:             return true;",
      "138:         } else {",
      "139:             return extraHostnameVerifier != null && extraHostnameVerifier.verify(hostname, session);",
      "140:         }",
      "141:     }",
      "142: }",
      "",
      "---------------"
    ],
    "src/main/java/com/ning/http/util/HostnameChecker.java||src/main/java/com/ning/http/util/HostnameChecker.java": [
      "File: src/main/java/com/ning/http/util/HostnameChecker.java -> src/main/java/com/ning/http/util/HostnameChecker.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: package com.ning.http.util;",
      "15: import java.security.Principal;",
      "16: import java.security.cert.CertificateException;",
      "17: import java.security.cert.X509Certificate;",
      "22: public interface HostnameChecker {",
      "24:     public void match(String hostname, X509Certificate peerCertificate) throws CertificateException;",
      "26:     public boolean match(String hostname, Principal principal);",
      "27: }",
      "",
      "---------------"
    ],
    "src/main/java/com/ning/http/util/ProxyHostnameChecker.java||src/main/java/com/ning/http/util/ProxyHostnameChecker.java": [
      "File: src/main/java/com/ning/http/util/ProxyHostnameChecker.java -> src/main/java/com/ning/http/util/ProxyHostnameChecker.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: package com.ning.http.util;",
      "15: import java.lang.reflect.InvocationTargetException;",
      "16: import java.lang.reflect.Method;",
      "17: import java.security.Principal;",
      "18: import java.security.cert.CertificateException;",
      "19: import java.security.cert.X509Certificate;",
      "24: public class ProxyHostnameChecker implements HostnameChecker {",
      "26:     public final static byte TYPE_TLS = 1;",
      "28:     private final Object checker = getHostnameChecker();",
      "30:     public ProxyHostnameChecker() {",
      "31:     }",
      "33:     private Object getHostnameChecker() {",
      "34:         final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();",
      "35:         try {",
      "36:             final Class<Object> hostnameCheckerClass = (Class<Object>) classLoader.loadClass(\"sun.security.util.HostnameChecker\");",
      "37:             final Method instanceMethod = hostnameCheckerClass.getMethod(\"getInstance\", Byte.TYPE);",
      "38:             return instanceMethod.invoke(null, TYPE_TLS);",
      "39:         } catch (ClassNotFoundException e) {",
      "40:             throw new IllegalStateException(e);",
      "41:         } catch (NoSuchMethodException e) {",
      "42:             throw new IllegalStateException(e);",
      "43:         } catch (InvocationTargetException e) {",
      "44:             throw new IllegalStateException(e);",
      "45:         } catch (IllegalAccessException e) {",
      "46:             throw new IllegalStateException(e);",
      "47:         }",
      "48:     }",
      "50:     public void match(String hostname, X509Certificate peerCertificate) throws CertificateException {",
      "51:         try {",
      "52:             final Class<?> hostnameCheckerClass = checker.getClass();",
      "53:             final Method checkMethod = hostnameCheckerClass.getMethod(\"match\", String.class, X509Certificate.class);",
      "54:             checkMethod.invoke(checker, hostname, peerCertificate);",
      "55:         } catch (NoSuchMethodException e) {",
      "56:             throw new IllegalStateException(e);",
      "57:         } catch (InvocationTargetException e) {",
      "58:             Throwable t = e.getCause();",
      "59:             if (t instanceof CertificateException) {",
      "60:                 throw (CertificateException) t;",
      "61:             } else {",
      "62:                 throw new IllegalStateException(e);",
      "63:             }",
      "64:         } catch (IllegalAccessException e) {",
      "65:             throw new IllegalStateException(e);",
      "66:         }",
      "67:     }",
      "69:     public boolean match(String hostname, Principal principal) {",
      "70:         try {",
      "71:             final Class<?> hostnameCheckerClass = checker.getClass();",
      "72:             final Method checkMethod = hostnameCheckerClass.getMethod(\"match\", String.class, Principal.class);",
      "73:             return (Boolean) checkMethod.invoke(null, hostname, principal);",
      "74:         } catch (NoSuchMethodException e) {",
      "75:             throw new IllegalStateException(e);",
      "76:         } catch (InvocationTargetException e) {",
      "77:             throw new IllegalStateException(e);",
      "78:         } catch (IllegalAccessException e) {",
      "79:             throw new IllegalStateException(e);",
      "80:         }",
      "81:     }",
      "83: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "04eb3e01004816582c19a2e383b91f31b72d9df5",
      "candidate_info": {
        "commit_hash": "04eb3e01004816582c19a2e383b91f31b72d9df5",
        "repo": "AsyncHttpClient/async-http-client",
        "commit_url": "https://github.com/AsyncHttpClient/async-http-client/commit/04eb3e01004816582c19a2e383b91f31b72d9df5",
        "files": [
          "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java"
        ],
        "message": "DefaultHostnameVerifier should be using slf4j, not jul, close #779",
        "before_after_code_files": [
          "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java||src/main/java/com/ning/http/util/DefaultHostnameVerifier.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java||src/main/java/com/ning/http/util/DefaultHostnameVerifier.java"
          ],
          "candidate": [
            "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java||src/main/java/com/ning/http/util/DefaultHostnameVerifier.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java||src/main/java/com/ning/http/util/DefaultHostnameVerifier.java": [
          "File: src/main/java/com/ning/http/util/DefaultHostnameVerifier.java -> src/main/java/com/ning/http/util/DefaultHostnameVerifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: package com.ning.http.util;",
          "9: import javax.net.ssl.HostnameVerifier;",
          "10: import javax.net.ssl.SSLPeerUnverifiedException;",
          "11: import javax.net.ssl.SSLSession;",
          "12: import javax.security.auth.kerberos.KerberosPrincipal;",
          "13: import java.security.Principal;",
          "14: import java.security.cert.Certificate;",
          "15: import java.security.cert.CertificateException;",
          "16: import java.security.cert.X509Certificate;",
          "",
          "[Removed Lines]",
          "17: import java.util.logging.Level;",
          "18: import java.util.logging.Logger;",
          "",
          "[Added Lines]",
          "9: import org.slf4j.Logger;",
          "10: import org.slf4j.LoggerFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     private HostnameVerifier extraHostnameVerifier;",
          "",
          "[Removed Lines]",
          "39:     private static final Logger log = Logger.getLogger(DefaultHostnameVerifier.class.getName());",
          "",
          "[Added Lines]",
          "41:     private static final Logger log = LoggerFactory.getLogger(DefaultHostnameVerifier.class.getName());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:     private boolean hostnameMatches(String hostname, SSLSession session) {",
          "88:         try {",
          "89:             final Certificate[] peerCertificates = session.getPeerCertificates();",
          "90:             if (peerCertificates.length == 0) {",
          "92:                 return false;",
          "93:             }",
          "95:             if (peerCertificates[0] instanceof X509Certificate) {",
          "96:                 X509Certificate peerCertificate = (X509Certificate) peerCertificates[0];",
          "98:                 try {",
          "99:                     checker.match(hostname, peerCertificate);",
          "101:                     return true;",
          "102:                 } catch (CertificateException ex) {",
          "104:                 }",
          "105:             } else {",
          "107:             }",
          "108:             return false;",
          "109:         } catch (SSLPeerUnverifiedException ex) {",
          "111:             try {",
          "112:                 Principal peerPrincipal = session.getPeerPrincipal();",
          "114:                 if (peerPrincipal instanceof KerberosPrincipal) {",
          "115:                     return checker.match(hostname, (KerberosPrincipal) peerPrincipal);",
          "116:                 } else {",
          "118:                 }",
          "119:             } catch (SSLPeerUnverifiedException ex2) {",
          "122:             }",
          "123:             return false;",
          "124:         }",
          "",
          "[Removed Lines]",
          "86:         log.log(Level.FINE, \"hostname = {0}, session = {1}\", new Object[] { hostname, Base64.encode(session.getId()) });",
          "91:                 log.log(Level.FINE, \"No peer certificates\");",
          "97:                 log.log(Level.FINE, \"peerCertificate = {0}\", peerCertificate);",
          "103:                     log.log(Level.FINE, \"Certificate does not match hostname\", ex);",
          "106:                 log.log(Level.FINE, \"Peer does not have any certificates or they aren't X.509\");",
          "110:             log.log(Level.FINE, \"Not using certificates for peers, try verifying the principal\");",
          "113:                 log.log(Level.FINE, \"peerPrincipal = {0}\", peerPrincipal);",
          "117:                     log.log(Level.FINE, \"Can't verify principal, not Kerberos\");",
          "121:                 log.log(Level.FINE, \"Can't verify principal, no principal\", ex2);",
          "",
          "[Added Lines]",
          "88:         log.debug(\"hostname = {}, session = {}\",hostname, Base64.encode(session.getId()));",
          "93:                 log.debug(\"No peer certificates\");",
          "99:                 log.debug(\"peerCertificate = {0}\", peerCertificate);",
          "105:                     log.debug(\"Certificate does not match hostname\", ex);",
          "108:                 log.debug(\"Peer does not have any certificates or they aren't X.509\");",
          "112:             log.debug(\"Not using certificates for peers, try verifying the principal\");",
          "115:                 log.debug(\"peerPrincipal = {0}\", peerPrincipal);",
          "119:                     log.debug(\"Can't verify principal, not Kerberos\");",
          "123:                 log.debug(\"Can't verify principal, no principal\", ex2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9134f89fa45c69fc6dc8c671a82c86daa3e36352",
      "candidate_info": {
        "commit_hash": "9134f89fa45c69fc6dc8c671a82c86daa3e36352",
        "repo": "AsyncHttpClient/async-http-client",
        "commit_url": "https://github.com/AsyncHttpClient/async-http-client/commit/9134f89fa45c69fc6dc8c671a82c86daa3e36352",
        "files": [
          "src/main/java/com/ning/http/client/AsyncHttpClientConfig.java",
          "src/main/java/com/ning/http/client/AsyncHttpClientConfigBean.java",
          "src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java"
        ],
        "message": "Have one central place for configuration defaults, close #565\n\nMy great grandchildren will still be cleaning up this library\u2026",
        "before_after_code_files": [
          "src/main/java/com/ning/http/client/AsyncHttpClientConfig.java||src/main/java/com/ning/http/client/AsyncHttpClientConfig.java",
          "src/main/java/com/ning/http/client/AsyncHttpClientConfigBean.java||src/main/java/com/ning/http/client/AsyncHttpClientConfigBean.java",
          "src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java||src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java||src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java"
          ],
          "candidate": [
            "src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java||src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/ning/http/client/AsyncHttpClientConfig.java||src/main/java/com/ning/http/client/AsyncHttpClientConfig.java": [
          "File: src/main/java/com/ning/http/client/AsyncHttpClientConfig.java -> src/main/java/com/ning/http/client/AsyncHttpClientConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package com.ning.http.client;",
          "20: import com.ning.http.client.date.TimeConverter;",
          "21: import com.ning.http.client.filter.IOExceptionFilter;",
          "22: import com.ning.http.client.filter.RequestFilter;",
          "23: import com.ning.http.client.filter.ResponseFilter;",
          "25: import com.ning.http.util.ProxyUtils;",
          "27: import javax.net.ssl.HostnameVerifier;",
          "",
          "[Removed Lines]",
          "18: import static com.ning.http.util.MiscUtil.getBoolean;",
          "24: import com.ning.http.util.AllowAllHostnameVerifier;",
          "",
          "[Added Lines]",
          "18: import static com.ning.http.client.AsyncHttpClientConfigDefaults.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: public class AsyncHttpClientConfig {",
          "59:     protected int maxTotalConnections;",
          "60:     protected int maxConnectionPerHost;",
          "61:     protected int connectionTimeOutInMs;",
          "",
          "[Removed Lines]",
          "57:     protected final static String ASYNC_CLIENT = AsyncHttpClientConfig.class.getName() + \".\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:     protected int idleConnectionTimeoutInMs;",
          "65:     protected int requestTimeoutInMs;",
          "66:     protected boolean redirectEnabled;",
          "68:     protected boolean compressionEnabled;",
          "69:     protected String userAgent;",
          "70:     protected boolean allowPoolingConnection;",
          "",
          "[Removed Lines]",
          "67:     protected int maxDefaultRedirects;",
          "",
          "[Added Lines]",
          "64:     protected int maxRedirects;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:                                   int requestTimeoutInMs,",
          "103:                                   int connectionMaxLifeTimeInMs,",
          "104:                                   boolean redirectEnabled,",
          "106:                                   boolean compressionEnabled,",
          "107:                                   String userAgent,",
          "108:                                   boolean keepAlive,",
          "",
          "[Removed Lines]",
          "105:                                   int maxDefaultRedirects,",
          "",
          "[Added Lines]",
          "102:                                   int maxRedirects,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:         this.requestTimeoutInMs = requestTimeoutInMs;",
          "136:         this.maxConnectionLifeTimeInMs = connectionMaxLifeTimeInMs;",
          "137:         this.redirectEnabled = redirectEnabled;",
          "139:         this.compressionEnabled = compressionEnabled;",
          "140:         this.userAgent = userAgent;",
          "141:         this.allowPoolingConnection = keepAlive;",
          "",
          "[Removed Lines]",
          "138:         this.maxDefaultRedirects = maxDefaultRedirects;",
          "",
          "[Added Lines]",
          "135:         this.maxRedirects = maxRedirects;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "247:     public int getMaxRedirects() {",
          "249:     }",
          "",
          "[Removed Lines]",
          "248:         return maxDefaultRedirects;",
          "",
          "[Added Lines]",
          "245:         return maxRedirects;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "528:     public static class Builder {",
          "545:         private ExecutorService applicationThreadPool;",
          "546:         private ProxyServerSelector proxyServerSelector = null;",
          "547:         private SSLContext sslContext;",
          "",
          "[Removed Lines]",
          "529:         private int defaultMaxTotalConnections = Integer.getInteger(ASYNC_CLIENT + \"defaultMaxTotalConnections\", -1);",
          "530:         private int defaultMaxConnectionPerHost = Integer.getInteger(ASYNC_CLIENT + \"defaultMaxConnectionsPerHost\", -1);",
          "531:         private int defaultConnectionTimeOutInMs = Integer.getInteger(ASYNC_CLIENT + \"defaultConnectionTimeoutInMS\", 60 * 1000);",
          "532:         private int defaultWebsocketIdleTimeoutInMs = Integer.getInteger(ASYNC_CLIENT + \"defaultWebsocketTimoutInMS\", 15 * 60 * 1000);",
          "533:         private int defaultIdleConnectionInPoolTimeoutInMs = Integer.getInteger(ASYNC_CLIENT + \"defaultIdleConnectionInPoolTimeoutInMS\", 60 * 1000);",
          "534:         private int defaultIdleConnectionTimeoutInMs = Integer.getInteger(ASYNC_CLIENT + \"defaultIdleConnectionTimeoutInMS\", 60 * 1000);",
          "535:         private int defaultRequestTimeoutInMs = Integer.getInteger(ASYNC_CLIENT + \"defaultRequestTimeoutInMS\", 60 * 1000);",
          "536:         private int defaultMaxConnectionLifeTimeInMs = Integer.getInteger(ASYNC_CLIENT + \"defaultMaxConnectionLifeTimeInMs\", -1);",
          "537:         private boolean redirectEnabled = Boolean.getBoolean(ASYNC_CLIENT + \"defaultRedirectsEnabled\");",
          "538:         private int maxDefaultRedirects = Integer.getInteger(ASYNC_CLIENT + \"defaultMaxRedirects\", 5);",
          "539:         private boolean compressionEnabled = Boolean.getBoolean(ASYNC_CLIENT + \"compressionEnabled\");",
          "540:         private String userAgent = System.getProperty(ASYNC_CLIENT + \"userAgent\", \"NING/1.0\");",
          "541:         private boolean useProxyProperties = Boolean.getBoolean(ASYNC_CLIENT + \"useProxyProperties\");",
          "542:         private boolean useProxySelector = Boolean.getBoolean(ASYNC_CLIENT + \"useProxySelector\");",
          "543:         private boolean allowPoolingConnection = true;",
          "544:         private boolean useRelativeURIsWithSSLProxies = getBoolean(ASYNC_CLIENT + \"useRelativeURIsWithSSLProxies\", true);",
          "",
          "[Added Lines]",
          "526:         private int maxTotalConnections = defaultMaxTotalConnections();",
          "527:         private int maxConnectionPerHost = defaultMaxConnectionPerHost();",
          "528:         private int connectionTimeOutInMs = defaultConnectionTimeOutInMs();",
          "529:         private int webSocketIdleTimeoutInMs = defaultWebSocketIdleTimeoutInMs();",
          "530:         private int idleConnectionInPoolTimeoutInMs = defaultIdleConnectionInPoolTimeoutInMs();",
          "531:         private int idleConnectionTimeoutInMs = defaultIdleConnectionTimeoutInMs();",
          "532:         private int requestTimeoutInMs = defaultRequestTimeoutInMs();",
          "533:         private int maxConnectionLifeTimeInMs = defaultMaxConnectionLifeTimeInMs();",
          "534:         private boolean redirectEnabled = defaultRedirectEnabled();",
          "535:         private int maxDefaultRedirects = defaultMaxRedirects();",
          "536:         private boolean compressionEnabled = defaultCompressionEnabled();",
          "537:         private String userAgent = defaultUserAgent();",
          "538:         private boolean useProxyProperties = defaultUseProxyProperties();",
          "539:         private boolean useProxySelector = defaultUseProxySelector();",
          "540:         private boolean allowPoolingConnection = defaultAllowPoolingConnection();",
          "541:         private boolean useRelativeURIsWithSSLProxies = defaultUseRelativeURIsWithSSLProxies();",
          "542:         private int requestCompressionLevel = defaultRequestCompressionLevel();",
          "543:         private int maxRequestRetry = defaultMaxRequestRetry();",
          "544:         private int ioThreadMultiplier = defaultIoThreadMultiplier();",
          "545:         private boolean allowSslConnectionPool = defaultAllowSslConnectionPool();",
          "546:         private boolean useRawUrl = defaultUseRawUrl();",
          "547:         private boolean removeQueryParamOnRedirect = defaultRemoveQueryParamOnRedirect();",
          "548:         private boolean strict302Handling = defaultStrict302Handling();",
          "549:         private HostnameVerifier hostnameVerifier = defaultHostnameVerifier();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "549:         private AsyncHttpProviderConfig<?, ?> providerConfig;",
          "550:         private ConnectionsPool<?, ?> connectionsPool;",
          "551:         private Realm realm;",
          "554:         private final List<RequestFilter> requestFilters = new LinkedList<RequestFilter>();",
          "555:         private final List<ResponseFilter> responseFilters = new LinkedList<ResponseFilter>();",
          "556:         private final List<IOExceptionFilter> ioExceptionFilters = new LinkedList<IOExceptionFilter>();",
          "563:         private TimeConverter timeConverter;",
          "565:         public Builder() {",
          "",
          "[Removed Lines]",
          "552:         private int requestCompressionLevel = -1;",
          "553:         private int maxRequestRetry = 5;",
          "557:         private boolean allowSslConnectionPool = true;",
          "558:         private boolean useRawUrl = false;",
          "559:         private boolean removeQueryParamOnRedirect = true;",
          "560:         private HostnameVerifier hostnameVerifier = new AllowAllHostnameVerifier();",
          "561:         private int ioThreadMultiplier = 2;",
          "562:         private boolean strict302Handling;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "576:             return this;",
          "577:         }",
          "587:             return this;",
          "588:         }",
          "598:             return this;",
          "599:         }",
          "610:             return this;",
          "611:         }",
          "622:             return this;",
          "623:         }",
          "",
          "[Removed Lines]",
          "574:         public Builder setMaximumConnectionsTotal(int defaultMaxTotalConnections) {",
          "575:             this.defaultMaxTotalConnections = defaultMaxTotalConnections;",
          "585:         public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {",
          "586:             this.defaultMaxConnectionPerHost = defaultMaxConnectionPerHost;",
          "596:         public Builder setConnectionTimeoutInMs(int defaultConnectionTimeOutInMs) {",
          "597:             this.defaultConnectionTimeOutInMs = defaultConnectionTimeOutInMs;",
          "608:         public Builder setWebSocketIdleTimeoutInMs(int defaultWebSocketIdleTimeoutInMs) {",
          "609:             this.defaultWebsocketIdleTimeoutInMs = defaultWebSocketIdleTimeoutInMs;",
          "620:         public Builder setIdleConnectionTimeoutInMs(int defaultIdleConnectionTimeoutInMs) {",
          "621:             this.defaultIdleConnectionTimeoutInMs = defaultIdleConnectionTimeoutInMs;",
          "",
          "[Added Lines]",
          "572:         public Builder setMaximumConnectionsTotal(int maxTotalConnections) {",
          "573:             this.maxTotalConnections = maxTotalConnections;",
          "583:         public Builder setMaximumConnectionsPerHost(int maxConnectionPerHost) {",
          "584:             this.maxConnectionPerHost = maxConnectionPerHost;",
          "594:         public Builder setConnectionTimeoutInMs(int connectionTimeOutInMs) {",
          "595:             this.connectionTimeOutInMs = connectionTimeOutInMs;",
          "606:         public Builder setWebSocketIdleTimeoutInMs(int webSocketIdleTimeoutInMs) {",
          "607:             this.webSocketIdleTimeoutInMs = webSocketIdleTimeoutInMs;",
          "618:         public Builder setIdleConnectionTimeoutInMs(int idleConnectionTimeoutInMs) {",
          "619:             this.idleConnectionTimeoutInMs = idleConnectionTimeoutInMs;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "636:             return this;",
          "637:         }",
          "647:             return this;",
          "648:         }",
          "",
          "[Removed Lines]",
          "634:         public Builder setIdleConnectionInPoolTimeoutInMs(int defaultIdleConnectionInPoolTimeoutInMs) {",
          "635:             this.defaultIdleConnectionInPoolTimeoutInMs = defaultIdleConnectionInPoolTimeoutInMs;",
          "645:         public Builder setRequestTimeoutInMs(int defaultRequestTimeoutInMs) {",
          "646:             this.defaultRequestTimeoutInMs = defaultRequestTimeoutInMs;",
          "",
          "[Added Lines]",
          "632:         public Builder setIdleConnectionInPoolTimeoutInMs(int idleConnectionInPoolTimeoutInMs) {",
          "633:             this.idleConnectionInPoolTimeoutInMs = idleConnectionInPoolTimeoutInMs;",
          "643:         public Builder setRequestTimeoutInMs(int requestTimeoutInMs) {",
          "644:             this.requestTimeoutInMs = requestTimeoutInMs;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1028:         public Builder setMaxConnectionLifeTimeInMs(int maxConnectionLifeTimeInMs) {",
          "1030:            return this;",
          "1031:         }",
          "",
          "[Removed Lines]",
          "1029:            this.defaultMaxConnectionLifeTimeInMs = maxConnectionLifeTimeInMs;",
          "",
          "[Added Lines]",
          "1027:            this.maxConnectionLifeTimeInMs = maxConnectionLifeTimeInMs;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1044:             allowPoolingConnection = prototype.getAllowPoolingConnection();",
          "1045:             providerConfig = prototype.getAsyncHttpProviderConfig();",
          "1046:             connectionsPool = prototype.getConnectionsPool();",
          "1052:             maxDefaultRedirects = prototype.getMaxRedirects();",
          "1054:             proxyServerSelector = prototype.getProxyServerSelector();",
          "1055:             realm = prototype.getRealm();",
          "1057:             sslContext = prototype.getSSLContext();",
          "1058:             sslEngineFactory = prototype.getSSLEngineFactory();",
          "1059:             userAgent = prototype.getUserAgent();",
          "",
          "[Removed Lines]",
          "1047:             defaultConnectionTimeOutInMs = prototype.getConnectionTimeoutInMs();",
          "1048:             defaultIdleConnectionInPoolTimeoutInMs = prototype.getIdleConnectionInPoolTimeoutInMs();",
          "1049:             defaultIdleConnectionTimeoutInMs = prototype.getIdleConnectionTimeoutInMs();",
          "1050:             defaultMaxConnectionPerHost = prototype.getMaxConnectionPerHost();",
          "1051:             defaultMaxConnectionLifeTimeInMs = prototype.getMaxConnectionLifeTimeInMs();",
          "1053:             defaultMaxTotalConnections = prototype.getMaxTotalConnections();",
          "1056:             defaultRequestTimeoutInMs = prototype.getRequestTimeoutInMs();",
          "",
          "[Added Lines]",
          "1045:             connectionTimeOutInMs = prototype.getConnectionTimeoutInMs();",
          "1046:             idleConnectionInPoolTimeoutInMs = prototype.getIdleConnectionInPoolTimeoutInMs();",
          "1047:             idleConnectionTimeoutInMs = prototype.getIdleConnectionTimeoutInMs();",
          "1048:             maxConnectionPerHost = prototype.getMaxConnectionPerHost();",
          "1049:             maxConnectionLifeTimeInMs = prototype.getMaxConnectionLifeTimeInMs();",
          "1051:             maxTotalConnections = prototype.getMaxTotalConnections();",
          "1054:             requestTimeoutInMs = prototype.getRequestTimeoutInMs();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1110:                 proxyServerSelector = ProxyServerSelector.NO_PROXY_SELECTOR;",
          "1111:             }",
          "1121:                     redirectEnabled,",
          "1122:                     maxDefaultRedirects,",
          "1123:                     compressionEnabled,",
          "",
          "[Removed Lines]",
          "1113:             return new AsyncHttpClientConfig(defaultMaxTotalConnections,",
          "1114:                     defaultMaxConnectionPerHost,",
          "1115:                     defaultConnectionTimeOutInMs,",
          "1116:                     defaultWebsocketIdleTimeoutInMs,",
          "1117:                     defaultIdleConnectionInPoolTimeoutInMs,",
          "1118:                     defaultIdleConnectionTimeoutInMs,",
          "1119:                     defaultRequestTimeoutInMs,",
          "1120:                     defaultMaxConnectionLifeTimeInMs,",
          "",
          "[Added Lines]",
          "1111:             return new AsyncHttpClientConfig(maxTotalConnections,",
          "1112:                     maxConnectionPerHost,",
          "1113:                     connectionTimeOutInMs,",
          "1114:                     webSocketIdleTimeoutInMs,",
          "1115:                     idleConnectionInPoolTimeoutInMs,",
          "1116:                     idleConnectionTimeoutInMs,",
          "1117:                     requestTimeoutInMs,",
          "1118:                     maxConnectionLifeTimeInMs,",
          "",
          "---------------"
        ],
        "src/main/java/com/ning/http/client/AsyncHttpClientConfigBean.java||src/main/java/com/ning/http/client/AsyncHttpClientConfigBean.java": [
          "File: src/main/java/com/ning/http/client/AsyncHttpClientConfigBean.java -> src/main/java/com/ning/http/client/AsyncHttpClientConfigBean.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: package com.ning.http.client;",
          "15: import com.ning.http.client.filter.IOExceptionFilter;",
          "16: import com.ning.http.client.filter.RequestFilter;",
          "17: import com.ning.http.client.filter.ResponseFilter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import static com.ning.http.client.AsyncHttpClientConfigDefaults.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: import javax.net.ssl.HostnameVerifier;",
          "21: import javax.net.ssl.SSLContext;",
          "23: import java.util.LinkedList;",
          "24: import java.util.concurrent.ExecutorService;",
          "25: import java.util.concurrent.Executors;",
          "",
          "[Removed Lines]",
          "22: import javax.net.ssl.SSLSession;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     }",
          "45:     void configureDefaults() {",
          "62:             proxyServerSelector = ProxyUtils.getJdkDefaultProxyServerSelector();",
          "64:             proxyServerSelector = ProxyUtils.createProxyServerSelector(System.getProperties());",
          "65:         }",
          "79:     }",
          "81:     void configureExecutors() {",
          "",
          "[Removed Lines]",
          "46:         maxTotalConnections = Integer.getInteger(ASYNC_CLIENT + \"defaultMaxTotalConnections\", -1);",
          "47:         maxConnectionPerHost = Integer.getInteger(ASYNC_CLIENT + \"defaultMaxConnectionsPerHost\", -1);",
          "48:         connectionTimeOutInMs = Integer.getInteger(ASYNC_CLIENT + \"defaultConnectionTimeoutInMS\", 60 * 1000);",
          "49:         idleConnectionInPoolTimeoutInMs = Integer.getInteger(ASYNC_CLIENT + \"defaultIdleConnectionInPoolTimeoutInMS\", 60 * 1000);",
          "50:         idleConnectionTimeoutInMs = Integer.getInteger(ASYNC_CLIENT + \"defaultIdleConnectionTimeoutInMS\", 60 * 1000);",
          "51:         requestTimeoutInMs = Integer.getInteger(ASYNC_CLIENT + \"defaultRequestTimeoutInMS\", 60 * 1000);",
          "52:         maxConnectionLifeTimeInMs = Integer.getInteger(ASYNC_CLIENT + \"defaultMaxConnectionLifeTimeInMs\", -1);",
          "53:         redirectEnabled = Boolean.getBoolean(ASYNC_CLIENT + \"defaultRedirectsEnabled\");",
          "54:         maxDefaultRedirects = Integer.getInteger(ASYNC_CLIENT + \"defaultMaxRedirects\", 5);",
          "55:         compressionEnabled = Boolean.getBoolean(ASYNC_CLIENT + \"compressionEnabled\");",
          "56:         userAgent = System.getProperty(ASYNC_CLIENT + \"userAgent\", \"NING/1.0\");",
          "57:         ioThreadMultiplier = Integer.getInteger(ASYNC_CLIENT + \"ioThreadMultiplier\", 2);",
          "59:         boolean useProxySelector = Boolean.getBoolean(ASYNC_CLIENT + \"useProxySelector\");",
          "60:         boolean useProxyProperties = Boolean.getBoolean(ASYNC_CLIENT + \"useProxyProperties\");",
          "61:         if (useProxySelector) {",
          "63:         } else if (useProxyProperties) {",
          "67:         allowPoolingConnection = true;",
          "68:         requestCompressionLevel = -1;",
          "69:         maxRequestRetry = 5;",
          "70:         allowSslConnectionPool = true;",
          "71:         useRawUrl = false;",
          "72:         removeQueryParamOnRedirect = true;",
          "73:         hostnameVerifier = new HostnameVerifier() {",
          "75:             public boolean verify(String s, SSLSession sslSession) {",
          "76:                 return true;",
          "77:             }",
          "78:         };",
          "",
          "[Added Lines]",
          "48:         maxTotalConnections = defaultMaxTotalConnections();",
          "49:         maxConnectionPerHost = defaultMaxConnectionPerHost();",
          "50:         connectionTimeOutInMs = defaultConnectionTimeOutInMs();",
          "51:         webSocketIdleTimeoutInMs = defaultWebSocketIdleTimeoutInMs();",
          "52:         idleConnectionInPoolTimeoutInMs = defaultIdleConnectionInPoolTimeoutInMs();",
          "53:         idleConnectionTimeoutInMs = defaultIdleConnectionTimeoutInMs();",
          "54:         requestTimeoutInMs = defaultRequestTimeoutInMs();",
          "55:         maxConnectionLifeTimeInMs = defaultMaxConnectionLifeTimeInMs();",
          "56:         redirectEnabled = defaultRedirectEnabled();",
          "57:         maxRedirects = defaultMaxRedirects();",
          "58:         compressionEnabled = defaultCompressionEnabled();",
          "59:         userAgent = defaultUserAgent();",
          "60:         allowPoolingConnection = defaultAllowPoolingConnection();",
          "61:         useRelativeURIsWithSSLProxies = defaultUseRelativeURIsWithSSLProxies();",
          "62:         requestCompressionLevel = defaultRequestCompressionLevel();",
          "63:         maxRequestRetry = defaultMaxRequestRetry();",
          "64:         ioThreadMultiplier = defaultIoThreadMultiplier();",
          "65:         allowSslConnectionPool = defaultAllowSslConnectionPool();",
          "66:         useRawUrl = defaultUseRawUrl();",
          "67:         removeQueryParamOnRedirect = defaultRemoveQueryParamOnRedirect();",
          "68:         strict302Handling = defaultStrict302Handling();",
          "69:         hostnameVerifier = defaultHostnameVerifier();",
          "71:         if (defaultUseProxySelector()) {",
          "73:         } else if (defaultUseProxyProperties()) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:         return this;",
          "134:     }",
          "138:         return this;",
          "139:     }",
          "",
          "[Removed Lines]",
          "136:     public AsyncHttpClientConfigBean setMaxDefaultRedirects(int maxDefaultRedirects) {",
          "137:         this.maxDefaultRedirects = maxDefaultRedirects;",
          "",
          "[Added Lines]",
          "133:     public AsyncHttpClientConfigBean setMaxRedirects(int maxRedirects) {",
          "134:         this.maxRedirects = maxRedirects;",
          "",
          "---------------"
        ],
        "src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java||src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java": [
          "File: src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java -> src/main/java/com/ning/http/client/AsyncHttpClientConfigDefaults.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: package com.ning.http.client;",
          "15: import com.ning.http.util.AllowAllHostnameVerifier;",
          "16: import static com.ning.http.util.MiscUtil.getBoolean;",
          "18: import javax.net.ssl.HostnameVerifier;",
          "20: public final class AsyncHttpClientConfigDefaults {",
          "22:     private AsyncHttpClientConfigDefaults() {",
          "23:     }",
          "25:     public static final String ASYNC_CLIENT = AsyncHttpClientConfig.class.getName() + \".\";",
          "27:     public static int defaultMaxTotalConnections() {",
          "28:         return Integer.getInteger(ASYNC_CLIENT + \"maxTotalConnections\", -1);",
          "29:     }",
          "31:     public static int defaultMaxConnectionPerHost() {",
          "32:         return Integer.getInteger(ASYNC_CLIENT + \"maxConnectionsPerHost\", -1);",
          "33:     }",
          "35:     public static int defaultConnectionTimeOutInMs() {",
          "36:         return Integer.getInteger(ASYNC_CLIENT + \"connectionTimeoutInMs\", 60 * 1000);",
          "37:     }",
          "39:     public static int defaultIdleConnectionInPoolTimeoutInMs() {",
          "40:         return Integer.getInteger(ASYNC_CLIENT + \"idleConnectionInPoolTimeoutInMs\", 60 * 1000);",
          "41:     }",
          "43:     public static int defaultIdleConnectionTimeoutInMs() {",
          "44:         return Integer.getInteger(ASYNC_CLIENT + \"idleConnectionTimeoutInMs\", 60 * 1000);",
          "45:     }",
          "47:     public static int defaultRequestTimeoutInMs() {",
          "48:         return Integer.getInteger(ASYNC_CLIENT + \"requestTimeoutInMs\", 60 * 1000);",
          "49:     }",
          "51:     public static int defaultWebSocketIdleTimeoutInMs() {",
          "52:         return Integer.getInteger(ASYNC_CLIENT + \"webSocketTimoutInMS\", 15 * 60 * 1000);",
          "53:     }",
          "55:     public static int defaultMaxConnectionLifeTimeInMs() {",
          "56:         return Integer.getInteger(ASYNC_CLIENT + \"maxConnectionLifeTimeInMs\", -1);",
          "57:     }",
          "59:     public static boolean defaultRedirectEnabled() {",
          "60:         return Boolean.getBoolean(ASYNC_CLIENT + \"redirectsEnabled\");",
          "61:     }",
          "63:     public static int defaultMaxRedirects() {",
          "64:         return Integer.getInteger(ASYNC_CLIENT + \"maxRedirects\", 5);",
          "65:     }",
          "67:     public static boolean defaultCompressionEnabled() {",
          "68:         return Boolean.getBoolean(ASYNC_CLIENT + \"compressionEnabled\");",
          "69:     }",
          "71:     public static String defaultUserAgent() {",
          "72:         return System.getProperty(ASYNC_CLIENT + \"userAgent\", \"NING/1.0\");",
          "73:     }",
          "75:     public static int defaultIoThreadMultiplier() {",
          "76:         return Integer.getInteger(ASYNC_CLIENT + \"ioThreadMultiplier\", 2);",
          "77:     }",
          "79:     public static boolean defaultUseProxySelector() {",
          "80:         return Boolean.getBoolean(ASYNC_CLIENT + \"useProxySelector\");",
          "81:     }",
          "83:     public static boolean defaultUseProxyProperties() {",
          "84:         return Boolean.getBoolean(ASYNC_CLIENT + \"useProxyProperties\");",
          "85:     }",
          "87:     public static boolean defaultStrict302Handling() {",
          "88:         return Boolean.getBoolean(ASYNC_CLIENT + \"strict302Handling\");",
          "89:     }",
          "91:     public static boolean defaultAllowPoolingConnection() {",
          "92:         return getBoolean(ASYNC_CLIENT + \"allowPoolingConnection\", true);",
          "93:     }",
          "95:     public static boolean defaultUseRelativeURIsWithSSLProxies() {",
          "96:         return getBoolean(ASYNC_CLIENT + \"useRelativeURIsWithSSLProxies\", true);",
          "97:     }",
          "100:     public static int defaultRequestCompressionLevel() {",
          "101:         return Integer.getInteger(ASYNC_CLIENT + \"requestCompressionLevel\", -1);",
          "102:     }",
          "104:     public static int defaultMaxRequestRetry() {",
          "105:         return Integer.getInteger(ASYNC_CLIENT + \"maxRequestRetry\", 5);",
          "106:     }",
          "108:     public static boolean defaultAllowSslConnectionPool() {",
          "109:         return getBoolean(ASYNC_CLIENT + \"allowSslConnectionPool\", true);",
          "110:     }",
          "112:     public static boolean defaultUseRawUrl() {",
          "113:         return Boolean.getBoolean(ASYNC_CLIENT + \"useRawUrl\");",
          "114:     }",
          "116:     public static boolean defaultRemoveQueryParamOnRedirect() {",
          "117:         return getBoolean(ASYNC_CLIENT + \"removeQueryParamOnRedirect\", true);",
          "118:     }",
          "120:     public static HostnameVerifier defaultHostnameVerifier() {",
          "121:         return new AllowAllHostnameVerifier();",
          "122:     }",
          "123: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b5b3e738431c71072f3868943bebf836cd1aca5",
      "candidate_info": {
        "commit_hash": "8b5b3e738431c71072f3868943bebf836cd1aca5",
        "repo": "AsyncHttpClient/async-http-client",
        "commit_url": "https://github.com/AsyncHttpClient/async-http-client/commit/8b5b3e738431c71072f3868943bebf836cd1aca5",
        "files": [
          "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java"
        ],
        "message": "Fix logs",
        "before_after_code_files": [
          "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java||src/main/java/com/ning/http/util/DefaultHostnameVerifier.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java||src/main/java/com/ning/http/util/DefaultHostnameVerifier.java"
          ],
          "candidate": [
            "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java||src/main/java/com/ning/http/util/DefaultHostnameVerifier.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/com/ning/http/util/DefaultHostnameVerifier.java||src/main/java/com/ning/http/util/DefaultHostnameVerifier.java": [
          "File: src/main/java/com/ning/http/util/DefaultHostnameVerifier.java -> src/main/java/com/ning/http/util/DefaultHostnameVerifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:             if (peerCertificates[0] instanceof X509Certificate) {",
          "98:                 X509Certificate peerCertificate = (X509Certificate) peerCertificates[0];",
          "100:                 try {",
          "101:                     checker.match(hostname, peerCertificate);",
          "",
          "[Removed Lines]",
          "99:                 log.debug(\"peerCertificate = {0}\", peerCertificate);",
          "",
          "[Added Lines]",
          "99:                 log.debug(\"peerCertificate = {}\", peerCertificate);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:             log.debug(\"Not using certificates for peers, try verifying the principal\");",
          "113:             try {",
          "114:                 Principal peerPrincipal = session.getPeerPrincipal();",
          "116:                 if (peerPrincipal instanceof KerberosPrincipal) {",
          "117:                     return checker.match(hostname, (KerberosPrincipal) peerPrincipal);",
          "118:                 } else {",
          "",
          "[Removed Lines]",
          "115:                 log.debug(\"peerPrincipal = {0}\", peerPrincipal);",
          "",
          "[Added Lines]",
          "115:                 log.debug(\"peerPrincipal = {}\", peerPrincipal);",
          "",
          "---------------"
        ]
      }
    }
  ]
}