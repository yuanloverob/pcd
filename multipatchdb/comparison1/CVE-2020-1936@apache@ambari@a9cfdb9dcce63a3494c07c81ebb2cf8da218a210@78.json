{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "97c84a7205c23a5efd17c2f0cab4e223d832b6c3",
      "candidate_info": {
        "commit_hash": "97c84a7205c23a5efd17c2f0cab4e223d832b6c3",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/97c84a7205c23a5efd17c2f0cab4e223d832b6c3",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java"
        ],
        "message": "[AMBARI-25186] Kerberos Client is unnecessarily installed via Blueprints when kerberos-env/kdc-type is none (payert) (#2866)\n\n* AMBARI-25186 add Kerberos client only if kdc_type is not none (payert)\n\nChange-Id: I3921f9dabeec26878c3c63a916234a188d37e322\n\n* AMBARI-25186 Refactor to extract isKerberosClientInstallAllowed() common method.\n\nChange-Id: Ifebac4341160a24a375e915dc604abff650eccf8\n\n* AMBARI-25186 fix import related checkstyle errors\n\nChange-Id: Id5e1018cf4ea57b61432b91f6d36ce2694cd0375\n\n* AMBARI-25186 fix imports\n\nChange-Id: I05579f5ac8afa4fb1959724fe4d5f4e9c95ab54f\n\n* AMBARI-25186 unit tests added\n\nChange-Id: I07a3bde016e3c0c435ba98fe89185f8593032de0\n\n* AMBARI-25186 constant is used for \"none\" kdc_type value\n\nChange-Id: I03a2c432b1fa77b421350e9e2ad2b98fd0a0945c",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java||ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java||ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java -> ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessor;",
          "44: import org.apache.ambari.server.configuration.Configuration;",
          "45: import org.apache.ambari.server.controller.AmbariServer;",
          "46: import org.apache.ambari.server.controller.RequestStatusResponse;",
          "47: import org.apache.ambari.server.controller.internal.ArtifactResourceProvider;",
          "48: import org.apache.ambari.server.controller.internal.BaseClusterRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.apache.ambari.server.controller.KerberosHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: import org.apache.ambari.server.orm.entities.SettingEntity;",
          "72: import org.apache.ambari.server.orm.entities.StageEntity;",
          "73: import org.apache.ambari.server.security.authorization.AuthorizationHelper;",
          "74: import org.apache.ambari.server.state.Host;",
          "75: import org.apache.ambari.server.state.SecurityType;",
          "76: import org.apache.ambari.server.state.host.HostImpl;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: import org.apache.ambari.server.serveraction.kerberos.KDCType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:           replayRequests(persistedState.getAllRequests());",
          "207:           for(ClusterTopology clusterTopology : clusterTopologyMap.values()) {",
          "210:             }",
          "211:           }",
          "212:           isInitialized = true;",
          "213:         }",
          "215:       }",
          "216:     }",
          "217:   }",
          "",
          "[Removed Lines]",
          "208:             if (clusterTopology.isClusterKerberosEnabled()) {",
          "209:               addKerberosClient(clusterTopology);",
          "",
          "[Added Lines]",
          "210:             if (clusterTopology.isClusterKerberosEnabled() && isKerberosClientInstallAllowed(clusterTopology)) {",
          "211:                 addKerberosClient(clusterTopology);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "293:     if (securityConfiguration != null && securityConfiguration.getType() == SecurityType.KERBEROS) {",
          "294:       securityType = SecurityType.KERBEROS;",
          "298:       topology.getBlueprint().getConfiguration().setParentConfiguration(stack.getConfiguration(topology.getBlueprint().getServices()));",
          "",
          "[Removed Lines]",
          "295:       addKerberosClient(topology);",
          "",
          "[Added Lines]",
          "297:       if (isKerberosClientInstallAllowed(topology)) {",
          "298:         addKerberosClient(topology);",
          "299:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "356:     return getRequestStatus(logicalRequest.getRequestId());",
          "357:   }",
          "359:   @Subscribe",
          "360:   public void onClusterConfigFinishedEvent(ClusterConfigFinishedEvent event) {",
          "361:     ManagedThreadPoolExecutor taskExecutor = topologyTaskExecutorServiceMap.get(event.getClusterId());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "371:   private boolean isKerberosClientInstallAllowed(final ClusterTopology topology) {",
          "372:     final org.apache.ambari.server.topology.Configuration topologyConfig = topology.getBlueprint().getConfiguration();",
          "373:     final String kdc_type = topologyConfig.getPropertyValue(KerberosHelper.KERBEROS_ENV, KerberosHelper.KDC_TYPE);",
          "374:     final String manage_identities = topologyConfig.getPropertyValue(KerberosHelper.KERBEROS_ENV, KerberosHelper.MANAGE_IDENTITIES);",
          "376:     return KDCType.NONE != KDCType.translate(kdc_type) || Boolean.parseBoolean(manage_identities);",
          "377:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java -> ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "50: import org.apache.ambari.server.controller.ClusterRequest;",
          "51: import org.apache.ambari.server.controller.ConfigurationRequest;",
          "52: import org.apache.ambari.server.controller.RequestStatusResponse;",
          "53: import org.apache.ambari.server.controller.ShortTaskStatus;",
          "54: import org.apache.ambari.server.controller.internal.HostResourceProvider;",
          "55: import org.apache.ambari.server.controller.internal.ProvisionClusterRequest;",
          "56: import org.apache.ambari.server.controller.internal.ScaleClusterRequest;",
          "57: import org.apache.ambari.server.controller.internal.Stack;",
          "58: import org.apache.ambari.server.controller.spi.ClusterController;",
          "59: import org.apache.ambari.server.controller.spi.Resource;",
          "60: import org.apache.ambari.server.controller.spi.ResourceProvider;",
          "61: import org.apache.ambari.server.events.ClusterProvisionStartedEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import org.apache.ambari.server.controller.KerberosHelper;",
          "57: import org.apache.ambari.server.controller.internal.RequestStatusImpl;",
          "61: import org.apache.ambari.server.controller.spi.Request;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66: import org.apache.ambari.server.orm.entities.SettingEntity;",
          "67: import org.apache.ambari.server.security.authorization.AuthorizationHelper;",
          "68: import org.apache.ambari.server.security.encryption.CredentialStoreService;",
          "69: import org.apache.ambari.server.stack.NoSuchStackException;",
          "70: import org.apache.ambari.server.state.SecurityType;",
          "71: import org.apache.ambari.server.state.quicklinksprofile.QuickLinksProfile;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: import org.apache.ambari.server.security.encryption.CredentialStoreType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:   private ExecutorService executor;",
          "143:   @Mock(type = MockType.NICE)",
          "144:   private PersistedState persistedState;",
          "146:   private HostGroup group1;",
          "148:   private HostGroup group2;",
          "149:   @Mock(type = MockType.STRICT)",
          "150:   private SecurityConfigurationFactory securityConfigurationFactory;",
          "151:   @Mock(type = MockType.STRICT)",
          "152:   private CredentialStoreService credentialStoreService;",
          "153:   @Mock(type = MockType.STRICT)",
          "",
          "[Removed Lines]",
          "145:   @Mock(type = MockType.NICE)",
          "147:   @Mock(type = MockType.NICE)",
          "",
          "[Added Lines]",
          "149:   @Mock(type = MockType.STRICT)",
          "151:   @Mock(type = MockType.STRICT)",
          "155:   @Mock(type = MockType.NICE)",
          "156:   private SecurityConfiguration securityConfiguration;",
          "157:   @Mock(type = MockType.NICE)",
          "158:   private Credential credential;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:     group2ServiceComponents.put(\"service2\", Collections.singleton(\"component3\"));",
          "248:     group2ServiceComponents.put(\"service2\", Collections.singleton(\"component4\"));",
          "250:     expect(blueprint.getHostGroup(\"group1\")).andReturn(group1).anyTimes();",
          "251:     expect(blueprint.getHostGroup(\"group2\")).andReturn(group2).anyTimes();",
          "252:     expect(blueprint.getComponents(\"service1\")).andReturn(Arrays.asList(\"component1\", \"component3\")).anyTimes();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258:     expect(securityConfiguration.getType()).andReturn(SecurityType.KERBEROS).anyTimes();",
          "260:     expect(credential.getType()).andReturn(CredentialStoreType.TEMPORARY).anyTimes();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "351:     expect(clusterController.ensureResourceProvider(anyObject(Resource.Type.class))).andReturn(resourceProvider);",
          "353:     expect(configureClusterTaskFactory.createConfigureClusterTask(anyObject(), anyObject(), anyObject())).andReturn(configureClusterTask);",
          "354:     expect(configureClusterTask.getTimeout()).andReturn(1000L);",
          "355:     expect(configureClusterTask.getRepeatDelay()).andReturn(50L);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:     expect(resourceProvider.createResources(anyObject(Request.class))).andReturn(new RequestStatusImpl(null));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "374:     EasyMockSupport.injectMocks(topologyManagerReplay);",
          "376:   }",
          "378:   @After",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:     clazz = AmbariContext.class;",
          "391:     f = clazz.getDeclaredField(\"clusterController\");",
          "392:     f.setAccessible(true);",
          "393:     f.set(ambariContext, clusterController);",
          "395:     EasyMockSupport.injectMocks(ambariContext);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "380:     PowerMock.verify(System.class);",
          "381:     verify(blueprint, stack, request, group1, group2, ambariContext, logicalRequestFactory,",
          "382:         logicalRequest, configurationRequest, configurationRequest2, configurationRequest3,",
          "385:     PowerMock.reset(System.class);",
          "386:     reset(blueprint, stack, request, group1, group2, ambariContext, logicalRequestFactory,",
          "387:         logicalRequest, configurationRequest, configurationRequest2, configurationRequest3,",
          "389:   }",
          "391:   @Test",
          "",
          "[Removed Lines]",
          "383:         requestStatusResponse, executor, persistedState, clusterTopologyMock, mockFuture, settingDAO, eventPublisher);",
          "388:         requestStatusResponse, executor, persistedState, clusterTopologyMock, mockFuture, settingDAO, eventPublisher);",
          "",
          "[Added Lines]",
          "403:         requestStatusResponse, executor, persistedState, clusterTopologyMock, mockFuture, settingDAO, eventPublisher,",
          "404:         securityConfiguration, credential);",
          "409:         requestStatusResponse, executor, persistedState, clusterTopologyMock, mockFuture, settingDAO, eventPublisher,",
          "410:         securityConfiguration, credential);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "432:   }",
          "434:   @Test",
          "435:   public void testBlueprintRequestCompletion() throws Exception {",
          "436:     List<ShortTaskStatus> tasks = new ArrayList<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:   @Test",
          "457:   public void testDoNotAddKerberosClientAtTopologyInit_KdcTypeNone() throws Exception {",
          "458:     Map<ClusterTopology, List<LogicalRequest>> allRequests = Collections.singletonMap(clusterTopologyMock, Collections.singletonList(logicalRequest));",
          "460:     expect(logicalRequest.hasPendingHostRequests()).andReturn(false).anyTimes();",
          "461:     expect(logicalRequest.isFinished()).andReturn(false).anyTimes();",
          "462:     expect(requestStatusResponse.getTasks()).andReturn(Collections.emptyList()).anyTimes();",
          "464:     expect(clusterTopologyMock.isClusterKerberosEnabled()).andReturn(true);",
          "465:     expect(clusterTopologyMock.getClusterId()).andReturn(CLUSTER_ID).anyTimes();",
          "466:     expect(clusterTopologyMock.getBlueprint()).andReturn(blueprint).anyTimes();",
          "468:     expect(persistedState.getAllRequests()).andReturn(allRequests).anyTimes();",
          "469:     expect(persistedState.getProvisionRequest(CLUSTER_ID)).andReturn(logicalRequest).anyTimes();",
          "470:     expect(ambariContext.isTopologyResolved(CLUSTER_ID)).andReturn(true).anyTimes();",
          "472:     expect(blueprint.getSecurity()).andReturn(securityConfiguration).anyTimes();",
          "473:     expect(request.getCredentialsMap()).andReturn(Collections.singletonMap(TopologyManager.KDC_ADMIN_CREDENTIAL, credential));",
          "475:     bpConfiguration.setProperty(KerberosHelper.KERBEROS_ENV, KerberosHelper.KDC_TYPE, \"none\");",
          "477:     replayAll();",
          "479:     topologyManager.provisionCluster(request);",
          "480:   }",
          "482:   @Test",
          "483:   public void testDoNotAddKerberosClientAtTopologyInit_ManageIdentity() throws Exception {",
          "484:     Map<ClusterTopology, List<LogicalRequest>> allRequests = Collections.singletonMap(clusterTopologyMock, Collections.singletonList(logicalRequest));",
          "486:     expect(logicalRequest.hasPendingHostRequests()).andReturn(false).anyTimes();",
          "487:     expect(logicalRequest.isFinished()).andReturn(false).anyTimes();",
          "488:     expect(requestStatusResponse.getTasks()).andReturn(Collections.emptyList()).anyTimes();",
          "490:     expect(clusterTopologyMock.isClusterKerberosEnabled()).andReturn(true);",
          "491:     expect(clusterTopologyMock.getClusterId()).andReturn(CLUSTER_ID).anyTimes();",
          "492:     expect(clusterTopologyMock.getBlueprint()).andReturn(blueprint).anyTimes();",
          "494:     expect(persistedState.getAllRequests()).andReturn(allRequests).anyTimes();",
          "495:     expect(persistedState.getProvisionRequest(CLUSTER_ID)).andReturn(logicalRequest).anyTimes();",
          "496:     expect(ambariContext.isTopologyResolved(CLUSTER_ID)).andReturn(true).anyTimes();",
          "498:     expect(blueprint.getSecurity()).andReturn(securityConfiguration).anyTimes();",
          "499:     expect(request.getCredentialsMap()).andReturn(Collections.singletonMap(TopologyManager.KDC_ADMIN_CREDENTIAL, credential));",
          "501:     bpConfiguration.setProperty(KerberosHelper.KERBEROS_ENV, KerberosHelper.MANAGE_IDENTITIES, \"false\");",
          "503:     replayAll();",
          "505:     topologyManager.provisionCluster(request);",
          "506:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "555:             configurationRequest, configurationRequest2, configurationRequest3, executor,",
          "556:             persistedState, clusterTopologyMock, securityConfigurationFactory, credentialStoreService,",
          "557:             clusterController, resourceProvider, mockFuture, requestStatusResponse, logicalRequest, settingDAO,",
          "559:   }",
          "561:   @Test(expected = InvalidTopologyException.class)",
          "",
          "[Removed Lines]",
          "558:             configureClusterTaskFactory, configureClusterTask, eventPublisher);",
          "",
          "[Added Lines]",
          "632:             configureClusterTaskFactory, configureClusterTask, eventPublisher, securityConfiguration, credential);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "276871b292bd3538e4428f10290d3aaacc6b2882",
      "candidate_info": {
        "commit_hash": "276871b292bd3538e4428f10290d3aaacc6b2882",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/276871b292bd3538e4428f10290d3aaacc6b2882",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/assets/i18n/en.json"
        ],
        "message": "[AMBARI-24433] [Log Search UI] Reset to default selection in the dropdowns (#2092)\n\n(cherry picked from commit f40586f601072baadd694988515770531d268738)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.html||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.html||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.less||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html -> ambari-logsearch/ambari-logsearch-web/src/app/components/service-logs-table/service-logs-table.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:                          [isRightAlign]=\"true\"></filter-dropdown>",
          "29:       </form>",
          "30:       <dropdown-button label=\"{{'logs.columns' | translate}}\" [options]=\"columns\" [isRightAlign]=\"true\"",
          "33:       </dropdown-button>",
          "34:       <div class=\"layout-btn-group\">",
          "35:         <a *ngIf=\"layout==='FLEX'\" class=\"btn\" (click)=\"toggleShowLabels()\" tooltip=\"{{'logs.toggleLabels' | translate}}\">",
          "",
          "[Removed Lines]",
          "31:                        [isMultipleChoice]=\"true\" (selectItem)=\"updateSelectedColumns($event)\"",
          "32:                        [listItemArguments]=\"logsTypeMapObject.fieldsModel\">",
          "",
          "[Added Lines]",
          "31:                        (selectItem)=\"updateSelectedColumns($event)\"",
          "32:                        [listItemArguments]=\"logsTypeMapObject.fieldsModel\"",
          "33:                        [isMultipleChoice]=\"true\"",
          "34:                        [useClearToDefaultSelection]=\"true\">",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.html||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.html": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.html -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:       <span *ngIf=\"!hideCaret\" class=\"caret\"></span>",
          "30:     </span>",
          "31:   </button>",
          "35: </div>",
          "",
          "[Removed Lines]",
          "32:   <ul data-component=\"dropdown-list\" [ngClass]=\"{'dropdown-menu': true, 'dropdown-menu-right': isRightAlign}\"",
          "33:       [items]=\"options\" [isMultipleChoice]=\"isMultipleChoice\" (selectedItemChange)=\"updateSelection($event)\"",
          "34:       [actionArguments]=\"listItemArguments\"></ul>",
          "",
          "[Added Lines]",
          "32:   <ul data-component=\"dropdown-list\" (selectedItemChange)=\"updateSelection($event)\"",
          "33:     [ngClass]=\"{'dropdown-menu': true, 'dropdown-menu-right': isRightAlign}\"",
          "34:     [items]=\"options\" [actionArguments]=\"listItemArguments\" [isMultipleChoice]=\"isMultipleChoice\"",
          "35:     [useClearToDefaultSelection]=\"useClearToDefaultSelection\"></ul>",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-button/dropdown-button.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   label?: string;",
          "33:   @Input()",
          "36:   @Input()",
          "37:   iconClass?: string;",
          "39:   @Input()",
          "42:   @Input()",
          "47:   @Input()",
          "50:   @Input()",
          "53:   @Input()",
          "56:   @Input()",
          "59:   @Input()",
          "65:   protected selectedItems?: ListItem[] = [];",
          "",
          "[Removed Lines]",
          "34:   buttonClass: string = 'btn-link';",
          "40:   hideCaret: boolean = false;",
          "43:   showSelectedValue: boolean = true;",
          "45:   @Input() options: ListItem[] = [];",
          "48:   listItemArguments: any[] = [];",
          "51:   isMultipleChoice: boolean = false;",
          "54:   isRightAlign: boolean = false;",
          "57:   isDropup: boolean = false;",
          "60:   showCommonLabelWithSelection: boolean = false;",
          "62:   @Output()",
          "63:   selectItem: EventEmitter<any> = new EventEmitter();",
          "",
          "[Added Lines]",
          "34:   buttonClass = 'btn-link';",
          "40:   hideCaret = false;",
          "43:   showSelectedValue = true;",
          "45:   @Input()",
          "46:   isRightAlign = false;",
          "49:   isDropup = false;",
          "52:   showCommonLabelWithSelection = false;",
          "54:   @Output()",
          "55:   selectItem: EventEmitter<any> = new EventEmitter();",
          "59:   options: ListItem[] = [];",
          "62:   listItemArguments: any[] = [];",
          "65:   isMultipleChoice = false;",
          "67:   @Input()",
          "68:   useClearToDefaultSelection = false;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.html||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.html": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.html -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     </label>",
          "54:   </li>",
          "55:   <li *ngIf=\"items && items.length\" class=\"divider\"></li>",
          "59:   </li>",
          "60:   <ng-container *ngFor=\"let item of itemsSelected\">",
          "61:     <ng-container",
          "",
          "[Removed Lines]",
          "56:   <li class=\"selections\" *ngIf=\"itemsSelected.length>0\">",
          "57:     <span>{{'dropdown.selection' | translate:({total: itemsSelected.length})}}</span>",
          "58:     <a href=\"#\" (click)=\"onClearSelectionClick($event)\">{{'dropdown.selection.clear' | translate}}</a>",
          "",
          "[Added Lines]",
          "56:   <li *ngIf=\"itemsSelected.length>0 || (useClearToDefaultSelection && defaultSelection && defaultSelection.length)\"",
          "57:     class=\"selections\" [class.use-clear-to-default]=\"useClearToDefaultSelection && defaultSelection && defaultSelection.length\">",
          "58:     <span class=\"total-selection\">{{'dropdown.selection' | translate:({total: itemsSelected.length})}}</span>",
          "59:     <a *ngIf=\"useClearToDefaultSelection && defaultSelection && defaultSelection.length\" href=\"#\" class=\"clear-to-default\"",
          "60:      (click)=\"onClearToDefaultSelectionClick($event)\">{{'dropdown.selection.clearToDefault' | translate}}</a>",
          "61:     <a href=\"#\" class=\"clear\" (click)=\"onClearSelectionClick($event)\">{{'dropdown.selection.clear' | translate}}</a>",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.less||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.less": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.less -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     }",
          "77:     &.selections {",
          "78:       font-size: .75em;",
          "80:       a {",
          "81:         display: inline;",
          "82:       }",
          "83:     }",
          "84:   }",
          "85: }",
          "",
          "[Removed Lines]",
          "79:       padding: .1em 20px;",
          "",
          "[Added Lines]",
          "79:       padding: .5em 20px;",
          "80:       &.use-clear-to-default {",
          "81:         span.total-selection {",
          "82:           display: block;",
          "83:         }",
          "84:         a {",
          "85:           padding: 3px 5px;",
          "86:           &:first-of-type {",
          "87:             padding-left: 0;",
          "88:           }",
          "89:           &:last-of-type {",
          "90:             padding-right: 0;",
          "91:           }",
          "92:         }",
          "93:       }",
          "96:         &:hover {",
          "97:           background: transparent none;",
          "98:           text-decoration: underline;",
          "99:         }",
          "102:     &.selections:hover {",
          "103:       background: transparent none;",
          "104:     }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/components/dropdown-list/dropdown-list.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: })",
          "31: export class DropdownListComponent implements OnInit, OnChanges, AfterViewChecked {",
          "35:   @Input()",
          "36:   items: ListItem[] = [];",
          "42:   @Input()",
          "45:   @Input()",
          "46:   additionalLabelComponentSetter?: string;",
          "48:   @Input()",
          "51:   @Output()",
          "52:   selectedItemChange: EventEmitter<ListItem | ListItem[]> = new EventEmitter();",
          "",
          "[Removed Lines]",
          "33:   private shouldRenderAdditionalComponents: boolean = false;",
          "38:   private itemsSelected: ListItem[] = [];",
          "40:   private itemsUnSelected: ListItem[] = [];",
          "43:   isMultipleChoice?: boolean = false;",
          "49:   actionArguments: any[] = [];",
          "",
          "[Added Lines]",
          "33:   private shouldRenderAdditionalComponents = false;",
          "38:   itemsSelected: ListItem[] = [];",
          "40:   itemsUnSelected: ListItem[] = [];",
          "42:   defaultSelection: ListItem[] = [];",
          "45:   isMultipleChoice? = false;",
          "51:   actionArguments = [];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:   @Input()",
          "60:   useLocalFilter = false;",
          "62:   @ViewChild('filter')",
          "63:   filterRef: ElementRef;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   @Input()",
          "65:   useClearToDefaultSelection = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:   ngOnInit() {",
          "80:     this.separateSelections();",
          "81:   }",
          "83:   ngOnChanges(changes: SimpleChanges): void {",
          "84:     if (changes.hasOwnProperty('items')) {",
          "85:       this.separateSelections();",
          "86:       this.shouldRenderAdditionalComponents = true;",
          "87:     }",
          "88:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     this.setDefaultSelection(this.items);",
          "87:     this.selectedItemChange.subscribe(this.separateSelections);",
          "92:       const previousItems = changes.items.previousValue;",
          "94:       if ((!this.defaultSelection || !this.defaultSelection.length) && (!previousItems || !previousItems.length)) {",
          "95:         this.setDefaultSelection(this.items);",
          "96:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:     this.renderAdditionalComponents();",
          "92:   }",
          "97:     this.shouldRenderAdditionalComponents = true;",
          "98:   }",
          "100:   private clearSelection() {",
          "101:     this.unSelectAll();",
          "103:   }",
          "106:     event.preventDefault();",
          "107:     event.stopPropagation();",
          "108:     this.clearSelection();",
          "",
          "[Removed Lines]",
          "94:   private separateSelections() {",
          "95:     this.itemsSelected = this.items ? this.items.filter((item: ListItem) => item.isChecked) : [];",
          "96:     this.itemsUnSelected = this.items ? this.items.filter((item: ListItem) => !item.isChecked) : [];",
          "102:     this.separateSelections();",
          "105:   private onClearSelectionClick = (event): void => {",
          "",
          "[Added Lines]",
          "105:   getSelectedItems(): ListItem[] {",
          "106:     return this.items ? this.items.filter((item: ListItem) => item.isChecked) : [];",
          "107:   }",
          "109:   getUnSelectedItems(): ListItem[] {",
          "110:     return this.items ? this.items.filter((item: ListItem) => !item.isChecked) : [];",
          "111:   }",
          "113:   private setDefaultSelection(items) {",
          "114:     this.defaultSelection = this.getSelectedItems();",
          "115:   }",
          "117:   private separateSelections = () => {",
          "118:     this.itemsSelected = this.getSelectedItems();",
          "119:     this.itemsUnSelected = this.getUnSelectedItems();",
          "127:   private clearToDefaultSelection() {",
          "128:     if (this.defaultSelection && this.defaultSelection.length) {",
          "129:       this.items.forEach((item: ListItem) => {",
          "130:         item.isChecked = this.defaultSelection.findIndex((defaultItem) => defaultItem.value === item.value) !== -1;",
          "131:         if (item.onSelect && item.isChecked) {",
          "132:           item.onSelect(...this.actionArguments);",
          "133:         }",
          "134:       });",
          "135:       this.selectedItemChange.emit(this.items);",
          "136:     }",
          "137:   }",
          "139:   onClearToDefaultSelectionClick = (event): void => {",
          "140:     event.preventDefault();",
          "141:     event.stopPropagation();",
          "142:     this.clearToDefaultSelection();",
          "143:   }",
          "144:   onClearSelectionClick = (event): void => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115:     } else {",
          "116:       this.unSelectAll();",
          "117:     }",
          "119:   }",
          "121:   selectAll() {",
          "",
          "[Removed Lines]",
          "118:     this.separateSelections();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "172:     if (item.onSelect) {",
          "173:       item.onSelect(...this.actionArguments);",
          "174:     }",
          "176:     this.selectedItemChange.emit(item);",
          "177:   }",
          "",
          "[Removed Lines]",
          "175:     this.separateSelections();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "910bb13fedbebd0ca08c7d54b6d8cc3985ae1e02",
      "candidate_info": {
        "commit_hash": "910bb13fedbebd0ca08c7d54b6d8cc3985ae1e02",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/910bb13fedbebd0ca08c7d54b6d8cc3985ae1e02",
        "files": [
          "ambari-server/src/main/resources/stacks/PERF/1.0/services/KERBEROS/package/scripts/kerberos_common.py"
        ],
        "message": "AMBARI-25339 : Reference to classmethod of MissingKeytabs incorrect (#3055)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/stacks/PERF/1.0/services/KERBEROS/package/scripts/kerberos_common.py||ambari-server/src/main/resources/stacks/PERF/1.0/services/KERBEROS/package/scripts/kerberos_common.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/stacks/PERF/1.0/services/KERBEROS/package/scripts/kerberos_common.py||ambari-server/src/main/resources/stacks/PERF/1.0/services/KERBEROS/package/scripts/kerberos_common.py": [
          "File: ambari-server/src/main/resources/stacks/PERF/1.0/services/KERBEROS/package/scripts/kerberos_common.py -> ambari-server/src/main/resources/stacks/PERF/1.0/services/KERBEROS/package/scripts/kerberos_common.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "437:   def find_missing_keytabs(self):",
          "438:     import params",
          "440:     Logger.info(str(missing_keytabs))",
          "441:     curr_content = Script.structuredOut",
          "442:     curr_content['missing_keytabs'] = missing_keytabs.as_dict()",
          "443:     self.put_structured_out(curr_content)",
          "445: class MissingKeytabs:",
          "446:   class Identity(namedtuple('Identity', ['principal', 'keytab_file_path'])):",
          "447:     @staticmethod",
          "448:     def fromKerberosRecord(item, hostname):",
          "",
          "[Removed Lines]",
          "439:     missing_keytabs = MissingKeytabs.fromKerberosRecords(params.kerberos_command_params, params.hostname)",
          "",
          "[Added Lines]",
          "439:     missing_keytabs = MissingKeytabs.from_kerberos_records(params.kerberos_command_params, params.hostname)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:       return \"Keytab: %s Principal: %s\" % (self.keytab_file_path, self.principal)",
          "456:   @classmethod",
          "462:   @staticmethod",
          "463:   def keytab_exists(kerberos_record):",
          "",
          "[Removed Lines]",
          "457:   def fromKerberosRecords(self, kerberos_record, hostname):",
          "458:     with_missing_keytab = (each for each in kerberos_record \\",
          "459:                            if not self.keytab_exists(each) or not self.keytab_has_principal(each, hostname))",
          "460:     return MissingKeytabs(set(MissingKeytabs.Identity.fromKerberosRecord(each, hostname) for each in with_missing_keytab))",
          "",
          "[Added Lines]",
          "459:   def from_kerberos_records(cls, kerberos_record, hostname):",
          "460:     with_missing_keytab = (each for each in kerberos_record if not MissingKeytabs.keytab_exists(each) or",
          "461:                            not MissingKeytabs.keytab_has_principal(each, hostname))",
          "462:     return MissingKeytabs(",
          "463:       set(MissingKeytabs.Identity.fromKerberosRecord(each, hostname) for each in with_missing_keytab))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9eeb8396d1d5734e433acfc5d809d2b872e4eac6",
      "candidate_info": {
        "commit_hash": "9eeb8396d1d5734e433acfc5d809d2b872e4eac6",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9eeb8396d1d5734e433acfc5d809d2b872e4eac6",
        "files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ],
        "message": "AMBARI-24770 Convert Hive Tables step use Hive 1 starting from HDP 3.0.3 (mgergely)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:       hive_kinit_cmd = format(\"{kinit_path_local} -kt {hive_server2_keytab} {hive_principal}; \")",
          "101:       Execute(hive_kinit_cmd, user = params.hive_user)",
          "104:     # hack to avoid derby cp issue we want derby-10.10.2.0.jar to appear first in cp, if its available, note other derby jars are derbyclient-10.11.1.1.jar  derbynet-10.11.1.1.jar",
          "106:     if len(derby_jars) == 1:",
          "107:       classpath = derby_jars[0] + \":\" + classpath",
          "108:     cmd = format(\"{java64_home}/bin/java -Djavax.security.auth.useSubjectCredsOnly=false -cp {classpath} org.apache.hadoop.hive.upgrade.acid.PreUpgradeTool -execute\")",
          "",
          "[Removed Lines]",
          "103:     classpath = format(\"{source_dir}/hive2/lib/*:{source_dir}/hadoop/*:{source_dir}/hadoop/lib/*:{source_dir}/hadoop-mapreduce/*:{source_dir}/hadoop-mapreduce/lib/*:{source_dir}/hadoop-hdfs/*:{source_dir}/hadoop-hdfs/lib/*:{source_dir}/hadoop/etc/hadoop/:{target_dir}/hive/lib/hive-pre-upgrade.jar:{source_dir}/hive/conf/conf.server\")",
          "105:     derby_jars = glob.glob(source_dir+\"/hive2/lib/*derby-*.jar\")",
          "",
          "[Added Lines]",
          "103:     # in the M10 release PreUpgradeTool was fixed to use Hive1 instead of Hive2",
          "104:     if target_version >= \"3.0.3\":",
          "105:       hive_lib_dir = format(\"{source_dir}/hive/lib\")",
          "106:     else:",
          "107:       hive_lib_dir = format(\"{source_dir}/hive2/lib\")",
          "109:     classpath = format(\"{hive_lib_dir}/*:{source_dir}/hadoop/*:{source_dir}/hadoop/lib/*:{source_dir}/hadoop-mapreduce/*:{source_dir}/hadoop-mapreduce/lib/*:{source_dir}/hadoop-hdfs/*:{source_dir}/hadoop-hdfs/lib/*:{source_dir}/hadoop/etc/hadoop/:{target_dir}/hive/lib/hive-pre-upgrade.jar:{source_dir}/hive/conf/conf.server\")",
          "111:     derby_jars = glob.glob(source_dir + \"/hive2/lib/*derby-*.jar\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0775993a36386a980dc89a842346e5a38a438567",
      "candidate_info": {
        "commit_hash": "0775993a36386a980dc89a842346e5a38a438567",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0775993a36386a980dc89a842346e5a38a438567",
        "files": [
          "ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/configuration/infra-solr-env.xml",
          "ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/properties/infra-solr-env.sh.j2"
        ],
        "message": "AMBARI-24411. Infra Solr: gc logs are not rotated by default. (#1979)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/properties/infra-solr-env.sh.j2||ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/properties/infra-solr-env.sh.j2"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/properties/infra-solr-env.sh.j2||ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/properties/infra-solr-env.sh.j2": [
          "File: ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/properties/infra-solr-env.sh.j2 -> ambari-server/src/main/resources/common-services/AMBARI_INFRA_SOLR/0.1.0/properties/infra-solr-env.sh.j2",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: SOLR_JAVA_STACK_SIZE=\"-Xss{{infra_solr_java_stack_size}}m\"",
          "29: GC_TUNE=\"{{infra_solr_gc_tune}}\"",
          "",
          "[Removed Lines]",
          "27: GC_LOG_OPTS=\"{{infra_solr_gc_log_opts}}\"",
          "",
          "[Added Lines]",
          "27: GC_LOG_OPTS=\"{{infra_solr_gc_log_opts}} -Xloggc:{{infra_solr_log_dir}}/solr_gc.log\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}