{
  "cve_id": "CVE-2022-31153",
  "cve_desc": "OpenZeppelin Contracts for Cairo is a library for contract development written in Cairo for StarkNet, a decentralized ZK Rollup. Version 0.2.0 is vulnerable to an error that renders account contracts unusable on live networks. This issue affects all accounts (vanilla and ethereum flavors) in the v0.2.0 release of OpenZeppelin Contracts for Cairo, which are not whitelisted on StarkNet mainnet. Only goerli deployments of v0.2.0 accounts are affected. This faulty behavior is not observed in StarkNet's testing framework. This bug has been patched in v0.2.1.",
  "repo": "OpenZeppelin/cairo-contracts",
  "patch_hash": "2cd60279c3332285d47edf9ee3888b71257acdc9",
  "patch_info": {
    "commit_hash": "2cd60279c3332285d47edf9ee3888b71257acdc9",
    "repo": "OpenZeppelin/cairo-contracts",
    "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/2cd60279c3332285d47edf9ee3888b71257acdc9",
    "files": [
      "docs/Account.md",
      "src/openzeppelin/account/Account.cairo",
      "src/openzeppelin/account/EthAccount.cairo",
      "src/openzeppelin/account/library.cairo",
      "tests/access/test_Ownable.py",
      "tests/account/test_Account.py",
      "tests/account/test_AddressRegistry.py",
      "tests/account/test_EthAccount.py",
      "tests/security/test_pausable.py",
      "tests/signers.py",
      "tests/token/erc20/test_ERC20.py",
      "tests/token/erc20/test_ERC20_Burnable_mock.py",
      "tests/token/erc20/test_ERC20_Mintable.py",
      "tests/token/erc20/test_ERC20_Pausable.py",
      "tests/token/erc20/test_ERC20_Upgradeable.py",
      "tests/token/erc721/test_ERC721_Mintable_Burnable.py",
      "tests/token/erc721/test_ERC721_Mintable_Pausable.py",
      "tests/token/erc721/test_ERC721_SafeMintable_mock.py",
      "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
      "tests/upgrades/test_Proxy.py",
      "tests/upgrades/test_upgrades.py",
      "tests/utils.py"
    ],
    "message": "Eth account support (#361)\n\n* Create separate execute function\n\n* Add is_valid_eth_signature to account library\n\n* Add eth_execute to account library\n\n* Create eth account mock and test\n\n* Add missing dependencies\n\n* Create TestEthSigner\n\n* Update used private key\n\n* Update implicit parameters\n\n* Update execute parameters\n\n* Update all implicit arguments\n\n* Update signature values and hash\n\n* Update variable name\n\n* Update documentation\n\n* Fix merge error\n\n* Improve format\n\n* Update tests/utils.py\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Rename test and fix documentation\n\n* Add documentation\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/utils.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/utils.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/mocks/eth_account.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Create eth account preset\n\n* Create signers module\n\n* use assert_revert to test nonce\n\n* Add test for valid signature\n\n* use internal hash\n\n* Update validity test\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/signers.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Fix after merge\n\n* Improve tests\n\n* Update account library\n\n* Update Account.md\n\n* update format\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update tests/access/test_Ownable.py\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update src/openzeppelin/account/library.cairo\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Update eth test\n\n* Update Account.md\n\n* Update test\n\n* Update tests/signers.py\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\n\n* Fix typo\n\n* Update signers\n\n* Update test\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update tests/signers.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* update test\n\n* Update documenation for Account\n\n* Update docs/Account.md\n\n* Update docs/Account.md\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\nCo-authored-by: Andrew Fleming <fleming.andrew@protonmail.com>\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>",
    "before_after_code_files": [
      "src/openzeppelin/account/Account.cairo||src/openzeppelin/account/Account.cairo",
      "src/openzeppelin/account/EthAccount.cairo||src/openzeppelin/account/EthAccount.cairo",
      "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo",
      "tests/access/test_Ownable.py||tests/access/test_Ownable.py",
      "tests/account/test_Account.py||tests/account/test_Account.py",
      "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py",
      "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py",
      "tests/security/test_pausable.py||tests/security/test_pausable.py",
      "tests/signers.py||tests/signers.py",
      "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py",
      "tests/token/erc20/test_ERC20_Burnable_mock.py||tests/token/erc20/test_ERC20_Burnable_mock.py",
      "tests/token/erc20/test_ERC20_Mintable.py||tests/token/erc20/test_ERC20_Mintable.py",
      "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py",
      "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py",
      "tests/token/erc721/test_ERC721_Mintable_Burnable.py||tests/token/erc721/test_ERC721_Mintable_Burnable.py",
      "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py",
      "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py",
      "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py||tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
      "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
      "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py",
      "tests/utils.py||tests/utils.py"
    ]
  },
  "patch_diff": {
    "src/openzeppelin/account/Account.cairo||src/openzeppelin/account/Account.cairo": [
      "File: src/openzeppelin/account/Account.cairo -> src/openzeppelin/account/Account.cairo",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: %lang starknet",
      "8: from openzeppelin.account.library import Account, AccountCallArray",
      "",
      "[Removed Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin",
      "",
      "[Added Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin, BitwiseBuiltin",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "95:         syscall_ptr : felt*,",
      "96:         pedersen_ptr : HashBuiltin*,",
      "97:         range_check_ptr,",
      "99:     }(",
      "100:         call_array_len: felt,",
      "101:         call_array: AccountCallArray*,",
      "",
      "[Removed Lines]",
      "98:         ecdsa_ptr: SignatureBuiltin*",
      "",
      "[Added Lines]",
      "98:         ecdsa_ptr: SignatureBuiltin*,",
      "99:         bitwise_ptr: BitwiseBuiltin*",
      "",
      "---------------"
    ],
    "src/openzeppelin/account/EthAccount.cairo||src/openzeppelin/account/EthAccount.cairo": [
      "File: src/openzeppelin/account/EthAccount.cairo -> src/openzeppelin/account/EthAccount.cairo",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # SPDX-License-Identifier: MIT",
      "2: # OpenZeppelin Contracts for Cairo v0.1.0 (account/EthAccount.cairo)",
      "4: %lang starknet",
      "5: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin, BitwiseBuiltin",
      "6: from openzeppelin.account.library import Account, AccountCallArray",
      "8: from openzeppelin.introspection.ERC165 import ERC165",
      "10: #",
      "11: # Constructor",
      "12: #",
      "14: @constructor",
      "15: func constructor{",
      "16:         syscall_ptr : felt*,",
      "17:         pedersen_ptr : HashBuiltin*,",
      "18:         range_check_ptr",
      "19:     }(eth_address: felt):",
      "20:     Account.initializer(eth_address)",
      "21:     return ()",
      "22: end",
      "24: #",
      "25: # Getters",
      "26: #",
      "28: @view",
      "29: func get_eth_address{",
      "30:         syscall_ptr : felt*,",
      "31:         pedersen_ptr : HashBuiltin*,",
      "32:         range_check_ptr",
      "33:     }() -> (res: felt):",
      "34:     let (res) = Account.get_public_key()",
      "35:     return (res=res)",
      "36: end",
      "38: @view",
      "39: func get_nonce{",
      "40:         syscall_ptr : felt*,",
      "41:         pedersen_ptr : HashBuiltin*,",
      "42:         range_check_ptr",
      "43:     }() -> (res: felt):",
      "44:     let (res) = Account.get_nonce()",
      "45:     return (res=res)",
      "46: end",
      "48: @view",
      "49: func supportsInterface{",
      "50:         syscall_ptr: felt*,",
      "51:         pedersen_ptr: HashBuiltin*,",
      "52:         range_check_ptr",
      "53:     } (interfaceId: felt) -> (success: felt):",
      "54:     let (success) = ERC165.supports_interface(interfaceId)",
      "55:     return (success)",
      "56: end",
      "58: #",
      "59: # Setters",
      "60: #",
      "62: @external",
      "63: func set_eth_address{",
      "64:         syscall_ptr : felt*,",
      "65:         pedersen_ptr : HashBuiltin*,",
      "66:         range_check_ptr",
      "67:     }(new_eth_address: felt):",
      "68:     Account.set_public_key(new_eth_address)",
      "69:     return ()",
      "70: end",
      "72: #",
      "73: # Business logic",
      "74: #",
      "76: @view",
      "77: func is_valid_signature{",
      "78:         syscall_ptr : felt*,",
      "79:         pedersen_ptr : HashBuiltin*,",
      "80:         range_check_ptr,",
      "81:         ecdsa_ptr: SignatureBuiltin*,",
      "82:         bitwise_ptr: BitwiseBuiltin*",
      "83:     }(",
      "84:         hash: felt,",
      "85:         signature_len: felt,",
      "86:         signature: felt*",
      "87:     ) -> (is_valid: felt):",
      "88:     let (is_valid) = Account.is_valid_eth_signature(hash, signature_len, signature)",
      "89:     return (is_valid=is_valid)",
      "90: end",
      "92: @external",
      "93: func __execute__{",
      "94:         syscall_ptr : felt*,",
      "95:         pedersen_ptr : HashBuiltin*,",
      "96:         range_check_ptr,",
      "97:         bitwise_ptr: BitwiseBuiltin*",
      "98:     }(",
      "99:         call_array_len: felt,",
      "100:         call_array: AccountCallArray*,",
      "101:         calldata_len: felt,",
      "102:         calldata: felt*,",
      "103:         nonce: felt",
      "104:     ) -> (response_len: felt, response: felt*):",
      "105:     let (response_len, response) = Account.eth_execute(",
      "106:         call_array_len,",
      "107:         call_array,",
      "108:         calldata_len,",
      "109:         calldata,",
      "110:         nonce",
      "111:     )",
      "112:     return (response_len=response_len, response=response)",
      "113: end",
      "",
      "---------------"
    ],
    "src/openzeppelin/account/library.cairo||src/openzeppelin/account/library.cairo": [
      "File: src/openzeppelin/account/library.cairo -> src/openzeppelin/account/library.cairo",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: from starkware.cairo.common.registers import get_fp_and_pc",
      "4: from starkware.starknet.common.syscalls import get_contract_address",
      "5: from starkware.cairo.common.signature import verify_ecdsa_signature",
      "7: from starkware.cairo.common.alloc import alloc",
      "8: from starkware.cairo.common.memcpy import memcpy",
      "9: from starkware.cairo.common.bool import TRUE",
      "10: from starkware.starknet.common.syscalls import call_contract, get_caller_address, get_tx_info",
      "12: from openzeppelin.introspection.ERC165 import ERC165",
      "14: from openzeppelin.utils.constants import IACCOUNT_ID",
      "",
      "[Removed Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin",
      "",
      "[Added Lines]",
      "6: from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin, BitwiseBuiltin",
      "8: from starkware.cairo.common.uint256 import Uint256",
      "10: from starkware.cairo.common.math import split_felt",
      "13: from starkware.cairo.common.cairo_secp.signature import verify_eth_signature_uint256",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141:         return (is_valid=TRUE)",
      "142:     end",
      "145:     func execute{",
      "146:             syscall_ptr : felt*,",
      "147:             pedersen_ptr : HashBuiltin*,",
      "148:             range_check_ptr,",
      "150:         }(",
      "151:             call_array_len: felt,",
      "152:             call_array: AccountCallArray*,",
      "",
      "[Removed Lines]",
      "149:             ecdsa_ptr: SignatureBuiltin*",
      "",
      "[Added Lines]",
      "146:  func is_valid_eth_signature{",
      "147:             syscall_ptr : felt*,",
      "148:             pedersen_ptr : HashBuiltin*,",
      "149:             bitwise_ptr: BitwiseBuiltin*,",
      "150:             range_check_ptr",
      "151:         }(",
      "152:             hash: felt,",
      "153:             signature_len: felt,",
      "154:             signature: felt*",
      "155:         ) -> (is_valid: felt):",
      "156:         alloc_locals",
      "157:         let (_public_key) = get_public_key()",
      "158:         let (__fp__, _) = get_fp_and_pc()",
      "160:         # This interface expects a signature pointer and length to make",
      "161:         # no assumption about signature validation schemes.",
      "162:         # But this implementation does, and it expects a the sig_v, sig_r,",
      "163:         # sig_s, and hash elements.",
      "164:         let sig_v : felt = signature[0]",
      "165:         let sig_r : Uint256 = Uint256(low=signature[1], high=signature[2])",
      "166:         let sig_s : Uint256 = Uint256(low=signature[3], high=signature[4])",
      "167:         let (high, low) = split_felt(hash)",
      "168:         let msg_hash : Uint256 = Uint256(low=low, high=high)",
      "170:         let (local keccak_ptr : felt*) = alloc()",
      "172:         with keccak_ptr:",
      "173:             verify_eth_signature_uint256(",
      "174:                 msg_hash=msg_hash,",
      "175:                 r=sig_r,",
      "176:                 s=sig_s,",
      "177:                 v=sig_v,",
      "178:                 eth_address=_public_key)",
      "179:         end",
      "181:         return (is_valid=TRUE)",
      "182:     end",
      "188:             bitwise_ptr: BitwiseBuiltin*",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "156:         ) -> (response_len: felt, response: felt*):",
      "157:         alloc_locals",
      "159:         let (caller) = get_caller_address()",
      "160:         with_attr error_message(\"Account: no reentrant call\"):",
      "161:             assert caller = 0",
      "162:         end",
      "168:         # validate nonce",
      "169:         with_attr error_message(\"Account: nonce is invalid\"):",
      "170:             assert _current_nonce = nonce",
      "171:         end",
      "173:         # TMP: Convert `AccountCallArray` to 'Call'.",
      "174:         let (calls : Call*) = alloc()",
      "175:         _from_call_array_to_call(call_array_len, call_array, calldata, calls)",
      "176:         let calls_len = call_array_len",
      "187:         # execute call",
      "188:         let (response : felt*) = alloc()",
      "189:         let (response_len) = _execute_list(calls_len, calls, response)",
      "",
      "[Removed Lines]",
      "164:         let (__fp__, _) = get_fp_and_pc()",
      "165:         let (tx_info) = get_tx_info()",
      "166:         let (_current_nonce) = Account_current_nonce.read()",
      "178:         # validate transaction",
      "179:         let (is_valid) = is_valid_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
      "180:         with_attr error_message(\"Account: invalid signature\"):",
      "181:             assert is_valid = TRUE",
      "182:         end",
      "184:         # bump nonce",
      "185:         Account_current_nonce.write(_current_nonce + 1)",
      "",
      "[Added Lines]",
      "198:         let (__fp__, _) = get_fp_and_pc()",
      "199:         let (tx_info) = get_tx_info()",
      "200:         let (local ecdsa_ptr : SignatureBuiltin*) = alloc()",
      "201:         with ecdsa_ptr:",
      "202:             # validate transaction",
      "203:             with_attr error_message(\"Account: invalid signature\"):",
      "204:                 let (is_valid) = is_valid_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
      "205:                 assert is_valid = TRUE",
      "206:             end",
      "207:         end",
      "209:         return _unsafe_execute(call_array_len, call_array, calldata_len, calldata, nonce)",
      "210:     end",
      "212:     func eth_execute{",
      "213:             syscall_ptr : felt*,",
      "214:             pedersen_ptr : HashBuiltin*,",
      "215:             range_check_ptr,",
      "216:             bitwise_ptr: BitwiseBuiltin*",
      "217:         }(",
      "218:             call_array_len: felt,",
      "219:             call_array: AccountCallArray*,",
      "220:             calldata_len: felt,",
      "221:             calldata: felt*,",
      "222:             nonce: felt",
      "223:         ) -> (response_len: felt, response: felt*):",
      "224:         alloc_locals",
      "226:         let (__fp__, _) = get_fp_and_pc()",
      "227:         let (tx_info) = get_tx_info()",
      "229:         # validate transaction",
      "230:         with_attr error_message(\"Account: invalid secp256k1 signature\"):",
      "231:             let (is_valid) = is_valid_eth_signature(tx_info.transaction_hash, tx_info.signature_len, tx_info.signature)",
      "232:             assert is_valid = TRUE",
      "233:         end",
      "235:         return _unsafe_execute(call_array_len, call_array, calldata_len, calldata, nonce)",
      "236:     end",
      "238:     func _unsafe_execute{",
      "239:             syscall_ptr : felt*,",
      "240:             pedersen_ptr : HashBuiltin*,",
      "241:             range_check_ptr,",
      "242:             bitwise_ptr: BitwiseBuiltin*",
      "243:         }(",
      "244:             call_array_len: felt,",
      "245:             call_array: AccountCallArray*,",
      "246:             calldata_len: felt,",
      "247:             calldata: felt*,",
      "248:             nonce: felt",
      "249:         ) -> (response_len: felt, response: felt*):",
      "250:         alloc_locals",
      "259:         let (_current_nonce) = Account_current_nonce.read()",
      "265:         # bump nonce",
      "266:         Account_current_nonce.write(_current_nonce + 1)",
      "",
      "---------------"
    ],
    "tests/access/test_Ownable.py||tests/access/test_Ownable.py": [
      "File: tests/access/test_Ownable.py -> tests/access/test_Ownable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     ZERO_ADDRESS,",
      "6:     assert_event_emitted,",
      "7:     get_contract_class,",
      "",
      "[Removed Lines]",
      "4:     MockSigner,",
      "",
      "[Added Lines]",
      "2: from signers import MockSigner",
      "",
      "---------------"
    ],
    "tests/account/test_Account.py||tests/account/test_Account.py": [
      "File: tests/account/test_Account.py -> tests/account/test_Account.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "6: signer = MockSigner(123456789987654321)",
      "",
      "[Removed Lines]",
      "3: from utils import MockSigner, assert_revert, get_contract_class, cached_contract, TRUE",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "4: from utils import assert_revert, get_contract_class, cached_contract, TRUE",
      "",
      "---------------"
    ],
    "tests/account/test_AddressRegistry.py||tests/account/test_AddressRegistry.py": [
      "File: tests/account/test_AddressRegistry.py -> tests/account/test_AddressRegistry.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "6: signer = MockSigner(123456789987654321)",
      "",
      "[Removed Lines]",
      "3: from utils import MockSigner, get_contract_class, cached_contract",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "4: from utils import get_contract_class, cached_contract",
      "",
      "---------------"
    ],
    "tests/account/test_EthAccount.py||tests/account/test_EthAccount.py": [
      "File: tests/account/test_EthAccount.py -> tests/account/test_EthAccount.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from starkware.starkware_utils.error_handling import StarkException",
      "4: from starkware.starknet.definitions.error_codes import StarknetErrorCode",
      "5: from utils import assert_revert, get_contract_class, cached_contract, TRUE, FALSE",
      "6: from signers import MockEthSigner",
      "8: private_key = b'\\x01' * 32",
      "9: signer = MockEthSigner(b'\\x01' * 32)",
      "10: other = MockEthSigner(b'\\x02' * 32)",
      "12: IACCOUNT_ID = 0xf10dbd44",
      "15: @pytest.fixture(scope='module')",
      "16: def contract_defs():",
      "17:     account_cls = get_contract_class('openzeppelin/account/EthAccount.cairo')",
      "18:     init_cls = get_contract_class(\"tests/mocks/Initializable.cairo\")",
      "19:     attacker_cls = get_contract_class(\"tests/mocks/account_reentrancy.cairo\")",
      "21:     return account_cls, init_cls, attacker_cls",
      "24: @pytest.fixture(scope='module')",
      "25: async def account_init(contract_defs):",
      "26:     account_cls, init_cls, attacker_cls = contract_defs",
      "27:     starknet = await Starknet.empty()",
      "29:     account1 = await starknet.deploy(",
      "30:         contract_class=account_cls,",
      "31:         constructor_calldata=[signer.eth_address]",
      "32:     )",
      "33:     account2 = await starknet.deploy(",
      "34:         contract_class=account_cls,",
      "35:         constructor_calldata=[signer.eth_address]",
      "36:     )",
      "37:     initializable1 = await starknet.deploy(",
      "38:         contract_class=init_cls,",
      "39:         constructor_calldata=[],",
      "40:     )",
      "41:     initializable2 = await starknet.deploy(",
      "42:         contract_class=init_cls,",
      "43:         constructor_calldata=[],",
      "44:     )",
      "45:     attacker = await starknet.deploy(",
      "46:         contract_class=attacker_cls,",
      "47:         constructor_calldata=[],",
      "48:     )",
      "50:     return starknet.state, account1, account2, initializable1, initializable2, attacker",
      "53: @pytest.fixture",
      "54: def account_factory(contract_defs, account_init):",
      "55:     account_cls, init_cls, attacker_cls = contract_defs",
      "56:     state, account1, account2, initializable1, initializable2, attacker = account_init",
      "57:     _state = state.copy()",
      "58:     account1 = cached_contract(_state, account_cls, account1)",
      "59:     account2 = cached_contract(_state, account_cls, account2)",
      "60:     initializable1 = cached_contract(_state, init_cls, initializable1)",
      "61:     initializable2 = cached_contract(_state, init_cls, initializable2)",
      "62:     attacker = cached_contract(_state, attacker_cls, attacker)",
      "64:     return account1, account2, initializable1, initializable2, attacker",
      "67: @pytest.mark.asyncio",
      "68: async def test_constructor(account_factory):",
      "69:     account, *_ = account_factory",
      "71:     execution_info = await account.get_eth_address().call()",
      "72:     assert execution_info.result == (signer.eth_address,)",
      "74:     execution_info = await account.supportsInterface(IACCOUNT_ID).call()",
      "75:     assert execution_info.result == (TRUE,)",
      "78: @pytest.mark.asyncio",
      "79: async def test_execute(account_factory):",
      "80:     account, _, initializable, *_ = account_factory",
      "82:     execution_info = await initializable.initialized().call()",
      "83:     assert execution_info.result == (FALSE,)",
      "85:     _, hash, signature = await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])])",
      "87:     validity_info, *_ = await signer.send_transactions(account, [(account.contract_address, 'is_valid_signature', [hash, len(signature), *signature])])",
      "88:     assert validity_info.result.response[0] == TRUE",
      "90:     execution_info = await initializable.initialized().call()",
      "91:     assert execution_info.result == (TRUE,)",
      "93:     # should revert if signature is not correct",
      "94:     await assert_revert(",
      "95:         signer.send_transactions(account, [(account.contract_address, 'is_valid_signature', [hash-1, len(signature), *signature])]),",
      "96:         reverted_with=\"Invalid signature\"",
      "97:     )",
      "100: @pytest.mark.asyncio",
      "101: async def test_multicall(account_factory):",
      "102:     account, _, initializable_1, initializable_2, _ = account_factory",
      "104:     execution_info = await initializable_1.initialized().call()",
      "105:     assert execution_info.result == (FALSE,)",
      "106:     execution_info = await initializable_2.initialized().call()",
      "107:     assert execution_info.result == (FALSE,)",
      "109:     await signer.send_transactions(",
      "110:         account,",
      "111:         [",
      "112:             (initializable_1.contract_address, 'initialize', []),",
      "113:             (initializable_2.contract_address, 'initialize', [])",
      "114:         ]",
      "115:     )",
      "117:     execution_info = await initializable_1.initialized().call()",
      "118:     assert execution_info.result == (TRUE,)",
      "119:     execution_info = await initializable_2.initialized().call()",
      "120:     assert execution_info.result == (TRUE,)",
      "123: @pytest.mark.asyncio",
      "124: async def test_return_value(account_factory):",
      "125:     account, _, initializable, *_ = account_factory",
      "127:     # initialize, set `initialized = 1`",
      "128:     await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])])",
      "130:     read_info, *_ = await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
      "131:     call_info = await initializable.initialized().call()",
      "132:     (call_result, ) = call_info.result",
      "133:     assert read_info.result.response == [call_result]  # 1",
      "136: @ pytest.mark.asyncio",
      "137: async def test_nonce(account_factory):",
      "138:     account, _, initializable, *_ = account_factory",
      "140:     # bump nonce",
      "141:     _, hash, signature = await signer.send_transactions(account, [(initializable.contract_address, 'initialized', [])])",
      "143:     execution_info = await account.get_nonce().call()",
      "144:     current_nonce = execution_info.result.res",
      "146:     # lower nonce",
      "147:     await assert_revert(",
      "148:         signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce - 1),",
      "149:         reverted_with=\"Account: nonce is invalid\"",
      "150:     )",
      "152:     # higher nonce",
      "153:     await assert_revert(",
      "154:         signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce + 1),",
      "155:         reverted_with=\"Account: nonce is invalid\"",
      "156:     )",
      "158:     # right nonce",
      "159:     await signer.send_transactions(account, [(initializable.contract_address, 'initialize', [])], current_nonce)",
      "161:     execution_info = await initializable.initialized().call()",
      "162:     assert execution_info.result == (TRUE,)",
      "165: @pytest.mark.asyncio",
      "166: async def test_eth_address_setter(account_factory):",
      "167:     account, *_ = account_factory",
      "169:     execution_info = await account.get_eth_address().call()",
      "170:     assert execution_info.result == (signer.eth_address,)",
      "172:     # set new pubkey",
      "173:     await signer.send_transactions(account, [(account.contract_address, 'set_eth_address', [other.eth_address])])",
      "175:     execution_info = await account.get_eth_address().call()",
      "176:     assert execution_info.result == (other.eth_address,)",
      "179: @pytest.mark.asyncio",
      "180: async def test_eth_address_setter_different_account(account_factory):",
      "181:     account, bad_account, *_ = account_factory",
      "183:     # set new pubkey",
      "184:     await assert_revert(",
      "185:         signer.send_transactions(",
      "186:             bad_account,",
      "187:             [(account.contract_address, 'set_eth_address', [other.eth_address])]",
      "188:         ),",
      "189:         reverted_with=\"Account: caller is not this account\"",
      "190:     )",
      "193: @pytest.mark.asyncio",
      "194: async def test_account_takeover_with_reentrant_call(account_factory):",
      "195:     account, _, _, _, attacker = account_factory",
      "197:     await assert_revert(",
      "198:         signer.send_transaction(account, attacker.contract_address, 'account_takeover', []),",
      "199:         reverted_with=\"Account: no reentrant call\"",
      "200:     )",
      "202:     execution_info = await account.get_eth_address().call()",
      "203:     assert execution_info.result == (signer.eth_address,)",
      "",
      "---------------"
    ],
    "tests/security/test_pausable.py||tests/security/test_pausable.py": [
      "File: tests/security/test_pausable.py -> tests/security/test_pausable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "4:     TRUE, FALSE, assert_revert, assert_event_emitted,",
      "6: )",
      "8: signer = MockSigner(12345678987654321)",
      "10: @pytest.fixture",
      "",
      "[Removed Lines]",
      "5:     get_contract_class, cached_contract, MockSigner",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "6:     get_contract_class, cached_contract",
      "",
      "---------------"
    ],
    "tests/signers.py||tests/signers.py": [
      "File: tests/signers.py -> tests/signers.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: from nile.signer import Signer, from_call_to_call_array, get_transaction_hash",
      "2: from utils import to_uint",
      "3: import eth_keys",
      "5: class MockSigner():",
      "6:     \"\"\"",
      "7:     Utility for sending signed transactions to an Account on Starknet.",
      "9:     Parameters",
      "10:     ----------",
      "12:     private_key : int",
      "14:     Examples",
      "15:     ---------",
      "16:     Constructing a MockSigner object",
      "18:     >>> signer = MockSigner(1234)",
      "20:     Sending a transaction",
      "22:     >>> await signer.send_transaction(",
      "23:             account, contract_address, 'contract_method', [arg_1]",
      "24:         )",
      "26:     Sending multiple transactions",
      "28:     >>> await signer.send_transaction(",
      "29:             account, [",
      "30:                 (contract_address, 'contract_method', [arg_1]),",
      "31:                 (contract_address, 'another_method', [arg_1, arg_2])",
      "32:             ]",
      "33:         )",
      "35:     \"\"\"",
      "36:     def __init__(self, private_key):",
      "37:         self.signer = Signer(private_key)",
      "38:         self.public_key = self.signer.public_key",
      "40:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
      "41:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
      "43:     async def send_transactions(self, account, calls, nonce=None, max_fee=0):",
      "44:         if nonce is None:",
      "45:             execution_info = await account.get_nonce().call()",
      "46:             nonce, = execution_info.result",
      "48:         build_calls = []",
      "49:         for call in calls:",
      "50:             build_call = list(call)",
      "51:             build_call[0] = hex(build_call[0])",
      "52:             build_calls.append(build_call)",
      "54:         (call_array, calldata, sig_r, sig_s) = self.signer.sign_transaction(hex(account.contract_address), build_calls, nonce, max_fee)",
      "55:         return await account.__execute__(call_array, calldata, nonce).invoke(signature=[sig_r, sig_s])",
      "57: class MockEthSigner():",
      "58:     \"\"\"",
      "59:     Utility for sending signed transactions to an Account on Starknet, like MockSigner, but using a secp256k1 signature.",
      "60:     Parameters",
      "61:     ----------",
      "62:     private_key : int",
      "64:     \"\"\"",
      "65:     def __init__(self, private_key):",
      "66:         self.signer = eth_keys.keys.PrivateKey(private_key)",
      "67:         self.eth_address = int(self.signer.public_key.to_checksum_address(),0)",
      "69:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
      "70:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
      "72:     async def send_transactions(self, account, calls, nonce=None, max_fee=0):",
      "73:         if nonce is None:",
      "74:             execution_info = await account.get_nonce().call()",
      "75:             nonce, = execution_info.result",
      "77:         build_calls = []",
      "78:         for call in calls:",
      "79:             build_call = list(call)",
      "80:             build_call[0] = hex(build_call[0])",
      "81:             build_calls.append(build_call)",
      "83:         (call_array, calldata) = from_call_to_call_array(build_calls)",
      "84:         message_hash = get_transaction_hash(",
      "85:             account.contract_address, call_array, calldata, nonce, max_fee",
      "86:         )",
      "88:         signature = self.signer.sign_msg_hash((message_hash).to_bytes(32, byteorder=\"big\"))",
      "89:         sig_r = to_uint(signature.r)",
      "90:         sig_s = to_uint(signature.s)",
      "92:         # the hash and signature are returned for other tests to use",
      "93:         return await account.__execute__(call_array, calldata, nonce).invoke(",
      "94:             signature=[signature.v, *sig_r, *sig_s]",
      "95:         ), message_hash, [signature.v, *sig_r, *sig_s]",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20.py||tests/token/erc20/test_ERC20.py": [
      "File: tests/token/erc20/test_ERC20.py -> tests/token/erc20/test_ERC20.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     ZERO_ADDRESS, INVALID_UINT256, TRUE, get_contract_class, cached_contract,",
      "6:     assert_revert, assert_event_emitted, contract_path",
      "7: )",
      "9: signer = MockSigner(123456789987654321)",
      "11: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, add_uint, sub_uint, str_to_felt, MAX_UINT256,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, add_uint, sub_uint, str_to_felt, MAX_UINT256,",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Burnable_mock.py||tests/token/erc20/test_ERC20_Burnable_mock.py": [
      "File: tests/token/erc20/test_ERC20_Burnable_mock.py -> tests/token/erc20/test_ERC20_Burnable_mock.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "6: )",
      "8: signer = MockSigner(123456789987654321)",
      "10: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, add_uint, sub_uint, str_to_felt, ZERO_ADDRESS, INVALID_UINT256,",
      "5:     get_contract_class, cached_contract, assert_revert, assert_event_emitted,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, add_uint, sub_uint, str_to_felt, ZERO_ADDRESS, INVALID_UINT256,",
      "6:     get_contract_class, cached_contract, assert_revert, assert_event_emitted",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Mintable.py||tests/token/erc20/test_ERC20_Mintable.py": [
      "File: tests/token/erc20/test_ERC20_Mintable.py -> tests/token/erc20/test_ERC20_Mintable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     MAX_UINT256, ZERO_ADDRESS, INVALID_UINT256, get_contract_class,",
      "6:     cached_contract, assert_revert, assert_event_emitted",
      "7: )",
      "9: signer = MockSigner(123456789987654321)",
      "11: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, add_uint, sub_uint, str_to_felt,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, add_uint, sub_uint, str_to_felt,",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py": [
      "File: tests/token/erc20/test_ERC20_Pausable.py -> tests/token/erc20/test_ERC20_Pausable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     get_contract_class, cached_contract",
      "6: )",
      "8: signer = MockSigner(123456789987654321)",
      "10: # testing vars",
      "",
      "[Removed Lines]",
      "4:     MockSigner, TRUE, FALSE, to_uint, str_to_felt, assert_revert,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     TRUE, FALSE, to_uint, str_to_felt, assert_revert,",
      "",
      "---------------"
    ],
    "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py": [
      "File: tests/token/erc20/test_ERC20_Upgradeable.py -> tests/token/erc20/test_ERC20_Upgradeable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     get_contract_class, cached_contract",
      "6: )",
      "9: signer = MockSigner(123456789987654321)",
      "11: USER = 999",
      "",
      "[Removed Lines]",
      "4:     MockSigner, to_uint, sub_uint, str_to_felt, assert_revert,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     to_uint, sub_uint, str_to_felt, assert_revert,",
      "",
      "---------------"
    ],
    "tests/token/erc721/test_ERC721_Mintable_Burnable.py||tests/token/erc721/test_ERC721_Mintable_Burnable.py": [
      "File: tests/token/erc721/test_ERC721_Mintable_Burnable.py -> tests/token/erc721/test_ERC721_Mintable_Burnable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_event_emitted, get_contract_class, cached_contract, to_uint, sub_uint, add_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, ZERO_ADDRESS, TRUE, FALSE, assert_revert, INVALID_UINT256,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, ZERO_ADDRESS, TRUE, FALSE, assert_revert, INVALID_UINT256,",
      "",
      "---------------"
    ],
    "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py": [
      "File: tests/token/erc721/test_ERC721_Mintable_Pausable.py -> tests/token/erc721/test_ERC721_Mintable_Pausable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_revert, to_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, TRUE, FALSE, get_contract_class, cached_contract,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, TRUE, FALSE, get_contract_class, cached_contract,",
      "",
      "---------------"
    ],
    "tests/token/erc721/test_ERC721_SafeMintable_mock.py||tests/token/erc721/test_ERC721_SafeMintable_mock.py": [
      "File: tests/token/erc721/test_ERC721_SafeMintable_mock.py -> tests/token/erc721/test_ERC721_SafeMintable_mock.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_event_emitted, get_contract_class, cached_contract, to_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, ZERO_ADDRESS, INVALID_UINT256, assert_revert,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, ZERO_ADDRESS, INVALID_UINT256, assert_revert,",
      "",
      "---------------"
    ],
    "tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py||tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py": [
      "File: tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py -> tests/token/erc721_enumerable/test_ERC721_Enumerable_Mintable_Burnable.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     TRUE, assert_revert, to_uint, sub_uint, add_uint",
      "6: )",
      "",
      "[Removed Lines]",
      "4:     MockSigner, str_to_felt, MAX_UINT256, get_contract_class, cached_contract,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "5:     str_to_felt, MAX_UINT256, get_contract_class, cached_contract,",
      "",
      "---------------"
    ],
    "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py": [
      "File: tests/upgrades/test_Proxy.py -> tests/upgrades/test_Proxy.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_revert,",
      "6:     get_contract_class,",
      "7:     cached_contract,",
      "",
      "[Removed Lines]",
      "4:     MockSigner,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "",
      "---------------"
    ],
    "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py": [
      "File: tests/upgrades/test_upgrades.py -> tests/upgrades/test_upgrades.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import pytest",
      "2: from starkware.starknet.testing.starknet import Starknet",
      "3: from utils import (",
      "5:     assert_revert,",
      "6:     assert_revert_entry_point,",
      "7:     assert_event_emitted,",
      "",
      "[Removed Lines]",
      "4:     MockSigner,",
      "",
      "[Added Lines]",
      "3: from signers import MockSigner",
      "",
      "---------------"
    ],
    "tests/utils.py||tests/utils.py": [
      "File: tests/utils.py -> tests/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from starkware.starkware_utils.error_handling import StarkException",
      "8: from starkware.starknet.testing.starknet import StarknetContract",
      "9: from starkware.starknet.business_logic.execution.objects import Event",
      "13: MAX_UINT256 = (2**128 - 1, 2**128 - 1)",
      "",
      "[Removed Lines]",
      "10: from nile.signer import Signer",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "130:         deploy_execution_info=deployed.deploy_execution_info",
      "131:     )",
      "132:     return contract",
      "",
      "[Removed Lines]",
      "135: class MockSigner():",
      "136:     \"\"\"",
      "137:     Utility for sending signed transactions to an Account on Starknet.",
      "139:     Parameters",
      "140:     ----------",
      "142:     private_key : int",
      "144:     Examples",
      "145:     ---------",
      "146:     Constructing a MockSigner object",
      "148:     >>> signer = MockSigner(1234)",
      "150:     Sending a transaction",
      "152:     >>> await signer.send_transaction(",
      "153:             account, contract_address, 'contract_method', [arg_1]",
      "154:         )",
      "156:     Sending multiple transactions",
      "158:     >>> await signer.send_transaction(",
      "159:             account, [",
      "160:                 (contract_address, 'contract_method', [arg_1]),",
      "161:                 (contract_address, 'another_method', [arg_1, arg_2])",
      "162:             ]",
      "163:         )",
      "165:     \"\"\"",
      "166:     def __init__(self, private_key):",
      "167:         self.signer = Signer(private_key)",
      "168:         self.public_key = self.signer.public_key",
      "170:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
      "171:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
      "173:     async def send_transactions(self, account, calls, nonce=None, max_fee=0):",
      "174:         if nonce is None:",
      "175:             execution_info = await account.get_nonce().call()",
      "176:             nonce, = execution_info.result",
      "178:         build_calls = []",
      "179:         for call in calls:",
      "180:             build_call = list(call)",
      "181:             build_call[0] = hex(build_call[0])",
      "182:             build_calls.append(build_call)",
      "184:         (call_array, calldata, sig_r, sig_s) = self.signer.sign_transaction(hex(account.contract_address), build_calls, nonce, max_fee)",
      "185:         return await account.__execute__(call_array, calldata, nonce).invoke(signature=[sig_r, sig_s])",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4e2b42d46ff970d64ef1253bf951cdb87d2ead78",
      "candidate_info": {
        "commit_hash": "4e2b42d46ff970d64ef1253bf951cdb87d2ead78",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/4e2b42d46ff970d64ef1253bf951cdb87d2ead78",
        "files": [
          "tests/signers.py"
        ],
        "message": "Fix typo in tests/signers.py (#380)",
        "before_after_code_files": [
          "tests/signers.py||tests/signers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/signers.py||tests/signers.py"
          ],
          "candidate": [
            "tests/signers.py||tests/signers.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/signers.py||tests/signers.py": [
          "File: tests/signers.py -> tests/signers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     Sending multiple transactions",
          "29:             account, [",
          "30:                 (contract_address, 'contract_method', [arg_1]),",
          "31:                 (contract_address, 'another_method', [arg_1, arg_2])",
          "",
          "[Removed Lines]",
          "28:     >>> await signer.send_transaction(",
          "",
          "[Added Lines]",
          "28:     >>> await signer.send_transactions(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1a2d9cb1a800850acafaae7cbd0e3dcaad3ffb4",
      "candidate_info": {
        "commit_hash": "e1a2d9cb1a800850acafaae7cbd0e3dcaad3ffb4",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/e1a2d9cb1a800850acafaae7cbd0e3dcaad3ffb4",
        "files": [
          "openzeppelin/token/erc20/ERC20.cairo",
          "openzeppelin/token/erc20/ERC20_Upgradeable.cairo",
          "openzeppelin/upgrades/Proxy.cairo",
          "openzeppelin/upgrades/library.cairo",
          "tests/mocks/proxiable_implementation.cairo",
          "tests/mocks/upgrades_v1_mock.cairo",
          "tests/mocks/upgrades_v2_mock.cairo",
          "tests/token/erc20/test_ERC20_Upgradeable.py",
          "tests/upgrades/test_Proxy.py",
          "tests/upgrades/test_upgrades.py"
        ],
        "message": "Add proxy contract and upgrades lib (#187)\n\n* add Proxy.cairo\n\n* improve formatting\n\n* add l1_default handler\n\n* fix typo\n\n* add upgrade method\n\n* fix compiler errors\n\n* add ownable to proxy\n\n* replace ownable with proxy's own admin\n\n* split Proxy into preset and lib\n\n* add ERC20_Upgradeable\n\n* add lib methods and event\n\n* add mock contracts and proxy tests\n\n* add erc20_upgradeable tests\n\n* fix comment\n\n* import bool constants\n\n* add error messages\n\n* update assert_revert for error msg, add deployment helper funcs\n\n* update test contract deployments, test error msgs\n\n* fix import\n\n* simplify contract, add tests\n\n* fix proxy implementation\n\n* move/rename test modules\n\n* remove erc20 upgradeable test\n\n* rename upgrades contracts, fix tests\n\n* fix init test\n\n* remove unnecessary comments\n\n* add erc20_upgradeable and tests\n\n* change mock proxy contract name\n\n* add attribution\n\n* fix assert_revert\n\n* remove v3 test\n\n* fix assert_revert\n\n* remove v3\n\n* Update tests/upgrades/test_upgrades.py\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* add attribution\n\n* remove unused import\n\n* remove unused vars\n\n* remove unnecessary comments\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>",
        "before_after_code_files": [
          "openzeppelin/token/erc20/ERC20.cairo||openzeppelin/token/erc20/ERC20.cairo",
          "openzeppelin/token/erc20/ERC20_Upgradeable.cairo||openzeppelin/token/erc20/ERC20_Upgradeable.cairo",
          "openzeppelin/upgrades/Proxy.cairo||openzeppelin/upgrades/Proxy.cairo",
          "openzeppelin/upgrades/library.cairo||openzeppelin/upgrades/library.cairo",
          "tests/mocks/proxiable_implementation.cairo||tests/mocks/proxiable_implementation.cairo",
          "tests/mocks/upgrades_v1_mock.cairo||tests/mocks/upgrades_v1_mock.cairo",
          "tests/mocks/upgrades_v2_mock.cairo||tests/mocks/upgrades_v2_mock.cairo",
          "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py",
          "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
          "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py",
            "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
            "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py"
          ],
          "candidate": [
            "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py",
            "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py",
            "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py"
          ]
        }
      },
      "candidate_diff": {
        "openzeppelin/token/erc20/ERC20.cairo||openzeppelin/token/erc20/ERC20.cairo": [
          "File: openzeppelin/token/erc20/ERC20.cairo -> openzeppelin/token/erc20/ERC20.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:         range_check_ptr",
          "118:     }(recipient: felt, amount: Uint256) -> (success: felt):",
          "119:     ERC20_transfer(recipient, amount)",
          "121:     return (TRUE)",
          "122: end",
          "",
          "[Removed Lines]",
          "120:     # Cairo equivalent to 'return (true)'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:         amount: Uint256",
          "133:     ) -> (success: felt):",
          "134:     ERC20_transferFrom(sender, recipient, amount)",
          "136:     return (TRUE)",
          "137: end",
          "",
          "[Removed Lines]",
          "135:     # Cairo equivalent to 'return (true)'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143:         range_check_ptr",
          "144:     }(spender: felt, amount: Uint256) -> (success: felt):",
          "145:     ERC20_approve(spender, amount)",
          "147:     return (TRUE)",
          "148: end",
          "",
          "[Removed Lines]",
          "146:     # Cairo equivalent to 'return (true)'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:         range_check_ptr",
          "155:     }(spender: felt, added_value: Uint256) -> (success: felt):",
          "156:     ERC20_increaseAllowance(spender, added_value)",
          "158:     return (TRUE)",
          "159: end",
          "",
          "[Removed Lines]",
          "157:     # Cairo equivalent to 'return (true)'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:         range_check_ptr",
          "166:     }(spender: felt, subtracted_value: Uint256) -> (success: felt):",
          "167:     ERC20_decreaseAllowance(spender, subtracted_value)",
          "169:     return (TRUE)",
          "170: end",
          "",
          "[Removed Lines]",
          "168:     # Cairo equivalent to 'return (true)'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "openzeppelin/token/erc20/ERC20_Upgradeable.cairo||openzeppelin/token/erc20/ERC20_Upgradeable.cairo": [
          "File: openzeppelin/token/erc20/ERC20_Upgradeable.cairo -> openzeppelin/token/erc20/ERC20_Upgradeable.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # SPDX-License-Identifier: MIT",
          "2: # OpenZeppelin Cairo Contracts v0.1.0 (token/erc20/ERC20_Upgradeable.cairo)",
          "4: %lang starknet",
          "5: %builtins pedersen range_check",
          "7: from starkware.cairo.common.cairo_builtins import HashBuiltin",
          "8: from starkware.cairo.common.uint256 import Uint256",
          "10: from openzeppelin.token.erc20.library import (",
          "11:     ERC20_name,",
          "12:     ERC20_symbol,",
          "13:     ERC20_totalSupply,",
          "14:     ERC20_decimals,",
          "15:     ERC20_balanceOf,",
          "16:     ERC20_allowance,",
          "18:     ERC20_initializer,",
          "19:     ERC20_approve,",
          "20:     ERC20_increaseAllowance,",
          "21:     ERC20_decreaseAllowance,",
          "22:     ERC20_transfer,",
          "23:     ERC20_transferFrom,",
          "24:     ERC20_mint",
          "25: )",
          "27: from openzeppelin.upgrades.library import (",
          "28:     Proxy_initializer,",
          "29:     Proxy_only_admin,",
          "30:     Proxy_set_implementation",
          "31: )",
          "33: from openzeppelin.utils.constants import TRUE",
          "35: #",
          "36: # Initializer",
          "37: #",
          "39: @external",
          "40: func initializer{",
          "41:         syscall_ptr: felt*,",
          "42:         pedersen_ptr: HashBuiltin*,",
          "43:         range_check_ptr",
          "44:     }(",
          "45:         name: felt,",
          "46:         symbol: felt,",
          "47:         decimals: felt,",
          "48:         initial_supply: Uint256,",
          "49:         recipient: felt,",
          "50:         proxy_admin: felt",
          "51:     ):",
          "52:     ERC20_initializer(name, symbol, decimals)",
          "53:     ERC20_mint(recipient, initial_supply)",
          "54:     Proxy_initializer(proxy_admin)",
          "55:     return ()",
          "56: end",
          "58: @external",
          "59: func upgrade{",
          "60:         syscall_ptr: felt*,",
          "61:         pedersen_ptr: HashBuiltin*,",
          "62:         range_check_ptr",
          "63:     }(new_implementation: felt):",
          "64:     Proxy_only_admin()",
          "65:     Proxy_set_implementation(new_implementation)",
          "66:     return ()",
          "67: end",
          "69: #",
          "70: # Getters",
          "71: #",
          "73: @view",
          "74: func name{",
          "75:         syscall_ptr : felt*,",
          "76:         pedersen_ptr : HashBuiltin*,",
          "77:         range_check_ptr",
          "78:     }() -> (name: felt):",
          "79:     let (name) = ERC20_name()",
          "80:     return (name)",
          "81: end",
          "83: @view",
          "84: func symbol{",
          "85:         syscall_ptr : felt*,",
          "86:         pedersen_ptr : HashBuiltin*,",
          "87:         range_check_ptr",
          "88:     }() -> (symbol: felt):",
          "89:     let (symbol) = ERC20_symbol()",
          "90:     return (symbol)",
          "91: end",
          "93: @view",
          "94: func totalSupply{",
          "95:         syscall_ptr : felt*,",
          "96:         pedersen_ptr : HashBuiltin*,",
          "97:         range_check_ptr",
          "98:     }() -> (totalSupply: Uint256):",
          "99:     let (totalSupply: Uint256) = ERC20_totalSupply()",
          "100:     return (totalSupply)",
          "101: end",
          "103: @view",
          "104: func decimals{",
          "105:         syscall_ptr : felt*,",
          "106:         pedersen_ptr : HashBuiltin*,",
          "107:         range_check_ptr",
          "108:     }() -> (decimals: felt):",
          "109:     let (decimals) = ERC20_decimals()",
          "110:     return (decimals)",
          "111: end",
          "113: @view",
          "114: func balanceOf{",
          "115:         syscall_ptr : felt*,",
          "116:         pedersen_ptr : HashBuiltin*,",
          "117:         range_check_ptr",
          "118:     }(account: felt) -> (balance: Uint256):",
          "119:     let (balance: Uint256) = ERC20_balanceOf(account)",
          "120:     return (balance)",
          "121: end",
          "123: @view",
          "124: func allowance{",
          "125:         syscall_ptr : felt*,",
          "126:         pedersen_ptr : HashBuiltin*,",
          "127:         range_check_ptr",
          "128:     }(owner: felt, spender: felt) -> (remaining: Uint256):",
          "129:     let (remaining: Uint256) = ERC20_allowance(owner, spender)",
          "130:     return (remaining)",
          "131: end",
          "133: #",
          "134: # Externals",
          "135: #",
          "137: @external",
          "138: func transfer{",
          "139:         syscall_ptr : felt*,",
          "140:         pedersen_ptr : HashBuiltin*,",
          "141:         range_check_ptr",
          "142:     }(recipient: felt, amount: Uint256) -> (success: felt):",
          "143:     ERC20_transfer(recipient, amount)",
          "144:     return (TRUE)",
          "145: end",
          "147: @external",
          "148: func transferFrom{",
          "149:         syscall_ptr : felt*,",
          "150:         pedersen_ptr : HashBuiltin*,",
          "151:         range_check_ptr",
          "152:     }(",
          "153:         sender: felt,",
          "154:         recipient: felt,",
          "155:         amount: Uint256",
          "156:     ) -> (success: felt):",
          "157:     ERC20_transferFrom(sender, recipient, amount)",
          "158:     return (TRUE)",
          "159: end",
          "161: @external",
          "162: func approve{",
          "163:         syscall_ptr : felt*,",
          "164:         pedersen_ptr : HashBuiltin*,",
          "165:         range_check_ptr",
          "166:     }(spender: felt, amount: Uint256) -> (success: felt):",
          "167:     ERC20_approve(spender, amount)",
          "168:     return (TRUE)",
          "169: end",
          "171: @external",
          "172: func increaseAllowance{",
          "173:         syscall_ptr : felt*,",
          "174:         pedersen_ptr : HashBuiltin*,",
          "175:         range_check_ptr",
          "176:     }(spender: felt, added_value: Uint256) -> (success: felt):",
          "177:     ERC20_increaseAllowance(spender, added_value)",
          "178:     return (TRUE)",
          "179: end",
          "181: @external",
          "182: func decreaseAllowance{",
          "183:         syscall_ptr : felt*,",
          "184:         pedersen_ptr : HashBuiltin*,",
          "185:         range_check_ptr",
          "186:     }(spender: felt, subtracted_value: Uint256) -> (success: felt):",
          "187:     ERC20_decreaseAllowance(spender, subtracted_value)",
          "188:     return (TRUE)",
          "189: end",
          "",
          "---------------"
        ],
        "openzeppelin/upgrades/Proxy.cairo||openzeppelin/upgrades/Proxy.cairo": [
          "File: openzeppelin/upgrades/Proxy.cairo -> openzeppelin/upgrades/Proxy.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # SPDX-License-Identifier: MIT",
          "2: # OpenZeppelin Cairo Contracts v0.1.0 (upgrades/Proxy.cairo)",
          "4: %lang starknet",
          "6: from starkware.cairo.common.cairo_builtins import HashBuiltin",
          "7: from starkware.starknet.common.syscalls import delegate_l1_handler, delegate_call",
          "8: from openzeppelin.upgrades.library import (",
          "9:     Proxy_implementation_address,",
          "10:     Proxy_set_implementation",
          "11: )",
          "13: #",
          "14: # Constructor",
          "15: #",
          "17: @constructor",
          "18: func constructor{",
          "19:         syscall_ptr: felt*,",
          "20:         pedersen_ptr: HashBuiltin*,",
          "21:         range_check_ptr",
          "22:     }(implementation_address: felt):",
          "23:     Proxy_set_implementation(implementation_address)",
          "24:     return ()",
          "25: end",
          "27: #",
          "28: # Fallback functions",
          "29: #",
          "31: @external",
          "32: @raw_input",
          "33: @raw_output",
          "34: func __default__{",
          "35:         syscall_ptr: felt*,",
          "36:         pedersen_ptr: HashBuiltin*,",
          "37:         range_check_ptr",
          "38:     }(",
          "39:         selector: felt,",
          "40:         calldata_size: felt,",
          "41:         calldata: felt*",
          "42:     ) -> (",
          "43:         retdata_size: felt,",
          "44:         retdata: felt*",
          "45:     ):",
          "46:     let (address) = Proxy_implementation_address.read()",
          "48:     let (retdata_size: felt, retdata: felt*) = delegate_call(",
          "49:         contract_address=address,",
          "50:         function_selector=selector,",
          "51:         calldata_size=calldata_size,",
          "52:         calldata=calldata",
          "53:     )",
          "55:     return (retdata_size=retdata_size, retdata=retdata)",
          "56: end",
          "58: @l1_handler",
          "59: @raw_input",
          "60: func __l1_default__{",
          "61:         syscall_ptr: felt*,",
          "62:         pedersen_ptr: HashBuiltin*,",
          "63:         range_check_ptr",
          "64:     }(",
          "65:         selector: felt,",
          "66:         calldata_size: felt,",
          "67:         calldata: felt*",
          "68:     ):",
          "69:     let (address) = Proxy_implementation_address.read()",
          "71:     delegate_l1_handler(",
          "72:         contract_address=address,",
          "73:         function_selector=selector,",
          "74:         calldata_size=calldata_size,",
          "75:         calldata=calldata",
          "76:     )",
          "78:     return ()",
          "79: end",
          "",
          "---------------"
        ],
        "openzeppelin/upgrades/library.cairo||openzeppelin/upgrades/library.cairo": [
          "File: openzeppelin/upgrades/library.cairo -> openzeppelin/upgrades/library.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # SPDX-License-Identifier: MIT",
          "2: # OpenZeppelin Cairo Contracts v0.1.0 (upgrades/library.cairo)",
          "4: %lang starknet",
          "6: from starkware.cairo.common.cairo_builtins import HashBuiltin",
          "7: from starkware.starknet.common.syscalls import get_caller_address",
          "8: from openzeppelin.utils.constants import TRUE, FALSE",
          "10: #",
          "11: # Events",
          "12: #",
          "14: @event",
          "15: func Upgraded(implementation: felt):",
          "16: end",
          "18: #",
          "19: # Storage variables",
          "20: #",
          "22: @storage_var",
          "23: func Proxy_implementation_address() -> (implementation_address: felt):",
          "24: end",
          "26: @storage_var",
          "27: func Proxy_admin() -> (proxy_admin: felt):",
          "28: end",
          "30: @storage_var",
          "31: func Proxy_initialized() -> (initialized: felt):",
          "32: end",
          "34: #",
          "35: # Initializer",
          "36: #",
          "38: func Proxy_initializer{",
          "39:         syscall_ptr: felt*,",
          "40:         pedersen_ptr: HashBuiltin*,",
          "41:         range_check_ptr",
          "42:     }(proxy_admin: felt):",
          "43:     let (initialized) = Proxy_initialized.read()",
          "44:     with_attr error_message(\"Proxy: contract already initialized\"):",
          "45:         assert initialized = FALSE",
          "46:     end",
          "48:     Proxy_initialized.write(TRUE)",
          "49:     Proxy_admin.write(proxy_admin)",
          "50:     return ()",
          "51: end",
          "53: #",
          "54: # Upgrades",
          "55: #",
          "57: func Proxy_set_implementation{",
          "58:         syscall_ptr: felt*,",
          "59:         pedersen_ptr: HashBuiltin*,",
          "60:         range_check_ptr",
          "61:     }(new_implementation: felt):",
          "62:     Proxy_implementation_address.write(new_implementation)",
          "63:     Upgraded.emit(new_implementation)",
          "64:     return ()",
          "65: end",
          "67: #",
          "68: # Guards",
          "69: #",
          "71: func Proxy_only_admin{",
          "72:         syscall_ptr: felt*,",
          "73:         pedersen_ptr: HashBuiltin*,",
          "74:         range_check_ptr",
          "75:     }():",
          "76:     let (caller) = get_caller_address()",
          "77:     let (admin) = Proxy_admin.read()",
          "78:     with_attr error_message(\"Proxy: caller is not admin\"):",
          "79:         assert admin = caller",
          "80:     end",
          "81:     return ()",
          "82: end",
          "84: #",
          "85: # Getters",
          "86: #",
          "88: func Proxy_get_admin{",
          "89:         syscall_ptr: felt*,",
          "90:         pedersen_ptr: HashBuiltin*,",
          "91:         range_check_ptr",
          "92:     }() -> (admin: felt):",
          "93:     let (admin) = Proxy_admin.read()",
          "94:     return (admin)",
          "95: end",
          "97: func Proxy_get_implementation{",
          "98:         syscall_ptr: felt*,",
          "99:         pedersen_ptr: HashBuiltin*,",
          "100:         range_check_ptr",
          "101:     }() -> (implementation: felt):",
          "102:     let (implementation) = Proxy_implementation_address.read()",
          "103:     return (implementation)",
          "104: end",
          "106: #",
          "107: # Setters",
          "108: #",
          "110: func Proxy_set_admin{",
          "111:         syscall_ptr: felt*,",
          "112:         pedersen_ptr: HashBuiltin*,",
          "113:         range_check_ptr",
          "114:     }(new_admin: felt):",
          "115:     Proxy_admin.write(new_admin)",
          "116:     return ()",
          "117: end",
          "",
          "---------------"
        ],
        "tests/mocks/proxiable_implementation.cairo||tests/mocks/proxiable_implementation.cairo": [
          "File: tests/mocks/proxiable_implementation.cairo -> tests/mocks/proxiable_implementation.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # SPDX-License-Identifier: MIT",
          "3: %lang starknet",
          "4: %builtins pedersen range_check",
          "6: from starkware.cairo.common.cairo_builtins import HashBuiltin",
          "7: from starkware.cairo.common.uint256 import Uint256",
          "9: from openzeppelin.upgrades.library import (",
          "10:     Proxy_initializer,",
          "11:     Proxy_get_implementation",
          "12: )",
          "14: #",
          "15: # Storage",
          "16: #",
          "18: @storage_var",
          "19: func value() -> (res: felt):",
          "20: end",
          "22: #",
          "23: # Initializer",
          "24: #",
          "26: @external",
          "27: func initializer{",
          "28:         syscall_ptr : felt*,",
          "29:         pedersen_ptr : HashBuiltin*,",
          "30:         range_check_ptr",
          "31:     }(proxy_admin: felt):",
          "32:     Proxy_initializer(proxy_admin)",
          "33:     return ()",
          "34: end",
          "36: #",
          "37: # Getters",
          "38: #",
          "40: @view",
          "41: func get_value{",
          "42:         syscall_ptr : felt*,",
          "43:         pedersen_ptr : HashBuiltin*,",
          "44:         range_check_ptr",
          "45:     }() -> (val: felt):",
          "46:     let (val) = value.read()",
          "47:     return (val)",
          "48: end",
          "50: @view",
          "51: func get_implementation{",
          "52:         syscall_ptr : felt*,",
          "53:         pedersen_ptr : HashBuiltin*,",
          "54:         range_check_ptr",
          "55:     }() -> (address: felt):",
          "56:     let (address) = Proxy_get_implementation()",
          "57:     return (address)",
          "58: end",
          "60: #",
          "61: # Setters",
          "62: #",
          "64: @external",
          "65: func set_value{",
          "66:         syscall_ptr : felt*,",
          "67:         pedersen_ptr : HashBuiltin*,",
          "68:         range_check_ptr",
          "69:     }(val: felt):",
          "70:     value.write(val)",
          "71:     return ()",
          "72: end",
          "",
          "---------------"
        ],
        "tests/mocks/upgrades_v1_mock.cairo||tests/mocks/upgrades_v1_mock.cairo": [
          "File: tests/mocks/upgrades_v1_mock.cairo -> tests/mocks/upgrades_v1_mock.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # SPDX-License-Identifier: MIT",
          "3: %lang starknet",
          "4: %builtins pedersen range_check",
          "6: from starkware.cairo.common.cairo_builtins import HashBuiltin",
          "7: from starkware.cairo.common.uint256 import Uint256",
          "9: from openzeppelin.upgrades.library import (",
          "10:     Proxy_initializer,",
          "11:     Proxy_only_admin,",
          "12:     Proxy_set_implementation",
          "13: )",
          "15: #",
          "16: # Storage",
          "17: #",
          "19: @storage_var",
          "20: func value_1() -> (res: felt):",
          "21: end",
          "23: #",
          "24: # Initializer",
          "25: #",
          "27: @external",
          "28: func initializer{",
          "29:         syscall_ptr : felt*,",
          "30:         pedersen_ptr : HashBuiltin*,",
          "31:         range_check_ptr",
          "32:     }(proxy_admin: felt):",
          "33:     Proxy_initializer(proxy_admin)",
          "34:     return ()",
          "35: end",
          "37: #",
          "38: # Upgrades",
          "39: #",
          "41: @external",
          "42: func upgrade{",
          "43:         syscall_ptr: felt*,",
          "44:         pedersen_ptr: HashBuiltin*,",
          "45:         range_check_ptr",
          "46:     }(new_implementation: felt):",
          "47:     Proxy_only_admin()",
          "48:     Proxy_set_implementation(new_implementation)",
          "49:     return ()",
          "50: end",
          "52: #",
          "53: # Getters",
          "54: #",
          "56: @view",
          "57: func get_value_1{",
          "58:         syscall_ptr : felt*,",
          "59:         pedersen_ptr : HashBuiltin*,",
          "60:         range_check_ptr",
          "61:     }() -> (val: felt):",
          "62:     let (val) = value_1.read()",
          "63:     return (val)",
          "64: end",
          "66: #",
          "67: # Setters",
          "68: #",
          "70: @external",
          "71: func set_value_1{",
          "72:         syscall_ptr : felt*,",
          "73:         pedersen_ptr : HashBuiltin*,",
          "74:         range_check_ptr",
          "75:     }(val: felt):",
          "76:     value_1.write(val)",
          "77:     return ()",
          "78: end",
          "",
          "---------------"
        ],
        "tests/mocks/upgrades_v2_mock.cairo||tests/mocks/upgrades_v2_mock.cairo": [
          "File: tests/mocks/upgrades_v2_mock.cairo -> tests/mocks/upgrades_v2_mock.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # SPDX-License-Identifier: MIT",
          "3: %lang starknet",
          "4: %builtins pedersen range_check",
          "6: from starkware.cairo.common.cairo_builtins import HashBuiltin",
          "7: from starkware.cairo.common.uint256 import Uint256",
          "9: from openzeppelin.upgrades.library import (",
          "10:     Proxy_initializer,",
          "11:     Proxy_only_admin,",
          "12:     Proxy_set_implementation,",
          "13:     Proxy_get_implementation,",
          "14:     Proxy_set_admin,",
          "15:     Proxy_get_admin",
          "16: )",
          "18: #",
          "19: # Storage",
          "20: #",
          "22: @storage_var",
          "23: func value_1() -> (res: felt):",
          "24: end",
          "26: @storage_var",
          "27: func value_2() -> (res: felt):",
          "28: end",
          "30: #",
          "31: # Initializer",
          "32: #",
          "34: @external",
          "35: func initializer{",
          "36:         syscall_ptr : felt*,",
          "37:         pedersen_ptr : HashBuiltin*,",
          "38:         range_check_ptr",
          "39:     }(proxy_admin: felt):",
          "40:     Proxy_initializer(proxy_admin)",
          "41:     return ()",
          "42: end",
          "44: #",
          "45: # Upgrades",
          "46: #",
          "48: @external",
          "49: func upgrade{",
          "50:         syscall_ptr: felt*,",
          "51:         pedersen_ptr: HashBuiltin*,",
          "52:         range_check_ptr",
          "53:     }(new_implementation: felt):",
          "54:     Proxy_only_admin()",
          "55:     Proxy_set_implementation(new_implementation)",
          "56:     return ()",
          "57: end",
          "59: #",
          "60: # Getters",
          "61: #",
          "63: @view",
          "64: func get_value_1{",
          "65:         syscall_ptr : felt*,",
          "66:         pedersen_ptr : HashBuiltin*,",
          "67:         range_check_ptr",
          "68:     }() -> (val: felt):",
          "69:     let (val) = value_1.read()",
          "70:     return (val)",
          "71: end",
          "73: @view",
          "74: func get_value_2{",
          "75:         syscall_ptr : felt*,",
          "76:         pedersen_ptr : HashBuiltin*,",
          "77:         range_check_ptr",
          "78:     }() -> (val: felt):",
          "79:     let (val) = value_2.read()",
          "80:     return (val)",
          "81: end",
          "83: @view",
          "84: func get_implementation{",
          "85:         syscall_ptr : felt*,",
          "86:         pedersen_ptr : HashBuiltin*,",
          "87:         range_check_ptr",
          "88:     }() -> (address: felt):",
          "89:     let (address) = Proxy_get_implementation()",
          "90:     return (address)",
          "91: end",
          "93: @view",
          "94: func get_admin{",
          "95:         syscall_ptr : felt*,",
          "96:         pedersen_ptr : HashBuiltin*,",
          "97:         range_check_ptr",
          "98:     }() -> (admin: felt):",
          "99:     let (admin) = Proxy_get_admin()",
          "100:     return (admin)",
          "101: end",
          "103: #",
          "104: # Setters",
          "105: #",
          "107: @external",
          "108: func set_value_1{",
          "109:         syscall_ptr : felt*,",
          "110:         pedersen_ptr : HashBuiltin*,",
          "111:         range_check_ptr",
          "112:     }(val: felt):",
          "113:     value_1.write(val)",
          "114:     return ()",
          "115: end",
          "117: @external",
          "118: func set_value_2{",
          "119:         syscall_ptr : felt*,",
          "120:         pedersen_ptr : HashBuiltin*,",
          "121:         range_check_ptr",
          "122:     }(val: felt):",
          "123:     value_2.write(val)",
          "124:     return ()",
          "125: end",
          "127: @view",
          "128: func set_admin{",
          "129:         syscall_ptr : felt*,",
          "130:         pedersen_ptr : HashBuiltin*,",
          "131:         range_check_ptr",
          "132:     }(new_admin: felt):",
          "133:     Proxy_only_admin()",
          "134:     Proxy_set_admin(new_admin)",
          "135:     return ()",
          "136: end",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20_Upgradeable.py||tests/token/erc20/test_ERC20_Upgradeable.py": [
          "File: tests/token/erc20/test_ERC20_Upgradeable.py -> tests/token/erc20/test_ERC20_Upgradeable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from starkware.starknet.testing.starknet import Starknet, StarknetContract",
          "2: from starkware.starknet.compiler.compile import compile_starknet_files",
          "3: import pytest",
          "4: import asyncio",
          "5: from starkware.starknet.testing.starknet import Starknet",
          "6: from utils import (",
          "7:     Signer, to_uint, sub_uint, str_to_felt, assert_revert,",
          "8:     get_contract_def, cached_contract, assert_event_emitted",
          "9: )",
          "11: signer = Signer(123456789987654321)",
          "13: USER = 999",
          "14: INIT_SUPPLY = to_uint(1000)",
          "15: AMOUNT = to_uint(250)",
          "16: NAME = str_to_felt('Upgradeable Token')",
          "17: SYMBOL = str_to_felt('UTKN')",
          "18: DECIMALS = 18",
          "21: @pytest.fixture(scope='module')",
          "22: def event_loop():",
          "23:     return asyncio.new_event_loop()",
          "26: # random value",
          "27: VALUE = 123",
          "28: VALUE_2 = 987",
          "31: signer = Signer(123456789987654321)",
          "34: @pytest.fixture(scope='module')",
          "35: def event_loop():",
          "36:     return asyncio.new_event_loop()",
          "39: @pytest.fixture(scope='module')",
          "40: def contract_defs():",
          "41:     account_def = get_contract_def('openzeppelin/account/Account.cairo')",
          "42:     token_def = get_contract_def(",
          "43:         'openzeppelin/token/erc20/ERC20_Upgradeable.cairo')",
          "44:     proxy_def = get_contract_def('openzeppelin/upgrades/Proxy.cairo')",
          "46:     return account_def, token_def, proxy_def",
          "49: @pytest.fixture(scope='module')",
          "50: async def token_init(contract_defs):",
          "51:     account_def, token_def, proxy_def = contract_defs",
          "52:     starknet = await Starknet.empty()",
          "53:     account1 = await starknet.deploy(",
          "54:         contract_def=account_def,",
          "55:         constructor_calldata=[signer.public_key]",
          "56:     )",
          "57:     account2 = await starknet.deploy(",
          "58:         contract_def=account_def,",
          "59:         constructor_calldata=[signer.public_key]",
          "60:     )",
          "61:     token_v1 = await starknet.deploy(",
          "62:         contract_def=token_def,",
          "63:         constructor_calldata=[]",
          "64:     )",
          "65:     token_v2 = await starknet.deploy(",
          "66:         contract_def=token_def,",
          "67:         constructor_calldata=[]",
          "68:     )",
          "69:     proxy = await starknet.deploy(",
          "70:         contract_def=proxy_def,",
          "71:         constructor_calldata=[token_v1.contract_address]",
          "72:     )",
          "73:     return (",
          "74:         starknet.state,",
          "75:         account1,",
          "76:         account2,",
          "77:         token_v1,",
          "78:         token_v2,",
          "79:         proxy",
          "80:     )",
          "83: @pytest.fixture",
          "84: def token_factory(contract_defs, token_init):",
          "85:     account_def, token_def, proxy_def = contract_defs",
          "86:     state, account1, account2, token_v1, token_v2, proxy = token_init",
          "87:     _state = state.copy()",
          "88:     account1 = cached_contract(_state, account_def, account1)",
          "89:     account2 = cached_contract(_state, account_def, account2)",
          "90:     token_v1 = cached_contract(_state, token_def, token_v1)",
          "91:     token_v2 = cached_contract(_state, token_def, token_v2)",
          "92:     proxy = cached_contract(_state, proxy_def, proxy)",
          "94:     return account1, account2, token_v1, token_v2, proxy",
          "97: @pytest.fixture",
          "98: async def after_initializer(token_factory):",
          "99:     admin, other, token_v1, token_v2, proxy = token_factory",
          "101:     # initialize",
          "102:     await signer.send_transaction(",
          "103:         admin, proxy.contract_address, 'initializer', [",
          "104:             NAME,",
          "105:             SYMBOL,",
          "106:             DECIMALS,",
          "108:             admin.contract_address,",
          "109:             admin.contract_address",
          "110:         ]",
          "111:     )",
          "113:     return admin, other, token_v1, token_v2, proxy",
          "116: @pytest.mark.asyncio",
          "117: async def test_constructor(token_factory):",
          "118:     admin, _, _, _, proxy = token_factory",
          "120:     await signer.send_transaction(",
          "121:         admin, proxy.contract_address, 'initializer', [",
          "122:             NAME,",
          "123:             SYMBOL,",
          "124:             DECIMALS,",
          "126:             admin.contract_address,",
          "127:             admin.contract_address",
          "128:         ])",
          "130:     # check name",
          "131:     execution_info = await signer.send_transaction(",
          "132:         admin, proxy.contract_address, 'name', [])",
          "133:     assert execution_info.result.response == [NAME]",
          "135:     # check symbol",
          "136:     execution_info = await signer.send_transaction(",
          "137:         admin, proxy.contract_address, 'symbol', []",
          "138:     )",
          "139:     assert execution_info.result.response == [SYMBOL]",
          "141:     # check decimals",
          "142:     execution_info = await signer.send_transaction(",
          "143:         admin, proxy.contract_address, 'decimals', []",
          "144:     )",
          "145:     assert execution_info.result.response == [DECIMALS]",
          "147:     # check total supply",
          "148:     execution_info = await signer.send_transaction(",
          "149:         admin, proxy.contract_address, 'totalSupply', []",
          "150:     )",
          "151:     assert execution_info.result.response == [*INIT_SUPPLY]",
          "154: @pytest.mark.asyncio",
          "155: async def test_upgrade(after_initializer):",
          "156:     admin, _, _, token_v2, proxy = after_initializer",
          "158:     # transfer",
          "159:     await signer.send_transaction(",
          "160:         admin, proxy.contract_address, 'transfer', [",
          "161:             USER,",
          "163:         ]",
          "164:     )",
          "166:     # upgrade",
          "167:     await signer.send_transaction(",
          "168:         admin, proxy.contract_address, 'upgrade', [",
          "169:             token_v2.contract_address",
          "170:         ]",
          "171:     )",
          "173:     # check admin balance",
          "174:     execution_info = await signer.send_transaction(",
          "175:         admin, proxy.contract_address, 'balanceOf', [",
          "176:             admin.contract_address",
          "177:         ]",
          "178:     )",
          "179:     assert execution_info.result.response == [*sub_uint(INIT_SUPPLY, AMOUNT)]",
          "181:     # check USER balance",
          "182:     execution_info = await signer.send_transaction(",
          "183:         admin, proxy.contract_address, 'balanceOf', [",
          "184:             USER",
          "185:         ]",
          "186:     )",
          "187:     assert execution_info.result.response == [*AMOUNT]",
          "189:     # check total supply",
          "190:     execution_info = await signer.send_transaction(",
          "191:         admin, proxy.contract_address, 'totalSupply', []",
          "192:     )",
          "193:     assert execution_info.result.response == [*INIT_SUPPLY]",
          "196: @pytest.mark.asyncio",
          "197: async def test_upgrade_from_nonadmin(after_initializer):",
          "198:     admin, non_admin, _, token_v2, proxy = after_initializer",
          "200:     # should revert",
          "201:     await assert_revert(",
          "202:         signer.send_transaction(",
          "203:             non_admin, proxy.contract_address, 'upgrade', [",
          "204:                 token_v2.contract_address",
          "205:             ]",
          "206:         )",
          "207:     )",
          "209:     # should upgrade from admin",
          "210:     await signer.send_transaction(",
          "211:         admin, proxy.contract_address, 'upgrade', [",
          "212:             token_v2.contract_address",
          "213:         ]",
          "214:     )",
          "",
          "---------------"
        ],
        "tests/upgrades/test_Proxy.py||tests/upgrades/test_Proxy.py": [
          "File: tests/upgrades/test_Proxy.py -> tests/upgrades/test_Proxy.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import pytest",
          "2: import asyncio",
          "3: from starkware.starknet.testing.starknet import Starknet",
          "4: from utils import (",
          "5:     Signer, assert_revert, get_contract_def, cached_contract",
          "6: )",
          "8: # random value",
          "9: VALUE = 123",
          "11: signer = Signer(123456789987654321)",
          "14: @pytest.fixture(scope='module')",
          "15: def event_loop():",
          "16:     return asyncio.new_event_loop()",
          "19: @pytest.fixture(scope='module')",
          "20: def contract_defs():",
          "21:     account_def = get_contract_def('openzeppelin/account/Account.cairo')",
          "22:     implementation_def = get_contract_def(",
          "23:         'tests/mocks/proxiable_implementation.cairo'",
          "24:     )",
          "25:     proxy_def = get_contract_def('openzeppelin/upgrades/Proxy.cairo')",
          "27:     return account_def, implementation_def, proxy_def",
          "30: @pytest.fixture(scope='module')",
          "31: async def proxy_init(contract_defs):",
          "32:     account_def, implementation_def, proxy_def = contract_defs",
          "33:     starknet = await Starknet.empty()",
          "34:     account = await starknet.deploy(",
          "35:         contract_def=account_def,",
          "36:         constructor_calldata=[signer.public_key]",
          "37:     )",
          "38:     implementation = await starknet.deploy(",
          "39:         contract_def=implementation_def,",
          "40:         constructor_calldata=[]",
          "41:     )",
          "42:     proxy = await starknet.deploy(",
          "43:         contract_def=proxy_def,",
          "44:         constructor_calldata=[implementation.contract_address]",
          "45:     )",
          "46:     return (",
          "47:         starknet.state,",
          "48:         account,",
          "49:         implementation,",
          "50:         proxy",
          "51:     )",
          "54: @pytest.fixture",
          "55: def proxy_factory(contract_defs, proxy_init):",
          "56:     account_def, implementation_def, proxy_def = contract_defs",
          "57:     state, account, implementation, proxy = proxy_init",
          "58:     _state = state.copy()",
          "59:     account = cached_contract(_state, account_def, account)",
          "60:     implementation = cached_contract(",
          "61:         _state,",
          "62:         implementation_def,",
          "63:         implementation",
          "64:     )",
          "65:     proxy = cached_contract(_state, proxy_def, proxy)",
          "67:     return account, implementation, proxy",
          "70: @pytest.mark.asyncio",
          "71: async def test_constructor_sets_correct_implementation(proxy_factory):",
          "72:     account, implementation, proxy = proxy_factory",
          "74:     execution_info = await signer.send_transaction(",
          "75:         account, proxy.contract_address, 'get_implementation', []",
          "76:     )",
          "77:     assert execution_info.result.response == [implementation.contract_address]",
          "80: @pytest.mark.asyncio",
          "81: async def test_initializer(proxy_factory):",
          "82:     account, _, proxy = proxy_factory",
          "84:     await signer.send_transaction(",
          "85:         account, proxy.contract_address, 'initializer', [",
          "86:             account.contract_address]",
          "87:     )",
          "90: @pytest.mark.asyncio",
          "91: async def test_default_fallback(proxy_factory):",
          "92:     account, _, proxy = proxy_factory",
          "94:     # set value through proxy",
          "95:     await signer.send_transaction(",
          "96:         account, proxy.contract_address, 'set_value', [VALUE]",
          "97:     )",
          "99:     # get value through proxy",
          "100:     execution_info = execution_info = await signer.send_transaction(",
          "101:         account, proxy.contract_address, 'get_value', []",
          "102:     )",
          "103:     assert execution_info.result.response == [VALUE]",
          "106: @pytest.mark.asyncio",
          "107: async def test_fallback_when_selector_does_not_exist(proxy_factory):",
          "108:     account, _, proxy = proxy_factory",
          "110:     await assert_revert(",
          "111:         signer.send_transaction(",
          "112:             account, proxy.contract_address, 'bad_selector', []",
          "113:         )",
          "114:     )",
          "",
          "---------------"
        ],
        "tests/upgrades/test_upgrades.py||tests/upgrades/test_upgrades.py": [
          "File: tests/upgrades/test_upgrades.py -> tests/upgrades/test_upgrades.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import pytest",
          "2: import asyncio",
          "3: from starkware.starknet.testing.starknet import Starknet",
          "4: from utils import (",
          "5:     Signer, assert_revert, assert_event_emitted, get_contract_def, cached_contract",
          "6: )",
          "8: # random value",
          "9: VALUE_1 = 123",
          "10: VALUE_2 = 987",
          "13: signer = Signer(123456789987654321)",
          "16: @pytest.fixture(scope='module')",
          "17: def event_loop():",
          "18:     return asyncio.new_event_loop()",
          "21: @pytest.fixture(scope='module')",
          "22: def contract_defs():",
          "23:     account_def = get_contract_def('openzeppelin/account/Account.cairo')",
          "24:     v1_def = get_contract_def('tests/mocks/upgrades_v1_mock.cairo')",
          "25:     v2_def = get_contract_def('tests/mocks/upgrades_v2_mock.cairo')",
          "26:     proxy_def = get_contract_def('openzeppelin/upgrades/Proxy.cairo')",
          "28:     return account_def, v1_def, v2_def, proxy_def",
          "31: @pytest.fixture(scope='module')",
          "32: async def proxy_init(contract_defs):",
          "33:     account_def, dummy_v1_def, dummy_v2_def, proxy_def = contract_defs",
          "34:     starknet = await Starknet.empty()",
          "35:     account1 = await starknet.deploy(",
          "36:         contract_def=account_def,",
          "37:         constructor_calldata=[signer.public_key]",
          "38:     )",
          "39:     account2 = await starknet.deploy(",
          "40:         contract_def=account_def,",
          "41:         constructor_calldata=[signer.public_key]",
          "42:     )",
          "43:     v1 = await starknet.deploy(",
          "44:         contract_def=dummy_v1_def,",
          "45:         constructor_calldata=[]",
          "46:     )",
          "47:     v2 = await starknet.deploy(",
          "48:         contract_def=dummy_v2_def,",
          "49:         constructor_calldata=[]",
          "50:     )",
          "51:     proxy = await starknet.deploy(",
          "52:         contract_def=proxy_def,",
          "53:         constructor_calldata=[v1.contract_address]",
          "54:     )",
          "55:     return (",
          "56:         starknet.state,",
          "57:         account1,",
          "58:         account2,",
          "59:         v1,",
          "60:         v2,",
          "61:         proxy",
          "62:     )",
          "65: @pytest.fixture",
          "66: def proxy_factory(contract_defs, proxy_init):",
          "67:     account_def, dummy_v1_def, dummy_v2_def, proxy_def = contract_defs",
          "68:     state, account1, account2, v1, v2, proxy = proxy_init",
          "69:     _state = state.copy()",
          "70:     account1 = cached_contract(_state, account_def, account1)",
          "71:     account2 = cached_contract(_state, account_def, account2)",
          "72:     v1 = cached_contract(_state, dummy_v1_def, v1)",
          "73:     v2 = cached_contract(_state, dummy_v2_def, v2)",
          "74:     proxy = cached_contract(_state, proxy_def, proxy)",
          "76:     return account1, account2, v1, v2, proxy",
          "79: @pytest.fixture",
          "80: async def after_upgrade(proxy_factory):",
          "81:     admin, other, v1, v2, proxy = proxy_factory",
          "83:     # initialize",
          "84:     await signer.send_transaction(",
          "85:         admin, proxy.contract_address, 'initializer', [",
          "86:             admin.contract_address",
          "87:         ]",
          "88:     )",
          "90:     # set value",
          "91:     await signer.send_transaction(",
          "92:         admin, proxy.contract_address, 'set_value_1', [",
          "93:             VALUE_1",
          "94:         ]",
          "95:     )",
          "97:     # upgrade",
          "98:     await signer.send_transaction(",
          "99:         admin, proxy.contract_address, 'upgrade', [",
          "100:             v2.contract_address",
          "101:         ]",
          "102:     )",
          "104:     return admin, other, v1, v2, proxy",
          "107: @pytest.mark.asyncio",
          "108: async def test_initializer(proxy_factory):",
          "109:     admin, _, _, _, proxy = proxy_factory",
          "111:     await signer.send_transaction(",
          "112:         admin, proxy.contract_address, 'initializer', [",
          "113:             admin.contract_address",
          "114:         ]",
          "115:     )",
          "118: @pytest.mark.asyncio",
          "119: async def test_initializer_already_initialized(proxy_factory):",
          "120:     admin, _, _, _, proxy = proxy_factory",
          "122:     await signer.send_transaction(",
          "123:         admin, proxy.contract_address, 'initializer', [",
          "124:             admin.contract_address",
          "125:         ]",
          "126:     )",
          "128:     await assert_revert(",
          "129:         signer.send_transaction(",
          "130:             admin, proxy.contract_address, 'initializer', [",
          "131:                 admin.contract_address",
          "132:             ]",
          "133:         ),",
          "134:         reverted_with='Proxy: contract already initialized'",
          "135:     )",
          "138: @pytest.mark.asyncio",
          "139: async def test_upgrade(proxy_factory):",
          "140:     admin, _, _, v2, proxy = proxy_factory",
          "142:     # initialize implementation",
          "143:     await signer.send_transaction(",
          "144:         admin, proxy.contract_address, 'initializer', [",
          "145:             admin.contract_address",
          "146:         ]",
          "147:     )",
          "149:     # set value",
          "150:     await signer.send_transaction(",
          "151:         admin, proxy.contract_address, 'set_value_1', [",
          "152:             VALUE_1",
          "153:         ]",
          "154:     )",
          "156:     # check value",
          "157:     execution_info = await signer.send_transaction(",
          "158:         admin, proxy.contract_address, 'get_value_1', []",
          "159:     )",
          "160:     assert execution_info.result.response == [VALUE_1, ]",
          "162:     # upgrade",
          "163:     await signer.send_transaction(",
          "164:         admin, proxy.contract_address, 'upgrade', [",
          "165:             v2.contract_address",
          "166:         ]",
          "167:     )",
          "169:     # check value",
          "170:     execution_info = await signer.send_transaction(",
          "171:         admin, proxy.contract_address, 'get_value_1', []",
          "172:     )",
          "173:     assert execution_info.result.response == [VALUE_1, ]",
          "176: @pytest.mark.asyncio",
          "177: async def test_upgrade_event(proxy_factory):",
          "178:     admin, _, _, v2, proxy = proxy_factory",
          "180:     # initialize implementation",
          "181:     await signer.send_transaction(",
          "182:         admin, proxy.contract_address, 'initializer', [",
          "183:             admin.contract_address",
          "184:         ]",
          "185:     )",
          "187:     # upgrade",
          "188:     tx_exec_info = await signer.send_transaction(",
          "189:         admin, proxy.contract_address, 'upgrade', [",
          "190:             v2.contract_address",
          "191:         ]",
          "192:     )",
          "194:     # check event",
          "195:     assert_event_emitted(",
          "196:         tx_exec_info,",
          "197:         from_address=proxy.contract_address,",
          "198:         name='Upgraded',",
          "199:         data=[",
          "200:             v2.contract_address",
          "201:         ]",
          "202:     )",
          "205: @pytest.mark.asyncio",
          "206: async def test_upgrade_from_non_admin(proxy_factory):",
          "207:     admin, non_admin, _, v2, proxy = proxy_factory",
          "209:     # initialize implementation",
          "210:     await signer.send_transaction(",
          "211:         admin, proxy.contract_address, 'initializer', [",
          "212:             admin.contract_address",
          "213:         ]",
          "214:     )",
          "216:     # upgrade should revert",
          "217:     await assert_revert(",
          "218:         signer.send_transaction(",
          "219:             non_admin, proxy.contract_address, 'upgrade', [",
          "220:                 v2.contract_address",
          "221:             ]",
          "222:         ),",
          "223:         reverted_with=\"Proxy: caller is not admin\"",
          "224:     )",
          "227: # Using `after_upgrade` fixture henceforth",
          "228: @pytest.mark.asyncio",
          "229: async def test_implementation_v2(after_upgrade):",
          "230:     admin, _, _, v2, proxy = after_upgrade",
          "232:     # check implementation address",
          "233:     execution_info = await signer.send_transaction(",
          "234:         admin, proxy.contract_address, 'get_implementation', []",
          "235:     )",
          "236:     assert execution_info.result.response == [v2.contract_address]",
          "238:     # check admin",
          "239:     execution_info = await signer.send_transaction(",
          "240:         admin, proxy.contract_address, 'get_admin', []",
          "241:     )",
          "242:     assert execution_info.result.response == [admin.contract_address]",
          "244:     # check value",
          "245:     execution_info = await signer.send_transaction(",
          "246:         admin, proxy.contract_address, 'get_value_1', []",
          "247:     )",
          "248:     assert execution_info.result.response == [VALUE_1, ]",
          "251: @pytest.mark.asyncio",
          "252: async def test_set_admin(after_upgrade):",
          "253:     admin, new_admin, _, _, proxy = after_upgrade",
          "255:     # change admin",
          "256:     await signer.send_transaction(",
          "257:         admin, proxy.contract_address, 'set_admin', [",
          "258:             new_admin.contract_address",
          "259:         ]",
          "260:     )",
          "262:     # check admin",
          "263:     execution_info = await signer.send_transaction(",
          "264:         admin, proxy.contract_address, 'get_admin', []",
          "265:     )",
          "266:     assert execution_info.result.response == [new_admin.contract_address]",
          "269: @pytest.mark.asyncio",
          "270: async def test_set_admin_from_non_admin(after_upgrade):",
          "271:     _, non_admin, _, _, proxy = after_upgrade",
          "273:     # change admin should revert",
          "274:     await assert_revert(",
          "275:         signer.send_transaction(",
          "276:             non_admin, proxy.contract_address, 'set_admin', [",
          "277:                 non_admin.contract_address",
          "278:             ]",
          "279:         )",
          "280:     )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c15e9b7c6ccb0ca719eed7a3a93865c9d7c39581",
      "candidate_info": {
        "commit_hash": "c15e9b7c6ccb0ca719eed7a3a93865c9d7c39581",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/c15e9b7c6ccb0ca719eed7a3a93865c9d7c39581",
        "files": [
          "docs/Security.md",
          "src/openzeppelin/security/pausable.cairo",
          "src/openzeppelin/token/erc20/ERC20_Pausable.cairo",
          "src/openzeppelin/token/erc721/ERC721_Mintable_Pausable.cairo",
          "tests/mocks/Pausable.cairo",
          "tests/security/test_pausable.py",
          "tests/token/erc20/test_ERC20_Pausable.py",
          "tests/token/erc721/test_ERC721_Mintable_Pausable.py"
        ],
        "message": "Integrate namespace and events to Pausable (#310)\n\n* update pausable to namespace\n\n* start pausable docs\n\n* add namespace and events\n\n* add pausable tests\n\n* finish pausable docs\n\n* Apply suggestions from code review\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>\n\n* add unpause assertion\n\n* fix pausable error msg\n\n* fix attribution\n\nCo-authored-by: Mart\u00edn Triay <martriay@gmail.com>",
        "before_after_code_files": [
          "src/openzeppelin/security/pausable.cairo||src/openzeppelin/security/pausable.cairo",
          "src/openzeppelin/token/erc20/ERC20_Pausable.cairo||src/openzeppelin/token/erc20/ERC20_Pausable.cairo",
          "src/openzeppelin/token/erc721/ERC721_Mintable_Pausable.cairo||src/openzeppelin/token/erc721/ERC721_Mintable_Pausable.cairo",
          "tests/mocks/Pausable.cairo||tests/mocks/Pausable.cairo",
          "tests/security/test_pausable.py||tests/security/test_pausable.py",
          "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py",
          "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/security/test_pausable.py||tests/security/test_pausable.py",
            "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py",
            "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py"
          ],
          "candidate": [
            "tests/security/test_pausable.py||tests/security/test_pausable.py",
            "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py",
            "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py"
          ]
        }
      },
      "candidate_diff": {
        "src/openzeppelin/security/pausable.cairo||src/openzeppelin/security/pausable.cairo": [
          "File: src/openzeppelin/security/pausable.cairo -> src/openzeppelin/security/pausable.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from starkware.cairo.common.cairo_builtins import HashBuiltin",
          "8: from starkware.cairo.common.bool import TRUE, FALSE",
          "10: @storage_var",
          "11: func Pausable_paused() -> (paused: felt):",
          "12: end",
          "36: end",
          "46: end",
          "56: end",
          "",
          "[Removed Lines]",
          "14: func Pausable_when_not_paused{",
          "15:         syscall_ptr : felt*,",
          "16:         pedersen_ptr : HashBuiltin*,",
          "17:         range_check_ptr",
          "18:     }():",
          "19:     let (is_paused) = Pausable_paused.read()",
          "20:     with_attr error_message(\"Pausable: contract is paused\"):",
          "21:         assert is_paused = FALSE",
          "22:     end",
          "23:     return ()",
          "24: end",
          "26: func Pausable_when_paused{",
          "27:         syscall_ptr : felt*,",
          "28:         pedersen_ptr : HashBuiltin*,",
          "29:         range_check_ptr",
          "30:     }():",
          "31:     let (is_paused) = Pausable_paused.read()",
          "32:     with_attr error_message(\"Pausable: contract is not paused\"):",
          "33:         assert is_paused = TRUE",
          "34:     end",
          "35:     return ()",
          "38: func Pausable_pause{",
          "39:         syscall_ptr : felt*,",
          "40:         pedersen_ptr : HashBuiltin*,",
          "41:         range_check_ptr",
          "42:     }():",
          "43:     Pausable_when_not_paused()",
          "44:     Pausable_paused.write(TRUE)",
          "45:     return ()",
          "48: func Pausable_unpause{",
          "49:         syscall_ptr : felt*,",
          "50:         pedersen_ptr : HashBuiltin*,",
          "51:         range_check_ptr",
          "52:     }():",
          "53:     Pausable_when_paused()",
          "54:     Pausable_paused.write(FALSE)",
          "55:     return ()",
          "",
          "[Added Lines]",
          "10: #",
          "11: # Storage",
          "12: #",
          "18: #",
          "19: # Events",
          "20: #",
          "22: @event",
          "23: func Paused(account: felt):",
          "26: @event",
          "27: func Unpaused(account: felt):",
          "30: namespace Pausable:",
          "32:     func is_paused{",
          "33:             syscall_ptr: felt*,",
          "34:             pedersen_ptr: HashBuiltin*,",
          "35:             range_check_ptr",
          "36:         }() -> (is_paused: felt):",
          "37:         let (is_paused) = Pausable_paused.read()",
          "38:         return (is_paused)",
          "39:     end",
          "41:     func assert_not_paused{",
          "42:             syscall_ptr: felt*,",
          "43:             pedersen_ptr: HashBuiltin*,",
          "44:             range_check_ptr",
          "45:         }():",
          "46:         let (is_paused) = Pausable_paused.read()",
          "47:         with_attr error_message(\"Pausable: paused\"):",
          "48:             assert is_paused = FALSE",
          "49:         end",
          "50:         return ()",
          "51:     end",
          "53:     func assert_paused{",
          "54:             syscall_ptr: felt*,",
          "55:             pedersen_ptr: HashBuiltin*,",
          "56:             range_check_ptr",
          "57:         }():",
          "58:         let (is_paused) = Pausable_paused.read()",
          "59:         with_attr error_message(\"Pausable: not paused\"):",
          "60:             assert is_paused = TRUE",
          "61:         end",
          "62:         return ()",
          "63:     end",
          "65:     func _pause{",
          "66:             syscall_ptr: felt*,",
          "67:             pedersen_ptr: HashBuiltin*,",
          "68:             range_check_ptr",
          "69:         }():",
          "70:         assert_not_paused()",
          "71:         Pausable_paused.write(TRUE)",
          "73:         let (account) = get_caller_address()",
          "74:         Paused.emit(account)",
          "75:         return ()",
          "76:     end",
          "78:     func _unpause{",
          "79:             syscall_ptr: felt*,",
          "80:             pedersen_ptr: HashBuiltin*,",
          "81:             range_check_ptr",
          "82:         }():",
          "83:         assert_paused()",
          "84:         Pausable_paused.write(FALSE)",
          "86:         let (account) = get_caller_address()",
          "87:         Unpaused.emit(account)",
          "88:         return ()",
          "89:     end",
          "",
          "---------------"
        ],
        "src/openzeppelin/token/erc20/ERC20_Pausable.cairo||src/openzeppelin/token/erc20/ERC20_Pausable.cairo": [
          "File: src/openzeppelin/token/erc20/ERC20_Pausable.cairo -> src/openzeppelin/token/erc20/ERC20_Pausable.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     Ownable_only_owner",
          "15: )",
          "24: @constructor",
          "25: func constructor{",
          "",
          "[Removed Lines]",
          "17: from openzeppelin.security.pausable import (",
          "18:     Pausable_paused,",
          "19:     Pausable_pause,",
          "20:     Pausable_unpause,",
          "21:     Pausable_when_not_paused",
          "22: )",
          "",
          "[Added Lines]",
          "17: from openzeppelin.security.pausable import Pausable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:         pedersen_ptr: HashBuiltin*,",
          "111:         range_check_ptr",
          "112:     }() -> (paused: felt):",
          "114:     return (paused)",
          "115: end",
          "",
          "[Removed Lines]",
          "113:     let (paused) = Pausable_paused.read()",
          "",
          "[Added Lines]",
          "108:     let (paused) = Pausable.is_paused()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:         pedersen_ptr : HashBuiltin*,",
          "125:         range_check_ptr",
          "126:     }(recipient: felt, amount: Uint256) -> (success: felt):",
          "128:     ERC20.transfer(recipient, amount)",
          "129:     return (TRUE)",
          "130: end",
          "",
          "[Removed Lines]",
          "127:     Pausable_when_not_paused()",
          "",
          "[Added Lines]",
          "122:     Pausable.assert_not_paused()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:         recipient: felt,",
          "140:         amount: Uint256",
          "141:     ) -> (success: felt):",
          "143:     ERC20.transfer_from(sender, recipient, amount)",
          "144:     return (TRUE)",
          "145: end",
          "",
          "[Removed Lines]",
          "142:     Pausable_when_not_paused()",
          "",
          "[Added Lines]",
          "137:     Pausable.assert_not_paused()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:         pedersen_ptr : HashBuiltin*,",
          "151:         range_check_ptr",
          "152:     }(spender: felt, amount: Uint256) -> (success: felt):",
          "154:     ERC20.approve(spender, amount)",
          "155:     return (TRUE)",
          "156: end",
          "",
          "[Removed Lines]",
          "153:     Pausable_when_not_paused()",
          "",
          "[Added Lines]",
          "148:     Pausable.assert_not_paused()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:         pedersen_ptr : HashBuiltin*,",
          "162:         range_check_ptr",
          "163:     }(spender: felt, added_value: Uint256) -> (success: felt):",
          "165:     ERC20.increase_allowance(spender, added_value)",
          "166:     return (TRUE)",
          "167: end",
          "",
          "[Removed Lines]",
          "164:     Pausable_when_not_paused()",
          "",
          "[Added Lines]",
          "159:     Pausable.assert_not_paused()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "172:         pedersen_ptr : HashBuiltin*,",
          "173:         range_check_ptr",
          "174:     }(spender: felt, subtracted_value: Uint256) -> (success: felt):",
          "176:     ERC20.decrease_allowance(spender, subtracted_value)",
          "177:     return (TRUE)",
          "178: end",
          "",
          "[Removed Lines]",
          "175:     Pausable_when_not_paused()",
          "",
          "[Added Lines]",
          "170:     Pausable.assert_not_paused()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "184:         range_check_ptr",
          "185:     }():",
          "186:     Ownable_only_owner()",
          "188:     return ()",
          "189: end",
          "",
          "[Removed Lines]",
          "187:     Pausable_pause()",
          "",
          "[Added Lines]",
          "182:     Pausable._pause()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "195:         range_check_ptr",
          "196:     }():",
          "197:     Ownable_only_owner()",
          "199:     return ()",
          "200: end",
          "",
          "[Removed Lines]",
          "198:     Pausable_unpause()",
          "",
          "[Added Lines]",
          "193:     Pausable._unpause()",
          "",
          "---------------"
        ],
        "src/openzeppelin/token/erc721/ERC721_Mintable_Pausable.cairo||src/openzeppelin/token/erc721/ERC721_Mintable_Pausable.cairo": [
          "File: src/openzeppelin/token/erc721/ERC721_Mintable_Pausable.cairo -> src/openzeppelin/token/erc721/ERC721_Mintable_Pausable.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from openzeppelin.introspection.ERC165 import ERC165",
          "36: from openzeppelin.access.ownable import (",
          "37:     Ownable_initializer,",
          "",
          "[Removed Lines]",
          "29: from openzeppelin.security.pausable import (",
          "30:     Pausable_paused,",
          "31:     Pausable_pause,",
          "32:     Pausable_unpause,",
          "33:     Pausable_when_not_paused",
          "34: )",
          "",
          "[Added Lines]",
          "29: from openzeppelin.security.pausable import Pausable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         pedersen_ptr: HashBuiltin*,",
          "148:         range_check_ptr",
          "149:     }() -> (paused: felt):",
          "151:     return (paused)",
          "152: end",
          "",
          "[Removed Lines]",
          "150:     let (paused) = Pausable_paused.read()",
          "",
          "[Added Lines]",
          "145:     let (paused) = Pausable.is_paused()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:         syscall_ptr: felt*,",
          "163:         range_check_ptr",
          "164:     }(to: felt, tokenId: Uint256):",
          "166:     ERC721_approve(to, tokenId)",
          "167:     return ()",
          "168: end",
          "",
          "[Removed Lines]",
          "165:     Pausable_when_not_paused()",
          "",
          "[Added Lines]",
          "160:     Pausable.assert_not_paused()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "173:         pedersen_ptr: HashBuiltin*,",
          "174:         range_check_ptr",
          "175:     }(operator: felt, approved: felt):",
          "177:     ERC721_setApprovalForAll(operator, approved)",
          "178:     return ()",
          "179: end",
          "",
          "[Removed Lines]",
          "176:     Pausable_when_not_paused()",
          "",
          "[Added Lines]",
          "171:     Pausable.assert_not_paused()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "188:         to: felt,",
          "189:         tokenId: Uint256",
          "190:     ):",
          "192:     ERC721_transferFrom(from_, to, tokenId)",
          "193:     return ()",
          "194: end",
          "",
          "[Removed Lines]",
          "191:     Pausable_when_not_paused()",
          "",
          "[Added Lines]",
          "186:     Pausable.assert_not_paused()",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "205:         data_len: felt,",
          "206:         data: felt*",
          "207:     ):",
          "209:     ERC721_safeTransferFrom(from_, to, tokenId, data_len, data)",
          "210:     return ()",
          "211: end",
          "",
          "[Removed Lines]",
          "208:     Pausable_when_not_paused()",
          "",
          "[Added Lines]",
          "203:     Pausable.assert_not_paused()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "216:         syscall_ptr: felt*,",
          "217:         range_check_ptr",
          "218:     }(to: felt, tokenId: Uint256):",
          "220:     Ownable_only_owner()",
          "221:     ERC721_mint(to, tokenId)",
          "222:     return ()",
          "",
          "[Removed Lines]",
          "219:     Pausable_when_not_paused()",
          "",
          "[Added Lines]",
          "214:     Pausable.assert_not_paused()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "240:         range_check_ptr",
          "241:     }():",
          "242:     Ownable_only_owner()",
          "244:     return ()",
          "245: end",
          "",
          "[Removed Lines]",
          "243:     Pausable_pause()",
          "",
          "[Added Lines]",
          "238:     Pausable._pause()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "251:         range_check_ptr",
          "252:     }():",
          "253:     Ownable_only_owner()",
          "255:     return ()",
          "256: end",
          "",
          "[Removed Lines]",
          "254:     Pausable_unpause()",
          "",
          "[Added Lines]",
          "249:     Pausable._unpause()",
          "",
          "---------------"
        ],
        "tests/mocks/Pausable.cairo||tests/mocks/Pausable.cairo": [
          "File: tests/mocks/Pausable.cairo -> tests/mocks/Pausable.cairo",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # SPDX-License-Identifier: MIT",
          "3: %lang starknet",
          "5: from starkware.starknet.common.syscalls import get_caller_address",
          "6: from starkware.cairo.common.cairo_builtins import HashBuiltin",
          "7: from starkware.cairo.common.bool import TRUE, FALSE",
          "9: from openzeppelin.security.pausable import Pausable",
          "11: @storage_var",
          "12: func drastic_measure_taken() -> (res: felt):",
          "13: end",
          "15: @storage_var",
          "16: func count() -> (res: felt):",
          "17: end",
          "19: @view",
          "20: func isPaused{",
          "21:         syscall_ptr: felt*,",
          "22:         pedersen_ptr: HashBuiltin*,",
          "23:         range_check_ptr",
          "24:     }() -> (isPaused: felt):",
          "25:     let (isPaused) = Pausable.is_paused()",
          "26:     return (isPaused)",
          "27: end",
          "29: @view",
          "30: func getCount{",
          "31:         syscall_ptr: felt*,",
          "32:         pedersen_ptr: HashBuiltin*,",
          "33:         range_check_ptr",
          "34:     }() -> (res: felt):",
          "35:     let (res) = count.read()",
          "36:     return (res)",
          "37: end",
          "39: @view",
          "40: func getDrasticMeasureTaken{",
          "41:         syscall_ptr: felt*,",
          "42:         pedersen_ptr: HashBuiltin*,",
          "43:         range_check_ptr",
          "44:     }() -> (res: felt):",
          "45:     let (res) = drastic_measure_taken.read()",
          "46:     return (res)",
          "47: end",
          "49: @external",
          "50: func normalProcess{",
          "51:         syscall_ptr: felt*,",
          "52:         pedersen_ptr: HashBuiltin*,",
          "53:         range_check_ptr",
          "54:     }():",
          "55:     Pausable.assert_not_paused()",
          "57:     let (currentCount) = count.read()",
          "58:     count.write(currentCount + 1)",
          "59:     return ()",
          "60: end",
          "62: @external",
          "63: func drasticMeasure{",
          "64:         syscall_ptr: felt*,",
          "65:         pedersen_ptr: HashBuiltin*,",
          "66:         range_check_ptr",
          "67:     }():",
          "68:     Pausable.assert_paused()",
          "70:     drastic_measure_taken.write(TRUE)",
          "71:     return ()",
          "72: end",
          "74: @external",
          "75: func pause{",
          "76:         syscall_ptr: felt*,",
          "77:         pedersen_ptr: HashBuiltin*,",
          "78:         range_check_ptr",
          "79:     }():",
          "80:     Pausable._pause()",
          "81:     return ()",
          "82: end",
          "84: @external",
          "85: func unpause{",
          "86:         syscall_ptr: felt*,",
          "87:         pedersen_ptr: HashBuiltin*,",
          "88:         range_check_ptr",
          "89:     }():",
          "90:     Pausable._unpause()",
          "91:     return ()",
          "92: end",
          "",
          "---------------"
        ],
        "tests/security/test_pausable.py||tests/security/test_pausable.py": [
          "File: tests/security/test_pausable.py -> tests/security/test_pausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import pytest",
          "2: from starkware.starknet.testing.starknet import Starknet",
          "3: from utils import (",
          "4:     TRUE, FALSE, assert_revert, assert_event_emitted,",
          "5:     get_contract_def, cached_contract, TestSigner",
          "6: )",
          "8: signer = TestSigner(12345678987654321)",
          "10: @pytest.fixture",
          "11: async def pausable_factory():",
          "12:     pausable_def = get_contract_def(\"tests/mocks/Pausable.cairo\")",
          "13:     account_def = get_contract_def(\"openzeppelin/account/Account.cairo\")",
          "15:     starknet = await Starknet.empty()",
          "16:     pausable = await starknet.deploy(",
          "17:         contract_def=pausable_def,",
          "18:         constructor_calldata=[]",
          "19:     )",
          "20:     account = await starknet.deploy(",
          "21:         contract_def=account_def,",
          "22:         constructor_calldata=[signer.public_key]",
          "23:     )",
          "24:     state = starknet.state.copy()",
          "26:     pausable = cached_contract(state, pausable_def, pausable)",
          "27:     account = cached_contract(state, account_def, account)",
          "28:     return pausable, account",
          "31: @pytest.mark.asyncio",
          "32: async def test_pausable_when_unpaused(pausable_factory):",
          "33:     contract, _ = pausable_factory",
          "35:     execution_info = await contract.isPaused().call()",
          "36:     assert execution_info.result.isPaused == FALSE",
          "38:     execution_info = await contract.getCount().call()",
          "39:     assert execution_info.result.res == 0",
          "41:     # check that function executes when unpaused",
          "42:     await contract.normalProcess().invoke()",
          "44:     execution_info = await contract.getCount().call()",
          "45:     assert execution_info.result.res == 1",
          "47:     await assert_revert(",
          "48:         contract.drasticMeasure().invoke(),",
          "49:         reverted_with=\"Pausable: not paused\"",
          "50:     )",
          "52: @pytest.mark.asyncio",
          "53: async def test_pausable_when_paused(pausable_factory):",
          "54:     contract, _ = pausable_factory",
          "56:     execution_info = await contract.isPaused().call()",
          "57:     assert execution_info.result.isPaused == FALSE",
          "59:     # pause",
          "60:     await contract.pause().invoke()",
          "62:     execution_info = await contract.isPaused().call()",
          "63:     assert execution_info.result.isPaused == TRUE",
          "65:     await assert_revert(",
          "66:         contract.normalProcess().invoke(),",
          "67:         reverted_with=\"Pausable: paused\"",
          "68:     )",
          "70:     execution_info = await contract.getDrasticMeasureTaken().call()",
          "71:     assert execution_info.result.res == FALSE",
          "73:     # drastic measure",
          "74:     await contract.drasticMeasure().invoke()",
          "76:     execution_info = await contract.getDrasticMeasureTaken().call()",
          "77:     assert execution_info.result.res == TRUE",
          "79:     # unpause",
          "80:     await contract.unpause().invoke()",
          "82:     execution_info = await contract.isPaused().call()",
          "83:     assert execution_info.result.isPaused == FALSE",
          "85:     # check normal process after unpausing",
          "86:     await contract.normalProcess().invoke()",
          "88:     execution_info = await contract.getCount().call()",
          "89:     assert execution_info.result.res == 1",
          "91:     await assert_revert(",
          "92:         contract.drasticMeasure().invoke(),",
          "93:         reverted_with=\"Pausable: not paused\"",
          "94:     )",
          "96: @pytest.mark.asyncio",
          "97: async def test_pausable_pause_when_paused(pausable_factory):",
          "98:     contract, _ = pausable_factory",
          "100:     # pause",
          "101:     await contract.pause().invoke()",
          "103:     # re-pause",
          "104:     await assert_revert(",
          "105:         contract.pause().invoke(),",
          "106:         reverted_with=\"Pausable: paused\"",
          "107:     )",
          "109:     # unpause",
          "110:     await contract.unpause().invoke()",
          "112:     # re-unpause",
          "113:     await assert_revert(",
          "114:         contract.unpause().invoke(),",
          "115:         reverted_with=\"Pausable: not paused\"",
          "116:     )",
          "118: @pytest.mark.asyncio",
          "119: async def test_pausable_emits_events(pausable_factory):",
          "120:     contract, account = pausable_factory",
          "122:     # pause",
          "123:     tx_exec_info = await signer.send_transaction(",
          "124:         account, contract.contract_address, 'pause', []",
          "125:         )",
          "127:     assert_event_emitted(",
          "128:         tx_exec_info,",
          "129:         from_address=contract.contract_address,",
          "130:         name='Paused',",
          "131:         data=[account.contract_address]",
          "132:     )",
          "134:     # unpause",
          "135:     tx_exec_info = await signer.send_transaction(",
          "136:         account, contract.contract_address, 'unpause', []",
          "137:         )",
          "139:     assert_event_emitted(",
          "140:         tx_exec_info,",
          "141:         from_address=contract.contract_address,",
          "142:         name='Unpaused',",
          "143:         data=[account.contract_address]",
          "144:     )",
          "",
          "---------------"
        ],
        "tests/token/erc20/test_ERC20_Pausable.py||tests/token/erc20/test_ERC20_Pausable.py": [
          "File: tests/token/erc20/test_ERC20_Pausable.py -> tests/token/erc20/test_ERC20_Pausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:         'transfer',",
          "103:         [other.contract_address, *AMOUNT]",
          "104:     ),",
          "106:     )",
          "108:     await assert_revert(signer.send_transaction(",
          "",
          "[Removed Lines]",
          "105:         reverted_with=\"Pausable: contract is paused\"",
          "",
          "[Added Lines]",
          "105:         reverted_with=\"Pausable: paused\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:         'transferFrom',",
          "112:         [other.contract_address, other.contract_address, *AMOUNT]",
          "113:     ),",
          "115:     )",
          "117:     await assert_revert(signer.send_transaction(",
          "",
          "[Removed Lines]",
          "114:         reverted_with=\"Pausable: contract is paused\"",
          "",
          "[Added Lines]",
          "114:         reverted_with=\"Pausable: paused\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:         'approve',",
          "121:         [other.contract_address, *AMOUNT]",
          "122:     ),",
          "124:     )",
          "126:     await assert_revert(signer.send_transaction(",
          "",
          "[Removed Lines]",
          "123:         reverted_with=\"Pausable: contract is paused\"",
          "",
          "[Added Lines]",
          "123:         reverted_with=\"Pausable: paused\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:         'increaseAllowance',",
          "130:         [other.contract_address, *AMOUNT]",
          "131:     ),",
          "133:     )",
          "135:     await assert_revert(signer.send_transaction(",
          "",
          "[Removed Lines]",
          "132:         reverted_with=\"Pausable: contract is paused\"",
          "",
          "[Added Lines]",
          "132:         reverted_with=\"Pausable: paused\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:         'decreaseAllowance',",
          "139:         [other.contract_address, *AMOUNT]",
          "140:     ),",
          "142:     )",
          "",
          "[Removed Lines]",
          "141:         reverted_with=\"Pausable: contract is paused\"",
          "",
          "[Added Lines]",
          "141:         reverted_with=\"Pausable: paused\"",
          "",
          "---------------"
        ],
        "tests/token/erc721/test_ERC721_Mintable_Pausable.py||tests/token/erc721/test_ERC721_Mintable_Pausable.py": [
          "File: tests/token/erc721/test_ERC721_Mintable_Pausable.py -> tests/token/erc721/test_ERC721_Mintable_Pausable.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:             other.contract_address,",
          "102:         ]),",
          "104:     )",
          "106:     await assert_revert(signer.send_transaction(",
          "",
          "[Removed Lines]",
          "103:         reverted_with=\"Pausable: contract is paused\"",
          "",
          "[Added Lines]",
          "103:         reverted_with=\"Pausable: paused\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:             other.contract_address,",
          "109:             TRUE",
          "110:         ]),",
          "112:     )",
          "114:     await assert_revert(signer.send_transaction(",
          "",
          "[Removed Lines]",
          "111:         reverted_with=\"Pausable: contract is paused\"",
          "",
          "[Added Lines]",
          "111:         reverted_with=\"Pausable: paused\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:             other.contract_address,",
          "119:         ]),",
          "121:     )",
          "123:     await assert_revert(signer.send_transaction(",
          "",
          "[Removed Lines]",
          "120:         reverted_with=\"Pausable: contract is paused\"",
          "",
          "[Added Lines]",
          "120:         reverted_with=\"Pausable: paused\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:             len(DATA),",
          "130:         ]),",
          "132:     )",
          "134:     await assert_revert(signer.send_transaction(",
          "",
          "[Removed Lines]",
          "131:         reverted_with=\"Pausable: contract is paused\"",
          "",
          "[Added Lines]",
          "131:         reverted_with=\"Pausable: paused\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "136:             other.contract_address,",
          "138:         ]),",
          "140:     )",
          "",
          "[Removed Lines]",
          "139:         reverted_with=\"Pausable: contract is paused\"",
          "",
          "[Added Lines]",
          "139:         reverted_with=\"Pausable: paused\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a8effd29949f79c852dde4dd2c944b79c00bc6d",
      "candidate_info": {
        "commit_hash": "7a8effd29949f79c852dde4dd2c944b79c00bc6d",
        "repo": "OpenZeppelin/cairo-contracts",
        "commit_url": "https://github.com/OpenZeppelin/cairo-contracts/commit/7a8effd29949f79c852dde4dd2c944b79c00bc6d",
        "files": [
          "setup.cfg",
          "tests/signers.py",
          "tox.ini"
        ],
        "message": "Bump Nile version to 0.7.1 (#381)\n\n* feat: change nile version \ud83d\udd28\n\n* fix: default max_fee to 1 \ud83d\udd28\n\n* Revert \"fix: default max_fee to 1 \ud83d\udd28\"\n\nThis reverts commit e0a32809c125163dffd940014e916813fa3d78bd.\n\n* fix: bump nile to 0.7.1\n\nCo-authored-by: Andrew <fleming-andrew@protonmail.com>",
        "before_after_code_files": [
          "setup.cfg||setup.cfg",
          "tests/signers.py||tests/signers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/signers.py||tests/signers.py"
          ],
          "candidate": [
            "tests/signers.py||tests/signers.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: install_requires =",
          "23:     importlib-metadata>=4.0",
          "26: [options.packages.find]",
          "27: where = src",
          "",
          "[Removed Lines]",
          "24:     cairo-nile==0.6.1",
          "",
          "[Added Lines]",
          "24:     cairo-nile==0.7.1",
          "",
          "---------------"
        ],
        "tests/signers.py||tests/signers.py": [
          "File: tests/signers.py -> tests/signers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:             build_call[0] = hex(build_call[0])",
          "52:             build_calls.append(build_call)",
          "55:         return await account.__execute__(call_array, calldata, nonce).invoke(signature=[sig_r, sig_s])",
          "57: class MockEthSigner():",
          "58:     \"\"\"",
          "59:     Utility for sending signed transactions to an Account on Starknet, like MockSigner, but using a secp256k1 signature.",
          "",
          "[Removed Lines]",
          "54:         (call_array, calldata, sig_r, sig_s) = self.signer.sign_transaction(hex(account.contract_address), build_calls, nonce, max_fee)",
          "",
          "[Added Lines]",
          "56:         (call_array, calldata, sig_r, sig_s) = self.signer.sign_transaction(",
          "57:             hex(account.contract_address), build_calls, nonce, max_fee)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     private_key : int",
          "64:     \"\"\"",
          "65:     def __init__(self, private_key):",
          "66:         self.signer = eth_keys.keys.PrivateKey(private_key)",
          "69:     async def send_transaction(self, account, to, selector_name, calldata, nonce=None, max_fee=0):",
          "70:         return await self.send_transactions(account, [(to, selector_name, calldata)], nonce, max_fee)",
          "",
          "[Removed Lines]",
          "67:         self.eth_address = int(self.signer.public_key.to_checksum_address(),0)",
          "",
          "[Added Lines]",
          "72:         self.eth_address = int(self.signer.public_key.to_checksum_address(), 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:             account.contract_address, call_array, calldata, nonce, max_fee",
          "86:         )",
          "89:         sig_r = to_uint(signature.r)",
          "90:         sig_s = to_uint(signature.s)",
          "",
          "[Removed Lines]",
          "88:         signature = self.signer.sign_msg_hash((message_hash).to_bytes(32, byteorder=\"big\"))",
          "",
          "[Added Lines]",
          "93:         signature = self.signer.sign_msg_hash(",
          "94:             (message_hash).to_bytes(32, byteorder=\"big\"))",
          "",
          "---------------"
        ]
      }
    }
  ]
}