{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "24bfd53c737bec226429f32b5e1d0ed6c4a4fc04",
      "candidate_info": {
        "commit_hash": "24bfd53c737bec226429f32b5e1d0ed6c4a4fc04",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/24bfd53c737bec226429f32b5e1d0ed6c4a4fc04",
        "files": [
          "admin/settings/server.php",
          "lang/en/admin.php",
          "lib/cronlib.php",
          "version.php"
        ],
        "message": "MDL-64347 task: Add restrictions to adhoc task runner",
        "before_after_code_files": [
          "admin/settings/server.php||admin/settings/server.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lib/cronlib.php||lib/cronlib.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/server.php||admin/settings/server.php": [
          "File: admin/settings/server.php -> admin/settings/server.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: $ADMIN->add('server', new admin_category('taskconfig', new lang_string('taskadmintitle', 'admin')));",
          "215: $temp = new admin_settingpage('tasklogging', new lang_string('tasklogging','admin'));",
          "216: $temp->add(",
          "217:     new admin_setting_configselect(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215: $temp = new admin_settingpage('taskprocessing', new lang_string('taskprocessing','admin'));",
          "216: $temp->add(",
          "217:     new admin_setting_configtext(",
          "218:         'task_adhoc_concurrency_limit',",
          "219:         new lang_string('task_adhoc_concurrency_limit', 'admin'),",
          "220:         new lang_string('task_adhoc_concurrency_limit_desc', 'admin'),",
          "221:         3,",
          "222:         PARAM_INT",
          "223:     )",
          "224: );",
          "226: $temp->add(",
          "227:     new admin_setting_configduration(",
          "228:         'task_adhoc_max_runtime',",
          "229:         new lang_string('task_adhoc_max_runtime', 'admin'),",
          "230:         new lang_string('task_adhoc_max_runtime_desc', 'admin'),",
          "231:         30 * MINSECS",
          "232:     )",
          "233: );",
          "234: $ADMIN->add('taskconfig', $temp);",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1165: $string['tabselectedtofront'] = 'On tables with tabs, should the row with the currently selected tab be placed at the front';",
          "1166: $string['tabselectedtofronttext'] = 'Bring selected tab row to front';",
          "1167: $string['testsiteupgradewarning'] = 'You are currently using the {$a} test site, to upgrade it properly use the command line interface tool';",
          "1168: $string['task_logmode'] = 'When to log';",
          "1169: $string['task_logmode_desc'] = 'You can choose when you wish task logging to take place. By default logs are always captured. You can disable logging entirely, or change to only log tasks which fail.';",
          "1170: $string['task_logmode_none'] = 'Do not log anything';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1168: $string['task_adhoc_concurrency_limit'] = 'Adhoc task concurrency limit';",
          "1169: $string['task_adhoc_concurrency_limit_desc'] = 'The number of adhoc task runners allowed to run concurrently. If the limit is high then scheduled tasks may not run regularly when there are lots of adhoc tasks. A setting of 0 will disable processing of adhoc tasks completely.';",
          "1170: $string['task_adhoc_max_runtime'] = 'Adhoc task runner lifetime';",
          "1171: $string['task_adhoc_max_runtime_desc'] = 'The age of an adhoc task runner before it is freed. A low duration is recommended as there is no limit to the number of adhoc tasks queued. If this number is too high and you have a large adhoc task queue then scheduled tasks may not be run regularly.';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1214: $string['taskpasswordresetcleanup'] = 'Cleanup password reset attempts';",
          "1215: $string['taskplagiarismcron'] = 'Background processing for legacy cron in plagiarism plugins';",
          "1216: $string['taskportfoliocron'] = 'Background processing for portfolio plugins';",
          "1217: $string['taskquestioncron'] = 'Background processing for question engine';",
          "1218: $string['taskrefreshsystemtokens'] = 'Refresh OAuth tokens for service accounts';",
          "1219: $string['taskregistrationcron'] = 'Site registration';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1221: $string['taskprocessing'] = 'Task processing';",
          "",
          "---------------"
        ],
        "lib/cronlib.php||lib/cronlib.php": [
          "File: lib/cronlib.php -> lib/cronlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         unset($task);",
          "69:     }",
          "78:     mtrace(\"Cron script completed correctly\");",
          "",
          "[Removed Lines]",
          "72:     while (!\\core\\task\\manager::static_caches_cleared_since($timenow) &&",
          "73:            $task = \\core\\task\\manager::get_next_adhoc_task($timenow)) {",
          "74:         cron_run_inner_adhoc_task($task);",
          "75:         unset($task);",
          "76:     }",
          "",
          "[Added Lines]",
          "72:     cron_run_adhoc_tasks($timenow);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     mtrace(\"Execution took \".$difftime.\" seconds\");",
          "84: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: function cron_run_adhoc_tasks(int $timenow) {",
          "89:     $cronlockfactory = \\core\\lock\\lock_config::get_lock_factory('cron');",
          "90:     $maxruns = get_config('core', 'task_adhoc_concurrency_limit');",
          "91:     $maxruntime = get_config('core', 'task_adhoc_max_runtime');",
          "93:     $adhoclock = null;",
          "94:     for ($run = 0; $run < $maxruns; $run++) {",
          "95:         if ($adhoclock = $cronlockfactory->get_lock(\"adhoc_task_runner_{$run}\", 1)) {",
          "96:             break;",
          "97:         }",
          "98:     }",
          "100:     if (!$adhoclock) {",
          "101:         mtrace(\"Skipping processing of adhoc tasks. Concurrency limit reached.\");",
          "102:         return;",
          "103:     }",
          "105:     $starttime = time();",
          "108:     while (!\\core\\task\\manager::static_caches_cleared_since($timenow) &&",
          "109:             $task = \\core\\task\\manager::get_next_adhoc_task($timenow)) {",
          "110:         cron_run_inner_adhoc_task($task);",
          "111:         unset($task);",
          "113:         if ((time() - $starttime) > $maxruntime) {",
          "114:             mtrace(\"Stopping processing of adhoc tasks as time limit has been reached.\");",
          "115:             break;",
          "116:         }",
          "117:     }",
          "120:     $adhoclock->release();",
          "121: }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019011501.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019011502.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b71596fc9552730053101a8deb21d4c3281b016",
      "candidate_info": {
        "commit_hash": "4b71596fc9552730053101a8deb21d4c3281b016",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4b71596fc9552730053101a8deb21d4c3281b016",
        "files": [
          "admin/settings/server.php",
          "admin/tool/task/cli/schedule_task.php",
          "config-dist.php",
          "lang/en/admin.php",
          "lib/classes/task/database_logger.php",
          "lib/classes/task/logmanager.php",
          "lib/classes/task/manager.php",
          "lib/classes/task/task_log_cleanup_task.php",
          "lib/classes/task/task_logger.php",
          "lib/cronlib.php",
          "lib/db/install.xml",
          "lib/db/tasks.php",
          "lib/db/upgrade.php",
          "lib/moodlelib.php",
          "lib/tests/task_database_logger_test.php",
          "lib/tests/task_logging_test.php",
          "version.php"
        ],
        "message": "MDL-49399 task: Add task logging API",
        "before_after_code_files": [
          "admin/settings/server.php||admin/settings/server.php",
          "admin/tool/task/cli/schedule_task.php||admin/tool/task/cli/schedule_task.php",
          "config-dist.php||config-dist.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lib/classes/task/database_logger.php||lib/classes/task/database_logger.php",
          "lib/classes/task/logmanager.php||lib/classes/task/logmanager.php",
          "lib/classes/task/manager.php||lib/classes/task/manager.php",
          "lib/classes/task/task_log_cleanup_task.php||lib/classes/task/task_log_cleanup_task.php",
          "lib/classes/task/task_logger.php||lib/classes/task/task_logger.php",
          "lib/cronlib.php||lib/cronlib.php",
          "lib/db/tasks.php||lib/db/tasks.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/moodlelib.php||lib/moodlelib.php",
          "lib/tests/task_database_logger_test.php||lib/tests/task_database_logger_test.php",
          "lib/tests/task_logging_test.php||lib/tests/task_logging_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/server.php||admin/settings/server.php": [
          "File: admin/settings/server.php -> admin/settings/server.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "212: $ADMIN->add('server', $temp);",
          "216: $ADMIN->add('server', new admin_category('email', new lang_string('categoryemail', 'admin')));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: $ADMIN->add('server', new admin_category('taskconfig', new lang_string('taskadmintitle', 'admin')));",
          "215: $temp = new admin_settingpage('tasklogging', new lang_string('tasklogging','admin'));",
          "216: $temp->add(",
          "217:     new admin_setting_configselect(",
          "218:         'task_logmode',",
          "219:         new lang_string('task_logmode', 'admin'),",
          "220:         new lang_string('task_logmode_desc', 'admin'),",
          "221:         \\core\\task\\logmanager::MODE_ALL,",
          "222:         [",
          "223:             \\core\\task\\logmanager::MODE_ALL => new lang_string('task_logmode_all', 'admin'),",
          "224:             \\core\\task\\logmanager::MODE_FAILONLY => new lang_string('task_logmode_failonly', 'admin'),",
          "225:             \\core\\task\\logmanager::MODE_NONE => new lang_string('task_logmode_none', 'admin'),",
          "226:         ]",
          "227:     )",
          "228: );",
          "230: if (\\core\\task\\logmanager::uses_standard_settings()) {",
          "231:     $temp->add(",
          "232:         new admin_setting_configduration(",
          "233:             'task_logretention',",
          "234:             new \\lang_string('task_logretention', 'admin'),",
          "235:             new \\lang_string('task_logretention_desc', 'admin'),",
          "236:             28 * DAYSECS",
          "237:         )",
          "238:     );",
          "240:     $temp->add(",
          "241:         new admin_setting_configtext(",
          "242:             'task_logretainruns',",
          "243:             new \\lang_string('task_logretainruns', 'admin'),",
          "244:             new \\lang_string('task_logretainruns_desc', 'admin'),",
          "245:             20,",
          "246:             PARAM_INT",
          "247:         )",
          "248:     );",
          "250: }",
          "251: $ADMIN->add('taskconfig', $temp);",
          "",
          "---------------"
        ],
        "admin/tool/task/cli/schedule_task.php||admin/tool/task/cli/schedule_task.php": [
          "File: admin/tool/task/cli/schedule_task.php -> admin/tool/task/cli/schedule_task.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     $predbqueries = $DB->perf_get_queries();",
          "130:     $pretime = microtime(true);",
          "132:     $fullname = $task->get_name() . ' (' . get_class($task) . ')';",
          "133:     mtrace('Execute scheduled task: ' . $fullname);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:     \\core\\task\\logmanager::start_logging($task);",
          "",
          "---------------"
        ],
        "config-dist.php||config-dist.php": [
          "File: config-dist.php -> config-dist.php"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1164: $string['tabselectedtofront'] = 'On tables with tabs, should the row with the currently selected tab be placed at the front';",
          "1165: $string['tabselectedtofronttext'] = 'Bring selected tab row to front';",
          "1166: $string['testsiteupgradewarning'] = 'You are currently using the {$a} test site, to upgrade it properly use the command line interface tool';",
          "1167: $string['taskanalyticscleanup'] = 'Analytics cleanup';",
          "1168: $string['taskautomatedbackup'] = 'Automated backups';",
          "1169: $string['taskbackupcleanup'] = 'Clean backup tables and logs';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1167: $string['task_logmode'] = 'When to log';",
          "1168: $string['task_logmode_desc'] = 'You can choose when you wish task logging to take place. By default logs are always captured. You can disable logging entirely, or change to only log tasks which fail.';",
          "1169: $string['task_logmode_none'] = 'Do not log anything';",
          "1170: $string['task_logmode_all'] = 'Store the log output of all jobs';",
          "1171: $string['task_logmode_failonly'] = 'Only store logs for jobs which fail';",
          "1172: $string['task_logretention'] = 'Retention period';",
          "1173: $string['task_logretention_desc'] = 'The maximum period that logs should be kept for. This setting interacts with the \\'Retain runs\\' setting: whichever is reached first will apply';",
          "1174: $string['task_logretainruns'] = 'Retain runs';",
          "1175: $string['task_logretainruns_desc'] = 'The number of runs of each task to retain. This setting interacts with the \\'Retention period\\' setting: whichever is reached first will apply.';",
          "1176: $string['taskadmintitle'] = 'Tasks';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1176: $string['taskcompletionregular'] = 'Calculate regular completion data';",
          "1177: $string['taskcompletiondaily'] = 'Completion mark as started';",
          "1178: $string['taskcontextcleanup'] = 'Cleanup contexts';",
          "1179: $string['taskcreatecontexts'] = 'Create missing contexts';",
          "1180: $string['taskdeletecachetext'] = 'Delete old text cache records';",
          "1181: $string['taskdeleteincompleteusers'] = 'Delete incomplete users';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1189: $string['tasklogging'] = 'Task log configuration';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1186: $string['taskglobalsearchoptimize'] = 'Global search index optimization';",
          "1187: $string['taskgradecron'] = 'Background processing for gradebook';",
          "1188: $string['tasklegacycron'] = 'Legacy cron processing for plugins';",
          "1189: $string['taskmessagingcleanup'] = 'Background processing for messaging';",
          "1190: $string['taskpasswordresetcleanup'] = 'Cleanup password reset attempts';",
          "1191: $string['taskplagiarismcron'] = 'Background processing for legacy cron in plagiarism plugins';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1200: $string['tasklogcleanup'] = 'Cleanup of task logs';",
          "1201: $string['tasklogs'] = 'Task logs';",
          "",
          "---------------"
        ],
        "lib/classes/task/database_logger.php||lib/classes/task/database_logger.php": [
          "File: lib/classes/task/database_logger.php -> lib/classes/task/database_logger.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace core\\task;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "34: class database_logger implements task_logger {",
          "37:     const TYPE_SCHEDULED = 0;",
          "40:     const TYPE_ADHOC = 1;",
          "47:     public static function is_configured() : bool {",
          "48:         return true;",
          "49:     }",
          "62:     public static function store_log_for_task(task_base $task, string $logpath, bool $failed,",
          "63:             int $dbreads, int $dbwrites, float $timestart, float $timeend) {",
          "64:         global $DB;",
          "67:         $logdata = (object) [",
          "68:             'type' => is_a($task, scheduled_task::class) ? self::TYPE_SCHEDULED : self::TYPE_ADHOC,",
          "69:             'component' => $task->get_component(),",
          "70:             'classname' => get_class($task),",
          "71:             'userid' => 0,",
          "72:             'timestart' => $timestart,",
          "73:             'timeend' => $timeend,",
          "74:             'dbreads' => $dbreads,",
          "75:             'dbwrites' => $dbwrites,",
          "76:             'result' => (int) $failed,",
          "77:             'output' => file_get_contents($logpath),",
          "78:         ];",
          "80:         if (is_a($task, adhoc_task::class) && $userid = $task->get_userid()) {",
          "81:             $logdata->userid = $userid;",
          "82:         }",
          "84:         $logdata->id = $DB->insert_record('task_log', $logdata);",
          "85:     }",
          "90:     public static function cleanup() {",
          "91:         global $CFG, $DB;",
          "94:         $params = [",
          "95:             'retentionperiod' => time() - $CFG->task_logretention,",
          "96:         ];",
          "97:         $logids = $DB->get_fieldset_select('task_log', 'id', 'timestart < :retentionperiod', $params);",
          "98:         self::delete_task_logs($logids);",
          "101:         $sql = \"SELECT classname FROM {task_log} GROUP BY classname HAVING COUNT(classname) > :retaincount\";",
          "102:         $params = [",
          "103:             'retaincount' => $CFG->task_logretainruns,",
          "104:         ];",
          "105:         $classes = $DB->get_fieldset_sql($sql, $params);",
          "107:         foreach ($classes as $classname) {",
          "108:             $params = [",
          "109:                 'classname' => $classname,",
          "110:             ];",
          "112:             $retaincount = (int) $CFG->task_logretainruns;",
          "113:             $keeplogs = $DB->get_fieldset_sql(",
          "114:                     \"SELECT id FROM {task_log} WHERE classname = :classname ORDER BY timestart DESC LIMIT {$retaincount}\",",
          "115:                     $params",
          "116:                 );",
          "118:             $notinsql = \"\";",
          "119:             if ($keeplogs) {",
          "120:                 list($notinsql, $params) = $DB->get_in_or_equal($keeplogs, SQL_PARAMS_NAMED, 'p', false);",
          "121:                 $params['classname'] = $classname;",
          "122:                 $notinsql = \" AND id {$notinsql}\";",
          "123:             }",
          "125:             $logids = $DB->get_fieldset_select('task_log', 'id', \"classname = :classname {$notinsql}\", $params);",
          "126:             self::delete_task_logs($logids);",
          "127:         }",
          "128:     }",
          "135:     public static function delete_task_logs(array $logids) {",
          "136:         global $DB;",
          "138:         if (empty($logids)) {",
          "139:             return;",
          "140:         }",
          "142:         $DB->delete_records_list('task_log', 'id', $logids);",
          "143:     }",
          "144: }",
          "",
          "---------------"
        ],
        "lib/classes/task/logmanager.php||lib/classes/task/logmanager.php": [
          "File: lib/classes/task/logmanager.php -> lib/classes/task/logmanager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\task;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "35: class logmanager {",
          "38:     const MODE_NONE = 0;",
          "41:     const MODE_ALL = 1;",
          "44:     const MODE_FAILONLY = 2;",
          "47:     const CHUNKSIZE = 1;",
          "52:     protected static $task = null;",
          "57:     protected static $taskloginfo = null;",
          "62:     protected static $fh = null;",
          "67:     protected static $logpath = null;",
          "72:     protected static $tasklogregistered = false;",
          "77:     protected static $oblevel = null;",
          "84:     public static function start_logging(task_base $task) {",
          "85:         global $DB;",
          "87:         if (!self::should_log()) {",
          "88:             return;",
          "89:         }",
          "94:         if (!self::$tasklogregistered) {",
          "95:             \\core_shutdown_manager::register_function(function() {",
          "98:                 \\core\\task\\logmanager::finalise_log(true);",
          "99:             });",
          "101:             self::$tasklogregistered = true;",
          "102:         }",
          "104:         if (self::is_current_output_buffer()) {",
          "106:             throw new \\coding_exception('Logging is already in progress for task \"' . get_class(self::$task) . '\". ' .",
          "107:                 'Nested logging is not supported.');",
          "108:         }",
          "111:         self::$task = $task;",
          "112:         self::$taskloginfo = (object) [",
          "113:             'dbread'    => $DB->perf_get_reads(),",
          "114:             'dbwrite'   => $DB->perf_get_writes(),",
          "115:             'timestart' => microtime(true),",
          "116:         ];",
          "119:         self::$logpath = make_request_directory() . DIRECTORY_SEPARATOR . \"task.log\";",
          "120:         self::$fh = fopen(self::$logpath, 'w+');",
          "124:         if ($obstatus = ob_get_status()) {",
          "125:             self::$oblevel = $obstatus['level'];",
          "126:         } else {",
          "127:             self::$oblevel = null;",
          "128:         }",
          "131:         ob_start([\\core\\task\\logmanager::class, 'add_line'], self::CHUNKSIZE);",
          "132:     }",
          "139:     protected static function should_log() : bool {",
          "140:         global $CFG;",
          "143:         if (isset($CFG->task_logmode) && empty($CFG->task_logmode)) {",
          "144:             return false;",
          "145:         }",
          "147:         return !empty(self::get_logger_classname());",
          "148:     }",
          "155:     public static function get_logger_classname() : string {",
          "156:         global $CFG;",
          "158:         if (!empty($CFG->task_log_class)) {",
          "160:             return $CFG->task_log_class;",
          "161:         }",
          "164:         return database_logger::class;",
          "165:     }",
          "172:     public static function has_log_report() : bool {",
          "173:         $loggerclass = self::get_logger_classname();",
          "175:         return $loggerclass::has_log_report();",
          "176:     }",
          "181:     public static function uses_standard_settings() : bool {",
          "182:         $classname = self::get_logger_classname();",
          "183:         if (!class_exists($classname)) {",
          "184:             return false;",
          "185:         }",
          "187:         if (is_a($classname, database_logger::class, true)) {",
          "188:             return true;",
          "189:         }",
          "191:         return false;",
          "192:     }",
          "200:     public static function get_url_for_task_class(string $classname) : \\moodle_url {",
          "201:         $loggerclass = self::get_logger_classname();",
          "203:         return $loggerclass::get_url_for_task_class($classname);",
          "204:     }",
          "211:     protected static function is_current_output_buffer() : bool {",
          "212:         if (empty(self::$taskloginfo)) {",
          "213:             return false;",
          "214:         }",
          "216:         if ($ob = ob_get_status()) {",
          "217:             return 'core\\\\task\\\\logmanager::add_line' == $ob['name'];",
          "218:         }",
          "220:         return false;",
          "221:     }",
          "228:     protected static function is_capturing() : bool {",
          "229:         $buffers = ob_get_status(true);",
          "230:         foreach ($buffers as $ob) {",
          "231:             if ('core\\\\task\\\\logmanager::add_line' == $ob['name']) {",
          "232:                 return true;",
          "233:             }",
          "234:         }",
          "236:         return false;",
          "237:     }",
          "244:     public static function finalise_log(bool $failed = false) {",
          "245:         global $CFG, $DB, $PERF;",
          "247:         if (!self::should_log()) {",
          "248:             return;",
          "249:         }",
          "251:         if (!self::is_capturing()) {",
          "253:             return;",
          "254:         }",
          "257:         $buffers = ob_get_status(true);",
          "258:         foreach (array_reverse($buffers) as $ob) {",
          "259:             if (null !== self::$oblevel) {",
          "260:                 if ($ob['level'] <= self::$oblevel) {",
          "262:                     break;",
          "263:                 }",
          "264:             }",
          "267:             ob_end_flush();",
          "269:             if ('core\\\\task\\\\logmanager::add_line' == $ob['name']) {",
          "270:                 break;",
          "271:             }",
          "272:         }",
          "273:         self::$oblevel = null;",
          "276:         self::flush();",
          "279:         fclose(self::$fh);",
          "280:         self::$fh = null;",
          "282:         if ($failed || empty($CFG->task_logmode) || self::MODE_ALL == $CFG->task_logmode) {",
          "284:             $loggerclass = self::get_logger_classname();",
          "285:             $loggerclass::store_log_for_task(",
          "286:                 self::$task,",
          "287:                 self::$logpath,",
          "288:                 $failed,",
          "289:                 $DB->perf_get_reads() - self::$taskloginfo->dbread,",
          "290:                 $DB->perf_get_writes() - self::$taskloginfo->dbwrite - $PERF->logwrites,",
          "291:                 self::$taskloginfo->timestart,",
          "292:                 microtime(true)",
          "293:             );",
          "294:         }",
          "297:         self::$logpath = null;",
          "298:         self::$taskloginfo = null;",
          "299:     }",
          "306:     public static function flush() {",
          "308:         if (self::is_current_output_buffer()) {",
          "309:             ob_flush();",
          "310:         }",
          "311:     }",
          "319:     public static function add_line(string $log) : string {",
          "320:         if (empty(self::$taskloginfo)) {",
          "321:             return $log;",
          "322:         }",
          "324:         if (empty(self::$fh)) {",
          "325:             return $log;",
          "326:         }",
          "328:         if (self::is_current_output_buffer()) {",
          "329:             fwrite(self::$fh, $log);",
          "330:         }",
          "332:         return $log;",
          "333:     }",
          "334: }",
          "",
          "---------------"
        ],
        "lib/classes/task/manager.php||lib/classes/task/manager.php": [
          "File: lib/classes/task/manager.php -> lib/classes/task/manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:             $task->get_cron_lock()->release();",
          "591:         }",
          "592:         $task->get_lock()->release();",
          "593:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "595:         \\core\\task\\logmanager::finalise_log(true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "600:     public static function adhoc_task_complete(adhoc_task $task) {",
          "601:         global $DB;",
          "604:         $DB->delete_records('task_adhoc', array('id' => $task->get_id()));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607:         \\core\\task\\logmanager::finalise_log();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "643:             $task->get_cron_lock()->release();",
          "644:         }",
          "645:         $task->get_lock()->release();",
          "646:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "654:         \\core\\task\\logmanager::finalise_log(true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "670:     public static function scheduled_task_complete(scheduled_task $task) {",
          "671:         global $DB;",
          "673:         $classname = self::get_canonical_class_name($task);",
          "674:         $record = $DB->get_record('task_scheduled', array('classname' => $classname));",
          "675:         if ($record) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "683:         \\core\\task\\logmanager::finalise_log();",
          "",
          "---------------"
        ],
        "lib/classes/task/task_log_cleanup_task.php||lib/classes/task/task_log_cleanup_task.php": [
          "File: lib/classes/task/task_log_cleanup_task.php -> lib/classes/task/task_log_cleanup_task.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace core\\task;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "34: class task_log_cleanup_task extends scheduled_task {",
          "41:     public function get_name() {",
          "42:         return get_string('tasklogcleanup', 'admin');",
          "43:     }",
          "48:     public function execute() {",
          "49:         if (\\core\\task\\database_logger::class == \\core\\task\\logmanager::get_logger_classname()) {",
          "50:             \\core\\task\\database_logger::cleanup();",
          "51:         }",
          "52:     }",
          "53: }",
          "",
          "---------------"
        ],
        "lib/classes/task/task_logger.php||lib/classes/task/task_logger.php": [
          "File: lib/classes/task/task_logger.php -> lib/classes/task/task_logger.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\task;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "35: interface task_logger {",
          "41:     public static function is_configured() : bool;",
          "54:     public static function store_log_for_task(task_base $task, string $logpath, bool $failed,",
          "55:             int $dbreads, int $dbwrites, float $timestart, float $timeend);",
          "57: }",
          "",
          "---------------"
        ],
        "lib/cronlib.php||lib/cronlib.php": [
          "File: lib/cronlib.php -> lib/cronlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: function cron_run_inner_scheduled_task(\\core\\task\\task_base $task) {",
          "94:     global $CFG, $DB;",
          "96:     $fullname = $task->get_name() . ' (' . get_class($task) . ')';",
          "97:     mtrace('Execute scheduled task: ' . $fullname);",
          "98:     cron_trace_time_and_memory();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     \\core\\task\\logmanager::start_logging($task);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145: function cron_run_inner_adhoc_task(\\core\\task\\adhoc_task $task) {",
          "146:     global $DB, $CFG;",
          "147:     mtrace(\"Execute adhoc task: \" . get_class($task));",
          "148:     cron_trace_time_and_memory();",
          "149:     $predbqueries = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:     \\core\\task\\logmanager::start_logging($task);",
          "",
          "---------------"
        ],
        "lib/db/tasks.php||lib/db/tasks.php": [
          "File: lib/db/tasks.php -> lib/db/tasks.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:         'dayofweek' => '*',",
          "357:         'month' => '*'",
          "358:     ),",
          "359: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "359:     array(",
          "360:         'classname' => 'core\\task\\task_log_cleanup_task',",
          "361:         'blocking' => 0,",
          "362:         'minute' => 'R',",
          "363:         'hour' => 'R',",
          "364:         'day' => '*',",
          "365:         'dayofweek' => '*',",
          "366:         'month' => '*'",
          "367:     ),",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2548:         upgrade_main_savepoint(true, 2019011500.00);",
          "2549:     }",
          "2551:     return true;",
          "2552: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2551:     if ($oldversion < 2019011501.00) {",
          "2553:         $table = new xmldb_table('task_log');",
          "2554:         $field = new xmldb_field('output', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null, 'result');",
          "2557:         if (!$dbman->field_exists($table, $field)) {",
          "2558:             $dbman->add_field($table, $field);",
          "2559:         }",
          "2562:         upgrade_main_savepoint(true, 2019011501.00);",
          "2563:     }",
          "",
          "---------------"
        ],
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8953:         return;",
          "8954:     } else if (defined('STDOUT') && !PHPUNIT_TEST && !defined('BEHAT_TEST')) {",
          "8955:         fwrite(STDOUT, $string.$eol);",
          "8956:     } else {",
          "8957:         echo $string . $eol;",
          "8958:     }",
          "8960:     flush();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8959:         \\core\\task\\logmanager::add_line(\"{$string}{$eol}\");",
          "",
          "---------------"
        ],
        "lib/tests/task_database_logger_test.php||lib/tests/task_database_logger_test.php": [
          "File: lib/tests/task_database_logger_test.php -> lib/tests/task_database_logger_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: use \\core\\task\\database_logger;",
          "36: class task_database_logger_testcase extends advanced_testcase {",
          "41:     protected $DB;",
          "46:     public function setUp() {",
          "47:         global $DB;",
          "49:         $this->DB = $DB;",
          "50:     }",
          "55:     public function tearDown() {",
          "56:         global $DB;",
          "58:         $DB = $this->DB;",
          "59:         $this->DB = null;",
          "60:     }",
          "65:     public function test_store_log_for_task_scheduled() {",
          "66:         global $DB;",
          "68:         $this->resetAfterTest();",
          "70:         $endtime = microtime(true);",
          "71:         $starttime = $endtime - 4;",
          "73:         $logdir = make_request_directory();",
          "74:         $logpath = \"{$logdir}/log.txt\";",
          "75:         file_put_contents($logpath, 'Example content');",
          "77:         $task = new \\core\\task\\cache_cron_task();",
          "78:         database_logger::store_log_for_task($task, $logpath, false, 1, 2, $starttime, $endtime);",
          "80:         $logs = $DB->get_records('task_log');",
          "81:         $this->assertCount(1, $logs);",
          "83:         $log = reset($logs);",
          "84:         $this->assertEquals(file_get_contents($logpath), $log->output);",
          "85:         $this->assertEquals(0, $log->result);",
          "86:         $this->assertEquals(database_logger::TYPE_SCHEDULED, $log->type);",
          "87:         $this->assertEquals('core\\task\\cache_cron_task', $log->classname);",
          "88:         $this->assertEquals(0, $log->userid);",
          "89:     }",
          "94:     public function test_store_log_for_task_adhoc() {",
          "95:         global $DB;",
          "97:         $this->resetAfterTest();",
          "99:         $endtime = microtime(true);",
          "100:         $starttime = $endtime - 4;",
          "102:         $logdir = make_request_directory();",
          "103:         $logpath = \"{$logdir}/log.txt\";",
          "104:         file_put_contents($logpath, 'Example content');",
          "106:         $task = $this->getMockBuilder(\\core\\task\\adhoc_task::class)",
          "107:             ->setMethods(['get_component', 'execute'])",
          "108:             ->getMock();",
          "110:         $task->method('get_component')->willReturn('core_test');",
          "112:         database_logger::store_log_for_task($task, $logpath, false, 1, 2, $starttime, $endtime);",
          "114:         $logs = $DB->get_records('task_log');",
          "115:         $this->assertCount(1, $logs);",
          "117:         $log = reset($logs);",
          "118:         $this->assertEquals(file_get_contents($logpath), $log->output);",
          "119:         $this->assertEquals(0, $log->result);",
          "120:         $this->assertEquals(database_logger::TYPE_ADHOC, $log->type);",
          "121:     }",
          "126:     public function test_store_log_for_task_failed_scheduled() {",
          "127:         global $DB;",
          "129:         $this->resetAfterTest();",
          "131:         $endtime = microtime(true);",
          "132:         $starttime = $endtime - 4;",
          "134:         $logdir = make_request_directory();",
          "135:         $logpath = \"{$logdir}/log.txt\";",
          "136:         file_put_contents($logpath, 'Example content');",
          "138:         $task = new \\core\\task\\cache_cron_task();",
          "139:         database_logger::store_log_for_task($task, $logpath, true, 1, 2, $starttime, $endtime);",
          "141:         $logs = $DB->get_records('task_log');",
          "142:         $this->assertCount(1, $logs);",
          "144:         $log = reset($logs);",
          "145:         $this->assertEquals(file_get_contents($logpath), $log->output);",
          "146:         $this->assertEquals(1, $log->result);",
          "147:         $this->assertEquals(database_logger::TYPE_SCHEDULED, $log->type);",
          "148:         $this->assertEquals('core\\task\\cache_cron_task', $log->classname);",
          "149:         $this->assertEquals(0, $log->userid);",
          "150:     }",
          "155:     public function test_store_log_for_task_failed_adhoc() {",
          "156:         global $DB;",
          "158:         $this->resetAfterTest();",
          "160:         $endtime = microtime(true);",
          "161:         $starttime = $endtime - 4;",
          "163:         $logdir = make_request_directory();",
          "164:         $logpath = \"{$logdir}/log.txt\";",
          "165:         file_put_contents($logpath, 'Example content');",
          "167:         $task = $this->getMockBuilder(\\core\\task\\adhoc_task::class)",
          "168:             ->setMethods(['get_component', 'execute'])",
          "169:             ->getMock();",
          "171:         $task->method('get_component')->willReturn('core_test');",
          "173:         database_logger::store_log_for_task($task, $logpath, true, 1, 2, $starttime, $endtime);",
          "175:         $logs = $DB->get_records('task_log');",
          "176:         $this->assertCount(1, $logs);",
          "178:         $log = reset($logs);",
          "179:         $this->assertEquals(file_get_contents($logpath), $log->output);",
          "180:         $this->assertEquals(1, $log->result);",
          "181:         $this->assertEquals(database_logger::TYPE_ADHOC, $log->type);",
          "182:         $this->assertEquals(0, $log->userid);",
          "183:     }",
          "187:     public function test_store_log_for_task_adhoc_userid() {",
          "188:         global $DB;",
          "190:         $this->resetAfterTest();",
          "192:         $endtime = microtime(true);",
          "193:         $starttime = $endtime - 4;",
          "195:         $logdir = make_request_directory();",
          "196:         $logpath = \"{$logdir}/log.txt\";",
          "197:         file_put_contents($logpath, 'Example content');",
          "199:         $task = $this->getMockBuilder(\\core\\task\\adhoc_task::class)",
          "200:             ->setMethods(['get_component', 'execute', 'get_userid'])",
          "201:             ->getMock();",
          "203:         $task->method('get_component')->willReturn('core_test');",
          "204:         $task->method('get_userid')->willReturn(99);",
          "206:         database_logger::store_log_for_task($task, $logpath, false, 1, 2, $starttime, $endtime);",
          "208:         $logs = $DB->get_records('task_log');",
          "209:         $this->assertCount(1, $logs);",
          "211:         $log = reset($logs);",
          "212:         $this->assertEquals(file_get_contents($logpath), $log->output);",
          "213:         $this->assertEquals(0, $log->result);",
          "214:         $this->assertEquals(database_logger::TYPE_ADHOC, $log->type);",
          "215:         $this->assertEquals(99, $log->userid);",
          "216:     }",
          "224:     public function test_delete_task_logs($ids) {",
          "225:         $DB = $this->mock_database();",
          "226:         $DB->expects($this->once())",
          "227:             ->method('delete_records_list')",
          "228:             ->with(",
          "229:                 $this->equalTo('task_log'),",
          "230:                 $this->equalTo('id'),",
          "231:                 $this->callback(function($deletedids) use ($ids) {",
          "232:                     sort($ids);",
          "233:                     $idvalues = array_values($deletedids);",
          "234:                     sort($idvalues);",
          "236:                     return $ids == $idvalues;",
          "237:                 })",
          "238:             );",
          "240:         database_logger::delete_task_logs($ids);",
          "241:     }",
          "248:     public function delete_task_logs_provider() : array {",
          "249:         return [",
          "250:             [",
          "251:                 [0],",
          "252:                 [1],",
          "253:                 [1, 2, 3, 4, 5],",
          "254:             ],",
          "255:         ];",
          "256:     }",
          "261:     public function test_cleanup_retention() {",
          "262:         global $DB;",
          "264:         $this->resetAfterTest();",
          "267:         set_config('task_logretainruns', 1000);",
          "270:         $date = new DateTime();",
          "271:         $date->setTime($date->format('G'), 0);",
          "272:         $baselogtime = $date->getTimestamp();",
          "274:         for ($i = 0; $i < 3 * 24; $i++) {",
          "275:             $task = new \\core\\task\\cache_cron_task();",
          "276:             $logpath = __FILE__;",
          "277:             database_logger::store_log_for_task($task, $logpath, false, 1, 2, $date->getTimestamp(), $date->getTimestamp() + MINSECS);",
          "279:             $date->sub(new \\DateInterval('PT1H'));",
          "280:         }",
          "283:         $this->assertCount(72, $DB->get_records('task_log'));",
          "289:         set_config('task_logretention', (2 * DAYSECS) - (time() - $baselogtime));",
          "290:         \\core\\task\\database_logger::cleanup();",
          "291:         $this->assertGreaterThanOrEqual(47, $DB->count_records('task_log'));",
          "292:         $this->assertLessThanOrEqual(48, $DB->count_records('task_log'));",
          "295:         $oldest = $DB->get_records('task_log', [], 'timestart DESC', 'timestart', 0, 1);",
          "296:         $oldest = reset($oldest);",
          "297:         $this->assertGreaterThan(time() - (48 * DAYSECS), $oldest->timestart);",
          "300:         set_config('task_logretention', DAYSECS - (time() - $baselogtime));",
          "301:         \\core\\task\\database_logger::cleanup();",
          "302:         $this->assertGreaterThanOrEqual(23, $DB->count_records('task_log'));",
          "303:         $this->assertLessThanOrEqual(24, $DB->count_records('task_log'));",
          "306:         $oldest = $DB->get_records('task_log', [], 'timestart DESC', 'timestart', 0, 1);",
          "307:         $oldest = reset($oldest);",
          "308:         $this->assertGreaterThan(time() - (24 * DAYSECS), $oldest->timestart);",
          "311:         set_config('task_logretention', (DAYSECS / 2) - (time() - $baselogtime));",
          "312:         \\core\\task\\database_logger::cleanup();",
          "313:         $this->assertGreaterThanOrEqual(11, $DB->count_records('task_log'));",
          "314:         $this->assertLessThanOrEqual(12, $DB->count_records('task_log'));",
          "317:         $oldest = $DB->get_records('task_log', [], 'timestart DESC', 'timestart', 0, 1);",
          "318:         $oldest = reset($oldest);",
          "319:         $this->assertGreaterThan(time() - (12 * DAYSECS), $oldest->timestart);",
          "320:     }",
          "325:     public function test_cleanup_retainruns() {",
          "326:         global $DB;",
          "328:         $this->resetAfterTest();",
          "331:         set_config('task_logretention', YEARSECS);",
          "334:         $date = new DateTime();",
          "335:         $date->setTime($date->format('G'), 0);",
          "336:         $firstdate = $date->getTimestamp();",
          "338:         for ($i = 0; $i < 3 * 24; $i++) {",
          "339:             $task = new \\core\\task\\cache_cron_task();",
          "340:             $logpath = __FILE__;",
          "341:             database_logger::store_log_for_task($task, $logpath, false, 1, 2, $date->getTimestamp(), $date->getTimestamp() + MINSECS);",
          "343:             $task = new \\core\\task\\badges_cron_task();",
          "344:             $logpath = __FILE__;",
          "345:             database_logger::store_log_for_task($task, $logpath, false, 1, 2, $date->getTimestamp(), $date->getTimestamp() + MINSECS);",
          "347:             $date->sub(new \\DateInterval('PT1H'));",
          "348:         }",
          "349:         $lastdate = $date->getTimestamp();",
          "352:         $this->assertEquals(144, $DB->count_records('task_log'));",
          "353:         $this->assertEquals(72, $DB->count_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class]));",
          "354:         $this->assertEquals(72, $DB->count_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class]));",
          "357:         $cachecronrecords = array_values($DB->get_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class], 'timestart DESC'));",
          "358:         $badgescronrecords = array_values($DB->get_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class], 'timestart DESC'));",
          "361:         set_config('task_logretainruns', 144);",
          "362:         \\core\\task\\database_logger::cleanup();",
          "363:         $this->assertEquals(144, $DB->count_records('task_log'));",
          "364:         $this->assertEquals(72, $DB->count_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class]));",
          "365:         $this->assertEquals(72, $DB->count_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class]));",
          "368:         $this->assertEquals($cachecronrecords, array_values($DB->get_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class], 'timestart DESC')));",
          "369:         $this->assertEquals($badgescronrecords, array_values($DB->get_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class], 'timestart DESC')));",
          "372:         set_config('task_logretainruns', 72);",
          "373:         \\core\\task\\database_logger::cleanup();",
          "374:         $this->assertEquals(144, $DB->count_records('task_log'));",
          "375:         $this->assertEquals(72, $DB->count_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class]));",
          "376:         $this->assertEquals(72, $DB->count_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class]));",
          "379:         $this->assertEquals(",
          "380:             array_slice($cachecronrecords, 0, 72),",
          "381:             array_values($DB->get_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class], 'timestart DESC'))",
          "382:         );",
          "383:         $this->assertEquals(",
          "384:             array_slice($badgescronrecords, 0, 72),",
          "385:             array_values($DB->get_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class], 'timestart DESC'))",
          "386:         );",
          "389:         set_config('task_logretainruns', 24);",
          "390:         \\core\\task\\database_logger::cleanup();",
          "391:         $this->assertEquals(48, $DB->count_records('task_log'));",
          "392:         $this->assertEquals(24, $DB->count_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class]));",
          "393:         $this->assertEquals(24, $DB->count_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class]));",
          "396:         $this->assertEquals(",
          "397:             array_slice($cachecronrecords, 0, 24),",
          "398:             array_values($DB->get_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class], 'timestart DESC'))",
          "399:         );",
          "400:         $this->assertEquals(",
          "401:             array_slice($badgescronrecords, 0, 24),",
          "402:             array_values($DB->get_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class], 'timestart DESC'))",
          "403:         );",
          "406:         set_config('task_logretainruns', 5);",
          "407:         \\core\\task\\database_logger::cleanup();",
          "408:         $this->assertEquals(10, $DB->count_records('task_log'));",
          "409:         $this->assertEquals(5, $DB->count_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class]));",
          "410:         $this->assertEquals(5, $DB->count_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class]));",
          "413:         $this->assertEquals(",
          "414:             array_slice($cachecronrecords, 0, 5),",
          "415:             array_values($DB->get_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class], 'timestart DESC'))",
          "416:         );",
          "417:         $this->assertEquals(",
          "418:             array_slice($badgescronrecords, 0, 5),",
          "419:             array_values($DB->get_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class], 'timestart DESC'))",
          "420:         );",
          "423:         set_config('task_logretainruns', 0);",
          "424:         \\core\\task\\database_logger::cleanup();",
          "425:         $this->assertEquals(0, $DB->count_records('task_log'));",
          "426:     }",
          "431:     public function test_cleanup_combined() {",
          "432:         global $DB;",
          "434:         $this->resetAfterTest();",
          "437:         $date = new DateTime();",
          "438:         $date->setTime($date->format('G'), 0);",
          "439:         $baselogtime = $date->getTimestamp();",
          "441:         for ($i = 0; $i < 3 * 24; $i++) {",
          "442:             $task = new \\core\\task\\cache_cron_task();",
          "443:             $logpath = __FILE__;",
          "444:             database_logger::store_log_for_task($task, $logpath, false, 1, 2, $date->getTimestamp(), $date->getTimestamp() + MINSECS);",
          "446:             $task = new \\core\\task\\badges_cron_task();",
          "447:             $logpath = __FILE__;",
          "448:             database_logger::store_log_for_task($task, $logpath, false, 1, 2, $date->getTimestamp(), $date->getTimestamp() + MINSECS);",
          "450:             $date->sub(new \\DateInterval('PT1H'));",
          "451:         }",
          "454:         $this->assertEquals(144, $DB->count_records('task_log'));",
          "455:         $this->assertEquals(72, $DB->count_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class]));",
          "456:         $this->assertEquals(72, $DB->count_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class]));",
          "463:         set_config('task_logretention', (2 * DAYSECS) - (time() - $baselogtime));",
          "464:         set_config('task_logretainruns', 50);",
          "465:         \\core\\task\\database_logger::cleanup();",
          "466:         $this->assertGreaterThanOrEqual(94, $DB->count_records('task_log'));",
          "467:         $this->assertLessThanOrEqual(96, $DB->count_records('task_log'));",
          "468:         $this->assertGreaterThanOrEqual(47, $DB->count_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class]));",
          "469:         $this->assertLessThanOrEqual(48, $DB->count_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class]));",
          "470:         $this->assertGreaterThanOrEqual(47, $DB->count_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class]));",
          "471:         $this->assertLessThanOrEqual(48, $DB->count_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class]));",
          "474:         $oldest = $DB->get_records('task_log', [], 'timestart DESC', 'timestart', 0, 1);",
          "475:         $oldest = reset($oldest);",
          "476:         $this->assertGreaterThan(time() - (48 * DAYSECS), $oldest->timestart);",
          "479:         set_config('task_logretainruns', 10);",
          "480:         \\core\\task\\database_logger::cleanup();",
          "481:         $this->assertEquals(20, $DB->count_records('task_log'));",
          "482:         $this->assertEquals(10, $DB->count_records('task_log', ['classname' => \\core\\task\\cache_cron_task::class]));",
          "483:         $this->assertEquals(10, $DB->count_records('task_log', ['classname' => \\core\\task\\badges_cron_task::class]));",
          "486:         $oldest = $DB->get_records('task_log', [], 'timestart DESC', 'timestart', 0, 1);",
          "487:         $oldest = reset($oldest);",
          "488:         $this->assertGreaterThan(time() - (10 * DAYSECS), $oldest->timestart);",
          "489:     }",
          "494:     protected function mock_database() {",
          "495:         global $DB;",
          "497:         $DB = $this->getMockBuilder(\\moodle_database::class)",
          "498:             ->getMock();",
          "500:         $DB->method('get_record')",
          "501:             ->willReturn((object) []);",
          "503:         return $DB;",
          "504:     }",
          "505: }",
          "",
          "---------------"
        ],
        "lib/tests/task_logging_test.php||lib/tests/task_logging_test.php": [
          "File: lib/tests/task_logging_test.php -> lib/tests/task_logging_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die();",
          "27: require_once(__DIR__ . '/fixtures/task_fixtures.php');",
          "36: class core_task_logmanager extends advanced_testcase {",
          "41:     protected $DB;",
          "46:     public function tearDown() {",
          "47:         global $DB;",
          "50:         \\core\\task\\logmanager::finalise_log();",
          "52:         if (null !== $this->DB) {",
          "53:             $DB = $this->DB;",
          "54:             $this->DB = null;",
          "55:         }",
          "56:     }",
          "61:     public function test_logmode_none() {",
          "62:         global $CFG;",
          "63:         $this->resetAfterTest();",
          "65:         $CFG->task_logmode = \\core\\task\\logmanager::MODE_NONE;",
          "67:         $initialbufferstate = ob_get_status();",
          "69:         $task = $this->get_test_adhoc_task();",
          "70:         \\core\\task\\logmanager::start_logging($task);",
          "73:         $this->assertEquals($initialbufferstate, ob_get_status());",
          "74:     }",
          "79:     public function test_start_logmode_all() {",
          "80:         global $CFG;",
          "81:         $this->resetAfterTest();",
          "83:         $CFG->task_logmode = \\core\\task\\logmanager::MODE_ALL;",
          "85:         $initialbufferstate = ob_get_status();",
          "87:         $task = $this->get_test_adhoc_task();",
          "88:         \\core\\task\\logmanager::start_logging($task);",
          "91:         $state = ob_get_status();",
          "94:         $this->assertNotEquals($initialbufferstate, $state);",
          "95:     }",
          "100:     public function test_start_logmode_fail() {",
          "101:         global $CFG;",
          "102:         $this->resetAfterTest();",
          "104:         $CFG->task_logmode = \\core\\task\\logmanager::MODE_FAILONLY;",
          "106:         $initialbufferstate = ob_get_status();",
          "108:         $task = $this->get_test_adhoc_task();",
          "109:         \\core\\task\\logmanager::start_logging($task);",
          "112:         $state = ob_get_status();",
          "115:         $this->assertNotEquals($initialbufferstate, $state);",
          "116:     }",
          "121:     public function test_logmode_fail_with_passing_adhoc_task() {",
          "122:         global $CFG;",
          "123:         $this->resetAfterTest();",
          "125:         $CFG->task_logmode = \\core\\task\\logmanager::MODE_FAILONLY;",
          "127:         $logger = $this->get_mocked_logger();",
          "129:         $initialbufferstate = ob_get_status();",
          "131:         $task = $this->get_test_adhoc_task();",
          "132:         \\core\\task\\logmanager::start_logging($task);",
          "134:         \\core\\task\\manager::adhoc_task_complete($task);",
          "136:         $this->assertEmpty($logger::$storelogfortask);",
          "137:     }",
          "142:     public function test_logmode_fail_with_passing_scheduled_task() {",
          "143:         global $CFG;",
          "144:         $this->resetAfterTest();",
          "146:         $CFG->task_logmode = \\core\\task\\logmanager::MODE_FAILONLY;",
          "148:         $logger = $this->get_mocked_logger();",
          "150:         $initialbufferstate = ob_get_status();",
          "152:         $task = $this->get_test_scheduled_task();",
          "153:         \\core\\task\\logmanager::start_logging($task);",
          "155:         \\core\\task\\manager::scheduled_task_complete($task);",
          "157:         $this->assertEmpty($logger::$storelogfortask);",
          "158:     }",
          "163:     public function test_logmode_fail_with_failing_adhoc_task() {",
          "164:         global $CFG;",
          "166:         $this->resetAfterTest();",
          "169:         $this->mock_database();",
          "171:         $task = $this->get_test_adhoc_task();",
          "173:         $CFG->task_logmode = \\core\\task\\logmanager::MODE_FAILONLY;",
          "175:         $logger = $this->get_mocked_logger();",
          "177:         \\core\\task\\logmanager::start_logging($task);",
          "178:         \\core\\task\\manager::adhoc_task_failed($task);",
          "180:         $this->assertCount(1, $logger::$storelogfortask);",
          "181:         $this->assertEquals($task, $logger::$storelogfortask[0][0]);",
          "182:         $this->assertTrue($logger::$storelogfortask[0][2]);",
          "183:     }",
          "188:     public function test_logmode_fail_with_failing_scheduled_task() {",
          "189:         global $CFG;",
          "191:         $this->resetAfterTest();",
          "194:         $this->mock_database();",
          "196:         $task = $this->get_test_scheduled_task();",
          "198:         $CFG->task_logmode = \\core\\task\\logmanager::MODE_FAILONLY;",
          "200:         $logger = $this->get_mocked_logger();",
          "202:         \\core\\task\\logmanager::start_logging($task);",
          "203:         \\core\\task\\manager::scheduled_task_failed($task);",
          "205:         $this->assertCount(1, $logger::$storelogfortask);",
          "206:         $this->assertEquals($task, $logger::$storelogfortask[0][0]);",
          "207:         $this->assertTrue($logger::$storelogfortask[0][2]);",
          "208:     }",
          "213:     public function test_logmode_any_with_failing_adhoc_task() {",
          "214:         global $CFG;",
          "216:         $this->resetAfterTest();",
          "219:         $this->mock_database();",
          "221:         $task = $this->get_test_adhoc_task();",
          "223:         $CFG->task_logmode = \\core\\task\\logmanager::MODE_FAILONLY;",
          "225:         $logger = $this->get_mocked_logger();",
          "227:         \\core\\task\\logmanager::start_logging($task);",
          "228:         \\core\\task\\manager::adhoc_task_failed($task);",
          "230:         $this->assertCount(1, $logger::$storelogfortask);",
          "231:         $this->assertEquals($task, $logger::$storelogfortask[0][0]);",
          "232:         $this->assertTrue($logger::$storelogfortask[0][2]);",
          "233:     }",
          "238:     public function test_logmode_any_with_failing_scheduled_task() {",
          "239:         global $CFG;",
          "241:         $this->resetAfterTest();",
          "244:         $this->mock_database();",
          "246:         $task = $this->get_test_scheduled_task();",
          "248:         $CFG->task_logmode = \\core\\task\\logmanager::MODE_FAILONLY;",
          "250:         $logger = $this->get_mocked_logger();",
          "252:         \\core\\task\\logmanager::start_logging($task);",
          "253:         \\core\\task\\manager::scheduled_task_failed($task);",
          "255:         $this->assertCount(1, $logger::$storelogfortask);",
          "256:         $this->assertEquals($task, $logger::$storelogfortask[0][0]);",
          "257:         $this->assertTrue($logger::$storelogfortask[0][2]);",
          "258:     }",
          "263:     public function test_logmode_any_with_passing_adhoc_task() {",
          "264:         global $CFG;",
          "266:         $this->resetAfterTest();",
          "268:         $this->mock_database();",
          "270:         $task = $this->get_test_adhoc_task();",
          "272:         $CFG->task_logmode = \\core\\task\\logmanager::MODE_ALL;",
          "274:         $logger = $this->get_mocked_logger();",
          "276:         \\core\\task\\logmanager::start_logging($task);",
          "277:         \\core\\task\\manager::adhoc_task_complete($task);",
          "279:         $this->assertCount(1, $logger::$storelogfortask);",
          "280:         $this->assertEquals($task, $logger::$storelogfortask[0][0]);",
          "281:         $this->assertFalse($logger::$storelogfortask[0][2]);",
          "282:     }",
          "287:     public function test_logmode_any_with_passing_scheduled_task() {",
          "288:         global $CFG;",
          "290:         $this->resetAfterTest();",
          "292:         $this->mock_database();",
          "294:         $task = $this->get_test_scheduled_task();",
          "296:         $CFG->task_logmode = \\core\\task\\logmanager::MODE_ALL;",
          "298:         $logger = $this->get_mocked_logger();",
          "300:         \\core\\task\\logmanager::start_logging($task);",
          "301:         \\core\\task\\manager::scheduled_task_complete($task);",
          "303:         $this->assertCount(1, $logger::$storelogfortask);",
          "304:         $this->assertEquals($task, $logger::$storelogfortask[0][0]);",
          "305:         $this->assertFalse($logger::$storelogfortask[0][2]);",
          "306:     }",
          "311:     public function test_prevent_nested_logging() {",
          "312:         $this->resetAfterTest();",
          "314:         $task = $this->get_test_adhoc_task();",
          "315:         \\core\\task\\logmanager::start_logging($task);",
          "317:         $this->expectException(\\coding_exception::class);",
          "318:         \\core\\task\\logmanager::start_logging($task);",
          "319:     }",
          "324:     public function test_repeated_usages() {",
          "325:         $this->resetAfterTest();",
          "327:         $logger = $this->get_mocked_logger();",
          "329:         $task = $this->get_test_adhoc_task();",
          "330:         \\core\\task\\logmanager::start_logging($task);",
          "331:         \\core\\task\\logmanager::finalise_log();",
          "333:         \\core\\task\\logmanager::start_logging($task);",
          "334:         \\core\\task\\logmanager::finalise_log();",
          "336:         $this->assertCount(2, $logger::$storelogfortask);",
          "337:         $this->assertEquals($task, $logger::$storelogfortask[0][0]);",
          "338:         $this->assertFalse($logger::$storelogfortask[0][2]);",
          "339:         $this->assertEquals($task, $logger::$storelogfortask[1][0]);",
          "340:         $this->assertFalse($logger::$storelogfortask[1][2]);",
          "341:     }",
          "346:     public function test_finalise_log_no_logging() {",
          "347:         $initialbufferstate = ob_get_status();",
          "349:         \\core\\task\\logmanager::finalise_log();",
          "352:         $this->assertEquals($initialbufferstate, ob_get_status());",
          "353:     }",
          "358:     public function test_flush_on_own_buffer() {",
          "359:         $this->resetAfterTest();",
          "361:         $logger = $this->get_mocked_logger();",
          "363:         $testoutput = \"I am the output under test.\\n\";",
          "365:         $task = $this->get_test_adhoc_task();",
          "366:         \\core\\task\\logmanager::start_logging($task);",
          "368:         echo $testoutput;",
          "370:         $this->expectOutputString($testoutput);",
          "371:         \\core\\task\\logmanager::flush();",
          "374:         \\core\\task\\logmanager::finalise_log();",
          "376:         $this->assertCount(1, $logger::$storelogfortask);",
          "377:         $this->assertEquals($testoutput, file_get_contents($logger::$storelogfortask[0][1]));",
          "378:     }",
          "383:     public function test_flush_does_not_flush_inner_buffers() {",
          "384:         $this->resetAfterTest();",
          "386:         $logger = $this->get_mocked_logger();",
          "388:         $testoutput = \"I am the output under test.\\n\";",
          "390:         $task = $this->get_test_adhoc_task();",
          "391:         \\core\\task\\logmanager::start_logging($task);",
          "393:         ob_start();",
          "394:         echo $testoutput;",
          "395:         ob_end_clean();",
          "397:         \\core\\task\\logmanager::flush();",
          "400:         \\core\\task\\logmanager::finalise_log();",
          "402:         $this->assertCount(1, $logger::$storelogfortask);",
          "405:         $this->assertEquals('', file_get_contents($logger::$storelogfortask[0][1]));",
          "406:     }",
          "411:     public function test_inner_flushed_buffers_are_logged() {",
          "412:         $this->resetAfterTest();",
          "414:         $logger = $this->get_mocked_logger();",
          "416:         $testoutput = \"I am the output under test.\\n\";",
          "418:         $task = $this->get_test_adhoc_task();",
          "419:         \\core\\task\\logmanager::start_logging($task);",
          "422:         $this->expectOutputString($testoutput);",
          "424:         ob_start();",
          "425:         echo $testoutput;",
          "426:         ob_end_flush();",
          "429:         \\core\\task\\logmanager::finalise_log();",
          "431:         $this->assertCount(1, $logger::$storelogfortask);",
          "434:         $this->assertEquals($testoutput, file_get_contents($logger::$storelogfortask[0][1]));",
          "435:     }",
          "442:     protected function get_test_adhoc_task() : \\core\\task\\adhoc_task {",
          "443:         $task = $this->getMockForAbstractClass(\\core\\task\\adhoc_task::class);",
          "446:         $lock = $this->getMockBuilder(\\core\\lock\\lock::class)",
          "447:             ->disableOriginalConstructor()",
          "448:             ->getMock();",
          "449:         $task->set_lock($lock);",
          "451:         return $task;",
          "452:     }",
          "459:     protected function get_test_scheduled_task() : \\core\\task\\scheduled_task {",
          "460:         $task = $this->getMockForAbstractClass(\\core\\task\\scheduled_task::class);",
          "463:         $lock = $this->getMockBuilder(\\core\\lock\\lock::class)",
          "464:             ->disableOriginalConstructor()",
          "465:             ->getMock();",
          "466:         $task->set_lock($lock);",
          "468:         return $task;",
          "469:     }",
          "476:     protected function get_mocked_logger() {",
          "477:         global $CFG;",
          "480:         $this->resetAfterTest();",
          "483:         $CFG->task_log_class = \\task_logging_test_mocked_logger::class;",
          "484:         \\task_logging_test_mocked_logger::test_reset();",
          "486:         return $CFG->task_log_class;",
          "487:     }",
          "492:     protected function mock_database() {",
          "493:         global $DB;",
          "496:         $this->DB = $DB;",
          "498:         $DB = $this->getMockBuilder(\\moodle_database::class)",
          "499:             ->getMock();",
          "501:         $DB->method('get_record')",
          "502:             ->willReturn((object) []);",
          "503:     }",
          "504: }",
          "512: class task_logging_test_mocked_logger implements \\core\\task\\task_logger {",
          "517:     public static $isconfigured = true;",
          "522:     public static $storelogfortask = [];",
          "527:     public static function test_reset() {",
          "528:         self::$isconfigured = true;",
          "529:         self::$storelogfortask = [];",
          "530:         self::$haslogreport = true;",
          "531:     }",
          "538:     public static function is_configured() : bool {",
          "539:         return self::$isconfigured;",
          "540:     }",
          "553:     public static function store_log_for_task(\\core\\task\\task_base $task, string $logpath, bool $failed,",
          "554:             int $dbreads, int $dbwrites, float $timestart, float $timeend) {",
          "555:         self::$storelogfortask[] = func_get_args();",
          "556:     }",
          "558: }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019011500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019011501.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4999558ed4662188f091a73b6b2121e7dce6f85b",
      "candidate_info": {
        "commit_hash": "4999558ed4662188f091a73b6b2121e7dce6f85b",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4999558ed4662188f091a73b6b2121e7dce6f85b",
        "files": [
          "lib/adminlib.php",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-57342-37' of git://github.com/Chocolate-lightning/moodle into MOODLE_37_STABLE",
        "before_after_code_files": [
          "lib/adminlib.php||lib/adminlib.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/adminlib.php||lib/adminlib.php": [
          "File: lib/adminlib.php -> lib/adminlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2574:         $editor->use_editor($this->get_id(), array('noclean'=>true));",
          "2575:         return parent::output_html($data, $query);",
          "2576:     }",
          "2577: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2584:     public function write_setting($data) {",
          "2585:         if (trim(html_to_text($data)) === '') {",
          "2586:             $data = '';",
          "2587:         }",
          "2588:         return parent::write_setting($data);",
          "2589:     }",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3381:     return true;",
          "3382: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3381:     if ($oldversion < 2019052001.04) {",
          "3383:         $instructions = get_config('core', 'auth_instructions');",
          "3385:         if (trim(html_to_text($instructions)) === '') {",
          "3386:             set_config('auth_instructions', '');",
          "3387:         }",
          "3390:         upgrade_main_savepoint(true, 2019052001.04);",
          "3391:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052001.03;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "[Added Lines]",
          "32: $version  = 2019052001.04;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08c51ff080132b6f09017c1a77608400d16c3e6b",
      "candidate_info": {
        "commit_hash": "08c51ff080132b6f09017c1a77608400d16c3e6b",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/08c51ff080132b6f09017c1a77608400d16c3e6b",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.6dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '36';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018110500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev+ (Build: 20181103)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018110700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev+ (Build: 20181107)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7e108438f0dbe2ae1b12f7c3ccac5ceef7d9524",
      "candidate_info": {
        "commit_hash": "f7e108438f0dbe2ae1b12f7c3ccac5ceef7d9524",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f7e108438f0dbe2ae1b12f7c3ccac5ceef7d9524",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.8dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019070400.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190704)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019071200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190712)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}