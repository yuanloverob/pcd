{
  "cve_id": "CVE-2023-40029",
  "cve_desc": "Argo CD is a declarative continuous deployment for Kubernetes. Argo CD Cluster secrets might be managed declaratively using Argo CD / kubectl apply. As a result, the full secret body is stored in`kubectl.kubernetes.io/last-applied-configuration` annotation. pull request #7139 introduced the ability to manage cluster labels and annotations. Since clusters are stored as secrets it also exposes the `kubectl.kubernetes.io/last-applied-configuration` annotation which includes full secret body. In order to view the cluster annotations via the Argo CD API, the user must have `clusters, get` RBAC access. **Note:** In many cases, cluster secrets do not contain any actually-secret information. But sometimes, as in bearer-token auth, the contents might be very sensitive. The bug has been patched in versions 2.8.3, 2.7.14, and 2.6.15. Users are advised to upgrade. Users unable to upgrade should update/deploy cluster secret with `server-side-apply` flag which does not use or rely on `kubectl.kubernetes.io/last-applied-configuration` annotation. Note: annotation for existing secrets will require manual removal.\n\n",
  "repo": "argoproj/argo-cd",
  "patch_hash": "44e52c4ae76e6da1343bdd54e57a822d93549f28",
  "patch_info": {
    "commit_hash": "44e52c4ae76e6da1343bdd54e57a822d93549f28",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/44e52c4ae76e6da1343bdd54e57a822d93549f28",
    "files": [
      "cmd/argocd-repo-server/commands/argocd_repo_server.go",
      "docs/operator-manual/server-commands/argocd-repo-server.md",
      "manifests/base/repo-server/argocd-repo-server-deployment.yaml",
      "manifests/core-install.yaml",
      "manifests/ha/install.yaml",
      "manifests/ha/namespace-install.yaml",
      "manifests/install.yaml",
      "manifests/namespace-install.yaml",
      "reposerver/repository/repository.go",
      "util/helm/client.go",
      "util/helm/client_test.go",
      "util/helm/mocks/Client.go"
    ],
    "message": "Merge pull request from GHSA-g687-f2gx-6wm8\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n---------\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>",
    "before_after_code_files": [
      "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
      "reposerver/repository/repository.go||reposerver/repository/repository.go",
      "util/helm/client.go||util/helm/client.go",
      "util/helm/client_test.go||util/helm/client_test.go",
      "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
    ]
  },
  "patch_diff": {
    "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go": [
      "File: cmd/argocd-repo-server/commands/argocd_repo_server.go -> cmd/argocd-repo-server/commands/argocd_repo_server.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "82:   allowOutOfBoundsSymlinks          bool",
      "83:   streamedManifestMaxTarSize        string",
      "84:   streamedManifestMaxExtractedSize  string",
      "85:  )",
      "86:  var command = cobra.Command{",
      "87:   Use:               cliName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85:   helmManifestMaxExtractedSize      string",
      "86:   disableManifestMaxExtractedSize   bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120:    streamedManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(streamedManifestMaxExtractedSize)",
      "121:    errors.CheckError(err)",
      "123:    askPassServer := askpass.NewServer()",
      "124:    metricsServer := metrics.NewMetricsServer()",
      "125:    cacheutil.CollectMetrics(redisClient, metricsServer)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "125:    helmManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(helmManifestMaxExtractedSize)",
      "126:    errors.CheckError(err)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "134:     AllowOutOfBoundsSymlinks:                     allowOutOfBoundsSymlinks,",
      "135:     StreamedManifestMaxExtractedSize:             streamedManifestMaxExtractedSizeQuantity.ToDec().Value(),",
      "136:     StreamedManifestMaxTarSize:                   streamedManifestMaxTarSizeQuantity.ToDec().Value(),",
      "137:    }, askPassServer)",
      "138:    errors.CheckError(err)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142:     HelmManifestMaxExtractedSize:                 helmManifestMaxExtractedSizeQuantity.ToDec().Value(),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "216:  command.Flags().BoolVar(&allowOutOfBoundsSymlinks, \"allow-oob-symlinks\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS\", false), \"Allow out-of-bounds symlinks in repositories (not recommended)\")",
      "217:  command.Flags().StringVar(&streamedManifestMaxTarSize, \"streamed-manifest-max-tar-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE\", \"100M\"), \"Maximum size of streamed manifest archives\")",
      "218:  command.Flags().StringVar(&streamedManifestMaxExtractedSize, \"streamed-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of streamed manifest archives when extracted\")",
      "219:  tlsConfigCustomizerSrc = tls.AddTLSFlagsToCmd(&command)",
      "220:  cacheSrc = reposervercache.AddCacheFlagsToCmd(&command, func(client *redis.Client) {",
      "221:   redisClient = client",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "225:  command.Flags().StringVar(&helmManifestMaxExtractedSize, \"helm-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of helm manifest archives when extracted\")",
      "226:  command.Flags().BoolVar(&disableManifestMaxExtractedSize, \"disable-helm-manifest-max-extracted-size\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", false), \"Disable maximum size of helm manifest archives when extracted\")",
      "",
      "---------------"
    ],
    "reposerver/repository/repository.go||reposerver/repository/repository.go": [
      "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "107:  AllowOutOfBoundsSymlinks                     bool",
      "108:  StreamedManifestMaxExtractedSize             int64",
      "109:  StreamedManifestMaxTarSize                   int64",
      "110: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110:  HelmManifestMaxExtractedSize                 int64",
      "111:  DisableHelmManifestMaxExtractedSize          bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "346:   if source.Helm != nil {",
      "347:    helmPassCredentials = source.Helm.PassCredentials",
      "348:   }",
      "350:   if err != nil {",
      "351:    return err",
      "352:   }",
      "",
      "[Removed Lines]",
      "349:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials)",
      "",
      "[Added Lines]",
      "351:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials, s.initConstants.HelmManifestMaxExtractedSize, s.initConstants.DisableHelmManifestMaxExtractedSize)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2233:  if err != nil {",
      "2234:   return nil, fmt.Errorf(\"helm client error: %v\", err)",
      "2235:  }",
      "2237:  if err != nil {",
      "2238:   return nil, fmt.Errorf(\"error extracting chart: %v\", err)",
      "2239:  }",
      "",
      "[Removed Lines]",
      "2236:  chartPath, closer, err := helmClient.ExtractChart(q.Name, revision, false)",
      "",
      "[Added Lines]",
      "2238:  chartPath, closer, err := helmClient.ExtractChart(q.Name, revision, false, s.initConstants.HelmManifestMaxExtractedSize, s.initConstants.DisableHelmManifestMaxExtractedSize)",
      "",
      "---------------"
    ],
    "util/helm/client.go||util/helm/client.go": [
      "File: util/helm/client.go -> util/helm/client.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "8:  \"encoding/json\"",
      "9:  \"errors\"",
      "10:  \"fmt\"",
      "11:  \"io\"",
      "12:  \"net/http\"",
      "13:  \"net/url\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25:  \"oras.land/oras-go/v2/registry/remote/auth\"",
      "27:  \"github.com/argoproj/argo-cd/v2/util/cache\"",
      "29:  argoio \"github.com/argoproj/argo-cd/v2/util/io\"",
      "30:  \"github.com/argoproj/argo-cd/v2/util/io/files\"",
      "31:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
      "",
      "[Removed Lines]",
      "28:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: type Client interface {",
      "54:  CleanChartCache(chart string, version string) error",
      "56:  GetIndex(noCache bool) (*Index, error)",
      "57:  GetTags(chart string, noCache bool) (*TagsList, error)",
      "58:  TestHelmOCI() (bool, error)",
      "",
      "[Removed Lines]",
      "55:  ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error)",
      "",
      "[Added Lines]",
      "55:  ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "122:  return os.RemoveAll(cachePath)",
      "123: }",
      "127:  helmCmd, err := NewCmdWithVersion(\"\", HelmV3, c.enableOci, c.proxy)",
      "",
      "[Removed Lines]",
      "125: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error) {",
      "",
      "[Added Lines]",
      "125: func untarChart(tempDir string, cachedChartPath string, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) error {",
      "126:  if disableManifestMaxExtractedSize {",
      "127:   cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
      "128:   cmd.Dir = tempDir",
      "129:   _, err := executil.Run(cmd)",
      "130:   return err",
      "131:  }",
      "132:  reader, err := os.Open(cachedChartPath)",
      "133:  if err != nil {",
      "134:   return err",
      "135:  }",
      "136:  return files.Untgz(tempDir, reader, manifestMaxExtractedSize, false)",
      "137: }",
      "139: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "196:   if len(infos) != 1 {",
      "197:    return \"\", nil, fmt.Errorf(\"expected 1 file, found %v\", len(infos))",
      "198:   }",
      "199:   err = os.Rename(filepath.Join(tempDest, infos[0].Name()), cachedChartPath)",
      "200:   if err != nil {",
      "201:    return \"\", nil, err",
      "202:   }",
      "203:  }",
      "208:  if err != nil {",
      "209:   _ = os.RemoveAll(tempDir)",
      "210:   return \"\", nil, err",
      "",
      "[Removed Lines]",
      "205:  cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
      "206:  cmd.Dir = tempDir",
      "207:  _, err = executil.Run(cmd)",
      "",
      "[Added Lines]",
      "220:  err = untarChart(tempDir, cachedChartPath, manifestMaxExtractedSize, disableManifestMaxExtractedSize)",
      "",
      "---------------"
    ],
    "util/helm/client_test.go||util/helm/client_test.go": [
      "File: util/helm/client_test.go -> util/helm/client_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:  \"bytes\"",
      "5:  \"encoding/json\"",
      "6:  \"fmt\"",
      "7:  \"os\"",
      "8:  \"strings\"",
      "9:  \"testing\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7:  \"math\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72: func Test_nativeHelmChart_ExtractChart(t *testing.T) {",
      "73:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
      "75:  assert.NoError(t, err)",
      "76:  defer io.Close(closer)",
      "77:  info, err := os.Stat(path)",
      "",
      "[Removed Lines]",
      "74:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
      "",
      "[Added Lines]",
      "75:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "79:  assert.True(t, info.IsDir())",
      "80: }",
      "82: func Test_nativeHelmChart_ExtractChart_insecure(t *testing.T) {",
      "83:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{InsecureSkipVerify: true}, false, \"\")",
      "85:  assert.NoError(t, err)",
      "86:  defer io.Close(closer)",
      "87:  info, err := os.Stat(path)",
      "",
      "[Removed Lines]",
      "84:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
      "",
      "[Added Lines]",
      "83: func Test_nativeHelmChart_ExtractChartWithLimiter(t *testing.T) {",
      "84:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
      "85:  _, _, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, 100, false)",
      "86:  assert.Error(t, err, \"error while iterating on tar reader: unexpected EOF\")",
      "87: }",
      "91:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
      "",
      "---------------"
    ],
    "util/helm/mocks/Client.go||util/helm/mocks/Client.go": [
      "File: util/helm/mocks/Client.go -> util/helm/mocks/Client.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: }",
      "33:  ret := _m.Called(chart, version)",
      "35:  var r0 string",
      "",
      "[Removed Lines]",
      "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
      "",
      "[Added Lines]",
      "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, io.Closer, error) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0c6cfa306d1aa84dc37e2cae85ce212da825ccae",
      "candidate_info": {
        "commit_hash": "0c6cfa306d1aa84dc37e2cae85ce212da825ccae",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/0c6cfa306d1aa84dc37e2cae85ce212da825ccae",
        "files": [
          "cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "docs/operator-manual/server-commands/argocd-repo-server.md",
          "manifests/base/repo-server/argocd-repo-server-deployment.yaml",
          "manifests/core-install.yaml",
          "manifests/ha/install.yaml",
          "manifests/ha/namespace-install.yaml",
          "manifests/install.yaml",
          "manifests/namespace-install.yaml",
          "reposerver/repository/repository.go",
          "util/helm/client.go",
          "util/helm/client_test.go",
          "util/helm/mocks/Client.go"
        ],
        "message": "Merge pull request from GHSA-g687-f2gx-6wm8\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n---------\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>",
        "before_after_code_files": [
          "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "util/helm/client.go||util/helm/client.go",
          "util/helm/client_test.go||util/helm/client_test.go",
          "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ],
          "candidate": [
            "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go": [
          "File: cmd/argocd-repo-server/commands/argocd_repo_server.go -> cmd/argocd-repo-server/commands/argocd_repo_server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   allowOutOfBoundsSymlinks          bool",
          "85:   streamedManifestMaxTarSize        string",
          "86:   streamedManifestMaxExtractedSize  string",
          "87:  )",
          "88:  var command = cobra.Command{",
          "89:   Use:               cliName,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:   helmManifestMaxExtractedSize      string",
          "88:   disableManifestMaxExtractedSize   bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:    streamedManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(streamedManifestMaxExtractedSize)",
          "123:    errors.CheckError(err)",
          "125:    askPassServer := askpass.NewServer()",
          "126:    metricsServer := metrics.NewMetricsServer()",
          "127:    cacheutil.CollectMetrics(redisClient, metricsServer)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:    helmManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(helmManifestMaxExtractedSize)",
          "128:    errors.CheckError(err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:     AllowOutOfBoundsSymlinks:                     allowOutOfBoundsSymlinks,",
          "137:     StreamedManifestMaxExtractedSize:             streamedManifestMaxExtractedSizeQuantity.ToDec().Value(),",
          "138:     StreamedManifestMaxTarSize:                   streamedManifestMaxTarSizeQuantity.ToDec().Value(),",
          "139:    }, askPassServer)",
          "140:    errors.CheckError(err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:     HelmManifestMaxExtractedSize:                 helmManifestMaxExtractedSizeQuantity.ToDec().Value(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "216:  command.Flags().BoolVar(&allowOutOfBoundsSymlinks, \"allow-oob-symlinks\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS\", false), \"Allow out-of-bounds symlinks in repositories (not recommended)\")",
          "217:  command.Flags().StringVar(&streamedManifestMaxTarSize, \"streamed-manifest-max-tar-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE\", \"100M\"), \"Maximum size of streamed manifest archives\")",
          "218:  command.Flags().StringVar(&streamedManifestMaxExtractedSize, \"streamed-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of streamed manifest archives when extracted\")",
          "219:  tlsConfigCustomizerSrc = tls.AddTLSFlagsToCmd(&command)",
          "220:  cacheSrc = reposervercache.AddCacheFlagsToCmd(&command, func(client *redis.Client) {",
          "221:   redisClient = client",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:  command.Flags().StringVar(&helmManifestMaxExtractedSize, \"helm-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of helm manifest archives when extracted\")",
          "226:  command.Flags().BoolVar(&disableManifestMaxExtractedSize, \"disable-helm-manifest-max-extracted-size\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", false), \"Disable maximum size of helm manifest archives when extracted\")",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:  AllowOutOfBoundsSymlinks                     bool",
          "110:  StreamedManifestMaxExtractedSize             int64",
          "111:  StreamedManifestMaxTarSize                   int64",
          "112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:  HelmManifestMaxExtractedSize                 int64",
          "113:  DisableHelmManifestMaxExtractedSize          bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:   if source.Helm != nil {",
          "349:    helmPassCredentials = source.Helm.PassCredentials",
          "350:   }",
          "352:   if err != nil {",
          "353:    return err",
          "354:   }",
          "",
          "[Removed Lines]",
          "351:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials)",
          "",
          "[Added Lines]",
          "353:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials, s.initConstants.HelmManifestMaxExtractedSize, s.initConstants.DisableHelmManifestMaxExtractedSize)",
          "",
          "---------------"
        ],
        "util/helm/client.go||util/helm/client.go": [
          "File: util/helm/client.go -> util/helm/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"encoding/json\"",
          "8:  \"errors\"",
          "9:  \"fmt\"",
          "10:  \"io\"",
          "11:  \"net/http\"",
          "12:  \"net/url\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  \"github.com/argoproj/argo-cd/v2/common\"",
          "25:  \"github.com/argoproj/argo-cd/v2/util/cache\"",
          "27:  argoio \"github.com/argoproj/argo-cd/v2/util/io\"",
          "28:  \"github.com/argoproj/argo-cd/v2/util/io/files\"",
          "29:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
          "",
          "[Removed Lines]",
          "26:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52: type Client interface {",
          "53:  CleanChartCache(chart string, version string) error",
          "55:  GetIndex(noCache bool) (*Index, error)",
          "56:  GetTags(chart string, noCache bool) (*TagsList, error)",
          "57:  TestHelmOCI() (bool, error)",
          "",
          "[Removed Lines]",
          "54:  ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error)",
          "",
          "[Added Lines]",
          "54:  ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:  return os.RemoveAll(cachePath)",
          "122: }",
          "126:  helmCmd, err := NewCmdWithVersion(\"\", HelmV3, c.enableOci, c.proxy)",
          "",
          "[Removed Lines]",
          "124: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error) {",
          "",
          "[Added Lines]",
          "124: func untarChart(tempDir string, cachedChartPath string, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) error {",
          "125:  if disableManifestMaxExtractedSize {",
          "126:   cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
          "127:   cmd.Dir = tempDir",
          "128:   _, err := executil.Run(cmd)",
          "129:   return err",
          "130:  }",
          "131:  reader, err := os.Open(cachedChartPath)",
          "132:  if err != nil {",
          "133:   return err",
          "134:  }",
          "135:  return files.Untgz(tempDir, reader, manifestMaxExtractedSize)",
          "136: }",
          "138: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "195:   if len(infos) != 1 {",
          "196:    return \"\", nil, fmt.Errorf(\"expected 1 file, found %v\", len(infos))",
          "197:   }",
          "198:   err = os.Rename(filepath.Join(tempDest, infos[0].Name()), cachedChartPath)",
          "199:   if err != nil {",
          "200:    return \"\", nil, err",
          "201:   }",
          "202:  }",
          "207:  if err != nil {",
          "208:   _ = os.RemoveAll(tempDir)",
          "209:   return \"\", nil, err",
          "",
          "[Removed Lines]",
          "204:  cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
          "205:  cmd.Dir = tempDir",
          "206:  _, err = executil.Run(cmd)",
          "",
          "[Added Lines]",
          "219:  err = untarChart(tempDir, cachedChartPath, manifestMaxExtractedSize, disableManifestMaxExtractedSize)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "301:  }",
          "303:  tr := &http.Transport{",
          "306:   DisableKeepAlives: true,",
          "307:  }",
          "308:  client := http.Client{Transport: tr}",
          "",
          "[Removed Lines]",
          "304:   Proxy:           proxy.GetCallback(c.proxy),",
          "305:   TLSClientConfig: tlsConf,",
          "",
          "[Added Lines]",
          "317:   Proxy:             proxy.GetCallback(c.proxy),",
          "318:   TLSClientConfig:   tlsConf,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "470:  }",
          "472:  tr := &http.Transport{",
          "475:   DisableKeepAlives: true,",
          "476:  }",
          "477:  client := http.Client{Transport: tr}",
          "",
          "[Removed Lines]",
          "473:   Proxy:           proxy.GetCallback(c.proxy),",
          "474:   TLSClientConfig: tlsConf,",
          "",
          "[Added Lines]",
          "486:   Proxy:             proxy.GetCallback(c.proxy),",
          "487:   TLSClientConfig:   tlsConf,",
          "",
          "---------------"
        ],
        "util/helm/client_test.go||util/helm/client_test.go": [
          "File: util/helm/client_test.go -> util/helm/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"bytes\"",
          "5:  \"encoding/json\"",
          "6:  \"fmt\"",
          "7:  \"os\"",
          "8:  \"strings\"",
          "9:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"math\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: func Test_nativeHelmChart_ExtractChart(t *testing.T) {",
          "74:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "76:  assert.NoError(t, err)",
          "77:  defer io.Close(closer)",
          "78:  info, err := os.Stat(path)",
          "",
          "[Removed Lines]",
          "75:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
          "",
          "[Added Lines]",
          "76:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:  assert.True(t, info.IsDir())",
          "81: }",
          "83: func Test_nativeHelmChart_ExtractChart_insecure(t *testing.T) {",
          "84:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{InsecureSkipVerify: true}, false, \"\")",
          "86:  assert.NoError(t, err)",
          "87:  defer io.Close(closer)",
          "88:  info, err := os.Stat(path)",
          "",
          "[Removed Lines]",
          "85:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
          "",
          "[Added Lines]",
          "84: func Test_nativeHelmChart_ExtractChartWithLimiter(t *testing.T) {",
          "85:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "86:  _, _, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, 100, false)",
          "87:  assert.Error(t, err, \"error while iterating on tar reader: unexpected EOF\")",
          "88: }",
          "92:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
          "",
          "---------------"
        ],
        "util/helm/mocks/Client.go||util/helm/mocks/Client.go": [
          "File: util/helm/mocks/Client.go -> util/helm/mocks/Client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: }",
          "33:  ret := _m.Called(chart, version)",
          "35:  var r0 string",
          "",
          "[Removed Lines]",
          "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
          "",
          "[Added Lines]",
          "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, io.Closer, error) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}