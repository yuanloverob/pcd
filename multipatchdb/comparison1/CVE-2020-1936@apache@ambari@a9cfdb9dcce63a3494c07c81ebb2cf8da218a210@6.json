{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a9b6703f484715e0a7fac8cb0fb997e25f54b9bf",
      "candidate_info": {
        "commit_hash": "a9b6703f484715e0a7fac8cb0fb997e25f54b9bf",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a9b6703f484715e0a7fac8cb0fb997e25f54b9bf",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java"
        ],
        "message": "AMBARI-25268. implement configurable password policy for Ambari users - additional improvements (dlysnichenko) (#3034)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java",
          "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java||ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java -> ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: import java.util.concurrent.Callable;",
          "51: import java.util.concurrent.ThreadPoolExecutor;",
          "52: import java.util.concurrent.TimeUnit;",
          "54: import org.apache.ambari.annotations.Experimental;",
          "55: import org.apache.ambari.annotations.ExperimentalFeature;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "513:   public static final ConfigurationProperty<String> PASSWORD_POLICY_REGEXP = new ConfigurationProperty<>(",
          "514:       \"security.password.policy.regexp\", \".*\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "520:   @Markdown(",
          "521:       description = \"Password policy description that is shown to users\")",
          "522:   public static final ConfigurationProperty<String> PASSWORD_POLICY_DESCRIPTION = new ConfigurationProperty<>(",
          "523:       \"security.password.policy.description\", \"\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2633:     }",
          "2634:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2649:   public void validatePasswordPolicyRegexp() {",
          "2650:     String regexp = getPasswordPolicyRegexp();",
          "2651:     if (!StringUtils.isEmpty(regexp) && !regexp.equalsIgnoreCase(\".*\")) {",
          "2652:       Pattern.compile(regexp);",
          "2653:     }",
          "2654:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4017:     return getProperty(PASSWORD_POLICY_REGEXP);",
          "4018:   }",
          "4020:   public JPATableGenerationStrategy getJPATableGenerationStrategy() {",
          "4021:     return JPATableGenerationStrategy.fromString(",
          "4022:         System.getProperty(SERVER_JDBC_GENERATE_TABLES.getKey()));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4043:   public String getPasswordPolicyDescription() {",
          "4044:     return getProperty(PASSWORD_POLICY_DESCRIPTION);",
          "4045:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1090:       Configuration config = injector.getInstance(Configuration.class);",
          "1091:       if (!config.isActiveInstance()) {",
          "1092:         String errMsg = \"This instance of ambari server is not designated as active. Cannot start ambari server.\" +",
          "1093:                             \"The property active.instance is set to false in ambari.properties\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1091:       config.validatePasswordPolicyRegexp();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java||ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java -> ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1760:     }",
          "1761:     String regexp = configuration.getPasswordPolicyRegexp();",
          "1762:     if (!StringUtils.isEmpty(regexp) && (!Pattern.matches(regexp,password))) {",
          "1764:       throw new IllegalArgumentException(msg);",
          "1765:     }",
          "1766:   }",
          "",
          "[Removed Lines]",
          "1763:       final String msg = \"The password does not meet the Ambari user password policy regexp:\" + regexp;",
          "",
          "[Added Lines]",
          "1763:       final String msg = \"The password does not meet the Ambari user password policy : \" + configuration.getPasswordPolicyDescription();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java||ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java -> ambari-server/src/test/java/org/apache/ambari/server/security/authorization/TestUsers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:     configuration.setProperty(Configuration.PASSWORD_POLICY_REGEXP, \"^(?=.*[A-Za-z])(?=.*\\\\d)[A-Za-z\\\\d]{8,}$\");",
          "232:     try {",
          "233:       users.modifyAuthentication(foundLocalAuthenticationEntity, \"user\", \"abc123\", false);",
          "234:       fail(\"Should not pass validation\");",
          "235:     } catch (IllegalArgumentException e) {",
          "237:     }",
          "238:     users.modifyAuthentication(foundLocalAuthenticationEntity, \"user\", \"abcd1234\", false);",
          "239:   }",
          "",
          "[Removed Lines]",
          "236:       assertEquals(\"The password does not meet the Ambari user password policy regexp:^(?=.*[A-Za-z])(?=.*\\\\d)[A-Za-z\\\\d]{8,}$\", e.getLocalizedMessage());",
          "",
          "[Added Lines]",
          "232:     configuration.setProperty(Configuration.PASSWORD_POLICY_DESCRIPTION, \"test description\");",
          "237:       assertEquals(\"The password does not meet the Ambari user password policy : test description\", e.getLocalizedMessage());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7dbb1a27310f8994a1978c5d4e451deef100dd62",
      "candidate_info": {
        "commit_hash": "7dbb1a27310f8994a1978c5d4e451deef100dd62",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/7dbb1a27310f8994a1978c5d4e451deef100dd62",
        "files": [
          "ambari-web/app/controllers/main/host/details.js",
          "ambari-web/app/messages.js",
          "ambari-web/app/templates/main/host/details/host_component.hbs",
          "ambari-web/test/controllers/main/host/details_test.js"
        ],
        "message": "AMBARI-25164 Rack \"Config Refresh\" behaviour is different in Ambari 2.6 and 2.7.3",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js",
          "ambari-web/app/messages.js||ambari-web/app/messages.js",
          "ambari-web/app/templates/main/host/details/host_component.hbs||ambari-web/app/templates/main/host/details/host_component.hbs",
          "ambari-web/test/controllers/main/host/details_test.js||ambari-web/test/controllers/main/host/details_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js": [
          "File: ambari-web/app/controllers/main/host/details.js -> ambari-web/app/controllers/main/host/details.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2879:   refreshConfigs: function (event) {",
          "2880:     var self = this;",
          "2883:       return App.showConfirmationPopup(function () {",
          "2886:     }",
          "2887:   },",
          "",
          "[Removed Lines]",
          "2881:     var components = event.context;",
          "2882:     if (components.get('length') > 0) {",
          "2884:         batchUtils.restartHostComponents(components, Em.I18n.t('rollingrestart.context.allClientsOnSelectedHost').format(self.get('content.hostName')), \"HOST\");",
          "2885:       }, Em.I18n.t('question.sure.refresh').format(self.get('content.hostName')) );",
          "",
          "[Added Lines]",
          "2881:     var component = event.context;",
          "2882:     if (!Em.isNone(component)) {",
          "2884:         var message = Em.I18n.t('rollingrestart.context.ClientOnSelectedHost')",
          "2885:         .format(component.get('displayName'), self.get('content.hostName'));",
          "2886:         batchUtils.restartHostComponents([component], message, \"HOST\");",
          "2887:       }, Em.I18n.t('question.sure.refresh').format(component.get('displayName'), self.get('content.hostName')));",
          "",
          "---------------"
        ],
        "ambari-web/app/messages.js||ambari-web/app/messages.js": [
          "File: ambari-web/app/messages.js -> ambari-web/app/messages.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:   'question.sure.start':'Are you sure you want to start {0}?',",
          "441:   'question.sure.stop':'Are you sure you want to stop {0}?',",
          "442:   'question.sure.move':'Are you sure you want to move {0}?',",
          "444:   'question.sure.maintenance':'Are you sure you want to turn on maintenance mode for {0}?',",
          "445:   'question.sure.upgrade':'Are you sure you want to upgrade {0}?',",
          "446:   'question.sure.decommission':'Are you sure you want to decommission {0}?',",
          "",
          "[Removed Lines]",
          "443:   'question.sure.refresh':'Are you sure you want to restart all clients on {0}?',",
          "",
          "[Added Lines]",
          "443:   'question.sure.refresh':'Are you sure you want to restart {0} on {1}?',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3269:   'rollingrestart.context.allOnSelectedHosts':'Restart all components on the selected hosts',",
          "3270:   'rollingrestart.context.allForSelectedService':'Restart all components for {0}',",
          "3271:   'rollingrestart.context.allWithStaleConfigsForSelectedService':'Restart all components with Stale Configs for {0}',",
          "3273:   'rollingrestart.context.allWithStaleConfigsOnSelectedHost':'Restart components with Stale Configs on {0}',",
          "3274:   'rollingrestart.context.allOnSelectedHost':'Restart all components on {0}',",
          "3275:   'rollingrestart.context.selectedComponentOnSelectedHost':'Restart {0}',",
          "",
          "[Removed Lines]",
          "3272:   'rollingrestart.context.allClientsOnSelectedHost':'Restart all clients on {0}',",
          "",
          "[Added Lines]",
          "3272:   'rollingrestart.context.ClientOnSelectedHost':'Restart {0} on {1}',",
          "",
          "---------------"
        ],
        "ambari-web/app/templates/main/host/details/host_component.hbs||ambari-web/app/templates/main/host/details/host_component.hbs": [
          "File: ambari-web/app/templates/main/host/details/host_component.hbs -> ambari-web/app/templates/main/host/details/host_component.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:           <ul class=\"dropdown-menu\">",
          "79:             <li>",
          "80:               <a href=\"javascript:void(null)\" data-toggle=\"modal\"",
          "82:                 {{t hosts.host.details.refreshConfigs}}",
          "83:               </a>",
          "84:             </li>",
          "",
          "[Removed Lines]",
          "81:                 {{action \"refreshComponentConfigs\" view.content target=\"controller\"}}>",
          "",
          "[Added Lines]",
          "81:                 {{action \"refreshConfigs\" view.content target=\"controller\"}}>",
          "",
          "---------------"
        ],
        "ambari-web/test/controllers/main/host/details_test.js||ambari-web/test/controllers/main/host/details_test.js": [
          "File: ambari-web/test/controllers/main/host/details_test.js -> ambari-web/test/controllers/main/host/details_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2587:     });",
          "2589:     it('No components', function () {",
          "2591:       controller.refreshConfigs(event);",
          "2592:       expect(App.showConfirmationPopup.called).to.be.false;",
          "2593:     });",
          "2594:     it('Some components present', function () {",
          "2596:       var popup = controller.refreshConfigs(event);",
          "2597:       expect(App.showConfirmationPopup.calledOnce).to.be.true;",
          "2598:       popup.onPrimary();",
          "2600:     });",
          "2601:   });",
          "",
          "[Removed Lines]",
          "2590:       var event = {context: Em.A([])};",
          "2595:       var event = {context: Em.A([Em.Object.create()])};",
          "2599:       expect(batchUtils.restartHostComponents.calledWith(event.context)).to.be.true;",
          "",
          "[Added Lines]",
          "2590:       var event = {context: null};",
          "2595:       var event = {context: Em.Object.create({displayName: 'c1'})};",
          "2599:       expect(batchUtils.restartHostComponents.calledWith([event.context])).to.be.true;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4140a034c015b878e92adb2dce552dbb246ddafc",
      "candidate_info": {
        "commit_hash": "4140a034c015b878e92adb2dce552dbb246ddafc",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/4140a034c015b878e92adb2dce552dbb246ddafc",
        "files": [
          "ambari-server/src/main/resources/scripts/configs.py"
        ],
        "message": "[AMBARI-25184] configs.py: cannot set an empty property value (apappu) (#2914)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/scripts/configs.py||ambari-server/src/main/resources/scripts/configs.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/scripts/configs.py||ambari-server/src/main/resources/scripts/configs.py": [
          "File: ambari-server/src/main/resources/scripts/configs.py -> ambari-server/src/main/resources/scripts/configs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:   accessor = api_accessor(host, user, password, protocol, port, options.unsafe)",
          "350:   if action == SET_ACTION:",
          "353:       parser.error(\"You should use option (-f) to set file where entire configurations are saved OR (-k) key and (-v) value for one property\")",
          "354:     if options.file:",
          "355:       action_args = [options.file]",
          "",
          "[Removed Lines]",
          "352:     if not options.file and (not options.key or not options.value):",
          "",
          "[Added Lines]",
          "352:     if not options.file and (not options.key or options.value is None):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a1c20b440befe0d24c77c23373d21934e716094",
      "candidate_info": {
        "commit_hash": "9a1c20b440befe0d24c77c23373d21934e716094",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9a1c20b440befe0d24c77c23373d21934e716094",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/resources/ClusterResourceDefinition.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/UpdateConfigurationPolicy.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UpgradeResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerActionTest.java"
        ],
        "message": "[AMBARI-24229] Prevent Configuration Changes During Keytab Regeneration in an Upgrade",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/resources/ClusterResourceDefinition.java||ambari-server/src/main/java/org/apache/ambari/server/api/resources/ClusterResourceDefinition.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/UpdateConfigurationPolicy.java||ambari-server/src/main/java/org/apache/ambari/server/controller/UpdateConfigurationPolicy.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java",
          "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UpgradeResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UpgradeResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerActionTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/api/resources/ClusterResourceDefinition.java||ambari-server/src/main/java/org/apache/ambari/server/api/resources/ClusterResourceDefinition.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/resources/ClusterResourceDefinition.java -> ambari-server/src/main/java/org/apache/ambari/server/api/resources/ClusterResourceDefinition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     directives.add(KerberosHelper.DIRECTIVE_HOSTS);",
          "89:     directives.add(KerberosHelper.DIRECTIVE_COMPONENTS);",
          "90:     directives.add(KerberosHelper.DIRECTIVE_IGNORE_CONFIGS);",
          "91:     return directives;",
          "92:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:     directives.add(KerberosHelper.DIRECTIVE_CONFIG_UPDATE_POLICY);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   String DIRECTIVE_COMPONENTS = \"regenerate_components\";",
          "66:   String DIRECTIVE_IGNORE_CONFIGS = \"ignore_config_updates\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:   String DIRECTIVE_CONFIG_UPDATE_POLICY = \"config_update_policy\";",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:                 throw new AmbariException(String.format(\"Custom operation %s can only be requested with the security type cluster property: %s\", operation.name(), SecurityType.KERBEROS.name()));",
          "280:               }",
          "282:               boolean retryAllowed = false;",
          "283:               if (requestProperties.containsKey(ALLOW_RETRY)) {",
          "284:                 String allowRetryString = requestProperties.get(ALLOW_RETRY);",
          "285:                 retryAllowed = Boolean.parseBoolean(allowRetryString);",
          "286:               }",
          "290:               Set<String> hostFilter = parseHostFilter(requestProperties);",
          "291:               Map<String, Set<String>> serviceComponentFilter = parseComponentFilter(requestProperties);",
          "302:               }",
          "308:                   serviceComponentFilter, hostFilter, null, null, requestStageContainer, handler);",
          "313:               break;",
          "",
          "[Removed Lines]",
          "288:               CreatePrincipalsAndKeytabsHandler handler = null;",
          "293:               boolean updateConfigurations = !requestProperties.containsKey(DIRECTIVE_IGNORE_CONFIGS)",
          "294:                 || !\"true\".equalsIgnoreCase(requestProperties.get(DIRECTIVE_IGNORE_CONFIGS));",
          "296:               boolean forceAllHosts = (hostFilter == null) || (hostFilter.contains(\"*\"));",
          "298:               if (\"true\".equalsIgnoreCase(value) || \"all\".equalsIgnoreCase(value)) {",
          "299:                 handler = new CreatePrincipalsAndKeytabsHandler(KerberosServerAction.OperationType.RECREATE_ALL, updateConfigurations, forceAllHosts, true);",
          "300:               } else if (\"missing\".equalsIgnoreCase(value)) {",
          "301:                 handler = new CreatePrincipalsAndKeytabsHandler(KerberosServerAction.OperationType.CREATE_MISSING, updateConfigurations, forceAllHosts, true);",
          "304:               if (handler != null) {",
          "305:                 handler.setRetryAllowed(retryAllowed);",
          "307:                 requestStageContainer = handle(cluster, getKerberosDetails(cluster, manageIdentities),",
          "309:               } else {",
          "310:                 throw new AmbariException(String.format(\"Unexpected directive value: %s\", value));",
          "311:               }",
          "",
          "[Added Lines]",
          "282:               KerberosServerAction.OperationType operationType;",
          "283:               if (\"true\".equalsIgnoreCase(value) || \"all\".equalsIgnoreCase(value)) {",
          "284:                 operationType = KerberosServerAction.OperationType.RECREATE_ALL;",
          "285:               } else if (\"missing\".equalsIgnoreCase(value)) {",
          "286:                 operationType = KerberosServerAction.OperationType.CREATE_MISSING;",
          "287:               } else {",
          "288:                 throw new AmbariException(String.format(\"Unexpected directive value: %s\", value));",
          "289:               }",
          "300:               UpdateConfigurationPolicy updateConfigurationsPolicy = UpdateConfigurationPolicy.ALL;",
          "301:               if(requestProperties.containsKey(DIRECTIVE_CONFIG_UPDATE_POLICY)) {",
          "302:                 String policyValue = requestProperties.get(DIRECTIVE_CONFIG_UPDATE_POLICY);",
          "303:                 updateConfigurationsPolicy = UpdateConfigurationPolicy.translate(policyValue);",
          "305:                 if(updateConfigurationsPolicy== null) {",
          "306:                   throw new AmbariException(String.format(\"Unexpected comfiguration policy value: %s\", policyValue));",
          "307:                 }",
          "308:               }",
          "309:               else if(requestProperties.containsKey(DIRECTIVE_IGNORE_CONFIGS)) {",
          "310:                 if(\"true\".equalsIgnoreCase(requestProperties.get(DIRECTIVE_IGNORE_CONFIGS))) {",
          "314:                   updateConfigurationsPolicy = UpdateConfigurationPolicy.NEW_AND_IDENTITIES;",
          "315:                 }",
          "318:               boolean forceAllHosts = (hostFilter == null) || (hostFilter.contains(\"*\"));",
          "320:               CreatePrincipalsAndKeytabsHandler handler = new CreatePrincipalsAndKeytabsHandler(operationType, updateConfigurationsPolicy, forceAllHosts, true);",
          "321:               handler.setRetryAllowed(retryAllowed);",
          "323:               requestStageContainer = handle(cluster, getKerberosDetails(cluster, manageIdentities),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368:                                                 Set<String> hostFilter, Collection<String> identityFilter, Set<String> hostsToForceKerberosOperations,",
          "369:                                                 RequestStageContainer requestStageContainer, Boolean manageIdentities)",
          "370:     throws AmbariException, KerberosOperationException {",
          "374:   }",
          "376:   @Override",
          "",
          "[Removed Lines]",
          "371:     return handle(cluster, getKerberosDetails(cluster, manageIdentities), serviceComponentFilter, hostFilter, identityFilter,",
          "372:       hostsToForceKerberosOperations, requestStageContainer, new CreatePrincipalsAndKeytabsHandler(KerberosServerAction.OperationType.DEFAULT, false, false,",
          "373:         false));",
          "",
          "[Added Lines]",
          "384:     return handle(cluster,",
          "385:         getKerberosDetails(cluster, manageIdentities),",
          "386:         serviceComponentFilter,",
          "387:         hostFilter,",
          "388:         identityFilter,",
          "389:         hostsToForceKerberosOperations,",
          "390:         requestStageContainer,",
          "391:         new CreatePrincipalsAndKeytabsHandler(KerberosServerAction.OperationType.DEFAULT,",
          "392:             UpdateConfigurationPolicy.NONE,",
          "393:             false,",
          "394:             false));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1112:   public RequestStageContainer createTestIdentity(Cluster cluster, Map<String, String> commandParamsStage,",
          "1113:                                                   RequestStageContainer requestStageContainer)",
          "1114:     throws KerberosOperationException, AmbariException {",
          "1117:   }",
          "1119:   @Override",
          "",
          "[Removed Lines]",
          "1115:     return handleTestIdentity(cluster, getKerberosDetails(cluster, null), commandParamsStage, requestStageContainer,",
          "1116:       new CreatePrincipalsAndKeytabsHandler(KerberosServerAction.OperationType.DEFAULT, false, false, false));",
          "",
          "[Added Lines]",
          "1136:     return handleTestIdentity(cluster,",
          "1137:         getKerberosDetails(cluster, null),",
          "1138:         commandParamsStage,",
          "1139:         requestStageContainer,",
          "1140:         new CreatePrincipalsAndKeytabsHandler(KerberosServerAction.OperationType.DEFAULT,",
          "1141:             UpdateConfigurationPolicy.NONE,",
          "1142:             false,",
          "1143:             false));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3891:       Map<String, String> commandParameters = new HashMap<>();",
          "3892:       commandParameters.put(KerberosServerAction.AUTHENTICATED_USER_NAME, ambariManagementController.getAuthName());",
          "3893:       commandParameters.put(KerberosServerAction.UPDATE_CONFIGURATION_NOTE, \"Enabling Kerberos\");",
          "3895:       commandParameters.put(KerberosServerAction.DEFAULT_REALM, kerberosDetails.getDefaultRealm());",
          "3896:       commandParameters.put(KerberosServerAction.INCLUDE_AMBARI_IDENTITY, (kerberosDetails.createAmbariPrincipal()) ? \"true\" : \"false\");",
          "3897:       commandParameters.put(KerberosServerAction.PRECONFIGURE_SERVICES, kerberosDetails.getPreconfigureServices());",
          "",
          "[Removed Lines]",
          "3894:       commandParameters.put(KerberosServerAction.UPDATE_CONFIGURATIONS, \"true\");",
          "",
          "[Added Lines]",
          "3921:       commandParameters.put(KerberosServerAction.UPDATE_CONFIGURATION_POLICY, UpdateConfigurationPolicy.ALL.name());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3987:       Map<String, String> commandParameters = new HashMap<>();",
          "3988:       commandParameters.put(KerberosServerAction.AUTHENTICATED_USER_NAME, ambariManagementController.getAuthName());",
          "3989:       commandParameters.put(KerberosServerAction.UPDATE_CONFIGURATION_NOTE, \"Disabling Kerberos\");",
          "3991:       commandParameters.put(KerberosServerAction.DEFAULT_REALM, kerberosDetails.getDefaultRealm());",
          "3992:       if (dataDirectory != null) {",
          "3993:         commandParameters.put(KerberosServerAction.DATA_DIRECTORY, dataDirectory.getAbsolutePath());",
          "",
          "[Removed Lines]",
          "3990:       commandParameters.put(KerberosServerAction.UPDATE_CONFIGURATIONS, \"true\");",
          "",
          "[Added Lines]",
          "4017:       commandParameters.put(KerberosServerAction.UPDATE_CONFIGURATION_POLICY, UpdateConfigurationPolicy.ALL.name());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4084:     private KerberosServerAction.OperationType operationType;",
          "",
          "[Removed Lines]",
          "4090:     private boolean updateConfigurations;",
          "",
          "[Added Lines]",
          "4116:     private UpdateConfigurationPolicy updateConfigurationPolicy;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4120:                                       boolean forceAllHosts, boolean includeAmbariIdentity) {",
          "4121:       this.operationType = operationType;",
          "4123:       this.forceAllHosts = forceAllHosts;",
          "4124:       this.includeAmbariIdentity = includeAmbariIdentity;",
          "4125:     }",
          "",
          "[Removed Lines]",
          "4119:     CreatePrincipalsAndKeytabsHandler(KerberosServerAction.OperationType operationType, boolean updateConfigurations,",
          "4122:       this.updateConfigurations = updateConfigurations;",
          "",
          "[Added Lines]",
          "4145:     CreatePrincipalsAndKeytabsHandler(KerberosServerAction.OperationType operationType,",
          "4146:                                       UpdateConfigurationPolicy updateConfigurationPolicy,",
          "4149:       this.updateConfigurationPolicy = updateConfigurationPolicy;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4176:       commandParameters.put(KerberosServerAction.OPERATION_TYPE, (operationType == null) ? KerberosServerAction.OperationType.DEFAULT.name() : operationType.name());",
          "4177:       commandParameters.put(KerberosServerAction.INCLUDE_AMBARI_IDENTITY, (processAmbariIdentity) ? \"true\" : \"false\");",
          "4180:         commandParameters.put(KerberosServerAction.UPDATE_CONFIGURATION_NOTE, \"Updated Kerberos-related configurations\");",
          "4182:       }",
          "4184:       List<String> hostsToInclude = calculateHosts(cluster, serviceComponentHosts, hostsWithValidKerberosClient, forceAllHosts);",
          "",
          "[Removed Lines]",
          "4179:       if (updateConfigurations) {",
          "4181:         commandParameters.put(KerberosServerAction.UPDATE_CONFIGURATIONS, \"true\");",
          "",
          "[Added Lines]",
          "4206:       if (updateConfigurationPolicy != UpdateConfigurationPolicy.NONE) {",
          "4208:         commandParameters.put(KerberosServerAction.UPDATE_CONFIGURATION_POLICY, updateConfigurationPolicy.name());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4219:           roleCommandOrder, requestStageContainer, hostsToInclude);",
          "4220:       }",
          "4225:         addUpdateConfigurationsStage(cluster, clusterHostInfoJson, hostParamsJson, event, commandParameters,",
          "",
          "[Removed Lines]",
          "4222:       if (updateConfigurations) {",
          "",
          "[Added Lines]",
          "4249:       if (updateConfigurationPolicy != UpdateConfigurationPolicy.NONE) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4353:         }",
          "4355:         commandParameters.put(KerberosServerAction.KDC_TYPE, kerberosDetails.getKdcType().name());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4383:         commandParameters.put(KerberosServerAction.UPDATE_CONFIGURATION_POLICY, UpdateConfigurationPolicy.ALL.name());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/UpdateConfigurationPolicy.java||ambari-server/src/main/java/org/apache/ambari/server/controller/UpdateConfigurationPolicy.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/UpdateConfigurationPolicy.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/UpdateConfigurationPolicy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.controller;",
          "29: public enum UpdateConfigurationPolicy {",
          "33:   NONE(false, false, false, false),",
          "39:   IDENTITIES_ONLY(false, true, false, false),",
          "45:   NEW_AND_IDENTITIES(true, true, true, false),",
          "50:   ALL(true, true, true, true);",
          "52:   private final boolean invokeStackAdvisor;",
          "53:   private final boolean applyIdentityChanges;",
          "54:   private final boolean applyAdditions;",
          "55:   private final boolean applyOtherChanges;",
          "57:   UpdateConfigurationPolicy(boolean invokeStackAdvisor, boolean applyIdentityChanges, boolean applyAdditions, boolean applyOtherChanges) {",
          "58:     this.invokeStackAdvisor = invokeStackAdvisor;",
          "59:     this.applyIdentityChanges = applyIdentityChanges;",
          "60:     this.applyAdditions = applyAdditions;",
          "61:     this.applyOtherChanges = applyOtherChanges;",
          "62:   }",
          "64:   public boolean invokeStackAdvisor() {",
          "65:     return invokeStackAdvisor;",
          "66:   }",
          "68:   public boolean applyIdentityChanges() {",
          "69:     return applyIdentityChanges;",
          "70:   }",
          "72:   public boolean applyAdditions() {",
          "73:     return applyAdditions;",
          "74:   }",
          "76:   public boolean applyOtherChanges() {",
          "77:     return applyOtherChanges;",
          "78:   }",
          "88:   public static String translate(UpdateConfigurationPolicy value) {",
          "89:     return (value == null) ? null : value.name().toLowerCase();",
          "90:   }",
          "101:   public static UpdateConfigurationPolicy translate(String stringValue) {",
          "102:     if (stringValue != null) {",
          "103:       stringValue = stringValue.trim().toUpperCase();",
          "105:       if (!stringValue.isEmpty()) {",
          "106:         try {",
          "107:           return valueOf(stringValue.replace('-', '_'));",
          "108:         } catch (IllegalArgumentException e) {",
          "110:         }",
          "111:       }",
          "112:     }",
          "114:     return null;",
          "115:   }",
          "116: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: import org.apache.ambari.server.controller.ExecuteCommandJson;",
          "53: import org.apache.ambari.server.controller.KerberosHelper;",
          "54: import org.apache.ambari.server.controller.KerberosHelperImpl.SupportedCustomOperation;",
          "55: import org.apache.ambari.server.controller.spi.NoSuchParentResourceException;",
          "56: import org.apache.ambari.server.controller.spi.NoSuchResourceException;",
          "57: import org.apache.ambari.server.controller.spi.Predicate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: import org.apache.ambari.server.controller.UpdateConfigurationPolicy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "857:               Map<String, String> requestProperties = new HashMap<>();",
          "858:               requestProperties.put(SupportedCustomOperation.REGENERATE_KEYTABS.name().toLowerCase(), \"missing\");",
          "859:               requestProperties.put(KerberosHelper.ALLOW_RETRY, Boolean.TRUE.toString().toLowerCase());",
          "862:               req = s_kerberosHelper.get().executeCustomOperations(cluster, requestProperties, req, null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "861:               requestProperties.put(KerberosHelper.DIRECTIVE_CONFIG_UPDATE_POLICY, UpdateConfigurationPolicy.NEW_AND_IDENTITIES.name());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.apache.ambari.server.controller.KerberosHelper;",
          "35: import org.apache.ambari.server.controller.RootComponent;",
          "36: import org.apache.ambari.server.controller.RootService;",
          "37: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosKeytab;",
          "38: import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosPrincipal;",
          "39: import org.apache.ambari.server.state.Cluster;",
          "40: import org.apache.ambari.server.state.ServiceComponentHost;",
          "41: import org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor;",
          "42: import org.apache.ambari.server.state.kerberos.KerberosDescriptor;",
          "43: import org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor;",
          "44: import org.apache.ambari.server.state.kerberos.KerberosServiceDescriptor;",
          "45: import org.apache.ambari.server.utils.StageUtils;",
          "46: import org.apache.commons.lang.StringUtils;",
          "47: import org.slf4j.Logger;",
          "48: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.apache.ambari.server.controller.UpdateConfigurationPolicy;",
          "41: import org.apache.ambari.server.state.ConfigHelper;",
          "43: import org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer;",
          "49: import org.apache.commons.collections.CollectionUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:   @Inject",
          "65:   private KerberosConfigDataFileWriterFactory kerberosConfigDataFileWriterFactory;",
          "67:   @Override",
          "68:   protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, Map<String, Object> requestSharedDataContext) throws AmbariException {",
          "69:     throw new UnsupportedOperationException();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   @Inject",
          "72:   private ConfigHelper configHelper;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:   }",
          "76:   public void processServiceComponentHosts(Cluster cluster, KerberosDescriptor kerberosDescriptor,",
          "83:     List<Component> components = new ArrayList<>();",
          "84:     for (ServiceComponentHost each : schToProcess) {",
          "85:       components.add(Component.fromServiceComponentHost(each));",
          "",
          "[Removed Lines]",
          "77:                                     List<ServiceComponentHost> schToProcess,",
          "78:                                     Collection<String> identityFilter, String dataDirectory,",
          "79:                                     Map<String, Map<String, String>> currentConfigurations,",
          "80:                                     Map<String, Map<String, String>> kerberosConfigurations,",
          "81:                                     boolean includeAmbariIdentity,",
          "82:                                     Map<String, Set<String>> propertiesToBeIgnored) throws AmbariException {",
          "",
          "[Added Lines]",
          "84:                                            List<ServiceComponentHost> schToProcess,",
          "85:                                            Collection<String> identityFilter, String dataDirectory,",
          "86:                                            Map<String, Map<String, String>> currentConfigurations,",
          "87:                                            Map<String, Map<String, String>> kerberosConfigurations,",
          "88:                                            boolean includeAmbariIdentity,",
          "89:                                            Map<String, Set<String>> propertiesToBeIgnored) throws AmbariException {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "275:   protected void processConfigurationChanges(String dataDirectory,",
          "276:                                              Map<String, Map<String, String>> kerberosConfigurations,",
          "278:       throws AmbariException {",
          "279:     actionLog.writeStdOut(\"Determining configuration changes\");",
          "",
          "[Removed Lines]",
          "277:                                              Map<String, Set<String>> propertiesToBeRemoved)",
          "",
          "[Added Lines]",
          "286:                                              Map<String, Set<String>> propertiesToBeRemoved,",
          "287:                                              KerberosDescriptor kerberosDescriptor,",
          "288:                                              UpdateConfigurationPolicy updateConfigurationPolicy)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "287:         throw new AmbariException(message);",
          "288:       }",
          "290:       File configFile = new File(dataDirectory, KerberosConfigDataFileWriter.DATA_FILE_NAME);",
          "291:       KerberosConfigDataFileWriter kerberosConfDataFileWriter = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:       Map<String, Set<String>> kerberosIdentityProperties = getIdentityProperties(kerberosDescriptor, null);",
          "305:       Map<String, Map<String, String>> existingProperties = configHelper.getEffectiveConfigProperties(getClusterName(), null);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "301:           if (properties != null) {",
          "302:             for (Map.Entry<String, String> configTypeEntry : properties.entrySet()) {",
          "307:             }",
          "308:           }",
          "309:         }",
          "",
          "[Removed Lines]",
          "303:               kerberosConfDataFileWriter.addRecord(type,",
          "304:                   configTypeEntry.getKey(),",
          "305:                   configTypeEntry.getValue(),",
          "306:                   KerberosConfigDataFileWriter.OPERATION_TYPE_SET);",
          "",
          "[Added Lines]",
          "322:               String propertyName = configTypeEntry.getKey();",
          "323:               if (includeConfiguration(type, propertyName, updateConfigurationPolicy, existingProperties, kerberosIdentityProperties)) {",
          "324:                 kerberosConfDataFileWriter.addRecord(type,",
          "325:                     propertyName,",
          "326:                     configTypeEntry.getValue(),",
          "327:                     KerberosConfigDataFileWriter.OPERATION_TYPE_SET);",
          "328:               }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "343:       }",
          "344:     }",
          "345:   }",
          "346: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379:   private boolean includeConfiguration(String configType, String propertyName,",
          "380:                                        UpdateConfigurationPolicy updateConfigurationPolicy,",
          "381:                                        Map<String, Map<String, String>> existingProperties,",
          "382:                                        Map<String, Set<String>> kerberosIdentityProperties) {",
          "385:     boolean isIdentity;",
          "386:     if (kerberosIdentityProperties == null) {",
          "387:       isIdentity = false;",
          "388:     } else {",
          "389:       Set<String> propertyNames = kerberosIdentityProperties.get(configType);",
          "390:       isIdentity = !CollectionUtils.isEmpty(propertyNames) && propertyNames.contains(propertyName);",
          "391:     }",
          "393:     if (isIdentity) {",
          "394:       return updateConfigurationPolicy.applyIdentityChanges();",
          "395:     }",
          "398:     boolean isNew;",
          "399:     if (existingProperties == null) {",
          "400:       isNew = true;",
          "401:     } else {",
          "402:       Map<String, String> propertyNames = existingProperties.get(configType);",
          "403:       isNew = (propertyNames == null) || !propertyNames.containsKey(propertyName);",
          "404:     }",
          "406:     if (isNew) {",
          "407:       return updateConfigurationPolicy.applyAdditions();",
          "408:     }",
          "411:     return updateConfigurationPolicy.applyOtherChanges();",
          "412:   }",
          "429:   private Map<String, Set<String>> getIdentityProperties(AbstractKerberosDescriptorContainer container, Map<String, Set<String>> identityProperties) {",
          "430:     if (container != null) {",
          "431:       if (identityProperties == null) {",
          "432:         identityProperties = new HashMap<>();",
          "433:       }",
          "436:       List<KerberosIdentityDescriptor> identityDescriptors;",
          "437:       try {",
          "439:         identityDescriptors = container.getIdentities(false, null);",
          "440:       } catch (AmbariException e) {",
          "441:         LOG.error(\"An exception occurred getting the Kerberos identity descriptors.  No configurations will be identified.\", e);",
          "442:         identityDescriptors = null;",
          "443:       }",
          "445:       if (identityDescriptors != null) {",
          "446:         Map<String, Map<String, String>> identityConfigurations = kerberosHelper.getIdentityConfigurations(identityDescriptors);",
          "448:         if (identityConfigurations != null) {",
          "449:           for (Map.Entry<String, Map<String, String>> entry : identityConfigurations.entrySet()) {",
          "450:             Map<String, String> properties = entry.getValue();",
          "451:             if (properties != null) {",
          "452:               Set<String> configProperties = identityProperties.computeIfAbsent(entry.getKey(), k -> new HashSet<>());",
          "453:               configProperties.addAll(properties.keySet());",
          "454:             }",
          "455:           }",
          "456:         }",
          "457:       }",
          "460:       Map<String, Set<String>> authToLocalProperties = kerberosHelper.translateConfigurationSpecifications(container.getAuthToLocalProperties());",
          "461:       if (authToLocalProperties != null) {",
          "462:         for (Map.Entry<String, Set<String>> entry : authToLocalProperties.entrySet()) {",
          "463:           String configType = entry.getKey();",
          "464:           Set<String> propertyNames = entry.getValue();",
          "466:           if (propertyNames != null) {",
          "467:             Set<String> configProperties = identityProperties.computeIfAbsent(configType, k -> new HashSet<>());",
          "468:             configProperties.addAll(propertyNames);",
          "469:           }",
          "470:         }",
          "471:       }",
          "474:       Collection<? extends AbstractKerberosDescriptorContainer> childContainers = container.getChildContainers();",
          "475:       if (childContainers != null) {",
          "476:         for (AbstractKerberosDescriptorContainer childContainer : childContainers) {",
          "477:           getIdentityProperties(childContainer, identityProperties);",
          "478:         }",
          "479:       }",
          "480:     }",
          "482:     return identityProperties;",
          "483:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.apache.ambari.server.agent.CommandReport;",
          "32: import org.apache.ambari.server.agent.ExecutionCommand;",
          "33: import org.apache.ambari.server.controller.KerberosHelper;",
          "34: import org.apache.ambari.server.orm.dao.HostDAO;",
          "35: import org.apache.ambari.server.orm.entities.HostEntity;",
          "36: import org.apache.ambari.server.security.credential.PrincipalKeyCredential;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.apache.ambari.server.controller.UpdateConfigurationPolicy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:   public static final String KDC_TYPE = \"kdc_type\";",
          "",
          "[Removed Lines]",
          "106:   public static final String UPDATE_CONFIGURATIONS = \"update_configurations\";",
          "",
          "[Added Lines]",
          "117:   public static final String UPDATE_CONFIGURATION_POLICY = \"update_configuration_policy\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:     return ((commandParameters == null) || (propertyName == null)) ? null : commandParameters.get(propertyName);",
          "197:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:   protected static UpdateConfigurationPolicy getUpdateConfigurationPolicy(Map<String, String> commandParameters) {",
          "217:     String stringValue = getCommandParameterValue(commandParameters, UPDATE_CONFIGURATION_POLICY);",
          "218:     UpdateConfigurationPolicy value = UpdateConfigurationPolicy.translate(stringValue);",
          "221:     return (value == null) ? UpdateConfigurationPolicy.ALL : value;",
          "222:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:       kerberosHelper.applyStackAdvisorUpdates(cluster, services, configurations, kerberosConfigurations,",
          "204:           propertiesToIgnore, configurationsToRemove, false);",
          "207:     }",
          "209:     return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "",
          "[Removed Lines]",
          "206:       processConfigurationChanges(dataDirectory, kerberosConfigurations, configurationsToRemove);",
          "",
          "[Added Lines]",
          "206:       processConfigurationChanges(dataDirectory, kerberosConfigurations, configurationsToRemove, kerberosDescriptor, getUpdateConfigurationPolicy(commandParameters));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:     }",
          "129:     clusterEnvProperties.put(KerberosHelper.SECURITY_ENABLED_PROPERTY_NAME, \"true\");",
          "133:     return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "134:   }",
          "",
          "[Removed Lines]",
          "131:     processConfigurationChanges(dataDirectory, kerberosConfigurations, propertiesToRemove);",
          "",
          "[Added Lines]",
          "131:     processConfigurationChanges(dataDirectory, kerberosConfigurations, propertiesToRemove, kerberosDescriptor, getUpdateConfigurationPolicy(commandParameters));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java||ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java -> ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.ambari.server.controller.KerberosHelper;",
          "33: import org.apache.ambari.server.controller.RootComponent;",
          "34: import org.apache.ambari.server.controller.RootService;",
          "35: import org.apache.ambari.server.state.Cluster;",
          "36: import org.apache.ambari.server.state.ServiceComponentHost;",
          "37: import org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import org.apache.ambari.server.controller.UpdateConfigurationPolicy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:       includeAmbariIdentity &= (serviceComponentFilter.get(RootService.AMBARI.name()) != null)",
          "120:         identityFilter = updateIdentityFilter(kerberosDescriptor, identityFilter, serviceComponentFilter);",
          "121:       }",
          "",
          "[Removed Lines]",
          "116:         && serviceComponentFilter.get(RootService.AMBARI.name()).contains(RootComponent.AMBARI_SERVER.name());",
          "118:       if((operationType != OperationType.DEFAULT)) {",
          "",
          "[Added Lines]",
          "117:           && serviceComponentFilter.get(RootService.AMBARI.name()).contains(RootComponent.AMBARI_SERVER.name());",
          "119:       if ((operationType != OperationType.DEFAULT)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:     processServiceComponentHosts(cluster, kerberosDescriptor, schToProcess, identityFilter, dataDirectory,",
          "129:         configurations, kerberosConfigurations, includeAmbariIdentity, propertiesToIgnore);",
          "135:       Map<String, Map<String, String>> calculatedConfigurations = kerberosHelper.calculateConfigurations(cluster, null, kerberosDescriptor, false, false);",
          "138:     }",
          "140:     return createCommandReport(0, HostRoleStatus.COMPLETED, \"{}\", actionLog.getStdOut(), actionLog.getStdErr());",
          "",
          "[Removed Lines]",
          "131:     kerberosHelper.applyStackAdvisorUpdates(cluster, services, configurations, kerberosConfigurations,",
          "132:         propertiesToIgnore, propertiesToRemove, true);",
          "134:     if (\"true\".equalsIgnoreCase(getCommandParameterValue(commandParameters, UPDATE_CONFIGURATIONS))) {",
          "136:       processAuthToLocalRules(cluster, calculatedConfigurations, kerberosDescriptor, schToProcess, kerberosConfigurations, getDefaultRealm(commandParameters), false);",
          "137:       processConfigurationChanges(dataDirectory, kerberosConfigurations, propertiesToRemove);",
          "",
          "[Added Lines]",
          "132:     UpdateConfigurationPolicy updateConfigurationPolicy = getUpdateConfigurationPolicy(commandParameters);",
          "134:     if (updateConfigurationPolicy != UpdateConfigurationPolicy.NONE) {",
          "135:       if (updateConfigurationPolicy.invokeStackAdvisor()) {",
          "136:         kerberosHelper.applyStackAdvisorUpdates(cluster, services, configurations, kerberosConfigurations,",
          "137:             propertiesToIgnore, propertiesToRemove, true);",
          "138:       }",
          "143:       if (updateConfigurationPolicy.applyIdentityChanges()) {",
          "144:         processAuthToLocalRules(cluster, calculatedConfigurations, kerberosDescriptor, schToProcess, kerberosConfigurations, getDefaultRealm(commandParameters), false);",
          "145:       }",
          "147:       processConfigurationChanges(dataDirectory, kerberosConfigurations, propertiesToRemove, kerberosDescriptor, updateConfigurationPolicy);",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UpgradeResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UpgradeResourceProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UpgradeResourceProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/UpgradeResourceProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: import org.apache.ambari.server.controller.AmbariManagementController;",
          "59: import org.apache.ambari.server.controller.AmbariServer;",
          "60: import org.apache.ambari.server.controller.KerberosHelper;",
          "61: import org.apache.ambari.server.controller.ResourceProviderFactory;",
          "62: import org.apache.ambari.server.controller.spi.Predicate;",
          "63: import org.apache.ambari.server.controller.spi.Request;",
          "64: import org.apache.ambari.server.controller.spi.RequestStatus;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: import org.apache.ambari.server.controller.KerberosHelperImpl;",
          "63: import org.apache.ambari.server.controller.UpdateConfigurationPolicy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120: import org.apache.commons.collections.CollectionUtils;",
          "121: import org.apache.commons.io.IOUtils;",
          "122: import org.apache.commons.lang3.StringUtils;",
          "123: import org.easymock.EasyMock;",
          "124: import org.easymock.EasyMockSupport;",
          "125: import org.junit.After;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125: import org.easymock.Capture;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:     expect(",
          "189:         configHelper.getDefaultProperties(EasyMock.anyObject(StackId.class),",
          "190:             EasyMock.anyString())).andReturn(",
          "193:     expect(",
          "194:         configHelper.getChangedConfigTypes(EasyMock.anyObject(Cluster.class), EasyMock.anyObject(ServiceConfigEntity.class),",
          "",
          "[Removed Lines]",
          "191:       new HashMap<>()).anyTimes();",
          "",
          "[Added Lines]",
          "194:         new HashMap<>()).anyTimes();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "329:     assertEquals(1, requestStatus.getAssociatedResources().size());",
          "330:     Resource r = requestStatus.getAssociatedResources().iterator().next();",
          "331:     String id = r.getPropertyValue(\"Upgrade/request_id\").toString();",
          "",
          "[Removed Lines]",
          "328:   private long getRequestId(RequestStatus requestStatus){",
          "",
          "[Added Lines]",
          "332:   private long getRequestId(RequestStatus requestStatus) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "507:     propertyIds.add(\"Upgrade\");",
          "509:     Predicate predicate = new PredicateBuilder()",
          "513:     Request request = PropertyHelper.getReadRequest(propertyIds);",
          "515:     ResourceProvider upgradeResourceProvider = createProvider(amc);",
          "",
          "[Removed Lines]",
          "510:       .property(UpgradeResourceProvider.UPGRADE_REQUEST_ID).equals(\"1\").and()",
          "511:       .property(UpgradeResourceProvider.UPGRADE_CLUSTER_NAME).equals(\"c1\")",
          "512:       .toPredicate();",
          "",
          "[Added Lines]",
          "514:         .property(UpgradeResourceProvider.UPGRADE_REQUEST_ID).equals(\"1\").and()",
          "515:         .property(UpgradeResourceProvider.UPGRADE_CLUSTER_NAME).equals(\"c1\")",
          "516:         .toPredicate();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "529:     propertyIds.add(\"UpgradeGroup\");",
          "531:     predicate = new PredicateBuilder()",
          "535:     request = PropertyHelper.getReadRequest(propertyIds);",
          "537:     ResourceProvider upgradeGroupResourceProvider = new UpgradeGroupResourceProvider(amc);",
          "",
          "[Removed Lines]",
          "532:       .property(UpgradeGroupResourceProvider.UPGRADE_REQUEST_ID).equals(\"1\").and()",
          "533:       .property(UpgradeGroupResourceProvider.UPGRADE_CLUSTER_NAME).equals(\"c1\")",
          "534:       .toPredicate();",
          "",
          "[Added Lines]",
          "536:         .property(UpgradeGroupResourceProvider.UPGRADE_REQUEST_ID).equals(\"1\").and()",
          "537:         .property(UpgradeGroupResourceProvider.UPGRADE_CLUSTER_NAME).equals(\"c1\")",
          "538:         .toPredicate();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "550:     propertyIds.add(\"UpgradeItem\");",
          "552:     predicate = new PredicateBuilder()",
          "557:     request = PropertyHelper.getReadRequest(propertyIds);",
          "559:     ResourceProvider upgradeItemResourceProvider = new UpgradeItemResourceProvider(amc);",
          "",
          "[Removed Lines]",
          "553:       .property(UpgradeItemResourceProvider.UPGRADE_GROUP_ID).equals(\"1\").and()",
          "554:       .property(UpgradeItemResourceProvider.UPGRADE_REQUEST_ID).equals(\"1\").and()",
          "555:       .property(UpgradeItemResourceProvider.UPGRADE_CLUSTER_NAME).equals(\"c1\")",
          "556:       .toPredicate();",
          "",
          "[Added Lines]",
          "557:         .property(UpgradeItemResourceProvider.UPGRADE_GROUP_ID).equals(\"1\").and()",
          "558:         .property(UpgradeItemResourceProvider.UPGRADE_REQUEST_ID).equals(\"1\").and()",
          "559:         .property(UpgradeItemResourceProvider.UPGRADE_CLUSTER_NAME).equals(\"c1\")",
          "560:         .toPredicate();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "569:     propertyIds.add(\"UpgradeItem\");",
          "571:     predicate = new PredicateBuilder()",
          "576:     request = PropertyHelper.getReadRequest(propertyIds);",
          "578:     upgradeItemResourceProvider = new UpgradeItemResourceProvider(amc);",
          "",
          "[Removed Lines]",
          "572:       .property(UpgradeItemResourceProvider.UPGRADE_GROUP_ID).equals(\"3\").and()",
          "573:       .property(UpgradeItemResourceProvider.UPGRADE_REQUEST_ID).equals(\"1\").and()",
          "574:       .property(UpgradeItemResourceProvider.UPGRADE_CLUSTER_NAME).equals(\"c1\")",
          "575:       .toPredicate();",
          "",
          "[Added Lines]",
          "576:         .property(UpgradeItemResourceProvider.UPGRADE_GROUP_ID).equals(\"3\").and()",
          "577:         .property(UpgradeItemResourceProvider.UPGRADE_REQUEST_ID).equals(\"1\").and()",
          "578:         .property(UpgradeItemResourceProvider.UPGRADE_CLUSTER_NAME).equals(\"c1\")",
          "579:         .toPredicate();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "622:     propertyIds.add(\"Upgrade\");",
          "624:     Predicate predicate = new PredicateBuilder()",
          "629:     request = PropertyHelper.getReadRequest(propertyIds);",
          "630:     Set<Resource> resources = upgradeResourceProvider.getResources(request, predicate);",
          "",
          "[Removed Lines]",
          "625:       .property(UpgradeResourceProvider.UPGRADE_REQUEST_ID).equals(\"1\").and()",
          "626:       .property(UpgradeResourceProvider.UPGRADE_CLUSTER_NAME).equals(\"c1\")",
          "627:       .toPredicate();",
          "",
          "[Added Lines]",
          "629:         .property(UpgradeResourceProvider.UPGRADE_REQUEST_ID).equals(\"1\").and()",
          "630:         .property(UpgradeResourceProvider.UPGRADE_CLUSTER_NAME).equals(\"c1\")",
          "631:         .toPredicate();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "851:     boolean isZKGroupFound = false;",
          "855:       if (group.getName().equalsIgnoreCase(\"hive\")) {",
          "856:         isHiveGroupFound = true;",
          "858:         isZKGroupFound = true;",
          "859:       }",
          "860:     }",
          "",
          "[Removed Lines]",
          "854:     for (UpgradeGroupEntity group: groups) {",
          "857:       } else if (group.getName().equalsIgnoreCase(\"zookeeper\")){",
          "",
          "[Added Lines]",
          "857:     for (UpgradeGroupEntity group : groups) {",
          "860:       } else if (group.getName().equalsIgnoreCase(\"zookeeper\")) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "883:     RequestStatus status = upgradeResourceProvider.createResources(request);",
          "884:     UpgradeEntity upgradeEntity = upgradeDao.findUpgradeByRequestId(getRequestId(status));",
          "887:       if (group.getName().equalsIgnoreCase(\"hive\")) {",
          "888:         isHiveGroupFound = true;",
          "890:         isZKGroupFound = true;",
          "891:       }",
          "892:     }",
          "",
          "[Removed Lines]",
          "886:     for (UpgradeGroupEntity group: upgradeEntity.getUpgradeGroups()) {",
          "889:       } else if (group.getName().equalsIgnoreCase(\"zookeeper\")){",
          "",
          "[Added Lines]",
          "889:     for (UpgradeGroupEntity group : upgradeEntity.getUpgradeGroups()) {",
          "892:       } else if (group.getName().equalsIgnoreCase(\"zookeeper\")) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1291:     List<StageEntity> stageEntities = stageDAO.findByRequestId(entity.getRequestId());",
          "1292:     Gson gson = new Gson();",
          "1293:     for (StageEntity se : stageEntities) {",
          "1295:       assertTrue(map.containsKey(\"upgrade_direction\"));",
          "1296:       assertEquals(\"upgrade\", map.get(\"upgrade_direction\"));",
          "1299:         assertEquals(\"rolling_upgrade\", map.get(\"upgrade_type\"));",
          "1300:       }",
          "1301:     }",
          "",
          "[Removed Lines]",
          "1294:       Map<String, String> map = gson.<Map<String, String>> fromJson(se.getCommandParamsStage(),Map.class);",
          "1298:       if(map.containsKey(\"upgrade_type\")){",
          "",
          "[Added Lines]",
          "1296:       Map<String, String> map = gson.<Map<String, String>>fromJson(se.getCommandParamsStage(), Map.class);",
          "1300:       if (map.containsKey(\"upgrade_type\")) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1541:     try {",
          "1542:       upgradeResourceProvider.createResources(request);",
          "1543:       Assert.fail(\"The request should have failed due to the missing Upgrade/host_order property\");",
          "1546:     }",
          "",
          "[Removed Lines]",
          "1544:     } catch( SystemException systemException ){",
          "",
          "[Added Lines]",
          "1546:     } catch (SystemException systemException) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1679:     requestProps.put(UpgradeResourceProvider.UPGRADE_REPO_VERSION_ID, String.valueOf(repoVersionEntity2200.getId()));",
          "1680:     requestProps.put(UpgradeResourceProvider.UPGRADE_PACK, \"upgrade_test_host_ordered\");",
          "1681:     requestProps.put(UpgradeResourceProvider.UPGRADE_TYPE, UpgradeType.HOST_ORDERED.toString());",
          "1683:     requestProps.put(UpgradeResourceProvider.UPGRADE_DIRECTION, Direction.UPGRADE.name());",
          "1684:     requestProps.put(UpgradeResourceProvider.UPGRADE_HOST_ORDERED_HOSTS, hostsOrder);",
          "",
          "[Removed Lines]",
          "1682:     requestProps.put(UpgradeResourceProvider.UPGRADE_SKIP_PREREQUISITE_CHECKS,Boolean.TRUE.toString());",
          "",
          "[Added Lines]",
          "1684:     requestProps.put(UpgradeResourceProvider.UPGRADE_SKIP_PREREQUISITE_CHECKS, Boolean.TRUE.toString());",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1726:     List<UpgradeHistoryEntity> histories = upgrade.getHistory();",
          "1727:     assertEquals(2, histories.size());",
          "1731:       assertEquals(repoVersionEntity2110, history.getFromReposistoryVersion());",
          "1732:       assertEquals(repoVersionEntity2200, history.getTargetRepositoryVersion());",
          "1733:     }",
          "",
          "[Removed Lines]",
          "1729:     for( UpgradeHistoryEntity history : histories){",
          "1730:       assertEquals( \"ZOOKEEPER\", history.getServiceName() );",
          "",
          "[Added Lines]",
          "1731:     for (UpgradeHistoryEntity history : histories) {",
          "1732:       assertEquals(\"ZOOKEEPER\", history.getServiceName());",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1830:       @Override",
          "1831:       public String apply(UpgradeHistoryEntity input) {",
          "1832:         return input.getServiceName() + \"/\" + input.getComponentName();",
          "1834:     };",
          "1836:     for (UpgradeEntity upgrade : upgrades) {",
          "",
          "[Removed Lines]",
          "1833:       };",
          "",
          "[Added Lines]",
          "1835:       }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1875:     Map<String, Object> requestProps = new HashMap<>();",
          "1876:     requestProps.put(UpgradeResourceProvider.UPGRADE_CLUSTER_NAME, \"c1\");",
          "1878:     requestProps.put(UpgradeResourceProvider.UPGRADE_PACK, \"upgrade_test\");",
          "1879:     requestProps.put(UpgradeResourceProvider.UPGRADE_SKIP_PREREQUISITE_CHECKS, \"true\");",
          "1880:     requestProps.put(UpgradeResourceProvider.UPGRADE_DIRECTION, Direction.UPGRADE.name());",
          "",
          "[Removed Lines]",
          "1877:     requestProps.put(UpgradeResourceProvider.UPGRADE_REPO_VERSION_ID,String.valueOf(repoVersionEntity2112.getId()));",
          "",
          "[Added Lines]",
          "1879:     requestProps.put(UpgradeResourceProvider.UPGRADE_REPO_VERSION_ID, String.valueOf(repoVersionEntity2112.getId()));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2017:   }",
          "2022:     JsonParser parser = new JsonParser();",
          "2023:     JsonArray msgArray = (JsonArray) parser.parse(msgStr);",
          "2024:     JsonObject msg = (JsonObject) msgArray.get(0);",
          "",
          "[Removed Lines]",
          "2021:   private String parseSingleMessage(String msgStr){",
          "",
          "[Added Lines]",
          "2021:   private String parseSingleMessage(String msgStr) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2110:       if (command.getRole().equals(Role.ZOOKEEPER_SERVER) && command.getRoleCommand().equals(RoleCommand.CUSTOM_COMMAND)) {",
          "2111:         Map<String, String> commandParams = wrapper.getExecutionCommand().getCommandParams();",
          "2112:         assertTrue(commandParams.containsKey(KeyNames.COMMAND_TIMEOUT));",
          "2114:         found = true;",
          "2115:       }",
          "2116:     }",
          "",
          "[Removed Lines]",
          "2113:         assertEquals(\"824\",commandParams.get(KeyNames.COMMAND_TIMEOUT));",
          "",
          "[Added Lines]",
          "2113:         assertEquals(\"824\", commandParams.get(KeyNames.COMMAND_TIMEOUT));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2179:   @Test",
          "2180:   public void testCreateRegenerateKeytabStages() throws Exception {",
          "2181:     Map<String, Object> requestProps = new HashMap<>();",
          "2182:     requestProps.put(UpgradeResourceProvider.UPGRADE_CLUSTER_NAME, \"c1\");",
          "2183:     requestProps.put(UpgradeResourceProvider.UPGRADE_REPO_VERSION_ID, String.valueOf(repoVersionEntity2200.getId()));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2181:     Capture<Map<String, String>> requestPropertyMapCapture = EasyMock.newCapture();",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2190:     RequestStageContainer requestStageContainer = createNiceMock(RequestStageContainer.class);",
          "2191:     expect(requestStageContainer.getStages()).andReturn(Lists.newArrayList()).once();",
          "2194:         EasyMock.anyObject(RequestStageContainer.class), eq(null))).andReturn(",
          "2197:     replayAll();",
          "",
          "[Removed Lines]",
          "2193:     expect(kerberosHelperMock.executeCustomOperations(eq(cluster), EasyMock.anyObject(),",
          "2195:             requestStageContainer).once();",
          "",
          "[Added Lines]",
          "2195:     expect(kerberosHelperMock.executeCustomOperations(eq(cluster), EasyMock.capture(requestPropertyMapCapture),",
          "2197:         requestStageContainer).once();",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2207:     }",
          "2209:     verifyAll();",
          "2210:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2213:     Map<String, String> requestPropertyMap = requestPropertyMapCapture.getValue();",
          "2214:     assertEquals(\"true\", requestPropertyMap.get(KerberosHelper.ALLOW_RETRY));",
          "2215:     assertEquals(\"missing\", requestPropertyMap.get(KerberosHelperImpl.SupportedCustomOperation.REGENERATE_KEYTABS.name().toLowerCase()));",
          "2216:     assertEquals(UpdateConfigurationPolicy.NEW_AND_IDENTITIES.name(), requestPropertyMap.get(KerberosHelper.DIRECTIVE_CONFIG_UPDATE_POLICY.toLowerCase()));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerActionTest.java||ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerActionTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerActionTest.java -> ambari-server/src/test/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerActionTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.easymock.EasyMock.anyBoolean;",
          "22: import static org.easymock.EasyMock.anyObject;",
          "24: import static org.easymock.EasyMock.expect;",
          "28: import java.io.File;",
          "29: import java.util.ArrayList;",
          "30: import java.util.Collection;",
          "31: import java.util.HashMap;",
          "32: import java.util.List;",
          "33: import java.util.Map;",
          "",
          "[Removed Lines]",
          "23: import static org.easymock.EasyMock.createNiceMock;",
          "25: import static org.easymock.EasyMock.replay;",
          "26: import static org.easymock.EasyMock.verify;",
          "",
          "[Added Lines]",
          "23: import static org.easymock.EasyMock.capture;",
          "24: import static org.easymock.EasyMock.eq;",
          "26: import static org.easymock.EasyMock.expectLastCall;",
          "27: import static org.easymock.EasyMock.newCapture;",
          "30: import java.io.IOException;",
          "33: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: import javax.persistence.EntityManager;",
          "40: import org.apache.ambari.server.agent.CommandReport;",
          "41: import org.apache.ambari.server.audit.AuditLogger;",
          "42: import org.apache.ambari.server.controller.KerberosHelper;",
          "43: import org.apache.ambari.server.state.Cluster;",
          "44: import org.apache.ambari.server.state.Clusters;",
          "45: import org.apache.ambari.server.state.Host;",
          "46: import org.apache.ambari.server.state.Service;",
          "47: import org.apache.ambari.server.state.ServiceComponentHost;",
          "48: import org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor;",
          "49: import org.apache.ambari.server.state.kerberos.KerberosDescriptor;",
          "50: import org.apache.ambari.server.state.kerberos.KerberosServiceDescriptor;",
          "52: import org.junit.Assert;",
          "53: import org.junit.Before;",
          "54: import org.junit.Test;",
          "56: import com.google.inject.AbstractModule;",
          "57: import com.google.inject.Guice;",
          "58: import com.google.inject.Injector;",
          "59: import com.google.inject.Provider;",
          "64:     @Override",
          "66:       return null;",
          "67:     }",
          "68:   }",
          "70:   private Injector injector;",
          "78:   @Before",
          "79:   public void setUp() throws Exception {",
          "80:     injector = Guice.createInjector(new AbstractModule() {",
          "81:       @Override",
          "82:       protected void configure() {",
          "88:         bind(EntityManager.class).toProvider(entityManagerProvider);",
          "89:       }",
          "90:     });",
          "93:   }",
          "101:   @Test",
          "102:   @SuppressWarnings(\"unchecked\")",
          "103:   public void testProcessServiceComponentHosts() throws Exception {",
          "112:     final String hdfsService = \"HDFS\";",
          "113:     final String zookeeperService = \"ZOOKEEPER\";",
          "",
          "[Removed Lines]",
          "39: import org.apache.ambari.server.AmbariException;",
          "51: import org.easymock.EasyMock;",
          "61: public class AbstractPrepareKerberosServerActionTest {",
          "62:   private class PrepareKerberosServerAction extends AbstractPrepareKerberosServerAction{",
          "65:     public CommandReport execute(ConcurrentMap<String, Object> requestSharedDataContext) throws AmbariException, InterruptedException {",
          "71:   private final PrepareKerberosServerAction prepareKerberosServerAction = new PrepareKerberosServerAction();",
          "73:   private final AuditLogger auditLogger = EasyMock.createNiceMock(AuditLogger.class);",
          "74:   private final Clusters clusters = EasyMock.createNiceMock(Clusters.class);",
          "75:   private final KerberosHelper kerberosHelper = EasyMock.createNiceMock(KerberosHelper.class);",
          "76:   private final KerberosIdentityDataFileWriterFactory kerberosIdentityDataFileWriterFactory = EasyMock.createNiceMock(KerberosIdentityDataFileWriterFactory.class);",
          "83:         bind(KerberosHelper.class).toInstance(kerberosHelper);",
          "84:         bind(KerberosIdentityDataFileWriterFactory.class).toInstance(kerberosIdentityDataFileWriterFactory);",
          "85:         bind(Clusters.class).toInstance(clusters);",
          "86:         bind(AuditLogger.class).toInstance(auditLogger);",
          "87:         Provider<EntityManager> entityManagerProvider =  EasyMock.createNiceMock(Provider.class);",
          "92:     injector.injectMembers(prepareKerberosServerAction);",
          "104:     final Cluster cluster =  EasyMock.createNiceMock(Cluster.class);",
          "105:     final KerberosIdentityDataFileWriter kerberosIdentityDataFileWriter = EasyMock.createNiceMock(KerberosIdentityDataFileWriter.class);",
          "106:     final KerberosDescriptor kerberosDescriptor = EasyMock.createNiceMock(KerberosDescriptor.class);",
          "107:     final ServiceComponentHost serviceComponentHostHDFS = EasyMock.createNiceMock(ServiceComponentHost.class);",
          "108:     final ServiceComponentHost serviceComponentHostZK = EasyMock.createNiceMock(ServiceComponentHost.class);",
          "109:     final KerberosServiceDescriptor serviceDescriptor = EasyMock.createNiceMock(KerberosServiceDescriptor.class);",
          "110:     final KerberosComponentDescriptor componentDescriptor = EasyMock.createNiceMock(KerberosComponentDescriptor.class);",
          "",
          "[Added Lines]",
          "42: import org.apache.ambari.server.actionmanager.ActionDBAccessor;",
          "43: import org.apache.ambari.server.actionmanager.ActionManager;",
          "44: import org.apache.ambari.server.actionmanager.HostRoleCommandFactory;",
          "45: import org.apache.ambari.server.actionmanager.RequestFactory;",
          "46: import org.apache.ambari.server.actionmanager.StageFactory;",
          "48: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "50: import org.apache.ambari.server.controller.AbstractRootServiceResponseFactory;",
          "51: import org.apache.ambari.server.controller.AmbariManagementController;",
          "53: import org.apache.ambari.server.controller.KerberosHelperImpl;",
          "54: import org.apache.ambari.server.controller.UpdateConfigurationPolicy;",
          "55: import org.apache.ambari.server.hooks.HookContextFactory;",
          "56: import org.apache.ambari.server.hooks.HookService;",
          "57: import org.apache.ambari.server.metadata.RoleCommandOrderProvider;",
          "58: import org.apache.ambari.server.orm.dao.HostRoleCommandDAO;",
          "59: import org.apache.ambari.server.scheduler.ExecutionScheduler;",
          "60: import org.apache.ambari.server.security.encryption.CredentialStoreService;",
          "61: import org.apache.ambari.server.stack.StackManagerFactory;",
          "62: import org.apache.ambari.server.stageplanner.RoleGraphFactory;",
          "65: import org.apache.ambari.server.state.ConfigFactory;",
          "66: import org.apache.ambari.server.state.ConfigHelper;",
          "69: import org.apache.ambari.server.state.ServiceComponentFactory;",
          "71: import org.apache.ambari.server.state.ServiceComponentHostFactory;",
          "72: import org.apache.ambari.server.state.configgroup.ConfigGroupFactory;",
          "75: import org.apache.ambari.server.state.kerberos.KerberosDescriptorFactory;",
          "77: import org.apache.ambari.server.state.scheduler.RequestExecutionFactory;",
          "78: import org.apache.ambari.server.state.stack.OsFamily;",
          "79: import org.apache.ambari.server.topology.PersistedState;",
          "80: import org.apache.ambari.server.topology.tasks.ConfigureClusterTaskFactory;",
          "81: import org.easymock.Capture;",
          "82: import org.easymock.CaptureType;",
          "83: import org.easymock.EasyMockSupport;",
          "87: import org.springframework.security.crypto.password.PasswordEncoder;",
          "94: public class AbstractPrepareKerberosServerActionTest extends EasyMockSupport {",
          "95:   private static final String KERBEROS_DESCRIPTOR_JSON = \"\" +",
          "96:       \"{\" +",
          "97:       \"  \\\"identities\\\": [\" +",
          "98:       \"    {\" +",
          "99:       \"      \\\"keytab\\\": {\" +",
          "100:       \"        \\\"file\\\": \\\"${keytab_dir}/spnego.service.keytab\\\",\" +",
          "101:       \"        \\\"group\\\": {\" +",
          "102:       \"          \\\"access\\\": \\\"r\\\",\" +",
          "103:       \"          \\\"name\\\": \\\"${cluster-env/user_group}\\\"\" +",
          "104:       \"        },\" +",
          "105:       \"        \\\"owner\\\": {\" +",
          "106:       \"          \\\"access\\\": \\\"r\\\",\" +",
          "107:       \"          \\\"name\\\": \\\"root\\\"\" +",
          "108:       \"        }\" +",
          "109:       \"      },\" +",
          "110:       \"      \\\"name\\\": \\\"spnego\\\",\" +",
          "111:       \"      \\\"principal\\\": {\" +",
          "112:       \"        \\\"configuration\\\": null,\" +",
          "113:       \"        \\\"local_username\\\": null,\" +",
          "114:       \"        \\\"type\\\": \\\"service\\\",\" +",
          "115:       \"        \\\"value\\\": \\\"HTTP/_HOST@${realm}\\\"\" +",
          "116:       \"      }\" +",
          "117:       \"    }\" +",
          "118:       \"  ],\" +",
          "119:       \"  \\\"services\\\": [\" +",
          "120:       \"    {\" +",
          "121:       \"      \\\"components\\\": [\" +",
          "122:       \"        {\" +",
          "123:       \"          \\\"identities\\\": [\" +",
          "124:       \"            {\" +",
          "125:       \"              \\\"name\\\": \\\"service_master_spnego_identity\\\",\" +",
          "126:       \"              \\\"reference\\\": \\\"/spnego\\\"\" +",
          "127:       \"            }\" +",
          "128:       \"          ],\" +",
          "129:       \"          \\\"name\\\": \\\"SERVICE_MASTER\\\"\" +",
          "130:       \"        }\" +",
          "131:       \"      ],\" +",
          "132:       \"      \\\"configurations\\\": [\" +",
          "133:       \"        {\" +",
          "134:       \"          \\\"service-site\\\": {\" +",
          "135:       \"            \\\"property1\\\": \\\"property1_updated_value\\\",\" +",
          "136:       \"            \\\"property2\\\": \\\"property2_updated_value\\\"\" +",
          "137:       \"          }\" +",
          "138:       \"        }\" +",
          "139:       \"      ],\" +",
          "140:       \"      \\\"identities\\\": [\" +",
          "141:       \"        {\" +",
          "142:       \"          \\\"name\\\": \\\"service_identity\\\",\" +",
          "143:       \"          \\\"keytab\\\": {\" +",
          "144:       \"            \\\"configuration\\\": \\\"service-site/keytab_file_path\\\",\" +",
          "145:       \"            \\\"file\\\": \\\"${keytab_dir}/service.service.keytab\\\",\" +",
          "146:       \"            \\\"group\\\": {\" +",
          "147:       \"              \\\"access\\\": \\\"r\\\",\" +",
          "148:       \"              \\\"name\\\": \\\"${cluster-env/user_group}\\\"\" +",
          "149:       \"            },\" +",
          "150:       \"            \\\"owner\\\": {\" +",
          "151:       \"              \\\"access\\\": \\\"r\\\",\" +",
          "152:       \"              \\\"name\\\": \\\"${service-env/service_user}\\\"\" +",
          "153:       \"            }\" +",
          "154:       \"          },\" +",
          "155:       \"          \\\"principal\\\": {\" +",
          "156:       \"            \\\"configuration\\\": \\\"service-site/principal_name\\\",\" +",
          "157:       \"            \\\"local_username\\\": \\\"${service-env/service_user}\\\",\" +",
          "158:       \"            \\\"type\\\": \\\"service\\\",\" +",
          "159:       \"            \\\"value\\\": \\\"${service-env/service_user}/_HOST@${realm}\\\"\" +",
          "160:       \"          }\" +",
          "161:       \"        }\" +",
          "162:       \"      ],\" +",
          "163:       \"      \\\"name\\\": \\\"SERVICE\\\"\" +",
          "164:       \"    }\" +",
          "165:       \"  ],\" +",
          "166:       \"  \\\"properties\\\": {\" +",
          "167:       \"    \\\"additional_realms\\\": \\\"\\\",\" +",
          "168:       \"    \\\"keytab_dir\\\": \\\"/etc/security/keytabs\\\",\" +",
          "169:       \"    \\\"principal_suffix\\\": \\\"-${cluster_name|toLower()}\\\",\" +",
          "170:       \"    \\\"realm\\\": \\\"${kerberos-env/realm}\\\"\" +",
          "171:       \"  }\" +",
          "172:       \"}\";",
          "174:   private class TestKerberosServerAction extends AbstractPrepareKerberosServerAction {",
          "176:     @Override",
          "177:     protected String getClusterName() {",
          "178:       return \"c1\";",
          "179:     }",
          "182:     public CommandReport execute(ConcurrentMap<String, Object> requestSharedDataContext) {",
          "188:   private final AbstractPrepareKerberosServerAction testKerberosServerAction = new TestKerberosServerAction();",
          "195:         bind(AmbariMetaInfo.class).toInstance(createNiceMock(AmbariMetaInfo.class));",
          "196:         bind(KerberosHelper.class).to(KerberosHelperImpl.class);",
          "197:         bind(KerberosIdentityDataFileWriterFactory.class).toInstance(createNiceMock(KerberosIdentityDataFileWriterFactory.class));",
          "198:         bind(KerberosConfigDataFileWriterFactory.class).toInstance(createNiceMock(KerberosConfigDataFileWriterFactory.class));",
          "199:         bind(Clusters.class).toInstance(createNiceMock(Clusters.class));",
          "200:         bind(AuditLogger.class).toInstance(createNiceMock(AuditLogger.class));",
          "201:         bind(ConfigHelper.class).toInstance(createNiceMock(ConfigHelper.class));",
          "202:         bind(HostRoleCommandDAO.class).toInstance(createNiceMock(HostRoleCommandDAO.class));",
          "203:         bind(ActionManager.class).toInstance(createNiceMock(ActionManager.class));",
          "204:         bind(OsFamily.class).toInstance(createNiceMock(OsFamily.class));",
          "205:         bind(ExecutionScheduler.class).toInstance(createNiceMock(ExecutionScheduler.class));",
          "206:         bind(AmbariManagementController.class).toInstance(createNiceMock(AmbariManagementController.class));",
          "207:         bind(ActionDBAccessor.class).toInstance(createNiceMock(ActionDBAccessor.class));",
          "208:         bind(StackManagerFactory.class).toInstance(createNiceMock(StackManagerFactory.class));",
          "209:         bind(ConfigFactory.class).toInstance(createNiceMock(ConfigFactory.class));",
          "210:         bind(ConfigGroupFactory.class).toInstance(createNiceMock(ConfigGroupFactory.class));",
          "211:         bind(CredentialStoreService.class).toInstance(createNiceMock(CredentialStoreService.class));",
          "212:         bind(RequestExecutionFactory.class).toInstance(createNiceMock(RequestExecutionFactory.class));",
          "213:         bind(RequestFactory.class).toInstance(createNiceMock(RequestFactory.class));",
          "214:         bind(RoleCommandOrderProvider.class).toInstance(createNiceMock(RoleCommandOrderProvider.class));",
          "215:         bind(RoleGraphFactory.class).toInstance(createNiceMock(RoleGraphFactory.class));",
          "216:         bind(AbstractRootServiceResponseFactory.class).toInstance(createNiceMock(AbstractRootServiceResponseFactory.class));",
          "217:         bind(ServiceComponentFactory.class).toInstance(createNiceMock(ServiceComponentFactory.class));",
          "218:         bind(ServiceComponentHostFactory.class).toInstance(createNiceMock(ServiceComponentHostFactory.class));",
          "219:         bind(StageFactory.class).toInstance(createNiceMock(StageFactory.class));",
          "220:         bind(HostRoleCommandFactory.class).toInstance(createNiceMock(HostRoleCommandFactory.class));",
          "221:         bind(HookContextFactory.class).toInstance(createNiceMock(HookContextFactory.class));",
          "222:         bind(HookService.class).toInstance(createNiceMock(HookService.class));",
          "223:         bind(PasswordEncoder.class).toInstance(createNiceMock(PasswordEncoder.class));",
          "224:         bind(PersistedState.class).toInstance(createNiceMock(PersistedState.class));",
          "225:         bind(ConfigureClusterTaskFactory.class).toInstance(createNiceMock(ConfigureClusterTaskFactory.class));",
          "226:         Provider<EntityManager> entityManagerProvider = createNiceMock(Provider.class);",
          "231:     injector.injectMembers(testKerberosServerAction);",
          "244:     final Cluster cluster = createNiceMock(Cluster.class);",
          "245:     final KerberosIdentityDataFileWriter kerberosIdentityDataFileWriter = createNiceMock(KerberosIdentityDataFileWriter.class);",
          "246:     final KerberosDescriptor kerberosDescriptor = createNiceMock(KerberosDescriptor.class);",
          "247:     final ServiceComponentHost serviceComponentHostHDFS = createNiceMock(ServiceComponentHost.class);",
          "248:     final ServiceComponentHost serviceComponentHostZK = createNiceMock(ServiceComponentHost.class);",
          "249:     final KerberosServiceDescriptor serviceDescriptor = createNiceMock(KerberosServiceDescriptor.class);",
          "250:     final KerberosComponentDescriptor componentDescriptor = createNiceMock(KerberosComponentDescriptor.class);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:     Collection<String> identityFilter = new ArrayList<>();",
          "119:     Map<String, Map<String, String>> kerberosConfigurations = new HashMap<>();",
          "120:     Map<String, Set<String>> propertiesToIgnore = new HashMap<>();",
          "122:     Map<String, Map<String, String>> configurations = new HashMap<>();",
          "124:     List<ServiceComponentHost> serviceComponentHosts = new ArrayList<ServiceComponentHost>() {{",
          "125:       add(serviceComponentHostHDFS);",
          "126:       add(serviceComponentHostZK);",
          "127:     }};",
          "129:       put(hdfsService, null);",
          "130:       put(zookeeperService, null);",
          "131:     }};",
          "136:     expect(cluster.getServices()).andReturn(new HashMap<>(clusterServices)).atLeastOnce();",
          "",
          "[Removed Lines]",
          "121:     Map<String, String> descriptorProperties = new HashMap<>();",
          "128:     Map<String, Service> clusterServices = new HashMap<String, Service>(){{",
          "133:     expect(kerberosDescriptor.getProperties()).andReturn(descriptorProperties).atLeastOnce();",
          "134:     expect(kerberosIdentityDataFileWriterFactory.createKerberosIdentityDataFileWriter((File)anyObject())).andReturn(kerberosIdentityDataFileWriter);",
          "",
          "[Added Lines]",
          "267:     Map<String, Service> clusterServices = new HashMap<String, Service>() {{",
          "272:     KerberosIdentityDataFileWriterFactory kerberosIdentityDataFileWriterFactory = injector.getInstance(KerberosIdentityDataFileWriterFactory.class);",
          "273:     expect(kerberosIdentityDataFileWriterFactory.createKerberosIdentityDataFileWriter(anyObject(File.class))).andReturn(kerberosIdentityDataFileWriter);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:     expect(serviceDescriptor.getComponent(hdfsComponent)).andReturn(componentDescriptor).once();",
          "151:     expect(componentDescriptor.getConfigurations(anyBoolean())).andReturn(null);",
          "161:         configurations, kerberosConfigurations,",
          "162:         false, propertiesToIgnore);",
          "167:     Assert.assertEquals(\"host1\", configurations.get(\"\").get(\"host\"));",
          "168:     Assert.assertEquals(\"host1\", configurations.get(\"\").get(\"hostname\"));",
          "169:   }",
          "171: }",
          "",
          "[Removed Lines]",
          "153:     replay(kerberosDescriptor, kerberosHelper, kerberosIdentityDataFileWriterFactory,",
          "154:       cluster, serviceComponentHostHDFS, serviceComponentHostZK, serviceDescriptor, componentDescriptor);",
          "156:     prepareKerberosServerAction.processServiceComponentHosts(cluster,",
          "157:       kerberosDescriptor,",
          "158:       serviceComponentHosts,",
          "159:       identityFilter,",
          "160:       \"\",",
          "164:     verify(kerberosHelper);",
          "",
          "[Added Lines]",
          "293:     replayAll();",
          "295:     injector.getInstance(AmbariMetaInfo.class).init();",
          "297:     testKerberosServerAction.processServiceComponentHosts(cluster,",
          "298:         kerberosDescriptor,",
          "299:         serviceComponentHosts,",
          "300:         identityFilter,",
          "301:         \"\",",
          "305:     verifyAll();",
          "312:   @Test",
          "313:   public void testProcessConfigurationChanges() throws Exception {",
          "315:     Map<String, String> serviceSiteProperties = new HashMap<>();",
          "316:     serviceSiteProperties.put(\"property1\", \"property1_value\");",
          "317:     serviceSiteProperties.put(\"principal_name\", \"principal_name_value\");",
          "318:     serviceSiteProperties.put(\"keytab_file_path\", \"keytab_file_path_value\");",
          "320:     Map<String, Map<String, String>> effectiveProperties = new HashMap<>();",
          "321:     effectiveProperties.put(\"service-site\", serviceSiteProperties);",
          "324:     Map<String, String> updatedServiceSiteProperties = new HashMap<>();",
          "325:     updatedServiceSiteProperties.put(\"property1\", \"property1_updated_value\");",
          "326:     updatedServiceSiteProperties.put(\"property2\", \"property2_updated_value\");",
          "327:     updatedServiceSiteProperties.put(\"principal_name\", \"principal_name_updated_value\");",
          "328:     updatedServiceSiteProperties.put(\"keytab_file_path\", \"keytab_file_path_updated_value\");",
          "330:     Map<String, Map<String, String>> kerberosConfigurations = new HashMap<>();",
          "331:     kerberosConfigurations.put(\"service-site\", updatedServiceSiteProperties);",
          "333:     KerberosDescriptor kerberosDescriptor = new KerberosDescriptorFactory().createInstance(KERBEROS_DESCRIPTOR_JSON);",
          "335:     ConfigHelper configHelper = injector.getInstance(ConfigHelper.class);",
          "336:     expect(configHelper.getEffectiveConfigProperties(eq(\"c1\"), eq(null)))",
          "337:         .andReturn(effectiveProperties).anyTimes();",
          "339:     KerberosConfigDataFileWriterFactory factory = injector.getInstance(KerberosConfigDataFileWriterFactory.class);",
          "341:     ConfigWriterData dataCaptureAll = setupConfigWriter(factory);",
          "342:     ConfigWriterData dataCaptureIdentitiesOnly = setupConfigWriter(factory);",
          "343:     ConfigWriterData dataCaptureNewAndIdentities = setupConfigWriter(factory);",
          "344:     ConfigWriterData dataCaptureNone = setupConfigWriter(factory);",
          "346:     replayAll();",
          "348:     injector.getInstance(AmbariMetaInfo.class).init();",
          "350:     Map<String, String> expectedProperties;",
          "353:     testKerberosServerAction.processConfigurationChanges(\"test_directory\",",
          "354:         kerberosConfigurations, Collections.emptyMap(), kerberosDescriptor, UpdateConfigurationPolicy.ALL);",
          "356:     expectedProperties = new HashMap<>();",
          "357:     expectedProperties.put(\"property1\", \"property1_updated_value\");",
          "358:     expectedProperties.put(\"property2\", \"property2_updated_value\");",
          "359:     expectedProperties.put(\"principal_name\", \"principal_name_updated_value\");",
          "360:     expectedProperties.put(\"keytab_file_path\", \"keytab_file_path_updated_value\");",
          "362:     verifyDataCapture(dataCaptureAll, Collections.singletonMap(\"service-site\", expectedProperties));",
          "365:     testKerberosServerAction.processConfigurationChanges(\"test_directory\",",
          "366:         kerberosConfigurations, Collections.emptyMap(), kerberosDescriptor, UpdateConfigurationPolicy.IDENTITIES_ONLY);",
          "368:     expectedProperties = new HashMap<>();",
          "369:     expectedProperties.put(\"principal_name\", \"principal_name_updated_value\");",
          "370:     expectedProperties.put(\"keytab_file_path\", \"keytab_file_path_updated_value\");",
          "372:     verifyDataCapture(dataCaptureIdentitiesOnly, Collections.singletonMap(\"service-site\", expectedProperties));",
          "375:     testKerberosServerAction.processConfigurationChanges(\"test_directory\",",
          "376:         kerberosConfigurations, Collections.emptyMap(), kerberosDescriptor, UpdateConfigurationPolicy.NEW_AND_IDENTITIES);",
          "378:     expectedProperties = new HashMap<>();",
          "379:     expectedProperties.put(\"property2\", \"property2_updated_value\");",
          "380:     expectedProperties.put(\"principal_name\", \"principal_name_updated_value\");",
          "381:     expectedProperties.put(\"keytab_file_path\", \"keytab_file_path_updated_value\");",
          "383:     verifyDataCapture(dataCaptureNewAndIdentities, Collections.singletonMap(\"service-site\", expectedProperties));",
          "386:     testKerberosServerAction.processConfigurationChanges(\"test_directory\",",
          "387:         kerberosConfigurations, Collections.emptyMap(), kerberosDescriptor, UpdateConfigurationPolicy.NONE);",
          "389:     verifyDataCapture(dataCaptureNone, Collections.emptyMap());",
          "391:     verifyAll();",
          "393:   }",
          "395:   private void verifyDataCapture(ConfigWriterData configWriterData, Map<String, Map<String, String>> expectedConfigurations) {",
          "397:     int expectedCaptures = 0;",
          "398:     Collection<Map<String, String>> expectedValuesCollection = expectedConfigurations.values();",
          "399:     for (Map<String, String> expectedValues : expectedValuesCollection) {",
          "400:       expectedCaptures += expectedValues.size();",
          "401:     }",
          "403:     Capture<String> captureConfigType = configWriterData.getCaptureConfigType();",
          "404:     if (expectedCaptures > 0) {",
          "405:       Assert.assertTrue(captureConfigType.hasCaptured());",
          "406:       List<String> valuesConfigType = captureConfigType.getValues();",
          "407:       Assert.assertEquals(expectedCaptures, valuesConfigType.size());",
          "408:     } else {",
          "409:       Assert.assertFalse(captureConfigType.hasCaptured());",
          "410:     }",
          "412:     Capture<String> capturePropertyName = configWriterData.getCapturePropertyName();",
          "413:     if (expectedCaptures > 0) {",
          "414:       Assert.assertTrue(capturePropertyName.hasCaptured());",
          "415:       List<String> valuesPropertyName = capturePropertyName.getValues();",
          "416:       Assert.assertEquals(expectedCaptures, valuesPropertyName.size());",
          "417:     } else {",
          "418:       Assert.assertFalse(capturePropertyName.hasCaptured());",
          "419:     }",
          "421:     Capture<String> capturePropertyValue = configWriterData.getCapturePropertyValue();",
          "422:     if (expectedCaptures > 0) {",
          "423:       Assert.assertTrue(capturePropertyValue.hasCaptured());",
          "424:       List<String> valuesPropertyValue = capturePropertyValue.getValues();",
          "425:       Assert.assertEquals(expectedCaptures, valuesPropertyValue.size());",
          "426:     } else {",
          "427:       Assert.assertFalse(capturePropertyValue.hasCaptured());",
          "428:     }",
          "430:     if (expectedCaptures > 0) {",
          "431:       int i = 0;",
          "432:       List<String> valuesConfigType = captureConfigType.getValues();",
          "433:       List<String> valuesPropertyName = capturePropertyName.getValues();",
          "434:       List<String> valuesPropertyValue = capturePropertyValue.getValues();",
          "436:       for (Map.Entry<String, Map<String, String>> entry : expectedConfigurations.entrySet()) {",
          "437:         String configType = entry.getKey();",
          "438:         Map<String, String> properties = entry.getValue();",
          "440:         for(Map.Entry<String, String> property:properties.entrySet()) {",
          "441:           Assert.assertEquals(configType, valuesConfigType.get(i));",
          "442:           Assert.assertEquals(property.getKey(), valuesPropertyName.get(i));",
          "443:           Assert.assertEquals(property.getValue(), valuesPropertyValue.get(i));",
          "444:           i++;",
          "445:         }",
          "446:       }",
          "447:     }",
          "449:   }",
          "451:   private ConfigWriterData setupConfigWriter(KerberosConfigDataFileWriterFactory factory) throws IOException {",
          "452:     Capture<String> captureConfigType = newCapture(CaptureType.ALL);",
          "453:     Capture<String> capturePropertyName = newCapture(CaptureType.ALL);",
          "454:     Capture<String> capturePropertyValue = newCapture(CaptureType.ALL);",
          "456:     KerberosConfigDataFileWriter mockWriter = createMock(KerberosConfigDataFileWriter.class);",
          "457:     mockWriter.addRecord(capture(captureConfigType), capture(capturePropertyName), capture(capturePropertyValue), eq(KerberosConfigDataFileWriter.OPERATION_TYPE_SET));",
          "458:     expectLastCall().anyTimes();",
          "459:     mockWriter.close();",
          "460:     expectLastCall().anyTimes();",
          "462:     expect(factory.createKerberosConfigDataFileWriter(anyObject(File.class))).andReturn(mockWriter).once();",
          "464:     return new ConfigWriterData(captureConfigType, capturePropertyName, capturePropertyValue);",
          "465:   }",
          "467:   private class ConfigWriterData {",
          "468:     private final Capture<String> captureConfigType;",
          "469:     private final Capture<String> capturePropertyName;",
          "470:     private final Capture<String> capturePropertyValue;",
          "472:     private ConfigWriterData(Capture<String> captureConfigType, Capture<String> capturePropertyName, Capture<String> capturePropertyValue) {",
          "473:       this.captureConfigType = captureConfigType;",
          "474:       this.capturePropertyName = capturePropertyName;",
          "475:       this.capturePropertyValue = capturePropertyValue;",
          "476:     }",
          "478:     Capture<String> getCaptureConfigType() {",
          "479:       return captureConfigType;",
          "480:     }",
          "482:     Capture<String> getCapturePropertyName() {",
          "483:       return capturePropertyName;",
          "484:     }",
          "486:     Capture<String> getCapturePropertyValue() {",
          "487:       return capturePropertyValue;",
          "488:     }",
          "489:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6110f8189adccf309afaba681a08133333dafea",
      "candidate_info": {
        "commit_hash": "f6110f8189adccf309afaba681a08133333dafea",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f6110f8189adccf309afaba681a08133333dafea",
        "files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js"
        ],
        "message": "AMBARI-25393 Not able to register new HDP version in Ambari-2.7.4 without GPL with Local Repository (asnaik) (#3098)",
        "before_after_code_files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js||ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js -> ambari-admin/src/main/resources/ui/admin-web/app/scripts/controllers/stackVersions/StackVersionsCreateCtrl.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:     });",
          "312:     var skip = $scope.skipValidation || $scope.useRedhatSatellite;",
          "314:       if (invalidUrls.length === 0) {",
          "315:         if ($scope.isPublicVersion) {",
          "316:           var data = {",
          "",
          "[Removed Lines]",
          "313:     return Stack.validateBaseUrls(skip, $scope.osList, $scope.upgradeStack).then(function (invalidUrls) {",
          "",
          "[Added Lines]",
          "314:     var osList = Object.assign([], $scope.osList).map(function(os) {",
          "315:       return Object.assign({}, os, {repositories: os.repositories.filter(function(repo) { return $scope.showRepo(repo); })});",
          "316:     });",
          "317:     return Stack.validateBaseUrls(skip, osList, $scope.upgradeStack).then(function (invalidUrls) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}