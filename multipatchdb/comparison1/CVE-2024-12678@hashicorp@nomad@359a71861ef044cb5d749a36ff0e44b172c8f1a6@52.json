{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e562d1484f5a2e0c239805cffe5c8809fdf444c3",
      "candidate_info": {
        "commit_hash": "e562d1484f5a2e0c239805cffe5c8809fdf444c3",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/e562d1484f5a2e0c239805cffe5c8809fdf444c3",
        "files": [
          ".changelog/24541.txt",
          "client/config/config.go",
          "command/agent/config_test.go",
          "website/content/docs/job-specification/template.mdx",
          "website/content/docs/upgrade/upgrade-specific.mdx"
        ],
        "message": "backport of commit f7a4ded2c030aea287c30fe39b16fa502e988cde (#24544)\n\nCo-authored-by: Piotr Kazmierczak <470696+pkazmierczak@users.noreply.github.com>",
        "before_after_code_files": [
          "client/config/config.go||client/config/config.go",
          "command/agent/config_test.go||command/agent/config_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/config/config.go||client/config/config.go": [
          "File: client/config/config.go -> client/config/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:  DefaultTemplateMaxStale = 87600 * time.Hour",
          "77: )",
          "",
          "[Removed Lines]",
          "76:  DefaultTemplateFunctionDenylist = []string{\"plugin\", \"writeToFile\"}",
          "",
          "[Added Lines]",
          "76:  DefaultTemplateFunctionDenylist = []string{\"executeTemplate\", \"plugin\", \"writeToFile\"}",
          "",
          "---------------"
        ],
        "command/agent/config_test.go||command/agent/config_test.go": [
          "File: command/agent/config_test.go -> command/agent/config_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1535:   agentConfig = defaultConfig.Merge(agentConfig)",
          "1537:   templateConfig := agentConfig.Client.TemplateConfig",
          "1539:  })",
          "1541:  t.Run(\"client config with basic template\", func(t *testing.T) {",
          "",
          "[Removed Lines]",
          "1538:   must.Len(t, 2, templateConfig.FunctionDenylist)",
          "",
          "[Added Lines]",
          "1538:   must.Len(t, 3, templateConfig.FunctionDenylist)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6cf4b85d9bdf70d94c7e9c8bcc310f9b2ebd02bd",
      "candidate_info": {
        "commit_hash": "6cf4b85d9bdf70d94c7e9c8bcc310f9b2ebd02bd",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/6cf4b85d9bdf70d94c7e9c8bcc310f9b2ebd02bd",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "(deps): bump github.com/fatih/color from 1.17.0 to 1.18.0 (#24553)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  github.com/docker/go-units v0.5.0",
          "33:  github.com/dustin/go-humanize v1.0.1",
          "34:  github.com/elazarl/go-bindata-assetfs v1.0.1",
          "36:  github.com/go-jose/go-jose/v3 v3.0.3",
          "37:  github.com/golang-jwt/jwt/v5 v5.2.1",
          "38:  github.com/golang/protobuf v1.5.4",
          "",
          "[Removed Lines]",
          "35:  github.com/fatih/color v1.17.0",
          "",
          "[Added Lines]",
          "35:  github.com/fatih/color v1.18.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "421: github.com/evanphx/json-patch v4.2.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=",
          "422: github.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=",
          "423: github.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=",
          "426: github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=",
          "427: github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=",
          "428: github.com/form3tech-oss/jwt-go v3.2.2+incompatible/go.mod h1:pbq4aXjuKjdthFRnoDwaVPLA+WlJuPGy+QneDUgJi2k=",
          "",
          "[Removed Lines]",
          "424: github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=",
          "425: github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=",
          "",
          "[Added Lines]",
          "424: github.com/fatih/color v1.18.0 h1:S8gINlzdQ840/4pfAwic/ZE0djQEH3wM94VfqLTZcOM=",
          "425: github.com/fatih/color v1.18.0/go.mod h1:4FelSpRwEGDpQ12mAdzqdOukCy4u8WUtOY6lkT/6HfU=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "988f6e7b10ff72f60c7a3e5b01169335cd75fcea",
      "candidate_info": {
        "commit_hash": "988f6e7b10ff72f60c7a3e5b01169335cd75fcea",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/988f6e7b10ff72f60c7a3e5b01169335cd75fcea",
        "files": [
          ".changelog/24409.txt",
          "client/vaultclient/vaultclient.go"
        ],
        "message": "Backport of vault: catch expired lease as fatal error into release/1.9.x (#24478)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "client/vaultclient/vaultclient.go||client/vaultclient/vaultclient.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/vaultclient/vaultclient.go||client/vaultclient/vaultclient.go": [
          "File: client/vaultclient/vaultclient.go -> client/vaultclient/vaultclient.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:  next := time.Now().Add(renewalDuration)",
          "436:  fatal := false",
          "445:   c.logger.Debug(\"renewal error details\", \"req.increment\", req.increment, \"lease_duration\", leaseDuration, \"renewal_duration\", renewalDuration)",
          "446:   c.logger.Error(\"error during renewal of lease or token failed due to a non-fatal error; retrying\",",
          "447:    \"error\", renewalErr, \"period\", next)",
          "",
          "[Removed Lines]",
          "437:  if renewalErr != nil &&",
          "438:   (strings.Contains(renewalErr.Error(), \"lease not found or lease is not renewable\") ||",
          "439:    strings.Contains(renewalErr.Error(), \"invalid lease ID\") ||",
          "440:    strings.Contains(renewalErr.Error(), \"lease is not renewable\") ||",
          "441:    strings.Contains(renewalErr.Error(), \"token not found\") ||",
          "442:    strings.Contains(renewalErr.Error(), \"permission denied\")) {",
          "443:   fatal = true",
          "444:  } else if renewalErr != nil {",
          "",
          "[Added Lines]",
          "438:  if renewalErr != nil {",
          "444:   errMsg := renewalErr.Error()",
          "445:   if strings.Contains(errMsg, \"no namespace\") ||",
          "446:    strings.Contains(errMsg, \"cannot renew a token across namespaces\") ||",
          "447:    strings.Contains(errMsg, \"invalid lease ID\") ||",
          "448:    strings.Contains(errMsg, \"lease expired\") ||",
          "449:    strings.Contains(errMsg, \"lease is not renewable\") ||",
          "450:    strings.Contains(errMsg, \"lease not found\") ||",
          "451:    strings.Contains(errMsg, \"permission denied\") ||",
          "452:    strings.Contains(errMsg, \"token not found\") {",
          "453:    fatal = true",
          "454:   }",
          "455:  } else {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65fb2d0a1d88ff27d72f5573102077e0a5e539bd",
      "candidate_info": {
        "commit_hash": "65fb2d0a1d88ff27d72f5573102077e0a5e539bd",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/65fb2d0a1d88ff27d72f5573102077e0a5e539bd",
        "files": [
          ".changelog/24865.txt",
          "command/agent/command.go",
          "command/agent/syslog.go",
          "command/agent/syslog_test.go"
        ],
        "message": "agent: Fix a bug where all syslog lines are notice when using JSON (#24872)\n\nbackport of commit 1ae9785f9b8625683432d8e47ba66d5759ccde5b\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "command/agent/command.go||command/agent/command.go",
          "command/agent/syslog.go||command/agent/syslog.go",
          "command/agent/syslog_test.go||command/agent/syslog_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/agent/command.go||command/agent/command.go": [
          "File: command/agent/command.go -> command/agent/command.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "583:    ui.Error(fmt.Sprintf(\"Syslog setup failed: %v\", err))",
          "584:    return nil, nil, nil",
          "585:   }",
          "587:  }",
          "",
          "[Removed Lines]",
          "586:   writers = append(writers, &SyslogWrapper{l, logFilter})",
          "",
          "[Added Lines]",
          "586:   writers = append(writers, newSyslogWriter(l, config.LogJson))",
          "",
          "---------------"
        ],
        "command/agent/syslog.go||command/agent/syslog.go": [
          "File: command/agent/syslog.go -> command/agent/syslog.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"bytes\"",
          "9:  gsyslog \"github.com/hashicorp/go-syslog\"",
          "11: )",
          "",
          "[Removed Lines]",
          "10:  \"github.com/hashicorp/logutils\"",
          "",
          "[Added Lines]",
          "8:  \"io\"",
          "9:  \"regexp\"",
          "10:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:  return priority",
          "33: }",
          "41: }",
          "51:  var level string",
          "",
          "[Removed Lines]",
          "38: type SyslogWrapper struct {",
          "39:  l    gsyslog.Syslogger",
          "40:  filt *logutils.LevelFilter",
          "44: func (s *SyslogWrapper) Write(p []byte) (int, error) {",
          "46:  if !s.filt.Check(p) {",
          "47:   return 0, nil",
          "48:  }",
          "",
          "[Added Lines]",
          "39: func newSyslogWriter(sysLogger gsyslog.Syslogger, json bool) io.Writer {",
          "40:  if json {",
          "41:   return &syslogJSONWrapper{logger: sysLogger}",
          "42:  } else {",
          "43:   return &syslogWrapper{l: sysLogger}",
          "44:  }",
          "45: }",
          "50: type syslogWrapper struct {",
          "51:  l gsyslog.Syslogger",
          "58: func (s *syslogWrapper) Write(p []byte) (int, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:  err := s.l.WriteLevel(getSysLogPriority(level), afterLevel)",
          "64:  return len(p), err",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: var (",
          "81:  jsonLogLineLevelRegex = regexp.MustCompile(`\"@level\":\"\\w+\",`)",
          "82: )",
          "86: type syslogJSONWrapper struct {",
          "87:  logger gsyslog.Syslogger",
          "88: }",
          "96: func (s *syslogJSONWrapper) Write(logBytes []byte) (int, error) {",
          "100:  indexes := jsonLogLineLevelRegex.FindAllIndex(logBytes, 1)",
          "105:  if len(indexes) != 1 || len(indexes[0]) != 2 {",
          "106:   return len(logBytes), s.logger.WriteLevel(gsyslog.LOG_NOTICE, logBytes)",
          "107:  }",
          "111:  level := strings.ToTitle(string(logBytes[indexes[0][0]+10 : indexes[0][1]-2]))",
          "114:  return len(logBytes), s.logger.WriteLevel(getSysLogPriority(level), logBytes)",
          "115: }",
          "",
          "---------------"
        ],
        "command/agent/syslog_test.go||command/agent/syslog_test.go": [
          "File: command/agent/syslog_test.go -> command/agent/syslog_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  }",
          "65: }",
          "68:  ci.Parallel(t)",
          "69:  if runtime.GOOS == \"windows\" {",
          "70:   t.Skip(\"Syslog not supported on Windows\")",
          "71:  }",
          "83:  }",
          "89: }",
          "",
          "[Removed Lines]",
          "67: func TestSyslogFilter(t *testing.T) {",
          "73:  l, err := gsyslog.NewLogger(gsyslog.LOG_NOTICE, \"LOCAL0\", \"nomad\")",
          "74:  must.NoError(t, err)",
          "76:  filt := LevelFilter()",
          "77:  filt.MinLevel = \"INFO\"",
          "79:  s := &SyslogWrapper{l, filt}",
          "80:  n, err := s.Write([]byte(\"[INFO] test\"))",
          "81:  if err != nil {",
          "82:   t.Fatalf(\"err: %s\", err)",
          "84:  must.NonZero(t, n)",
          "86:  n, err = s.Write([]byte(\"[DEBUG] test\"))",
          "87:  must.NoError(t, err)",
          "88:  must.Zero(t, n)",
          "",
          "[Added Lines]",
          "67: func Test_newSyslogWriter(t *testing.T) {",
          "75:  expectedSyslogWriter := newSyslogWriter(nil, false)",
          "76:  _, ok := expectedSyslogWriter.(*syslogWrapper)",
          "77:  must.True(t, ok)",
          "80:  expectedJSONSyslogWriter := newSyslogWriter(nil, true)",
          "81:  _, ok = expectedJSONSyslogWriter.(*syslogJSONWrapper)",
          "82:  must.True(t, ok)",
          "83: }",
          "85: func Test_syslogWrapper(t *testing.T) {",
          "86:  ci.Parallel(t)",
          "88:  if runtime.GOOS == \"windows\" {",
          "89:   t.Skip(\"Syslog not supported on Windows\")",
          "92:  testCases := []struct {",
          "93:   name                   string",
          "94:   inputLogLine           string",
          "95:   expectedWrittenLogLine string",
          "96:   expectedBytesWritten   int",
          "97:   expectedPriority       gsyslog.Priority",
          "98:  }{",
          "99:   {",
          "100:    name:                   \"trace\",",
          "101:    inputLogLine:           `2025-01-14T09:29:56.747Z [TRACE] agent: i am a trace message`,",
          "102:    expectedWrittenLogLine: `agent: i am a trace message`,",
          "103:    expectedBytesWritten:   60,",
          "104:    expectedPriority:       gsyslog.LOG_DEBUG,",
          "105:   },",
          "106:   {",
          "107:    name:                   \"debug\",",
          "108:    inputLogLine:           `2025-01-14T09:29:56.747Z [DEBUG] agent: i am a debug message`,",
          "109:    expectedWrittenLogLine: `agent: i am a debug message`,",
          "110:    expectedBytesWritten:   60,",
          "111:    expectedPriority:       gsyslog.LOG_INFO,",
          "112:   },",
          "113:   {",
          "114:    name:                   \"info\",",
          "115:    inputLogLine:           `2025-01-14T09:29:56.747Z [INFO] agent: i am an info message`,",
          "116:    expectedWrittenLogLine: `agent: i am an info message`,",
          "117:    expectedBytesWritten:   59,",
          "118:    expectedPriority:       gsyslog.LOG_NOTICE,",
          "119:   },",
          "120:   {",
          "121:    name:                   \"warn\",",
          "122:    inputLogLine:           `2025-01-14T09:29:56.747Z [WARN] agent: i am a warn message`,",
          "123:    expectedWrittenLogLine: `agent: i am a warn message`,",
          "124:    expectedBytesWritten:   58,",
          "125:    expectedPriority:       gsyslog.LOG_WARNING,",
          "126:   },",
          "127:   {",
          "128:    name:                   \"error\",",
          "129:    inputLogLine:           `2025-01-14T09:29:56.747Z [ERROR] agent: i am an error message`,",
          "130:    expectedWrittenLogLine: `agent: i am an error message`,",
          "131:    expectedBytesWritten:   61,",
          "132:    expectedPriority:       gsyslog.LOG_ERR,",
          "133:   },",
          "134:   {",
          "135:    name:                   \"no level\",",
          "136:    inputLogLine:           `2025-01-14T09:29:56.747Z agent: i am a message without a level`,",
          "137:    expectedWrittenLogLine: `2025-01-14T09:29:56.747Z agent: i am a message without a level`,",
          "138:    expectedBytesWritten:   62,",
          "139:    expectedPriority:       gsyslog.LOG_NOTICE,",
          "140:   },",
          "141:  }",
          "145:  testSyslogBackend := testSysLogger{}",
          "146:  syslogWriter := newSyslogWriter(&testSyslogBackend, false)",
          "148:  for _, tc := range testCases {",
          "149:   t.Run(tc.name, func(t *testing.T) {",
          "150:    bytesWritten, err := syslogWriter.Write([]byte(tc.inputLogLine))",
          "151:    must.NoError(t, err)",
          "152:    must.Eq(t, tc.expectedBytesWritten, bytesWritten)",
          "153:    must.Eq(t, tc.expectedWrittenLogLine, testSyslogBackend.msg)",
          "154:    must.Eq(t, tc.expectedPriority, testSyslogBackend.pri)",
          "155:   })",
          "156:  }",
          "159: func Test_syslogJSONWrapper(t *testing.T) {",
          "160:  ci.Parallel(t)",
          "162:  if runtime.GOOS == \"windows\" {",
          "163:   t.Skip(\"Syslog not supported on Windows\")",
          "164:  }",
          "166:  testCases := []struct {",
          "167:   name                 string",
          "168:   inputLogLine         string",
          "169:   expectedBytesWritten int",
          "170:   expectedPriority     gsyslog.Priority",
          "171:  }{",
          "172:   {",
          "173:    name:                 \"trace\",",
          "174:    inputLogLine:         `{\"@level\":\"trace\",\"@message\":\"i am a trace message\",\"@module\":\"agent\",\"@timestamp\":\"2025-01-14T08:54:26.245072Z\"}`,",
          "175:    expectedBytesWritten: 113,",
          "176:    expectedPriority:     gsyslog.LOG_DEBUG,",
          "177:   },",
          "178:   {",
          "179:    name:                 \"debug\",",
          "180:    inputLogLine:         `{\"@level\":\"debug\",\"@message\":\"i am a debug message\",\"@module\":\"agent\",\"@timestamp\":\"2025-01-14T08:54:26.245072Z\"}`,",
          "181:    expectedBytesWritten: 113,",
          "182:    expectedPriority:     gsyslog.LOG_INFO,",
          "183:   },",
          "184:   {",
          "185:    name:                 \"info\",",
          "186:    inputLogLine:         `{\"@level\":\"info\",\"@message\":\"i am an info message\",\"@module\":\"agent\",\"@timestamp\":\"2025-01-14T08:54:26.245072Z\"}`,",
          "187:    expectedBytesWritten: 112,",
          "188:    expectedPriority:     gsyslog.LOG_NOTICE,",
          "189:   },",
          "190:   {",
          "191:    name:                 \"warn\",",
          "192:    inputLogLine:         `{\"@level\":\"warn\",\"@message\":\"i am a warn message\",\"@module\":\"agent\",\"@timestamp\":\"2025-01-14T08:54:26.245072Z\"}`,",
          "193:    expectedBytesWritten: 111,",
          "194:    expectedPriority:     gsyslog.LOG_WARNING,",
          "195:   },",
          "196:   {",
          "197:    name:                 \"error\",",
          "198:    inputLogLine:         `{\"@level\":\"error\",\"@message\":\"i am an error message\",\"@module\":\"agent\",\"@timestamp\":\"2025-01-14T08:54:26.245072Z\"}`,",
          "199:    expectedBytesWritten: 114,",
          "200:    expectedPriority:     gsyslog.LOG_ERR,",
          "201:   },",
          "202:   {",
          "203:    name:                 \"no level\",",
          "204:    inputLogLine:         `{\"@message\":\"i am a message without a level\",\"@module\":\"agent\",\"@timestamp\":\"2025-01-14T08:54:26.245072Z\"}`,",
          "205:    expectedBytesWritten: 106,",
          "206:    expectedPriority:     gsyslog.LOG_NOTICE,",
          "207:   },",
          "208:  }",
          "212:  testSyslogBackend := testSysLogger{}",
          "213:  syslogWriter := newSyslogWriter(&testSyslogBackend, true)",
          "215:  for _, tc := range testCases {",
          "216:   t.Run(tc.name, func(t *testing.T) {",
          "217:    bytesWritten, err := syslogWriter.Write([]byte(tc.inputLogLine))",
          "218:    must.NoError(t, err)",
          "219:    must.Eq(t, tc.expectedBytesWritten, bytesWritten)",
          "220:    must.Eq(t, tc.inputLogLine, testSyslogBackend.msg)",
          "221:    must.Eq(t, tc.expectedPriority, testSyslogBackend.pri)",
          "222:   })",
          "223:  }",
          "224: }",
          "228: type testSysLogger struct {",
          "229:  msg string",
          "230:  pri gsyslog.Priority",
          "231: }",
          "233: func (t *testSysLogger) WriteLevel(pri gsyslog.Priority, log []byte) error {",
          "234:  _, err := t.Write(log)",
          "235:  t.pri = pri",
          "236:  return err",
          "237: }",
          "239: func (t *testSysLogger) Write(log []byte) (int, error) {",
          "240:  t.msg = string(log)",
          "241:  return len(log), nil",
          "242: }",
          "244: func (t *testSysLogger) Close() error { return nil }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6facdff41b8dfbfd682dea64a50575c7d9eff40",
      "candidate_info": {
        "commit_hash": "e6facdff41b8dfbfd682dea64a50575c7d9eff40",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/e6facdff41b8dfbfd682dea64a50575c7d9eff40",
        "files": [
          ".changelog/24241.txt",
          "nomad/auth/auth.go",
          "nomad/heartbeat.go",
          "nomad/node_endpoint_test.go",
          "testutil/wait.go"
        ],
        "message": "Backport of heartbeat: use leader's ACL token when failing heartbeat into release/1.9.x (#24248)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "nomad/auth/auth.go||nomad/auth/auth.go",
          "nomad/heartbeat.go||nomad/heartbeat.go",
          "nomad/node_endpoint_test.go||nomad/node_endpoint_test.go",
          "testutil/wait.go||testutil/wait.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "nomad/auth/auth.go||nomad/auth/auth.go": [
          "File: nomad/auth/auth.go -> nomad/auth/auth.go"
        ],
        "nomad/heartbeat.go||nomad/heartbeat.go": [
          "File: nomad/heartbeat.go -> nomad/heartbeat.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:   Status:    structs.NodeStatusDown,",
          "164:   NodeEvent: structs.NewNodeEvent().SetSubsystem(structs.NodeEventSubsystemCluster).SetMessage(NodeHeartbeatEventMissed),",
          "165:   WriteRequest: structs.WriteRequest{",
          "167:   },",
          "168:  }",
          "",
          "[Removed Lines]",
          "166:    Region: h.srv.config.Region,",
          "",
          "[Added Lines]",
          "166:    Region:    h.srv.config.Region,",
          "167:    AuthToken: h.srv.getLeaderAcl(),",
          "",
          "---------------"
        ],
        "nomad/node_endpoint_test.go||nomad/node_endpoint_test.go": [
          "File: nomad/node_endpoint_test.go -> nomad/node_endpoint_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "954:    heartbeatTTL := time.Duration(500*testutil.TestMultiplier()) * time.Millisecond",
          "956:     c.MinHeartbeatTTL = heartbeatTTL",
          "957:     c.HeartbeatGrace = 2 * heartbeatTTL",
          "958:    })",
          "",
          "[Removed Lines]",
          "955:    s, cleanupS := TestServer(t, func(c *Config) {",
          "",
          "[Added Lines]",
          "955:    s, rootToken, cleanupS := TestACLServer(t, func(c *Config) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1001:    go heartbeat(heartbeatCtx)",
          "1007:    job := version.jobSpec(time.Hour)",
          "",
          "[Removed Lines]",
          "1004:    testutil.WaitForClientStatus(t, s.RPC, node.ID, \"global\", structs.NodeStatusReady)",
          "",
          "[Added Lines]",
          "1004:    testutil.WaitForClientStatusWithToken(t, s.RPC, node.ID, \"global\",",
          "1005:     structs.NodeStatusReady, rootToken.SecretID)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1018:     WriteRequest: structs.WriteRequest{",
          "1019:      Region:    \"global\",",
          "1020:      Namespace: job.Namespace,",
          "1021:     },",
          "1022:    }",
          "1023:    var jobResp structs.JobRegisterResponse",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1022:      AuthToken: rootToken.SecretID,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1025:    must.NoError(t, err)",
          "1029:     structs.AllocClientStatusPending: 1,",
          "1033:    allocsReq := &structs.NodeSpecificRequest{",
          "1034:     NodeID: node.ID,",
          "1035:     QueryOptions: structs.QueryOptions{",
          "1037:     },",
          "1038:    }",
          "1039:    var allocsResp structs.NodeAllocsResponse",
          "",
          "[Removed Lines]",
          "1028:    testutil.WaitForJobAllocStatus(t, s.RPC, job, map[string]int{",
          "1030:    })",
          "1036:      Region: \"global\",",
          "",
          "[Added Lines]",
          "1030:    testutil.WaitForJobAllocStatusWithToken(t, s.RPC, job, map[string]int{",
          "1032:    }, rootToken.SecretID)",
          "1038:      Region:    \"global\",",
          "1039:      AuthToken: rootToken.SecretID,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1058:    must.NoError(t, err)",
          "1062:     structs.AllocClientStatusRunning: 1,",
          "1067:    cancelHeartbeat()",
          "1070:     structs.AllocClientStatusUnknown: 1,",
          "1074:    heartbeatCtx, cancelHeartbeat = context.WithCancel(context.Background())",
          "",
          "[Removed Lines]",
          "1061:    testutil.WaitForJobAllocStatus(t, s.RPC, job, map[string]int{",
          "1063:    })",
          "1068:    testutil.WaitForClientStatus(t, s.RPC, node.ID, \"global\", structs.NodeStatusDisconnected)",
          "1069:    testutil.WaitForJobAllocStatus(t, s.RPC, job, map[string]int{",
          "1071:    })",
          "",
          "[Added Lines]",
          "1064:    testutil.WaitForJobAllocStatusWithToken(t, s.RPC, job, map[string]int{",
          "1066:    }, rootToken.SecretID)",
          "1071:    testutil.WaitForClientStatusWithToken(t, s.RPC, node.ID, \"global\",",
          "1072:     structs.NodeStatusDisconnected, rootToken.SecretID)",
          "1073:    testutil.WaitForJobAllocStatusWithToken(t, s.RPC, job, map[string]int{",
          "1075:    }, rootToken.SecretID)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1083:    time.Sleep(3 * heartbeatTTL)",
          "",
          "[Removed Lines]",
          "1084:    testutil.WaitForClientStatus(t, s.RPC, node.ID, \"global\", structs.NodeStatusInit)",
          "",
          "[Added Lines]",
          "1088:    testutil.WaitForClientStatusWithToken(t, s.RPC, node.ID, \"global\",",
          "1089:     structs.NodeStatusInit, rootToken.SecretID)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1089:    allocsReq = &structs.NodeSpecificRequest{",
          "1090:     NodeID: node.ID,",
          "1091:     QueryOptions: structs.QueryOptions{",
          "1093:     },",
          "1094:    }",
          "1095:    err = msgpackrpc.CallWithCodec(codec, \"Node.GetAllocs\", allocsReq, &allocsResp)",
          "",
          "[Removed Lines]",
          "1092:      Region: \"global\",",
          "",
          "[Added Lines]",
          "1097:      Region:    \"global\",",
          "1098:      AuthToken: rootToken.SecretID,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1109:     structs.AllocClientStatusRunning: 1,",
          "1111:    testutil.WaitForResult(func() (bool, error) {",
          "1112:     state := s.fsm.State()",
          "1113:     ws := memdb.NewWatchSet()",
          "",
          "[Removed Lines]",
          "1107:    testutil.WaitForClientStatus(t, s.RPC, node.ID, \"global\", structs.NodeStatusReady)",
          "1108:    testutil.WaitForJobAllocStatus(t, s.RPC, job, map[string]int{",
          "1110:    })",
          "",
          "[Added Lines]",
          "1113:    testutil.WaitForClientStatusWithToken(t, s.RPC, node.ID, \"global\",",
          "1114:     structs.NodeStatusReady, rootToken.SecretID)",
          "1115:    testutil.WaitForJobAllocStatusWithToken(t, s.RPC, job, map[string]int{",
          "1117:    }, rootToken.SecretID)",
          "",
          "---------------"
        ],
        "testutil/wait.go||testutil/wait.go": [
          "File: testutil/wait.go -> testutil/wait.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:  WaitForClientStatus(t, rpc, nodeID, region, structs.NodeStatusReady)",
          "194: }",
          "198:  t.Helper()",
          "200:  if region == \"\" {",
          "",
          "[Removed Lines]",
          "197: func WaitForClientStatus(t testing.TB, rpc rpcFn, nodeID string, region string, status string) {",
          "",
          "[Added Lines]",
          "197: func WaitForClientStatus(t testing.TB, rpc rpcFn, nodeID, region, status string) {",
          "198:  t.Helper()",
          "199:  WaitForClientStatusWithToken(t, rpc, nodeID, region, status, \"\")",
          "200: }",
          "204: func WaitForClientStatusWithToken(t testing.TB, rpc rpcFn, nodeID, region, status, token string) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:  }",
          "203:  WaitForResult(func() (bool, error) {",
          "204:   req := structs.NodeSpecificRequest{",
          "207:   }",
          "208:   var out structs.SingleNodeResponse",
          "",
          "[Removed Lines]",
          "205:    NodeID:       nodeID,",
          "206:    QueryOptions: structs.QueryOptions{Region: region},",
          "",
          "[Added Lines]",
          "212:    NodeID: nodeID,",
          "213:    QueryOptions: structs.QueryOptions{",
          "214:     Region:    region,",
          "215:     AuthToken: token,",
          "216:    },",
          "",
          "---------------"
        ]
      }
    }
  ]
}