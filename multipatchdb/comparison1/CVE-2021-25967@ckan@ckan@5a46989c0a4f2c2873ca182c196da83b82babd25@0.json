{
  "cve_id": "CVE-2021-25967",
  "cve_desc": "In CKAN, versions 2.9.0 to 2.9.3 are affected by a stored XSS vulnerability via SVG file upload of users\u2019 profile picture. This allows low privileged application users to store malicious scripts in their profile picture. These scripts are executed in a victim\u2019s browser when they open the malicious profile picture",
  "repo": "ckan/ckan",
  "patch_hash": "5a46989c0a4f2c2873ca182c196da83b82babd25",
  "patch_info": {
    "commit_hash": "5a46989c0a4f2c2873ca182c196da83b82babd25",
    "repo": "ckan/ckan",
    "commit_url": "https://github.com/ckan/ckan/commit/5a46989c0a4f2c2873ca182c196da83b82babd25",
    "files": [
      "ckan/lib/uploader.py",
      "ckan/logic/action/create.py",
      "ckan/tests/logic/action/test_create.py",
      "dev-requirements.txt"
    ],
    "message": "Allow strict types for user/group uploads",
    "before_after_code_files": [
      "ckan/lib/uploader.py||ckan/lib/uploader.py",
      "ckan/logic/action/create.py||ckan/logic/action/create.py",
      "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py"
    ]
  },
  "patch_diff": {
    "ckan/lib/uploader.py||ckan/lib/uploader.py": [
      "File: ckan/lib/uploader.py -> ckan/lib/uploader.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: import ckan.lib.munge as munge",
      "14: import ckan.logic as logic",
      "15: import ckan.plugins as plugins",
      "18: ALLOWED_UPLOAD_TYPES = (cgi.FieldStorage, FlaskFileStorage)",
      "19: MB = 1 << 20",
      "",
      "[Removed Lines]",
      "16: from ckan.common import config",
      "",
      "[Added Lines]",
      "16: from ckan.common import config, aslist",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "192:             except OSError:",
      "193:                 pass",
      "196: class ResourceUpload(object):",
      "197:     def __init__(self, resource):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "195:     def verify_type(self):",
      "196:         if not self.filename:",
      "197:             return",
      "199:         actual = magic.from_buffer(self.upload_file.read(1024), mime=True)",
      "200:         self.upload_file.seek(0, os.SEEK_SET)",
      "202:         err = {self.file_field: [f\"Unsupported upload type: {actual}\"]}",
      "204:         mimetypes = aslist(",
      "205:             config.get(f\"ckan.upload.{self.object_type}.mimetypes\"))",
      "206:         if mimetypes and actual not in mimetypes:",
      "207:             raise logic.ValidationError(err)",
      "209:         type_ = actual.split(\"/\")[0]",
      "210:         types = aslist(",
      "211:             config.get(f\"ckan.upload.{self.object_type}.types\"))",
      "212:         if types and type_ not in types:",
      "213:             raise logic.ValidationError(err)",
      "",
      "---------------"
    ],
    "ckan/logic/action/create.py||ckan/logic/action/create.py": [
      "File: ckan/logic/action/create.py -> ckan/logic/action/create.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "762:     }",
      "763:     logic.get_action('activity_create')(activity_create_context, activity_dict)",
      "765:     upload.upload(uploader.get_max_image_size())",
      "767:     if not context.get('defer_commit'):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "765:     if hasattr(upload, \"verify_type\"):",
      "766:         upload.verify_type()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1012:     }",
      "1013:     logic.get_action('activity_create')(activity_create_context, activity_dict)",
      "1015:     upload.upload(uploader.get_max_image_size())",
      "1017:     if not context.get('defer_commit'):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1018:     if hasattr(upload, \"verify_type\"):",
      "1019:         upload.verify_type()",
      "",
      "---------------"
    ],
    "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py": [
      "File: ckan/tests/logic/action/test_create.py -> ckan/tests/logic/action/test_create.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1667: @pytest.mark.usefixtures(\"clean_db\")",
      "1668: class TestUserImageUrl(object):",
      "1671:         params = {",
      "1672:             \"name\": \"test_user\",",
      "",
      "[Removed Lines]",
      "1669:     def test_upload_picture(self):",
      "",
      "[Added Lines]",
      "1669:     def test_external_picture(self):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1682:             user_dict[\"image_display_url\"] == \"https://example.com/mypic.png\"",
      "1683:         )",
      "1686: class TestVocabularyCreate(object):",
      "1687:     @pytest.mark.usefixtures(\"clean_db\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1685:     def test_upload_non_picture_works_without_extra_config(",
      "1686:             self, create_with_upload, faker):",
      "1687:         params = {",
      "1688:             \"name\": faker.user_name(),",
      "1689:             \"email\": faker.email(),",
      "1690:             \"password\": \"12345678\",",
      "1691:             \"action\": \"user_create\",",
      "1692:             \"upload_field_name\": \"image_upload\",",
      "1693:         }",
      "1694:         assert create_with_upload(\"hello world\", \"file.txt\", **params)",
      "1696:     @pytest.mark.ckan_config(\"ckan.upload.user.types\", \"image\")",
      "1697:     def test_upload_non_picture(self, create_with_upload, faker):",
      "1698:         params = {",
      "1699:             \"name\": faker.user_name(),",
      "1700:             \"email\": faker.email(),",
      "1701:             \"password\": \"12345678\",",
      "1702:             \"action\": \"user_create\",",
      "1703:             \"upload_field_name\": \"image_upload\",",
      "1704:         }",
      "1705:         with pytest.raises(",
      "1706:                 logic.ValidationError, match=\"Unsupported upload type\"):",
      "1707:             create_with_upload(\"hello world\", \"file.txt\", **params)",
      "1709:     @pytest.mark.ckan_config(\"ckan.upload.user.types\", \"image\")",
      "1710:     def test_upload_non_picture_with_png_extension(",
      "1711:             self, create_with_upload, faker):",
      "1712:         params = {",
      "1713:             \"name\": faker.user_name(),",
      "1714:             \"email\": faker.email(),",
      "1715:             \"password\": \"12345678\",",
      "1716:             \"action\": \"user_create\",",
      "1717:             \"upload_field_name\": \"image_upload\",",
      "1718:         }",
      "1719:         with pytest.raises(",
      "1720:                 logic.ValidationError, match=\"Unsupported upload type\"):",
      "1721:             create_with_upload(\"hello world\", \"file.png\", **params)",
      "1723:     @pytest.mark.ckan_config(\"ckan.upload.user.types\", \"image\")",
      "1724:     def test_upload_picture(self, create_with_upload, faker):",
      "1725:         params = {",
      "1726:             \"name\": faker.user_name(),",
      "1727:             \"email\": faker.email(),",
      "1728:             \"password\": \"12345678\",",
      "1729:             \"action\": \"user_create\",",
      "1730:             \"upload_field_name\": \"image_upload\",",
      "1731:         }",
      "1732:         assert create_with_upload(faker.image(), \"file.png\", **params)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8a2ebfe34092dce79c3b0644d54af7d850936863",
      "candidate_info": {
        "commit_hash": "8a2ebfe34092dce79c3b0644d54af7d850936863",
        "repo": "ckan/ckan",
        "commit_url": "https://github.com/ckan/ckan/commit/8a2ebfe34092dce79c3b0644d54af7d850936863",
        "files": [
          "changes/6477.bugfix",
          "ckan/tests/logic/action/test_create.py"
        ],
        "message": "add changelog fragment",
        "before_after_code_files": [
          "changes/6477.bugfix||changes/6477.bugfix",
          "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ckan/ckan/pull/6477"
        ],
        "olp_code_files": {
          "patch": [
            "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py"
          ],
          "candidate": [
            "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py"
          ]
        }
      },
      "candidate_diff": {
        "changes/6477.bugfix||changes/6477.bugfix": [
          "File: changes/6477.bugfix -> changes/6477.bugfix",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Type of uploads for group and user image can be restricted via `ckan.upload.user.types` and `ckan.upload.group.types`",
          "",
          "---------------"
        ],
        "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py": [
          "File: ckan/tests/logic/action/test_create.py -> ckan/tests/logic/action/test_create.py"
        ]
      }
    },
    {
      "candidate_hash": "b06cacd2427826b662034cd956612b3162ea999f",
      "candidate_info": {
        "commit_hash": "b06cacd2427826b662034cd956612b3162ea999f",
        "repo": "ckan/ckan",
        "commit_url": "https://github.com/ckan/ckan/commit/b06cacd2427826b662034cd956612b3162ea999f",
        "files": [
          "ckan/lib/uploader.py",
          "ckan/logic/action/create.py"
        ],
        "message": "Move type verification into upload method",
        "before_after_code_files": [
          "ckan/lib/uploader.py||ckan/lib/uploader.py",
          "ckan/logic/action/create.py||ckan/logic/action/create.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ckan/ckan/pull/6477"
        ],
        "olp_code_files": {
          "patch": [
            "ckan/lib/uploader.py||ckan/lib/uploader.py",
            "ckan/logic/action/create.py||ckan/logic/action/create.py"
          ],
          "candidate": [
            "ckan/lib/uploader.py||ckan/lib/uploader.py",
            "ckan/logic/action/create.py||ckan/logic/action/create.py"
          ]
        }
      },
      "candidate_diff": {
        "ckan/lib/uploader.py||ckan/lib/uploader.py": [
          "File: ckan/lib/uploader.py -> ckan/lib/uploader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "173:         anything unless the request is actually good.",
          "174:         max_size is size in MB maximum of the file'''",
          "176:         if self.filename:",
          "177:             with open(self.tmp_filepath, 'wb+') as output_file:",
          "178:                 try:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:         self.verify_type()",
          "",
          "---------------"
        ],
        "ckan/logic/action/create.py||ckan/logic/action/create.py": [
          "File: ckan/logic/action/create.py -> ckan/logic/action/create.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "762:     }",
          "763:     logic.get_action('activity_create')(activity_create_context, activity_dict)",
          "768:     upload.upload(uploader.get_max_image_size())",
          "770:     if not context.get('defer_commit'):",
          "",
          "[Removed Lines]",
          "765:     if hasattr(upload, \"verify_type\"):",
          "766:         upload.verify_type()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1015:     }",
          "1016:     logic.get_action('activity_create')(activity_create_context, activity_dict)",
          "1021:     upload.upload(uploader.get_max_image_size())",
          "1023:     if not context.get('defer_commit'):",
          "",
          "[Removed Lines]",
          "1018:     if hasattr(upload, \"verify_type\"):",
          "1019:         upload.verify_type()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "591b3e38862cb8a2041cf13a98ab225f07f490c6",
      "candidate_info": {
        "commit_hash": "591b3e38862cb8a2041cf13a98ab225f07f490c6",
        "repo": "ckan/ckan",
        "commit_url": "https://github.com/ckan/ckan/commit/591b3e38862cb8a2041cf13a98ab225f07f490c6",
        "files": [
          "ckan/tests/cli/test_user.py"
        ],
        "message": "Fix APIToken CLI test",
        "before_after_code_files": [
          "ckan/tests/cli/test_user.py||ckan/tests/cli/test_user.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ckan/ckan/pull/6477"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ckan/tests/cli/test_user.py||ckan/tests/cli/test_user.py": [
          "File: ckan/tests/cli/test_user.py -> ckan/tests/cli/test_user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:         user = factories.User()",
          "87:         call_action(u\"api_token_create\", user=user[u\"id\"], name=u\"first token\")",
          "88:         tid = model.Session.query(model.ApiToken).first().id",
          "95:         result = cli.invoke(ckan, args)",
          "96:         assert not result.exit_code, result.output",
          "97:         assert u\"API Token has been revoked\" in result.output",
          "",
          "[Removed Lines]",
          "89:         args = [",
          "90:             u\"user\",",
          "91:             u\"token\",",
          "92:             u\"revoke\",",
          "93:             tid,",
          "94:         ]",
          "",
          "[Added Lines]",
          "90:         # tid must be escaped. When it starts with a hyphen it treated as a",
          "91:         # flag otherwise.",
          "92:         args = f'user token revoke \"{tid}\"'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "892a16ebb17fe92dd81888f574633532d4e8ad14",
      "candidate_info": {
        "commit_hash": "892a16ebb17fe92dd81888f574633532d4e8ad14",
        "repo": "ckan/ckan",
        "commit_url": "https://github.com/ckan/ckan/commit/892a16ebb17fe92dd81888f574633532d4e8ad14",
        "files": [
          "changes/6477.bugfix"
        ],
        "message": "Update changes/6477.bugfix\n\nCo-authored-by: Adri\u00e0 Mercader <amercadero@gmail.com>",
        "before_after_code_files": [
          "changes/6477.bugfix||changes/6477.bugfix"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ckan/ckan/pull/6477"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "changes/6477.bugfix||changes/6477.bugfix": [
          "File: changes/6477.bugfix -> changes/6477.bugfix",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: Type of uploads for group and user image can be restricted via `ckan.upload.user.types` and `ckan.upload.group.types`",
          "",
          "[Added Lines]",
          "1: Type of uploads for group and user imagec can be restricted via the `ckan.upload.{object_type}.types` and `ckan.upload.{object_type}.mimetypes` config options (eg `ckan.upload.group.types`, `ckan.upload.user.mimetypes`)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd7a95db4f28a5ba15fdddef07f1f51744715596",
      "candidate_info": {
        "commit_hash": "fd7a95db4f28a5ba15fdddef07f1f51744715596",
        "repo": "ckan/ckan",
        "commit_url": "https://github.com/ckan/ckan/commit/fd7a95db4f28a5ba15fdddef07f1f51744715596",
        "files": [
          "changes/6477.bugfix",
          "ckan/lib/uploader.py",
          "doc/maintaining/configuration.rst"
        ],
        "message": "Update docs",
        "before_after_code_files": [
          "changes/6477.bugfix||changes/6477.bugfix",
          "ckan/lib/uploader.py||ckan/lib/uploader.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ckan/ckan/pull/6477"
        ],
        "olp_code_files": {
          "patch": [
            "ckan/lib/uploader.py||ckan/lib/uploader.py"
          ],
          "candidate": [
            "ckan/lib/uploader.py||ckan/lib/uploader.py"
          ]
        }
      },
      "candidate_diff": {
        "changes/6477.bugfix||changes/6477.bugfix": [
          "File: changes/6477.bugfix -> changes/6477.bugfix",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: Type of uploads for group and user imagec can be restricted via the `ckan.upload.{object_type}.types` and `ckan.upload.{object_type}.mimetypes` config options (eg `ckan.upload.group.types`, `ckan.upload.user.mimetypes`)",
          "",
          "[Added Lines]",
          "1: Type of uploads for group and user image can be restricted via the",
          "2: `ckan.upload.{object_type}.types` and `ckan.upload.{object_type}.mimetypes`",
          "3: config options (eg `ckan.upload.group.types`, `ckan.upload.user.mimetypes`)",
          "",
          "---------------"
        ],
        "ckan/lib/uploader.py||ckan/lib/uploader.py": [
          "File: ckan/lib/uploader.py -> ckan/lib/uploader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:         if not self.filename:",
          "199:             return",
          "201:         actual = magic.from_buffer(self.upload_file.read(1024), mime=True)",
          "202:         self.upload_file.seek(0, os.SEEK_SET)",
          "204:         err = {self.file_field: [f\"Unsupported upload type: {actual}\"]}",
          "208:         if mimetypes and actual not in mimetypes:",
          "209:             raise logic.ValidationError(err)",
          "211:         type_ = actual.split(\"/\")[0]",
          "213:         if types and type_ not in types:",
          "214:             raise logic.ValidationError(err)",
          "",
          "[Removed Lines]",
          "206:         mimetypes = config.get_value(",
          "207:             f\"ckan.upload.{self.object_type}.mimetypes\")",
          "212:         types = config.get_value(f\"ckan.upload.{self.object_type}.types\")",
          "",
          "[Added Lines]",
          "201:         mimetypes = config.get_value(",
          "202:             f\"ckan.upload.{self.object_type}.mimetypes\")",
          "203:         types = config.get_value(f\"ckan.upload.{self.object_type}.types\")",
          "204:         if not mimetypes and not types:",
          "205:             return",
          "",
          "---------------"
        ]
      }
    }
  ]
}