{
  "cve_id": "CVE-2017-2644",
  "cve_desc": "In Moodle 3.x, XSS can occur via evidence of prior learning.",
  "repo": "moodle/moodle",
  "patch_hash": "ac40d8b589820929fe4201a3f0640414e2b9dabd",
  "patch_info": {
    "commit_hash": "ac40d8b589820929fe4201a3f0640414e2b9dabd",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/ac40d8b589820929fe4201a3f0640414e2b9dabd",
    "files": [
      "admin/tool/lp/classes/form/competency.php",
      "admin/tool/lp/classes/form/competency_framework.php",
      "admin/tool/lp/classes/form/plan.php",
      "admin/tool/lp/classes/form/template.php",
      "admin/tool/lp/classes/form/user_evidence.php",
      "competency/classes/competency.php",
      "competency/classes/competency_framework.php",
      "competency/classes/plan.php",
      "competency/classes/template.php",
      "competency/classes/user_evidence.php",
      "lib/classes/external/exporter.php",
      "lib/classes/form/persistent.php",
      "lib/classes/persistent.php"
    ],
    "message": "MDL-57596 forms: CLEANHTML in persistent forms\n\nAdd special handling for text fields with the CLEANHTML type. This should\nbe used when students and teachers can edit the same field (you can't trust those students).\n\nApplies cleaning on submitted data, and on data stored in the DB before it is put back in an editing form.",
    "before_after_code_files": [
      "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
      "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
      "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
      "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
      "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
      "competency/classes/competency.php||competency/classes/competency.php",
      "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
      "competency/classes/plan.php||competency/classes/plan.php",
      "competency/classes/template.php||competency/classes/template.php",
      "competency/classes/user_evidence.php||competency/classes/user_evidence.php",
      "lib/classes/external/exporter.php||lib/classes/external/exporter.php",
      "lib/classes/form/persistent.php||lib/classes/form/persistent.php",
      "lib/classes/persistent.php||lib/classes/persistent.php"
    ]
  },
  "patch_diff": {
    "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php": [
      "File: admin/tool/lp/classes/form/competency.php -> admin/tool/lp/classes/form/competency.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:         $mform->addElement('editor', 'description',",
      "105:                            get_string('description', 'tool_lp'), array('rows' => 4));",
      "108:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
      "109:         $mform->setType('idnumber', PARAM_RAW);",
      "",
      "[Removed Lines]",
      "106:         $mform->setType('description', PARAM_RAW);",
      "",
      "[Added Lines]",
      "106:         $mform->setType('description', PARAM_CLEANHTML);",
      "",
      "---------------"
    ],
    "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php": [
      "File: admin/tool/lp/classes/form/competency_framework.php -> admin/tool/lp/classes/form/competency_framework.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:         $mform->addElement('editor', 'description',",
      "65:                            get_string('description', 'tool_lp'), array('rows' => 4));",
      "68:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
      "69:         $mform->setType('idnumber', PARAM_RAW);",
      "",
      "[Removed Lines]",
      "66:         $mform->setType('description', PARAM_RAW);",
      "",
      "[Added Lines]",
      "66:         $mform->setType('description', PARAM_CLEANHTML);",
      "",
      "---------------"
    ],
    "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php": [
      "File: admin/tool/lp/classes/form/plan.php -> admin/tool/lp/classes/form/plan.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
      "62:         $mform->addElement('editor', 'description', get_string('plandescription', 'tool_lp'), array('rows' => 4));",
      "65:         $mform->addElement('date_time_selector', 'duedate', get_string('duedate', 'tool_lp'), array('optional' => true));",
      "66:         $mform->addHelpButton('duedate', 'duedate', 'tool_lp');",
      "",
      "[Removed Lines]",
      "63:         $mform->setType('description', PARAM_RAW);",
      "",
      "[Added Lines]",
      "63:         $mform->setType('description', PARAM_CLEANHTML);",
      "",
      "---------------"
    ],
    "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php": [
      "File: admin/tool/lp/classes/form/template.php -> admin/tool/lp/classes/form/template.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:         $mform->addElement('editor', 'description',",
      "62:                            get_string('description', 'tool_lp'), array('rows' => 4));",
      "64:         $mform->addElement('selectyesno', 'visible',",
      "65:                            get_string('visible', 'tool_lp'));",
      "66:         $mform->addElement('date_time_selector',",
      "",
      "[Removed Lines]",
      "63:         $mform->setType('description', PARAM_RAW);",
      "",
      "[Added Lines]",
      "63:         $mform->setType('description', PARAM_CLEANHTML);",
      "",
      "---------------"
    ],
    "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php": [
      "File: admin/tool/lp/classes/form/user_evidence.php -> admin/tool/lp/classes/form/user_evidence.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "56:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
      "58:         $mform->addElement('editor', 'description', get_string('userevidencedescription', 'tool_lp'), array('rows' => 10));",
      "61:         $mform->addElement('url', 'url', get_string('userevidenceurl', 'tool_lp'), array('size' => '60'), array('usefilepicker' => false));",
      "62:         $mform->setType('url', PARAM_RAW_TRIMMED);      // Can not use PARAM_URL, it silently converts bad URLs to ''.",
      "",
      "[Removed Lines]",
      "59:         $mform->setType('description', PARAM_RAW);",
      "",
      "[Added Lines]",
      "59:         $mform->setType('description', PARAM_CLEANHTML);",
      "",
      "---------------"
    ],
    "competency/classes/competency.php||competency/classes/competency.php": [
      "File: competency/classes/competency.php -> competency/classes/competency.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:             ),",
      "69:             'description' => array(",
      "70:                 'default' => '',",
      "72:             ),",
      "73:             'descriptionformat' => array(",
      "74:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
      "",
      "[Removed Lines]",
      "71:                 'type' => PARAM_RAW",
      "",
      "[Added Lines]",
      "71:                 'type' => PARAM_CLEANHTML",
      "",
      "---------------"
    ],
    "competency/classes/competency_framework.php||competency/classes/competency_framework.php": [
      "File: competency/classes/competency_framework.php -> competency/classes/competency_framework.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "90:                 'type' => PARAM_RAW",
      "91:             ),",
      "92:             'description' => array(",
      "94:                 'default' => ''",
      "95:             ),",
      "96:             'descriptionformat' => array(",
      "",
      "[Removed Lines]",
      "93:                 'type' => PARAM_RAW,",
      "",
      "[Added Lines]",
      "93:                 'type' => PARAM_CLEANHTML,",
      "",
      "---------------"
    ],
    "competency/classes/plan.php||competency/classes/plan.php": [
      "File: competency/classes/plan.php -> competency/classes/plan.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:                 'type' => PARAM_TEXT,",
      "72:             ),",
      "73:             'description' => array(",
      "75:                 'default' => ''",
      "76:             ),",
      "77:             'descriptionformat' => array(",
      "",
      "[Removed Lines]",
      "74:                 'type' => PARAM_RAW,",
      "",
      "[Added Lines]",
      "74:                 'type' => PARAM_CLEANHTML,",
      "",
      "---------------"
    ],
    "competency/classes/template.php||competency/classes/template.php": [
      "File: competency/classes/template.php -> competency/classes/template.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:             ),",
      "54:             'description' => array(",
      "55:                 'default' => '',",
      "57:             ),",
      "58:             'descriptionformat' => array(",
      "59:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
      "",
      "[Removed Lines]",
      "56:                 'type' => PARAM_RAW,",
      "",
      "[Added Lines]",
      "56:                 'type' => PARAM_CLEANHTML,",
      "",
      "---------------"
    ],
    "competency/classes/user_evidence.php||competency/classes/user_evidence.php": [
      "File: competency/classes/user_evidence.php -> competency/classes/user_evidence.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:                 'type' => PARAM_TEXT",
      "54:             ),",
      "55:             'description' => array(",
      "57:                 'default' => '',",
      "58:             ),",
      "59:             'descriptionformat' => array(",
      "",
      "[Removed Lines]",
      "56:                 'type' => PARAM_RAW,",
      "",
      "[Added Lines]",
      "56:                 'type' => PARAM_CLEANHTML,",
      "",
      "---------------"
    ],
    "lib/classes/external/exporter.php||lib/classes/external/exporter.php": [
      "File: lib/classes/external/exporter.php -> lib/classes/external/exporter.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     final protected static function get_format_field($definitions, $property) {",
      "396:         $formatproperty = $property . 'format';",
      "398:                 && $definitions[$formatproperty]['type'] == PARAM_INT) {",
      "399:             return $formatproperty;",
      "400:         }",
      "",
      "[Removed Lines]",
      "397:         if ($definitions[$property]['type'] == PARAM_RAW && isset($definitions[$formatproperty])",
      "",
      "[Added Lines]",
      "397:         if (($definitions[$property]['type'] == PARAM_RAW || $definitions[$property]['type'] == PARAM_CLEANHTML)",
      "398:                 && isset($definitions[$formatproperty])",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "513:                 $thisvalue = self::get_read_structure_from_properties($type, $proprequired, $propdefault);",
      "514:             } else {",
      "517:                     $type = PARAM_RAW;",
      "518:                 }",
      "",
      "[Removed Lines]",
      "515:                 if ($definition['type'] == PARAM_TEXT) {",
      "",
      "[Added Lines]",
      "516:                 if ($definition['type'] == PARAM_TEXT || $definition['type'] == PARAM_CLEANHTML) {",
      "",
      "---------------"
    ],
    "lib/classes/form/persistent.php||lib/classes/form/persistent.php": [
      "File: lib/classes/form/persistent.php -> lib/classes/form/persistent.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "223:         $data = $this->get_persistent()->to_record();",
      "224:         $class = static::$persistentclass;",
      "225:         $properties = $class::get_formatted_properties();",
      "227:         foreach ($data as $field => $value) {",
      "229:             if (isset($properties[$field])) {",
      "230:                 $data->$field = array(",
      "231:                     'text' => $data->$field,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "226:         $allproperties = $class::properties_definition();",
      "230:             if (isset($allproperties[$field]['type'])) {",
      "231:                 $data->$field = clean_param($data->$field, $allproperties[$field]['type']);",
      "232:             }",
      "",
      "---------------"
    ],
    "lib/classes/persistent.php||lib/classes/persistent.php": [
      "File: lib/classes/persistent.php -> lib/classes/persistent.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "312:         $formatted = array();",
      "313:         foreach ($properties as $property => $definition) {",
      "314:             $propertyformat = $property . 'format';",
      "316:                     && $properties[$propertyformat]['type'] == PARAM_INT) {",
      "317:                 $formatted[$property] = $propertyformat;",
      "318:             }",
      "",
      "[Removed Lines]",
      "315:             if ($definition['type'] == PARAM_RAW && array_key_exists($propertyformat, $properties)",
      "",
      "[Added Lines]",
      "315:             if (($definition['type'] == PARAM_RAW || $definition['type'] == PARAM_CLEANHTML)",
      "316:                     && array_key_exists($propertyformat, $properties)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "697:                         $value = 0;",
      "698:                     }",
      "699:                     validate_param($value, $definition['type'], $definition['null']);",
      "700:                 } catch (invalid_parameter_exception $e) {",
      "701:                     $errors[$property] = static::get_property_error_message($property);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "700:                     if ($definition['type'] === PARAM_CLEANHTML) {",
      "702:                         $value = clean_param($value, PARAM_CLEANHTML);",
      "703:                     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e54f8c4d2d4f2676d4669c1492231cc6720feb1e",
      "candidate_info": {
        "commit_hash": "e54f8c4d2d4f2676d4669c1492231cc6720feb1e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/e54f8c4d2d4f2676d4669c1492231cc6720feb1e",
        "files": [
          "admin/tool/lp/classes/competency.php",
          "admin/tool/lp/classes/competency_framework.php",
          "admin/tool/lp/classes/external/exporter.php",
          "admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php",
          "admin/tool/lp/classes/persistent.php",
          "admin/tool/lp/classes/plan.php",
          "admin/tool/lp/classes/template.php",
          "admin/tool/lp/classes/user_evidence.php",
          "admin/tool/lp/templates/competency_summary.mustache",
          "admin/tool/lp/templates/plan_page.mustache",
          "admin/tool/lp/templates/user_evidence_page.mustache"
        ],
        "message": "MDL-52454 tool_lp: Fix all PARAM_TEXT on persistent, and exporters",
        "before_after_code_files": [
          "admin/tool/lp/classes/competency.php||admin/tool/lp/classes/competency.php",
          "admin/tool/lp/classes/competency_framework.php||admin/tool/lp/classes/competency_framework.php",
          "admin/tool/lp/classes/external/exporter.php||admin/tool/lp/classes/external/exporter.php",
          "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
          "admin/tool/lp/classes/persistent.php||admin/tool/lp/classes/persistent.php",
          "admin/tool/lp/classes/plan.php||admin/tool/lp/classes/plan.php",
          "admin/tool/lp/classes/template.php||admin/tool/lp/classes/template.php",
          "admin/tool/lp/classes/user_evidence.php||admin/tool/lp/classes/user_evidence.php",
          "admin/tool/lp/templates/competency_summary.mustache||admin/tool/lp/templates/competency_summary.mustache",
          "admin/tool/lp/templates/plan_page.mustache||admin/tool/lp/templates/plan_page.mustache",
          "admin/tool/lp/templates/user_evidence_page.mustache||admin/tool/lp/templates/user_evidence_page.mustache"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php"
          ],
          "candidate": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/lp/classes/competency.php||admin/tool/lp/classes/competency.php": [
          "File: admin/tool/lp/classes/competency.php -> admin/tool/lp/classes/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:             ),",
          "69:             'description' => array(",
          "70:                 'default' => '',",
          "72:             ),",
          "73:             'descriptionformat' => array(",
          "74:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "71:                 'type' => PARAM_TEXT",
          "",
          "[Added Lines]",
          "71:                 'type' => PARAM_RAW",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/competency_framework.php||admin/tool/lp/classes/competency_framework.php": [
          "File: admin/tool/lp/classes/competency_framework.php -> admin/tool/lp/classes/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:                 'type' => PARAM_TEXT",
          "91:             ),",
          "92:             'description' => array(",
          "94:                 'default' => ''",
          "95:             ),",
          "96:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "93:                 'type' => PARAM_TEXT,",
          "",
          "[Added Lines]",
          "93:                 'type' => PARAM_RAW,",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/external/exporter.php||admin/tool/lp/classes/external/exporter.php": [
          "File: admin/tool/lp/classes/external/exporter.php -> admin/tool/lp/classes/external/exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:     final protected static function get_format_field($definitions, $property) {",
          "336:         $formatproperty = $property . 'format';",
          "338:                 && $definitions[$formatproperty]['type'] == PARAM_INT) {",
          "339:             return $formatproperty;",
          "340:         }",
          "",
          "[Removed Lines]",
          "337:         if ($definitions[$property]['type'] == PARAM_TEXT && isset($definitions[$formatproperty])",
          "",
          "[Added Lines]",
          "336:         if ($definitions[$property]['type'] == PARAM_RAW && isset($definitions[$formatproperty])",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php": [
          "File: admin/tool/lp/classes/form/competency.php -> admin/tool/lp/classes/form/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         $mform->addRule('shortname', null, 'required', null, 'client');",
          "77:         $mform->addElement('editor', 'description',",
          "78:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "80:         $mform->addElement('text', 'idnumber',",
          "81:                            get_string('idnumber', 'tool_lp'));",
          "82:         $mform->setType('idnumber', PARAM_TEXT);",
          "",
          "[Removed Lines]",
          "79:         $mform->setType('description', PARAM_TEXT);",
          "",
          "[Added Lines]",
          "79:         $mform->setType('description', PARAM_RAW);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php": [
          "File: admin/tool/lp/classes/form/competency_framework.php -> admin/tool/lp/classes/form/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         $mform->addRule('shortname', null, 'required', null, 'client');",
          "61:         $mform->addElement('editor', 'description',",
          "62:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "64:         $mform->addElement('text', 'idnumber',",
          "65:                            get_string('idnumber', 'tool_lp'));",
          "66:         $mform->setType('idnumber', PARAM_TEXT);",
          "",
          "[Removed Lines]",
          "63:         $mform->setType('description', PARAM_TEXT);",
          "",
          "[Added Lines]",
          "63:         $mform->setType('description', PARAM_RAW);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php": [
          "File: admin/tool/lp/classes/form/plan.php -> admin/tool/lp/classes/form/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         $mform->setType('name', PARAM_TEXT);",
          "55:         $mform->addRule('name', null, 'required', null, 'client');",
          "56:         $mform->addElement('editor', 'description', get_string('plandescription', 'tool_lp'), array('rows' => 4));",
          "59:         $mform->addElement('date_time_selector', 'duedate', get_string('duedate', 'tool_lp'), array('optional' => true));",
          "60:         $mform->addHelpButton('duedate', 'duedate', 'tool_lp');",
          "",
          "[Removed Lines]",
          "57:         $mform->setType('description', PARAM_TEXT);",
          "",
          "[Added Lines]",
          "57:         $mform->setType('description', PARAM_RAW);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php": [
          "File: admin/tool/lp/classes/form/template.php -> admin/tool/lp/classes/form/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:         $mform->addRule('shortname', null, 'required', null, 'client');",
          "57:         $mform->addElement('editor', 'description',",
          "58:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "60:         $mform->addElement('selectyesno', 'visible',",
          "61:                            get_string('visible', 'tool_lp'));",
          "62:         $mform->addElement('date_time_selector',",
          "",
          "[Removed Lines]",
          "59:         $mform->setType('description', PARAM_TEXT);",
          "",
          "[Added Lines]",
          "59:         $mform->setType('description', PARAM_RAW);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php": [
          "File: admin/tool/lp/classes/form/user_evidence.php -> admin/tool/lp/classes/form/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         $mform->addElement('editor', 'description', get_string('userevidencedescription', 'tool_lp'), array('rows' => 10));",
          "58:         $mform->addElement('url', 'url', get_string('userevidenceurl', 'tool_lp'), array(), array('usefilepicker' => false));",
          "59:         $mform->setType('url', PARAM_RAW_TRIMMED);      // Can not use PARAM_URL, it silently converts bad URLs to ''.",
          "",
          "[Removed Lines]",
          "56:         $mform->setType('description', PARAM_TEXT);",
          "",
          "[Added Lines]",
          "56:         $mform->setType('description', PARAM_RAW);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/persistent.php||admin/tool/lp/classes/persistent.php": [
          "File: admin/tool/lp/classes/persistent.php -> admin/tool/lp/classes/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:         $formatted = array();",
          "233:         foreach ($properties as $property => $definition) {",
          "234:             $propertyformat = $property . 'format';",
          "237:                     && $properties[$propertyformat]['type'] == PARAM_INT) {",
          "238:                 $formatted[$property] = $propertyformat;",
          "239:             }",
          "",
          "[Removed Lines]",
          "236:             if ($definition['type'] == PARAM_TEXT && array_key_exists($propertyformat, $properties)",
          "",
          "[Added Lines]",
          "235:             if ($definition['type'] == PARAM_RAW && array_key_exists($propertyformat, $properties)",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/plan.php||admin/tool/lp/classes/plan.php": [
          "File: admin/tool/lp/classes/plan.php -> admin/tool/lp/classes/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:                 'type' => PARAM_TEXT,",
          "59:             ),",
          "60:             'description' => array(",
          "62:                 'default' => ''",
          "63:             ),",
          "64:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "61:                 'type' => PARAM_TEXT,",
          "",
          "[Added Lines]",
          "61:                 'type' => PARAM_RAW,",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/template.php||admin/tool/lp/classes/template.php": [
          "File: admin/tool/lp/classes/template.php -> admin/tool/lp/classes/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:             ),",
          "54:             'description' => array(",
          "55:                 'default' => '',",
          "57:             ),",
          "58:             'descriptionformat' => array(",
          "59:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_TEXT,",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/user_evidence.php||admin/tool/lp/classes/user_evidence.php": [
          "File: admin/tool/lp/classes/user_evidence.php -> admin/tool/lp/classes/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:                 'type' => PARAM_TEXT",
          "54:             ),",
          "55:             'description' => array(",
          "57:                 'default' => '',",
          "58:             ),",
          "59:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_TEXT,       // TODO MDL-52454 Make PARAM_RAW.",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/competency_summary.mustache||admin/tool/lp/templates/competency_summary.mustache": [
          "File: admin/tool/lp/templates/competency_summary.mustache -> admin/tool/lp/templates/competency_summary.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <p><strong>{{competency.shortname}} <em>{{competency.idnumber}}</em></strong></p>",
          "4: {{#framework}}",
          "5: <p><strong>{{framework.shortname}}</strong></p>",
          "7: {{/framework}}",
          "9: {{#showrelatedcompetencies}}",
          "",
          "[Removed Lines]",
          "2: <p>{{competency.description}}</p>",
          "6: <p>{{framework.description}}</p>",
          "",
          "[Added Lines]",
          "2: <p>{{{competency.description}}}</p>",
          "6: <p>{{{framework.description}}}</p>",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/plan_page.mustache||admin/tool/lp/templates/plan_page.mustache": [
          "File: admin/tool/lp/templates/plan_page.mustache -> admin/tool/lp/templates/plan_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:             {{/plan.template}}",
          "53:             {{#description}}",
          "54:                 <dt>{{#str}}description{{/str}}</dt>",
          "56:             {{/description}}",
          "57:         </dl>",
          "58:     </div>",
          "",
          "[Removed Lines]",
          "55:                 <dd>{{plan.description}}</dd>",
          "",
          "[Added Lines]",
          "55:                 <dd>{{{plan.description}}}</dd>",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/user_evidence_page.mustache||admin/tool/lp/templates/user_evidence_page.mustache": [
          "File: admin/tool/lp/templates/user_evidence_page.mustache -> admin/tool/lp/templates/user_evidence_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     <div data-region=\"user-evidence-summary\">",
          "41:         {{#description}}",
          "42:             <div>",
          "44:             </div>",
          "45:         {{/description}}",
          "46:         <ul class=\"user-evidence-documents\">",
          "",
          "[Removed Lines]",
          "43:                 {{description}}",
          "",
          "[Added Lines]",
          "43:                 {{{description}}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4db373d5cb81016cbf5258884d04654b99b58af1",
      "candidate_info": {
        "commit_hash": "4db373d5cb81016cbf5258884d04654b99b58af1",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4db373d5cb81016cbf5258884d04654b99b58af1",
        "files": [
          "admin/tool/lp/amd/src/plandelete.js",
          "admin/tool/lp/classes/api.php",
          "admin/tool/lp/classes/external.php",
          "admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/output/manage_templates_page.php",
          "admin/tool/lp/classes/output/plans_page.php",
          "admin/tool/lp/classes/output/renderer.php",
          "admin/tool/lp/classes/persistent.php",
          "admin/tool/lp/classes/plan.php",
          "admin/tool/lp/db/access.php",
          "admin/tool/lp/db/install.xml",
          "admin/tool/lp/db/services.php",
          "admin/tool/lp/editplan.php",
          "admin/tool/lp/lang/en/tool_lp.php",
          "admin/tool/lp/lib.php",
          "admin/tool/lp/plans.php",
          "admin/tool/lp/settings.php",
          "admin/tool/lp/styles.css",
          "admin/tool/lp/templates/manage_competency_frameworks_page.mustache",
          "admin/tool/lp/templates/plans_page.mustache",
          "admin/tool/lp/version.php"
        ],
        "message": "MDL-49460 tool_lp: Adding user learning plans\n\nBasic CRUD skeleton with external functions.",
        "before_after_code_files": [
          "admin/tool/lp/amd/src/plandelete.js||admin/tool/lp/amd/src/plandelete.js",
          "admin/tool/lp/classes/api.php||admin/tool/lp/classes/api.php",
          "admin/tool/lp/classes/external.php||admin/tool/lp/classes/external.php",
          "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/output/manage_templates_page.php||admin/tool/lp/classes/output/manage_templates_page.php",
          "admin/tool/lp/classes/output/plans_page.php||admin/tool/lp/classes/output/plans_page.php",
          "admin/tool/lp/classes/output/renderer.php||admin/tool/lp/classes/output/renderer.php",
          "admin/tool/lp/classes/persistent.php||admin/tool/lp/classes/persistent.php",
          "admin/tool/lp/classes/plan.php||admin/tool/lp/classes/plan.php",
          "admin/tool/lp/db/access.php||admin/tool/lp/db/access.php",
          "admin/tool/lp/db/services.php||admin/tool/lp/db/services.php",
          "admin/tool/lp/editplan.php||admin/tool/lp/editplan.php",
          "admin/tool/lp/lang/en/tool_lp.php||admin/tool/lp/lang/en/tool_lp.php",
          "admin/tool/lp/lib.php||admin/tool/lp/lib.php",
          "admin/tool/lp/plans.php||admin/tool/lp/plans.php",
          "admin/tool/lp/settings.php||admin/tool/lp/settings.php",
          "admin/tool/lp/styles.css||admin/tool/lp/styles.css",
          "admin/tool/lp/templates/manage_competency_frameworks_page.mustache||admin/tool/lp/templates/manage_competency_frameworks_page.mustache",
          "admin/tool/lp/templates/plans_page.mustache||admin/tool/lp/templates/plans_page.mustache",
          "admin/tool/lp/version.php||admin/tool/lp/version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php"
          ],
          "candidate": [
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/lp/amd/src/plandelete.js||admin/tool/lp/amd/src/plandelete.js": [
          "File: admin/tool/lp/amd/src/plandelete.js -> admin/tool/lp/amd/src/plandelete.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: define(['jquery', 'core/templates', 'core/ajax', 'core/notification', 'core/str'], function($, templates, ajax, notification, str) {",
          "28:     var planid = 0;",
          "31:     var userid = 0;",
          "39:     var updatePage = function(newhtml, newjs) {",
          "40:         $('[data-region=\"plans\"]').replaceWith(newhtml);",
          "41:         templates.runTemplateJS(newjs);",
          "42:     };",
          "49:     var reloadList = function(context) {",
          "50:         templates.render('tool_lp/plans_page', context)",
          "51:             .done(updatePage)",
          "52:             .fail(notification.exception);",
          "53:     };",
          "58:     var doDelete = function() {",
          "61:         var requests = ajax.call([{",
          "62:             methodname: 'tool_lp_delete_plan',",
          "63:             args: { id: planid }",
          "64:         }, {",
          "65:             methodname: 'tool_lp_data_for_plans_page',",
          "66:             args: { userid: userid }",
          "67:         }]);",
          "68:         requests[1].done(reloadList).fail(notification.exception);",
          "69:     };",
          "75:     var confirmDelete = function(e) {",
          "76:         e.preventDefault();",
          "78:         var id = $(this).attr('data-planid');",
          "79:         planid = id;",
          "81:         var requests = ajax.call([{",
          "82:             methodname: 'tool_lp_read_plan',",
          "83:             args: { id: planid }",
          "84:         }]);",
          "86:         requests[0].done(function(plan) {",
          "87:             var strings = str.get_strings([",
          "88:                 { key: 'confirm', component: 'tool_lp' },",
          "89:                 { key: 'deleteplan', component: 'tool_lp', param: plan.name },",
          "90:                 { key: 'delete', component: 'tool_lp' },",
          "91:                 { key: 'cancel', component: 'tool_lp' }",
          "92:             ]).done(function (strings) {",
          "93:                 notification.confirm(",
          "94:                     strings[0], // Confirm.",
          "95:                     strings[1], // Delete plan X?",
          "96:                     strings[2], // Delete.",
          "97:                     strings[3], // Cancel.",
          "98:                     doDelete",
          "99:                 );",
          "100:             }).fail(notification.exception);",
          "101:         }).fail(notification.exception);",
          "103:     };",
          "106:     return {",
          "112:         init: function() {",
          "114:             $('[data-region=\"plans\"]').on(",
          "115:                 \"click\",",
          "116:                 '[data-action=\"deleteplan\"]',",
          "117:                 confirmDelete",
          "118:             );",
          "119:             userid = $('[data-region=\"plans\"]').attr('data-userid');",
          "120:         }",
          "122:     };",
          "123: });",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/api.php||admin/tool/lp/classes/api.php": [
          "File: admin/tool/lp/classes/api.php -> admin/tool/lp/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: use stdClass;",
          "27: use context_system;",
          "28: use context_course;",
          "29: use coding_exception;",
          "30: use required_capability_exception;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: use context_user;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "822:         $context = context_system::instance();",
          "823:         $caps = array('tool/lp:templateread', 'tool/lp:templatemanage');",
          "",
          "[Removed Lines]",
          "820:     public static function list_templates($filters, $sort, $order, $skip, $limit) {",
          "",
          "[Added Lines]",
          "821:     public static function list_templates($filters = array(), $sort = '', $order = 'ASC', $skip = 0, $limit = 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1023:         }",
          "1024:         return false;",
          "1025:     }",
          "1026: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1034:     public static function list_user_plans($userid) {",
          "1035:         global $USER;",
          "1037:         $select = 'userid = :userid';",
          "1038:         $params = array('userid' => $userid);",
          "1040:         $context = context_user::instance($userid);",
          "1043:         if ($USER->id != $userid) {",
          "1044:             require_capability('tool/lp:planviewall', $context);",
          "1045:         } else {",
          "1046:             require_capability('tool/lp:planviewown', $context);",
          "1047:         }",
          "1050:         if (!has_any_capability(array('tool/lp:planmanage', 'tool/lp:planmanageown', 'tool/lp:plancreatedraft'), $context)) {",
          "1051:             $select = ' AND status != :statusdraft';",
          "1052:             $params['statusdraft'] = plan::STATUS_DRAFT;",
          "1053:         }",
          "1055:         $plans = new plan();",
          "1056:         return $plans->get_records_select($select, $params, 'timemodified DESC');",
          "1057:     }",
          "1065:     public static function create_plan(stdClass $record) {",
          "1066:         global $USER;",
          "1068:         $context = context_user::instance($record->userid);",
          "1070:         $manageplans = has_capability('tool/lp:planmanage', $context);",
          "1071:         $createdraft = has_capability('tool/lp:plancreatedraft', $context);",
          "1072:         $manageownplan = has_capability('tool/lp:planmanageown', $context);",
          "1075:         if ($USER->id == $record->userid && !$manageplans && !$createdraft && !$manageownplan) {",
          "1077:             throw new required_capability_exception($context, 'tool/lp:plancreatedraft', 'nopermissions', '');",
          "1078:         } else if ($USER->id != $record->userid && !$manageplans) {",
          "1079:             throw new required_capability_exception($context, 'tool/lp:planmanage', 'nopermissions', '');",
          "1080:         }",
          "1082:         if (!isset($record->status)) {",
          "1084:             $record->status = plan::STATUS_DRAFT;",
          "1085:         } else if ($record->status !== plan::STATUS_DRAFT && !$manageplans && !$manageownplan) {",
          "1087:             throw new required_capability_exception($context, 'tool/lp:planmanageown', 'nopermissions', '');",
          "1088:         }",
          "1090:         $plan = new plan(0, $record);",
          "1091:         $id = $plan->create();",
          "1092:         return $plan;",
          "1093:     }",
          "1101:     public static function update_plan(stdClass $record) {",
          "1102:         global $USER;",
          "1104:         $context = context_user::instance($record->userid);",
          "1106:         $manageplans = has_capability('tool/lp:planmanage', $context);",
          "1107:         $createdraft = has_capability('tool/lp:plancreatedraft', $context);",
          "1108:         $manageownplan = has_capability('tool/lp:planmanageown', $context);",
          "1111:         if ($USER->id == $record->userid && !$manageplans && !$createdraft && !$manageownplan) {",
          "1112:             throw new required_capability_exception($context, 'tool/lp:planmanageown', 'nopermissions', '');",
          "1113:         } else if (!$manageplans) {",
          "1114:             throw new required_capability_exception($context, 'tool/lp:planmanage', 'nopermissions', '');",
          "1115:         }",
          "1117:         $current = new plan($record->id);",
          "1121:         if (!$manageplans && !$manageownplans && $USER->id != $current->get_usermodified()) {",
          "1122:             throw new moodle_exception('erroreditingmodifiedplan', 'tool_lp');",
          "1123:         } else if (!$manageplans && $USER->id != $current->userid) {",
          "1124:             throw new required_capability_exception($context, 'tool/lp:planmanage', 'nopermissions', '');",
          "1125:         }",
          "1128:         if ($record->status !== plan::STATUS_DRAFT && !$manageplans && !$manageownplan) {",
          "1129:             required_capability_exception($context, 'tool/lp:planmanageown', 'nopermissions', '');",
          "1130:         }",
          "1132:         $plan = new plan($record->id, $record);",
          "1133:         return $plan->update();",
          "1134:     }",
          "1142:     public static function read_plan($id) {",
          "1143:         global $USER;",
          "1145:         $plan = new plan($id);",
          "1146:         $context = context_user::instance($plan->get_userid());",
          "1148:         if ($USER->id == $plan->get_userid()) {",
          "1149:             require_capability('tool/lp:planviewown', $context);",
          "1150:         } else {",
          "1151:             require_capability('tool/lp:planviewall', $context);",
          "1152:         }",
          "1155:         if ($plan->get_status() === plan::STATUS_DRAFT &&",
          "1156:                 !has_any_capability(array('tool/lp:planmanageown', 'tool/lp:planmanage', 'tool/lp:plancreatedraft'), $context)) {",
          "1158:             throw new required_capability_exception($context, 'tool/lp:plancreatedraft', 'nopermissions', '');",
          "1159:         }",
          "1160:         return $plan;",
          "1161:     }",
          "1169:     public static function delete_plan($id) {",
          "1170:         global $USER;",
          "1172:         $plan = new plan($id);",
          "1174:         $context = context_user::instance($plan->get_userid());",
          "1176:         $manageplans = has_capability('tool/lp:planmanage', $context);",
          "1177:         $createdraft = has_capability('tool/lp:plancreatedraft', $context);",
          "1178:         $manageownplan = has_capability('tool/lp:planmanageown', $context);",
          "1180:         if ($USER->id == $plan->get_userid() && $USER->id != $plan->get_usermodified() &&",
          "1181:                 !$manageplans && !$manageownplan) {",
          "1183:             throw new required_capability_exception($context, 'tool/lp:planmanageown', 'nopermissions', '');",
          "1184:         } else if ($USER->id != $plan->get_userid() && !$manageplans) {",
          "1186:             throw new required_capability_exception($context, 'tool/lp:planmanage', 'nopermissions', '');",
          "1187:         }",
          "1189:         return $plan->delete();",
          "1190:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/external.php||admin/tool/lp/classes/external.php": [
          "File: admin/tool/lp/classes/external.php -> admin/tool/lp/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115:         $params = self::validate_parameters(self::create_template_parameters(),",
          "2116:                                             array(",
          "2117:                                                 'shortname' => $shortname,",
          "",
          "[Removed Lines]",
          "2114:     public static function create_template($shortname, $idnumber, $description, $descriptionformat, $visible) {",
          "",
          "[Added Lines]",
          "2114:     public static function create_template($shortname, $idnumber, $duedate, $description, $descriptionformat, $visible) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2953:         ));",
          "2955:     }",
          "2956: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2962:     protected static function get_plan_external_structure() {",
          "2963:         $id = new external_value(",
          "2964:             PARAM_INT,",
          "2965:             'Database record id'",
          "2966:         );",
          "2967:         $name = new external_value(",
          "2968:             PARAM_TEXT,",
          "2969:             'Name for the learning plan'",
          "2970:         );",
          "2971:         $description = new external_value(",
          "2972:             PARAM_RAW,",
          "2973:             'Description for the template'",
          "2974:         );",
          "2975:         $descriptionformat = new external_format_value(",
          "2976:             'Description format for the template'",
          "2977:         );",
          "2978:         $userid = new external_value(",
          "2979:             PARAM_INT,",
          "2980:             'Learning plan user id'",
          "2981:         );",
          "2982:         $templateid = new external_value(",
          "2983:             PARAM_INT,",
          "2984:             'Learning plan templateid'",
          "2985:         );",
          "2986:         $status = new external_value(",
          "2987:             PARAM_INT,",
          "2988:             'Learning plan status identifier.'",
          "2989:         );",
          "2990:         $duedate = new external_value(",
          "2991:             PARAM_INT,",
          "2992:             'The default due date for instances of this plan.'",
          "2993:         );",
          "2994:         $timecreated = new external_value(",
          "2995:             PARAM_INT,",
          "2996:             'Timestamp this record was created'",
          "2997:         );",
          "2998:         $timemodified = new external_value(",
          "2999:             PARAM_INT,",
          "3000:             'Timestamp this record was modified'",
          "3001:         );",
          "3002:         $usermodified = new external_value(",
          "3003:             PARAM_INT,",
          "3004:             'User who modified this record last'",
          "3005:         );",
          "3008:         $statusname = new external_value(",
          "3009:             PARAM_TEXT,",
          "3010:             'Learning plan status name'",
          "3011:         );",
          "3012:         $usercanupdate = new external_value(",
          "3013:             PARAM_BOOL,",
          "3014:             'Whether the current user can update this plan or not'",
          "3015:         );",
          "3017:         $returns = array(",
          "3018:             'id' => $id,",
          "3019:             'name' => $name,",
          "3020:             'description' => $description,",
          "3021:             'descriptionformat' => $descriptionformat,",
          "3022:             'userid' => $userid,",
          "3023:             'templateid' => $templateid,",
          "3024:             'status' => $status,",
          "3025:             'duedate' => $duedate,",
          "3026:             'timecreated' => $timecreated,",
          "3027:             'timemodified' => $timemodified,",
          "3028:             'usermodified' => $usermodified,",
          "3029:             'statusname' => $statusname,",
          "3030:             'usercanupdate' => $usercanupdate",
          "3031:         );",
          "3033:         return new external_single_structure($returns);",
          "3034:     }",
          "3041:     public static function create_plan_parameters() {",
          "3042:         $name = new external_value(",
          "3043:             PARAM_TEXT,",
          "3044:             'Name for the learning plan template.',",
          "3045:             VALUE_REQUIRED",
          "3046:         );",
          "3047:         $description = new external_value(",
          "3048:             PARAM_RAW,",
          "3049:             'Optional description for the learning plan description',",
          "3050:             VALUE_DEFAULT,",
          "3051:             ''",
          "3052:         );",
          "3053:         $descriptionformat = new external_format_value(",
          "3054:             'Optional description format for the learning plan description',",
          "3055:             VALUE_DEFAULT,",
          "3056:             FORMAT_HTML",
          "3057:         );",
          "3058:         $userid = new external_value(",
          "3059:             PARAM_INT,",
          "3060:             'The learning plan user id',",
          "3061:             VALUE_REQUIRED",
          "3062:         );",
          "3063:         $templateid = new external_value(",
          "3064:             PARAM_INT,",
          "3065:             'Optional template id',",
          "3066:             VALUE_DEFAULT,",
          "3067:             0",
          "3068:         );",
          "3069:         $status = new external_value(",
          "3070:             PARAM_INT,",
          "3071:             'Optional template id',",
          "3072:             VALUE_DEFAULT,",
          "3073:             plan::STATUS_DRAFT",
          "3074:         );",
          "3075:         $duedate = new external_value(",
          "3076:             PARAM_INT,",
          "3077:             'The default due date for this plan',",
          "3078:             VALUE_DEFAULT,",
          "3079:             0",
          "3080:         );",
          "3082:         $params = array(",
          "3083:             'name' => $name,",
          "3084:             'description' => $description,",
          "3085:             'descriptionformat' => $descriptionformat,",
          "3086:             'userid' => $userid,",
          "3087:             'templateid' => $templateid,",
          "3088:             'status' => $status,",
          "3089:             'duedate' => $duedate",
          "3090:         );",
          "3091:         return new external_function_parameters($params);",
          "3092:     }",
          "3098:     public static function create_plan_is_allowed_from_ajax() {",
          "3099:         return true;",
          "3100:     }",
          "3105:     public static function create_plan($name, $description, $descriptionformat, $userid, $templateid, $status, $duedate) {",
          "3106:         $params = self::validate_parameters(self::create_plan_parameters(),",
          "3107:                                             array(",
          "3108:                                                 'name' => $name,",
          "3109:                                                 'description' => $description,",
          "3110:                                                 'descriptionformat' => $descriptionformat,",
          "3111:                                                 'userid' => $userid,",
          "3112:                                                 'templateid' => $templateid,",
          "3113:                                                 'status' => $status,",
          "3114:                                                 'duedate' => $duedate",
          "3115:                                             ));",
          "3116:         $params = (object) $params;",
          "3118:         $result = api::create_plan($params);",
          "3119:         return external_api::clean_returnvalue(self::create_plan_returns(), $result->to_record());",
          "3120:     }",
          "3127:     public static function create_plan_returns() {",
          "3128:         return self::get_plan_external_structure();",
          "3129:     }",
          "3136:     public static function update_plan_parameters() {",
          "3137:         $id = new external_value(",
          "3138:             PARAM_INT,",
          "3139:             'Learning plan id',",
          "3140:             VALUE_REQUIRED",
          "3141:         );",
          "3142:         $name = new external_value(",
          "3143:             PARAM_TEXT,",
          "3144:             'Name for the learning plan template.',",
          "3145:             VALUE_REQUIRED",
          "3146:         );",
          "3147:         $description = new external_value(",
          "3148:             PARAM_RAW,",
          "3149:             'Optional description for the learning plan description',",
          "3150:             VALUE_DEFAULT,",
          "3151:             ''",
          "3152:         );",
          "3153:         $descriptionformat = new external_format_value(",
          "3154:             'Optional description format for the learning plan description',",
          "3155:             VALUE_DEFAULT,",
          "3156:             FORMAT_HTML",
          "3157:         );",
          "3158:         $userid = new external_value(",
          "3159:             PARAM_INT,",
          "3160:             'The learning plan user id',",
          "3161:             VALUE_REQUIRED",
          "3162:         );",
          "3163:         $templateid = new external_value(",
          "3164:             PARAM_INT,",
          "3165:             'Optional template id',",
          "3166:             VALUE_DEFAULT,",
          "3167:             0",
          "3168:         );",
          "3169:         $status = new external_value(",
          "3170:             PARAM_INT,",
          "3171:             'Optional template id',",
          "3172:             VALUE_DEFAULT,",
          "3173:             plan::STATUS_DRAFT",
          "3174:         );",
          "3175:         $duedate = new external_value(",
          "3176:             PARAM_INT,",
          "3177:             'The default due date for this plan',",
          "3178:             VALUE_DEFAULT,",
          "3179:             0",
          "3180:         );",
          "3182:         $params = array(",
          "3183:             'id' => $id,",
          "3184:             'name' => $name,",
          "3185:             'description' => $description,",
          "3186:             'descriptionformat' => $descriptionformat,",
          "3187:             'userid' => $userid,",
          "3188:             'templateid' => $templateid,",
          "3189:             'status' => $status,",
          "3190:             'duedate' => $duedate",
          "3191:         );",
          "3192:         return new external_function_parameters($params);",
          "3193:     }",
          "3199:     public static function update_plan_is_allowed_from_ajax() {",
          "3200:         return true;",
          "3201:     }",
          "3206:     public static function update_plan($id, $name, $description, $descriptionformat, $userid, $templateid, $status, $duedate) {",
          "3207:         $params = self::validate_parameters(self::update_plan_parameters(),",
          "3208:                                             array(",
          "3209:                                                 'id' => $id,",
          "3210:                                                 'name' => $name,",
          "3211:                                                 'description' => $description,",
          "3212:                                                 'descriptionformat' => $descriptionformat,",
          "3213:                                                 'userid' => $userid,",
          "3214:                                                 'templateid' => $templateid,",
          "3215:                                                 'status' => $status,",
          "3216:                                                 'duedate' => $duedate",
          "3217:                                             ));",
          "3218:         $params = (object) $params;",
          "3220:         $result = api::update_plan($params);",
          "3221:         return external_api::clean_returnvalue(self::update_plan_returns(), $result->to_record());",
          "3222:     }",
          "3229:     public static function update_plan_returns() {",
          "3230:         return self::get_plan_external_structure();",
          "3231:     }",
          "3238:     public static function read_plan_parameters() {",
          "3239:         $id = new external_value(",
          "3240:             PARAM_INT,",
          "3241:             'Data base record id for the plan',",
          "3242:             VALUE_REQUIRED",
          "3243:         );",
          "3244:         return new external_function_parameters(array('id' => $id));",
          "3245:     }",
          "3251:     public static function read_plan_is_allowed_from_ajax() {",
          "3252:         return true;",
          "3253:     }",
          "3261:     public static function read_plan($id) {",
          "3262:         $params = self::validate_parameters(self::read_plan_parameters(),",
          "3263:                                             array(",
          "3264:                                                 'id' => $id,",
          "3265:                                             ));",
          "3267:         $result = api::read_plan($params['id']);",
          "3268:         return external_api::clean_returnvalue(self::read_plan_returns(), $result->to_record());",
          "3269:     }",
          "3276:     public static function read_plan_returns() {",
          "3277:         return self::get_plan_external_structure();",
          "3278:     }",
          "3285:     public static function delete_plan_parameters() {",
          "3286:         $id = new external_value(",
          "3287:             PARAM_INT,",
          "3288:             'Data base record id for the learning plan',",
          "3289:             VALUE_REQUIRED",
          "3290:         );",
          "3292:         $params = array(",
          "3293:             'id' => $id,",
          "3294:         );",
          "3295:         return new external_function_parameters($params);",
          "3296:     }",
          "3302:     public static function delete_plan_is_allowed_from_ajax() {",
          "3303:         return true;",
          "3304:     }",
          "3312:     public static function delete_plan($id) {",
          "3313:         $params = self::validate_parameters(self::delete_plan_parameters(),",
          "3314:                                             array(",
          "3315:                                                 'id' => $id,",
          "3316:                                             ));",
          "3317:         return external_api::clean_returnvalue(self::delete_plan_returns(), api::delete_plan($params['id']));",
          "3318:     }",
          "3325:     public static function delete_plan_returns() {",
          "3326:         return new external_value(PARAM_BOOL, 'True if the delete was successful');",
          "3327:     }",
          "3334:     public static function data_for_plans_page_parameters() {",
          "3335:         $userid = new external_value(",
          "3336:             PARAM_INT,",
          "3337:             'The user id',",
          "3338:             VALUE_REQUIRED",
          "3339:         );",
          "3340:         $params = array('userid' => $userid);",
          "3341:         return new external_function_parameters($params);",
          "3342:     }",
          "3348:     public static function data_for_plans_page_is_allowed_from_ajax() {",
          "3349:         return true;",
          "3350:     }",
          "3357:     public static function data_for_plans_page($userid) {",
          "3358:         global $PAGE;",
          "3360:         $params = self::validate_parameters(self::data_for_plans_page_parameters(),",
          "3361:                                             array(",
          "3362:                                                 'userid' => $userid,",
          "3363:                                             ));",
          "3365:         $renderable = new \\tool_lp\\output\\plans_page($params['userid']);",
          "3366:         $renderer = $PAGE->get_renderer('tool_lp');",
          "3368:         return external_api::clean_returnvalue(self::data_for_plans_page_returns(), $renderable->export_for_template($renderer));",
          "3369:     }",
          "3376:     public static function data_for_plans_page_returns() {",
          "3377:         return new external_single_structure(array (",
          "3378:             'userid' => new external_value(PARAM_INT, 'The learning plan user id'),",
          "3379:             'plans' => new external_multiple_structure(",
          "3380:                 self::get_plan_external_structure()",
          "3381:             ),",
          "3382:             'pluginbaseurl' => new external_value(PARAM_LOCALURL, 'Url to the tool_lp plugin folder on this Moodle site'),",
          "3383:             'navigation' => new external_multiple_structure(",
          "3384:                 new external_value(PARAM_RAW, 'HTML for a navigation item that should be on this page')",
          "3385:             )",
          "3386:         ));",
          "3387:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php": [
          "File: admin/tool/lp/classes/form/plan.php -> admin/tool/lp/classes/form/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace tool_lp\\form;",
          "27: defined('MOODLE_INTERNAL') || die('Direct access to this script is forbidden.');",
          "29: use moodleform;",
          "30: use tool_lp\\api;",
          "32: require_once($CFG->libdir.'/formslib.php');",
          "41: class plan extends moodleform {",
          "46:     public function definition() {",
          "47:         $mform = $this->_form;",
          "49:         $mform->addElement('hidden', 'id');",
          "50:         $mform->setType('id', PARAM_INT);",
          "51:         $mform->setDefault('id', 0);",
          "53:         $mform->addElement('hidden', 'userid', $this->_customdata['userid']);",
          "54:         $mform->setType('userid', PARAM_INT);",
          "56:         $mform->addElement('text', 'name', get_string('planname', 'tool_lp'));",
          "57:         $mform->setType('name', PARAM_TEXT);",
          "58:         $mform->addRule('name', null, 'required', null, 'client');",
          "59:         $mform->addElement('editor', 'description', get_string('plandescription', 'tool_lp'), array('rows' => 4));",
          "60:         $mform->setType('description', PARAM_TEXT);",
          "62:         $templates = $this->get_template_options();",
          "63:         if ($templates) {",
          "64:             $mform->addElement('select', 'templateid', get_string('plantemplate', 'tool_lp'), $templates);",
          "65:             $mform->addHelpButton('templateid', 'plantemplate', 'tool_lp');",
          "66:         }",
          "68:         $mform->addElement('date_selector', 'duedate', get_string('duedate', 'tool_lp'));",
          "69:         $mform->addHelpButton('duedate', 'duedate', 'tool_lp');",
          "71:         $this->add_action_buttons(true, get_string('savechanges', 'tool_lp'));",
          "73:         if (!empty($this->_customdata['id'])) {",
          "74:             if (!$this->is_submitted()) {",
          "75:                 $plan = api::read_plan($this->_customdata['id']);",
          "76:                 $record = $plan->to_record();",
          "77:                 $record->description = array('text' => $record->description, 'format' => $record->descriptionformat);",
          "78:                 $this->set_data($record);",
          "79:             }",
          "80:         }",
          "82:     }",
          "89:     protected function get_template_options() {",
          "90:         if (empty($this->_customdata['templates'])) {",
          "91:             return false;",
          "92:         }",
          "94:         $options = array('' => get_string('choosedots'));",
          "95:         foreach ($this->_customdata['templates'] as $template) {",
          "96:             $options[$template->get_id()] = $template->get_shortname();",
          "97:         }",
          "98:         return $options;",
          "99:     }",
          "100: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/manage_templates_page.php||admin/tool/lp/classes/output/manage_templates_page.php": [
          "File: admin/tool/lp/classes/output/manage_templates_page.php -> admin/tool/lp/classes/output/manage_templates_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:         $this->templates = api::list_templates(array(), 'sortorder', 'ASC', 0, 0);",
          "64:         $context = context_system::instance();",
          "66:     }",
          "",
          "[Removed Lines]",
          "65:         $this->canmanage = has_capability('tool/lp:learningplanmanage', $context);",
          "",
          "[Added Lines]",
          "65:         $this->canmanage = has_capability('tool/lp:planmanage', $context);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/plans_page.php||admin/tool/lp/classes/output/plans_page.php": [
          "File: admin/tool/lp/classes/output/plans_page.php -> admin/tool/lp/classes/output/plans_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp\\output;",
          "26: use renderable;",
          "27: use templatable;",
          "28: use renderer_base;",
          "29: use stdClass;",
          "30: use single_button;",
          "31: use moodle_url;",
          "32: use tool_lp\\api;",
          "33: use tool_lp\\plan;",
          "34: use context_user;",
          "42: class plans_page implements renderable, templatable {",
          "45:     var $navigation = array();",
          "47:     var $plans = array();",
          "49:     var $context = null;",
          "51:     var $userid = null;",
          "58:     public function __construct($userid) {",
          "59:         $this->userid = $userid;",
          "60:         $this->plans = api::list_user_plans($userid);",
          "62:         $this->context = context_user::instance($userid);",
          "64:         $addplan = new single_button(",
          "65:            new moodle_url('/admin/tool/lp/editplan.php', array('userid' => $userid)),",
          "66:            get_string('addnewplan', 'tool_lp')",
          "67:         );",
          "68:         $this->navigation[] = $addplan;",
          "69:     }",
          "77:     public function export_for_template(renderer_base $output) {",
          "78:         global $USER;",
          "80:         $data = new stdClass();",
          "81:         $data->userid = $this->userid;",
          "82:         $data->pluginbaseurl = (new moodle_url('/admin/tool/lp'))->out(true);",
          "85:         if ($this->plans) {",
          "86:             $data->plans = array();",
          "87:             foreach ($this->plans as $plan) {",
          "88:                 $data->plans[] = $plan->to_record();",
          "89:             }",
          "90:         }",
          "92:         $data->navigation = array();",
          "93:         foreach ($this->navigation as $button) {",
          "94:             $data->navigation[] = $output->render($button);",
          "95:         }",
          "97:         return $data;",
          "98:     }",
          "99: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/renderer.php||admin/tool/lp/classes/output/renderer.php": [
          "File: admin/tool/lp/classes/output/renderer.php -> admin/tool/lp/classes/output/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: defined('MOODLE_INTERNAL') || die;",
          "29: use plugin_renderer_base;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: use renderable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         return parent::render_from_template('tool_lp/manage_templates_page', $data);",
          "86:     }",
          "88: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     public function render_plans_page(renderable $page) {",
          "90:         $data = $page->export_for_template($this);",
          "91:         return parent::render_from_template('tool_lp/plans_page', $data);",
          "92:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/persistent.php||admin/tool/lp/classes/persistent.php": [
          "File: admin/tool/lp/classes/persistent.php -> admin/tool/lp/classes/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:         return $instances;",
          "247:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:     public function get_records_select($select, $params = null, $sort = '', $fields = '*', $limitfrom = 0, $limitnum = 0) {",
          "261:         global $DB;",
          "263:         if (!$records = $DB->get_records_select($this->get_table_name(), $select, $params, $sort, $fields, $limitfrom, $limitnum)) {",
          "264:             return false;",
          "265:         }",
          "268:         $instances = array();",
          "269:         foreach ($records as $record) {",
          "270:             array_push($instances, new static(0, $record));",
          "271:         }",
          "273:         return $instances;",
          "275:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/plan.php||admin/tool/lp/classes/plan.php": [
          "File: admin/tool/lp/classes/plan.php -> admin/tool/lp/classes/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp;",
          "26: use stdClass;",
          "27: use context_user;",
          "35: class plan extends persistent {",
          "37:     const STATUS_DRAFT = 0;",
          "38:     const STATUS_ACTIVE = 1;",
          "39:     const STATUS_COMPLETE = 2;",
          "42:     private $name = '';",
          "45:     private $description = '';",
          "48:     private $descriptionformat = FORMAT_MOODLE;",
          "51:     private $userid = null;",
          "54:     private $templateid = null;",
          "57:     private $status = null;",
          "60:     private $duedate = null;",
          "67:     public function get_table_name() {",
          "68:         return 'tool_lp_plan';",
          "69:     }",
          "71:     public function get_name() {",
          "72:         return $this->name;",
          "73:     }",
          "75:     public function set_name($value) {",
          "76:         $this->name = $value;",
          "77:     }",
          "79:     public function get_description() {",
          "80:         return $this->description;",
          "81:     }",
          "83:     public function set_description($value) {",
          "84:         $this->description = $value;",
          "85:     }",
          "87:     public function get_descriptionformat() {",
          "88:         return $this->descriptionformat;",
          "89:     }",
          "91:     public function set_descriptionformat($value) {",
          "92:         $this->descriptionformat = $value;",
          "93:     }",
          "95:     public function get_userid() {",
          "96:         return $this->userid;",
          "97:     }",
          "99:     public function set_userid($value) {",
          "100:         $this->userid = $value;",
          "101:     }",
          "103:     public function get_templateid() {",
          "104:         return $this->templateid;",
          "105:     }",
          "107:     public function set_templateid($value) {",
          "108:         $this->templateid = $value;",
          "109:     }",
          "111:     public function get_status() {",
          "112:         if ($this->status === null) {",
          "113:             return null;",
          "114:         }",
          "116:         return (int)$this->status;",
          "117:     }",
          "119:     public function set_status($value) {",
          "120:         $this->status = $value;",
          "121:     }",
          "123:     public function get_duedate() {",
          "124:         return $this->duedate;",
          "125:     }",
          "127:     public function set_duedate($value) {",
          "128:         $this->duedate = $value;",
          "129:     }",
          "139:     public function get_statusname() {",
          "141:         $status = $this->get_status();",
          "143:         switch ($status) {",
          "144:             case self::STATUS_DRAFT:",
          "145:                 $strname = 'draft';",
          "146:                 break;",
          "147:             case self::STATUS_ACTIVE:",
          "148:                 $strname = 'active';",
          "149:                 break;",
          "150:             case self::STATUS_COMPLETE:",
          "151:                 $strname = 'complete';",
          "152:                 break;",
          "153:             default:",
          "154:                 throw moodle_exception('errorplanstatus', 'tool_lp', '', $status);",
          "155:                 break;",
          "156:         }",
          "158:         return get_string('planstatus' . $strname, 'tool_lp');",
          "159:     }",
          "166:     public function get_usercanupdate() {",
          "167:         global $USER;",
          "170:         if (!$userid = $this->get_userid()) {",
          "171:             return null;",
          "172:         }",
          "174:         $context = context_user::instance($userid);",
          "177:         if (has_capability('tool/lp:planmanage', $context) ||",
          "178:                 has_capability('tool/lp:planmanageown', $context)) {",
          "179:             return true;",
          "181:         }",
          "185:         if ($USER->id == $userid && $this->get_usermodified() == $USER->id && $this->get_status() != plan::STATUS_COMPLETE) {",
          "186:             return true;",
          "187:         }",
          "189:         return false;",
          "190:     }",
          "200:     public function to_record() {",
          "202:         $record = new stdClass();",
          "203:         $record->id = $this->get_id();",
          "204:         $record->name = $this->get_name();",
          "205:         $record->description = $this->get_description();",
          "206:         $record->descriptionformat = $this->get_descriptionformat();",
          "207:         $record->userid = $this->get_userid();",
          "208:         $record->templateid = $this->get_templateid();",
          "209:         $record->status = $this->get_status();",
          "210:         $record->duedate = $this->get_duedate();",
          "211:         $record->timecreated = $this->get_timecreated();",
          "212:         $record->timemodified = $this->get_timemodified();",
          "213:         $record->usermodified = $this->get_usermodified();",
          "216:         $record->statusname = $this->get_statusname();",
          "217:         $record->usercanupdate = $this->get_usercanupdate();",
          "219:         return $record;",
          "220:     }",
          "222:     public function from_record($record) {",
          "223:         if (isset($record->id)) {",
          "224:             $this->set_id($record->id);",
          "225:         }",
          "226:         if (isset($record->name)) {",
          "227:             $this->set_name($record->name);",
          "228:         }",
          "229:         if (isset($record->description)) {",
          "230:             $this->set_description($record->description);",
          "231:         }",
          "232:         if (isset($record->descriptionformat)) {",
          "233:             $this->set_descriptionformat($record->descriptionformat);",
          "234:         }",
          "235:         if (isset($record->userid)) {",
          "236:             $this->set_userid($record->userid);",
          "237:         }",
          "238:         if (isset($record->templateid)) {",
          "239:             $this->set_templateid($record->templateid);",
          "240:         }",
          "241:         if (isset($record->status)) {",
          "242:             $this->set_status($record->status);",
          "243:         }",
          "244:         if (isset($record->duedate)) {",
          "245:             $this->set_duedate($record->duedate);",
          "246:         }",
          "247:         if (isset($record->timecreated)) {",
          "248:             $this->set_timecreated($record->timecreated);",
          "249:         }",
          "250:         if (isset($record->timemodified)) {",
          "251:             $this->set_timemodified($record->timemodified);",
          "252:         }",
          "253:         if (isset($record->usermodified)) {",
          "254:             $this->set_usermodified($record->usermodified);",
          "255:         }",
          "256:     }",
          "257: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/db/access.php||admin/tool/lp/db/access.php": [
          "File: admin/tool/lp/db/access.php -> admin/tool/lp/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:         ),",
          "59:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "60:     ),",
          "63:         'contextlevel' => CONTEXT_SYSTEM,",
          "64:         'archetypes' => array(",
          "66:         ),",
          "68:     ),",
          "70:         'captype' => 'write',",
          "71:         'contextlevel' => CONTEXT_SYSTEM,",
          "72:         'archetypes' => array(",
          "73:         ),",
          "74:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "75:     ),",
          "76:     'tool/lp:coursecompetencyread' => array(",
          "77:         'captype' => 'read',",
          "78:         'contextlevel' => CONTEXT_COURSE,",
          "",
          "[Removed Lines]",
          "61:     'tool/lp:learningplanread' => array(",
          "62:         'captype' => 'read',",
          "65:             'user' => CAP_ALLOW",
          "67:         'clonepermissionsfrom' =>  'moodle/block:view'",
          "69:     'tool/lp:learningplanmanage' => array(",
          "",
          "[Added Lines]",
          "61:     'tool/lp:plancreatedraft' => array(",
          "62:         'captype' => 'write',",
          "66:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "68:     'tool/lp:planmanage' => array(",
          "75:     'tool/lp:planmanageown' => array(",
          "76:         'captype' => 'write',",
          "77:         'contextlevel' => CONTEXT_USER,",
          "78:         'archetypes' => array(",
          "79:         ),",
          "80:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "81:     ),",
          "82:     'tool/lp:planviewall' => array(",
          "83:         'captype' => 'read',",
          "84:         'contextlevel' => CONTEXT_USER,",
          "85:         'archetypes' => array(",
          "86:         ),",
          "87:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "88:     ),",
          "89:     'tool/lp:planviewown' => array(",
          "90:         'captype' => 'read',",
          "91:         'contextlevel' => CONTEXT_USER,",
          "92:         'archetypes' => array(",
          "93:             'user' => CAP_ALLOW",
          "94:         ),",
          "95:         'clonepermissionsfrom' =>  'moodle/block:view'",
          "97:     ),",
          "",
          "---------------"
        ],
        "admin/tool/lp/db/services.php||admin/tool/lp/db/services.php": [
          "File: admin/tool/lp/db/services.php -> admin/tool/lp/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:         'type'        => 'write',",
          "309:         'capabilities'=> 'tool/lp:templatemanage',",
          "310:     ),",
          "312: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:     'tool_lp_create_plan' => array(",
          "312:         'classname'   => 'tool_lp\\external',",
          "313:         'methodname'  => 'create_plan',",
          "314:         'classpath'   => '',",
          "315:         'description' => 'Creates a learning plan.',",
          "316:         'type'        => 'write',",
          "317:         'capabilities'=> 'tool/lp:planmanage',",
          "318:     ),",
          "319:     'tool_lp_update_plan' => array(",
          "320:         'classname'   => 'tool_lp\\external',",
          "321:         'methodname'  => 'update_plan',",
          "322:         'classpath'   => '',",
          "323:         'description' => 'Updates a learning plan.',",
          "324:         'type'        => 'write',",
          "325:         'capabilities'=> 'tool/lp:planmanage',",
          "326:     ),",
          "327:     'tool_lp_read_plan' => array(",
          "328:         'classname'   => 'tool_lp\\external',",
          "329:         'methodname'  => 'read_plan',",
          "330:         'classpath'   => '',",
          "331:         'description' => 'Load a learning plan.',",
          "332:         'type'        => 'read',",
          "333:         'capabilities'=> 'tool/lp:planviewown',",
          "334:     ),",
          "335:     'tool_lp_read_plan' => array(",
          "336:         'classname'   => 'tool_lp\\external',",
          "337:         'methodname'  => 'read_plan',",
          "338:         'classpath'   => '',",
          "339:         'description' => 'Load a learning plan.',",
          "340:         'type'        => 'read',",
          "341:         'capabilities'=> 'tool/lp:planviewown',",
          "342:     ),",
          "343:     'tool_lp_delete_plan' => array(",
          "344:         'classname'   => 'tool_lp\\external',",
          "345:         'methodname'  => 'delete_plan',",
          "346:         'classpath'   => '',",
          "347:         'description' => 'Delete a learning plan.',",
          "348:         'type'        => 'write',",
          "349:         'capabilities'=> 'tool/lp:planmanage',",
          "350:     ),",
          "351:     'tool_lp_data_for_plans_page' => array(",
          "352:         'classname'   => 'tool_lp\\external',",
          "353:         'methodname'  => 'data_for_plans_page',",
          "354:         'classpath'   => '',",
          "355:         'description' => 'Load the data for the plans page template',",
          "356:         'type'        => 'read',",
          "357:         'capabilities'=> 'tool/lp:planviewown',",
          "358:     )",
          "",
          "---------------"
        ],
        "admin/tool/lp/editplan.php||admin/tool/lp/editplan.php": [
          "File: admin/tool/lp/editplan.php -> admin/tool/lp/editplan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "26: require_once($CFG->libdir.'/adminlib.php');",
          "28: $userid = optional_param('userid', false, PARAM_INT);",
          "29: $id = optional_param('id', false, PARAM_INT);",
          "32: if (empty($id)) {",
          "33:     $pagetitle = get_string('addnewplan', 'tool_lp');",
          "34: } else {",
          "35:     $pagetitle = get_string('editplan', 'tool_lp');",
          "36: }",
          "39: if (!$userid) {",
          "40:     $userid = $USER->id;",
          "41: }",
          "43: $context = context_user::instance($userid);",
          "45: $params = array('userid' => $userid);",
          "46: if ($id) {",
          "47:     $params['id'] = $id;",
          "48: }",
          "50: $url = new moodle_url(\"/admin/tool/lp/editplan.php\", $params);",
          "51: $PAGE->set_context($context);",
          "52: $PAGE->set_url($url);",
          "53: $PAGE->set_title($pagetitle);",
          "54: $PAGE->set_pagelayout('admin');",
          "55: $PAGE->set_heading($pagetitle);",
          "56: $output = $PAGE->get_renderer('tool_lp');",
          "58: $manageplans = has_capability('tool/lp:planmanage', $context);",
          "59: $owncapabilities = array('tool/lp:plancreatedraft', 'tool/lp:planmanageown');",
          "60: if ($USER->id === $userid && !has_any_capability($owncapabilities, $context) && !$manageplans) {",
          "61:     throw new required_capability_exception($context, 'tool/lp:planmanageown', 'nopermissions', '');",
          "62: } else if (!$manageplans) {",
          "63:     throw new required_capability_exception($context, 'tool/lp:planmanage', 'nopermissions', '');",
          "64: }",
          "67: $templates = array();",
          "68: if ($manageplans) {",
          "69:     $templates = \\tool_lp\\api::list_templates();",
          "70: }",
          "72: $customdata = array('id' => $id, 'userid' => $userid, 'templates' => $templates);",
          "73: $form = new \\tool_lp\\form\\plan(null, $customdata);",
          "74: if ($form->is_cancelled()) {",
          "75:     redirect(new moodle_url('/admin/tool/lp/plans.php?userid=' . $userid));",
          "76: }",
          "78: echo $output->header();",
          "79: echo $output->heading($pagetitle);",
          "80: $data = $form->get_data();",
          "82: if ($data) {",
          "83:     $data->descriptionformat = $data->description['format'];",
          "84:     $data->description = $data->description['text'];",
          "85:     if (empty($data->id)) {",
          "86:         require_sesskey();",
          "87:         \\tool_lp\\api::create_plan($data);",
          "88:         echo $output->notification(get_string('plancreated', 'tool_lp'), 'notifysuccess');",
          "89:         echo $output->continue_button('/admin/tool/lp/plans.php?userid=' . $userid);",
          "90:     } else {",
          "91:         require_sesskey();",
          "92:         \\tool_lp\\api::update_plan($data);",
          "93:         echo $output->notification(get_string('planupdated', 'tool_lp'), 'notifysuccess');",
          "94:         echo $output->continue_button('/admin/tool/lp/plans.php?userid=' . $userid);",
          "95:     }",
          "96: } else {",
          "97:     $form->display();",
          "98: }",
          "100: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/lang/en/tool_lp.php||admin/tool/lp/lang/en/tool_lp.php": [
          "File: admin/tool/lp/lang/en/tool_lp.php -> admin/tool/lp/lang/en/tool_lp.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: $string['pluginname'] = 'Learning Plans';",
          "28: $string['lp:competencymanage'] = 'Manage competency frameworks';",
          "29: $string['lp:competencyread'] = 'View competency frameworks';",
          "30: $string['lp:coursecompetencymanage'] = 'Manage course competencies';",
          "",
          "[Removed Lines]",
          "26: $string['lp:learningplanmanage'] = 'Manage learning plans';",
          "27: $string['lp:learningplanread'] = 'View learning plans';",
          "",
          "[Added Lines]",
          "26: $string['lp:plancreatedraft'] = 'Create draft learning plans';",
          "27: $string['lp:planmanage'] = 'Manage learning plans';",
          "28: $string['lp:planmanage'] = 'Manage learning plans';",
          "29: $string['lp:planmanageown'] = 'Manage own learning plans';",
          "30: $string['lp:planviewall'] = 'View all learning plans';",
          "31: $string['lp:planviewown'] = 'View own learning plans';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: $string['competenciesforframework'] = 'Competencies for {$a}';",
          "34: $string['competencyframeworks'] = 'Competency Frameworks';",
          "35: $string['addnewcompetencyframework'] = 'Add new competency framework';",
          "36: $string['addnewtemplate'] = 'Add new learning plan template';",
          "37: $string['addnewcompetency'] = 'Add new competency';",
          "38: $string['addcompetency'] = 'Add competency';",
          "39: $string['editcompetencyframework'] = 'Edit competency framework';",
          "40: $string['listcompetencyframeworkscaption'] = 'List of competency frameworks';",
          "41: $string['listtemplatescaption'] = 'List of learning plan templates';",
          "42: $string['competencyframeworkname'] = 'Name';",
          "43: $string['actions'] = 'Actions';",
          "44: $string['notemplates'] = 'No learning plan templates have been created yet.';",
          "45: $string['nocompetencyframeworks'] = 'No competency frameworks have been created yet.';",
          "46: $string['nocompetencies'] = 'No competencies have been created in this framework.';",
          "47: $string['nocompetenciesincourse'] = 'No competencies have been linked to this course.';",
          "49: $string['shortname'] = 'Name';",
          "50: $string['savechanges'] = 'Save changes';",
          "51: $string['description'] = 'Description';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: $string['addnewplan'] = 'Add new learning plan';",
          "43: $string['addnewplan'] = 'Add new learning plan';",
          "46: $string['erroreditingmodifiedplan'] = 'You can not edit a learning plan modified by another user if you don\\'t have tool/lp:planmanage or tool/lp:planmanageown capabilities.';",
          "47: $string['errorplanstatus'] = 'Learning plans {$a} status unknown';",
          "50: $string['listplanscaption'] = 'List of learning plans';",
          "53: $string['status'] = 'Status';",
          "58: $string['nouserplans'] = 'No learning plans have been created yet.';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: $string['competencyframeworkupdated'] = 'Competency framework updated.';",
          "59: $string['editcompetencyframework'] = 'Edit competency framework';",
          "60: $string['editthiscompetencyframework'] = 'Edit';",
          "61: $string['deletethiscompetencyframework'] = 'Delete';",
          "62: $string['deletethistemplate'] = 'Delete';",
          "63: $string['hiddenhint'] = '(hidden)';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: $string['editplan'] = 'Edit learning plan';",
          "72: $string['editthisplan'] = 'Edit this learning plan';",
          "73: $string['deletethisplan'] = 'Delete this learning plan';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66: $string['moveframeworkafter'] = 'Move competency framework after {$a}';",
          "67: $string['selectedcompetency'] = 'Selected competency';",
          "68: $string['nocompetencyselected'] = 'No competency selected';",
          "69: $string['search'] = 'Search...';",
          "70: $string['competencycreated'] = 'Competency created';",
          "71: $string['competencyupdated'] = 'Competency updated';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: $string['plancreated'] = 'Learning plan created';",
          "83: $string['planupdated'] = 'Learning plan updated';",
          "84: $string['planname'] = 'Name';",
          "85: $string['plandescription'] = 'Description';",
          "86: $string['planstatusdraft'] = 'Draft';",
          "87: $string['planstatusactive'] = 'Active';",
          "88: $string['planstatuscomplete'] = 'Complete';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "73: $string['editcompetency'] = 'Edit competency';",
          "74: $string['confirm'] = 'Confirm';",
          "75: $string['delete'] = 'Delete';",
          "78: $string['cancel'] = 'Cancel';",
          "79: $string['move'] = 'Move';",
          "80: $string['movecompetency'] = 'Move competency: {$a}';",
          "",
          "[Removed Lines]",
          "76: $string['deletecompetency'] = 'Delete competency? {$a}';",
          "77: $string['deletecompetencyframework'] = 'Delete competency framework? {$a}';",
          "",
          "[Added Lines]",
          "96: $string['deletecompetency'] = 'Delete competency {$a}?';",
          "97: $string['deletecompetencyframework'] = 'Delete competency framework {$a}?';",
          "98: $string['deleteplan'] = 'Delete plan {$a}?';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "90: $string['learningplans'] = 'Learning plans';",
          "91: $string['movecoursecompetency'] = 'Move course competency';",
          "92: $string['movecoursecompetencyafter'] = 'Move course competency after {$a}';",
          "94: $string['templates'] = 'Learning plan templates';",
          "95: $string['templatename'] = 'Name';",
          "96: $string['editthistemplate'] = 'Edit';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: $string['plantemplate'] = 'Select template';",
          "115: $string['plantemplate_help'] = 'A learning plan created from a template will contain a list of competencies that match the template. Updates to the template will be reflected in any plan created from that template.';",
          "",
          "---------------"
        ],
        "admin/tool/lp/lib.php||admin/tool/lp/lib.php": [
          "File: admin/tool/lp/lib.php -> admin/tool/lp/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         $navigation->add_node($settingsnode);",
          "46:     }",
          "47: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: function tool_lp_myprofile_navigation(core_user\\output\\myprofile\\tree $tree, $user, $iscurrentuser, $course) {",
          "60:     global $USER;",
          "62:     $context = context_user::instance($USER->id);",
          "63:     if (!$iscurrentuser && !has_capability('tool/lp:planviewall', $context)) {",
          "64:         return false;",
          "65:     }",
          "67:     if (!has_capability('tool/lp:planviewown', $context)) {",
          "68:         return false;",
          "69:     }",
          "71:     $url = new moodle_url('/admin/tool/lp/plans.php');",
          "72:     $node = new core_user\\output\\myprofile\\node('miscellaneous', 'learningplans',",
          "73:                                                 get_string('learningplans', 'tool_lp'), null, $url);",
          "74:     $tree->add_node($node);",
          "75: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/plans.php||admin/tool/lp/plans.php": [
          "File: admin/tool/lp/plans.php -> admin/tool/lp/plans.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "27: $userid = optional_param('userid', false, PARAM_INT);",
          "29: require_login(null, false);",
          "30: if (isguestuser()) {",
          "31:     throw new require_login_exception();",
          "32: }",
          "34: $iscurrentuser = $userid == $USER->id;",
          "35: if ($userid === false) {",
          "36:     $userid = $USER->id;",
          "37: }",
          "38: $context = context_user::instance($userid);",
          "41: $user = core_user::get_user($userid);",
          "42: if (!$user || !core_user::is_real_user($userid)) {",
          "43:     throw new moodle_exception('invaliduser', 'error');",
          "44: }",
          "46: if (!has_capability('tool/lp:planviewall', $context)) {",
          "47:     if ($iscurrentuser) {",
          "48:         require_capability('tool/lp:planviewown', $context);",
          "49:     }",
          "50:     throw new required_capability_exception($context, 'tool/lp:planviewall', 'nopermissions', '');",
          "51: }",
          "53: $url = new moodle_url('/admin/tool/lp/plans.php', array('userid' => $userid));",
          "55: $title = get_string('learningplans', 'tool_lp');",
          "56: $PAGE->set_context($context);",
          "57: $PAGE->set_pagelayout('admin');",
          "58: $PAGE->set_url($url);",
          "59: $PAGE->set_title($title);",
          "60: $PAGE->set_heading($title);",
          "62: $output = $PAGE->get_renderer('tool_lp');",
          "63: echo $output->header();",
          "64: echo $output->heading($title);",
          "66: $page = new \\tool_lp\\output\\plans_page($userid);",
          "67: echo $output->render($page);",
          "69: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/settings.php||admin/tool/lp/settings.php": [
          "File: admin/tool/lp/settings.php -> admin/tool/lp/settings.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     'toollplearningplans',",
          "39:     get_string('learningplans', 'tool_lp'),",
          "40:     new moodle_url('/admin/tool/lp/learningplans.php'),",
          "42: );",
          "43: $ADMIN->add('root', $temp, 'toollpcompetencies');",
          "",
          "[Removed Lines]",
          "41:     'tool/lp:learningplanmanage'",
          "",
          "[Added Lines]",
          "41:     'tool/lp:planmanage'",
          "",
          "---------------"
        ],
        "admin/tool/lp/styles.css||admin/tool/lp/styles.css": [
          "File: admin/tool/lp/styles.css -> admin/tool/lp/styles.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul li,",
          "2: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul li,",
          "3: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul li {",
          "4:     list-style-type: none;",
          "5: }",
          "8:     margin-left: -20px;",
          "9:     margin-right: 4px;",
          "10: }",
          "11: .dir-rtl.path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul li img {",
          "12:     margin-right: -20px;",
          "13:     margin-left: 4px;",
          "14: }",
          "16: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul[data-enhance=\"tree\"],",
          "17: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul[data-enhance=\"linktree\"],",
          "18: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul[data-enhance=\"movetree\"] {",
          "19:     border: 1px solid #ccc;",
          "",
          "[Removed Lines]",
          "7: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul li img {",
          "",
          "[Added Lines]",
          "2: .path-admin-tool-learningplan [data-region=\"plans\"] ul li,",
          "8: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul li img,",
          "9: .path-admin-tool-learningplan [data-region=\"plans\"] ul li img {",
          "13: .dir-rtl.path-admin-tool-learningplan [data-region=\"plans\"] ul li img,",
          "20: .path-admin-tool-learningplan [data-region=\"plans\"] ul[data-enhance=\"tree\"],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     margin-right: 10px;",
          "27: }",
          "28: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul,",
          "29: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul,",
          "30: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul {",
          "31:     cursor: pointer;",
          "32: }",
          "33: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul [aria-selected=\"true\"],",
          "34: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul [aria-selected=\"true\"],",
          "35: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul [aria-selected=\"true\"] {",
          "36:     background-color: #dfdfdf;",
          "37: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: .path-admin-tool-learningplan [data-region=\"plans\"] ul,",
          "40: .path-admin-tool-learningplan [data-region=\"plans\"] ul [aria-selected=\"true\"],",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/manage_competency_frameworks_page.mustache||admin/tool/lp/templates/manage_competency_frameworks_page.mustache": [
          "File: admin/tool/lp/templates/manage_competency_frameworks_page.mustache -> admin/tool/lp/templates/manage_competency_frameworks_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "26:     Data attibutes required for JS:",
          "",
          "[Added Lines]",
          "26:     Data attributes required for JS:",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/plans_page.mustache||admin/tool/lp/templates/plans_page.mustache": [
          "File: admin/tool/lp/templates/plans_page.mustache -> admin/tool/lp/templates/plans_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16: }}",
          "17: {{!",
          "18:     User learning plans page.",
          "20:     Classes required for JS:",
          "23:     Data attributes required for JS:",
          "29:     Context variables required for this template:",
          "34: }}",
          "36: <div data-region=\"plans\" data-userid=\"{{userid}}\">",
          "37: <table class=\"generaltable fullwidth\">",
          "38:     <caption>{{#str}}listplanscaption, tool_lp{{/str}}</caption>",
          "39:     <thead>",
          "40:         <tr>",
          "41:             <th scope=\"col\">{{#str}}planname, tool_lp{{/str}}</th>",
          "42:             <th scope=\"col\">{{#str}}status, tool_lp{{/str}}</th>",
          "43:             <th scope=\"col\">{{#str}}actions, tool_lp{{/str}}</th>",
          "44:         </tr>",
          "45:     </thead>",
          "46:     <tbody>",
          "47:         {{#plans}}",
          "48:         <tr>",
          "49:             <td>",
          "50:                 <span><a href=\"{{pluginbaseurl}}/plan.php?id={{id}}\">{{name}}</a></span>",
          "51:             </td>",
          "52:             <td>{{statusname}}</td>",
          "53:             <td>",
          "54:                 {{#usercanupdate}}",
          "55:                 <div style=\"display: inline-block;\">",
          "56:                 <ul class=\"planactions hide\">",
          "57:                     <li>",
          "58:                         <a href=\"{{pluginbaseurl}}/editplan.php?id={{id}}\">",
          "59:                             {{#pix}}t/edit{{/pix}}{{#str}}editthisplan, tool_lp{{/str}}",
          "60:                         </a>",
          "61:                     </li>",
          "62:                     <li>",
          "63:                         <a data-action=\"deleteplan\" data-planid=\"{{id}}\" href=\"#\">",
          "64:                             {{#pix}}t/delete{{/pix}}{{#str}}deletethisplan, tool_lp{{/str}}",
          "65:                         </a>",
          "66:                     </li>",
          "67:                 </ul>",
          "68:                 {{/usercanupdate}}",
          "69:             </div>",
          "70:             </td>",
          "71:         </tr>",
          "72:         {{/plans}}",
          "73:     </tbody>",
          "74: </table>",
          "76: {{^plans}}",
          "77: <p class=\"alert-info\">",
          "78:     {{#str}}nouserplans, tool_lp{{/str}}",
          "79: </p>",
          "80: {{/plans}}",
          "82: <div class=\"btn-group pull-right\">",
          "83: {{#navigation}}",
          "84: {{{.}}}",
          "85: {{/navigation}}",
          "86: </div>",
          "88: {{#js}}",
          "90: require(['tool_lp/plandelete',",
          "91:          'core/menu'],",
          "92:         function(deleteMod, menu) {",
          "94:     deleteMod.init();",
          "96:     menu.menu('{{#str}}edit{{/str}}', '.planactions');",
          "97: });",
          "99: {{/js}}",
          "101: </div>",
          "",
          "---------------"
        ],
        "admin/tool/lp/version.php||admin/tool/lp/version.php": [
          "File: admin/tool/lp/version.php -> admin/tool/lp/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $plugin->requires  = 2014110400; // Requires this Moodle version.",
          "29: $plugin->component = 'tool_lp'; // Full name of the plugin (used for diagnostics).",
          "",
          "[Removed Lines]",
          "27: $plugin->version   = 2015021623; // The current plugin version (Date: YYYYMMDDXX).",
          "",
          "[Added Lines]",
          "27: $plugin->version   = 2015021633; // The current plugin version (Date: YYYYMMDDXX).",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9a39950b29ee6fc60bef72855c56ccc1d14abae",
      "candidate_info": {
        "commit_hash": "d9a39950b29ee6fc60bef72855c56ccc1d14abae",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d9a39950b29ee6fc60bef72855c56ccc1d14abae",
        "files": [
          "admin/tool/lp/amd/build/frameworkdelete.min.js",
          "admin/tool/lp/amd/build/frameworkmove.min.js",
          "admin/tool/lp/amd/src/competencyactions.js",
          "admin/tool/lp/amd/src/competencytree.js",
          "admin/tool/lp/amd/src/coursecompetencies.js",
          "admin/tool/lp/amd/src/frameworkdelete.js",
          "admin/tool/lp/amd/src/frameworkmove.js",
          "admin/tool/lp/amd/src/templatedelete.js",
          "admin/tool/lp/amd/src/templatemove.js",
          "admin/tool/lp/classes/api.php",
          "admin/tool/lp/classes/competency.php",
          "admin/tool/lp/classes/competency_framework.php",
          "admin/tool/lp/classes/course_competency.php",
          "admin/tool/lp/classes/external.php",
          "admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/output/course_competencies_page.php",
          "admin/tool/lp/classes/output/manage_competencies_page.php",
          "admin/tool/lp/classes/output/manage_competency_frameworks_page.php",
          "admin/tool/lp/classes/output/manage_templates_page.php",
          "admin/tool/lp/classes/output/renderer.php",
          "admin/tool/lp/classes/output/template_competencies_page.php",
          "admin/tool/lp/classes/persistent.php",
          "admin/tool/lp/classes/template.php",
          "admin/tool/lp/classes/template_competency.php",
          "admin/tool/lp/competencies.php",
          "admin/tool/lp/competencyframeworks.php",
          "admin/tool/lp/coursecompetencies.php",
          "admin/tool/lp/db/access.php",
          "admin/tool/lp/db/install.xml",
          "admin/tool/lp/db/services.php",
          "admin/tool/lp/editcompetency.php",
          "admin/tool/lp/editcompetencyframework.php",
          "admin/tool/lp/edittemplate.php",
          "admin/tool/lp/lang/en/tool_lp.php",
          "admin/tool/lp/learningplans.php",
          "admin/tool/lp/lib.php",
          "admin/tool/lp/pix/competency.png",
          "admin/tool/lp/pix/competency.svg",
          "admin/tool/lp/settings.php",
          "admin/tool/lp/styles.css",
          "admin/tool/lp/templates/competencies_move_tree.mustache",
          "admin/tool/lp/templates/competencies_tree.mustache",
          "admin/tool/lp/templates/competency_summary.mustache",
          "admin/tool/lp/templates/course_competencies_page.mustache",
          "admin/tool/lp/templates/link_course_competencies.mustache",
          "admin/tool/lp/templates/linked_courses_summary.mustache",
          "admin/tool/lp/templates/manage_competencies_page.mustache",
          "admin/tool/lp/templates/manage_competency_frameworks_page.mustache",
          "admin/tool/lp/templates/manage_templates_page.mustache",
          "admin/tool/lp/templates/no_frameworks_warning.mustache",
          "admin/tool/lp/tests/externallib_test.php",
          "admin/tool/lp/version.php",
          "lib/amd/src/dialogue.js",
          "lib/amd/src/url.js"
        ],
        "message": "MDL-49459 Learning plans: Support for creating and editing competency frameworks.\n\nThis includes an API (\\tool_lp\\competency_api), a set of web services, unit tests for the web services and a nice UI built as an admin tool.",
        "before_after_code_files": [
          "admin/tool/lp/amd/src/competencyactions.js||admin/tool/lp/amd/src/competencyactions.js",
          "admin/tool/lp/amd/src/competencytree.js||admin/tool/lp/amd/src/competencytree.js",
          "admin/tool/lp/amd/src/coursecompetencies.js||admin/tool/lp/amd/src/coursecompetencies.js",
          "admin/tool/lp/amd/src/frameworkdelete.js||admin/tool/lp/amd/src/frameworkdelete.js",
          "admin/tool/lp/amd/src/frameworkmove.js||admin/tool/lp/amd/src/frameworkmove.js",
          "admin/tool/lp/amd/src/templatedelete.js||admin/tool/lp/amd/src/templatedelete.js",
          "admin/tool/lp/amd/src/templatemove.js||admin/tool/lp/amd/src/templatemove.js",
          "admin/tool/lp/classes/api.php||admin/tool/lp/classes/api.php",
          "admin/tool/lp/classes/competency.php||admin/tool/lp/classes/competency.php",
          "admin/tool/lp/classes/competency_framework.php||admin/tool/lp/classes/competency_framework.php",
          "admin/tool/lp/classes/course_competency.php||admin/tool/lp/classes/course_competency.php",
          "admin/tool/lp/classes/external.php||admin/tool/lp/classes/external.php",
          "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/output/course_competencies_page.php||admin/tool/lp/classes/output/course_competencies_page.php",
          "admin/tool/lp/classes/output/manage_competencies_page.php||admin/tool/lp/classes/output/manage_competencies_page.php",
          "admin/tool/lp/classes/output/manage_competency_frameworks_page.php||admin/tool/lp/classes/output/manage_competency_frameworks_page.php",
          "admin/tool/lp/classes/output/manage_templates_page.php||admin/tool/lp/classes/output/manage_templates_page.php",
          "admin/tool/lp/classes/output/renderer.php||admin/tool/lp/classes/output/renderer.php",
          "admin/tool/lp/classes/output/template_competencies_page.php||admin/tool/lp/classes/output/template_competencies_page.php",
          "admin/tool/lp/classes/persistent.php||admin/tool/lp/classes/persistent.php",
          "admin/tool/lp/classes/template.php||admin/tool/lp/classes/template.php",
          "admin/tool/lp/classes/template_competency.php||admin/tool/lp/classes/template_competency.php",
          "admin/tool/lp/competencies.php||admin/tool/lp/competencies.php",
          "admin/tool/lp/competencyframeworks.php||admin/tool/lp/competencyframeworks.php",
          "admin/tool/lp/coursecompetencies.php||admin/tool/lp/coursecompetencies.php",
          "admin/tool/lp/db/access.php||admin/tool/lp/db/access.php",
          "admin/tool/lp/db/services.php||admin/tool/lp/db/services.php",
          "admin/tool/lp/editcompetency.php||admin/tool/lp/editcompetency.php",
          "admin/tool/lp/editcompetencyframework.php||admin/tool/lp/editcompetencyframework.php",
          "admin/tool/lp/edittemplate.php||admin/tool/lp/edittemplate.php",
          "admin/tool/lp/lang/en/tool_lp.php||admin/tool/lp/lang/en/tool_lp.php",
          "admin/tool/lp/learningplans.php||admin/tool/lp/learningplans.php",
          "admin/tool/lp/lib.php||admin/tool/lp/lib.php",
          "admin/tool/lp/settings.php||admin/tool/lp/settings.php",
          "admin/tool/lp/styles.css||admin/tool/lp/styles.css",
          "admin/tool/lp/templates/competencies_move_tree.mustache||admin/tool/lp/templates/competencies_move_tree.mustache",
          "admin/tool/lp/templates/competencies_tree.mustache||admin/tool/lp/templates/competencies_tree.mustache",
          "admin/tool/lp/templates/competency_summary.mustache||admin/tool/lp/templates/competency_summary.mustache",
          "admin/tool/lp/templates/course_competencies_page.mustache||admin/tool/lp/templates/course_competencies_page.mustache",
          "admin/tool/lp/templates/link_course_competencies.mustache||admin/tool/lp/templates/link_course_competencies.mustache",
          "admin/tool/lp/templates/linked_courses_summary.mustache||admin/tool/lp/templates/linked_courses_summary.mustache",
          "admin/tool/lp/templates/manage_competencies_page.mustache||admin/tool/lp/templates/manage_competencies_page.mustache",
          "admin/tool/lp/templates/manage_competency_frameworks_page.mustache||admin/tool/lp/templates/manage_competency_frameworks_page.mustache",
          "admin/tool/lp/templates/manage_templates_page.mustache||admin/tool/lp/templates/manage_templates_page.mustache",
          "admin/tool/lp/templates/no_frameworks_warning.mustache||admin/tool/lp/templates/no_frameworks_warning.mustache",
          "admin/tool/lp/tests/externallib_test.php||admin/tool/lp/tests/externallib_test.php",
          "admin/tool/lp/version.php||admin/tool/lp/version.php",
          "lib/amd/src/dialogue.js||lib/amd/src/dialogue.js",
          "lib/amd/src/url.js||lib/amd/src/url.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php"
          ],
          "candidate": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/lp/amd/src/competencyactions.js||admin/tool/lp/amd/src/competencyactions.js": [
          "File: admin/tool/lp/amd/src/competencyactions.js -> admin/tool/lp/amd/src/competencyactions.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: define(['jquery', 'core/url', 'core/templates', 'core/notification', 'core/str', 'core/ajax', 'core/dragdrop-reorder', 'core/tree', 'core/dialogue', 'core/menu'],",
          "25:        function($, url, templates, notification, str, ajax, dragdrop, ariatree, dialogue, menu) {",
          "28:     var treeModel = null;",
          "30:     var moveSource = null;",
          "31:     var moveTarget = null;",
          "33:     var addHandler = function(e) {",
          "34:         e.preventDefault();",
          "35:         var parent = $('[data-region=\"competencyactions\"]').data('competency');",
          "37:         var params = {",
          "38:             competencyframeworkid : treeModel.getCompetencyFrameworkId()",
          "39:         };",
          "41:         if (parent == null) {",
          "43:         } else {",
          "45:             params['parentid'] = parent.id;",
          "46:         }",
          "47:         var queryparams = $.param(params);",
          "48:         var actionurl = url.relativeUrl('/admin/tool/lp/editcompetency.php?' + queryparams);",
          "49:         window.location = actionurl;",
          "50:     };",
          "52:     var doMove = function() {",
          "53:         if (typeof (moveTarget) === \"undefined\") {",
          "55:             moveTarget = 0;",
          "56:         }",
          "58:         if (moveTarget == moveSource) {",
          "59:             return;",
          "60:         }",
          "61:         var frameworkid = $('[data-region=\"filtercompetencies\"]').data('frameworkid');",
          "62:         var requests = ajax.call([{",
          "63:             methodname: 'tool_lp_set_parent_competency',",
          "64:             args: { competencyid: moveSource, parentid: moveTarget }",
          "65:         }, {",
          "66:             methodname: 'tool_lp_data_for_competencies_manage_page',",
          "67:             args: { competencyframeworkid: frameworkid,",
          "68:                     search: $('[data-region=\"filtercompetencies\"] input').val() }",
          "69:         }]);",
          "70:         requests[1].done(reloadPage).fail(notification.exception);",
          "71:     };",
          "73:     var initMovePopup = function(popup) {",
          "74:         var movetree = new ariatree('[data-enhance=movetree]', function(target) {",
          "75:             moveTarget = $(target).data('id');",
          "76:         });",
          "78:         var body = $(popup.getContent());",
          "79:         body.on('click', '[data-action=\"move\"]', function(e) { popup.close(); doMove() });",
          "80:         body.on('click', '[data-action=\"cancel\"]', function(e) { popup.close(); });",
          "81:     };",
          "83:     var addCompetencyChildren = function(parent, competencies) {",
          "84:         var i;",
          "86:         for (i = 0; i < competencies.length; i++) {",
          "87:             if (competencies[i].parentid == parent.id) {",
          "88:                 parent.haschildren = true;",
          "89:                 competencies[i].children = [];",
          "90:                 competencies[i].haschildren = false;",
          "91:                 parent.children[parent.children.length] = competencies[i];",
          "92:                 addCompetencyChildren(competencies[i], competencies);",
          "93:             }",
          "94:         }",
          "95:     };",
          "97:     var moveHandler = function(e) {",
          "98:         e.preventDefault();",
          "99:         var competency = $('[data-region=\"competencyactions\"]').data('competency');",
          "102:         moveSource = competency.id;",
          "105:         var requests = ajax.call([",
          "106:             {",
          "107:                 methodname: 'tool_lp_search_competencies',",
          "108:                 args: {",
          "109:                     competencyframeworkid: competency.competencyframeworkid,",
          "110:                     searchtext: ''",
          "111:                 }",
          "112:             },{",
          "113:                 methodname: 'tool_lp_read_competency_framework',",
          "114:                 args: {",
          "115:                     id: competency.competencyframeworkid",
          "116:                 }",
          "117:             }",
          "118:         ]);",
          "121:         $.when.apply(null, requests).done(function(competencies, framework) {",
          "124:             var i, competenciestree = [];",
          "125:             for (i = 0; i < competencies.length; i++) {",
          "126:                 var onecompetency = competencies[i];",
          "127:                 if (onecompetency.parentid == 0) {",
          "128:                     onecompetency.children = [];",
          "129:                     onecompetency.haschildren = 0;",
          "130:                     competenciestree[competenciestree.length] = onecompetency;",
          "131:                     addCompetencyChildren(onecompetency, competencies);",
          "132:                 }",
          "133:             }",
          "135:             var strings = str.get_strings([",
          "136:                 { key: 'movecompetency', component: 'tool_lp', param: competency.shortname },",
          "137:                 { key: 'move', component: 'tool_lp' },",
          "138:                 { key: 'cancel', component: 'tool_lp' }",
          "139:             ]).done(function (strings) {",
          "141:                 var context = {",
          "142:                     framework: framework,",
          "143:                     competencies: competenciestree",
          "144:                 };",
          "146:                 templates.render('tool_lp/competencies_move_tree', context)",
          "147:                    .done(function(tree) {",
          "148:                        var popup = new dialogue(",
          "149:                            strings[0], // Move competency x.",
          "150:                            tree, // The move tree.",
          "151:                            initMovePopup",
          "152:                        );",
          "154:                    }).fail(notification.exception);",
          "156:            }).fail(notification.exception);",
          "158:         }).fail(notification.exception);",
          "160:     };",
          "162:     var editHandler = function(e) {",
          "163:         e.preventDefault();",
          "164:         var competency = $('[data-region=\"competencyactions\"]').data('competency');",
          "166:         var params = {",
          "167:             competencyframeworkid : treeModel.getCompetencyFrameworkId(),",
          "168:             id : competency.id,",
          "169:             parentid: competency.parentid",
          "170:         };",
          "172:         var queryparams = $.param(params);",
          "173:         var actionurl = url.relativeUrl('/admin/tool/lp/editcompetency.php?' + queryparams);",
          "174:         window.location = actionurl;",
          "175:     };",
          "177:     var reloadPage = function(context) {",
          "178:         templates.render('tool_lp/manage_competencies_page', context)",
          "179:             .done(function(newhtml, newjs) {",
          "180:                 $('[data-region=\"managecompetencies\"]').replaceWith(newhtml);",
          "181:                 templates.runTemplateJS(newjs);",
          "182:             })",
          "183:            .fail(notification.exception);",
          "184:     };",
          "186:     var updateSearchHandler = function(e) {",
          "187:         e.preventDefault();",
          "189:         var frameworkid = $('[data-region=\"filtercompetencies\"]').data('frameworkid');",
          "191:         var requests = ajax.call([{",
          "192:             methodname: 'tool_lp_data_for_competencies_manage_page',",
          "193:             args: { competencyframeworkid: frameworkid,",
          "194:                     search: $('[data-region=\"filtercompetencies\"] input').val() }",
          "195:         }]);",
          "196:         requests[0].done(reloadPage).fail(notification.exception);",
          "197:     };",
          "199:     var moveUpHandler = function() {",
          "201:         var competency = $('[data-region=\"competencyactions\"]').data('competency');",
          "202:         var requests = ajax.call([{",
          "203:             methodname: 'tool_lp_move_up_competency',",
          "204:             args: { id: competency.id }",
          "205:         }, {",
          "206:             methodname: 'tool_lp_data_for_competencies_manage_page',",
          "207:             args: { competencyframeworkid: competency.competencyframeworkid,",
          "208:                     search: $('[data-region=\"filtercompetencies\"] input').val() }",
          "209:         }]);",
          "210:         requests[1].done(reloadPage).fail(notification.exception);",
          "211:     };",
          "213:     var moveDownHandler = function() {",
          "215:         var competency = $('[data-region=\"competencyactions\"]').data('competency');",
          "216:         var requests = ajax.call([{",
          "217:             methodname: 'tool_lp_move_down_competency',",
          "218:             args: { id: competency.id }",
          "219:         }, {",
          "220:             methodname: 'tool_lp_data_for_competencies_manage_page',",
          "221:             args: { competencyframeworkid: competency.competencyframeworkid,",
          "222:                     search: $('[data-region=\"filtercompetencies\"] input').val() }",
          "223:         }]);",
          "224:         requests[1].done(reloadPage).fail(notification.exception);",
          "225:     };",
          "227:     var seeCoursesHandler = function(e) {",
          "228:         e.preventDefault();",
          "229:         var competency = $('[data-region=\"competencyactions\"]').data('competency');",
          "230:         var localthis = this;",
          "232:         var requests = ajax.call([{",
          "233:             methodname: 'tool_lp_list_courses_using_competency',",
          "234:             args: { id: competency.id }",
          "235:         }]);",
          "237:         requests[0].done(function(courses) {",
          "238:             var context = {",
          "239:                 courseviewurl: url.relativeUrl('/course/view.php'),",
          "240:                 courses: courses",
          "241:             };",
          "242:             templates.render('tool_lp/linked_courses_summary', context).done(function(html) {",
          "243:                 str.get_string('linkedcourses', 'tool_lp').done(function (linkedcourses) {",
          "244:                     var popup = new dialogue(",
          "245:                         linkedcourses, // Title.",
          "246:                         html, // The linked courses.",
          "247:                         initMovePopup",
          "248:                     );",
          "249:                 }).fail(notification.exception);",
          "250:             }).fail(notification.exception);",
          "251:         }).fail(notification.exception);",
          "252:     }",
          "254:     var doDelete = function() {",
          "256:         var competency = $('[data-region=\"competencyactions\"]').data('competency');",
          "257:         var requests = ajax.call([{",
          "258:             methodname: 'tool_lp_delete_competency',",
          "259:             args: { id: competency.id }",
          "260:         }, {",
          "261:             methodname: 'tool_lp_data_for_competencies_manage_page',",
          "262:             args: { competencyframeworkid: competency.competencyframeworkid,",
          "263:                     search: $('[data-region=\"filtercompetencies\"] input').val() }",
          "264:         }]);",
          "265:         requests[1].done(reloadPage).fail(notification.exception);",
          "266:     };",
          "268:     var deleteHandler = function(e) {",
          "269:         e.preventDefault();",
          "270:         var competency = $('[data-region=\"competencyactions\"]').data('competency');",
          "272:         templates.render('tool_lp/competency_summary', competency)",
          "273:            .done(function(html) {",
          "275:                var strings = str.get_strings([",
          "276:                    { key: 'confirm', component: 'tool_lp' },",
          "277:                    { key: 'deletecompetency', component: 'tool_lp', param: html },",
          "278:                    { key: 'delete', component: 'tool_lp' },",
          "279:                    { key: 'cancel', component: 'tool_lp' }",
          "280:                ]).done(function (strings) {",
          "281:                     notification.confirm(",
          "282:                        strings[0], // Confirm.",
          "283:                        strings[1], // Delete competency X?",
          "284:                        strings[2], // Delete.",
          "285:                        strings[3], // Cancel.",
          "286:                        doDelete",
          "287:                     );",
          "288:                }).fail(notification.exception);",
          "289:            }).fail(notification.exception);",
          "291:     };",
          "293:     var dragStart = function(e) {",
          "294:         e.originalEvent.dataTransfer.setData('text', $(e.target).data('id'));",
          "295:     };",
          "297:     var allowDrop = function(e) {",
          "298:         e.originalEvent.dataTransfer.dropEffect = 'move';",
          "299:         e.preventDefault();",
          "300:     };",
          "302:     var dragEnter = function(e) {",
          "303:         e.preventDefault();",
          "304:         $(this).addClass('currentdragtarget');",
          "305:     }",
          "307:     var dragLeave = function(e) {",
          "308:         e.preventDefault();",
          "309:         $(this).removeClass('currentdragtarget');",
          "310:     }",
          "312:     var dropOver = function(e) {",
          "313:         e.preventDefault();",
          "314:         moveSource = e.originalEvent.dataTransfer.getData('text');",
          "315:         moveTarget = $(e.target).data('id');",
          "316:         $(this).removeClass('currentdragtarget');",
          "318:         doMove();",
          "319:     };",
          "321:     return {",
          "322:         init: function(model) {",
          "323:             treeModel = model;",
          "324:             str.get_string('edit', 'core').done(function (edit) {",
          "325:                 menu.menu(edit, '.competencyactionsmenu');",
          "327:                 $('[data-region=\"competencyactions\"]').on('click', '[data-action=\"add\"]', addHandler);",
          "328:                 $('[data-region=\"competencyactions\"]').on('click', '[data-action=\"edit\"]', editHandler);",
          "329:                 $('[data-region=\"competencyactions\"]').on('click', '[data-action=\"delete\"]', deleteHandler);",
          "330:                 $('[data-region=\"competencyactions\"]').on('click', '[data-action=\"move\"]', moveHandler);",
          "331:                 $('[data-region=\"competencyactions\"]').on('click', '[data-action=\"moveup\"]', moveUpHandler);",
          "332:                 $('[data-region=\"competencyactions\"]').on('click', '[data-action=\"movedown\"]', moveDownHandler);",
          "333:                 $('[data-region=\"competencyactions\"]').on('click', '[data-action=\"linkedcourses\"]', seeCoursesHandler);",
          "335:             }).fail(notification.exception);",
          "336:             $('[data-region=\"filtercompetencies\"]').on('submit', updateSearchHandler);",
          "338:             $('[data-region=\"managecompetencies\"] li').on('dragstart', dragStart);",
          "339:             $('[data-region=\"managecompetencies\"] li').on('dragover', allowDrop);",
          "340:             $('[data-region=\"managecompetencies\"] li').on('dragenter', dragEnter);",
          "341:             $('[data-region=\"managecompetencies\"] li').on('dragleave', dragLeave);",
          "342:             $('[data-region=\"managecompetencies\"] li').on('drop', dropOver);",
          "343:         },",
          "345:         selectionChanged: function(node) {",
          "346:             var id = $(node).data('id');",
          "347:             if (typeof id === \"undefined\") {",
          "351:                 $('[data-region=\"competencyinfo\"]').html(node.clone().children().remove().end().text());",
          "352:                 $('[data-region=\"competencyactions\"]').data('competency', null);",
          "353:                 $('[data-region=\"competencyactionsmenu\"]').hide();",
          "354:                 $('[data-region=\"competencyactions\"] [data-action=\"add\"]').removeAttr(\"disabled\");",
          "355:             } else {",
          "356:                 var competency = treeModel.getCompetency(id);",
          "358:                 templates.render('tool_lp/competency_summary', competency)",
          "359:                    .done(function(html) {",
          "360:                         $('[data-region=\"competencyinfo\"]').html(html);",
          "361:                    }).fail(notification.exception);",
          "363:                 $('[data-region=\"competencyactions\"]').data('competency', competency);",
          "364:                 $('[data-region=\"competencyactions\"] [data-action=\"add\"]').removeAttr(\"disabled\");",
          "365:                 $('[data-region=\"competencyactionsmenu\"]').css('display', 'inline-block');",
          "367:             }",
          "368:         }",
          "369:     };",
          "370: });",
          "",
          "---------------"
        ],
        "admin/tool/lp/amd/src/competencytree.js||admin/tool/lp/amd/src/competencytree.js": [
          "File: admin/tool/lp/amd/src/competencytree.js -> admin/tool/lp/amd/src/competencytree.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:  define(['core/ajax', 'core/notification', 'jquery'], function(ajax, notification, $) {",
          "26:      var competencies = [];",
          "28:      var competencyFrameworkId = 0;",
          "30:      var loadCompetencies = function(searchtext) {",
          "31:          var deferred = $.Deferred();",
          "32:          searchtext = '';",
          "33:          var promises = ajax.call([{",
          "34:              methodname: 'tool_lp_search_competencies',",
          "35:              args: {",
          "36:                  searchtext: searchtext,",
          "37:                  competencyframeworkid: competencyFrameworkId",
          "38:              }",
          "39:          }]);",
          "40:          promises[0].done(function(result) {",
          "41:              competencies = [];",
          "42:              var i = 0;",
          "43:              for (i = 0; i < result.length; i++) {",
          "44:                  competencies[result[i].id] = result[i];",
          "45:              }",
          "46:              deferred.resolve(competencies);",
          "47:          }).fail(function(exception) {",
          "48:              deferred.reject(exception);",
          "49:          });",
          "51:          return deferred.promise();",
          "52:      };",
          "55:      return {",
          "57:         init: function(id) {",
          "58:             competencyFrameworkId = id;",
          "59:             loadCompetencies('').fail(notification.exception);",
          "60:         },",
          "62:         getCompetencyFrameworkId: function() {",
          "63:             return competencyFrameworkId;",
          "64:         },",
          "66:         getCompetency: function(id) {",
          "67:             return competencies[id];",
          "68:         },",
          "70:         listCompetencies: function() {",
          "71:             return competencies;",
          "72:         },",
          "74:         applySearch: function(searchtext) {",
          "75:             return loadCompetencies(searchtext);",
          "76:         }",
          "77:      };",
          "78:  });",
          "",
          "---------------"
        ],
        "admin/tool/lp/amd/src/coursecompetencies.js||admin/tool/lp/amd/src/coursecompetencies.js": [
          "File: admin/tool/lp/amd/src/coursecompetencies.js -> admin/tool/lp/amd/src/coursecompetencies.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: define(['jquery', 'core/notification', 'core/ajax', 'core/templates', 'core/dialogue', 'core/str', 'core/tree', 'core/dragdrop-reorder'],",
          "25:        function($, notification, ajax, templates, dialogue, str, ariatree, dragdrop) {",
          "32:     var coursecompetencies = function(courseid) {",
          "33:         this.courseid = courseid;",
          "34:         this.selectedCompetency = 0;",
          "35:         var localthis = this;",
          "36:         var loadframeworks = ajax.call([",
          "37:             { methodname: 'tool_lp_list_competency_frameworks', args: { filters: {}, sort: 'sortorder' } }",
          "38:         ]);",
          "40:         loadframeworks[0].done(function(frameworks) {",
          "41:             localthis.frameworks = frameworks;",
          "42:             if (frameworks.length == 0) {",
          "43:                 templates.render('tool_lp/no_frameworks_warning', {})",
          "44:                     .done(function(html) {",
          "45:                         $('[data-region=\"actions\"]').append(html);",
          "46:                         $('[data-region=\"actions\"] button').hide();",
          "47:                     }).fail(notification.exception);",
          "48:                 return;",
          "49:             }",
          "50:             $('[data-region=\"actions\"] button').show();",
          "51:             localthis.registerEvents();",
          "52:             localthis.registerDragDrop();",
          "53:         }).fail(notification.exception);",
          "54:     };",
          "56:     coursecompetencies.prototype.registerDragDrop = function() {",
          "57:         var localthis = this;",
          "59:         str.get_string('movecoursecompetency', 'tool_lp').done(",
          "60:             function(movestring) {",
          "61:                 dragdrop.dragdrop('movecoursecompetency',",
          "62:                                   movestring,",
          "63:                                   { identifier: 'movecoursecompetency', component: 'tool_lp'},",
          "64:                                   { identifier: 'movecoursecompetencyafter', component: 'tool_lp'},",
          "65:                                   'drag-samenode',",
          "66:                                   'drag-parentnode',",
          "67:                                   'drag-handlecontainer',",
          "68:                                   function(drag, drop) {",
          "69:                                       localthis.handleDrop.call(localthis, drag, drop);",
          "70:                                   });",
          "71:             }",
          "72:         ).fail(notification.exception);",
          "74:     };",
          "76:     coursecompetencies.prototype.handleDrop = function(drag, drop) {",
          "77:         var fromid = $(drag).data('id');",
          "78:         var toid = $(drop).data('id');",
          "79:         var localthis = this;",
          "81:         var requests = ajax.call([",
          "82:             { methodname: 'tool_lp_reorder_course_competency',",
          "83:                 args: { courseid: localthis.courseid, competencyidfrom: fromid, competencyidto: toid } }",
          "84:             ]);",
          "85:         requests[0].fail(notification.exception);",
          "87:     };",
          "89:     coursecompetencies.prototype.applyFilter = function(e) {",
          "90:         e.preventDefault();",
          "91:         var localthis = this;",
          "92:         var searchInput = $('[data-region=\"filtercompetencies\"] input');",
          "93:         var searchText = searchInput.val();",
          "94:         var framework = $('[data-action=\"chooseframework\"]');",
          "95:         var frameworkid = framework.val();",
          "97:         this.searchCompetencies().done(function (competencies) {",
          "98:             var i = 0;",
          "100:             var framework = localthis.frameworks[0];",
          "101:             for (i = 0; i < localthis.frameworks.length; i++) {",
          "102:                 if (localthis.frameworks[i].id == frameworkid) {",
          "103:                     framework = localthis.frameworks[i];",
          "104:                     framework.selected = true;",
          "105:                 } else {",
          "106:                     localthis.frameworks[i].selected = false;",
          "107:                 }",
          "108:             }",
          "109:             framework.selected = true;",
          "110:             var context = { framework: framework, frameworks: localthis.frameworks, competencies: competencies, search: searchText };",
          "111:             templates.render('tool_lp/link_course_competencies', context).done(function(html) {",
          "112:                 $('[data-region=\"competencylinktree\"]').replaceWith(html);",
          "113:                 localthis.initLinkCourseCompetencies();",
          "114:             }).fail(notification.exception);;",
          "115:         }).fail(notification.exception);",
          "116:     };",
          "118:     coursecompetencies.prototype.initLinkCourseCompetencies = function() {",
          "119:         var localthis = this;",
          "121:         var competencytree = new ariatree('[data-enhance=linktree]', function(target) {",
          "122:             localthis.selectedCompetency = target.data('id');",
          "123:         });",
          "125:         $('[data-action=\"chooseframework\"]').change(function(e) {",
          "126:             return localthis.applyFilter.call(localthis, e);",
          "127:         });",
          "129:         $('[data-region=\"filtercompetencies\"] button').click(function(e) {",
          "130:             $(e.target).attr('disabled', 'disabled');",
          "131:             return localthis.applyFilter.call(localthis, e);",
          "132:         });",
          "134:         $('[data-region=\"competencylinktree\"] [data-action=\"cancel\"]').click(function(e) {",
          "135:             $(e.target).attr('disabled', 'disabled');",
          "136:             e.preventDefault();",
          "137:             localthis.popup.close();",
          "138:         });",
          "139:         $('[data-region=\"competencylinktree\"] [data-action=\"add\"]').click(function(e) {",
          "140:             e.preventDefault();",
          "141:             if (!localthis.selectedCompetency) {",
          "142:                 return;",
          "143:             }",
          "145:             $(e.target).attr('disabled', 'disabled');",
          "147:             var requests = ajax.call([",
          "148:                 { methodname: 'tool_lp_add_competency_to_course',",
          "149:                   args: { courseid: localthis.courseid, competencyid: localthis.selectedCompetency } },",
          "150:                 { methodname: 'tool_lp_data_for_course_competencies_page',",
          "151:                   args: { courseid: localthis.courseid } }",
          "152:             ]);",
          "154:             requests[1].done(function(context) {",
          "155:                 templates.render('tool_lp/course_competencies_page', context).done(function(html, js) {",
          "156:                     localthis.popup.close();",
          "157:                     $('[data-region=\"coursecompetenciespage\"]').replaceWith(html);",
          "158:                     templates.runTemplateJS(js);",
          "159:                 }).fail(notification.exception);",
          "160:             }).fail(notification.exception);",
          "161:         });",
          "162:     };",
          "164:     coursecompetencies.prototype.registerEvents = function() {",
          "165:         var localthis = this;",
          "166:         $('[data-region=\"actions\"] button').click(function(e) {",
          "167:             return localthis.openCompetencySelector.call(localthis, e);",
          "168:         });",
          "169:         $('[data-action=\"delete-competency-link\"]').click(function(e) {",
          "170:             e.preventDefault();",
          "172:             var deleteid = $(e.target).closest('[data-id]').data('id');",
          "175:             var requests = ajax.call([",
          "176:                 { methodname: 'tool_lp_remove_competency_from_course',",
          "177:                   args: { courseid: localthis.courseid, competencyid: deleteid } },",
          "178:                 { methodname: 'tool_lp_data_for_course_competencies_page',",
          "179:                   args: { courseid: localthis.courseid } }",
          "180:             ]);",
          "182:             requests[1].done(function(context) {",
          "183:                 templates.render('tool_lp/course_competencies_page', context).done(function(html, js) {",
          "184:                     $('[data-region=\"coursecompetenciespage\"]').replaceWith(html);",
          "185:                     templates.runTemplateJS(js);",
          "186:                 }).fail(notification.exception);",
          "187:             }).fail(notification.exception);",
          "188:         });",
          "189:     };",
          "191:     coursecompetencies.prototype.addCompetencyChildren = function(parent, competencies) {",
          "192:         var i;",
          "194:         for (i = 0; i < competencies.length; i++) {",
          "195:             if (competencies[i].parentid == parent.id) {",
          "196:                 parent.haschildren = true;",
          "197:                 competencies[i].children = [];",
          "198:                 competencies[i].haschildren = false;",
          "199:                 parent.children[parent.children.length] = competencies[i];",
          "200:                 this.addCompetencyChildren(competencies[i], competencies);",
          "201:             }",
          "202:         }",
          "203:     };",
          "205:     coursecompetencies.prototype.searchCompetencies = function() {",
          "206:         var localthis = this;",
          "207:         var deferred = $.Deferred();",
          "208:         var searchInput = $('[data-region=\"filtercompetencies\"] input');",
          "209:         var searchText = '';",
          "210:         if (searchInput.length) {",
          "211:             searchText = searchInput.val();",
          "212:         }",
          "213:         var framework = $('[data-action=\"chooseframework\"]');",
          "214:         var frameworkid = localthis.frameworks[0].id;",
          "215:         if (framework.length) {",
          "216:             var frameworkid = framework.val();",
          "217:         }",
          "219:         var loadcompetencies = ajax.call([",
          "220:             { methodname: 'tool_lp_search_competencies', args: { searchtext: searchText, competencyframeworkid: frameworkid } }",
          "221:         ]);",
          "223:         loadcompetencies[0].done(function (competencies) {",
          "225:             var i, competenciestree = [];",
          "226:             for (i = 0; i < competencies.length; i++) {",
          "227:                 var onecompetency = competencies[i];",
          "228:                 if (onecompetency.parentid == 0) {",
          "229:                     onecompetency.children = [];",
          "230:                     onecompetency.haschildren = 0;",
          "231:                     competenciestree[competenciestree.length] = onecompetency;",
          "232:                     localthis.addCompetencyChildren(onecompetency, competencies);",
          "233:                 }",
          "234:             }",
          "235:             deferred.resolve(competenciestree);",
          "236:         }).fail(function (ex) { deferred.reject(ex); });",
          "238:         return deferred.promise();",
          "239:     };",
          "241:     coursecompetencies.prototype.openCompetencySelector = function(e) {",
          "242:         e.preventDefault();",
          "243:         var localthis = this;",
          "245:         this.searchCompetencies().done(function (competencies) {",
          "246:             var framework = localthis.frameworks[0];",
          "247:             framework.selected = true;",
          "248:             var context = { framework: framework, frameworks: localthis.frameworks, competencies: competencies, search: '' };",
          "249:             templates.render('tool_lp/link_course_competencies', context).done(function(html) {",
          "250:                 str.get_string('linkcoursecompetencies', 'tool_lp').done(function(title) {;",
          "251:                     localthis.popup = new dialogue(",
          "252:                         title,",
          "253:                         html, // The link UI.",
          "254:                         (function() {localthis.initLinkCourseCompetencies.call(localthis)})",
          "255:                     );",
          "256:                 }).fail(notification.exception);",
          "257:             }).fail(notification.exception);;",
          "258:         }).fail(notification.exception);",
          "259:     };",
          "261:     return /** @alias module:core/tree */ coursecompetencies;",
          "262: });",
          "",
          "---------------"
        ],
        "admin/tool/lp/amd/src/frameworkdelete.js||admin/tool/lp/amd/src/frameworkdelete.js": [
          "File: admin/tool/lp/amd/src/frameworkdelete.js -> admin/tool/lp/amd/src/frameworkdelete.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: define(['jquery', 'core/templates', 'core/ajax', 'core/notification', 'core/str'], function($, templates, ajax, notification, str) {",
          "28:     var frameworkid = 0;",
          "36:     var updatePage = function(newhtml, newjs) {",
          "37:         $('[data-region=\"managecompetencies\"]').replaceWith(newhtml);",
          "38:         templates.runTemplateJS(newjs);",
          "39:     };",
          "46:     var reloadList = function(context) {",
          "47:         templates.render('tool_lp/manage_competency_frameworks_page', context)",
          "48:             .done(updatePage)",
          "49:             .fail(notification.exception);",
          "50:     };",
          "55:     var doDelete = function() {",
          "58:         var requests = ajax.call([{",
          "59:             methodname: 'tool_lp_delete_competency_framework',",
          "60:             args: { id: frameworkid }",
          "61:         }, {",
          "62:             methodname: 'tool_lp_data_for_competency_frameworks_manage_page',",
          "63:             args: []",
          "64:         }]);",
          "65:         requests[1].done(reloadList).fail(notification.exception);",
          "66:     };",
          "72:     var confirmDelete = function(e) {",
          "73:         e.preventDefault();",
          "75:         var id = $(this).attr('data-frameworkid');",
          "76:         frameworkid = id;",
          "78:         var requests = ajax.call([{",
          "79:             methodname: 'tool_lp_read_competency_framework',",
          "80:             args: { id: frameworkid }",
          "81:         }]);",
          "83:         requests[0].done(function(framework) {",
          "84:             var strings = str.get_strings([",
          "85:                 { key: 'confirm', component: 'tool_lp' },",
          "86:                 { key: 'deletecompetencyframework', component: 'tool_lp', param: framework.shortname },",
          "87:                 { key: 'delete', component: 'tool_lp' },",
          "88:                 { key: 'cancel', component: 'tool_lp' }",
          "89:             ]).done(function (strings) {",
          "90:                 notification.confirm(",
          "91:                     strings[0], // Confirm.",
          "92:                     strings[1], // Delete competency framework X?",
          "93:                     strings[2], // Delete.",
          "94:                     strings[3], // Cancel.",
          "95:                     doDelete",
          "96:                 );",
          "97:             }).fail(notification.exception);",
          "98:         }).fail(notification.exception);",
          "100:     };",
          "103:     return {",
          "108:         init: function() {",
          "110:             $('[data-region=\"managecompetencies\"]').on(",
          "111:                 \"click\",",
          "112:                 '[data-action=\"deletecompetencyframework\"]',",
          "113:                 confirmDelete",
          "114:             );",
          "115:         }",
          "117:     };",
          "118: });",
          "",
          "---------------"
        ],
        "admin/tool/lp/amd/src/frameworkmove.js||admin/tool/lp/amd/src/frameworkmove.js": [
          "File: admin/tool/lp/amd/src/frameworkmove.js -> admin/tool/lp/amd/src/frameworkmove.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: define(['core/dragdrop-reorder',",
          "25:         'core/str',",
          "26:         'core/notification',",
          "27:         'jquery',",
          "28:         'core/ajax'],",
          "29:        function(dragdrop, str, notification, $, ajax) {",
          "38:     var handleDrop = function(drag, drop) {",
          "39:         var from = $(drag).data('frameworkid');",
          "40:         var to = $(drop).data('frameworkid');",
          "42:         var requests = ajax.call([{",
          "43:             methodname: 'tool_lp_reorder_competency_framework',",
          "44:             args: { from: from, to: to }",
          "45:         }]);",
          "46:         requests[0].fail(notification.exception);",
          "48:     };",
          "50:     return {",
          "55:         init: function() {",
          "57:             str.get_string('movecompetencyframework', 'tool_lp').done(",
          "58:                 function(movestring) {",
          "59:                     dragdrop.dragdrop('movecompetencyframework',",
          "60:                                       movestring,",
          "61:                                       { identifier: 'movecompetencyframework', component: 'tool_lp'},",
          "62:                                       { identifier: 'movecompetencyframeworkafter', component: 'tool_lp'},",
          "63:                                       'drag-samenode',",
          "64:                                       'drag-parentnode',",
          "65:                                       'drag-handlecontainer',",
          "66:                                       handleDrop);",
          "67:                 }",
          "68:             ).fail(notification.exception);",
          "69:         }",
          "71:     };",
          "72: });",
          "",
          "---------------"
        ],
        "admin/tool/lp/amd/src/templatedelete.js||admin/tool/lp/amd/src/templatedelete.js": [
          "File: admin/tool/lp/amd/src/templatedelete.js -> admin/tool/lp/amd/src/templatedelete.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: define(['jquery', 'core/templates', 'core/ajax', 'core/notification', 'core/str'], function($, templates, ajax, notification, str) {",
          "28:     var templateid = 0;",
          "36:     var updatePage = function(newhtml, newjs) {",
          "37:         $('[data-region=\"managetemplates\"]').replaceWith(newhtml);",
          "38:         templates.runTemplateJS(newjs);",
          "39:     };",
          "46:     var reloadList = function(context) {",
          "47:         templates.render('tool_lp/manage_templates_page', context)",
          "48:             .done(updatePage)",
          "49:             .fail(notification.exception);",
          "50:     };",
          "55:     var doDelete = function() {",
          "58:         var requests = ajax.call([{",
          "59:             methodname: 'tool_lp_delete_template',",
          "60:             args: { id: templateid }",
          "61:         }, {",
          "62:             methodname: 'tool_lp_data_for_templates_manage_page',",
          "63:             args: []",
          "64:         }]);",
          "65:         requests[1].done(reloadList).fail(notification.exception);",
          "66:     };",
          "72:     var confirmDelete = function(e) {",
          "73:         e.preventDefault();",
          "75:         var id = $(this).attr('data-templateid');",
          "76:         templateid = id;",
          "78:         var requests = ajax.call([{",
          "79:             methodname: 'tool_lp_read_template',",
          "80:             args: { id: templateid }",
          "81:         }]);",
          "83:         requests[0].done(function(template) {",
          "84:             var strings = str.get_strings([",
          "85:                 { key: 'confirm', component: 'tool_lp' },",
          "86:                 { key: 'deletetemplate', component: 'tool_lp', param: template.shortname },",
          "87:                 { key: 'delete', component: 'tool_lp' },",
          "88:                 { key: 'cancel', component: 'tool_lp' }",
          "89:             ]).done(function (strings) {",
          "90:                 notification.confirm(",
          "91:                     strings[0], // Confirm.",
          "92:                     strings[1], // Delete learning plan template X?",
          "93:                     strings[2], // Delete.",
          "94:                     strings[3], // Cancel.",
          "95:                     doDelete",
          "96:                 );",
          "97:             }).fail(notification.exception);",
          "98:         }).fail(notification.exception);",
          "100:     };",
          "103:     return {",
          "108:         init: function() {",
          "110:             $('[data-region=\"managetemplates\"]').on(",
          "111:                 \"click\",",
          "112:                 '[data-action=\"deletetemplate\"]',",
          "113:                 confirmDelete",
          "114:             );",
          "115:         }",
          "117:     };",
          "118: });",
          "",
          "---------------"
        ],
        "admin/tool/lp/amd/src/templatemove.js||admin/tool/lp/amd/src/templatemove.js": [
          "File: admin/tool/lp/amd/src/templatemove.js -> admin/tool/lp/amd/src/templatemove.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: define(['core/dragdrop-reorder',",
          "25:         'core/str',",
          "26:         'core/notification',",
          "27:         'jquery',",
          "28:         'core/ajax'],",
          "29:        function(dragdrop, str, notification, $, ajax) {",
          "38:     var handleDrop = function(drag, drop) {",
          "39:         var from = $(drag).data('templateid');",
          "40:         var to = $(drop).data('templateid');",
          "42:         var requests = ajax.call([{",
          "43:             methodname: 'tool_lp_reorder_template',",
          "44:             args: { from: from, to: to }",
          "45:         }]);",
          "46:         requests[0].fail(notification.exception);",
          "48:     };",
          "50:     return {",
          "55:         init: function() {",
          "57:             str.get_string('movetemplate', 'tool_lp').done(",
          "58:                 function(movestring) {",
          "59:                     dragdrop.dragdrop('movetemplate',",
          "60:                                       movestring,",
          "61:                                       { identifier: 'movetemplate', component: 'tool_lp'},",
          "62:                                       { identifier: 'movetemplateafter', component: 'tool_lp'},",
          "63:                                       'drag-samenode',",
          "64:                                       'drag-parentnode',",
          "65:                                       'drag-handlecontainer',",
          "66:                                       handleDrop);",
          "67:                 }",
          "68:             ).fail(notification.exception);",
          "69:         }",
          "71:     };",
          "72: });",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/api.php||admin/tool/lp/classes/api.php": [
          "File: admin/tool/lp/classes/api.php -> admin/tool/lp/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp;",
          "26: use stdClass;",
          "27: use context_system;",
          "28: use context_course;",
          "29: use coding_exception;",
          "30: use required_capability_exception;",
          "38: class api {",
          "48:     public static function create_competency(stdClass $record) {",
          "50:         require_capability('tool/lp:competencymanage', context_system::instance());",
          "53:         $competency = new competency(0, $record);",
          "54:         $id = $competency->create();",
          "55:         return $competency;",
          "56:     }",
          "66:     public static function delete_competency($id) {",
          "68:         require_capability('tool/lp:competencymanage', context_system::instance());",
          "71:         $competency = new competency();",
          "72:         $competency->set_id($id);",
          "73:         return $competency->delete();",
          "74:     }",
          "84:     public static function move_down_competency($id) {",
          "86:         require_capability('tool/lp:competencymanage', context_system::instance());",
          "89:         $current = new competency($id);",
          "91:         $max = self::count_competencies(array('parentid' => $current->get_parentid(),",
          "92:                                              'competencyframeworkid' => $current->get_competencyframeworkid()));",
          "93:         if ($max > 0) {",
          "94:             $max--;",
          "95:         }",
          "97:         $sortorder = $current->get_sortorder();",
          "98:         if ($sortorder >= $max) {",
          "99:             return false;",
          "100:         }",
          "101:         $sortorder = $sortorder + 1;",
          "102:         $current->set_sortorder($sortorder);",
          "104:         $filters = array('parentid' => $current->get_parentid(),",
          "105:                          'competencyframeworkid' => $current->get_competencyframeworkid(),",
          "106:                          'sortorder' => $sortorder);",
          "107:         $children = self::list_competencies($filters, 'id');",
          "108:         foreach ($children as $needtoswap) {",
          "109:             $needtoswap->set_sortorder($sortorder - 1);",
          "110:             $needtoswap->update();",
          "111:         }",
          "114:         return $current->update();",
          "115:     }",
          "125:     public static function move_up_competency($id) {",
          "127:         require_capability('tool/lp:competencymanage', context_system::instance());",
          "130:         $current = new competency($id);",
          "132:         $sortorder = $current->get_sortorder();",
          "133:         if ($sortorder == 0) {",
          "134:             return false;",
          "135:         }",
          "137:         $sortorder = $sortorder - 1;",
          "138:         $current->set_sortorder($sortorder);",
          "140:         $filters = array('parentid' => $current->get_parentid(),",
          "141:                          'competencyframeworkid' => $current->get_competencyframeworkid(),",
          "142:                          'sortorder' => $sortorder);",
          "143:         $children = self::list_competencies($filters, 'id');",
          "144:         foreach ($children as $needtoswap) {",
          "145:             $needtoswap->set_sortorder($sortorder + 1);",
          "146:             $needtoswap->update();",
          "147:         }",
          "150:         return $current->update();",
          "151:     }",
          "162:     public static function set_parent_competency($id, $newparentid) {",
          "164:         require_capability('tool/lp:competencymanage', context_system::instance());",
          "169:         $current = new competency($id);",
          "170:         $parentframeworkid = $current->get_competencyframeworkid();",
          "171:         $parentpath = '/0/';",
          "172:         if ($newparentid) {",
          "173:             $parent = new competency($newparentid);",
          "174:             $parentframeworkid = $parent->get_competencyframeworkid();",
          "175:             $parentpath = $parent->get_path();",
          "176:         }",
          "178:         if ($parentframeworkid != $current->get_competencyframeworkid()) {",
          "180:             throw new coding_exception('Moving competencies is only supported within the same framework.');",
          "181:         }",
          "185:         $newparents = explode('/', $parentpath);",
          "186:         if (in_array($current->get_id(), $newparents)) {",
          "187:             $filters = array('parentid' => $current->get_id(), 'competencyframeworkid' => $current->get_competencyframeworkid());",
          "188:             $children = self::list_competencies($filters, 'id');",
          "190:             foreach ($children as $child) {",
          "191:                 $child->set_parentid($current->get_parentid());",
          "192:                 $child->update();",
          "193:             }",
          "194:         }",
          "196:         $current->set_parentid($newparentid);",
          "199:         return $current->update();",
          "200:     }",
          "210:     public static function update_competency($record) {",
          "212:         require_capability('tool/lp:competencymanage', context_system::instance());",
          "215:         $current = new competency($record->id);",
          "216:         $record->sortorder = $current->get_sortorder();",
          "217:         $record->parentid = $current->get_parentid();",
          "218:         $record->competencyframeworkid = $current->get_competencyframeworkid();",
          "221:         $competency = new competency(0, $record);",
          "222:         return $competency->update();",
          "223:     }",
          "233:     public static function read_competency($id) {",
          "235:         $context = context_system::instance();",
          "236:         if (!has_any_capability(array('tool/lp:competencyread', 'tool/lp:competencymanage'), $context)) {",
          "237:              throw new required_capability_exception($context, 'tool/lp:competencyread', 'nopermission', '');",
          "238:         }",
          "241:         return new competency($id);",
          "242:     }",
          "253:     public static function search_competencies($textsearch, $competencyframeworkid) {",
          "255:         $context = context_system::instance();",
          "256:         if (!has_any_capability(array('tool/lp:competencyread', 'tool/lp:competencymanage'), $context)) {",
          "257:              throw new required_capability_exception($context, 'tool/lp:competencyread', 'nopermission', '');",
          "258:         }",
          "261:         $competency = new competency();",
          "262:         return $competency->search($textsearch, $competencyframeworkid);",
          "263:     }",
          "277:     public static function list_competencies($filters, $sort, $order, $skip, $limit) {",
          "279:         $context = context_system::instance();",
          "280:         if (!has_any_capability(array('tool/lp:competencyread', 'tool/lp:competencymanage'), $context)) {",
          "281:              throw new required_capability_exception($context, 'tool/lp:competencyread', 'nopermission', '');",
          "282:         }",
          "285:         $competency = new competency();",
          "286:         return $competency->get_records($filters, $sort, $order, $skip, $limit);",
          "287:     }",
          "297:     public static function count_competencies($filters) {",
          "299:         $context = context_system::instance();",
          "300:         if (!has_any_capability(array('tool/lp:competencyread', 'tool/lp:competencymanage'), $context)) {",
          "301:              throw new required_capability_exception($context, 'tool/lp:competencyread', 'nopermission', '');",
          "302:         }",
          "305:         $competency = new competency();",
          "306:         return $competency->count_records($filters);",
          "307:     }",
          "317:     public static function create_framework(stdClass $record) {",
          "319:         require_capability('tool/lp:competencymanage', context_system::instance());",
          "322:         $framework = new competency_framework(0, $record);",
          "323:         $id = $framework->create();",
          "324:         return $framework;",
          "325:     }",
          "335:     public static function delete_framework($id) {",
          "337:         require_capability('tool/lp:competencymanage', context_system::instance());",
          "340:         $framework = new competency_framework();",
          "341:         $framework->set_id($id);",
          "342:         return $framework->delete();",
          "343:     }",
          "353:     public static function update_framework($record) {",
          "355:         require_capability('tool/lp:competencymanage', context_system::instance());",
          "358:         $framework = new competency_framework(0, $record);",
          "359:         return $framework->update();",
          "360:     }",
          "370:     public static function read_framework($id) {",
          "372:         $context = context_system::instance();",
          "373:         if (!has_any_capability(array('tool/lp:competencyread', 'tool/lp:competencymanage'), $context)) {",
          "374:              throw new required_capability_exception($context, 'tool/lp:competencyread', 'nopermission', '');",
          "375:         }",
          "378:         return new competency_framework($id);",
          "379:     }",
          "391:     public static function reorder_framework($frameworkidfrom, $frameworkidto) {",
          "392:         require_capability('tool/lp:competencymanage', context_system::instance());",
          "393:         $down = true;",
          "394:         $frameworkfrom = new competency_framework($frameworkidfrom);",
          "395:         $frameworkto = new competency_framework($frameworkidto);",
          "397:         $all = self::list_frameworks(array(), 'sortorder', 'ASC', 0, 0);",
          "399:         if ($frameworkfrom->get_sortorder() > $frameworkto->get_sortorder()) {",
          "401:             $down = false;",
          "402:         }",
          "404:         foreach ($all as $id => $framework) {",
          "405:             $sort = $framework->get_sortorder();",
          "406:             if ($down && $sort >  $frameworkfrom->get_sortorder() && $sort <= $frameworkto->get_sortorder()) {",
          "407:                 $framework->set_sortorder($framework->get_sortorder() - 1);",
          "408:                 $framework->update();",
          "409:             } else if (!$down && $sort >=  $frameworkto->get_sortorder() && $sort < $frameworkfrom->get_sortorder()) {",
          "410:                 $framework->set_sortorder($framework->get_sortorder() + 1);",
          "411:                 $framework->update();",
          "412:             }",
          "413:         }",
          "414:         $frameworkfrom->set_sortorder($frameworkto->get_sortorder());",
          "415:         return $frameworkfrom->update();",
          "416:     }",
          "430:     public static function list_frameworks($filters, $sort, $order, $skip, $limit) {",
          "432:         $context = context_system::instance();",
          "433:         if (!has_any_capability(array('tool/lp:competencyread', 'tool/lp:competencymanage'), $context)) {",
          "434:              throw new required_capability_exception($context, 'tool/lp:competencyread', 'nopermission', '');",
          "435:         }",
          "438:         $framework = new competency_framework();",
          "439:         return $framework->get_records($filters, $sort, $order, $skip, $limit);",
          "440:     }",
          "450:     public static function count_frameworks($filters) {",
          "452:         $context = context_system::instance();",
          "453:         if (!has_any_capability(array('tool/lp:competencyread', 'tool/lp:competencymanage'), $context)) {",
          "454:              throw new required_capability_exception($context, 'tool/lp:competencyread', 'nopermission', '');",
          "455:         }",
          "458:         $framework = new competency_framework();",
          "459:         return $framework->count_records($filters);",
          "460:     }",
          "468:     public static function count_courses_using_competency($competencyid) {",
          "471:         $coursecompetency = new course_competency();",
          "472:         $courses = $coursecompetency->list_courses_min($competencyid);",
          "473:         $count = 0;",
          "475:         foreach ($courses as $course) {",
          "476:             $context = context_course::instance($course->id);",
          "477:             $capabilities = array('tool/lp:coursecompetencyread', 'tool/lp:coursecompetencymanage');",
          "478:             if (!has_any_capability($capabilities, $context)) {",
          "479:                 continue;",
          "480:             }",
          "482:             if (!$course->visible && !has_capability('course:viewhidden', $context)) {",
          "483:                 continue;",
          "484:             }",
          "486:             $count++;",
          "487:         }",
          "489:         return $count;",
          "490:     }",
          "498:     public static function list_courses_using_competency($competencyid) {",
          "501:         $coursecompetency = new course_competency();",
          "502:         $courses = $coursecompetency->list_courses($competencyid);",
          "503:         $count = 0;",
          "504:         $result = array();",
          "506:         foreach ($courses as $id => $course) {",
          "507:             $context = context_course::instance($course->id);",
          "508:             $capabilities = array('tool/lp:coursecompetencyread', 'tool/lp:coursecompetencymanage');",
          "509:             if (!has_any_capability($capabilities, $context)) {",
          "510:                 unset($courses[$id]);",
          "511:                 continue;",
          "512:             }",
          "514:             if (!$course->visible && !has_capability('course:viewhidden', $context)) {",
          "515:                 unset($courses[$id]);",
          "516:                 continue;",
          "517:             }",
          "518:             $course->fullnameformatted = format_text($course->fullname, array('context' => $context));",
          "519:             $course->shortnameformatted = format_text($course->shortname, array('context' => $context));",
          "520:             array_push($result, $course);",
          "521:         }",
          "523:         return $result;",
          "524:     }",
          "532:     public static function count_competencies_in_course($courseid) {",
          "534:         $context = context_course::instance($courseid);",
          "535:         $onlyvisible = 1;",
          "537:         $capabilities = array('tool/lp:coursecompetencyread', 'tool/lp:coursecompetencymanage');",
          "538:         if (!has_any_capability($capabilities, $context)) {",
          "539:              throw new required_capability_exception($context, 'tool/lp:coursecompetencyread', 'nopermission', '');",
          "540:         }",
          "542:         if (has_capability('tool/lp:coursecompetencymanage', $context)) {",
          "543:             $onlyvisible = 0;",
          "544:         }",
          "547:         $coursecompetency = new course_competency();",
          "548:         return $coursecompetency->count_competencies($courseid, $onlyvisible);",
          "549:     }",
          "557:     public static function list_competencies_in_course($courseid) {",
          "559:         $context = context_course::instance($courseid);",
          "560:         $onlyvisible = 1;",
          "562:         $capabilities = array('tool/lp:coursecompetencyread', 'tool/lp:coursecompetencymanage');",
          "563:         if (!has_any_capability($capabilities, $context)) {",
          "564:              throw new required_capability_exception($context, 'tool/lp:coursecompetencyread', 'nopermission', '');",
          "565:         }",
          "567:         if (has_capability('tool/lp:coursecompetencymanage', $context)) {",
          "568:             $onlyvisible = 0;",
          "569:         }",
          "572:         $coursecompetency = new course_competency();",
          "573:         return $coursecompetency->list_competencies($courseid, $onlyvisible);",
          "574:     }",
          "583:     public static function add_competency_to_course($courseid, $competencyid) {",
          "585:         $context = context_course::instance($courseid);",
          "587:         if (!has_capability('tool/lp:coursecompetencymanage', $context)) {",
          "588:              throw new required_capability_exception($context, 'tool/lp:coursecompetencymanage', 'nopermission', '');",
          "589:         }",
          "590:         $record = new stdClass();",
          "591:         $record->courseid = $courseid;",
          "592:         $record->competencyid = $competencyid;",
          "594:         $competency = new competency();",
          "595:         $competency->set_id($competencyid);",
          "596:         if (!$competency->read()) {",
          "597:              throw new coding_exception('The competency does not exist');",
          "598:         }",
          "600:         $coursecompetency = new course_competency();",
          "601:         $exists = $coursecompetency->get_records(array('courseid' => $courseid, 'competencyid' => $competencyid));",
          "602:         if (!$exists) {",
          "603:             $coursecompetency->from_record($record);",
          "604:             if ($coursecompetency->create()) {",
          "605:                 return true;",
          "606:             }",
          "607:         }",
          "608:         return false;",
          "609:     }",
          "618:     public static function remove_competency_from_course($courseid, $competencyid) {",
          "620:         $context = context_course::instance($courseid);",
          "622:         if (!has_capability('tool/lp:coursecompetencymanage', $context)) {",
          "623:              throw new required_capability_exception($context, 'tool/lp:coursecompetencymanage', 'nopermission', '');",
          "624:         }",
          "625:         $record = new stdClass();",
          "626:         $record->courseid = $courseid;",
          "627:         $record->competencyid = $competencyid;",
          "629:         $competency = new competency();",
          "630:         $competency->set_id($competencyid);",
          "631:         if (!$competency->read()) {",
          "632:              throw new coding_exception('The competency does not exist');",
          "633:         }",
          "635:         $coursecompetency = new course_competency();",
          "636:         $exists = $coursecompetency->get_records(array('courseid' => $courseid, 'competencyid' => $competencyid));",
          "637:         if ($exists) {",
          "638:             $competency = array_pop($exists);",
          "639:             return $competency->delete();",
          "640:         }",
          "641:         return false;",
          "642:     }",
          "654:     public static function reorder_course_competency($courseid, $competencyidfrom, $competencyidto) {",
          "656:         $context = context_course::instance($courseid);",
          "658:         if (!has_capability('tool/lp:coursecompetencymanage', $context)) {",
          "659:              throw new required_capability_exception($context, 'tool/lp:coursecompetencymanage', 'nopermission', '');",
          "660:         }",
          "662:         $down = true;",
          "663:         $coursecompetency = new course_competency();",
          "664:         $matches = $coursecompetency->get_records(array('courseid' => $courseid, 'competencyid' => $competencyidfrom));",
          "665:         if (count($matches) == 0) {",
          "666:              throw new coding_exception('The link does not exist');",
          "667:         }",
          "669:         $competencyfrom = array_pop($matches);",
          "670:         $matches = $coursecompetency->get_records(array('courseid' => $courseid, 'competencyid' => $competencyidto));",
          "671:         if (count($matches) == 0) {",
          "672:              throw new coding_exception('The link does not exist');",
          "673:         }",
          "675:         $competencyto = array_pop($matches);",
          "677:         $all = $coursecompetency->get_records(array('courseid' => $courseid), 'sortorder', 'ASC', 0, 0);",
          "679:         if ($competencyfrom->get_sortorder() > $competencyto->get_sortorder()) {",
          "681:             $down = false;",
          "682:         }",
          "684:         foreach ($all as $id => $coursecompetency) {",
          "685:             $sort = $coursecompetency->get_sortorder();",
          "686:             if ($down && $sort > $competencyfrom->get_sortorder() && $sort <= $competencyto->get_sortorder()) {",
          "687:                 $coursecompetency->set_sortorder($coursecompetency->get_sortorder() - 1);",
          "688:                 $coursecompetency->update();",
          "689:             } else if (!$down && $sort >= $competencyto->get_sortorder() && $sort < $competencyfrom->get_sortorder()) {",
          "690:                 $coursecompetency->set_sortorder($coursecompetency->get_sortorder() + 1);",
          "691:                 $coursecompetency->update();",
          "692:             }",
          "693:         }",
          "694:         $competencyfrom->set_sortorder($competencyto->get_sortorder());",
          "695:         return $competencyfrom->update();",
          "696:     }",
          "706:     public static function create_template(stdClass $record) {",
          "708:         require_capability('tool/lp:templatemanage', context_system::instance());",
          "711:         $template = new template(0, $record);",
          "712:         $id = $template->create();",
          "713:         return $template;",
          "714:     }",
          "724:     public static function delete_template($id) {",
          "726:         require_capability('tool/lp:templatemanage', context_system::instance());",
          "729:         $template = new template();",
          "730:         $template->set_id($id);",
          "731:         return $template->delete();",
          "732:     }",
          "742:     public static function update_template($record) {",
          "744:         require_capability('tool/lp:templatemanage', context_system::instance());",
          "747:         $template = new template(0, $record);",
          "748:         return $template->update();",
          "749:     }",
          "759:     public static function read_template($id) {",
          "761:         $context = context_system::instance();",
          "762:         $caps = array('tool/lp:templateread', 'tool/lp:templatemanage');",
          "763:         if (!has_any_capability($caps, $context)) {",
          "764:              throw new required_capability_exception($context, 'tool/lp:templateread', 'nopermission', '');",
          "765:         }",
          "768:         return new template($id);",
          "769:     }",
          "781:     public static function reorder_template($templateidfrom, $templateidto) {",
          "782:         require_capability('tool/lp:templatemanage', context_system::instance());",
          "783:         $down = true;",
          "784:         $templatefrom = new template($templateidfrom);",
          "785:         $templateto = new template($templateidto);",
          "787:         $all = self::list_templates(array(), 'sortorder', 'ASC', 0, 0);",
          "789:         if ($templatefrom->get_sortorder() > $templateto->get_sortorder()) {",
          "791:             $down = false;",
          "792:         }",
          "794:         foreach ($all as $id => $template) {",
          "795:             $sort = $template->get_sortorder();",
          "796:             if ($down && $sort >  $templatefrom->get_sortorder() && $sort <= $templateto->get_sortorder()) {",
          "797:                 $template->set_sortorder($template->get_sortorder() - 1);",
          "798:                 $template->update();",
          "799:             } else if (!$down && $sort >=  $templateto->get_sortorder() && $sort < $templatefrom->get_sortorder()) {",
          "800:                 $template->set_sortorder($template->get_sortorder() + 1);",
          "801:                 $template->update();",
          "802:             }",
          "803:         }",
          "804:         $templatefrom->set_sortorder($templateto->get_sortorder());",
          "805:         return $templatefrom->update();",
          "806:     }",
          "820:     public static function list_templates($filters, $sort, $order, $skip, $limit) {",
          "822:         $context = context_system::instance();",
          "823:         $caps = array('tool/lp:templateread', 'tool/lp:templatemanage');",
          "824:         if (!has_any_capability($caps, $context)) {",
          "825:              throw new required_capability_exception($context, 'tool/lp:templateread', 'nopermission', '');",
          "826:         }",
          "829:         $template = new template();",
          "830:         return $template->get_records($filters, $sort, $order, $skip, $limit);",
          "831:     }",
          "841:     public static function count_templates($filters) {",
          "843:         $context = context_system::instance();",
          "844:         $caps = array('tool/lp:templateread', 'tool/lp:templatemanage');",
          "845:         if (!has_any_capability($caps, $context)) {",
          "846:              throw new required_capability_exception($context, 'tool/lp:templateread', 'nopermission', '');",
          "847:         }",
          "850:         $template = new template();",
          "851:         return $template->count_records($filters);",
          "852:     }",
          "860:     public static function count_templates_using_competency($competencyid) {",
          "862:         $context = context_system::instance();",
          "863:         $onlyvisible = 1;",
          "865:         $capabilities = array('tool/lp:templateread', 'tool/lp:templatemanage');",
          "866:         if (!has_any_capability($capabilities, $context)) {",
          "867:              throw new required_capability_exception($context, 'tool/lp:templateread', 'nopermission', '');",
          "868:         }",
          "870:         if (has_capability('tool/lp:templatemanage', $context)) {",
          "871:             $onlyvisible = 0;",
          "872:         }",
          "875:         $templatecompetency = new template_competency();",
          "876:         return $templatecompetency->count_competencies($templateid, $onlyvisible);",
          "877:     }",
          "885:     public static function list_templates_using_competency($competencyid) {",
          "887:         $context = context_system::instance();",
          "888:         $onlyvisible = 1;",
          "890:         $capabilities = array('tool/lp:templateread', 'tool/lp:templatemanage');",
          "891:         if (!has_any_capability($capabilities, $context)) {",
          "892:              throw new required_capability_exception($context, 'tool/lp:templateread', 'nopermission', '');",
          "893:         }",
          "895:         if (has_capability('tool/lp:templatemanage', $context)) {",
          "896:             $onlyvisible = 0;",
          "897:         }",
          "900:         $templatecompetency = new template_competency();",
          "901:         return $templatecompetency->list_templates($competencyid, $onlyvisible);",
          "903:     }",
          "911:     public static function count_competencies_in_template($templateid) {",
          "913:         $context = context_system::instance();",
          "914:         $onlyvisible = 1;",
          "916:         $capabilities = array('tool/lp:templateread', 'tool/lp:templatemanage');",
          "917:         if (!has_any_capability($capabilities, $context)) {",
          "918:              throw new required_capability_exception($context, 'tool/lp:templateread', 'nopermission', '');",
          "919:         }",
          "921:         if (has_capability('tool/lp:templatemanage', $context)) {",
          "922:             $onlyvisible = 0;",
          "923:         }",
          "926:         $templatecompetency = new template_competency();",
          "927:         return $templatecompetency->count_competencies($templateid, $onlyvisible);",
          "928:     }",
          "936:     public static function list_competencies_in_template($templateid) {",
          "938:         $context = context_system::instance();",
          "939:         $onlyvisible = 1;",
          "941:         $capabilities = array('tool/lp:templateread', 'tool/lp:templatemanage');",
          "942:         if (!has_any_capability($capabilities, $context)) {",
          "943:              throw new required_capability_exception($context, 'tool/lp:templateread', 'nopermission', '');",
          "944:         }",
          "946:         if (has_capability('tool/lp:templatemanage', $context)) {",
          "947:             $onlyvisible = 0;",
          "948:         }",
          "951:         $templatecompetency = new template_competency();",
          "952:         return $templatecompetency->list_competencies($templateid, $onlyvisible);",
          "953:     }",
          "962:     public static function add_competency_to_template($templateid, $competencyid) {",
          "964:         $context = context_course::instance($courseid);",
          "966:         require_capability('tool/lp:templatemanage', $context);",
          "968:         $record = new stdClass();",
          "969:         $record->templateid = $templateid;",
          "970:         $record->competencyid = $competencyid;",
          "972:         $competency = new competency();",
          "973:         $competency->set_id($competencyid);",
          "974:         if (!$competency->read()) {",
          "975:              throw new coding_exception('The competency does not exist');",
          "976:         }",
          "978:         $templatecompetency = new template_competency();",
          "979:         $exists = $templatecompetency->get_records(array('templateid' => $templateid, 'competencyid' => $competencyid));",
          "980:         if (!$exists) {",
          "981:             $templatecompetency->from_record($record);",
          "982:             if ($templatecompetency->create()) {",
          "983:                 return true;",
          "984:             }",
          "985:         }",
          "986:         return false;",
          "987:     }",
          "996:     public static function remove_competency_from_template($templateid, $competencyid) {",
          "998:         $context = context_system::instance();",
          "1000:         require_capability('tool/lp:templatemanage', $context);",
          "1002:         $record = new stdClass();",
          "1003:         $record->templateid = $templateid;",
          "1004:         $record->competencyid = $competencyid;",
          "1006:         $competency = new competency();",
          "1007:         $competency->set_id($competencyid);",
          "1008:         if (!$competency->read()) {",
          "1009:              throw new coding_exception('The competency does not exist');",
          "1010:         }",
          "1012:         $template = new template();",
          "1013:         $template->set_id($template);",
          "1014:         if (!$template->read()) {",
          "1015:              throw new coding_exception('The learning plan template does not exist');",
          "1016:         }",
          "1018:         $templatecompetency = new template_competency();",
          "1019:         $exists = $templatecompetency->get_records(array('templateid' => $templateid, 'competencyid' => $competencyid));",
          "1020:         if ($exists) {",
          "1021:             $link = array_pop($exists);",
          "1022:             return $link->delete();",
          "1023:         }",
          "1024:         return false;",
          "1025:     }",
          "1026: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/competency.php||admin/tool/lp/classes/competency.php": [
          "File: admin/tool/lp/classes/competency.php -> admin/tool/lp/classes/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp;",
          "26: use stdClass;",
          "27: use context_system;",
          "35: class competency extends persistent {",
          "38:     private $shortname = '';",
          "41:     private $idnumber = '';",
          "44:     private $description = '';",
          "47:     private $descriptionformat = 0;",
          "50:     private $sortorder = 0;",
          "53:     private $visible = true;",
          "56:     private $parentid = 0;",
          "59:     private $path = '/0/';",
          "62:     private $competencyframeworkid = 0;",
          "69:     public function get_table_name() {",
          "70:         return 'tool_lp_competency';",
          "71:     }",
          "78:     public function get_shortname() {",
          "79:         return $this->shortname;",
          "80:     }",
          "87:     public function set_shortname($shortname) {",
          "88:         $this->shortname = $shortname;",
          "89:     }",
          "96:     public function get_descriptionformat() {",
          "97:         return $this->descriptionformat;",
          "98:     }",
          "105:     public function set_descriptionformat($descriptionformat) {",
          "106:         $this->descriptionformat = $descriptionformat;",
          "107:     }",
          "114:     public function get_idnumber() {",
          "115:         return $this->idnumber;",
          "116:     }",
          "123:     public function set_idnumber($idnumber) {",
          "124:         $this->idnumber = $idnumber;",
          "125:     }",
          "132:     public function get_description() {",
          "133:         return $this->description;",
          "134:     }",
          "141:     public function set_description($description) {",
          "142:         $this->description = $description;",
          "143:     }",
          "150:     public function get_sortorder() {",
          "151:         return $this->sortorder;",
          "152:     }",
          "159:     public function set_sortorder($sortorder) {",
          "160:         $this->sortorder = $sortorder;",
          "161:     }",
          "168:     public function get_visible() {",
          "169:         return $this->visible;",
          "170:     }",
          "177:     public function set_visible($visible) {",
          "178:         $this->visible = $visible;",
          "179:     }",
          "186:     public function get_parentid() {",
          "187:         return $this->parentid;",
          "188:     }",
          "195:     public function set_parentid($id) {",
          "196:         $this->parentid = $id;",
          "197:     }",
          "204:     public function get_path() {",
          "205:         return $this->path;",
          "206:     }",
          "213:     public function set_path($path) {",
          "214:         $this->path = $path;",
          "215:     }",
          "222:     public function get_competencyframeworkid() {",
          "223:         return $this->competencyframeworkid;",
          "224:     }",
          "231:     public function set_competencyframeworkid($competencyframeworkid) {",
          "232:         $this->competencyframeworkid = $competencyframeworkid;",
          "233:     }",
          "241:     public function from_record($record) {",
          "242:         if (isset($record->id)) {",
          "243:             $this->set_id($record->id);",
          "244:         }",
          "245:         if (isset($record->shortname)) {",
          "246:             $this->set_shortname($record->shortname);",
          "247:         }",
          "248:         if (isset($record->idnumber)) {",
          "249:             $this->set_idnumber($record->idnumber);",
          "250:         }",
          "251:         if (isset($record->description)) {",
          "252:             $this->set_description($record->description);",
          "253:         }",
          "254:         if (isset($record->descriptionformat)) {",
          "255:             $this->set_descriptionformat($record->descriptionformat);",
          "256:         }",
          "257:         if (isset($record->sortorder)) {",
          "258:             $this->set_sortorder($record->sortorder);",
          "259:         }",
          "260:         if (isset($record->visible)) {",
          "261:             $this->set_visible($record->visible);",
          "262:         }",
          "263:         if (isset($record->timecreated)) {",
          "264:             $this->set_timecreated($record->timecreated);",
          "265:         }",
          "266:         if (isset($record->timemodified)) {",
          "267:             $this->set_timemodified($record->timemodified);",
          "268:         }",
          "269:         if (isset($record->usermodified)) {",
          "270:             $this->set_usermodified($record->usermodified);",
          "271:         }",
          "272:         if (isset($record->competencyframeworkid)) {",
          "273:             $this->set_competencyframeworkid($record->competencyframeworkid);",
          "274:         }",
          "275:         if (isset($record->parentid)) {",
          "276:             $this->set_parentid($record->parentid);",
          "277:         }",
          "278:         if (isset($record->path)) {",
          "279:             $this->set_path($record->path);",
          "280:         }",
          "281:         return $this;",
          "282:     }",
          "289:     public function to_record() {",
          "290:         $record = new stdClass();",
          "291:         $record->id = $this->get_id();",
          "292:         $record->shortname = $this->get_shortname();",
          "293:         $record->idnumber = $this->get_idnumber();",
          "294:         $record->description = $this->get_description();",
          "295:         $record->descriptionformat = $this->get_descriptionformat();",
          "296:         $options = array('context' => context_system::instance());",
          "297:         $record->descriptionformatted = format_text($this->get_description(), $this->get_descriptionformat(), $options);",
          "298:         $record->sortorder = $this->get_sortorder();",
          "299:         $record->visible = $this->get_visible();",
          "300:         $record->timecreated = $this->get_timecreated();",
          "301:         $record->timemodified = $this->get_timemodified();",
          "302:         $record->usermodified = $this->get_usermodified();",
          "303:         $record->competencyframeworkid = $this->get_competencyframeworkid();",
          "304:         $record->parentid = $this->get_parentid();",
          "305:         $record->path = $this->get_path();",
          "307:         return $record;",
          "308:     }",
          "315:     public function create() {",
          "316:         if ($this->parentid) {",
          "318:             $parent = new competency($this->parentid);",
          "319:             $this->path = $parent->path . $this->parentid . '/';",
          "320:         } else {",
          "321:             $this->path = '/0/';",
          "322:         }",
          "323:         $this->sortorder = $this->count_records(array('parentid' => $this->parentid, 'competencyframeworkid' => $this->competencyframeworkid));",
          "324:         return parent::create();",
          "325:     }",
          "332:     public function update() {",
          "333:         global $DB;",
          "336:         $before = new competency($this->get_id());",
          "337:         if ($before->parentid != $this->parentid) {",
          "338:             if ($this->parentid) {",
          "339:                 $parent = new competency($this->parentid);",
          "340:                 $this->path = $parent->path . $this->parentid . '/';",
          "341:             } else {",
          "342:                 $this->path = '/0/';",
          "343:             }",
          "345:             $search = array('parentid' => $this->parentid,",
          "346:                             'competencyframeworkid' => $this->competencyframeworkid);",
          "347:             $this->sortorder = $this->count_records($search);",
          "350:             $like = $DB->sql_like('path', '?');",
          "351:             $likesearch = $DB->sql_like_escape($before->path . $before->id . '/') . '%';",
          "352:             $sql = 'UPDATE {tool_lp_competency} SET path = REPLACE(path, ?, ?) WHERE ' . $like;",
          "353:             $DB->execute($sql, array($before->path . $this->id . '/', $this->path . $this->id . '/', $likesearch));",
          "354:         }",
          "356:         return parent::update();",
          "357:     }",
          "367:     public function search($searchText, $competencyframeworkid) {",
          "368:         global $DB;",
          "370:         $like1 = $DB->sql_like('shortname', ':like1', false);",
          "371:         $like2 = $DB->sql_like('idnumber', ':like2', false);",
          "372:         $like3 = $DB->sql_like('description', ':like3', false);",
          "374:         $params = array(",
          "375:             'like1' => '%' . $DB->sql_like_escape($searchText) . '%',",
          "376:             'like2' => '%' . $DB->sql_like_escape($searchText) . '%',",
          "377:             'like3' => '%' . $DB->sql_like_escape($searchText) . '%',",
          "378:             'frameworkid' => $competencyframeworkid",
          "379:         );",
          "381:         $sql = 'competencyframeworkid = :frameworkid AND ((' . $like1 . ') OR (' . $like2 . ') OR (' . $like3 . '))';",
          "382:         $records = $DB->get_records_select($this->get_table_name(), $sql, $params, 'path, sortorder ASC', '*');",
          "385:         $parents = array();",
          "386:         foreach ($records as $record) {",
          "387:             $parents = explode('/', $record->path);",
          "388:             foreach ($parents as $parent) {",
          "389:                 $parents[intval($parent)] = true;",
          "390:             }",
          "391:         }",
          "392:         $parents = array_keys($parents);",
          "395:         foreach ($parents as $idx => $parent) {",
          "396:             if ($parent == 0 || isset($records[$parent])) {",
          "397:                 unset($parents[$idx]);",
          "398:             }",
          "399:         }",
          "401:         if (count($parents)) {",
          "402:             list($parentsql, $parentparams) = $DB->get_in_or_equal($parents, SQL_PARAMS_NAMED);",
          "404:             $parentrecords = $DB->get_records_select($this->get_table_name(), 'id ' . $parentsql, $parentparams, 'path, sortorder ASC', '*');",
          "406:             foreach ($parentrecords as $id => $record) {",
          "407:                 $records[$id] = $record;",
          "408:             }",
          "409:         }",
          "411:         $instances = array();",
          "413:         foreach ($records as $record) {",
          "414:             $newrecord = new static(0, $record);",
          "415:             array_push($instances, $newrecord);",
          "416:         }",
          "417:         return $instances;",
          "418:     }",
          "425:     public function delete() {",
          "426:         global $DB;",
          "428:         $deletepath = $DB->sql_like_escape($this->path . $this->get_id() . '/') . '%';",
          "431:         $like = $DB->sql_like('path', ':deletepath');",
          "432:         $DB->delete_records_select('tool_lp_competency', $like, array('deletepath' => $deletepath));",
          "435:         $DB->delete_records('tool_lp_course_competency', array('competencyid' => $this->get_id()));",
          "437:         return parent::delete();",
          "438:     }",
          "439: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/competency_framework.php||admin/tool/lp/classes/competency_framework.php": [
          "File: admin/tool/lp/classes/competency_framework.php -> admin/tool/lp/classes/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp;",
          "26: use stdClass;",
          "34: class competency_framework extends persistent {",
          "37:     private $shortname = '';",
          "40:     private $idnumber = '';",
          "43:     private $description = '';",
          "46:     private $descriptionformat = 0;",
          "49:     private $sortorder = 0;",
          "52:     private $visible = true;",
          "59:     public function get_table_name() {",
          "60:         return 'tool_lp_competency_framework';",
          "61:     }",
          "68:     public function get_shortname() {",
          "69:         return $this->shortname;",
          "70:     }",
          "77:     public function set_shortname($shortname) {",
          "78:         $this->shortname = $shortname;",
          "79:     }",
          "86:     public function get_descriptionformat() {",
          "87:         return $this->descriptionformat;",
          "88:     }",
          "95:     public function set_descriptionformat($descriptionformat) {",
          "96:         $this->descriptionformat = $descriptionformat;",
          "97:     }",
          "103:     public function get_idnumber() {",
          "104:         return $this->idnumber;",
          "105:     }",
          "112:     public function set_idnumber($idnumber) {",
          "113:         $this->idnumber = $idnumber;",
          "114:     }",
          "121:     public function get_description() {",
          "122:         return $this->description;",
          "123:     }",
          "130:     public function set_description($description) {",
          "131:         $this->description = $description;",
          "132:     }",
          "139:     public function get_sortorder() {",
          "140:         return $this->sortorder;",
          "141:     }",
          "148:     public function set_sortorder($sortorder) {",
          "149:         $this->sortorder = $sortorder;",
          "150:     }",
          "157:     public function get_visible() {",
          "158:         return $this->visible;",
          "159:     }",
          "166:     public function set_visible($visible) {",
          "167:         $this->visible = $visible;",
          "168:     }",
          "176:     public function from_record($record) {",
          "177:         if (isset($record->id)) {",
          "178:             $this->set_id($record->id);",
          "179:         }",
          "180:         if (isset($record->shortname)) {",
          "181:             $this->set_shortname($record->shortname);",
          "182:         }",
          "183:         if (isset($record->idnumber)) {",
          "184:             $this->set_idnumber($record->idnumber);",
          "185:         }",
          "186:         if (isset($record->description)) {",
          "187:             $this->set_description($record->description);",
          "188:         }",
          "189:         if (isset($record->descriptionformat)) {",
          "190:             $this->set_descriptionformat($record->descriptionformat);",
          "191:         }",
          "192:         if (isset($record->sortorder)) {",
          "193:             $this->set_sortorder($record->sortorder);",
          "194:         }",
          "195:         if (isset($record->visible)) {",
          "196:             $this->set_visible($record->visible);",
          "197:         }",
          "198:         if (isset($record->timecreated)) {",
          "199:             $this->set_timecreated($record->timecreated);",
          "200:         }",
          "201:         if (isset($record->timemodified)) {",
          "202:             $this->set_timemodified($record->timemodified);",
          "203:         }",
          "204:         if (isset($record->usermodified)) {",
          "205:             $this->set_usermodified($record->usermodified);",
          "206:         }",
          "207:         return $this;",
          "208:     }",
          "215:     public function to_record() {",
          "216:         $record = new stdClass();",
          "217:         $record->id = $this->get_id();",
          "218:         $record->shortname = $this->get_shortname();",
          "219:         $record->idnumber = $this->get_idnumber();",
          "220:         $record->description = $this->get_description();",
          "221:         $record->descriptionformat = $this->get_descriptionformat();",
          "222:         $record->descriptionformatted = format_text($this->get_description(), $this->get_descriptionformat());",
          "223:         $record->sortorder = $this->get_sortorder();",
          "224:         $record->visible = $this->get_visible();",
          "225:         $record->timecreated = $this->get_timecreated();",
          "226:         $record->timemodified = $this->get_timemodified();",
          "227:         $record->usermodified = $this->get_usermodified();",
          "229:         return $record;",
          "230:     }",
          "237:     public function create() {",
          "238:         $this->sortorder = $this->count_records();",
          "239:         return parent::create();",
          "240:     }",
          "243: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/course_competency.php||admin/tool/lp/classes/course_competency.php": [
          "File: admin/tool/lp/classes/course_competency.php -> admin/tool/lp/classes/course_competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp;",
          "26: use stdClass;",
          "27: use context_system;",
          "35: class course_competency extends persistent {",
          "38:     private $courseid = 0;",
          "41:     private $competencyid = 0;",
          "44:     private $sortorder = 0;",
          "51:     public function get_table_name() {",
          "52:         return 'tool_lp_course_competency';",
          "53:     }",
          "60:     public function get_competencyid() {",
          "61:         return $this->competencyid;",
          "62:     }",
          "69:     public function set_competencyid($competencyid) {",
          "70:         $this->competencyid = $competencyid;",
          "71:     }",
          "78:     public function get_sortorder() {",
          "79:         return $this->sortorder;",
          "80:     }",
          "87:     public function set_sortorder($sortorder) {",
          "88:         $this->sortorder = $sortorder;",
          "89:     }",
          "96:     public function get_courseid() {",
          "97:         return $this->courseid;",
          "98:     }",
          "105:     public function set_courseid($courseid) {",
          "106:         $this->courseid = $courseid;",
          "107:     }",
          "115:     public function from_record($record) {",
          "116:         if (isset($record->id)) {",
          "117:             $this->set_id($record->id);",
          "118:         }",
          "119:         if (isset($record->courseid)) {",
          "120:             $this->set_courseid($record->courseid);",
          "121:         }",
          "122:         if (isset($record->competencyid)) {",
          "123:             $this->set_competencyid($record->competencyid);",
          "124:         }",
          "125:         if (isset($record->sortorder)) {",
          "126:             $this->set_sortorder($record->sortorder);",
          "127:         }",
          "128:         if (isset($record->timecreated)) {",
          "129:             $this->set_timecreated($record->timecreated);",
          "130:         }",
          "131:         if (isset($record->timemodified)) {",
          "132:             $this->set_timemodified($record->timemodified);",
          "133:         }",
          "134:         if (isset($record->usermodified)) {",
          "135:             $this->set_usermodified($record->usermodified);",
          "136:         }",
          "137:         return $this;",
          "138:     }",
          "145:     public function to_record() {",
          "146:         $record = new stdClass();",
          "147:         $record->id = $this->get_id();",
          "148:         $record->courseid = $this->get_courseid();",
          "149:         $record->competencyid = $this->get_competencyid();",
          "150:         $record->sortorder = $this->get_sortorder();",
          "151:         $record->timecreated = $this->get_timecreated();",
          "152:         $record->timemodified = $this->get_timemodified();",
          "153:         $record->usermodified = $this->get_usermodified();",
          "155:         return $record;",
          "156:     }",
          "165:     public function list_courses_min($competencyid) {",
          "166:         global $DB;",
          "168:         $results = $DB->get_records_sql('SELECT course.id as id, course.visible as visible",
          "169:                                          FROM {' . self::get_table_name() . '} coursecomp",
          "170:                                          JOIN {course} course",
          "171:                                          ON coursecomp.courseid = course.id",
          "172:                                          WHERE coursecomp.competencyid = ? ', array($competencyid));",
          "174:         return $results;",
          "175:     }",
          "183:     public function list_courses($competencyid) {",
          "184:         global $DB;",
          "186:         $results = $DB->get_records_sql('SELECT course.id, course.visible, course.shortname, course.idnumber, course.fullname",
          "187:                                          FROM {course} course",
          "188:                                          JOIN {' . self::get_table_name() . '} coursecomp",
          "189:                                          ON coursecomp.courseid = course.id",
          "190:                                          WHERE coursecomp.competencyid = ? ', array($competencyid));",
          "192:         return $results;",
          "193:     }",
          "202:     public function count_competencies($courseid, $onlyvisible) {",
          "203:         global $DB;",
          "206:         $sql = 'SELECT COUNT(comp.id)",
          "207:                 FROM {' . self::get_table_name() . '} coursecomp",
          "208:                 JOIN {' . competency::get_table_name() . '} comp",
          "209:                 ON coursecomp.competencyid = comp.id",
          "210:                 WHERE coursecomp.courseid = ? ';",
          "211:         $params = array($courseid);",
          "213:         if ($onlyvisible) {",
          "214:             $sql .= ' AND comp.visible = ?';",
          "215:             $params[] = 1;",
          "216:         }",
          "218:         $results = $DB->count_records_sql($sql, $params);",
          "220:         return $results;",
          "221:     }",
          "230:     public function list_competencies($courseid, $onlyvisible) {",
          "231:         global $DB;",
          "233:         $competency = new competency();",
          "235:         $sql = 'SELECT comp.*",
          "236:                 FROM {' . $competency->get_table_name() . '} comp",
          "237:                 JOIN {' . self::get_table_name() . '} coursecomp",
          "238:                 ON coursecomp.competencyid = comp.id",
          "239:                 WHERE coursecomp.courseid = ? ORDER BY coursecomp.sortorder ASC';",
          "240:         $params = array($courseid);",
          "242:         if ($onlyvisible) {",
          "243:             $sql .= ' AND comp.visible = ?';",
          "244:             $params[] = 1;",
          "245:         }",
          "247:         $results = $DB->get_records_sql($sql, $params);",
          "249:         $instances = array();",
          "250:         foreach ($results as $result) {",
          "251:             array_push($instances, new competency(0, $result));",
          "252:         }",
          "254:         return $instances;",
          "255:     }",
          "262:     public function create() {",
          "263:         $this->sortorder = $this->count_records(array('courseid' => $this->get_courseid()));",
          "264:         return parent::create();",
          "265:     }",
          "267: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/external.php||admin/tool/lp/classes/external.php": [
          "File: admin/tool/lp/classes/external.php -> admin/tool/lp/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp;",
          "26: require_once(\"$CFG->libdir/externallib.php\");",
          "28: use external_api;",
          "29: use external_function_parameters;",
          "30: use external_value;",
          "31: use external_format_value;",
          "32: use external_single_structure;",
          "33: use external_multiple_structure;",
          "34: use invalid_parameter_exception;",
          "42: class external extends external_api {",
          "49:     protected static function list_parameters_structure() {",
          "50:         $filters = new external_multiple_structure(new external_single_structure(",
          "51:             array(",
          "52:                 'column' => new external_value(PARAM_ALPHANUMEXT, 'Column name to filter by'),",
          "53:                 'value' => new external_value(PARAM_TEXT, 'Value to filter by. Must be exact match')",
          "54:             )",
          "55:         ));",
          "56:         $sort = new external_value(",
          "57:             PARAM_ALPHANUMEXT,",
          "58:             'Column to sort by.',",
          "59:             VALUE_DEFAULT,",
          "60:             ''",
          "61:         );",
          "62:         $order = new external_value(",
          "63:             PARAM_ALPHA,",
          "64:             'Sort direction. Should be either ASC or DESC',",
          "65:             VALUE_DEFAULT,",
          "66:             ''",
          "67:         );",
          "68:         $skip = new external_value(",
          "69:             PARAM_INT,",
          "70:             'Skip this number of records before returning results',",
          "71:             VALUE_DEFAULT,",
          "72:             0",
          "73:         );",
          "74:         $limit = new external_value(",
          "75:             PARAM_INT,",
          "76:             'Return this number of records at most.',",
          "77:             VALUE_DEFAULT,",
          "78:             0",
          "79:         );",
          "81:         $params = array(",
          "82:             'filters' => $filters,",
          "83:             'sort' => $sort,",
          "84:             'order' => $order,",
          "85:             'skip' => $skip,",
          "86:             'limit' => $limit",
          "87:         );",
          "88:         return new external_function_parameters($params);",
          "89:     }",
          "96:     public static function count_parameters_structure() {",
          "97:         $filters = new external_multiple_structure(new external_single_structure(",
          "98:             array(",
          "99:                 'column' => new external_value(PARAM_ALPHANUMEXT, 'Column name to filter by'),",
          "100:                 'value' => new external_value(PARAM_TEXT, 'Value to filter by. Must be exact match')",
          "101:             )",
          "102:         ));",
          "104:         $params = array(",
          "105:             'filters' => $filters,",
          "106:         );",
          "107:         return new external_function_parameters($params);",
          "108:     }",
          "115:     protected static function get_competency_framework_external_structure() {",
          "116:         $id = new external_value(",
          "117:             PARAM_INT,",
          "118:             'Database record id'",
          "119:         );",
          "120:         $shortname = new external_value(",
          "121:             PARAM_TEXT,",
          "122:             'Short name for the competency framework'",
          "123:         );",
          "124:         $idnumber = new external_value(",
          "125:             PARAM_TEXT,",
          "126:             'If provided, must be a unique string to identify this competency framework'",
          "127:         );",
          "128:         $description = new external_value(",
          "129:             PARAM_RAW,",
          "130:             'Description for the framework'",
          "131:         );",
          "132:         $descriptionformat = new external_format_value(",
          "133:             'Description format for the framework'",
          "134:         );",
          "135:         $descriptionformatted = new external_value(",
          "136:             PARAM_RAW,",
          "137:             'Description that has been formatted for display'",
          "138:         );",
          "139:         $visible = new external_value(",
          "140:             PARAM_BOOL,",
          "141:             'Is this framework visible?'",
          "142:         );",
          "143:         $sortorder = new external_value(",
          "144:             PARAM_INT,",
          "145:             'Relative sort order of this framework'",
          "146:         );",
          "147:         $timecreated = new external_value(",
          "148:             PARAM_INT,",
          "149:             'Timestamp this record was created'",
          "150:         );",
          "151:         $timemodified = new external_value(",
          "152:             PARAM_INT,",
          "153:             'Timestamp this record was modified'",
          "154:         );",
          "155:         $usermodified = new external_value(",
          "156:             PARAM_INT,",
          "157:             'User who modified this record last'",
          "158:         );",
          "160:         $returns = array(",
          "161:             'id' => $id,",
          "162:             'shortname' => $shortname,",
          "163:             'idnumber' => $idnumber,",
          "164:             'description' => $description,",
          "165:             'descriptionformat' => $descriptionformat,",
          "166:             'descriptionformatted' => $descriptionformatted,",
          "167:             'visible' => $visible,",
          "168:             'sortorder' => $sortorder,",
          "169:             'timecreated' => $timecreated,",
          "170:             'timemodified' => $timemodified,",
          "171:             'usermodified' => $usermodified,",
          "172:         );",
          "173:         return new external_single_structure($returns);",
          "174:     }",
          "181:     public static function create_competency_framework_parameters() {",
          "182:         $shortname = new external_value(",
          "183:             PARAM_TEXT,",
          "184:             'Short name for the competency framework.',",
          "185:             VALUE_REQUIRED",
          "186:         );",
          "187:         $idnumber = new external_value(",
          "188:             PARAM_TEXT,",
          "189:             'If provided, must be a unique string to identify this competency framework.',",
          "190:             VALUE_DEFAULT,",
          "191:             ''",
          "192:         );",
          "193:         $description = new external_value(",
          "194:             PARAM_RAW,",
          "195:             'Optional description for the framework',",
          "196:             VALUE_DEFAULT,",
          "197:             ''",
          "198:         );",
          "199:         $descriptionformat = new external_format_value(",
          "200:             'Optional description format for the framework',",
          "201:             VALUE_DEFAULT,",
          "202:             FORMAT_HTML",
          "203:         );",
          "204:         $visible = new external_value(",
          "205:             PARAM_BOOL,",
          "206:             'Is this framework visible?',",
          "207:             VALUE_DEFAULT,",
          "208:             true",
          "209:         );",
          "211:         $params = array(",
          "212:             'shortname' => $shortname,",
          "213:             'idnumber' => $idnumber,",
          "214:             'description' => $description,",
          "215:             'descriptionformat' => $descriptionformat,",
          "216:             'visible' => $visible,",
          "217:         );",
          "218:         return new external_function_parameters($params);",
          "219:     }",
          "225:     public static function create_competency_framework_is_allowed_from_ajax() {",
          "226:         return true;",
          "227:     }",
          "239:     public static function create_competency_framework($shortname, $idnumber, $description, $descriptionformat, $visible) {",
          "240:         $params = self::validate_parameters(self::create_competency_framework_parameters(),",
          "241:                                             array(",
          "242:                                                 'shortname' => $shortname,",
          "243:                                                 'idnumber' => $idnumber,",
          "244:                                                 'description' => $description,",
          "245:                                                 'descriptionformat' => $descriptionformat,",
          "246:                                                 'visible' => $visible,",
          "247:                                             ));",
          "249:         $params = (object) $params;",
          "251:         $result = api::create_framework($params);",
          "252:         return $result->to_record();",
          "253:     }",
          "260:     public static function create_competency_framework_returns() {",
          "261:         return self::get_competency_framework_external_structure();",
          "262:     }",
          "269:     public static function read_competency_framework_parameters() {",
          "270:         $id = new external_value(",
          "271:             PARAM_INT,",
          "272:             'Data base record id for the framework',",
          "273:             VALUE_REQUIRED",
          "274:         );",
          "276:         $params = array(",
          "277:             'id' => $id,",
          "278:         );",
          "279:         return new external_function_parameters($params);",
          "280:     }",
          "286:     public static function read_competency_framework_is_allowed_from_ajax() {",
          "287:         return true;",
          "288:     }",
          "296:     public static function read_competency_framework($id) {",
          "297:         $params = self::validate_parameters(self::read_competency_framework_parameters(),",
          "298:                                             array(",
          "299:                                                 'id' => $id,",
          "300:                                             ));",
          "302:         $result = api::read_framework($params['id']);",
          "303:         return $result->to_record();",
          "304:     }",
          "311:     public static function read_competency_framework_returns() {",
          "312:         return self::get_competency_framework_external_structure();",
          "313:     }",
          "320:     public static function delete_competency_framework_parameters() {",
          "321:         $id = new external_value(",
          "322:             PARAM_INT,",
          "323:             'Data base record id for the framework',",
          "324:             VALUE_REQUIRED",
          "325:         );",
          "327:         $params = array(",
          "328:             'id' => $id,",
          "329:         );",
          "330:         return new external_function_parameters($params);",
          "331:     }",
          "337:     public static function delete_competency_framework_is_allowed_from_ajax() {",
          "338:         return true;",
          "339:     }",
          "347:     public static function delete_competency_framework($id) {",
          "348:         $params = self::validate_parameters(self::delete_competency_framework_parameters(),",
          "349:                                             array(",
          "350:                                                 'id' => $id,",
          "351:                                             ));",
          "353:         return api::delete_framework($params['id']);",
          "354:     }",
          "361:     public static function delete_competency_framework_returns() {",
          "362:         return new external_value(PARAM_BOOL, 'True if the delete was successful');",
          "363:     }",
          "370:     public static function update_competency_framework_parameters() {",
          "371:         $id = new external_value(",
          "372:             PARAM_INT,",
          "373:             'Data base record id for the framework',",
          "374:             VALUE_REQUIRED",
          "375:         );",
          "376:         $shortname = new external_value(",
          "377:             PARAM_TEXT,",
          "378:             'Short name for the competency framework.',",
          "379:             VALUE_REQUIRED",
          "380:         );",
          "381:         $idnumber = new external_value(",
          "382:             PARAM_TEXT,",
          "383:             'If provided, must be a unique string to identify this competency framework.',",
          "384:             VALUE_REQUIRED",
          "385:         );",
          "386:         $description = new external_value(",
          "387:             PARAM_RAW,",
          "388:             'Description for the framework',",
          "389:             VALUE_REQUIRED",
          "390:         );",
          "391:         $descriptionformat = new external_format_value(",
          "392:             'Description format for the framework',",
          "393:             VALUE_REQUIRED",
          "394:         );",
          "395:         $visible = new external_value(",
          "396:             PARAM_BOOL,",
          "397:             'Is this framework visible?',",
          "398:             VALUE_REQUIRED",
          "399:         );",
          "401:         $params = array(",
          "402:             'id' => $id,",
          "403:             'shortname' => $shortname,",
          "404:             'idnumber' => $idnumber,",
          "405:             'description' => $description,",
          "406:             'descriptionformat' => $descriptionformat,",
          "407:             'visible' => $visible,",
          "408:         );",
          "409:         return new external_function_parameters($params);",
          "410:     }",
          "416:     public static function update_competency_framework_is_allowed_from_ajax() {",
          "417:         return true;",
          "418:     }",
          "431:     public static function update_competency_framework($id,",
          "432:                                                        $shortname,",
          "433:                                                        $idnumber,",
          "434:                                                        $description,",
          "435:                                                        $descriptionformat,",
          "436:                                                        $visible) {",
          "438:         $params = self::validate_parameters(self::update_competency_framework_parameters(),",
          "439:                                             array(",
          "440:                                                 'id' => $id,",
          "441:                                                 'shortname' => $shortname,",
          "442:                                                 'idnumber' => $idnumber,",
          "443:                                                 'description' => $description,",
          "444:                                                 'descriptionformat' => $descriptionformat,",
          "445:                                                 'visible' => $visible",
          "446:                                             ));",
          "447:         $params = (object) $params;",
          "449:         return api::update_framework($params);",
          "450:     }",
          "457:     public static function update_competency_framework_returns() {",
          "458:         return new external_value(PARAM_BOOL, 'True if the update was successful');",
          "459:     }",
          "466:     public static function list_competency_frameworks_parameters() {",
          "467:         return self::list_parameters_structure();",
          "468:     }",
          "474:     public static function list_competency_frameworks_is_allowed_from_ajax() {",
          "475:         return true;",
          "476:     }",
          "483:     public static function list_competency_frameworks($filters, $sort, $order, $skip, $limit) {",
          "484:         $params = self::validate_parameters(self::list_competency_frameworks_parameters(),",
          "485:                                             array(",
          "486:                                                 'filters' => $filters,",
          "487:                                                 'sort' => $sort,",
          "488:                                                 'order' => $order,",
          "489:                                                 'skip' => $skip,",
          "490:                                                 'limit' => $limit",
          "491:                                             ));",
          "493:         if ($params['order'] !== '' && $params['order'] !== 'ASC' && $params['order'] !== 'DESC') {",
          "494:             throw new invalid_parameter_exception('Invalid order param. Must be ASC, DESC or empty.');",
          "495:         }",
          "497:         $safefilters = array();",
          "498:         $validcolumns = array('id', 'shortname', 'description', 'sortorder', 'idnumber', 'visible');",
          "499:         foreach ($params['filters'] as $filter) {",
          "500:             if (!in_array($filter->column, $validcolumns)) {",
          "501:                 throw new invalid_parameter_exception('Filter column was invalid');",
          "502:             }",
          "503:             $safefilters[$filter->column] = $filter->value;",
          "504:         }",
          "506:         $results = api::list_frameworks($safefilters,",
          "507:                                                $params['sort'],",
          "508:                                                $params['order'],",
          "509:                                                $params['skip'],",
          "510:                                                $params['limit']);",
          "511:         $records = array();",
          "512:         foreach ($results as $result) {",
          "513:             $record = $result->to_record();",
          "514:             array_push($records, $record);",
          "515:         }",
          "516:         return $records;",
          "517:     }",
          "524:     public static function list_competency_frameworks_returns() {",
          "525:         return new external_multiple_structure(self::get_competency_framework_external_structure());",
          "526:     }",
          "533:     public static function count_competency_frameworks_parameters() {",
          "534:         $filters = new external_multiple_structure(new external_single_structure(",
          "535:             array(",
          "536:                 'column' => new external_value(PARAM_ALPHANUMEXT, 'Column name to filter by'),",
          "537:                 'value' => new external_value(PARAM_TEXT, 'Value to filter by. Must be exact match')",
          "538:             )",
          "539:         ));",
          "541:         $params = array(",
          "542:             'filters' => $filters,",
          "543:         );",
          "544:         return new external_function_parameters($params);",
          "545:     }",
          "551:     public static function count_competency_frameworks_is_allowed_from_ajax() {",
          "552:         return true;",
          "553:     }",
          "560:     public static function count_competency_frameworks($filters) {",
          "561:         $params = self::validate_parameters(self::count_competency_frameworks_parameters(),",
          "562:                                             array(",
          "563:                                                 'filters' => $filters",
          "564:                                             ));",
          "566:         $safefilters = array();",
          "567:         $validcolumns = array('id', 'shortname', 'description', 'sortorder', 'idnumber', 'visible');",
          "568:         foreach ($params['filters'] as $filter) {",
          "569:             if (!in_array($filter->column, $validcolumns)) {",
          "570:                 throw new invalid_parameter_exception('Filter column was invalid');",
          "571:             }",
          "572:             $safefilters[$filter->column] = $filter->value;",
          "573:         }",
          "575:         return api::count_frameworks($safefilters);",
          "576:     }",
          "583:     public static function count_competency_frameworks_returns() {",
          "584:         return new external_value(PARAM_INT, 'The number of competency frameworks found.');",
          "585:     }",
          "592:     public static function data_for_competency_frameworks_manage_page_parameters() {",
          "594:         $params = array();",
          "595:         return new external_function_parameters($params);",
          "596:     }",
          "602:     public static function data_for_competency_frameworks_manage_page_is_allowed_from_ajax() {",
          "603:         return true;",
          "604:     }",
          "611:     public static function data_for_competency_frameworks_manage_page() {",
          "612:         global $PAGE;",
          "614:         $renderable = new \\tool_lp\\output\\manage_competency_frameworks_page();",
          "615:         $renderer = $PAGE->get_renderer('tool_lp');",
          "617:         $data = $renderable->export_for_template($renderer);",
          "619:         return $data;",
          "620:     }",
          "627:     public static function data_for_competency_frameworks_manage_page_returns() {",
          "628:         return new external_single_structure(array (",
          "629:             'canmanage' => new external_value(PARAM_BOOL, 'True if this user has permission to manage competency frameworks'),",
          "630:             'competencyframeworks' => new external_multiple_structure(",
          "631:                 self::get_competency_framework_external_structure()",
          "632:             ),",
          "633:             'pluginbaseurl' => new external_value(PARAM_LOCALURL, 'Url to the tool_lp plugin folder on this Moodle site'),",
          "634:             'navigation' => new external_multiple_structure(",
          "635:                 new external_value(PARAM_RAW, 'HTML for a navigation item that should be on this page')",
          "636:             )",
          "637:         ));",
          "639:     }",
          "646:     public static function reorder_competency_framework_parameters() {",
          "647:         $from = new external_value(",
          "648:             PARAM_INT,",
          "649:             'Framework id to reorder.',",
          "650:             VALUE_REQUIRED",
          "651:         );",
          "652:         $to = new external_value(",
          "653:             PARAM_INT,",
          "654:             'Framework id to move to.',",
          "655:             VALUE_REQUIRED",
          "656:         );",
          "657:         $params = array(",
          "658:             'from' => $from,",
          "659:             'to' => $to",
          "660:         );",
          "661:         return new external_function_parameters($params);",
          "662:     }",
          "668:     public static function reorder_competency_framework_is_allowed_from_ajax() {",
          "669:         return true;",
          "670:     }",
          "679:     public static function reorder_competency_framework($from, $to) {",
          "680:         $params = self::validate_parameters(self::reorder_competency_framework_parameters(),",
          "681:                                             array(",
          "682:                                                 'from' => $from,",
          "683:                                                 'to' => $to",
          "684:                                             ));",
          "685:         return api::reorder_framework($params['from'], $params['to']);",
          "686:     }",
          "693:     public static function reorder_competency_framework_returns() {",
          "694:         return new external_value(PARAM_BOOL, 'True if this framework was moved.');",
          "695:     }",
          "702:     protected static function get_competency_external_structure() {",
          "703:         $id = new external_value(",
          "704:             PARAM_INT,",
          "705:             'Database record id'",
          "706:         );",
          "707:         $shortname = new external_value(",
          "708:             PARAM_TEXT,",
          "709:             'Short name for the competency'",
          "710:         );",
          "711:         $idnumber = new external_value(",
          "712:             PARAM_TEXT,",
          "713:             'If provided, must be a unique string to identify this competency'",
          "714:         );",
          "715:         $description = new external_value(",
          "716:             PARAM_RAW,",
          "717:             'Description for the competency'",
          "718:         );",
          "719:         $descriptionformat = new external_format_value(",
          "720:             'Description format for the competency'",
          "721:         );",
          "722:         $descriptionformatted = new external_value(",
          "723:             PARAM_RAW,",
          "724:             'Description formatted for display'",
          "725:         );",
          "726:         $visible = new external_value(",
          "727:             PARAM_BOOL,",
          "728:             'Is this competency visible?'",
          "729:         );",
          "730:         $sortorder = new external_value(",
          "731:             PARAM_INT,",
          "732:             'Relative sort order of this competency'",
          "733:         );",
          "734:         $competencyframeworkid = new external_value(",
          "735:             PARAM_INT,",
          "736:             'Competency framework id that this competency belongs to'",
          "737:         );",
          "738:         $parentid = new external_value(",
          "739:             PARAM_INT,",
          "740:             'Parent competency id. 0 means top level node.'",
          "741:         );",
          "742:         $timecreated = new external_value(",
          "743:             PARAM_INT,",
          "744:             'Timestamp this record was created'",
          "745:         );",
          "746:         $timemodified = new external_value(",
          "747:             PARAM_INT,",
          "748:             'Timestamp this record was modified'",
          "749:         );",
          "750:         $usermodified = new external_value(",
          "751:             PARAM_INT,",
          "752:             'User who modified this record last'",
          "753:         );",
          "754:         $parentid = new external_value(",
          "755:             PARAM_INT,",
          "756:             'The id of the parent competency.'",
          "757:         );",
          "758:         $path = new external_value(",
          "759:             PARAM_RAW,",
          "760:             'The path of parents all the way to the root of the tree.'",
          "761:         );",
          "763:         $returns = array(",
          "764:             'id' => $id,",
          "765:             'shortname' => $shortname,",
          "766:             'idnumber' => $idnumber,",
          "767:             'description' => $description,",
          "768:             'descriptionformat' => $descriptionformat,",
          "769:             'descriptionformatted' => $descriptionformatted,",
          "770:             'visible' => $visible,",
          "771:             'sortorder' => $sortorder,",
          "772:             'timecreated' => $timecreated,",
          "773:             'timemodified' => $timemodified,",
          "774:             'usermodified' => $usermodified,",
          "775:             'parentid' => $parentid,",
          "776:             'competencyframeworkid' => $competencyframeworkid,",
          "777:             'path' => $path,",
          "778:         );",
          "779:         return new external_single_structure($returns);",
          "780:     }",
          "786:     public static function create_competency_is_allowed_from_ajax() {",
          "787:         return true;",
          "788:     }",
          "795:     public static function create_competency_parameters() {",
          "796:         $shortname = new external_value(",
          "797:             PARAM_TEXT,",
          "798:             'Short name for the competency framework.',",
          "799:             VALUE_REQUIRED",
          "800:         );",
          "801:         $idnumber = new external_value(",
          "802:             PARAM_TEXT,",
          "803:             'If provided, must be a unique string to identify this competency framework.',",
          "804:             VALUE_DEFAULT,",
          "805:             ''",
          "806:         );",
          "807:         $description = new external_value(",
          "808:             PARAM_RAW,",
          "809:             'Optional description for the framework',",
          "810:             VALUE_DEFAULT,",
          "811:             ''",
          "812:         );",
          "813:         $descriptionformat = new external_format_value(",
          "814:             'Optional description format for the framework',",
          "815:             VALUE_DEFAULT,",
          "816:             FORMAT_HTML",
          "817:         );",
          "818:         $visible = new external_value(",
          "819:             PARAM_BOOL,",
          "820:             'Is this competency visible?',",
          "821:             VALUE_DEFAULT,",
          "822:             true",
          "823:         );",
          "824:         $competencyframeworkid = new external_value(",
          "825:             PARAM_INT,",
          "826:             'Which competency framework does this competency belong to?'",
          "827:         );",
          "828:         $parentid = new external_value(",
          "829:             PARAM_INT,",
          "830:             'The parent competency. 0 means this is a top level competency.'",
          "831:         );",
          "833:         $params = array(",
          "834:             'shortname' => $shortname,",
          "835:             'idnumber' => $idnumber,",
          "836:             'description' => $description,",
          "837:             'descriptionformat' => $descriptionformat,",
          "838:             'visible' => $visible,",
          "839:             'competencyframeworkid' => $competencyframeworkid,",
          "840:             'parentid' => $parentid,",
          "841:         );",
          "842:         return new external_function_parameters($params);",
          "843:     }",
          "857:     public static function create_competency($shortname,",
          "858:                                              $idnumber,",
          "859:                                              $description,",
          "860:                                              $descriptionformat,",
          "861:                                              $visible,",
          "862:                                              $competencyframeworkid,",
          "863:                                              $parentid) {",
          "864:         $params = self::validate_parameters(self::create_competency_parameters(),",
          "865:                                             array(",
          "866:                                                 'shortname' => $shortname,",
          "867:                                                 'idnumber' => $idnumber,",
          "868:                                                 'description' => $description,",
          "869:                                                 'descriptionformat' => $descriptionformat,",
          "870:                                                 'visible' => $visible,",
          "871:                                                 'competencyframeworkid' => $competencyframeworkid,",
          "872:                                                 'parentid' => $parentid,",
          "873:                                             ));",
          "875:         $params = (object) $params;",
          "877:         $result = api::create_competency($params);",
          "878:         return $result->to_record();",
          "879:     }",
          "886:     public static function create_competency_returns() {",
          "887:         return self::get_competency_external_structure();",
          "888:     }",
          "895:     public static function read_competency_parameters() {",
          "896:         $id = new external_value(",
          "897:             PARAM_INT,",
          "898:             'Data base record id for the competency',",
          "899:             VALUE_REQUIRED",
          "900:         );",
          "902:         $params = array(",
          "903:             'id' => $id,",
          "904:         );",
          "905:         return new external_function_parameters($params);",
          "906:     }",
          "912:     public static function read_competency_is_allowed_from_ajax() {",
          "913:         return true;",
          "914:     }",
          "922:     public static function read_competency($id) {",
          "923:         $params = self::validate_parameters(self::read_competency_parameters(),",
          "924:                                             array(",
          "925:                                                 'id' => $id,",
          "926:                                             ));",
          "928:         $result = api::read_competency($params['id']);",
          "929:         return $result->to_record();",
          "930:     }",
          "937:     public static function read_competency_returns() {",
          "938:         return self::get_competency_external_structure();",
          "939:     }",
          "946:     public static function delete_competency_parameters() {",
          "947:         $id = new external_value(",
          "948:             PARAM_INT,",
          "949:             'Data base record id for the competency',",
          "950:             VALUE_REQUIRED",
          "951:         );",
          "953:         $params = array(",
          "954:             'id' => $id,",
          "955:         );",
          "956:         return new external_function_parameters($params);",
          "957:     }",
          "963:     public static function delete_competency_is_allowed_from_ajax() {",
          "964:         return true;",
          "965:     }",
          "973:     public static function delete_competency($id) {",
          "974:         $params = self::validate_parameters(self::delete_competency_parameters(),",
          "975:                                             array(",
          "976:                                                 'id' => $id,",
          "977:                                             ));",
          "979:         return api::delete_competency($params['id']);",
          "980:     }",
          "987:     public static function delete_competency_returns() {",
          "988:         return new external_value(PARAM_BOOL, 'True if the delete was successful');",
          "989:     }",
          "996:     public static function update_competency_parameters() {",
          "997:         $id = new external_value(",
          "998:             PARAM_INT,",
          "999:             'Data base record id for the competency',",
          "1000:             VALUE_REQUIRED",
          "1001:         );",
          "1002:         $shortname = new external_value(",
          "1003:             PARAM_TEXT,",
          "1004:             'Short name for the competency.',",
          "1005:             VALUE_REQUIRED",
          "1006:         );",
          "1007:         $idnumber = new external_value(",
          "1008:             PARAM_TEXT,",
          "1009:             'If provided, must be a unique string to identify this competency.',",
          "1010:             VALUE_REQUIRED",
          "1011:         );",
          "1012:         $description = new external_value(",
          "1013:             PARAM_RAW,",
          "1014:             'Description for the framework',",
          "1015:             VALUE_REQUIRED",
          "1016:         );",
          "1017:         $descriptionformat = new external_format_value(",
          "1018:             'Description format for the framework',",
          "1019:             VALUE_REQUIRED",
          "1020:         );",
          "1021:         $visible = new external_value(",
          "1022:             PARAM_BOOL,",
          "1023:             'Is this framework visible?',",
          "1024:             VALUE_REQUIRED",
          "1025:         );",
          "1027:         $params = array(",
          "1028:             'id' => $id,",
          "1029:             'shortname' => $shortname,",
          "1030:             'idnumber' => $idnumber,",
          "1031:             'description' => $description,",
          "1032:             'descriptionformat' => $descriptionformat,",
          "1033:             'visible' => $visible,",
          "1034:         );",
          "1035:         return new external_function_parameters($params);",
          "1036:     }",
          "1042:     public static function update_competency_is_allowed_from_ajax() {",
          "1043:         return true;",
          "1044:     }",
          "1057:     public static function update_competency($id,",
          "1058:                                              $shortname,",
          "1059:                                              $idnumber,",
          "1060:                                              $description,",
          "1061:                                              $descriptionformat,",
          "1062:                                              $visible) {",
          "1064:         $params = self::validate_parameters(self::update_competency_parameters(),",
          "1065:                                             array(",
          "1066:                                                 'id' => $id,",
          "1067:                                                 'shortname' => $shortname,",
          "1068:                                                 'idnumber' => $idnumber,",
          "1069:                                                 'description' => $description,",
          "1070:                                                 'descriptionformat' => $descriptionformat,",
          "1071:                                                 'visible' => $visible",
          "1072:                                             ));",
          "1073:         $params = (object) $params;",
          "1075:         return api::update_competency($params);",
          "1076:     }",
          "1083:     public static function update_competency_returns() {",
          "1084:         return new external_value(PARAM_BOOL, 'True if the update was successful');",
          "1085:     }",
          "1092:     public static function list_competencies_parameters() {",
          "1093:         return self::list_parameters_structure();",
          "1094:     }",
          "1100:     public static function list_competencies_is_allowed_from_ajax() {",
          "1101:         return true;",
          "1102:     }",
          "1109:     public static function list_competencies($filters, $sort, $order, $skip, $limit) {",
          "1110:         $params = self::validate_parameters(self::list_competencies_parameters(),",
          "1111:                                             array(",
          "1112:                                                 'filters' => $filters,",
          "1113:                                                 'sort' => $sort,",
          "1114:                                                 'order' => $order,",
          "1115:                                                 'skip' => $skip,",
          "1116:                                                 'limit' => $limit",
          "1117:                                             ));",
          "1119:         if ($params['order'] !== '' && $params['order'] !== 'ASC' && $params['order'] !== 'DESC') {",
          "1120:             throw new invalid_parameter_exception('Invalid order param. Must be ASC, DESC or empty.');",
          "1121:         }",
          "1123:         $safefilters = array();",
          "1124:         $validcolumns = array('id', 'shortname', 'description', 'sortorder', 'idnumber', 'visible', 'parentid', 'competencyframeworkid');",
          "1125:         foreach ($params['filters'] as $filter) {",
          "1126:             if (!in_array($filter->column, $validcolumns)) {",
          "1127:                 throw new invalid_parameter_exception('Filter column was invalid');",
          "1128:             }",
          "1129:             $safefilters[$filter->column] = $filter->value;",
          "1130:         }",
          "1132:         $results = api::list_competencies($safefilters,",
          "1133:                                                      $params['sort'],",
          "1134:                                                      $params['order'],",
          "1135:                                                      $params['skip'],",
          "1136:                                                      $params['limit']);",
          "1137:         $records = array();",
          "1138:         foreach ($results as $result) {",
          "1139:             $record = $result->to_record();",
          "1140:             array_push($records, $record);",
          "1141:         }",
          "1142:         return $records;",
          "1143:     }",
          "1150:     public static function list_competencies_returns() {",
          "1151:         return new external_multiple_structure(self::get_competency_external_structure());",
          "1152:     }",
          "1159:     public static function search_competencies_parameters() {",
          "1160:         $searchtext = new external_value(",
          "1161:             PARAM_RAW,",
          "1162:             'Text to search for',",
          "1163:             VALUE_REQUIRED",
          "1164:         );",
          "1165:         $frameworkid = new external_value(",
          "1166:             PARAM_INT,",
          "1167:             'Competency framework id',",
          "1168:             VALUE_REQUIRED",
          "1169:         );",
          "1171:         $params = array(",
          "1172:             'searchtext' => $searchtext,",
          "1173:             'competencyframeworkid' => $frameworkid",
          "1174:         );",
          "1175:         return new external_function_parameters($params);",
          "1176:     }",
          "1182:     public static function search_competencies_is_allowed_from_ajax() {",
          "1183:         return true;",
          "1184:     }",
          "1191:     public static function search_competencies($searchtext, $competencyframeworkid) {",
          "1192:         $params = self::validate_parameters(self::search_competencies_parameters(),",
          "1193:                                             array(",
          "1194:                                                 'searchtext' => $searchtext,",
          "1195:                                                 'competencyframeworkid' => $competencyframeworkid",
          "1196:                                             ));",
          "1198:         $results = api::search_competencies($searchtext, $competencyframeworkid);",
          "1199:         $records = array();",
          "1200:         foreach ($results as $result) {",
          "1201:             $record = $result->to_record();",
          "1202:             array_push($records, $record);",
          "1203:         }",
          "1204:         return $records;",
          "1205:     }",
          "1212:     public static function search_competencies_returns() {",
          "1213:         return new external_multiple_structure(self::get_competency_external_structure());",
          "1214:     }",
          "1222:     public static function count_competencies_parameters() {",
          "1223:         return self::count_parameters_structure();",
          "1224:     }",
          "1230:     public static function count_competencies_is_allowed_from_ajax() {",
          "1231:         return true;",
          "1232:     }",
          "1239:     public static function count_competencies($filters) {",
          "1240:         $params = self::validate_parameters(self::count_competencies_parameters(),",
          "1241:                                             array(",
          "1242:                                                 'filters' => $filters",
          "1243:                                             ));",
          "1245:         $safefilters = array();",
          "1246:         $validcolumns = array('id', 'shortname', 'description', 'sortorder', 'idnumber', 'visible', 'parentid', 'competencyframeworkid');",
          "1247:         foreach ($params['filters'] as $filter) {",
          "1248:             if (!in_array($filter->column, $validcolumns)) {",
          "1249:                 throw new invalid_parameter_exception('Filter column was invalid');",
          "1250:             }",
          "1251:             $safefilters[$filter->column] = $filter->value;",
          "1252:         }",
          "1254:         return api::count_competencies($safefilters);",
          "1255:     }",
          "1262:     public static function count_competencies_returns() {",
          "1263:         return new external_value(PARAM_INT, 'The number of competencies found.');",
          "1264:     }",
          "1271:     public static function data_for_competencies_manage_page_parameters() {",
          "1272:         $competencyframeworkid = new external_value(",
          "1273:             PARAM_INT,",
          "1274:             'The competency framework id',",
          "1275:             VALUE_REQUIRED",
          "1276:         );",
          "1277:         $search = new external_value(",
          "1278:             PARAM_RAW,",
          "1279:             'A search string',",
          "1280:             VALUE_DEFAULT,",
          "1281:             ''",
          "1282:         );",
          "1283:         $params = array(",
          "1284:             'competencyframeworkid' => $competencyframeworkid,",
          "1285:             'search' => $search",
          "1286:         );",
          "1287:         return new external_function_parameters($params);",
          "1288:     }",
          "1294:     public static function data_for_competencies_manage_page_is_allowed_from_ajax() {",
          "1295:         return true;",
          "1296:     }",
          "1303:     public static function data_for_competencies_manage_page($competencyframeworkid, $search) {",
          "1304:         global $PAGE;",
          "1305:         $params = self::validate_parameters(self::data_for_competencies_manage_page_parameters(),",
          "1306:                                             array(",
          "1307:                                                 'competencyframeworkid' => $competencyframeworkid,",
          "1308:                                                 'search' => $search",
          "1309:                                             ));",
          "1311:         $framework = new \\tool_lp\\competency_framework($params['competencyframeworkid']);",
          "1313:         $renderable = new \\tool_lp\\output\\manage_competencies_page($framework, $params['search']);",
          "1314:         $renderer = $PAGE->get_renderer('tool_lp');",
          "1316:         $data = $renderable->export_for_template($renderer);",
          "1318:         return $data;",
          "1319:     }",
          "1326:     public static function data_for_competencies_manage_page_returns() {",
          "1327:         return new external_single_structure(array (",
          "1328:             'framework' => self::get_competency_framework_external_structure(),",
          "1329:             'canmanage' => new external_value(PARAM_BOOL, 'True if this user has permission to manage competency frameworks'),",
          "1330:             'competencies' => new external_multiple_structure(",
          "1331:                 self::get_competency_external_structure()",
          "1332:             )",
          "1333:         ));",
          "1335:     }",
          "1342:     public static function set_parent_competency_parameters() {",
          "1343:         $competencyid = new external_value(",
          "1344:             PARAM_INT,",
          "1345:             'The competency id',",
          "1346:             VALUE_REQUIRED",
          "1347:         );",
          "1348:         $parentid = new external_value(",
          "1349:             PARAM_INT,",
          "1350:             'The new competency parent id',",
          "1351:             VALUE_REQUIRED",
          "1352:         );",
          "1353:         $params = array(",
          "1354:             'competencyid' => $competencyid,",
          "1355:             'parentid' => $parentid",
          "1356:         );",
          "1357:         return new external_function_parameters($params);",
          "1358:     }",
          "1364:     public static function set_parent_competency_is_allowed_from_ajax() {",
          "1365:         return true;",
          "1366:     }",
          "1373:     public static function set_parent_competency($competencyid, $parentid) {",
          "1374:         global $PAGE;",
          "1375:         $params = self::validate_parameters(self::set_parent_competency_parameters(),",
          "1376:                                             array(",
          "1377:                                                 'competencyid' => $competencyid,",
          "1378:                                                 'parentid' => $parentid",
          "1379:                                             ));",
          "1381:         return api::set_parent_competency($competencyid, $parentid);",
          "1382:     }",
          "1389:     public static function set_parent_competency_returns() {",
          "1390:         return new external_value(PARAM_BOOL, 'True if the update was successful');",
          "1391:     }",
          "1398:     public static function move_up_competency_parameters() {",
          "1399:         $competencyid = new external_value(",
          "1400:             PARAM_INT,",
          "1401:             'The competency id',",
          "1402:             VALUE_REQUIRED",
          "1403:         );",
          "1404:         $params = array(",
          "1405:             'id' => $competencyid,",
          "1406:         );",
          "1407:         return new external_function_parameters($params);",
          "1408:     }",
          "1414:     public static function move_up_competency_is_allowed_from_ajax() {",
          "1415:         return true;",
          "1416:     }",
          "1423:     public static function move_up_competency($competencyid) {",
          "1424:         global $PAGE;",
          "1425:         $params = self::validate_parameters(self::move_up_competency_parameters(),",
          "1426:                                             array(",
          "1427:                                                 'id' => $competencyid,",
          "1428:                                             ));",
          "1430:         return api::move_up_competency($params['id']);",
          "1431:     }",
          "1438:     public static function move_up_competency_returns() {",
          "1439:         return new external_value(PARAM_BOOL, 'True if the update was successful');",
          "1440:     }",
          "1447:     public static function move_down_competency_parameters() {",
          "1448:         $competencyid = new external_value(",
          "1449:             PARAM_INT,",
          "1450:             'The competency id',",
          "1451:             VALUE_REQUIRED",
          "1452:         );",
          "1453:         $params = array(",
          "1454:             'id' => $competencyid,",
          "1455:         );",
          "1456:         return new external_function_parameters($params);",
          "1457:     }",
          "1463:     public static function move_down_competency_is_allowed_from_ajax() {",
          "1464:         return true;",
          "1465:     }",
          "1472:     public static function move_down_competency($competencyid) {",
          "1473:         global $PAGE;",
          "1474:         $params = self::validate_parameters(self::move_down_competency_parameters(),",
          "1475:                                             array(",
          "1476:                                                 'id' => $competencyid,",
          "1477:                                             ));",
          "1479:         return api::move_down_competency($params['id']);",
          "1480:     }",
          "1487:     public static function move_down_competency_returns() {",
          "1488:         return new external_value(PARAM_BOOL, 'True if the update was successful');",
          "1489:     }",
          "1496:     public static function count_courses_using_competency_parameters() {",
          "1497:         $competencyid = new external_value(",
          "1498:             PARAM_INT,",
          "1499:             'The competency id',",
          "1500:             VALUE_REQUIRED",
          "1501:         );",
          "1502:         $params = array(",
          "1503:             'id' => $competencyid,",
          "1504:         );",
          "1505:         return new external_function_parameters($params);",
          "1506:     }",
          "1512:     public static function count_courses_using_competency_is_allowed_from_ajax() {",
          "1513:         return true;",
          "1514:     }",
          "1521:     public static function count_courses_using_competency($competencyid) {",
          "1522:         global $PAGE;",
          "1523:         $params = self::validate_parameters(self::count_courses_using_competency_parameters(),",
          "1524:                                             array(",
          "1525:                                                 'id' => $competencyid,",
          "1526:                                             ));",
          "1528:         return api::count_courses_using_competency($params['id']);",
          "1529:     }",
          "1536:     public static function count_courses_using_competency_returns() {",
          "1537:         return new external_value(PARAM_INT, 'The number of courses using this competency');",
          "1538:     }",
          "1545:     public static function list_courses_using_competency_parameters() {",
          "1546:         $competencyid = new external_value(",
          "1547:             PARAM_INT,",
          "1548:             'The competency id',",
          "1549:             VALUE_REQUIRED",
          "1550:         );",
          "1551:         $params = array(",
          "1552:             'id' => $competencyid,",
          "1553:         );",
          "1554:         return new external_function_parameters($params);",
          "1555:     }",
          "1561:     public static function list_courses_using_competency_is_allowed_from_ajax() {",
          "1562:         return true;",
          "1563:     }",
          "1570:     public static function list_courses_using_competency($competencyid) {",
          "1571:         global $PAGE;",
          "1572:         $params = self::validate_parameters(self::list_courses_using_competency_parameters(),",
          "1573:                                             array(",
          "1574:                                                 'id' => $competencyid,",
          "1575:                                             ));",
          "1577:         return api::list_courses_using_competency($params['id']);",
          "1578:     }",
          "1585:     public static function list_courses_using_competency_returns() {",
          "1586:         $id = new external_value(",
          "1587:             PARAM_INT,",
          "1588:             'Course id'",
          "1589:         );",
          "1590:         $visible = new external_value(",
          "1591:             PARAM_BOOL,",
          "1592:             'Is the course visible.'",
          "1593:         );",
          "1594:         $idnumber = new external_value(",
          "1595:             PARAM_TEXT,",
          "1596:             'Course id number'",
          "1597:         );",
          "1598:         $shortname = new external_value(",
          "1599:             PARAM_TEXT,",
          "1600:             'Course short name'",
          "1601:         );",
          "1602:         $shortnameformatted = new external_value(",
          "1603:             PARAM_RAW,",
          "1604:             'Shortname that has been formatted for display'",
          "1605:         );",
          "1606:         $fullname = new external_value(",
          "1607:             PARAM_TEXT,",
          "1608:             'Course fullname'",
          "1609:         );",
          "1610:         $fullnameformatted = new external_value(",
          "1611:             PARAM_RAW,",
          "1612:             'Fullname that has been formatted for display'",
          "1613:         );",
          "1615:         $returns = array(",
          "1616:             'id' => $id,",
          "1617:             'shortname' => $shortname,",
          "1618:             'shortnameformatted' => $shortnameformatted,",
          "1619:             'idnumber' => $idnumber,",
          "1620:             'fullname' => $fullname,",
          "1621:             'fullnameformatted' => $fullnameformatted,",
          "1622:             'visible' => $visible",
          "1623:         );",
          "1624:         return new external_multiple_structure(new external_single_structure($returns));",
          "1625:     }",
          "1632:     public static function count_competencies_in_course_parameters() {",
          "1633:         $courseid = new external_value(",
          "1634:             PARAM_INT,",
          "1635:             'The course id',",
          "1636:             VALUE_REQUIRED",
          "1637:         );",
          "1638:         $params = array(",
          "1639:             'id' => $courseid,",
          "1640:         );",
          "1641:         return new external_function_parameters($params);",
          "1642:     }",
          "1648:     public static function count_competencies_in_course_is_allowed_from_ajax() {",
          "1649:         return true;",
          "1650:     }",
          "1658:     public static function count_competencies_in_course($courseid) {",
          "1659:         global $PAGE;",
          "1660:         $params = self::validate_parameters(self::count_competencies_in_course_parameters(),",
          "1661:                                             array(",
          "1662:                                                 'id' => $courseid,",
          "1663:                                             ));",
          "1665:         return api::count_competencies_in_course($params['id']);",
          "1666:     }",
          "1673:     public static function count_competencies_in_course_returns() {",
          "1674:         return new external_value(PARAM_INT, 'The number of competencies in this course.');",
          "1675:     }",
          "1682:     public static function list_competencies_in_course_parameters() {",
          "1683:         $courseid = new external_value(",
          "1684:             PARAM_INT,",
          "1685:             'The course id',",
          "1686:             VALUE_REQUIRED",
          "1687:         );",
          "1688:         $params = array(",
          "1689:             'id' => $courseid,",
          "1690:         );",
          "1691:         return new external_function_parameters($params);",
          "1692:     }",
          "1698:     public static function list_competencies_in_course_is_allowed_from_ajax() {",
          "1699:         return true;",
          "1700:     }",
          "1707:     public static function list_competencies_in_course($courseid) {",
          "1708:         global $PAGE;",
          "1709:         $params = self::validate_parameters(self::list_competencies_in_course_parameters(),",
          "1710:                                             array(",
          "1711:                                                 'id' => $courseid,",
          "1712:                                             ));",
          "1714:         $competencies = api::list_competencies_in_course($params['id']);",
          "1715:         $results = array();",
          "1716:         foreach ($competencies as $competency) {",
          "1717:             $record = $competency->to_record();",
          "1718:             array_push($results, $record);",
          "1719:         }",
          "1720:         return $results;",
          "1721:     }",
          "1728:     public static function list_competencies_in_course_returns() {",
          "1729:         return new external_multiple_structure(self::get_competency_external_structure());",
          "1730:     }",
          "1737:     public static function add_competency_to_course_parameters() {",
          "1738:         $courseid = new external_value(",
          "1739:             PARAM_INT,",
          "1740:             'The course id',",
          "1741:             VALUE_REQUIRED",
          "1742:         );",
          "1743:         $competencyid = new external_value(",
          "1744:             PARAM_INT,",
          "1745:             'The competency id',",
          "1746:             VALUE_REQUIRED",
          "1747:         );",
          "1748:         $params = array(",
          "1749:             'courseid' => $courseid,",
          "1750:             'competencyid' => $competencyid,",
          "1751:         );",
          "1752:         return new external_function_parameters($params);",
          "1753:     }",
          "1759:     public static function add_competency_to_course_is_allowed_from_ajax() {",
          "1760:         return true;",
          "1761:     }",
          "1768:     public static function add_competency_to_course($courseid, $competencyid) {",
          "1769:         global $PAGE;",
          "1770:         $params = self::validate_parameters(self::add_competency_to_course_parameters(),",
          "1771:                                             array(",
          "1772:                                                 'courseid' => $courseid,",
          "1773:                                                 'competencyid' => $competencyid,",
          "1774:                                             ));",
          "1776:         return api::add_competency_to_course($params['courseid'], $params['competencyid']);",
          "1777:     }",
          "1784:     public static function add_competency_to_course_returns() {",
          "1785:         return new external_value(PARAM_BOOL, 'True if successful.');",
          "1786:     }",
          "1793:     public static function remove_competency_from_course_parameters() {",
          "1794:         $courseid = new external_value(",
          "1795:             PARAM_INT,",
          "1796:             'The course id',",
          "1797:             VALUE_REQUIRED",
          "1798:         );",
          "1799:         $competencyid = new external_value(",
          "1800:             PARAM_INT,",
          "1801:             'The competency id',",
          "1802:             VALUE_REQUIRED",
          "1803:         );",
          "1804:         $params = array(",
          "1805:             'courseid' => $courseid,",
          "1806:             'competencyid' => $competencyid,",
          "1807:         );",
          "1808:         return new external_function_parameters($params);",
          "1809:     }",
          "1815:     public static function remove_competency_from_course_is_allowed_from_ajax() {",
          "1816:         return true;",
          "1817:     }",
          "1824:     public static function remove_competency_from_course($courseid, $competencyid) {",
          "1825:         $params = self::validate_parameters(self::remove_competency_from_course_parameters(),",
          "1826:                                             array(",
          "1827:                                                 'courseid' => $courseid,",
          "1828:                                                 'competencyid' => $competencyid,",
          "1829:                                             ));",
          "1831:         return api::remove_competency_from_course($params['courseid'], $params['competencyid']);",
          "1832:     }",
          "1839:     public static function remove_competency_from_course_returns() {",
          "1840:         return new external_value(PARAM_BOOL, 'True if successful.');",
          "1841:     }",
          "1848:     public static function data_for_course_competencies_page_parameters() {",
          "1849:         $courseid = new external_value(",
          "1850:             PARAM_INT,",
          "1851:             'The course id',",
          "1852:             VALUE_REQUIRED",
          "1853:         );",
          "1854:         $params = array('courseid' => $courseid);",
          "1855:         return new external_function_parameters($params);",
          "1856:     }",
          "1862:     public static function data_for_course_competencies_page_is_allowed_from_ajax() {",
          "1863:         return true;",
          "1864:     }",
          "1871:     public static function data_for_course_competencies_page($courseid) {",
          "1872:         global $PAGE;",
          "1873:         $params = self::validate_parameters(self::data_for_course_competencies_page_parameters(),",
          "1874:                                             array(",
          "1875:                                                 'courseid' => $courseid,",
          "1876:                                             ));",
          "1878:         $renderable = new \\tool_lp\\output\\course_competencies_page($params['courseid']);",
          "1879:         $renderer = $PAGE->get_renderer('tool_lp');",
          "1881:         $data = $renderable->export_for_template($renderer);",
          "1883:         return $data;",
          "1884:     }",
          "1891:     public static function data_for_course_competencies_page_returns() {",
          "1892:         return new external_single_structure(array (",
          "1893:             'courseid' => new external_value(PARAM_INT, 'The current course id'),",
          "1894:             'canmanagecompetencyframeworks' => new external_value(PARAM_BOOL, 'User can manage competency frameworks'),",
          "1895:             'canmanagecoursecompetencies' => new external_value(PARAM_BOOL, 'User can manage linked course competencies'),",
          "1896:             'competencies' => new external_multiple_structure(",
          "1897:                 self::get_competency_external_structure()",
          "1898:             ),",
          "1899:             'manageurl' => new external_value(PARAM_LOCALURL, 'Url to the manage competencies page.'),",
          "1900:         ));",
          "1902:     }",
          "1909:     public static function reorder_course_competency_parameters() {",
          "1910:         $courseid = new external_value(",
          "1911:             PARAM_INT,",
          "1912:             'The course id',",
          "1913:             VALUE_REQUIRED",
          "1914:         );",
          "1915:         $competencyidfrom = new external_value(",
          "1916:             PARAM_INT,",
          "1917:             'The competency id we are moving',",
          "1918:             VALUE_REQUIRED",
          "1919:         );",
          "1920:         $competencyidto = new external_value(",
          "1921:             PARAM_INT,",
          "1922:             'The competency id we are moving to',",
          "1923:             VALUE_REQUIRED",
          "1924:         );",
          "1925:         $params = array(",
          "1926:             'courseid' => $courseid,",
          "1927:             'competencyidfrom' => $competencyidfrom,",
          "1928:             'competencyidto' => $competencyidto,",
          "1929:         );",
          "1930:         return new external_function_parameters($params);",
          "1931:     }",
          "1937:     public static function reorder_course_competency_is_allowed_from_ajax() {",
          "1938:         return true;",
          "1939:     }",
          "1949:     public static function reorder_course_competency($courseid, $competencyidfrom, $competencyidto) {",
          "1950:         $params = self::validate_parameters(self::reorder_course_competency_parameters(),",
          "1951:                                             array(",
          "1952:                                                 'courseid' => $courseid,",
          "1953:                                                 'competencyidfrom' => $competencyidfrom,",
          "1954:                                                 'competencyidto' => $competencyidto,",
          "1955:                                             ));",
          "1957:         return api::reorder_course_competency($params['courseid'], $params['competencyidfrom'], $params['competencyidto']);",
          "1958:     }",
          "1965:     public static function reorder_course_competency_returns() {",
          "1966:         return new external_value(PARAM_BOOL, 'True if successful.');",
          "1967:     }",
          "1974:     protected static function get_template_external_structure() {",
          "1975:         $id = new external_value(",
          "1976:             PARAM_INT,",
          "1977:             'Database record id'",
          "1978:         );",
          "1979:         $shortname = new external_value(",
          "1980:             PARAM_TEXT,",
          "1981:             'Short name for the learning plan template'",
          "1982:         );",
          "1983:         $idnumber = new external_value(",
          "1984:             PARAM_TEXT,",
          "1985:             'If provided, must be a unique string to identify this learning plan template'",
          "1986:         );",
          "1987:         $duedate = new external_value(",
          "1988:             PARAM_INT,",
          "1989:             'The default due date for instances of this plan.'",
          "1990:         );",
          "1991:         $duedateformatted = new external_value(",
          "1992:             PARAM_RAW,",
          "1993:             'Due date that has been formatted for display'",
          "1994:         );",
          "1995:         $description = new external_value(",
          "1996:             PARAM_RAW,",
          "1997:             'Description for the template'",
          "1998:         );",
          "1999:         $descriptionformat = new external_format_value(",
          "2000:             'Description format for the template'",
          "2001:         );",
          "2002:         $descriptionformatted = new external_value(",
          "2003:             PARAM_RAW,",
          "2004:             'Description that has been formatted for display'",
          "2005:         );",
          "2006:         $visible = new external_value(",
          "2007:             PARAM_BOOL,",
          "2008:             'Is this template visible?'",
          "2009:         );",
          "2010:         $sortorder = new external_value(",
          "2011:             PARAM_INT,",
          "2012:             'Relative sort order of this template'",
          "2013:         );",
          "2014:         $timecreated = new external_value(",
          "2015:             PARAM_INT,",
          "2016:             'Timestamp this record was created'",
          "2017:         );",
          "2018:         $timemodified = new external_value(",
          "2019:             PARAM_INT,",
          "2020:             'Timestamp this record was modified'",
          "2021:         );",
          "2022:         $usermodified = new external_value(",
          "2023:             PARAM_INT,",
          "2024:             'User who modified this record last'",
          "2025:         );",
          "2027:         $returns = array(",
          "2028:             'id' => $id,",
          "2029:             'shortname' => $shortname,",
          "2030:             'idnumber' => $idnumber,",
          "2031:             'description' => $description,",
          "2032:             'descriptionformat' => $descriptionformat,",
          "2033:             'descriptionformatted' => $descriptionformatted,",
          "2034:             'visible' => $visible,",
          "2035:             'sortorder' => $sortorder,",
          "2036:             'timecreated' => $timecreated,",
          "2037:             'timemodified' => $timemodified,",
          "2038:             'usermodified' => $usermodified,",
          "2039:         );",
          "2040:         return new external_single_structure($returns);",
          "2041:     }",
          "2048:     public static function create_template_parameters() {",
          "2049:         $shortname = new external_value(",
          "2050:             PARAM_TEXT,",
          "2051:             'Short name for the learning plan template.',",
          "2052:             VALUE_REQUIRED",
          "2053:         );",
          "2054:         $idnumber = new external_value(",
          "2055:             PARAM_TEXT,",
          "2056:             'If provided, must be a unique string to identify this learning plan template.',",
          "2057:             VALUE_DEFAULT,",
          "2058:             ''",
          "2059:         );",
          "2060:         $duedate = new external_value(",
          "2061:             PARAM_INT,",
          "2062:             'The default due date for instances of this plan',",
          "2063:             VALUE_DEFAULT,",
          "2064:             0",
          "2065:         );",
          "2066:         $description = new external_value(",
          "2067:             PARAM_RAW,",
          "2068:             'Optional description for the learning plan template',",
          "2069:             VALUE_DEFAULT,",
          "2070:             ''",
          "2071:         );",
          "2072:         $descriptionformat = new external_format_value(",
          "2073:             'Optional description format for the learning plan template',",
          "2074:             VALUE_DEFAULT,",
          "2075:             FORMAT_HTML",
          "2076:         );",
          "2077:         $visible = new external_value(",
          "2078:             PARAM_BOOL,",
          "2079:             'Is this learning plan template visible?',",
          "2080:             VALUE_DEFAULT,",
          "2081:             true",
          "2082:         );",
          "2084:         $params = array(",
          "2085:             'shortname' => $shortname,",
          "2086:             'idnumber' => $idnumber,",
          "2087:             'duedate' => $duedate,",
          "2088:             'description' => $description,",
          "2089:             'descriptionformat' => $descriptionformat,",
          "2090:             'visible' => $visible,",
          "2091:         );",
          "2092:         return new external_function_parameters($params);",
          "2093:     }",
          "2099:     public static function create_template_is_allowed_from_ajax() {",
          "2100:         return true;",
          "2101:     }",
          "2114:     public static function create_template($shortname, $idnumber, $description, $descriptionformat, $visible) {",
          "2115:         $params = self::validate_parameters(self::create_template_parameters(),",
          "2116:                                             array(",
          "2117:                                                 'shortname' => $shortname,",
          "2118:                                                 'idnumber' => $idnumber,",
          "2119:                                                 'duedate' => $duedate,",
          "2120:                                                 'description' => $description,",
          "2121:                                                 'descriptionformat' => $descriptionformat,",
          "2122:                                                 'visible' => $visible,",
          "2123:                                             ));",
          "2125:         $params = (object) $params;",
          "2127:         $result = api::create_template($params);",
          "2128:         return $result->to_record();",
          "2129:     }",
          "2136:     public static function create_template_returns() {",
          "2137:         return self::get_template_external_structure();",
          "2138:     }",
          "2145:     public static function read_template_parameters() {",
          "2146:         $id = new external_value(",
          "2147:             PARAM_INT,",
          "2148:             'Data base record id for the template',",
          "2149:             VALUE_REQUIRED",
          "2150:         );",
          "2152:         $params = array(",
          "2153:             'id' => $id,",
          "2154:         );",
          "2155:         return new external_function_parameters($params);",
          "2156:     }",
          "2162:     public static function read_template_is_allowed_from_ajax() {",
          "2163:         return true;",
          "2164:     }",
          "2172:     public static function read_template($id) {",
          "2173:         $params = self::validate_parameters(self::read_template_parameters(),",
          "2174:                                             array(",
          "2175:                                                 'id' => $id,",
          "2176:                                             ));",
          "2178:         $result = api::read_template($params['id']);",
          "2179:         return $result->to_record();",
          "2180:     }",
          "2187:     public static function read_template_returns() {",
          "2188:         return self::get_template_external_structure();",
          "2189:     }",
          "2196:     public static function delete_template_parameters() {",
          "2197:         $id = new external_value(",
          "2198:             PARAM_INT,",
          "2199:             'Data base record id for the template',",
          "2200:             VALUE_REQUIRED",
          "2201:         );",
          "2203:         $params = array(",
          "2204:             'id' => $id,",
          "2205:         );",
          "2206:         return new external_function_parameters($params);",
          "2207:     }",
          "2213:     public static function delete_template_is_allowed_from_ajax() {",
          "2214:         return true;",
          "2215:     }",
          "2223:     public static function delete_template($id) {",
          "2224:         $params = self::validate_parameters(self::delete_template_parameters(),",
          "2225:                                             array(",
          "2226:                                                 'id' => $id,",
          "2227:                                             ));",
          "2229:         return api::delete_template($params['id']);",
          "2230:     }",
          "2237:     public static function delete_template_returns() {",
          "2238:         return new external_value(PARAM_BOOL, 'True if the delete was successful');",
          "2239:     }",
          "2246:     public static function update_template_parameters() {",
          "2247:         $id = new external_value(",
          "2248:             PARAM_INT,",
          "2249:             'Data base record id for the template',",
          "2250:             VALUE_REQUIRED",
          "2251:         );",
          "2252:         $shortname = new external_value(",
          "2253:             PARAM_TEXT,",
          "2254:             'Short name for the learning plan template.',",
          "2255:             VALUE_REQUIRED",
          "2256:         );",
          "2257:         $idnumber = new external_value(",
          "2258:             PARAM_TEXT,",
          "2259:             'If provided, must be a unique string to identify this learning plan template.',",
          "2260:             VALUE_REQUIRED",
          "2261:         );",
          "2262:         $duedate = new external_value(",
          "2263:             PARAM_INT,",
          "2264:             'Default due date for instances of this plan',",
          "2265:             VALUE_REQUIRED",
          "2266:         );",
          "2267:         $description = new external_value(",
          "2268:             PARAM_RAW,",
          "2269:             'Description for the template',",
          "2270:             VALUE_REQUIRED",
          "2271:         );",
          "2272:         $descriptionformat = new external_format_value(",
          "2273:             'Description format for the template',",
          "2274:             VALUE_REQUIRED",
          "2275:         );",
          "2276:         $visible = new external_value(",
          "2277:             PARAM_BOOL,",
          "2278:             'Is this template visible?',",
          "2279:             VALUE_REQUIRED",
          "2280:         );",
          "2282:         $params = array(",
          "2283:             'id' => $id,",
          "2284:             'shortname' => $shortname,",
          "2285:             'idnumber' => $idnumber,",
          "2286:             'duedate' => $duedate,",
          "2287:             'description' => $description,",
          "2288:             'descriptionformat' => $descriptionformat,",
          "2289:             'visible' => $visible,",
          "2290:         );",
          "2291:         return new external_function_parameters($params);",
          "2292:     }",
          "2298:     public static function update_template_is_allowed_from_ajax() {",
          "2299:         return true;",
          "2300:     }",
          "2314:     public static function update_template($id,",
          "2315:                                                        $shortname,",
          "2316:                                                        $idnumber,",
          "2317:                                                        $duedate,",
          "2318:                                                        $description,",
          "2319:                                                        $descriptionformat,",
          "2320:                                                        $visible) {",
          "2322:         $params = self::validate_parameters(self::update_template_parameters(),",
          "2323:                                             array(",
          "2324:                                                 'id' => $id,",
          "2325:                                                 'shortname' => $shortname,",
          "2326:                                                 'idnumber' => $idnumber,",
          "2327:                                                 'duedate' => $duedate,",
          "2328:                                                 'description' => $description,",
          "2329:                                                 'descriptionformat' => $descriptionformat,",
          "2330:                                                 'visible' => $visible",
          "2331:                                             ));",
          "2332:         $params = (object) $params;",
          "2334:         return api::update_template($params);",
          "2335:     }",
          "2342:     public static function update_template_returns() {",
          "2343:         return new external_value(PARAM_BOOL, 'True if the update was successful');",
          "2344:     }",
          "2351:     public static function list_templates_parameters() {",
          "2352:         return self::list_parameters_structure();",
          "2353:     }",
          "2359:     public static function list_templates_is_allowed_from_ajax() {",
          "2360:         return true;",
          "2361:     }",
          "2368:     public static function list_templates($filters, $sort, $order, $skip, $limit) {",
          "2369:         $params = self::validate_parameters(self::list_templates_parameters(),",
          "2370:                                             array(",
          "2371:                                                 'filters' => $filters,",
          "2372:                                                 'sort' => $sort,",
          "2373:                                                 'order' => $order,",
          "2374:                                                 'skip' => $skip,",
          "2375:                                                 'limit' => $limit",
          "2376:                                             ));",
          "2378:         if ($params['order'] !== '' && $params['order'] !== 'ASC' && $params['order'] !== 'DESC') {",
          "2379:             throw new invalid_parameter_exception('Invalid order param. Must be ASC, DESC or empty.');",
          "2380:         }",
          "2382:         $safefilters = array();",
          "2383:         $validcolumns = array('id', 'shortname', 'description', 'sortorder', 'idnumber', 'visible');",
          "2384:         foreach ($params['filters'] as $filter) {",
          "2385:             if (!in_array($filter->column, $validcolumns)) {",
          "2386:                 throw new invalid_parameter_exception('Filter column was invalid');",
          "2387:             }",
          "2388:             $safefilters[$filter->column] = $filter->value;",
          "2389:         }",
          "2391:         $results = api::list_templates($safefilters,",
          "2392:                                                                 $params['sort'],",
          "2393:                                                                 $params['order'],",
          "2394:                                                                 $params['skip'],",
          "2395:                                                                 $params['limit']);",
          "2396:         $records = array();",
          "2397:         foreach ($results as $result) {",
          "2398:             $record = $result->to_record();",
          "2399:             array_push($records, $record);",
          "2400:         }",
          "2401:         return $records;",
          "2402:     }",
          "2409:     public static function list_templates_returns() {",
          "2410:         return new external_multiple_structure(self::get_template_external_structure());",
          "2411:     }",
          "2418:     public static function count_templates_parameters() {",
          "2419:         $filters = new external_multiple_structure(new external_single_structure(",
          "2420:             array(",
          "2421:                 'column' => new external_value(PARAM_ALPHANUMEXT, 'Column name to filter by'),",
          "2422:                 'value' => new external_value(PARAM_TEXT, 'Value to filter by. Must be exact match')",
          "2423:             )",
          "2424:         ));",
          "2426:         $params = array(",
          "2427:             'filters' => $filters,",
          "2428:         );",
          "2429:         return new external_function_parameters($params);",
          "2430:     }",
          "2436:     public static function count_templates_is_allowed_from_ajax() {",
          "2437:         return true;",
          "2438:     }",
          "2445:     public static function count_templates($filters) {",
          "2446:         $params = self::validate_parameters(self::count_templates_parameters(),",
          "2447:                                             array(",
          "2448:                                                 'filters' => $filters",
          "2449:                                             ));",
          "2451:         $safefilters = array();",
          "2452:         $validcolumns = array('id', 'shortname', 'description', 'sortorder', 'idnumber', 'visible');",
          "2453:         foreach ($params['filters'] as $filter) {",
          "2454:             if (!in_array($filter->column, $validcolumns)) {",
          "2455:                 throw new invalid_parameter_exception('Filter column was invalid');",
          "2456:             }",
          "2457:             $safefilters[$filter->column] = $filter->value;",
          "2458:         }",
          "2460:         return api::count_templates($safefilters);",
          "2461:     }",
          "2468:     public static function count_templates_returns() {",
          "2469:         return new external_value(PARAM_INT, 'The number of learning plan templates found.');",
          "2470:     }",
          "2477:     public static function reorder_template_parameters() {",
          "2478:         $from = new external_value(",
          "2479:             PARAM_INT,",
          "2480:             'Template id to reorder.',",
          "2481:             VALUE_REQUIRED",
          "2482:         );",
          "2483:         $to = new external_value(",
          "2484:             PARAM_INT,",
          "2485:             'Template id to move to.',",
          "2486:             VALUE_REQUIRED",
          "2487:         );",
          "2488:         $params = array(",
          "2489:             'from' => $from,",
          "2490:             'to' => $to",
          "2491:         );",
          "2492:         return new external_function_parameters($params);",
          "2493:     }",
          "2499:     public static function reorder_template_is_allowed_from_ajax() {",
          "2500:         return true;",
          "2501:     }",
          "2510:     public static function reorder_template($from, $to) {",
          "2511:         $params = self::validate_parameters(self::reorder_template_parameters(),",
          "2512:                                             array(",
          "2513:                                                 'from' => $from,",
          "2514:                                                 'to' => $to",
          "2515:                                             ));",
          "2516:         return api::reorder_template($params['from'], $params['to']);",
          "2517:     }",
          "2524:     public static function reorder_template_returns() {",
          "2525:         return new external_value(PARAM_BOOL, 'True if this template was moved.');",
          "2526:     }",
          "2533:     public static function data_for_templates_manage_page_parameters() {",
          "2535:         $params = array();",
          "2536:         return new external_function_parameters($params);",
          "2537:     }",
          "2543:     public static function data_for_templates_manage_page_is_allowed_from_ajax() {",
          "2544:         return true;",
          "2545:     }",
          "2552:     public static function data_for_templates_manage_page() {",
          "2553:         global $PAGE;",
          "2555:         $renderable = new \\tool_lp\\output\\manage_templates_page();",
          "2556:         $renderer = $PAGE->get_renderer('tool_lp');",
          "2558:         $data = $renderable->export_for_template($renderer);",
          "2560:         return $data;",
          "2561:     }",
          "2568:     public static function data_for_templates_manage_page_returns() {",
          "2569:         return new external_single_structure(array (",
          "2570:             'canmanage' => new external_value(PARAM_BOOL, 'True if this user has permission to manage learning plan templates'),",
          "2571:             'templates' => new external_multiple_structure(",
          "2572:                 self::get_template_external_structure()",
          "2573:             ),",
          "2574:             'pluginbaseurl' => new external_value(PARAM_LOCALURL, 'Url to the tool_lp plugin folder on this Moodle site'),",
          "2575:             'navigation' => new external_multiple_structure(",
          "2576:                 new external_value(PARAM_RAW, 'HTML for a navigation item that should be on this page')",
          "2577:             )",
          "2578:         ));",
          "2580:     }",
          "2587:     public static function count_templates_using_competency_parameters() {",
          "2588:         $competencyid = new external_value(",
          "2589:             PARAM_INT,",
          "2590:             'The competency id',",
          "2591:             VALUE_REQUIRED",
          "2592:         );",
          "2593:         $params = array(",
          "2594:             'id' => $competencyid,",
          "2595:         );",
          "2596:         return new external_function_parameters($params);",
          "2597:     }",
          "2603:     public static function count_templates_using_competency_is_allowed_from_ajax() {",
          "2604:         return true;",
          "2605:     }",
          "2612:     public static function count_templates_using_competency($competencyid) {",
          "2613:         global $PAGE;",
          "2614:         $params = self::validate_parameters(self::count_templates_using_competency_parameters(),",
          "2615:                                             array(",
          "2616:                                                 'id' => $competencyid,",
          "2617:                                             ));",
          "2619:         return api::count_templates_using_competency($params['id']);",
          "2620:     }",
          "2627:     public static function count_templates_using_competency_returns() {",
          "2628:         return new external_value(PARAM_INT, 'The number of learning plan templates using this competency');",
          "2629:     }",
          "2636:     public static function list_templates_using_competency_parameters() {",
          "2637:         $competencyid = new external_value(",
          "2638:             PARAM_INT,",
          "2639:             'The competency id',",
          "2640:             VALUE_REQUIRED",
          "2641:         );",
          "2642:         $params = array(",
          "2643:             'id' => $competencyid,",
          "2644:         );",
          "2645:         return new external_function_parameters($params);",
          "2646:     }",
          "2652:     public static function list_templates_using_competency_is_allowed_from_ajax() {",
          "2653:         return true;",
          "2654:     }",
          "2661:     public static function list_templates_using_competency($competencyid) {",
          "2662:         global $PAGE;",
          "2663:         $params = self::validate_parameters(self::list_templates_using_competency_parameters(),",
          "2664:                                             array(",
          "2665:                                                 'id' => $competencyid,",
          "2666:                                             ));",
          "2668:         return api::list_templates_using_competency($params['id']);",
          "2669:     }",
          "2676:     public static function list_templates_using_competency_returns() {",
          "2677:         return new external_multiple_structure(self::get_template_external_structure());",
          "2678:     }",
          "2685:     public static function count_competencies_in_template_parameters() {",
          "2686:         $templateid = new external_value(",
          "2687:             PARAM_INT,",
          "2688:             'The template id',",
          "2689:             VALUE_REQUIRED",
          "2690:         );",
          "2691:         $params = array(",
          "2692:             'id' => $templateid,",
          "2693:         );",
          "2694:         return new external_function_parameters($params);",
          "2695:     }",
          "2701:     public static function count_competencies_in_template_is_allowed_from_ajax() {",
          "2702:         return true;",
          "2703:     }",
          "2711:     public static function count_competencies_in_template($templateid) {",
          "2712:         global $PAGE;",
          "2713:         $params = self::validate_parameters(self::count_competencies_in_template_parameters(),",
          "2714:                                             array(",
          "2715:                                                 'id' => $templateid,",
          "2716:                                             ));",
          "2718:         return api::count_competencies_in_template($params['id']);",
          "2719:     }",
          "2726:     public static function count_competencies_in_template_returns() {",
          "2727:         return new external_value(PARAM_INT, 'The number of competencies in this learning plan template.');",
          "2728:     }",
          "2735:     public static function list_competencies_in_template_parameters() {",
          "2736:         $templateid = new external_value(",
          "2737:             PARAM_INT,",
          "2738:             'The template id',",
          "2739:             VALUE_REQUIRED",
          "2740:         );",
          "2741:         $params = array(",
          "2742:             'id' => $courseid,",
          "2743:         );",
          "2744:         return new external_function_parameters($params);",
          "2745:     }",
          "2751:     public static function list_competencies_in_template_is_allowed_from_ajax() {",
          "2752:         return true;",
          "2753:     }",
          "2760:     public static function list_competencies_in_template($templateid) {",
          "2761:         global $PAGE;",
          "2762:         $params = self::validate_parameters(self::list_competencies_in_template_parameters(),",
          "2763:                                             array(",
          "2764:                                                 'id' => $templateid,",
          "2765:                                             ));",
          "2767:         $competencies = api::list_competencies_in_template($params['id']);",
          "2768:         $results = array();",
          "2769:         foreach ($competencies as $competency) {",
          "2770:             $record = $competency->to_record();",
          "2771:             array_push($results, $record);",
          "2772:         }",
          "2773:         return $results;",
          "2774:     }",
          "2781:     public static function list_competencies_in_template_returns() {",
          "2782:         return new external_multiple_structure(self::get_competency_external_structure());",
          "2783:     }",
          "2790:     public static function add_competency_to_template_parameters() {",
          "2791:         $templateid = new external_value(",
          "2792:             PARAM_INT,",
          "2793:             'The template id',",
          "2794:             VALUE_REQUIRED",
          "2795:         );",
          "2796:         $competencyid = new external_value(",
          "2797:             PARAM_INT,",
          "2798:             'The competency id',",
          "2799:             VALUE_REQUIRED",
          "2800:         );",
          "2801:         $params = array(",
          "2802:             'templateid' => $templateid,",
          "2803:             'competencyid' => $competencyid,",
          "2804:         );",
          "2805:         return new external_function_parameters($params);",
          "2806:     }",
          "2812:     public static function add_competency_to_template_is_allowed_from_ajax() {",
          "2813:         return true;",
          "2814:     }",
          "2821:     public static function add_competency_to_template($templateid, $competencyid) {",
          "2822:         global $PAGE;",
          "2823:         $params = self::validate_parameters(self::add_competency_to_template_parameters(),",
          "2824:                                             array(",
          "2825:                                                 'templateid' => $templateid,",
          "2826:                                                 'competencyid' => $competencyid,",
          "2827:                                             ));",
          "2829:         return api::add_competency_to_template($params['templateid'], $params['competencyid']);",
          "2830:     }",
          "2837:     public static function add_competency_to_template_returns() {",
          "2838:         return new external_value(PARAM_BOOL, 'True if successful.');",
          "2839:     }",
          "2846:     public static function remove_competency_from_template_parameters() {",
          "2847:         $templateid = new external_value(",
          "2848:             PARAM_INT,",
          "2849:             'The template id',",
          "2850:             VALUE_REQUIRED",
          "2851:         );",
          "2852:         $competencyid = new external_value(",
          "2853:             PARAM_INT,",
          "2854:             'The competency id',",
          "2855:             VALUE_REQUIRED",
          "2856:         );",
          "2857:         $params = array(",
          "2858:             'templateid' => $templateid,",
          "2859:             'competencyid' => $competencyid,",
          "2860:         );",
          "2861:         return new external_function_parameters($params);",
          "2862:     }",
          "2868:     public static function remove_competency_from_template_is_allowed_from_ajax() {",
          "2869:         return true;",
          "2870:     }",
          "2877:     public static function remove_competency_from_template($templateid, $competencyid) {",
          "2878:         $params = self::validate_parameters(self::remove_competency_from_template_parameters(),",
          "2879:                                             array(",
          "2880:                                                 'templateid' => $templateid,",
          "2881:                                                 'competencyid' => $competencyid,",
          "2882:                                             ));",
          "2884:         return api::remove_competency_from_template($params['templateid'], $params['competencyid']);",
          "2885:     }",
          "2892:     public static function remove_competency_from_template_returns() {",
          "2893:         return new external_value(PARAM_BOOL, 'True if successful.');",
          "2894:     }",
          "2901:     public static function data_for_template_competencies_page_parameters() {",
          "2902:         $templateid = new external_value(",
          "2903:             PARAM_INT,",
          "2904:             'The template id',",
          "2905:             VALUE_REQUIRED",
          "2906:         );",
          "2907:         $params = array('templateid' => $templateid);",
          "2908:         return new external_function_parameters($params);",
          "2909:     }",
          "2915:     public static function data_for_template_competencies_page_is_allowed_from_ajax() {",
          "2916:         return true;",
          "2917:     }",
          "2924:     public static function data_for_template_competencies_page($templateid) {",
          "2925:         global $PAGE;",
          "2926:         $params = self::validate_parameters(self::data_for_template_competencies_page_parameters(),",
          "2927:                                             array(",
          "2928:                                                 'templateid' => $templateid,",
          "2929:                                             ));",
          "2931:         $renderable = new \\tool_lp\\output\\template_competencies_page($params['templateid']);",
          "2932:         $renderer = $PAGE->get_renderer('tool_lp');",
          "2934:         $data = $renderable->export_for_template($renderer);",
          "2936:         return $data;",
          "2937:     }",
          "2944:     public static function data_for_template_competencies_page_returns() {",
          "2945:         return new external_single_structure(array (",
          "2946:             'templateid' => new external_value(PARAM_INT, 'The current template id'),",
          "2947:             'canmanagecompetencyframeworks' => new external_value(PARAM_BOOL, 'User can manage competency frameworks'),",
          "2948:             'canmanagetemplates' => new external_value(PARAM_BOOL, 'User can manage learning plan templates'),",
          "2949:             'competencies' => new external_multiple_structure(",
          "2950:                 self::get_competency_external_structure()",
          "2951:             ),",
          "2952:             'manageurl' => new external_value(PARAM_LOCALURL, 'Url to the manage competencies page.'),",
          "2953:         ));",
          "2955:     }",
          "2956: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php": [
          "File: admin/tool/lp/classes/form/competency.php -> admin/tool/lp/classes/form/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace tool_lp\\form;",
          "27: defined('MOODLE_INTERNAL') || die('Direct access to this script is forbidden.');",
          "29: use moodleform;",
          "30: use tool_lp\\api;",
          "32: require_once($CFG->libdir.'/formslib.php');",
          "41: class competency extends moodleform {",
          "46:     public function definition() {",
          "47:         $mform = $this->_form;",
          "48:         $id = $this->_customdata['id'];",
          "49:         $framework = $this->_customdata['competencyframework'];",
          "50:         $parent = $this->_customdata['parent'];",
          "52:         $mform->addElement('hidden', 'id');",
          "53:         $mform->setType('id', PARAM_INT);",
          "54:         $mform->setDefault('id', 0);",
          "56:         $mform->addElement('hidden', 'parentid');",
          "57:         $mform->setType('parentid', PARAM_INT);",
          "58:         if ($parent) {",
          "59:             $mform->setDefault('parentid', $parent->get_id());",
          "60:         } else {",
          "61:             $mform->setDefault('parentid', 0);",
          "62:         }",
          "64:         $mform->addElement('hidden', 'competencyframeworkid');",
          "65:         $mform->setType('competencyframeworkid', PARAM_INT);",
          "66:         $mform->setDefault('competencyframeworkid', $framework->get_id());",
          "68:         $mform->addElement('static',",
          "69:                            'frameworkdesc',",
          "70:                            get_string('competencyframework', 'tool_lp'),",
          "71:                            s($framework->get_shortname()));",
          "72:         if ($parent) {",
          "73:             $mform->addElement('static',",
          "74:                                'parentdesc',",
          "75:                                get_string('parentcompetency', 'tool_lp'),",
          "76:                                s($parent->get_shortname()));",
          "77:         }",
          "79:         $mform->addElement('text', 'shortname',",
          "80:                            get_string('shortname', 'tool_lp'));",
          "81:         $mform->setType('shortname', PARAM_TEXT);",
          "82:         $mform->addRule('shortname', null, 'required', null, 'client');",
          "83:         $mform->addElement('editor', 'description',",
          "84:                            get_string('description', 'tool_lp'), array('rows'=>4));",
          "85:         $mform->setType('description', PARAM_TEXT);",
          "86:         $mform->addElement('text', 'idnumber',",
          "87:                            get_string('idnumber', 'tool_lp'));",
          "88:         $mform->setType('idnumber', PARAM_TEXT);",
          "89:         $mform->addElement('selectyesno', 'visible',",
          "90:                            get_string('visible', 'tool_lp'));",
          "91:         $mform->setDefault('visible', true);",
          "92:         $mform->addHelpButton('visible', 'visible', 'tool_lp');",
          "94:         $this->add_action_buttons(true, get_string('savechanges', 'tool_lp'));",
          "96:         if (!empty($id)) {",
          "97:             if (!$this->is_submitted()) {",
          "98:                 $competency = api::read_competency($id);",
          "99:                 $record = $competency->to_record();",
          "101:                 $record->description = array('text'=>$record->description, 'format'=>$record->descriptionformat);",
          "102:                 $this->set_data($record);",
          "103:             }",
          "104:         }",
          "106:     }",
          "107: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php": [
          "File: admin/tool/lp/classes/form/competency_framework.php -> admin/tool/lp/classes/form/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace tool_lp\\form;",
          "27: defined('MOODLE_INTERNAL') || die('Direct access to this script is forbidden.');",
          "29: use moodleform;",
          "30: use tool_lp\\api;",
          "32: require_once($CFG->libdir.'/formslib.php');",
          "41: class competency_framework extends moodleform {",
          "46:     public function definition() {",
          "47:         $mform = $this->_form;",
          "48:         $id = $this->_customdata;",
          "50:         $mform->addElement('hidden', 'id');",
          "51:         $mform->setType('id', PARAM_INT);",
          "52:         $mform->setDefault('id', 0);",
          "54:         $mform->addElement('text', 'shortname',",
          "55:                            get_string('shortname', 'tool_lp'));",
          "56:         $mform->setType('shortname', PARAM_TEXT);",
          "57:         $mform->addRule('shortname', null, 'required', null, 'client');",
          "58:         $mform->addElement('editor', 'description',",
          "59:                            get_string('description', 'tool_lp'), array('rows'=>4));",
          "60:         $mform->setType('description', PARAM_TEXT);",
          "61:         $mform->addElement('text', 'idnumber',",
          "62:                            get_string('idnumber', 'tool_lp'));",
          "63:         $mform->setType('idnumber', PARAM_TEXT);",
          "64:         $mform->addElement('selectyesno', 'visible',",
          "65:                            get_string('visible', 'tool_lp'));",
          "66:         $mform->setDefault('visible', true);",
          "67:         $mform->addHelpButton('visible', 'visible', 'tool_lp');",
          "69:         $this->add_action_buttons(true, get_string('savechanges', 'tool_lp'));",
          "71:         if (!empty($id)) {",
          "72:             if (!$this->is_submitted()) {",
          "73:                 $framework = api::read_framework($id);",
          "74:                 $record = $framework->to_record();",
          "76:                 $record->description = array('text'=>$record->description, 'format'=>$record->descriptionformat);",
          "77:                 $this->set_data($record);",
          "78:             }",
          "79:         }",
          "81:     }",
          "82: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php": [
          "File: admin/tool/lp/classes/form/template.php -> admin/tool/lp/classes/form/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace tool_lp\\form;",
          "27: defined('MOODLE_INTERNAL') || die('Direct access to this script is forbidden.');",
          "29: use moodleform;",
          "30: use tool_lp\\api;",
          "32: require_once($CFG->libdir.'/formslib.php');",
          "41: class template extends moodleform {",
          "46:     public function definition() {",
          "47:         $mform = $this->_form;",
          "48:         $id = $this->_customdata;",
          "50:         $mform->addElement('hidden', 'id');",
          "51:         $mform->setType('id', PARAM_INT);",
          "52:         $mform->setDefault('id', 0);",
          "54:         $mform->addElement('text', 'shortname',",
          "55:                            get_string('shortname', 'tool_lp'));",
          "56:         $mform->setType('shortname', PARAM_TEXT);",
          "57:         $mform->addRule('shortname', null, 'required', null, 'client');",
          "58:         $mform->addElement('editor', 'description',",
          "59:                            get_string('description', 'tool_lp'), array('rows'=>4));",
          "60:         $mform->setType('description', PARAM_TEXT);",
          "61:         $mform->addElement('text', 'idnumber',",
          "62:                            get_string('idnumber', 'tool_lp'));",
          "63:         $mform->setType('idnumber', PARAM_TEXT);",
          "64:         $mform->addElement('selectyesno', 'visible',",
          "65:                            get_string('visible', 'tool_lp'));",
          "66:         $mform->addElement('date_time_selector',",
          "67:                            'duedate',",
          "68:                            get_string('duedate', 'tool_lp'),",
          "69:                            array('optional'=>true));",
          "70:         $mform->addHelpButton('duedate', 'duedate', 'tool_lp');",
          "72:         $mform->setDefault('visible', true);",
          "73:         $mform->addHelpButton('visible', 'visible', 'tool_lp');",
          "75:         $this->add_action_buttons(true, get_string('savechanges', 'tool_lp'));",
          "77:         if (!empty($id)) {",
          "78:             if (!$this->is_submitted()) {",
          "79:                 $template = api::read_template($id);",
          "80:                 $record = $template->to_record();",
          "82:                 $record->description = array('text'=>$record->description, 'format'=>$record->descriptionformat);",
          "83:                 $this->set_data($record);",
          "84:             }",
          "85:         }",
          "87:     }",
          "88: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/course_competencies_page.php||admin/tool/lp/classes/output/course_competencies_page.php": [
          "File: admin/tool/lp/classes/output/course_competencies_page.php -> admin/tool/lp/classes/output/course_competencies_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp\\output;",
          "26: use renderable;",
          "27: use templatable;",
          "28: use renderer_base;",
          "29: use stdClass;",
          "30: use moodle_url;",
          "31: use context_system;",
          "32: use context_course;",
          "33: use tool_lp\\api;",
          "41: class course_competencies_page implements renderable, templatable {",
          "44:     var $course = null;",
          "50:     public function __construct($courseid) {",
          "51:         $context = context_course::instance($courseid);",
          "52:         $this->courseid = $courseid;",
          "53:         $this->competencies = api::list_competencies_in_course($courseid);",
          "54:         $this->canmanagecompetencyframeworks = has_capability('tool/lp:competencymanage', context_system::instance());",
          "55:         $this->canmanagecoursecompetencies = has_capability('tool/lp:coursecompetencymanage', $context);",
          "56:         $this->manageurl = new moodle_url('/admin/tool/lp/competencyframeworks.php');",
          "57:     }",
          "64:     public function export_for_template(renderer_base $output) {",
          "65:         $data = new stdClass();",
          "66:         $data->courseid = $this->courseid;",
          "67:         $data->competencies = array();",
          "68:         foreach ($this->competencies as $competency) {",
          "69:             $record = $competency->to_record();",
          "70:             array_push($data->competencies, $record);",
          "71:         }",
          "72:         $data->canmanagecompetencyframeworks = $this->canmanagecompetencyframeworks;",
          "73:         $data->canmanagecoursecompetencies = $this->canmanagecoursecompetencies;",
          "74:         $data->manageurl = $this->manageurl->out(true);",
          "76:         return $data;",
          "77:     }",
          "78: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/manage_competencies_page.php||admin/tool/lp/classes/output/manage_competencies_page.php": [
          "File: admin/tool/lp/classes/output/manage_competencies_page.php -> admin/tool/lp/classes/output/manage_competencies_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp\\output;",
          "26: use renderable;",
          "27: use templatable;",
          "28: use renderer_base;",
          "29: use single_button;",
          "30: use stdClass;",
          "31: use moodle_url;",
          "32: use context_system;",
          "33: use tool_lp\\api;",
          "41: class manage_competencies_page implements renderable, templatable {",
          "44:     var $framework = null;",
          "47:     var $competencies = array();",
          "50:     var $search = '';",
          "53:     var $canmanage = false;",
          "56:     var $pluginbaseurl = null;",
          "62:     public function __construct($framework, $search) {",
          "63:         $this->framework = $framework;",
          "64:         $this->search = $search;",
          "65:         $addpage = new single_button(",
          "66:            new moodle_url('/admin/tool/lp/editcompetencyframework.php'),",
          "67:            get_string('addnewcompetency', 'tool_lp')",
          "68:         );",
          "69:         $this->navigation[] = $addpage;",
          "71:         $this->competencies = api::search_competencies($search, $framework->get_id());",
          "73:         $context = context_system::instance();",
          "74:         $this->canmanage = has_capability('tool/lp:competencymanage', $context);",
          "75:     }",
          "83:     private function add_competency_children($parent, $all) {",
          "84:         foreach ($all as $one) {",
          "85:             if ($one->get_parentid() == $parent->id) {",
          "86:                 $parent->haschildren = true;",
          "87:                 $record = $one->to_record();",
          "88:                 $record->children = array();",
          "89:                 $record->haschildren = false;",
          "90:                 $parent->children[] = $record;",
          "91:                 $this->add_competency_children($record, $all);",
          "92:             }",
          "93:         }",
          "94:     }",
          "101:     public function export_for_template(renderer_base $output) {",
          "102:         $data = new stdClass();",
          "103:         $data->framework = $this->framework->to_record();",
          "104:         $data->canmanage = $this->canmanage;",
          "105:         $data->competencies = array();",
          "106:         $data->search = $this->search;",
          "108:         foreach ($this->competencies as $competency) {",
          "109:             if ($competency->get_parentid() == 0) {",
          "110:                 $record = $competency->to_record();",
          "111:                 $record->children = array();",
          "112:                 $record->haschildren = false;",
          "113:                 $data->competencies[] = $record;",
          "114:                 $this->add_competency_children($record, $this->competencies);",
          "115:             }",
          "116:         }",
          "118:         return $data;",
          "119:     }",
          "120: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/manage_competency_frameworks_page.php||admin/tool/lp/classes/output/manage_competency_frameworks_page.php": [
          "File: admin/tool/lp/classes/output/manage_competency_frameworks_page.php -> admin/tool/lp/classes/output/manage_competency_frameworks_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp\\output;",
          "26: use renderable;",
          "27: use templatable;",
          "28: use renderer_base;",
          "29: use single_button;",
          "30: use stdClass;",
          "31: use moodle_url;",
          "32: use context_system;",
          "33: use tool_lp\\api;",
          "41: class manage_competency_frameworks_page implements renderable, templatable {",
          "44:     var $navigation = array();",
          "47:     var $competencyframeworks = array();",
          "50:     var $canmanage = false;",
          "53:     var $pluginbaseurl = null;",
          "58:     public function __construct() {",
          "59:         $addpage = new single_button(",
          "60:            new moodle_url('/admin/tool/lp/editcompetencyframework.php'),",
          "61:            get_string('addnewcompetencyframework', 'tool_lp')",
          "62:         );",
          "63:         $this->navigation[] = $addpage;",
          "65:         $this->competencyframeworks = api::list_frameworks(array(), 'sortorder', 'ASC', 0, 0);",
          "67:         $context = context_system::instance();",
          "68:         $this->canmanage = has_capability('tool/lp:competencymanage', $context);",
          "69:     }",
          "76:     public function export_for_template(renderer_base $output) {",
          "77:         $data = new stdClass();",
          "78:         $data->canmanage = $this->canmanage;",
          "79:         $data->competencyframeworks = array();",
          "80:         foreach ($this->competencyframeworks as $framework) {",
          "81:             $record = $framework->to_record();",
          "82:             $filters = array('competencyframeworkid' => $framework->get_id());",
          "83:             $record->competencies_count = api::count_competencies($filters);",
          "84:             $data->competencyframeworks[] = $record;",
          "85:         }",
          "86:         $data->pluginbaseurl = (new moodle_url('/admin/tool/lp'))->out(true);",
          "87:         $data->navigation = array();",
          "88:         foreach ($this->navigation as $button) {",
          "89:             $data->navigation[] = $output->render($button);",
          "90:         }",
          "92:         return $data;",
          "93:     }",
          "94: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/manage_templates_page.php||admin/tool/lp/classes/output/manage_templates_page.php": [
          "File: admin/tool/lp/classes/output/manage_templates_page.php -> admin/tool/lp/classes/output/manage_templates_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp\\output;",
          "26: use renderable;",
          "27: use templatable;",
          "28: use renderer_base;",
          "29: use single_button;",
          "30: use stdClass;",
          "31: use moodle_url;",
          "32: use context_system;",
          "33: use tool_lp\\api;",
          "41: class manage_templates_page implements renderable, templatable {",
          "44:     var $navigation = array();",
          "47:     var $templates = array();",
          "50:     var $canmanage = false;",
          "55:     public function __construct() {",
          "56:         $addpage = new single_button(",
          "57:            new moodle_url('/admin/tool/lp/edittemplate.php'),",
          "58:            get_string('addnewtemplate', 'tool_lp')",
          "59:         );",
          "60:         $this->navigation[] = $addpage;",
          "62:         $this->templates = api::list_templates(array(), 'sortorder', 'ASC', 0, 0);",
          "64:         $context = context_system::instance();",
          "65:         $this->canmanage = has_capability('tool/lp:learningplanmanage', $context);",
          "66:     }",
          "73:     public function export_for_template(renderer_base $output) {",
          "74:         $data = new stdClass();",
          "75:         $data->canmanage = $this->canmanage;",
          "76:         $data->templates = array();",
          "77:         foreach ($this->templates as $template) {",
          "78:             $record = $template->to_record();",
          "79:             $data->templates[] = $record;",
          "80:         }",
          "81:         $data->pluginbaseurl = (new moodle_url('/admin/tool/lp'))->out(true);",
          "82:         $data->navigation = array();",
          "83:         foreach ($this->navigation as $button) {",
          "84:             $data->navigation[] = $output->render($button);",
          "85:         }",
          "87:         return $data;",
          "88:     }",
          "89: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/renderer.php||admin/tool/lp/classes/output/renderer.php": [
          "File: admin/tool/lp/classes/output/renderer.php -> admin/tool/lp/classes/output/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace tool_lp\\output;",
          "27: defined('MOODLE_INTERNAL') || die;",
          "29: use plugin_renderer_base;",
          "38: class renderer extends plugin_renderer_base {",
          "47:     public function render_manage_competency_frameworks_page($page) {",
          "48:         $data = $page->export_for_template($this);",
          "49:         return parent::render_from_template('tool_lp/manage_competency_frameworks_page', $data);",
          "50:     }",
          "59:     public function render_manage_competencies_page($page) {",
          "60:         $data = $page->export_for_template($this);",
          "61:         return parent::render_from_template('tool_lp/manage_competencies_page', $data);",
          "62:     }",
          "71:     public function render_course_competencies_page($page) {",
          "72:         $data = $page->export_for_template($this);",
          "73:         return parent::render_from_template('tool_lp/course_competencies_page', $data);",
          "74:     }",
          "83:     public function render_manage_templates_page($page) {",
          "84:         $data = $page->export_for_template($this);",
          "85:         return parent::render_from_template('tool_lp/manage_templates_page', $data);",
          "86:     }",
          "88: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/template_competencies_page.php||admin/tool/lp/classes/output/template_competencies_page.php": [
          "File: admin/tool/lp/classes/output/template_competencies_page.php -> admin/tool/lp/classes/output/template_competencies_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp\\output;",
          "26: use renderable;",
          "27: use templatable;",
          "28: use renderer_base;",
          "29: use stdClass;",
          "30: use moodle_url;",
          "31: use context_system;",
          "32: use tool_lp\\api;",
          "40: class template_competencies_page implements renderable, templatable {",
          "46:     public function __construct($templateid) {",
          "47:         $this->courseid = $templateid;",
          "48:         $this->competencies = api::list_competencies_in_template($templateid);",
          "49:         $this->canmanagecompetencyframeworks = has_capability('tool/lp:competencymanage', context_system::instance());",
          "50:         $this->canmanagetemplates = has_capability('tool/lp:templatesmanage', $context);",
          "51:         $this->manageurl = new moodle_url('/admin/tool/lp/competencyframeworks.php');",
          "52:     }",
          "59:     public function export_for_template(renderer_base $output) {",
          "60:         $data = new stdClass();",
          "61:         $data->templateid = $this->templateid;",
          "62:         $data->competencies = array();",
          "63:         foreach ($this->competencies as $competency) {",
          "64:             $record = $competency->to_record();",
          "65:             array_push($data->competencies, $record);",
          "66:         }",
          "67:         $data->canmanagecompetencyframeworks = $this->canmanagecompetencyframeworks;",
          "68:         $data->canmanagecoursecompetencies = $this->canmanagecoursecompetencies;",
          "69:         $data->manageurl = $this->manageurl->out(true);",
          "71:         return $data;",
          "72:     }",
          "73: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/persistent.php||admin/tool/lp/classes/persistent.php": [
          "File: admin/tool/lp/classes/persistent.php -> admin/tool/lp/classes/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp;",
          "26: use external_function_parameters;",
          "27: use external_value;",
          "35: abstract class persistent {",
          "38:     private $id = null;",
          "41:     private $timecreated = 0;",
          "44:     private $timemodified = 0;",
          "47:     private $usermodified = 0;",
          "54:     abstract public function get_table_name();",
          "61:     public function __construct($id = 0, $record = null) {",
          "62:         if ($id > 0) {",
          "63:             $this->id = $id;",
          "64:             $this->read();",
          "65:         }",
          "66:         if (!empty($record)) {",
          "67:             $this->from_record($record);",
          "68:         }",
          "69:     }",
          "76:     public function get_id() {",
          "77:         return $this->id;",
          "78:     }",
          "85:     public function set_id($id) {",
          "86:         $this->id = $id;",
          "87:     }",
          "94:     public function get_timecreated() {",
          "95:         return $this->timecreated;",
          "96:     }",
          "103:     public function set_timecreated($timecreated) {",
          "104:         $this->timecreated = $timecreated;",
          "105:     }",
          "112:     public function get_timemodified() {",
          "113:         return $this->timemodified;",
          "114:     }",
          "121:     public function set_timemodified($timemodified) {",
          "122:         $this->timemodified = $timemodified;",
          "123:     }",
          "130:     public function get_usermodified() {",
          "131:         return $this->usermodified;",
          "132:     }",
          "139:     public function set_usermodified($usermodified) {",
          "140:         $this->usermodified = $usermodified;",
          "141:     }",
          "149:     abstract public function from_record($record);",
          "156:     abstract public function to_record();",
          "163:     public function read() {",
          "164:         global $DB;",
          "166:         if ($this->id <= 0) {",
          "167:             throw new coding_exception('id is required to load');",
          "168:         }",
          "169:         $record = $DB->get_record($this->get_table_name(), array('id' => $this->id), '*', MUST_EXIST);",
          "170:         return $this->from_record($record);",
          "171:     }",
          "178:     public function create() {",
          "179:         global $DB, $USER;",
          "181:         $this->id = 0;",
          "182:         $this->timecreated = $this->timemodified = time();",
          "183:         $this->usermodified = $USER->id;",
          "184:         $record = $this->to_record();",
          "186:         $id = $DB->insert_record($this->get_table_name(), $record);",
          "187:         $this->set_id($id);",
          "188:         return $this;",
          "189:     }",
          "198:     public function update() {",
          "199:         global $DB, $USER;",
          "201:         if ($this->id <= 0) {",
          "202:             throw new coding_exception('id is required to update');",
          "203:         }",
          "204:         $record = $this->to_record();",
          "205:         unset($record->timecreated);",
          "206:         $record->timemodified = time();",
          "207:         $record->usermodified = $USER->id;",
          "208:         $record = (array) $record;",
          "209:         return $DB->update_record($this->get_table_name(), $record);",
          "210:     }",
          "217:     public function delete() {",
          "218:         global $DB;",
          "220:         if ($this->id <= 0) {",
          "221:             throw new coding_exception('id is required to delete');",
          "222:         }",
          "223:         return $DB->delete_records($this->get_table_name(), array('id' => $this->id));",
          "224:     }",
          "231:     public function get_records($filters = array(), $sort = '', $order = 'ASC', $skip = 0, $limit = 0) {",
          "232:         global $DB;",
          "234:         $orderby = '';",
          "235:         if (!empty($sort)) {",
          "236:             $orderby = $sort . ' ' . $order;",
          "237:         }",
          "239:         $records = $DB->get_records($this->get_table_name(), $filters, $orderby, '*', $skip, $limit);",
          "240:         $instances = array();",
          "242:         foreach ($records as $record) {",
          "243:             $newrecord = new static(0, $record);",
          "244:             array_push($instances, $newrecord);",
          "245:         }",
          "246:         return $instances;",
          "247:     }",
          "254:     public function count_records($filters = array()) {",
          "255:         global $DB;",
          "257:         $count = $DB->count_records($this->get_table_name(), $filters);",
          "258:         return $count;",
          "259:     }",
          "260: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/template.php||admin/tool/lp/classes/template.php": [
          "File: admin/tool/lp/classes/template.php -> admin/tool/lp/classes/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp;",
          "26: use stdClass;",
          "34: class template extends persistent {",
          "37:     private $shortname = '';",
          "40:     private $description = '';",
          "43:     private $descriptionformat = 0;",
          "46:     private $sortorder = 0;",
          "49:     private $idnumber = '';",
          "52:     private $duedate = 0;",
          "55:     private $visible = true;",
          "62:     public function get_table_name() {",
          "63:         return 'tool_lp_plan_template';",
          "64:     }",
          "71:     public function get_shortname() {",
          "72:         return $this->shortname;",
          "73:     }",
          "80:     public function set_shortname($shortname) {",
          "81:         $this->shortname = $shortname;",
          "82:     }",
          "89:     public function get_descriptionformat() {",
          "90:         return $this->descriptionformat;",
          "91:     }",
          "98:     public function set_descriptionformat($descriptionformat) {",
          "99:         $this->descriptionformat = $descriptionformat;",
          "100:     }",
          "107:     public function get_idnumber() {",
          "108:         return $this->idnumber;",
          "109:     }",
          "116:     public function set_idnumber($idnumber) {",
          "117:         $this->idnumber = $idnumber;",
          "118:     }",
          "125:     public function get_description() {",
          "126:         return $this->description;",
          "127:     }",
          "134:     public function set_description($description) {",
          "135:         $this->description = $description;",
          "136:     }",
          "143:     public function get_sortorder() {",
          "144:         return $this->sortorder;",
          "145:     }",
          "152:     public function set_sortorder($sortorder) {",
          "153:         $this->sortorder = $sortorder;",
          "154:     }",
          "161:     public function get_duedate() {",
          "162:         return $this->duedate;",
          "163:     }",
          "170:     public function set_duedate($duedate) {",
          "171:         $this->duedate = $duedate;",
          "172:     }",
          "180:     public function get_visible() {",
          "181:         return $this->visible;",
          "182:     }",
          "189:     public function set_visible($visible) {",
          "190:         $this->visible = $visible;",
          "191:     }",
          "199:     public function from_record($record) {",
          "200:         if (isset($record->id)) {",
          "201:             $this->set_id($record->id);",
          "202:         }",
          "203:         if (isset($record->shortname)) {",
          "204:             $this->set_shortname($record->shortname);",
          "205:         }",
          "206:         if (isset($record->idnumber)) {",
          "207:             $this->set_idnumber($record->idnumber);",
          "208:         }",
          "209:         if (isset($record->description)) {",
          "210:             $this->set_description($record->description);",
          "211:         }",
          "212:         if (isset($record->descriptionformat)) {",
          "213:             $this->set_descriptionformat($record->descriptionformat);",
          "214:         }",
          "215:         if (isset($record->sortorder)) {",
          "216:             $this->set_sortorder($record->sortorder);",
          "217:         }",
          "218:         if (isset($record->visible)) {",
          "219:             $this->set_visible($record->visible);",
          "220:         }",
          "221:         if (isset($record->duedate)) {",
          "222:             $this->set_duedate($record->duedate);",
          "223:         }",
          "224:         if (isset($record->timecreated)) {",
          "225:             $this->set_timecreated($record->timecreated);",
          "226:         }",
          "227:         if (isset($record->timemodified)) {",
          "228:             $this->set_timemodified($record->timemodified);",
          "229:         }",
          "230:         if (isset($record->usermodified)) {",
          "231:             $this->set_usermodified($record->usermodified);",
          "232:         }",
          "233:         return $this;",
          "234:     }",
          "241:     public function to_record() {",
          "242:         $record = new stdClass();",
          "243:         $record->id = $this->get_id();",
          "244:         $record->shortname = $this->get_shortname();",
          "245:         $record->idnumber = $this->get_idnumber();",
          "246:         $record->duedate = $this->get_duedate();",
          "247:         $record->duedateformatted = '';",
          "248:         if ($record->duedate) {",
          "249:             $record->duedateformatted = userdate($this->get_duedate());",
          "250:         }",
          "251:         $record->description = $this->get_description();",
          "252:         $record->descriptionformat = $this->get_descriptionformat();",
          "253:         $record->descriptionformatted = format_text($this->get_description(), $this->get_descriptionformat());",
          "254:         $record->sortorder = $this->get_sortorder();",
          "255:         $record->visible = $this->get_visible();",
          "256:         $record->timecreated = $this->get_timecreated();",
          "257:         $record->timemodified = $this->get_timemodified();",
          "258:         $record->usermodified = $this->get_usermodified();",
          "260:         return $record;",
          "261:     }",
          "268:     public function create() {",
          "269:         $this->sortorder = $this->count_records();",
          "270:         return parent::create();",
          "271:     }",
          "274: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/template_competency.php||admin/tool/lp/classes/template_competency.php": [
          "File: admin/tool/lp/classes/template_competency.php -> admin/tool/lp/classes/template_competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp;",
          "26: use stdClass;",
          "27: use context_system;",
          "35: class template_competency extends persistent {",
          "38:     private $templateid = 0;",
          "41:     private $competencyid = 0;",
          "48:     public function get_table_name() {",
          "49:         return 'tool_lp_template_competency';",
          "50:     }",
          "57:     public function get_competencyid() {",
          "58:         return $this->competencyid;",
          "59:     }",
          "66:     public function set_competencyid($competencyid) {",
          "67:         $this->competencyid = $competencyid;",
          "68:     }",
          "75:     public function get_templateid() {",
          "76:         return $this->templateid;",
          "77:     }",
          "84:     public function set_templateid($templateid) {",
          "85:         $this->templateid = $templateid;",
          "86:     }",
          "94:     public function from_record($record) {",
          "95:         if (isset($record->id)) {",
          "96:             $this->set_id($record->id);",
          "97:         }",
          "98:         if (isset($record->templateid)) {",
          "99:             $this->set_templateid($record->templateid);",
          "100:         }",
          "101:         if (isset($record->competencyid)) {",
          "102:             $this->set_competencyid($record->competencyid);",
          "103:         }",
          "104:         if (isset($record->timecreated)) {",
          "105:             $this->set_timecreated($record->timecreated);",
          "106:         }",
          "107:         if (isset($record->timemodified)) {",
          "108:             $this->set_timemodified($record->timemodified);",
          "109:         }",
          "110:         if (isset($record->usermodified)) {",
          "111:             $this->set_usermodified($record->usermodified);",
          "112:         }",
          "113:         return $this;",
          "114:     }",
          "121:     public function to_record() {",
          "122:         $record = new stdClass();",
          "123:         $record->id = $this->get_id();",
          "124:         $record->templateid = $this->get_templateid();",
          "125:         $record->competencyid = $this->get_competencyid();",
          "126:         $record->timecreated = $this->get_timecreated();",
          "127:         $record->timemodified = $this->get_timemodified();",
          "128:         $record->usermodified = $this->get_usermodified();",
          "130:         return $record;",
          "131:     }",
          "140:     public function count_templates($competencyid, $onlyvisible) {",
          "141:         global $DB;",
          "143:         $sql = 'SELECT COUNT(template.id)",
          "144:                 FROM {' . self::get_table_name() . '} tplcomp",
          "145:                 JOIN {' . template::get_table_name() . '} tpl",
          "146:                 ON tplcomp.templateid = tpl.id",
          "147:                 WHERE tplcomp.competencyid = ? ';",
          "148:         $params = array($templateid);",
          "150:         if ($onlyvisible) {",
          "151:             $sql .= ' AND tpl.visible = ?';",
          "152:             $params[] = 1;",
          "153:         }",
          "155:         $results = $DB->count_records_sql($sql, $params);",
          "157:         return $results;",
          "158:     }",
          "167:     public function list_templates($competencyid, $onlyvisible) {",
          "168:         global $DB;",
          "170:         $template = new template();",
          "172:         $sql = 'SELECT tpl.*",
          "173:                 FROM {' . $template->get_table_name() . '} tpl",
          "174:                 JOIN {' . self::get_table_name() . '} tplcomp",
          "175:                 ON tplcomp.templateid = tpl.id",
          "176:                 WHERE tplcomp.competencyid = ? ';",
          "177:         $params = array($competencyid);",
          "179:         if ($onlyvisible) {",
          "180:             $sql .= ' AND tpl.visible = ?';",
          "181:             $params[] = 1;",
          "182:         }",
          "184:         $results = $DB->get_records_sql($sql, $params);",
          "186:         $instances = array();",
          "187:         foreach ($results as $result) {",
          "188:             array_push($instances, new template(0, $result));",
          "189:         }",
          "191:         return $instances;",
          "192:     }",
          "201:     public function count_competencies($templateid, $onlyvisible) {",
          "202:         global $DB;",
          "204:         $sql = 'SELECT COUNT(comp.id)",
          "205:                 FROM {' . self::get_table_name() . '} tplcomp",
          "206:                 JOIN {' . competency::get_table_name() . '} comp",
          "207:                 ON tplcomp.competencyid = comp.id",
          "208:                 WHERE tplcomp.templateid = ? ';",
          "209:         $params = array($templateid);",
          "211:         if ($onlyvisible) {",
          "212:             $sql .= ' AND comp.visible = ?';",
          "213:             $params[] = 1;",
          "214:         }",
          "216:         $results = $DB->count_records_sql($sql, $params);",
          "218:         return $results;",
          "219:     }",
          "228:     public function list_competencies($templateid, $onlyvisible) {",
          "229:         global $DB;",
          "231:         $competency = new competency();",
          "233:         $sql = 'SELECT comp.*",
          "234:                 FROM {' . $competency->get_table_name() . '} comp",
          "235:                 JOIN {' . self::get_table_name() . '} tplcomp",
          "236:                 ON tplcomp.competencyid = comp.id",
          "237:                 WHERE tplcomp.templateid = ? ';",
          "238:         $params = array($templateid);",
          "240:         if ($onlyvisible) {",
          "241:             $sql .= ' AND comp.visible = ?';",
          "242:             $params[] = 1;",
          "243:         }",
          "245:         $results = $DB->get_records_sql($sql, $params);",
          "247:         $instances = array();",
          "248:         foreach ($results as $result) {",
          "249:             array_push($instances, new competency(0, $result));",
          "250:         }",
          "252:         return $instances;",
          "253:     }",
          "254: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/competencies.php||admin/tool/lp/competencies.php": [
          "File: admin/tool/lp/competencies.php -> admin/tool/lp/competencies.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "26: require_once($CFG->libdir.'/adminlib.php');",
          "28: admin_externalpage_setup('toollpcompetencies');",
          "30: $id = required_param('competencyframeworkid', PARAM_INT);",
          "31: $search = optional_param('search', '', PARAM_RAW);",
          "33: $framework = \\tool_lp\\api::read_framework($id);",
          "35: $title = get_string('competencies', 'tool_lp');",
          "36: $pagetitle = get_string('competenciesforframework', 'tool_lp', $framework->get_shortname());",
          "38: $url = new moodle_url(\"/admin/tool/lp/competencies.php\", array('competencyframeworkid' => $framework->get_id()));",
          "39: $PAGE->set_url($url);",
          "40: $PAGE->navbar->add($framework->get_shortname(), $url);",
          "41: $PAGE->set_title($title);",
          "42: $PAGE->set_heading($title);",
          "43: $output = $PAGE->get_renderer('tool_lp');",
          "44: echo $output->header();",
          "45: echo $output->heading($pagetitle);",
          "47: $page = new \\tool_lp\\output\\manage_competencies_page($framework, $search);",
          "48: echo $output->render($page);",
          "50: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/competencyframeworks.php||admin/tool/lp/competencyframeworks.php": [
          "File: admin/tool/lp/competencyframeworks.php -> admin/tool/lp/competencyframeworks.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "26: require_once($CFG->libdir.'/adminlib.php');",
          "28: admin_externalpage_setup('toollpcompetencies');",
          "30: $title = get_string('competencies', 'tool_lp');",
          "31: $pagetitle = get_string('competencyframeworks', 'tool_lp');",
          "33: $url = new moodle_url(\"/admin/tool/lp/competencyframeworks.php\");",
          "34: $PAGE->set_url($url);",
          "35: $PAGE->set_title($title);",
          "36: $PAGE->set_heading($title);",
          "37: $output = $PAGE->get_renderer('tool_lp');",
          "38: echo $output->header();",
          "39: echo $output->heading($pagetitle);",
          "41: $page = new \\tool_lp\\output\\manage_competency_frameworks_page();",
          "42: echo $output->render($page);",
          "44: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/coursecompetencies.php||admin/tool/lp/coursecompetencies.php": [
          "File: admin/tool/lp/coursecompetencies.php -> admin/tool/lp/coursecompetencies.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "27: $id = required_param('courseid', PARAM_INT);",
          "29: $params = array('id' => $id);",
          "30: $course = $DB->get_record('course', $params, '*', MUST_EXIST);",
          "31: require_login($course);",
          "32: $context = context_course::instance($course->id);",
          "33: $urlparams = array('courseid' => $id);",
          "35: $url = new moodle_url('/admin/tool/lp/coursecompetencies.php', $urlparams);",
          "36: $title = get_string('coursecompetencies', 'tool_lp');",
          "37: $PAGE->set_url($url);",
          "38: $PAGE->set_title($title);",
          "39: $coursename = format_text($course->fullname, false, array('context' => $context));",
          "40: $PAGE->set_heading($coursename);",
          "41: $PAGE->set_pagelayout('incourse');",
          "43: $output = $PAGE->get_renderer('tool_lp');",
          "44: echo $output->header();",
          "45: echo $output->heading($title);",
          "47: $page = new \\tool_lp\\output\\course_competencies_page($course->id);",
          "48: echo $output->render($page);",
          "50: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/db/access.php||admin/tool/lp/db/access.php": [
          "File: admin/tool/lp/db/access.php -> admin/tool/lp/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "27: defined('MOODLE_INTERNAL') || die();",
          "29: $capabilities = array(",
          "31:     'tool/lp:competencyread' => array(",
          "32:         'captype' => 'read',",
          "33:         'contextlevel' => CONTEXT_SYSTEM,",
          "34:         'archetypes' => array(",
          "35:             'user' => CAP_ALLOW",
          "36:         ),",
          "37:         'clonepermissionsfrom' =>  'moodle/block:view'",
          "38:     ),",
          "39:     'tool/lp:competencymanage' => array(",
          "40:         'captype' => 'write',",
          "41:         'contextlevel' => CONTEXT_SYSTEM,",
          "42:         'archetypes' => array(",
          "43:         ),",
          "44:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "45:     ),",
          "46:     'tool/lp:templateread' => array(",
          "47:         'captype' => 'read',",
          "48:         'contextlevel' => CONTEXT_SYSTEM,",
          "49:         'archetypes' => array(",
          "50:             'user' => CAP_ALLOW",
          "51:         ),",
          "52:         'clonepermissionsfrom' =>  'moodle/block:view'",
          "53:     ),",
          "54:     'tool/lp:templatemanage' => array(",
          "55:         'captype' => 'write',",
          "56:         'contextlevel' => CONTEXT_SYSTEM,",
          "57:         'archetypes' => array(",
          "58:         ),",
          "59:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "60:     ),",
          "61:     'tool/lp:learningplanread' => array(",
          "62:         'captype' => 'read',",
          "63:         'contextlevel' => CONTEXT_SYSTEM,",
          "64:         'archetypes' => array(",
          "65:             'user' => CAP_ALLOW",
          "66:         ),",
          "67:         'clonepermissionsfrom' =>  'moodle/block:view'",
          "68:     ),",
          "69:     'tool/lp:learningplanmanage' => array(",
          "70:         'captype' => 'write',",
          "71:         'contextlevel' => CONTEXT_SYSTEM,",
          "72:         'archetypes' => array(",
          "73:         ),",
          "74:         'clonepermissionsfrom' =>  'moodle/site:config'",
          "75:     ),",
          "76:     'tool/lp:coursecompetencyread' => array(",
          "77:         'captype' => 'read',",
          "78:         'contextlevel' => CONTEXT_COURSE,",
          "79:         'archetypes' => array(",
          "80:             'user' => CAP_ALLOW",
          "81:         ),",
          "82:         'clonepermissionsfrom' =>  'moodle/block:view'",
          "83:     ),",
          "84:     'tool/lp:coursecompetencymanage' => array(",
          "85:         'captype' => 'write',",
          "86:         'contextlevel' => CONTEXT_COURSE,",
          "87:         'archetypes' => array(",
          "88:             'editingteacher' => CAP_ALLOW,",
          "89:             'manager' => CAP_ALLOW",
          "90:         ),",
          "91:         'clonepermissionsfrom' =>  'moodle/site:backup'",
          "92:     )",
          "94: );",
          "",
          "---------------"
        ],
        "admin/tool/lp/db/services.php||admin/tool/lp/db/services.php": [
          "File: admin/tool/lp/db/services.php -> admin/tool/lp/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "27: $functions = array(",
          "31:     'tool_lp_create_competency_framework' => array(",
          "32:         'classname'   => 'tool_lp\\external',",
          "33:         'methodname'  => 'create_competency_framework',",
          "34:         'classpath'   => '',",
          "35:         'description' => 'Creates new competency frameworks.',",
          "36:         'type'        => 'write',",
          "37:         'capabilities'=> 'tool/lp:competencymanage',",
          "38:     ),",
          "39:     'tool_lp_read_competency_framework' => array(",
          "40:         'classname'   => 'tool_lp\\external',",
          "41:         'methodname'  => 'read_competency_framework',",
          "42:         'classpath'   => '',",
          "43:         'description' => 'Load a summary of a competency framework.',",
          "44:         'type'        => 'read',",
          "45:         'capabilities'=> 'tool/lp:competencyview',",
          "46:     ),",
          "47:     'tool_lp_delete_competency_framework' => array(",
          "48:         'classname'   => 'tool_lp\\external',",
          "49:         'methodname'  => 'delete_competency_framework',",
          "50:         'classpath'   => '',",
          "51:         'description' => 'Delete a competency framework.',",
          "52:         'type'        => 'write',",
          "53:         'capabilities'=> 'tool/lp:competencymanage',",
          "54:     ),",
          "55:     'tool_lp_update_competency_framework' => array(",
          "56:         'classname'   => 'tool_lp\\external',",
          "57:         'methodname'  => 'update_competency_framework',",
          "58:         'classpath'   => '',",
          "59:         'description' => 'Update a competency framework.',",
          "60:         'type'        => 'write',",
          "61:         'capabilities'=> 'tool/lp:competencymanage',",
          "62:     ),",
          "63:     'tool_lp_list_competency_frameworks' => array(",
          "64:         'classname'   => 'tool_lp\\external',",
          "65:         'methodname'  => 'list_competency_frameworks',",
          "66:         'classpath'   => '',",
          "67:         'description' => 'Load a list of a competency frameworks.',",
          "68:         'type'        => 'read',",
          "69:         'capabilities'=> 'tool/lp:competencyview',",
          "70:     ),",
          "71:     'tool_lp_count_competency_frameworks' => array(",
          "72:         'classname'   => 'tool_lp\\external',",
          "73:         'methodname'  => 'count_competency_frameworks',",
          "74:         'classpath'   => '',",
          "75:         'description' => 'Count a list of a competency frameworks.',",
          "76:         'type'        => 'read',",
          "77:         'capabilities'=> 'tool/lp:competencyview',",
          "78:     ),",
          "79:     'tool_lp_data_for_competency_frameworks_manage_page' => array(",
          "80:         'classname'   => 'tool_lp\\external',",
          "81:         'methodname'  => 'data_for_competency_frameworks_manage_page',",
          "82:         'classpath'   => '',",
          "83:         'description' => 'Load the data for the competency frameworks manage page template',",
          "84:         'type'        => 'read',",
          "85:         'capabilities'=> 'tool/lp:competencyview',",
          "86:     ),",
          "87:     'tool_lp_reorder_competency_framework' => array(",
          "88:         'classname'   => 'tool_lp\\external',",
          "89:         'methodname'  => 'reorder_competency_framework',",
          "90:         'classpath'   => '',",
          "91:         'description' => 'Move a competency framework to a new relative sort order.',",
          "92:         'type'        => 'write',",
          "93:         'capabilities'=> 'tool/lp:competencymanage',",
          "94:     ),",
          "95:     'tool_lp_create_competency' => array(",
          "96:         'classname'   => 'tool_lp\\external',",
          "97:         'methodname'  => 'create_competency',",
          "98:         'classpath'   => '',",
          "99:         'description' => 'Creates new competencies.',",
          "100:         'type'        => 'write',",
          "101:         'capabilities'=> 'tool/lp:competencymanage',",
          "102:     ),",
          "103:     'tool_lp_read_competency' => array(",
          "104:         'classname'   => 'tool_lp\\external',",
          "105:         'methodname'  => 'read_competency',",
          "106:         'classpath'   => '',",
          "107:         'description' => 'Load a summary of a competency.',",
          "108:         'type'        => 'read',",
          "109:         'capabilities'=> 'tool/lp:competencyview',",
          "110:     ),",
          "111:     'tool_lp_delete_competency' => array(",
          "112:         'classname'   => 'tool_lp\\external',",
          "113:         'methodname'  => 'delete_competency',",
          "114:         'classpath'   => '',",
          "115:         'description' => 'Delete a competency.',",
          "116:         'type'        => 'write',",
          "117:         'capabilities'=> 'tool/lp:competencymanage',",
          "118:     ),",
          "119:     'tool_lp_update_competency' => array(",
          "120:         'classname'   => 'tool_lp\\external',",
          "121:         'methodname'  => 'update_competency',",
          "122:         'classpath'   => '',",
          "123:         'description' => 'Update a competency.',",
          "124:         'type'        => 'write',",
          "125:         'capabilities'=> 'tool/lp:competencymanage',",
          "126:     ),",
          "127:     'tool_lp_list_competencies' => array(",
          "128:         'classname'   => 'tool_lp\\external',",
          "129:         'methodname'  => 'list_competencies',",
          "130:         'classpath'   => '',",
          "131:         'description' => 'Load a list of a competencies.',",
          "132:         'type'        => 'read',",
          "133:         'capabilities'=> 'tool/lp:competencyview',",
          "134:     ),",
          "135:     'tool_lp_count_competencies' => array(",
          "136:         'classname'   => 'tool_lp\\external',",
          "137:         'methodname'  => 'count_competencies',",
          "138:         'classpath'   => '',",
          "139:         'description' => 'Count a list of a competencies.',",
          "140:         'type'        => 'read',",
          "141:         'capabilities'=> 'tool/lp:competencyview',",
          "142:     ),",
          "143:     'tool_lp_search_competencies' => array(",
          "144:         'classname'   => 'tool_lp\\external',",
          "145:         'methodname'  => 'search_competencies',",
          "146:         'classpath'   => '',",
          "147:         'description' => 'Search a list of a competencies.',",
          "148:         'type'        => 'read',",
          "149:         'capabilities'=> 'tool/lp:competencyview',",
          "150:     ),",
          "151:     'tool_lp_data_for_competencies_manage_page' => array(",
          "152:         'classname'   => 'tool_lp\\external',",
          "153:         'methodname'  => 'data_for_competencies_manage_page',",
          "154:         'classpath'   => '',",
          "155:         'description' => 'Load the data for the competencies manage page template',",
          "156:         'type'        => 'read',",
          "157:         'capabilities'=> 'tool/lp:competencyview',",
          "158:     ),",
          "159:     'tool_lp_set_parent_competency' => array(",
          "160:         'classname'   => 'tool_lp\\external',",
          "161:         'methodname'  => 'set_parent_competency',",
          "162:         'classpath'   => '',",
          "163:         'description' => 'Set a new parent for a competency.',",
          "164:         'type'        => 'write',",
          "165:         'capabilities'=> 'tool/lp:competencymanage',",
          "166:     ),",
          "167:     'tool_lp_move_up_competency' => array(",
          "168:         'classname'   => 'tool_lp\\external',",
          "169:         'methodname'  => 'move_up_competency',",
          "170:         'classpath'   => '',",
          "171:         'description' => 'Re-order a competency.',",
          "172:         'type'        => 'write',",
          "173:         'capabilities'=> 'tool/lp:competencymanage',",
          "174:     ),",
          "175:     'tool_lp_move_down_competency' => array(",
          "176:         'classname'   => 'tool_lp\\external',",
          "177:         'methodname'  => 'move_down_competency',",
          "178:         'classpath'   => '',",
          "179:         'description' => 'Re-order a competency.',",
          "180:         'type'        => 'write',",
          "181:         'capabilities'=> 'tool/lp:competencymanage',",
          "182:     ),",
          "183:     'tool_lp_list_competencies_in_course' => array(",
          "184:         'classname'   => 'tool_lp\\external',",
          "185:         'methodname'  => 'list_competencies_in_course',",
          "186:         'classpath'   => '',",
          "187:         'description' => 'List the competencies in a course',",
          "188:         'type'        => 'read',",
          "189:         'capabilities'=> 'tool/lp:coursecompetencyread',",
          "190:     ),",
          "191:     'tool_lp_list_courses_using_competency' => array(",
          "192:         'classname'   => 'tool_lp\\external',",
          "193:         'methodname'  => 'list_courses_using_competency',",
          "194:         'classpath'   => '',",
          "195:         'description' => 'List the courses using a competency',",
          "196:         'type'        => 'read',",
          "197:         'capabilities'=> 'tool/lp:coursecompetencyread',",
          "198:     ),",
          "199:     'tool_lp_count_competencies_in_course' => array(",
          "200:         'classname'   => 'tool_lp\\external',",
          "201:         'methodname'  => 'count_competencies_in_course',",
          "202:         'classpath'   => '',",
          "203:         'description' => 'List the competencies in a course',",
          "204:         'type'        => 'read',",
          "205:         'capabilities'=> 'tool/lp:coursecompetencyread',",
          "206:     ),",
          "207:     'tool_lp_count_courses_using_competency' => array(",
          "208:         'classname'   => 'tool_lp\\external',",
          "209:         'methodname'  => 'count_courses_using_competency',",
          "210:         'classpath'   => '',",
          "211:         'description' => 'List the courses using a competency',",
          "212:         'type'        => 'read',",
          "213:         'capabilities'=> 'tool/lp:coursecompetencyread',",
          "214:     ),",
          "215:     'tool_lp_add_competency_to_course' => array(",
          "216:         'classname'   => 'tool_lp\\external',",
          "217:         'methodname'  => 'add_competency_to_course',",
          "218:         'classpath'   => '',",
          "219:         'description' => 'Add the competency to a course',",
          "220:         'type'        => 'write',",
          "221:         'capabilities'=> 'tool/lp:coursecompetencymanage',",
          "222:     ),",
          "223:     'tool_lp_remove_competency_from_course' => array(",
          "224:         'classname'   => 'tool_lp\\external',",
          "225:         'methodname'  => 'remove_competency_from_course',",
          "226:         'classpath'   => '',",
          "227:         'description' => 'Remove a competency from a course',",
          "228:         'type'        => 'write',",
          "229:         'capabilities'=> 'tool/lp:coursecompetencymanage',",
          "230:     ),",
          "231:     'tool_lp_data_for_course_competencies_page' => array(",
          "232:         'classname'   => 'tool_lp\\external',",
          "233:         'methodname'  => 'data_for_course_competencies_page',",
          "234:         'classpath'   => '',",
          "235:         'description' => 'Load the data for the course competencies page template.',",
          "236:         'type'        => 'read',",
          "237:         'capabilities'=> 'tool/lp:coursecompetencyread',",
          "238:     ),",
          "239:     'tool_lp_reorder_course_competency' => array(",
          "240:         'classname'   => 'tool_lp\\external',",
          "241:         'methodname'  => 'reorder_course_competency',",
          "242:         'classpath'   => '',",
          "243:         'description' => 'Move a course competency to a new relative sort order.',",
          "244:         'type'        => 'write',",
          "245:         'capabilities'=> 'tool/lp:coursecompetencymanage',",
          "246:     ),",
          "247:     'tool_lp_create_template' => array(",
          "248:         'classname'   => 'tool_lp\\external',",
          "249:         'methodname'  => 'create_template',",
          "250:         'classpath'   => '',",
          "251:         'description' => 'Creates new learning plan templates.',",
          "252:         'type'        => 'write',",
          "253:         'capabilities'=> 'tool/lp:templatemanage',",
          "254:     ),",
          "255:     'tool_lp_read_template' => array(",
          "256:         'classname'   => 'tool_lp\\external',",
          "257:         'methodname'  => 'read_template',",
          "258:         'classpath'   => '',",
          "259:         'description' => 'Load a summary of a learning plan template.',",
          "260:         'type'        => 'read',",
          "261:         'capabilities'=> 'tool/lp:templateview',",
          "262:     ),",
          "263:     'tool_lp_delete_template' => array(",
          "264:         'classname'   => 'tool_lp\\external',",
          "265:         'methodname'  => 'delete_template',",
          "266:         'classpath'   => '',",
          "267:         'description' => 'Delete a learning plan template.',",
          "268:         'type'        => 'write',",
          "269:         'capabilities'=> 'tool/lp:templatemanage',",
          "270:     ),",
          "271:     'tool_lp_update_template' => array(",
          "272:         'classname'   => 'tool_lp\\external',",
          "273:         'methodname'  => 'update_template',",
          "274:         'classpath'   => '',",
          "275:         'description' => 'Update a learning plan template.',",
          "276:         'type'        => 'write',",
          "277:         'capabilities'=> 'tool/lp:templatemanage',",
          "278:     ),",
          "279:     'tool_lp_list_templates' => array(",
          "280:         'classname'   => 'tool_lp\\external',",
          "281:         'methodname'  => 'list_templates',",
          "282:         'classpath'   => '',",
          "283:         'description' => 'Load a list of a learning plan templates.',",
          "284:         'type'        => 'read',",
          "285:         'capabilities'=> 'tool/lp:templateview',",
          "286:     ),",
          "287:     'tool_lp_count_templates' => array(",
          "288:         'classname'   => 'tool_lp\\external',",
          "289:         'methodname'  => 'count_templates',",
          "290:         'classpath'   => '',",
          "291:         'description' => 'Count a list of a learning plan templates.',",
          "292:         'type'        => 'read',",
          "293:         'capabilities'=> 'tool/lp:templateview',",
          "294:     ),",
          "295:     'tool_lp_data_for_templates_manage_page' => array(",
          "296:         'classname'   => 'tool_lp\\external',",
          "297:         'methodname'  => 'data_for_templates_manage_page',",
          "298:         'classpath'   => '',",
          "299:         'description' => 'Load the data for the learning plan templates manage page template',",
          "300:         'type'        => 'read',",
          "301:         'capabilities'=> 'tool/lp:templateview',",
          "302:     ),",
          "303:     'tool_lp_reorder_template' => array(",
          "304:         'classname'   => 'tool_lp\\external',",
          "305:         'methodname'  => 'reorder_template',",
          "306:         'classpath'   => '',",
          "307:         'description' => 'Move a learning plan template to a new relative sort order.',",
          "308:         'type'        => 'write',",
          "309:         'capabilities'=> 'tool/lp:templatemanage',",
          "310:     ),",
          "312: );",
          "",
          "---------------"
        ],
        "admin/tool/lp/editcompetency.php||admin/tool/lp/editcompetency.php": [
          "File: admin/tool/lp/editcompetency.php -> admin/tool/lp/editcompetency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "26: require_once($CFG->libdir.'/adminlib.php');",
          "28: admin_externalpage_setup('toollpcompetencies');",
          "30: $title = get_string('competencies', 'tool_lp');",
          "31: $id = optional_param('id', 0, PARAM_INT);",
          "32: $competencyframeworkid = required_param('competencyframeworkid', PARAM_INT);",
          "33: $parentid = optional_param('parentid', 0, PARAM_INT);",
          "35: if (empty($id)) {",
          "36:     $pagetitle = get_string('addnewcompetency', 'tool_lp');",
          "37: } else {",
          "38:     $pagetitle = get_string('editcompetency', 'tool_lp');",
          "39: }",
          "41: $params = array('id'=>$id, 'competencyframeworkid'=>$competencyframeworkid, 'parentid'=>$parentid);",
          "42: $url = new moodle_url(\"/admin/tool/lp/editcompetency.php\", $params);",
          "43: $PAGE->set_url($url);",
          "44: $PAGE->set_title($title);",
          "45: $PAGE->set_heading($title);",
          "46: $output = $PAGE->get_renderer('tool_lp');",
          "48: $competencyframework = \\tool_lp\\api::read_framework($competencyframeworkid);",
          "49: $parent = null;",
          "50: if ($parentid) {",
          "51:     $parent = \\tool_lp\\api::read_competency($parentid);",
          "52: }",
          "54: $form = new \\tool_lp\\form\\competency(null, array('id' => $id, 'competencyframework' => $competencyframework, 'parent' => $parent));",
          "56: if ($form->is_cancelled()) {",
          "57:     redirect(new moodle_url('/admin/tool/lp/competencies.php', array('competencyframeworkid'=>$competencyframeworkid)));",
          "58: }",
          "60: echo $output->header();",
          "61: echo $output->heading($pagetitle);",
          "63: $data = $form->get_data();",
          "64: if ($data) {",
          "67:     $data->descriptionformat = $data->description['format'];",
          "68:     $data->description = $data->description['text'];",
          "69:     if (empty($data->id)) {",
          "71:         require_sesskey();",
          "72:         \\tool_lp\\api::create_competency($data);",
          "73:         echo $output->notification(get_string('competencycreated', 'tool_lp'), 'notifysuccess');",
          "74:         echo $output->continue_button(new moodle_url('/admin/tool/lp/competencies.php', array('competencyframeworkid'=>$competencyframeworkid)));",
          "75:     } else {",
          "76:         require_sesskey();",
          "77:         \\tool_lp\\api::update_competency($data);",
          "78:         echo $output->notification(get_string('competencyupdated', 'tool_lp'), 'notifysuccess');",
          "79:         echo $output->continue_button(new moodle_url('/admin/tool/lp/competencies.php', array('competencyframeworkid'=>$competencyframeworkid)));",
          "80:     }",
          "81: } else {",
          "82:     $form->display();",
          "83: }",
          "86: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/editcompetencyframework.php||admin/tool/lp/editcompetencyframework.php": [
          "File: admin/tool/lp/editcompetencyframework.php -> admin/tool/lp/editcompetencyframework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "26: require_once($CFG->libdir.'/adminlib.php');",
          "28: admin_externalpage_setup('toollpcompetencies');",
          "30: $title = get_string('competencies', 'tool_lp');",
          "31: $id = optional_param('id', 0, PARAM_INT);",
          "32: if (empty($id)) {",
          "33:     $pagetitle = get_string('addnewcompetencyframework', 'tool_lp');",
          "34: } else {",
          "35:     $pagetitle = get_string('editcompetencyframework', 'tool_lp');",
          "36: }",
          "38: $url = new moodle_url(\"/admin/tool/lp/editcompetencyframework.php\", array('id'=>$id));",
          "39: $PAGE->set_url($url);",
          "40: $PAGE->set_title($title);",
          "41: $PAGE->set_heading($title);",
          "42: $output = $PAGE->get_renderer('tool_lp');",
          "44: $form = new \\tool_lp\\form\\competency_framework(null, $id);",
          "46: if ($form->is_cancelled()) {",
          "47:     redirect(new moodle_url('/admin/tool/lp/competencyframeworks.php'));",
          "48: }",
          "50: echo $output->header();",
          "51: echo $output->heading($pagetitle);",
          "53: $data = $form->get_data();",
          "54: if ($data) {",
          "57:     $data->descriptionformat = $data->description['format'];",
          "58:     $data->description = $data->description['text'];",
          "59:     if (empty($data->id)) {",
          "61:         require_sesskey();",
          "62:         \\tool_lp\\api::create_framework($data);",
          "63:         echo $output->notification(get_string('competencyframeworkcreated', 'tool_lp'), 'notifysuccess');",
          "64:         echo $output->continue_button('/admin/tool/lp/competencyframeworks.php');",
          "65:     } else {",
          "66:         require_sesskey();",
          "67:         \\tool_lp\\api::update_framework($data);",
          "68:         echo $output->notification(get_string('competencyframeworkupdated', 'tool_lp'), 'notifysuccess');",
          "69:         echo $output->continue_button('/admin/tool/lp/competencyframeworks.php');",
          "70:     }",
          "71: } else {",
          "72:     $form->display();",
          "73: }",
          "76: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/edittemplate.php||admin/tool/lp/edittemplate.php": [
          "File: admin/tool/lp/edittemplate.php -> admin/tool/lp/edittemplate.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "26: require_once($CFG->libdir.'/adminlib.php');",
          "28: admin_externalpage_setup('toollplearningplans');",
          "30: $title = get_string('templates', 'tool_lp');",
          "31: $id = optional_param('id', 0, PARAM_INT);",
          "32: if (empty($id)) {",
          "33:     $pagetitle = get_string('addnewtemplate', 'tool_lp');",
          "34: } else {",
          "35:     $pagetitle = get_string('edittemplate', 'tool_lp');",
          "36: }",
          "38: $url = new moodle_url(\"/admin/tool/lp/edittemplate.php\", array('id'=>$id));",
          "39: $PAGE->set_url($url);",
          "40: $PAGE->set_title($title);",
          "41: $PAGE->set_heading($title);",
          "42: $output = $PAGE->get_renderer('tool_lp');",
          "44: $form = new \\tool_lp\\form\\template(null, $id);",
          "46: if ($form->is_cancelled()) {",
          "47:     redirect(new moodle_url('/admin/tool/lp/learningplans.php'));",
          "48: }",
          "50: echo $output->header();",
          "51: echo $output->heading($pagetitle);",
          "53: $data = $form->get_data();",
          "54: if ($data) {",
          "57:     $data->descriptionformat = $data->description['format'];",
          "58:     $data->description = $data->description['text'];",
          "59:     if (empty($data->id)) {",
          "61:         require_sesskey();",
          "62:         \\tool_lp\\api::create_template($data);",
          "63:         echo $output->notification(get_string('templatecreated', 'tool_lp'), 'notifysuccess');",
          "64:         echo $output->continue_button('/admin/tool/lp/learningplans.php');",
          "65:     } else {",
          "66:         require_sesskey();",
          "67:         \\tool_lp\\api::update_template($data);",
          "68:         echo $output->notification(get_string('templateupdated', 'tool_lp'), 'notifysuccess');",
          "69:         echo $output->continue_button('/admin/tool/lp/learningplans.php');",
          "70:     }",
          "71: } else {",
          "72:     $form->display();",
          "73: }",
          "76: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/lang/en/tool_lp.php||admin/tool/lp/lang/en/tool_lp.php": [
          "File: admin/tool/lp/lang/en/tool_lp.php -> admin/tool/lp/lang/en/tool_lp.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: $string['pluginname'] = 'Learning Plans';",
          "26: $string['lp:learningplanmanage'] = 'Manage learning plans';",
          "27: $string['lp:learningplanread'] = 'View learning plans';",
          "28: $string['lp:competencymanage'] = 'Manage competency frameworks';",
          "29: $string['lp:competencyread'] = 'View competency frameworks';",
          "30: $string['lp:coursecompetencymanage'] = 'Manage course competencies';",
          "31: $string['lp:coursecompetencyread'] = 'View course competencies';",
          "32: $string['competencies'] = 'Competencies';",
          "33: $string['competenciesforframework'] = 'Competencies for {$a}';",
          "34: $string['competencyframeworks'] = 'Competency Frameworks';",
          "35: $string['addnewcompetencyframework'] = 'Add new competency framework';",
          "36: $string['addnewtemplate'] = 'Add new learning plan template';",
          "37: $string['addnewcompetency'] = 'Add new competency';",
          "38: $string['addcompetency'] = 'Add competency';",
          "39: $string['editcompetencyframework'] = 'Edit competency framework';",
          "40: $string['listcompetencyframeworkscaption'] = 'List of competency frameworks';",
          "41: $string['listtemplatescaption'] = 'List of learning plan templates';",
          "42: $string['competencyframeworkname'] = 'Name';",
          "43: $string['actions'] = 'Actions';",
          "44: $string['notemplates'] = 'No learning plan templates have been created yet.';",
          "45: $string['nocompetencyframeworks'] = 'No competency frameworks have been created yet.';",
          "46: $string['nocompetencies'] = 'No competencies have been created in this framework.';",
          "47: $string['nocompetenciesincourse'] = 'No competencies have been linked to this course.';",
          "49: $string['shortname'] = 'Name';",
          "50: $string['savechanges'] = 'Save changes';",
          "51: $string['description'] = 'Description';",
          "52: $string['visible'] = 'Visible';",
          "53: $string['visible_help'] = 'A competency framework can be hidden from teachers. This could be useful if a framework is still in the process of being developed.';",
          "54: $string['idnumber'] = 'Id number';",
          "55: $string['competencyframework'] = 'Competency framework';",
          "56: $string['parentcompetency'] = 'Parent competency';",
          "57: $string['competencyframeworkcreated'] = 'Competency framework created.';",
          "58: $string['competencyframeworkupdated'] = 'Competency framework updated.';",
          "59: $string['editcompetencyframework'] = 'Edit competency framework';",
          "60: $string['editthiscompetencyframework'] = 'Edit';",
          "61: $string['deletethiscompetencyframework'] = 'Delete';",
          "62: $string['deletethistemplate'] = 'Delete';",
          "63: $string['hiddenhint'] = '(hidden)';",
          "64: $string['movecompetencyframework'] = 'Move competency framework';",
          "65: $string['movetonewparent'] = 'Relocate';",
          "66: $string['moveframeworkafter'] = 'Move competency framework after {$a}';",
          "67: $string['selectedcompetency'] = 'Selected competency';",
          "68: $string['nocompetencyselected'] = 'No competency selected';",
          "69: $string['search'] = 'Search...';",
          "70: $string['competencycreated'] = 'Competency created';",
          "71: $string['competencyupdated'] = 'Competency updated';",
          "72: $string['hidden'] = 'Hidden';",
          "73: $string['editcompetency'] = 'Edit competency';",
          "74: $string['confirm'] = 'Confirm';",
          "75: $string['delete'] = 'Delete';",
          "76: $string['deletecompetency'] = 'Delete competency? {$a}';",
          "77: $string['deletecompetencyframework'] = 'Delete competency framework? {$a}';",
          "78: $string['cancel'] = 'Cancel';",
          "79: $string['move'] = 'Move';",
          "80: $string['movecompetency'] = 'Move competency: {$a}';",
          "81: $string['selectcompetencymovetarget'] = 'Select a location to move this competency to:';",
          "82: $string['coursecompetencies'] = 'Course competencies';",
          "83: $string['linkcoursecompetencies'] = 'Link course competencies';",
          "84: $string['managecompetenciesandframeworks'] = 'Manage competencies and frameworks';",
          "85: $string['locatecompetency'] = 'Locate competency';",
          "86: $string['itemstoadd'] = 'Items to add';",
          "87: $string['linkedcourses'] = 'Linked courses';",
          "88: $string['nolinkedcourses'] = 'No courses are using this competency';",
          "89: $string['coursesusingthiscompetency'] = 'Courses using this competency';",
          "90: $string['learningplans'] = 'Learning plans';",
          "91: $string['movecoursecompetency'] = 'Move course competency';",
          "92: $string['movecoursecompetencyafter'] = 'Move course competency after {$a}';",
          "94: $string['templates'] = 'Learning plan templates';",
          "95: $string['templatename'] = 'Name';",
          "96: $string['editthistemplate'] = 'Edit';",
          "97: $string['templatecreated'] = 'Learning plan template created';",
          "98: $string['templateupdated'] = 'Learning plan template updated';",
          "99: $string['edittemplate'] = 'Edit learning plan template';",
          "100: $string['deletetemplate'] = 'Delete learning plan template? {$a}';",
          "101: $string['duedate'] = 'Due date';",
          "102: $string['duedate_help'] = 'The date that a learning plan should be completed by.';",
          "",
          "---------------"
        ],
        "admin/tool/lp/learningplans.php||admin/tool/lp/learningplans.php": [
          "File: admin/tool/lp/learningplans.php -> admin/tool/lp/learningplans.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "26: require_once($CFG->libdir.'/adminlib.php');",
          "28: admin_externalpage_setup('toollplearningplans');",
          "30: $title = get_string('learningplans', 'tool_lp');",
          "31: $pagetitle = get_string('templates', 'tool_lp');",
          "33: $url = new moodle_url(\"/admin/tool/lp/learningplans.php\");",
          "34: $PAGE->set_url($url);",
          "35: $PAGE->set_title($title);",
          "36: $PAGE->set_heading($title);",
          "37: $output = $PAGE->get_renderer('tool_lp');",
          "38: echo $output->header();",
          "39: echo $output->heading($pagetitle);",
          "41: $page = new \\tool_lp\\output\\manage_templates_page();",
          "42: echo $output->render($page);",
          "44: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/lib.php||admin/tool/lp/lib.php": [
          "File: admin/tool/lp/lib.php -> admin/tool/lp/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die;",
          "34: function tool_lp_extend_navigation_course($navigation, $course, $coursecontext) {",
          "36:     $title = get_string('coursecompetencies', 'tool_lp');",
          "37:     $path = new moodle_url(\"/admin/tool/lp/coursecompetencies.php\", array('courseid' => $course->id));",
          "38:     $settingsnode = navigation_node::create($title,",
          "39:                                             $path,",
          "40:                                             navigation_node::TYPE_SETTING,",
          "41:                                             null,",
          "42:                                             null,",
          "43:                                             new pix_icon('competency', '', 'tool_lp'));",
          "44:     if (isset($settingsnode)) {",
          "45:         $navigation->add_node($settingsnode);",
          "46:     }",
          "47: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/settings.php||admin/tool/lp/settings.php": [
          "File: admin/tool/lp/settings.php -> admin/tool/lp/settings.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "26: defined('MOODLE_INTERNAL') || die;",
          "29: $temp = new admin_externalpage(",
          "30:     'toollpcompetencies',",
          "31:     get_string('competencyframeworks', 'tool_lp'),",
          "32:     new moodle_url('/admin/tool/lp/competencyframeworks.php'),",
          "33:     'tool/lp:competencymanage'",
          "34: );",
          "35: $ADMIN->add('root', $temp, 'badges');",
          "37: $temp = new admin_externalpage(",
          "38:     'toollplearningplans',",
          "39:     get_string('learningplans', 'tool_lp'),",
          "40:     new moodle_url('/admin/tool/lp/learningplans.php'),",
          "41:     'tool/lp:learningplanmanage'",
          "42: );",
          "43: $ADMIN->add('root', $temp, 'toollpcompetencies');",
          "46: $settings = null;",
          "",
          "---------------"
        ],
        "admin/tool/lp/styles.css||admin/tool/lp/styles.css": [
          "File: admin/tool/lp/styles.css -> admin/tool/lp/styles.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul li,",
          "2: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul li,",
          "3: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul li {",
          "4:     list-style-type: none;",
          "5: }",
          "7: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul li img {",
          "8:     margin-left: -20px;",
          "9:     margin-right: 4px;",
          "10: }",
          "11: .dir-rtl.path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul li img {",
          "12:     margin-right: -20px;",
          "13:     margin-left: 4px;",
          "14: }",
          "16: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul[data-enhance=\"tree\"],",
          "17: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul[data-enhance=\"linktree\"],",
          "18: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul[data-enhance=\"movetree\"] {",
          "19:     border: 1px solid #ccc;",
          "20:     box-shadow: inset 0 1px 1px rgba(0,0,0,0.075);",
          "21:     transition: border linear .2s,box-shadow linear .2s;",
          "22:     border-radius: 4px;",
          "23:     padding-left: 20px;",
          "24:     padding-right: 20px;",
          "25:     margin-left: 10px;",
          "26:     margin-right: 10px;",
          "27: }",
          "28: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul,",
          "29: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul,",
          "30: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul {",
          "31:     cursor: pointer;",
          "32: }",
          "33: .path-admin-tool-learningplan [data-region=\"competencylinktree\"] ul [aria-selected=\"true\"],",
          "34: .path-admin-tool-learningplan [data-region=\"competencymovetree\"] ul [aria-selected=\"true\"],",
          "35: .path-admin-tool-learningplan [data-region=\"managecompetencies\"] ul [aria-selected=\"true\"] {",
          "36:     background-color: #dfdfdf;",
          "37: }",
          "38: .path-admin-tool-learningplan [data-region=\"filtercompetencies\"] input {",
          "39:     margin-left: 10px;",
          "40: }",
          "42: .path-admin-tool-learningplan [data-region=\"link-buttons\"],",
          "43: .path-admin-tool-learningplan [data-region=\"move-buttons\"] {",
          "44:     text-align: center;",
          "45: }",
          "47: .dir-rtl.path-admin-tool-learningplan [data-region=\"filtercompetencies\"] input {",
          "48:     margin-right: 10px;",
          "49: }",
          "51: .path-admin-tool-learningplan [data-region=\"competencyactionsmenu\"] {",
          "52:     display: none;",
          "53: }",
          "54: .path-admin-tool-learningplan [data-region=\"competencyactionsmenu\"] .moodle-actionmenu[data-enhanced].show .menu {",
          "55:     white-space: nowrap;",
          "56: }",
          "57: .path-admin-tool-learningplan .currentdragtarget {",
          "58:     border: 1px dashed;",
          "59: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/competencies_move_tree.mustache||admin/tool/lp/templates/competencies_move_tree.mustache": [
          "File: admin/tool/lp/templates/competencies_move_tree.mustache -> admin/tool/lp/templates/competencies_move_tree.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16: }}",
          "17: {{!",
          "18:     Manage competencies template.",
          "20:     Classes required for JS:",
          "22:     Data attibutes required for JS:",
          "25:     Context variables required for this template:",
          "28: }}",
          "29: <div data-region=\"competencymovetree\" >",
          "30: <label>{{#str}}selectcompetencymovetarget, tool_lp{{/str}}</label>",
          "32: <ul data-enhance=\"movetree\">",
          "33:     <li>{{framework.shortname}}",
          "34:         <ul>",
          "35:             {{#competencies}}",
          "36:                 {{> tool_lp/competencies_tree }}",
          "37:             {{/competencies}}",
          "38:         </ul>",
          "39:     </li>",
          "40: </ul>",
          "41: </div>",
          "43: <div data-region=\"move-buttons\">",
          "44:     <input type=\"button\" data-action=\"move\" value=\"{{#str}}move{{/str}}\"/>",
          "45:     <input type=\"button\" data-action=\"cancel\" value=\"{{#str}}cancel{{/str}}\"/>",
          "46: </div>",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/competencies_tree.mustache||admin/tool/lp/templates/competencies_tree.mustache": [
          "File: admin/tool/lp/templates/competencies_tree.mustache -> admin/tool/lp/templates/competencies_tree.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <li data-id=\"{{id}}\" draggable=\"true\">",
          "2:     {{^visible}}<span class=\"disabled\">{{/visible}}",
          "3:         {{shortname}} <em>{{idnumber}}</em>",
          "4:     {{^visible}}</span>{{/visible}}",
          "5:     {{#haschildren}}",
          "6:     <ul>",
          "7:     {{#children}}",
          "8:     {{> tool_lp/competencies_tree }}",
          "9:     {{/children}}",
          "10:     </ul>",
          "11:     {{/haschildren}}",
          "12: </li>",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/competency_summary.mustache||admin/tool/lp/templates/competency_summary.mustache": [
          "File: admin/tool/lp/templates/competency_summary.mustache -> admin/tool/lp/templates/competency_summary.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <p><strong>{{shortname}} <em>{{idnumber}}</em></strong></p>",
          "2: <p>{{descriptionformatted}}</p>",
          "3: {{^visible}}",
          "4: ( {{#str}} hidden, tool_lp{{/str}})",
          "5: {{/visible}}",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/course_competencies_page.mustache||admin/tool/lp/templates/course_competencies_page.mustache": [
          "File: admin/tool/lp/templates/course_competencies_page.mustache -> admin/tool/lp/templates/course_competencies_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16: }}",
          "17: {{!",
          "18:     Course competencies template.",
          "19: }}",
          "20: <div data-region=\"coursecompetenciespage\">",
          "21: <div data-region=\"coursecompetencies\">",
          "22: <table class=\"generaltable fullwidth managecompetencies\">",
          "23: <tbody class=\"drag-parentnode\">",
          "24: {{#competencies}}",
          "25:     <tr class=\"drag-samenode\" data-id=\"{{id}}\">",
          "26:     <td>",
          "27:     <span class=\"drag-handlecontainer pull-left\"></span>",
          "28:     <div class=\"pull-right\"><a href=\"#\" data-action=\"delete-competency-link\" data-id=\"{{id}}\">{{#pix}}t/delete, core, {{#str}}delete{{/str}}{{/pix}}</a></div>",
          "29:     {{> tool_lp/competency_summary }}",
          "30:     </td>",
          "31:     </tr>",
          "32: {{/competencies}}",
          "33: </tbody>",
          "34: </table>",
          "35: {{^competencies}}",
          "36: <p class=\"alert-info\">",
          "37:     {{#str}}nocompetenciesincourse, tool_lp{{/str}}",
          "38: </p>",
          "39: {{/competencies}}",
          "40: </div>",
          "41: <div data-region=\"actions\">",
          "42: <div class=\"pull-right\">",
          "43: {{#canmanagecoursecompetencies}}",
          "44: <button style=\"display: none\">{{#str}}linkcoursecompetencies, tool_lp{{/str}}</button>",
          "45: {{/canmanagecoursecompetencies}}",
          "46: </div>",
          "47: {{#canmanagecompetencyframeworks}}",
          "48: <p><a href=\"{{manageurl}}\">{{#str}}managecompetenciesandframeworks, tool_lp{{/str}}</a></p>",
          "49: {{/canmanagecompetencyframeworks}}",
          "50: </div>",
          "51: </div>",
          "52: {{#js}}",
          "53: require(['tool_lp/coursecompetencies'], function(mod) {",
          "54:     (new mod({{courseid}}));",
          "55: });",
          "56: {{/js}}",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/link_course_competencies.mustache||admin/tool/lp/templates/link_course_competencies.mustache": [
          "File: admin/tool/lp/templates/link_course_competencies.mustache -> admin/tool/lp/templates/link_course_competencies.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <div data-region=\"competencylinktree\">",
          "2: <h3>{{#str}}competencyframeworks, tool_lp{{/str}}</h3>",
          "3: <select data-action=\"chooseframework\">",
          "4: {{#frameworks}}",
          "5: <option value=\"{{id}}\" {{#selected}}selected=\"selected\"{{/selected}}>{{shortname}} <em>{{idnumber}}</em></option>",
          "6: {{/frameworks}}",
          "7: </select>",
          "8: <h3>{{#str}}locatecompetency, tool_lp{{/str}}</h3>",
          "11: <form data-region=\"filtercompetencies\" data-frameworkid=\"{{framework.id}}\">",
          "12:     <label class=\"accesshide\" for=\"filter{{uniqid}}\">{{#str}}search, tool_lp{{/str}}</label>",
          "13:     <input type=\"text\" id=\"filter{{uniqid}}\" placeholder=\"{{#str}}search, tool_lp{{/str}}\" value=\"{{search}}\">",
          "14:     <button>{{#pix}}a/search, , {{#str}}search{{/str}}{{/pix}}</button>",
          "15: </form>",
          "16: <ul data-enhance=\"linktree\">",
          "17:     <li>{{framework.shortname}}",
          "18:         <ul>",
          "19:             {{#competencies}}",
          "20:                 {{> tool_lp/competencies_tree }}",
          "21:             {{/competencies}}",
          "22:         </ul>",
          "23:     </li>",
          "24: </ul>",
          "25: <div data-region=\"link-buttons\">",
          "26:     <input type=\"button\" data-action=\"add\" value=\"{{#str}}add{{/str}}\"/>",
          "27:     <input type=\"button\" data-action=\"cancel\" value=\"{{#str}}cancel{{/str}}\"/>",
          "28: </div>",
          "29: </div>",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/linked_courses_summary.mustache||admin/tool/lp/templates/linked_courses_summary.mustache": [
          "File: admin/tool/lp/templates/linked_courses_summary.mustache -> admin/tool/lp/templates/linked_courses_summary.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <p>",
          "2: {{#str}}coursesusingthiscompetency, tool_lp{{/str}}",
          "3: </p>",
          "4: <ol>",
          "5: {{#courses}}",
          "6:     <li><a href=\"{{courseviewurl}}?id={{id}}\">{{{fullnameformatted}}} {{{shortnameformatted}}}</a></li>",
          "7: {{/courses}}",
          "8: {{^courses}}",
          "9:     {{#str}}nolinkedcourses, tool_lp{{/str}}",
          "10: {{/courses}}",
          "11: </ol>",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/manage_competencies_page.mustache||admin/tool/lp/templates/manage_competencies_page.mustache": [
          "File: admin/tool/lp/templates/manage_competencies_page.mustache -> admin/tool/lp/templates/manage_competencies_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16: }}",
          "17: {{!",
          "18:     Manage competencies template.",
          "20:     Classes required for JS:",
          "22:     Data attibutes required for JS:",
          "25:     Context variables required for this template:",
          "29: }}",
          "30: <div data-region=\"managecompetencies\" >",
          "32: <div class=\"row\">",
          "33: <div class=\"span6\">",
          "34: <p>",
          "35: <form data-region=\"filtercompetencies\" data-frameworkid=\"{{framework.id}}\">",
          "36:     <label class=\"accesshide\" for=\"filter{{uniqid}}\">{{#str}}search, tool_lp{{/str}}</label>",
          "37:     <input type=\"text\" id=\"filter{{uniqid}}\" placeholder=\"{{#str}}search, tool_lp{{/str}}\" value=\"{{search}}\">",
          "38:     <button>{{#pix}}a/search, , {{#str}}search{{/str}}{{/pix}}</button>",
          "39: </form>",
          "40: </p>",
          "41: <ul data-enhance=\"tree\">",
          "42:     <li>{{framework.shortname}}",
          "43:         <ul>",
          "44:             {{#competencies}}",
          "45:                 {{> tool_lp/competencies_tree }}",
          "46:             {{/competencies}}",
          "47:         </ul>",
          "48:     </li>",
          "49: </ul>",
          "50: </div>",
          "52: <div class=\"span6 well\">",
          "53: <h4>{{#str}}selectedcompetency, tool_lp{{/str}}</h4>",
          "54: <p data-region=\"competencyinfo\">",
          "55: {{#str}}nocompetencyselected, tool_lp{{/str}}",
          "56: </p>",
          "57: {{#canmanage}}",
          "58: <div data-region=\"competencyactions\">",
          "59: <div class=\"btn-group\">",
          "60: <button class=\"btn\" data-action=\"add\" disabled=\"disabled\">{{#pix}}t/add{{/pix}} {{#str}}addcompetency, tool_lp{{/str}}</button>",
          "61: </div>",
          "62:             <div data-region=\"competencyactionsmenu\">",
          "63:             <ul class=\"competencyactionsmenu\">",
          "64:                 <li>",
          "65:                     <a href=\"#\" data-action=\"edit\">",
          "66:                         {{#pix}}t/edit{{/pix}}{{#str}}edit{{/str}}",
          "67:                     </a>",
          "68:                 </li>",
          "69:                 <li>",
          "70:                     <a href=\"#\" data-action=\"move\">",
          "71:                         {{#pix}}t/move{{/pix}}{{#str}}movetonewparent, tool_lp{{/str}}",
          "72:                     </a>",
          "73:                 </li>",
          "74:                 <li>",
          "75:                     <a href=\"#\" data-action=\"delete\">",
          "76:                         {{#pix}}t/delete{{/pix}}{{#str}}delete{{/str}}",
          "77:                     </a>",
          "78:                 </li>",
          "79:                 <li>",
          "80:                     <a href=\"#\" data-action=\"moveup\">",
          "81:                         {{#pix}}t/up{{/pix}}{{#str}}moveup{{/str}}",
          "82:                     </a>",
          "83:                 </li>",
          "84:                 <li>",
          "85:                     <a href=\"#\" data-action=\"movedown\">",
          "86:                         {{#pix}}t/down{{/pix}}{{#str}}movedown{{/str}}",
          "87:                     </a>",
          "88:                 </li>",
          "89:                 <li>",
          "90:                     <a href=\"#\" data-action=\"linkedcourses\">",
          "91:                         {{#pix}}t/viewdetails{{/pix}}{{#str}}linkedcourses, tool_lp{{/str}}",
          "92:                     </a>",
          "93:                 </li>",
          "94:             </ul>",
          "95:             </div>",
          "96: </div>",
          "97: {{/canmanage}}",
          "98: </div>",
          "99: </div>",
          "101: {{#js}}",
          "103: require(['core/tree', 'tool_lp/competencytree', 'tool_lp/competencyactions' ], function(ariatree, treeModel, actions) {",
          "105:     treeModel.init({{framework.id}});",
          "107:     actions.init(treeModel);",
          "109:     var competencytree = new ariatree('[data-enhance=tree]', actions.selectionChanged);",
          "111: });",
          "112: {{/js}}",
          "114: </div>",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/manage_competency_frameworks_page.mustache||admin/tool/lp/templates/manage_competency_frameworks_page.mustache": [
          "File: admin/tool/lp/templates/manage_competency_frameworks_page.mustache -> admin/tool/lp/templates/manage_competency_frameworks_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16: }}",
          "17: {{!",
          "18:     Manage competency frameworks template.",
          "20:     Classes required for JS:",
          "26:     Data attibutes required for JS:",
          "31:     Context variables required for this template:",
          "35: }}",
          "36: <div data-region=\"managecompetencies\">",
          "37: <table class=\"generaltable fullwidth managecompetencies\">",
          "38:     <caption>{{#str}}listcompetencyframeworkscaption, tool_lp{{/str}}</caption>",
          "39:     <thead>",
          "40:         <tr>",
          "41:             <th scope=\"col\">{{#str}}competencyframeworkname, tool_lp{{/str}}</th>",
          "42:             <th scope=\"col\">{{#str}}competencies, tool_lp{{/str}}</th>",
          "43:             <th scope=\"col\">{{#str}}actions, tool_lp{{/str}}</th>",
          "44:         </tr>",
          "45:     </thead>",
          "46:     <tbody class=\"drag-parentnode\">",
          "47:         {{#competencyframeworks}}",
          "48:         <tr class=\"drag-samenode\" data-frameworkid=\"{{id}}\">",
          "49:             <td><span class=\"drag-handlecontainer\"></span><span><a href=\"{{pluginbaseurl}}/competencies.php?competencyframeworkid={{id}}\">{{shortname}} {{idnumber}}</a></span> {{^visible}}{{#str}}hiddenhint, tool_lp{{/str}}{{/visible}}</td>",
          "50:             <td>{{competencies_count}}</td>",
          "51:             <td>",
          "52:             {{#canmanage}}",
          "53:             <div style=\"display: inline-block;\">",
          "54:             <ul class=\"competencyframeworkactions hide\">",
          "55:                 <li>",
          "56:                     <a href=\"{{pluginbaseurl}}/editcompetencyframework.php?id={{id}}\">",
          "57:                         {{#pix}}t/edit{{/pix}}{{#str}}editthiscompetencyframework, tool_lp{{/str}}",
          "58:                     </a>",
          "59:                 </li>",
          "60:                 <li>",
          "61:                     <a data-action=\"deletecompetencyframework\" data-frameworkid=\"{{id}}\" href=\"#\">",
          "62:                         {{#pix}}t/delete{{/pix}}{{#str}}deletethiscompetencyframework, tool_lp{{/str}}",
          "63:                     </a>",
          "64:                 </li>",
          "65:             </ul>",
          "66:             </div>",
          "67:             {{/canmanage}}",
          "68:             </td>",
          "69:         </tr>",
          "70:         {{/competencyframeworks}}",
          "71:     </tbody>",
          "72: </table>",
          "73: {{^competencyframeworks}}",
          "74: <p class=\"alert-info\">",
          "75:     {{#str}}nocompetencyframeworks, tool_lp{{/str}}",
          "76: </p>",
          "77: {{/competencyframeworks}}",
          "79: <div class=\"btn-group pull-right\">",
          "80: {{#navigation}}",
          "81: {{{.}}}",
          "82: {{/navigation}}",
          "83: </div>",
          "85: {{#js}}",
          "87: require(['tool_lp/frameworkdelete',",
          "88:          'core/menu',",
          "89:          'tool_lp/frameworkmove'],",
          "90:         function(deleteMod, menu, moveMod) {",
          "92:     deleteMod.init();",
          "93:     moveMod.init();",
          "95:     menu.menu('{{#str}}edit{{/str}}', '.competencyframeworkactions');",
          "96: });",
          "98: {{/js}}",
          "100: </div>",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/manage_templates_page.mustache||admin/tool/lp/templates/manage_templates_page.mustache": [
          "File: admin/tool/lp/templates/manage_templates_page.mustache -> admin/tool/lp/templates/manage_templates_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16: }}",
          "17: {{!",
          "18:     Manage learning plan templates template.",
          "20:     Classes required for JS:",
          "26:     Data attibutes required for JS:",
          "31:     Context variables required for this template:",
          "35: }}",
          "36: <div data-region=\"managetemplates\">",
          "37: <table class=\"generaltable fullwidth managetemplates\">",
          "38:     <caption>{{#str}}listtemplatescaption, tool_lp{{/str}}</caption>",
          "39:     <thead>",
          "40:         <tr>",
          "41:             <th scope=\"col\">{{#str}}templatename, tool_lp{{/str}}</th>",
          "42:             <th scope=\"col\">{{#str}}actions, tool_lp{{/str}}</th>",
          "43:         </tr>",
          "44:     </thead>",
          "45:     <tbody class=\"drag-parentnode\">",
          "46:         {{#templates}}",
          "47:         <tr class=\"drag-samenode\" data-templateid=\"{{id}}\">",
          "48:             <td><span class=\"drag-handlecontainer\"></span><span><a href=\"{{pluginbaseurl}}/templatecompetencies.php?templateid={{id}}\">{{shortname}} {{idnumber}}</a></span> {{^visible}}{{#str}}hiddenhint, tool_lp{{/str}}{{/visible}}</td>",
          "49:             <td>",
          "50:             {{#canmanage}}",
          "51:             <div style=\"display: inline-block;\">",
          "52:             <ul class=\"templateactions hide\">",
          "53:                 <li>",
          "54:                     <a href=\"{{pluginbaseurl}}/edittemplate.php?id={{id}}\">",
          "55:                         {{#pix}}t/edit{{/pix}}{{#str}}editthistemplate, tool_lp{{/str}}",
          "56:                     </a>",
          "57:                 </li>",
          "58:                 <li>",
          "59:                     <a data-action=\"deletetemplate\" data-templateid=\"{{id}}\" href=\"#\">",
          "60:                         {{#pix}}t/delete{{/pix}}{{#str}}deletethistemplate, tool_lp{{/str}}",
          "61:                     </a>",
          "62:                 </li>",
          "63:             </ul>",
          "64:             </div>",
          "65:             {{/canmanage}}",
          "66:             </td>",
          "67:         </tr>",
          "68:         {{/templates}}",
          "69:     </tbody>",
          "70: </table>",
          "71: {{^templates}}",
          "72: <p class=\"alert-info\">",
          "73:     {{#str}}notemplates, tool_lp{{/str}}",
          "74: </p>",
          "75: {{/templates}}",
          "77: <div class=\"btn-group pull-right\">",
          "78: {{#navigation}}",
          "79: {{{.}}}",
          "80: {{/navigation}}",
          "81: </div>",
          "83: {{#js}}",
          "85: require(['tool_lp/templatedelete',",
          "86:          'core/menu',",
          "87:          'tool_lp/templatemove'],",
          "88:         function(deleteMod, menu, moveMod) {",
          "90:     deleteMod.init();",
          "91:     moveMod.init();",
          "93:     menu.menu('{{#str}}edit{{/str}}', '.templateactions');",
          "94: });",
          "96: {{/js}}",
          "98: </div>",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/no_frameworks_warning.mustache||admin/tool/lp/templates/no_frameworks_warning.mustache": [
          "File: admin/tool/lp/templates/no_frameworks_warning.mustache -> admin/tool/lp/templates/no_frameworks_warning.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <p class=\"alert-error\">",
          "2:     {{#str}}nocompetencyframeworks, tool_lp{{/str}}",
          "3: </p>",
          "",
          "---------------"
        ],
        "admin/tool/lp/tests/externallib_test.php||admin/tool/lp/tests/externallib_test.php": [
          "File: admin/tool/lp/tests/externallib_test.php -> admin/tool/lp/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "17: defined('MOODLE_INTERNAL') || die();",
          "19: global $CFG;",
          "21: require_once($CFG->dirroot . '/webservice/tests/helpers.php');",
          "23: use tool_lp\\external;",
          "32: class tool_lp_external_testcase extends externallib_advanced_testcase {",
          "35:     protected $creator = null;",
          "38:     protected $user = null;",
          "43:     protected function setUp() {",
          "44:         global $DB;",
          "46:         $this->resetAfterTest(true);",
          "49:         $creator = $this->getDataGenerator()->create_user();",
          "50:         $user = $this->getDataGenerator()->create_user();",
          "51:         $syscontext = context_system::instance();",
          "53:         $creatorrole = create_role('Creator role', 'creatorrole', 'learning plan creator role description');",
          "54:         $userrole = create_role('User role', 'userrole', 'learning plan user role description');",
          "56:         assign_capability('tool/lp:competencymanage', CAP_ALLOW, $creatorrole, $syscontext->id);",
          "57:         assign_capability('tool/lp:competencyview', CAP_ALLOW, $userrole, $syscontext->id);",
          "59:         role_assign($creatorrole, $creator->id, $syscontext->id);",
          "60:         role_assign($userrole, $user->id, $syscontext->id);",
          "62:         $this->creator = $creator;",
          "63:         $this->user = $user;",
          "64:         accesslib_clear_all_caches_for_unit_testing();",
          "65:     }",
          "70:     public function test_create_competency_frameworks_with_read_permissions() {",
          "71:         $this->setExpectedException('required_capability_exception');",
          "72:         $this->setUser($this->user);",
          "73:         $result = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "74:     }",
          "79:     public function test_create_competency_frameworks_with_manage_permissions() {",
          "80:         $this->setUser($this->creator);",
          "81:         $result = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "82:         $result = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $result);",
          "84:         $this->assertGreaterThan(0, $result->timecreated);",
          "85:         $this->assertGreaterThan(0, $result->timemodified);",
          "86:         $this->assertEquals($this->creator->id, $result->usermodified);",
          "87:         $this->assertEquals('shortname', $result->shortname);",
          "88:         $this->assertEquals('idnumber', $result->idnumber);",
          "89:         $this->assertEquals('description', $result->description);",
          "90:         $this->assertEquals(FORMAT_HTML, $result->descriptionformat);",
          "91:         $this->assertEquals(true, $result->visible);",
          "92:     }",
          "97:     public function test_create_competency_frameworks_with_nasty_data() {",
          "98:         $this->setUser($this->creator);",
          "99:         $this->setExpectedException('invalid_parameter_exception');",
          "100:         $result = external::create_competency_framework('short<a href=\"\">', 'id;\"number', 'de<>\\\\..scription', FORMAT_HTML, true);",
          "101:     }",
          "106:     public function test_read_competency_frameworks_with_manage_permissions() {",
          "107:         $this->setUser($this->creator);",
          "108:         $result = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "109:         $result = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $result);",
          "111:         $id = $result->id;",
          "112:         $result = external::read_competency_framework($id);",
          "113:         $result = (object) external_api::clean_returnvalue(external::read_competency_framework_returns(), $result);",
          "115:         $this->assertGreaterThan(0, $result->timecreated);",
          "116:         $this->assertGreaterThan(0, $result->timemodified);",
          "117:         $this->assertEquals($this->creator->id, $result->usermodified);",
          "118:         $this->assertEquals('shortname', $result->shortname);",
          "119:         $this->assertEquals('idnumber', $result->idnumber);",
          "120:         $this->assertEquals('description', $result->description);",
          "121:         $this->assertEquals(FORMAT_HTML, $result->descriptionformat);",
          "122:         $this->assertEquals(true, $result->visible);",
          "123:     }",
          "128:     public function test_read_competency_frameworks_with_read_permissions() {",
          "129:         $this->setUser($this->creator);",
          "130:         $result = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "131:         $result = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $result);",
          "134:         $this->setUser($this->user);",
          "135:         $id = $result->id;",
          "136:         $result = external::read_competency_framework($id);",
          "137:         $result = (object) external_api::clean_returnvalue(external::read_competency_framework_returns(), $result);",
          "139:         $this->assertGreaterThan(0, $result->timecreated);",
          "140:         $this->assertGreaterThan(0, $result->timemodified);",
          "141:         $this->assertEquals($this->creator->id, $result->usermodified);",
          "142:         $this->assertEquals('shortname', $result->shortname);",
          "143:         $this->assertEquals('idnumber', $result->idnumber);",
          "144:         $this->assertEquals('description', $result->description);",
          "145:         $this->assertEquals(FORMAT_HTML, $result->descriptionformat);",
          "146:         $this->assertEquals(true, $result->visible);",
          "147:     }",
          "152:     public function test_delete_competency_frameworks_with_manage_permissions() {",
          "153:         $this->setUser($this->creator);",
          "154:         $result = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "155:         $result = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $result);",
          "157:         $id = $result->id;",
          "158:         $result = external::delete_competency_framework($id);",
          "159:         $result = external_api::clean_returnvalue(external::delete_competency_framework_returns(), $result);",
          "161:         $this->assertTrue($result);",
          "162:     }",
          "167:     public function test_delete_competency_frameworks_with_read_permissions() {",
          "168:         $this->setExpectedException('required_capability_exception');",
          "169:         $this->setUser($this->creator);",
          "170:         $result = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "171:         $result = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $result);",
          "173:         $id = $result->id;",
          "175:         $this->setUser($this->user);",
          "176:         $result = external::delete_competency_framework($id);",
          "177:     }",
          "182:     public function test_update_competency_frameworks_with_manage_permissions() {",
          "183:         $this->setUser($this->creator);",
          "184:         $result = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "185:         $result = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $result);",
          "187:         $result = external::update_competency_framework($result->id, 'shortname2', 'idnumber2', 'description2', FORMAT_PLAIN, false);",
          "188:         $result = external_api::clean_returnvalue(external::update_competency_framework_returns(), $result);",
          "190:         $this->assertTrue($result);",
          "191:     }",
          "196:     public function test_update_competency_frameworks_with_read_permissions() {",
          "197:         $this->setExpectedException('required_capability_exception');",
          "198:         $this->setUser($this->creator);",
          "199:         $result = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "200:         $result = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $result);",
          "202:         $this->setUser($this->user);",
          "203:         $result = external::update_competency_framework($result->id, 'shortname2', 'idnumber2', 'description2', FORMAT_PLAIN, false);",
          "204:     }",
          "209:     public function test_list_and_count_competency_frameworks_with_manage_permissions() {",
          "210:         $this->setUser($this->creator);",
          "211:         $result = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "212:         $result = external::create_competency_framework('shortname2', 'idnumber2', 'description', FORMAT_HTML, true);",
          "213:         $result = external::create_competency_framework('shortname3', 'idnumber3', 'description', FORMAT_HTML, true);",
          "215:         $result = external::count_competency_frameworks(array());",
          "216:         $result = external_api::clean_returnvalue(external::count_competency_frameworks_returns(), $result);",
          "218:         $this->assertEquals($result, 3);",
          "220:         $result = external::list_competency_frameworks(array(), 'shortname', 'ASC', 0, 10);",
          "221:         $result = external_api::clean_returnvalue(external::list_competency_frameworks_returns(), $result);",
          "223:         $this->assertEquals(count($result), 3);",
          "224:         $result = (object) $result[0];",
          "226:         $this->assertGreaterThan(0, $result->timecreated);",
          "227:         $this->assertGreaterThan(0, $result->timemodified);",
          "228:         $this->assertEquals($this->creator->id, $result->usermodified);",
          "229:         $this->assertEquals('shortname', $result->shortname);",
          "230:         $this->assertEquals('idnumber', $result->idnumber);",
          "231:         $this->assertEquals('description', $result->description);",
          "232:         $this->assertEquals(FORMAT_HTML, $result->descriptionformat);",
          "233:         $this->assertEquals(true, $result->visible);",
          "234:     }",
          "239:     public function test_list_and_count_competency_frameworks_with_read_permissions() {",
          "240:         $this->setUser($this->creator);",
          "241:         $result = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "242:         $result = external::create_competency_framework('shortname2', 'idnumber2', 'description', FORMAT_HTML, true);",
          "243:         $result = external::create_competency_framework('shortname3', 'idnumber3', 'description', FORMAT_HTML, true);",
          "245:         $this->setUser($this->user);",
          "246:         $result = external::count_competency_frameworks(array());",
          "247:         $result = external_api::clean_returnvalue(external::count_competency_frameworks_returns(), $result);",
          "249:         $this->assertEquals($result, 3);",
          "251:         $result = external::list_competency_frameworks(array(), 'shortname', 'ASC', 0, 10);",
          "252:         $result = external_api::clean_returnvalue(external::list_competency_frameworks_returns(), $result);",
          "254:         $this->assertEquals(count($result), 3);",
          "255:         $result = (object) $result[0];",
          "257:         $this->assertGreaterThan(0, $result->timecreated);",
          "258:         $this->assertGreaterThan(0, $result->timemodified);",
          "259:         $this->assertEquals($this->creator->id, $result->usermodified);",
          "260:         $this->assertEquals('shortname', $result->shortname);",
          "261:         $this->assertEquals('idnumber', $result->idnumber);",
          "262:         $this->assertEquals('description', $result->description);",
          "263:         $this->assertEquals(FORMAT_HTML, $result->descriptionformat);",
          "264:         $this->assertEquals(true, $result->visible);",
          "265:     }",
          "270:     public function test_reorder_competency_framework() {",
          "271:         $this->setUser($this->creator);",
          "272:         $f1 = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "273:         $f2 = external::create_competency_framework('shortname2', 'idnumber2', 'description', FORMAT_HTML, true);",
          "274:         $f3 = external::create_competency_framework('shortname3', 'idnumber3', 'description', FORMAT_HTML, true);",
          "275:         $f4 = external::create_competency_framework('shortname4', 'idnumber4', 'description', FORMAT_HTML, true);",
          "276:         $f5 = external::create_competency_framework('shortname5', 'idnumber5', 'description', FORMAT_HTML, true);",
          "277:         $f6 = external::create_competency_framework('shortname6', 'idnumber6', 'description', FORMAT_HTML, true);",
          "280:         $result = external::reorder_competency_framework($f5->id, $f2->id);",
          "281:         $result = external::list_competency_frameworks(array(), 'sortorder', 'ASC', 0, 10);",
          "282:         $result = external_api::clean_returnvalue(external::list_competency_frameworks_returns(), $result);",
          "284:         $r1 = (object) $result[0];",
          "285:         $r2 = (object) $result[1];",
          "286:         $r3 = (object) $result[2];",
          "287:         $r4 = (object) $result[3];",
          "288:         $r5 = (object) $result[4];",
          "289:         $r6 = (object) $result[5];",
          "291:         $this->assertEquals($f1->id, $r1->id);",
          "292:         $this->assertEquals($f5->id, $r2->id);",
          "293:         $this->assertEquals($f2->id, $r3->id);",
          "294:         $this->assertEquals($f3->id, $r4->id);",
          "295:         $this->assertEquals($f4->id, $r5->id);",
          "296:         $this->assertEquals($f6->id, $r6->id);",
          "299:         $result = external::reorder_competency_framework($f5->id, $f4->id);",
          "300:         $result = external::list_competency_frameworks(array(), 'sortorder', 'ASC', 0, 10);",
          "301:         $result = external_api::clean_returnvalue(external::list_competency_frameworks_returns(), $result);",
          "303:         $r1 = (object) $result[0];",
          "304:         $r2 = (object) $result[1];",
          "305:         $r3 = (object) $result[2];",
          "306:         $r4 = (object) $result[3];",
          "307:         $r5 = (object) $result[4];",
          "308:         $r6 = (object) $result[5];",
          "310:         $this->assertEquals($f1->id, $r1->id);",
          "311:         $this->assertEquals($f2->id, $r2->id);",
          "312:         $this->assertEquals($f3->id, $r3->id);",
          "313:         $this->assertEquals($f4->id, $r4->id);",
          "314:         $this->assertEquals($f5->id, $r5->id);",
          "315:         $this->assertEquals($f6->id, $r6->id);",
          "317:         $this->setExpectedException('required_capability_exception');",
          "318:         $this->setUser($this->user);",
          "319:         $result = external::reorder_competency_framework($f5->id, $f4->id);",
          "320:     }",
          "325:     public function test_create_competency_with_read_permissions() {",
          "326:         $this->setExpectedException('required_capability_exception');",
          "327:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "328:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "329:         $this->setUser($this->user);",
          "330:         $competency = external::create_competency('shortname', 'idnumber', 'description', FORMAT_HTML, true, $framework->id, 0);",
          "331:     }",
          "336:     public function test_create_competency_with_manage_permissions() {",
          "337:         $this->setUser($this->creator);",
          "338:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "339:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "341:         $competency = external::create_competency('shortname', 'idnumber', 'description', FORMAT_HTML, true, $framework->id, 0);",
          "342:         $competency = (object) external_api::clean_returnvalue(external::create_competency_returns(), $competency);",
          "344:         $this->assertGreaterThan(0, $competency->timecreated);",
          "345:         $this->assertGreaterThan(0, $competency->timemodified);",
          "346:         $this->assertEquals($this->creator->id, $competency->usermodified);",
          "347:         $this->assertEquals('shortname', $competency->shortname);",
          "348:         $this->assertEquals('idnumber', $competency->idnumber);",
          "349:         $this->assertEquals('description', $competency->description);",
          "350:         $this->assertEquals(FORMAT_HTML, $competency->descriptionformat);",
          "351:         $this->assertEquals(true, $competency->visible);",
          "352:         $this->assertEquals(0, $competency->parentid);",
          "353:         $this->assertEquals($framework->id, $competency->competencyframeworkid);",
          "354:     }",
          "359:     public function test_create_competency_with_nasty_data() {",
          "360:         $this->setUser($this->creator);",
          "361:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "362:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "363:         $this->setExpectedException('invalid_parameter_exception');",
          "364:         $competency = external::create_competency('shortname<a href=\"\">', 'id;\"number', 'de<>\\\\..scription', FORMAT_HTML, true, $framework->id, 0);",
          "365:     }",
          "370:     public function test_read_competencies_with_manage_permissions() {",
          "371:         $this->setUser($this->creator);",
          "372:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "373:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "374:         $result = external::create_competency('shortname', 'idnumber', 'description', FORMAT_HTML, true, $framework->id, 0);",
          "375:         $result = (object) external_api::clean_returnvalue(external::create_competency_returns(), $result);",
          "377:         $id = $result->id;",
          "378:         $result = external::read_competency($id);",
          "379:         $result = (object) external_api::clean_returnvalue(external::read_competency_returns(), $result);",
          "381:         $this->assertGreaterThan(0, $result->timecreated);",
          "382:         $this->assertGreaterThan(0, $result->timemodified);",
          "383:         $this->assertEquals($this->creator->id, $result->usermodified);",
          "384:         $this->assertEquals('shortname', $result->shortname);",
          "385:         $this->assertEquals('idnumber', $result->idnumber);",
          "386:         $this->assertEquals('description', $result->description);",
          "387:         $this->assertEquals(FORMAT_HTML, $result->descriptionformat);",
          "388:         $this->assertEquals(true, $result->visible);",
          "389:         $this->assertEquals(0, $result->parentid);",
          "390:         $this->assertEquals(0, $result->parentid);",
          "391:     }",
          "396:     public function test_read_competencies_with_read_permissions() {",
          "397:         $this->setUser($this->creator);",
          "398:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "399:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "400:         $result = external::create_competency('shortname', 'idnumber', 'description', FORMAT_HTML, true, $framework->id, 0);",
          "401:         $result = (object) external_api::clean_returnvalue(external::create_competency_returns(), $result);",
          "404:         $this->setUser($this->user);",
          "405:         $id = $result->id;",
          "406:         $result = external::read_competency($id);",
          "407:         $result = (object) external_api::clean_returnvalue(external::read_competency_returns(), $result);",
          "409:         $this->assertGreaterThan(0, $result->timecreated);",
          "410:         $this->assertGreaterThan(0, $result->timemodified);",
          "411:         $this->assertEquals($this->creator->id, $result->usermodified);",
          "412:         $this->assertEquals('shortname', $result->shortname);",
          "413:         $this->assertEquals('idnumber', $result->idnumber);",
          "414:         $this->assertEquals('description', $result->description);",
          "415:         $this->assertEquals(FORMAT_HTML, $result->descriptionformat);",
          "416:         $this->assertEquals(true, $result->visible);",
          "417:         $this->assertEquals(0, $result->parentid);",
          "418:         $this->assertEquals(0, $result->parentid);",
          "419:     }",
          "424:     public function test_delete_competency_with_manage_permissions() {",
          "425:         $this->setUser($this->creator);",
          "426:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "427:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "428:         $result = external::create_competency('shortname', 'idnumber', 'description', FORMAT_HTML, true, $framework->id, 0);",
          "429:         $result = (object) external_api::clean_returnvalue(external::create_competency_returns(), $result);",
          "431:         $id = $result->id;",
          "432:         $result = external::delete_competency($id);",
          "433:         $result = external_api::clean_returnvalue(external::delete_competency_returns(), $result);",
          "435:         $this->assertTrue($result);",
          "436:     }",
          "441:     public function test_delete_competency_with_read_permissions() {",
          "442:         $this->setExpectedException('required_capability_exception');",
          "443:         $this->setUser($this->creator);",
          "444:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "445:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "446:         $result = external::create_competency('shortname', 'idnumber', 'description', FORMAT_HTML, true, $framework->id, 0);",
          "447:         $result = (object) external_api::clean_returnvalue(external::create_competency_returns(), $result);",
          "449:         $id = $result->id;",
          "451:         $this->setUser($this->user);",
          "452:         $result = external::delete_competency($id);",
          "453:     }",
          "458:     public function test_update_competency_with_manage_permissions() {",
          "459:         $this->setUser($this->creator);",
          "460:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "461:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "462:         $result = external::create_competency('shortname', 'idnumber', 'description', FORMAT_HTML, true, $framework->id, 0);",
          "463:         $result = (object) external_api::clean_returnvalue(external::create_competency_returns(), $result);",
          "465:         $result = external::update_competency($result->id, 'shortname2', 'idnumber2', 'description2', FORMAT_HTML, false);",
          "466:         $result = external_api::clean_returnvalue(external::update_competency_returns(), $result);",
          "468:         $this->assertTrue($result);",
          "469:     }",
          "474:     public function test_update_competency_with_read_permissions() {",
          "475:         $this->setExpectedException('required_capability_exception');",
          "476:         $this->setUser($this->creator);",
          "477:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "478:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "479:         $result = external::create_competency('shortname', 'idnumber', 'description', FORMAT_HTML, true, $framework->id, 0);",
          "480:         $result = (object) external_api::clean_returnvalue(external::create_competency_returns(), $result);",
          "482:         $this->setUser($this->user);",
          "483:         $result = external::update_competency($result->id, 'shortname2', 'idnumber2', 'description2', FORMAT_HTML, false);",
          "484:     }",
          "489:     public function test_list_and_count_competencies_with_manage_permissions() {",
          "490:         $this->setUser($this->creator);",
          "491:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "492:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "493:         $result = external::create_competency('shortname', 'idnumber', 'description', FORMAT_HTML, true, $framework->id, 0);",
          "494:         $result = external::create_competency('shortname2', 'idnumber2', 'description2', FORMAT_HTML, true, $framework->id, 0);",
          "495:         $result = external::create_competency('shortname3', 'idnumber3', 'description3', FORMAT_HTML, true, $framework->id, 0);",
          "497:         $result = external::count_competencies(array());",
          "498:         $result = external_api::clean_returnvalue(external::count_competencies_returns(), $result);",
          "500:         $this->assertEquals($result, 3);",
          "502:         $result = external::list_competencies(array(), 'shortname', 'ASC', 0, 10);",
          "503:         $result = external_api::clean_returnvalue(external::list_competencies_returns(), $result);",
          "505:         $this->assertEquals(count($result), 3);",
          "506:         $result = (object) $result[0];",
          "508:         $this->assertGreaterThan(0, $result->timecreated);",
          "509:         $this->assertGreaterThan(0, $result->timemodified);",
          "510:         $this->assertEquals($this->creator->id, $result->usermodified);",
          "511:         $this->assertEquals('shortname', $result->shortname);",
          "512:         $this->assertEquals('idnumber', $result->idnumber);",
          "513:         $this->assertEquals('description', $result->description);",
          "514:         $this->assertEquals(true, $result->visible);",
          "515:     }",
          "520:     public function test_list_and_count_competencies_with_read_permissions() {",
          "521:         $this->setUser($this->creator);",
          "522:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "523:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "524:         $result = external::create_competency('shortname', 'idnumber', 'description', FORMAT_HTML, true, $framework->id, 0);",
          "525:         $result = external::create_competency('shortname2', 'idnumber2', 'description2', FORMAT_HTML, true, $framework->id, 0);",
          "526:         $result = external::create_competency('shortname3', 'idnumber3', 'description3', FORMAT_HTML, true, $framework->id, 0);",
          "528:         $this->setUser($this->user);",
          "530:         $result = external::count_competencies(array());",
          "531:         $result = external_api::clean_returnvalue(external::count_competencies_returns(), $result);",
          "533:         $this->assertEquals($result, 3);",
          "535:         $result = external::list_competencies(array(), 'shortname', 'ASC', 0, 10);",
          "536:         $result = external_api::clean_returnvalue(external::list_competencies_returns(), $result);",
          "538:         $this->assertEquals(count($result), 3);",
          "539:         $result = (object) $result[0];",
          "541:         $this->assertGreaterThan(0, $result->timecreated);",
          "542:         $this->assertGreaterThan(0, $result->timemodified);",
          "543:         $this->assertEquals($this->creator->id, $result->usermodified);",
          "544:         $this->assertEquals('shortname', $result->shortname);",
          "545:         $this->assertEquals('idnumber', $result->idnumber);",
          "546:         $this->assertEquals('description', $result->description);",
          "547:         $this->assertEquals(true, $result->visible);",
          "548:     }",
          "553:     public function test_search_competencies_with_read_permissions() {",
          "554:         $this->setUser($this->creator);",
          "555:         $framework = external::create_competency_framework('shortname', 'idnumber', 'description', FORMAT_HTML, true);",
          "556:         $framework = (object) external_api::clean_returnvalue(external::create_competency_framework_returns(), $framework);",
          "557:         $result = external::create_competency('shortname', 'idnumber', 'description', FORMAT_HTML, true, $framework->id, 0);",
          "558:         $result = external::create_competency('shortname2', 'idnumber2', 'description2', FORMAT_HTML, true, $framework->id, 0);",
          "559:         $result = external::create_competency('shortname3', 'idnumber3', 'description3', FORMAT_HTML, true, $framework->id, 0);",
          "561:         $this->setUser($this->user);",
          "563:         $result = external::search_competencies('short', $framework->id);",
          "564:         $result = external_api::clean_returnvalue(external::search_competencies_returns(), $result);",
          "566:         $this->assertEquals(count($result), 3);",
          "567:         $result = (object) $result[0];",
          "569:         $this->assertGreaterThan(0, $result->timecreated);",
          "570:         $this->assertGreaterThan(0, $result->timemodified);",
          "571:         $this->assertEquals($this->creator->id, $result->usermodified);",
          "572:         $this->assertEquals('shortname', $result->shortname);",
          "573:         $this->assertEquals('idnumber', $result->idnumber);",
          "574:         $this->assertEquals('description', $result->description);",
          "575:         $this->assertEquals(true, $result->visible);",
          "576:     }",
          "578: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/version.php||admin/tool/lp/version.php": [
          "File: admin/tool/lp/version.php -> admin/tool/lp/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: $plugin->version   = 2015021623; // The current plugin version (Date: YYYYMMDDXX).",
          "28: $plugin->requires  = 2014110400; // Requires this Moodle version.",
          "29: $plugin->component = 'tool_lp'; // Full name of the plugin (used for diagnostics).",
          "",
          "---------------"
        ],
        "lib/amd/src/dialogue.js||lib/amd/src/dialogue.js": [
          "File: lib/amd/src/dialogue.js -> lib/amd/src/dialogue.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: define(['core/yui'], function(Y) {",
          "35:     var dialogue = function(title, content, afterShow) {",
          "36:         this.yuiDialogue = null;",
          "37:         var parent = this;",
          "39:         Y.use('moodle-core-notification', function () {",
          "41:             parent.yuiDialogue = new M.core.dialogue({",
          "42:                 headerContent: title,",
          "43:                 bodyContent: content,",
          "44:                 draggable: true,",
          "45:                 visible: false,",
          "46:                 center: true,",
          "47:                 modal: true",
          "48:             });",
          "50:             parent.yuiDialogue.after('visibleChange', function(e) {",
          "51:                 if (e.newVal) {",
          "52:                     afterShow(parent);",
          "53:                 }",
          "54:             });",
          "56:             parent.yuiDialogue.show();",
          "57:         });",
          "58:     };",
          "63:     dialogue.prototype.close = function() {",
          "64:         this.yuiDialogue.hide();",
          "65:         this.yuiDialogue.destroy();",
          "66:     };",
          "71:     dialogue.prototype.getContent = function() {",
          "72:         return this.yuiDialogue.bodyNode.getDOMNode();",
          "73:     };",
          "75:     return /** @alias module:core/dialogue */ dialogue;",
          "76: });",
          "",
          "---------------"
        ],
        "lib/amd/src/url.js||lib/amd/src/url.js": [
          "File: lib/amd/src/url.js -> lib/amd/src/url.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:             }",
          "74:                 relativePath = relativePath.replace(/^\\/admin\\//, '/' + config.admin + '/');",
          "75:             }",
          "76:             return config.wwwroot + relativePath;",
          "",
          "[Removed Lines]",
          "73:             if (config.admin !== 'admin') {",
          "",
          "[Added Lines]",
          "73:             if (typeof config.admin != \"undefined\" && config.admin !== 'admin') {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c2b163c9722388c37b263a40fc6d1c9a2cda272",
      "candidate_info": {
        "commit_hash": "6c2b163c9722388c37b263a40fc6d1c9a2cda272",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6c2b163c9722388c37b263a40fc6d1c9a2cda272",
        "files": [
          "admin/tool/lp/amd/src/user_evidence_actions.js",
          "admin/tool/lp/classes/api.php",
          "admin/tool/lp/classes/external.php",
          "admin/tool/lp/classes/external/stored_file_exporter.php",
          "admin/tool/lp/classes/external/user_evidence_exporter.php",
          "admin/tool/lp/classes/form/user_evidence.php",
          "admin/tool/lp/classes/output/plans_page.php",
          "admin/tool/lp/classes/output/renderer.php",
          "admin/tool/lp/classes/output/user_evidence_list_page.php",
          "admin/tool/lp/classes/output/user_evidence_page.php",
          "admin/tool/lp/classes/page_helper.php",
          "admin/tool/lp/classes/user_evidence.php",
          "admin/tool/lp/db/access.php",
          "admin/tool/lp/db/install.xml",
          "admin/tool/lp/db/services.php",
          "admin/tool/lp/db/upgrade.php",
          "admin/tool/lp/lang/en/tool_lp.php",
          "admin/tool/lp/lib.php",
          "admin/tool/lp/pix/url.png",
          "admin/tool/lp/pix/url.svg",
          "admin/tool/lp/styles.css",
          "admin/tool/lp/templates/plans_page.mustache",
          "admin/tool/lp/templates/user_evidence_list_page.mustache",
          "admin/tool/lp/templates/user_evidence_page.mustache",
          "admin/tool/lp/user_evidence.php",
          "admin/tool/lp/user_evidence_edit.php",
          "admin/tool/lp/user_evidence_list.php",
          "admin/tool/lp/version.php"
        ],
        "message": "MDL-49463 tool_lp: Ability to add evidence of prior learning",
        "before_after_code_files": [
          "admin/tool/lp/amd/src/user_evidence_actions.js||admin/tool/lp/amd/src/user_evidence_actions.js",
          "admin/tool/lp/classes/api.php||admin/tool/lp/classes/api.php",
          "admin/tool/lp/classes/external.php||admin/tool/lp/classes/external.php",
          "admin/tool/lp/classes/external/stored_file_exporter.php||admin/tool/lp/classes/external/stored_file_exporter.php",
          "admin/tool/lp/classes/external/user_evidence_exporter.php||admin/tool/lp/classes/external/user_evidence_exporter.php",
          "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
          "admin/tool/lp/classes/output/plans_page.php||admin/tool/lp/classes/output/plans_page.php",
          "admin/tool/lp/classes/output/renderer.php||admin/tool/lp/classes/output/renderer.php",
          "admin/tool/lp/classes/output/user_evidence_list_page.php||admin/tool/lp/classes/output/user_evidence_list_page.php",
          "admin/tool/lp/classes/output/user_evidence_page.php||admin/tool/lp/classes/output/user_evidence_page.php",
          "admin/tool/lp/classes/page_helper.php||admin/tool/lp/classes/page_helper.php",
          "admin/tool/lp/classes/user_evidence.php||admin/tool/lp/classes/user_evidence.php",
          "admin/tool/lp/db/access.php||admin/tool/lp/db/access.php",
          "admin/tool/lp/db/services.php||admin/tool/lp/db/services.php",
          "admin/tool/lp/db/upgrade.php||admin/tool/lp/db/upgrade.php",
          "admin/tool/lp/lang/en/tool_lp.php||admin/tool/lp/lang/en/tool_lp.php",
          "admin/tool/lp/lib.php||admin/tool/lp/lib.php",
          "admin/tool/lp/styles.css||admin/tool/lp/styles.css",
          "admin/tool/lp/templates/plans_page.mustache||admin/tool/lp/templates/plans_page.mustache",
          "admin/tool/lp/templates/user_evidence_list_page.mustache||admin/tool/lp/templates/user_evidence_list_page.mustache",
          "admin/tool/lp/templates/user_evidence_page.mustache||admin/tool/lp/templates/user_evidence_page.mustache",
          "admin/tool/lp/user_evidence.php||admin/tool/lp/user_evidence.php",
          "admin/tool/lp/user_evidence_edit.php||admin/tool/lp/user_evidence_edit.php",
          "admin/tool/lp/user_evidence_list.php||admin/tool/lp/user_evidence_list.php",
          "admin/tool/lp/version.php||admin/tool/lp/version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php"
          ],
          "candidate": [
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/lp/amd/src/user_evidence_actions.js||admin/tool/lp/amd/src/user_evidence_actions.js": [
          "File: admin/tool/lp/amd/src/user_evidence_actions.js -> admin/tool/lp/amd/src/user_evidence_actions.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: define(['jquery',",
          "25:         'core/templates',",
          "26:         'core/ajax',",
          "27:         'core/notification',",
          "28:         'core/str',",
          "29:         'tool_lp/menubar'],",
          "30:         function($, templates, ajax, notification, str, Menubar) {",
          "39:     var UserEvidenceActions = function(type) {",
          "40:         this._type = type;",
          "42:         if (type === 'evidence') {",
          "44:             this._region = '[data-region=\"user-evidence-page\"]';",
          "45:             this._evidenceNode = '[data-region=\"user-evidence-page\"]';",
          "46:             this._template = 'tool_lp/user_evidence_page';",
          "47:             this._contextMethod = 'tool_lp_data_for_user_evidence_page';",
          "49:         } else if (type === 'list') {",
          "51:             this._region = '[data-region=\"user-evidence-list\"]';",
          "52:             this._evidenceNode = '[data-region=\"user-evidence-node\"]';",
          "53:             this._template = 'tool_lp/user_evidence_list_page';",
          "54:             this._contextMethod = 'tool_lp_data_for_user_evidence_list_page';",
          "56:         } else {",
          "57:             throw new TypeError('Unexpected type.');",
          "58:         }",
          "59:     };",
          "62:     UserEvidenceActions.prototype._contextMethod = null;",
          "64:     UserEvidenceActions.prototype._evidenceNode = null;",
          "66:     UserEvidenceActions.prototype._region = null;",
          "68:     UserEvidenceActions.prototype._template = null;",
          "70:     UserEvidenceActions.prototype._type = null;",
          "78:     UserEvidenceActions.prototype._getContextArgs = function(evidenceData) {",
          "79:         var self = this,",
          "80:             args = {};",
          "82:         if (self._type === 'evidence') {",
          "83:             args = {",
          "84:                 id: evidenceData.id",
          "85:             };",
          "87:         } else if (self._type === 'list') {",
          "88:             args = {",
          "89:                 userid: evidenceData.userid",
          "90:             };",
          "91:         }",
          "93:         return args;",
          "94:     };",
          "101:     UserEvidenceActions.prototype._renderView = function(context) {",
          "102:         var self = this;",
          "103:         templates.render(self._template, context)",
          "104:             .done(function(newhtml, newjs) {",
          "105:                 templates.replaceNode($(self._region), newhtml, newjs);",
          "106:             }.bind(self))",
          "107:             .fail(notification.exception);",
          "108:     };",
          "117:     UserEvidenceActions.prototype._callAndRefresh = function(calls, evidenceData) {",
          "118:         var self = this;",
          "120:         calls.push({",
          "121:             methodname: self._contextMethod,",
          "122:             args: self._getContextArgs(evidenceData)",
          "123:         });",
          "126:         return $.when.apply($.when, ajax.call(calls))",
          "127:             .then(function() {",
          "128:                 self._renderView.call(self, arguments[arguments.length - 1]);",
          "129:             })",
          "130:             .fail(notification.exception);",
          "131:     };",
          "138:     UserEvidenceActions.prototype._doDelete = function(evidenceData) {",
          "139:         var self = this,",
          "140:             calls = [{",
          "141:                 methodname: 'tool_lp_delete_user_evidence',",
          "142:                 args: { id: evidenceData.id }",
          "143:             }];",
          "144:         self._callAndRefresh(calls, evidenceData);",
          "145:     };",
          "152:     UserEvidenceActions.prototype.deleteEvidence = function(evidenceData) {",
          "153:         var self = this,",
          "154:             requests;",
          "156:         requests = ajax.call([{",
          "157:             methodname: 'tool_lp_read_user_evidence',",
          "158:             args: { id: evidenceData.id }",
          "159:         }]);",
          "161:         requests[0].done(function(evidence) {",
          "162:             str.get_strings([",
          "163:                 { key: 'confirm', component: 'moodle' },",
          "164:                 { key: 'deleteuserevidence', component: 'tool_lp', param: evidence.name },",
          "165:                 { key: 'delete', component: 'moodle' },",
          "166:                 { key: 'cancel', component: 'moodle' }",
          "167:             ]).done(function (strings) {",
          "168:                 notification.confirm(",
          "169:                     strings[0], // Confirm.",
          "170:                     strings[1], // Delete evidence X?",
          "171:                     strings[2], // Delete.",
          "172:                     strings[3], // Cancel.",
          "173:                     function() {",
          "174:                         self._doDelete(evidenceData);",
          "175:                     }.bind(self)",
          "176:                 );",
          "177:             }).fail(notification.exception);",
          "178:         }).fail(notification.exception);",
          "180:     };",
          "187:     UserEvidenceActions.prototype._deleteEvidenceHandler = function(e) {",
          "188:         e.preventDefault();",
          "189:         var data = this._findEvidenceData($(e.target));",
          "190:         this.deleteEvidence(data);",
          "191:     };",
          "199:     UserEvidenceActions.prototype._findEvidenceData = function(node) {",
          "200:         var parent = node.parentsUntil($(this._region).parent(), this._evidenceNode),",
          "201:             data;",
          "203:         if (parent.length != 1) {",
          "204:             throw new Error('The evidence node was not located.');",
          "205:         }",
          "207:         data = parent.data();",
          "208:         if (typeof data === 'undefined' || typeof data.id === 'undefined') {",
          "209:             throw new Error('Evidence data could not be found.');",
          "210:         }",
          "212:         return data;",
          "213:     };",
          "220:     UserEvidenceActions.prototype.enhanceMenubar = function(selector) {",
          "221:         var self = this;",
          "222:         Menubar.enhance(selector, {",
          "223:             '[data-action=\"user-evidence-delete\"]': self._deleteEvidenceHandler.bind(self),",
          "224:         });",
          "225:     };",
          "233:     UserEvidenceActions.prototype.registerEvents = function() {",
          "234:         var wrapper = $(this._region),",
          "235:             self = this;",
          "237:         wrapper.find('[data-action=\"user-evidence-delete\"]').click(self._deleteEvidenceHandler.bind(self));",
          "238:     };",
          "240:     return /** @alias module:tool_lp/user_evidence_actions */ UserEvidenceActions;",
          "241: });",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/api.php||admin/tool/lp/classes/api.php": [
          "File: admin/tool/lp/classes/api.php -> admin/tool/lp/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2065:         return false;",
          "2066:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2074:     public static function read_user_evidence($id) {",
          "2075:         $userevidence = new user_evidence($id);",
          "2077:         if (!$userevidence->can_read()) {",
          "2078:             $context = $userevidence->get_context();",
          "2079:             throw new required_capability_exception($context, 'tool/lp:userevidenceread', 'nopermissions', '');",
          "2080:         }",
          "2082:         return $userevidence;",
          "2083:     }",
          "2092:     public static function create_user_evidence($data, $draftitemid = null) {",
          "2093:         $userevidence = new user_evidence(null, $data);",
          "2094:         $context = $userevidence->get_context();",
          "2096:         if (!$userevidence->can_manage()) {",
          "2097:             throw new required_capability_exception($context, 'tool/lp:userevidencemanage', 'nopermissions', '');",
          "2098:         }",
          "2100:         $userevidence->create();",
          "2101:         if (!empty($draftitemid)) {",
          "2102:             $fileareaoptions = array('subdirs' => true);",
          "2103:             $itemid = $userevidence->get_id();",
          "2104:             file_save_draft_area_files($draftitemid, $context->id, 'tool_lp', 'userevidence', $itemid, $fileareaoptions);",
          "2105:         }",
          "2107:         return $userevidence;",
          "2108:     }",
          "2117:     public static function update_user_evidence($data, $draftitemid = null) {",
          "2118:         $userevidence = new user_evidence($data->id);",
          "2119:         $context = $userevidence->get_context();",
          "2121:         if (!$userevidence->can_manage()) {",
          "2122:             throw new required_capability_exception($context, 'tool/lp:userevidencemanage', 'nopermissions', '');",
          "2124:         } else if (array_key_exists('userid', $data) && $data->userid != $userevidence->get_userid()) {",
          "2125:             throw new coding_exception('Can not change the userid of a user evidence.');",
          "2126:         }",
          "2128:         $userevidence->from_record($data);",
          "2129:         $userevidence->update();",
          "2131:         if (!empty($draftitemid)) {",
          "2132:             $fileareaoptions = array('subdirs' => true);",
          "2133:             $itemid = $userevidence->get_id();",
          "2134:             file_save_draft_area_files($draftitemid, $context->id, 'tool_lp', 'userevidence', $itemid, $fileareaoptions);",
          "2135:         }",
          "2137:         return $userevidence;",
          "2138:     }",
          "2146:     public static function delete_user_evidence($id) {",
          "2147:         $userevidence = new user_evidence($id);",
          "2148:         $context = $userevidence->get_context();",
          "2150:         if (!$userevidence->can_manage()) {",
          "2151:             throw new required_capability_exception($context, 'tool/lp:userevidencemanage', 'nopermissions', '');",
          "2152:         }",
          "2154:         $userevidence->delete();",
          "2155:         $fs = get_file_storage();",
          "2156:         $fs->delete_area_files($context->id, 'tool_lp', 'userevidence', $id);",
          "2158:         return true;",
          "2159:     }",
          "2167:     public static function list_user_evidence($userid) {",
          "2168:         if (!user_evidence::can_read_user($userid)) {",
          "2169:             $context = context_user::instance($userid);",
          "2170:             throw new required_capability_exception($context, 'tool/lp:userevidenceread', 'nopermissions', '');",
          "2171:         }",
          "2173:         $evidence = user_evidence::get_records(array('userid' => $userid), 'name');",
          "2174:         return $evidence;",
          "2175:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/external.php||admin/tool/lp/classes/external.php": [
          "File: admin/tool/lp/classes/external.php -> admin/tool/lp/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: use tool_lp\\external\\user_summary_exporter;",
          "48: use tool_lp\\external\\user_competency_exporter;",
          "49: use tool_lp\\external\\user_competency_plan_exporter;",
          "50: use tool_lp\\external\\competency_exporter;",
          "51: use tool_lp\\external\\course_competency_exporter;",
          "52: use tool_lp\\external\\course_summary_exporter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: use tool_lp\\external\\user_evidence_exporter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3104:             'pluginbaseurl' => new external_value(PARAM_LOCALURL, 'Url to the tool_lp plugin folder on this Moodle site'),",
          "3105:             'navigation' => new external_multiple_structure(",
          "3106:                 new external_value(PARAM_RAW, 'HTML for a navigation item that should be on this page')",
          "3108:         ));",
          "3109:     }",
          "",
          "[Removed Lines]",
          "3107:             )",
          "",
          "[Added Lines]",
          "3108:             ),",
          "3109:             'canreaduserevidence' => new external_value(PARAM_BOOL, 'Can the current user view the user\\'s evidence'),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3193:         );",
          "3194:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3203:     public static function read_user_evidence_parameters() {",
          "3204:         return new external_function_parameters(array(",
          "3205:             'id' => new external_value(PARAM_INT, 'The user evidence ID.'),",
          "3206:         ));",
          "3207:     }",
          "3215:     public static function read_user_evidence($id) {",
          "3216:         global $PAGE;",
          "3217:         $params = self::validate_parameters(self::read_user_evidence_parameters(), array('id' => $id));",
          "3219:         $userevidence = api::read_user_evidence($params['id']);",
          "3220:         $context = $userevidence->get_context();",
          "3221:         self::validate_context($context);",
          "3222:         $output = $PAGE->get_renderer('tool_lp');",
          "3225:         $exporter = new user_evidence_exporter($userevidence, array('context' => $context, 'competencies' => array()));",
          "3226:         return $exporter->export($output);",
          "3227:     }",
          "3234:     public static function read_user_evidence_returns() {",
          "3235:         return user_evidence_exporter::get_read_structure();",
          "3236:     }",
          "3243:     public static function delete_user_evidence_parameters() {",
          "3244:         return new external_function_parameters(array(",
          "3245:             'id' => new external_value(PARAM_INT, 'The user evidence ID.'),",
          "3246:         ));",
          "3247:     }",
          "3255:     public static function delete_user_evidence($id) {",
          "3256:         $params = self::validate_parameters(self::delete_user_evidence_parameters(), array('id' => $id));",
          "3258:         $userevidence = api::read_user_evidence($params['id']);",
          "3259:         self::validate_context($userevidence->get_context());",
          "3261:         return api::delete_user_evidence($userevidence->get_id());",
          "3262:     }",
          "3269:     public static function delete_user_evidence_returns() {",
          "3270:         return new external_value(PARAM_BOOL, 'True if the delete was successful');",
          "3271:     }",
          "3279:     public static function data_for_user_evidence_list_page_parameters() {",
          "3280:         return new external_function_parameters(array(",
          "3281:             'userid' => new external_value(PARAM_INT, 'The user ID')",
          "3282:         ));",
          "3283:     }",
          "3291:     public static function data_for_user_evidence_list_page($userid) {",
          "3292:         global $PAGE;",
          "3293:         $params = self::validate_parameters(self::data_for_user_evidence_list_page_parameters(),",
          "3294:             array('userid' => $userid));",
          "3296:         $context = context_user::instance($params['userid']);",
          "3297:         self::validate_context($context);",
          "3298:         $output = $PAGE->get_renderer('tool_lp');",
          "3300:         $renderable = new \\tool_lp\\output\\user_evidence_list_page($params['userid']);",
          "3301:         return $renderable->export_for_template($output);",
          "3302:     }",
          "3309:     public static function data_for_user_evidence_list_page_returns() {",
          "3310:         return new external_single_structure(array (",
          "3311:             'canmanage' => new external_value(PARAM_BOOL, 'Can the current user manage the user\\'s evidence'),",
          "3312:             'userid' => new external_value(PARAM_INT, 'The user ID'),",
          "3313:             'pluginbaseurl' => new external_value(PARAM_LOCALURL, 'Url to the tool_lp plugin folder on this Moodle site'),",
          "3314:             'evidence' => new external_multiple_structure(",
          "3315:                 user_evidence_exporter::get_read_structure()",
          "3316:             ),",
          "3317:             'navigation' => new external_multiple_structure(",
          "3318:                 new external_value(PARAM_RAW, 'HTML for a navigation item that should be on this page')",
          "3319:             ),",
          "3320:         ));",
          "3321:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/external/stored_file_exporter.php||admin/tool/lp/classes/external/stored_file_exporter.php": [
          "File: admin/tool/lp/classes/external/stored_file_exporter.php -> admin/tool/lp/classes/external/stored_file_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp\\external;",
          "26: use coding_exception;",
          "27: use core_text;",
          "28: use moodle_url;",
          "29: use renderer_base;",
          "30: use stdClass;",
          "31: use stored_file;",
          "40: class stored_file_exporter extends exporter {",
          "43:     protected $file;",
          "45:     public function __construct(stored_file $file, $related = array()) {",
          "46:         $this->file = $file;",
          "48:         $data = new stdClass();",
          "49:         $data->contextid = $file->get_contextid();",
          "50:         $data->component = $file->get_component();",
          "51:         $data->filearea = $file->get_filearea();",
          "52:         $data->itemid = $file->get_itemid();",
          "53:         $data->filepath = $file->get_filepath();",
          "54:         $data->filename = $file->get_filename();",
          "55:         $data->isdir = $file->is_directory();",
          "56:         $data->timemodified = $file->get_timemodified();",
          "57:         $data->timecreated = $file->get_timecreated();",
          "58:         $data->filesize = $file->get_filesize();",
          "59:         $data->author = $file->get_author();",
          "60:         $data->license = $file->get_license();",
          "62:         if ($related['context']->id != $data->contextid) {",
          "63:             throw new coding_exception('Unexpected context ID received.');",
          "64:         }",
          "66:         parent::__construct($data, $related);",
          "67:     }",
          "69:     protected static function define_related() {",
          "70:         return array('context' => 'context');",
          "71:     }",
          "73:     protected static function define_properties() {",
          "74:         return array(",
          "75:             'contextid' => array(",
          "76:                 'type' => PARAM_INT",
          "77:             ),",
          "78:             'component' => array(",
          "79:                 'type' => PARAM_COMPONENT",
          "80:             ),",
          "81:             'filearea' => array(",
          "82:                 'type' => PARAM_AREA",
          "83:             ),",
          "84:             'itemid' => array(",
          "85:                 'type' => PARAM_INT",
          "86:             ),",
          "87:             'filepath' => array(",
          "88:                 'type' => PARAM_PATH",
          "89:             ),",
          "90:             'filename' => array(",
          "91:                 'type' => PARAM_FILE",
          "92:             ),",
          "93:             'isdir' => array(",
          "94:                 'type' => PARAM_BOOL",
          "95:             ),",
          "96:             'timemodified' => array(",
          "97:                 'type' => PARAM_INT",
          "98:             ),",
          "99:             'timecreated' => array(",
          "100:                 'type' => PARAM_INT",
          "101:             ),",
          "102:             'filesize' => array(",
          "103:                 'type' => PARAM_INT",
          "104:             ),",
          "105:             'author' => array(",
          "106:                 'type' => PARAM_TEXT",
          "107:             ),",
          "108:             'license' => array(",
          "109:                 'type' => PARAM_TEXT",
          "110:             )",
          "111:         );",
          "112:     }",
          "114:     protected static function define_other_properties() {",
          "115:         return array(",
          "116:             'filenameshort' => array(",
          "117:                 'type' => PARAM_RAW,",
          "118:             ),",
          "119:             'filesizeformatted' => array(",
          "120:                 'type' => PARAM_RAW",
          "121:             ),",
          "122:             'icon' => array(",
          "123:                 'type' => PARAM_RAW,",
          "124:             ),",
          "125:             'iconurl' => array(",
          "126:                 'type' => PARAM_URL,",
          "127:             ),",
          "128:             'timecreatedformatted' => array(",
          "129:                 'type' => PARAM_RAW",
          "130:             ),",
          "131:             'timemodifiedformatted' => array(",
          "132:                 'type' => PARAM_RAW",
          "133:             ),",
          "134:             'url' => array(",
          "135:                 'type' => PARAM_URL",
          "136:             ),",
          "137:         );",
          "138:     }",
          "140:     protected function get_other_values(renderer_base $output) {",
          "141:         $filename = $this->file->get_filename();",
          "142:         $filenameshort = $filename;",
          "143:         if (core_text::strlen($filename) > 25) {",
          "144:             $filenameshort = shorten_text(substr($filename, 0, -4), 21, true, '..');",
          "145:             $filenameshort .= substr($filename, -4);",
          "146:         }",
          "148:         $icon = $this->file->is_directory() ? file_folder_icon() : file_file_icon($this->file);",
          "149:         $iconurl = $output->pix_url($icon, 'core');",
          "151:         $url = moodle_url::make_pluginfile_url(",
          "152:             $this->file->get_contextid(),",
          "153:             $this->file->get_component(),",
          "154:             $this->file->get_filearea(),",
          "155:             $this->file->get_itemid(),",
          "156:             $this->file->get_filepath(),",
          "157:             $this->file->get_filename(),",
          "158:             true",
          "159:         );",
          "161:         return array(",
          "162:             'filenameshort' => $filenameshort,",
          "163:             'filesizeformatted' => display_size((int) $this->file->get_filesize()),",
          "164:             'icon' => $icon,",
          "165:             'iconurl' => $iconurl,",
          "166:             'url' => $url->out(false),",
          "167:             'timecreatedformatted' => userdate($this->file->get_timecreated()),",
          "168:             'timemodifiedformatted' => userdate($this->file->get_timemodified()),",
          "169:         );",
          "170:     }",
          "172: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/external/user_evidence_exporter.php||admin/tool/lp/classes/external/user_evidence_exporter.php": [
          "File: admin/tool/lp/classes/external/user_evidence_exporter.php -> admin/tool/lp/classes/external/user_evidence_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp\\external;",
          "26: use moodle_url;",
          "27: use renderer_base;",
          "36: class user_evidence_exporter extends persistent_exporter {",
          "38:     protected static function define_class() {",
          "39:         return 'tool_lp\\\\user_evidence';",
          "40:     }",
          "42:     protected static function define_other_properties() {",
          "43:         return array(",
          "44:             'canmanage' => array(",
          "45:                 'type' => PARAM_BOOL",
          "46:             ),",
          "47:             'competencies' => array(",
          "48:                 'type' => competency_exporter::read_properties_definition(),",
          "49:                 'multiple' => true",
          "50:             ),",
          "51:             'filecount' => array(",
          "52:                 'type' => PARAM_INT",
          "53:             ),",
          "54:             'files' => array(",
          "55:                 'type' => stored_file_exporter::read_properties_definition(),",
          "56:                 'multiple' => true",
          "57:             ),",
          "58:             'hasurlorfiles' => array(",
          "59:                 'type' => PARAM_BOOL",
          "60:             ),",
          "61:             'urlshort' => array(",
          "62:                 'type' => PARAM_TEXT",
          "63:             ),",
          "64:         );",
          "65:     }",
          "67:     protected static function define_related() {",
          "68:         return array(",
          "69:             'context' => 'context',",
          "70:             'competencies' => 'tool_lp\\\\competency[]'",
          "71:         );",
          "72:     }",
          "74:     protected function get_other_values(renderer_base $output) {",
          "76:         $competencies = array();",
          "77:         foreach ($this->related['competencies'] as $competency) {",
          "79:             $compexporter = new competency_exporter($competency);",
          "80:             $competencies[] = $compexporter->export($output);",
          "81:         }",
          "83:         $urlshort = '';",
          "84:         $url = $this->persistent->get_url();",
          "85:         if (!empty($url)) {",
          "86:             $murl = new moodle_url($url);",
          "87:             $shorturl = preg_replace('@^https?://(www\\.)?@', '', $murl->out(false));",
          "88:             $urlshort = shorten_text($shorturl, 30, true);",
          "89:         }",
          "91:         $files = array();",
          "92:         $storedfiles = $this->persistent->get_files();",
          "93:         if (!empty($storedfiles)) {",
          "94:             foreach ($storedfiles as $storedfile) {",
          "95:                 $fileexporter = new stored_file_exporter($storedfile, array('context' => $this->related['context']));",
          "96:                 $files[] = $fileexporter->export($output);",
          "97:             }",
          "98:         }",
          "100:         $values = array(",
          "101:             'canmanage' => $this->persistent->can_manage(),",
          "102:             'competencies' => $competencies,",
          "103:             'filecount' => count($files),",
          "104:             'files' => $files,",
          "105:             'hasurlorfiles' => !empty($files) || !empty($url),",
          "106:             'urlshort' => $urlshort",
          "107:         );",
          "109:         return $values;",
          "110:     }",
          "112: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php": [
          "File: admin/tool/lp/classes/form/user_evidence.php -> admin/tool/lp/classes/form/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace tool_lp\\form;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: use moodleform;",
          "29: require_once($CFG->libdir.'/formslib.php');",
          "38: class user_evidence extends moodleform {",
          "43:     public function definition() {",
          "44:         $mform = $this->_form;",
          "46:         $mform->addElement('header', 'generalhdr', get_string('general'));",
          "48:         $mform->addElement('text', 'name', get_string('userevidencename', 'tool_lp'), 'maxlength=\"100\"');",
          "49:         $mform->setType('name', PARAM_TEXT);",
          "50:         $mform->addRule('name', null, 'required', null, 'client');",
          "52:         $mform->addElement('editor', 'description', get_string('userevidencedescription', 'tool_lp'), array('rows' => 10));",
          "54:         $mform->setType('description', PARAM_TEXT);",
          "56:         $mform->addElement('url', 'url', get_string('userevidenceurl', 'tool_lp'), array(), array('usefilepicker' => false));",
          "57:         $mform->setType('url', PARAM_URL);",
          "59:         $mform->addElement('filemanager', 'files', get_string('userevidencefiles', 'tool_lp'), array(),",
          "60:             $this->_customdata['fileareaoptions']);",
          "62:         $this->add_action_buttons();",
          "63:     }",
          "70:     public function get_data() {",
          "71:         $data = parent::get_data();",
          "72:         if (is_object($data)) {",
          "73:             unset($data->submitbutton);",
          "74:         }",
          "75:         return $data;",
          "76:     }",
          "85:     public function validation($data, $files) {",
          "86:         $data = $this->get_submitted_data();        // To remove extra fields (sesskey, __qf_, ...).",
          "87:         unset($data->submitbutton);",
          "88:         unset($data->files);",
          "90:         $data->descriptionformat = $data->description['format'];",
          "91:         $data->description = $data->description['text'];",
          "92:         $data->userid = $this->_customdata['userid'];",
          "93:         $data->id = $this->_customdata['id'];",
          "95:         $template = new \\tool_lp\\user_evidence(0, $data);",
          "96:         $errors = $template->get_errors();",
          "98:         return $errors;",
          "99:     }",
          "101: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/plans_page.php||admin/tool/lp/classes/output/plans_page.php": [
          "File: admin/tool/lp/classes/output/plans_page.php -> admin/tool/lp/classes/output/plans_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: use tool_lp\\api;",
          "34: use tool_lp\\external\\plan_exporter;",
          "35: use tool_lp\\plan;",
          "36: use context_user;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: use tool_lp\\user_evidence;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         $data = new stdClass();",
          "86:         $data->userid = $this->userid;",
          "87:         $data->pluginbaseurl = (new moodle_url('/admin/tool/lp'))->out(true);",
          "90:         $data->plans = array();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:         $data->canreaduserevidence = user_evidence::can_read_user($this->userid);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/renderer.php||admin/tool/lp/classes/output/renderer.php": [
          "File: admin/tool/lp/classes/output/renderer.php -> admin/tool/lp/classes/output/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:         return $page->table->out(50, true);",
          "152:     }",
          "154: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:     public function render_user_evidence_page(user_evidence_page $page) {",
          "161:         $data = $page->export_for_template($this);",
          "162:         return parent::render_from_template('tool_lp/user_evidence_page', $data);",
          "163:     }",
          "171:     public function render_user_evidence_list_page(user_evidence_list_page $page) {",
          "172:         $data = $page->export_for_template($this);",
          "173:         return parent::render_from_template('tool_lp/user_evidence_list_page', $data);",
          "174:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/user_evidence_list_page.php||admin/tool/lp/classes/output/user_evidence_list_page.php": [
          "File: admin/tool/lp/classes/output/user_evidence_list_page.php -> admin/tool/lp/classes/output/user_evidence_list_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp\\output;",
          "26: use renderable;",
          "27: use templatable;",
          "28: use renderer_base;",
          "29: use stdClass;",
          "30: use single_button;",
          "31: use moodle_url;",
          "32: use tool_lp\\api;",
          "33: use tool_lp\\external\\user_evidence_exporter;",
          "34: use tool_lp\\user_evidence;",
          "35: use context_user;",
          "44: class user_evidence_list_page implements renderable, templatable {",
          "47:     protected $navigation = array();",
          "50:     protected $evidence = array();",
          "53:     protected $context = null;",
          "56:     protected $userid = null;",
          "59:     protected $canmanage;",
          "66:     public function __construct($userid) {",
          "67:         $this->userid = $userid;",
          "68:         $this->context = context_user::instance($userid);",
          "69:         $this->evidence = api::list_user_evidence($userid);",
          "70:         $this->canmanage = user_evidence::can_manage_user($this->userid);",
          "72:         if ($this->canmanage) {",
          "73:             $addevidence = new single_button(",
          "74:                new moodle_url('/admin/tool/lp/user_evidence_edit.php', array('userid' => $userid)),",
          "75:                get_string('addnewuserevidence', 'tool_lp'), 'get'",
          "76:             );",
          "77:             $this->navigation[] = $addevidence;",
          "78:         }",
          "79:     }",
          "87:     public function export_for_template(renderer_base $output) {",
          "88:         $data = new stdClass();",
          "89:         $data->userid = $this->userid;",
          "90:         $data->pluginbaseurl = (new moodle_url('/admin/tool/lp'))->out(true);",
          "91:         $data->canmanage = $this->canmanage;",
          "93:         $data->evidence = array();",
          "94:         if ($this->evidence) {",
          "95:             foreach ($this->evidence as $evidence) {",
          "96:                 $evidenceexporter = new user_evidence_exporter($evidence, array(",
          "97:                     'context' => $this->context,",
          "99:                     'competencies' => array()",
          "100:                 ));",
          "101:                 $record = $evidenceexporter->export($output);",
          "102:                 $data->evidence[] = $record;",
          "103:             }",
          "104:         }",
          "106:         $data->navigation = array();",
          "107:         foreach ($this->navigation as $button) {",
          "108:             $data->navigation[] = $output->render($button);",
          "109:         }",
          "111:         return $data;",
          "112:     }",
          "113: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/output/user_evidence_page.php||admin/tool/lp/classes/output/user_evidence_page.php": [
          "File: admin/tool/lp/classes/output/user_evidence_page.php -> admin/tool/lp/classes/output/user_evidence_page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace tool_lp\\output;",
          "26: use moodle_url;",
          "27: use renderable;",
          "28: use templatable;",
          "29: use stdClass;",
          "30: use tool_lp\\api;",
          "31: use tool_lp\\external\\competency_exporter;",
          "32: use tool_lp\\external\\user_evidence_exporter;",
          "41: class user_evidence_page implements renderable, templatable {",
          "44:     protected $context;",
          "47:     protected $userevidence;",
          "54:     public function __construct($userevidence) {",
          "55:         $this->userevidence = $userevidence;",
          "56:         $this->context = $this->userevidence->get_context();",
          "57:     }",
          "65:     public function export_for_template(\\renderer_base $output) {",
          "66:         $data = new stdClass();",
          "67:         $evidenceexporter = new user_evidence_exporter($this->userevidence, array(",
          "68:             'context' => $this->context,",
          "70:             'competencies' => array()",
          "71:         ));",
          "72:         $data->userevidence = $evidenceexporter->export($output);",
          "73:         $data->pluginbaseurl = (new moodle_url('/admin/tool/lp'))->out(true);",
          "74:         return $data;",
          "75:     }",
          "76: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/page_helper.php||admin/tool/lp/classes/page_helper.php": [
          "File: admin/tool/lp/classes/page_helper.php -> admin/tool/lp/classes/page_helper.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:         return array($title, $subtitle, $returnurl);",
          "177:     }",
          "178: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:     public static function setup_for_user_evidence($userid, moodle_url $url, $evidence = null, $subtitle = '', $returntype = null) {",
          "198:         global $PAGE, $USER;",
          "201:         $user = core_user::get_user($userid);",
          "202:         if (!$user || !core_user::is_real_user($userid)) {",
          "203:             throw new moodle_exception('invaliduser', 'error');",
          "204:         }",
          "206:         $context = context_user::instance($user->id);",
          "208:         $evidencelisturl = new moodle_url('/admin/tool/lp/user_evidence_list.php', array('userid' => $userid));",
          "209:         $evidenceurl = null;",
          "210:         if ($evidence) {",
          "211:             $evidenceurl = new moodle_url('/admin/tool/lp/user_evidence.php', array('id' => $evidence->get_id()));",
          "212:         }",
          "214:         $returnurl = $evidencelisturl;",
          "215:         if ($returntype == 'evidence' && $evidenceurl) {",
          "216:             $returnurl = $evidenceurl;",
          "217:         }",
          "219:         $PAGE->navigation->override_active_url($evidencelisturl);",
          "220:         $PAGE->set_context($context);",
          "223:         $iscurrentuser = ($USER->id == $user->id);",
          "224:         if (!$iscurrentuser) {",
          "225:             $PAGE->navigation->extend_for_user($user);",
          "226:             $PAGE->navigation->set_userid_for_parent_checks($user->id);",
          "227:         }",
          "229:         if (!empty($evidence)) {",
          "230:             $title = format_string($evidence->get_name(), true, array('context' => $context));",
          "231:         } else {",
          "232:             $title = get_string('userevidence', 'tool_lp');",
          "233:         }",
          "235:         $PAGE->set_pagelayout('standard');",
          "236:         $PAGE->set_url($url);",
          "237:         $PAGE->set_title($title);",
          "238:         $PAGE->set_heading($title);",
          "240:         if (!empty($evidence)) {",
          "241:             $PAGE->navbar->add($title, $evidenceurl);",
          "242:             if (!empty($subtitle)) {",
          "243:                 $PAGE->navbar->add($subtitle, $url);",
          "244:             }",
          "245:         } else if (!empty($subtitle)) {",
          "247:             $PAGE->navbar->add($subtitle, $url);",
          "248:         }",
          "250:         return array($title, $subtitle, $returnurl);",
          "251:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/user_evidence.php||admin/tool/lp/classes/user_evidence.php": [
          "File: admin/tool/lp/classes/user_evidence.php -> admin/tool/lp/classes/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace tool_lp;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: use context_user;",
          "29: use lang_string;",
          "38: class user_evidence extends persistent {",
          "40:     const TABLE = 'tool_lp_user_evidence';",
          "47:     protected static function define_properties() {",
          "48:         return array(",
          "49:             'userid' => array(",
          "50:                 'type' => PARAM_INT",
          "51:             ),",
          "52:             'name' => array(",
          "53:                 'type' => PARAM_TEXT",
          "54:             ),",
          "55:             'description' => array(",
          "56:                 'type' => PARAM_TEXT,       // TODO MDL-52454 Make PARAM_RAW.",
          "57:                 'default' => '',",
          "58:             ),",
          "59:             'descriptionformat' => array(",
          "60:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "61:                 'type' => PARAM_INT,",
          "62:                 'default' => FORMAT_HTML,",
          "63:             ),",
          "64:             'url' => array(",
          "65:                 'type' => PARAM_URL,",
          "66:                 'default' => '',",
          "67:                 'message' => new lang_string('invalidurl', 'tool_lp')",
          "68:             )",
          "69:         );",
          "70:     }",
          "77:     public function can_manage() {",
          "78:         return self::can_manage_user($this->get_userid());",
          "79:     }",
          "86:     public function can_read() {",
          "87:         return self::can_read_user($this->get_userid());",
          "88:     }",
          "95:     public function get_context() {",
          "96:         return context_user::instance($this->get_userid());",
          "97:     }",
          "104:     public function get_files() {",
          "105:         $fs = get_file_storage();",
          "106:         $files = $fs->get_area_files($this->get_context()->id, 'tool_lp', 'userevidence', $this->get_id(), 'filename', false);",
          "107:         return $files;",
          "108:     }",
          "116:     protected function validate_url($value) {",
          "117:         if (empty($value) && !is_numeric($value)) {",
          "118:             return true;",
          "119:         }",
          "120:         if (!preg_match('@^https?://.+@', $value)) {",
          "121:             return new lang_string('invalidurl', 'tool_lp');",
          "122:         }",
          "123:         return true;",
          "124:     }",
          "132:     protected function validate_userid($value) {",
          "133:         global $DB;",
          "136:         if (!$this->get_id()) {",
          "140:             if (!$DB->record_exists('user', array('id' => $value))) {",
          "141:                 return new lang_string('invaliddata', 'error');",
          "142:             }",
          "144:         }",
          "146:         return true;",
          "147:     }",
          "155:     public static function can_manage_user($evidenceuserid) {",
          "156:         global $USER;",
          "157:         $context = context_user::instance($evidenceuserid);",
          "159:         $capabilities = array('tool/lp:userevidencemanage');",
          "160:         if ($context->instanceid == $USER->id) {",
          "161:             $capabilities[] = 'tool/lp:userevidencemanageown';",
          "162:         }",
          "164:         return has_any_capability($capabilities, $context);",
          "165:     }",
          "173:     public static function can_read_user($evidenceuserid) {",
          "174:         $context = context_user::instance($evidenceuserid);",
          "176:         $capabilities = array('tool/lp:userevidenceread');",
          "178:         return has_any_capability($capabilities, $context) || self::can_manage_user($evidenceuserid);",
          "179:     }",
          "181: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/db/access.php||admin/tool/lp/db/access.php": [
          "File: admin/tool/lp/db/access.php -> admin/tool/lp/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:         ),",
          "133:         'clonepermissionsfrom' => 'moodle/block:view'",
          "134:     ),",
          "135: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     'tool/lp:userevidencemanage' => array(",
          "137:         'captype' => 'write',",
          "138:         'contextlevel' => CONTEXT_USER,",
          "139:         'archetypes' => array(",
          "140:         ),",
          "141:         'clonepermissionsfrom' => 'moodle/site:config'",
          "142:     ),",
          "143:     'tool/lp:userevidencemanageown' => array(",
          "144:         'captype' => 'write',",
          "145:         'contextlevel' => CONTEXT_USER,",
          "146:         'archetypes' => array(",
          "147:             'user' => CAP_ALLOW",
          "148:         ),",
          "149:         'clonepermissionsfrom' => 'moodle/block:view'",
          "150:     ),",
          "151:     'tool/lp:userevidenceread' => array(",
          "152:         'captype' => 'read',",
          "153:         'contextlevel' => CONTEXT_USER,",
          "154:         'archetypes' => array(",
          "155:         ),",
          "156:         'clonepermissionsfrom' => 'moodle/site:config'",
          "157:     ),",
          "",
          "---------------"
        ],
        "admin/tool/lp/db/services.php||admin/tool/lp/db/services.php": [
          "File: admin/tool/lp/db/services.php -> admin/tool/lp/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "597:         'capabilities' => 'moodle/cohort:view',",
          "598:         'ajax'         => true,",
          "599:     ),",
          "600: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602:     'tool_lp_read_user_evidence' => array(",
          "603:         'classname'    => 'tool_lp\\external',",
          "604:         'methodname'   => 'read_user_evidence',",
          "605:         'classpath'    => '',",
          "606:         'description'  => 'Read an evidence of prior learning.',",
          "607:         'type'         => 'read',",
          "608:         'capabilities' => 'tool/lp:userevidenceread',",
          "609:         'ajax'         => true,",
          "610:     ),",
          "611:     'tool_lp_delete_user_evidence' => array(",
          "612:         'classname'    => 'tool_lp\\external',",
          "613:         'methodname'   => 'delete_user_evidence',",
          "614:         'classpath'    => '',",
          "615:         'description'  => 'Delete an evidence of prior learning.',",
          "616:         'type'         => 'write',",
          "617:         'capabilities' => 'tool/lp:userevidencemanageown',",
          "618:         'ajax'         => true,",
          "619:     ),",
          "620:     'tool_lp_data_for_user_evidence_list_page' => array(",
          "621:         'classname'    => 'tool_lp\\external',",
          "622:         'methodname'   => 'data_for_user_evidence_list_page',",
          "623:         'classpath'    => '',",
          "624:         'description'  => 'Load the data for the user evidence list page template',",
          "625:         'type'         => 'read',",
          "626:         'capabilities' => 'tool/lp:userevidenceread',",
          "627:         'ajax'         => true,",
          "628:     ),",
          "",
          "---------------"
        ],
        "admin/tool/lp/db/upgrade.php||admin/tool/lp/db/upgrade.php": [
          "File: admin/tool/lp/db/upgrade.php -> admin/tool/lp/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:         upgrade_plugin_savepoint(true, 2015111024, 'tool', 'lp');",
          "577:     }",
          "579:     return true;",
          "580: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579:     if ($oldversion < 2015111027) {",
          "582:         $table = new xmldb_table('tool_lp_user_evidence');",
          "585:         $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);",
          "586:         $table->add_field('userid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "587:         $table->add_field('name', XMLDB_TYPE_CHAR, '100', null, XMLDB_NOTNULL, null, null);",
          "588:         $table->add_field('description', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null);",
          "589:         $table->add_field('descriptionformat', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, null);",
          "590:         $table->add_field('url', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null);",
          "591:         $table->add_field('timecreated', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "592:         $table->add_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "593:         $table->add_field('usermodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);",
          "596:         $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));",
          "599:         $table->add_index('userid', XMLDB_INDEX_NOTUNIQUE, array('userid'));",
          "602:         if (!$dbman->table_exists($table)) {",
          "603:             $dbman->create_table($table);",
          "604:         }",
          "607:         upgrade_plugin_savepoint(true, 2015111027, 'tool', 'lp');",
          "608:     }",
          "",
          "---------------"
        ],
        "admin/tool/lp/lang/en/tool_lp.php||admin/tool/lp/lang/en/tool_lp.php": [
          "File: admin/tool/lp/lang/en/tool_lp.php -> admin/tool/lp/lang/en/tool_lp.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: $string['addnewcompetencyframework'] = 'Add new competency framework';",
          "30: $string['addnewplan'] = 'Add new learning plan';",
          "31: $string['addnewtemplate'] = 'Add new learning plan template';",
          "32: $string['addrelatedcompetency'] = 'Add related competency';",
          "33: $string['allchildrenarecomplete'] = 'All children are complete';",
          "34: $string['aplanswerecreated'] = '{$a} plans were created';",
          "35: $string['assigncohorts'] = 'Assign cohorts';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: $string['addnewuserevidence'] = 'Add new evidence';",
          "34: $string['aisrequired'] = '\\'{$a}\\' is required';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: $string['deleteplan'] = 'Delete plan \\'{$a}\\'?';",
          "70: $string['deletetemplate'] = 'Delete learning plan template \\'{$a}\\'?';",
          "71: $string['deletethisplan'] = 'Delete this learning plan';",
          "72: $string['description'] = 'Description';",
          "73: $string['duedate'] = 'Due date';",
          "74: $string['duedate_help'] = 'The date that a learning plan should be completed by.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: $string['deletethisuserevidence'] = 'Delete this evidence';",
          "75: $string['deleteuserevidence'] = 'Delete the evidence of prior learning \\'{$a}\\'?';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78: $string['editplan'] = 'Edit learning plan';",
          "79: $string['edittemplate'] = 'Edit learning plan template';",
          "80: $string['editthisplan'] = 'Edit this learning plan';",
          "81: $string['evidence_coursecompleted'] = 'The course \\'{$a}\\' was completed.';",
          "82: $string['errorcannotsetduedateinthepast'] = 'The due date cannot be set in the past.';",
          "83: $string['errorcannotchangeapastduedate'] = 'The due date has passed, it cannot be changed.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: $string['editthisuserevidence'] = 'Edit this evidence';",
          "86: $string['edituserevidence'] = 'Edit evidence';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94: $string['invalidpersistent'] = 'Invalid persistent';",
          "95: $string['invalidplan'] = 'Invalid learning plan';",
          "96: $string['invalidtaxonomy'] = 'Invalid taxonomy: {$a}';",
          "97: $string['itemstoadd'] = 'Items to add';",
          "99: $string['learningplancompetencies'] = 'Learning plan competencies';",
          "100: $string['learningplans'] = 'Learning plans';",
          "101: $string['levela'] = 'Level {$a}';",
          "102: $string['linkcoursecompetencies'] = 'Link course competencies';",
          "103: $string['linkedcourses'] = 'Linked courses:';",
          "104: $string['linktemplatecompetencies'] = 'Link template competencies';",
          "105: $string['listcompetencyframeworkscaption'] = 'List of competency frameworks';",
          "106: $string['listplanscaption'] = 'List of learning plans';",
          "107: $string['listtemplatescaption'] = 'List of learning plan templates';",
          "108: $string['loading'] = 'Loading...';",
          "",
          "[Removed Lines]",
          "98: $string['aisrequired'] = '\\'{$a}\\' is required';",
          "",
          "[Added Lines]",
          "103: $string['invalidurl'] = 'The URL is not valid.';",
          "108: $string['linkcompetency'] = 'Link competency';",
          "110: $string['linkedcompetencies'] = 'Linked competencies';",
          "114: $string['listofevidence'] = 'List of evidence';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121: $string['lp:planviewowndraft'] = 'View own draft learning plans';",
          "122: $string['lp:templatemanage'] = 'Manage templates';",
          "123: $string['lp:templateread'] = 'View template';",
          "124: $string['managecompetenciesandframeworks'] = 'Manage competencies and frameworks';",
          "125: $string['move'] = 'Move';",
          "126: $string['movecompetency'] = 'Move competency';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: $string['lp:userevidencemanage'] = 'Manage evidence of prior learning';",
          "134: $string['lp:userevidencemanageown'] = 'Manage own evidence of prior learning';",
          "135: $string['lp:userevidenceread'] = 'View evidence of prior learning of a user';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "128: $string['movecompetencyframework'] = 'Move competency framework';",
          "129: $string['moveframeworkafter'] = 'Move competency framework after \\'{$a}\\'';",
          "130: $string['movetonewparent'] = 'Relocate';",
          "131: $string['nocompetencies'] = 'No competencies have been created in this framework.';",
          "132: $string['nocompetenciesincourse'] = 'No competencies have been linked to this course.';",
          "133: $string['nocompetenciesintemplate'] = 'No competencies have been linked to this template.';",
          "134: $string['nocompetencyframeworks'] = 'No competency frameworks have been created yet.';",
          "135: $string['nocompetencyselected'] = 'No competency selected';",
          "136: $string['nolinkedcourses'] = 'No courses are linked to this competency';",
          "137: $string['noplanswerecreated'] = 'No plans were created.';",
          "138: $string['norelatedcompetencies'] = 'No other competencies have been related to this competency.';",
          "139: $string['notemplates'] = 'No learning plan templates have been created yet.';",
          "140: $string['nouserplans'] = 'No learning plans have been created yet.';",
          "141: $string['oneplanwascreated'] = 'A plan was created';",
          "142: $string['outcome'] = 'Outcome';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: $string['myplans'] = 'My plans';",
          "144: $string['nfiles'] = '{$a} file(s)';",
          "150: $string['nofiles'] = 'No files';",
          "155: $string['nourl'] = 'No URL';",
          "156: $string['nouserevidence'] = 'No evidence of prior learning have been added yet.';",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "239: $string['usercompetencystatus_idle'] = 'Idle';",
          "240: $string['usercompetencystatus_inreview'] = 'In review';",
          "241: $string['usercompetencystatus_waitingforreview'] = 'Waiting for review';",
          "242: $string['userplans'] = 'User plans';",
          "243: $string['visible'] = 'Visible';",
          "244: $string['visible_help'] = 'A competency framework can be hidden from teachers. This could be useful if a framework is still in the process of being developed.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259: $string['userevidence'] = 'Evidence of prior learning';",
          "260: $string['userevidencecreated'] = 'Evidence of prior learning created';",
          "261: $string['userevidencedescription'] = 'Description';",
          "262: $string['userevidencefiles'] = 'Files';",
          "263: $string['userevidencename'] = 'Name';",
          "264: $string['userevidencesummary'] = 'Summary';",
          "265: $string['userevidenceupdated'] = 'Evidence of prior learning updated';",
          "266: $string['userevidenceurl'] = 'URL';",
          "",
          "---------------"
        ],
        "admin/tool/lp/lib.php||admin/tool/lp/lib.php": [
          "File: admin/tool/lp/lib.php -> admin/tool/lp/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: function tool_lp_extend_navigation_user($navigation, $user, $usercontext, $course, $coursecontext) {",
          "62: }",
          "",
          "[Removed Lines]",
          "60:     $navigation->add(get_string('learningplans', 'tool_lp'),",
          "61:             new moodle_url('/admin/tool/lp/plans.php', array('userid' => $user->id)));",
          "",
          "[Added Lines]",
          "60:     $node = $navigation->add(get_string('learningplans', 'tool_lp'),",
          "61:         new moodle_url('/admin/tool/lp/plans.php', array('userid' => $user->id)));",
          "63:     if (\\tool_lp\\user_evidence::can_read_user($user->id)) {",
          "64:         $node->add(get_string('userevidence', 'tool_lp'),",
          "65:             new moodle_url('/admin/tool/lp/user_evidence_list.php', array('userid' => $user->id)));",
          "66:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:             $navigation->add_node($settingsnode);",
          "128:         }",
          "129:     }",
          "",
          "[Removed Lines]",
          "130: }",
          "",
          "[Added Lines]",
          "150: function tool_lp_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload, array $options = array()) {",
          "151:     global $CFG;",
          "153:     $fs = get_file_storage();",
          "154:     $file = null;",
          "156:     $itemid = array_shift($args);",
          "157:     $filename = array_shift($args);",
          "158:     $filepath = $args ? '/' .implode('/', $args) . '/' : '/';",
          "160:     if ($filearea == 'userevidence' && $context->contextlevel == CONTEXT_USER) {",
          "161:         if (\\tool_lp\\user_evidence::can_read_user($context->instanceid)) {",
          "162:             $file = $fs->get_file($context->id, 'tool_lp', $filearea, $itemid, $filepath, $filename);",
          "163:         }",
          "164:     }",
          "166:     if (!$file) {",
          "167:         return false;",
          "168:     }",
          "170:     send_stored_file($file, null, 0, $forcedownload);",
          "171: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/styles.css||admin/tool/lp/styles.css": [
          "File: admin/tool/lp/styles.css -> admin/tool/lp/styles.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: .tool-lp-menu li {",
          "115:     float: left;",
          "117:     list-style-type: none;",
          "118: }",
          "120: .tool-lp-sub-menu {",
          "",
          "[Removed Lines]",
          "116:     display: inline; position: relative;",
          "",
          "[Added Lines]",
          "116:     display: inline;",
          "117:     position: relative;",
          "119:     white-space: nowrap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162: input[type=\"checkbox\"].tool_lp_scale_proficient {",
          "163:     margin-top: 0px;",
          "164: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: .user-evidence-documents {",
          "170:     margin: 10px 20px;",
          "171:     list-style: none;",
          "172: }",
          "173: .user-evidence-documents li {",
          "174:     margin-bottom: 5px;",
          "175:     word-break: break-all;",
          "176: }",
          "177: [data-region=\"user-evidence-list\"] .user-evidence-documents {",
          "178:     margin: 0;",
          "179: }",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/plans_page.mustache||admin/tool/lp/templates/plans_page.mustache": [
          "File: admin/tool/lp/templates/plans_page.mustache -> admin/tool/lp/templates/plans_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: {{{.}}}",
          "111: {{/navigation}}",
          "112: </div>",
          "114: {{#js}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113: {{#canreaduserevidence}}",
          "114: <div class=\"pull-left\">",
          "115:     <a href=\"{{pluginbaseurl}}/user_evidence_list.php?userid={{userid}}\">{{#str}}userevidence, tool_lp{{/str}}</a>",
          "116: </div>",
          "117: {{/canreaduserevidence}}",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/user_evidence_list_page.mustache||admin/tool/lp/templates/user_evidence_list_page.mustache": [
          "File: admin/tool/lp/templates/user_evidence_list_page.mustache -> admin/tool/lp/templates/user_evidence_list_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16: }}",
          "17: {{!",
          "18:     User evidence list page.",
          "20:     Data attributes required for JS:",
          "27:     Context variables required for this template:",
          "33: }}",
          "35: <div data-region=\"user-evidence-list\">",
          "37: <table class=\"generaltable fullwidth\">",
          "38:     <caption>{{#str}}listofevidence, tool_lp{{/str}}</caption>",
          "39:     <thead>",
          "40:         <tr>",
          "41:             <th scope=\"col\" width=\"20%\">{{#str}}userevidencename, tool_lp{{/str}}</th>",
          "42:             <th scope=\"col\">{{#str}}userevidencesummary, tool_lp{{/str}}</th>",
          "43:             <th scope=\"col\">{{#str}}linkedcompetencies, tool_lp{{/str}}</th>",
          "44:             {{#canmanage}}",
          "45:                 <th scope=\"col\">{{#str}}actions, tool_lp{{/str}}</th>",
          "46:             {{/canmanage}}",
          "47:         </tr>",
          "48:     </thead>",
          "49:     <tbody>",
          "50:         {{#evidence}}",
          "51:         <tr data-region='user-evidence-node' data-id=\"{{id}}\" data-userid=\"{{userid}}\">",
          "52:             <td><a href=\"{{pluginbaseurl}}/user_evidence.php?id={{id}}\">{{name}}</a></td>",
          "53:             <td>",
          "54:                 {{^hasurlorfiles}}",
          "55:                     -",
          "56:                 {{/hasurlorfiles}}",
          "57:                 {{#hasurlorfiles}}",
          "58:                     <ul class=\"user-evidence-documents\">",
          "59:                         {{#url}}",
          "60:                             <li>{{#pix}}url, tool_lp{{/pix}} <a href=\"{{url}}\" title=\"{{url}}\">{{urlshort}}</a></li>",
          "61:                         {{/url}}",
          "62:                         {{#files}}",
          "63:                             <li><img src=\"{{iconurl}}\" alt=\"\"> <a href=\"{{url}}\" title=\"{{filename}}\">{{filenameshort}}</a></li>",
          "64:                         {{/files}}",
          "65:                     </ul>",
          "66:                 {{/hasurlorfiles}}",
          "67:             </td>",
          "68:             <td>",
          "69:                 {{^competencies}}",
          "70:                 -",
          "71:                 {{/competencies}}",
          "72:                 {{#competencies}}",
          "73:                     {{! TODO MDL-51869 }}",
          "74:                 {{/competencies}}",
          "75:             </td>",
          "76:             {{#canmanage}}",
          "77:             <td>",
          "78:                 <div style=\"display: inline-block;\">",
          "79:                 <ul title=\"{{#str}}edit{{/str}}\" class=\"user-evidence-actions\">",
          "80:                 <li>",
          "81:                     <a href=\"#\">{{#str}}edit{{/str}}</a><b class=\"caret\"></b>",
          "82:                     <ul class=\"dropdown-menu\">",
          "83:                         <li>",
          "84:                             <a href=\"{{pluginbaseurl}}/user_evidence_edit.php?id={{id}}&amp;userid={{userid}}\">",
          "85:                                 {{#pix}}t/edit{{/pix}} {{#str}}editthisuserevidence, tool_lp{{/str}}",
          "86:                             </a>",
          "87:                         </li>",
          "88:                         <li>",
          "89:                             <a data-action=\"user-evidence-delete\" href=\"#\">",
          "90:                                 {{#pix}}t/delete{{/pix}} {{#str}}deletethisuserevidence, tool_lp{{/str}}",
          "91:                             </a>",
          "92:                         </li>",
          "93:                     </ul>",
          "94:                 </ul>",
          "95:             </div>",
          "96:             {{/canmanage}}",
          "97:             </td>",
          "98:         </tr>",
          "99:         {{/evidence}}",
          "100:     </tbody>",
          "101: </table>",
          "103: {{^evidence}}",
          "104:     <p class=\"alert-info\">{{#str}}nouserevidence, tool_lp{{/str}}</p>",
          "105: {{/evidence}}",
          "107: <div class=\"btn-group pull-right\">",
          "108:     {{#navigation}}",
          "109:         {{{.}}}",
          "110:     {{/navigation}}",
          "111: </div>",
          "113: </div>",
          "115: {{#js}}",
          "116: require(['tool_lp/user_evidence_actions'], function(UserEvidenceActions) {",
          "117:     var uea = new UserEvidenceActions('list');",
          "118:     uea.enhanceMenubar('.user-evidence-actions')",
          "119: });",
          "120: {{/js}}",
          "",
          "---------------"
        ],
        "admin/tool/lp/templates/user_evidence_page.mustache||admin/tool/lp/templates/user_evidence_page.mustache": [
          "File: admin/tool/lp/templates/user_evidence_page.mustache -> admin/tool/lp/templates/user_evidence_page.mustache",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: {{!",
          "2:     This file is part of Moodle - http://moodle.org/",
          "4:     Moodle is free software: you can redistribute it and/or modify",
          "5:     it under the terms of the GNU General Public License as published by",
          "6:     the Free Software Foundation, either version 3 of the License, or",
          "7:     (at your option) any later version.",
          "9:     Moodle is distributed in the hope that it will be useful,",
          "10:     but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "11:     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "12:     GNU General Public License for more details.",
          "14:     You should have received a copy of the GNU General Public License",
          "15:     along with Moodle.  If not, see <http://www.gnu.org/licenses/>.",
          "16: }}",
          "17: {{!",
          "18:     User evidence page template.",
          "20:     Data attributes required for JS:",
          "27:     Context variables required for this template:",
          "30: }}",
          "31: {{#userevidence}}",
          "32: <div data-region=\"user-evidence-page\" data-id=\"{{evidence.id}}\" data-userid=\"{{evidence.userid}}\">",
          "33:     <h2>",
          "34:         {{name}}",
          "35:         {{#canmanage}}",
          "36:             <a href=\"{{pluginbaseurl}}/user_evidence_edit.php?id={{id}}&amp;userid={{userid}}&amp;return=evidence\">{{#pix}}t/edit, core, {{#str}}editthisuserevidence, tool_lp{{/str}}{{/pix}}</a>",
          "37:         {{/canmanage}}",
          "38:     </h2>",
          "40:     <div data-region=\"user-evidence-summary\">",
          "41:         {{#description}}",
          "42:             <div>",
          "43:                 {{description}}",
          "44:             </div>",
          "45:         {{/description}}",
          "46:         <ul class=\"user-evidence-documents\">",
          "47:             {{#url}}",
          "48:                 <li>{{#pix}}url, tool_lp{{/pix}} <a href=\"{{url}}\" title=\"{{url}}\">{{urlshort}}</a></li>",
          "49:             {{/url}}",
          "50:             {{#files}}",
          "51:                 <li>{{#pix}}{{icon}}{{/pix}} <a href=\"{{url}}\">{{filename}}</a></li>",
          "52:             {{/files}}",
          "53:         </ul>",
          "54:     </div>",
          "56:     <div data-region=\"user-evidence-competencies\">",
          "57:         <h3>{{#str}}linkedcompetencies, tool_lp{{/str}}</h3>",
          "58:         <table class=\"generaltable fullwidth\">",
          "59:             <thead>",
          "60:                 <tr>",
          "61:                     <th scope=\"col\">{{#str}}shortname, tool_lp{{/str}}</th>",
          "62:                     {{#userevidence.canmanage}}",
          "63:                         <th scope=\"col\">{{#str}}actions, tool_lp{{/str}}</th>",
          "64:                     {{/userevidence.canmanage}}",
          "65:                 </tr>",
          "66:             </thead>",
          "67:             <tbody>",
          "68:                 {{#competencies}}",
          "69:                 <tr data-id=\"{{id}}\">",
          "70:                     <td>",
          "71:                         <a href=\"#\" data-action=\"competency-dialogue\" data-id=\"{{id}}\">{{shortname}}</a>",
          "72:                     </td>",
          "73:                     {{#canmanage}}",
          "74:                         <td>",
          "75:                             <div class=\"pull-left\">",
          "76:                                 <a href=\"#\" data-action=\"delete-competency-link\" data-id=\"{{id}}\">{{#pix}}t/delete, core{{#str}}delete{{/str}}{{/pix}}</a>",
          "77:                             </div>",
          "78:                         </td>",
          "79:                     {{/canmanage}}",
          "80:                 </tr>",
          "81:                 {{/competencies}}",
          "82:             </tbody>",
          "83:         </table>",
          "85:         <div data-region=\"actions\">",
          "86:             <div class=\"pull-right\">",
          "87:                 {{#canmanage}}",
          "88:                     <button class=\"btn\" data-action=\"add\">{{#pix}}t/add{{/pix}} {{#str}}linkcompetency, tool_lp{{/str}}</button>",
          "89:                 {{/canmanage}}",
          "90:             </div>",
          "91:         </div>",
          "92:     </div>",
          "93: </div>",
          "95: {{#canmanage}}",
          "96: {{#js}}",
          "97: require(['tool_lp/user_evidence_actions'], function(UserEvidenceActions) {",
          "99:     var uea = new UserEvidenceActions('evidence');",
          "100:     planActions.registerEvents();",
          "102: });",
          "103: {{/js}}",
          "104: {{/canmanage}}",
          "106: {{#js}}",
          "107: require(['tool_lp/competencydialogue'], function(Compdialogue) {",
          "108:     var competencydialogue = new Compdialogue({includerelated : true});",
          "109:     competencydialogue.watch('[data-region=\"user-evidence-competencies\"]');",
          "110: });",
          "111: {{/js}}",
          "113: {{/userevidence}}",
          "",
          "---------------"
        ],
        "admin/tool/lp/user_evidence.php||admin/tool/lp/user_evidence.php": [
          "File: admin/tool/lp/user_evidence.php -> admin/tool/lp/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "27: require_login(null, false);",
          "28: if (isguestuser()) {",
          "29:     throw new require_login_exception('Guests are not allowed here.');",
          "30: }",
          "32: $id = optional_param('id', null, PARAM_INT);",
          "34: $userevidence = \\tool_lp\\api::read_user_evidence($id);",
          "35: $url = new moodle_url('/admin/tool/lp/user_evidence_list.php', array('id' => $id));",
          "36: list($title, $subtitle) = \\tool_lp\\page_helper::setup_for_user_evidence($userevidence->get_userid(), $url, $userevidence);",
          "38: $output = $PAGE->get_renderer('tool_lp');",
          "39: echo $output->header();",
          "41: $page = new \\tool_lp\\output\\user_evidence_page($userevidence);",
          "42: echo $output->render($page);",
          "44: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/user_evidence_edit.php||admin/tool/lp/user_evidence_edit.php": [
          "File: admin/tool/lp/user_evidence_edit.php -> admin/tool/lp/user_evidence_edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "27: require_login(null, false);",
          "28: if (isguestuser()) {",
          "29:     throw new require_login_exception('Guests are not allowed here.');",
          "30: }",
          "32: $userid = optional_param('userid', $USER->id, PARAM_INT);",
          "33: $id = optional_param('id', null, PARAM_INT);",
          "34: $returntype = optional_param('return', 'list', PARAM_ALPHA);",
          "36: $url = new moodle_url('/admin/tool/lp/user_evidence_edit.php', array('id' => $id, 'userid' => $userid, 'return' => $returntype));",
          "38: $userevidence = null;",
          "39: if (empty($id)) {",
          "40:     $pagetitle = get_string('addnewuserevidence', 'tool_lp');",
          "41:     list($title, $subtitle, $returnurl) = \\tool_lp\\page_helper::setup_for_user_evidence($userid, $url, null,",
          "42:         $pagetitle, $returntype);",
          "44: } else {",
          "45:     $userevidence = \\tool_lp\\api::read_user_evidence($id);",
          "48:     if ($userid != $userevidence->get_userid()) {",
          "49:         throw new coding_exception('Inconsistency between the userid parameter and the userid of the plan.');",
          "50:     }",
          "52:     $pagetitle = get_string('edituserevidence', 'tool_lp');",
          "53:     list($title, $subtitle, $returnurl) = \\tool_lp\\page_helper::setup_for_user_evidence($userid, $url, $userevidence,",
          "54:         $pagetitle, $returntype);",
          "55: }",
          "58: $context = $PAGE->context;",
          "60: $fileareaoptions = array('subdirs' => false);",
          "61: $customdata = array(",
          "62:     'id' => $id,",
          "63:     'fileareaoptions' => $fileareaoptions,",
          "64:     'userevidence' => $userevidence,",
          "65:     'userid' => $userid,",
          "66: );",
          "69: if ($userevidence != null) {",
          "70:     if (!$userevidence->can_manage()) {",
          "71:         throw new required_capability_exception($context, 'tool/lp:userevidencemanage', 'nopermissions', '');",
          "72:     }",
          "73:     $customdata['evidence'] = $userevidence;",
          "75: } else if (!\\tool_lp\\user_evidence::can_manage_user($userid)) {",
          "76:     throw new required_capability_exception($context, 'tool/lp:userevidencemanage', 'nopermissions', '');",
          "77: }",
          "79: $form = new \\tool_lp\\form\\user_evidence($url->out(false), $customdata);",
          "80: if ($form->is_cancelled()) {",
          "81:     redirect($returnurl);",
          "82: }",
          "85: $itemid = null;",
          "86: if ($userevidence) {",
          "87:     $itemid = $userevidence->get_id();",
          "88:     $data = $userevidence->to_record();",
          "89:     $data->description = (object) array(",
          "90:         'format' => $data->descriptionformat,",
          "91:         'text' => $data->description",
          "92:     );",
          "93:     $form->set_data($data);",
          "94: }",
          "97: $draftitemid = file_get_submitted_draft_itemid('files');",
          "98: file_prepare_draft_area($draftitemid, $context->id, 'tool_lp', 'userevidence', $itemid, $fileareaoptions);",
          "99: $form->set_data((object) array('files' => $draftitemid));",
          "102: $output = $PAGE->get_renderer('tool_lp');",
          "103: echo $output->header();",
          "104: echo $output->heading($title);",
          "105: if (!empty($subtitle)) {",
          "106:     echo $output->heading($subtitle, 3);",
          "107: }",
          "110: if ($data = $form->get_data()) {",
          "111:     require_sesskey();",
          "112:     $data->descriptionformat = $data->description['format'];",
          "113:     $data->description = $data->description['text'];",
          "114:     $data->userid = $userid;",
          "116:     $draftitemid = $data->files;",
          "117:     unset($data->files);",
          "119:     if (empty($userevidence)) {",
          "120:         $userevidence = \\tool_lp\\api::create_user_evidence($data, $draftitemid);",
          "121:         echo $output->notification(get_string('userevidencecreated', 'tool_lp'), 'notifysuccess');",
          "122:         echo $output->continue_button($returnurl);",
          "123:     } else {",
          "124:         $data->id = $userevidence->get_id();",
          "125:         \\tool_lp\\api::update_user_evidence($data, $draftitemid);",
          "126:         echo $output->notification(get_string('userevidenceupdated', 'tool_lp'), 'notifysuccess');",
          "127:         echo $output->continue_button($returnurl);",
          "128:     }",
          "130: } else {",
          "131:     $form->display();",
          "132: }",
          "134: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/user_evidence_list.php||admin/tool/lp/user_evidence_list.php": [
          "File: admin/tool/lp/user_evidence_list.php -> admin/tool/lp/user_evidence_list.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../../../config.php');",
          "27: require_login(null, false);",
          "28: if (isguestuser()) {",
          "29:     throw new require_login_exception('Guests are not allowed here.');",
          "30: }",
          "32: $userid = optional_param('userid', $USER->id, PARAM_INT);",
          "34: $url = new moodle_url('/admin/tool/lp/user_evidence_list.php', array('userid' => $userid));",
          "35: list($title, $subtitle) = \\tool_lp\\page_helper::setup_for_user_evidence($userid, $url);",
          "37: $output = $PAGE->get_renderer('tool_lp');",
          "38: echo $output->header();",
          "39: echo $output->heading($title);",
          "41: $page = new \\tool_lp\\output\\user_evidence_list_page($userid);",
          "42: echo $output->render($page);",
          "44: echo $output->footer();",
          "",
          "---------------"
        ],
        "admin/tool/lp/version.php||admin/tool/lp/version.php": [
          "File: admin/tool/lp/version.php -> admin/tool/lp/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "29: $plugin->requires  = 2014110400; // Requires this Moodle version.",
          "30: $plugin->component = 'tool_lp'; // Full name of the plugin (used for diagnostics).",
          "",
          "[Removed Lines]",
          "28: $plugin->version   = 2015111025; // The current plugin version (Date: YYYYMMDDXX).",
          "",
          "[Added Lines]",
          "28: $plugin->version   = 2015111028; // The current plugin version (Date: YYYYMMDDXX).",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cc4e2f72515f70928595f4ce8e17e5cb2c48a60",
      "candidate_info": {
        "commit_hash": "3cc4e2f72515f70928595f4ce8e17e5cb2c48a60",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/3cc4e2f72515f70928595f4ce8e17e5cb2c48a60",
        "files": [
          "admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/persistent.php",
          "admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php",
          "competency/classes/competency.php",
          "competency/classes/competency_framework.php",
          "competency/classes/external/exporter.php",
          "competency/classes/persistent.php",
          "competency/classes/plan.php",
          "competency/classes/template.php",
          "competency/classes/user_evidence.php"
        ],
        "message": "MDL-57596 forms: CLEANHTML in persistent forms\n\nAdd special handling for text fields with the CLEANHTML type. This should\nbe used when students and teachers can edit the same field (you can't trust those students).\n\nApplies cleaning on submitted data, and on data stored in the DB before it is put back in an editing form.",
        "before_after_code_files": [
          "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/persistent.php||admin/tool/lp/classes/form/persistent.php",
          "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
          "competency/classes/competency.php||competency/classes/competency.php",
          "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
          "competency/classes/external/exporter.php||competency/classes/external/exporter.php",
          "competency/classes/persistent.php||competency/classes/persistent.php",
          "competency/classes/plan.php||competency/classes/plan.php",
          "competency/classes/template.php||competency/classes/template.php",
          "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
            "competency/classes/competency.php||competency/classes/competency.php",
            "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
            "competency/classes/plan.php||competency/classes/plan.php",
            "competency/classes/template.php||competency/classes/template.php",
            "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
          ],
          "candidate": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
            "competency/classes/competency.php||competency/classes/competency.php",
            "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
            "competency/classes/plan.php||competency/classes/plan.php",
            "competency/classes/template.php||competency/classes/template.php",
            "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php": [
          "File: admin/tool/lp/classes/form/competency.php -> admin/tool/lp/classes/form/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         $mform->addElement('editor', 'description',",
          "101:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "104:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
          "105:         $mform->setType('idnumber', PARAM_RAW);",
          "",
          "[Removed Lines]",
          "102:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "102:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php": [
          "File: admin/tool/lp/classes/form/competency_framework.php -> admin/tool/lp/classes/form/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         $mform->addElement('editor', 'description',",
          "64:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "67:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
          "68:         $mform->setType('idnumber', PARAM_RAW);",
          "",
          "[Removed Lines]",
          "65:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "65:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/persistent.php||admin/tool/lp/classes/form/persistent.php": [
          "File: admin/tool/lp/classes/form/persistent.php -> admin/tool/lp/classes/form/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:         $data = $this->get_persistent()->to_record();",
          "185:         $class = static::$persistentclass;",
          "186:         $properties = $class::get_formatted_properties();",
          "188:         foreach ($data as $field => $value) {",
          "190:             if (isset($properties[$field])) {",
          "191:                 $data->$field = array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         $allproperties = $class::properties_definition();",
          "191:             if (isset($allproperties[$field]['type'])) {",
          "192:                 $data->$field = clean_param($data->$field, $allproperties[$field]['type']);",
          "193:             }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php": [
          "File: admin/tool/lp/classes/form/plan.php -> admin/tool/lp/classes/form/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
          "61:         $mform->addElement('editor', 'description', get_string('plandescription', 'tool_lp'), array('rows' => 4));",
          "64:         $mform->addElement('date_time_selector', 'duedate', get_string('duedate', 'tool_lp'), array('optional' => true));",
          "65:         $mform->addHelpButton('duedate', 'duedate', 'tool_lp');",
          "",
          "[Removed Lines]",
          "62:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "62:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php": [
          "File: admin/tool/lp/classes/form/template.php -> admin/tool/lp/classes/form/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         $mform->addElement('editor', 'description',",
          "60:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "62:         $mform->addElement('selectyesno', 'visible',",
          "63:                            get_string('visible', 'tool_lp'));",
          "64:         $mform->addElement('date_time_selector',",
          "",
          "[Removed Lines]",
          "61:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "61:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php": [
          "File: admin/tool/lp/classes/form/user_evidence.php -> admin/tool/lp/classes/form/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
          "56:         $mform->addElement('editor', 'description', get_string('userevidencedescription', 'tool_lp'), array('rows' => 10));",
          "59:         $mform->addElement('url', 'url', get_string('userevidenceurl', 'tool_lp'), array('size' => '60'), array('usefilepicker' => false));",
          "60:         $mform->setType('url', PARAM_RAW_TRIMMED);      // Can not use PARAM_URL, it silently converts bad URLs to ''.",
          "",
          "[Removed Lines]",
          "57:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "57:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "competency/classes/competency.php||competency/classes/competency.php": [
          "File: competency/classes/competency.php -> competency/classes/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:             ),",
          "69:             'description' => array(",
          "70:                 'default' => '',",
          "72:             ),",
          "73:             'descriptionformat' => array(",
          "74:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "71:                 'type' => PARAM_RAW",
          "",
          "[Added Lines]",
          "71:                 'type' => PARAM_CLEANHTML",
          "",
          "---------------"
        ],
        "competency/classes/competency_framework.php||competency/classes/competency_framework.php": [
          "File: competency/classes/competency_framework.php -> competency/classes/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:                 'type' => PARAM_RAW",
          "91:             ),",
          "92:             'description' => array(",
          "94:                 'default' => ''",
          "95:             ),",
          "96:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "93:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "93:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/external/exporter.php||competency/classes/external/exporter.php": [
          "File: competency/classes/external/exporter.php -> competency/classes/external/exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:     final protected static function get_format_field($definitions, $property) {",
          "336:         $formatproperty = $property . 'format';",
          "338:                 && $definitions[$formatproperty]['type'] == PARAM_INT) {",
          "339:             return $formatproperty;",
          "340:         }",
          "",
          "[Removed Lines]",
          "337:         if ($definitions[$property]['type'] == PARAM_RAW && isset($definitions[$formatproperty])",
          "",
          "[Added Lines]",
          "337:         if (($definitions[$property]['type'] == PARAM_RAW || $definitions[$property]['type'] == PARAM_CLEANHTML)",
          "338:                 && isset($definitions[$formatproperty])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:                 $thisvalue = self::get_read_structure_from_properties($type, $proprequired, $propdefault);",
          "453:             } else {",
          "456:                     $type = PARAM_RAW;",
          "457:                 }",
          "",
          "[Removed Lines]",
          "454:                 if ($definition['type'] == PARAM_TEXT) {",
          "",
          "[Added Lines]",
          "455:                 if ($definition['type'] == PARAM_TEXT || $definition['type'] == PARAM_CLEANHTML) {",
          "",
          "---------------"
        ],
        "competency/classes/persistent.php||competency/classes/persistent.php": [
          "File: competency/classes/persistent.php -> competency/classes/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:         $formatted = array();",
          "249:         foreach ($properties as $property => $definition) {",
          "250:             $propertyformat = $property . 'format';",
          "252:                     && $properties[$propertyformat]['type'] == PARAM_INT) {",
          "253:                 $formatted[$property] = $propertyformat;",
          "254:             }",
          "",
          "[Removed Lines]",
          "251:             if ($definition['type'] == PARAM_RAW && array_key_exists($propertyformat, $properties)",
          "",
          "[Added Lines]",
          "251:             if (($definition['type'] == PARAM_RAW || $definition['type'] == PARAM_CLEANHTML)",
          "252:                     && array_key_exists($propertyformat, $properties)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "617:                         $value = 0;",
          "618:                     }",
          "619:                     validate_param($value, $definition['type'], $definition['null']);",
          "620:                 } catch (invalid_parameter_exception $e) {",
          "621:                     $errors[$property] = static::get_property_error_message($property);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:                     if ($definition['type'] === PARAM_CLEANHTML) {",
          "622:                         $value = clean_param($value, PARAM_CLEANHTML);",
          "623:                     }",
          "",
          "---------------"
        ],
        "competency/classes/plan.php||competency/classes/plan.php": [
          "File: competency/classes/plan.php -> competency/classes/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                 'type' => PARAM_TEXT,",
          "72:             ),",
          "73:             'description' => array(",
          "75:                 'default' => ''",
          "76:             ),",
          "77:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "74:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "74:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/template.php||competency/classes/template.php": [
          "File: competency/classes/template.php -> competency/classes/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:             ),",
          "54:             'description' => array(",
          "55:                 'default' => '',",
          "57:             ),",
          "58:             'descriptionformat' => array(",
          "59:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/user_evidence.php||competency/classes/user_evidence.php": [
          "File: competency/classes/user_evidence.php -> competency/classes/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:                 'type' => PARAM_TEXT",
          "54:             ),",
          "55:             'description' => array(",
          "57:                 'default' => '',",
          "58:             ),",
          "59:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a76cd2ca1c5216d67c9bf7c844020c3b59b1fd7",
      "candidate_info": {
        "commit_hash": "0a76cd2ca1c5216d67c9bf7c844020c3b59b1fd7",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0a76cd2ca1c5216d67c9bf7c844020c3b59b1fd7",
        "files": [
          "admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/persistent.php",
          "admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php",
          "competency/classes/competency.php",
          "competency/classes/competency_framework.php",
          "competency/classes/external/exporter.php",
          "competency/classes/persistent.php",
          "competency/classes/plan.php",
          "competency/classes/template.php",
          "competency/classes/user_evidence.php"
        ],
        "message": "MDL-57596 forms: CLEANHTML in persistent forms\n\nAdd special handling for text fields with the CLEANHTML type. This should\nbe used when students and teachers can edit the same field (you can't trust those students).\n\nApplies cleaning on submitted data, and on data stored in the DB before it is put back in an editing form.",
        "before_after_code_files": [
          "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
          "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
          "admin/tool/lp/classes/form/persistent.php||admin/tool/lp/classes/form/persistent.php",
          "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
          "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
          "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
          "competency/classes/competency.php||competency/classes/competency.php",
          "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
          "competency/classes/external/exporter.php||competency/classes/external/exporter.php",
          "competency/classes/persistent.php||competency/classes/persistent.php",
          "competency/classes/plan.php||competency/classes/plan.php",
          "competency/classes/template.php||competency/classes/template.php",
          "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
            "competency/classes/competency.php||competency/classes/competency.php",
            "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
            "competency/classes/plan.php||competency/classes/plan.php",
            "competency/classes/template.php||competency/classes/template.php",
            "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
          ],
          "candidate": [
            "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php",
            "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php",
            "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php",
            "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php",
            "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php",
            "competency/classes/competency.php||competency/classes/competency.php",
            "competency/classes/competency_framework.php||competency/classes/competency_framework.php",
            "competency/classes/plan.php||competency/classes/plan.php",
            "competency/classes/template.php||competency/classes/template.php",
            "competency/classes/user_evidence.php||competency/classes/user_evidence.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/tool/lp/classes/form/competency.php||admin/tool/lp/classes/form/competency.php": [
          "File: admin/tool/lp/classes/form/competency.php -> admin/tool/lp/classes/form/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         $mform->addElement('editor', 'description',",
          "101:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "104:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
          "105:         $mform->setType('idnumber', PARAM_RAW);",
          "",
          "[Removed Lines]",
          "102:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "102:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/competency_framework.php||admin/tool/lp/classes/form/competency_framework.php": [
          "File: admin/tool/lp/classes/form/competency_framework.php -> admin/tool/lp/classes/form/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         $mform->addElement('editor', 'description',",
          "64:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "67:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'tool_lp'), 'maxlength=\"100\"');",
          "68:         $mform->setType('idnumber', PARAM_RAW);",
          "",
          "[Removed Lines]",
          "65:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "65:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/persistent.php||admin/tool/lp/classes/form/persistent.php": [
          "File: admin/tool/lp/classes/form/persistent.php -> admin/tool/lp/classes/form/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:         $data = $this->get_persistent()->to_record();",
          "185:         $class = static::$persistentclass;",
          "186:         $properties = $class::get_formatted_properties();",
          "188:         foreach ($data as $field => $value) {",
          "190:             if (isset($properties[$field])) {",
          "191:                 $data->$field = array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         $allproperties = $class::properties_definition();",
          "191:             if (isset($allproperties[$field]['type'])) {",
          "192:                 $data->$field = clean_param($data->$field, $allproperties[$field]['type']);",
          "193:             }",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/plan.php||admin/tool/lp/classes/form/plan.php": [
          "File: admin/tool/lp/classes/form/plan.php -> admin/tool/lp/classes/form/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
          "61:         $mform->addElement('editor', 'description', get_string('plandescription', 'tool_lp'), array('rows' => 4));",
          "64:         $mform->addElement('date_time_selector', 'duedate', get_string('duedate', 'tool_lp'), array('optional' => true));",
          "65:         $mform->addHelpButton('duedate', 'duedate', 'tool_lp');",
          "",
          "[Removed Lines]",
          "62:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "62:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/template.php||admin/tool/lp/classes/form/template.php": [
          "File: admin/tool/lp/classes/form/template.php -> admin/tool/lp/classes/form/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         $mform->addElement('editor', 'description',",
          "60:                            get_string('description', 'tool_lp'), array('rows' => 4));",
          "62:         $mform->addElement('selectyesno', 'visible',",
          "63:                            get_string('visible', 'tool_lp'));",
          "64:         $mform->addElement('date_time_selector',",
          "",
          "[Removed Lines]",
          "61:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "61:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "admin/tool/lp/classes/form/user_evidence.php||admin/tool/lp/classes/form/user_evidence.php": [
          "File: admin/tool/lp/classes/form/user_evidence.php -> admin/tool/lp/classes/form/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         $mform->addRule('name', get_string('maximumchars', '', 100), 'maxlength', 100, 'client');",
          "56:         $mform->addElement('editor', 'description', get_string('userevidencedescription', 'tool_lp'), array('rows' => 10));",
          "59:         $mform->addElement('url', 'url', get_string('userevidenceurl', 'tool_lp'), array(), array('usefilepicker' => false));",
          "60:         $mform->setType('url', PARAM_RAW_TRIMMED);      // Can not use PARAM_URL, it silently converts bad URLs to ''.",
          "",
          "[Removed Lines]",
          "57:         $mform->setType('description', PARAM_RAW);",
          "",
          "[Added Lines]",
          "57:         $mform->setType('description', PARAM_CLEANHTML);",
          "",
          "---------------"
        ],
        "competency/classes/competency.php||competency/classes/competency.php": [
          "File: competency/classes/competency.php -> competency/classes/competency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:             ),",
          "69:             'description' => array(",
          "70:                 'default' => '',",
          "72:             ),",
          "73:             'descriptionformat' => array(",
          "74:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "71:                 'type' => PARAM_RAW",
          "",
          "[Added Lines]",
          "71:                 'type' => PARAM_CLEANHTML",
          "",
          "---------------"
        ],
        "competency/classes/competency_framework.php||competency/classes/competency_framework.php": [
          "File: competency/classes/competency_framework.php -> competency/classes/competency_framework.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:                 'type' => PARAM_RAW",
          "91:             ),",
          "92:             'description' => array(",
          "94:                 'default' => ''",
          "95:             ),",
          "96:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "93:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "93:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/external/exporter.php||competency/classes/external/exporter.php": [
          "File: competency/classes/external/exporter.php -> competency/classes/external/exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "335:     final protected static function get_format_field($definitions, $property) {",
          "336:         $formatproperty = $property . 'format';",
          "338:                 && $definitions[$formatproperty]['type'] == PARAM_INT) {",
          "339:             return $formatproperty;",
          "340:         }",
          "",
          "[Removed Lines]",
          "337:         if ($definitions[$property]['type'] == PARAM_RAW && isset($definitions[$formatproperty])",
          "",
          "[Added Lines]",
          "337:         if (($definitions[$property]['type'] == PARAM_RAW || $definitions[$property]['type'] == PARAM_CLEANHTML)",
          "338:                 && isset($definitions[$formatproperty])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:                 $thisvalue = self::get_read_structure_from_properties($type, $proprequired, $propdefault);",
          "453:             } else {",
          "456:                     $type = PARAM_RAW;",
          "457:                 }",
          "",
          "[Removed Lines]",
          "454:                 if ($definition['type'] == PARAM_TEXT) {",
          "",
          "[Added Lines]",
          "455:                 if ($definition['type'] == PARAM_TEXT || $definition['type'] == PARAM_CLEANHTML) {",
          "",
          "---------------"
        ],
        "competency/classes/persistent.php||competency/classes/persistent.php": [
          "File: competency/classes/persistent.php -> competency/classes/persistent.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:         $formatted = array();",
          "249:         foreach ($properties as $property => $definition) {",
          "250:             $propertyformat = $property . 'format';",
          "252:                     && $properties[$propertyformat]['type'] == PARAM_INT) {",
          "253:                 $formatted[$property] = $propertyformat;",
          "254:             }",
          "",
          "[Removed Lines]",
          "251:             if ($definition['type'] == PARAM_RAW && array_key_exists($propertyformat, $properties)",
          "",
          "[Added Lines]",
          "251:             if (($definition['type'] == PARAM_RAW || $definition['type'] == PARAM_CLEANHTML)",
          "252:                     && array_key_exists($propertyformat, $properties)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "617:                         $value = 0;",
          "618:                     }",
          "619:                     validate_param($value, $definition['type'], $definition['null']);",
          "620:                 } catch (invalid_parameter_exception $e) {",
          "621:                     $errors[$property] = static::get_property_error_message($property);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:                     if ($definition['type'] === PARAM_CLEANHTML) {",
          "622:                         $value = clean_param($value, PARAM_CLEANHTML);",
          "623:                     }",
          "",
          "---------------"
        ],
        "competency/classes/plan.php||competency/classes/plan.php": [
          "File: competency/classes/plan.php -> competency/classes/plan.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:                 'type' => PARAM_TEXT,",
          "72:             ),",
          "73:             'description' => array(",
          "75:                 'default' => ''",
          "76:             ),",
          "77:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "74:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "74:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/template.php||competency/classes/template.php": [
          "File: competency/classes/template.php -> competency/classes/template.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:             ),",
          "54:             'description' => array(",
          "55:                 'default' => '',",
          "57:             ),",
          "58:             'descriptionformat' => array(",
          "59:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ],
        "competency/classes/user_evidence.php||competency/classes/user_evidence.php": [
          "File: competency/classes/user_evidence.php -> competency/classes/user_evidence.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:                 'type' => PARAM_TEXT",
          "54:             ),",
          "55:             'description' => array(",
          "57:                 'default' => '',",
          "58:             ),",
          "59:             'descriptionformat' => array(",
          "",
          "[Removed Lines]",
          "56:                 'type' => PARAM_RAW,",
          "",
          "[Added Lines]",
          "56:                 'type' => PARAM_CLEANHTML,",
          "",
          "---------------"
        ]
      }
    }
  ]
}