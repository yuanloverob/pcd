{
  "cve_id": "CVE-2022-1996",
  "cve_desc": "Authorization Bypass Through User-Controlled Key in GitHub repository emicklei/go-restful prior to v3.8.0.",
  "repo": "emicklei/go-restful",
  "patch_hash": "fd3c327a379ce08c68ef18765bdc925f5d9bad10",
  "patch_info": {
    "commit_hash": "fd3c327a379ce08c68ef18765bdc925f5d9bad10",
    "repo": "emicklei/go-restful",
    "commit_url": "https://github.com/emicklei/go-restful/commit/fd3c327a379ce08c68ef18765bdc925f5d9bad10",
    "files": [
      "cors_filter.go",
      "cors_filter_test.go"
    ],
    "message": "use exact matching of allowed domain entries, issue #489 (#493)\n\n* use exact matching of allowed domain entries, issue #489\n\n* update doc, add testcases from PR conversation\n\n* introduce AllowedDomainFunc #489\n\n* more tests, fix doc\n\n* lowercase origin before checking cors",
    "before_after_code_files": [
      "cors_filter.go||cors_filter.go",
      "cors_filter_test.go||cors_filter_test.go"
    ]
  },
  "patch_diff": {
    "cors_filter.go||cors_filter.go": [
      "File: cors_filter.go -> cors_filter.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: type CrossOriginResourceSharing struct {",
      "24:  AllowedMethods []string",
      "25:  MaxAge         int // number of seconds before requiring new Options request",
      "26:  CookiesAllowed bool",
      "",
      "[Removed Lines]",
      "21:  ExposeHeaders  []string // list of Header names",
      "22:  AllowedHeaders []string // list of Header names",
      "23:  AllowedDomains []string // list of allowed values for Http Origin. An allowed value can be a regular expression to support subdomain matching. If empty all are allowed.",
      "",
      "[Added Lines]",
      "21:  ExposeHeaders []string // list of Header names",
      "25:  AllowedHeaders []string",
      "30:  AllowedDomains []string",
      "34:  AllowedDomainFunc func(origin string) bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "119:  if len(origin) == 0 {",
      "120:   return false",
      "121:  }",
      "122:  if len(c.AllowedDomains) == 0 {",
      "123:   return true",
      "124:  }",
      "127:  for _, domain := range c.AllowedDomains {",
      "131:   }",
      "132:  }",
      "149:  }",
      "152: }",
      "154: func (c CrossOriginResourceSharing) setAllowOriginHeader(req *Request, resp *Response) {",
      "",
      "[Removed Lines]",
      "126:  allowed := false",
      "128:   if domain == origin {",
      "129:    allowed = true",
      "130:    break",
      "134:  if !allowed {",
      "135:   if len(c.allowedOriginPatterns) == 0 {",
      "137:    allowedOriginRegexps, err := compileRegexps(c.AllowedDomains)",
      "138:    if err != nil {",
      "139:     return false",
      "140:    }",
      "141:    c.allowedOriginPatterns = allowedOriginRegexps",
      "142:   }",
      "144:   for _, pattern := range c.allowedOriginPatterns {",
      "145:    if allowed = pattern.MatchString(origin); allowed {",
      "146:     break",
      "147:    }",
      "148:   }",
      "151:  return allowed",
      "",
      "[Added Lines]",
      "135:  lowerOrigin := strings.ToLower(origin)",
      "137:   if c.AllowedDomainFunc != nil {",
      "138:    return c.AllowedDomainFunc(lowerOrigin)",
      "139:   }",
      "145:   if domain == \".*\" || strings.ToLower(domain) == lowerOrigin {",
      "146:    return true",
      "149:  if c.AllowedDomainFunc != nil {",
      "150:   return c.AllowedDomainFunc(origin)",
      "152:  return false",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "190:  }",
      "191:  return false",
      "192: }",
      "",
      "[Removed Lines]",
      "195: func compileRegexps(regexpStrings []string) ([]*regexp.Regexp, error) {",
      "196:  regexps := []*regexp.Regexp{}",
      "197:  for _, regexpStr := range regexpStrings {",
      "198:   r, err := regexp.Compile(regexpStr)",
      "199:   if err != nil {",
      "200:    return regexps, err",
      "201:   }",
      "202:   regexps = append(regexps, r)",
      "203:  }",
      "204:  return regexps, nil",
      "205: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "cors_filter_test.go||cors_filter_test.go": [
      "File: cors_filter_test.go -> cors_filter_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "120:   DefaultContainer.Dispatch(httpWriter, httpRequest)",
      "121:   actual := httpWriter.Header().Get(HEADER_AccessControlAllowOrigin)",
      "122:   if actual != each.origin && each.allowed {",
      "124:   }",
      "125:   if actual == each.origin && !each.allowed {",
      "127:   }",
      "128:  }",
      "129: }",
      "",
      "[Removed Lines]",
      "123:    t.Fatal(\"expected to be accepted\")",
      "126:    t.Fatal(\"did not expect to be accepted\")",
      "",
      "[Added Lines]",
      "123:    t.Error(\"expected to be accepted\", each)",
      "126:    t.Error(\"did not expect to be accepted\")",
      "131: func TestCORSFilter_AllowedDomainFunc(t *testing.T) {",
      "132:  cors := CrossOriginResourceSharing{",
      "133:   AllowedDomains: []string{\"here\", \"there\"},",
      "134:   AllowedDomainFunc: func(origin string) bool {",
      "135:    return \"where\" == origin",
      "136:   },",
      "137:  }",
      "138:  if got, want := cors.isOriginAllowed(\"here\"), true; got != want {",
      "139:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
      "140:  }",
      "141:  if got, want := cors.isOriginAllowed(\"HERE\"), true; got != want {",
      "142:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
      "143:  }",
      "144:  if got, want := cors.isOriginAllowed(\"there\"), true; got != want {",
      "145:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
      "146:  }",
      "147:  if got, want := cors.isOriginAllowed(\"where\"), true; got != want {",
      "148:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
      "149:  }",
      "150:  if got, want := cors.isOriginAllowed(\"nowhere\"), false; got != want {",
      "151:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
      "152:  }",
      "154:  cors.AllowedDomains = []string{}",
      "155:  if got, want := cors.isOriginAllowed(\"here\"), false; got != want {",
      "156:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
      "157:  }",
      "158:  if got, want := cors.isOriginAllowed(\"where\"), true; got != want {",
      "159:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
      "160:  }",
      "162:  if got, want := cors.isOriginAllowed(\"\"), false; got != want {",
      "163:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
      "164:  }",
      "165: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "363aceabb41542b3c3f0da27b728b3bd64aeee30",
      "candidate_info": {
        "commit_hash": "363aceabb41542b3c3f0da27b728b3bd64aeee30",
        "repo": "emicklei/go-restful",
        "commit_url": "https://github.com/emicklei/go-restful/commit/363aceabb41542b3c3f0da27b728b3bd64aeee30",
        "files": [
          "cors_filter.go",
          "cors_filter_test.go"
        ],
        "message": "more tests, fix doc",
        "before_after_code_files": [
          "cors_filter.go||cors_filter.go",
          "cors_filter_test.go||cors_filter_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/emicklei/go-restful/pull/493"
        ],
        "olp_code_files": {
          "patch": [
            "cors_filter.go||cors_filter.go",
            "cors_filter_test.go||cors_filter_test.go"
          ],
          "candidate": [
            "cors_filter.go||cors_filter.go",
            "cors_filter_test.go||cors_filter_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cors_filter.go||cors_filter.go": [
          "File: cors_filter.go -> cors_filter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import (",
          "9:  \"regexp\"",
          "10:  \"strconv\"",
          "11:  \"strings\"",
          "",
          "[Removed Lines]",
          "8:  \"fmt\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: type CrossOriginResourceSharing struct {",
          "27:  AllowedDomains []string",
          "30:  AllowedDomainFunc func(origin string) bool",
          "32:  AllowedMethods []string",
          "33:  MaxAge         int // number of seconds before requiring new Options request",
          "",
          "[Removed Lines]",
          "22:  ExposeHeaders  []string // list of Header names",
          "23:  AllowedHeaders []string // list of Header names. Checking is case-insensitive.",
          "",
          "[Added Lines]",
          "21:  ExposeHeaders []string // list of Header names",
          "25:  AllowedHeaders []string",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:  }",
          "186:  return false",
          "187: }",
          "",
          "[Removed Lines]",
          "190: func compileRegexps(allowedDomains []string) ([]*regexp.Regexp, error) {",
          "191:  regexps := []*regexp.Regexp{}",
          "192:  for _, each := range allowedDomains {",
          "194:   if !strings.HasPrefix(each, \"^\") {",
          "195:    each = fmt.Sprintf(\"^%s$\", each)",
          "196:   } else {",
          "197:    if !strings.HasSuffix(each, \"$\") {",
          "198:     each = fmt.Sprintf(\"%s$\", each)",
          "199:    }",
          "200:   }",
          "201:   r, err := regexp.Compile(each)",
          "202:   if err != nil {",
          "203:    return regexps, err",
          "204:   }",
          "205:   regexps = append(regexps, r)",
          "206:  }",
          "207:  return regexps, nil",
          "208: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cors_filter_test.go||cors_filter_test.go": [
          "File: cors_filter_test.go -> cors_filter_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:  if got, want := cors.isOriginAllowed(\"nowhere\"), false; got != want {",
          "148:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
          "149:  }",
          "150: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:  cors.AllowedDomains = []string{}",
          "152:  if got, want := cors.isOriginAllowed(\"here\"), false; got != want {",
          "153:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
          "154:  }",
          "155:  if got, want := cors.isOriginAllowed(\"where\"), true; got != want {",
          "156:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
          "157:  }",
          "159:  if got, want := cors.isOriginAllowed(\"\"), false; got != want {",
          "160:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
          "161:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e9df1c322e5634cf5793f592ab65a7c884e422b",
      "candidate_info": {
        "commit_hash": "3e9df1c322e5634cf5793f592ab65a7c884e422b",
        "repo": "emicklei/go-restful",
        "commit_url": "https://github.com/emicklei/go-restful/commit/3e9df1c322e5634cf5793f592ab65a7c884e422b",
        "files": [
          "cors_filter.go",
          "cors_filter_test.go"
        ],
        "message": "update doc, add testcases from PR conversation",
        "before_after_code_files": [
          "cors_filter.go||cors_filter.go",
          "cors_filter_test.go||cors_filter_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/emicklei/go-restful/pull/493"
        ],
        "olp_code_files": {
          "patch": [
            "cors_filter.go||cors_filter.go",
            "cors_filter_test.go||cors_filter_test.go"
          ],
          "candidate": [
            "cors_filter.go||cors_filter.go",
            "cors_filter_test.go||cors_filter_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cors_filter.go||cors_filter.go": [
          "File: cors_filter.go -> cors_filter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: type CrossOriginResourceSharing struct {",
          "22:  ExposeHeaders  []string // list of Header names",
          "23:  AllowedHeaders []string // list of Header names",
          "25:  AllowedMethods []string",
          "26:  MaxAge         int // number of seconds before requiring new Options request",
          "27:  CookiesAllowed bool",
          "",
          "[Removed Lines]",
          "24:  AllowedDomains []string // list of allowed values for Http Origin. An allowed value can be a regular expression to support subdomain matching. If empty all are allowed.",
          "",
          "[Added Lines]",
          "28:  AllowedDomains []string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:   if !strings.HasPrefix(each, \"^\") {",
          "201:    each = fmt.Sprintf(\"^%s$\", each)",
          "202:   }",
          "203:   r, err := regexp.Compile(each)",
          "204:   if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:   } else {",
          "207:    if !strings.HasSuffix(each, \"$\") {",
          "208:     each = fmt.Sprintf(\"%s$\", each)",
          "209:    }",
          "",
          "---------------"
        ],
        "cors_filter_test.go||cors_filter_test.go": [
          "File: cors_filter_test.go -> cors_filter_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  {[]string{\"example.com\"}, \"not-allowed\", false},",
          "99:  {[]string{\"not-matching.com\", \"example.com\"}, \"example.com\", true},",
          "100:  {[]string{\".*\"}, \"example.com\", true},",
          "101: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:  {[]string{\"^some.example.com$\"}, \"some.example.com\", true},",
          "102:  {[]string{\"^some\\\\.example\\\\.com\"}, \"some.example.com.org\", false},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5728f44fcf8b92f411cc2ef2b795916beedc8fe8",
      "candidate_info": {
        "commit_hash": "5728f44fcf8b92f411cc2ef2b795916beedc8fe8",
        "repo": "emicklei/go-restful",
        "commit_url": "https://github.com/emicklei/go-restful/commit/5728f44fcf8b92f411cc2ef2b795916beedc8fe8",
        "files": [
          "cors_filter.go",
          "cors_filter_test.go"
        ],
        "message": "introduce AllowedDomainFunc #489",
        "before_after_code_files": [
          "cors_filter.go||cors_filter.go",
          "cors_filter_test.go||cors_filter_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/emicklei/go-restful/pull/493"
        ],
        "olp_code_files": {
          "patch": [
            "cors_filter.go||cors_filter.go",
            "cors_filter_test.go||cors_filter_test.go"
          ],
          "candidate": [
            "cors_filter.go||cors_filter.go",
            "cors_filter_test.go||cors_filter_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cors_filter.go||cors_filter.go": [
          "File: cors_filter.go -> cors_filter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: type CrossOriginResourceSharing struct {",
          "22:  ExposeHeaders  []string // list of Header names",
          "28:  AllowedDomains []string",
          "29:  AllowedMethods []string",
          "30:  MaxAge         int // number of seconds before requiring new Options request",
          "31:  CookiesAllowed bool",
          "",
          "[Removed Lines]",
          "23:  AllowedHeaders []string // list of Header names",
          "",
          "[Added Lines]",
          "23:  AllowedHeaders []string // list of Header names. Checking is case-insensitive.",
          "30:  AllowedDomainFunc func(origin string) bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:   return false",
          "126:  }",
          "127:  if len(c.AllowedDomains) == 0 {",
          "128:   return true",
          "129:  }",
          "132:  for _, domain := range c.AllowedDomains {",
          "136:   }",
          "137:  }",
          "154:  }",
          "157: }",
          "159: func (c CrossOriginResourceSharing) setAllowOriginHeader(req *Request, resp *Response) {",
          "",
          "[Removed Lines]",
          "131:  allowed := false",
          "133:   if domain == origin {",
          "134:    allowed = true",
          "135:    break",
          "139:  if !allowed {",
          "140:   if len(c.allowedOriginPatterns) == 0 {",
          "142:    allowedOriginRegexps, err := compileRegexps(c.AllowedDomains)",
          "143:    if err != nil {",
          "144:     return false",
          "145:    }",
          "146:    c.allowedOriginPatterns = allowedOriginRegexps",
          "147:   }",
          "149:   for _, pattern := range c.allowedOriginPatterns {",
          "150:    if allowed = pattern.MatchString(origin); allowed {",
          "151:     break",
          "152:    }",
          "153:   }",
          "156:  return allowed",
          "",
          "[Added Lines]",
          "131:   if c.AllowedDomainFunc != nil {",
          "132:    return c.AllowedDomainFunc(origin)",
          "133:   }",
          "139:   if domain == \".*\" || domain == origin {",
          "140:    return true",
          "143:  if c.AllowedDomainFunc != nil {",
          "144:   return c.AllowedDomainFunc(origin)",
          "146:  return false",
          "",
          "---------------"
        ],
        "cors_filter_test.go||cors_filter_test.go": [
          "File: cors_filter_test.go -> cors_filter_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:  {[]string{\"example.com\"}, \"not-allowed\", false},",
          "99:  {[]string{\"not-matching.com\", \"example.com\"}, \"example.com\", true},",
          "100:  {[]string{\".*\"}, \"example.com\", true},",
          "103: }",
          "",
          "[Removed Lines]",
          "101:  {[]string{\"^some.example.com$\"}, \"some.example.com\", true},",
          "102:  {[]string{\"^some\\\\.example\\\\.com\"}, \"some.example.com.org\", false},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:   DefaultContainer.Dispatch(httpWriter, httpRequest)",
          "123:   actual := httpWriter.Header().Get(HEADER_AccessControlAllowOrigin)",
          "124:   if actual != each.origin && each.allowed {",
          "126:   }",
          "127:   if actual == each.origin && !each.allowed {",
          "129:   }",
          "130:  }",
          "131: }",
          "",
          "[Removed Lines]",
          "125:    t.Fatal(\"expected to be accepted\")",
          "128:    t.Fatal(\"did not expect to be accepted\")",
          "",
          "[Added Lines]",
          "123:    t.Error(\"expected to be accepted\", each)",
          "126:    t.Error(\"did not expect to be accepted\")",
          "131: func TestCORSFilter_AllowedDomainFunc(t *testing.T) {",
          "132:  cors := CrossOriginResourceSharing{",
          "133:   AllowedDomains: []string{\"here\", \"there\"},",
          "134:   AllowedDomainFunc: func(origin string) bool {",
          "135:    return \"where\" == origin",
          "136:   },",
          "137:  }",
          "138:  if got, want := cors.isOriginAllowed(\"here\"), true; got != want {",
          "139:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
          "140:  }",
          "141:  if got, want := cors.isOriginAllowed(\"there\"), true; got != want {",
          "142:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
          "143:  }",
          "144:  if got, want := cors.isOriginAllowed(\"where\"), true; got != want {",
          "145:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
          "146:  }",
          "147:  if got, want := cors.isOriginAllowed(\"nowhere\"), false; got != want {",
          "148:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
          "149:  }",
          "150: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f292efff46ae17e9d104f865a60a39a2ae9402f1",
      "candidate_info": {
        "commit_hash": "f292efff46ae17e9d104f865a60a39a2ae9402f1",
        "repo": "emicklei/go-restful",
        "commit_url": "https://github.com/emicklei/go-restful/commit/f292efff46ae17e9d104f865a60a39a2ae9402f1",
        "files": [
          "cors_filter.go"
        ],
        "message": "use exact matching of allowed domain entries, issue #489",
        "before_after_code_files": [
          "cors_filter.go||cors_filter.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/emicklei/go-restful/pull/493"
        ],
        "olp_code_files": {
          "patch": [
            "cors_filter.go||cors_filter.go"
          ],
          "candidate": [
            "cors_filter.go||cors_filter.go"
          ]
        }
      },
      "candidate_diff": {
        "cors_filter.go||cors_filter.go": [
          "File: cors_filter.go -> cors_filter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import (",
          "8:  \"regexp\"",
          "9:  \"strconv\"",
          "10:  \"strings\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8:  \"fmt\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:  return false",
          "192: }",
          "196:  regexps := []*regexp.Regexp{}",
          "199:   if err != nil {",
          "200:    return regexps, err",
          "201:   }",
          "",
          "[Removed Lines]",
          "195: func compileRegexps(regexpStrings []string) ([]*regexp.Regexp, error) {",
          "197:  for _, regexpStr := range regexpStrings {",
          "198:   r, err := regexp.Compile(regexpStr)",
          "",
          "[Added Lines]",
          "196: func compileRegexps(allowedDomains []string) ([]*regexp.Regexp, error) {",
          "198:  for _, each := range allowedDomains {",
          "200:   if !strings.HasPrefix(each, \"^\") {",
          "201:    each = fmt.Sprintf(\"^%s$\", each)",
          "202:   }",
          "203:   r, err := regexp.Compile(each)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e49191491837136f8d55f252532858758653778",
      "candidate_info": {
        "commit_hash": "9e49191491837136f8d55f252532858758653778",
        "repo": "emicklei/go-restful",
        "commit_url": "https://github.com/emicklei/go-restful/commit/9e49191491837136f8d55f252532858758653778",
        "files": [
          "cors_filter.go",
          "cors_filter_test.go"
        ],
        "message": "lowercase origin before checking cors",
        "before_after_code_files": [
          "cors_filter.go||cors_filter.go",
          "cors_filter_test.go||cors_filter_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/emicklei/go-restful/pull/493"
        ],
        "olp_code_files": {
          "patch": [
            "cors_filter.go||cors_filter.go",
            "cors_filter_test.go||cors_filter_test.go"
          ],
          "candidate": [
            "cors_filter.go||cors_filter.go",
            "cors_filter_test.go||cors_filter_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cors_filter.go||cors_filter.go": [
          "File: cors_filter.go -> cors_filter.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:  if len(origin) == 0 {",
          "133:   return false",
          "134:  }",
          "135:  if len(c.AllowedDomains) == 0 {",
          "136:   if c.AllowedDomainFunc != nil {",
          "138:   }",
          "139:   return true",
          "140:  }",
          "143:  for _, domain := range c.AllowedDomains {",
          "145:    return true",
          "146:   }",
          "147:  }",
          "",
          "[Removed Lines]",
          "137:    return c.AllowedDomainFunc(origin)",
          "144:   if domain == \".*\" || domain == origin {",
          "",
          "[Added Lines]",
          "135:  lowerOrigin := strings.ToLower(origin)",
          "138:    return c.AllowedDomainFunc(lowerOrigin)",
          "145:   if domain == \".*\" || strings.ToLower(domain) == lowerOrigin {",
          "",
          "---------------"
        ],
        "cors_filter_test.go||cors_filter_test.go": [
          "File: cors_filter_test.go -> cors_filter_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:  if got, want := cors.isOriginAllowed(\"here\"), true; got != want {",
          "139:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
          "140:  }",
          "141:  if got, want := cors.isOriginAllowed(\"there\"), true; got != want {",
          "142:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
          "143:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:  if got, want := cors.isOriginAllowed(\"HERE\"), true; got != want {",
          "142:   t.Errorf(\"got [%v:%T] want [%v:%T]\", got, got, want, want)",
          "143:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}