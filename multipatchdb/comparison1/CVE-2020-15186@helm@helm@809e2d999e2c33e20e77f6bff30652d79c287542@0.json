{
  "cve_id": "CVE-2020-15186",
  "cve_desc": "In Helm before versions 2.16.11 and 3.3.2 plugin names are not sanitized properly. As a result, a malicious plugin author could use characters in a plugin name that would result in unexpected behavior, such as duplicating the name of another plugin or spoofing the output to `helm --help`. This issue has been patched in Helm 3.3.2. A possible workaround is to not install untrusted Helm plugins. Examine the `name` field in the `plugin.yaml` file for a plugin, looking for characters outside of the [a-zA-Z0-9._-] range.",
  "repo": "helm/helm",
  "patch_hash": "809e2d999e2c33e20e77f6bff30652d79c287542",
  "patch_info": {
    "commit_hash": "809e2d999e2c33e20e77f6bff30652d79c287542",
    "repo": "helm/helm",
    "commit_url": "https://github.com/helm/helm/commit/809e2d999e2c33e20e77f6bff30652d79c287542",
    "files": [
      "cmd/helm/load_plugins.go",
      "cmd/helm/plugin_install.go",
      "pkg/plugin/plugin.go",
      "pkg/plugin/plugin_test.go"
    ],
    "message": "Merge pull request from GHSA-m54r-vrmv-hw33\n\nSigned-off-by: Matt Butcher <matt.butcher@microsoft.com>",
    "before_after_code_files": [
      "cmd/helm/load_plugins.go||cmd/helm/load_plugins.go",
      "cmd/helm/plugin_install.go||cmd/helm/plugin_install.go",
      "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
      "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
    ]
  },
  "patch_diff": {
    "cmd/helm/load_plugins.go||cmd/helm/load_plugins.go": [
      "File: cmd/helm/load_plugins.go -> cmd/helm/load_plugins.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:  found, err := plugin.FindPlugins(settings.PluginsDirectory)",
      "61:  if err != nil {",
      "63:   return",
      "64:  }",
      "",
      "[Removed Lines]",
      "62:   fmt.Fprintf(os.Stderr, \"failed to load plugins: %s\", err)",
      "",
      "[Added Lines]",
      "62:   fmt.Fprintf(os.Stderr, \"failed to load plugins: %s\\n\", err)",
      "",
      "---------------"
    ],
    "cmd/helm/plugin_install.go||cmd/helm/plugin_install.go": [
      "File: cmd/helm/plugin_install.go -> cmd/helm/plugin_install.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "19:  \"fmt\"",
      "20:  \"io\"",
      "22:  \"github.com/spf13/cobra\"",
      "24:  \"helm.sh/helm/v3/cmd/helm/require\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22:  \"github.com/pkg/errors\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "81:  debug(\"loading plugin from %s\", i.Path())",
      "82:  p, err := plugin.LoadDir(i.Path())",
      "83:  if err != nil {",
      "85:  }",
      "87:  if err := runHook(p, plugin.Install); err != nil {",
      "",
      "[Removed Lines]",
      "84:   return err",
      "",
      "[Added Lines]",
      "85:   return errors.Wrap(err, \"plugin is installed but unusable\")",
      "",
      "---------------"
    ],
    "pkg/plugin/plugin.go||pkg/plugin/plugin.go": [
      "File: pkg/plugin/plugin.go -> pkg/plugin/plugin.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "20:  \"io/ioutil\"",
      "21:  \"os\"",
      "22:  \"path/filepath\"",
      "23:  \"runtime\"",
      "24:  \"strings\"",
      "26:  \"sigs.k8s.io/yaml\"",
      "28:  \"helm.sh/helm/v3/pkg/cli\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23:  \"regexp\"",
      "27:  \"github.com/pkg/errors\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "157:  return main, baseArgs, nil",
      "158: }",
      "161: func LoadDir(dirname string) (*Plugin, error) {",
      "163:  if err != nil {",
      "165:  }",
      "167:  plug := &Plugin{Dir: dirname}",
      "168:  if err := yaml.Unmarshal(data, &plug.Metadata); err != nil {",
      "170:  }",
      "172: }",
      "",
      "[Removed Lines]",
      "162:  data, err := ioutil.ReadFile(filepath.Join(dirname, PluginFileName))",
      "164:   return nil, err",
      "169:   return nil, err",
      "171:  return plug, nil",
      "",
      "[Added Lines]",
      "165: var validPluginName = regexp.MustCompile(\"^[A-Za-z0-9_-]+$\")",
      "168: func validatePluginData(plug *Plugin, filepath string) error {",
      "169:  if !validPluginName.MatchString(plug.Metadata.Name) {",
      "170:   return fmt.Errorf(\"invalid plugin name at %q\", filepath)",
      "171:  }",
      "173:  return nil",
      "174: }",
      "176: func detectDuplicates(plugs []*Plugin) error {",
      "177:  names := map[string]string{}",
      "179:  for _, plug := range plugs {",
      "180:   if oldpath, ok := names[plug.Metadata.Name]; ok {",
      "181:    return fmt.Errorf(",
      "182:     \"two plugins claim the name %q at %q and %q\",",
      "183:     plug.Metadata.Name,",
      "184:     oldpath,",
      "185:     plug.Dir,",
      "186:    )",
      "187:   }",
      "188:   names[plug.Metadata.Name] = plug.Dir",
      "189:  }",
      "191:  return nil",
      "192: }",
      "196:  pluginfile := filepath.Join(dirname, PluginFileName)",
      "197:  data, err := ioutil.ReadFile(pluginfile)",
      "199:   return nil, errors.Wrapf(err, \"failed to read plugin at %q\", pluginfile)",
      "204:   return nil, errors.Wrapf(err, \"failed to load plugin at %q\", pluginfile)",
      "206:  return plug, validatePluginData(plug, pluginfile)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "180:  scanpath := filepath.Join(basedir, \"*\", PluginFileName)",
      "181:  matches, err := filepath.Glob(scanpath)",
      "182:  if err != nil {",
      "184:  }",
      "186:  if matches == nil {",
      "",
      "[Removed Lines]",
      "183:   return plugins, err",
      "",
      "[Added Lines]",
      "218:   return plugins, errors.Wrapf(err, \"failed to find plugins in %q\", scanpath)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "195:   }",
      "196:   plugins = append(plugins, p)",
      "197:  }",
      "199: }",
      "",
      "[Removed Lines]",
      "198:  return plugins, nil",
      "",
      "[Added Lines]",
      "233:  return plugins, detectDuplicates(plugins)",
      "",
      "---------------"
    ],
    "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go": [
      "File: pkg/plugin/plugin_test.go -> pkg/plugin/plugin_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package plugin // import \"helm.sh/helm/v3/pkg/plugin\"",
      "18: import (",
      "19:  \"os\"",
      "20:  \"path/filepath\"",
      "21:  \"reflect\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:  \"fmt\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "320:   }",
      "321:  }",
      "322: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325: func TestValidatePluginData(t *testing.T) {",
      "326:  for i, item := range []struct {",
      "327:   pass bool",
      "328:   plug *Plugin",
      "329:  }{",
      "330:   {true, mockPlugin(\"abcdefghijklmnopqrstuvwxyz0123456789_-ABC\")},",
      "331:   {true, mockPlugin(\"foo-bar-FOO-BAR_1234\")},",
      "332:   {false, mockPlugin(\"foo -bar\")},",
      "333:   {false, mockPlugin(\"$foo -bar\")}, // Test leading chars",
      "334:   {false, mockPlugin(\"foo -bar \")}, // Test trailing chars",
      "335:   {false, mockPlugin(\"foo\\nbar\")},  // Test newline",
      "336:  } {",
      "337:   err := validatePluginData(item.plug, fmt.Sprintf(\"test-%d\", i))",
      "338:   if item.pass && err != nil {",
      "339:    t.Errorf(\"failed to validate case %d: %s\", i, err)",
      "340:   } else if !item.pass && err == nil {",
      "341:    t.Errorf(\"expected case %d to fail\", i)",
      "342:   }",
      "343:  }",
      "344: }",
      "346: func TestDetectDuplicates(t *testing.T) {",
      "347:  plugs := []*Plugin{",
      "348:   mockPlugin(\"foo\"),",
      "349:   mockPlugin(\"bar\"),",
      "350:  }",
      "351:  if err := detectDuplicates(plugs); err != nil {",
      "352:   t.Error(\"no duplicates in the first set\")",
      "353:  }",
      "354:  plugs = append(plugs, mockPlugin(\"foo\"))",
      "355:  if err := detectDuplicates(plugs); err == nil {",
      "356:   t.Error(\"duplicates in the second set\")",
      "357:  }",
      "358: }",
      "360: func mockPlugin(name string) *Plugin {",
      "361:  return &Plugin{",
      "362:   Metadata: &Metadata{",
      "363:    Name:        name,",
      "364:    Version:     \"v0.1.2\",",
      "365:    Usage:       \"Mock plugin\",",
      "366:    Description: \"Mock plugin for testing\",",
      "367:    Command:     \"echo mock plugin\",",
      "368:   },",
      "369:   Dir: \"no-such-dir\",",
      "370:  }",
      "371: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c50b74f93709ac3a390b86bff7fbcb6cf9468fc8",
      "candidate_info": {
        "commit_hash": "c50b74f93709ac3a390b86bff7fbcb6cf9468fc8",
        "repo": "helm/helm",
        "commit_url": "https://github.com/helm/helm/commit/c50b74f93709ac3a390b86bff7fbcb6cf9468fc8",
        "files": [
          "cmd/helm/load_plugins.go",
          "cmd/helm/plugin_install.go",
          "pkg/plugin/plugin.go",
          "pkg/plugin/plugin_test.go"
        ],
        "message": "Merge pull request from GHSA-m54r-vrmv-hw33\n\nSigned-off-by: Matt Butcher <matt.butcher@microsoft.com>\n(cherry picked from commit 809e2d999e2c33e20e77f6bff30652d79c287542)",
        "before_after_code_files": [
          "cmd/helm/load_plugins.go||cmd/helm/load_plugins.go",
          "cmd/helm/plugin_install.go||cmd/helm/plugin_install.go",
          "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
          "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "cmd/helm/load_plugins.go||cmd/helm/load_plugins.go",
            "cmd/helm/plugin_install.go||cmd/helm/plugin_install.go",
            "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
            "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
          ],
          "candidate": [
            "cmd/helm/load_plugins.go||cmd/helm/load_plugins.go",
            "cmd/helm/plugin_install.go||cmd/helm/plugin_install.go",
            "pkg/plugin/plugin.go||pkg/plugin/plugin.go",
            "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/helm/load_plugins.go||cmd/helm/load_plugins.go": [
          "File: cmd/helm/load_plugins.go -> cmd/helm/load_plugins.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:  found, err := plugin.FindPlugins(settings.PluginsDirectory)",
          "61:  if err != nil {",
          "63:   return",
          "64:  }",
          "",
          "[Removed Lines]",
          "62:   fmt.Fprintf(os.Stderr, \"failed to load plugins: %s\", err)",
          "",
          "[Added Lines]",
          "62:   fmt.Fprintf(os.Stderr, \"failed to load plugins: %s\\n\", err)",
          "",
          "---------------"
        ],
        "cmd/helm/plugin_install.go||cmd/helm/plugin_install.go": [
          "File: cmd/helm/plugin_install.go -> cmd/helm/plugin_install.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  \"fmt\"",
          "20:  \"io\"",
          "22:  \"github.com/spf13/cobra\"",
          "24:  \"helm.sh/helm/v3/cmd/helm/require\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"github.com/pkg/errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:  debug(\"loading plugin from %s\", i.Path())",
          "74:  p, err := plugin.LoadDir(i.Path())",
          "75:  if err != nil {",
          "77:  }",
          "79:  if err := runHook(p, plugin.Install); err != nil {",
          "",
          "[Removed Lines]",
          "76:   return err",
          "",
          "[Added Lines]",
          "77:   return errors.Wrap(err, \"plugin is installed but unusable\")",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin.go||pkg/plugin/plugin.go": [
          "File: pkg/plugin/plugin.go -> pkg/plugin/plugin.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  \"io/ioutil\"",
          "21:  \"os\"",
          "22:  \"path/filepath\"",
          "23:  \"runtime\"",
          "24:  \"strings\"",
          "26:  \"sigs.k8s.io/yaml\"",
          "28:  \"helm.sh/helm/v3/pkg/cli\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:  \"regexp\"",
          "27:  \"github.com/pkg/errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:  return main, baseArgs, nil",
          "158: }",
          "161: func LoadDir(dirname string) (*Plugin, error) {",
          "163:  if err != nil {",
          "165:  }",
          "167:  plug := &Plugin{Dir: dirname}",
          "168:  if err := yaml.Unmarshal(data, &plug.Metadata); err != nil {",
          "170:  }",
          "172: }",
          "",
          "[Removed Lines]",
          "162:  data, err := ioutil.ReadFile(filepath.Join(dirname, PluginFileName))",
          "164:   return nil, err",
          "169:   return nil, err",
          "171:  return plug, nil",
          "",
          "[Added Lines]",
          "165: var validPluginName = regexp.MustCompile(\"^[A-Za-z0-9_-]+$\")",
          "168: func validatePluginData(plug *Plugin, filepath string) error {",
          "169:  if !validPluginName.MatchString(plug.Metadata.Name) {",
          "170:   return fmt.Errorf(\"invalid plugin name at %q\", filepath)",
          "171:  }",
          "173:  return nil",
          "174: }",
          "176: func detectDuplicates(plugs []*Plugin) error {",
          "177:  names := map[string]string{}",
          "179:  for _, plug := range plugs {",
          "180:   if oldpath, ok := names[plug.Metadata.Name]; ok {",
          "181:    return fmt.Errorf(",
          "182:     \"two plugins claim the name %q at %q and %q\",",
          "183:     plug.Metadata.Name,",
          "184:     oldpath,",
          "185:     plug.Dir,",
          "186:    )",
          "187:   }",
          "188:   names[plug.Metadata.Name] = plug.Dir",
          "189:  }",
          "191:  return nil",
          "192: }",
          "196:  pluginfile := filepath.Join(dirname, PluginFileName)",
          "197:  data, err := ioutil.ReadFile(pluginfile)",
          "199:   return nil, errors.Wrapf(err, \"failed to read plugin at %q\", pluginfile)",
          "204:   return nil, errors.Wrapf(err, \"failed to load plugin at %q\", pluginfile)",
          "206:  return plug, validatePluginData(plug, pluginfile)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:  scanpath := filepath.Join(basedir, \"*\", PluginFileName)",
          "181:  matches, err := filepath.Glob(scanpath)",
          "182:  if err != nil {",
          "184:  }",
          "186:  if matches == nil {",
          "",
          "[Removed Lines]",
          "183:   return plugins, err",
          "",
          "[Added Lines]",
          "218:   return plugins, errors.Wrapf(err, \"failed to find plugins in %q\", scanpath)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:   }",
          "196:   plugins = append(plugins, p)",
          "197:  }",
          "199: }",
          "",
          "[Removed Lines]",
          "198:  return plugins, nil",
          "",
          "[Added Lines]",
          "233:  return plugins, detectDuplicates(plugins)",
          "",
          "---------------"
        ],
        "pkg/plugin/plugin_test.go||pkg/plugin/plugin_test.go": [
          "File: pkg/plugin/plugin_test.go -> pkg/plugin/plugin_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package plugin // import \"helm.sh/helm/v3/pkg/plugin\"",
          "18: import (",
          "19:  \"os\"",
          "20:  \"path/filepath\"",
          "21:  \"reflect\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  \"fmt\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:   }",
          "321:  }",
          "322: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325: func TestValidatePluginData(t *testing.T) {",
          "326:  for i, item := range []struct {",
          "327:   pass bool",
          "328:   plug *Plugin",
          "329:  }{",
          "330:   {true, mockPlugin(\"abcdefghijklmnopqrstuvwxyz0123456789_-ABC\")},",
          "331:   {true, mockPlugin(\"foo-bar-FOO-BAR_1234\")},",
          "332:   {false, mockPlugin(\"foo -bar\")},",
          "333:   {false, mockPlugin(\"$foo -bar\")}, // Test leading chars",
          "334:   {false, mockPlugin(\"foo -bar \")}, // Test trailing chars",
          "335:   {false, mockPlugin(\"foo\\nbar\")},  // Test newline",
          "336:  } {",
          "337:   err := validatePluginData(item.plug, fmt.Sprintf(\"test-%d\", i))",
          "338:   if item.pass && err != nil {",
          "339:    t.Errorf(\"failed to validate case %d: %s\", i, err)",
          "340:   } else if !item.pass && err == nil {",
          "341:    t.Errorf(\"expected case %d to fail\", i)",
          "342:   }",
          "343:  }",
          "344: }",
          "346: func TestDetectDuplicates(t *testing.T) {",
          "347:  plugs := []*Plugin{",
          "348:   mockPlugin(\"foo\"),",
          "349:   mockPlugin(\"bar\"),",
          "350:  }",
          "351:  if err := detectDuplicates(plugs); err != nil {",
          "352:   t.Error(\"no duplicates in the first set\")",
          "353:  }",
          "354:  plugs = append(plugs, mockPlugin(\"foo\"))",
          "355:  if err := detectDuplicates(plugs); err == nil {",
          "356:   t.Error(\"duplicates in the second set\")",
          "357:  }",
          "358: }",
          "360: func mockPlugin(name string) *Plugin {",
          "361:  return &Plugin{",
          "362:   Metadata: &Metadata{",
          "363:    Name:        name,",
          "364:    Version:     \"v0.1.2\",",
          "365:    Usage:       \"Mock plugin\",",
          "366:    Description: \"Mock plugin for testing\",",
          "367:    Command:     \"echo mock plugin\",",
          "368:   },",
          "369:   Dir: \"no-such-dir\",",
          "370:  }",
          "371: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}