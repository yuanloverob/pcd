{
  "cve_id": "CVE-2024-3572",
  "cve_desc": "The scrapy/scrapy project is vulnerable to XML External Entity (XXE) attacks due to the use of lxml.etree.fromstring for parsing untrusted XML data without proper validation. This vulnerability allows attackers to perform denial of service attacks, access local files, generate network connections, or circumvent firewalls by submitting specially crafted XML data. ",
  "repo": "scrapy/scrapy",
  "patch_hash": "809bfac4890f75fc73607318a04d2ccba71b3d9f",
  "patch_info": {
    "commit_hash": "809bfac4890f75fc73607318a04d2ccba71b3d9f",
    "repo": "scrapy/scrapy",
    "commit_url": "https://github.com/scrapy/scrapy/commit/809bfac4890f75fc73607318a04d2ccba71b3d9f",
    "files": [
      "docs/news.rst",
      "docs/topics/request-response.rst",
      "docs/topics/settings.rst",
      "scrapy/downloadermiddlewares/decompression.py",
      "scrapy/downloadermiddlewares/httpcompression.py",
      "scrapy/spiders/sitemap.py",
      "scrapy/utils/_compression.py",
      "scrapy/utils/gz.py",
      "tests/sample_data/compressed/bomb-br.bin",
      "tests/sample_data/compressed/bomb-deflate.bin",
      "tests/sample_data/compressed/bomb-gzip.bin",
      "tests/sample_data/compressed/bomb-zstd.bin",
      "tests/test_downloadermiddleware_decompression.py",
      "tests/test_downloadermiddleware_httpcompression.py",
      "tests/test_spider.py"
    ],
    "message": "Merge branch '2.11-compression-bomb' into 2.11",
    "before_after_code_files": [
      "scrapy/downloadermiddlewares/decompression.py||scrapy/downloadermiddlewares/decompression.py",
      "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
      "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py",
      "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
      "scrapy/utils/gz.py||scrapy/utils/gz.py",
      "tests/test_downloadermiddleware_decompression.py||tests/test_downloadermiddleware_decompression.py",
      "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py",
      "tests/test_spider.py||tests/test_spider.py"
    ]
  },
  "patch_diff": {
    "scrapy/downloadermiddlewares/decompression.py||scrapy/downloadermiddlewares/decompression.py": [
      "File: scrapy/downloadermiddlewares/decompression.py -> scrapy/downloadermiddlewares/decompression.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
      "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import warnings",
      "6: from scrapy.http import Response, TextResponse",
      "7: from scrapy.responsetypes import responsetypes",
      "8: from scrapy.utils.deprecate import ScrapyDeprecationWarning",
      "9: from scrapy.utils.gz import gunzip",
      "11: ACCEPTED_ENCODINGS = [b\"gzip\", b\"deflate\"]",
      "13: try:",
      "17: except ImportError:",
      "18:     pass",
      "20: try:",
      "24: except ImportError:",
      "25:     pass",
      "28: class HttpCompressionMiddleware:",
      "29:     \"\"\"This middleware allows compressed (gzip, deflate) traffic to be",
      "30:     sent/received from web sites\"\"\"",
      "35:     @classmethod",
      "36:     def from_crawler(cls, crawler):",
      "37:         if not crawler.settings.getbool(\"COMPRESSION_ENABLED\"):",
      "38:             raise NotConfigured",
      "39:         try:",
      "41:         except TypeError:",
      "42:             warnings.warn(",
      "43:                 \"HttpCompressionMiddleware subclasses must either modify \"",
      "46:                 ScrapyDeprecationWarning,",
      "47:             )",
      "52:     def process_request(self, request, spider):",
      "53:         request.headers.setdefault(\"Accept-Encoding\", b\", \".join(ACCEPTED_ENCODINGS))",
      "",
      "[Removed Lines]",
      "1: import io",
      "3: import zlib",
      "5: from scrapy.exceptions import NotConfigured",
      "14:     import brotli",
      "16:     ACCEPTED_ENCODINGS.append(b\"br\")",
      "21:     import zstandard",
      "23:     ACCEPTED_ENCODINGS.append(b\"zstd\")",
      "32:     def __init__(self, stats=None):",
      "33:         self.stats = stats",
      "40:             return cls(stats=crawler.stats)",
      "44:                 \"their '__init__' method to support a 'stats' parameter or \"",
      "45:                 \"reimplement the 'from_crawler' method.\",",
      "48:             result = cls()",
      "49:             result.stats = crawler.stats",
      "50:             return result",
      "",
      "[Added Lines]",
      "2: from logging import getLogger",
      "4: from scrapy import signals",
      "5: from scrapy.exceptions import IgnoreRequest, NotConfigured",
      "8: from scrapy.utils._compression import (",
      "9:     _DecompressionMaxSizeExceeded,",
      "10:     _inflate,",
      "11:     _unbrotli,",
      "12:     _unzstd,",
      "13: )",
      "17: logger = getLogger(__name__)",
      "22:     import brotli  # noqa: F401",
      "25: else:",
      "26:     ACCEPTED_ENCODINGS.append(b\"br\")",
      "29:     import zstandard  # noqa: F401",
      "32: else:",
      "33:     ACCEPTED_ENCODINGS.append(b\"zstd\")",
      "40:     def __init__(self, stats=None, *, crawler=None):",
      "41:         if not crawler:",
      "42:             self.stats = stats",
      "43:             self._max_size = 1073741824",
      "44:             self._warn_size = 33554432",
      "45:             return",
      "46:         self.stats = crawler.stats",
      "47:         self._max_size = crawler.settings.getint(\"DOWNLOAD_MAXSIZE\")",
      "48:         self._warn_size = crawler.settings.getint(\"DOWNLOAD_WARNSIZE\")",
      "49:         crawler.signals.connect(self.open_spider, signals.spider_opened)",
      "56:             return cls(crawler=crawler)",
      "60:                 \"their '__init__' method to support a 'crawler' parameter or \"",
      "61:                 \"reimplement their 'from_crawler' method.\",",
      "64:             mw = cls()",
      "65:             mw.stats = crawler.stats",
      "66:             mw._max_size = crawler.settings.getint(\"DOWNLOAD_MAXSIZE\")",
      "67:             mw._warn_size = crawler.settings.getint(\"DOWNLOAD_WARNSIZE\")",
      "68:             crawler.signals.connect(mw.open_spider, signals.spider_opened)",
      "69:             return mw",
      "71:     def open_spider(self, spider):",
      "72:         if hasattr(spider, \"download_maxsize\"):",
      "73:             self._max_size = spider.download_maxsize",
      "74:         if hasattr(spider, \"download_warnsize\"):",
      "75:             self._warn_size = spider.download_warnsize",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:             content_encoding = response.headers.getlist(\"Content-Encoding\")",
      "60:             if content_encoding:",
      "61:                 encoding = content_encoding.pop()",
      "63:                 if self.stats:",
      "64:                     self.stats.inc_value(",
      "65:                         \"httpcompression/response_bytes\",",
      "",
      "[Removed Lines]",
      "62:                 decoded_body = self._decode(response.body, encoding.lower())",
      "",
      "[Added Lines]",
      "87:                 max_size = request.meta.get(\"download_maxsize\", self._max_size)",
      "88:                 warn_size = request.meta.get(\"download_warnsize\", self._warn_size)",
      "89:                 try:",
      "90:                     decoded_body = self._decode(",
      "91:                         response.body, encoding.lower(), max_size",
      "92:                     )",
      "93:                 except _DecompressionMaxSizeExceeded:",
      "94:                     raise IgnoreRequest(",
      "95:                         f\"Ignored response {response} because its body \"",
      "96:                         f\"({len(response.body)} B) exceeded DOWNLOAD_MAXSIZE \"",
      "97:                         f\"({max_size} B) during decompression.\"",
      "98:                     )",
      "99:                 if len(response.body) < warn_size <= len(decoded_body):",
      "100:                     logger.warning(",
      "101:                         f\"{response} body size after decompression \"",
      "102:                         f\"({len(decoded_body)} B) is larger than the \"",
      "103:                         f\"download warning size ({warn_size} B).\"",
      "104:                     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "84:         return response",
      "87:         if encoding == b\"gzip\" or encoding == b\"x-gzip\":",
      "90:         if encoding == b\"deflate\":",
      "100:         if encoding == b\"br\" and b\"br\" in ACCEPTED_ENCODINGS:",
      "102:         if encoding == b\"zstd\" and b\"zstd\" in ACCEPTED_ENCODINGS:",
      "107:         return body",
      "",
      "[Removed Lines]",
      "86:     def _decode(self, body, encoding):",
      "88:             body = gunzip(body)",
      "91:             try:",
      "92:                 body = zlib.decompress(body)",
      "93:             except zlib.error:",
      "94:                 # ugly hack to work with raw deflate content that may",
      "95:                 # be sent by microsoft servers. For more information, see:",
      "96:                 # http://carsten.codimi.de/gzip.yaws/",
      "97:                 # http://www.port80software.com/200ok/archive/2005/10/31/868.aspx",
      "98:                 # http://www.gzip.org/zlib/zlib_faq.html#faq38",
      "99:                 body = zlib.decompress(body, -15)",
      "101:             body = brotli.decompress(body)",
      "103:             # Using its streaming API since its simple API could handle only cases",
      "104:             # where there is content size data embedded in the frame",
      "105:             reader = zstandard.ZstdDecompressor().stream_reader(io.BytesIO(body))",
      "106:             body = reader.read()",
      "",
      "[Added Lines]",
      "128:     def _decode(self, body, encoding, max_size):",
      "130:             return gunzip(body, max_size=max_size)",
      "132:             return _inflate(body, max_size=max_size)",
      "134:             return _unbrotli(body, max_size=max_size)",
      "136:             return _unzstd(body, max_size=max_size)",
      "",
      "---------------"
    ],
    "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py": [
      "File: scrapy/spiders/sitemap.py -> scrapy/spiders/sitemap.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import logging",
      "2: import re",
      "4: from scrapy.http import Request, XmlResponse",
      "5: from scrapy.spiders import Spider",
      "6: from scrapy.utils.gz import gunzip, gzip_magic_number",
      "7: from scrapy.utils.sitemap import Sitemap, sitemap_urls_from_robots",
      "9: logger = logging.getLogger(__name__)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: from typing import TYPE_CHECKING, Any",
      "7: from scrapy.utils._compression import _DecompressionMaxSizeExceeded",
      "11: if TYPE_CHECKING:",
      "12:     # typing.Self requires Python 3.11",
      "13:     from typing_extensions import Self",
      "15:     from scrapy.crawler import Crawler",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14:     sitemap_rules = [(\"\", \"parse\")]",
      "15:     sitemap_follow = [\"\"]",
      "16:     sitemap_alternate_links = False",
      "18:     def __init__(self, *a, **kw):",
      "19:         super().__init__(*a, **kw)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25:     _max_size: int",
      "26:     _warn_size: int",
      "28:     @classmethod",
      "29:     def from_crawler(cls, crawler: \"Crawler\", *args: Any, **kwargs: Any) -> \"Self\":",
      "30:         spider = super().from_crawler(crawler, *args, **kwargs)",
      "31:         spider._max_size = getattr(",
      "32:             spider, \"download_maxsize\", spider.settings.getint(\"DOWNLOAD_MAXSIZE\")",
      "33:         )",
      "34:         spider._warn_size = getattr(",
      "35:             spider, \"download_warnsize\", spider.settings.getint(\"DOWNLOAD_WARNSIZE\")",
      "36:         )",
      "37:         return spider",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "71:         if isinstance(response, XmlResponse):",
      "72:             return response.body",
      "73:         if gzip_magic_number(response):",
      "75:         # actual gzipped sitemap files are decompressed above ;",
      "76:         # if we are here (response body is not gzipped)",
      "77:         # and have a response for .xml.gz,",
      "",
      "[Removed Lines]",
      "74:             return gunzip(response.body)",
      "",
      "[Added Lines]",
      "95:             uncompressed_size = len(response.body)",
      "96:             max_size = response.meta.get(\"download_maxsize\", self._max_size)",
      "97:             warn_size = response.meta.get(\"download_warnsize\", self._warn_size)",
      "98:             try:",
      "99:                 body = gunzip(response.body, max_size=max_size)",
      "100:             except _DecompressionMaxSizeExceeded:",
      "101:                 return None",
      "102:             if uncompressed_size < warn_size <= len(body):",
      "103:                 logger.warning(",
      "104:                     f\"{response} body size after decompression ({len(body)} B) \"",
      "105:                     f\"is larger than the download warning size ({warn_size} B).\"",
      "106:                 )",
      "107:             return body",
      "",
      "---------------"
    ],
    "scrapy/utils/_compression.py||scrapy/utils/_compression.py": [
      "File: scrapy/utils/_compression.py -> scrapy/utils/_compression.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import zlib",
      "2: from io import BytesIO",
      "4: try:",
      "5:     import brotli",
      "6: except ImportError:",
      "7:     pass",
      "9: try:",
      "10:     import zstandard",
      "11: except ImportError:",
      "12:     pass",
      "15: _CHUNK_SIZE = 65536  # 64 KiB",
      "18: class _DecompressionMaxSizeExceeded(ValueError):",
      "19:     pass",
      "22: def _inflate(data: bytes, *, max_size: int = 0) -> bytes:",
      "23:     decompressor = zlib.decompressobj()",
      "24:     raw_decompressor = zlib.decompressobj(wbits=-15)",
      "25:     input_stream = BytesIO(data)",
      "26:     output_stream = BytesIO()",
      "27:     output_chunk = b\".\"",
      "28:     decompressed_size = 0",
      "29:     while output_chunk:",
      "30:         input_chunk = input_stream.read(_CHUNK_SIZE)",
      "31:         try:",
      "32:             output_chunk = decompressor.decompress(input_chunk)",
      "33:         except zlib.error:",
      "34:             if decompressor != raw_decompressor:",
      "35:                 # ugly hack to work with raw deflate content that may",
      "36:                 # be sent by microsoft servers. For more information, see:",
      "37:                 # http://carsten.codimi.de/gzip.yaws/",
      "38:                 # http://www.port80software.com/200ok/archive/2005/10/31/868.aspx",
      "39:                 # http://www.gzip.org/zlib/zlib_faq.html#faq38",
      "40:                 decompressor = raw_decompressor",
      "41:                 output_chunk = decompressor.decompress(input_chunk)",
      "42:             else:",
      "43:                 raise",
      "44:         decompressed_size += len(output_chunk)",
      "45:         if max_size and decompressed_size > max_size:",
      "46:             raise _DecompressionMaxSizeExceeded(",
      "47:                 f\"The number of bytes decompressed so far \"",
      "48:                 f\"({decompressed_size} B) exceed the specified maximum \"",
      "49:                 f\"({max_size} B).\"",
      "50:             )",
      "51:         output_stream.write(output_chunk)",
      "52:     output_stream.seek(0)",
      "53:     return output_stream.read()",
      "56: def _unbrotli(data: bytes, *, max_size: int = 0) -> bytes:",
      "57:     decompressor = brotli.Decompressor()",
      "58:     input_stream = BytesIO(data)",
      "59:     output_stream = BytesIO()",
      "60:     output_chunk = b\".\"",
      "61:     decompressed_size = 0",
      "62:     while output_chunk:",
      "63:         input_chunk = input_stream.read(_CHUNK_SIZE)",
      "64:         output_chunk = decompressor.process(input_chunk)",
      "65:         decompressed_size += len(output_chunk)",
      "66:         if max_size and decompressed_size > max_size:",
      "67:             raise _DecompressionMaxSizeExceeded(",
      "68:                 f\"The number of bytes decompressed so far \"",
      "69:                 f\"({decompressed_size} B) exceed the specified maximum \"",
      "70:                 f\"({max_size} B).\"",
      "71:             )",
      "72:         output_stream.write(output_chunk)",
      "73:     output_stream.seek(0)",
      "74:     return output_stream.read()",
      "77: def _unzstd(data: bytes, *, max_size: int = 0) -> bytes:",
      "78:     decompressor = zstandard.ZstdDecompressor()",
      "79:     stream_reader = decompressor.stream_reader(BytesIO(data))",
      "80:     output_stream = BytesIO()",
      "81:     output_chunk = b\".\"",
      "82:     decompressed_size = 0",
      "83:     while output_chunk:",
      "84:         output_chunk = stream_reader.read(_CHUNK_SIZE)",
      "85:         decompressed_size += len(output_chunk)",
      "86:         if max_size and decompressed_size > max_size:",
      "87:             raise _DecompressionMaxSizeExceeded(",
      "88:                 f\"The number of bytes decompressed so far \"",
      "89:                 f\"({decompressed_size} B) exceed the specified maximum \"",
      "90:                 f\"({max_size} B).\"",
      "91:             )",
      "92:         output_stream.write(output_chunk)",
      "93:     output_stream.seek(0)",
      "94:     return output_stream.read()",
      "",
      "---------------"
    ],
    "scrapy/utils/gz.py||scrapy/utils/gz.py": [
      "File: scrapy/utils/gz.py -> scrapy/utils/gz.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import struct",
      "2: from gzip import GzipFile",
      "3: from io import BytesIO",
      "6: from scrapy.http import Response",
      "10:     \"\"\"Gunzip the given data and return as much data as possible.",
      "12:     This is resilient to CRC checksum errors.",
      "13:     \"\"\"",
      "14:     f = GzipFile(fileobj=BytesIO(data))",
      "16:     chunk = b\".\"",
      "17:     while chunk:",
      "18:         try:",
      "21:         except (OSError, EOFError, struct.error):",
      "22:             # complete only if there is some data, otherwise re-raise",
      "23:             # see issue 87 about catching struct.error",
      "26:                 break",
      "27:             raise",
      "31: def gzip_magic_number(response: Response) -> bool:",
      "",
      "[Removed Lines]",
      "4: from typing import List",
      "9: def gunzip(data: bytes) -> bytes:",
      "15:     output_list: List[bytes] = []",
      "19:             chunk = f.read1(8196)",
      "20:             output_list.append(chunk)",
      "24:             # some pages are quite small so output_list is empty",
      "25:             if output_list:",
      "28:     return b\"\".join(output_list)",
      "",
      "[Added Lines]",
      "7: from ._compression import _CHUNK_SIZE, _DecompressionMaxSizeExceeded",
      "10: def gunzip(data: bytes, *, max_size: int = 0) -> bytes:",
      "16:     output_stream = BytesIO()",
      "18:     decompressed_size = 0",
      "21:             chunk = f.read1(_CHUNK_SIZE)",
      "25:             # some pages are quite small so output_stream is empty",
      "26:             if output_stream.getbuffer().nbytes > 0:",
      "29:         decompressed_size += len(chunk)",
      "30:         if max_size and decompressed_size > max_size:",
      "31:             raise _DecompressionMaxSizeExceeded(",
      "32:                 f\"The number of bytes decompressed so far \"",
      "33:                 f\"({decompressed_size} B) exceed the specified maximum \"",
      "34:                 f\"({max_size} B).\"",
      "35:             )",
      "36:         output_stream.write(chunk)",
      "37:     output_stream.seek(0)",
      "38:     return output_stream.read()",
      "",
      "---------------"
    ],
    "tests/test_downloadermiddleware_decompression.py||tests/test_downloadermiddleware_decompression.py": [
      "File: tests/test_downloadermiddleware_decompression.py -> tests/test_downloadermiddleware_decompression.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py": [
      "File: tests/test_downloadermiddleware_httpcompression.py -> tests/test_downloadermiddleware_httpcompression.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: from gzip import GzipFile",
      "2: from io import BytesIO",
      "3: from pathlib import Path",
      "4: from unittest import SkipTest, TestCase",
      "5: from warnings import catch_warnings",
      "7: from w3lib.encoding import resolve_encoding",
      "9: from scrapy.downloadermiddlewares.httpcompression import (",
      "10:     ACCEPTED_ENCODINGS,",
      "11:     HttpCompressionMiddleware,",
      "12: )",
      "14: from scrapy.http import HtmlResponse, Request, Response",
      "15: from scrapy.responsetypes import responsetypes",
      "16: from scrapy.spiders import Spider",
      "",
      "[Removed Lines]",
      "13: from scrapy.exceptions import NotConfigured, ScrapyDeprecationWarning",
      "",
      "[Added Lines]",
      "3: from logging import WARNING",
      "8: from testfixtures import LogCapture",
      "15: from scrapy.exceptions import IgnoreRequest, NotConfigured, ScrapyDeprecationWarning",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35:         \"html-zstd-streaming-no-content-size.bin\",",
      "36:         \"zstd\",",
      "37:     ),",
      "38: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "41:         f\"bomb-{format_id}\": (f\"bomb-{format_id}.bin\", format_id)",
      "42:         for format_id in (",
      "43:             \"br\",  # 34 \u2192 11 511 612",
      "44:             \"deflate\",  # 27 968 \u2192 11 511 612",
      "45:             \"gzip\",  # 27 988 \u2192 11 511 612",
      "46:             \"zstd\",  # 1 096 \u2192 11 511 612",
      "47:         )",
      "48:     },",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "115:         self.assertStatsEqual(\"httpcompression/response_count\", 1)",
      "116:         self.assertStatsEqual(\"httpcompression/response_bytes\", 74837)",
      "130:     def test_process_response_br(self):",
      "131:         try:",
      "132:             import brotli  # noqa: F401",
      "",
      "[Removed Lines]",
      "118:     def test_process_response_gzip_no_stats(self):",
      "119:         mw = HttpCompressionMiddleware()",
      "120:         response = self._getresponse(\"gzip\")",
      "121:         request = response.request",
      "123:         self.assertEqual(response.headers[\"Content-Encoding\"], b\"gzip\")",
      "124:         newresponse = mw.process_response(request, response, self.spider)",
      "125:         self.assertEqual(mw.stats, None)",
      "126:         assert newresponse is not response",
      "127:         assert newresponse.body.startswith(b\"<!DOCTYPE\")",
      "128:         assert \"Content-Encoding\" not in newresponse.headers",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "373:         self.assertStatsEqual(\"httpcompression/response_count\", None)",
      "374:         self.assertStatsEqual(\"httpcompression/response_bytes\", None)",
      "377: class HttpCompressionSubclassTest(TestCase):",
      "378:     def test_init_missing_stats(self):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "375:     def _test_compression_bomb_setting(self, compression_id):",
      "376:         settings = {\"DOWNLOAD_MAXSIZE\": 10_000_000}",
      "377:         crawler = get_crawler(Spider, settings_dict=settings)",
      "378:         spider = crawler._create_spider(\"scrapytest.org\")",
      "379:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "380:         mw.open_spider(spider)",
      "382:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "383:         self.assertRaises(",
      "384:             IgnoreRequest,",
      "385:             mw.process_response,",
      "386:             response.request,",
      "387:             response,",
      "388:             spider,",
      "389:         )",
      "391:     def test_compression_bomb_setting_br(self):",
      "392:         try:",
      "393:             import brotli  # noqa: F401",
      "394:         except ImportError:",
      "395:             raise SkipTest(\"no brotli\")",
      "396:         self._test_compression_bomb_setting(\"br\")",
      "398:     def test_compression_bomb_setting_deflate(self):",
      "399:         self._test_compression_bomb_setting(\"deflate\")",
      "401:     def test_compression_bomb_setting_gzip(self):",
      "402:         self._test_compression_bomb_setting(\"gzip\")",
      "404:     def test_compression_bomb_setting_zstd(self):",
      "405:         self._test_compression_bomb_setting(\"zstd\")",
      "407:     def _test_compression_bomb_spider_attr(self, compression_id):",
      "408:         class DownloadMaxSizeSpider(Spider):",
      "409:             download_maxsize = 10_000_000",
      "411:         crawler = get_crawler(DownloadMaxSizeSpider)",
      "412:         spider = crawler._create_spider(\"scrapytest.org\")",
      "413:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "414:         mw.open_spider(spider)",
      "416:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "417:         self.assertRaises(",
      "418:             IgnoreRequest,",
      "419:             mw.process_response,",
      "420:             response.request,",
      "421:             response,",
      "422:             spider,",
      "423:         )",
      "425:     def test_compression_bomb_spider_attr_br(self):",
      "426:         try:",
      "427:             import brotli  # noqa: F401",
      "428:         except ImportError:",
      "429:             raise SkipTest(\"no brotli\")",
      "430:         self._test_compression_bomb_spider_attr(\"br\")",
      "432:     def test_compression_bomb_spider_attr_deflate(self):",
      "433:         self._test_compression_bomb_spider_attr(\"deflate\")",
      "435:     def test_compression_bomb_spider_attr_gzip(self):",
      "436:         self._test_compression_bomb_spider_attr(\"gzip\")",
      "438:     def test_compression_bomb_spider_attr_zstd(self):",
      "439:         self._test_compression_bomb_spider_attr(\"zstd\")",
      "441:     def _test_compression_bomb_request_meta(self, compression_id):",
      "442:         crawler = get_crawler(Spider)",
      "443:         spider = crawler._create_spider(\"scrapytest.org\")",
      "444:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "445:         mw.open_spider(spider)",
      "447:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "448:         response.meta[\"download_maxsize\"] = 10_000_000",
      "449:         self.assertRaises(",
      "450:             IgnoreRequest,",
      "451:             mw.process_response,",
      "452:             response.request,",
      "453:             response,",
      "454:             spider,",
      "455:         )",
      "457:     def test_compression_bomb_request_meta_br(self):",
      "458:         try:",
      "459:             import brotli  # noqa: F401",
      "460:         except ImportError:",
      "461:             raise SkipTest(\"no brotli\")",
      "462:         self._test_compression_bomb_request_meta(\"br\")",
      "464:     def test_compression_bomb_request_meta_deflate(self):",
      "465:         self._test_compression_bomb_request_meta(\"deflate\")",
      "467:     def test_compression_bomb_request_meta_gzip(self):",
      "468:         self._test_compression_bomb_request_meta(\"gzip\")",
      "470:     def test_compression_bomb_request_meta_zstd(self):",
      "471:         self._test_compression_bomb_request_meta(\"zstd\")",
      "473:     def _test_download_warnsize_setting(self, compression_id):",
      "474:         settings = {\"DOWNLOAD_WARNSIZE\": 10_000_000}",
      "475:         crawler = get_crawler(Spider, settings_dict=settings)",
      "476:         spider = crawler._create_spider(\"scrapytest.org\")",
      "477:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "478:         mw.open_spider(spider)",
      "479:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "481:         with LogCapture(",
      "482:             \"scrapy.downloadermiddlewares.httpcompression\",",
      "483:             propagate=False,",
      "484:             level=WARNING,",
      "485:         ) as log:",
      "486:             mw.process_response(response.request, response, spider)",
      "487:         log.check(",
      "488:             (",
      "489:                 \"scrapy.downloadermiddlewares.httpcompression\",",
      "490:                 \"WARNING\",",
      "491:                 (",
      "492:                     \"<200 http://scrapytest.org/> body size after \"",
      "493:                     \"decompression (11511612 B) is larger than the download \"",
      "494:                     \"warning size (10000000 B).\"",
      "495:                 ),",
      "496:             ),",
      "497:         )",
      "499:     def test_download_warnsize_setting_br(self):",
      "500:         try:",
      "501:             import brotli  # noqa: F401",
      "502:         except ImportError:",
      "503:             raise SkipTest(\"no brotli\")",
      "504:         self._test_download_warnsize_setting(\"br\")",
      "506:     def test_download_warnsize_setting_deflate(self):",
      "507:         self._test_download_warnsize_setting(\"deflate\")",
      "509:     def test_download_warnsize_setting_gzip(self):",
      "510:         self._test_download_warnsize_setting(\"gzip\")",
      "512:     def test_download_warnsize_setting_zstd(self):",
      "513:         self._test_download_warnsize_setting(\"zstd\")",
      "515:     def _test_download_warnsize_spider_attr(self, compression_id):",
      "516:         class DownloadWarnSizeSpider(Spider):",
      "517:             download_warnsize = 10_000_000",
      "519:         crawler = get_crawler(DownloadWarnSizeSpider)",
      "520:         spider = crawler._create_spider(\"scrapytest.org\")",
      "521:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "522:         mw.open_spider(spider)",
      "523:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "525:         with LogCapture(",
      "526:             \"scrapy.downloadermiddlewares.httpcompression\",",
      "527:             propagate=False,",
      "528:             level=WARNING,",
      "529:         ) as log:",
      "530:             mw.process_response(response.request, response, spider)",
      "531:         log.check(",
      "532:             (",
      "533:                 \"scrapy.downloadermiddlewares.httpcompression\",",
      "534:                 \"WARNING\",",
      "535:                 (",
      "536:                     \"<200 http://scrapytest.org/> body size after \"",
      "537:                     \"decompression (11511612 B) is larger than the download \"",
      "538:                     \"warning size (10000000 B).\"",
      "539:                 ),",
      "540:             ),",
      "541:         )",
      "543:     def test_download_warnsize_spider_attr_br(self):",
      "544:         try:",
      "545:             import brotli  # noqa: F401",
      "546:         except ImportError:",
      "547:             raise SkipTest(\"no brotli\")",
      "548:         self._test_download_warnsize_spider_attr(\"br\")",
      "550:     def test_download_warnsize_spider_attr_deflate(self):",
      "551:         self._test_download_warnsize_spider_attr(\"deflate\")",
      "553:     def test_download_warnsize_spider_attr_gzip(self):",
      "554:         self._test_download_warnsize_spider_attr(\"gzip\")",
      "556:     def test_download_warnsize_spider_attr_zstd(self):",
      "557:         self._test_download_warnsize_spider_attr(\"zstd\")",
      "559:     def _test_download_warnsize_request_meta(self, compression_id):",
      "560:         crawler = get_crawler(Spider)",
      "561:         spider = crawler._create_spider(\"scrapytest.org\")",
      "562:         mw = HttpCompressionMiddleware.from_crawler(crawler)",
      "563:         mw.open_spider(spider)",
      "564:         response = self._getresponse(f\"bomb-{compression_id}\")",
      "565:         response.meta[\"download_warnsize\"] = 10_000_000",
      "567:         with LogCapture(",
      "568:             \"scrapy.downloadermiddlewares.httpcompression\",",
      "569:             propagate=False,",
      "570:             level=WARNING,",
      "571:         ) as log:",
      "572:             mw.process_response(response.request, response, spider)",
      "573:         log.check(",
      "574:             (",
      "575:                 \"scrapy.downloadermiddlewares.httpcompression\",",
      "576:                 \"WARNING\",",
      "577:                 (",
      "578:                     \"<200 http://scrapytest.org/> body size after \"",
      "579:                     \"decompression (11511612 B) is larger than the download \"",
      "580:                     \"warning size (10000000 B).\"",
      "581:                 ),",
      "582:             ),",
      "583:         )",
      "585:     def test_download_warnsize_request_meta_br(self):",
      "586:         try:",
      "587:             import brotli  # noqa: F401",
      "588:         except ImportError:",
      "589:             raise SkipTest(\"no brotli\")",
      "590:         self._test_download_warnsize_request_meta(\"br\")",
      "592:     def test_download_warnsize_request_meta_deflate(self):",
      "593:         self._test_download_warnsize_request_meta(\"deflate\")",
      "595:     def test_download_warnsize_request_meta_gzip(self):",
      "596:         self._test_download_warnsize_request_meta(\"gzip\")",
      "598:     def test_download_warnsize_request_meta_zstd(self):",
      "599:         self._test_download_warnsize_request_meta(\"zstd\")",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "393:             (",
      "394:                 (",
      "395:                     \"HttpCompressionMiddleware subclasses must either modify \"",
      "398:                 ),",
      "399:             ),",
      "400:         )",
      "",
      "[Removed Lines]",
      "396:                     \"their '__init__' method to support a 'stats' parameter \"",
      "397:                     \"or reimplement the 'from_crawler' method.\"",
      "",
      "[Added Lines]",
      "621:                     \"their '__init__' method to support a 'crawler' parameter \"",
      "622:                     \"or reimplement their 'from_crawler' method.\"",
      "",
      "---------------"
    ],
    "tests/test_spider.py||tests/test_spider.py": [
      "File: tests/test_spider.py -> tests/test_spider.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import inspect",
      "3: import warnings",
      "4: from io import BytesIO",
      "5: from typing import Any",
      "6: from unittest import mock",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: from logging import WARNING",
      "6: from pathlib import Path",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25: )",
      "26: from scrapy.spiders.init import InitSpider",
      "27: from scrapy.utils.test import get_crawler",
      "31: class SpiderTest(unittest.TestCase):",
      "",
      "[Removed Lines]",
      "28: from tests import get_testdata",
      "",
      "[Added Lines]",
      "30: from tests import get_testdata, tests_datadir",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "489:     GZBODY = f.getvalue()",
      "491:     def assertSitemapBody(self, response, body):",
      "493:         self.assertEqual(spider._get_sitemap_body(response), body)",
      "495:     def test_get_sitemap_body(self):",
      "",
      "[Removed Lines]",
      "492:         spider = self.spider_class(\"example.com\")",
      "",
      "[Added Lines]",
      "494:         crawler = get_crawler()",
      "495:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "507:             url=\"http://www.example.com/sitemap\",",
      "508:             body=self.GZBODY,",
      "509:             headers={\"content-type\": \"application/gzip\"},",
      "510:         )",
      "511:         self.assertSitemapBody(r, self.BODY)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "513:             request=Request(\"http://www.example.com/sitemap\"),",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "515:         self.assertSitemapBody(r, self.BODY)",
      "517:     def test_get_sitemap_body_xml_url_compressed(self):",
      "519:         self.assertSitemapBody(r, self.BODY)",
      "521:         # .xml.gz but body decoded by HttpCompression middleware already",
      "",
      "[Removed Lines]",
      "518:         r = Response(url=\"http://www.example.com/sitemap.xml.gz\", body=self.GZBODY)",
      "",
      "[Added Lines]",
      "522:         r = Response(",
      "523:             url=\"http://www.example.com/sitemap.xml.gz\",",
      "524:             body=self.GZBODY,",
      "525:             request=Request(\"http://www.example.com/sitemap\"),",
      "526:         )",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "692:             [\"http://www.example.com/sitemap2.xml\"],",
      "693:         )",
      "696: class DeprecationTest(unittest.TestCase):",
      "697:     def test_crawl_spider(self):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "703:     def test_compression_bomb_setting(self):",
      "704:         settings = {\"DOWNLOAD_MAXSIZE\": 10_000_000}",
      "705:         crawler = get_crawler(settings_dict=settings)",
      "706:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
      "707:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "708:         body = body_path.read_bytes()",
      "709:         request = Request(url=\"https://example.com\")",
      "710:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "711:         self.assertIsNone(spider._get_sitemap_body(response))",
      "713:     def test_compression_bomb_spider_attr(self):",
      "714:         class DownloadMaxSizeSpider(self.spider_class):",
      "715:             download_maxsize = 10_000_000",
      "717:         crawler = get_crawler()",
      "718:         spider = DownloadMaxSizeSpider.from_crawler(crawler, \"example.com\")",
      "719:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "720:         body = body_path.read_bytes()",
      "721:         request = Request(url=\"https://example.com\")",
      "722:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "723:         self.assertIsNone(spider._get_sitemap_body(response))",
      "725:     def test_compression_bomb_request_meta(self):",
      "726:         crawler = get_crawler()",
      "727:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
      "728:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "729:         body = body_path.read_bytes()",
      "730:         request = Request(",
      "731:             url=\"https://example.com\", meta={\"download_maxsize\": 10_000_000}",
      "732:         )",
      "733:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "734:         self.assertIsNone(spider._get_sitemap_body(response))",
      "736:     def test_download_warnsize_setting(self):",
      "737:         settings = {\"DOWNLOAD_WARNSIZE\": 10_000_000}",
      "738:         crawler = get_crawler(settings_dict=settings)",
      "739:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
      "740:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "741:         body = body_path.read_bytes()",
      "742:         request = Request(url=\"https://example.com\")",
      "743:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "744:         with LogCapture(",
      "745:             \"scrapy.spiders.sitemap\", propagate=False, level=WARNING",
      "746:         ) as log:",
      "747:             spider._get_sitemap_body(response)",
      "748:         log.check(",
      "749:             (",
      "750:                 \"scrapy.spiders.sitemap\",",
      "751:                 \"WARNING\",",
      "752:                 (",
      "753:                     \"<200 https://example.com> body size after decompression \"",
      "754:                     \"(11511612 B) is larger than the download warning size \"",
      "755:                     \"(10000000 B).\"",
      "756:                 ),",
      "757:             ),",
      "758:         )",
      "760:     def test_download_warnsize_spider_attr(self):",
      "761:         class DownloadWarnSizeSpider(self.spider_class):",
      "762:             download_warnsize = 10_000_000",
      "764:         crawler = get_crawler()",
      "765:         spider = DownloadWarnSizeSpider.from_crawler(crawler, \"example.com\")",
      "766:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "767:         body = body_path.read_bytes()",
      "768:         request = Request(",
      "769:             url=\"https://example.com\", meta={\"download_warnsize\": 10_000_000}",
      "770:         )",
      "771:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "772:         with LogCapture(",
      "773:             \"scrapy.spiders.sitemap\", propagate=False, level=WARNING",
      "774:         ) as log:",
      "775:             spider._get_sitemap_body(response)",
      "776:         log.check(",
      "777:             (",
      "778:                 \"scrapy.spiders.sitemap\",",
      "779:                 \"WARNING\",",
      "780:                 (",
      "781:                     \"<200 https://example.com> body size after decompression \"",
      "782:                     \"(11511612 B) is larger than the download warning size \"",
      "783:                     \"(10000000 B).\"",
      "784:                 ),",
      "785:             ),",
      "786:         )",
      "788:     def test_download_warnsize_request_meta(self):",
      "789:         crawler = get_crawler()",
      "790:         spider = self.spider_class.from_crawler(crawler, \"example.com\")",
      "791:         body_path = Path(tests_datadir, \"compressed\", \"bomb-gzip.bin\")",
      "792:         body = body_path.read_bytes()",
      "793:         request = Request(",
      "794:             url=\"https://example.com\", meta={\"download_warnsize\": 10_000_000}",
      "795:         )",
      "796:         response = Response(url=\"https://example.com\", body=body, request=request)",
      "797:         with LogCapture(",
      "798:             \"scrapy.spiders.sitemap\", propagate=False, level=WARNING",
      "799:         ) as log:",
      "800:             spider._get_sitemap_body(response)",
      "801:         log.check(",
      "802:             (",
      "803:                 \"scrapy.spiders.sitemap\",",
      "804:                 \"WARNING\",",
      "805:                 (",
      "806:                     \"<200 https://example.com> body size after decompression \"",
      "807:                     \"(11511612 B) is larger than the download warning size \"",
      "808:                     \"(10000000 B).\"",
      "809:                 ),",
      "810:             ),",
      "811:         )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0c4a98f8e072ccc26a393e51066b52f1f2f6b4d7",
      "candidate_info": {
        "commit_hash": "0c4a98f8e072ccc26a393e51066b52f1f2f6b4d7",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/0c4a98f8e072ccc26a393e51066b52f1f2f6b4d7",
        "files": [
          "scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py",
          "scrapy/utils/gz.py",
          "tests/sample_data/compressed/bomb-deflate.bin",
          "tests/test_downloadermiddleware_httpcompression.py"
        ],
        "message": "Protect against deflate bombs",
        "before_after_code_files": [
          "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
          "scrapy/utils/gz.py||scrapy/utils/gz.py",
          "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
            "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
            "scrapy/utils/gz.py||scrapy/utils/gz.py",
            "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
          ],
          "candidate": [
            "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
            "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
            "scrapy/utils/gz.py||scrapy/utils/gz.py",
            "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
          "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import io",
          "2: import warnings",
          "5: from scrapy.exceptions import IgnoreRequest, NotConfigured",
          "6: from scrapy.http import Response, TextResponse",
          "7: from scrapy.responsetypes import responsetypes",
          "9: from scrapy.utils.deprecate import ScrapyDeprecationWarning",
          "10: from scrapy.utils.gz import gunzip",
          "",
          "[Removed Lines]",
          "3: import zlib",
          "8: from scrapy.utils._compression import _DecompressionMaxSizeExceeded",
          "",
          "[Added Lines]",
          "7: from scrapy.utils._compression import _DecompressionMaxSizeExceeded, _inflate",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:     def _decode(self, body, encoding):",
          "99:         if encoding == b\"gzip\" or encoding == b\"x-gzip\":",
          "102:         if encoding == b\"deflate\":",
          "112:         if encoding == b\"br\" and b\"br\" in ACCEPTED_ENCODINGS:",
          "114:         if encoding == b\"zstd\" and b\"zstd\" in ACCEPTED_ENCODINGS:",
          "115:             # Using its streaming API since its simple API could handle only cases",
          "116:             # where there is content size data embedded in the frame",
          "117:             reader = zstandard.ZstdDecompressor().stream_reader(io.BytesIO(body))",
          "119:         return body",
          "",
          "[Removed Lines]",
          "100:             body = gunzip(body, max_size=self._max_size)",
          "103:             try:",
          "104:                 body = zlib.decompress(body)",
          "105:             except zlib.error:",
          "106:                 # ugly hack to work with raw deflate content that may",
          "107:                 # be sent by microsoft servers. For more information, see:",
          "108:                 # http://carsten.codimi.de/gzip.yaws/",
          "109:                 # http://www.port80software.com/200ok/archive/2005/10/31/868.aspx",
          "110:                 # http://www.gzip.org/zlib/zlib_faq.html#faq38",
          "111:                 body = zlib.decompress(body, -15)",
          "113:             body = brotli.decompress(body)",
          "118:             body = reader.read()",
          "",
          "[Added Lines]",
          "99:             return gunzip(body, max_size=self._max_size)",
          "101:             return _inflate(body, max_size=self._max_size)",
          "103:             return brotli.decompress(body)",
          "108:             return reader.read()",
          "",
          "---------------"
        ],
        "scrapy/utils/_compression.py||scrapy/utils/_compression.py": [
          "File: scrapy/utils/_compression.py -> scrapy/utils/_compression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: class _DecompressionMaxSizeExceeded(ValueError):",
          "2:     pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import zlib",
          "2: from io import BytesIO",
          "3: from typing import List",
          "10: def _inflate(data: bytes, *, max_size: int = 0) -> bytes:",
          "11:     decompressor = zlib.decompressobj()",
          "12:     raw_decompressor = zlib.decompressobj(wbits=-15)",
          "13:     input_stream = BytesIO(data)",
          "14:     output_list: List[bytes] = []",
          "15:     output_chunk = b\".\"",
          "16:     decompressed_size = 0",
          "17:     CHUNK_SIZE = 8196",
          "18:     while output_chunk:",
          "19:         input_chunk = input_stream.read(CHUNK_SIZE)",
          "20:         try:",
          "21:             output_chunk = decompressor.decompress(input_chunk)",
          "22:         except zlib.error:",
          "23:             if decompressor != raw_decompressor:",
          "24:                 # ugly hack to work with raw deflate content that may",
          "25:                 # be sent by microsoft servers. For more information, see:",
          "26:                 # http://carsten.codimi.de/gzip.yaws/",
          "27:                 # http://www.port80software.com/200ok/archive/2005/10/31/868.aspx",
          "28:                 # http://www.gzip.org/zlib/zlib_faq.html#faq38",
          "29:                 decompressor = raw_decompressor",
          "30:                 output_chunk = decompressor.decompress(input_chunk)",
          "31:             else:",
          "32:                 raise",
          "33:         decompressed_size += len(output_chunk)",
          "34:         if max_size and decompressed_size > max_size:",
          "35:             raise _DecompressionMaxSizeExceeded(",
          "36:                 f\"The number of bytes decompressed so far \"",
          "37:                 f\"({decompressed_size}B) exceed the specified maximum \"",
          "38:                 f\"({max_size}B).\"",
          "39:             )",
          "40:         output_list.append(output_chunk)",
          "41:     return b\"\".join(output_list)",
          "",
          "---------------"
        ],
        "scrapy/utils/gz.py||scrapy/utils/gz.py": [
          "File: scrapy/utils/gz.py -> scrapy/utils/gz.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from ._compression import _DecompressionMaxSizeExceeded",
          "12:     \"\"\"Gunzip the given data and return as much data as possible.",
          "14:     This is resilient to CRC checksum errors.",
          "",
          "[Removed Lines]",
          "11: def gunzip(data: bytes, max_size: int = 0) -> bytes:",
          "",
          "[Added Lines]",
          "11: def gunzip(data: bytes, *, max_size: int = 0) -> bytes:",
          "",
          "---------------"
        ],
        "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py": [
          "File: tests/test_downloadermiddleware_httpcompression.py -> tests/test_downloadermiddleware_httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         f\"bomb-{format_id}\": (f\"bomb-{format_id}.bin\", format_id)",
          "40:         for format_id in (",
          "41:             # \"br\",",
          "42:             \"gzip\",  # 27 988 \u2192 11 511 612",
          "44:             # \"zstd\",",
          "45:         )",
          "46:     },",
          "",
          "[Removed Lines]",
          "43:             # \"deflate\",",
          "",
          "[Added Lines]",
          "42:             \"deflate\",  # 27 968 \u2192 11 511 612",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:             self.spider,",
          "384:         )",
          "386:     def test_compression_bomb_gzip(self):",
          "387:         self._test_compression_bomb(\"gzip\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:     def test_compression_bomb_deflate(self):",
          "387:         self._test_compression_bomb(\"deflate\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf80e5670e8317858b9f60008a5d2d97b4988da0",
      "candidate_info": {
        "commit_hash": "cf80e5670e8317858b9f60008a5d2d97b4988da0",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/cf80e5670e8317858b9f60008a5d2d97b4988da0",
        "files": [
          "scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/spiders/sitemap.py"
        ],
        "message": "Solve linting and typing issues",
        "before_after_code_files": [
          "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
            "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py"
          ],
          "candidate": [
            "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
            "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
          "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:                         f\"({len(response.body)} B) exceeded DOWNLOAD_MAXSIZE \"",
          "94:                         f\"({self._max_size} B) during decompression.\"",
          "95:                     )",
          "97:                     logger.warning(",
          "98:                         f\"{response} body size after decompression \"",
          "99:                         f\"({len(decoded_body)} B) is larger than the \"",
          "",
          "[Removed Lines]",
          "96:                 if len(response.body) < warn_size and len(decoded_body) >= warn_size:",
          "",
          "[Added Lines]",
          "96:                 if len(response.body) < warn_size <= len(decoded_body):",
          "",
          "---------------"
        ],
        "scrapy/spiders/sitemap.py||scrapy/spiders/sitemap.py": [
          "File: scrapy/spiders/sitemap.py -> scrapy/spiders/sitemap.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     sitemap_rules = [(\"\", \"parse\")]",
          "23:     sitemap_follow = [\"\"]",
          "24:     sitemap_alternate_links = False",
          "26:     @classmethod",
          "27:     def from_crawler(cls, crawler: \"Crawler\", *args: Any, **kwargs: Any) -> \"Self\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     _max_size: int",
          "26:     _warn_size: int",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:                 body = gunzip(response.body, max_size=max_size)",
          "98:             except _DecompressionMaxSizeExceeded:",
          "99:                 return None",
          "101:                 logger.warning(",
          "102:                     f\"{response} body size after decompression ({len(body)} B) \"",
          "103:                     f\"is larger than the download warning size ({warn_size} B).\"",
          "",
          "[Removed Lines]",
          "100:             if uncompressed_size < warn_size and len(body) >= warn_size:",
          "",
          "[Added Lines]",
          "102:             if uncompressed_size < warn_size <= len(body):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27781a85e738052e0441c81d773b3ec124194594",
      "candidate_info": {
        "commit_hash": "27781a85e738052e0441c81d773b3ec124194594",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/27781a85e738052e0441c81d773b3ec124194594",
        "files": [
          "tests/test_spider.py"
        ],
        "message": "Fix bad closing tags in XMLFeedSpider tests",
        "before_after_code_files": [
          "tests/test_spider.py||tests/test_spider.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "tests/test_spider.py||tests/test_spider.py"
          ],
          "candidate": [
            "tests/test_spider.py||tests/test_spider.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/test_spider.py||tests/test_spider.py": [
          "File: tests/test_spider.py -> tests/test_spider.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         body = b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "150:         <urlset xmlns:x=\"http://www.google.com/schemas/sitemap/0.84\"",
          "151:                 xmlns:y=\"http://www.example.com/schemas/extras/1.0\">",
          "153:             <other value=\"bar\" y:custom=\"fuu\"/>",
          "154:         </url>",
          "156:         </urlset>\"\"\"",
          "157:         response = XmlResponse(url=\"http://example.com/sitemap.xml\", body=body)",
          "",
          "[Removed Lines]",
          "152:         <url><x:loc>http://www.example.com/Special-Offers.html</loc><y:updated>2009-08-16</updated>",
          "155:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</updated><other value=\"foo\"/></url>",
          "",
          "[Added Lines]",
          "152:         <url><x:loc>http://www.example.com/Special-Offers.html</x:loc><y:updated>2009-08-16</y:updated>",
          "155:         <url><loc>http://www.example.com/</loc><y:updated>2009-08-16</y:updated><other value=\"foo\"/></url>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f1d345e74d19e33016f9e69fcda0bda9afb568d",
      "candidate_info": {
        "commit_hash": "2f1d345e74d19e33016f9e69fcda0bda9afb568d",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/2f1d345e74d19e33016f9e69fcda0bda9afb568d",
        "files": [
          "tests/test_downloadermiddleware_httpcompression.py",
          "tests/test_utils_response.py"
        ],
        "message": "Solve test issues",
        "before_after_code_files": [
          "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py",
          "tests/test_utils_response.py||tests/test_utils_response.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
          ],
          "candidate": [
            "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py": [
          "File: tests/test_downloadermiddleware_httpcompression.py -> tests/test_downloadermiddleware_httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:         self._test_compression_bomb_setting(\"gzip\")",
          "404:     def test_compression_bomb_setting_zstd(self):",
          "405:         self._test_compression_bomb_setting(\"zstd\")",
          "407:     def _test_compression_bomb_spider_attr(self, compression_id):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405:         try:",
          "406:             import zstandard  # noqa: F401",
          "407:         except ImportError:",
          "408:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436:         self._test_compression_bomb_spider_attr(\"gzip\")",
          "438:     def test_compression_bomb_spider_attr_zstd(self):",
          "439:         self._test_compression_bomb_spider_attr(\"zstd\")",
          "441:     def _test_compression_bomb_request_meta(self, compression_id):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:         try:",
          "444:             import zstandard  # noqa: F401",
          "445:         except ImportError:",
          "446:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "468:         self._test_compression_bomb_request_meta(\"gzip\")",
          "470:     def test_compression_bomb_request_meta_zstd(self):",
          "471:         self._test_compression_bomb_request_meta(\"zstd\")",
          "473:     def _test_download_warnsize_setting(self, compression_id):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479:         try:",
          "480:             import zstandard  # noqa: F401",
          "481:         except ImportError:",
          "482:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "510:         self._test_download_warnsize_setting(\"gzip\")",
          "512:     def test_download_warnsize_setting_zstd(self):",
          "513:         self._test_download_warnsize_setting(\"zstd\")",
          "515:     def _test_download_warnsize_spider_attr(self, compression_id):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "525:         try:",
          "526:             import zstandard  # noqa: F401",
          "527:         except ImportError:",
          "528:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "554:         self._test_download_warnsize_spider_attr(\"gzip\")",
          "556:     def test_download_warnsize_spider_attr_zstd(self):",
          "557:         self._test_download_warnsize_spider_attr(\"zstd\")",
          "559:     def _test_download_warnsize_request_meta(self, compression_id):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:         try:",
          "574:             import zstandard  # noqa: F401",
          "575:         except ImportError:",
          "576:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "596:         self._test_download_warnsize_request_meta(\"gzip\")",
          "598:     def test_download_warnsize_request_meta_zstd(self):",
          "599:         self._test_download_warnsize_request_meta(\"zstd\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "619:         try:",
          "620:             import zstandard  # noqa: F401",
          "621:         except ImportError:",
          "622:             raise SkipTest(\"no zstd support (zstandard)\")",
          "",
          "---------------"
        ],
        "tests/test_utils_response.py||tests/test_utils_response.py": [
          "File: tests/test_utils_response.py -> tests/test_utils_response.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:         ), \"Inject unique base url with conditional comment\"",
          "206:     def test_open_in_browser_redos_comment(self):",
          "209:         # Exploit input from",
          "210:         # https://makenowjust-labs.github.io/recheck/playground/",
          "",
          "[Removed Lines]",
          "207:         MAX_CPU_TIME = 0.001",
          "",
          "[Added Lines]",
          "207:         MAX_CPU_TIME = 0.02",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:         self.assertLess(end_time - start_time, MAX_CPU_TIME)",
          "223:     def test_open_in_browser_redos_head(self):",
          "226:         # Exploit input from",
          "227:         # https://makenowjust-labs.github.io/recheck/playground/",
          "",
          "[Removed Lines]",
          "224:         MAX_CPU_TIME = 0.001",
          "",
          "[Added Lines]",
          "224:         MAX_CPU_TIME = 0.02",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fba167c5e1f356bcc452e95e92199f1a15135c60",
      "candidate_info": {
        "commit_hash": "fba167c5e1f356bcc452e95e92199f1a15135c60",
        "repo": "scrapy/scrapy",
        "commit_url": "https://github.com/scrapy/scrapy/commit/fba167c5e1f356bcc452e95e92199f1a15135c60",
        "files": [
          "scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py",
          "tests/sample_data/compressed/bomb-br.bin",
          "tests/test_downloadermiddleware_httpcompression.py"
        ],
        "message": "Protect against brotli bombs",
        "before_after_code_files": [
          "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
          "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
          "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/scrapy/scrapy/pull/6222"
        ],
        "olp_code_files": {
          "patch": [
            "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
            "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
            "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
          ],
          "candidate": [
            "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py",
            "scrapy/utils/_compression.py||scrapy/utils/_compression.py",
            "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py"
          ]
        }
      },
      "candidate_diff": {
        "scrapy/downloadermiddlewares/httpcompression.py||scrapy/downloadermiddlewares/httpcompression.py": [
          "File: scrapy/downloadermiddlewares/httpcompression.py -> scrapy/downloadermiddlewares/httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from scrapy.exceptions import IgnoreRequest, NotConfigured",
          "5: from scrapy.http import Response, TextResponse",
          "6: from scrapy.responsetypes import responsetypes",
          "8: from scrapy.utils.deprecate import ScrapyDeprecationWarning",
          "9: from scrapy.utils.gz import gunzip",
          "11: ACCEPTED_ENCODINGS = [b\"gzip\", b\"deflate\"]",
          "13: try:",
          "17: except ImportError:",
          "18:     pass",
          "20: try:",
          "21:     import zstandard",
          "24: except ImportError:",
          "25:     pass",
          "28: class HttpCompressionMiddleware:",
          "",
          "[Removed Lines]",
          "7: from scrapy.utils._compression import _DecompressionMaxSizeExceeded, _inflate",
          "14:     import brotli",
          "16:     ACCEPTED_ENCODINGS.append(b\"br\")",
          "23:     ACCEPTED_ENCODINGS.append(b\"zstd\")",
          "",
          "[Added Lines]",
          "7: from scrapy.utils._compression import _DecompressionMaxSizeExceeded, _inflate, _unbrotli",
          "14:     import brotli  # noqa: F401",
          "17: else:",
          "18:     ACCEPTED_ENCODINGS.append(b\"br\")",
          "24: else:",
          "25:     ACCEPTED_ENCODINGS.append(b\"zstd\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         if encoding == b\"deflate\":",
          "101:             return _inflate(body, max_size=self._max_size)",
          "102:         if encoding == b\"br\" and b\"br\" in ACCEPTED_ENCODINGS:",
          "104:         if encoding == b\"zstd\" and b\"zstd\" in ACCEPTED_ENCODINGS:",
          "105:             # Using its streaming API since its simple API could handle only cases",
          "106:             # where there is content size data embedded in the frame",
          "",
          "[Removed Lines]",
          "103:             return brotli.decompress(body)",
          "",
          "[Added Lines]",
          "103:             return _unbrotli(body, max_size=self._max_size)",
          "",
          "---------------"
        ],
        "scrapy/utils/_compression.py||scrapy/utils/_compression.py": [
          "File: scrapy/utils/_compression.py -> scrapy/utils/_compression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from io import BytesIO",
          "3: from typing import List",
          "6: class _DecompressionMaxSizeExceeded(ValueError):",
          "7:     pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: try:",
          "6:     import brotli",
          "7: except ImportError:",
          "8:     pass",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:             )",
          "40:         output_list.append(output_chunk)",
          "41:     return b\"\".join(output_list)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: def _unbrotli(data: bytes, *, max_size: int = 0) -> bytes:",
          "50:     decompressor = brotli.Decompressor()",
          "51:     input_stream = BytesIO(data)",
          "52:     output_list: List[bytes] = []",
          "53:     output_chunk = b\".\"",
          "54:     decompressed_size = 0",
          "55:     CHUNK_SIZE = 8196",
          "56:     while output_chunk:",
          "57:         input_chunk = input_stream.read(CHUNK_SIZE)",
          "58:         output_chunk = decompressor.process(input_chunk)",
          "59:         decompressed_size += len(output_chunk)",
          "60:         if max_size and decompressed_size > max_size:",
          "61:             raise _DecompressionMaxSizeExceeded(",
          "62:                 f\"The number of bytes decompressed so far \"",
          "63:                 f\"({decompressed_size}B) exceed the specified maximum \"",
          "64:                 f\"({max_size}B).\"",
          "65:             )",
          "66:         output_list.append(output_chunk)",
          "67:     return b\"\".join(output_list)",
          "",
          "---------------"
        ],
        "tests/test_downloadermiddleware_httpcompression.py||tests/test_downloadermiddleware_httpcompression.py": [
          "File: tests/test_downloadermiddleware_httpcompression.py -> tests/test_downloadermiddleware_httpcompression.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         f\"bomb-{format_id}\": (f\"bomb-{format_id}.bin\", format_id)",
          "40:         for format_id in (",
          "42:             \"deflate\",  # 27 968 \u2192 11 511 612",
          "43:             \"gzip\",  # 27 988 \u2192 11 511 612",
          "44:             # \"zstd\",",
          "",
          "[Removed Lines]",
          "41:             # \"br\",",
          "",
          "[Added Lines]",
          "41:             \"br\",  # 34 \u2192 11 511 612",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:             self.spider,",
          "384:         )",
          "386:     def test_compression_bomb_deflate(self):",
          "387:         self._test_compression_bomb(\"deflate\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:     def test_compression_bomb_br(self):",
          "387:         try:",
          "388:             import brotli  # noqa: F401",
          "389:         except ImportError:",
          "390:             raise SkipTest(\"no brotli\")",
          "391:         self._test_compression_bomb(\"br\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}