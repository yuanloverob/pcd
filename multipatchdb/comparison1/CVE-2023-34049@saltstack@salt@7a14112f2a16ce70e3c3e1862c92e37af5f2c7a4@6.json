{
  "cve_id": "CVE-2023-34049",
  "cve_desc": "The Salt-SSH pre-flight option copies the script to the target at a predictable path, which allows an attacker to force Salt-SSH to run their script. If an attacker has access to the target VM and knows the path to the pre-flight script before it runs they can ensure Salt-SSH runs their script with the privileges of the user running Salt-SSH.\u00a0Do not make the copy path on the target predictable and ensure we check return codes of the scp command if the copy fails.",
  "repo": "saltstack/salt",
  "patch_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
  "patch_info": {
    "commit_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "files": [
      "changelog/cve-2023-34049.security.md",
      "salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py"
    ],
    "message": "Fix CVE-2023-34049",
    "before_after_code_files": [
      "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
    ]
  },
  "patch_diff": {
    "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
      "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import logging",
      "12: import multiprocessing",
      "13: import os",
      "14: import queue",
      "15: import re",
      "16: import shlex",
      "17: import subprocess",
      "18: import sys",
      "19: import tarfile",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: import pathlib",
      "18: import shutil",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "467:             if target.get(\"passwd\", False) or self.opts[\"ssh_passwd\"]:",
      "468:                 self._key_deploy_run(host, target, False)",
      "469:             return ret",
      "471:             target = self.targets[host]",
      "472:             # permission denied, attempt to auto deploy ssh key",
      "473:             print(",
      "",
      "[Removed Lines]",
      "470:         if ret[host].get(\"stderr\", \"\").count(\"Permission denied\"):",
      "",
      "[Added Lines]",
      "472:         stderr = ret[host].get(\"stderr\", \"\")",
      "473:         # -failed to upload file- is detecting scp errors",
      "474:         # Errors to ignore when Permission denied is in the stderr. For example",
      "475:         # scp can get a permission denied on the target host, but they where",
      "476:         # able to accurate authenticate against the box",
      "477:         ignore_err = [\"failed to upload file\"]",
      "478:         check_err = [x for x in ignore_err if stderr.count(x)]",
      "479:         if \"Permission denied\" in stderr and not check_err:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1007:         \"\"\"",
      "1008:         Run our pre_flight script before running any ssh commands",
      "1009:         \"\"\"",
      "1016:     def check_thin_dir(self):",
      "1017:         \"\"\"",
      "",
      "[Removed Lines]",
      "1010:         script = os.path.join(tempfile.gettempdir(), self.ssh_pre_file)",
      "1012:         self.shell.send(self.ssh_pre_flight, script)",
      "1014:         return self.execute_script(script, script_args=self.ssh_pre_flight_args)",
      "",
      "[Added Lines]",
      "1019:         with tempfile.NamedTemporaryFile() as temp:",
      "1020:             # ensure we use copyfile to not copy the file attributes",
      "1021:             # we want to ensure we use the perms set by the secure",
      "1022:             # NamedTemporaryFile",
      "1023:             try:",
      "1024:                 shutil.copyfile(self.ssh_pre_flight, temp.name)",
      "1025:             except OSError as err:",
      "1026:                 return (",
      "1027:                     \"\",",
      "1028:                     f\"Could not copy pre flight script {self.ssh_pre_flight} to temporary path\",",
      "1029:                     1,",
      "1030:                 )",
      "1031:             target_script = f\".{pathlib.Path(temp.name).name}\"",
      "1032:             log.trace(f\"Copying the pre flight script {self.ssh_pre_file} to target\")",
      "1033:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
      "1034:             if retcode != 0:",
      "1035:                 # We could not copy the script to the target",
      "1036:                 log.error(",
      "1037:                     f\"Could not copy the pre flight script {self.ssh_pre_file} to target\"",
      "1038:                 )",
      "1039:                 return stdout, stderr, retcode",
      "1041:             log.trace(f\"Executing the pre flight script {self.ssh_pre_file} on target\")",
      "1042:             return self.execute_script(",
      "1043:                 target_script, script_args=self.ssh_pre_flight_args",
      "1044:             )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1388:             return self.shell.exec_cmd(cmd_str)",
      "1390:         # Write the shim to a temporary file in the default temp directory",
      "1394:             shim_tmp_file.write(salt.utils.stringutils.to_bytes(cmd_str))",
      "1396:         # Copy shim to target system, under $HOME/.<randomized name>",
      "1400:         if self.winrm:",
      "1401:             target_shim_file = saltwinshell.get_target_shim_file(self, target_shim_file)",
      "1404:         # Remove our shim file",
      "1405:         try:",
      "",
      "[Removed Lines]",
      "1391:         with tempfile.NamedTemporaryFile(",
      "1392:             mode=\"w+b\", prefix=\"shim_\", delete=False",
      "1393:         ) as shim_tmp_file:",
      "1397:         target_shim_file = \".{}.{}\".format(",
      "1398:             binascii.hexlify(os.urandom(6)).decode(\"ascii\"), extension",
      "1399:         )",
      "1402:         self.shell.send(shim_tmp_file.name, target_shim_file, makedirs=True)",
      "",
      "[Added Lines]",
      "1421:         with tempfile.NamedTemporaryFile(mode=\"w+b\", delete=False) as shim_tmp_file:",
      "1425:         target_shim_file = f\".{pathlib.Path(shim_tmp_file.name).name}\"",
      "1429:         stdout, stderr, retcode = self.shell.send(",
      "1430:             shim_tmp_file.name, target_shim_file, makedirs=True",
      "1431:         )",
      "1432:         if retcode != 0:",
      "1433:             log.error(f\"Could not copy the shim script to target\")",
      "1434:             return stdout, stderr, retcode",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
      "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import re",
      "4: from textwrap import dedent",
      "6: import pytest",
      "",
      "[Removed Lines]",
      "1: import os",
      "3: import tempfile",
      "",
      "[Added Lines]",
      "1: import logging",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: from salt.client import ssh",
      "17: from tests.support.mock import MagicMock, call, patch",
      "20: @pytest.fixture",
      "21: def opts(tmp_path):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: log = logging.getLogger(__name__)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "242:         assert ret == cmd_ret",
      "245: def test_execute_script(opts, target, tmp_path):",
      "246:     \"\"\"",
      "247:     test Single.execute_script()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "247:     \"\"\"",
      "248:     test Single.run_ssh_pre_flight function",
      "249:     \"\"\"",
      "250:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "251:     single = ssh.Single(",
      "252:         opts,",
      "253:         opts[\"argv\"],",
      "254:         \"localhost\",",
      "255:         mods={},",
      "256:         fsclient=None,",
      "257:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "258:         mine=False,",
      "260:     )",
      "262:     cmd_ret = (\"Success\", \"\", 0)",
      "263:     mock_flight = MagicMock(return_value=cmd_ret)",
      "264:     mock_cmd = MagicMock(return_value=cmd_ret)",
      "265:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
      "266:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "267:     patch_exec_cmd = patch(",
      "268:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
      "269:     )",
      "270:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "272:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
      "273:         ret = single.run()",
      "274:         mock_cmd.assert_called()",
      "275:         mock_flight.assert_called()",
      "276:         assert ret == cmd_ret",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "273:         ] == mock_cmd.call_args_list",
      "277:     \"\"\"",
      "278:     test Single.shim_cmd()",
      "279:     \"\"\"",
      "",
      "[Removed Lines]",
      "276: def test_shim_cmd(opts, target):",
      "",
      "[Added Lines]",
      "310: def test_shim_cmd(opts, target, tmp_path):",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "295:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "296:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0))",
      "297:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "300:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "301:         assert ret == exp_ret",
      "302:         assert [",
      "305:         ] == mock_cmd.call_args_list",
      "309:     \"\"\"",
      "311:     \"\"\"",
      "313:     single = ssh.Single(",
      "314:         opts,",
      "315:         opts[\"argv\"],",
      "",
      "[Removed Lines]",
      "299:     with patch_cmd, patch_rand, patch_send:",
      "303:             call(\"/bin/sh '.35d96ccac2ff.py'\"),",
      "304:             call(\"rm '.35d96ccac2ff.py'\"),",
      "308: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "310:     test Single.run_ssh_pre_flight",
      "312:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "332:     tmp_file = tmp_path / \"tmp_file\"",
      "333:     mock_tmp = MagicMock()",
      "334:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "335:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "337:     with patch_cmd, patch_tmp, patch_send:",
      "341:             call(f\"/bin/sh '.{tmp_file.name}'\"),",
      "342:             call(f\"rm '.{tmp_file.name}'\"),",
      "346: def test_shim_cmd_copy_fails(opts, target, caplog):",
      "348:     test Single.shim_cmd() when copying the file fails",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "320:         mine=False,",
      "321:         winrm=False,",
      "322:         tty=True,",
      "324:     )",
      "328:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "332:     )",
      "335:         ret = single.run_ssh_pre_flight()",
      "343: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
      "",
      "[Removed Lines]",
      "326:     exp_ret = (\"Success\", \"\", 0)",
      "327:     mock_cmd = MagicMock(return_value=exp_ret)",
      "329:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=exp_ret)",
      "330:     exp_tmp = os.path.join(",
      "331:         tempfile.gettempdir(), os.path.basename(target[\"ssh_pre_flight\"])",
      "334:     with patch_cmd, patch_send:",
      "336:         assert ret == exp_ret",
      "337:         assert [",
      "338:             call(\"/bin/sh '{}'\".format(exp_tmp)),",
      "339:             call(\"rm '{}'\".format(exp_tmp)),",
      "340:         ] == mock_cmd.call_args_list",
      "",
      "[Added Lines]",
      "363:     ret_cmd = (\"Success\", \"\", 0)",
      "364:     mock_cmd = MagicMock(return_value=ret_cmd)",
      "366:     ret_send = (\"\", \"General error in file copy\", 1)",
      "367:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=ret_send)",
      "368:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "370:     with patch_cmd, patch_rand, patch_send:",
      "371:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "372:         assert ret == ret_send",
      "373:         assert \"Could not copy the shim script to target\" in caplog.text",
      "374:         mock_cmd.assert_not_called()",
      "377: def test_run_ssh_pre_flight_no_connect(opts, target, tmp_path, caplog):",
      "378:     \"\"\"",
      "379:     test Single.run_ssh_pre_flight when you",
      "380:     cannot connect to the target",
      "381:     \"\"\"",
      "382:     pre_flight = tmp_path / \"script.sh\"",
      "383:     pre_flight.write_text(\"\")",
      "384:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "385:     single = ssh.Single(",
      "386:         opts,",
      "387:         opts[\"argv\"],",
      "388:         \"localhost\",",
      "389:         mods={},",
      "390:         fsclient=None,",
      "391:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "392:         mine=False,",
      "393:         winrm=False,",
      "394:         tty=True,",
      "396:     )",
      "397:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "398:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "399:     tmp_file = tmp_path / \"tmp_file\"",
      "400:     mock_tmp = MagicMock()",
      "401:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "402:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "403:     ret_send = (",
      "404:         \"\",",
      "405:         \"ssh: connect to host 192.168.1.186 port 22: No route to host\\nscp: Connection closed\\n\",",
      "406:         255,",
      "407:     )",
      "408:     send_mock = MagicMock(return_value=ret_send)",
      "409:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "411:     with caplog.at_level(logging.TRACE):",
      "412:         with patch_send, patch_exec_cmd, patch_tmp:",
      "413:             ret = single.run_ssh_pre_flight()",
      "414:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
      "415:     assert (",
      "416:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
      "417:         in caplog.text",
      "418:     )",
      "419:     assert ret == ret_send",
      "420:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "421:     target_script = send_mock.call_args_list[0][0][1]",
      "422:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "423:     mock_exec_cmd.assert_not_called()",
      "426: def test_run_ssh_pre_flight_permission_denied(opts, target, tmp_path):",
      "427:     \"\"\"",
      "428:     test Single.run_ssh_pre_flight when you",
      "429:     cannot copy script to the target due to",
      "430:     a permission denied error",
      "431:     \"\"\"",
      "432:     pre_flight = tmp_path / \"script.sh\"",
      "433:     pre_flight.write_text(\"\")",
      "434:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "435:     single = ssh.Single(",
      "436:         opts,",
      "437:         opts[\"argv\"],",
      "438:         \"localhost\",",
      "439:         mods={},",
      "440:         fsclient=None,",
      "441:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "442:         mine=False,",
      "443:         winrm=False,",
      "444:         tty=True,",
      "446:     )",
      "447:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "448:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "449:     tmp_file = tmp_path / \"tmp_file\"",
      "450:     mock_tmp = MagicMock()",
      "451:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "452:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "453:     ret_send = (",
      "454:         \"\",",
      "455:         'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "456:         255,",
      "458:     send_mock = MagicMock(return_value=ret_send)",
      "459:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "461:     with patch_send, patch_exec_cmd, patch_tmp:",
      "463:     assert ret == ret_send",
      "464:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "465:     target_script = send_mock.call_args_list[0][0][1]",
      "466:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "467:     mock_exec_cmd.assert_not_called()",
      "470: def test_run_ssh_pre_flight_connect(opts, target, tmp_path, caplog):",
      "471:     \"\"\"",
      "472:     test Single.run_ssh_pre_flight when you",
      "473:     can connect to the target",
      "474:     \"\"\"",
      "475:     pre_flight = tmp_path / \"script.sh\"",
      "476:     pre_flight.write_text(\"\")",
      "477:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "478:     single = ssh.Single(",
      "479:         opts,",
      "480:         opts[\"argv\"],",
      "481:         \"localhost\",",
      "482:         mods={},",
      "483:         fsclient=None,",
      "484:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "485:         mine=False,",
      "486:         winrm=False,",
      "487:         tty=True,",
      "489:     )",
      "490:     ret_exec_cmd = (\"\", \"\", 1)",
      "491:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "492:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "493:     tmp_file = tmp_path / \"tmp_file\"",
      "494:     mock_tmp = MagicMock()",
      "495:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "496:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "497:     ret_send = (",
      "498:         \"\",",
      "499:         \"\\rroot@192.168.1.187's password: \\n\\rpreflight.sh 0%    0 0.0KB/s   --:-- ETA\\rpreflight.sh 100%   20     2.7KB/s   00:00 \\n\",",
      "500:         0,",
      "501:     )",
      "502:     send_mock = MagicMock(return_value=ret_send)",
      "503:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "505:     with caplog.at_level(logging.TRACE):",
      "506:         with patch_send, patch_exec_cmd, patch_tmp:",
      "507:             ret = single.run_ssh_pre_flight()",
      "509:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
      "510:     assert ret == ret_exec_cmd",
      "511:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "512:     target_script = send_mock.call_args_list[0][0][1]",
      "513:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "514:     mock_exec_cmd.assert_called()",
      "517: def test_run_ssh_pre_flight_shutil_fails(opts, target, tmp_path):",
      "518:     \"\"\"",
      "519:     test Single.run_ssh_pre_flight when cannot",
      "520:     copyfile with shutil",
      "521:     \"\"\"",
      "522:     pre_flight = tmp_path / \"script.sh\"",
      "523:     pre_flight.write_text(\"\")",
      "524:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "525:     single = ssh.Single(",
      "526:         opts,",
      "527:         opts[\"argv\"],",
      "528:         \"localhost\",",
      "529:         mods={},",
      "530:         fsclient=None,",
      "531:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "532:         mine=False,",
      "533:         winrm=False,",
      "534:         tty=True,",
      "536:     )",
      "537:     ret_exec_cmd = (\"\", \"\", 1)",
      "538:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "539:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "540:     tmp_file = tmp_path / \"tmp_file\"",
      "541:     mock_tmp = MagicMock()",
      "542:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "543:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "544:     send_mock = MagicMock()",
      "545:     mock_shutil = MagicMock(side_effect=IOError(\"Permission Denied\"))",
      "546:     patch_shutil = patch(\"shutil.copyfile\", mock_shutil)",
      "547:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "549:     with patch_send, patch_exec_cmd, patch_tmp, patch_shutil:",
      "550:         ret = single.run_ssh_pre_flight()",
      "552:     assert ret == (",
      "553:         \"\",",
      "554:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
      "555:         1,",
      "556:     )",
      "557:     mock_exec_cmd.assert_not_called()",
      "558:     send_mock.assert_not_called()",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "434:     and script successfully runs",
      "435:     \"\"\"",
      "436:     opts[\"ssh_run_pre_flight\"] = True",
      "439:     if test_opts[0] is not None:",
      "440:         target[\"ssh_pre_flight_args\"] = test_opts[0]",
      "",
      "[Removed Lines]",
      "437:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "655:     pre_flight_script = tmp_path / \"script.sh\"",
      "656:     pre_flight_script.write_text(\"\")",
      "657:     target[\"ssh_pre_flight\"] = str(pre_flight_script)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "456:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 0))",
      "457:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "458:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "460:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "462:     with patch_os, patch_cmd, patch_exec_cmd, patch_shell_send:",
      "469: @pytest.mark.slow_test",
      "",
      "[Removed Lines]",
      "459:     patch_shell_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=None)",
      "463:         ret = single.run()",
      "464:         assert mock_exec_cmd.mock_calls[0].args[",
      "465:             0",
      "466:         ] == \"/bin/sh '/tmp/script.sh'{}\".format(expected_args)",
      "",
      "[Added Lines]",
      "679:     patch_shell_send = patch(",
      "680:         \"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0)",
      "681:     )",
      "685:         single.run()",
      "686:         script_args = mock_exec_cmd.mock_calls[0].args[0]",
      "687:         assert re.search(r\"\\/bin\\/sh '.[a-z0-9]+\", script_args)",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
      "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:     with patch(\"salt.roster.get_roster_file\", MagicMock(return_value=roster)):",
      "340:         ssh_obj = client._prep_ssh(**ssh_opts)",
      "341:         assert ssh_obj.opts.get(\"extra_filerefs\", None) == \"salt://foobar\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "344: def test_key_deploy_permission_denied_scp(tmp_path, opts):",
      "345:     \"\"\"",
      "346:     test \"key_deploy\" function when",
      "347:     permission denied authentication error",
      "348:     when attempting to use scp to copy file",
      "349:     to target",
      "350:     \"\"\"",
      "351:     host = \"localhost\"",
      "352:     passwd = \"password\"",
      "353:     usr = \"ssh-usr\"",
      "354:     opts[\"ssh_user\"] = usr",
      "355:     opts[\"tgt\"] = host",
      "357:     ssh_ret = {",
      "358:         host: {",
      "359:             \"stdout\": \"\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\",",
      "360:             \"stderr\": \"Permission denied, please try again.\\nPermission denied, please try again.\\nroot@192.168.1.187: Permission denied (publickey,gssapi-keyex,gssapi-with-micimport pudb; pu.dbassword).\\nscp: Connection closed\\n\",",
      "361:             \"retcode\": 255,",
      "362:         }",
      "363:     }",
      "364:     key_run_ret = {",
      "365:         \"localhost\": {",
      "366:             \"jid\": \"20230922155652279959\",",
      "367:             \"return\": \"test\",",
      "368:             \"retcode\": 0,",
      "369:             \"id\": \"test\",",
      "370:             \"fun\": \"cmd.run\",",
      "371:             \"fun_args\": [\"echo test\"],",
      "372:         }",
      "373:     }",
      "374:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "375:     with patch_roster_file:",
      "376:         client = ssh.SSH(opts)",
      "377:     patch_input = patch(\"builtins.input\", side_effect=[\"y\"])",
      "378:     patch_getpass = patch(\"getpass.getpass\", return_value=[\"password\"])",
      "379:     mock_key_run = MagicMock(return_value=key_run_ret)",
      "380:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "381:     with patch_input, patch_getpass, patch_key_run:",
      "382:         ret = client.key_deploy(host, ssh_ret)",
      "383:     assert mock_key_run.call_args_list[0][0] == (",
      "384:         host,",
      "385:         {\"passwd\": [passwd], \"host\": host, \"user\": usr},",
      "386:         True,",
      "387:     )",
      "388:     assert ret == key_run_ret",
      "389:     assert mock_key_run.call_count == 1",
      "392: def test_key_deploy_permission_denied_file_scp(tmp_path, opts):",
      "393:     \"\"\"",
      "394:     test \"key_deploy\" function when permission denied",
      "395:     due to not having access to copy the file to the target",
      "396:     We do not want to deploy the key, because this is not",
      "397:     an authentication to the target error.",
      "398:     \"\"\"",
      "399:     host = \"localhost\"",
      "400:     passwd = \"password\"",
      "401:     usr = \"ssh-usr\"",
      "402:     opts[\"ssh_user\"] = usr",
      "403:     opts[\"tgt\"] = host",
      "405:     mock_key_run = MagicMock(return_value=False)",
      "406:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "408:     ssh_ret = {",
      "409:         \"localhost\": {",
      "410:             \"stdout\": \"\",",
      "411:             \"stderr\": 'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "412:             \"retcode\": 1,",
      "413:         }",
      "414:     }",
      "415:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "416:     with patch_roster_file:",
      "417:         client = ssh.SSH(opts)",
      "418:     ret = client.key_deploy(host, ssh_ret)",
      "419:     assert ret == ssh_ret",
      "420:     assert mock_key_run.call_count == 0",
      "423: def test_key_deploy_no_permission_denied(tmp_path, opts):",
      "424:     \"\"\"",
      "425:     test \"key_deploy\" function when no permission denied",
      "426:     is returned",
      "427:     \"\"\"",
      "428:     host = \"localhost\"",
      "429:     passwd = \"password\"",
      "430:     usr = \"ssh-usr\"",
      "431:     opts[\"ssh_user\"] = usr",
      "432:     opts[\"tgt\"] = host",
      "434:     mock_key_run = MagicMock(return_value=False)",
      "435:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "436:     ssh_ret = {",
      "437:         \"localhost\": {",
      "438:             \"jid\": \"20230922161937998385\",",
      "439:             \"return\": \"test\",",
      "440:             \"retcode\": 0,",
      "441:             \"id\": \"test\",",
      "442:             \"fun\": \"cmd.run\",",
      "443:             \"fun_args\": [\"echo test\"],",
      "444:         }",
      "445:     }",
      "446:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "447:     with patch_roster_file:",
      "448:         client = ssh.SSH(opts)",
      "449:     ret = client.key_deploy(host, ssh_ret)",
      "450:     assert ret == ssh_ret",
      "451:     assert mock_key_run.call_count == 0",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1184c5ebfaae8458b7ba27c9965adfd9216c311c",
      "candidate_info": {
        "commit_hash": "1184c5ebfaae8458b7ba27c9965adfd9216c311c",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/1184c5ebfaae8458b7ba27c9965adfd9216c311c",
        "files": [
          "changelog/65383.security",
          "requirements/darwin.txt",
          "requirements/static/ci/common.in",
          "requirements/static/ci/py3.10/cloud.txt",
          "requirements/static/ci/py3.10/darwin.txt",
          "requirements/static/ci/py3.10/docs.txt",
          "requirements/static/ci/py3.10/freebsd.txt",
          "requirements/static/ci/py3.10/lint.txt",
          "requirements/static/ci/py3.10/linux.txt",
          "requirements/static/ci/py3.7/cloud.txt",
          "requirements/static/ci/py3.7/docs.txt",
          "requirements/static/ci/py3.7/freebsd.txt",
          "requirements/static/ci/py3.7/lint.txt",
          "requirements/static/ci/py3.7/linux.txt",
          "requirements/static/ci/py3.7/windows.txt",
          "requirements/static/ci/py3.8/cloud.txt",
          "requirements/static/ci/py3.8/docs.txt",
          "requirements/static/ci/py3.8/freebsd.txt",
          "requirements/static/ci/py3.8/lint.txt",
          "requirements/static/ci/py3.8/linux.txt",
          "requirements/static/ci/py3.8/windows.txt",
          "requirements/static/ci/py3.9/cloud.txt",
          "requirements/static/ci/py3.9/darwin.txt",
          "requirements/static/ci/py3.9/docs.txt",
          "requirements/static/ci/py3.9/freebsd.txt",
          "requirements/static/ci/py3.9/lint.txt",
          "requirements/static/ci/py3.9/linux.txt",
          "requirements/static/ci/py3.9/windows.txt",
          "requirements/static/pkg/py3.10/darwin.txt",
          "requirements/static/pkg/py3.7/windows.txt",
          "requirements/static/pkg/py3.8/windows.txt",
          "requirements/static/pkg/py3.9/darwin.txt",
          "requirements/static/pkg/py3.9/windows.txt",
          "requirements/windows.txt"
        ],
        "message": "[3005.4] Update gitpython to 3.1.37",
        "before_after_code_files": [
          "changelog/65383.security||changelog/65383.security",
          "requirements/static/ci/common.in||requirements/static/ci/common.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "changelog/65383.security||changelog/65383.security": [
          "File: changelog/65383.security -> changelog/65383.security",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Bump to `gitpython==3.1.37` due to https://github.com/advisories/GHSA-cwvm-v4w8-q58c",
          "",
          "---------------"
        ],
        "requirements/static/ci/common.in||requirements/static/ci/common.in": [
          "File: requirements/static/ci/common.in -> requirements/static/ci/common.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: docker",
          "18: etcd3-py==0.1.6 ; python_version >= '3.6'",
          "19: gitpython>=2.1.15 ; python_version <= \"3.6\"",
          "21: jmespath",
          "22: jsonschema",
          "23: junos-eznc==2.4.0; sys_platform != 'win32' and python_version <= '3.9'",
          "",
          "[Removed Lines]",
          "20: gitpython>=3.1.35 ; python_version >= \"3.7\"",
          "",
          "[Added Lines]",
          "20: gitpython>=3.1.37 ; python_version >= \"3.7\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c236eaac16964e1e7d925232d1ccec038c004c2",
      "candidate_info": {
        "commit_hash": "5c236eaac16964e1e7d925232d1ccec038c004c2",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/5c236eaac16964e1e7d925232d1ccec038c004c2",
        "files": [
          "changelog/65334.security",
          "requirements/static/ci/py3.10/cloud.txt",
          "requirements/static/ci/py3.10/darwin.txt",
          "requirements/static/ci/py3.10/docs.txt",
          "requirements/static/ci/py3.10/freebsd.txt",
          "requirements/static/ci/py3.10/lint.txt",
          "requirements/static/ci/py3.10/linux.txt",
          "requirements/static/ci/py3.6/cloud.txt",
          "requirements/static/ci/py3.6/docs.txt",
          "requirements/static/ci/py3.6/lint.txt",
          "requirements/static/ci/py3.6/linux.txt",
          "requirements/static/ci/py3.7/cloud.txt",
          "requirements/static/ci/py3.7/docs.txt",
          "requirements/static/ci/py3.7/freebsd.txt",
          "requirements/static/ci/py3.7/lint.txt",
          "requirements/static/ci/py3.7/linux.txt",
          "requirements/static/ci/py3.7/windows.txt",
          "requirements/static/ci/py3.8/cloud.txt",
          "requirements/static/ci/py3.8/docs.txt",
          "requirements/static/ci/py3.8/freebsd.txt",
          "requirements/static/ci/py3.8/lint.txt",
          "requirements/static/ci/py3.8/linux.txt",
          "requirements/static/ci/py3.8/windows.txt",
          "requirements/static/ci/py3.9/cloud.txt",
          "requirements/static/ci/py3.9/darwin.txt",
          "requirements/static/ci/py3.9/docs.txt",
          "requirements/static/ci/py3.9/freebsd.txt",
          "requirements/static/ci/py3.9/lint.txt",
          "requirements/static/ci/py3.9/linux.txt",
          "requirements/static/ci/py3.9/windows.txt",
          "requirements/static/pkg/py3.10/darwin.txt",
          "requirements/static/pkg/py3.10/freebsd.txt",
          "requirements/static/pkg/py3.10/linux.txt",
          "requirements/static/pkg/py3.6/linux.txt",
          "requirements/static/pkg/py3.7/freebsd.txt",
          "requirements/static/pkg/py3.7/linux.txt",
          "requirements/static/pkg/py3.7/windows.txt",
          "requirements/static/pkg/py3.8/freebsd.txt",
          "requirements/static/pkg/py3.8/linux.txt",
          "requirements/static/pkg/py3.8/windows.txt",
          "requirements/static/pkg/py3.9/darwin.txt",
          "requirements/static/pkg/py3.9/freebsd.txt",
          "requirements/static/pkg/py3.9/linux.txt",
          "requirements/static/pkg/py3.9/windows.txt"
        ],
        "message": "Bump urllib3 to 1.26.17 or 2.0.6",
        "before_after_code_files": [
          "changelog/65334.security||changelog/65334.security"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "changelog/65334.security||changelog/65334.security": [
          "File: changelog/65334.security -> changelog/65334.security",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: Bump to `urllib3==1.26.17` or `urllib3==2.0.6` due to https://github.com/advisories/GHSA-v845-jxx5-vc9f",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c33977f96fc36f066aba929926cb44bc8ce8b9f8",
      "candidate_info": {
        "commit_hash": "c33977f96fc36f066aba929926cb44bc8ce8b9f8",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/c33977f96fc36f066aba929926cb44bc8ce8b9f8",
        "files": [
          "requirements/static/ci/py3.10/cloud.txt",
          "requirements/static/ci/py3.10/darwin.txt",
          "requirements/static/ci/py3.10/freebsd.txt",
          "requirements/static/ci/py3.10/lint.txt",
          "requirements/static/ci/py3.10/linux.txt",
          "requirements/static/ci/py3.10/pkgtests.txt",
          "requirements/static/ci/py3.10/windows.txt",
          "requirements/static/ci/py3.7/cloud.txt",
          "requirements/static/ci/py3.7/freebsd.txt",
          "requirements/static/ci/py3.7/lint.txt",
          "requirements/static/ci/py3.7/linux.txt",
          "requirements/static/ci/py3.7/windows.txt",
          "requirements/static/ci/py3.8/cloud.txt",
          "requirements/static/ci/py3.8/freebsd.txt",
          "requirements/static/ci/py3.8/lint.txt",
          "requirements/static/ci/py3.8/linux.txt",
          "requirements/static/ci/py3.8/windows.txt",
          "requirements/static/ci/py3.9/cloud.txt",
          "requirements/static/ci/py3.9/darwin.txt",
          "requirements/static/ci/py3.9/freebsd.txt",
          "requirements/static/ci/py3.9/lint.txt",
          "requirements/static/ci/py3.9/linux.txt",
          "requirements/static/ci/py3.9/windows.txt",
          "tests/pytests/unit/modules/dockermod/test_module.py"
        ],
        "message": "Bump to `docker==6.1.2`\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/unit/modules/dockermod/test_module.py||tests/pytests/unit/modules/dockermod/test_module.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/modules/dockermod/test_module.py||tests/pytests/unit/modules/dockermod/test_module.py": [
          "File: tests/pytests/unit/modules/dockermod/test_module.py -> tests/pytests/unit/modules/dockermod/test_module.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import salt.loader",
          "10: import salt.modules.dockermod as docker_mod",
          "11: import salt.utils.platform",
          "12: from salt.exceptions import CommandExecutionError, SaltInvocationError",
          "13: from tests.support.mock import MagicMock, Mock, call, patch",
          "15: log = logging.getLogger(__name__)",
          "18:     \"docker\", reason=\"The python 'docker' package must be installed to run these tests\"",
          "19: )",
          "22: @pytest.fixture",
          "",
          "[Removed Lines]",
          "17: pytest.importorskip(",
          "",
          "[Added Lines]",
          "12: import salt.utils.versions",
          "18: docker = pytest.importorskip(",
          "21: docker_older_than_1_5_0_skip_marker = pytest.mark.skipif(",
          "22:     salt.utils.versions.Version(docker.__version__) < \"1.5.0\",",
          "23:     reason=\"docker module must be installed to run this test or is too old. <=1.5.0\",",
          "24: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "354:         mine_mock.assert_called_once()",
          "361: def test_list_networks():",
          "362:     \"\"\"",
          "363:     test list networks.",
          "",
          "[Removed Lines]",
          "357: @pytest.mark.skipif(",
          "358:     docker_mod.docker.version_info < (1, 5, 0),",
          "359:     reason=\"docker module must be installed to run this test or is too old. >=1.5.0\",",
          "360: )",
          "",
          "[Added Lines]",
          "362: @docker_older_than_1_5_0_skip_marker",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "378:     client.networks.assert_called_once_with(names=[\"foo\"], ids=[\"01234\"])",
          "385: def test_create_network():",
          "386:     \"\"\"",
          "387:     test create network.",
          "",
          "[Removed Lines]",
          "381: @pytest.mark.skipif(",
          "382:     docker_mod.docker.version_info < (1, 5, 0),",
          "383:     reason=\"docker module must be installed to run this test or is too old. >=1.5.0\",",
          "384: )",
          "",
          "[Added Lines]",
          "383: @docker_older_than_1_5_0_skip_marker",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "422:     )",
          "429: def test_remove_network():",
          "430:     \"\"\"",
          "431:     test remove network.",
          "",
          "[Removed Lines]",
          "425: @pytest.mark.skipif(",
          "426:     docker_mod.docker.version_info < (1, 5, 0),",
          "427:     reason=\"docker module must be installed to run this test or is too old. >=1.5.0\",",
          "428: )",
          "",
          "[Added Lines]",
          "424: @docker_older_than_1_5_0_skip_marker",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "444:     client.remove_network.assert_called_once_with(\"foo\")",
          "451: def test_inspect_network():",
          "452:     \"\"\"",
          "453:     test inspect network.",
          "",
          "[Removed Lines]",
          "447: @pytest.mark.skipif(",
          "448:     docker_mod.docker.version_info < (1, 5, 0),",
          "449:     reason=\"docker module must be installed to run this test or is too old. >=1.5.0\",",
          "450: )",
          "",
          "[Added Lines]",
          "443: @docker_older_than_1_5_0_skip_marker",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "466:     client.inspect_network.assert_called_once_with(\"foo\")",
          "473: def test_connect_container_to_network():",
          "474:     \"\"\"",
          "475:     test connect_container_to_network",
          "",
          "[Removed Lines]",
          "469: @pytest.mark.skipif(",
          "470:     docker_mod.docker.version_info < (1, 5, 0),",
          "471:     reason=\"docker module must be installed to run this test or is too old. >=1.5.0\",",
          "472: )",
          "",
          "[Added Lines]",
          "462: @docker_older_than_1_5_0_skip_marker",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "491:     client.connect_container_to_network.assert_called_once_with(\"container\", \"foo\")",
          "498: def test_disconnect_container_from_network():",
          "499:     \"\"\"",
          "500:     test disconnect_container_from_network",
          "",
          "[Removed Lines]",
          "494: @pytest.mark.skipif(",
          "495:     docker_mod.docker.version_info < (1, 5, 0),",
          "496:     reason=\"docker module must be installed to run this test or is too old. >=1.5.0\",",
          "497: )",
          "",
          "[Added Lines]",
          "484: @docker_older_than_1_5_0_skip_marker",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "513:     client.disconnect_container_from_network.assert_called_once_with(\"container\", \"foo\")",
          "520: def test_list_volumes():",
          "521:     \"\"\"",
          "522:     test list volumes.",
          "",
          "[Removed Lines]",
          "516: @pytest.mark.skipif(",
          "517:     docker_mod.docker.version_info < (1, 5, 0),",
          "518:     reason=\"docker module must be installed to run this test or is too old. >=1.5.0\",",
          "519: )",
          "",
          "[Added Lines]",
          "503: @docker_older_than_1_5_0_skip_marker",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "539:     )",
          "546: def test_create_volume():",
          "547:     \"\"\"",
          "548:     test create volume.",
          "",
          "[Removed Lines]",
          "542: @pytest.mark.skipif(",
          "543:     docker_mod.docker.version_info < (1, 5, 0),",
          "544:     reason=\"docker module must be installed to run this test or is too old. >=1.5.0\",",
          "545: )",
          "",
          "[Added Lines]",
          "526: @docker_older_than_1_5_0_skip_marker",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "569:     )",
          "576: def test_remove_volume():",
          "577:     \"\"\"",
          "578:     test remove volume.",
          "",
          "[Removed Lines]",
          "572: @pytest.mark.skipif(",
          "573:     docker_mod.docker.version_info < (1, 5, 0),",
          "574:     reason=\"docker module must be installed to run this test or is too old. >=1.5.0\",",
          "575: )",
          "",
          "[Added Lines]",
          "553: @docker_older_than_1_5_0_skip_marker",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "591:     client.remove_volume.assert_called_once_with(\"foo\")",
          "598: def test_inspect_volume():",
          "599:     \"\"\"",
          "600:     test inspect volume.",
          "",
          "[Removed Lines]",
          "594: @pytest.mark.skipif(",
          "595:     docker_mod.docker.version_info < (1, 5, 0),",
          "596:     reason=\"docker module must be installed to run this test or is too old. >=1.5.0\",",
          "597: )",
          "",
          "[Added Lines]",
          "572: @docker_older_than_1_5_0_skip_marker",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b7735ab8f6868610db7b25e29ecf35d5263d9c9b",
      "candidate_info": {
        "commit_hash": "b7735ab8f6868610db7b25e29ecf35d5263d9c9b",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/b7735ab8f6868610db7b25e29ecf35d5263d9c9b",
        "files": [
          "tests/integration/ssh/test_pre_flight.py",
          "tests/pytests/integration/ssh/test_pre_flight.py"
        ],
        "message": "Add pytest integration pre_flight integration tests for CVE-2023-34049",
        "before_after_code_files": [
          "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py",
          "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py": [
          "File: tests/integration/ssh/test_pre_flight.py -> tests/integration/ssh/test_pre_flight.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py": [
          "File: tests/pytests/integration/ssh/test_pre_flight.py -> tests/pytests/integration/ssh/test_pre_flight.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Test for ssh_pre_flight roster option",
          "3: \"\"\"",
          "5: import grp",
          "6: import os",
          "7: import pathlib",
          "8: import pwd",
          "9: import shutil",
          "10: import subprocess",
          "12: import pytest",
          "13: import salt.utils.files",
          "14: import yaml",
          "15: from saltfactories.utils import random_string",
          "18: def _custom_roster(roster_file, roster_data):",
          "19:     with salt.utils.files.fopen(roster_file, \"r\") as fp:",
          "20:         data = salt.utils.yaml.safe_load(fp)",
          "21:     for key, item in roster_data.items():",
          "22:         data[\"localhost\"][key] = item",
          "23:     with salt.utils.files.fopen(roster_file, \"w\") as fp:",
          "24:         yaml.safe_dump(data, fp)",
          "27: @pytest.fixture",
          "28: def _create_roster(salt_ssh_roster_file, tmp_path):",
          "29:     ret = {}",
          "30:     ret[\"roster\"] = salt_ssh_roster_file",
          "31:     ret[\"data\"] = {\"ssh_pre_flight\": str(tmp_path / \"ssh_pre_flight.sh\")}",
          "32:     ret[\"test_script\"] = str(tmp_path / \"test-pre-flight-script-worked.txt\")",
          "33:     ret[\"thin_dir\"] = tmp_path / \"thin_dir\"",
          "35:     with salt.utils.files.fopen(salt_ssh_roster_file, \"r\") as fp:",
          "36:         data = salt.utils.yaml.safe_load(fp)",
          "37:     pre_flight_script = ret[\"data\"][\"ssh_pre_flight\"]",
          "38:     data[\"localhost\"][\"ssh_pre_flight\"] = pre_flight_script",
          "39:     data[\"localhost\"][\"thin_dir\"] = str(ret[\"thin_dir\"])",
          "40:     with salt.utils.files.fopen(salt_ssh_roster_file, \"w\") as fp:",
          "41:         yaml.safe_dump(data, fp)",
          "43:     with salt.utils.files.fopen(pre_flight_script, \"w\") as fp:",
          "44:         fp.write(\"touch {}\".format(ret[\"test_script\"]))",
          "46:     yield ret",
          "47:     if ret[\"thin_dir\"].exists():",
          "48:         shutil.rmtree(ret[\"thin_dir\"])",
          "51: @pytest.mark.slow_test",
          "52: def test_ssh_pre_flight(salt_ssh_cli, caplog, _create_roster):",
          "53:     \"\"\"",
          "54:     test ssh when ssh_pre_flight is set",
          "55:     ensure the script runs successfully",
          "56:     \"\"\"",
          "57:     ret = salt_ssh_cli.run(\"test.ping\")",
          "58:     assert ret.returncode == 0",
          "60:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
          "63: @pytest.mark.slow_test",
          "64: def test_ssh_run_pre_flight(salt_ssh_cli, _create_roster):",
          "65:     \"\"\"",
          "66:     test ssh when --pre-flight is passed to salt-ssh",
          "67:     to ensure the script runs successfully",
          "68:     \"\"\"",
          "69:     # make sure we previously ran a command so the thin dir exists",
          "70:     ret = salt_ssh_cli.run(\"test.ping\")",
          "71:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
          "73:     # Now remeove the script to ensure pre_flight doesn't run",
          "74:     # without --pre-flight",
          "75:     pathlib.Path(_create_roster[\"test_script\"]).unlink()",
          "77:     assert salt_ssh_cli.run(\"test.ping\").returncode == 0",
          "78:     assert not pathlib.Path(_create_roster[\"test_script\"]).exists()",
          "80:     # Now ensure",
          "81:     ret = salt_ssh_cli.run(",
          "82:         \"test.ping\",",
          "83:         \"--pre-flight\",",
          "84:     )",
          "85:     assert ret.returncode == 0",
          "86:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
          "89: @pytest.mark.slow_test",
          "90: def test_ssh_run_pre_flight_args(salt_ssh_cli, _create_roster):",
          "91:     \"\"\"",
          "92:     test ssh when --pre-flight is passed to salt-ssh",
          "93:     to ensure the script runs successfully passing some args",
          "94:     \"\"\"",
          "95:     _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight_args\": \"foobar test\"})",
          "96:     # Create pre_flight script that accepts args",
          "97:     test_script = _create_roster[\"test_script\"]",
          "98:     test_script_1 = pathlib.Path(test_script + \"-foobar\")",
          "99:     test_script_2 = pathlib.Path(test_script + \"-test\")",
          "100:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
          "101:         fp.write(",
          "102:             f\"\"\"",
          "103:         touch {str(test_script)}-$1",
          "104:         touch {str(test_script)}-$2",
          "105:         \"\"\"",
          "106:         )",
          "107:     ret = salt_ssh_cli.run(\"test.ping\")",
          "108:     assert ret.returncode == 0",
          "109:     assert test_script_1.exists()",
          "110:     assert test_script_2.exists()",
          "111:     pathlib.Path(test_script_1).unlink()",
          "112:     pathlib.Path(test_script_2).unlink()",
          "114:     ret = salt_ssh_cli.run(\"test.ping\")",
          "115:     assert ret.returncode == 0",
          "116:     assert not test_script_1.exists()",
          "117:     assert not test_script_2.exists()",
          "119:     ret = salt_ssh_cli.run(",
          "120:         \"test.ping\",",
          "121:         \"--pre-flight\",",
          "122:     )",
          "123:     assert ret.returncode == 0",
          "124:     assert test_script_1.exists()",
          "125:     assert test_script_2.exists()",
          "128: @pytest.mark.slow_test",
          "129: def test_ssh_run_pre_flight_args_prevent_injection(",
          "130:     salt_ssh_cli, _create_roster, tmp_path",
          "131: ):",
          "132:     \"\"\"",
          "133:     test ssh when --pre-flight is passed to salt-ssh",
          "134:     and evil arguments are used in order to produce shell injection",
          "135:     \"\"\"",
          "136:     injected_file = tmp_path / \"injection\"",
          "137:     _custom_roster(",
          "138:         salt_ssh_cli.roster_file,",
          "139:         {\"ssh_pre_flight_args\": f\"foobar; echo injected > {str(injected_file)}\"},",
          "140:     )",
          "141:     # Create pre_flight script that accepts args",
          "142:     test_script = _create_roster[\"test_script\"]",
          "143:     test_script_1 = pathlib.Path(test_script + \"-echo\")",
          "144:     test_script_2 = pathlib.Path(test_script + \"-foobar;\")",
          "145:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
          "146:         fp.write(",
          "147:             f\"\"\"",
          "148:         touch {str(test_script)}-$1",
          "149:         touch {str(test_script)}-$2",
          "150:         \"\"\"",
          "151:         )",
          "153:     # make sure we previously ran a command so the thin dir exists",
          "154:     ret = salt_ssh_cli.run(\"test.ping\")",
          "155:     assert ret.returncode == 0",
          "156:     assert test_script_1.exists()",
          "157:     assert test_script_2.exists()",
          "158:     test_script_1.unlink()",
          "159:     test_script_2.unlink()",
          "160:     assert not injected_file.is_file()",
          "162:     ret = salt_ssh_cli.run(",
          "163:         \"test.ping\",",
          "164:         \"--pre-flight\",",
          "165:     )",
          "166:     assert ret.returncode == 0",
          "168:     assert test_script_1.exists()",
          "169:     assert test_script_2.exists()",
          "170:     assert not pathlib.Path(",
          "171:         injected_file",
          "172:     ).is_file(), \"File injection suceeded. This shouldn't happend\"",
          "175: @pytest.mark.flaky(max_runs=4)",
          "176: @pytest.mark.slow_test",
          "177: def test_ssh_run_pre_flight_failure(salt_ssh_cli, _create_roster):",
          "178:     \"\"\"",
          "179:     test ssh_pre_flight when there is a failure",
          "180:     in the script.",
          "181:     \"\"\"",
          "182:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
          "183:         fp_.write(\"exit 2\")",
          "185:     ret = salt_ssh_cli.run(",
          "186:         \"test.ping\",",
          "187:         \"--pre-flight\",",
          "188:     )",
          "189:     assert ret.data[\"retcode\"] == 2",
          "192: @pytest.fixture",
          "193: def account():",
          "194:     username = random_string(\"test-account-\", uppercase=False)",
          "195:     with pytest.helpers.create_account(username=username) as account:",
          "196:         yield account",
          "199: @pytest.mark.slow_test",
          "200: def test_ssh_pre_flight_script(salt_ssh_cli, caplog, _create_roster, tmp_path, account):",
          "201:     \"\"\"",
          "202:     Test to ensure user cannot create and run a script",
          "203:     with the expected pre_flight script path on target.",
          "204:     \"\"\"",
          "205:     try:",
          "206:         script = pathlib.Path.home() / \"hacked\"",
          "207:         tmp_preflight = pathlib.Path(\"/tmp\", \"ssh_pre_flight.sh\")",
          "208:         tmp_preflight.write_text(f\"touch {script}\")",
          "209:         os.chown(tmp_preflight, account.info.uid, account.info.gid)",
          "210:         ret = salt_ssh_cli.run(\"test.ping\")",
          "211:         assert not script.is_file()",
          "212:         assert ret.returncode == 0",
          "213:         assert ret.stdout == '{\\n\"localhost\": true\\n}\\n'",
          "214:     finally:",
          "215:         for _file in [script, tmp_preflight]:",
          "216:             if _file.is_file():",
          "217:                 _file.unlink()",
          "220: def demote(user_uid, user_gid):",
          "221:     def result():",
          "222:         # os.setgid does not remove group membership, so we remove them here so they are REALLY non-root",
          "223:         os.setgroups([])",
          "224:         os.setgid(user_gid)",
          "225:         os.setuid(user_uid)",
          "227:     return result",
          "230: @pytest.mark.slow_test",
          "231: def test_ssh_pre_flight_perms(salt_ssh_cli, caplog, _create_roster, account):",
          "232:     \"\"\"",
          "233:     Test to ensure standard user cannot run pre flight script",
          "234:     on target when user sets wrong permissions (777) on",
          "235:     ssh_pre_flight script.",
          "236:     \"\"\"",
          "237:     try:",
          "238:         script = pathlib.Path(\"/tmp\", \"itworked\")",
          "239:         preflight = pathlib.Path(\"/ssh_pre_flight.sh\")",
          "240:         preflight.write_text(f\"touch {str(script)}\")",
          "241:         tmp_preflight = pathlib.Path(\"/tmp\", preflight.name)",
          "243:         _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight\": str(preflight)})",
          "244:         preflight.chmod(0o0777)",
          "245:         run_script = pathlib.Path(\"/run_script\")",
          "246:         run_script.write_text(",
          "247:             f\"\"\"",
          "248:         x=1",
          "249:         while [ $x -le 200000 ]; do",
          "250:             SCRIPT=`bash {str(tmp_preflight)} 2> /dev/null; echo $?`",
          "251:             if [ ${{SCRIPT}} == 0 ]; then",
          "252:                 break",
          "253:             fi",
          "254:             x=$(( $x + 1 ))",
          "255:         done",
          "256:         \"\"\"",
          "257:         )",
          "258:         run_script.chmod(0o0777)",
          "259:         # pylint: disable=W1509",
          "260:         ret = subprocess.Popen(",
          "261:             [\"sh\", f\"{run_script}\"],",
          "262:             preexec_fn=demote(account.info.uid, account.info.gid),",
          "263:             stdout=None,",
          "264:             stderr=None,",
          "265:             stdin=None,",
          "266:             universal_newlines=True,",
          "267:         )",
          "268:         # pylint: enable=W1509",
          "269:         ret = salt_ssh_cli.run(\"test.ping\")",
          "270:         assert ret.returncode == 0",
          "272:         # Lets make sure a different user other than root",
          "273:         # Didn't run the script",
          "274:         assert os.stat(script).st_uid != account.info.uid",
          "275:         assert script.is_file()",
          "276:     finally:",
          "277:         for _file in [script, preflight, tmp_preflight, run_script]:",
          "278:             if _file.is_file():",
          "279:                 _file.unlink()",
          "282: @pytest.mark.slow_test",
          "283: def test_ssh_run_pre_flight_target_file_perms(salt_ssh_cli, _create_roster, tmp_path):",
          "284:     \"\"\"",
          "285:     test ssh_pre_flight to ensure the target pre flight script",
          "286:     has the correct perms",
          "287:     \"\"\"",
          "288:     perms_file = tmp_path / \"perms\"",
          "289:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
          "290:         fp_.write(",
          "291:             f\"\"\"",
          "292:         SCRIPT_NAME=$0",
          "293:         stat -L -c \"%a %G %U\" $SCRIPT_NAME > {perms_file}",
          "294:         \"\"\"",
          "295:         )",
          "297:     ret = salt_ssh_cli.run(",
          "298:         \"test.ping\",",
          "299:         \"--pre-flight\",",
          "300:     )",
          "301:     assert ret.returncode == 0",
          "302:     with salt.utils.files.fopen(perms_file) as fp:",
          "303:         data = fp.read()",
          "304:     assert data.split()[0] == \"600\"",
          "305:     uid = os.getuid()",
          "306:     gid = os.getgid()",
          "307:     assert data.split()[1] == grp.getgrgid(gid).gr_name",
          "308:     assert data.split()[2] == pwd.getpwuid(uid).pw_name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec38a2e5bb7451df0933ca3b02690f40ba8a714b",
      "candidate_info": {
        "commit_hash": "ec38a2e5bb7451df0933ca3b02690f40ba8a714b",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/ec38a2e5bb7451df0933ca3b02690f40ba8a714b",
        "files": [
          "changelog/65383.security.md",
          "requirements/darwin.txt",
          "requirements/static/ci/common.in",
          "requirements/static/ci/py3.10/cloud.txt",
          "requirements/static/ci/py3.10/darwin.txt",
          "requirements/static/ci/py3.10/freebsd.txt",
          "requirements/static/ci/py3.10/lint.txt",
          "requirements/static/ci/py3.10/linux.txt",
          "requirements/static/ci/py3.10/windows.txt",
          "requirements/static/ci/py3.7/cloud.txt",
          "requirements/static/ci/py3.7/freebsd.txt",
          "requirements/static/ci/py3.7/lint.txt",
          "requirements/static/ci/py3.7/linux.txt",
          "requirements/static/ci/py3.7/windows.txt",
          "requirements/static/ci/py3.8/cloud.txt",
          "requirements/static/ci/py3.8/freebsd.txt",
          "requirements/static/ci/py3.8/lint.txt",
          "requirements/static/ci/py3.8/linux.txt",
          "requirements/static/ci/py3.8/windows.txt",
          "requirements/static/ci/py3.9/cloud.txt",
          "requirements/static/ci/py3.9/darwin.txt",
          "requirements/static/ci/py3.9/freebsd.txt",
          "requirements/static/ci/py3.9/lint.txt",
          "requirements/static/ci/py3.9/linux.txt",
          "requirements/static/ci/py3.9/windows.txt",
          "requirements/static/pkg/py3.10/darwin.txt",
          "requirements/static/pkg/py3.10/windows.txt",
          "requirements/static/pkg/py3.7/windows.txt",
          "requirements/static/pkg/py3.8/windows.txt",
          "requirements/static/pkg/py3.9/darwin.txt",
          "requirements/static/pkg/py3.9/windows.txt",
          "requirements/windows.txt"
        ],
        "message": "[3006.4] Update gitpython to 3.1.37",
        "before_after_code_files": [
          "requirements/static/ci/common.in||requirements/static/ci/common.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "requirements/static/ci/common.in||requirements/static/ci/common.in": [
          "File: requirements/static/ci/common.in -> requirements/static/ci/common.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: dnspython",
          "15: docker",
          "16: etcd3-py==0.1.6",
          "18: jmespath",
          "19: jsonschema",
          "20: junos-eznc; sys_platform != 'win32' and python_version <= '3.10'",
          "",
          "[Removed Lines]",
          "17: gitpython>=3.1.35",
          "",
          "[Added Lines]",
          "17: gitpython>=3.1.37",
          "",
          "---------------"
        ]
      }
    }
  ]
}