{
  "cve_id": "CVE-2017-15703",
  "cve_desc": "Any authenticated user (valid client certificate but without ACL permissions) could upload a template which contained malicious code and caused a denial of service via Java deserialization attack. The fix to properly handle Java deserialization was applied on the Apache NiFi 1.4.0 release. Users running a prior 1.x release should upgrade to the appropriate release.",
  "repo": "apache/nifi",
  "patch_hash": "9e2c7be7d3c6a380c5f61074d9a5a690b617c3dc",
  "patch_info": {
    "commit_hash": "9e2c7be7d3c6a380c5f61074d9a5a690b617c3dc",
    "repo": "apache/nifi",
    "commit_url": "https://github.com/apache/nifi/commit/9e2c7be7d3c6a380c5f61074d9a5a690b617c3dc",
    "files": [
      "nifi-commons/nifi-security-utils/pom.xml",
      "nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java",
      "nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy",
      "nifi-commons/nifi-security-utils/src/test/resources/xxe_template.xml",
      "nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/pom.xml",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/pom.xml",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java",
      "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/pom.xml",
      "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java"
    ],
    "message": "NIFI-4353 - Added XmlUtils class. - Added unit test. - Added XXE test resource. - Refactored JAXB unmarshalling globally to prevent XXE attacks. - Refactored duplicated/legacy code. - Cleaned up commented code. - Switched from FileInputStream back to StreamSource in AuthorizerFactoryBean. - This closes #2134",
    "before_after_code_files": [
      "nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java||nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java",
      "nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy||nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy",
      "nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java||nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
      "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java",
      "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java||nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java"
    ]
  },
  "patch_diff": {
    "nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java||nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java": [
      "File: nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java -> nifi-commons/nifi-security-utils/src/main/java/org/apache/nifi/security/xml/XmlUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.apache.nifi.security.xml;",
      "19: import javax.xml.stream.XMLInputFactory;",
      "20: import javax.xml.stream.XMLStreamException;",
      "21: import javax.xml.stream.XMLStreamReader;",
      "22: import javax.xml.transform.stream.StreamSource;",
      "23: import java.io.InputStream;",
      "25: public class XmlUtils {",
      "27:     public static XMLStreamReader createSafeReader(InputStream inputStream) throws XMLStreamException {",
      "28:         if (inputStream == null) {",
      "29:             throw new IllegalArgumentException(\"The provided input stream cannot be null\");",
      "30:         }",
      "31:         return createSafeReader(new StreamSource(inputStream));",
      "32:     }",
      "34:     public static XMLStreamReader createSafeReader(StreamSource source) throws XMLStreamException {",
      "35:         if (source == null) {",
      "36:             throw new IllegalArgumentException(\"The provided source cannot be null\");",
      "37:         }",
      "39:         XMLInputFactory xif = XMLInputFactory.newFactory();",
      "40:         xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);",
      "41:         xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);",
      "42:         return xif.createXMLStreamReader(source);",
      "43:     }",
      "44: }",
      "",
      "---------------"
    ],
    "nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy||nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy": [
      "File: nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy -> nifi-commons/nifi-security-utils/src/test/groovy/org/apache/nifi/security/xml/XmlUtilsTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17: package org.apache.nifi.security.xml",
      "19: import org.junit.After",
      "20: import org.junit.Before",
      "21: import org.junit.BeforeClass",
      "22: import org.junit.Test",
      "23: import org.junit.runner.RunWith",
      "24: import org.junit.runners.JUnit4",
      "25: import org.slf4j.Logger",
      "26: import org.slf4j.LoggerFactory",
      "28: import javax.xml.bind.JAXBContext",
      "29: import javax.xml.bind.UnmarshalException",
      "30: import javax.xml.bind.Unmarshaller",
      "31: import javax.xml.bind.annotation.XmlAccessType",
      "32: import javax.xml.bind.annotation.XmlAccessorType",
      "33: import javax.xml.bind.annotation.XmlAttribute",
      "34: import javax.xml.bind.annotation.XmlRootElement",
      "35: import javax.xml.stream.XMLStreamReader",
      "37: import static groovy.test.GroovyAssert.shouldFail",
      "39: @RunWith(JUnit4.class)",
      "40: class XmlUtilsTest {",
      "41:     private static final Logger logger = LoggerFactory.getLogger(XmlUtilsTest.class)",
      "43:     @BeforeClass",
      "44:     static void setUpOnce() throws Exception {",
      "45:         logger.metaClass.methodMissing = { String name, args ->",
      "46:             logger.info(\"[${name?.toUpperCase()}] ${(args as List).join(\" \")}\")",
      "47:         }",
      "48:     }",
      "50:     @Before",
      "51:     void setUp() throws Exception {",
      "53:     }",
      "55:     @After",
      "56:     void tearDown() throws Exception {",
      "58:     }",
      "60:     @Test",
      "61:     void testShouldHandleXXEInUnmarshal() {",
      "63:         final String XXE_TEMPLATE_FILEPATH = \"src/test/resources/xxe_template.xml\"",
      "64:         InputStream templateStream = new File(XXE_TEMPLATE_FILEPATH).newInputStream()",
      "66:         JAXBContext context = JAXBContext.newInstance(XmlObject.class)",
      "69:         def msg = shouldFail(UnmarshalException) {",
      "70:             Unmarshaller unmarshaller = context.createUnmarshaller()",
      "71:             XMLStreamReader xsr = XmlUtils.createSafeReader(templateStream)",
      "72:             def parsed = unmarshaller.unmarshal(xsr, XmlObject.class)",
      "73:             logger.info(\"Unmarshalled ${parsed.toString()}\")",
      "74:         }",
      "77:         logger.expected(msg)",
      "78:         assert msg =~ \"XMLStreamException: ParseError \"",
      "79:     }",
      "80: }",
      "82: @XmlAccessorType( XmlAccessType.NONE )",
      "83: @XmlRootElement(name = \"object\")",
      "84: class XmlObject {",
      "85:     @XmlAttribute",
      "86:     String name",
      "88:     @XmlAttribute",
      "89:     String description",
      "91:     @XmlAttribute",
      "92:     String groupId",
      "94:     @XmlAttribute",
      "95:     String timestamp",
      "96: }",
      "",
      "---------------"
    ],
    "nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java||nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java": [
      "File: nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java -> nifi-commons/nifi-site-to-site-client/src/main/java/org/apache/nifi/remote/cluster/ClusterNodeInformation.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.InputStream;",
      "20: import java.io.OutputStream;",
      "21: import java.util.Collection;",
      "23: import javax.xml.bind.JAXBContext;",
      "24: import javax.xml.bind.JAXBException;",
      "25: import javax.xml.bind.Marshaller;",
      "26: import javax.xml.bind.Unmarshaller;",
      "27: import javax.xml.bind.annotation.XmlRootElement;",
      "28: import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;",
      "30: @XmlRootElement",
      "31: public class ClusterNodeInformation {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import javax.xml.stream.XMLStreamException;",
      "29: import javax.xml.stream.XMLStreamReader;",
      "30: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "61:     }",
      "63:     public static ClusterNodeInformation unmarshal(final InputStream is) throws JAXBException {",
      "66:     }",
      "67: }",
      "",
      "[Removed Lines]",
      "64:         final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "65:         return (ClusterNodeInformation) unmarshaller.unmarshal(is);",
      "",
      "[Added Lines]",
      "66:         try {",
      "67:             final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "68:             final XMLStreamReader xsr = XmlUtils.createSafeReader(is);",
      "69:             return (ClusterNodeInformation) unmarshaller.unmarshal(xsr);",
      "70:         } catch (XMLStreamException e) {",
      "71:             throw new JAXBException(\"Error unmarshalling the cluster node information\", e);",
      "72:         }",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/src/main/java/org/apache/nifi/authorization/AuthorizerFactoryBean.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.authorization;",
      "19: import org.apache.commons.lang3.StringUtils;",
      "20: import org.apache.nifi.authorization.annotation.AuthorizerContext;",
      "21: import org.apache.nifi.authorization.exception.AuthorizationAccessException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.io.File;",
      "20: import java.lang.reflect.Constructor;",
      "21: import java.lang.reflect.Field;",
      "22: import java.lang.reflect.InvocationTargetException;",
      "23: import java.lang.reflect.Method;",
      "24: import java.net.URL;",
      "25: import java.net.URLClassLoader;",
      "26: import java.util.HashMap;",
      "27: import java.util.List;",
      "28: import java.util.Map;",
      "29: import javax.xml.XMLConstants;",
      "30: import javax.xml.bind.JAXBContext;",
      "31: import javax.xml.bind.JAXBElement;",
      "32: import javax.xml.bind.JAXBException;",
      "33: import javax.xml.bind.Unmarshaller;",
      "34: import javax.xml.stream.XMLStreamReader;",
      "35: import javax.xml.transform.stream.StreamSource;",
      "36: import javax.xml.validation.Schema;",
      "37: import javax.xml.validation.SchemaFactory;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25: import org.apache.nifi.authorization.generated.Property;",
      "26: import org.apache.nifi.bundle.Bundle;",
      "27: import org.apache.nifi.nar.ExtensionManager;",
      "28: import org.apache.nifi.util.NiFiProperties;",
      "29: import org.apache.nifi.util.file.classloader.ClassLoaderUtils;",
      "30: import org.slf4j.Logger;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "33: import org.springframework.beans.factory.FactoryBean;",
      "34: import org.xml.sax.SAXException;",
      "",
      "[Removed Lines]",
      "36: import javax.xml.XMLConstants;",
      "37: import javax.xml.bind.JAXBContext;",
      "38: import javax.xml.bind.JAXBElement;",
      "39: import javax.xml.bind.JAXBException;",
      "40: import javax.xml.bind.Unmarshaller;",
      "41: import javax.xml.transform.stream.StreamSource;",
      "42: import javax.xml.validation.Schema;",
      "43: import javax.xml.validation.SchemaFactory;",
      "44: import java.io.File;",
      "45: import java.lang.reflect.Constructor;",
      "46: import java.lang.reflect.Field;",
      "47: import java.lang.reflect.InvocationTargetException;",
      "48: import java.lang.reflect.Method;",
      "49: import java.net.URL;",
      "50: import java.net.URLClassLoader;",
      "51: import java.util.HashMap;",
      "52: import java.util.List;",
      "53: import java.util.Map;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "168:                 final Schema schema = schemaFactory.newSchema(Authorizers.class.getResource(AUTHORIZERS_XSD));",
      "171:                 final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "172:                 unmarshaller.setSchema(schema);",
      "174:                 return element.getValue();",
      "175:             } catch (SAXException | JAXBException e) {",
      "176:                 throw new Exception(\"Unable to load the authorizer configuration file at: \" + authorizersConfigurationFile.getAbsolutePath(), e);",
      "",
      "[Removed Lines]",
      "173:                 final JAXBElement<Authorizers> element = unmarshaller.unmarshal(new StreamSource(authorizersConfigurationFile), Authorizers.class);",
      "",
      "[Added Lines]",
      "172:                 final XMLStreamReader xsr = XmlUtils.createSafeReader(new StreamSource(authorizersConfigurationFile));",
      "175:                 final JAXBElement<Authorizers> element = unmarshaller.unmarshal(xsr, Authorizers.class);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.authorization;",
      "19: import org.apache.commons.lang3.StringUtils;",
      "20: import org.apache.nifi.authorization.annotation.AuthorizerContext;",
      "21: import org.apache.nifi.authorization.exception.AuthorizationAccessException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.io.ByteArrayInputStream;",
      "20: import java.io.File;",
      "21: import java.io.IOException;",
      "22: import java.io.StringWriter;",
      "23: import java.nio.charset.StandardCharsets;",
      "24: import java.util.ArrayList;",
      "25: import java.util.Collections;",
      "26: import java.util.Comparator;",
      "27: import java.util.Date;",
      "28: import java.util.HashSet;",
      "29: import java.util.Iterator;",
      "30: import java.util.List;",
      "31: import java.util.Map;",
      "32: import java.util.Set;",
      "33: import java.util.concurrent.atomic.AtomicReference;",
      "34: import java.util.regex.Matcher;",
      "35: import java.util.regex.Pattern;",
      "36: import javax.xml.XMLConstants;",
      "37: import javax.xml.bind.JAXBContext;",
      "38: import javax.xml.bind.JAXBElement;",
      "39: import javax.xml.bind.JAXBException;",
      "40: import javax.xml.bind.Marshaller;",
      "41: import javax.xml.bind.Unmarshaller;",
      "42: import javax.xml.parsers.DocumentBuilder;",
      "43: import javax.xml.parsers.DocumentBuilderFactory;",
      "44: import javax.xml.parsers.ParserConfigurationException;",
      "45: import javax.xml.stream.XMLOutputFactory;",
      "46: import javax.xml.stream.XMLStreamException;",
      "47: import javax.xml.stream.XMLStreamReader;",
      "48: import javax.xml.stream.XMLStreamWriter;",
      "49: import javax.xml.transform.stream.StreamSource;",
      "50: import javax.xml.validation.Schema;",
      "51: import javax.xml.validation.SchemaFactory;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30: import org.apache.nifi.authorization.util.IdentityMapping;",
      "31: import org.apache.nifi.authorization.util.IdentityMappingUtil;",
      "32: import org.apache.nifi.components.PropertyValue;",
      "33: import org.apache.nifi.user.generated.Users;",
      "34: import org.apache.nifi.util.NiFiProperties;",
      "35: import org.apache.nifi.util.file.FileUtils;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42: import org.w3c.dom.NodeList;",
      "43: import org.xml.sax.SAXException;",
      "78: public class FileAccessPolicyProvider implements ConfigurableAccessPolicyProvider {",
      "80:     private static final Logger logger = LoggerFactory.getLogger(FileAccessPolicyProvider.class);",
      "",
      "[Removed Lines]",
      "45: import javax.xml.XMLConstants;",
      "46: import javax.xml.bind.JAXBContext;",
      "47: import javax.xml.bind.JAXBElement;",
      "48: import javax.xml.bind.JAXBException;",
      "49: import javax.xml.bind.Marshaller;",
      "50: import javax.xml.bind.Unmarshaller;",
      "51: import javax.xml.parsers.DocumentBuilder;",
      "52: import javax.xml.parsers.DocumentBuilderFactory;",
      "53: import javax.xml.parsers.ParserConfigurationException;",
      "54: import javax.xml.stream.XMLOutputFactory;",
      "55: import javax.xml.stream.XMLStreamException;",
      "56: import javax.xml.stream.XMLStreamWriter;",
      "57: import javax.xml.transform.stream.StreamSource;",
      "58: import javax.xml.validation.Schema;",
      "59: import javax.xml.validation.SchemaFactory;",
      "60: import java.io.ByteArrayInputStream;",
      "61: import java.io.File;",
      "62: import java.io.IOException;",
      "63: import java.io.StringWriter;",
      "64: import java.nio.charset.StandardCharsets;",
      "65: import java.util.ArrayList;",
      "66: import java.util.Collections;",
      "67: import java.util.Comparator;",
      "68: import java.util.Date;",
      "69: import java.util.HashSet;",
      "70: import java.util.Iterator;",
      "71: import java.util.List;",
      "72: import java.util.Map;",
      "73: import java.util.Set;",
      "74: import java.util.concurrent.atomic.AtomicReference;",
      "75: import java.util.regex.Matcher;",
      "76: import java.util.regex.Pattern;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "528:     }",
      "530:     private Authorizations unmarshallAuthorizations() throws JAXBException {",
      "536:     }",
      "",
      "[Removed Lines]",
      "531:         final Unmarshaller unmarshaller = JAXB_AUTHORIZATIONS_CONTEXT.createUnmarshaller();",
      "532:         unmarshaller.setSchema(authorizationsSchema);",
      "534:         final JAXBElement<Authorizations> element = unmarshaller.unmarshal(new StreamSource(authorizationsFile), Authorizations.class);",
      "535:         return element.getValue();",
      "",
      "[Added Lines]",
      "532:         try {",
      "533:             final XMLStreamReader xsr = XmlUtils.createSafeReader(new StreamSource(authorizationsFile));",
      "534:             final Unmarshaller unmarshaller = JAXB_AUTHORIZATIONS_CONTEXT.createUnmarshaller();",
      "535:             unmarshaller.setSchema(authorizationsSchema);",
      "537:             final JAXBElement<Authorizations> element = unmarshaller.unmarshal(xsr, Authorizations.class);",
      "538:             return element.getValue();",
      "539:         } catch (XMLStreamException e) {",
      "540:             logger.error(\"Encountered an error reading authorizations file: \", e);",
      "541:             throw new JAXBException(\"Error reading authorizations file\", e);",
      "542:         }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "626:         final Unmarshaller unmarshaller = JAXB_USERS_CONTEXT.createUnmarshaller();",
      "627:         unmarshaller.setSchema(usersSchema);",
      "629:         final JAXBElement<Users> element = unmarshaller.unmarshal(",
      "632:         final org.apache.nifi.user.generated.Users users = element.getValue();",
      "633:         if (users.getUser().isEmpty()) {",
      "",
      "[Removed Lines]",
      "630:                 new StreamSource(authorizedUsersFile), org.apache.nifi.user.generated.Users.class);",
      "",
      "[Added Lines]",
      "636:         final XMLStreamReader xsr;",
      "637:         try {",
      "638:             xsr = XmlUtils.createSafeReader(new StreamSource(authorizedUsersFile));",
      "639:         } catch (XMLStreamException e) {",
      "640:             logger.error(\"Encountered an error reading authorized users file: \", e);",
      "641:             throw new JAXBException(\"Error reading authorized users file\", e);",
      "642:         }",
      "644:                 xsr, org.apache.nifi.user.generated.Users.class);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileUserGroupProvider.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.authorization;",
      "19: import org.apache.commons.lang3.StringUtils;",
      "20: import org.apache.nifi.authorization.annotation.AuthorizerContext;",
      "21: import org.apache.nifi.authorization.exception.AuthorizationAccessException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.io.ByteArrayInputStream;",
      "20: import java.io.File;",
      "21: import java.io.IOException;",
      "22: import java.io.StringWriter;",
      "23: import java.nio.charset.StandardCharsets;",
      "24: import java.util.ArrayList;",
      "25: import java.util.Collections;",
      "26: import java.util.Comparator;",
      "27: import java.util.Date;",
      "28: import java.util.HashSet;",
      "29: import java.util.Iterator;",
      "30: import java.util.List;",
      "31: import java.util.Map;",
      "32: import java.util.Set;",
      "33: import java.util.concurrent.atomic.AtomicReference;",
      "34: import java.util.regex.Matcher;",
      "35: import java.util.regex.Pattern;",
      "36: import javax.xml.XMLConstants;",
      "37: import javax.xml.bind.JAXBContext;",
      "38: import javax.xml.bind.JAXBElement;",
      "39: import javax.xml.bind.JAXBException;",
      "40: import javax.xml.bind.Marshaller;",
      "41: import javax.xml.bind.Unmarshaller;",
      "42: import javax.xml.parsers.DocumentBuilder;",
      "43: import javax.xml.parsers.DocumentBuilderFactory;",
      "44: import javax.xml.parsers.ParserConfigurationException;",
      "45: import javax.xml.stream.XMLOutputFactory;",
      "46: import javax.xml.stream.XMLStreamException;",
      "47: import javax.xml.stream.XMLStreamReader;",
      "48: import javax.xml.stream.XMLStreamWriter;",
      "49: import javax.xml.transform.stream.StreamSource;",
      "50: import javax.xml.validation.Schema;",
      "51: import javax.xml.validation.SchemaFactory;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28: import org.apache.nifi.authorization.util.IdentityMapping;",
      "29: import org.apache.nifi.authorization.util.IdentityMappingUtil;",
      "30: import org.apache.nifi.components.PropertyValue;",
      "31: import org.apache.nifi.util.NiFiProperties;",
      "32: import org.apache.nifi.util.file.FileUtils;",
      "33: import org.slf4j.Logger;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "38: import org.w3c.dom.NodeList;",
      "39: import org.xml.sax.SAXException;",
      "74: public class FileUserGroupProvider implements ConfigurableUserGroupProvider {",
      "76:     private static final Logger logger = LoggerFactory.getLogger(FileUserGroupProvider.class);",
      "",
      "[Removed Lines]",
      "41: import javax.xml.XMLConstants;",
      "42: import javax.xml.bind.JAXBContext;",
      "43: import javax.xml.bind.JAXBElement;",
      "44: import javax.xml.bind.JAXBException;",
      "45: import javax.xml.bind.Marshaller;",
      "46: import javax.xml.bind.Unmarshaller;",
      "47: import javax.xml.parsers.DocumentBuilder;",
      "48: import javax.xml.parsers.DocumentBuilderFactory;",
      "49: import javax.xml.parsers.ParserConfigurationException;",
      "50: import javax.xml.stream.XMLOutputFactory;",
      "51: import javax.xml.stream.XMLStreamException;",
      "52: import javax.xml.stream.XMLStreamWriter;",
      "53: import javax.xml.transform.stream.StreamSource;",
      "54: import javax.xml.validation.Schema;",
      "55: import javax.xml.validation.SchemaFactory;",
      "56: import java.io.ByteArrayInputStream;",
      "57: import java.io.File;",
      "58: import java.io.IOException;",
      "59: import java.io.StringWriter;",
      "60: import java.nio.charset.StandardCharsets;",
      "61: import java.util.ArrayList;",
      "62: import java.util.Collections;",
      "63: import java.util.Comparator;",
      "64: import java.util.Date;",
      "65: import java.util.HashSet;",
      "66: import java.util.Iterator;",
      "67: import java.util.List;",
      "68: import java.util.Map;",
      "69: import java.util.Set;",
      "70: import java.util.concurrent.atomic.AtomicReference;",
      "71: import java.util.regex.Matcher;",
      "72: import java.util.regex.Pattern;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "665:         final Unmarshaller unmarshaller = JAXB_TENANTS_CONTEXT.createUnmarshaller();",
      "666:         unmarshaller.setSchema(tenantsSchema);",
      "670:     }",
      "672:     private void populateInitialUsers(final Tenants tenants) {",
      "",
      "[Removed Lines]",
      "668:         final JAXBElement<Tenants> element = unmarshaller.unmarshal(new StreamSource(tenantsFile), Tenants.class);",
      "669:         return element.getValue();",
      "",
      "[Added Lines]",
      "669:         try {",
      "670:             final XMLStreamReader xsr = XmlUtils.createSafeReader(new StreamSource(tenantsFile));",
      "671:             final JAXBElement<Tenants> element = unmarshaller.unmarshal(xsr, Tenants.class);",
      "672:             return element.getValue();",
      "673:         } catch (XMLStreamException e) {",
      "674:             throw new JAXBException(\"Error unmarshalling tenants\", e);",
      "675:         }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "688:             throw new AuthorizerCreationException(\"Legacy Authorized Users File '\" + legacyAuthorizedUsersFile + \"' does not exists\");",
      "689:         }",
      "691:         final Unmarshaller unmarshaller = JAXB_USERS_CONTEXT.createUnmarshaller();",
      "692:         unmarshaller.setSchema(usersSchema);",
      "694:         final JAXBElement<org.apache.nifi.user.generated.Users> element = unmarshaller.unmarshal(",
      "697:         final org.apache.nifi.user.generated.Users users = element.getValue();",
      "698:         if (users.getUser().isEmpty()) {",
      "",
      "[Removed Lines]",
      "695:                 new StreamSource(authorizedUsersFile), org.apache.nifi.user.generated.Users.class);",
      "",
      "[Added Lines]",
      "697:         XMLStreamReader xsr;",
      "698:         try {",
      "699:             xsr = XmlUtils.createSafeReader(new StreamSource(authorizedUsersFile));",
      "700:         } catch (XMLStreamException e) {",
      "701:             throw new AuthorizerCreationException(\"Error converting the legacy authorizers file\", e);",
      "702:         }",
      "708:                 xsr, org.apache.nifi.user.generated.Users.class);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/HeartbeatPayload.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: import java.io.InputStream;",
      "22: import java.io.OutputStream;",
      "23: import java.util.List;",
      "25: import javax.xml.bind.JAXBContext;",
      "26: import javax.xml.bind.JAXBException;",
      "27: import javax.xml.bind.Marshaller;",
      "28: import javax.xml.bind.Unmarshaller;",
      "29: import javax.xml.bind.annotation.XmlRootElement;",
      "31: import org.apache.nifi.cluster.coordination.node.NodeConnectionStatus;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import javax.xml.stream.XMLStreamException;",
      "30: import javax.xml.stream.XMLStreamReader;",
      "32: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "111:     public static HeartbeatPayload unmarshal(final InputStream is) throws ProtocolException {",
      "112:         try {",
      "113:             final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "117:         }",
      "118:     }",
      "120:     public static HeartbeatPayload unmarshal(final byte[] bytes) throws ProtocolException {",
      "127:     }",
      "128: }",
      "",
      "[Removed Lines]",
      "114:             return (HeartbeatPayload) unmarshaller.unmarshal(is);",
      "115:         } catch (final JAXBException je) {",
      "116:             throw new ProtocolException(je);",
      "121:         try {",
      "122:             final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "123:             return (HeartbeatPayload) unmarshaller.unmarshal(new ByteArrayInputStream(bytes));",
      "124:         } catch (final JAXBException je) {",
      "125:             throw new ProtocolException(je);",
      "126:         }",
      "",
      "[Added Lines]",
      "115:             final XMLStreamReader xsr = XmlUtils.createSafeReader(is);",
      "116:             return (HeartbeatPayload) unmarshaller.unmarshal(xsr);",
      "117:         } catch (final JAXBException | XMLStreamException e) {",
      "118:             throw new ProtocolException(e);",
      "123:         return unmarshal(new ByteArrayInputStream(bytes));",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/JaxbProtocolContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.io.InputStream;",
      "26: import java.io.OutputStream;",
      "27: import java.nio.ByteBuffer;",
      "29: import javax.xml.bind.JAXBContext;",
      "30: import javax.xml.bind.JAXBException;",
      "31: import javax.xml.bind.Marshaller;",
      "32: import javax.xml.bind.Unmarshaller;",
      "34: import org.apache.nifi.cluster.protocol.ProtocolContext;",
      "35: import org.apache.nifi.cluster.protocol.ProtocolMessageMarshaller;",
      "36: import org.apache.nifi.cluster.protocol.ProtocolMessageUnmarshaller;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32: import javax.xml.stream.XMLStreamException;",
      "33: import javax.xml.stream.XMLStreamReader;",
      "37: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "135:                     final Unmarshaller unmarshaller = jaxbCtx.createUnmarshaller();",
      "136:                     final byte[] msg = new byte[totalBytesRead];",
      "137:                     buffer.get(msg);",
      "142:                 }",
      "144:             }",
      "",
      "[Removed Lines]",
      "138:                     return (T) unmarshaller.unmarshal(new ByteArrayInputStream(msg));",
      "140:                 } catch (final JAXBException je) {",
      "141:                     throw new IOException(\"Failed unmarshalling protocol message due to: \" + je, je);",
      "",
      "[Added Lines]",
      "139:                     final XMLStreamReader xsr = XmlUtils.createSafeReader(new ByteArrayInputStream(msg));",
      "140:                     return (T) unmarshaller.unmarshal(xsr);",
      "142:                 } catch (final JAXBException | XMLStreamException e) {",
      "143:                     throw new IOException(\"Failed unmarshalling protocol message due to: \" + e, e);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.cluster.coordination.heartbeat;",
      "19: import org.apache.nifi.cluster.coordination.ClusterCoordinator;",
      "20: import org.apache.nifi.cluster.coordination.node.NodeConnectionState;",
      "21: import org.apache.nifi.cluster.coordination.node.NodeConnectionStatus;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19: import java.util.ArrayList;",
      "20: import java.util.Collections;",
      "21: import java.util.HashMap;",
      "22: import java.util.List;",
      "23: import java.util.Map;",
      "24: import java.util.Set;",
      "25: import java.util.concurrent.ConcurrentHashMap;",
      "26: import java.util.concurrent.ConcurrentMap;",
      "27: import java.util.function.Function;",
      "28: import java.util.stream.Collectors;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: import org.slf4j.Logger;",
      "37: import org.slf4j.LoggerFactory;",
      "",
      "[Removed Lines]",
      "39: import javax.xml.bind.JAXBContext;",
      "40: import javax.xml.bind.Unmarshaller;",
      "41: import java.util.ArrayList;",
      "42: import java.util.Collections;",
      "43: import java.util.HashMap;",
      "44: import java.util.List;",
      "45: import java.util.Map;",
      "46: import java.util.Set;",
      "47: import java.util.concurrent.ConcurrentHashMap;",
      "48: import java.util.concurrent.ConcurrentMap;",
      "49: import java.util.function.Function;",
      "50: import java.util.stream.Collectors;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "64:     private volatile long purgeTimestamp = System.currentTimeMillis();",
      "77:     public ClusterProtocolHeartbeatMonitor(final ClusterCoordinator clusterCoordinator, final ProtocolListener protocolListener, final NiFiProperties nifiProperties) {",
      "78:         super(clusterCoordinator, nifiProperties);",
      "",
      "[Removed Lines]",
      "66:     protected static final Unmarshaller nodeIdentifierUnmarshaller;",
      "68:     static {",
      "69:         try {",
      "70:             final JAXBContext jaxbContext = JAXBContext.newInstance(NodeIdentifier.class);",
      "71:             nodeIdentifierUnmarshaller = jaxbContext.createUnmarshaller();",
      "72:         } catch (final Exception e) {",
      "73:             throw new RuntimeException(\"Failed to create an Unmarshaller for unmarshalling Node Identifier\", e);",
      "74:         }",
      "75:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/cluster/BulletinsPayload.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import javax.xml.bind.Unmarshaller;",
      "28: import javax.xml.bind.annotation.XmlRootElement;",
      "29: import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;",
      "30: import org.apache.nifi.cluster.protocol.ProtocolException;",
      "31: import org.apache.nifi.jaxb.BulletinAdapter;",
      "32: import org.apache.nifi.reporting.Bulletin;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "30: import javax.xml.stream.XMLStreamException;",
      "31: import javax.xml.stream.XMLStreamReader;",
      "35: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77:     public static BulletinsPayload unmarshal(final InputStream is) throws ProtocolException {",
      "78:         try {",
      "79:             final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "83:         }",
      "84:     }",
      "86:     public static BulletinsPayload unmarshal(final byte[] bytes) throws ProtocolException {",
      "93:     }",
      "94: }",
      "",
      "[Removed Lines]",
      "80:             return (BulletinsPayload) unmarshaller.unmarshal(is);",
      "81:         } catch (final JAXBException je) {",
      "82:             throw new ProtocolException(je);",
      "87:         try {",
      "88:             final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "89:             return (BulletinsPayload) unmarshaller.unmarshal(new ByteArrayInputStream(bytes));",
      "90:         } catch (final JAXBException je) {",
      "91:             throw new ProtocolException(je);",
      "92:         }",
      "",
      "[Added Lines]",
      "83:             final XMLStreamReader xsr = XmlUtils.createSafeReader(is);",
      "84:             return (BulletinsPayload) unmarshaller.unmarshal(xsr);",
      "85:         } catch (final JAXBException | XMLStreamException e) {",
      "86:             throw new ProtocolException(e);",
      "91:         return unmarshal(new ByteArrayInputStream(bytes));",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/TemplateUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: package org.apache.nifi.controller;",
      "20: import org.apache.nifi.persistence.TemplateDeserializer;",
      "22: import org.apache.nifi.web.api.dto.ConnectableDTO;",
      "23: import org.apache.nifi.web.api.dto.ConnectionDTO;",
      "24: import org.apache.nifi.web.api.dto.ControllerServiceDTO;",
      "",
      "[Removed Lines]",
      "21: import org.apache.nifi.stream.io.StreamUtils;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32: import org.apache.nifi.web.api.dto.TemplateDTO;",
      "33: import org.w3c.dom.Element;",
      "37: import javax.xml.transform.dom.DOMSource;",
      "38: import java.io.ByteArrayInputStream;",
      "40: import java.io.IOException;",
      "41: import java.io.InputStream;",
      "43: import java.util.Collection;",
      "45: import java.util.Map;",
      "46: import java.util.Set;",
      "",
      "[Removed Lines]",
      "35: import javax.xml.bind.JAXBContext;",
      "36: import javax.xml.bind.Unmarshaller;",
      "39: import java.io.DataInputStream;",
      "42: import java.util.ArrayList;",
      "44: import java.util.List;",
      "",
      "[Added Lines]",
      "34: import javax.xml.transform.Transformer;",
      "35: import javax.xml.transform.TransformerFactory;",
      "37: import javax.xml.transform.stream.StreamResult;",
      "39: import java.io.ByteArrayOutputStream;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50:     public static TemplateDTO parseDto(final Element templateElement) {",
      "51:         try {",
      "55:         } catch (final Exception e) {",
      "56:             throw new RuntimeException(\"Could not parse XML as a valid template\", e);",
      "57:         }",
      "",
      "[Removed Lines]",
      "52:             JAXBContext context = JAXBContext.newInstance(TemplateDTO.class);",
      "53:             Unmarshaller unmarshaller = context.createUnmarshaller();",
      "54:             return unmarshaller.unmarshal(new DOMSource(templateElement), TemplateDTO.class).getValue();",
      "",
      "[Added Lines]",
      "50:             final DOMSource domSource = new DOMSource(templateElement);",
      "52:             final ByteArrayOutputStream baos = new ByteArrayOutputStream();",
      "53:             final StreamResult streamResult = new StreamResult(baos);",
      "57:             final TransformerFactory transformerFactory = TransformerFactory.newInstance();",
      "58:             final Transformer transformer = transformerFactory.newTransformer();",
      "59:             transformer.transform(domSource, streamResult);",
      "61:             return parseDto(baos.toByteArray());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "61:         try (final InputStream in = new ByteArrayInputStream(bytes)) {",
      "62:             return TemplateDeserializer.deserialize(in);",
      "63:         } catch (final IOException ioe) {",
      "65:         }",
      "66:     }",
      "",
      "[Removed Lines]",
      "64:             throw new RuntimeException(\"Could not parse bytes as template\", ioe); // won't happen because of the types of streams being used",
      "68:     public static List<Template> parseTemplateStream(final byte[] bytes) {",
      "69:         final List<Template> templates = new ArrayList<>();",
      "71:         try (final InputStream rawIn = new ByteArrayInputStream(bytes);",
      "72:             final DataInputStream in = new DataInputStream(rawIn)) {",
      "74:             while (isMoreData(in)) {",
      "75:                 final int length = in.readInt();",
      "76:                 final byte[] buffer = new byte[length];",
      "77:                 StreamUtils.fillBuffer(in, buffer, true);",
      "78:                 final TemplateDTO dto = TemplateDeserializer.deserialize(new ByteArrayInputStream(buffer));",
      "79:                 templates.add(new Template(dto));",
      "80:             }",
      "81:         } catch (final IOException e) {",
      "82:             throw new RuntimeException(\"Could not parse bytes\", e);  // won't happen because of the types of streams being used",
      "83:         }",
      "85:         return templates;",
      "86:     }",
      "89:     private static boolean isMoreData(final InputStream in) throws IOException {",
      "90:         in.mark(1);",
      "91:         final int nextByte = in.read();",
      "92:         if (nextByte == -1) {",
      "93:             return false;",
      "94:         }",
      "96:         in.reset();",
      "97:         return true;",
      "98:     }",
      "",
      "[Added Lines]",
      "71:             throw new RuntimeException(\"Could not parse bytes as template\", ioe);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/StandardSnippetDeserializer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.persistence;",
      "19: import java.io.InputStream;",
      "21: import javax.xml.bind.JAXBContext;",
      "22: import javax.xml.bind.JAXBElement;",
      "23: import javax.xml.bind.JAXBException;",
      "24: import javax.xml.bind.Unmarshaller;",
      "27: import org.apache.nifi.controller.StandardSnippet;",
      "28: import org.apache.nifi.controller.serialization.FlowSerializationException;",
      "30: public class StandardSnippetDeserializer {",
      "",
      "[Removed Lines]",
      "25: import javax.xml.transform.stream.StreamSource;",
      "",
      "[Added Lines]",
      "24: import javax.xml.stream.XMLStreamException;",
      "25: import javax.xml.stream.XMLStreamReader;",
      "28: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "33:         try {",
      "34:             JAXBContext context = JAXBContext.newInstance(StandardSnippet.class);",
      "35:             Unmarshaller unmarshaller = context.createUnmarshaller();",
      "37:             return snippetElement.getValue();",
      "39:             throw new FlowSerializationException(e);",
      "40:         }",
      "41:     }",
      "",
      "[Removed Lines]",
      "36:             JAXBElement<StandardSnippet> snippetElement = unmarshaller.unmarshal(new StreamSource(inStream), StandardSnippet.class);",
      "38:         } catch (final JAXBException e) {",
      "",
      "[Added Lines]",
      "36:             XMLStreamReader xsr = XmlUtils.createSafeReader(inStream);",
      "37:             JAXBElement<StandardSnippet> snippetElement = unmarshaller.unmarshal(xsr, StandardSnippet.class);",
      "39:         } catch (final JAXBException | XMLStreamException e) {",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.persistence;",
      "20: import javax.xml.bind.JAXBContext;",
      "21: import javax.xml.bind.JAXBElement;",
      "22: import javax.xml.bind.JAXBException;",
      "23: import javax.xml.bind.Unmarshaller;",
      "25: import javax.xml.stream.XMLStreamException;",
      "26: import javax.xml.stream.XMLStreamReader;",
      "27: import javax.xml.transform.stream.StreamSource;",
      "31: public class TemplateDeserializer {",
      "33:     public static TemplateDTO deserialize(final InputStream inStream) {",
      "34:         try {",
      "35:             JAXBContext context = JAXBContext.newInstance(TemplateDTO.class);",
      "43:             Unmarshaller unmarshaller = context.createUnmarshaller();",
      "44:             JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(xsr, TemplateDTO.class);",
      "45:             return templateElement.getValue();",
      "",
      "[Removed Lines]",
      "19: import java.io.InputStream;",
      "24: import javax.xml.stream.XMLInputFactory;",
      "28: import org.apache.nifi.controller.serialization.FlowSerializationException;",
      "29: import org.apache.nifi.web.api.dto.TemplateDTO;",
      "38:             XMLInputFactory xif = XMLInputFactory.newFactory();",
      "39:             xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);",
      "40:             xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);",
      "41:             XMLStreamReader xsr = xif.createXMLStreamReader(new StreamSource(inStream));",
      "",
      "[Added Lines]",
      "19: import org.apache.nifi.controller.serialization.FlowSerializationException;",
      "20: import org.apache.nifi.security.xml.XmlUtils;",
      "21: import org.apache.nifi.web.api.dto.TemplateDTO;",
      "30: import java.io.InputStream;",
      "35:        return deserialize(new StreamSource(inStream));",
      "36:     }",
      "38:     public static TemplateDTO deserialize(final StreamSource source) {",
      "41:             XMLStreamReader xsr = XmlUtils.createSafeReader(source);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/persistence/TemplateSerializerTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import java.util.List;",
      "28: import java.util.Set;",
      "29: import java.util.stream.Collectors;",
      "31: import javax.xml.bind.JAXBContext;",
      "32: import javax.xml.bind.JAXBElement;",
      "33: import javax.xml.bind.Unmarshaller;",
      "36: import org.apache.nifi.util.ComponentIdGenerator;",
      "37: import org.apache.nifi.web.api.dto.FlowSnippetDTO;",
      "38: import org.apache.nifi.web.api.dto.ProcessorDTO;",
      "",
      "[Removed Lines]",
      "34: import javax.xml.transform.stream.StreamSource;",
      "",
      "[Added Lines]",
      "33: import javax.xml.stream.XMLStreamReader;",
      "34: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:         origTemplate.setSnippet(snippet);",
      "66:         byte[] serTemplate = TemplateSerializer.serialize(origTemplate);",
      "69:         ByteArrayInputStream in = new ByteArrayInputStream(serTemplate);",
      "70:         JAXBContext context = JAXBContext.newInstance(TemplateDTO.class);",
      "71:         Unmarshaller unmarshaller = context.createUnmarshaller();",
      "73:         TemplateDTO deserTemplate = templateElement.getValue();",
      "",
      "[Removed Lines]",
      "72:         JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(new StreamSource(in), TemplateDTO.class);",
      "",
      "[Added Lines]",
      "71:         XMLStreamReader xsr = XmlUtils.createSafeReader(in);",
      "72:         JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(xsr, TemplateDTO.class);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "98:         diffList.addAll(new HistogramDiff().diff(RawTextComparator.DEFAULT, rt1, rt2));",
      "100:         ByteArrayOutputStream out = new ByteArrayOutputStream();",
      "102:             diff.format(diffList, rt1, rt2);",
      "104:             BufferedReader reader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(out.toByteArray()), StandardCharsets.UTF_8));",
      "",
      "[Removed Lines]",
      "101:         try (DiffFormatter diff = new DiffFormatter(out);) {",
      "",
      "[Added Lines]",
      "101:         try (DiffFormatter diff = new DiffFormatter(out)) {",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "48: import org.apache.nifi.registry.variable.VariableRegistryUpdateRequest;",
      "49: import org.apache.nifi.registry.variable.VariableRegistryUpdateStep;",
      "50: import org.apache.nifi.remote.util.SiteToSiteRestApiClient;",
      "51: import org.apache.nifi.util.BundleUtils;",
      "52: import org.apache.nifi.web.NiFiServiceFacade;",
      "53: import org.apache.nifi.web.ResourceNotFoundException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "51: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "127: import javax.xml.bind.JAXBElement;",
      "128: import javax.xml.bind.JAXBException;",
      "129: import javax.xml.bind.Unmarshaller;",
      "131: import java.io.IOException;",
      "132: import java.io.InputStream;",
      "133: import java.net.URI;",
      "",
      "[Removed Lines]",
      "130: import javax.xml.transform.stream.StreamSource;",
      "",
      "[Added Lines]",
      "131: import javax.xml.stream.XMLStreamReader;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3238:         try {",
      "3239:             JAXBContext context = JAXBContext.newInstance(TemplateDTO.class);",
      "3240:             Unmarshaller unmarshaller = context.createUnmarshaller();",
      "3242:             template = templateElement.getValue();",
      "3243:         } catch (JAXBException jaxbe) {",
      "3244:             logger.warn(\"An error occurred while parsing a template.\", jaxbe);",
      "",
      "[Removed Lines]",
      "3241:             JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(new StreamSource(in), TemplateDTO.class);",
      "",
      "[Added Lines]",
      "3242:             XMLStreamReader xsr = XmlUtils.createSafeReader(in);",
      "3243:             JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(xsr, TemplateDTO.class);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java": [
      "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-security/src/main/java/org/apache/nifi/web/security/spring/LoginIdentityProviderFactoryBean.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: import javax.xml.bind.JAXBElement;",
      "31: import javax.xml.bind.JAXBException;",
      "32: import javax.xml.bind.Unmarshaller;",
      "33: import javax.xml.transform.stream.StreamSource;",
      "34: import javax.xml.validation.Schema;",
      "35: import javax.xml.validation.SchemaFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: import javax.xml.stream.XMLStreamReader;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "54: import org.apache.nifi.properties.SensitivePropertyProtectionException;",
      "55: import org.apache.nifi.properties.SensitivePropertyProvider;",
      "56: import org.apache.nifi.properties.SensitivePropertyProviderFactory;",
      "57: import org.apache.nifi.util.NiFiProperties;",
      "58: import org.slf4j.Logger;",
      "59: import org.slf4j.LoggerFactory;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "139:                 final Schema schema = schemaFactory.newSchema(LoginIdentityProviders.class.getResource(LOGIN_IDENTITY_PROVIDERS_XSD));",
      "142:                 final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "143:                 unmarshaller.setSchema(schema);",
      "145:                 return element.getValue();",
      "146:             } catch (SAXException | JAXBException e) {",
      "147:                 throw new Exception(\"Unable to load the login identity provider configuration file at: \" + loginIdentityProvidersConfigurationFile.getAbsolutePath());",
      "",
      "[Removed Lines]",
      "144:                 final JAXBElement<LoginIdentityProviders> element = unmarshaller.unmarshal(new StreamSource(loginIdentityProvidersConfigurationFile), LoginIdentityProviders.class);",
      "",
      "[Added Lines]",
      "144:                 XMLStreamReader xsr = XmlUtils.createSafeReader(new StreamSource(loginIdentityProvidersConfigurationFile));",
      "147:                 final JAXBElement<LoginIdentityProviders> element = unmarshaller.unmarshal(xsr, LoginIdentityProviders.class);",
      "",
      "---------------"
    ],
    "nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java||nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java": [
      "File: nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java -> nifi-nar-bundles/nifi-update-attribute-bundle/nifi-update-attribute-model/src/main/java/org/apache/nifi/update/attributes/serde/CriteriaSerDe.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: package org.apache.nifi.update.attributes.serde;",
      "20: import java.io.StringWriter;",
      "21: import java.util.List;",
      "22: import javax.xml.bind.JAXBContext;",
      "23: import javax.xml.bind.JAXBElement;",
      "",
      "[Removed Lines]",
      "19: import java.io.StringReader;",
      "",
      "[Added Lines]",
      "19: import java.io.ByteArrayInputStream;",
      "21: import java.nio.charset.StandardCharsets;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25: import javax.xml.bind.Marshaller;",
      "26: import javax.xml.bind.Unmarshaller;",
      "27: import javax.xml.bind.annotation.XmlRootElement;",
      "30: import org.apache.nifi.update.attributes.Criteria;",
      "31: import org.apache.nifi.update.attributes.FlowFilePolicy;",
      "32: import org.apache.nifi.update.attributes.Rule;",
      "",
      "[Removed Lines]",
      "28: import javax.xml.transform.Source;",
      "29: import javax.xml.transform.stream.StreamSource;",
      "",
      "[Added Lines]",
      "29: import javax.xml.stream.XMLStreamException;",
      "30: import javax.xml.stream.XMLStreamReader;",
      "31: import org.apache.nifi.security.xml.XmlUtils;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "119:             try {",
      "121:                 final Unmarshaller unmarshaller = JAXB_CONTEXT.createUnmarshaller();",
      "126:                 final CriteriaBinding binding = element.getValue();",
      "127:                 criteria = new Criteria(binding.getFlowFilePolicy(), binding.getRules());",
      "130:             }",
      "131:         }",
      "",
      "[Removed Lines]",
      "122:                 final Source source = new StreamSource(new StringReader(string));",
      "123:                 final JAXBElement<CriteriaBinding> element = unmarshaller.unmarshal(source, CriteriaBinding.class);",
      "128:             } catch (final JAXBException jaxbe) {",
      "129:                 throw new IllegalArgumentException(jaxbe);",
      "",
      "[Added Lines]",
      "124:                 XMLStreamReader xsr = XmlUtils.createSafeReader(new ByteArrayInputStream(string.getBytes(StandardCharsets.UTF_8)));",
      "125:                 final JAXBElement<CriteriaBinding> element = unmarshaller.unmarshal(xsr, CriteriaBinding.class);",
      "130:             } catch (final JAXBException | XMLStreamException e) {",
      "131:                 throw new IllegalArgumentException(e);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8d29811f559b3ae293475a88d52a3c62f9681be",
      "candidate_info": {
        "commit_hash": "d8d29811f559b3ae293475a88d52a3c62f9681be",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/d8d29811f559b3ae293475a88d52a3c62f9681be",
        "files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/AuthorizableLookup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/ProcessGroupAuthorizable.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/SnippetAuthorizable.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/StandardAuthorizableLookup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/TemplateAuthorizable.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SnippetResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/TemplateResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITProcessorAccessControl.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/resources/META-INF/services/org.apache.nifi.processor.Processor"
        ],
        "message": "NIFI-3135: - Authorizing restricted components on snippet usage. - Updating REST API docs accordingly. - Adding some integration tests to exercise the additional restricted component checks.\n\nThis closes #1287.\n\nSigned-off-by: Bryan Bende <bbende@apache.org>",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/AuthorizableLookup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/AuthorizableLookup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/ProcessGroupAuthorizable.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/ProcessGroupAuthorizable.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/SnippetAuthorizable.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/SnippetAuthorizable.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/StandardAuthorizableLookup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/StandardAuthorizableLookup.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/TemplateAuthorizable.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/TemplateAuthorizable.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SnippetResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SnippetResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/TemplateResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/TemplateResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITProcessorAccessControl.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITProcessorAccessControl.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/resources/META-INF/services/org.apache.nifi.processor.Processor||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/resources/META-INF/services/org.apache.nifi.processor.Processor"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/AuthorizableLookup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/AuthorizableLookup.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/AuthorizableLookup.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/AuthorizableLookup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.authorization;",
          "19: import org.apache.nifi.authorization.resource.Authorizable;",
          "22: public interface AuthorizableLookup {",
          "",
          "[Removed Lines]",
          "20: import org.apache.nifi.controller.Snippet;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "204:     Authorizable getTemplate(String id);",
          "",
          "[Added Lines]",
          "203:     TemplateAuthorizable getTemplate(String id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "220:     Snippet getSnippet(String id);",
          "",
          "[Added Lines]",
          "219:     SnippetAuthorizable getSnippet(String id);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/ProcessGroupAuthorizable.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/ProcessGroupAuthorizable.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/ProcessGroupAuthorizable.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/ProcessGroupAuthorizable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "46:     Set<Authorizable> getEncapsulatedConnections();",
          "",
          "[Added Lines]",
          "46:     Set<ConnectionAuthorizable> getEncapsulatedConnections();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "81:     Set<Authorizable> getEncapsulatedProcessGroups();",
          "",
          "[Added Lines]",
          "81:     Set<ProcessGroupAuthorizable> getEncapsulatedProcessGroups();",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/SnippetAuthorizable.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/SnippetAuthorizable.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/SnippetAuthorizable.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/SnippetAuthorizable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.nifi.authorization;",
          "19: import org.apache.nifi.authorization.resource.Authorizable;",
          "21: import java.util.Set;",
          "26: public interface SnippetAuthorizable {",
          "32:     Set<ConfigurableComponentAuthorizable> getSelectedProcessors();",
          "39:     Set<ConnectionAuthorizable> getSelectedConnections();",
          "46:     Set<Authorizable> getSelectedInputPorts();",
          "53:     Set<Authorizable> getSelectedOutputPorts();",
          "60:     Set<Authorizable> getSelectedFunnels();",
          "67:     Set<Authorizable> getSelectedLabels();",
          "74:     Set<ProcessGroupAuthorizable> getSelectedProcessGroups();",
          "81:     Set<Authorizable> getSelectedRemoteProcessGroups();",
          "82: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/StandardAuthorizableLookup.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/StandardAuthorizableLookup.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/StandardAuthorizableLookup.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/StandardAuthorizableLookup.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.apache.nifi.controller.ProcessorNode;",
          "35: import org.apache.nifi.controller.ReportingTaskNode;",
          "36: import org.apache.nifi.controller.Snippet;",
          "37: import org.apache.nifi.controller.service.ControllerServiceNode;",
          "38: import org.apache.nifi.controller.service.ControllerServiceReference;",
          "39: import org.apache.nifi.groups.ProcessGroup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.apache.nifi.controller.Template;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: import org.apache.nifi.remote.PortAuthorizationResult;",
          "42: import org.apache.nifi.remote.RootGroupPort;",
          "43: import org.apache.nifi.web.ResourceNotFoundException;",
          "44: import org.apache.nifi.web.controller.ControllerFacade;",
          "45: import org.apache.nifi.web.dao.AccessPolicyDAO;",
          "46: import org.apache.nifi.web.dao.ConnectionDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.apache.nifi.web.api.dto.FlowSnippetDTO;",
          "46: import org.apache.nifi.web.api.dto.TemplateDTO;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: import org.apache.nifi.web.dao.SnippetDAO;",
          "56: import org.apache.nifi.web.dao.TemplateDAO;",
          "58: import java.util.List;",
          "59: import java.util.Set;",
          "60: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: import java.util.HashSet;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:     @Override",
          "222:     public ConnectionAuthorizable getConnection(final String id) {",
          "223:         final Connection connection = connectionDAO.getConnection(id);",
          "245:     }",
          "247:     @Override",
          "248:     public ProcessGroupAuthorizable getProcessGroup(final String id) {",
          "249:         final ProcessGroup processGroup = processGroupDAO.getProcessGroup(id);",
          "309:     }",
          "311:     @Override",
          "",
          "[Removed Lines]",
          "224:         return new ConnectionAuthorizable() {",
          "225:             @Override",
          "226:             public Authorizable getAuthorizable() {",
          "227:                 return connection;",
          "228:             }",
          "230:             @Override",
          "231:             public Connectable getSource() {",
          "232:                 return connection.getSource();",
          "233:             }",
          "235:             @Override",
          "236:             public Connectable getDestination() {",
          "237:                 return connection.getDestination();",
          "238:             }",
          "240:             @Override",
          "241:             public ProcessGroup getParentGroup() {",
          "242:                 return connection.getProcessGroup();",
          "243:             }",
          "244:         };",
          "251:         return new ProcessGroupAuthorizable() {",
          "252:             @Override",
          "253:             public Authorizable getAuthorizable() {",
          "254:                 return processGroup;",
          "255:             }",
          "257:             @Override",
          "258:             public Set<ConfigurableComponentAuthorizable> getEncapsulatedProcessors() {",
          "259:                 return processGroup.findAllProcessors().stream().map(",
          "260:                         processorNode -> new ProcessorConfigurableComponentAuthorizable(processorNode)).collect(Collectors.toSet());",
          "261:             }",
          "263:             @Override",
          "264:             public Set<Authorizable> getEncapsulatedConnections() {",
          "265:                 return processGroup.findAllConnections().stream().collect(Collectors.toSet());",
          "266:             }",
          "268:             @Override",
          "269:             public Set<Authorizable> getEncapsulatedInputPorts() {",
          "270:                 return processGroup.findAllInputPorts().stream().collect(Collectors.toSet());",
          "271:             }",
          "273:             @Override",
          "274:             public Set<Authorizable> getEncapsulatedOutputPorts() {",
          "275:                 return processGroup.findAllOutputPorts().stream().collect(Collectors.toSet());",
          "276:             }",
          "278:             @Override",
          "279:             public Set<Authorizable> getEncapsulatedFunnels() {",
          "280:                 return processGroup.findAllFunnels().stream().collect(Collectors.toSet());",
          "281:             }",
          "283:             @Override",
          "284:             public Set<Authorizable> getEncapsulatedLabels() {",
          "285:                 return processGroup.findAllLabels().stream().collect(Collectors.toSet());",
          "286:             }",
          "288:             @Override",
          "289:             public Set<Authorizable> getEncapsulatedProcessGroups() {",
          "290:                 return processGroup.findAllProcessGroups().stream().collect(Collectors.toSet());",
          "291:             }",
          "293:             @Override",
          "294:             public Set<Authorizable> getEncapsulatedRemoteProcessGroups() {",
          "295:                 return processGroup.findAllRemoteProcessGroups().stream().collect(Collectors.toSet());",
          "296:             }",
          "298:             @Override",
          "299:             public Set<Authorizable> getEncapsulatedTemplates() {",
          "300:                 return processGroup.findAllTemplates().stream().collect(Collectors.toSet());",
          "301:             }",
          "303:             @Override",
          "304:             public Set<ConfigurableComponentAuthorizable> getEncapsulatedControllerServices() {",
          "305:                 return processGroup.findAllControllerServices().stream().map(",
          "306:                         controllerServiceNode -> new ControllerServiceConfigurableComponentAuthorizable(controllerServiceNode)).collect(Collectors.toSet());",
          "307:             }",
          "308:         };",
          "",
          "[Added Lines]",
          "228:         return new StandardConnectionAuthorizable(connection);",
          "234:         return new StandardProcessGroupAuthorizable(processGroup);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "411:     }",
          "413:     @Override",
          "416:     }",
          "418:     @Override",
          "",
          "[Removed Lines]",
          "414:     public Snippet getSnippet(final String id) {",
          "415:         return snippetDAO.getSnippet(id);",
          "",
          "[Added Lines]",
          "340:     public SnippetAuthorizable getSnippet(final String id) {",
          "341:         final Snippet snippet = snippetDAO.getSnippet(id);",
          "342:         final ProcessGroup processGroup = processGroupDAO.getProcessGroup(snippet.getParentGroupId());",
          "344:         return new SnippetAuthorizable() {",
          "345:             @Override",
          "346:             public Set<ConfigurableComponentAuthorizable> getSelectedProcessors() {",
          "347:                 return processGroup.getProcessors().stream()",
          "348:                         .filter(processor -> snippet.getProcessors().containsKey(processor.getIdentifier()))",
          "349:                         .map(processor -> getProcessor(processor.getIdentifier()))",
          "350:                         .collect(Collectors.toSet());",
          "351:             }",
          "353:             @Override",
          "354:             public Set<ConnectionAuthorizable> getSelectedConnections() {",
          "355:                 return processGroup.getConnections().stream()",
          "356:                         .filter(connection -> snippet.getConnections().containsKey(connection.getIdentifier()))",
          "357:                         .map(connection -> getConnection(connection.getIdentifier()))",
          "358:                         .collect(Collectors.toSet());",
          "359:             }",
          "361:             @Override",
          "362:             public Set<Authorizable> getSelectedInputPorts() {",
          "363:                 return processGroup.getInputPorts().stream()",
          "364:                         .filter(inputPort -> snippet.getInputPorts().containsKey(inputPort.getIdentifier()))",
          "365:                         .map(inputPort -> getInputPort(inputPort.getIdentifier()))",
          "366:                         .collect(Collectors.toSet());",
          "367:             }",
          "369:             @Override",
          "370:             public Set<Authorizable> getSelectedOutputPorts() {",
          "371:                 return processGroup.getOutputPorts().stream()",
          "372:                         .filter(outputPort -> snippet.getOutputPorts().containsKey(outputPort.getIdentifier()))",
          "373:                         .map(outputPort -> getOutputPort(outputPort.getIdentifier()))",
          "374:                         .collect(Collectors.toSet());",
          "375:             }",
          "377:             @Override",
          "378:             public Set<Authorizable> getSelectedFunnels() {",
          "379:                 return processGroup.getFunnels().stream()",
          "380:                         .filter(funnel -> snippet.getFunnels().containsKey(funnel.getIdentifier()))",
          "381:                         .map(funnel -> getFunnel(funnel.getIdentifier()))",
          "382:                         .collect(Collectors.toSet());",
          "383:             }",
          "385:             @Override",
          "386:             public Set<Authorizable> getSelectedLabels() {",
          "387:                 return processGroup.getLabels().stream()",
          "388:                         .filter(label -> snippet.getLabels().containsKey(label.getIdentifier()))",
          "389:                         .map(label -> getLabel(label.getIdentifier()))",
          "390:                         .collect(Collectors.toSet());",
          "391:             }",
          "393:             @Override",
          "394:             public Set<ProcessGroupAuthorizable> getSelectedProcessGroups() {",
          "395:                 return processGroup.getProcessGroups().stream()",
          "396:                         .filter(processGroup -> snippet.getProcessGroups().containsKey(processGroup.getIdentifier()))",
          "397:                         .map(processGroup -> getProcessGroup(processGroup.getIdentifier()))",
          "398:                         .collect(Collectors.toSet());",
          "399:             }",
          "401:             @Override",
          "402:             public Set<Authorizable> getSelectedRemoteProcessGroups() {",
          "403:                 return processGroup.getRemoteProcessGroups().stream()",
          "404:                         .filter(remoteProcessGroup -> snippet.getRemoteProcessGroups().containsKey(remoteProcessGroup.getIdentifier()))",
          "405:                         .map(remoteProcessGroup -> getRemoteProcessGroup(remoteProcessGroup.getIdentifier()))",
          "406:                         .collect(Collectors.toSet());",
          "407:             }",
          "408:         };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "530:                 authorizable = getReportingTask(componentId).getAuthorizable();",
          "531:                 break;",
          "532:             case Template:",
          "534:                 break;",
          "535:             case Data:",
          "536:                 authorizable = controllerFacade.getDataAuthorizable(componentId);",
          "",
          "[Removed Lines]",
          "533:                 authorizable = getTemplate(componentId);",
          "",
          "[Added Lines]",
          "526:                 authorizable = getTemplate(componentId).getAuthorizable();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "629:         return authorizable;",
          "630:     }",
          "632:     @Override",
          "635:     }",
          "637:     @Override",
          "",
          "[Removed Lines]",
          "633:     public Authorizable getTemplate(final String id) {",
          "634:         return templateDAO.getTemplate(id);",
          "",
          "[Added Lines]",
          "632:     private void createTemporaryProcessorsAndControllerServices(final FlowSnippetDTO snippet,",
          "633:                                                                 final Set<ConfigurableComponentAuthorizable> processors,",
          "634:                                                                 final Set<ConfigurableComponentAuthorizable> controllerServices) {",
          "636:         if (snippet == null) {",
          "637:             return;",
          "638:         }",
          "640:         if (snippet.getProcessors() != null) {",
          "641:             processors.addAll(snippet.getProcessors().stream().map(processor -> getProcessorByType(processor.getType())).collect(Collectors.toSet()));",
          "642:         }",
          "644:         if (snippet.getControllerServices() != null) {",
          "645:             controllerServices.addAll(snippet.getControllerServices().stream().map(controllerService -> getControllerServiceByType(controllerService.getType())).collect(Collectors.toSet()));",
          "646:         }",
          "648:         if (snippet.getProcessGroups() != null) {",
          "649:             snippet.getProcessGroups().stream().forEach(group -> createTemporaryProcessorsAndControllerServices(group.getContents(), processors, controllerServices));",
          "650:         }",
          "651:     }",
          "654:     public TemplateAuthorizable getTemplate(final String id) {",
          "655:         final Template template = templateDAO.getTemplate(id);",
          "656:         final TemplateDTO contents = template.getDetails();",
          "659:         final Set<ConfigurableComponentAuthorizable> processors = new HashSet<>();",
          "660:         final Set<ConfigurableComponentAuthorizable> controllerServices = new HashSet<>();",
          "663:         createTemporaryProcessorsAndControllerServices(contents.getSnippet(), processors, controllerServices);",
          "665:         return new TemplateAuthorizable() {",
          "666:             @Override",
          "667:             public Authorizable getAuthorizable() {",
          "668:                 return template;",
          "669:             }",
          "671:             @Override",
          "672:             public Set<ConfigurableComponentAuthorizable> getEncapsulatedProcessors() {",
          "673:                 return processors;",
          "674:             }",
          "676:             @Override",
          "677:             public Set<ConfigurableComponentAuthorizable> getEncapsulatedControllerServices() {",
          "678:                 return controllerServices;",
          "679:             }",
          "680:         };",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "645:         return RESTRICTED_COMPONENTS_AUTHORIZABLE;",
          "646:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "694:     @Override",
          "695:     public Authorizable getSystem() {",
          "696:         return SYSTEM_AUTHORIZABLE;",
          "697:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "753:         }",
          "754:     }",
          "759:     }",
          "761:     public void setProcessorDAO(ProcessorDAO processorDAO) {",
          "",
          "[Removed Lines]",
          "756:     @Override",
          "757:     public Authorizable getSystem() {",
          "758:         return SYSTEM_AUTHORIZABLE;",
          "",
          "[Added Lines]",
          "807:     private static class StandardProcessGroupAuthorizable implements ProcessGroupAuthorizable {",
          "808:         private final ProcessGroup processGroup;",
          "810:         public StandardProcessGroupAuthorizable(ProcessGroup processGroup) {",
          "811:             this.processGroup = processGroup;",
          "812:         }",
          "814:         @Override",
          "815:         public Authorizable getAuthorizable() {",
          "816:             return processGroup;",
          "817:         }",
          "819:         @Override",
          "820:         public Set<ConfigurableComponentAuthorizable> getEncapsulatedProcessors() {",
          "821:             return processGroup.findAllProcessors().stream().map(",
          "822:                     processorNode -> new ProcessorConfigurableComponentAuthorizable(processorNode)).collect(Collectors.toSet());",
          "823:         }",
          "825:         @Override",
          "826:         public Set<ConnectionAuthorizable> getEncapsulatedConnections() {",
          "827:             return processGroup.findAllConnections().stream().map(",
          "828:                     connection -> new StandardConnectionAuthorizable(connection)).collect(Collectors.toSet());",
          "829:         }",
          "831:         @Override",
          "832:         public Set<Authorizable> getEncapsulatedInputPorts() {",
          "833:             return processGroup.findAllInputPorts().stream().collect(Collectors.toSet());",
          "834:         }",
          "836:         @Override",
          "837:         public Set<Authorizable> getEncapsulatedOutputPorts() {",
          "838:             return processGroup.findAllOutputPorts().stream().collect(Collectors.toSet());",
          "839:         }",
          "841:         @Override",
          "842:         public Set<Authorizable> getEncapsulatedFunnels() {",
          "843:             return processGroup.findAllFunnels().stream().collect(Collectors.toSet());",
          "844:         }",
          "846:         @Override",
          "847:         public Set<Authorizable> getEncapsulatedLabels() {",
          "848:             return processGroup.findAllLabels().stream().collect(Collectors.toSet());",
          "849:         }",
          "851:         @Override",
          "852:         public Set<ProcessGroupAuthorizable> getEncapsulatedProcessGroups() {",
          "853:             return processGroup.findAllProcessGroups().stream().map(",
          "854:                     group -> new StandardProcessGroupAuthorizable(group)).collect(Collectors.toSet());",
          "855:         }",
          "857:         @Override",
          "858:         public Set<Authorizable> getEncapsulatedRemoteProcessGroups() {",
          "859:             return processGroup.findAllRemoteProcessGroups().stream().collect(Collectors.toSet());",
          "860:         }",
          "862:         @Override",
          "863:         public Set<Authorizable> getEncapsulatedTemplates() {",
          "864:             return processGroup.findAllTemplates().stream().collect(Collectors.toSet());",
          "865:         }",
          "867:         @Override",
          "868:         public Set<ConfigurableComponentAuthorizable> getEncapsulatedControllerServices() {",
          "869:             return processGroup.findAllControllerServices().stream().map(",
          "870:                     controllerServiceNode -> new ControllerServiceConfigurableComponentAuthorizable(controllerServiceNode)).collect(Collectors.toSet());",
          "871:         }",
          "872:     }",
          "874:     private static class StandardConnectionAuthorizable implements ConnectionAuthorizable {",
          "875:         private final Connection connection;",
          "877:         public StandardConnectionAuthorizable(Connection connection) {",
          "878:             this.connection = connection;",
          "879:         }",
          "881:         @Override",
          "882:         public Authorizable getAuthorizable() {",
          "883:             return connection;",
          "884:         }",
          "886:         @Override",
          "887:         public Connectable getSource() {",
          "888:             return connection.getSource();",
          "889:         }",
          "891:         @Override",
          "892:         public Connectable getDestination() {",
          "893:             return connection.getDestination();",
          "894:         }",
          "896:         @Override",
          "897:         public ProcessGroup getParentGroup() {",
          "898:             return connection.getProcessGroup();",
          "899:         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/TemplateAuthorizable.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/TemplateAuthorizable.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/TemplateAuthorizable.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/TemplateAuthorizable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.nifi.authorization;",
          "19: import org.apache.nifi.authorization.resource.Authorizable;",
          "21: import java.util.Set;",
          "26: public interface TemplateAuthorizable {",
          "32:     Authorizable getAuthorizable();",
          "39:     Set<ConfigurableComponentAuthorizable> getEncapsulatedProcessors();",
          "46:     Set<ConfigurableComponentAuthorizable> getEncapsulatedControllerServices();",
          "48: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ApplicationResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.apache.nifi.authorization.Authorizer;",
          "30: import org.apache.nifi.authorization.ProcessGroupAuthorizable;",
          "31: import org.apache.nifi.authorization.RequestAction;",
          "32: import org.apache.nifi.authorization.resource.Authorizable;",
          "33: import org.apache.nifi.authorization.user.NiFiUser;",
          "34: import org.apache.nifi.authorization.user.NiFiUserUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.apache.nifi.authorization.SnippetAuthorizable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import org.apache.nifi.cluster.manager.exception.UnknownNodeException;",
          "41: import org.apache.nifi.cluster.protocol.NodeIdentifier;",
          "42: import org.apache.nifi.controller.FlowController;",
          "44: import org.apache.nifi.remote.HttpRemoteSiteListener;",
          "45: import org.apache.nifi.remote.VersionNegotiator;",
          "46: import org.apache.nifi.remote.exception.BadRequestException;",
          "",
          "[Removed Lines]",
          "43: import org.apache.nifi.controller.Snippet;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:                 AuthorizeControllerServiceReference.authorizeControllerServiceReferences(processorAuthorizable, authorizer, lookup, authorizeTransitiveServices);",
          "463:             }",
          "464:         });",
          "466:         processGroupAuthorizable.getEncapsulatedInputPorts().forEach(authorize);",
          "467:         processGroupAuthorizable.getEncapsulatedOutputPorts().forEach(authorize);",
          "468:         processGroupAuthorizable.getEncapsulatedFunnels().forEach(authorize);",
          "469:         processGroupAuthorizable.getEncapsulatedLabels().forEach(authorize);",
          "471:         processGroupAuthorizable.getEncapsulatedRemoteProcessGroups().forEach(authorize);",
          "",
          "[Removed Lines]",
          "465:         processGroupAuthorizable.getEncapsulatedConnections().forEach(authorize);",
          "470:         processGroupAuthorizable.getEncapsulatedProcessGroups().forEach(authorize);",
          "",
          "[Added Lines]",
          "465:         processGroupAuthorizable.getEncapsulatedConnections().stream().map(connection -> connection.getAuthorizable()).forEach(authorize);",
          "470:         processGroupAuthorizable.getEncapsulatedProcessGroups().stream().map(group -> group.getAuthorizable()).forEach(authorize);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "500:                                     final boolean authorizeReferencedServices, final boolean authorizeTransitiveServices) {",
          "501:         final Consumer<Authorizable> authorize = authorizable -> authorizable.authorize(authorizer, action, NiFiUserUtils.getNiFiUser());",
          "507:             authorizeProcessGroup(processGroupAuthorizable, authorizer, lookup, action, authorizeReferencedServices, false, false, authorizeTransitiveServices);",
          "508:         });",
          "512:             authorize.accept(processorAuthorizable.getAuthorizable());",
          "",
          "[Removed Lines]",
          "499:     protected void authorizeSnippet(final Snippet snippet, final Authorizer authorizer, final AuthorizableLookup lookup, final RequestAction action,",
          "504:         snippet.getProcessGroups().keySet().stream().map(id -> lookup.getProcessGroup(id)).forEach(processGroupAuthorizable -> {",
          "509:         snippet.getRemoteProcessGroups().keySet().stream().map(id -> lookup.getRemoteProcessGroup(id)).forEach(authorize);",
          "510:         snippet.getProcessors().keySet().stream().map(id -> lookup.getProcessor(id)).forEach(processorAuthorizable -> {",
          "",
          "[Added Lines]",
          "499:     protected void authorizeSnippet(final SnippetAuthorizable snippet, final Authorizer authorizer, final AuthorizableLookup lookup, final RequestAction action,",
          "505:         snippet.getSelectedProcessGroups().stream().forEach(processGroupAuthorizable -> {",
          "510:         snippet.getSelectedRemoteProcessGroups().stream().forEach(authorize);",
          "511:         snippet.getSelectedProcessors().stream().forEach(processorAuthorizable -> {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "516:                 AuthorizeControllerServiceReference.authorizeControllerServiceReferences(processorAuthorizable, authorizer, lookup, authorizeTransitiveServices);",
          "517:             }",
          "518:         });",
          "523:     }",
          "",
          "[Removed Lines]",
          "519:         snippet.getInputPorts().keySet().stream().map(id -> lookup.getInputPort(id)).forEach(authorize);",
          "520:         snippet.getOutputPorts().keySet().stream().map(id -> lookup.getOutputPort(id)).forEach(authorize);",
          "521:         snippet.getConnections().keySet().stream().map(id -> lookup.getConnection(id)).forEach(connAuth -> authorize.accept(connAuth.getAuthorizable()));",
          "522:         snippet.getFunnels().keySet().stream().map(id -> lookup.getFunnel(id)).forEach(authorize);",
          "",
          "[Added Lines]",
          "520:         snippet.getSelectedInputPorts().stream().forEach(authorize);",
          "521:         snippet.getSelectedOutputPorts().stream().forEach(authorize);",
          "522:         snippet.getSelectedConnections().stream().forEach(connAuth -> authorize.accept(connAuth.getAuthorizable()));",
          "523:         snippet.getSelectedFunnels().stream().forEach(authorize);",
          "524:         snippet.getSelectedLabels().stream().forEach(authorize);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ControllerResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:             response = ReportingTaskEntity.class,",
          "239:             authorizations = {",
          "240:                     @Authorization(value = \"Write - /controller\", type = \"\"),",
          "242:             }",
          "243:     )",
          "244:     @ApiResponses(",
          "",
          "[Removed Lines]",
          "241:                     @Authorization(value = \"Read - any referenced Controller Services - /controller-services/{uuid}\", type = \"\")",
          "",
          "[Added Lines]",
          "241:                     @Authorization(value = \"Read - any referenced Controller Services - /controller-services/{uuid}\", type = \"\"),",
          "242:                     @Authorization(value = \"Write - if the Reporting Task is restricted - /restricted-components\", type = \"\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:             response = ControllerServiceEntity.class,",
          "331:             authorizations = {",
          "332:                     @Authorization(value = \"Write - /controller\", type = \"\"),",
          "334:             }",
          "335:     )",
          "336:     @ApiResponses(",
          "",
          "[Removed Lines]",
          "333:                     @Authorization(value = \"Read - any referenced Controller Services - /controller-services/{uuid}\", type = \"\")",
          "",
          "[Added Lines]",
          "334:                     @Authorization(value = \"Read - any referenced Controller Services - /controller-services/{uuid}\", type = \"\"),",
          "335:                     @Authorization(value = \"Write - if the Controller Service is restricted - /restricted-components\", type = \"\")",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.apache.nifi.authorization.ConfigurableComponentAuthorizable;",
          "32: import org.apache.nifi.authorization.ProcessGroupAuthorizable;",
          "33: import org.apache.nifi.authorization.RequestAction;",
          "34: import org.apache.nifi.authorization.resource.Authorizable;",
          "35: import org.apache.nifi.authorization.user.NiFiUser;",
          "36: import org.apache.nifi.authorization.user.NiFiUserUtils;",
          "38: import org.apache.nifi.web.NiFiServiceFacade;",
          "39: import org.apache.nifi.web.ResourceNotFoundException;",
          "40: import org.apache.nifi.web.Revision;",
          "",
          "[Removed Lines]",
          "37: import org.apache.nifi.controller.Snippet;",
          "",
          "[Added Lines]",
          "34: import org.apache.nifi.authorization.SnippetAuthorizable;",
          "35: import org.apache.nifi.authorization.TemplateAuthorizable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: import java.util.HashMap;",
          "101: import java.util.Map;",
          "102: import java.util.Set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104: import java.util.concurrent.atomic.AtomicBoolean;",
          "105: import java.util.function.Consumer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "555:             response = ProcessorEntity.class,",
          "556:             authorizations = {",
          "557:                     @Authorization(value = \"Write - /process-groups/{uuid}\", type = \"\"),",
          "559:             }",
          "560:     )",
          "561:     @ApiResponses(",
          "",
          "[Removed Lines]",
          "558:                     @Authorization(value = \"Read - any referenced Controller Services - /controller-services/{uuid}\", type = \"\")",
          "",
          "[Added Lines]",
          "561:                     @Authorization(value = \"Read - any referenced Controller Services - /controller-services/{uuid}\", type = \"\"),",
          "562:                     @Authorization(value = \"Write - if the Processor is restricted - /restricted-components\", type = \"\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1646:             response = FlowSnippetEntity.class,",
          "1647:             authorizations = {",
          "1648:                     @Authorization(value = \"Write - /process-groups/{uuid}\", type = \"\"),",
          "1650:             }",
          "1651:     )",
          "1652:     @ApiResponses(",
          "",
          "[Removed Lines]",
          "1649:                     @Authorization(value = \"Read - /{component-type}/{uuid} - For each component in the snippet and their descendant components\", type = \"\")",
          "",
          "[Added Lines]",
          "1653:                     @Authorization(value = \"Read - /{component-type}/{uuid} - For each component in the snippet and their descendant components\", type = \"\"),",
          "1654:                     @Authorization(value = \"Write - if the snippet contains any restricted Processors - /restricted-components\", type = \"\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1687:                 serviceFacade,",
          "1688:                 requestCopySnippetEntity,",
          "1689:                 lookup -> {",
          "1691:                 },",
          "1692:                 null,",
          "1693:                 copySnippetRequestEntity -> {",
          "",
          "[Removed Lines]",
          "1690:                     authorizeSnippetUsage(lookup, groupId, requestCopySnippetEntity.getSnippetId(), false);",
          "",
          "[Added Lines]",
          "1695:                     final NiFiUser user = NiFiUserUtils.getNiFiUser();",
          "1696:                     final SnippetAuthorizable snippet = authorizeSnippetUsage(lookup, groupId, requestCopySnippetEntity.getSnippetId(), false);",
          "1699:                     final AtomicBoolean restrictedCheckPerformed = new AtomicBoolean(false);",
          "1700:                     final Consumer<ConfigurableComponentAuthorizable> authorizeRestricted = authorizable -> {",
          "1701:                         if (authorizable.isRestricted() && restrictedCheckPerformed.compareAndSet(false, true)) {",
          "1702:                             lookup.getRestrictedComponents().authorize(authorizer, RequestAction.WRITE, user);",
          "1703:                         }",
          "1704:                     };",
          "1709:                     snippet.getSelectedProcessors().stream().forEach(authorizeRestricted);",
          "1710:                     snippet.getSelectedProcessGroups().stream().forEach(processGroup -> {",
          "1711:                         processGroup.getEncapsulatedProcessors().forEach(authorizeRestricted);",
          "1712:                     });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1736:             response = FlowEntity.class,",
          "1737:             authorizations = {",
          "1738:                     @Authorization(value = \"Write - /process-groups/{uuid}\", type = \"\"),",
          "1740:             }",
          "1741:     )",
          "1742:     @ApiResponses(",
          "",
          "[Removed Lines]",
          "1739:                     @Authorization(value = \"Read - /templates/{uuid}\", type = \"\")",
          "",
          "[Added Lines]",
          "1761:                     @Authorization(value = \"Read - /templates/{uuid}\", type = \"\"),",
          "1762:                     @Authorization(value = \"Write - if the template contains any restricted components - /restricted-components\", type = \"\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1773:                 serviceFacade,",
          "1774:                 requestInstantiateTemplateRequestEntity,",
          "1775:                 lookup -> {",
          "1776:                     final Authorizable processGroup = lookup.getProcessGroup(groupId).getAuthorizable();",
          "1781:                 },",
          "1782:                 null,",
          "1783:                 instantiateTemplateRequestEntity -> {",
          "",
          "[Removed Lines]",
          "1777:                     processGroup.authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());",
          "1779:                     final Authorizable template = lookup.getTemplate(requestInstantiateTemplateRequestEntity.getTemplateId());",
          "1780:                     template.authorize(authorizer, RequestAction.READ, NiFiUserUtils.getNiFiUser());",
          "",
          "[Added Lines]",
          "1799:                     final NiFiUser user = NiFiUserUtils.getNiFiUser();",
          "1803:                     processGroup.authorize(authorizer, RequestAction.WRITE, user);",
          "1806:                     final TemplateAuthorizable template = lookup.getTemplate(requestInstantiateTemplateRequestEntity.getTemplateId());",
          "1807:                     template.getAuthorizable().authorize(authorizer, RequestAction.READ, user);",
          "1810:                     final AtomicBoolean restrictedCheckPerformed = new AtomicBoolean(false);",
          "1811:                     final Consumer<ConfigurableComponentAuthorizable> authorizeRestricted = authorizable -> {",
          "1812:                         if (authorizable.isRestricted() && restrictedCheckPerformed.compareAndSet(false, true)) {",
          "1813:                             lookup.getRestrictedComponents().authorize(authorizer, RequestAction.WRITE, user);",
          "1814:                         }",
          "1815:                     };",
          "1818:                     template.getEncapsulatedProcessors().forEach(authorizeRestricted);",
          "1819:                     template.getEncapsulatedControllerServices().forEach(authorizeRestricted);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1814:         authorizeSnippet(snippet, authorizer, lookup, RequestAction.READ, true, authorizeTransitiveServices);",
          "1815:     }",
          "",
          "[Removed Lines]",
          "1808:     private void authorizeSnippetUsage(final AuthorizableLookup lookup, final String groupId, final String snippetId, final boolean authorizeTransitiveServices) {",
          "1810:         lookup.getProcessGroup(groupId).getAuthorizable().authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());",
          "1813:         final Snippet snippet = lookup.getSnippet(snippetId);",
          "",
          "[Added Lines]",
          "1847:     private SnippetAuthorizable authorizeSnippetUsage(final AuthorizableLookup lookup, final String groupId, final String snippetId, final boolean authorizeTransitiveServices) {",
          "1848:         final NiFiUser user = NiFiUserUtils.getNiFiUser();",
          "1851:         lookup.getProcessGroup(groupId).getAuthorizable().authorize(authorizer, RequestAction.WRITE, user);",
          "1854:         final SnippetAuthorizable snippet = lookup.getSnippet(snippetId);",
          "1856:         return snippet;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2075:             response = ControllerServiceEntity.class,",
          "2076:             authorizations = {",
          "2077:                     @Authorization(value = \"Write - /process-groups/{uuid}\", type = \"\"),",
          "2079:             }",
          "2080:     )",
          "2081:     @ApiResponses(",
          "",
          "[Removed Lines]",
          "2078:                     @Authorization(value = \"Read - any referenced Controller Services - /controller-services/{uuid}\", type = \"\")",
          "",
          "[Added Lines]",
          "2120:                     @Authorization(value = \"Read - any referenced Controller Services - /controller-services/{uuid}\", type = \"\"),",
          "2121:                     @Authorization(value = \"Write - if the Controller Service is restricted - /restricted-components\", type = \"\")",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SnippetResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SnippetResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SnippetResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SnippetResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.nifi.authorization.AuthorizableLookup;",
          "27: import org.apache.nifi.authorization.Authorizer;",
          "28: import org.apache.nifi.authorization.RequestAction;",
          "29: import org.apache.nifi.authorization.resource.Authorizable;",
          "30: import org.apache.nifi.authorization.user.NiFiUserUtils;",
          "32: import org.apache.nifi.web.NiFiServiceFacade;",
          "33: import org.apache.nifi.web.Revision;",
          "34: import org.apache.nifi.web.api.dto.SnippetDTO;",
          "",
          "[Removed Lines]",
          "31: import org.apache.nifi.controller.Snippet;",
          "",
          "[Added Lines]",
          "29: import org.apache.nifi.authorization.SnippetAuthorizable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:         snippetRequest.getProcessors().keySet().stream().map(id -> lookup.getProcessor(id).getAuthorizable()).forEach(authorize);",
          "117:         snippetRequest.getInputPorts().keySet().stream().map(id -> lookup.getInputPort(id)).forEach(authorize);",
          "118:         snippetRequest.getOutputPorts().keySet().stream().map(id -> lookup.getOutputPort(id)).forEach(authorize);",
          "120:         snippetRequest.getFunnels().keySet().stream().map(id -> lookup.getFunnel(id)).forEach(authorize);",
          "121:     }",
          "",
          "[Removed Lines]",
          "119:         snippetRequest.getConnections().keySet().stream().map(id -> lookup.getConnection(id)).forEach(connAuth -> authorize.accept(connAuth.getAuthorizable()));",
          "",
          "[Added Lines]",
          "119:         snippetRequest.getConnections().keySet().stream().map(id -> lookup.getConnection(id).getAuthorizable()).forEach(authorize);",
          "121:         snippetRequest.getLabels().keySet().stream().map(id -> lookup.getLabel(id)).forEach(authorize);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:             throw new IllegalArgumentException(\"Snippet ID cannot be specified.\");",
          "163:         }",
          "165:         if (isReplicateRequest()) {",
          "166:             return replicate(HttpMethod.POST, requestSnippetEntity);",
          "167:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:         if (requestSnippetEntity.getSnippet().getParentGroupId() == null) {",
          "167:             throw new IllegalArgumentException(\"The parent Process Group of the snippet must be specified.\");",
          "168:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:                     }",
          "272:                     authorizeSnippet(snippet, authorizer, lookup, RequestAction.WRITE, false, false);",
          "273:                 },",
          "274:                 () -> serviceFacade.verifyUpdateSnippet(requestSnippetDTO, requestRevisions.stream().map(rev -> rev.getComponentId()).collect(Collectors.toSet())),",
          "",
          "[Removed Lines]",
          "271:                     final Snippet snippet = lookup.getSnippet(snippetId);",
          "",
          "[Added Lines]",
          "276:                     final SnippetAuthorizable snippet = lookup.getSnippet(snippetId);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "331:                 requestRevisions,",
          "332:                 lookup -> {",
          "335:                     authorizeSnippet(snippet, authorizer, lookup, RequestAction.WRITE, true, false);",
          "336:                 },",
          "337:                 () -> serviceFacade.verifyDeleteSnippet(snippetId, requestRevisions.stream().map(rev -> rev.getComponentId()).collect(Collectors.toSet())),",
          "",
          "[Removed Lines]",
          "334:                     final Snippet snippet = lookup.getSnippet(snippetId);",
          "",
          "[Added Lines]",
          "339:                     final SnippetAuthorizable snippet = lookup.getSnippet(snippetId);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/TemplateResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/TemplateResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/TemplateResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/TemplateResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:         serviceFacade.authorizeAccess(lookup -> {",
          "126:             template.authorize(authorizer, RequestAction.READ, NiFiUserUtils.getNiFiUser());",
          "127:         });",
          "",
          "[Removed Lines]",
          "125:             final Authorizable template = lookup.getTemplate(id);",
          "",
          "[Added Lines]",
          "125:             final Authorizable template = lookup.getTemplate(id).getAuthorizable();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "196:                 serviceFacade,",
          "197:                 requestTemplateEntity,",
          "198:                 lookup -> {",
          "200:                     template.authorize(authorizer, RequestAction.WRITE, NiFiUserUtils.getNiFiUser());",
          "201:                 },",
          "202:                 null,",
          "",
          "[Removed Lines]",
          "199:                     final Authorizable template = lookup.getTemplate(id);",
          "",
          "[Added Lines]",
          "199:                     final Authorizable template = lookup.getTemplate(id).getAuthorizable();",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITProcessorAccessControl.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITProcessorAccessControl.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITProcessorAccessControl.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/integration/accesscontrol/ITProcessorAccessControl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.nifi.integration.util.NiFiTestUser;",
          "22: import org.apache.nifi.integration.util.RestrictedProcessor;",
          "23: import org.apache.nifi.integration.util.SourceTestProcessor;",
          "24: import org.apache.nifi.web.api.dto.ProcessorDTO;",
          "25: import org.apache.nifi.web.api.dto.RevisionDTO;",
          "26: import org.apache.nifi.web.api.dto.flow.FlowDTO;",
          "27: import org.apache.nifi.web.api.entity.ProcessGroupFlowEntity;",
          "28: import org.apache.nifi.web.api.entity.ProcessorEntity;",
          "29: import org.junit.AfterClass;",
          "30: import org.junit.BeforeClass;",
          "31: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import org.apache.nifi.util.Tuple;",
          "27: import org.apache.nifi.web.api.dto.SnippetDTO;",
          "29: import org.apache.nifi.web.api.entity.CopySnippetRequestEntity;",
          "30: import org.apache.nifi.web.api.entity.CreateTemplateRequestEntity;",
          "31: import org.apache.nifi.web.api.entity.FlowEntity;",
          "32: import org.apache.nifi.web.api.entity.InstantiateTemplateRequestEntity;",
          "35: import org.apache.nifi.web.api.entity.SnippetEntity;",
          "36: import org.apache.nifi.web.api.entity.TemplateEntity;",
          "38: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "437:         assertEquals(201, response.getStatus());",
          "438:     }",
          "440:     private ProcessorEntity getRandomProcessor(final NiFiTestUser user) throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:         final ProcessorEntity responseEntity = response.getEntity(ProcessorEntity.class);",
          "451:         deleteRestrictedComponent(responseEntity);",
          "452:     }",
          "459:     @Test",
          "460:     public void testCopyPasteRestrictedProcessor() throws Exception {",
          "461:         final String copyUrl = helper.getBaseUrl() + \"/process-groups/root/snippet-instance\";",
          "462:         final Tuple<ProcessorEntity, SnippetEntity> tuple = createSnippetWithRestrictedComponent();",
          "463:         final SnippetEntity snippetEntity = tuple.getValue();",
          "466:         final CopySnippetRequestEntity copyRequest = new CopySnippetRequestEntity();",
          "467:         copyRequest.setSnippetId(snippetEntity.getSnippet().getId());",
          "468:         copyRequest.setOriginX(0.0);",
          "469:         copyRequest.setOriginY(0.0);",
          "472:         ClientResponse response = helper.getReadWriteUser().testPost(copyUrl, copyRequest);",
          "475:         assertEquals(403, response.getStatus());",
          "478:         response = helper.getPrivilegedUser().testPost(copyUrl, copyRequest);",
          "481:         assertEquals(201, response.getStatus());",
          "483:         final FlowEntity flowEntity = response.getEntity(FlowEntity.class);",
          "486:         deleteRestrictedComponent(tuple.getKey());",
          "487:         deleteRestrictedComponent(flowEntity.getFlow().getProcessors().stream().findFirst().orElse(null));",
          "488:     }",
          "495:     @Test",
          "496:     public void testTemplateWithRestrictedProcessor() throws Exception {",
          "497:         final String createTemplateUrl = helper.getBaseUrl() + \"/process-groups/root/templates\";",
          "498:         final String instantiateTemplateUrl = helper.getBaseUrl() + \"/process-groups/root/template-instance\";",
          "499:         final Tuple<ProcessorEntity, SnippetEntity> tuple = createSnippetWithRestrictedComponent();",
          "500:         final SnippetEntity snippetEntity = tuple.getValue();",
          "503:         final CreateTemplateRequestEntity createTemplateRequest = new CreateTemplateRequestEntity();",
          "504:         createTemplateRequest.setSnippetId(snippetEntity.getSnippet().getId());",
          "505:         createTemplateRequest.setName(\"test\");",
          "508:         ClientResponse response = helper.getWriteUser().testPost(createTemplateUrl, createTemplateRequest);",
          "511:         assertEquals(403, response.getStatus());",
          "513:         response = helper.getReadWriteUser().testPost(createTemplateUrl, createTemplateRequest);",
          "516:         assertEquals(201, response.getStatus());",
          "518:         final TemplateEntity templateEntity = response.getEntity(TemplateEntity.class);",
          "521:         final InstantiateTemplateRequestEntity instantiateTemplateRequest = new InstantiateTemplateRequestEntity();",
          "522:         instantiateTemplateRequest.setTemplateId(templateEntity.getTemplate().getId());",
          "523:         instantiateTemplateRequest.setOriginX(0.0);",
          "524:         instantiateTemplateRequest.setOriginY(0.0);",
          "527:         response = helper.getReadWriteUser().testPost(instantiateTemplateUrl, instantiateTemplateRequest);",
          "530:         assertEquals(403, response.getStatus());",
          "533:         response = helper.getPrivilegedUser().testPost(instantiateTemplateUrl, instantiateTemplateRequest);",
          "536:         assertEquals(201, response.getStatus());",
          "538:         final FlowEntity flowEntity = response.getEntity(FlowEntity.class);",
          "541:         deleteTemplate(templateEntity);",
          "542:         deleteRestrictedComponent(tuple.getKey());",
          "543:         deleteRestrictedComponent(flowEntity.getFlow().getProcessors().stream().findFirst().orElse(null));",
          "544:     }",
          "546:     private Tuple<ProcessorEntity, SnippetEntity> createSnippetWithRestrictedComponent() throws Exception {",
          "547:         final String processorUrl = helper.getBaseUrl() + \"/process-groups/root/processors\";",
          "548:         final String snippetUrl = helper.getBaseUrl() + \"/snippets\";",
          "551:         ProcessorDTO processor = new ProcessorDTO();",
          "552:         processor.setName(\"restricted\");",
          "553:         processor.setType(RestrictedProcessor.class.getName());",
          "556:         final RevisionDTO revision = new RevisionDTO();",
          "557:         revision.setClientId(READ_WRITE_CLIENT_ID);",
          "558:         revision.setVersion(0L);",
          "561:         ProcessorEntity entity = new ProcessorEntity();",
          "562:         entity.setRevision(revision);",
          "563:         entity.setComponent(processor);",
          "566:         ClientResponse response = helper.getPrivilegedUser().testPost(processorUrl, entity);",
          "569:         assertEquals(201, response.getStatus());",
          "572:         final ProcessorEntity responseProcessorEntity = response.getEntity(ProcessorEntity.class);",
          "575:         final SnippetDTO snippet = new SnippetDTO();",
          "576:         snippet.setParentGroupId(responseProcessorEntity.getComponent().getParentGroupId());",
          "577:         snippet.getProcessors().put(responseProcessorEntity.getId(), responseProcessorEntity.getRevision());",
          "580:         final SnippetEntity snippetEntity = new SnippetEntity();",
          "581:         snippetEntity.setSnippet(snippet);",
          "584:         response = helper.getNoneUser().testPost(snippetUrl, snippetEntity);",
          "587:         assertEquals(403, response.getStatus());",
          "590:         response = helper.getReadWriteUser().testPost(snippetUrl, snippetEntity);",
          "593:         assertEquals(201, response.getStatus());",
          "596:         return new Tuple<>(responseProcessorEntity, response.getEntity(SnippetEntity.class));",
          "597:     }",
          "599:     private void deleteTemplate(final TemplateEntity entity) throws Exception {",
          "601:         ClientResponse response = helper.getReadWriteUser().testDelete(entity.getTemplate().getUri());",
          "604:         assertEquals(200, response.getStatus());",
          "605:     }",
          "607:     private void deleteRestrictedComponent(final ProcessorEntity entity) throws Exception {",
          "608:         if (entity == null) {",
          "609:             Assert.fail(\"Failed to get Processor from template or snippet request.\");",
          "610:             return;",
          "611:         }",
          "614:         final Map<String, String> queryParams = new HashMap<>();",
          "615:         queryParams.put(\"version\", String.valueOf(entity.getRevision().getVersion()));",
          "616:         queryParams.put(\"clientId\", READ_WRITE_CLIENT_ID);",
          "619:         ClientResponse response = helper.getReadWriteUser().testDelete(entity.getUri(), queryParams);",
          "622:         assertEquals(403, response.getStatus());",
          "624:         response = helper.getPrivilegedUser().testDelete(entity.getUri(), queryParams);",
          "627:         assertEquals(200, response.getStatus());",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/resources/META-INF/services/org.apache.nifi.processor.Processor||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/resources/META-INF/services/org.apache.nifi.processor.Processor": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/resources/META-INF/services/org.apache.nifi.processor.Processor -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/resources/META-INF/services/org.apache.nifi.processor.Processor",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # See the License for the specific language governing permissions and",
          "14: # limitations under the License.",
          "15: org.apache.nifi.integration.util.SourceTestProcessor",
          "",
          "[Removed Lines]",
          "16: org.apache.nifi.integration.util.TerminationTestProcessor",
          "",
          "[Added Lines]",
          "17: org.apache.nifi.integration.util.RestrictedProcessor",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17a36c6fd525dba837e13a71a52ddfd224782fae",
      "candidate_info": {
        "commit_hash": "17a36c6fd525dba837e13a71a52ddfd224782fae",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/17a36c6fd525dba837e13a71a52ddfd224782fae",
        "files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/ClusterCoordinator.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/node/NodeWorkload.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/AbstractNodeProtocolSender.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/NodeProtocolSender.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/impl/NodeProtocolSenderListener.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/ObjectFactory.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadRequestMessage.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadResponseMessage.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/test/java/org/apache/nifi/cluster/protocol/jaxb/message/TestJaxbProtocolUtils.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/NodeClusterCoordinatorFactoryBean.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/node/TestNodeClusterCoordinator.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/Node.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/ClusterCoordinatorNodeInformant.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SiteToSiteResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestSiteToSiteResource.java"
        ],
        "message": "NIFI-2825: Fix S2S getPeers flow file count\n\n- Added ClusterWorkload message to retrieve workload information from a\n  cluster coordinator\n- Use cluster workload to return queued flow file count to site-to-site\n  client so that it can calculate distribution of data transfer\n\nThis closes #1084.\n\nSigned-off-by: Bryan Bende <bbende@apache.org>",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/ClusterCoordinator.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/ClusterCoordinator.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/node/NodeWorkload.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/node/NodeWorkload.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/AbstractNodeProtocolSender.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/AbstractNodeProtocolSender.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/NodeProtocolSender.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/NodeProtocolSender.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/impl/NodeProtocolSenderListener.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/impl/NodeProtocolSenderListener.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/ObjectFactory.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/ObjectFactory.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadRequestMessage.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadRequestMessage.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadResponseMessage.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadResponseMessage.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/test/java/org/apache/nifi/cluster/protocol/jaxb/message/TestJaxbProtocolUtils.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/test/java/org/apache/nifi/cluster/protocol/jaxb/message/TestJaxbProtocolUtils.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/NodeClusterCoordinatorFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/NodeClusterCoordinatorFactoryBean.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/node/TestNodeClusterCoordinator.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/node/TestNodeClusterCoordinator.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/Node.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/Node.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/ClusterCoordinatorNodeInformant.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/ClusterCoordinatorNodeInformant.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SiteToSiteResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SiteToSiteResource.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestSiteToSiteResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestSiteToSiteResource.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/ClusterCoordinator.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/ClusterCoordinator.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/ClusterCoordinator.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/ClusterCoordinator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.nifi.cluster.coordination;",
          "20: import java.util.List;",
          "21: import java.util.Map;",
          "22: import java.util.Set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.io.IOException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: import org.apache.nifi.cluster.coordination.node.DisconnectionCode;",
          "25: import org.apache.nifi.cluster.coordination.node.NodeConnectionState;",
          "26: import org.apache.nifi.cluster.coordination.node.NodeConnectionStatus;",
          "27: import org.apache.nifi.cluster.event.NodeEvent;",
          "28: import org.apache.nifi.cluster.protocol.NodeIdentifier;",
          "29: import org.apache.nifi.reporting.Severity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.nifi.cluster.coordination.node.NodeWorkload;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:     String getFlowElectionStatus();",
          "239: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:     Map<NodeIdentifier, NodeWorkload> getClusterWorkload() throws IOException;",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/node/NodeWorkload.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/node/NodeWorkload.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/node/NodeWorkload.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/node/NodeWorkload.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.nifi.cluster.coordination.node;",
          "20: import javax.xml.bind.annotation.XmlRootElement;",
          "22: @XmlRootElement(name = \"nodeWorkload\")",
          "23: public class NodeWorkload {",
          "25:     private long reportedTimestamp;",
          "26:     private int flowFileCount;",
          "27:     private long flowFileBytes;",
          "28:     private int activeThreadCount;",
          "29:     private long systemStartTime;",
          "31:     public long getReportedTimestamp() {",
          "32:         return reportedTimestamp;",
          "33:     }",
          "35:     public void setReportedTimestamp(long reportedTimestamp) {",
          "36:         this.reportedTimestamp = reportedTimestamp;",
          "37:     }",
          "39:     public int getFlowFileCount() {",
          "40:         return flowFileCount;",
          "41:     }",
          "43:     public void setFlowFileCount(int flowFileCount) {",
          "44:         this.flowFileCount = flowFileCount;",
          "45:     }",
          "47:     public long getFlowFileBytes() {",
          "48:         return flowFileBytes;",
          "49:     }",
          "51:     public void setFlowFileBytes(long flowFileBytes) {",
          "52:         this.flowFileBytes = flowFileBytes;",
          "53:     }",
          "55:     public int getActiveThreadCount() {",
          "56:         return activeThreadCount;",
          "57:     }",
          "59:     public void setActiveThreadCount(int activeThreadCount) {",
          "60:         this.activeThreadCount = activeThreadCount;",
          "61:     }",
          "63:     public long getSystemStartTime() {",
          "64:         return systemStartTime;",
          "65:     }",
          "67:     public void setSystemStartTime(long systemStartTime) {",
          "68:         this.systemStartTime = systemStartTime;",
          "69:     }",
          "71: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/AbstractNodeProtocolSender.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/AbstractNodeProtocolSender.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/AbstractNodeProtocolSender.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/AbstractNodeProtocolSender.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.net.InetSocketAddress;",
          "22: import java.net.Socket;",
          "24: import org.apache.nifi.cluster.protocol.message.ConnectionRequestMessage;",
          "25: import org.apache.nifi.cluster.protocol.message.ConnectionResponseMessage;",
          "26: import org.apache.nifi.cluster.protocol.message.HeartbeatMessage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadRequestMessage;",
          "25: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadResponseMessage;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:         throw new ProtocolException(\"Expected message type '\" + MessageType.HEARTBEAT_RESPONSE + \"' but found '\" + responseMessage.getType() + \"'\");",
          "95:     }",
          "98:     private Socket createSocket() {",
          "99:         InetSocketAddress socketAddress = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     @Override",
          "100:     public ClusterWorkloadResponseMessage clusterWorkload(final ClusterWorkloadRequestMessage msg) throws ProtocolException {",
          "101:         final InetSocketAddress serviceAddress;",
          "102:         try {",
          "103:             serviceAddress = getServiceAddress();",
          "104:         } catch (IOException e) {",
          "105:             throw new ProtocolException(\"Failed to getServiceAddress due to \" + e, e);",
          "106:         }",
          "107:         final ProtocolMessage responseMessage = sendProtocolMessage(msg, serviceAddress.getHostName(), serviceAddress.getPort());",
          "108:         if (MessageType.CLUSTER_WORKLOAD_RESPONSE == responseMessage.getType()) {",
          "109:             return (ClusterWorkloadResponseMessage) responseMessage;",
          "110:         }",
          "112:         throw new ProtocolException(\"Expected message type '\" + MessageType.CLUSTER_WORKLOAD_RESPONSE + \"' but found '\" + responseMessage.getType() + \"'\");",
          "113:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/NodeProtocolSender.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/NodeProtocolSender.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/NodeProtocolSender.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/NodeProtocolSender.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.cluster.protocol;",
          "19: import org.apache.nifi.cluster.protocol.message.ConnectionRequestMessage;",
          "20: import org.apache.nifi.cluster.protocol.message.ConnectionResponseMessage;",
          "21: import org.apache.nifi.cluster.protocol.message.HeartbeatMessage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadRequestMessage;",
          "20: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadResponseMessage;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     HeartbeatResponseMessage heartbeat(HeartbeatMessage msg, String address) throws ProtocolException;",
          "52: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     ClusterWorkloadResponseMessage clusterWorkload(ClusterWorkloadRequestMessage msg) throws ProtocolException;",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/impl/NodeProtocolSenderListener.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/impl/NodeProtocolSenderListener.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/impl/NodeProtocolSenderListener.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/impl/NodeProtocolSenderListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.nifi.cluster.protocol.ProtocolHandler;",
          "25: import org.apache.nifi.cluster.protocol.ProtocolListener;",
          "26: import org.apache.nifi.cluster.protocol.UnknownServiceAddressException;",
          "27: import org.apache.nifi.cluster.protocol.message.ConnectionRequestMessage;",
          "28: import org.apache.nifi.cluster.protocol.message.ConnectionResponseMessage;",
          "29: import org.apache.nifi.cluster.protocol.message.HeartbeatMessage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadRequestMessage;",
          "28: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadResponseMessage;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     public HeartbeatResponseMessage heartbeat(final HeartbeatMessage msg, final String address) throws ProtocolException {",
          "97:         return sender.heartbeat(msg, address);",
          "98:     }",
          "99: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     @Override",
          "103:     public ClusterWorkloadResponseMessage clusterWorkload(ClusterWorkloadRequestMessage msg) throws ProtocolException {",
          "104:         return sender.clusterWorkload(msg);",
          "105:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/ObjectFactory.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/ObjectFactory.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/ObjectFactory.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/jaxb/message/ObjectFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.nifi.cluster.protocol.message.FlowResponseMessage;",
          "26: import org.apache.nifi.cluster.protocol.message.HeartbeatMessage;",
          "27: import org.apache.nifi.cluster.protocol.message.HeartbeatResponseMessage;",
          "28: import org.apache.nifi.cluster.protocol.message.MulticastProtocolMessage;",
          "29: import org.apache.nifi.cluster.protocol.message.NodeConnectionStatusRequestMessage;",
          "30: import org.apache.nifi.cluster.protocol.message.NodeConnectionStatusResponseMessage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadRequestMessage;",
          "29: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadResponseMessage;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:     public HeartbeatResponseMessage createHeartbeatResponse() {",
          "102:         return new HeartbeatResponseMessage();",
          "103:     }",
          "104: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     public ClusterWorkloadRequestMessage createClusterWorkloadRequest() {",
          "108:         return new ClusterWorkloadRequestMessage();",
          "109:     }",
          "111:     public ClusterWorkloadResponseMessage createClusterWorkloadResponse() {",
          "112:         return new ClusterWorkloadResponseMessage();",
          "113:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadRequestMessage.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadRequestMessage.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadRequestMessage.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadRequestMessage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.nifi.cluster.protocol.message;",
          "20: import javax.xml.bind.annotation.XmlRootElement;",
          "22: @XmlRootElement(name = \"clusterWorkloadRequest\")",
          "23: public class ClusterWorkloadRequestMessage extends ProtocolMessage {",
          "25:     @Override",
          "26:     public MessageType getType() {",
          "27:         return MessageType.CLUSTER_WORKLOAD_REQUEST;",
          "28:     }",
          "30: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadResponseMessage.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadResponseMessage.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadResponseMessage.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ClusterWorkloadResponseMessage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.nifi.cluster.protocol.message;",
          "20: import org.apache.nifi.cluster.coordination.node.NodeWorkload;",
          "21: import org.apache.nifi.cluster.protocol.NodeIdentifier;",
          "23: import javax.xml.bind.annotation.XmlRootElement;",
          "24: import java.util.Map;",
          "26: @XmlRootElement(name = \"clusterWorkloadResponse\")",
          "27: public class ClusterWorkloadResponseMessage extends ProtocolMessage {",
          "29:     private Map<NodeIdentifier, NodeWorkload> nodeWorkloads;",
          "31:     @Override",
          "32:     public MessageType getType() {",
          "33:         return MessageType.CLUSTER_WORKLOAD_RESPONSE;",
          "34:     }",
          "36:     public Map<NodeIdentifier, NodeWorkload> getNodeWorkloads() {",
          "37:         return nodeWorkloads;",
          "38:     }",
          "40:     public void setNodeWorkloads(Map<NodeIdentifier, NodeWorkload> nodeWorkloads) {",
          "41:         this.nodeWorkloads = nodeWorkloads;",
          "42:     }",
          "43: }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/protocol/message/ProtocolMessage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:         HEARTBEAT_RESPONSE,",
          "36:         NODE_CONNECTION_STATUS_REQUEST,",
          "37:         NODE_CONNECTION_STATUS_RESPONSE,",
          "39:     }",
          "41:     public abstract MessageType getType();",
          "",
          "[Removed Lines]",
          "38:         NODE_STATUS_CHANGE;",
          "",
          "[Added Lines]",
          "38:         NODE_STATUS_CHANGE,",
          "39:         CLUSTER_WORKLOAD_REQUEST,",
          "40:         CLUSTER_WORKLOAD_RESPONSE",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/test/java/org/apache/nifi/cluster/protocol/jaxb/message/TestJaxbProtocolUtils.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/test/java/org/apache/nifi/cluster/protocol/jaxb/message/TestJaxbProtocolUtils.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/test/java/org/apache/nifi/cluster/protocol/jaxb/message/TestJaxbProtocolUtils.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/test/java/org/apache/nifi/cluster/protocol/jaxb/message/TestJaxbProtocolUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.io.ByteArrayInputStream;",
          "24: import java.io.ByteArrayOutputStream;",
          "25: import java.util.Collections;",
          "26: import java.util.List;",
          "28: import javax.xml.bind.JAXBException;",
          "30: import org.apache.nifi.cluster.coordination.node.DisconnectionCode;",
          "31: import org.apache.nifi.cluster.coordination.node.NodeConnectionStatus;",
          "32: import org.apache.nifi.cluster.protocol.ComponentRevision;",
          "33: import org.apache.nifi.cluster.protocol.ConnectionResponse;",
          "34: import org.apache.nifi.cluster.protocol.DataFlow;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import java.util.HashMap;",
          "28: import java.util.Map;",
          "29: import java.util.stream.IntStream;",
          "35: import org.apache.nifi.cluster.coordination.node.NodeWorkload;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: import org.apache.nifi.cluster.protocol.StandardDataFlow;",
          "39: import org.apache.nifi.cluster.protocol.message.ConnectionResponseMessage;",
          "40: import org.apache.nifi.cluster.protocol.message.HeartbeatMessage;",
          "41: import org.apache.nifi.cluster.protocol.message.NodeConnectionStatusRequestMessage;",
          "42: import org.apache.nifi.cluster.protocol.message.NodeConnectionStatusResponseMessage;",
          "43: import org.apache.nifi.web.Revision;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadRequestMessage;",
          "46: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadResponseMessage;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:         final Object unmarshalled = JaxbProtocolUtils.JAXB_CONTEXT.createUnmarshaller().unmarshal(new ByteArrayInputStream(baos.toByteArray()));",
          "125:         assertTrue(unmarshalled instanceof HeartbeatMessage);",
          "126:     }",
          "127: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:     @Test",
          "135:     public void testRoundTripClusterWorkloadRequest() throws JAXBException {",
          "136:         final ClusterWorkloadRequestMessage msg = new ClusterWorkloadRequestMessage();",
          "137:         final ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "138:         JaxbProtocolUtils.JAXB_CONTEXT.createMarshaller().marshal(msg, baos);",
          "139:         final Object unmarshalled = JaxbProtocolUtils.JAXB_CONTEXT.createUnmarshaller().unmarshal(new ByteArrayInputStream(baos.toByteArray()));",
          "140:         assertTrue(unmarshalled instanceof ClusterWorkloadRequestMessage);",
          "141:     }",
          "143:     @Test",
          "144:     public void testRoundTripClusterWorkloadResponse() throws JAXBException {",
          "145:         final ClusterWorkloadResponseMessage msg = new ClusterWorkloadResponseMessage();",
          "146:         final Map<NodeIdentifier, NodeWorkload> expectedNodeWorkloads = new HashMap<>();",
          "148:         IntStream.range(1, 4).forEach(i -> {",
          "149:             final String hostname = \"node\" + i;",
          "150:             final NodeIdentifier nodeId = new NodeIdentifier(hostname, hostname, 8080, hostname, 8081, hostname, 8082, 8083, false);",
          "151:             final NodeWorkload workload = new NodeWorkload();",
          "152:             workload.setReportedTimestamp(System.currentTimeMillis() - 1000);",
          "153:             workload.setSystemStartTime(System.currentTimeMillis());",
          "154:             workload.setActiveThreadCount(i);",
          "155:             workload.setFlowFileCount(i * 10);",
          "156:             workload.setFlowFileBytes(i * 10 * 1024);",
          "157:             expectedNodeWorkloads.put(nodeId, workload);",
          "158:         });",
          "159:         msg.setNodeWorkloads(expectedNodeWorkloads);",
          "162:         final ByteArrayOutputStream baos = new ByteArrayOutputStream();",
          "163:         JaxbProtocolUtils.JAXB_CONTEXT.createMarshaller().marshal(msg, baos);",
          "166:         final Object unmarshalled = JaxbProtocolUtils.JAXB_CONTEXT.createUnmarshaller().unmarshal(new ByteArrayInputStream(baos.toByteArray()));",
          "167:         assertTrue(unmarshalled instanceof ClusterWorkloadResponseMessage);",
          "170:         final ClusterWorkloadResponseMessage response = (ClusterWorkloadResponseMessage) unmarshalled;",
          "171:         assertEquals(expectedNodeWorkloads.size(), response.getNodeWorkloads().size());",
          "172:         response.getNodeWorkloads().entrySet().stream().forEach(entry -> {",
          "173:             assertTrue(expectedNodeWorkloads.containsKey(entry.getKey()));",
          "174:             final NodeWorkload w = entry.getValue();",
          "175:             NodeWorkload expectedW = expectedNodeWorkloads.get(entry.getKey());",
          "176:             assertEquals(expectedW.getActiveThreadCount(), w.getActiveThreadCount());",
          "177:             assertEquals(expectedW.getReportedTimestamp(), w.getReportedTimestamp());",
          "178:             assertEquals(expectedW.getSystemStartTime(), w.getSystemStartTime());",
          "179:             assertEquals(expectedW.getFlowFileBytes(), w.getFlowFileBytes());",
          "180:             assertEquals(expectedW.getFlowFileCount(), w.getFlowFileCount());",
          "181:         });",
          "182:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import java.util.ArrayList;",
          "20: import java.util.Collections;",
          "21: import java.util.List;",
          "22: import java.util.Map;",
          "23: import java.util.Set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.util.HashMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import org.apache.nifi.cluster.coordination.ClusterCoordinator;",
          "31: import org.apache.nifi.cluster.coordination.node.NodeConnectionState;",
          "32: import org.apache.nifi.cluster.coordination.node.NodeConnectionStatus;",
          "33: import org.apache.nifi.cluster.protocol.Heartbeat;",
          "34: import org.apache.nifi.cluster.protocol.HeartbeatPayload;",
          "35: import org.apache.nifi.cluster.protocol.NodeIdentifier;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.apache.nifi.cluster.coordination.node.NodeWorkload;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38: import org.apache.nifi.cluster.protocol.ProtocolListener;",
          "39: import org.apache.nifi.cluster.protocol.message.HeartbeatMessage;",
          "40: import org.apache.nifi.cluster.protocol.message.HeartbeatResponseMessage;",
          "41: import org.apache.nifi.cluster.protocol.message.ProtocolMessage;",
          "42: import org.apache.nifi.cluster.protocol.message.ProtocolMessage.MessageType;",
          "43: import org.apache.nifi.util.NiFiProperties;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadRequestMessage;",
          "44: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadResponseMessage;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:     @Override",
          "132:     public ProtocolMessage handle(final ProtocolMessage msg) throws ProtocolException {",
          "135:         }",
          "138:         final Heartbeat heartbeat = heartbeatMsg.getHeartbeat();",
          "140:         final NodeIdentifier nodeId = heartbeat.getNodeIdentifier();",
          "",
          "[Removed Lines]",
          "133:         if (msg.getType() != MessageType.HEARTBEAT) {",
          "134:             throw new ProtocolException(\"Cannot handle message of type \" + msg.getType());",
          "137:         final HeartbeatMessage heartbeatMsg = (HeartbeatMessage) msg;",
          "",
          "[Added Lines]",
          "137:         switch (msg.getType()) {",
          "138:             case HEARTBEAT:",
          "139:                 return handleHeartbeat((HeartbeatMessage) msg);",
          "140:             case CLUSTER_WORKLOAD_REQUEST:",
          "141:                 return handleClusterWorkload((ClusterWorkloadRequestMessage) msg);",
          "142:             default:",
          "143:                 throw new ProtocolException(\"Cannot handle message of type \" + msg.getType());",
          "145:     }",
          "147:     private ProtocolMessage handleHeartbeat(final HeartbeatMessage msg) {",
          "148:         final HeartbeatMessage heartbeatMsg = msg;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169:         return responseMessage;",
          "170:     }",
          "172:     private List<NodeConnectionStatus> getUpdatedStatuses(final List<NodeConnectionStatus> nodeStatusList) {",
          "174:         final Map<NodeIdentifier, NodeConnectionStatus> nodeStatusMap = nodeStatusList.stream()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:     private ProtocolMessage handleClusterWorkload(final ClusterWorkloadRequestMessage msg) {",
          "185:         final ClusterWorkloadResponseMessage response = new ClusterWorkloadResponseMessage();",
          "186:         final Map<NodeIdentifier, NodeWorkload> workloads = new HashMap<>();",
          "187:         getLatestHeartbeats().values().stream()",
          "188:             .filter(hb -> NodeConnectionState.CONNECTED.equals(hb.getConnectionStatus().getState()))",
          "189:             .forEach(hb -> {",
          "190:                 NodeWorkload wl = new NodeWorkload();",
          "191:                 wl.setReportedTimestamp(hb.getTimestamp());",
          "192:                 wl.setSystemStartTime(hb.getSystemStartTime());",
          "193:                 wl.setActiveThreadCount(hb.getActiveThreadCount());",
          "194:                 wl.setFlowFileCount(hb.getFlowFileCount());",
          "195:                 wl.setFlowFileBytes(hb.getFlowFileBytes());",
          "196:                 workloads.put(hb.getNodeIdentifier(), wl);",
          "197:             });",
          "198:         response.setNodeWorkloads(workloads);",
          "200:         return response;",
          "201:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "202:     @Override",
          "203:     public boolean canHandle(ProtocolMessage msg) {",
          "205:     }",
          "206: }",
          "",
          "[Removed Lines]",
          "204:         return msg.getType() == MessageType.HEARTBEAT;",
          "",
          "[Added Lines]",
          "235:         return msg.getType() == MessageType.HEARTBEAT || msg.getType() == MessageType.CLUSTER_WORKLOAD_REQUEST;",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/node/NodeClusterCoordinator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: import org.apache.nifi.cluster.protocol.ConnectionResponse;",
          "50: import org.apache.nifi.cluster.protocol.DataFlow;",
          "51: import org.apache.nifi.cluster.protocol.NodeIdentifier;",
          "52: import org.apache.nifi.cluster.protocol.ProtocolException;",
          "53: import org.apache.nifi.cluster.protocol.ProtocolHandler;",
          "54: import org.apache.nifi.cluster.protocol.StandardDataFlow;",
          "55: import org.apache.nifi.cluster.protocol.impl.ClusterCoordinationProtocolSenderListener;",
          "56: import org.apache.nifi.cluster.protocol.message.ConnectionRequestMessage;",
          "57: import org.apache.nifi.cluster.protocol.message.ConnectionResponseMessage;",
          "58: import org.apache.nifi.cluster.protocol.message.DisconnectMessage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import org.apache.nifi.cluster.protocol.NodeProtocolSender;",
          "57: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadRequestMessage;",
          "58: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadResponseMessage;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:     private final LeaderElectionManager leaderElectionManager;",
          "89:     private final AtomicLong latestUpdateId = new AtomicLong(-1);",
          "90:     private final FlowElection flowElection;",
          "92:     private volatile FlowService flowService;",
          "93:     private volatile boolean connected;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     private final NodeProtocolSender nodeProtocolSender;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:     private final ConcurrentMap<NodeIdentifier, CircularFifoQueue<NodeEvent>> nodeEvents = new ConcurrentHashMap<>();",
          "100:     public NodeClusterCoordinator(final ClusterCoordinationProtocolSenderListener senderListener, final EventReporter eventReporter, final LeaderElectionManager leaderElectionManager,",
          "102:         this.senderListener = senderListener;",
          "103:         this.flowService = null;",
          "104:         this.eventReporter = eventReporter;",
          "",
          "[Removed Lines]",
          "101:             final FlowElection flowElection, final ClusterNodeFirewall firewall, final RevisionManager revisionManager, final NiFiProperties nifiProperties) {",
          "",
          "[Added Lines]",
          "105:             final FlowElection flowElection, final ClusterNodeFirewall firewall, final RevisionManager revisionManager, final NiFiProperties nifiProperties,",
          "106:             final NodeProtocolSender nodeProtocolSender) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:         this.nifiProperties = nifiProperties;",
          "108:         this.leaderElectionManager = leaderElectionManager;",
          "109:         this.flowElection = flowElection;",
          "111:         senderListener.addHandler(this);",
          "112:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:         this.nodeProtocolSender = nodeProtocolSender;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1043:     public boolean isConnected() {",
          "1044:         return connected;",
          "1045:     }",
          "1046: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1053:     @Override",
          "1054:     public Map<NodeIdentifier, NodeWorkload> getClusterWorkload() throws IOException {",
          "1055:         final ClusterWorkloadRequestMessage request = new ClusterWorkloadRequestMessage();",
          "1056:         final ClusterWorkloadResponseMessage response = nodeProtocolSender.clusterWorkload(request);",
          "1057:         return response.getNodeWorkloads();",
          "1058:     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/NodeClusterCoordinatorFactoryBean.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/NodeClusterCoordinatorFactoryBean.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/NodeClusterCoordinatorFactoryBean.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/spring/NodeClusterCoordinatorFactoryBean.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import org.apache.nifi.cluster.coordination.flow.FlowElection;",
          "21: import org.apache.nifi.cluster.coordination.node.NodeClusterCoordinator;",
          "22: import org.apache.nifi.cluster.firewall.ClusterNodeFirewall;",
          "23: import org.apache.nifi.cluster.protocol.impl.ClusterCoordinationProtocolSenderListener;",
          "24: import org.apache.nifi.controller.leader.election.LeaderElectionManager;",
          "25: import org.apache.nifi.events.EventReporter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.apache.nifi.cluster.protocol.NodeProtocolSender;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:             final RevisionManager revisionManager = applicationContext.getBean(\"revisionManager\", RevisionManager.class);",
          "47:             final LeaderElectionManager electionManager = applicationContext.getBean(\"leaderElectionManager\", LeaderElectionManager.class);",
          "48:             final FlowElection flowElection = applicationContext.getBean(\"flowElection\", FlowElection.class);",
          "51:         }",
          "53:         return nodeClusterCoordinator;",
          "",
          "[Removed Lines]",
          "50:             nodeClusterCoordinator = new NodeClusterCoordinator(protocolSenderListener, eventReporter, electionManager, flowElection, clusterFirewall, revisionManager, properties);",
          "",
          "[Added Lines]",
          "50:             final NodeProtocolSender nodeProtocolSender = applicationContext.getBean(\"nodeProtocolSender\", NodeProtocolSender.class);",
          "51:             nodeClusterCoordinator = new NodeClusterCoordinator(protocolSenderListener, eventReporter, electionManager, flowElection, clusterFirewall, revisionManager, properties, nodeProtocolSender);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.apache.nifi.cluster.coordination.node.DisconnectionCode;",
          "37: import org.apache.nifi.cluster.coordination.node.NodeConnectionState;",
          "38: import org.apache.nifi.cluster.coordination.node.NodeConnectionStatus;",
          "39: import org.apache.nifi.cluster.event.NodeEvent;",
          "40: import org.apache.nifi.cluster.protocol.NodeIdentifier;",
          "41: import org.apache.nifi.reporting.Severity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.apache.nifi.cluster.coordination.node.NodeWorkload;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:         public String getFlowElectionStatus() {",
          "330:             return null;",
          "331:         }",
          "332:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:         @Override",
          "335:         public Map<NodeIdentifier, NodeWorkload> getClusterWorkload() throws IOException {",
          "336:             return null;",
          "337:         }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/node/TestNodeClusterCoordinator.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/node/TestNodeClusterCoordinator.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/node/TestNodeClusterCoordinator.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/node/TestNodeClusterCoordinator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         final RevisionManager revisionManager = Mockito.mock(RevisionManager.class);",
          "81:         Mockito.when(revisionManager.getAllRevisions()).thenReturn(Collections.emptyList());",
          "84:             @Override",
          "85:             void notifyOthersOfNodeStatusChange(NodeConnectionStatus updatedStatus, boolean notifyAllNodes, boolean waitForCoordinator) {",
          "86:                 nodeStatuses.add(updatedStatus);",
          "",
          "[Removed Lines]",
          "83:         coordinator = new NodeClusterCoordinator(senderListener, eventReporter, null, new FirstVoteWinsFlowElection(), null, revisionManager, createProperties()) {",
          "",
          "[Added Lines]",
          "83:         coordinator = new NodeClusterCoordinator(senderListener, eventReporter, null, new FirstVoteWinsFlowElection(), null, revisionManager, createProperties(), null) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:         final RevisionManager revisionManager = Mockito.mock(RevisionManager.class);",
          "136:         Mockito.when(revisionManager.getAllRevisions()).thenReturn(Collections.emptyList());",
          "139:             @Override",
          "140:             void notifyOthersOfNodeStatusChange(NodeConnectionStatus updatedStatus, boolean notifyAllNodes, boolean waitForCoordinator) {",
          "141:             }",
          "",
          "[Removed Lines]",
          "138:         final NodeClusterCoordinator coordinator = new NodeClusterCoordinator(senderListener, eventReporter, null, new FirstVoteWinsFlowElection(), null, revisionManager, createProperties()) {",
          "",
          "[Added Lines]",
          "138:         final NodeClusterCoordinator coordinator = new NodeClusterCoordinator(senderListener, eventReporter, null, new FirstVoteWinsFlowElection(),",
          "139:                 null, revisionManager, createProperties(), null) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:         final RevisionManager revisionManager = Mockito.mock(RevisionManager.class);",
          "176:         Mockito.when(revisionManager.getAllRevisions()).thenReturn(Collections.emptyList());",
          "179:             @Override",
          "180:             void notifyOthersOfNodeStatusChange(NodeConnectionStatus updatedStatus, boolean notifyAllNodes, boolean waitForCoordinator) {",
          "181:             }",
          "",
          "[Removed Lines]",
          "178:         final NodeClusterCoordinator coordinator = new NodeClusterCoordinator(senderListener, eventReporter, null, new FirstVoteWinsFlowElection(), null, revisionManager, createProperties()) {",
          "",
          "[Added Lines]",
          "179:         final NodeClusterCoordinator coordinator = new NodeClusterCoordinator(senderListener, eventReporter, null, new FirstVoteWinsFlowElection(),",
          "180:                 null, revisionManager, createProperties(), null) {",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/Node.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/Node.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/Node.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/integration/Node.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:         }",
          "279:         final ClusterCoordinationProtocolSenderListener protocolSenderListener = new ClusterCoordinationProtocolSenderListener(createCoordinatorProtocolSender(), protocolListener);",
          "281:     }",
          "",
          "[Removed Lines]",
          "280:         return new NodeClusterCoordinator(protocolSenderListener, eventReporter, electionManager, flowElection, null, revisionManager, nodeProperties);",
          "",
          "[Added Lines]",
          "280:         return new NodeClusterCoordinator(protocolSenderListener, eventReporter, electionManager, flowElection, null,",
          "281:                 revisionManager, nodeProperties, protocolSender);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/ClusterCoordinatorNodeInformant.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/ClusterCoordinatorNodeInformant.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/ClusterCoordinatorNodeInformant.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/ClusterCoordinatorNodeInformant.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.nifi.controller;",
          "21: import java.util.List;",
          "24: import org.apache.nifi.cluster.coordination.ClusterCoordinator;",
          "26: import org.apache.nifi.cluster.protocol.NodeIdentifier;",
          "27: import org.apache.nifi.remote.cluster.ClusterNodeInformation;",
          "28: import org.apache.nifi.remote.cluster.NodeInformant;",
          "",
          "[Removed Lines]",
          "20: import java.util.ArrayList;",
          "22: import java.util.Set;",
          "25: import org.apache.nifi.cluster.coordination.node.NodeConnectionState;",
          "",
          "[Added Lines]",
          "20: import java.io.IOException;",
          "22: import java.util.stream.Collectors;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     @Override",
          "39:     public ClusterNodeInformation getNodeInformation() {",
          "48:         }",
          "50:         final ClusterNodeInformation nodeInfo = new ClusterNodeInformation();",
          "",
          "[Removed Lines]",
          "40:         final List<NodeInformation> nodeInfoCollection = new ArrayList<>();",
          "41:         final Set<NodeIdentifier> nodeIds = clusterCoordinator.getNodeIdentifiers(NodeConnectionState.CONNECTED);",
          "44:         for (final NodeIdentifier nodeId : nodeIds) {",
          "45:             final NodeInformation nodeInfo = new NodeInformation(nodeId.getSiteToSiteAddress(), nodeId.getSiteToSitePort(),",
          "46:                 nodeId.getSiteToSiteHttpApiPort(), nodeId.getApiPort(), nodeId.isSiteToSiteSecure(), 0);",
          "47:             nodeInfoCollection.add(nodeInfo);",
          "",
          "[Added Lines]",
          "39:         final List<NodeInformation> nodeInfoCollection;",
          "40:         try {",
          "41:             nodeInfoCollection = clusterCoordinator.getClusterWorkload().entrySet().stream().map(entry -> {",
          "42:                 final NodeIdentifier nodeId = entry.getKey();",
          "43:                 final NodeInformation nodeInfo = new NodeInformation(nodeId.getSiteToSiteAddress(), nodeId.getSiteToSitePort(),",
          "44:                         nodeId.getSiteToSiteHttpApiPort(), nodeId.getApiPort(), nodeId.isSiteToSiteSecure(), entry.getValue().getFlowFileCount());",
          "45:                 return nodeInfo;",
          "46:             }).collect(Collectors.toList());",
          "47:         } catch (IOException e) {",
          "48:             throw new RuntimeException(\"Failed to retrieve cluster workload due to \" + e, e);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SiteToSiteResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SiteToSiteResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SiteToSiteResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/SiteToSiteResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.apache.nifi.authorization.user.NiFiUser;",
          "35: import org.apache.nifi.authorization.user.NiFiUserUtils;",
          "36: import org.apache.nifi.cluster.coordination.ClusterCoordinator;",
          "38: import org.apache.nifi.cluster.protocol.NodeIdentifier;",
          "39: import org.apache.nifi.remote.HttpRemoteSiteListener;",
          "40: import org.apache.nifi.remote.VersionNegotiator;",
          "",
          "[Removed Lines]",
          "37: import org.apache.nifi.cluster.coordination.node.NodeConnectionState;",
          "",
          "[Added Lines]",
          "37: import org.apache.nifi.cluster.coordination.node.NodeWorkload;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: import javax.ws.rs.core.Context;",
          "60: import javax.ws.rs.core.MediaType;",
          "61: import javax.ws.rs.core.Response;",
          "62: import java.net.InetAddress;",
          "63: import java.net.UnknownHostException;",
          "64: import java.util.ArrayList;",
          "65: import java.util.HashMap;",
          "66: import java.util.List;",
          "67: import java.util.Map;",
          "70: import static org.apache.commons.lang3.StringUtils.isEmpty;",
          "",
          "[Removed Lines]",
          "68: import java.util.Set;",
          "",
          "[Added Lines]",
          "62: import java.io.IOException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:         final List<PeerDTO> peers = new ArrayList<>();",
          "218:         if (properties.isNode()) {",
          "230:             }",
          "231:         } else {",
          "233:             final PeerDTO peer = new PeerDTO();",
          "",
          "[Removed Lines]",
          "219:             final Set<NodeIdentifier> nodeIds = clusterCoordinator.getNodeIdentifiers(NodeConnectionState.CONNECTED);",
          "222:             for (final NodeIdentifier nodeId : nodeIds) {",
          "223:                 final PeerDTO peer = new PeerDTO();",
          "224:                 final String siteToSiteAddress = nodeId.getSiteToSiteAddress();",
          "225:                 peer.setHostname(siteToSiteAddress == null ? nodeId.getApiAddress() : siteToSiteAddress);",
          "226:                 peer.setPort(nodeId.getSiteToSiteHttpApiPort() == null ? nodeId.getApiPort() : nodeId.getSiteToSiteHttpApiPort());",
          "227:                 peer.setSecure(nodeId.isSiteToSiteSecure());",
          "228:                 peer.setFlowFileCount(0);",
          "229:                 peers.add(peer);",
          "",
          "[Added Lines]",
          "220:             try {",
          "221:                 final Map<NodeIdentifier, NodeWorkload> clusterWorkload = clusterCoordinator.getClusterWorkload();",
          "222:                 clusterWorkload.entrySet().stream().forEach(entry -> {",
          "223:                     final PeerDTO peer = new PeerDTO();",
          "224:                     final NodeIdentifier nodeId = entry.getKey();",
          "225:                     final String siteToSiteAddress = nodeId.getSiteToSiteAddress();",
          "226:                     peer.setHostname(siteToSiteAddress == null ? nodeId.getApiAddress() : siteToSiteAddress);",
          "227:                     peer.setPort(nodeId.getSiteToSiteHttpApiPort() == null ? nodeId.getApiPort() : nodeId.getSiteToSiteHttpApiPort());",
          "228:                     peer.setSecure(nodeId.isSiteToSiteSecure());",
          "229:                     peer.setFlowFileCount(entry.getValue().getFlowFileCount());",
          "230:                     peers.add(peer);",
          "231:                 });",
          "232:             } catch (IOException e) {",
          "233:                 throw new RuntimeException(\"Failed to retrieve cluster workload due to \" + e, e);",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestSiteToSiteResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestSiteToSiteResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestSiteToSiteResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/test/java/org/apache/nifi/web/api/TestSiteToSiteResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.web.api;",
          "19: import org.apache.nifi.remote.protocol.ResponseCode;",
          "20: import org.apache.nifi.remote.protocol.http.HttpHeaders;",
          "21: import org.apache.nifi.util.NiFiProperties;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import org.apache.nifi.cluster.coordination.ClusterCoordinator;",
          "20: import org.apache.nifi.cluster.coordination.node.NodeWorkload;",
          "21: import org.apache.nifi.cluster.protocol.NodeIdentifier;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import javax.servlet.http.HttpServletRequest;",
          "31: import javax.ws.rs.core.Response;",
          "32: import java.net.URL;",
          "34: import static org.junit.Assert.assertEquals;",
          "35: import static org.junit.Assert.assertNull;",
          "36: import static org.mockito.Matchers.eq;",
          "37: import static org.mockito.Mockito.doReturn;",
          "38: import static org.mockito.Mockito.mock;",
          "40: public class TestSiteToSiteResource {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import java.util.HashMap;",
          "37: import java.util.Map;",
          "38: import java.util.stream.IntStream;",
          "41: import static org.junit.Assert.assertNotNull;",
          "46: import static org.mockito.Mockito.when;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:         assertEquals(1, resultEntity.getPeers().size());",
          "117:     }",
          "120:     @Test",
          "121:     public void testPeersVersionWasNotSpecified() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     @Test",
          "128:     public void testPeersClustered() throws Exception {",
          "129:         final HttpServletRequest req = createCommonHttpServletRequest();",
          "131:         final NiFiServiceFacade serviceFacade = mock(NiFiServiceFacade.class);",
          "133:         final SiteToSiteResource resource = getSiteToSiteResourceClustered(serviceFacade);",
          "135:         final ClusterCoordinator clusterCoordinator = mock(ClusterCoordinator.class);",
          "136:         final Map<String, NodeWorkload> hostportWorkloads = new HashMap<>();",
          "137:         final Map<NodeIdentifier, NodeWorkload> workloads = new HashMap<>();",
          "138:         IntStream.range(1, 4).forEach(i -> {",
          "139:             final String hostname = \"node\" + i;",
          "140:             final int siteToSiteHttpApiPort = 8110 + i;",
          "141:             final NodeIdentifier nodeId = new NodeIdentifier(hostname, hostname, 8080 + i, hostname, 8090 + i, hostname, 8100 + i, siteToSiteHttpApiPort, false);",
          "142:             final NodeWorkload workload = new NodeWorkload();",
          "143:             workload.setReportedTimestamp(System.currentTimeMillis() - i);",
          "144:             workload.setFlowFileBytes(1024 * i);",
          "145:             workload.setFlowFileCount(10 * i);",
          "146:             workload.setActiveThreadCount(i);",
          "147:             workload.setSystemStartTime(System.currentTimeMillis() - (1000 * i));",
          "148:             workloads.put(nodeId, workload);",
          "149:             hostportWorkloads.put(hostname + \":\" + siteToSiteHttpApiPort, workload);",
          "150:         });",
          "151:         when(clusterCoordinator.getClusterWorkload()).thenReturn(workloads);",
          "152:         resource.setClusterCoordinator(clusterCoordinator);",
          "154:         final Response response = resource.getPeers(req);",
          "156:         PeersEntity resultEntity = (PeersEntity) response.getEntity();",
          "158:         assertEquals(200, response.getStatus());",
          "159:         assertEquals(3, resultEntity.getPeers().size());",
          "160:         resultEntity.getPeers().stream().forEach(peerDTO -> {",
          "161:             final NodeWorkload workload = hostportWorkloads.get(peerDTO.getHostname() + \":\" + peerDTO.getPort());",
          "162:             assertNotNull(workload);",
          "163:             assertEquals(workload.getFlowFileCount(), peerDTO.getFlowFileCount());",
          "164:         });",
          "166:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160:         resource.setServiceFacade(serviceFacade);",
          "161:         return resource;",
          "162:     }",
          "163: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:     private SiteToSiteResource getSiteToSiteResourceClustered(final NiFiServiceFacade serviceFacade) {",
          "214:         final Map<String, String> clusterSettings = new HashMap<>();",
          "215:         clusterSettings.put(NiFiProperties.CLUSTER_IS_NODE, \"true\");",
          "216:         final NiFiProperties properties = NiFiProperties.createBasicNiFiProperties(null, clusterSettings);",
          "217:         final SiteToSiteResource resource = new SiteToSiteResource(properties) {",
          "218:             @Override",
          "219:             protected void authorizeSiteToSite() {",
          "220:             }",
          "221:         };",
          "222:         resource.setProperties(properties);",
          "223:         resource.setServiceFacade(serviceFacade);",
          "224:         return resource;",
          "225:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0536c3edf146b27c50e26c026e4cce2c1624acbd",
      "candidate_info": {
        "commit_hash": "0536c3edf146b27c50e26c026e4cce2c1624acbd",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/0536c3edf146b27c50e26c026e4cce2c1624acbd",
        "files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/pom.xml",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/persistence/TemplateDeserializerTest.groovy",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/resources/xxe_template.xml"
        ],
        "message": "NIFI-4353 Implemented new JAXB logic. Added unit test and template test resource. Added RAT exclusion. This closes #2128",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/persistence/TemplateDeserializerTest.groovy||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/persistence/TemplateDeserializerTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/persistence/TemplateDeserializer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.persistence;",
          "19: import java.io.InputStream;",
          "21: import javax.xml.bind.JAXBContext;",
          "22: import javax.xml.bind.JAXBElement;",
          "23: import javax.xml.bind.JAXBException;",
          "24: import javax.xml.bind.Unmarshaller;",
          "25: import javax.xml.transform.stream.StreamSource;",
          "27: import org.apache.nifi.controller.serialization.FlowSerializationException;",
          "28: import org.apache.nifi.web.api.dto.TemplateDTO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import javax.xml.stream.XMLInputFactory;",
          "25: import javax.xml.stream.XMLStreamException;",
          "26: import javax.xml.stream.XMLStreamReader;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     public static TemplateDTO deserialize(final InputStream inStream) {",
          "33:         try {",
          "34:             JAXBContext context = JAXBContext.newInstance(TemplateDTO.class);",
          "35:             Unmarshaller unmarshaller = context.createUnmarshaller();",
          "37:             return templateElement.getValue();",
          "39:             throw new FlowSerializationException(e);",
          "40:         }",
          "41:     }",
          "",
          "[Removed Lines]",
          "36:             JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(new StreamSource(inStream), TemplateDTO.class);",
          "38:         } catch (final JAXBException e) {",
          "",
          "[Added Lines]",
          "38:             XMLInputFactory xif = XMLInputFactory.newFactory();",
          "39:             xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);",
          "40:             xif.setProperty(XMLInputFactory.SUPPORT_DTD, false);",
          "41:             XMLStreamReader xsr = xif.createXMLStreamReader(new StreamSource(inStream));",
          "44:             JAXBElement<TemplateDTO> templateElement = unmarshaller.unmarshal(xsr, TemplateDTO.class);",
          "46:         } catch (final JAXBException | XMLStreamException e) {",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/persistence/TemplateDeserializerTest.groovy||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/persistence/TemplateDeserializerTest.groovy": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/persistence/TemplateDeserializerTest.groovy -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/groovy/org/apache/nifi/persistence/TemplateDeserializerTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.nifi.persistence",
          "19: import org.apache.nifi.web.api.dto.TemplateDTO",
          "20: import org.junit.After",
          "21: import org.junit.Before",
          "22: import org.junit.BeforeClass",
          "23: import org.junit.Test",
          "24: import org.junit.runner.RunWith",
          "25: import org.junit.runners.JUnit4",
          "26: import org.slf4j.Logger",
          "27: import org.slf4j.LoggerFactory",
          "29: @RunWith(JUnit4.class)",
          "30: class TemplateDeserializerTest extends GroovyTestCase {",
          "31:     private static final Logger logger = LoggerFactory.getLogger(TemplateDeserializerTest.class)",
          "33:     @BeforeClass",
          "34:     static void setUpOnce() throws Exception {",
          "35:         logger.metaClass.methodMissing = { String name, args ->",
          "36:             logger.info(\"[${name?.toUpperCase()}] ${(args as List).join(\" \")}\")",
          "37:         }",
          "38:     }",
          "40:     @Before",
          "41:     void setUp() throws Exception {",
          "43:     }",
          "45:     @After",
          "46:     void tearDown() throws Exception {",
          "48:     }",
          "50:     @Test",
          "51:     void testShouldHandleXXEInTemplateLoad() {",
          "53:         final String XXE_TEMPLATE_FILEPATH = \"src/test/resources/xxe_template.xml\"",
          "54:         InputStream templateStream = new File(XXE_TEMPLATE_FILEPATH).newInputStream()",
          "57:         def msg = shouldFail() {",
          "58:             TemplateDTO template = TemplateDeserializer.deserialize(templateStream)",
          "59:             logger.info(\"Deserialized template \\\"${template.name}\\\" -- ${template.description}\")",
          "60:         }",
          "63:         logger.expected(msg)",
          "64:         assert msg =~ \"XMLStreamException: ParseError \"",
          "65:     }",
          "66: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c5d4084d586698575a75ee11b4407e4257254b4",
      "candidate_info": {
        "commit_hash": "6c5d4084d586698575a75ee11b4407e4257254b4",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/6c5d4084d586698575a75ee11b4407e4257254b4",
        "files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
        ],
        "message": "NIFI-3207: Fixed Template upload import URI\n\n- Fixing the importUri when replicating a Template upload request. Previously was leveraging getResourceUri which considers proxy headers meant for client responses.\n\nThis closes #1334.\n\nSigned-off-by: Koji Kawamura <ijokarumawak@apache.org>",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ProcessGroupResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: import javax.ws.rs.PathParam;",
          "90: import javax.ws.rs.Produces;",
          "91: import javax.ws.rs.QueryParam;",
          "93: import javax.ws.rs.core.Context;",
          "94: import javax.ws.rs.core.MediaType;",
          "95: import javax.ws.rs.core.Response;",
          "96: import javax.xml.bind.JAXBContext;",
          "97: import javax.xml.bind.JAXBElement;",
          "98: import javax.xml.bind.JAXBException;",
          "",
          "[Removed Lines]",
          "92: import javax.ws.rs.WebApplicationException;",
          "",
          "[Added Lines]",
          "95: import javax.ws.rs.core.UriBuilder;",
          "96: import javax.ws.rs.core.UriInfo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100: import javax.xml.transform.stream.StreamSource;",
          "101: import java.io.InputStream;",
          "102: import java.net.URI;",
          "104: import java.util.HashMap;",
          "105: import java.util.List;",
          "106: import java.util.Map;",
          "",
          "[Removed Lines]",
          "103: import java.net.URISyntaxException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2044:     )",
          "2045:     public Response uploadTemplate(",
          "2046:             @Context final HttpServletRequest httpServletRequest,",
          "2047:             @ApiParam(",
          "2048:                     value = \"The process group id.\",",
          "2049:                     required = true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2047:             @Context final UriInfo uriInfo,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2080:         if (isReplicateRequest()) {",
          "2090:             final Map<String, String> headersToOverride = new HashMap<>();",
          "2091:             headersToOverride.put(\"content-type\", MediaType.APPLICATION_XML);",
          "",
          "[Removed Lines]",
          "2082:             URI importUri = null;",
          "2083:             try {",
          "2084:                 importUri = new URI(generateResourceUri(\"process-groups\", groupId, \"templates\", \"import\"));",
          "2085:             } catch (final URISyntaxException e) {",
          "2086:                 throw new WebApplicationException(e);",
          "2087:             }",
          "",
          "[Added Lines]",
          "2083:             final UriBuilder uriBuilder = uriInfo.getBaseUriBuilder();",
          "2084:             uriBuilder.segment(\"process-groups\", groupId, \"templates\", \"import\");",
          "2085:             final URI importUri = uriBuilder.build();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d33c4c72d49979ab04db489e429dd202d51585b1",
      "candidate_info": {
        "commit_hash": "d33c4c72d49979ab04db489e429dd202d51585b1",
        "repo": "apache/nifi",
        "commit_url": "https://github.com/apache/nifi/commit/d33c4c72d49979ab04db489e429dd202d51585b1",
        "files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/HeartbeatMonitor.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/AbstractHeartbeatMonitor.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java"
        ],
        "message": "NIFI-3933: - When monitoring heartbeats use the connected nodes as the basis for the check. This addresses the case when a node is terminated and no corresponding heartbeats exist.",
        "before_after_code_files": [
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/HeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/HeartbeatMonitor.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/AbstractHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/AbstractHeartbeatMonitor.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
          "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java"
          ],
          "candidate": [
            "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java"
          ]
        }
      },
      "candidate_diff": {
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/HeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/HeartbeatMonitor.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/HeartbeatMonitor.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/HeartbeatMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     void purgeHeartbeats();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     long getPurgeTimestamp();",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/AbstractHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/AbstractHeartbeatMonitor.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/AbstractHeartbeatMonitor.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/AbstractHeartbeatMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:         final long maxMillis = heartbeatIntervalMillis * 8;",
          "170:                 }",
          "171:             }",
          "172:         }",
          "",
          "[Removed Lines]",
          "157:         final long threshold = System.currentTimeMillis() - maxMillis;",
          "158:         for (final NodeHeartbeat heartbeat : latestHeartbeats.values()) {",
          "159:             if (heartbeat.getTimestamp() < threshold) {",
          "160:                 final long secondsSinceLastHeartbeat = TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - heartbeat.getTimestamp());",
          "162:                 clusterCoordinator.disconnectionRequestedByNode(heartbeat.getNodeIdentifier(), DisconnectionCode.LACK_OF_HEARTBEAT,",
          "163:                         \"Have not received a heartbeat from node in \" + secondsSinceLastHeartbeat + \" seconds\");",
          "165:                 try {",
          "166:                     removeHeartbeat(heartbeat.getNodeIdentifier());",
          "167:                 } catch (final Exception e) {",
          "168:                     logger.warn(\"Failed to remove heartbeat for {} due to {}\", heartbeat.getNodeIdentifier(), e.toString());",
          "169:                     logger.warn(\"\", e);",
          "",
          "[Added Lines]",
          "157:         final long currentTimestamp = System.currentTimeMillis();",
          "158:         final long threshold = currentTimestamp - maxMillis;",
          "161:         for (final NodeIdentifier nodeIdentifier : clusterCoordinator.getNodeIdentifiers(NodeConnectionState.CONNECTED)) {",
          "162:             final NodeHeartbeat heartbeat = latestHeartbeats.get(nodeIdentifier);",
          "165:             if (heartbeat == null) {",
          "166:                 final long purgeTimestamp = getPurgeTimestamp();",
          "169:                 if (purgeTimestamp < threshold) {",
          "170:                     final long secondsSinceLastPurge = TimeUnit.MILLISECONDS.toSeconds(currentTimestamp - purgeTimestamp);",
          "172:                     clusterCoordinator.disconnectionRequestedByNode(nodeIdentifier, DisconnectionCode.LACK_OF_HEARTBEAT,",
          "173:                             \"Have not received a heartbeat from node in \" + secondsSinceLastPurge + \" seconds\");",
          "174:                 }",
          "175:             } else {",
          "177:                 if (heartbeat.getTimestamp() < threshold) {",
          "178:                     final long secondsSinceLastHeartbeat = TimeUnit.MILLISECONDS.toSeconds(currentTimestamp - heartbeat.getTimestamp());",
          "180:                     clusterCoordinator.disconnectionRequestedByNode(nodeIdentifier, DisconnectionCode.LACK_OF_HEARTBEAT,",
          "181:                             \"Have not received a heartbeat from node in \" + secondsSinceLastHeartbeat + \" seconds\");",
          "183:                     try {",
          "184:                         removeHeartbeat(nodeIdentifier);",
          "185:                     } catch (final Exception e) {",
          "186:                         logger.warn(\"Failed to remove heartbeat for {} due to {}\", nodeIdentifier, e.toString());",
          "187:                         logger.warn(\"\", e);",
          "188:                     }",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/heartbeat/ClusterProtocolHeartbeatMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.nifi.cluster.coordination.heartbeat;",
          "31: import org.apache.nifi.cluster.coordination.ClusterCoordinator;",
          "32: import org.apache.nifi.cluster.coordination.node.NodeConnectionState;",
          "33: import org.apache.nifi.cluster.coordination.node.NodeConnectionStatus;",
          "",
          "[Removed Lines]",
          "19: import java.util.ArrayList;",
          "20: import java.util.Collections;",
          "21: import java.util.HashMap;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "24: import java.util.Set;",
          "25: import java.util.concurrent.ConcurrentHashMap;",
          "26: import java.util.concurrent.ConcurrentMap;",
          "27: import java.util.function.Function;",
          "28: import java.util.stream.Collectors;",
          "29: import javax.xml.bind.JAXBContext;",
          "30: import javax.xml.bind.Unmarshaller;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: import org.apache.nifi.cluster.protocol.ProtocolException;",
          "39: import org.apache.nifi.cluster.protocol.ProtocolHandler;",
          "40: import org.apache.nifi.cluster.protocol.ProtocolListener;",
          "43: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadRequestMessage;",
          "44: import org.apache.nifi.cluster.protocol.message.ClusterWorkloadResponseMessage;",
          "45: import org.apache.nifi.cluster.protocol.message.ProtocolMessage;",
          "46: import org.apache.nifi.cluster.protocol.message.ProtocolMessage.MessageType;",
          "47: import org.apache.nifi.util.NiFiProperties;",
          "48: import org.slf4j.Logger;",
          "49: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "41: import org.apache.nifi.cluster.protocol.message.HeartbeatMessage;",
          "42: import org.apache.nifi.cluster.protocol.message.HeartbeatResponseMessage;",
          "",
          "[Added Lines]",
          "31: import org.apache.nifi.cluster.protocol.message.HeartbeatMessage;",
          "32: import org.apache.nifi.cluster.protocol.message.HeartbeatResponseMessage;",
          "39: import javax.xml.bind.JAXBContext;",
          "40: import javax.xml.bind.Unmarshaller;",
          "41: import java.util.ArrayList;",
          "42: import java.util.Collections;",
          "43: import java.util.HashMap;",
          "44: import java.util.List;",
          "45: import java.util.Map;",
          "46: import java.util.Set;",
          "47: import java.util.concurrent.ConcurrentHashMap;",
          "48: import java.util.concurrent.ConcurrentMap;",
          "49: import java.util.function.Function;",
          "50: import java.util.stream.Collectors;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:     private final String heartbeatAddress;",
          "61:     private final ConcurrentMap<NodeIdentifier, NodeHeartbeat> heartbeatMessages = new ConcurrentHashMap<>();",
          "63:     protected static final Unmarshaller nodeIdentifierUnmarshaller;",
          "65:     static {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     private volatile long purgeTimestamp = System.currentTimeMillis();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:     public synchronized void purgeHeartbeats() {",
          "137:         logger.debug(\"Purging old heartbeats\");",
          "138:         heartbeatMessages.clear();",
          "139:     }",
          "141:     @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:         purgeTimestamp = System.currentTimeMillis();",
          "143:     }",
          "145:     @Override",
          "146:     public synchronized long getPurgeTimestamp() {",
          "147:         return purgeTimestamp;",
          "",
          "---------------"
        ],
        "nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java||nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java": [
          "File: nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java -> nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/test/java/org/apache/nifi/cluster/coordination/heartbeat/TestAbstractHeartbeatMonitor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.nifi.cluster.coordination.heartbeat;",
          "34: import org.apache.nifi.cluster.ReportedEvent;",
          "35: import org.apache.nifi.cluster.coordination.ClusterCoordinator;",
          "36: import org.apache.nifi.cluster.coordination.node.DisconnectionCode;",
          "",
          "[Removed Lines]",
          "20: import static org.junit.Assert.assertEquals;",
          "21: import static org.junit.Assert.assertTrue;",
          "23: import java.io.IOException;",
          "24: import java.util.ArrayList;",
          "25: import java.util.Collections;",
          "26: import java.util.HashMap;",
          "27: import java.util.HashSet;",
          "28: import java.util.List;",
          "29: import java.util.Map;",
          "30: import java.util.Set;",
          "31: import java.util.UUID;",
          "32: import java.util.stream.Collectors;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.junit.Before;",
          "47: import org.junit.Test;",
          "49: public class TestAbstractHeartbeatMonitor {",
          "50:     private NodeIdentifier nodeId;",
          "51:     private TestFriendlyHeartbeatMonitor monitor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import java.io.IOException;",
          "36: import java.util.ArrayList;",
          "37: import java.util.Arrays;",
          "38: import java.util.Collections;",
          "39: import java.util.HashMap;",
          "40: import java.util.HashSet;",
          "41: import java.util.List;",
          "42: import java.util.Map;",
          "43: import java.util.Set;",
          "44: import java.util.UUID;",
          "45: import java.util.concurrent.ConcurrentHashMap;",
          "46: import java.util.stream.Collectors;",
          "48: import static org.junit.Assert.assertEquals;",
          "49: import static org.junit.Assert.assertTrue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:         assertTrue(requestedToConnect.isEmpty());",
          "132:     }",
          "135:     @Test",
          "136:     public void testConnectingNodeMarkedConnectedWhenHeartbeatReceived() throws InterruptedException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     @Test",
          "137:     public void testDisconnectionOfTerminatedNodeDueToLackOfHeartbeat() throws Exception {",
          "138:         final NodeIdentifier nodeId1 = nodeId;",
          "139:         final NodeIdentifier nodeId2 = new NodeIdentifier(UUID.randomUUID().toString(), \"localhost\", 7777, \"localhost\", 6666, \"localhost\", null, null, false);",
          "141:         final ClusterCoordinatorAdapter adapter = new ClusterCoordinatorAdapter();",
          "142:         final TestFriendlyHeartbeatMonitor monitor = createMonitor(adapter);",
          "145:         adapter.requestNodeConnect(nodeId1);",
          "146:         adapter.requestNodeConnect(nodeId2);",
          "149:         assertTrue(adapter.getNodeIdentifiers(NodeConnectionState.CONNECTING).containsAll(Arrays.asList(nodeId1, nodeId2)));",
          "152:         monitor.addHeartbeat(createHeartbeat(nodeId1, NodeConnectionState.CONNECTED));",
          "153:         monitor.addHeartbeat(createHeartbeat(nodeId2, NodeConnectionState.CONNECTED));",
          "154:         monitor.waitForProcessed();",
          "157:         assertTrue(adapter.getNodeIdentifiers(NodeConnectionState.CONNECTED).containsAll(Arrays.asList(nodeId1, nodeId2)));",
          "160:         monitor.purgeHeartbeats();",
          "161:         monitor.addHeartbeat(createHeartbeat(nodeId1, NodeConnectionState.CONNECTED));",
          "162:         monitor.waitForProcessed();",
          "165:         assertTrue(adapter.getNodeIdentifiers(NodeConnectionState.CONNECTED).contains(nodeId1));",
          "166:         assertTrue(adapter.getNodeIdentifiers(NodeConnectionState.DISCONNECTED).contains(nodeId2));",
          "167:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:     private static class TestFriendlyHeartbeatMonitor extends AbstractHeartbeatMonitor {",
          "343:         private final Object mutex = new Object();",
          "345:         public TestFriendlyHeartbeatMonitor(ClusterCoordinator clusterCoordinator, NiFiProperties nifiProperties) {",
          "346:             super(clusterCoordinator, nifiProperties);",
          "",
          "[Removed Lines]",
          "342:         private Map<NodeIdentifier, NodeHeartbeat> heartbeats = new HashMap<>();",
          "",
          "[Added Lines]",
          "376:         private Map<NodeIdentifier, NodeHeartbeat> heartbeats = new ConcurrentHashMap<>();",
          "378:         private long purgeTimestamp = System.currentTimeMillis();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "349:         @Override",
          "350:         protected synchronized Map<NodeIdentifier, NodeHeartbeat> getLatestHeartbeats() {",
          "352:         }",
          "354:         @Override",
          "",
          "[Removed Lines]",
          "351:             return heartbeats;",
          "",
          "[Added Lines]",
          "386:             return Collections.unmodifiableMap(heartbeats);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:         @Override",
          "373:         public synchronized void purgeHeartbeats() {",
          "374:             heartbeats.clear();",
          "375:         }",
          "377:         void waitForProcessed() throws InterruptedException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:             purgeTimestamp = System.currentTimeMillis();",
          "411:         }",
          "413:         @Override",
          "414:         public long getPurgeTimestamp() {",
          "417:             return purgeTimestamp - 90;",
          "",
          "---------------"
        ]
      }
    }
  ]
}