{
  "cve_id": "CVE-2019-18394",
  "cve_desc": "A Server Side Request Forgery (SSRF) vulnerability in FaviconServlet.java in Ignite Realtime Openfire through 4.4.2 allows attackers to send arbitrary HTTP GET requests.",
  "repo": "igniterealtime/Openfire",
  "patch_hash": "c2ccb38250910587498597955d0bbee8b58e46df",
  "patch_info": {
    "commit_hash": "c2ccb38250910587498597955d0bbee8b58e46df",
    "repo": "igniterealtime/Openfire",
    "commit_url": "https://github.com/igniterealtime/Openfire/commit/c2ccb38250910587498597955d0bbee8b58e46df",
    "files": [
      "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java",
      "xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java",
      "xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java"
    ],
    "message": "OF-1885: Guard against SSRF by inpecting favicon results\n\nThe Openfire servlet that is supposed to be used to retrieve favicons from remote servers could be used to obtain anything. To prevent unauthorized use, this commit adds a check that verifies if the returned data is an image. If that's not the case, the returned data is ignored.",
    "before_after_code_files": [
      "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java||xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java",
      "xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java||xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java",
      "xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java||xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java"
    ]
  },
  "patch_diff": {
    "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java||xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java": [
      "File: xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java -> xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "195:         try(final CloseableHttpResponse response = client.execute(getRequest)) {",
      "196:             if(response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {",
      "198:             }",
      "201:         }",
      "203:         return null;",
      "",
      "[Removed Lines]",
      "197:                 return EntityUtils.toByteArray(response.getEntity());",
      "199:         } catch (final IOException ignored) {",
      "",
      "[Added Lines]",
      "197:                 final byte[] result = EntityUtils.toByteArray(response.getEntity());",
      "200:                 if ( !GraphicsUtils.isImage( result ) ) {",
      "201:                     LOGGER.info( \"Ignoring response to an HTTP request that should have returned an image (but returned something else): {}\", url) ;",
      "202:                     return null;",
      "203:                 }",
      "204:                 return result;",
      "206:         } catch (final IOException ex) {",
      "207:             LOGGER.debug( \"An exception occurred while trying to obtain an image from: {}\", url, ex );",
      "",
      "---------------"
    ],
    "xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java||xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java": [
      "File: xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java -> xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: package org.jivesoftware.util;",
      "18: import org.slf4j.Logger;",
      "19: import org.slf4j.LoggerFactory;",
      "21: import javax.imageio.ImageIO;",
      "22: import java.io.ByteArrayInputStream;",
      "23: import java.io.IOException;",
      "24: import java.io.InputStream;",
      "31: public class GraphicsUtils",
      "32: {",
      "33:     private static final Logger Log = LoggerFactory.getLogger( GraphicsUtils.class );",
      "41:     public static boolean isImage( final InputStream stream )",
      "42:     {",
      "43:         try",
      "44:         {",
      "46:             return null != ImageIO.read( stream );",
      "47:         }",
      "48:         catch ( IOException e )",
      "49:         {",
      "50:             Log.debug( \"An exception occurred while determining if data represents an image.\", e );",
      "51:             return false;",
      "52:         }",
      "53:     }",
      "61:     public static boolean isImage( final byte[] bytes )",
      "62:     {",
      "63:         if ( bytes == null )",
      "64:         {",
      "65:             throw new IllegalArgumentException( \"Argument 'bytes' cannot be null.\" );",
      "66:         }",
      "67:         return isImage( new ByteArrayInputStream( bytes ) );",
      "68:     }",
      "69: }",
      "",
      "---------------"
    ],
    "xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java||xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java": [
      "File: xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java -> xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: package org.jivesoftware.util;",
      "18: import org.junit.Test;",
      "20: import java.io.InputStream;",
      "22: import static org.junit.Assert.assertFalse;",
      "23: import static org.junit.Assert.assertTrue;",
      "30: public class GraphicsUtilsTest",
      "31: {",
      "35:     @Test",
      "36:     public void testIsImageWithImage() throws Exception",
      "37:     {",
      "39:         final InputStream input = getClass().getResourceAsStream( \"/images/ant_logo_large.gif\" );",
      "42:         final boolean result = GraphicsUtils.isImage( input );",
      "45:         assertTrue( result );",
      "46:     }",
      "51:     @Test",
      "52:     public void testIsImageWithNonImage() throws Exception",
      "53:     {",
      "55:         final InputStream input = getClass().getResourceAsStream( \"/privatekey.pem\" );",
      "58:         final boolean result = GraphicsUtils.isImage( input );",
      "61:         assertFalse( result );",
      "62:     }",
      "63: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2dabb16e9ab4a378e33e32b2d4e4bc052d03d3c5",
      "candidate_info": {
        "commit_hash": "2dabb16e9ab4a378e33e32b2d4e4bc052d03d3c5",
        "repo": "igniterealtime/Openfire",
        "commit_url": "https://github.com/igniterealtime/Openfire/commit/2dabb16e9ab4a378e33e32b2d4e4bc052d03d3c5",
        "files": [
          "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java"
        ],
        "message": "Increate favicon retrieval timeouts\n\nI've noticed that many favicons are not shown. Increasing retrieval timeouts in the hope that this yields better results.",
        "before_after_code_files": [
          "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java||xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/igniterealtime/Openfire/pull/1497"
        ],
        "olp_code_files": {
          "patch": [
            "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java||xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java"
          ],
          "candidate": [
            "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java||xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java"
          ]
        }
      },
      "candidate_diff": {
        "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java||xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java -> xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:         final RequestConfig requestConfig = RequestConfig.custom()",
          "190:             .build();",
          "191:         final HttpUriRequest getRequest = RequestBuilder.get(url)",
          "192:             .setConfig(requestConfig)",
          "",
          "[Removed Lines]",
          "188:             .setConnectTimeout(2000)",
          "189:             .setSocketTimeout(2000)",
          "",
          "[Added Lines]",
          "188:             .setConnectTimeout(5000)",
          "189:             .setSocketTimeout(5000)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3cbe2093f995782d4fe66903bf176cd122dc2cf",
      "candidate_info": {
        "commit_hash": "a3cbe2093f995782d4fe66903bf176cd122dc2cf",
        "repo": "igniterealtime/Openfire",
        "commit_url": "https://github.com/igniterealtime/Openfire/commit/a3cbe2093f995782d4fe66903bf176cd122dc2cf",
        "files": [
          "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java",
          "xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java",
          "xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java"
        ],
        "message": "OF-1885: Guard against SSRF by inpecting favicon results\n\nThe Openfire servlet that is supposed to be used to retrieve favicons from remote servers could be used to obtain anything. To prevent unauthorized use, this commit adds a check that verifies if the returned data is an image. If that's not the case, the returned data is ignored.",
        "before_after_code_files": [
          "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java||xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java",
          "xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java||xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java",
          "xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java||xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java||xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java",
            "xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java||xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java",
            "xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java||xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java"
          ],
          "candidate": [
            "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java||xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java",
            "xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java||xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java",
            "xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java||xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java"
          ]
        }
      },
      "candidate_diff": {
        "xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java||xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java -> xmppserver/src/main/java/org/jivesoftware/util/FaviconServlet.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:         try(final CloseableHttpResponse response = client.execute(getRequest)) {",
          "196:             if(response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {",
          "198:             }",
          "201:         }",
          "203:         return null;",
          "",
          "[Removed Lines]",
          "197:                 return EntityUtils.toByteArray(response.getEntity());",
          "199:         } catch (final IOException ignored) {",
          "",
          "[Added Lines]",
          "197:                 final byte[] result = EntityUtils.toByteArray(response.getEntity());",
          "200:                 if ( !GraphicsUtils.isImage( result ) ) {",
          "201:                     LOGGER.info( \"Ignoring response to an HTTP request that should have returned an image (but returned something else): {}\", url) ;",
          "202:                     return null;",
          "203:                 }",
          "204:                 return result;",
          "206:         } catch (final IOException ex) {",
          "207:             LOGGER.debug( \"An exception occurred while trying to obtain an image from: {}\", url, ex );",
          "",
          "---------------"
        ],
        "xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java||xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java": [
          "File: xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java -> xmppserver/src/main/java/org/jivesoftware/util/GraphicsUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: package org.jivesoftware.util;",
          "18: import org.slf4j.Logger;",
          "19: import org.slf4j.LoggerFactory;",
          "21: import javax.imageio.ImageIO;",
          "22: import java.io.ByteArrayInputStream;",
          "23: import java.io.IOException;",
          "24: import java.io.InputStream;",
          "31: public class GraphicsUtils",
          "32: {",
          "33:     private static final Logger Log = LoggerFactory.getLogger( GraphicsUtils.class );",
          "41:     public static boolean isImage( final InputStream stream )",
          "42:     {",
          "43:         try",
          "44:         {",
          "46:             return null != ImageIO.read( stream );",
          "47:         }",
          "48:         catch ( IOException e )",
          "49:         {",
          "50:             Log.debug( \"An exception occurred while determining if data represents an image.\", e );",
          "51:             return false;",
          "52:         }",
          "53:     }",
          "61:     public static boolean isImage( final byte[] bytes )",
          "62:     {",
          "63:         if ( bytes == null )",
          "64:         {",
          "65:             throw new IllegalArgumentException( \"Argument 'bytes' cannot be null.\" );",
          "66:         }",
          "67:         return isImage( new ByteArrayInputStream( bytes ) );",
          "68:     }",
          "69: }",
          "",
          "---------------"
        ],
        "xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java||xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java": [
          "File: xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java -> xmppserver/src/test/java/org/jivesoftware/util/GraphicsUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: package org.jivesoftware.util;",
          "18: import org.junit.Test;",
          "20: import java.io.InputStream;",
          "22: import static org.junit.Assert.assertFalse;",
          "23: import static org.junit.Assert.assertTrue;",
          "30: public class GraphicsUtilsTest",
          "31: {",
          "35:     @Test",
          "36:     public void testIsImageWithImage() throws Exception",
          "37:     {",
          "39:         final InputStream input = getClass().getResourceAsStream( \"/images/ant_logo_large.gif\" );",
          "42:         final boolean result = GraphicsUtils.isImage( input );",
          "45:         assertTrue( result );",
          "46:     }",
          "51:     @Test",
          "52:     public void testIsImageWithNonImage() throws Exception",
          "53:     {",
          "55:         final InputStream input = getClass().getResourceAsStream( \"/privatekey.pem\" );",
          "58:         final boolean result = GraphicsUtils.isImage( input );",
          "61:         assertFalse( result );",
          "62:     }",
          "63: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}