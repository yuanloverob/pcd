{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c69a43f2fcb5e8e64f430ce58f2e2a3740acdb5b",
      "candidate_info": {
        "commit_hash": "c69a43f2fcb5e8e64f430ce58f2e2a3740acdb5b",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c69a43f2fcb5e8e64f430ce58f2e2a3740acdb5b",
        "files": [
          "blog/lib.php",
          "course/lib.php",
          "course/tests/courselib_test.php",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-56998 blog: Remove associated blog posts when module is deleted",
        "before_after_code_files": [
          "blog/lib.php||blog/lib.php",
          "course/lib.php||course/lib.php",
          "course/tests/courselib_test.php||course/tests/courselib_test.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "blog/lib.php||blog/lib.php": [
          "File: blog/lib.php -> blog/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:     $DB->delete_records('blog_association', array('contextid' => $context->id));",
          "136: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143: function blog_remove_associations_for_module($modcontextid) {",
          "144:     global $DB;",
          "146:     if (!empty($assocblogids = $DB->get_fieldset_select('blog_association', 'blogid',",
          "147:         'contextid = :contextid', ['contextid' => $modcontextid]))) {",
          "148:         list($sql, $params) = $DB->get_in_or_equal($assocblogids, SQL_PARAMS_NAMED);",
          "150:         $DB->delete_records_select('tag_instance', \"itemid $sql\", $params);",
          "151:         $DB->delete_records_select('post', \"id $sql AND module = :module\",",
          "152:             array_merge($params, ['module' => 'blog']));",
          "153:         $DB->delete_records('blog_association', ['contextid' => $modcontextid]);",
          "154:     }",
          "155: }",
          "",
          "---------------"
        ],
        "course/lib.php||course/lib.php": [
          "File: course/lib.php -> course/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1169:         }",
          "1170:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1173:     blog_remove_associations_for_module($modcontext->id);",
          "",
          "---------------"
        ],
        "course/tests/courselib_test.php||course/tests/courselib_test.php": [
          "File: course/tests/courselib_test.php -> course/tests/courselib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:         return $moduleinfo;",
          "304:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:     private function create_module_asscociated_blog($course, $modulecontext) {",
          "313:         global $DB, $CFG;",
          "316:         $group = new stdClass();",
          "317:         $group->courseid = $course->id;",
          "318:         $group->name = 'Group';",
          "319:         $group->id = $DB->insert_record('groups', $group);",
          "322:         $user = $this->getDataGenerator()->create_user(array(",
          "323:             'username' => 'testuser',",
          "324:             'firstname' => 'Firsname',",
          "325:             'lastname' => 'Lastname'",
          "326:         ));",
          "329:         $post = new stdClass();",
          "330:         $post->userid = $user->id;",
          "331:         $post->groupid = $group->id;",
          "332:         $post->content = 'test post content text';",
          "333:         $post->module = 'blog';",
          "334:         $post->id = $DB->insert_record('post', $post);",
          "337:         $tag = $this->getDataGenerator()->create_tag(array('userid' => $user->id,",
          "338:             'rawname' => 'Testtagname', 'isstandard' => 1));",
          "340:         $DB->insert_record('tag_instance', array('tagid' => $tag->id, 'itemtype' => 'user',",
          "341:             'component' => 'core', 'itemid' => $post->id, 'ordering' => 0));",
          "343:         require_once($CFG->dirroot . '/blog/locallib.php');",
          "344:         $blog = new blog_entry($post->id);",
          "345:         $blog->add_association($modulecontext->id);",
          "347:         return $blog;",
          "348:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1522:         $modcontext = context_module::instance($module->cmid);",
          "1525:         $this->assertInstanceOf('context_module', $modcontext);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1568:         $assocblog = $this->create_module_asscociated_blog($course, $modcontext);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1565:         $cmcount = $DB->count_records('course_modules', array('id' => $module->cmid));",
          "1566:         $this->assertEmpty($cmcount);",
          "1569:         switch ($type) {",
          "1570:             case 'assign':",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1615:         $this->assertCount(0, $DB->get_records('blog_association',",
          "1616:                 array('contextid' => $modcontext->id)));",
          "1619:         $this->assertCount(0, $DB->get_records('post',",
          "1620:                 array('id' => $assocblog->id)));",
          "1623:         $this->assertCount(0, $DB->get_records('tag_instance',",
          "1624:                 array('itemid' => $assocblog->id)));",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2301:         upgrade_main_savepoint(true, 2018073000.00);",
          "2302:     }",
          "2304:     return true;",
          "2305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2304:     if ($oldversion < 2018083100.01) {",
          "2306:         $sql = \"SELECT ba.contextid as modcontextid",
          "2307:                   FROM {blog_association} ba",
          "2308:                   JOIN {post} p",
          "2309:                        ON p.id = ba.blogid",
          "2310:              LEFT JOIN {context} c",
          "2311:                        ON c.id = ba.contextid",
          "2312:                  WHERE p.module = :module",
          "2313:                        AND c.contextlevel IS NULL",
          "2314:               GROUP BY ba.contextid\";",
          "2315:         if ($deletedmodules = $DB->get_records_sql($sql, array('module' => 'blog'))) {",
          "2316:             foreach ($deletedmodules as $module) {",
          "2317:                 $assocblogids = $DB->get_fieldset_select('blog_association', 'blogid',",
          "2318:                     'contextid = :contextid', ['contextid' => $module->modcontextid]);",
          "2319:                 list($sql, $params) = $DB->get_in_or_equal($assocblogids, SQL_PARAMS_NAMED);",
          "2321:                 $DB->delete_records_select('tag_instance', \"itemid $sql\", $params);",
          "2322:                 $DB->delete_records_select('post', \"id $sql AND module = :module\",",
          "2323:                     array_merge($params, ['module' => 'blog']));",
          "2324:                 $DB->delete_records('blog_association', ['contextid' => $module->modcontextid]);",
          "2325:             }",
          "2326:         }",
          "2328:         upgrade_main_savepoint(true, 2018083100.01);",
          "2329:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018083100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018083100.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b73fd183c88a5317a7bd4e7cbc23d3b7827a14e",
      "candidate_info": {
        "commit_hash": "7b73fd183c88a5317a7bd4e7cbc23d3b7827a14e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/7b73fd183c88a5317a7bd4e7cbc23d3b7827a14e",
        "files": [
          "lang/en/role.php",
          "lib/db/access.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "lib/messagelib.php",
          "message/classes/api.php",
          "message/classes/task/migrate_message_data.php",
          "message/tests/api_test.php",
          "message/tests/externallib_test.php",
          "message/tests/messagelib_test.php",
          "message/tests/privacy_provider_test.php",
          "message/upgrade.txt",
          "version.php"
        ],
        "message": "Merge branch 'MDL-63691_master' of git://github.com/markn86/moodle",
        "before_after_code_files": [
          "lang/en/role.php||lang/en/role.php",
          "lib/db/access.php||lib/db/access.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/messagelib.php||lib/messagelib.php",
          "message/classes/api.php||message/classes/api.php",
          "message/classes/task/migrate_message_data.php||message/classes/task/migrate_message_data.php",
          "message/tests/api_test.php||message/tests/api_test.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "message/tests/messagelib_test.php||message/tests/messagelib_test.php",
          "message/tests/privacy_provider_test.php||message/tests/privacy_provider_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ],
          "candidate": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/role.php||lang/en/role.php": [
          "File: lang/en/role.php -> lang/en/role.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: $string['course:activityvisibility'] = 'Hide/show activities';",
          "156: $string['course:bulkmessaging'] = 'Send a message to many people';",
          "157: $string['course:create'] = 'Create courses';",
          "158: $string['course:delete'] = 'Delete courses';",
          "159: $string['course:viewsuspendedusers'] = 'View suspended users';",
          "160: $string['course:changecategory'] = 'Change course category';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158: $string['course:creategroupconversations'] = 'Create group conversations';",
          "",
          "---------------"
        ],
        "lib/db/access.php||lib/db/access.php": [
          "File: lib/db/access.php -> lib/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:         )",
          "789:     ),",
          "791:     'moodle/course:request' => array(",
          "792:         'captype' => 'write',",
          "793:         'contextlevel' => CONTEXT_SYSTEM,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "791:     'moodle/course:creategroupconversations' => array(",
          "792:         'riskbitmask' => RISK_XSS,",
          "793:         'captype' => 'write',",
          "794:         'contextlevel' => CONTEXT_COURSE,",
          "795:         'archetypes' => array(",
          "796:             'editingteacher' => CAP_ALLOW,",
          "797:             'manager' => CAP_ALLOW",
          "798:         )",
          "799:     ),",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2565:         upgrade_main_savepoint(true, 2018101800.00);",
          "2566:     }",
          "2568:     return true;",
          "2569: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2568:     if ($oldversion < 2018102200.00) {",
          "2570:         $table = new xmldb_table('message_conversations');",
          "2571:         $field = new xmldb_field('type', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, 1, 'id');",
          "2572:         if (!$dbman->field_exists($table, $field)) {",
          "2573:             $dbman->add_field($table, $field);",
          "2574:         }",
          "2577:         $field = new xmldb_field('name', XMLDB_TYPE_CHAR, '255', null, null, null, null, 'type');",
          "2578:         if (!$dbman->field_exists($table, $field)) {",
          "2579:             $dbman->add_field($table, $field);",
          "2580:         }",
          "2583:         $index = new xmldb_index('type', XMLDB_INDEX_NOTUNIQUE, ['type']);",
          "2584:         if (!$dbman->index_exists($table, $index)) {",
          "2585:             $dbman->add_index($table, $index);",
          "2586:         }",
          "2589:         $table = new xmldb_table('message_conversations');",
          "2592:         $index = new xmldb_index('convhash', XMLDB_INDEX_UNIQUE, ['convhash']);",
          "2593:         if ($dbman->index_exists($table, $index)) {",
          "2594:             $dbman->drop_index($table, $index);",
          "2595:         }",
          "2597:         $field = new xmldb_field('convhash', XMLDB_TYPE_CHAR, '40', null, null, null, null, 'name');",
          "2598:         $dbman->change_field_notnull($table, $field);",
          "2600:         $index = new xmldb_index('convhash', XMLDB_INDEX_NOTUNIQUE, ['convhash']);",
          "2601:         if (!$dbman->index_exists($table, $index)) {",
          "2602:             $dbman->add_index($table, $index);",
          "2603:         }",
          "2605:         upgrade_main_savepoint(true, 2018102200.00);",
          "2606:     }",
          "",
          "---------------"
        ],
        "lib/messagelib.php||lib/messagelib.php": [
          "File: lib/messagelib.php -> lib/messagelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$eventdata->userfrom->id,",
          "165:                 $eventdata->userto->id])) {",
          "168:         }",
          "170:         $tabledata = new stdClass();",
          "",
          "[Removed Lines]",
          "166:             $conversationid = \\core_message\\api::create_conversation_between_users([$eventdata->userfrom->id,",
          "167:                 $eventdata->userto->id]);",
          "",
          "[Added Lines]",
          "166:             $conversation = \\core_message\\api::create_conversation(",
          "167:                 \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "168:                 [",
          "169:                     $eventdata->userfrom->id,",
          "170:                     $eventdata->userto->id",
          "171:                 ]",
          "172:             );",
          "173:             $conversationid = $conversation->id;",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     const MESSAGE_PRIVACY_SITE = 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     const MESSAGE_CONVERSATION_TYPE_INDIVIDUAL = 1;",
          "72:     const MESSAGE_CONVERSATION_TYPE_GROUP = 2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1337:         $hash = helper::get_conversation_hash($userids);",
          "1340:             return $conversation->id;",
          "1341:         }",
          "",
          "[Removed Lines]",
          "1339:         if ($conversation = $DB->get_record('message_conversations', ['convhash' => $hash])) {",
          "",
          "[Added Lines]",
          "1349:         $params = [",
          "1350:             'type' => self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "1351:             'convhash' => $hash",
          "1352:         ];",
          "1353:         if ($conversation = $DB->get_record('message_conversations', $params)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1352:     public static function create_conversation_between_users(array $userids) {",
          "1353:         global $DB;",
          "1355:         $conversation = new \\stdClass();",
          "1357:         $conversation->timecreated = time();",
          "1358:         $conversation->id = $DB->insert_record('message_conversations', $conversation);",
          "1361:         foreach ($userids as $userid) {",
          "1362:             $member = new \\stdClass();",
          "1363:             $member->conversationid = $conversation->id;",
          "1364:             $member->userid = $userid;",
          "1365:             $member->timecreated = time();",
          "1367:         }",
          "1370:     }",
          "",
          "[Removed Lines]",
          "1356:         $conversation->convhash = helper::get_conversation_hash($userids);",
          "1366:             $DB->insert_record('message_conversation_members', $member);",
          "1369:         return $conversation->id;",
          "",
          "[Added Lines]",
          "1368:         debugging('\\core_message\\api::create_conversation_between_users is deprecated, please use ' .",
          "1369:             '\\core_message\\api::create_conversation instead.', DEBUG_DEVELOPER);",
          "1372:         $conversation = self::create_conversation(self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL, $userids);",
          "1374:         return $conversation->id;",
          "1375:     }",
          "1385:     public static function create_conversation(int $type, array $userids, string $name = null) {",
          "1389:         if ($type == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {",
          "1390:             if (count($userids) > 2) {",
          "1391:                 throw new \\moodle_exception('An individual conversation can not have more than two users.');",
          "1392:             }",
          "1393:         }",
          "1396:         $conversation->type = $type;",
          "1397:         $conversation->name = $name;",
          "1398:         $conversation->convhash = null;",
          "1399:         if ($type == self::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {",
          "1400:             $conversation->convhash = helper::get_conversation_hash($userids);",
          "1401:         }",
          "1406:         $arrmembers = [];",
          "1412:             $member->id = $DB->insert_record('message_conversation_members', $member);",
          "1414:             $arrmembers[] = $member;",
          "1417:         $conversation->members = $arrmembers;",
          "1419:         return $conversation;",
          "1420:     }",
          "1429:     public static function can_create_group_conversation(int $userid, \\context $context) : bool {",
          "1430:         global $CFG;",
          "1433:         if (empty($CFG->messaging)) {",
          "1434:             return false;",
          "1435:         }",
          "1438:         return has_capability('moodle/course:creategroupconversations', $context, $userid);",
          "",
          "---------------"
        ],
        "message/classes/task/migrate_message_data.php||message/classes/task/migrate_message_data.php": [
          "File: message/classes/task/migrate_message_data.php -> message/classes/task/migrate_message_data.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         global $DB;",
          "125:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userid, $otheruserid])) {",
          "127:         }",
          "",
          "[Removed Lines]",
          "126:             $conversationid = \\core_message\\api::create_conversation_between_users([$userid, $otheruserid]);",
          "",
          "[Added Lines]",
          "126:             $conversation = \\core_message\\api::create_conversation(",
          "127:                 \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "128:                 [",
          "129:                     $userid,",
          "130:                     $otheruserid",
          "131:                 ]",
          "132:             );",
          "133:             $conversationid = $conversation->id;",
          "",
          "---------------"
        ],
        "message/tests/api_test.php||message/tests/api_test.php": [
          "File: message/tests/api_test.php -> message/tests/api_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2200:         $user2 = self::getDataGenerator()->create_user();",
          "2202:         $conversationid = \\core_message\\api::create_conversation_between_users([$user1->id, $user2->id]);",
          "2204:         $this->assertEquals($conversationid,",
          "2205:             \\core_message\\api::get_conversation_between_users([$user1->id, $user2->id]));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2203:         $this->assertDebuggingCalled();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2471:         $user1 = self::getDataGenerator()->create_user();",
          "2472:         $user2 = self::getDataGenerator()->create_user();",
          "2476:         $this->assertTrue(\\core_message\\api::is_user_in_conversation($user1->id, $conversationid));",
          "2477:     }",
          "",
          "[Removed Lines]",
          "2474:         $conversationid = \\core_message\\api::create_conversation_between_users([$user1->id, $user2->id]);",
          "",
          "[Added Lines]",
          "2475:         $conversation = \\core_message\\api::create_conversation(",
          "2476:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "2477:             [",
          "2478:                 $user1->id,",
          "2479:                 $user2->id",
          "2480:             ]",
          "2481:         );",
          "2482:         $conversationid = $conversation->id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2484:         $user2 = self::getDataGenerator()->create_user();",
          "2485:         $user3 = self::getDataGenerator()->create_user();",
          "2489:         $this->assertFalse(\\core_message\\api::is_user_in_conversation($user3->id, $conversationid));",
          "2490:     }",
          "",
          "[Removed Lines]",
          "2487:         $conversationid = \\core_message\\api::create_conversation_between_users([$user1->id, $user2->id]);",
          "",
          "[Added Lines]",
          "2495:         $conversation = \\core_message\\api::create_conversation(",
          "2496:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "2497:             [",
          "2498:                 $user1->id,",
          "2499:                 $user2->id",
          "2500:             ]",
          "2501:         );",
          "2502:         $conversationid = $conversation->id;",
          "2510:     public function test_can_create_group_conversation() {",
          "2511:         global $CFG;",
          "2513:         $student = self::getDataGenerator()->create_user();",
          "2514:         $teacher = self::getDataGenerator()->create_user();",
          "2515:         $course = self::getDataGenerator()->create_course();",
          "2517:         $coursecontext = context_course::instance($course->id);",
          "2519:         $this->getDataGenerator()->enrol_user($student->id, $course->id);",
          "2520:         $this->getDataGenerator()->enrol_user($teacher->id, $course->id, 'editingteacher');",
          "2523:         $CFG->messaging = 0;",
          "2524:         $this->assertFalse(\\core_message\\api::can_create_group_conversation($student->id, $coursecontext));",
          "2527:         $CFG->messaging = 1;",
          "2530:         $this->assertFalse(\\core_message\\api::can_create_group_conversation($student->id, $coursecontext));",
          "2533:         $this->assertTrue(\\core_message\\api::can_create_group_conversation($teacher->id, $coursecontext));",
          "2534:     }",
          "2539:     public function test_create_conversation_individual() {",
          "2540:         $user1 = self::getDataGenerator()->create_user();",
          "2541:         $user2 = self::getDataGenerator()->create_user();",
          "2543:         $conversation = \\core_message\\api::create_conversation(",
          "2544:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "2545:             [",
          "2546:                 $user1->id,",
          "2547:                 $user2->id",
          "2548:             ],",
          "2549:             'A conversation name'",
          "2550:         );",
          "2552:         $this->assertEquals(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL, $conversation->type);",
          "2553:         $this->assertEquals('A conversation name', $conversation->name);",
          "2554:         $this->assertEquals(\\core_message\\helper::get_conversation_hash([$user1->id, $user2->id]), $conversation->convhash);",
          "2556:         $this->assertCount(2, $conversation->members);",
          "2558:         $member1 = array_shift($conversation->members);",
          "2559:         $member2 = array_shift($conversation->members);",
          "2561:         $this->assertEquals($user1->id, $member1->userid);",
          "2562:         $this->assertEquals($conversation->id, $member1->conversationid);",
          "2564:         $this->assertEquals($user2->id, $member2->userid);",
          "2565:         $this->assertEquals($conversation->id, $member2->conversationid);",
          "2566:     }",
          "2571:     public function test_create_conversation_group() {",
          "2572:         $user1 = self::getDataGenerator()->create_user();",
          "2573:         $user2 = self::getDataGenerator()->create_user();",
          "2574:         $user3 = self::getDataGenerator()->create_user();",
          "2576:         $conversation = \\core_message\\api::create_conversation(",
          "2577:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP,",
          "2578:             [",
          "2579:                 $user1->id,",
          "2580:                 $user2->id,",
          "2581:                 $user3->id",
          "2582:             ],",
          "2583:             'A conversation name'",
          "2584:         );",
          "2586:         $this->assertEquals(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_GROUP, $conversation->type);",
          "2587:         $this->assertEquals('A conversation name', $conversation->name);",
          "2588:         $this->assertNull($conversation->convhash);",
          "2590:         $this->assertCount(3, $conversation->members);",
          "2592:         $member1 = array_shift($conversation->members);",
          "2593:         $member2 = array_shift($conversation->members);",
          "2594:         $member3 = array_shift($conversation->members);",
          "2596:         $this->assertEquals($user1->id, $member1->userid);",
          "2597:         $this->assertEquals($conversation->id, $member1->conversationid);",
          "2599:         $this->assertEquals($user2->id, $member2->userid);",
          "2600:         $this->assertEquals($conversation->id, $member2->conversationid);",
          "2602:         $this->assertEquals($user3->id, $member3->userid);",
          "2603:         $this->assertEquals($conversation->id, $member3->conversationid);",
          "2604:     }",
          "2609:     public function test_create_conversation_individual_too_many_members() {",
          "2610:         $this->expectException('moodle_exception');",
          "2611:         \\core_message\\api::create_conversation(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL, [1, 2, 3]);",
          "2612:     }",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         }",
          "76:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userfrom->id, $userto->id])) {",
          "79:         }",
          "",
          "[Removed Lines]",
          "77:             $conversationid = \\core_message\\api::create_conversation_between_users([$userfrom->id,",
          "78:                 $userto->id]);",
          "",
          "[Added Lines]",
          "77:             $conversation = \\core_message\\api::create_conversation(",
          "78:                 \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "79:                 [",
          "80:                     $userfrom->id,",
          "81:                     $userto->id",
          "82:                 ]",
          "83:             );",
          "84:             $conversationid = $conversation->id;",
          "",
          "---------------"
        ],
        "message/tests/messagelib_test.php||message/tests/messagelib_test.php": [
          "File: message/tests/messagelib_test.php -> message/tests/messagelib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:         }",
          "88:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userfrom->id, $userto->id])) {",
          "91:         }",
          "",
          "[Removed Lines]",
          "89:             $conversationid = \\core_message\\api::create_conversation_between_users([$userfrom->id,",
          "90:                 $userto->id]);",
          "",
          "[Added Lines]",
          "89:             $conversation = \\core_message\\api::create_conversation(",
          "90:                 \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "91:                 [",
          "92:                     $userfrom->id,",
          "93:                     $userto->id",
          "94:                 ]",
          "95:             );",
          "96:             $conversationid = $conversation->id;",
          "",
          "---------------"
        ],
        "message/tests/privacy_provider_test.php||message/tests/privacy_provider_test.php": [
          "File: message/tests/privacy_provider_test.php -> message/tests/privacy_provider_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "663:         }",
          "665:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$useridfrom, $useridto])) {",
          "668:         }",
          "",
          "[Removed Lines]",
          "666:             $conversationid = \\core_message\\api::create_conversation_between_users([$useridfrom,",
          "667:                 $useridto]);",
          "",
          "[Added Lines]",
          "666:             $conversation = \\core_message\\api::create_conversation(",
          "667:                 \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "668:                 [",
          "669:                     $useridfrom,",
          "670:                     $useridto",
          "671:                 ]",
          "672:             );",
          "673:             $conversationid = $conversation->id;",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018101900.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018102200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb96ff716d30e73aa0748dd83b59395a5d28a037",
      "candidate_info": {
        "commit_hash": "bb96ff716d30e73aa0748dd83b59395a5d28a037",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/bb96ff716d30e73aa0748dd83b59395a5d28a037",
        "files": [
          "blog/classes/external.php",
          "blog/classes/external/post_exporter.php",
          "blog/tests/external_test.php",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "MDL-60425 core_blog: New WS core_blog_get_entries",
        "before_after_code_files": [
          "blog/classes/external.php||blog/classes/external.php",
          "blog/classes/external/post_exporter.php||blog/classes/external/post_exporter.php",
          "blog/tests/external_test.php||blog/tests/external_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "blog/classes/external.php||blog/classes/external.php": [
          "File: blog/classes/external.php -> blog/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_blog;",
          "26: defined('MOODLE_INTERNAL') || die();",
          "28: require_once($CFG->libdir .'/externallib.php');",
          "29: require_once($CFG->dirroot .'/blog/lib.php');",
          "30: require_once($CFG->dirroot .'/blog/locallib.php');",
          "32: use external_api;",
          "33: use external_function_parameters;",
          "34: use external_value;",
          "35: use external_single_structure;",
          "36: use external_multiple_structure;",
          "37: use external_warnings;",
          "38: use context_system;",
          "39: use context_course;",
          "40: use moodle_exception;",
          "41: use core_blog\\external\\post_exporter;",
          "49: class external extends external_api {",
          "57:     public static function get_entries_parameters() {",
          "58:         return new external_function_parameters(",
          "59:             array(",
          "60:                 'filters' => new external_multiple_structure (",
          "61:                     new external_single_structure(",
          "62:                         array(",
          "63:                             'name' => new external_value(PARAM_ALPHA,",
          "64:                                 'The expected keys (value format) are:",
          "65:                                 tag      PARAM_NOTAGS blog tag",
          "66:                                 tagid    PARAM_INT    blog tag id",
          "67:                                 userid   PARAM_INT    blog author (userid)",
          "68:                                 cmid    PARAM_INT    course module id",
          "69:                                 entryid  PARAM_INT    entry id",
          "70:                                 groupid  PARAM_INT    group id",
          "71:                                 courseid PARAM_INT    course id",
          "72:                                 search   PARAM_RAW    search term",
          "73:                                 '",
          "74:                             ),",
          "75:                             'value' => new external_value(PARAM_RAW, 'The value of the filter.')",
          "76:                         )",
          "77:                     ), 'Parameters to filter blog listings.', VALUE_DEFAULT, array()",
          "78:                 ),",
          "79:                 'page' => new external_value(PARAM_INT, 'The blog page to return.', VALUE_DEFAULT, 0),",
          "80:                 'perpage' => new external_value(PARAM_INT, 'The number of posts to return per page.', VALUE_DEFAULT, 10),",
          "81:             )",
          "82:         );",
          "83:     }",
          "94:     public static function get_entries($filters = array(), $page = 0, $perpage = 10) {",
          "95:         global $CFG, $DB, $PAGE;",
          "97:         $warnings = array();",
          "98:         $params = self::validate_parameters(self::get_entries_parameters(),",
          "99:             array('filters' => $filters, 'page' => $page, 'perpage' => $perpage));",
          "101:         if (empty($CFG->enableblogs)) {",
          "102:             throw new moodle_exception('blogdisable', 'blog');",
          "103:         }",
          "106:         $filterstype = array('courseid' => PARAM_INT, 'groupid' => PARAM_INT, 'userid' => PARAM_INT, 'tagid' => PARAM_INT,",
          "107:             'tag' => PARAM_NOTAGS, 'cmid' => PARAM_INT, 'entryid' => PARAM_INT, 'search' => PARAM_RAW);",
          "108:         $filters = array('courseid' => null, 'groupid' => null, 'userid' => null, 'tagid' => null,",
          "109:             'tag' => null, 'cmid' => null, 'entryid' => null, 'search' => null);",
          "111:         foreach ($params['filters'] as $filter) {",
          "112:             $name = trim($filter['name']);",
          "113:             if (!isset($filterstype[$name])) {",
          "114:                 throw new moodle_exception('errorinvalidparam', 'webservice', '', $name);",
          "115:             }",
          "116:             $filters[$name] = clean_param($filter['value'], $filterstype[$name]);",
          "117:         }",
          "120:         list($courseid, $userid) = blog_validate_access($filters['courseid'], $filters['cmid'], $filters['groupid'],",
          "121:             $filters['entryid'], $filters['userid']);",
          "123:         if ($courseid && $courseid != SITEID) {",
          "124:             $context = context_course::instance($courseid);",
          "125:             self::validate_context($context);",
          "126:         } else {",
          "127:             $context = context_system::instance();",
          "128:             if ($CFG->bloglevel == BLOG_GLOBAL_LEVEL) {",
          "130:                 if ($CFG->forcelogin) {",
          "131:                     self::validate_context($context);",
          "132:                 }",
          "133:             } else {",
          "134:                 self::validate_context($context);",
          "135:             }",
          "136:         }",
          "137:         $PAGE->set_context($context); // Needed by internal APIs.",
          "140:         $blogheaders = blog_get_headers($filters['courseid'], $filters['groupid'], $filters['userid'], $filters['tagid'],",
          "141:             $filters['tag'], $filters['cmid'], $filters['entryid'], $filters['search']);",
          "142:         $bloglisting = new \\blog_listing($blogheaders['filters']);",
          "144:         $page  = $params['page'];",
          "145:         $limit = empty($params['perpage']) ? get_user_preferences('blogpagesize', 10) : $params['perpage'];",
          "146:         $start = $page * $limit;",
          "147:         $entries = $bloglisting->get_entries($start, $limit);",
          "148:         $totalentries = $bloglisting->count_entries();",
          "150:         $exportedentries = array();",
          "151:         $output = $PAGE->get_renderer('core');",
          "152:         foreach ($entries as $entry) {",
          "153:             $exporter = new post_exporter($entry, array('context' => $context));",
          "154:             $exportedentries[] = $exporter->export($output);",
          "155:         }",
          "156:         return array(",
          "157:             'warnings' => $warnings,",
          "158:             'entries' => $exportedentries,",
          "159:             'totalentries' => $totalentries,",
          "160:         );",
          "161:     }",
          "169:     public static function get_entries_returns() {",
          "170:         return new external_single_structure(",
          "171:             array(",
          "172:                 'entries' => new external_multiple_structure(",
          "173:                     post_exporter::get_read_structure()",
          "174:                 ),",
          "175:                 'totalentries' => new external_value(PARAM_INT, 'The total number of entries found.'),",
          "176:                 'warnings' => new external_warnings(),",
          "177:             )",
          "178:         );",
          "179:     }",
          "180: }",
          "",
          "---------------"
        ],
        "blog/classes/external/post_exporter.php||blog/classes/external/post_exporter.php": [
          "File: blog/classes/external/post_exporter.php -> blog/classes/external/post_exporter.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "24: namespace core_blog\\external;",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: use core\\external\\exporter;",
          "28: use external_util;",
          "29: use external_files;",
          "30: use renderer_base;",
          "31: use context_system;",
          "39: class post_exporter extends exporter {",
          "46:     protected static function define_properties() {",
          "47:         return array(",
          "48:             'id' => array(",
          "49:                 'type' => PARAM_INT,",
          "50:                 'null' => NULL_ALLOWED,",
          "51:                 'description' => 'Post/entry id.',",
          "52:             ),",
          "53:             'module' => array(",
          "54:                 'type' => PARAM_ALPHANUMEXT,",
          "55:                 'null' => NULL_NOT_ALLOWED,",
          "56:                 'description' => 'Where it was published the post (blog, blog_external...).',",
          "57:             ),",
          "58:             'userid' => array(",
          "59:                 'type' => PARAM_INT,",
          "60:                 'null' => NULL_NOT_ALLOWED,",
          "61:                 'default' => 0,",
          "62:                 'description' => 'Post author.',",
          "63:             ),",
          "64:             'courseid' => array(",
          "65:                 'type' => PARAM_INT,",
          "66:                 'null' => NULL_NOT_ALLOWED,",
          "67:                 'default' => 0,",
          "68:                 'description' => 'Course where the post was created.',",
          "69:             ),",
          "70:             'groupid' => array(",
          "71:                 'type' => PARAM_INT,",
          "72:                 'null' => NULL_NOT_ALLOWED,",
          "73:                 'default' => 0,",
          "74:                 'description' => 'Group post was created for.',",
          "75:             ),",
          "76:             'moduleid' => array(",
          "77:                 'type' => PARAM_INT,",
          "78:                 'null' => NULL_NOT_ALLOWED,",
          "79:                 'default' => 0,",
          "80:                 'description' => 'Module id where the post was created (not used anymore).',",
          "81:             ),",
          "82:             'coursemoduleid' => array(",
          "83:                 'type' => PARAM_INT,",
          "84:                 'null' => NULL_NOT_ALLOWED,",
          "85:                 'default' => 0,",
          "86:                 'description' => 'Course module id where the post was created.',",
          "87:             ),",
          "88:             'subject' => array(",
          "89:                 'type' => PARAM_TEXT,",
          "90:                 'null' => NULL_NOT_ALLOWED,",
          "91:                 'description' => 'Post subject.',",
          "92:             ),",
          "93:             'summary' => array(",
          "94:                 'type' => PARAM_RAW,",
          "95:                 'null' => NULL_ALLOWED,",
          "96:                 'description' => 'Post summary.',",
          "97:             ),",
          "98:             'content' => array(",
          "99:                 'type' => PARAM_RAW,",
          "100:                 'null' => NULL_ALLOWED,",
          "101:                 'description' => 'Post content.',",
          "102:             ),",
          "103:             'uniquehash' => array(",
          "104:                 'type' => PARAM_RAW,",
          "105:                 'null' => NULL_NOT_ALLOWED,",
          "106:                 'description' => 'Post unique hash.',",
          "107:             ),",
          "108:             'rating' => array(",
          "109:                 'type' => PARAM_INT,",
          "110:                 'null' => NULL_NOT_ALLOWED,",
          "111:                 'default' => 0,",
          "112:                 'description' => 'Post rating.',",
          "113:             ),",
          "114:             'format' => array(",
          "115:                 'type' => PARAM_INT,",
          "116:                 'null' => NULL_NOT_ALLOWED,",
          "117:                 'default' => 0,",
          "118:                 'description' => 'Post content format.',",
          "119:             ),",
          "120:             'summaryformat' => array(",
          "121:                 'choices' => array(FORMAT_HTML, FORMAT_MOODLE, FORMAT_PLAIN, FORMAT_MARKDOWN),",
          "122:                 'type' => PARAM_INT,",
          "123:                 'default' => FORMAT_MOODLE,",
          "124:                 'description' => 'Format for the summary field.',",
          "125:             ),",
          "126:             'attachment' => array(",
          "127:                 'type' => PARAM_RAW,",
          "128:                 'null' => NULL_ALLOWED,",
          "129:                 'description' => 'Post atachment.',",
          "130:             ),",
          "131:             'publishstate' => array(",
          "132:                 'type' => PARAM_ALPHA,",
          "133:                 'null' => NULL_NOT_ALLOWED,",
          "134:                 'default' => 'draft',",
          "135:                 'description' => 'Post publish state.',",
          "136:             ),",
          "137:             'lastmodified' => array(",
          "138:                 'type' => PARAM_INT,",
          "139:                 'null' => NULL_NOT_ALLOWED,",
          "140:                 'default' => 0,",
          "141:                 'description' => 'When it was last modified.',",
          "142:             ),",
          "143:             'created' => array(",
          "144:                 'type' => PARAM_INT,",
          "145:                 'null' => NULL_NOT_ALLOWED,",
          "146:                 'default' => 0,",
          "147:                 'description' => 'When it was created.',",
          "148:             ),",
          "149:             'usermodified' => array(",
          "150:                 'type' => PARAM_INT,",
          "151:                 'null' => NULL_ALLOWED,",
          "152:                 'description' => 'User that updated the post.',",
          "153:             ),",
          "154:         );",
          "155:     }",
          "157:     protected static function define_related() {",
          "158:         return array(",
          "159:             'context' => 'context'",
          "160:         );",
          "161:     }",
          "163:     protected static function define_other_properties() {",
          "164:         return array(",
          "165:             'summaryfiles' => array(",
          "166:                 'type' => external_files::get_properties_for_exporter(),",
          "167:                 'multiple' => true",
          "168:             ),",
          "169:             'attachmentfiles' => array(",
          "170:                 'type' => external_files::get_properties_for_exporter(),",
          "171:                 'multiple' => true,",
          "172:                 'optional' => true",
          "173:             ),",
          "174:         );",
          "175:     }",
          "177:     protected function get_other_values(renderer_base $output) {",
          "178:         $context = context_system::instance(); // Files always on site context.",
          "180:         $values['summaryfiles'] = external_util::get_area_files($context->id, 'blog', 'post', $this->data->id);",
          "181:         $values['attachmentfiles'] = external_util::get_area_files($context->id, 'blog', 'attachment', $this->data->id);",
          "183:         return $values;",
          "184:     }",
          "185: }",
          "",
          "---------------"
        ],
        "blog/tests/external_test.php||blog/tests/external_test.php": [
          "File: blog/tests/external_test.php -> blog/tests/external_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "27: global $CFG;",
          "28: require_once($CFG->dirroot . '/blog/locallib.php');",
          "29: require_once($CFG->dirroot . '/blog/lib.php');",
          "38: class core_blog_external_testcase extends advanced_testcase {",
          "40:     private $courseid;",
          "41:     private $cmid;",
          "42:     private $userid;",
          "43:     private $groupid;",
          "44:     private $tagid;",
          "45:     private $postid;",
          "47:     protected function setUp() {",
          "48:         global $DB, $CFG;",
          "49:         parent::setUp();",
          "51:         $this->resetAfterTest();",
          "54:         $course = $this->getDataGenerator()->create_course(array('category' => 1, 'shortname' => 'ANON'));",
          "55:         $this->assertNotEmpty($course);",
          "56:         $page = $this->getDataGenerator()->create_module('page', array('course' => $course->id));",
          "57:         $this->assertNotEmpty($page);",
          "60:         $user = $this->getDataGenerator()->create_user(array(",
          "61:                 'username' => 'testuser',",
          "62:                 'firstname' => 'Jimmy',",
          "63:                 'lastname' => 'Kinnon'",
          "64:         ));",
          "66:         $this->getDataGenerator()->enrol_user($user->id, $course->id);",
          "68:         $group = $this->getDataGenerator()->create_group(array('courseid' => $course->id));",
          "69:         $this->getDataGenerator()->create_group_member(array('groupid' => $group->id, 'userid' => $user->id));",
          "72:         $post = new stdClass();",
          "73:         $post->userid = $user->id;",
          "74:         $post->courseid = $course->id;",
          "75:         $post->groupid = $group->id;",
          "76:         $post->content = 'test post content text';",
          "77:         $post->module = 'blog';",
          "78:         $post->id = $DB->insert_record('post', $post);",
          "80:         core_tag_tag::set_item_tags('core', 'post', $post->id, context_user::instance($user->id), array('tag1'));",
          "81:         $tagid = $DB->get_field('tag', 'id', array('name' => 'tag1'));",
          "84:         $this->courseid = $course->id;",
          "85:         $this->cmid = $page->cmid;",
          "86:         $this->userid  = $user->id;",
          "87:         $this->groupid  = $group->id;",
          "88:         $this->tagid  = $tagid;",
          "89:         $this->postid = $post->id;",
          "90:         $this->publishstate = 'site';   // To be override in tests.",
          "93:         $CFG->bloglevel = BLOG_SITE_LEVEL;",
          "94:     }",
          "100:     public function test_get_public_entries_global_level_by_non_logged_users() {",
          "101:         global $CFG, $DB;",
          "103:         $CFG->bloglevel = BLOG_GLOBAL_LEVEL;",
          "104:         $CFG->forcelogin = 0;",
          "106:         $DB->set_field('post', 'publishstate', 'public', array('id' => $this->postid));",
          "108:         $result = core_blog\\external::get_entries();",
          "109:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "110:         $this->assertCount(1, $result['entries']);",
          "111:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "112:     }",
          "117:     public function test_get_public_entries_global_level_by_non_logged_users_closed_site() {",
          "118:         global $CFG, $DB;",
          "120:         $CFG->bloglevel = BLOG_GLOBAL_LEVEL;",
          "121:         $CFG->forcelogin = 1;",
          "123:         $DB->set_field('post', 'publishstate', 'public', array('id' => $this->postid));",
          "125:         $this->expectException('moodle_exception');",
          "126:         core_blog\\external::get_entries();",
          "127:     }",
          "133:     public function test_get_public_entries_global_level_by_guest_users() {",
          "134:         global $CFG, $DB;",
          "136:         $CFG->bloglevel = BLOG_GLOBAL_LEVEL;",
          "138:         $DB->set_field('post', 'publishstate', 'public', array('id' => $this->postid));",
          "140:         $this->setGuestUser();",
          "141:         $result = core_blog\\external::get_entries();",
          "142:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "143:         $this->assertCount(1, $result['entries']);",
          "144:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "145:     }",
          "151:     public function test_get_not_public_entries_global_level_by_non_logged_users() {",
          "152:         global $CFG;",
          "154:         $CFG->bloglevel = BLOG_GLOBAL_LEVEL;",
          "156:         $result = core_blog\\external::get_entries();",
          "157:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "158:         $this->assertCount(0, $result['entries']);",
          "159:     }",
          "165:     public function test_get_not_public_entries_global_level_by_guest_user() {",
          "166:         global $CFG;",
          "168:         $CFG->bloglevel = BLOG_GLOBAL_LEVEL;",
          "170:         $this->setGuestUser();",
          "171:         $result = core_blog\\external::get_entries();",
          "172:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "173:         $this->assertCount(0, $result['entries']);",
          "174:     }",
          "180:     public function test_get_not_public_entries_site_level_by_non_logged_users() {",
          "181:         $this->expectException('require_login_exception'); // In this case we get a security exception.",
          "182:         $result = core_blog\\external::get_entries();",
          "183:     }",
          "189:     public function test_get_not_public_entries_site_level_by_guest_users() {",
          "191:         $this->setGuestUser();",
          "192:         $result = core_blog\\external::get_entries();",
          "193:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "194:         $this->assertCount(0, $result['entries']);",
          "195:     }",
          "200:     public function test_get_site_entries_site_level_by_normal_users() {",
          "202:         $this->setUser($this->userid);",
          "203:         $result = core_blog\\external::get_entries();",
          "204:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "205:         $this->assertCount(1, $result['entries']);",
          "206:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "207:     }",
          "212:     public function test_get_draft_entries_site_level_by_author_users() {",
          "213:         global $DB;",
          "216:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "218:         $this->setUser($this->userid);",
          "219:         $result = core_blog\\external::get_entries();",
          "220:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "221:         $this->assertCount(1, $result['entries']);",
          "222:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "223:     }",
          "228:     public function test_get_draft_entries_site_level_by_not_author_users() {",
          "229:         global $DB;",
          "232:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "233:         $user = $this->getDataGenerator()->create_user();",
          "235:         $this->setUser($user);",
          "236:         $result = core_blog\\external::get_entries();",
          "237:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "238:         $this->assertCount(0, $result['entries']);",
          "239:     }",
          "244:     public function test_get_draft_entries_site_level_by_admin_users() {",
          "245:         global $DB;",
          "248:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "249:         $user = $this->getDataGenerator()->create_user();",
          "251:         $this->setAdminUser();",
          "252:         $result = core_blog\\external::get_entries();",
          "253:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "254:         $this->assertCount(1, $result['entries']);",
          "255:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "256:     }",
          "261:     public function test_get_draft_entries_user_level_by_author_users() {",
          "262:         global $CFG, $DB;",
          "264:         $CFG->bloglevel = BLOG_USER_LEVEL;",
          "266:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "268:         $this->setUser($this->userid);",
          "269:         $result = core_blog\\external::get_entries();",
          "270:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "271:         $this->assertCount(1, $result['entries']);",
          "272:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "273:     }",
          "278:     public function test_get_draft_entries_user_level_by_not_author_users() {",
          "279:         global $CFG, $DB;",
          "281:         $CFG->bloglevel = BLOG_USER_LEVEL;",
          "283:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "284:         $user = $this->getDataGenerator()->create_user();",
          "286:         $this->setUser($user);",
          "287:         $result = core_blog\\external::get_entries();",
          "288:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "289:         $this->assertCount(0, $result['entries']);",
          "290:     }",
          "295:     public function test_get_draft_entries_user_level_by_admin_users() {",
          "296:         global $CFG, $DB;",
          "298:         $CFG->bloglevel = BLOG_USER_LEVEL;",
          "300:         $DB->set_field('post', 'publishstate', 'draft', array('id' => $this->postid));",
          "301:         $user = $this->getDataGenerator()->create_user();",
          "303:         $this->setAdminUser();",
          "304:         $result = core_blog\\external::get_entries();",
          "305:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "306:         $this->assertCount(1, $result['entries']);",
          "307:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "308:     }",
          "313:     public function test_get_all_entries_including_pagination() {",
          "314:         global $DB, $USER;",
          "316:         $DB->set_field('post', 'publishstate', 'site', array('id' => $this->postid));",
          "319:         $this->setAdminUser();",
          "320:         $newpost = new stdClass();",
          "321:         $newpost->userid = $USER->id;",
          "322:         $newpost->content = 'test post content text';",
          "323:         $newpost->module = 'blog';",
          "324:         $newpost->publishstate = 'site';",
          "325:         $newpost->created = time() + HOURSECS;",
          "326:         $newpost->lastmodified = time() + HOURSECS;",
          "327:         $newpost->id = $DB->insert_record('post', $newpost);",
          "329:         $this->setUser($this->userid);",
          "330:         $result = core_blog\\external::get_entries();",
          "331:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "332:         $this->assertCount(2, $result['entries']);",
          "333:         $this->assertEquals(2, $result['totalentries']);",
          "335:         $result = core_blog\\external::get_entries(array(), 0, 1);",
          "336:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "337:         $this->assertCount(1, $result['entries']);",
          "338:         $this->assertEquals(2, $result['totalentries']);",
          "339:         $this->assertEquals($newpost->id, $result['entries'][0]['id']);",
          "341:         $result = core_blog\\external::get_entries(array(), 1, 1);",
          "342:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "343:         $this->assertCount(1, $result['entries']);",
          "344:         $this->assertEquals(2, $result['totalentries']);",
          "345:         $this->assertEquals($this->postid, $result['entries'][0]['id']);",
          "346:     }",
          "351:     public function test_get_entries_filtering_by_course() {",
          "352:         global $CFG, $DB;",
          "354:         $DB->set_field('post', 'publishstate', 'site', array('id' => $this->postid));",
          "356:         $this->setAdminUser();",
          "357:         $coursecontext = context_course::instance($this->courseid);",
          "358:         $anothercourse = $this->getDataGenerator()->create_course();",
          "361:         $blog = new blog_entry($this->postid);",
          "362:         $blog->add_association($coursecontext->id);",
          "365:         $result = core_blog\\external::get_entries(array(array('name' => 'courseid', 'value' => $this->courseid)));",
          "366:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "367:         $this->assertCount(1, $result['entries']);",
          "370:         $result = core_blog\\external::get_entries(array(array('name' => 'courseid', 'value' => $anothercourse->id)));",
          "371:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "372:         $this->assertCount(0, $result['entries']);",
          "375:         $result = core_blog\\external::get_entries(array(array('name' => 'cmid', 'value' => $this->cmid)));",
          "376:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "377:         $this->assertCount(0, $result['entries']);",
          "378:     }",
          "383:     public function test_get_entries_filtering_by_module() {",
          "384:         global $CFG, $DB;",
          "386:         $DB->set_field('post', 'publishstate', 'site', array('id' => $this->postid));",
          "388:         $this->setAdminUser();",
          "389:         $coursecontext = context_course::instance($this->courseid);",
          "390:         $contextmodule = context_module::instance($this->cmid);",
          "391:         $anothermodule = $this->getDataGenerator()->create_module('page', array('course' => $this->courseid));",
          "394:         $blog = new blog_entry($this->postid);",
          "395:         $blog->add_association($contextmodule->id);",
          "398:         $result = core_blog\\external::get_entries(array(array('name' => 'courseid', 'value' => $this->courseid)));",
          "399:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "400:         $this->assertCount(0, $result['entries']);",
          "403:         $result = core_blog\\external::get_entries(array(array('name' => 'cmid', 'value' => $this->cmid)));",
          "404:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "405:         $this->assertCount(1, $result['entries']);",
          "408:         $result = core_blog\\external::get_entries(array(array('name' => 'cmid', 'value' => $anothermodule->cmid)));",
          "409:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "410:         $this->assertCount(0, $result['entries']);",
          "411:     }",
          "416:     public function test_get_entries_filtering_by_author() {",
          "417:         $this->setAdminUser();",
          "419:         $result = core_blog\\external::get_entries(array(array('name' => 'userid', 'value' => $this->userid)));",
          "420:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "421:         $this->assertCount(1, $result['entries']);",
          "423:         $anotheruser = $this->getDataGenerator()->create_user();",
          "424:         $result = core_blog\\external::get_entries(array(array('name' => 'userid', 'value' => $anotheruser->id)));",
          "425:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "426:         $this->assertCount(0, $result['entries']);",
          "427:     }",
          "432:     public function test_get_entries_filtering_by_entry() {",
          "433:         $this->setAdminUser();",
          "435:         $result = core_blog\\external::get_entries(array(array('name' => 'entryid', 'value' => $this->postid)));",
          "436:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "437:         $this->assertCount(1, $result['entries']);",
          "439:         $this->expectException('moodle_exception');",
          "440:         $result = core_blog\\external::get_entries(array(array('name' => 'entryid', 'value' => -1)));",
          "441:     }",
          "446:     public function test_get_entries_filtering_by_search() {",
          "447:         $this->setAdminUser();",
          "449:         $result = core_blog\\external::get_entries(array(array('name' => 'search', 'value' => 'test')));",
          "450:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "451:         $this->assertCount(1, $result['entries']);",
          "453:         $result = core_blog\\external::get_entries(array(array('name' => 'search', 'value' => 'abc')));",
          "454:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "455:         $this->assertCount(0, $result['entries']);",
          "456:     }",
          "461:     public function test_get_entries_filtering_by_tag() {",
          "462:         $this->setAdminUser();",
          "464:         $result = core_blog\\external::get_entries(array(array('name' => 'tag', 'value' => 'tag1')));",
          "465:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "466:         $this->assertCount(1, $result['entries']);",
          "468:         $tag = $this->getDataGenerator()->create_tag(array('userid' => $this->userid, 'name' => 'tag2',",
          "469:             'isstandard' => 1));",
          "471:         $result = core_blog\\external::get_entries(array(array('name' => 'tag', 'value' => 'tag2')));",
          "472:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "473:         $this->assertCount(0, $result['entries']);",
          "474:     }",
          "479:     public function test_get_entries_filtering_by_tagid() {",
          "480:         $this->setAdminUser();",
          "482:         $result = core_blog\\external::get_entries(array(array('name' => 'tagid', 'value' => $this->tagid)));",
          "483:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "484:         $this->assertCount(1, $result['entries']);",
          "488:         $tag = $this->getDataGenerator()->create_tag(array('userid' => $this->userid, 'name' => 'tag2',",
          "489:             'isstandard' => 1));",
          "491:         $result = core_blog\\external::get_entries(array(array('name' => 'tagid', 'value' => $tag->id)));",
          "492:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "493:         $this->assertCount(0, $result['entries']);",
          "494:     }",
          "499:     public function test_get_entries_filtering_by_group() {",
          "500:         $this->setAdminUser();",
          "502:         $coursecontext = context_course::instance($this->courseid);",
          "503:         $blog = new blog_entry($this->postid);",
          "504:         $blog->add_association($coursecontext->id);",
          "507:         $result = core_blog\\external::get_entries(array(array('name' => 'groupid', 'value' => $this->groupid)));",
          "508:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "509:         $this->assertCount(1, $result['entries']);",
          "511:         $anotheruser = $this->getDataGenerator()->create_user();",
          "512:         $this->expectException('moodle_exception');",
          "513:         core_blog\\external::get_entries(array(array('name' => 'groupid', 'value' => -1)));",
          "514:     }",
          "519:     public function test_get_entries_multiple_filter() {",
          "520:         $this->setAdminUser();",
          "522:         $coursecontext = context_course::instance($this->courseid);",
          "523:         $blog = new blog_entry($this->postid);",
          "524:         $blog->add_association($coursecontext->id);",
          "526:         $result = core_blog\\external::get_entries(array(",
          "527:             array('name' => 'tagid', 'value' => $this->tagid),",
          "528:             array('name' => 'userid', 'value' => $this->userid),",
          "529:         ));",
          "530:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "531:         $this->assertCount(1, $result['entries']);",
          "534:         $result = core_blog\\external::get_entries(array(",
          "535:             array('name' => 'search', 'value' => 'www'),",
          "536:             array('name' => 'userid', 'value' => $this->userid),",
          "537:         ));",
          "538:         $result = external_api::clean_returnvalue(core_blog\\external::get_entries_returns(), $result);",
          "539:         $this->assertCount(0, $result['entries']);",
          "540:     }",
          "545:     public function test_get_entries_filtering_by_invalid_filter() {",
          "546:         $this->setAdminUser();",
          "548:         $this->expectException('moodle_exception');",
          "549:         $result = core_blog\\external::get_entries(array(array('name' => 'zzZZzz', 'value' => 'wwWWww')));",
          "550:     }",
          "555:     public function test_get_entries_blog_disabled() {",
          "556:         global $CFG;",
          "558:         $this->setAdminUser();",
          "559:         $CFG->enableblogs = 0;",
          "561:         $this->expectException('moodle_exception');",
          "562:         $result = core_blog\\external::get_entries(array(array('name' => 'zzZZzz', 'value' => 'wwWWww')));",
          "563:     }",
          "564: }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:         'capabilities'  => 'moodle/badges:viewotherbadges',",
          "75:         'services'      => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "76:     ),",
          "77:     'core_calendar_get_calendar_monthly_view' => array(",
          "78:         'classname' => 'core_calendar_external',",
          "79:         'methodname' => 'get_calendar_monthly_view',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     'core_blog_get_entries' => array(",
          "78:         'classname'   => 'core_blog\\external',",
          "79:         'methodname'  => 'get_entries',",
          "80:         'description' => 'Returns blog entries.',",
          "81:         'type'        => 'read',",
          "82:         'services'    => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "83:         'ajax'          => true,",
          "84:         'loginrequired' => false,",
          "85:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018092700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018092700.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c67a54e6199d69d34d7af111cea1b3ebf2142c3e",
      "candidate_info": {
        "commit_hash": "c67a54e6199d69d34d7af111cea1b3ebf2142c3e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c67a54e6199d69d34d7af111cea1b3ebf2142c3e",
        "files": [
          "mod/forum/amd/build/local/grades/grader.min.js",
          "mod/forum/amd/build/local/grades/grader.min.js.map",
          "mod/forum/amd/build/local/grades/local/grader/gradingpanel.min.js",
          "mod/forum/amd/build/local/grades/local/grader/gradingpanel.min.js.map",
          "mod/forum/amd/build/local/grades/local/grader/selectors.min.js",
          "mod/forum/amd/build/local/grades/local/grader/selectors.min.js.map",
          "mod/forum/amd/src/local/grades/grader.js",
          "mod/forum/amd/src/local/grades/local/grader/gradingpanel.js",
          "mod/forum/amd/src/local/grades/local/grader/selectors.js",
          "version.php"
        ],
        "message": "MDL-66360 mod_forum: Notify the student when the marker choose to notify",
        "before_after_code_files": [
          "mod/forum/amd/src/local/grades/grader.js||mod/forum/amd/src/local/grades/grader.js",
          "mod/forum/amd/src/local/grades/local/grader/gradingpanel.js||mod/forum/amd/src/local/grades/local/grader/gradingpanel.js",
          "mod/forum/amd/src/local/grades/local/grader/selectors.js||mod/forum/amd/src/local/grades/local/grader/selectors.js",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "mod/forum/amd/src/local/grades/grader.js||mod/forum/amd/src/local/grades/grader.js": [
          "File: mod/forum/amd/src/local/grades/grader.js -> mod/forum/amd/src/local/grades/grader.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     return async(user) => {",
          "280:         try {",
          "281:             root.querySelector(Selectors.regions.gradingPanelErrors).innerHTML = '';",
          "283:             if (result.success) {",
          "284:                 addToast(await getString('grades:gradesavedfor', 'mod_forum', user));",
          "285:             }",
          "",
          "[Removed Lines]",
          "282:             const result = await setGradeForUser(user.id, root.querySelector(Selectors.regions.gradingPanel));",
          "",
          "[Added Lines]",
          "282:             const result = await setGradeForUser(",
          "283:                 user.id,",
          "284:                 root.querySelector(Selectors.regions.gradingPanel),",
          "285:                 root.querySelector(Selectors.values.sendStudentNotifications).value",
          "286:             );",
          "",
          "---------------"
        ],
        "mod/forum/amd/src/local/grades/local/grader/gradingpanel.js||mod/forum/amd/src/local/grades/local/grader/gradingpanel.js": [
          "File: mod/forum/amd/src/local/grades/local/grader/gradingpanel.js -> mod/forum/amd/src/local/grades/local/grader/gradingpanel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     return {",
          "46:         getter: (userId) => GradingMethod.fetchCurrentGrade(component, context, itemName, userId),",
          "48:     };",
          "49: };",
          "",
          "[Removed Lines]",
          "47:         setter: (userId, formData) => GradingMethod.storeCurrentGrade(component, context, itemName, userId, formData),",
          "",
          "[Added Lines]",
          "47:         setter: (userId, formData, notifyStudent) => GradingMethod.storeCurrentGrade(",
          "48:             component, context, itemName, userId, formData, notifyStudent),",
          "",
          "---------------"
        ],
        "mod/forum/amd/src/local/grades/local/grader/selectors.js||mod/forum/amd/src/local/grades/local/grader/selectors.js": [
          "File: mod/forum/amd/src/local/grades/local/grader/selectors.js -> mod/forum/amd/src/local/grades/local/grader/selectors.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         userSearchContainer: getDataSelector('region', 'user-search-container'),",
          "53:         userSearchInput: getDataSelector('region', 'user-search-input')",
          "54:     },",
          "55: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     values: {",
          "56:         sendStudentNotifications: '[data-region=\"notification\"] input[type=\"radio\"]:checked',",
          "57:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "36: $release  = '3.8dev+ (Build: 20191108)'; // Human-friendly version name",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019110800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019110800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e3130269cbbe61387495a7a9228478263e26890",
      "candidate_info": {
        "commit_hash": "4e3130269cbbe61387495a7a9228478263e26890",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4e3130269cbbe61387495a7a9228478263e26890",
        "files": [
          "lib/db/services.php",
          "message/classes/api.php",
          "message/externallib.php",
          "message/tests/externallib_test.php",
          "version.php"
        ],
        "message": "MDL-63303 message: add get_conversation to message api",
        "before_after_code_files": [
          "lib/db/services.php||lib/db/services.php",
          "message/classes/api.php||message/classes/api.php",
          "message/externallib.php||message/externallib.php",
          "message/tests/externallib_test.php||message/tests/externallib_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1087:         'type' => 'read',",
          "1088:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1089:     ),",
          "1090:     'core_message_get_messages' => array(",
          "1091:         'classname' => 'core_message_external',",
          "1092:         'methodname' => 'get_messages',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1090:     'core_message_get_conversation' => array(",
          "1091:         'classname' => 'core_message_external',",
          "1092:         'methodname' => 'get_conversation',",
          "1093:         'classpath' => 'message/externallib.php',",
          "1094:         'description' => 'Retrieve a conversation for a user',",
          "1095:         'type' => 'read',",
          "1096:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "1097:         'ajax' => true",
          "1098:     ),",
          "",
          "---------------"
        ],
        "message/classes/api.php||message/classes/api.php": [
          "File: message/classes/api.php -> message/classes/api.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:         return $DB->get_records_sql($sql, array('userid1' => $userid1, 'userid2' => $userid2), $limitfrom, $limitnum);",
          "802:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "818:     public static function get_conversation(",
          "819:         int $userid,",
          "820:         int $conversationid,",
          "821:         bool $includecontactrequests = false,",
          "822:         bool $includeprivacyinfo = false,",
          "823:         int $memberlimit = 0,",
          "824:         int $memberoffset = 0,",
          "825:         int $messagelimit = 0,",
          "826:         int $messageoffset = 0,",
          "827:         bool $newestmessagesfirst = true",
          "828:     ) {",
          "829:         global $USER, $DB;",
          "831:         $systemcontext = \\context_system::instance();",
          "832:         $canreadallmessages = has_capability('moodle/site:readallmessages', $systemcontext);",
          "833:         if (($USER->id != $userid) && !$canreadallmessages) {",
          "834:             throw new \\moodle_exception('You do not have permission to perform this action.');",
          "835:         }",
          "837:         $conversation = $DB->get_record('message_conversations', ['id' => $conversationid]);",
          "838:         if (!$conversation) {",
          "839:             return null;",
          "840:         }",
          "842:         $isconversationmember = $DB->record_exists(",
          "843:             'message_conversation_members',",
          "844:             [",
          "845:                 'conversationid' => $conversationid,",
          "846:                 'userid' => $userid",
          "847:             ]",
          "848:         );",
          "850:         if (!$isconversationmember && !$canreadallmessages) {",
          "851:             throw new \\moodle_exception('You do not have permission to view this conversation.');",
          "852:         }",
          "854:         $members = self::get_conversation_members(",
          "855:             $userid,",
          "856:             $conversationid,",
          "857:             $includecontactrequests,",
          "858:             $memberoffset,",
          "859:             $memberlimit",
          "860:         );",
          "862:         $members = array_filter($members, function($member) use ($userid) {",
          "863:             return $member->id != $userid;",
          "864:         });",
          "866:         $messages = self::get_conversation_messages(",
          "867:             $userid,",
          "868:             $conversationid,",
          "869:             $messageoffset,",
          "870:             $messagelimit,",
          "871:             $newestmessagesfirst ? 'timecreated DESC' : 'timecreated ASC'",
          "872:         );",
          "874:         $service = \\core_favourites\\service_factory::get_service_for_user_context(\\context_user::instance($userid));",
          "875:         $isfavourite = $service->favourite_exists('core_message', 'message_conversations', $conversationid, $systemcontext);",
          "877:         $convextrafields = self::get_linked_conversation_extra_fields([$conversation]);",
          "878:         $subname = isset($convextrafields[$conversationid]) ? $convextrafields[$conversationid]['subname'] : null;",
          "879:         $imageurl = isset($convextrafields[$conversationid]) ? $convextrafields[$conversationid]['imageurl'] : null;",
          "881:         $unreadcountssql = 'SELECT count(m.id)",
          "882:                               FROM {messages} m",
          "883:                         INNER JOIN {message_conversations} mc",
          "884:                                 ON mc.id = m.conversationid",
          "885:                          LEFT JOIN {message_user_actions} mua",
          "886:                                 ON (mua.messageid = m.id AND mua.userid = ? AND",
          "887:                                    (mua.action = ? OR mua.action = ?))",
          "888:                              WHERE m.conversationid = ?",
          "889:                                AND m.useridfrom != ?",
          "890:                                AND mua.id is NULL';",
          "891:         $unreadcount = $DB->count_records_sql(",
          "892:             $unreadcountssql,",
          "893:             [",
          "894:                 $userid,",
          "895:                 self::MESSAGE_ACTION_READ,",
          "896:                 self::MESSAGE_ACTION_DELETED,",
          "897:                 $conversationid,",
          "898:                 $userid",
          "899:             ]",
          "900:         );",
          "902:         $membercount = $DB->count_records('message_conversation_members', ['conversationid' => $conversationid]);",
          "904:         return (object) [",
          "905:             'id' => $conversation->id,",
          "906:             'name' => $conversation->name,",
          "907:             'subname' => $subname,",
          "908:             'imageurl' => $imageurl,",
          "909:             'type' => $conversation->type,",
          "910:             'membercount' => $membercount,",
          "911:             'isfavourite' => $isfavourite,",
          "912:             'isread' => empty($unreadcount),",
          "913:             'unreadcount' => $unreadcount,",
          "914:             'members' => $members,",
          "915:             'messages' => $messages['messages']",
          "916:         ];",
          "917:     }",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1616:         );",
          "1617:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1623:     public static function get_conversation_parameters() {",
          "1624:         return new external_function_parameters(",
          "1625:             array(",
          "1626:                 'userid' => new external_value(PARAM_INT, 'The id of the user who we are viewing conversations for'),",
          "1627:                 'conversationid' => new external_value(PARAM_INT, 'The id of the conversation to fetch'),",
          "1628:                 'includecontactrequests' => new external_value(PARAM_BOOL, 'Include contact requests in the members'),",
          "1629:                 'includeprivacyinfo' => new external_value(PARAM_BOOL, 'Include privacy info in the members'),",
          "1630:                 'memberlimit' => new external_value(PARAM_INT, 'Limit for number of members', VALUE_DEFAULT, 0),",
          "1631:                 'memberoffset' => new external_value(PARAM_INT, 'Offset for member list', VALUE_DEFAULT, 0),",
          "1632:                 'messagelimit' => new external_value(PARAM_INT, 'Limit for number of messages', VALUE_DEFAULT, 100),",
          "1633:                 'messageoffset' => new external_value(PARAM_INT, 'Offset for messages list', VALUE_DEFAULT, 0),",
          "1634:                 'newestmessagesfirst' => new external_value(PARAM_BOOL, 'Order messages by newest first', VALUE_DEFAULT, true)",
          "1635:             )",
          "1636:         );",
          "1637:     }",
          "1654:     public static function get_conversation(",
          "1655:         int $userid,",
          "1656:         int $conversationid,",
          "1657:         bool $includecontactrequests = false,",
          "1658:         bool $includeprivacyinfo = false,",
          "1659:         int $memberlimit = 0,",
          "1660:         int $memberoffset = 0,",
          "1661:         int $messagelimit = 0,",
          "1662:         int $messageoffset = 0,",
          "1663:         bool $newestmessagesfirst = true",
          "1664:     ) {",
          "1665:         global $CFG, $DB, $USER;",
          "1668:         if (empty($CFG->messaging)) {",
          "1669:             throw new moodle_exception('disabled', 'message');",
          "1670:         }",
          "1672:         $params = [",
          "1673:             'userid' => $userid,",
          "1674:             'conversationid' => $conversationid,",
          "1675:             'includecontactrequests' => $includecontactrequests,",
          "1676:             'includeprivacyinfo' => $includeprivacyinfo,",
          "1677:             'memberlimit' => $memberlimit,",
          "1678:             'memberoffset' => $memberoffset,",
          "1679:             'messagelimit' => $messagelimit,",
          "1680:             'messageoffset' => $messageoffset,",
          "1681:             'newestmessagesfirst' => $newestmessagesfirst",
          "1682:         ];",
          "1683:         self::validate_parameters(self::get_conversation_parameters(), $params);",
          "1685:         $systemcontext = context_system::instance();",
          "1686:         self::validate_context($systemcontext);",
          "1688:         $conversation = \\core_message\\api::get_conversation(",
          "1689:             $params['userid'],",
          "1690:             $params['conversationid'],",
          "1691:             $params['includecontactrequests'],",
          "1692:             $params['includeprivacyinfo'],",
          "1693:             $params['memberlimit'],",
          "1694:             $params['memberoffset'],",
          "1695:             $params['messagelimit'],",
          "1696:             $params['messageoffset'],",
          "1697:             $params['newestmessagesfirst']",
          "1698:         );",
          "1700:         if ($conversation) {",
          "1701:             return $conversation;",
          "1702:         } else {",
          "1705:             throw new \\moodle_exception('Conversation does not exist');",
          "1706:         }",
          "1707:     }",
          "1714:     public static function get_conversation_returns() {",
          "1715:         return self::get_conversation_structure();",
          "1716:     }",
          "",
          "---------------"
        ],
        "message/tests/externallib_test.php||message/tests/externallib_test.php": [
          "File: message/tests/externallib_test.php -> message/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5632:         $this->expectException(\\moodle_exception::class);",
          "5633:         $writtenmessages = core_message_external::send_messages_to_conversation($gc1->id, $messages);",
          "5634:     }",
          "5635: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5639:     public function test_get_conversation_no_conversation() {",
          "5640:         $this->resetAfterTest();",
          "5642:         $user1 = self::getDataGenerator()->create_user();",
          "5643:         $user2 = self::getDataGenerator()->create_user();",
          "5645:         $name = 'lol conversation';",
          "5646:         $conversation = \\core_message\\api::create_conversation(",
          "5647:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "5648:             [",
          "5649:                 $user1->id,",
          "5650:                 $user2->id,",
          "5651:             ],",
          "5652:             $name",
          "5653:         );",
          "5654:         $conversationid = $conversation->id;",
          "5656:         $this->setUser($user1);",
          "5658:         $this->expectException('moodle_exception');",
          "5659:         $conv = core_message_external::get_conversation($user1->id, $conversationid + 1);",
          "5660:         external_api::clean_returnvalue(core_message_external::get_conversation_returns(), $conv);",
          "5661:     }",
          "5666:     public function test_get_conversation_no_messages() {",
          "5667:         $this->resetAfterTest();",
          "5669:         $user1 = self::getDataGenerator()->create_user();",
          "5670:         $user2 = self::getDataGenerator()->create_user();",
          "5672:         $name = 'lol conversation';",
          "5673:         $conversation = \\core_message\\api::create_conversation(",
          "5674:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "5675:             [",
          "5676:                 $user1->id,",
          "5677:                 $user2->id,",
          "5678:             ],",
          "5679:             $name",
          "5680:         );",
          "5681:         $conversationid = $conversation->id;",
          "5683:         $this->setUser($user1);",
          "5685:         $conv = core_message_external::get_conversation($user1->id, $conversationid);",
          "5686:         external_api::clean_returnvalue(core_message_external::get_conversation_returns(), $conv);",
          "5688:         $conv = (array) $conv;",
          "5689:         $this->assertEquals($conversationid, $conv['id']);",
          "5690:         $this->assertEquals($name, $conv['name']);",
          "5691:         $this->assertArrayHasKey('subname', $conv);",
          "5692:         $this->assertEquals(\\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL, $conv['type']);",
          "5693:         $this->assertEquals(2, $conv['membercount']);",
          "5694:         $this->assertEquals(false, $conv['isfavourite']);",
          "5695:         $this->assertEquals(true, $conv['isread']);",
          "5696:         $this->assertEquals(0, $conv['unreadcount']);",
          "5697:         $this->assertCount(1, $conv['members']);",
          "5698:         foreach ($conv['members'] as $member) {",
          "5699:             $member = (array) $member;",
          "5700:             $this->assertArrayHasKey('id', $member);",
          "5701:             $this->assertArrayHasKey('fullname', $member);",
          "5702:             $this->assertArrayHasKey('profileimageurl', $member);",
          "5703:             $this->assertArrayHasKey('profileimageurlsmall', $member);",
          "5704:             $this->assertArrayHasKey('isonline', $member);",
          "5705:             $this->assertArrayHasKey('showonlinestatus', $member);",
          "5706:             $this->assertArrayHasKey('isblocked', $member);",
          "5707:             $this->assertArrayHasKey('iscontact', $member);",
          "5708:         }",
          "5709:         $this->assertEmpty($conv['messages']);",
          "5710:     }",
          "5715:     public function test_get_conversation_with_messages() {",
          "5716:         $this->resetAfterTest();",
          "5718:         $user1 = self::getDataGenerator()->create_user();",
          "5719:         $user2 = self::getDataGenerator()->create_user();",
          "5722:         $otherconversation = \\core_message\\api::create_conversation(",
          "5723:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "5724:             [",
          "5725:                 $user1->id,",
          "5726:                 $user2->id,",
          "5727:             ]",
          "5728:         );",
          "5730:         $conversation = \\core_message\\api::create_conversation(",
          "5731:             \\core_message\\api::MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,",
          "5732:             [",
          "5733:                 $user1->id,",
          "5734:                 $user2->id,",
          "5735:             ]",
          "5736:         );",
          "5737:         $conversationid = $conversation->id;",
          "5739:         $time = time();",
          "5740:         $message1id = testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'A', $time - 10);",
          "5741:         $message2id = testhelper::send_fake_message_to_conversation($user2, $conversation->id, 'B', $time - 5);",
          "5742:         $message3id = testhelper::send_fake_message_to_conversation($user1, $conversation->id, 'C', $time);",
          "5745:         testhelper::send_fake_message_to_conversation($user1, $otherconversation->id, 'foo');",
          "5747:         $this->setUser($user1);",
          "5750:         $conv = core_message_external::get_conversation(",
          "5751:             $user1->id,",
          "5752:             $conversationid,",
          "5753:             false,",
          "5754:             false,",
          "5755:             0,",
          "5756:             0,",
          "5757:             0,",
          "5758:             0,",
          "5759:             true",
          "5760:         );",
          "5761:         external_api::clean_returnvalue(core_message_external::get_conversation_returns(), $conv);",
          "5763:         $conv = (array) $conv;",
          "5764:         $this->assertEquals(false, $conv['isread']);",
          "5765:         $this->assertEquals(1, $conv['unreadcount']);",
          "5766:         $this->assertCount(3, $conv['messages']);",
          "5767:         $this->assertEquals($message3id, $conv['messages'][0]->id);",
          "5768:         $this->assertEquals($user1->id, $conv['messages'][0]->useridfrom);",
          "5769:         $this->assertEquals($message2id, $conv['messages'][1]->id);",
          "5770:         $this->assertEquals($user2->id, $conv['messages'][1]->useridfrom);",
          "5771:         $this->assertEquals($message1id, $conv['messages'][2]->id);",
          "5772:         $this->assertEquals($user1->id, $conv['messages'][2]->useridfrom);",
          "5775:         $conv = core_message_external::get_conversation(",
          "5776:             $user1->id,",
          "5777:             $conversationid,",
          "5778:             false,",
          "5779:             false,",
          "5780:             0,",
          "5781:             0,",
          "5782:             0,",
          "5783:             0,",
          "5784:             false",
          "5785:         );",
          "5786:         external_api::clean_returnvalue(core_message_external::get_conversation_returns(), $conv);",
          "5788:         $conv = (array) $conv;",
          "5789:         $this->assertCount(3, $conv['messages']);",
          "5790:         $this->assertEquals($message3id, $conv['messages'][2]->id);",
          "5791:         $this->assertEquals($user1->id, $conv['messages'][2]->useridfrom);",
          "5792:         $this->assertEquals($message2id, $conv['messages'][1]->id);",
          "5793:         $this->assertEquals($user2->id, $conv['messages'][1]->useridfrom);",
          "5794:         $this->assertEquals($message1id, $conv['messages'][0]->id);",
          "5795:         $this->assertEquals($user1->id, $conv['messages'][0]->useridfrom);",
          "5798:         $conv = core_message_external::get_conversation(",
          "5799:             $user1->id,",
          "5800:             $conversationid,",
          "5801:             false,",
          "5802:             false,",
          "5803:             0,",
          "5804:             0,",
          "5805:             1,",
          "5806:             1,",
          "5807:             true",
          "5808:         );",
          "5809:         external_api::clean_returnvalue(core_message_external::get_conversation_returns(), $conv);",
          "5811:         $conv = (array) $conv;",
          "5812:         $this->assertCount(1, $conv['messages']);",
          "5813:         $this->assertEquals($message2id, $conv['messages'][0]->id);",
          "5814:         $this->assertEquals($user2->id, $conv['messages'][0]->useridfrom);",
          "5815:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018111301.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018111301.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}