{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ea4f37d720289300cb8e440f58e9256c15d8391",
      "candidate_info": {
        "commit_hash": "6ea4f37d720289300cb8e440f58e9256c15d8391",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/6ea4f37d720289300cb8e440f58e9256c15d8391",
        "files": [
          "gulpfile.js",
          "package.json",
          "packages/all.js",
          "packages/button-group/index.d.ts",
          "packages/button-group/index.js",
          "packages/button/src/button.js",
          "packages/button/src/group.js",
          "packages/checkbox/src/group.js",
          "packages/footer/index.js",
          "packages/header/index.js",
          "packages/header/src/util.js",
          "packages/radio/src/group.js",
          "packages/table/src/footer.js",
          "packages/table/src/header.js",
          "packages/table/src/table.js",
          "packages/table/src/util.js",
          "packages/v-x-e-table/src/conf.js",
          "packages/v-x-e-table/src/renderer.js"
        ],
        "message": "\u91cd\u6784\u6e32\u67d3\u5668\u903b\u8f91",
        "before_after_code_files": [
          "gulpfile.js||gulpfile.js",
          "packages/all.js||packages/all.js",
          "packages/button-group/index.d.ts||packages/button-group/index.d.ts",
          "packages/button-group/index.js||packages/button-group/index.js",
          "packages/button/src/button.js||packages/button/src/button.js",
          "packages/button/src/group.js||packages/button/src/group.js",
          "packages/checkbox/src/group.js||packages/checkbox/src/group.js",
          "packages/footer/index.js||packages/footer/index.js",
          "packages/header/index.js||packages/header/index.js",
          "packages/header/src/util.js||packages/header/src/util.js",
          "packages/radio/src/group.js||packages/radio/src/group.js",
          "packages/header/src/header.js||packages/table/src/header.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "packages/table/src/util.js||packages/table/src/util.js",
          "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js",
          "packages/v-x-e-table/src/renderer.js||packages/v-x-e-table/src/renderer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "gulpfile.js||gulpfile.js": [
          "File: gulpfile.js -> gulpfile.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   'export',",
          "26:   'keyboard',",
          "27:   'validator',",
          "31:   'icon',",
          "32:   'loading',",
          "",
          "[Removed Lines]",
          "28:   'header',",
          "29:   'footer',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/all.js||packages/all.js": [
          "File: packages/all.js -> packages/all.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import { Export } from './export'",
          "9: import { Keyboard } from './keyboard'",
          "10: import { Validator } from './validator'",
          "13: import { Column } from './column'",
          "14: import { Colgroup } from './colgroup'",
          "",
          "[Removed Lines]",
          "11: import { Footer } from './footer'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: import { Input } from './input'",
          "24: import { Textarea } from './textarea'",
          "25: import { Button } from './button'",
          "26: import { Modal } from './modal'",
          "27: import { Tooltip } from './tooltip'",
          "28: import { Form } from './form'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import { ButtonGroup } from './button-group'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43: const components = [",
          "46:   Icon,",
          "47:   Filter,",
          "48:   Menu,",
          "",
          "[Removed Lines]",
          "45:   Footer,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:   Input,",
          "66:   Textarea,",
          "67:   Button,",
          "68:   Modal,",
          "69:   Tooltip,",
          "70:   Form,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:   ButtonGroup,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "85: export function install (Vue, options) {",
          "86:   if (XEUtils.isPlainObject(options)) {",
          "88:   }",
          "89:   components.map(component => component.install(Vue))",
          "90: }",
          "94:   i18n: (key, args) => XEUtils.toFormatString(XEUtils.get(zhCN, key), args)",
          "95: })",
          "",
          "[Removed Lines]",
          "87:     VXETable.setup(options)",
          "93: VXETable.setup({",
          "",
          "[Added Lines]",
          "87:     VXETable.config(options)",
          "93: VXETable.config({",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "102: export * from './export'",
          "103: export * from './keyboard'",
          "104: export * from './validator'",
          "108: export * from './column'",
          "109: export * from './colgroup'",
          "",
          "[Removed Lines]",
          "105: export * from './header'",
          "106: export * from './footer'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "119: export * from './input'",
          "120: export * from './textarea'",
          "121: export * from './button'",
          "122: export * from './modal'",
          "123: export * from './tooltip'",
          "124: export * from './form'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: export * from './button-group'",
          "",
          "---------------"
        ],
        "packages/button-group/index.d.ts||packages/button-group/index.d.ts": [
          "File: packages/button-group/index.d.ts -> packages/button-group/index.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { ButtonGroup } from '../../types/button-group'",
          "3: export * from '../../types/button-group'",
          "4: export default ButtonGroup",
          "",
          "---------------"
        ],
        "packages/button-group/index.js||packages/button-group/index.js": [
          "File: packages/button-group/index.js -> packages/button-group/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import VxeButtonGroup from '../button/src/group'",
          "3: export const ButtonGroup = Object.assign(VxeButtonGroup, {",
          "4:   install (Vue) {",
          "5:     Vue.component(VxeButtonGroup.name, VxeButtonGroup)",
          "6:   }",
          "7: })",
          "9: export default ButtonGroup",
          "",
          "---------------"
        ],
        "packages/button/src/button.js||packages/button/src/button.js": [
          "File: packages/button/src/button.js -> packages/button/src/button.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     popupClassName: [String, Function],",
          "28:     transfer: { type: Boolean, default: () => GlobalConfig.button.transfer }",
          "29:   },",
          "30:   data () {",
          "31:     return {",
          "32:       inited: false,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:   inject: {",
          "31:     $xebuttonggroup: {",
          "32:       default: null",
          "33:     }",
          "34:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:     GlobalEvent.off(this, 'mousewheel')",
          "65:   },",
          "66:   render (h) {",
          "68:     const downsSlot = $scopedSlots.dropdowns",
          "69:     return downsSlot ? h('div', {",
          "70:       class: ['vxe-button--dropdown', className ? (XEUtils.isFunction(className) ? className({ $button: this }) : className) : '', {",
          "",
          "[Removed Lines]",
          "67:     const { $scopedSlots, $listeners, className, popupClassName, inited, type, destroyOnClose, isFormBtn, status, btnType, vSize, name, disabled, loading, showPanel, animatVisible, panelPlacement } = this",
          "",
          "[Added Lines]",
          "72:     const { $scopedSlots, className, popupClassName, inited, type, destroyOnClose, isFormBtn, status, btnType, vSize, name, disabled, loading, showPanel, animatVisible, panelPlacement } = this",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:           type: isFormBtn ? type : 'button',",
          "88:           disabled: disabled || loading",
          "89:         },",
          "91:           mouseenter: this.mouseenterTargetEvent,",
          "94:       }, this.renderContent(h).concat([",
          "95:         h('i', {",
          "96:           class: `vxe-button--dropdown-arrow ${GlobalConfig.icon.BUTTON_DROPDOWN}`",
          "",
          "[Removed Lines]",
          "90:         on: Object.assign({",
          "92:           mouseleave: this.mouseleaveEvent",
          "93:         }, XEUtils.objectMap($listeners, (cb, type) => evnt => this.$emit(type, { $event: evnt })))",
          "",
          "[Added Lines]",
          "95:         on: {",
          "97:           mouseleave: this.mouseleaveEvent,",
          "98:           click: this.clickEvent",
          "99:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:         type: isFormBtn ? type : 'button',",
          "134:         disabled: disabled || loading",
          "135:       },",
          "137:     }, this.renderContent(h))",
          "138:   },",
          "139:   methods: {",
          "",
          "[Removed Lines]",
          "136:       on: XEUtils.objectMap($listeners, (cb, type) => evnt => this.$emit(type, { $event: evnt }))",
          "",
          "[Added Lines]",
          "142:       on: {",
          "143:         click: this.clickEvent",
          "144:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190:         evnt.stopPropagation()",
          "191:       }",
          "192:     },",
          "193:     clickDropdownEvent (evnt) {",
          "194:       const dropdownElem = evnt.currentTarget",
          "195:       const panelElem = this.$refs.panel",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:     clickEvent (evnt) {",
          "202:       const { $xebuttonggroup } = this",
          "203:       if ($xebuttonggroup) {",
          "204:         $xebuttonggroup.handleClick({ name: this.name }, evnt)",
          "205:       } else {",
          "206:         this.$emit('click', { $event: evnt })",
          "207:       }",
          "208:     },",
          "",
          "---------------"
        ],
        "packages/button/src/group.js||packages/button/src/group.js": [
          "File: packages/button/src/group.js -> packages/button/src/group.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import GlobalConfig from '../../v-x-e-table/src/conf'",
          "3: export default {",
          "4:   name: 'VxeButtonGroup',",
          "5:   props: {",
          "6:     options: Array,",
          "7:     disabled: Boolean,",
          "8:     size: { type: String, default: () => GlobalConfig.buttonGroup.size || GlobalConfig.size }",
          "9:   },",
          "10:   provide () {",
          "11:     return {",
          "12:       $xebuttongroup: this",
          "13:     }",
          "14:   },",
          "15:   computed: {",
          "16:     vSize () {",
          "17:       return this.size || this.$parent.size || this.$parent.vSize",
          "18:     }",
          "19:   },",
          "20:   render (h) {",
          "21:     const { $scopedSlots, options } = this",
          "22:     const defaultSlot = $scopedSlots.default",
          "23:     return h('div', {",
          "24:       class: 'vxe-button-group'",
          "25:     }, defaultSlot ? defaultSlot.cell(this, {}) : (options ? options.map(item => h('vxe-button', { props: item })) : []))",
          "26:   },",
          "27:   methods: {",
          "28:     handleClick (params, evnt) {",
          "29:       const { options } = this",
          "30:       const { name } = params",
          "31:       const option = options ? options.find(item => item.name === name) : null",
          "32:       this.$emit('click', { ...params, option, $event: evnt })",
          "33:     }",
          "34:   }",
          "35: }",
          "",
          "---------------"
        ],
        "packages/checkbox/src/group.js||packages/checkbox/src/group.js": [
          "File: packages/checkbox/src/group.js -> packages/checkbox/src/group.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:     optionProps: Object,",
          "10:     disabled: Boolean,",
          "11:     max: [String, Number],",
          "13:   },",
          "14:   inject: {",
          "15:     $xeform: {",
          "",
          "[Removed Lines]",
          "12:     size: { type: String, default: () => GlobalConfig.checkbox.size || GlobalConfig.size }",
          "",
          "[Added Lines]",
          "12:     size: { type: String, default: () => GlobalConfig.checkboxGroup.size || GlobalConfig.size }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   },",
          "48:   render (h) {",
          "49:     const { $scopedSlots, options, valueField, labelField } = this",
          "51:     return h('div', {",
          "52:       class: 'vxe-checkbox-group'",
          "54:       return h('vxe-checkbox', {",
          "57:       })",
          "58:     }) : []))",
          "59:   },",
          "",
          "[Removed Lines]",
          "50:     const defaultSlots = $scopedSlots.default",
          "53:     }, defaultSlots ? defaultSlots.call(this, {}) : (options ? options.map(item => {",
          "55:         label: item[valueField],",
          "56:         content: item[labelField]",
          "",
          "[Added Lines]",
          "50:     const defaultSlot = $scopedSlots.default",
          "53:     }, defaultSlot ? defaultSlot.call(this, {}) : (options ? options.map(item => {",
          "55:         props: {",
          "56:           label: item[valueField],",
          "57:           content: item[labelField]",
          "58:         }",
          "",
          "---------------"
        ],
        "packages/footer/index.js||packages/footer/index.js": [
          "File: packages/footer/index.js -> packages/footer/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: export const Footer = Object.assign(VxeTableFooter, {",
          "4:   install (Vue) {",
          "",
          "[Removed Lines]",
          "1: import VxeTableFooter from './src/footer'",
          "",
          "[Added Lines]",
          "1: import VxeTableFooter from '../table/src/footer'",
          "",
          "---------------"
        ],
        "packages/header/index.js||packages/header/index.js": [
          "File: packages/header/index.js -> packages/header/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: export const Header = Object.assign(VxeTableHeader, {",
          "4:   install (Vue) {",
          "",
          "[Removed Lines]",
          "1: import VxeTableHeader from './src/header'",
          "",
          "[Added Lines]",
          "1: import VxeTableHeader from '../table/src/header'",
          "",
          "---------------"
        ],
        "packages/header/src/util.js||packages/header/src/util.js": [
          "File: packages/header/src/util.js -> packages/header/src/util.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/radio/src/group.js||packages/radio/src/group.js": [
          "File: packages/radio/src/group.js -> packages/radio/src/group.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   },",
          "46:   render (h) {",
          "47:     const { $scopedSlots, options, valueField, labelField } = this",
          "49:     return h('div', {",
          "50:       class: 'vxe-radio-group'",
          "52:       return h('vxe-radio', {",
          "55:       })",
          "56:     }) : []))",
          "57:   },",
          "",
          "[Removed Lines]",
          "48:     const defaultSlots = $scopedSlots.default",
          "51:     }, defaultSlots ? defaultSlots.call(this, {}) : (options ? options.map(item => {",
          "53:         label: item[valueField],",
          "54:         content: item[labelField]",
          "",
          "[Added Lines]",
          "48:     const defaultSlot = $scopedSlots.default",
          "51:     }, defaultSlot ? defaultSlot.call(this, {}) : (options ? options.map(item => {",
          "53:         props: {",
          "54:           label: item[valueField],",
          "55:           content: item[labelField]",
          "56:         }",
          "",
          "---------------"
        ],
        "packages/header/src/header.js||packages/table/src/header.js": [
          "File: packages/header/src/header.js -> packages/table/src/header.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import XEUtils from 'xe-utils'",
          "2: import UtilTools from '../../tools/utils'",
          "3: import DomTools from '../../tools/dom'",
          "7: const cellType = 'header'",
          "",
          "[Removed Lines]",
          "4: import { convertToRows } from './util'",
          "5: import { getColReMinWidth } from '../../table/src/util'",
          "",
          "[Added Lines]",
          "4: import { convertHeaderColumnToRows, getColReMinWidth } from './util'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:   methods: {",
          "207:     uploadColumn () {",
          "208:       const { $parent: $xetable } = this",
          "210:     },",
          "211:     resizeMousedown (evnt, params) {",
          "212:       const { column } = params",
          "",
          "[Removed Lines]",
          "209:       this.headerColumn = $xetable.isGroup ? convertToRows(this.tableGroupColumn) : []",
          "",
          "[Added Lines]",
          "208:       this.headerColumn = $xetable.isGroup ? convertHeaderColumnToRows(this.tableGroupColumn) : []",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import VXETable from '../../v-x-e-table'",
          "4: import VxeTableBody from './body'",
          "5: import VxeTableHeader from '../../header'",
          "6: import vSize from '../../mixins/size'",
          "7: import { isEnableConf, getFuncText } from '../../tools/utils'",
          "8: import { createResizeEvent } from '../../tools/resize'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import VxeTableFooter from '../../footer'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:       },",
          "39:       ref: `${fixedType}Header`",
          "40:     }) : _e(),",
          "42:       props: {",
          "43:         fixedType,",
          "44:         tableData,",
          "",
          "[Removed Lines]",
          "41:     h('vxe-table-body', {",
          "",
          "[Added Lines]",
          "42:     h(VxeTableBody, {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:       },",
          "49:       ref: `${fixedType}Body`",
          "50:     }),",
          "52:       props: {",
          "53:         footerTableData,",
          "54:         tableColumn,",
          "",
          "[Removed Lines]",
          "51:     showFooter ? h('vxe-table-footer', {",
          "",
          "[Added Lines]",
          "52:     showFooter ? h(VxeTableFooter, {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "259:     params: Object",
          "260:   },",
          "264:   provide () {",
          "265:     return {",
          "266:       $xetable: this,",
          "",
          "[Removed Lines]",
          "261:   components: {",
          "262:     VxeTableBody",
          "263:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/table/src/util.js||packages/table/src/util.js": [
          "File: packages/table/src/util.js -> packages/table/src/util.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { ColumnInfo } from './columnInfo'",
          "4: import DomTools from '../../tools/dom'",
          "6: const lineOffsetSizes = {",
          "7:   mini: 3,",
          "8:   small: 2,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: const getAllConvertColumns = (columns, parentColumn) => {",
          "7:   const result = []",
          "8:   columns.forEach((column) => {",
          "9:     column.parentId = parentColumn ? parentColumn.id : null",
          "10:     if (column.visible) {",
          "11:       if (column.children && column.children.length && column.children.some(column => column.visible)) {",
          "12:         result.push(column)",
          "13:         result.push(...getAllConvertColumns(column.children, column))",
          "14:       } else {",
          "15:         result.push(column)",
          "16:       }",
          "17:     }",
          "18:   })",
          "19:   return result",
          "20: }",
          "22: export const convertHeaderColumnToRows = (originColumns) => {",
          "23:   let maxLevel = 1",
          "24:   const traverse = (column, parent) => {",
          "25:     if (parent) {",
          "26:       column.level = parent.level + 1",
          "27:       if (maxLevel < column.level) {",
          "28:         maxLevel = column.level",
          "29:       }",
          "30:     }",
          "31:     if (column.children && column.children.length && column.children.some(column => column.visible)) {",
          "32:       let colSpan = 0",
          "33:       column.children.forEach((subColumn) => {",
          "34:         if (subColumn.visible) {",
          "35:           traverse(subColumn, column)",
          "36:           colSpan += subColumn.colSpan",
          "37:         }",
          "38:       })",
          "39:       column.colSpan = colSpan",
          "40:     } else {",
          "41:       column.colSpan = 1",
          "42:     }",
          "43:   }",
          "45:   originColumns.forEach((column) => {",
          "46:     column.level = 1",
          "47:     traverse(column)",
          "48:   })",
          "50:   const rows = []",
          "51:   for (let i = 0; i < maxLevel; i++) {",
          "52:     rows.push([])",
          "53:   }",
          "55:   const allColumns = getAllConvertColumns(originColumns)",
          "57:   allColumns.forEach((column) => {",
          "58:     if (column.children && column.children.length && column.children.some(column => column.visible)) {",
          "59:       column.rowSpan = 1",
          "60:     } else {",
          "61:       column.rowSpan = maxLevel - column.level + 1",
          "62:     }",
          "63:     rows[column.level - 1].push(column)",
          "64:   })",
          "66:   return rows",
          "67: }",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js": [
          "File: packages/v-x-e-table/src/conf.js -> packages/v-x-e-table/src/conf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:   },",
          "330:   radio: {",
          "332:     strict: true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:   buttonGroup: {",
          "332:   },",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/renderer.js||packages/v-x-e-table/src/renderer.js": [
          "File: packages/v-x-e-table/src/renderer.js -> packages/v-x-e-table/src/renderer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   switch (renderOpts.name) {",
          "16:     case 'input':",
          "17:     case 'textarea':",
          "18:     case '$input':",
          "19:     case '$textarea':",
          "20:       return 'input'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:     case 'VxeInput':",
          "19:     case 'VxeTextarea':",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: }",
          "38: function getDefaultComponentName ({ name }) {",
          "39:   return `vxe-${name.replace('$', '')}`",
          "40: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:   return name",
          "42: }",
          "48: function getOldComponentName ({ name }) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: function getInputImmediateModel (renderOpts) {",
          "55:   const { name, immediate, props } = renderOpts",
          "56:   if (!immediate) {",
          "58:       const { type } = props || {}",
          "59:       return !(!type || type === 'text' || type === 'number' || type === 'integer' || type === 'float')",
          "60:     }",
          "",
          "[Removed Lines]",
          "57:     if (name === '$input') {",
          "",
          "[Added Lines]",
          "67:     if (name === 'VxeInput' || name === '$input') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:   if (inputFunc) {",
          "134:     ons[modelEvent] = function (targetEvnt) {",
          "137:       if (events && events[modelEvent]) {",
          "138:         events[modelEvent](params, targetEvnt)",
          "139:       }",
          "",
          "[Removed Lines]",
          "136:       inputFunc(name === '$input' || name === '$textarea' ? targetEvnt.value : targetEvnt)",
          "",
          "[Added Lines]",
          "146:       inputFunc(['VxeInput', 'VxeTextarea', '$input', '$textarea'].includes(name) ? targetEvnt.value : targetEvnt)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "168:     }",
          "169:   }, (eventParams) => {",
          "172:       $table.updateStatus(params, eventParams.value)",
          "173:     } else {",
          "174:       $table.updateStatus(params)",
          "",
          "[Removed Lines]",
          "171:     if (!isImmediate && (name === '$input' || name === '$textarea')) {",
          "",
          "[Added Lines]",
          "181:     if (!isImmediate && (['VxeInput', 'VxeTextarea', '$input', '$textarea'].includes(name))) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "279:   ]",
          "280: }",
          "283:   return [",
          "284:     h('vxe-button', {",
          "285:       props: getCellEditProps(renderOpts, params),",
          "",
          "[Removed Lines]",
          "282: function defaultButtonEditRender (h, renderOpts, params) {",
          "",
          "[Added Lines]",
          "296: function oldEditRender (h, renderOpts, params) {",
          "297:   const { row, column } = params",
          "298:   const cellValue = UtilTools.getCellValue(row, column)",
          "299:   return [",
          "300:     h(getOldComponentName(renderOpts), {",
          "301:       props: getCellEditProps(renderOpts, params, cellValue),",
          "302:       on: getEditOns(renderOpts, params),",
          "303:       nativeOn: getNativeOns(renderOpts, params)",
          "304:     })",
          "305:   ]",
          "306: }",
          "312: function oldButtonEditRender (h, renderOpts, params) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "289:   ]",
          "290: }",
          "294: }",
          "296: function renderNativeOptgroups (h, renderOpts, params, renderOptionsMethods) {",
          "",
          "[Removed Lines]",
          "292: function defaultButtonsEditRender (h, renderOpts, params) {",
          "293:   return renderOpts.children.map(childRenderOpts => defaultButtonEditRender(h, childRenderOpts, params)[0])",
          "",
          "[Added Lines]",
          "326: function oldButtonsEditRender (h, renderOpts, params) {",
          "327:   return renderOpts.children.map(childRenderOpts => oldButtonEditRender(h, childRenderOpts, params)[0])",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "361:   })",
          "362: }",
          "364: function handleFilterMethod ({ option, row, column }) {",
          "365:   const { data } = option",
          "366:   const cellValue = XEUtils.get(row, column.property)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402: function oldFilterRender (h, renderOpts, params) {",
          "403:   const { column } = params",
          "404:   return column.filters.map((option, oIndex) => {",
          "405:     const optionValue = option.data",
          "406:     return h(getOldComponentName(renderOpts), {",
          "407:       key: oIndex,",
          "408:       props: getFilterProps(renderOpts, renderOpts, optionValue),",
          "409:       on: getFilterOns(renderOpts, params, option)",
          "410:     })",
          "411:   })",
          "412: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "391:   ]",
          "392: }",
          "394: function getSelectCellValue (renderOpts, { row, column }) {",
          "395:   const { props = {}, options, optionGroups, optionProps = {}, optionGroupProps = {} } = renderOpts",
          "396:   const cellValue = XEUtils.get(row, column.property)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448: function oldSelectEditRender (h, renderOpts, params) {",
          "449:   const { row, column } = params",
          "450:   const { options, optionProps, optionGroups, optionGroupProps } = renderOpts",
          "451:   const cellValue = UtilTools.getCellValue(row, column)",
          "452:   return [",
          "453:     h(getOldComponentName(renderOpts), {",
          "454:       props: getCellEditProps(renderOpts, params, cellValue, { options, optionProps, optionGroups, optionGroupProps }),",
          "455:       on: getEditOns(renderOpts, params)",
          "456:     })",
          "457:   ]",
          "458: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "450:   ]",
          "451: }",
          "454:   return [",
          "455:     h('vxe-button', {",
          "456:       props: getItemProps(renderOpts, params),",
          "",
          "[Removed Lines]",
          "453: function defaultButtonItemRender (h, renderOpts, params) {",
          "",
          "[Added Lines]",
          "523: function oldItemRender (h, renderOpts, params) {",
          "524:   const { data, property } = params",
          "525:   const itemValue = XEUtils.get(data, property)",
          "526:   return [",
          "527:     h(getOldComponentName(renderOpts), {",
          "528:       props: getItemProps(renderOpts, params, itemValue),",
          "529:       on: getItemOns(renderOpts, params),",
          "530:       nativeOn: getNativeOns(renderOpts, params)",
          "531:     })",
          "532:   ]",
          "533: }",
          "539: function oldButtonItemRender (h, renderOpts, params) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "460:   ]",
          "461: }",
          "465: }",
          "",
          "[Removed Lines]",
          "463: function defaultButtonsItemRender (h, renderOpts, params) {",
          "464:   return renderOpts.children.map(childRenderOpts => defaultButtonItemRender(h, childRenderOpts, params)[0])",
          "",
          "[Added Lines]",
          "553: function oldButtonsItemRender (h, renderOpts, params) {",
          "554:   return renderOpts.children.map(childRenderOpts => oldButtonItemRender(h, childRenderOpts, params)[0])",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "501: function defaultFormItemRender (h, renderOpts, params) {",
          "503:   const { data, property } = params",
          "507:   const itemValue = XEUtils.get(data, property)",
          "528:   return [",
          "530:       props: getItemProps(renderOpts, params, itemValue),",
          "531:       on: getItemOns(renderOpts, params),",
          "532:       nativeOn: getNativeOns(renderOpts, params)",
          "",
          "[Removed Lines]",
          "502:   const { options, optionProps = {} } = renderOpts",
          "504:   const labelProp = optionProps.label || 'label'",
          "505:   const valueProp = optionProps.value || 'value'",
          "506:   const disabledProp = optionProps.disabled || 'disabled'",
          "508:   const name = getDefaultComponentName(renderOpts)",
          "510:   if (options) {",
          "511:     return [",
          "512:       h(`${name}-group`, {",
          "513:         props: getItemProps(renderOpts, params, itemValue),",
          "514:         on: getItemOns(renderOpts, params),",
          "515:         nativeOn: getNativeOns(renderOpts, params)",
          "516:       }, options.map((item, index) => {",
          "517:         return h(name, {",
          "518:           key: index,",
          "519:           props: {",
          "520:             label: item[valueProp],",
          "521:             content: item[labelProp],",
          "522:             disabled: item[disabledProp]",
          "523:           }",
          "524:         })",
          "525:       }))",
          "526:     ]",
          "527:   }",
          "529:     h(name, {",
          "",
          "[Added Lines]",
          "595:     h(getDefaultComponentName(renderOpts), {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "534:   ]",
          "535: }",
          "541:   const { options, optionProps = {} } = renderOpts",
          "542:   const { data, property } = params",
          "543:   const labelProp = optionProps.label || 'label'",
          "544:   const valueProp = optionProps.value || 'value'",
          "545:   const disabledProp = optionProps.disabled || 'disabled'",
          "546:   const itemValue = XEUtils.get(data, property)",
          "549:   if (options) {",
          "550:     return [",
          "",
          "[Removed Lines]",
          "540: function defaultOldFormItemRadioAndCheckboxRender (h, renderOpts, params) {",
          "547:   const name = getDefaultComponentName(renderOpts)",
          "",
          "[Added Lines]",
          "603: function formItemRadioAndCheckboxRender (h, renderOpts, params) {",
          "604:   const { options, optionProps = {} } = renderOpts",
          "605:   const { data, property } = params",
          "606:   const itemValue = XEUtils.get(data, property)",
          "607:   return [",
          "608:     h(getDefaultComponentName(renderOpts), {",
          "609:       props: { options, optionProps, ...getItemProps(renderOpts, params, itemValue) },",
          "610:       on: getItemOns(renderOpts, params),",
          "611:       nativeOn: getNativeOns(renderOpts, params)",
          "612:     })",
          "613:   ]",
          "614: }",
          "620: function oldFormItemRadioAndCheckboxRender (h, renderOpts, params) {",
          "627:   const name = getOldComponentName(renderOpts)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "573:   ]",
          "574: }",
          "",
          "[Removed Lines]",
          "576: const VxeInputRender = {",
          "577:   autofocus: '.vxe-input--inner',",
          "578:   renderEdit: defaultEditRender,",
          "579:   renderCell (h, renderOpts, params) {",
          "580:     const { props = {} } = renderOpts",
          "581:     const { row, column } = params",
          "582:     const digits = props.digits || GlobalConfig.input.digits",
          "583:     let cellValue = XEUtils.get(row, column.property)",
          "584:     if (cellValue) {",
          "585:       switch (props.type) {",
          "586:         case 'date':",
          "587:         case 'week':",
          "588:         case 'month':",
          "589:         case 'year':",
          "590:           cellValue = getLabelFormatDate(cellValue, props)",
          "591:           break",
          "592:         case 'float':",
          "593:           cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits)",
          "594:           break",
          "595:       }",
          "596:     }",
          "597:     return getCellLabelVNs(h, renderOpts, params, cellValue)",
          "598:   },",
          "599:   renderDefault: defaultEditRender,",
          "600:   renderFilter: defaultFilterRender,",
          "601:   defaultFilterMethod: handleFilterMethod,",
          "602:   renderItemContent: defaultItemRender",
          "603: }",
          "605: const VxeSelectRender = {",
          "606:   autofocus: '.vxe-input--inner',",
          "607:   renderEdit: defaultSelectEditRender,",
          "608:   renderDefault: defaultSelectEditRender,",
          "609:   renderCell (h, renderOpts, params) {",
          "610:     return getCellLabelVNs(h, renderOpts, params, getSelectCellValue(renderOpts, params))",
          "611:   },",
          "612:   renderFilter (h, renderOpts, params) {",
          "613:     const { column } = params",
          "614:     const { options, optionProps, optionGroups, optionGroupProps } = renderOpts",
          "615:     const nativeOn = getNativeOns(renderOpts, params)",
          "616:     return column.filters.map((option, oIndex) => {",
          "617:       const optionValue = option.data",
          "618:       return h(getDefaultComponentName(renderOpts), {",
          "619:         key: oIndex,",
          "620:         props: getFilterProps(renderOpts, params, optionValue, { options, optionProps, optionGroups, optionGroupProps }),",
          "621:         on: getFilterOns(renderOpts, params, option),",
          "622:         nativeOn",
          "623:       })",
          "624:     })",
          "625:   },",
          "626:   defaultFilterMethod: handleFilterMethod,",
          "627:   renderItemContent (h, renderOpts, params) {",
          "628:     const { data, property } = params",
          "629:     const { options, optionProps, optionGroups, optionGroupProps } = renderOpts",
          "630:     const itemValue = XEUtils.get(data, property)",
          "631:     return [",
          "632:       h(getDefaultComponentName(renderOpts), {",
          "633:         props: getItemProps(renderOpts, params, itemValue, { options, optionProps, optionGroups, optionGroupProps }),",
          "634:         on: getItemOns(renderOpts, params),",
          "635:         nativeOn: getNativeOns(renderOpts, params)",
          "636:       })",
          "637:     ]",
          "638:   },",
          "639:   cellExportMethod: handleExportSelectMethod",
          "640: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "687:     },",
          "688:     cellExportMethod: handleExportSelectMethod",
          "689:   },",
          "691:   VxeTextarea: {",
          "692:     autofocus: '.vxe-textarea--inner',",
          "693:     renderItemContent: defaultItemRender",
          "",
          "[Removed Lines]",
          "690:   VxeInput: VxeInputRender,",
          "",
          "[Added Lines]",
          "704:   VxeInput: {",
          "705:     autofocus: '.vxe-input--inner',",
          "706:     renderEdit: defaultEditRender,",
          "707:     renderCell (h, renderOpts, params) {",
          "708:       const { props = {} } = renderOpts",
          "709:       const { row, column } = params",
          "710:       const digits = props.digits || GlobalConfig.input.digits",
          "711:       let cellValue = XEUtils.get(row, column.property)",
          "712:       if (cellValue) {",
          "713:         switch (props.type) {",
          "714:           case 'date':",
          "715:           case 'week':",
          "716:           case 'month':",
          "717:           case 'year':",
          "718:             cellValue = getLabelFormatDate(cellValue, props)",
          "719:             break",
          "720:           case 'float':",
          "721:             cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits)",
          "722:             break",
          "723:         }",
          "724:       }",
          "725:       return getCellLabelVNs(h, renderOpts, params, cellValue)",
          "726:     },",
          "727:     renderDefault: defaultEditRender,",
          "728:     renderFilter: defaultFilterRender,",
          "729:     defaultFilterMethod: handleFilterMethod,",
          "730:     renderItemContent: defaultItemRender",
          "731:   },",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "698:   },",
          "699:   VxeButtonGroup: {",
          "700:     renderDefault: defaultCellRender,",
          "702:   },",
          "704:   VxeRadio: {",
          "705:     autofocus: '.vxe-radio--input',",
          "706:     renderItemContent: defaultFormItemRender",
          "707:   },",
          "708:   VxeRadioGroup: {",
          "709:     autofocus: '.vxe-radio--input',",
          "711:   },",
          "712:   VxeCheckbox: {",
          "713:     autofocus: '.vxe-checkbox--input',",
          "",
          "[Removed Lines]",
          "701:     renderItemContent: defaultFormItemRender",
          "703:   VxeSelect: VxeSelectRender,",
          "710:     renderItemContent: defaultFormItemRender",
          "",
          "[Added Lines]",
          "742:     renderItemContent (h, renderOpts, params) {",
          "743:       const { options } = renderOpts",
          "744:       const { data, property } = params",
          "745:       const itemValue = XEUtils.get(data, property)",
          "746:       return [",
          "747:         h(getDefaultComponentName(renderOpts), {",
          "748:           props: { options, ...getItemProps(renderOpts, params, itemValue) },",
          "749:           on: getItemOns(renderOpts, params),",
          "750:           nativeOn: getNativeOns(renderOpts, params)",
          "751:         })",
          "752:       ]",
          "753:     }",
          "754:   },",
          "755:   VxeSelect: {",
          "756:     autofocus: '.vxe-input--inner',",
          "757:     renderEdit: defaultSelectEditRender,",
          "758:     renderDefault: defaultSelectEditRender,",
          "759:     renderCell (h, renderOpts, params) {",
          "760:       return getCellLabelVNs(h, renderOpts, params, getSelectCellValue(renderOpts, params))",
          "761:     },",
          "762:     renderFilter (h, renderOpts, params) {",
          "763:       const { column } = params",
          "764:       const { options, optionProps, optionGroups, optionGroupProps } = renderOpts",
          "765:       const nativeOn = getNativeOns(renderOpts, params)",
          "766:       return column.filters.map((option, oIndex) => {",
          "767:         const optionValue = option.data",
          "768:         return h(getDefaultComponentName(renderOpts), {",
          "769:           key: oIndex,",
          "770:           props: getFilterProps(renderOpts, params, optionValue, { options, optionProps, optionGroups, optionGroupProps }),",
          "771:           on: getFilterOns(renderOpts, params, option),",
          "772:           nativeOn",
          "773:         })",
          "774:       })",
          "775:     },",
          "776:     defaultFilterMethod: handleFilterMethod,",
          "777:     renderItemContent (h, renderOpts, params) {",
          "778:       const { data, property } = params",
          "779:       const { options, optionProps, optionGroups, optionGroupProps } = renderOpts",
          "780:       const itemValue = XEUtils.get(data, property)",
          "781:       return [",
          "782:         h(getDefaultComponentName(renderOpts), {",
          "783:           props: getItemProps(renderOpts, params, itemValue, { options, optionProps, optionGroups, optionGroupProps }),",
          "784:           on: getItemOns(renderOpts, params),",
          "785:           nativeOn: getNativeOns(renderOpts, params)",
          "786:         })",
          "787:       ]",
          "788:     },",
          "789:     cellExportMethod: handleExportSelectMethod",
          "797:     renderItemContent: formItemRadioAndCheckboxRender",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "715:   },",
          "716:   VxeCheckboxGroup: {",
          "717:     autofocus: '.vxe-checkbox--input',",
          "719:   },",
          "720:   VxeSwitch: {",
          "721:     autofocus: '.vxe-switch--button',",
          "",
          "[Removed Lines]",
          "718:     renderItemContent: defaultFormItemRender",
          "",
          "[Added Lines]",
          "805:     renderItemContent: formItemRadioAndCheckboxRender",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "725:   },",
          "729:   $textarea: {",
          "730:     autofocus: '.vxe-textarea--inner',",
          "732:   },",
          "733:   $button: {",
          "736:   },",
          "737:   $buttons: {",
          "740:   },",
          "742:   $radio: {",
          "743:     autofocus: '.vxe-radio--input',",
          "745:   },",
          "746:   $checkbox: {",
          "747:     autofocus: '.vxe-checkbox--input',",
          "749:   },",
          "750:   $switch: {",
          "751:     autofocus: '.vxe-switch--button',",
          "755:   }",
          "757: }",
          "",
          "[Removed Lines]",
          "728:   $input: VxeInputRender,",
          "731:     renderItemContent: defaultItemRender",
          "734:     renderDefault: defaultButtonEditRender,",
          "735:     renderItemContent: defaultButtonItemRender",
          "738:     renderDefault: defaultButtonsEditRender,",
          "739:     renderItemContent: defaultButtonsItemRender",
          "741:   $select: VxeSelectRender,",
          "744:     renderItemContent: defaultOldFormItemRadioAndCheckboxRender",
          "748:     renderItemContent: defaultOldFormItemRadioAndCheckboxRender",
          "752:     renderEdit: defaultEditRender,",
          "753:     renderDefault: defaultEditRender,",
          "754:     renderItemContent: defaultItemRender",
          "",
          "[Added Lines]",
          "815:   $input: {",
          "816:     autofocus: '.vxe-input--inner',",
          "817:     renderEdit: oldEditRender,",
          "818:     renderCell (h, renderOpts, params) {",
          "819:       const { props = {} } = renderOpts",
          "820:       const { row, column } = params",
          "821:       const digits = props.digits || GlobalConfig.input.digits",
          "822:       let cellValue = XEUtils.get(row, column.property)",
          "823:       if (cellValue) {",
          "824:         switch (props.type) {",
          "825:           case 'date':",
          "826:           case 'week':",
          "827:           case 'month':",
          "828:           case 'year':",
          "829:             cellValue = getLabelFormatDate(cellValue, props)",
          "830:             break",
          "831:           case 'float':",
          "832:             cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits)",
          "833:             break",
          "834:         }",
          "835:       }",
          "836:       return getCellLabelVNs(h, renderOpts, params, cellValue)",
          "837:     },",
          "838:     renderDefault: oldEditRender,",
          "839:     renderFilter: oldFilterRender,",
          "840:     defaultFilterMethod: handleFilterMethod,",
          "841:     renderItemContent: oldItemRender",
          "842:   },",
          "845:     renderItemContent: oldItemRender",
          "848:     renderDefault: oldButtonEditRender,",
          "849:     renderItemContent: oldButtonItemRender",
          "852:     renderDefault: oldButtonsEditRender,",
          "853:     renderItemContent: oldButtonsItemRender",
          "854:   },",
          "855:   $select: {",
          "856:     autofocus: '.vxe-input--inner',",
          "857:     renderEdit: oldSelectEditRender,",
          "858:     renderDefault: oldSelectEditRender,",
          "859:     renderCell (h, renderOpts, params) {",
          "860:       return getCellLabelVNs(h, renderOpts, params, getSelectCellValue(renderOpts, params))",
          "861:     },",
          "862:     renderFilter (h, renderOpts, params) {",
          "863:       const { column } = params",
          "864:       const { options, optionProps, optionGroups, optionGroupProps } = renderOpts",
          "865:       const nativeOn = getNativeOns(renderOpts, params)",
          "866:       return column.filters.map((option, oIndex) => {",
          "867:         const optionValue = option.data",
          "868:         return h(getOldComponentName(renderOpts), {",
          "869:           key: oIndex,",
          "870:           props: getFilterProps(renderOpts, params, optionValue, { options, optionProps, optionGroups, optionGroupProps }),",
          "871:           on: getFilterOns(renderOpts, params, option),",
          "872:           nativeOn",
          "873:         })",
          "874:       })",
          "875:     },",
          "876:     defaultFilterMethod: handleFilterMethod,",
          "877:     renderItemContent (h, renderOpts, params) {",
          "878:       const { data, property } = params",
          "879:       const { options, optionProps, optionGroups, optionGroupProps } = renderOpts",
          "880:       const itemValue = XEUtils.get(data, property)",
          "881:       return [",
          "882:         h(getOldComponentName(renderOpts), {",
          "883:           props: getItemProps(renderOpts, params, itemValue, { options, optionProps, optionGroups, optionGroupProps }),",
          "884:           on: getItemOns(renderOpts, params),",
          "885:           nativeOn: getNativeOns(renderOpts, params)",
          "886:         })",
          "887:       ]",
          "888:     },",
          "889:     cellExportMethod: handleExportSelectMethod",
          "893:     renderItemContent: oldFormItemRadioAndCheckboxRender",
          "897:     renderItemContent: oldFormItemRadioAndCheckboxRender",
          "901:     renderEdit: oldEditRender,",
          "902:     renderDefault: oldEditRender,",
          "903:     renderItemContent: oldItemRender",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07fe9c98eb7a26099c3c81bd328e729bffecbaa9",
      "candidate_info": {
        "commit_hash": "07fe9c98eb7a26099c3c81bd328e729bffecbaa9",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/07fe9c98eb7a26099c3c81bd328e729bffecbaa9",
        "files": [
          "package.json",
          "packages/keyboard/src/mixin.js",
          "packages/table/src/methods.js",
          "styles/pulldown.scss",
          "types/table.d.ts"
        ],
        "message": "\u4fee\u590d\u590d\u9009\u6846\u8303\u56f4\u9009\u62e9\u53ef\u4ee5\u9009\u4e2d\u5df2\u88ab\u7981\u7528\u7684\u95ee\u9898",
        "before_after_code_files": [
          "packages/keyboard/src/mixin.js||packages/keyboard/src/mixin.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "styles/pulldown.scss||styles/pulldown.scss",
          "types/table.d.ts||types/table.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/keyboard/src/mixin.js||packages/keyboard/src/mixin.js": [
          "File: packages/keyboard/src/mixin.js -> packages/keyboard/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:               })",
          "279:             } else {",
          "280:               this.setAllCheckboxRow(false)",
          "282:             }",
          "283:             triggerEvent('change', evnt)",
          "284:           }",
          "",
          "[Removed Lines]",
          "281:               this.setCheckboxRow(rangeRows, true)",
          "",
          "[Added Lines]",
          "281:               this.handleCheckedCheckboxRow(rangeRows, true, false)",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1409:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1410:     if (column) {",
          "1411:       const colWidth = XEUtils.toInteger(width)",
          "1412:       if (DomTools.isScale(width)) {",
          "1413:         const { tableBody } = this.$refs",
          "1414:         const tableBodyElem = tableBody ? tableBody.$el : null",
          "1415:         const bodyWidth = tableBodyElem ? tableBodyElem.clientWidth - 1 : 0",
          "1419:       }",
          "1420:     }",
          "1421:     return this.$nextTick()",
          "1422:   },",
          "",
          "[Removed Lines]",
          "1416:         column.renderWidth = Math.floor(colWidth * bodyWidth)",
          "1417:       } else {",
          "1418:         column.renderWidth = colWidth",
          "",
          "[Added Lines]",
          "1412:       let rdWidth = colWidth",
          "1417:         rdWidth = Math.floor(colWidth * bodyWidth)",
          "1419:       column.renderWidth = rdWidth",
          "1423:   getColumnWidth (fieldOrColumn) {",
          "1424:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1425:     if (column) {",
          "1426:       return column.renderWidth",
          "1427:     }",
          "1428:     return 0",
          "1429:   },",
          "",
          "---------------"
        ],
        "styles/pulldown.scss||styles/pulldown.scss": [
          "File: styles/pulldown.scss -> styles/pulldown.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     transition: transform .3s cubic-bezier(.23,1,.32,1), opacity .3s cubic-bezier(.23,1,.32,1);",
          "30:     transform-origin: center top;",
          "31:     backface-visibility: hidden;",
          "33:     &[placement=\"top\"] {",
          "34:       transform-origin: center bottom;",
          "35:     }",
          "",
          "[Removed Lines]",
          "32:     transform-style: preserve-3d;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "types/table.d.ts||types/table.d.ts": [
          "File: types/table.d.ts -> types/table.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "459:   showColumn(column: ColumnInfo): Promise<any>;",
          "",
          "[Removed Lines]",
          "460:   setColumnWidth(column: ColumnInfo, width: number | string): Promise<any>;",
          "",
          "[Added Lines]",
          "460:   setColumnWidth(column: ColumnInfo | string, width: number | string): Promise<any>;",
          "461:   getColumnWidth(column: ColumnInfo | string): number;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3491317aaeb0dcfba4087751886b8004d0aa4f74",
      "candidate_info": {
        "commit_hash": "3491317aaeb0dcfba4087751886b8004d0aa4f74",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/3491317aaeb0dcfba4087751886b8004d0aa4f74",
        "files": [
          "README.md",
          "examples/App.vue",
          "examples/i18n/lang/zh-CN.js",
          "examples/i18n/lang/zh-TC.js",
          "examples/views/table/advanced/MultiSort.vue",
          "examples/views/table/base/HTML.vue",
          "examples/views/table/base/Sort.vue",
          "package.json",
          "packages/edit/src/mixin.js",
          "packages/footer/src/footer.js",
          "packages/form/src/form-config-item.js",
          "packages/form/src/form-item.js",
          "packages/select/src/select.js",
          "packages/table/src/body.js",
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "types/table.d.ts",
          "types/v-x-e-table/renderer.d.ts"
        ],
        "message": "\u4fee\u590d\u6811\u5f62\u61d2\u52a0\u8f7d\u65e0\u6cd5\u6e32\u67d3\u95ee\u9898",
        "before_after_code_files": [
          "examples/App.vue||examples/App.vue",
          "examples/i18n/lang/zh-CN.js||examples/i18n/lang/zh-CN.js",
          "examples/i18n/lang/zh-TC.js||examples/i18n/lang/zh-TC.js",
          "examples/views/table/advanced/MultiSort.vue||examples/views/table/advanced/MultiSort.vue",
          "examples/views/table/base/HTML.vue||examples/views/table/base/HTML.vue",
          "examples/views/table/base/Sort.vue||examples/views/table/base/Sort.vue",
          "packages/edit/src/mixin.js||packages/edit/src/mixin.js",
          "packages/footer/src/footer.js||packages/footer/src/footer.js",
          "packages/form/src/form-config-item.js||packages/form/src/form-config-item.js",
          "packages/form/src/form-item.js||packages/form/src/form-item.js",
          "packages/select/src/select.js||packages/select/src/select.js",
          "packages/table/src/body.js||packages/table/src/body.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "types/table.d.ts||types/table.d.ts",
          "types/v-x-e-table/renderer.d.ts||types/v-x-e-table/renderer.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ],
          "candidate": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ]
        }
      },
      "candidate_diff": {
        "examples/App.vue||examples/App.vue": [
          "File: examples/App.vue -> examples/App.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:       <div class=\"left\">",
          "5:         <a href=\"/vxe-table/\">",
          "6:           <img src=\"/vxe-table/logo.png\" width=\"18\">",
          "17:         </a>",
          "18:       </div>",
          "19:       <div class=\"right\">",
          "",
          "[Removed Lines]",
          "7:           <span class=\"title\">vxe-table</span>",
          "8:         </a>",
          "9:         <a href='https://gitee.com/xuliangzhan_admin/vxe-table/stargazers'>",
          "10:           <img src='https://gitee.com/xuliangzhan_admin/vxe-table/badge/star.svg?theme=gvp' alt='star'>",
          "11:         </a>",
          "12:         <a href=\"https://github.com/x-extends/vxe-table/stargazers\">",
          "13:           <img src=\"https://img.shields.io/github/stars/xuliangzhan/vxe-table.svg\">",
          "14:         </a>",
          "15:         <a href=\"http://npm-stat.com/charts.html?package=vxe-table\">",
          "16:           <img src=\"https://img.shields.io/npm/dm/vxe-table.svg\">",
          "",
          "[Added Lines]",
          "7:           <span class=\"title\">\u8be5\u6587\u6863\u5df2\u5e9f\u5f03\uff0c\u5b98\u7f51\u6587\u6863\u5730\u5740\uff1a<a href=\"https://github.com/x-extends/vxe-table-docs\">https://github.com/x-extends/vxe-table-docs</a></span>",
          "",
          "---------------"
        ],
        "examples/i18n/lang/zh-CN.js||examples/i18n/lang/zh-CN.js": [
          "File: examples/i18n/lang/zh-CN.js -> examples/i18n/lang/zh-CN.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         customRadio: '\u81ea\u5b9a\u4e49\u5355\u9009\u6846',",
          "58:         sortIcon: '\u81ea\u5b9a\u4e49\u6392\u5e8f\u56fe\u6807',",
          "59:         customSort: '\u81ea\u5b9a\u4e49\u5217\u5934\u6392\u5e8f',",
          "61:         manualFilter: '\u7b5b\u9009\u9ad8\u7ea7\u7528\u6cd5',",
          "62:         filterIcon: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u56fe\u6807',",
          "63:         customFilter: '\u81ea\u5b9a\u4e49\u5217\u5934\u7b5b\u9009',",
          "",
          "[Removed Lines]",
          "60:         multiSort: '\u591a\u5b57\u6bb5\u7ec4\u5408\u6392\u5e8f',",
          "",
          "[Added Lines]",
          "60:         multiSort: '\u591a\u5b57\u6bb5\u6392\u5e8f',",
          "",
          "---------------"
        ],
        "examples/i18n/lang/zh-TC.js||examples/i18n/lang/zh-TC.js": [
          "File: examples/i18n/lang/zh-TC.js -> examples/i18n/lang/zh-TC.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:         customRadio: '\u81ea\u5b9a\u4e49\u5355\u9009\u6846',",
          "58:         sortIcon: '\u81ea\u5b9a\u4e49\u6392\u5e8f\u56fe\u6807',",
          "59:         customSort: '\u81ea\u5b9a\u4e49\u5217\u5934\u6392\u5e8f',",
          "61:         manualFilter: '\u7b5b\u9009\u9ad8\u7ea7\u7528\u6cd5',",
          "62:         filterIcon: '\u81ea\u5b9a\u4e49\u7b5b\u9009\u56fe\u6807',",
          "63:         customFilter: '\u81ea\u5b9a\u4e49\u5217\u5934\u7b5b\u9009',",
          "",
          "[Removed Lines]",
          "60:         multiSort: '\u591a\u5b57\u6bb5\u7ec4\u5408\u6392\u5e8f',",
          "",
          "[Added Lines]",
          "60:         multiSort: '\u591a\u5b57\u6bb5\u6392\u5e8f',",
          "",
          "---------------"
        ],
        "examples/views/table/advanced/MultiSort.vue||examples/views/table/advanced/MultiSort.vue": [
          "File: examples/views/table/advanced/MultiSort.vue -> examples/views/table/advanced/MultiSort.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <template>",
          "2:   <div>",
          "5:     <vxe-table",
          "6:       border",
          "",
          "[Removed Lines]",
          "3:     <p class=\"tip\">\u914d\u7f6e <table-api-link prop=\"multiple\"/> \u542f\u7528\u591a\u5b57\u6bb5\u7ec4\u5408\u6392\u5e8f\uff0c\u5982\u679c\u662f\u670d\u52a1\u7aef\u6392\u5e8f\uff0c\u53ea\u9700\u52a0\u4e0a <table-api-link prop=\"sort-config\"/>.<table-api-link prop=\"remote\"/> \u548c <table-api-link prop=\"sort-change\"/> \u4e8b\u4ef6\u5c31\u53ef\u4ee5\u5b9e\u73b0</p>",
          "",
          "[Added Lines]",
          "3:     <p class=\"tip\">\u914d\u7f6e <table-api-link prop=\"multiple\"/> \u542f\u7528\u591a\u5b57\u6bb5\u6392\u5e8f\uff0c\u5982\u679c\u662f\u670d\u52a1\u7aef\u6392\u5e8f\uff0c\u53ea\u9700\u52a0\u4e0a <table-api-link prop=\"sort-config\"/>.<table-api-link prop=\"remote\"/> \u548c <table-api-link prop=\"sort-change\"/> \u4e8b\u4ef6\u5c31\u53ef\u4ee5\u5b9e\u73b0</p>",
          "",
          "---------------"
        ],
        "examples/views/table/base/HTML.vue||examples/views/table/base/HTML.vue": [
          "File: examples/views/table/base/HTML.vue -> examples/views/table/base/HTML.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:     <vxe-table",
          "9:       border",
          "10:       :data=\"tableData\">",
          "11:       <vxe-column type=\"seq\" width=\"60\"></vxe-column>",
          "12:       <vxe-column field=\"name\" title=\"Name\" sortable></vxe-column>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10:       :column-config=\"{useKey: true}\"",
          "11:       :row-config=\"{useKey: true}\"",
          "",
          "---------------"
        ],
        "examples/views/table/base/Sort.vue||examples/views/table/base/Sort.vue": [
          "File: examples/views/table/base/Sort.vue -> examples/views/table/base/Sort.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:       <pre-code class=\"javascript\">{{ demoCodes[5] }}</pre-code>",
          "86:     </pre>",
          "90:     <vxe-table",
          "91:       border",
          "",
          "[Removed Lines]",
          "88:     <p class=\"tip\">\u914d\u7f6e <table-api-link prop=\"multiple\"/> \u542f\u7528\u591a\u5b57\u6bb5\u7ec4\u5408\u6392\u5e8f</p>",
          "",
          "[Added Lines]",
          "88:     <p class=\"tip\">\u914d\u7f6e <table-api-link prop=\"multiple\"/> \u542f\u7528\u591a\u5b57\u6bb5\u6392\u5e8f</p>",
          "",
          "---------------"
        ],
        "packages/edit/src/mixin.js||packages/edit/src/mixin.js": [
          "File: packages/edit/src/mixin.js -> packages/edit/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:       if (!XEUtils.isArray(records)) {",
          "65:         records = [records]",
          "66:       }",
          "68:       if (!row) {",
          "70:         if (treeConfig && transform) {",
          "",
          "[Removed Lines]",
          "67:       const newRecords = records.map(record => this.defineField(Object.assign({}, record)))",
          "",
          "[Added Lines]",
          "67:       const newRecords = this.defineField(records.map(record => Object.assign({}, record)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:           }",
          "159:         }",
          "160:       }",
          "162:       this.handleTableData(treeConfig && transform)",
          "163:       if (!(treeConfig && transform)) {",
          "164:         this.updateAfterDataIndex()",
          "165:       }",
          "166:       this.updateFooter()",
          "168:       this.checkSelectionStatus()",
          "169:       if (this.scrollYLoad) {",
          "170:         this.updateScrollYSpace()",
          "",
          "[Removed Lines]",
          "161:       editStore.insertList.unshift(...newRecords)",
          "167:       this.cacheRowMap()",
          "",
          "[Added Lines]",
          "161:       const { insertList, insertMaps } = editStore",
          "162:       newRecords.forEach(newRow => {",
          "163:         const rowid = getRowid(this, newRow)",
          "164:         insertMaps[rowid] = newRow",
          "165:       })",
          "166:       insertList.unshift(...newRecords)",
          "167:       this.cacheRowMap()",
          "168:       this.updateScrollYStatus()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:     _remove (rows) {",
          "189:       const { afterFullData, tableFullData, tableFullTreeData, treeConfig, mergeList, editStore, checkboxOpts, selection, isInsertByRow, treeOpts } = this",
          "190:       const { transform } = treeOpts",
          "192:       const { checkField } = checkboxOpts",
          "193:       let rest = []",
          "194:       if (!rows) {",
          "",
          "[Removed Lines]",
          "191:       const { actived, removeList, insertList } = editStore",
          "",
          "[Added Lines]",
          "197:       const { actived, removeList, insertList, insertMaps } = editStore",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "261:       }",
          "263:       rows.forEach(row => {",
          "264:         const iIndex = this.findRowIndexOf(insertList, row)",
          "265:         if (iIndex > -1) {",
          "266:           insertList.splice(iIndex, 1)",
          "267:         }",
          "268:       })",
          "269:       this.handleTableData(treeConfig && transform)",
          "270:       if (!(treeConfig && transform)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:         const rowid = getRowid(this, row)",
          "275:         delete insertMaps[rowid]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "328:     _getInsertRecords () {",
          "330:       const insertList = this.editStore.insertList",
          "331:       const insertRecords = []",
          "348:         }",
          "350:       return insertRecords",
          "351:     },",
          "",
          "[Removed Lines]",
          "329:       const { treeConfig, tableFullTreeData, tableFullData, treeOpts } = this",
          "332:       if (insertList.length) {",
          "334:         if (treeConfig && treeOpts.transform) {",
          "335:           insertList.forEach(row => {",
          "336:             const rowid = getRowid(this, row)",
          "337:             const matchObj = XEUtils.findTree(tableFullTreeData, item => rowid === getRowid(this, item), treeOpts)",
          "338:             if (matchObj) {",
          "339:               insertRecords.push(row)",
          "340:             }",
          "341:           })",
          "342:         } else {",
          "343:           insertList.forEach(row => {",
          "344:             if (tableFullData.indexOf(row) > -1) {",
          "345:               insertRecords.push(row)",
          "346:             }",
          "347:           })",
          "349:       }",
          "",
          "[Added Lines]",
          "337:       const { fullAllDataRowIdData } = this",
          "340:       insertList.forEach(row => {",
          "341:         const rowid = getRowid(this, row)",
          "342:         if (fullAllDataRowIdData[rowid]) {",
          "343:           insertRecords.push(row)",
          "345:       })",
          "",
          "---------------"
        ],
        "packages/footer/src/footer.js||packages/footer/src/footer.js": [
          "File: packages/footer/src/footer.js -> packages/footer/src/footer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:       overflowX,",
          "69:       scrollbarWidth,",
          "70:       tooltipOpts,",
          "72:     } = $xetable",
          "74:     if (fixedType) {",
          "76:         if (!mergeFooterList.length || !footerSpanMethod) {",
          "77:           tableColumn = fixedColumn",
          "78:         } else {",
          "",
          "[Removed Lines]",
          "71:       visibleColumn",
          "75:       if (scrollXLoad || allColumnFooterOverflow) {",
          "",
          "[Added Lines]",
          "71:       visibleColumn,",
          "72:       expandColumn",
          "77:       if (!expandColumn && (scrollXLoad || allColumnFooterOverflow)) {",
          "",
          "---------------"
        ],
        "packages/form/src/form-config-item.js||packages/form/src/form-config-item.js": [
          "File: packages/form/src/form-config-item.js -> packages/form/src/form-config-item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     const { slots, title, folding, visible, field, collapseNode, itemRender, showError, errRule, className, titleOverflow, children } = item",
          "32:     const compConf = isEnableConf(itemRender) ? VXETable.renderer.get(itemRender.name) : null",
          "33:     const itemClassName = compConf ? compConf.itemClassName : ''",
          "34:     const span = item.span || $xeform.span",
          "35:     const align = item.align || $xeform.align",
          "36:     const titleAlign = XEUtils.eqNull(item.titleAlign) ? allTitleAlign : item.titleAlign",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     const itemStyle = compConf ? compConf.itemStyle : null",
          "35:     const itemContentClassName = compConf ? compConf.itemContentClassName : ''",
          "36:     const itemContentStyle = compConf ? compConf.itemContentStyle : null",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:           'is--active': isActivetem($xeform, item),",
          "101:           'is--error': showError",
          "102:         }",
          "104:     }, [",
          "105:       h('div', {",
          "106:         class: 'vxe-form--item-inner'",
          "",
          "[Removed Lines]",
          "103:       ]",
          "",
          "[Added Lines]",
          "106:       ],",
          "107:       style: XEUtils.isFunction(itemStyle) ? itemStyle(params) : itemStyle",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:           on: ons",
          "119:         }, renderTitle(h, $xeform, item)) : null,",
          "120:         h('div', {",
          "122:         }, contentVNs.concat(",
          "123:           [",
          "124:             collapseNode ? h('div', {",
          "",
          "[Removed Lines]",
          "121:           class: ['vxe-form--item-content', align ? `align--${align}` : null]",
          "",
          "[Added Lines]",
          "125:           class: ['vxe-form--item-content', align ? `align--${align}` : '', itemContentClassName ? (XEUtils.isFunction(itemContentClassName) ? itemContentClassName(params) : itemContentClassName) : ''],",
          "126:           style: XEUtils.isFunction(itemContentStyle) ? itemContentStyle(params) : itemContentStyle",
          "",
          "---------------"
        ],
        "packages/form/src/form-item.js||packages/form/src/form-item.js": [
          "File: packages/form/src/form-item.js -> packages/form/src/form-item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   const { title, folding, visible, field, collapseNode, itemRender, showError, errRule, className, titleOverflow } = item",
          "56:   const compConf = isEnableConf(itemRender) ? VXETable.renderer.get(itemRender.name) : null",
          "57:   const itemClassName = compConf ? compConf.itemClassName : ''",
          "58:   const span = item.span || _vm.span",
          "59:   const align = item.align || _vm.align",
          "60:   const titleAlign = XEUtils.eqNull(item.titleAlign) ? allTitleAlign : item.titleAlign",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   const itemStyle = compConf ? compConf.itemStyle : null",
          "59:   const itemContentClassName = compConf ? compConf.itemContentClassName : ''",
          "60:   const itemContentStyle = compConf ? compConf.itemContentStyle : null",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         'is--active': isActivetem(_vm, item),",
          "110:         'is--error': showError",
          "111:       }",
          "113:   }, [",
          "114:     h('div', {",
          "115:       class: 'vxe-form--item-inner'",
          "",
          "[Removed Lines]",
          "112:     ]",
          "",
          "[Added Lines]",
          "115:     ],",
          "116:     style: XEUtils.isFunction(itemStyle) ? itemStyle(params) : itemStyle",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:         on: ons",
          "128:       }, renderTitle(h, _vm, item)) : null,",
          "129:       h('div', {",
          "131:       }, contentVNs.concat(",
          "132:         [",
          "133:           collapseNode ? h('div', {",
          "",
          "[Removed Lines]",
          "130:         class: ['vxe-form--item-content', align ? `align--${align}` : null]",
          "",
          "[Added Lines]",
          "134:         class: ['vxe-form--item-content', align ? `align--${align}` : '', itemContentClassName ? (XEUtils.isFunction(itemContentClassName) ? itemContentClassName(params) : itemContentClassName) : ''],",
          "135:         style: XEUtils.isFunction(itemContentStyle) ? itemContentStyle(params) : itemContentStyle",
          "",
          "---------------"
        ],
        "packages/select/src/select.js||packages/select/src/select.js": [
          "File: packages/select/src/select.js -> packages/select/src/select.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "706:         })",
          "707:       }",
          "708:     },",
          "710:       if (!this.disabled) {",
          "711:         this.isActivated = true",
          "712:       }",
          "713:     },",
          "715:       this.isActivated = false",
          "716:     },",
          "717:     modelSearchEvent (value) {",
          "718:       this.searchValue = value",
          "",
          "[Removed Lines]",
          "709:     focusEvent () {",
          "714:     blurEvent () {",
          "",
          "[Added Lines]",
          "709:     focusEvent (evnt) {",
          "713:       this.$emit('focus', { $event: evnt })",
          "715:     blurEvent (evnt) {",
          "717:       this.$emit('blur', { $event: evnt })",
          "",
          "---------------"
        ],
        "packages/table/src/body.js||packages/table/src/body.js": [
          "File: packages/table/src/body.js -> packages/table/src/body.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:   const { height: rowHeight } = rowOpts",
          "94:   const renderOpts = editRender || cellRender",
          "95:   const compConf = renderOpts ? VXETable.renderer.get(renderOpts.name) : null",
          "97:   const showAllTip = tooltipOpts.showAll || tooltipOpts.enabled",
          "98:   const columnIndex = $xetable.getColumnIndex(column)",
          "99:   const _columnIndex = $xetable.getVTColumnIndex(column)",
          "",
          "[Removed Lines]",
          "96:   const cellClassName = compConf ? compConf.cellClassName : ''",
          "",
          "[Added Lines]",
          "96:   const compCellClassName = compConf ? compConf.cellClassName : ''",
          "97:   const compCellStyle = compConf ? compConf.cellStyle : ''",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275:         'col--valid-error': hasValidError,",
          "276:         'col--current': currentColumn === column",
          "277:       },",
          "279:       UtilTools.getClass(className, params),",
          "280:       UtilTools.getClass(allCellClassName, params)",
          "281:     ],",
          "",
          "[Removed Lines]",
          "278:       UtilTools.getClass(cellClassName, params),",
          "",
          "[Added Lines]",
          "279:       UtilTools.getClass(compCellClassName, params),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "283:     attrs,",
          "284:     style: Object.assign({",
          "285:       height: hasEllipsis && (scrollYRHeight || rowHeight) ? `${scrollYRHeight || rowHeight}px` : ''",
          "287:     on: tdOns",
          "288:   }, tdVNs)",
          "289: }",
          "",
          "[Removed Lines]",
          "286:     }, cellStyle ? (XEUtils.isFunction(cellStyle) ? cellStyle(params) : cellStyle) : null),",
          "",
          "[Added Lines]",
          "287:     }, XEUtils.isFunction(compCellStyle) ? compCellStyle(params) : compCellStyle, XEUtils.isFunction(cellStyle) ? cellStyle(params) : cellStyle),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "303:     editOpts,",
          "304:     treeExpandeds,",
          "305:     scrollYLoad,",
          "307:     rowExpandeds,",
          "308:     radioOpts,",
          "309:     checkboxOpts,",
          "",
          "[Removed Lines]",
          "306:     editStore,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "348:     let isNewRow = false",
          "349:     if (editConfig) {",
          "351:     }",
          "352:     if (treeConfig && !scrollYLoad && !treeOpts.transform && treeExpandeds.length) {",
          "353:       rowChildren = row[treeOpts.children]",
          "",
          "[Removed Lines]",
          "350:       isNewRow = editStore.insertList.indexOf(row) > -1",
          "",
          "[Added Lines]",
          "350:       isNewRow = $xetable.isInsertByRow(row)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:   },",
          "521:   render (h) {",
          "522:     const { _e, $parent: $xetable, fixedColumn, fixedType } = this",
          "525:     if (fixedType) {",
          "527:         if (!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts.isMerge)) {",
          "528:           tableColumn = fixedColumn",
          "529:         } else {",
          "",
          "[Removed Lines]",
          "523:     let { $scopedSlots, tId, tableData, tableColumn, visibleColumn, showOverflow: allColumnOverflow, keyboardConfig, keyboardOpts, mergeList, spanMethod, scrollXLoad, scrollYLoad, isAllOverflow, emptyOpts, mouseConfig, mouseOpts, sYOpts } = $xetable",
          "526:       if (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow)) {",
          "",
          "[Added Lines]",
          "523:     let { $scopedSlots, tId, tableData, tableColumn, visibleColumn, expandColumn, showOverflow: allColumnOverflow, keyboardConfig, keyboardOpts, mergeList, spanMethod, scrollXLoad, scrollYLoad, isAllOverflow, emptyOpts, mouseConfig, mouseOpts, sYOpts } = $xetable",
          "527:       if (!expandColumn && (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow))) {",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:   updateScrollYStatus (fullData) {",
          "344:     const { treeConfig, treeOpts, sYOpts } = this",
          "345:     const { transform } = treeOpts",
          "348:     this.scrollYLoad = scrollYLoad",
          "349:     return scrollYLoad",
          "350:   },",
          "",
          "[Removed Lines]",
          "347:     const scrollYLoad = (transform || !treeConfig) && !!sYOpts.enabled && sYOpts.gt > -1 && (sYOpts.gt === 0 || sYOpts.gt <= fullData.length)",
          "",
          "[Added Lines]",
          "346:     const allList = fullData || this.tableFullData",
          "348:     const scrollYLoad = (transform || !treeConfig) && !!sYOpts.enabled && sYOpts.gt > -1 && (sYOpts.gt === 0 || sYOpts.gt <= allList.length)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397:     scrollXStore.startIndex = 0",
          "398:     scrollXStore.endIndex = 1",
          "399:     editStore.insertList = []",
          "400:     editStore.removeList = []",
          "401:     const sYLoad = this.updateScrollYStatus(fullData)",
          "402:     this.scrollYLoad = sYLoad",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:     editStore.insertMaps = {}",
          "403:     editStore.removeMaps = {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "656:   cacheColumnMap () {",
          "658:     const fullColumnIdData = this.fullColumnIdData = {}",
          "659:     const fullColumnFieldData = this.fullColumnFieldData = {}",
          "660:     const isGroup = collectColumn.some(hasChildrenList)",
          "",
          "[Removed Lines]",
          "657:     const { tableFullColumn, collectColumn, fullColumnMap, showOverflow } = this",
          "",
          "[Added Lines]",
          "660:     const { tableFullColumn, collectColumn, fullColumnMap, showOverflow, columnOpts, rowOpts } = this",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "663:     let treeNodeColumn",
          "664:     let checkboxColumn",
          "665:     let radioColumn",
          "666:     let hasFixed",
          "667:     const handleFunc = (column, index, items, path, parent) => {",
          "668:       const { id: colid, field, fixed, type, treeNode } = column",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "669:     let htmlColumn",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "675:         }",
          "676:         fullColumnFieldData[field] = rest",
          "677:       }",
          "678:       if (!hasFixed && fixed) {",
          "679:         hasFixed = fixed",
          "680:       }",
          "681:       if (treeNode) {",
          "682:         if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "683:           if (treeNodeColumn) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:       if (!htmlColumn && type === 'html') {",
          "687:         htmlColumn = column",
          "688:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "725:           warnLog('vxe.error.errConflicts', [`table.show-footer-overflow=${this.showFooterOverflow}`, `column.show-footer-overflow=${column.showFooterOverflow}`])",
          "726:         }",
          "727:       }",
          "728:       if (isAllOverflow && column.showOverflow === false) {",
          "729:         isAllOverflow = false",
          "730:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "739:         if (htmlColumn) {",
          "740:           if (!columnOpts.useKey) {",
          "741:             errLog('vxe.error.reqProp', ['column-config.useKey', 'column.type=html'])",
          "742:           }",
          "743:           if (!rowOpts.useKey) {",
          "744:             errLog('vxe.error.reqProp', ['row-config.useKey', 'column.type=html'])",
          "745:           }",
          "746:         }",
          "747:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "879:   },",
          "885:     const { radioOpts, checkboxOpts, treeConfig, treeOpts, expandOpts } = this",
          "886:     const rowkey = getRowkey(this)",
          "897:           }",
          "898:         }",
          "900:       }",
          "906:       }",
          "907:     })",
          "916:   },",
          "",
          "[Removed Lines]",
          "884:   defineField (record) {",
          "887:     this.tableFullColumn.forEach(column => {",
          "888:       const { field, editRender } = column",
          "889:       if (field && !XEUtils.has(record, field)) {",
          "890:         let cellValue = null",
          "891:         if (editRender) {",
          "892:           const { defaultValue } = editRender",
          "893:           if (XEUtils.isFunction(defaultValue)) {",
          "894:             cellValue = defaultValue({ column })",
          "895:           } else if (!XEUtils.isUndefined(defaultValue)) {",
          "896:             cellValue = defaultValue",
          "899:         XEUtils.set(record, field, cellValue)",
          "901:     })",
          "902:     const otherFields = [radioOpts.labelField, checkboxOpts.checkField, checkboxOpts.labelField, expandOpts.labelField]",
          "903:     otherFields.forEach((key) => {",
          "904:       if (key && eqEmptyValue(XEUtils.get(record, key))) {",
          "905:         XEUtils.set(record, key, null)",
          "908:     if (treeConfig && treeOpts.lazy && XEUtils.isUndefined(record[treeOpts.children])) {",
          "909:       record[treeOpts.children] = null",
          "910:     }",
          "912:     if (eqEmptyValue(XEUtils.get(record, rowkey))) {",
          "913:       XEUtils.set(record, rowkey, getRowUniqueId())",
          "914:     }",
          "915:     return record",
          "",
          "[Added Lines]",
          "905:   defineField (records) {",
          "908:     if (!XEUtils.isArray(records)) {",
          "909:       records = [records || {}]",
          "910:     }",
          "911:     return records.map(record => {",
          "912:       this.tableFullColumn.forEach(column => {",
          "913:         const { field, editRender } = column",
          "914:         if (field && !XEUtils.has(record, field)) {",
          "915:           let cellValue = null",
          "916:           if (editRender) {",
          "917:             const { defaultValue } = editRender",
          "918:             if (XEUtils.isFunction(defaultValue)) {",
          "919:               cellValue = defaultValue({ column })",
          "920:             } else if (!XEUtils.isUndefined(defaultValue)) {",
          "921:               cellValue = defaultValue",
          "922:             }",
          "924:           XEUtils.set(record, field, cellValue)",
          "926:       })",
          "927:       const otherFields = [radioOpts.labelField, checkboxOpts.checkField, checkboxOpts.labelField, expandOpts.labelField]",
          "928:       otherFields.forEach((key) => {",
          "929:         if (key && eqEmptyValue(XEUtils.get(record, key))) {",
          "930:           XEUtils.set(record, key, null)",
          "931:         }",
          "932:       })",
          "933:       if (treeConfig && treeOpts.lazy && XEUtils.isUndefined(record[treeOpts.children])) {",
          "934:         record[treeOpts.children] = null",
          "937:       if (eqEmptyValue(XEUtils.get(record, rowkey))) {",
          "938:         XEUtils.set(record, rowkey, getRowUniqueId())",
          "940:       return record",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "922:   createData (records) {",
          "927:   },",
          "",
          "[Removed Lines]",
          "923:     const { treeConfig, treeOpts } = this",
          "924:     const handleRrecord = record => this.defineField(Object.assign({}, record))",
          "925:     const rows = treeConfig ? XEUtils.mapTree(records, handleRrecord, treeOpts) : records.map(handleRrecord)",
          "926:     return this.$nextTick().then(() => rows)",
          "",
          "[Added Lines]",
          "949:     return this.$nextTick().then(() => {",
          "950:       return this.defineField(records)",
          "951:     })",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "935:     if (!isArr) {",
          "936:       records = [records]",
          "937:     }",
          "939:   },",
          "",
          "[Removed Lines]",
          "938:     return this.$nextTick().then(() => this.createData(records).then(rows => isArr ? rows : rows[0]))",
          "",
          "[Added Lines]",
          "963:     return this.createData(records).then(rows => isArr ? rows : rows[0])",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1019:   isInsertByRow (row) {",
          "1021:   },",
          "",
          "[Removed Lines]",
          "1020:     return this.editStore.insertList.indexOf(row) > -1",
          "",
          "[Added Lines]",
          "1045:     const { editStore } = this",
          "1046:     const rowid = getRowid(this, row)",
          "1047:     return editStore.insertList.length && editStore.insertMaps[rowid]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2046:           if (fixedType) {",
          "2048:               if (!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts.isMerge)) {",
          "2049:                 renderColumnList = fixedColumn",
          "2050:               } else {",
          "",
          "[Removed Lines]",
          "2047:             if (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow)) {",
          "",
          "[Added Lines]",
          "2075:             if (!this.expandColumn && (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow))) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2072:           if (fixedType) {",
          "2074:               if (!mergeFooterList.length || !footerSpanMethod) {",
          "2075:                 renderColumnList = fixedColumn",
          "2076:               } else {",
          "",
          "[Removed Lines]",
          "2073:             if (scrollXLoad || allColumnFooterOverflow) {",
          "",
          "[Added Lines]",
          "2102:             if (!this.expandColumn && (scrollXLoad || allColumnFooterOverflow)) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3725:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "3726:     if (column) {",
          "3727:       return column.filters && column.filters.some(option => option.checked)",
          "3728:     }",
          "3729:     return this.getCheckedFilters().length > 0",
          "3730:   },",
          "",
          "[Removed Lines]",
          "3724:   isFilter (fieldOrColumn) {",
          "",
          "[Added Lines]",
          "3753:   isActiveFilterByColumn (fieldOrColumn) {",
          "3761:   isFilter (fieldOrColumn) {",
          "3762:     return this.isActiveFilterByColumn(fieldOrColumn)",
          "3763:   },",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:           column: null",
          "395:         },",
          "396:         insertList: [],",
          "398:       },",
          "400:       tooltipStore: {",
          "",
          "[Removed Lines]",
          "397:         removeList: []",
          "",
          "[Added Lines]",
          "397:         insertMaps: {},",
          "398:         removeList: [],",
          "399:         removeMaps: {}",
          "",
          "---------------"
        ],
        "types/table.d.ts||types/table.d.ts": [
          "File: types/table.d.ts -> types/table.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "632:   isFilter(column: ColumnInfo): boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "633:   isActiveFilterByColumn(column: ColumnInfo): boolean;",
          "",
          "---------------"
        ],
        "types/v-x-e-table/renderer.d.ts||types/v-x-e-table/renderer.d.ts": [
          "File: types/v-x-e-table/renderer.d.ts -> types/v-x-e-table/renderer.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { Table } from '../table'",
          "4: import { Grid } from '../grid'",
          "5: import { ColumnInfo, ColumnCellRenderOptions, ColumnContentRenderOptions } from '../column'",
          "",
          "[Removed Lines]",
          "1: import { CreateElement, VNode } from 'vue'",
          "2: import { SlotVNodeType, RowInfo } from '../component'",
          "",
          "[Added Lines]",
          "1: import { CreateElement } from 'vue'",
          "2: import { SlotVNodeType, RowInfo, VNodeStyle } from '../component'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   cellClassName?: string | ((params: ColumnCellRenderParams | ColumnEditRenderParams) => string | { [key: string]: boolean })",
          "46:   renderHeader?(h: CreateElement, renderOpts: ColumnCellRenderOptions | ColumnEditRenderOptions, params: ColumnCellRenderParams | ColumnEditRenderParams): SlotVNodeType | SlotVNodeType[];",
          "47:   renderDefault?(h: CreateElement, renderOpts: ColumnCellRenderOptions | ColumnEditRenderOptions, params: ColumnCellRenderParams | ColumnEditRenderParams): SlotVNodeType | SlotVNodeType[];",
          "48:   renderFooter?(h: CreateElement, renderOpts: ColumnCellRenderOptions | ColumnEditRenderOptions, params: ColumnFooterRenderParams): SlotVNodeType | SlotVNodeType[];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   cellStyle?: string | VNodeStyle | ((params: ColumnCellRenderParams | ColumnEditRenderParams) => string | VNodeStyle)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:   itemClassName?: string | ((params: FormItemRenderParams) => string | { [key: string]: boolean })",
          "66:   renderItemTitle?(h: CreateElement, renderOpts: FormItemRenderOptions, params: FormItemRenderParams): SlotVNodeType | SlotVNodeType[];",
          "67:   renderItemContent?(h: CreateElement, renderOpts: FormItemRenderOptions, params: FormItemRenderParams): SlotVNodeType | SlotVNodeType[];",
          "68:   itemVisibleMethod?(params: FormItemVisibleParams): boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:   itemStyle?: string | VNodeStyle | ((params: FormItemRenderParams) => string | VNodeStyle)",
          "68:   itemContentClassName?: string | ((params: FormItemRenderParams) => string | { [key: string]: boolean })",
          "69:   itemContentStyle?: string | VNodeStyle | ((params: FormItemRenderParams) => string | VNodeStyle)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179: export class EmptyRenderParams extends TableRenderParams { }",
          "",
          "[Removed Lines]",
          "181: export interface ColumnDefaultSlotParams extends ColumnCellRenderParams { }",
          "182: export interface ColumnContentSlotParams extends ColumnContentRenderParams { }",
          "183: export interface ColumnIconSlotParams extends ColumnIconRenderParams { }",
          "185: export interface ColumnContentRenderParams extends ColumnCellRenderParams { }",
          "186: export interface ColumnIconRenderParams extends ColumnCellRenderParams { }",
          "",
          "[Added Lines]",
          "185: export type ColumnDefaultSlotParams = ColumnCellRenderParams",
          "186: export type ColumnContentSlotParams = ColumnContentRenderParams",
          "187: export type ColumnIconSlotParams = ColumnIconRenderParams",
          "189: export type ColumnContentRenderParams = ColumnCellRenderParams",
          "190: export type ColumnIconRenderParams = ColumnCellRenderParams",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "996a7427532089d7d9aa1291664cd7a4f8d48656",
      "candidate_info": {
        "commit_hash": "996a7427532089d7d9aa1291664cd7a4f8d48656",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/996a7427532089d7d9aa1291664cd7a4f8d48656",
        "files": [
          "examples/style/layout.scss",
          "examples/views/input/Input.vue",
          "package.json",
          "packages/all.js",
          "packages/custom/src/panel.js",
          "packages/input/src/input.js",
          "packages/tools/dom.js",
          "packages/v-x-e-table/index.js",
          "packages/v-x-e-table/src/config.js",
          "packages/v-x-e-table/src/theme.js",
          "styles/export.scss",
          "styles/table.scss"
        ],
        "message": "fix input \u4fee\u590d\u5b9a\u4f4d\u95ee\u9898 #2383",
        "before_after_code_files": [
          "examples/style/layout.scss||examples/style/layout.scss",
          "examples/views/input/Input.vue||examples/views/input/Input.vue",
          "packages/all.js||packages/all.js",
          "packages/custom/src/panel.js||packages/custom/src/panel.js",
          "packages/input/src/input.js||packages/input/src/input.js",
          "packages/tools/dom.js||packages/tools/dom.js",
          "packages/v-x-e-table/index.js||packages/v-x-e-table/index.js",
          "packages/v-x-e-table/src/config.js||packages/v-x-e-table/src/config.js",
          "packages/v-x-e-table/src/theme.js||packages/v-x-e-table/src/theme.js",
          "styles/export.scss||styles/export.scss",
          "styles/table.scss||styles/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/style/layout.scss||examples/style/layout.scss": [
          "File: examples/style/layout.scss -> examples/style/layout.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: body,",
          "50: #app {",
          "51:   height: 100%;",
          "53: }",
          "54: #app {",
          "55:   display: flex;",
          "",
          "[Removed Lines]",
          "52:   overflow: hidden;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:   display: flex;",
          "217:   flex-grow: 1;",
          "218:   border-bottom: 1px solid #dcdfe6;",
          "220:   > .aside {",
          "221:     position: relative;",
          "222:     display: flex;",
          "",
          "[Removed Lines]",
          "219:   overflow: hidden;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "examples/views/input/Input.vue||examples/views/input/Input.vue": [
          "File: examples/views/input/Input.vue -> examples/views/input/Input.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:       </vxe-input>",
          "96:     </p>",
          "98:     <pre>",
          "99:       <pre-code>",
          "100:         | Tab | \u5207\u6362\u5230\u4e0a\u4e00\u4e2a |",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: <p>",
          "99:   <vxe-input v-model=\"value603\" placeholder=\"\u65e5\u671f\u9009\u62e9\" type=\"date\" transfer></vxe-input>",
          "100: </p>",
          "",
          "---------------"
        ],
        "packages/all.js||packages/all.js": [
          "File: packages/all.js -> packages/all.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import XEUtils from 'xe-utils'",
          "2: import { VXETable } from './v-x-e-table'",
          "4: import { Filter } from './filter'",
          "5: import { Menu } from './menu'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import { setTheme } from './v-x-e-table/src/theme'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: export function install (Vue, options) {",
          "85:   if (XEUtils.isPlainObject(options)) {",
          "86:     VXETable.config(options)",
          "87:   }",
          "88:   components.map(component => component.install(Vue))",
          "89: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     setTheme(options)",
          "",
          "---------------"
        ],
        "packages/custom/src/panel.js||packages/custom/src/panel.js": [
          "File: packages/custom/src/panel.js -> packages/custom/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import UtilTools from '../../tools/utils'",
          "2: import DomTools from '../../tools/dom'",
          "3: import GlobalConfig from '../../v-x-e-table/src/conf'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import VXETable from '../../v-x-e-table'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:       $xetable.emitCustomEvent('reset', evnt)",
          "458:     },",
          "459:     resetPopupCustomEvent  (evnt) {",
          "461:     },",
          "462:     handleOptionCheck (column) {",
          "463:       const { $xetable } = this",
          "",
          "[Removed Lines]",
          "460:       this.resetCustomEvent(evnt)",
          "",
          "[Added Lines]",
          "461:       if (VXETable.modal) {",
          "462:         VXETable.modal.confirm({",
          "463:           content: GlobalConfig.i18n('vxe.custom.cstmConfirmRestore'),",
          "464:           className: 'vxe-table--ignore-clear',",
          "465:           escClosable: true",
          "466:         }).then(type => {",
          "467:           if (type === 'confirm') {",
          "468:             this.resetCustomEvent(evnt)",
          "469:           }",
          "470:         })",
          "471:       } else {",
          "472:         this.resetCustomEvent(evnt)",
          "473:       }",
          "",
          "---------------"
        ],
        "packages/input/src/input.js||packages/input/src/input.js": [
          "File: packages/input/src/input.js -> packages/input/src/input.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1995:           }",
          "1996:           const { boundingTop, boundingLeft, visibleHeight, visibleWidth } = DomTools.getAbsolutePos(targetElem)",
          "1997:           let panelPlacement = 'bottom'",
          "1998:           if (transfer) {",
          "1999:             let left = boundingLeft",
          "2000:             let top = boundingTop + targetHeight",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1998:           console.log(DomTools.getAbsolutePos(targetElem))",
          "",
          "---------------"
        ],
        "packages/tools/dom.js||packages/tools/dom.js": [
          "File: packages/tools/dom.js -> packages/tools/dom.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     return getNodeOffset(elem, container, { left: 0, top: 0 })",
          "134:   },",
          "135:   getAbsolutePos (elem) {",
          "138:     const bounding = elem.getBoundingClientRect()",
          "141:     const { scrollTop, scrollLeft, visibleHeight, visibleWidth } = getDomNode()",
          "142:     return { boundingTop, top: scrollTop + boundingTop, boundingLeft, left: scrollLeft + boundingLeft, visibleHeight, visibleWidth }",
          "143:   },",
          "",
          "[Removed Lines]",
          "137:     const bodyBounding = document.body.getBoundingClientRect()",
          "139:     const boundingTop = bounding.top - bodyBounding.top",
          "140:     const boundingLeft = bounding.left - bodyBounding.left",
          "",
          "[Added Lines]",
          "137:     const boundingTop = bounding.top",
          "138:     const boundingLeft = bounding.left",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/index.js||packages/v-x-e-table/index.js": [
          "File: packages/v-x-e-table/index.js -> packages/v-x-e-table/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import { formats } from './src/formats'",
          "8: import { validators } from './src/validators'",
          "9: import { config } from './src/config'",
          "10: import { UtilTools } from '../tools/utils'",
          "11: import { errLog } from '../tools/log'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import { setTheme } from './src/theme'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   globalConfs",
          "115: }",
          "117: export * from './src/interceptor'",
          "118: export * from './src/renderer'",
          "119: export * from './src/commands'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: setTheme(globalStore)",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/config.js||packages/v-x-e-table/src/config.js": [
          "File: packages/v-x-e-table/src/config.js -> packages/v-x-e-table/src/config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import GlobalConfig from './conf'",
          "2: import DomZIndex from 'dom-zindex'",
          "3: import XEUtils from 'xe-utils'",
          "8: export function config (options) {",
          "11:   }",
          "12:   return XEUtils.merge(GlobalConfig, options)",
          "13: }",
          "",
          "[Removed Lines]",
          "9:   if (options && options.zIndex) {",
          "10:     DomZIndex.setCurrent(options.zIndex)",
          "",
          "[Added Lines]",
          "4: import { setTheme } from './theme'",
          "10:   if (options) {",
          "11:     setTheme(options)",
          "12:     if (options.zIndex) {",
          "13:       DomZIndex.setCurrent(options.zIndex)",
          "14:     }",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/theme.js||packages/v-x-e-table/src/theme.js": [
          "File: packages/v-x-e-table/src/theme.js -> packages/v-x-e-table/src/theme.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import GlobalConfig from '../../v-x-e-table/src/conf'",
          "3: export function setTheme (options) {",
          "4:   const theme = (options ? options.theme : null) || GlobalConfig.theme || 'default'",
          "5:   if (typeof document !== 'undefined') {",
          "6:     const documentElement = document.documentElement",
          "7:     if (documentElement) {",
          "8:       documentElement.setAttribute('data-vxe-table-theme', theme)",
          "9:     }",
          "10:   }",
          "11: }",
          "",
          "---------------"
        ],
        "styles/export.scss||styles/export.scss": [
          "File: styles/export.scss -> styles/export.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:     outline: 0;",
          "104:     border-radius: $vxe-border-radius;",
          "105:     background-color: $vxe-input-background-color;",
          "106:     user-select: none;",
          "107:     cursor: pointer;",
          "108:     &:focus {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     color: inherit;",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   border: 0;",
          "34: }",
          "36: .vxe-table--body-wrapper {",
          "37:   scroll-behavior: auto;",
          "38: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: .vxe-table--render-wrapper {",
          "37:   background-color: $vxe-table-body-background-color;",
          "38: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "610:       user-select: none;",
          "611:     }",
          "612:   }",
          "613:   .vxe-header--column,",
          "614:   .vxe-body--column,",
          "615:   .vxe-footer--column {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616:   &.drag--range {",
          "617:     .vxe-cell--checkbox {",
          "618:       user-select: none;",
          "619:     }",
          "620:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4ed13eed0f25fcff264c1774d70ab5ce9dfb946",
      "candidate_info": {
        "commit_hash": "b4ed13eed0f25fcff264c1774d70ab5ce9dfb946",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/b4ed13eed0f25fcff264c1774d70ab5ce9dfb946",
        "files": [
          "package.json",
          "packages/table/src/methods.ts"
        ],
        "message": "releases 3.9.2",
        "before_after_code_files": [
          "packages/table/src/methods.ts||packages/table/src/methods.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "916:   getRowSeq (row: any) {",
          "918:     if (row) {",
          "919:       const rowid = getRowid(this, row)",
          "921:       if (rest) {",
          "922:         return rest.seq",
          "923:       }",
          "",
          "[Removed Lines]",
          "917:     const { fullDataRowIdData } = this",
          "920:       const rest = fullDataRowIdData[rowid]",
          "",
          "[Added Lines]",
          "917:     const { fullAllDataRowIdData } = this",
          "920:       const rest = fullAllDataRowIdData[rowid]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "931:   getRowIndex (row: any) {",
          "933:   },",
          "938:   getVTRowIndex (row: any) {",
          "940:   },",
          "942:   _getRowIndex (row: any) {",
          "",
          "[Removed Lines]",
          "932:     return this.fullDataRowMap.has(row) ? this.fullDataRowMap.get(row).index : -1",
          "939:     return this.afterFullData.indexOf(row)",
          "",
          "[Added Lines]",
          "932:     const { fullAllDataRowIdData } = this",
          "933:     if (row) {",
          "934:       const rowid = getRowid(this, row)",
          "935:       const rest = fullAllDataRowIdData[rowid]",
          "936:       if (rest) {",
          "937:         return rest.index",
          "938:       }",
          "939:     }",
          "940:     return -1",
          "947:     const { fullAllDataRowIdData } = this",
          "948:     if (row) {",
          "949:       const rowid = getRowid(this, row)",
          "950:       const rest = fullAllDataRowIdData[rowid]",
          "951:       if (rest) {",
          "952:         return rest._index",
          "953:       }",
          "954:     }",
          "955:     return -1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "952:   getVMRowIndex (row: any) {",
          "954:   },",
          "956:   $getRowIndex (row: any) {",
          "",
          "[Removed Lines]",
          "953:     return this.tableData.indexOf(row)",
          "",
          "[Added Lines]",
          "969:     const { fullAllDataRowIdData } = this",
          "970:     if (row) {",
          "971:       const rowid = getRowid(this, row)",
          "972:       const rest = fullAllDataRowIdData[rowid]",
          "973:       if (rest) {",
          "974:         return rest.$index",
          "975:       }",
          "976:     }",
          "977:     return -1",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "966:   getColumnIndex (column: any) {",
          "968:   },",
          "973:   getVTColumnIndex (column: any) {",
          "975:   },",
          "977:   _getColumnIndex (column: any) {",
          "",
          "[Removed Lines]",
          "967:     return this.fullColumnMap.has(column) ? this.fullColumnMap.get(column).index : -1",
          "974:     return this.visibleColumn.indexOf(column)",
          "",
          "[Added Lines]",
          "991:     const { fullColumnIdData } = this",
          "992:     if (column) {",
          "993:       const rest = fullColumnIdData[column.id]",
          "994:       if (rest) {",
          "995:         return rest.index",
          "996:       }",
          "997:     }",
          "998:     return -1",
          "1005:     const { fullColumnIdData } = this",
          "1006:     if (column) {",
          "1007:       const rest = fullColumnIdData[column.id]",
          "1008:       if (rest) {",
          "1009:         return rest._index",
          "1010:       }",
          "1011:     }",
          "1012:     return -1",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "987:   getVMColumnIndex (column: any) {",
          "989:   },",
          "991:   $getColumnIndex (column: any) {",
          "",
          "[Removed Lines]",
          "988:     return this.tableColumn.indexOf(column)",
          "",
          "[Added Lines]",
          "1026:     const { fullColumnIdData } = this",
          "1027:     if (column) {",
          "1028:       const rest = fullColumnIdData[column.id]",
          "1029:       if (rest) {",
          "1030:         return rest.$index",
          "1031:       }",
          "1032:     }",
          "1033:     return -1",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2151:               })",
          "2152:             } else {",
          "2153:               const labelEl = cellEl.firstChild as HTMLElement",
          "2155:             }",
          "2156:             if (titleWidth) {",
          "2157:               colWidth = Math.max(colWidth, Math.ceil(titleWidth) + 4)",
          "",
          "[Removed Lines]",
          "2154:               titleWidth = labelEl.offsetWidth",
          "",
          "[Added Lines]",
          "2199:               if (labelEl) {",
          "2200:                 titleWidth = labelEl.offsetWidth",
          "2201:               }",
          "",
          "---------------"
        ]
      }
    }
  ]
}