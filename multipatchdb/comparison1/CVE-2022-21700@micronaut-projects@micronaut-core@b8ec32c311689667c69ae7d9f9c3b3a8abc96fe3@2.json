{
  "cve_id": "CVE-2022-21700",
  "cve_desc": "Micronaut is a JVM-based, full stack Java framework designed for building JVM web applications with support for Java, Kotlin and the Groovy language. In affected versions sending an invalid Content Type header leads to memory leak in DefaultArgumentConversionContext as this type is erroneously used in static state. ### Impact Sending an invalid Content Type header leads to memory leak in `DefaultArgumentConversionContext` as this type is erroneously used in static state. ### Patches The problem is patched in Micronaut 3.2.7 and above. ### Workarounds The default content type binder can be replaced in an existing Micronaut application to mitigate the issue: ```java package example; import java.util.List; import io.micronaut.context.annotation.Replaces; import io.micronaut.core.convert.ConversionService; import io.micronaut.http.MediaType; import io.micronaut.http.bind.DefaultRequestBinderRegistry; import io.micronaut.http.bind.binders.RequestArgumentBinder; import jakarta.inject.Singleton; @Singleton @Replaces(DefaultRequestBinderRegistry.class) class FixedRequestBinderRegistry extends DefaultRequestBinderRegistry { public FixedRequestBinderRegistry(ConversionService conversionService, List<RequestArgumentBinder> binders) { super(conversionService, binders); } @Override protected void registerDefaultConverters(ConversionService<?> conversionService) { super.registerDefaultConverters(conversionService); conversionService.addConverter(CharSequence.class, MediaType.class, charSequence -> { try { return MediaType.of(charSequence); } catch (IllegalArgumentException e) { return null; } }); } } ``` ### References Commit that introduced the vulnerability https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3 ### For more information If you have any questions or comments about this advisory: * Open an issue in [Micronaut Core](https://github.com/micronaut-projects/micronaut-core/issues) * Email us at [info@micronaut.io](mailto:info@micronaut.io)",
  "repo": "micronaut-projects/micronaut-core",
  "patch_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
  "patch_info": {
    "commit_hash": "b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
    "repo": "micronaut-projects/micronaut-core",
    "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3",
    "files": [
      "core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "core/src/main/java/io/micronaut/core/type/Argument.java",
      "core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "http/src/main/java/io/micronaut/http/MediaType.java",
      "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java"
    ],
    "message": "Use ConversionContext constants where possible instead of class (#2356)\n\nChanges\n-------\n * Added ArgumentConversionContext constants in ConversionContext\n * Replaced Argument.of and use of argument classes with\nConversionContext constants where possible\n * Added getFirst method in ConvertibleMultiValues that accepts\nArgumentConversionContent parameter\n\nPartially addresses issue #2355",
    "before_after_code_files": [
      "core/src/main/java/io/micronaut/core/convert/ConversionContext.java||core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java||core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java",
      "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java",
      "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java||session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/io/micronaut/core/convert/ConversionContext.java||core/src/main/java/io/micronaut/core/convert/ConversionContext.java": [
      "File: core/src/main/java/io/micronaut/core/convert/ConversionContext.java -> core/src/main/java/io/micronaut/core/convert/ConversionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "41:     ConversionContext DEFAULT = new ConversionContext() {",
      "42:     };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:     ArgumentConversionContext<Boolean> BOOLEAN = ConversionContext.of(Argument.BOOLEAN);",
      "52:     ArgumentConversionContext<Integer> INT = ConversionContext.of(Argument.INT);",
      "57:     ArgumentConversionContext<Long> LONG = ConversionContext.of(Argument.LONG);",
      "62:     ArgumentConversionContext<String> STRING = ConversionContext.of(Argument.STRING);",
      "67:     ArgumentConversionContext<List<String>> LIST_OF_STRING = ConversionContext.of(Argument.LIST_OF_STRING);",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java||core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java": [
      "File: core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java -> core/src/main/java/io/micronaut/core/convert/DefaultArgumentConversionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import io.micronaut.core.type.Argument;",
      "21: import java.nio.charset.Charset;",
      "",
      "[Removed Lines]",
      "22: import java.util.ArrayList;",
      "23: import java.util.Collections;",
      "24: import java.util.Iterator;",
      "25: import java.util.List;",
      "26: import java.util.Locale;",
      "27: import java.util.Map;",
      "28: import java.util.Optional;",
      "",
      "[Added Lines]",
      "22: import java.util.*;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "114:         return argument;",
      "115:     }",
      "117:     @Override",
      "118:     public String toString() {",
      "119:         return argument.toString();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:     @Override",
      "112:     public boolean equals(Object o) {",
      "113:         if (this == o) {",
      "114:             return true;",
      "115:         }",
      "116:         if (o == null || getClass() != o.getClass()) {",
      "117:             return false;",
      "118:         }",
      "119:         DefaultArgumentConversionContext<?> that = (DefaultArgumentConversionContext<?>) o;",
      "120:         return Objects.equals(getArgument(), that.getArgument()) &&",
      "121:             Objects.equals(finalLocale, that.finalLocale) &&",
      "122:             Objects.equals(finalCharset, that.finalCharset);",
      "123:     }",
      "125:     @Override",
      "126:     public int hashCode() {",
      "127:         return Objects.hash(argument, finalLocale, finalCharset);",
      "128:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java": [
      "File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java -> core/src/main/java/io/micronaut/core/convert/value/ConvertibleMultiValues.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.core.convert.value;",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "19: import io.micronaut.core.convert.ConversionService;",
      "20: import io.micronaut.core.reflect.GenericTypeUtils;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ArgumentConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "170:         return Optional.empty();",
      "171:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:     default <T> Optional<T> getFirst(CharSequence name, ArgumentConversionContext<T> conversionContext) {",
      "183:         V v = get(name);",
      "184:         if (v != null) {",
      "185:             return ConversionService.SHARED.convert(v, conversionContext);",
      "186:         }",
      "187:         return Optional.empty();",
      "188:     }",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java||core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java": [
      "File: core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java -> core/src/main/java/io/micronaut/core/convert/value/ConvertibleValues.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "72:     default boolean contains(String name) {",
      "74:     }",
      "",
      "[Removed Lines]",
      "73:         return get(name, Object.class).isPresent();",
      "",
      "[Added Lines]",
      "73:         return get(name, Argument.OBJECT_ARGUMENT).isPresent();",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/type/Argument.java||core/src/main/java/io/micronaut/core/type/Argument.java": [
      "File: core/src/main/java/io/micronaut/core/type/Argument.java -> core/src/main/java/io/micronaut/core/type/Argument.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: public interface Argument<T> extends TypeVariableResolver, AnnotatedElement, Type {",
      "46:     @SuppressWarnings(\"unused\")",
      "52:     @SuppressWarnings(\"unused\")",
      "58:     @SuppressWarnings(\"unused\")",
      "64:     @SuppressWarnings(\"unused\")",
      "70:     @SuppressWarnings(\"unused\")",
      "76:     @SuppressWarnings(\"unused\")",
      "82:     @SuppressWarnings(\"unused\")",
      "88:     @SuppressWarnings(\"unused\")",
      "94:     @SuppressWarnings(\"unused\")",
      "",
      "[Removed Lines]",
      "47:     Argument INT = Argument.of(int.class);",
      "53:     Argument LONG = Argument.of(long.class);",
      "59:     Argument FLOAT = Argument.of(float.class);",
      "65:     Argument DOUBLE = Argument.of(double.class);",
      "71:     Argument VOID = Argument.of(void.class);",
      "77:     Argument BYTE = Argument.of(byte.class);",
      "83:     Argument BOOLEAN = Argument.of(boolean.class);",
      "89:     Argument CHAR = Argument.of(char.class);",
      "95:     Argument SHORT = Argument.of(short.class);",
      "",
      "[Added Lines]",
      "46:     Argument<String> STRING = Argument.of(String.class);",
      "52:     Argument<Integer> INT = Argument.of(int.class);",
      "58:     Argument<Long> LONG = Argument.of(long.class);",
      "64:     Argument<Float> FLOAT = Argument.of(float.class);",
      "70:     Argument<Double> DOUBLE = Argument.of(double.class);",
      "76:     Argument<Void> VOID = Argument.of(void.class);",
      "82:     Argument<Byte> BYTE = Argument.of(byte.class);",
      "88:     Argument<Boolean> BOOLEAN = Argument.of(boolean.class);",
      "94:     Argument<Character> CHAR = Argument.of(char.class);",
      "100:     Argument<Short> SHORT = Argument.of(short.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "107:     @SuppressWarnings(\"unused\")",
      "108:     Argument<Object> OBJECT_ARGUMENT = of(Object.class);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "118:     Argument<List<String>> LIST_OF_STRING = Argument.listOf(String.class);",
      "",
      "---------------"
    ],
    "core/src/main/java/io/micronaut/core/type/DefaultArgument.java||core/src/main/java/io/micronaut/core/type/DefaultArgument.java": [
      "File: core/src/main/java/io/micronaut/core/type/DefaultArgument.java -> core/src/main/java/io/micronaut/core/type/DefaultArgument.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "49:     public DefaultArgument(Class<T> type, String name, AnnotationMetadata annotationMetadata, Argument... genericTypes) {",
      "55:     }",
      "",
      "[Removed Lines]",
      "50:         this.type = type;",
      "51:         this.name = name;",
      "52:         this.annotationMetadata = annotationMetadata != null ? annotationMetadata : AnnotationMetadata.EMPTY_METADATA;",
      "53:         this.typeParameters = initializeTypeParameters(genericTypes);",
      "54:         this.typeParameterArray = genericTypes;",
      "",
      "[Added Lines]",
      "50:         this(type, name, annotationMetadata, initializeTypeParameters(genericTypes), genericTypes);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "184:         return Objects.hash(type, name, typeParameters);",
      "185:     }",
      "188:         Map<String, Argument<?>> typeParameters;",
      "189:         if (genericTypes != null && genericTypes.length > 0) {",
      "190:             typeParameters = new LinkedHashMap<>(genericTypes.length);",
      "",
      "[Removed Lines]",
      "187:     private Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {",
      "",
      "[Added Lines]",
      "183:     private static Map<String, Argument<?>> initializeTypeParameters(Argument[] genericTypes) {",
      "",
      "---------------"
    ],
    "http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java||http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java": [
      "File: http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java -> http-client/src/main/java/io/micronaut/http/client/exceptions/HttpClientErrorDecoder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:         } else if (mediaType.equals(MediaType.APPLICATION_VND_ERROR_TYPE)) {",
      "72:             return Argument.of(VndError.class);",
      "73:         } else {",
      "75:         }",
      "76:     }",
      "77: }",
      "",
      "[Removed Lines]",
      "74:             return Argument.of(String.class);",
      "",
      "[Added Lines]",
      "74:             return Argument.STRING;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/RoutingInBoundHandler.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "141:     private static final Logger LOG = LoggerFactory.getLogger(RoutingInBoundHandler.class);",
      "142:     private static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(",
      "143:             \"^.*(?:connection.*(?:reset|closed|abort|broken)|broken.*pipe).*$\", Pattern.CASE_INSENSITIVE);",
      "145:     private final Router router;",
      "146:     private final ExecutorSelector executorSelector;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "144:     private static final Argument ARGUMENT_PART_DATA = Argument.of(PartData.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "769:                                 Argument typeVariable;",
      "771:                                 if (StreamingFileUpload.class.isAssignableFrom(argument.getType())) {",
      "773:                                 } else {",
      "774:                                     typeVariable = argument.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "775:                                 }",
      "",
      "[Removed Lines]",
      "772:                                     typeVariable = Argument.of(PartData.class);",
      "",
      "[Added Lines]",
      "773:                                     typeVariable = ARGUMENT_PART_DATA;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "784:                                 if (Publishers.isConvertibleToPublisher(typeVariableType)) {",
      "785:                                     boolean streamingFileUpload = StreamingFileUpload.class.isAssignableFrom(typeVariableType);",
      "786:                                     if (streamingFileUpload) {",
      "788:                                     } else {",
      "789:                                         typeVariable = typeVariable.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "790:                                     }",
      "",
      "[Removed Lines]",
      "787:                                         typeVariable = Argument.of(PartData.class);",
      "",
      "[Added Lines]",
      "788:                                         typeVariable = ARGUMENT_PART_DATA;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/CompletableFutureBodyBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "49: public class CompletableFutureBodyBinder extends DefaultBodyAnnotationBinder<CompletableFuture>",
      "50:     implements NonBlockingBodyArgumentBinder<CompletableFuture> {",
      "52:     private final BeanLocator beanLocator;",
      "53:     private final HttpServerConfiguration httpServerConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     private static final Argument<CompletableFuture> TYPE = Argument.of(CompletableFuture.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:     @Override",
      "67:     public Argument<CompletableFuture> argumentType() {",
      "69:     }",
      "71:     @Override",
      "",
      "[Removed Lines]",
      "68:         return Argument.of(CompletableFuture.class);",
      "",
      "[Added Lines]",
      "70:         return TYPE;",
      "",
      "---------------"
    ],
    "http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java||http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java": [
      "File: http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java -> http-server-netty/src/main/java/io/micronaut/http/server/netty/binders/PublisherBodyBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: public class PublisherBodyBinder extends DefaultBodyAnnotationBinder<Publisher> implements NonBlockingBodyArgumentBinder<Publisher> {",
      "56:     private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServer.class);",
      "58:     private final BeanLocator beanLocator;",
      "59:     private final HttpServerConfiguration httpServerConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57:     private static final Argument<Publisher> TYPE = Argument.of(Publisher.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72:     @Override",
      "73:     public Argument<Publisher> argumentType() {",
      "75:     }",
      "77:     @Override",
      "",
      "[Removed Lines]",
      "74:         return Argument.of(Publisher.class);",
      "",
      "[Added Lines]",
      "75:         return TYPE;",
      "",
      "---------------"
    ],
    "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy": [
      "File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy -> http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http.server.netty.cors",
      "18: import io.micronaut.core.type.Argument",
      "19: import io.micronaut.http.HttpHeaders",
      "20: import io.micronaut.http.HttpMethod",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ConversionContext",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "146:         2 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "147:         1 * request.getMethod() >> HttpMethod.GET",
      "148:         !result.isPresent()",
      "150:     }",
      "152:     void \"test preflight handleRequest with disallowed header\"() {",
      "",
      "[Removed Lines]",
      "149:         0 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String))",
      "",
      "[Added Lines]",
      "150:         0 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String)))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:         then: \"the request is rejected because bar is not allowed\"",
      "172:         2 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "175:         result.get().status == HttpStatus.FORBIDDEN",
      "176:     }",
      "",
      "[Removed Lines]",
      "173:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "174:         1 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> ['foo', 'bar']",
      "",
      "[Added Lines]",
      "174:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "175:         1 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> ['foo', 'bar']",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "197:         then: \"the request is successful\"",
      "198:         4 * headers.getOrigin() >> Optional.of('http://www.foo.com')",
      "201:         result.get().status == HttpStatus.OK",
      "202:     }",
      "",
      "[Removed Lines]",
      "199:         2 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "200:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['foo'])",
      "",
      "[Added Lines]",
      "200:         2 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "201:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['foo'])",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "274:         HttpResponse response = corsHandler.handleRequest(request).get()",
      "276:         then: \"the response is not modified\"",
      "279:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_METHODS) == 'GET'",
      "280:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_ORIGIN) == 'http://www.foo.com' // The origin is echo'd",
      "281:         response.getHeaders().get(VARY) == 'Origin' // The vary header is set",
      "",
      "[Removed Lines]",
      "277:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['X-Header', 'Y-Header'])",
      "278:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "",
      "[Added Lines]",
      "278:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['X-Header', 'Y-Header'])",
      "279:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "305:         HttpResponse response = corsHandler.handleRequest(request).get()",
      "307:         then: \"the response is not modified\"",
      "310:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_METHODS) == 'GET'",
      "311:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_ORIGIN) == 'http://www.foo.com' // The origin is echo'd",
      "312:         response.getHeaders().get(VARY) == 'Origin' // The vary header is set",
      "",
      "[Removed Lines]",
      "308:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['X-Header', 'Y-Header'])",
      "309:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
      "",
      "[Added Lines]",
      "309:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.of(Argument.of(List,String))) >> Optional.of(['X-Header', 'Y-Header'])",
      "310:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, ConversionContext.of(HttpMethod.class)) >> Optional.of(HttpMethod.GET)",
      "",
      "---------------"
    ],
    "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java": [
      "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: import static io.micronaut.http.HttpHeaders.VARY;",
      "29: import io.micronaut.core.async.publisher.Publishers;",
      "30: import io.micronaut.core.order.Ordered;",
      "32: import io.micronaut.core.util.StringUtils;",
      "33: import io.micronaut.http.HttpHeaders;",
      "34: import io.micronaut.http.HttpMethod;",
      "",
      "[Removed Lines]",
      "31: import io.micronaut.core.type.Argument;",
      "",
      "[Added Lines]",
      "30: import io.micronaut.core.convert.ArgumentConversionContext;",
      "31: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59: @Filter(\"/**\")",
      "60: public class CorsFilter implements HttpServerFilter {",
      "62:     protected final HttpServerConfiguration.CorsConfiguration corsConfiguration;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:     private static final ArgumentConversionContext<HttpMethod> CONVERSION_CONTEXT_HTTP_METHOD = ConversionContext.of(HttpMethod.class);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "108:                 CorsOriginConfiguration config = optionalConfig.get();",
      "110:                 if (CorsUtil.isPreflightRequest(request)) {",
      "112:                     setAllowMethods(result.get(), response);",
      "114:                     allowedHeaders.ifPresent(val ->",
      "115:                         setAllowHeaders(val, response)",
      "116:                     );",
      "",
      "[Removed Lines]",
      "111:                     Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class);",
      "113:                     Optional<List> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List.class, String.class));",
      "",
      "[Added Lines]",
      "114:                     Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, CONVERSION_CONTEXT_HTTP_METHOD);",
      "116:                     Optional<List<String>> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.LIST_OF_STRING);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "150:                 List<HttpMethod> allowedMethods = config.getAllowedMethods();",
      "152:                 if (!isAnyMethod(allowedMethods)) {",
      "154:                     if (allowedMethods.stream().noneMatch(method -> method.equals(methodToMatch))) {",
      "155:                         return Optional.of(HttpResponse.status(HttpStatus.FORBIDDEN));",
      "156:                     }",
      "157:                 }",
      "159:                 if (preflight) {",
      "162:                     List<String> allowedHeaders = config.getAllowedHeaders();",
      "",
      "[Removed Lines]",
      "153:                     HttpMethod methodToMatch = preflight ? headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class).orElse(requestMethod) : requestMethod;",
      "160:                     Optional<List<String>> accessControlHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.listOf(String.class));",
      "",
      "[Added Lines]",
      "156:                     HttpMethod methodToMatch = preflight ? headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, CONVERSION_CONTEXT_HTTP_METHOD).orElse(requestMethod) : requestMethod;",
      "163:                     Optional<List<String>> accessControlHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, ConversionContext.LIST_OF_STRING);",
      "",
      "---------------"
    ],
    "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java": [
      "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http.server.cors;",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "19: import io.micronaut.core.convert.TypeConverter;",
      "20: import io.micronaut.core.convert.value.ConvertibleValues;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ArgumentConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "23: import io.micronaut.http.HttpMethod;",
      "25: import javax.inject.Singleton;",
      "26: import java.util.Map;",
      "27: import java.util.Optional;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: import java.util.List;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "43:     private static final String ALLOW_CREDENTIALS = \"allowCredentials\";",
      "44:     private static final String MAX_AGE = \"maxAge\";",
      "46:     @Override",
      "47:     public Optional<CorsOriginConfiguration> convert(Object object, Class<CorsOriginConfiguration> targetType, ConversionContext context) {",
      "48:         CorsOriginConfiguration configuration = new CorsOriginConfiguration();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48:     private static final ArgumentConversionContext<List<HttpMethod>> CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD = ConversionContext.of(Argument.listOf(HttpMethod.class));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "51:             ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(mapConfig);",
      "53:             convertibleValues",
      "55:                 .ifPresent(configuration::setAllowedOrigins);",
      "57:             convertibleValues",
      "59:                 .ifPresent(configuration::setAllowedMethods);",
      "61:             convertibleValues",
      "63:                 .ifPresent(configuration::setAllowedHeaders);",
      "65:             convertibleValues",
      "67:                 .ifPresent(configuration::setExposedHeaders);",
      "69:             convertibleValues",
      "71:                 .ifPresent(configuration::setAllowCredentials);",
      "73:             convertibleValues",
      "75:                 .ifPresent(configuration::setMaxAge);",
      "76:         }",
      "77:         return Optional.of(configuration);",
      "",
      "[Removed Lines]",
      "54:                 .get(ALLOWED_ORIGINS, Argument.listOf(String.class))",
      "58:                 .get(ALLOWED_METHODS, Argument.listOf(HttpMethod.class))",
      "62:                 .get(ALLOWED_HEADERS, Argument.listOf(String.class))",
      "66:                 .get(EXPOSED_HEADERS, Argument.listOf(String.class))",
      "70:                 .get(ALLOW_CREDENTIALS, Boolean.class)",
      "74:                 .get(MAX_AGE, Long.class)",
      "",
      "[Added Lines]",
      "58:                 .get(ALLOWED_ORIGINS, ConversionContext.LIST_OF_STRING)",
      "62:                 .get(ALLOWED_METHODS, CONVERSION_CONTEXT_LIST_OF_HTTP_METHOD)",
      "66:                 .get(ALLOWED_HEADERS, ConversionContext.LIST_OF_STRING)",
      "70:                 .get(EXPOSED_HEADERS, ConversionContext.LIST_OF_STRING)",
      "74:                 .get(ALLOW_CREDENTIALS, ConversionContext.BOOLEAN)",
      "78:                 .get(MAX_AGE, ConversionContext.LONG)",
      "",
      "---------------"
    ],
    "http/src/main/java/io/micronaut/http/HttpHeaders.java||http/src/main/java/io/micronaut/http/HttpHeaders.java": [
      "File: http/src/main/java/io/micronaut/http/HttpHeaders.java -> http/src/main/java/io/micronaut/http/HttpHeaders.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http;",
      "18: import io.micronaut.core.convert.ConversionService;",
      "19: import io.micronaut.core.type.Headers;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "472:     default Optional<Integer> findInt(CharSequence name) {",
      "474:     }",
      "",
      "[Removed Lines]",
      "473:         return get(name, Integer.class);",
      "",
      "[Added Lines]",
      "474:         return get(name, ConversionContext.INT);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "482:     default Optional<String> findFirst(CharSequence name) {",
      "484:     }",
      "",
      "[Removed Lines]",
      "483:         return getFirst(name, String.class);",
      "",
      "[Added Lines]",
      "484:         return getFirst(name, ConversionContext.STRING);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "491:     default Optional<MediaType> contentType() {",
      "493:     }",
      "",
      "[Removed Lines]",
      "492:         return getFirst(HttpHeaders.CONTENT_TYPE, MediaType.class);",
      "",
      "[Added Lines]",
      "493:         return getFirst(HttpHeaders.CONTENT_TYPE, MediaType.CONVERSION_CONTEXT);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "500:     default OptionalLong contentLength() {",
      "502:         return optional.map(OptionalLong::of).orElseGet(OptionalLong::empty);",
      "503:     }",
      "",
      "[Removed Lines]",
      "501:         Optional<Long> optional = getFirst(HttpHeaders.CONTENT_LENGTH, Long.class);",
      "",
      "[Added Lines]",
      "502:         Optional<Long> optional = getFirst(HttpHeaders.CONTENT_LENGTH, ConversionContext.LONG);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "511:         return getAll(HttpHeaders.ACCEPT)",
      "512:             .stream()",
      "513:             .flatMap(x -> Arrays.stream(x.split(\",\")))",
      "515:             .distinct()",
      "516:             .collect(Collectors.toList());",
      "517:     }",
      "",
      "[Removed Lines]",
      "514:             .flatMap(s -> ConversionService.SHARED.convert(s, MediaType.class).map(Stream::of).orElse(Stream.empty()))",
      "",
      "[Added Lines]",
      "515:             .flatMap(s -> ConversionService.SHARED.convert(s, MediaType.CONVERSION_CONTEXT).map(Stream::of).orElse(Stream.empty()))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "522:     default boolean isKeepAlive() {",
      "524:     }",
      "",
      "[Removed Lines]",
      "523:         return getFirst(CONNECTION, String.class).map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
      "",
      "[Added Lines]",
      "524:         return getFirst(CONNECTION, ConversionContext.STRING).map(val -> val.equalsIgnoreCase(\"keep-alive\")).orElse(false);",
      "",
      "---------------"
    ],
    "http/src/main/java/io/micronaut/http/MediaType.java||http/src/main/java/io/micronaut/http/MediaType.java": [
      "File: http/src/main/java/io/micronaut/http/MediaType.java -> http/src/main/java/io/micronaut/http/MediaType.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "16: package io.micronaut.http;",
      "18: import io.micronaut.core.annotation.TypeHint;",
      "19: import io.micronaut.core.convert.ConversionService;",
      "20: import io.micronaut.core.naming.NameUtils;",
      "21: import io.micronaut.core.util.StringUtils;",
      "22: import io.micronaut.core.value.OptionalValues;",
      "23: import io.micronaut.http.annotation.Produces;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: import io.micronaut.core.annotation.Internal;",
      "20: import io.micronaut.core.convert.ArgumentConversionContext;",
      "21: import io.micronaut.core.convert.ConversionContext;",
      "24: import io.micronaut.core.type.Argument;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:     public static final String V_PARAMETER = \"v\";",
      "321:     private static final BigDecimal QUALITY_RATING_NUMBER = new BigDecimal(\"1.0\");",
      "322:     private static final String QUALITY_RATING = \"1.0\";",
      "323:     private static final String SEMICOLON = \";\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325:     @Internal",
      "326:     static final Argument<MediaType> ARGUMENT = Argument.of(MediaType.class);",
      "328:     @Internal",
      "329:     static final ArgumentConversionContext<MediaType> CONVERSION_CONTEXT = ConversionContext.of(ARGUMENT);",
      "",
      "---------------"
    ],
    "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java": [
      "File: runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java -> runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "259:             Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
      "260:             Object key = keyGenerator.generateKey(context, params);",
      "261:             CompletableFuture<Object> thisFuture = new CompletableFuture<>();",
      "263:             asyncCache.get(key, firstTypeVariable).whenComplete((BiConsumer<Optional<?>, Throwable>) (o, throwable) -> {",
      "264:                 if (throwable == null && o.isPresent()) {",
      "",
      "[Removed Lines]",
      "262:             Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));",
      "",
      "[Added Lines]",
      "262:             Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "503:         CacheKeyGenerator keyGenerator = resolveKeyGenerator(cacheOperation.defaultKeyGenerator, cacheable);",
      "504:         Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
      "505:         Object key = keyGenerator.generateKey(context, params);",
      "508:         Maybe<Object> maybe = Maybe.create(emitter -> {",
      "509:             asyncCache.get(key, firstTypeVariable).whenComplete((opt, throwable) -> {",
      "",
      "[Removed Lines]",
      "506:         Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));",
      "",
      "[Added Lines]",
      "506:         Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);",
      "",
      "---------------"
    ],
    "runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java||runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java": [
      "File: runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java -> runtime/src/main/java/io/micronaut/scheduling/io/watch/FileWatchCondition.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: import io.micronaut.context.condition.Condition;",
      "21: import io.micronaut.context.condition.ConditionContext;",
      "22: import io.micronaut.core.annotation.Introspected;",
      "24: import io.micronaut.core.util.CollectionUtils;",
      "26: import java.io.File;",
      "",
      "[Removed Lines]",
      "23: import io.micronaut.core.type.Argument;",
      "",
      "[Added Lines]",
      "23: import io.micronaut.core.convert.ConversionContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:         if (beanContext instanceof ApplicationContext) {",
      "41:             List<String> paths = ((ApplicationContext) beanContext)",
      "42:                     .getEnvironment()",
      "44:                     .orElse(null);",
      "46:             if (CollectionUtils.isNotEmpty(paths)) {",
      "",
      "[Removed Lines]",
      "43:                     .getProperty(FileWatchConfiguration.PATHS, Argument.listOf(String.class))",
      "",
      "[Added Lines]",
      "43:                     .getProperty(FileWatchConfiguration.PATHS, ConversionContext.LIST_OF_STRING)",
      "",
      "---------------"
    ],
    "session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java||session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java": [
      "File: session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java -> session/src/main/java/io/micronaut/session/binder/SessionArgumentBinder.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: @Requires(classes = HttpServerConfiguration.class)",
      "43: public class SessionArgumentBinder implements TypedRequestArgumentBinder<Session> {",
      "45:     private final SessionStore<Session> sessionStore;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45:     private static final Argument<Session> TYPE = Argument.of(Session.class);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56:     @Override",
      "57:     public Argument<Session> argumentType() {",
      "59:     }",
      "61:     @Override",
      "",
      "[Removed Lines]",
      "58:         return Argument.of(Session.class);",
      "",
      "[Added Lines]",
      "60:         return TYPE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0760f25045932f375043fd6bd2ee565e2c36012e",
      "candidate_info": {
        "commit_hash": "0760f25045932f375043fd6bd2ee565e2c36012e",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/0760f25045932f375043fd6bd2ee565e2c36012e",
        "files": [
          "core/src/main/java/io/micronaut/core/async/annotation/SingleResult.java",
          "http-client/src/test/groovy/io/micronaut/http/client/aop/cache/CachingRxJavaCrudSpec.groovy",
          "http/src/main/java/io/micronaut/http/annotation/Delete.java",
          "http/src/main/java/io/micronaut/http/annotation/Get.java",
          "http/src/main/java/io/micronaut/http/annotation/Patch.java",
          "http/src/main/java/io/micronaut/http/annotation/Post.java",
          "http/src/main/java/io/micronaut/http/annotation/Put.java",
          "runtime/src/main/java/io/micronaut/cache/exceptions/CacheSystemException.java",
          "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
          "runtime/src/main/java/io/micronaut/discovery/DiscoveryClient.java",
          "runtime/src/test/groovy/io/micronaut/cache/SyncCacheSpec.groovy"
        ],
        "message": "Improve handling of caching for reactive return types. Fixes #1023",
        "before_after_code_files": [
          "core/src/main/java/io/micronaut/core/async/annotation/SingleResult.java||core/src/main/java/io/micronaut/core/async/annotation/SingleResult.java",
          "http-client/src/test/groovy/io/micronaut/http/client/aop/cache/CachingRxJavaCrudSpec.groovy||http-client/src/test/groovy/io/micronaut/http/client/aop/cache/CachingRxJavaCrudSpec.groovy",
          "http/src/main/java/io/micronaut/http/annotation/Delete.java||http/src/main/java/io/micronaut/http/annotation/Delete.java",
          "http/src/main/java/io/micronaut/http/annotation/Get.java||http/src/main/java/io/micronaut/http/annotation/Get.java",
          "http/src/main/java/io/micronaut/http/annotation/Patch.java||http/src/main/java/io/micronaut/http/annotation/Patch.java",
          "http/src/main/java/io/micronaut/http/annotation/Post.java||http/src/main/java/io/micronaut/http/annotation/Post.java",
          "http/src/main/java/io/micronaut/http/annotation/Put.java||http/src/main/java/io/micronaut/http/annotation/Put.java",
          "runtime/src/main/java/io/micronaut/cache/exceptions/CacheSystemException.java||runtime/src/main/java/io/micronaut/cache/exceptions/CacheSystemException.java",
          "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
          "runtime/src/main/java/io/micronaut/discovery/DiscoveryClient.java||runtime/src/main/java/io/micronaut/discovery/DiscoveryClient.java",
          "runtime/src/test/groovy/io/micronaut/cache/SyncCacheSpec.groovy||runtime/src/test/groovy/io/micronaut/cache/SyncCacheSpec.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java"
          ],
          "candidate": [
            "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/io/micronaut/core/async/annotation/SingleResult.java||core/src/main/java/io/micronaut/core/async/annotation/SingleResult.java": [
          "File: core/src/main/java/io/micronaut/core/async/annotation/SingleResult.java -> core/src/main/java/io/micronaut/core/async/annotation/SingleResult.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package io.micronaut.core.async.annotation;",
          "19: import java.lang.annotation.Documented;",
          "20: import java.lang.annotation.ElementType;",
          "21: import java.lang.annotation.Retention;",
          "22: import java.lang.annotation.Target;",
          "24: import static java.lang.annotation.RetentionPolicy.RUNTIME;",
          "32: @Documented",
          "33: @Retention(RUNTIME)",
          "34: @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})",
          "35: public @interface SingleResult {",
          "41:     boolean value() default true;",
          "42: }",
          "",
          "---------------"
        ],
        "http-client/src/test/groovy/io/micronaut/http/client/aop/cache/CachingRxJavaCrudSpec.groovy||http-client/src/test/groovy/io/micronaut/http/client/aop/cache/CachingRxJavaCrudSpec.groovy": [
          "File: http-client/src/test/groovy/io/micronaut/http/client/aop/cache/CachingRxJavaCrudSpec.groovy -> http-client/src/test/groovy/io/micronaut/http/client/aop/cache/CachingRxJavaCrudSpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io.micronaut.http.client.aop.cache",
          "3: import io.micronaut.cache.annotation.CacheInvalidate",
          "4: import io.micronaut.cache.annotation.CachePut",
          "5: import io.micronaut.cache.annotation.Cacheable",
          "6: import io.micronaut.context.ApplicationContext",
          "7: import io.micronaut.http.HttpResponse",
          "8: import io.micronaut.http.HttpStatus",
          "9: import io.micronaut.http.annotation.Controller",
          "10: import io.micronaut.http.annotation.Delete",
          "11: import io.micronaut.http.annotation.Get",
          "12: import io.micronaut.http.annotation.Patch",
          "13: import io.micronaut.http.annotation.Post",
          "14: import io.micronaut.http.client.annotation.Client",
          "15: import io.micronaut.runtime.server.EmbeddedServer",
          "16: import io.reactivex.Maybe",
          "17: import io.reactivex.MaybeEmitter",
          "18: import io.reactivex.MaybeOnSubscribe",
          "19: import io.reactivex.Single",
          "20: import io.reactivex.annotations.NonNull",
          "21: import spock.lang.AutoCleanup",
          "22: import spock.lang.Shared",
          "23: import spock.lang.Specification",
          "25: import java.util.concurrent.atomic.AtomicInteger",
          "26: import java.util.concurrent.atomic.AtomicLong",
          "28: class CachingRxJavaCrudSpec extends Specification {",
          "30:     @Shared",
          "31:     @AutoCleanup",
          "32:     ApplicationContext context = ApplicationContext.run(",
          "33:             'micronaut.caches.books.maximum-size':20,",
          "34:             'micronaut.caches.book-list.maximum-size':20",
          "35:     )",
          "37:     @Shared",
          "38:     @AutoCleanup",
          "39:     EmbeddedServer embeddedServer = context.getBean(EmbeddedServer).start()",
          "41:     void \"test it is possible to implement CRUD operations with RxJava\"() {",
          "42:         given:",
          "43:         BookClient client = context.getBean(BookClient)",
          "44:         BookController bookController = context.getBean(BookController)",
          "46:         when:",
          "47:         Book book = client.get(99)",
          "48:                 .blockingGet()",
          "49:         List<Book> books = client.list().blockingGet()",
          "51:         then:",
          "52:         book == null",
          "53:         books.size() == 0",
          "55:         when:",
          "56:         book = client.save(\"The Stand\").blockingGet()",
          "58:         then:",
          "59:         book != null",
          "60:         book.title == \"The Stand\"",
          "61:         book.id == 1",
          "63:         when:",
          "64:         book = client.get(book.id).blockingGet()",
          "66:         then:",
          "67:         book != null",
          "68:         book.title == \"The Stand\"",
          "69:         book.id == 1",
          "70:         bookController.getInvocationCount.get() == 2",
          "73:         when:",
          "74:         book = client.get(book.id).blockingGet()",
          "76:         then:",
          "77:         book != null",
          "78:         book.title == \"The Stand\"",
          "79:         book.id == 1",
          "80:         bookController.getInvocationCount.get() == 2",
          "82:         when:'the full response is resolved'",
          "83:         HttpResponse<Book> bookAndResponse = client.getResponse(book.id).blockingGet()",
          "85:         then:\"The response is valid\"",
          "86:         bookAndResponse.status() == HttpStatus.OK",
          "87:         bookAndResponse.body().title == \"The Stand\"",
          "89:         when:",
          "90:         book = client.update(book.id, \"The Shining\").blockingGet()",
          "92:         then:",
          "93:         book != null",
          "94:         book.title == \"The Shining\"",
          "95:         book.id == 1",
          "97:         when:",
          "98:         book = client.get(book.id).blockingGet()",
          "100:         then:",
          "101:         book != null",
          "102:         book.title == \"The Shining\"",
          "103:         book.id == 1",
          "104:         bookController.getInvocationCount.get() == 3",
          "106:         when:",
          "107:         book = client.delete(book.id).blockingGet()",
          "109:         then:",
          "110:         book != null",
          "112:         when:",
          "113:         book = client.get(book.id)",
          "114:                 .blockingGet()",
          "115:         then:",
          "116:         book == null",
          "117:     }",
          "120:     @Client('/rxjava/caching/books')",
          "121:     static interface BookClient extends BookApi {",
          "122:     }",
          "124:     @Controller(\"/rxjava/caching/books\")",
          "125:     static class BookController implements BookApi {",
          "127:         Map<Long, Book> books = new LinkedHashMap<>()",
          "128:         AtomicLong currentId = new AtomicLong(0)",
          "129:         AtomicInteger getInvocationCount = new AtomicInteger()",
          "131:         @Override",
          "132:         Maybe<Book> get(Long id) {",
          "133:             Maybe.create(new MaybeOnSubscribe<Book>() {",
          "134:                 @Override",
          "135:                 void subscribe(@NonNull MaybeEmitter<Book> emitter) throws Exception {",
          "136:                     getInvocationCount.incrementAndGet()",
          "137:                     Book book = books.get(id)",
          "138:                     if(book) {",
          "139:                         emitter.onSuccess(book)",
          "140:                     } else {",
          "141:                         emitter.onComplete()",
          "142:                     }",
          "143:                 }",
          "144:             })",
          "145:         }",
          "147:         @Override",
          "148:         Single<HttpResponse<Book>> getResponse(Long id) {",
          "149:             Book book = books.get(id)",
          "150:             if(book) {",
          "151:                 return Single.just(HttpResponse.ok(book))",
          "152:             }",
          "153:             return Single.just(HttpResponse.notFound())",
          "154:         }",
          "156:         @Override",
          "157:         Single<List<Book>> list() {",
          "158:             return Single.just(books.values().toList())",
          "159:         }",
          "161:         @Override",
          "162:         Maybe<Book> delete(Long id) {",
          "163:             Book book = books.remove(id)",
          "164:             if(book) {",
          "165:                 return Maybe.just(book)",
          "166:             }",
          "167:             return Maybe.empty()",
          "168:         }",
          "170:         @Override",
          "171:         Single<Book> save(String title) {",
          "172:             Book book = new Book(title: title, id:currentId.incrementAndGet())",
          "173:             books[book.id] = book",
          "174:             return Single.just(book)",
          "175:         }",
          "177:         @Override",
          "178:         Maybe<Book> update(Long id, String title) {",
          "179:             Book book = books[id]",
          "180:             if(book != null) {",
          "181:                 book.title = title",
          "182:                 return Maybe.just(book)",
          "183:             }",
          "184:             else {",
          "185:                 return Maybe.empty()",
          "186:             }",
          "187:         }",
          "188:     }",
          "190:     static interface BookApi {",
          "192:         @Get(\"/{id}\")",
          "193:         @Cacheable(\"books\")",
          "194:         Maybe<Book> get(Long id)",
          "196:         @Get(\"/res/{id}\")",
          "197:         @Cacheable(\"books\")",
          "198:         Single<HttpResponse<Book>> getResponse(Long id)",
          "200:         @Get",
          "201:         @Cacheable(\"book-list\")",
          "202:         Single<List<Book>> list()",
          "204:         @Delete(\"/{id}\")",
          "205:         @CacheInvalidate(\"books\")",
          "206:         Maybe<Book> delete(Long id)",
          "208:         @Post",
          "209:         @CachePut(\"books\")",
          "210:         Single<Book> save(String title)",
          "212:         @Patch(\"/{id}\")",
          "213:         @CacheInvalidate(\"books\")",
          "214:         Maybe<Book> update(Long id, String title)",
          "215:     }",
          "218:     static class Book {",
          "219:         Long id",
          "220:         String title",
          "221:     }",
          "222: }",
          "",
          "---------------"
        ],
        "http/src/main/java/io/micronaut/http/annotation/Delete.java||http/src/main/java/io/micronaut/http/annotation/Delete.java": [
          "File: http/src/main/java/io/micronaut/http/annotation/Delete.java -> http/src/main/java/io/micronaut/http/annotation/Delete.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import static java.lang.annotation.RetentionPolicy.RUNTIME;",
          "21: import io.micronaut.context.annotation.AliasFor;",
          "23: import java.lang.annotation.Documented;",
          "24: import java.lang.annotation.ElementType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import io.micronaut.core.async.annotation.SingleResult;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     @AliasFor(annotation = Produces.class, member = \"single\")",
          "81:     @AliasFor(annotation = Consumes.class, member = \"single\")",
          "82:     boolean single() default false;",
          "84: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     @AliasFor(annotation = SingleResult.class, member = \"value\")",
          "",
          "---------------"
        ],
        "http/src/main/java/io/micronaut/http/annotation/Get.java||http/src/main/java/io/micronaut/http/annotation/Get.java": [
          "File: http/src/main/java/io/micronaut/http/annotation/Get.java -> http/src/main/java/io/micronaut/http/annotation/Get.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import static java.lang.annotation.RetentionPolicy.RUNTIME;",
          "21: import io.micronaut.context.annotation.AliasFor;",
          "23: import java.lang.annotation.Documented;",
          "24: import java.lang.annotation.ElementType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import io.micronaut.core.async.annotation.SingleResult;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     @AliasFor(annotation = Produces.class, member = \"single\")",
          "84:     @AliasFor(annotation = Consumes.class, member = \"single\")",
          "85:     boolean single() default false;",
          "87: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     @AliasFor(annotation = SingleResult.class, member = \"value\")",
          "",
          "---------------"
        ],
        "http/src/main/java/io/micronaut/http/annotation/Patch.java||http/src/main/java/io/micronaut/http/annotation/Patch.java": [
          "File: http/src/main/java/io/micronaut/http/annotation/Patch.java -> http/src/main/java/io/micronaut/http/annotation/Patch.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import static java.lang.annotation.RetentionPolicy.RUNTIME;",
          "21: import io.micronaut.context.annotation.AliasFor;",
          "23: import java.lang.annotation.Documented;",
          "24: import java.lang.annotation.ElementType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import io.micronaut.core.async.annotation.SingleResult;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     @AliasFor(annotation = Produces.class, member = \"single\")",
          "79:     @AliasFor(annotation = Consumes.class, member = \"single\")",
          "80:     boolean single() default false;",
          "82: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     @AliasFor(annotation = SingleResult.class, member = \"value\")",
          "",
          "---------------"
        ],
        "http/src/main/java/io/micronaut/http/annotation/Post.java||http/src/main/java/io/micronaut/http/annotation/Post.java": [
          "File: http/src/main/java/io/micronaut/http/annotation/Post.java -> http/src/main/java/io/micronaut/http/annotation/Post.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import static java.lang.annotation.RetentionPolicy.RUNTIME;",
          "21: import io.micronaut.context.annotation.AliasFor;",
          "23: import java.lang.annotation.Documented;",
          "24: import java.lang.annotation.ElementType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import io.micronaut.core.async.annotation.SingleResult;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     @AliasFor(annotation = Produces.class, member = \"single\")",
          "81:     @AliasFor(annotation = Consumes.class, member = \"single\")",
          "82:     boolean single() default false;",
          "84: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     @AliasFor(annotation = SingleResult.class, member = \"value\")",
          "",
          "---------------"
        ],
        "http/src/main/java/io/micronaut/http/annotation/Put.java||http/src/main/java/io/micronaut/http/annotation/Put.java": [
          "File: http/src/main/java/io/micronaut/http/annotation/Put.java -> http/src/main/java/io/micronaut/http/annotation/Put.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import static java.lang.annotation.RetentionPolicy.RUNTIME;",
          "21: import io.micronaut.context.annotation.AliasFor;",
          "23: import java.lang.annotation.Documented;",
          "24: import java.lang.annotation.ElementType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import io.micronaut.core.async.annotation.SingleResult;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     @AliasFor(annotation = Produces.class, member = \"single\")",
          "81:     @AliasFor(annotation = Consumes.class, member = \"single\")",
          "82:     boolean single() default false;",
          "83: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:     @AliasFor(annotation = SingleResult.class, member = \"value\")",
          "",
          "---------------"
        ],
        "runtime/src/main/java/io/micronaut/cache/exceptions/CacheSystemException.java||runtime/src/main/java/io/micronaut/cache/exceptions/CacheSystemException.java": [
          "File: runtime/src/main/java/io/micronaut/cache/exceptions/CacheSystemException.java -> runtime/src/main/java/io/micronaut/cache/exceptions/CacheSystemException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     public CacheSystemException(String message, Throwable cause) {",
          "41:         super(message, cause);",
          "42:     }",
          "43: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     public CacheSystemException(String message) {",
          "53:         super(message);",
          "54:     }",
          "",
          "---------------"
        ],
        "runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java||runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java": [
          "File: runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java -> runtime/src/main/java/io/micronaut/cache/interceptor/CacheInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import io.micronaut.aop.InterceptPhase;",
          "20: import io.micronaut.aop.MethodInterceptor;",
          "21: import io.micronaut.aop.MethodInvocationContext;",
          "27: import io.micronaut.cache.annotation.CacheConfig;",
          "28: import io.micronaut.cache.annotation.CacheInvalidate;",
          "29: import io.micronaut.cache.annotation.CachePut;",
          "",
          "[Removed Lines]",
          "22: import io.micronaut.cache.AsyncCache;",
          "23: import io.micronaut.cache.AsyncCacheErrorHandler;",
          "24: import io.micronaut.cache.CacheErrorHandler;",
          "25: import io.micronaut.cache.CacheManager;",
          "26: import io.micronaut.cache.SyncCache;",
          "",
          "[Added Lines]",
          "22: import io.micronaut.cache.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import io.micronaut.cache.exceptions.CacheSystemException;",
          "32: import io.micronaut.context.BeanContext;",
          "33: import io.micronaut.core.annotation.AnnotationValue;",
          "34: import io.micronaut.core.async.publisher.Publishers;",
          "38: import io.micronaut.core.reflect.InstantiationUtils;",
          "39: import io.micronaut.core.type.Argument;",
          "40: import io.micronaut.core.type.MutableArgumentValue;",
          "41: import io.micronaut.core.type.ReturnType;",
          "42: import io.micronaut.core.util.ArrayUtils;",
          "43: import io.micronaut.core.util.StringUtils;",
          "44: import io.micronaut.scheduling.TaskExecutors;",
          "45: import org.reactivestreams.Publisher;",
          "48: import org.slf4j.Logger;",
          "49: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "35: import io.micronaut.core.async.publisher.SingleSubscriberPublisher;",
          "36: import io.micronaut.core.convert.ConversionContext;",
          "37: import io.micronaut.core.convert.ConversionService;",
          "46: import org.reactivestreams.Subscriber;",
          "47: import org.reactivestreams.Subscription;",
          "",
          "[Added Lines]",
          "30: import io.micronaut.core.async.annotation.SingleResult;",
          "37: import io.micronaut.core.util.CollectionUtils;",
          "40: import io.reactivex.BackpressureStrategy;",
          "41: import io.reactivex.Flowable;",
          "42: import io.reactivex.FlowableEmitter;",
          "43: import io.reactivex.FlowableOnSubscribe;",
          "44: import io.reactivex.functions.Function;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:                 boolean async = cachePut.get(MEMBER_ASYNC, Boolean.class, false);",
          "214:                 if (async) {",
          "215:                     ioExecutor.submit(() ->",
          "217:                     );",
          "218:                 } else {",
          "219:                     processCachePut(context, wrapper, cachePut, cacheOperation);",
          "",
          "[Removed Lines]",
          "216:                         processCachePut(context, wrapper, cachePut, cacheOperation)",
          "",
          "[Added Lines]",
          "214:                             processCachePut(context, wrapper, cachePut, cacheOperation)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:                 boolean async = cacheInvalidate.get(MEMBER_ASYNC, Boolean.class, false);",
          "228:                 if (async) {",
          "229:                     ioExecutor.submit(() -> {",
          "234:                             }",
          "236:                     );",
          "237:                 } else {",
          "238:                     processCacheEvict(context, cacheInvalidate, cacheOperation, async);",
          "",
          "[Removed Lines]",
          "230:                             try {",
          "231:                                 processCacheEvict(context, cacheInvalidate, cacheOperation, async);",
          "232:                             } catch (Exception e) {",
          "233:                                 throw new CacheSystemException(\"Cache invalidate operation failed: \" + e.getMessage(), e);",
          "235:                         }",
          "",
          "[Added Lines]",
          "228:                                 try {",
          "229:                                     processCacheEvict(context, cacheInvalidate, cacheOperation, async);",
          "230:                                 } catch (Exception e) {",
          "231:                                     throw new CacheSystemException(\"Cache invalidate operation failed: \" + e.getMessage(), e);",
          "232:                                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "334:     }",
          "336:     private Object interceptPublisher(MethodInvocationContext<Object, Object> context, ReturnType returnTypeObject, Class returnType) {",
          "337:         CacheOperation cacheOperation = new CacheOperation(context, returnType);",
          "338:         AnnotationValue<Cacheable> cacheable = cacheOperation.cacheable;",
          "339:         if (cacheable != null) {",
          "345:             } else {",
          "347:             }",
          "350:         }",
          "351:     }",
          "374:                                     }",
          "378:                                     if (throwable != null) {",
          "383:                                     }",
          "397:                                             }",
          "411:                                             }",
          "425:                                     }",
          "426:                                 }",
          "427:                             });",
          "428:                         }",
          "429:                     }",
          "435:                         }",
          "436:                     }",
          "440:     }",
          "442:     private CompletableFuture<Object> processFuturePutOperations(MethodInvocationContext<Object, Object> context, CacheOperation cacheOperation, CompletableFuture<Object> returnFuture) {",
          "",
          "[Removed Lines]",
          "341:             SingleSubscriberPublisher<Object> publisher = buildPublisher(context, returnTypeObject, cacheOperation, cacheable);",
          "342:             Optional converted = ConversionService.SHARED.convert(publisher, ConversionContext.of(returnTypeObject.asArgument()));",
          "343:             if (converted.isPresent()) {",
          "344:                 return converted.get();",
          "346:                 throw new UnsupportedOperationException(\"Cannot convert publisher into target type: \" + returnType);",
          "348:         } else {",
          "349:             return context.proceed();",
          "353:     private SingleSubscriberPublisher<Object> buildPublisher(MethodInvocationContext<Object, Object> context, ReturnType returnTypeObject, CacheOperation cacheOperation, AnnotationValue<Cacheable> cacheable) {",
          "354:         return new SingleSubscriberPublisher<Object>() {",
          "356:             @Override",
          "357:             protected void doSubscribe(Subscriber<? super Object> subscriber) {",
          "358:                 subscriber.onSubscribe(new Subscription() {",
          "359:                     CompletableFuture future = null; // for cancellation",
          "361:                     @Override",
          "362:                     public void request(long n) {",
          "363:                         if (n > 0) {",
          "364:                             AsyncCache<?> asyncCache = cacheManager.getCache(cacheOperation.cacheableCacheName).async();",
          "365:                             CacheKeyGenerator keyGenerator = resolveKeyGenerator(cacheOperation.defaultKeyGenerator, cacheable);",
          "366:                             Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
          "367:                             Object key = keyGenerator.generateKey(context, params);",
          "368:                             Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));",
          "369:                             future = asyncCache.get(key, firstTypeVariable).whenComplete((BiConsumer<Optional<?>, Throwable>) (o, throwable) -> {",
          "370:                                 if (throwable == null && o.isPresent()) {",
          "372:                                     if (LOG.isDebugEnabled()) {",
          "373:                                         LOG.debug(\"Value found in cache [\" + asyncCache.getName() + \"] for invocation: \" + context);",
          "375:                                     subscriber.onNext(o.get());",
          "376:                                     subscriber.onComplete();",
          "377:                                 } else {",
          "379:                                         if (errorHandler.handleLoadError(asyncCache, key, asRuntimeException(throwable))) {",
          "380:                                             subscriber.onError(throwable);",
          "381:                                             return;",
          "382:                                         }",
          "385:                                     Publisher<?> actualPublisher = (Publisher) context.proceed();",
          "386:                                     if (actualPublisher == null) {",
          "388:                                         subscriber.onComplete();",
          "389:                                     } else {",
          "391:                                         actualPublisher.subscribe(new Subscriber<Object>() {",
          "392:                                             boolean hasData = false;",
          "394:                                             @Override",
          "395:                                             public void onSubscribe(Subscription s) {",
          "396:                                                 s.request(n);",
          "399:                                             @Override",
          "400:                                             public void onNext(Object o) {",
          "401:                                                 hasData = true;",
          "403:                                                 asyncCache.put(key, o).whenComplete((aBoolean, throwable1) -> {",
          "404:                                                     if (throwable1 == null) {",
          "405:                                                         subscriber.onNext(o);",
          "406:                                                         subscriber.onComplete();",
          "407:                                                     } else {",
          "408:                                                         subscriber.onError(throwable1);",
          "409:                                                     }",
          "410:                                                 });",
          "413:                                             @Override",
          "414:                                             public void onError(Throwable t) {",
          "415:                                                 subscriber.onError(t);",
          "416:                                             }",
          "418:                                             @Override",
          "419:                                             public void onComplete() {",
          "420:                                                 if (!hasData) {",
          "421:                                                     subscriber.onComplete();",
          "422:                                                 }",
          "423:                                             }",
          "424:                                         });",
          "431:                     @Override",
          "432:                     public void cancel() {",
          "433:                         if (future != null) {",
          "434:                             future.cancel(false);",
          "437:                 });",
          "438:             }",
          "439:         };",
          "",
          "[Added Lines]",
          "335:         if (!Publishers.isSingle(returnType) && !context.isAnnotationPresent(SingleResult.class)) {",
          "336:             throw new CacheSystemException(\"Only Reactive types that emit a single result can currently be cached. Use either Single, Maybe or Mono for operations that cache.\");",
          "337:         }",
          "342:             Publisher<Object> publisher = buildCacheablePublisher(context, returnTypeObject, cacheOperation, cacheable);",
          "343:             return Publishers.convertPublisher(publisher, returnType);",
          "344:         } else {",
          "345:             final List<AnnotationValue<CachePut>> putOperations = cacheOperation.putOperations;",
          "346:             if (CollectionUtils.isNotEmpty(putOperations)) {",
          "347:                 final Publisher<Object> publisher = buildCachePutPublisher(context, cacheOperation, putOperations);",
          "348:                 return Publishers.convertPublisher(publisher, returnType);",
          "350:                 final List<AnnotationValue<CacheInvalidate>> invalidateOperations = cacheOperation.invalidateOperations;",
          "351:                 if (CollectionUtils.isNotEmpty(invalidateOperations)) {",
          "352:                     final Publisher<Object> publisher = buildCacheInvalidatePublisher(context, cacheOperation, invalidateOperations);",
          "353:                     return Publishers.convertPublisher(publisher, returnType);",
          "354:                 } else {",
          "355:                     return context.proceed();",
          "356:                 }",
          "361:     private Publisher<Object> buildCacheInvalidatePublisher(",
          "362:             MethodInvocationContext<Object, Object> context,",
          "363:             CacheOperation cacheOperation,",
          "364:             List<AnnotationValue<CacheInvalidate>> invalidateOperations) {",
          "365:         final Flowable<Object> originalFlowable = Publishers.convertPublisher(context.proceed(), Flowable.class);",
          "367:         return originalFlowable.flatMap((o) -> {",
          "368:             List<Flowable<?>> cacheInvalidates = new ArrayList<>();",
          "369:             for (AnnotationValue<CacheInvalidate> invalidateOperation : invalidateOperations) {",
          "370:                 String[] cacheNames = cacheOperation.getCacheInvalidateNames(invalidateOperation);",
          "372:                 if (ArrayUtils.isNotEmpty(cacheNames)) {",
          "373:                     boolean invalidateAll = invalidateOperation.getRequiredValue(MEMBER_ALL, Boolean.class);",
          "374:                     boolean isAsync = invalidateOperation.get(MEMBER_ASYNC, Boolean.class, false);",
          "375:                     if (isAsync) {",
          "376:                         if (invalidateAll) {",
          "377:                             for (String cacheName : cacheNames) {",
          "378:                                 AsyncCache<?> asyncCache = cacheManager.getCache(cacheName).async();",
          "379:                                 asyncCache.invalidateAll().whenCompleteAsync((aBoolean, throwable) -> {",
          "380:                                     if (throwable != null) {",
          "381:                                         asyncCacheErrorHandler.handleInvalidateError(asyncCache, asRuntimeException(throwable));",
          "383:                                 }, ioExecutor);",
          "384:                             }",
          "385:                         } else {",
          "386:                             CacheKeyGenerator keyGenerator = cacheOperation.getCacheInvalidateKeyGenerator(invalidateOperation);",
          "387:                             String[] parameterNames = invalidateOperation.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY);",
          "388:                             Object[] parameterValues = resolveParams(context, parameterNames);",
          "389:                             Class<? extends CacheKeyGenerator> alternateKeyGen = invalidateOperation.get(MEMBER_KEY_GENERATOR, Class.class).orElse(null);",
          "390:                             if (alternateKeyGen != null && keyGenerator.getClass() != alternateKeyGen) {",
          "391:                                 keyGenerator = resolveKeyGenerator(alternateKeyGen);",
          "392:                             }",
          "393:                             Object key = keyGenerator.generateKey(context, parameterValues);",
          "394:                             for (String cacheName : cacheNames) {",
          "395:                                 AsyncCache<?> asyncCache = cacheManager.getCache(cacheName).async();",
          "396:                                 asyncCache.invalidate(key).whenCompleteAsync((aBoolean, throwable) -> {",
          "398:                                         asyncCacheErrorHandler.handleInvalidateError(asyncCache, asRuntimeException(throwable));",
          "400:                                 }, ioExecutor);",
          "401:                             }",
          "402:                         }",
          "403:                     } else {",
          "404:                         final Flowable<Boolean> cacheInvalidateFlowable = Flowable.create(new FlowableOnSubscribe<Boolean>() {",
          "405:                             @Override",
          "406:                             public void subscribe(FlowableEmitter<Boolean> emitter) throws Exception {",
          "407:                                 if (invalidateAll) {",
          "408:                                     final CompletableFuture<Void> allFutures = buildInvalidateAllFutures(cacheNames);",
          "409:                                     allFutures.whenCompleteAsync((aBoolean, throwable) -> {",
          "410:                                         if (throwable != null) {",
          "411:                                             SyncCache cache = cacheManager.getCache(cacheNames[0]);",
          "412:                                             if (asyncCacheErrorHandler.handleInvalidateError(cache, asRuntimeException(throwable))) {",
          "413:                                                 emitter.onError(throwable);",
          "414:                                                 return;",
          "416:                                         }",
          "417:                                         emitter.onNext(true);",
          "418:                                         emitter.onComplete();",
          "419:                                     }, ioExecutor);",
          "420:                                 } else {",
          "421:                                     CacheKeyGenerator keyGenerator = cacheOperation.getCacheInvalidateKeyGenerator(invalidateOperation);",
          "422:                                     String[] parameterNames = invalidateOperation.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY);",
          "423:                                     Object[] parameterValues = resolveParams(context, parameterNames);",
          "424:                                     Class<? extends CacheKeyGenerator> alternateKeyGen = invalidateOperation.get(MEMBER_KEY_GENERATOR, Class.class).orElse(null);",
          "425:                                     if (alternateKeyGen != null && keyGenerator.getClass() != alternateKeyGen) {",
          "426:                                         keyGenerator = resolveKeyGenerator(alternateKeyGen);",
          "427:                                     }",
          "428:                                     Object key = keyGenerator.generateKey(context, parameterValues);",
          "429:                                     final CompletableFuture<Void> allFutures = buildInvalidateFutures(cacheNames, key);",
          "430:                                     allFutures.whenCompleteAsync((aBoolean, throwable) -> {",
          "431:                                         if (throwable != null) {",
          "432:                                             SyncCache cache = cacheManager.getCache(cacheNames[0]);",
          "433:                                             if (asyncCacheErrorHandler.handleInvalidateError(cache,key, asRuntimeException(throwable))) {",
          "434:                                                 emitter.onError(throwable);",
          "435:                                                 return;",
          "437:                                         }",
          "438:                                         emitter.onNext(true);",
          "439:                                         emitter.onComplete();",
          "440:                                     }, ioExecutor);",
          "441:                                 }",
          "442:                             }",
          "443:                         }, BackpressureStrategy.ERROR);",
          "444:                         cacheInvalidates.add(cacheInvalidateFlowable);",
          "445:                     }",
          "446:                 }",
          "447:             }",
          "448:             if (!cacheInvalidates.isEmpty()) {",
          "449:                 return Flowable.concat(cacheInvalidates).toList().map(flowables -> Flowable.just(o)).toFlowable();",
          "450:             } else {",
          "451:                 return Flowable.just(o);",
          "452:             }",
          "453:         });",
          "454:     }",
          "456:     private Publisher<Object> buildCachePutPublisher(",
          "457:             MethodInvocationContext<Object, Object> context,",
          "458:             CacheOperation cacheOperation,",
          "459:             List<AnnotationValue<CachePut>> putOperations) {",
          "460:         final Flowable<?> originalFlowable = Publishers.convertPublisher(context.proceed(), Flowable.class);",
          "461:         return originalFlowable.flatMap((Function<Object, Publisher<?>>) o -> {",
          "462:             List<Flowable<?>> cachePuts = new ArrayList<>();",
          "463:             for (AnnotationValue<CachePut> putOperation : putOperations) {",
          "464:                 String[] cacheNames = cacheOperation.getCachePutNames(putOperation);",
          "466:                 if (ArrayUtils.isNotEmpty(cacheNames)) {",
          "467:                     boolean isAsync = putOperation.get(MEMBER_ASYNC, Boolean.class, false);",
          "468:                     if (isAsync) {",
          "469:                         putResultAsync(context, cacheOperation, putOperation, cacheNames, o);",
          "470:                     } else {",
          "471:                         final Flowable<Object> cachePutFlowable = Flowable.create(emitter -> {",
          "472:                             CacheKeyGenerator keyGenerator = cacheOperation.getCachePutKeyGenerator(putOperation);",
          "473:                             Object[] parameterValues = resolveParams(context, putOperation.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
          "474:                             Object key = keyGenerator.generateKey(context, parameterValues);",
          "475:                             CompletableFuture<Void> putOperationFuture = buildPutFutures(cacheNames, o, key);",
          "476:                             putOperationFuture.whenComplete((aVoid, throwable) -> {",
          "477:                                 if (throwable == null) {",
          "478:                                     emitter.onNext(true);",
          "479:                                     emitter.onComplete();",
          "480:                                 } else {",
          "481:                                     SyncCache cache = cacheManager.getCache(cacheNames[0]);",
          "482:                                     if (errorHandler.handlePutError(cache, key, o, asRuntimeException(throwable))) {",
          "483:                                         emitter.onError(throwable);",
          "484:                                     } else {",
          "485:                                         emitter.onNext(true);",
          "486:                                         emitter.onComplete();",
          "490:                         }, BackpressureStrategy.ERROR);",
          "491:                         cachePuts.add(cachePutFlowable);",
          "492:                     }",
          "493:                 }",
          "494:             }",
          "496:             if (!cachePuts.isEmpty()) {",
          "497:                 return Flowable.concat(cachePuts).toList().map(flowables -> Flowable.just(o)).toFlowable();",
          "498:             } else {",
          "499:                 return Flowable.just(o);",
          "500:             }",
          "501:         });",
          "502:     }",
          "504:     private Publisher<Object> buildCacheablePublisher(",
          "505:             MethodInvocationContext<Object, Object> context,",
          "506:             ReturnType returnTypeObject,",
          "507:             CacheOperation cacheOperation,",
          "508:             AnnotationValue<Cacheable> cacheable) {",
          "509:         AsyncCache<?> asyncCache = cacheManager.getCache(cacheOperation.cacheableCacheName).async();",
          "510:         CacheKeyGenerator keyGenerator = resolveKeyGenerator(cacheOperation.defaultKeyGenerator, cacheable);",
          "511:         Object[] params = resolveParams(context, cacheable.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
          "512:         Object key = keyGenerator.generateKey(context, params);",
          "514:         final Flowable<?> originalFlowable = Publishers.convertPublisher(context.proceed(), Flowable.class);",
          "515:         return Flowable.create(emitter -> {",
          "516:             Argument<?> firstTypeVariable = returnTypeObject.getFirstTypeVariable().orElse(Argument.of(Object.class));",
          "517:             asyncCache.get(key, firstTypeVariable).whenComplete((BiConsumer<Optional<?>, Throwable>) (o, throwable) -> {",
          "518:                 if (throwable == null && o.isPresent()) {",
          "520:                     if (LOG.isDebugEnabled()) {",
          "521:                         LOG.debug(\"Value found in cache [\" + asyncCache.getName() + \"] for invocation: \" + context);",
          "522:                     }",
          "523:                     emitter.onNext(o.get());",
          "524:                     emitter.onComplete();",
          "525:                 } else {",
          "526:                     if (throwable != null) {",
          "527:                         if (errorHandler.handleLoadError(asyncCache, key, asRuntimeException(throwable))) {",
          "528:                             emitter.onError(throwable);",
          "529:                         } else {",
          "530:                             emitter.onComplete();",
          "532:                     } else {",
          "533:                         emitter.onComplete();",
          "535:                 }",
          "536:             });",
          "537:         }, BackpressureStrategy.BUFFER).switchIfEmpty(originalFlowable.flatMap((Function<Object, Publisher<?>>) o ->",
          "538:                 Flowable.create(emitter -> asyncCache.put(key, o).whenComplete((aBoolean, throwable1) -> {",
          "539:                     if (throwable1 == null) {",
          "540:                         emitter.onNext(o);",
          "541:                         emitter.onComplete();",
          "542:                     } else {",
          "543:                         if (errorHandler.handleLoadError(asyncCache, key, asRuntimeException(throwable1))) {",
          "545:                             emitter.onError(throwable1);",
          "546:                         } else {",
          "547:                             emitter.onNext(o);",
          "548:                             emitter.onComplete();",
          "552:                 }), BackpressureStrategy.ERROR)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "480:                     } else {",
          "481:                         returnFuture.whenCompleteAsync((result, throwable) -> {",
          "482:                             if (throwable == null) {",
          "500:                             }",
          "501:                         }, ioExecutor);",
          "502:                     }",
          "",
          "[Removed Lines]",
          "483:                                 try {",
          "484:                                     CacheKeyGenerator keyGenerator = cacheOperation.getCachePutKeyGenerator(putOperation);",
          "485:                                     Object[] parameterValues = resolveParams(context, putOperation.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
          "486:                                     Object key = keyGenerator.generateKey(context, parameterValues);",
          "487:                                     CompletableFuture<Void> putOperationFuture = buildPutFutures(cacheNames, result, key);",
          "489:                                     putOperationFuture.whenComplete((aVoid, error) -> {",
          "490:                                         if (error != null) {",
          "491:                                             SyncCache cache = cacheManager.getCache(cacheNames[0]);",
          "492:                                             asyncCacheErrorHandler.handlePutError(cache, key, result, asRuntimeException(error));",
          "493:                                         }",
          "494:                                     });",
          "495:                                 } catch (Exception e) {",
          "496:                                     if (LOG.isErrorEnabled()) {",
          "497:                                         LOG.error(\"Cache put operation failed: \" + e.getMessage(), e);",
          "498:                                     }",
          "499:                                 }",
          "",
          "[Added Lines]",
          "596:                                 putResultAsync(context, cacheOperation, putOperation, cacheNames, result);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "506:         return returnFuture;",
          "507:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606:     private void putResultAsync(MethodInvocationContext<Object, Object> context, CacheOperation cacheOperation, AnnotationValue<CachePut> putOperation, String[] cacheNames, Object result) {",
          "607:         try {",
          "608:             CacheKeyGenerator keyGenerator = cacheOperation.getCachePutKeyGenerator(putOperation);",
          "609:             Object[] parameterValues = resolveParams(context, putOperation.get(MEMBER_PARAMETERS, String[].class, StringUtils.EMPTY_STRING_ARRAY));",
          "610:             Object key = keyGenerator.generateKey(context, parameterValues);",
          "611:             CompletableFuture<Void> putOperationFuture = buildPutFutures(cacheNames, result, key);",
          "613:             putOperationFuture.whenComplete((aVoid, error) -> {",
          "614:                 if (error != null) {",
          "615:                     SyncCache cache = cacheManager.getCache(cacheNames[0]);",
          "616:                     asyncCacheErrorHandler.handlePutError(cache, key, result, asRuntimeException(error));",
          "617:                 }",
          "618:             });",
          "619:         } catch (Exception e) {",
          "620:             if (LOG.isErrorEnabled()) {",
          "621:                 LOG.error(\"Cache put operation failed: \" + e.getMessage(), e);",
          "622:             }",
          "623:         }",
          "624:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "531:             AsyncCache<?> asyncCache = cacheManager.getCache(cacheName).async();",
          "532:             futures.add(asyncCache.put(key, result));",
          "533:         }",
          "535:         return CompletableFuture.allOf(futureArray);",
          "536:     }",
          "",
          "[Removed Lines]",
          "534:         CompletableFuture[] futureArray = futures.toArray(new CompletableFuture[futures.size()]);",
          "",
          "[Added Lines]",
          "651:         CompletableFuture[] futureArray = futures.toArray(new CompletableFuture[0]);",
          "652:         return CompletableFuture.allOf(futureArray);",
          "653:     }",
          "655:     private CompletableFuture<Void> buildInvalidateFutures(String[] cacheNames, Object key) {",
          "656:         List<CompletableFuture<Boolean>> futures = new ArrayList<>();",
          "657:         for (String cacheName : cacheNames) {",
          "658:             AsyncCache<?> asyncCache = cacheManager.getCache(cacheName).async();",
          "659:             futures.add(asyncCache.invalidate(key));",
          "660:         }",
          "661:         CompletableFuture[] futureArray = futures.toArray(new CompletableFuture[0]);",
          "662:         return CompletableFuture.allOf(futureArray);",
          "663:     }",
          "665:     private CompletableFuture<Void> buildInvalidateAllFutures(String[] cacheNames) {",
          "666:         List<CompletableFuture<Boolean>> futures = new ArrayList<>();",
          "667:         for (String cacheName : cacheNames) {",
          "668:             AsyncCache<?> asyncCache = cacheManager.getCache(cacheName).async();",
          "669:             futures.add(asyncCache.invalidateAll());",
          "670:         }",
          "671:         CompletableFuture[] futureArray = futures.toArray(new CompletableFuture[0]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "618:     }",
          "620:     private void processCacheEvict(",
          "626:         String[] cacheNames = cacheOperation.getCacheInvalidateNames(cacheConfig);",
          "627:         CacheKeyGenerator keyGenerator = cacheOperation.getCacheInvalidateKeyGenerator(cacheConfig);",
          "",
          "[Removed Lines]",
          "621:         MethodInvocationContext context,",
          "622:         AnnotationValue<CacheInvalidate> cacheConfig,",
          "623:         CacheOperation cacheOperation,",
          "624:         boolean async) {",
          "",
          "[Added Lines]",
          "758:             MethodInvocationContext context,",
          "759:             AnnotationValue<CacheInvalidate> cacheConfig,",
          "760:             CacheOperation cacheOperation,",
          "761:             boolean async) {",
          "",
          "---------------"
        ],
        "runtime/src/main/java/io/micronaut/discovery/DiscoveryClient.java||runtime/src/main/java/io/micronaut/discovery/DiscoveryClient.java": [
          "File: runtime/src/main/java/io/micronaut/discovery/DiscoveryClient.java -> runtime/src/main/java/io/micronaut/discovery/DiscoveryClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package io.micronaut.discovery;",
          "19: import io.micronaut.core.naming.Described;",
          "20: import org.reactivestreams.Publisher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import io.micronaut.core.async.annotation.SingleResult;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     Publisher<List<ServiceInstance>> getInstances(String serviceId);",
          "44:     Publisher<List<String>> getServiceIds();",
          "45: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:     @SingleResult",
          "46:     @SingleResult",
          "",
          "---------------"
        ],
        "runtime/src/test/groovy/io/micronaut/cache/SyncCacheSpec.groovy||runtime/src/test/groovy/io/micronaut/cache/SyncCacheSpec.groovy": [
          "File: runtime/src/test/groovy/io/micronaut/cache/SyncCacheSpec.groovy -> runtime/src/test/groovy/io/micronaut/cache/SyncCacheSpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.cache",
          "18: import io.reactivex.Flowable",
          "19: import io.reactivex.Single",
          "20: import io.micronaut.cache.annotation.CacheConfig",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: import io.micronaut.core.async.annotation.SingleResult",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:         }",
          "236:         @Cacheable",
          "237:         Flowable<Integer> flowableValue(String name) {",
          "238:             return Flowable.just(counters.computeIfAbsent(name, { 0 }))",
          "239:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:         @SingleResult",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb94094147691ffd174110fcd9e57fb37b8daea6",
      "candidate_info": {
        "commit_hash": "cb94094147691ffd174110fcd9e57fb37b8daea6",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/cb94094147691ffd174110fcd9e57fb37b8daea6",
        "files": [
          "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
          "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java",
          "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
          "src/main/docs/guide/httpServer/serverConfiguration/cors.adoc"
        ],
        "message": "Support sending a single header with comma separated values in CORS. Closes #1659",
        "before_after_code_files": [
          "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
          "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java||http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java",
          "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
            "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java"
          ],
          "candidate": [
            "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
            "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java"
          ]
        }
      },
      "candidate_diff": {
        "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy||http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy": [
          "File: http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy -> http-server-netty/src/test/groovy/io/micronaut/http/server/netty/cors/CorsFilterSpec.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:         response.getHeaders().getAll(ACCESS_CONTROL_ALLOW_HEADERS) == ['X-Header', 'Y-Header'] // Allow headers are echo'd from the request",
          "285:         response.getHeaders().get(ACCESS_CONTROL_MAX_AGE) == '1800' // Max age is set from config",
          "286:     }",
          "287: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:     void \"test handleResponse for preflight request with single header\"() {",
          "289:         given:",
          "290:         def config = new HttpServerConfiguration.CorsConfiguration(singleHeader: true)",
          "291:         CorsOriginConfiguration originConfig = new CorsOriginConfiguration()",
          "292:         originConfig.exposedHeaders = ['Foo-Header', 'Bar-Header']",
          "293:         config.configurations = new LinkedHashMap<String, CorsOriginConfiguration>()",
          "294:         config.configurations.put('foo', originConfig)",
          "295:         CorsFilter corsHandler = buildCorsHandler(config)",
          "296:         HttpRequest request = Mock(HttpRequest)",
          "297:         HttpHeaders headers = Mock(HttpHeaders)",
          "298:         request.getHeaders() >> headers",
          "299:         headers.getOrigin() >> Optional.of('http://www.foo.com')",
          "300:         request.getMethod() >> HttpMethod.OPTIONS",
          "303:         when:",
          "304:         headers.contains(ACCESS_CONTROL_REQUEST_METHOD) >> true",
          "305:         HttpResponse response = corsHandler.handleRequest(request).get()",
          "307:         then: \"the response is not modified\"",
          "308:         2 * headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List,String)) >> Optional.of(['X-Header', 'Y-Header'])",
          "309:         1 * headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class) >> Optional.of(HttpMethod.GET)",
          "310:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_METHODS) == 'GET'",
          "311:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_ORIGIN) == 'http://www.foo.com' // The origin is echo'd",
          "312:         response.getHeaders().get(VARY) == 'Origin' // The vary header is set",
          "313:         response.getHeaders().get(ACCESS_CONTROL_EXPOSE_HEADERS) == 'Foo-Header,Bar-Header' // Expose headers are set from config",
          "314:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_CREDENTIALS) == 'true' // Allow credentials header is set",
          "315:         response.getHeaders().get(ACCESS_CONTROL_ALLOW_HEADERS) == 'X-Header,Y-Header' // Allow headers are echo'd from the request",
          "316:         response.getHeaders().get(ACCESS_CONTROL_MAX_AGE) == '1800' // Max age is set from config",
          "317:     }",
          "",
          "---------------"
        ],
        "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java||http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java": [
          "File: http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java -> http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "493:     public static class CorsConfiguration implements Toggleable {",
          "495:         public static final boolean DEFAULT_ENABLED = false;",
          "497:         private boolean enabled = DEFAULT_ENABLED;",
          "499:         private Map<String, CorsOriginConfiguration> configurations = Collections.emptyMap();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496:         public static final boolean DEFAULT_SINGLE_HEADER = false;",
          "499:         private boolean singleHeader = DEFAULT_SINGLE_HEADER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "521:             return configurations;",
          "522:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529:         public boolean isSingleHeader() {",
          "530:             return singleHeader;",
          "531:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "536:         public void setConfigurations(Map<String, CorsOriginConfiguration> configurations) {",
          "537:             this.configurations = configurations;",
          "538:         }",
          "539:     }",
          "540: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554:         public void setSingleHeader(boolean singleHeader) {",
          "555:             this.singleHeader = singleHeader;",
          "556:         }",
          "",
          "---------------"
        ],
        "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java": [
          "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import io.micronaut.core.async.publisher.Publishers;",
          "30: import io.micronaut.core.order.Ordered;",
          "31: import io.micronaut.core.type.Argument;",
          "32: import io.micronaut.http.HttpHeaders;",
          "33: import io.micronaut.http.HttpMethod;",
          "34: import io.micronaut.http.HttpRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import io.micronaut.core.util.StringUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import java.util.Optional;",
          "47: import java.util.regex.Matcher;",
          "48: import java.util.regex.Pattern;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import java.util.stream.Collectors;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:                 if (CorsUtil.isPreflightRequest(request)) {",
          "109:                     Optional<HttpMethod> result = headers.getFirst(ACCESS_CONTROL_REQUEST_METHOD, HttpMethod.class);",
          "110:                     setAllowMethods(result.get(), response);",
          "113:                     allowedHeaders.ifPresent(val ->",
          "114:                         setAllowHeaders(val, response)",
          "115:                     );",
          "",
          "[Removed Lines]",
          "111:                     Argument<List> type = Argument.of(List.class, String.class);",
          "112:                     Optional<List> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, type);",
          "",
          "[Added Lines]",
          "113:                     Optional<List> allowedHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List.class, String.class));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "195:     protected void setExposeHeaders(List<String> exposedHeaders, MutableHttpResponse<?> response) {",
          "197:     }",
          "",
          "[Removed Lines]",
          "196:         exposedHeaders.forEach(header -> response.header(ACCESS_CONTROL_EXPOSE_HEADERS, header));",
          "",
          "[Added Lines]",
          "197:         if (corsConfiguration.isSingleHeader()) {",
          "198:             String headerValue = String.join(\",\", exposedHeaders);",
          "199:             if (StringUtils.isNotEmpty(headerValue)) {",
          "200:                 response.header(ACCESS_CONTROL_EXPOSE_HEADERS, headerValue);",
          "201:             }",
          "202:         } else {",
          "203:             exposedHeaders.forEach(header -> response.header(ACCESS_CONTROL_EXPOSE_HEADERS, header));",
          "204:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "231:     }",
          "",
          "[Removed Lines]",
          "227:     protected void setAllowHeaders(List optionalAllowHeaders, MutableHttpResponse response) {",
          "228:         optionalAllowHeaders.forEach(header ->",
          "229:             response.header(ACCESS_CONTROL_ALLOW_HEADERS, header.toString())",
          "230:         );",
          "",
          "[Added Lines]",
          "235:     protected void setAllowHeaders(List<?> optionalAllowHeaders, MutableHttpResponse response) {",
          "236:         List<String> allowHeaders = optionalAllowHeaders.stream().map(Object::toString).collect(Collectors.toList());",
          "237:         if (corsConfiguration.isSingleHeader()) {",
          "238:             String headerValue = String.join(\",\", allowHeaders);",
          "239:             if (StringUtils.isNotEmpty(headerValue)) {",
          "240:                 response.header(ACCESS_CONTROL_ALLOW_HEADERS, headerValue);",
          "241:             }",
          "242:         } else {",
          "243:             allowHeaders.forEach(header -> response.header(ACCESS_CONTROL_ALLOW_HEADERS, header));",
          "244:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "540addc90d8b7143514c292b01c981b5d1103b9a",
      "candidate_info": {
        "commit_hash": "540addc90d8b7143514c292b01c981b5d1103b9a",
        "repo": "micronaut-projects/micronaut-core",
        "commit_url": "https://github.com/micronaut-projects/micronaut-core/commit/540addc90d8b7143514c292b01c981b5d1103b9a",
        "files": [
          "core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java",
          "core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataDelegate.java",
          "core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java",
          "core/src/main/java/io/micronaut/core/annotation/AnnotationValueResolver.java",
          "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
          "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
          "inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java",
          "management/src/main/java/io/micronaut/management/endpoint/EndpointSensitivityProcessor.java",
          "runtime/src/main/java/io/micronaut/retry/intercept/AnnotationRetryStateBuilder.java"
        ],
        "message": "Introduce booleanValue to resolve handling of EndpointSensitivityProcessor",
        "before_after_code_files": [
          "core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java||core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java",
          "core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataDelegate.java||core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataDelegate.java",
          "core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java||core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java",
          "core/src/main/java/io/micronaut/core/annotation/AnnotationValueResolver.java||core/src/main/java/io/micronaut/core/annotation/AnnotationValueResolver.java",
          "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
          "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
          "inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java||inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java",
          "management/src/main/java/io/micronaut/management/endpoint/EndpointSensitivityProcessor.java||management/src/main/java/io/micronaut/management/endpoint/EndpointSensitivityProcessor.java",
          "runtime/src/main/java/io/micronaut/retry/intercept/AnnotationRetryStateBuilder.java||runtime/src/main/java/io/micronaut/retry/intercept/AnnotationRetryStateBuilder.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
            "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java"
          ],
          "candidate": [
            "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
            "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java||core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java": [
          "File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java -> core/src/main/java/io/micronaut/core/annotation/AnnotationMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "678:     }",
          "689:     }",
          "699:     }",
          "708:         ArgumentUtils.requireNonNull(\"annotation\", annotation);",
          "710:     }",
          "720:     }",
          "",
          "[Removed Lines]",
          "687:     default @Nonnull String[] stringValues(@Nonnull Class<? extends Annotation> annotation, @Nonnull String member) {",
          "688:         return StringUtils.EMPTY_STRING_ARRAY;",
          "697:     default @Nonnull String[] stringValues(@Nonnull Class<? extends Annotation> annotation) {",
          "698:         return stringValues(annotation, VALUE_MEMBER);",
          "707:     default @Nonnull Optional<String> stringValue(@Nonnull Class<? extends Annotation> annotation) {",
          "709:         return stringValue(annotation, VALUE_MEMBER);",
          "718:     default @Nonnull Optional<String> stringValue(@Nonnull String annotation) {",
          "719:         return stringValue(annotation, VALUE_MEMBER);",
          "",
          "[Added Lines]",
          "686:     default @Nonnull Optional<String> stringValue(@Nonnull Class<? extends Annotation> annotation) {",
          "687:         ArgumentUtils.requireNonNull(\"annotation\", annotation);",
          "688:         return stringValue(annotation, VALUE_MEMBER);",
          "689:     }",
          "697:     default @Nonnull Optional<String> stringValue(@Nonnull String annotation) {",
          "698:         return stringValue(annotation, VALUE_MEMBER);",
          "699:     }",
          "708:     default Optional<Boolean> booleanValue(@Nonnull String annotation, @Nonnull String member) {",
          "709:         ArgumentUtils.requireNonNull(\"annotation\", annotation);",
          "710:         ArgumentUtils.requireNonNull(\"member\", member);",
          "712:         return getValue(annotation, member, Boolean.class);",
          "722:     default Optional<Boolean> booleanValue(@Nonnull Class<? extends Annotation> annotation, @Nonnull String member) {",
          "723:         ArgumentUtils.requireNonNull(\"annotation\", annotation);",
          "724:         return booleanValue(annotation.getName(), member);",
          "733:     default @Nonnull Optional<Boolean> booleanValue(@Nonnull Class<? extends Annotation> annotation) {",
          "735:         return booleanValue(annotation, VALUE_MEMBER);",
          "744:     default @Nonnull Optional<Boolean> booleanValue(@Nonnull String annotation) {",
          "745:         return booleanValue(annotation, VALUE_MEMBER);",
          "746:     }",
          "755:     default @Nonnull String[] stringValues(@Nonnull Class<? extends Annotation> annotation, @Nonnull String member) {",
          "756:         return StringUtils.EMPTY_STRING_ARRAY;",
          "757:     }",
          "765:     default @Nonnull String[] stringValues(@Nonnull Class<? extends Annotation> annotation) {",
          "766:         return stringValues(annotation, VALUE_MEMBER);",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataDelegate.java||core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataDelegate.java": [
          "File: core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataDelegate.java -> core/src/main/java/io/micronaut/core/annotation/AnnotationMetadataDelegate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: public interface AnnotationMetadataDelegate extends AnnotationMetadataProvider, AnnotationMetadata {",
          "34:     @Nonnull",
          "35:     @Override",
          "36:     default String[] stringValues(@Nonnull Class<? extends Annotation> annotation, @Nonnull String member) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     @Override",
          "36:     default OptionalLong longValue(@Nonnull Class<? extends Annotation> annotation, @Nonnull String member) {",
          "37:         return getAnnotationMetadata().longValue(annotation, member);",
          "38:     }",
          "40:     @Override",
          "41:     default Optional<Boolean> booleanValue(@Nonnull String annotation, @Nonnull String member) {",
          "42:         return getAnnotationMetadata().booleanValue(annotation, member);",
          "43:     }",
          "45:     @Override",
          "46:     default Optional<Boolean> booleanValue(@Nonnull Class<? extends Annotation> annotation, @Nonnull String member) {",
          "47:         return getAnnotationMetadata().booleanValue(annotation, member);",
          "48:     }",
          "50:     @Nonnull",
          "51:     @Override",
          "52:     default Optional<Boolean> booleanValue(@Nonnull Class<? extends Annotation> annotation) {",
          "53:         return getAnnotationMetadata().booleanValue(annotation, AnnotationMetadata.VALUE_MEMBER);",
          "54:     }",
          "56:     @Nonnull",
          "57:     @Override",
          "58:     default Optional<Boolean> booleanValue(@Nonnull String annotation) {",
          "59:         return getAnnotationMetadata().booleanValue(annotation, AnnotationMetadata.VALUE_MEMBER);",
          "60:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java||core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java": [
          "File: core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java -> core/src/main/java/io/micronaut/core/annotation/AnnotationValue.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:         return OptionalLong.empty();",
          "344:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:     public Optional<Boolean> booleanValue(@Nonnull String member, @Nullable Function<Object, Object> valueMapper) {",
          "354:         if (StringUtils.isNotEmpty(member)) {",
          "355:             Object o = getRawSingleValue(member, valueMapper);",
          "356:             if (o instanceof Boolean) {",
          "357:                 return Optional.of((Boolean) o);",
          "358:             } else if (o instanceof CharSequence) {",
          "359:                 return Optional.of(StringUtils.isTrue(o.toString()));",
          "360:             }",
          "361:         }",
          "362:         return Optional.empty();",
          "363:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "431:         return stringValue(AnnotationMetadata.VALUE_MEMBER);",
          "432:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:     @Override",
          "454:     public Optional<Boolean> booleanValue(@Nonnull String member) {",
          "455:         return booleanValue(member, null);",
          "456:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/io/micronaut/core/annotation/AnnotationValueResolver.java||core/src/main/java/io/micronaut/core/annotation/AnnotationValueResolver.java": [
          "File: core/src/main/java/io/micronaut/core/annotation/AnnotationValueResolver.java -> core/src/main/java/io/micronaut/core/annotation/AnnotationValueResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:         return stringValue(AnnotationMetadata.VALUE_MEMBER);",
          "153:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     Optional<Boolean> booleanValue(@Nonnull String member);",
          "168:     default Optional<Boolean> booleanValue() {",
          "169:         return booleanValue(AnnotationMetadata.VALUE_MEMBER);",
          "170:     }",
          "",
          "---------------"
        ],
        "http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java": [
          "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:                 }",
          "158:                 if (preflight) {",
          "161:                     List<String> allowedHeaders = config.getAllowedHeaders();",
          "163:                     if (!isAny(allowedHeaders) && accessControlHeaders.isPresent()) {",
          "164:                         if (!accessControlHeaders.get().stream()",
          "165:                             .allMatch(header -> allowedHeaders.stream()",
          "167:                             return Optional.of(HttpResponse.status(HttpStatus.FORBIDDEN));",
          "168:                         }",
          "169:                     }",
          "",
          "[Removed Lines]",
          "159:                     Optional<List> accessControlHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.of(List.class, String.class));",
          "166:                                 .anyMatch(allowedHeader -> allowedHeader.equals(header.toString().trim())))) {",
          "",
          "[Added Lines]",
          "159:                     Optional<List<String>> accessControlHeaders = headers.get(ACCESS_CONTROL_REQUEST_HEADERS, Argument.listOf(String.class));",
          "166:                                 .anyMatch(allowedHeader -> allowedHeader.equals(header.trim())))) {",
          "",
          "---------------"
        ],
        "http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java||http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java": [
          "File: http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java -> http-server/src/main/java/io/micronaut/http/server/cors/CorsOriginConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import io.micronaut.http.HttpMethod;",
          "25: import javax.inject.Singleton;",
          "27: import java.util.Map;",
          "28: import java.util.Optional;",
          "",
          "[Removed Lines]",
          "26: import java.util.List;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:             ConvertibleValues<Object> convertibleValues = new ConvertibleValuesMap<>(mapConfig);",
          "54:             convertibleValues",
          "56:                 .ifPresent(configuration::setAllowedOrigins);",
          "58:             convertibleValues",
          "60:                 .ifPresent(configuration::setAllowedMethods);",
          "62:             convertibleValues",
          "64:                 .ifPresent(configuration::setAllowedHeaders);",
          "66:             convertibleValues",
          "68:                 .ifPresent(configuration::setExposedHeaders);",
          "70:             convertibleValues",
          "",
          "[Removed Lines]",
          "55:                 .get(ALLOWED_ORIGINS, Argument.of(List.class, String.class))",
          "59:                 .get(ALLOWED_METHODS, Argument.of(List.class, HttpMethod.class))",
          "63:                 .get(ALLOWED_HEADERS, Argument.of(List.class, String.class))",
          "67:                 .get(EXPOSED_HEADERS, Argument.of(List.class, String.class))",
          "",
          "[Added Lines]",
          "54:                 .get(ALLOWED_ORIGINS, Argument.listOf(String.class))",
          "58:                 .get(ALLOWED_METHODS, Argument.listOf(HttpMethod.class))",
          "62:                 .get(ALLOWED_HEADERS, Argument.listOf(String.class))",
          "66:                 .get(EXPOSED_HEADERS, Argument.listOf(String.class))",
          "",
          "---------------"
        ],
        "inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java||inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java": [
          "File: inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java -> inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:         }",
          "249:     }",
          "251:     @Nonnull",
          "252:     @Override",
          "253:     public OptionalLong longValue(@Nonnull String annotation, @Nonnull String member) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     @Override",
          "252:     public Optional<Boolean> booleanValue(@Nonnull String annotation, @Nonnull String member) {",
          "253:         ArgumentUtils.requireNonNull(\"annotation\", annotation);",
          "254:         ArgumentUtils.requireNonNull(\"member\", member);",
          "256:         return booleanValue(annotation, member, null);",
          "257:     }",
          "259:     @Override",
          "260:     public Optional<Boolean> booleanValue(@Nonnull Class<? extends Annotation> annotation, @Nonnull String member) {",
          "261:         return booleanValue(annotation, member, null);",
          "262:     }",
          "271:     Optional<Boolean> booleanValue(@Nonnull Class<? extends Annotation> annotation, @Nonnull String member, Function<Object, Object> valueMapper) {",
          "272:         ArgumentUtils.requireNonNull(\"annotation\", annotation);",
          "273:         ArgumentUtils.requireNonNull(\"member\", member);",
          "274:         final Repeatable repeatable = annotation.getAnnotation(Repeatable.class);",
          "275:         if (repeatable != null) {",
          "276:             Object v = getRawSingleValue(repeatable.value().getName(), VALUE_MEMBER, null);",
          "277:             if (v instanceof AnnotationValue) {",
          "278:                 return ((AnnotationValue<?>) v).booleanValue(member, valueMapper);",
          "279:             }",
          "280:             return Optional.empty();",
          "281:         } else {",
          "282:             return booleanValue(annotation.getName(), member, valueMapper);",
          "283:         }",
          "284:     }",
          "293:     @Nonnull",
          "294:     Optional<Boolean> booleanValue(@Nonnull String annotation, @Nonnull String member, @Nullable Function<Object, Object> valueMapper) {",
          "295:         Object rawValue = getRawSingleValue(annotation, member, valueMapper);",
          "296:         if (rawValue instanceof Boolean) {",
          "297:             return Optional.of((Boolean) rawValue);",
          "298:         } else if (rawValue != null) {",
          "299:             return Optional.of(StringUtils.isTrue(rawValue.toString()));",
          "300:         }",
          "301:         return Optional.empty();",
          "302:     }",
          "",
          "---------------"
        ],
        "management/src/main/java/io/micronaut/management/endpoint/EndpointSensitivityProcessor.java||management/src/main/java/io/micronaut/management/endpoint/EndpointSensitivityProcessor.java": [
          "File: management/src/main/java/io/micronaut/management/endpoint/EndpointSensitivityProcessor.java -> management/src/main/java/io/micronaut/management/endpoint/EndpointSensitivityProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:             boolean sensitive = configuration",
          "72:                 .isSensitive()",
          "76:             endpointMethods.put(method, sensitive);",
          "77:         });",
          "",
          "[Removed Lines]",
          "73:                 .orElseGet(() -> beanDefinition",
          "74:                     .isTrue(Endpoint.class, \"defaultSensitive\"));",
          "",
          "[Added Lines]",
          "73:                 .orElseGet(() -> beanDefinition.booleanValue(Endpoint.class, \"defaultSensitive\").orElseGet(() ->",
          "74:                         beanDefinition.getDefaultValue(Endpoint.class, \"defaultSensitive\", Boolean.class).orElse(Endpoint.SENSITIVE)",
          "75:                 ));",
          "",
          "---------------"
        ],
        "runtime/src/main/java/io/micronaut/retry/intercept/AnnotationRetryStateBuilder.java||runtime/src/main/java/io/micronaut/retry/intercept/AnnotationRetryStateBuilder.java": [
          "File: runtime/src/main/java/io/micronaut/retry/intercept/AnnotationRetryStateBuilder.java -> runtime/src/main/java/io/micronaut/retry/intercept/AnnotationRetryStateBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package io.micronaut.retry.intercept;",
          "19: import io.micronaut.core.annotation.AnnotationMetadata;",
          "20: import io.micronaut.core.annotation.AnnotationValue;",
          "22: import io.micronaut.retry.RetryState;",
          "23: import io.micronaut.retry.RetryStateBuilder;",
          "24: import io.micronaut.retry.annotation.Retryable;",
          "26: import java.time.Duration;",
          "",
          "[Removed Lines]",
          "18: import io.micronaut.core.annotation.AnnotationClassValue;",
          "21: import io.micronaut.core.type.Argument;",
          "27: import java.util.*;",
          "",
          "[Added Lines]",
          "25: import java.util.Arrays;",
          "26: import java.util.HashSet;",
          "27: import java.util.Set;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     @SuppressWarnings(\"unchecked\")",
          "76:     private Set<Class<? extends Throwable>> resolveIncludes(AnnotationValue<Retryable> retry, String includes) {",
          "86:         return classes;",
          "87:     }",
          "88: }",
          "",
          "[Removed Lines]",
          "77:         Set<Class<? extends Throwable>> classes = new HashSet<>();",
          "78:         Optional<AnnotationClassValue[]> value = retry.get(includes, Argument.of(AnnotationClassValue[].class));",
          "79:         if (value.isPresent()) {",
          "80:             for (AnnotationClassValue classValue: value.get()) {",
          "81:                 classValue.getType().ifPresent(clazz -> {",
          "82:                     classes.add((Class) clazz);",
          "83:                 });",
          "84:             }",
          "85:         }",
          "",
          "[Added Lines]",
          "77:         Class<?>[] values = retry.classValues(includes);",
          "78:         Set classes = new HashSet<>(values.length);",
          "79:         classes.addAll(Arrays.asList(values));",
          "",
          "---------------"
        ]
      }
    }
  ]
}