{
  "cve_id": "CVE-2024-30266",
  "cve_desc": "wasmtime is a runtime for WebAssembly. The 19.0.0 release of Wasmtime contains a regression introduced during its development which can lead to a guest WebAssembly module causing a panic in the host runtime. A valid WebAssembly module, when executed at runtime, may cause this panic. This vulnerability has been patched in version 19.0.1.",
  "repo": "bytecodealliance/wasmtime",
  "patch_hash": "7f57d0bb0948fa56cc950278d0db230ed10e8664",
  "patch_info": {
    "commit_hash": "7f57d0bb0948fa56cc950278d0db230ed10e8664",
    "repo": "bytecodealliance/wasmtime",
    "commit_url": "https://github.com/bytecodealliance/wasmtime/commit/7f57d0bb0948fa56cc950278d0db230ed10e8664",
    "files": [
      "crates/runtime/src/instance.rs",
      "tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast"
    ],
    "message": "Fix a panic using tables with the wrong type (#8283)\n\nThis commit fixes an accidental issue introduced in #8018 where using an\nelement segment which had been dropped with an `externref` table would\ncause a panic. The panic happened due to an assertion that tables are\nbeing used with the right type of item and that was being mismatched.\nThe underlying issue was that dropped element segments are modeled as an\nempty element segment but the empty element segment was using the\n\"functions\" encoding as opposed to the \"expressions\" encoding. This\nmeant that code later assumed that due to the use of functions the table\nmust be a table-of-functions, but this was not correct for\nexternref-based tables.\n\nThe fix in this commit is to instead model the encoding as an\n\"expressions\" list which means that the table type is dispatched on to\ncall the appropriate initializer.\n\nThere is no memory safety issue with this mistake as the assertion was\nspecifically targetted at preventing memory safety. This does, however,\nenable any WebAssembly module to panic a host.\n\nCloses #8281",
    "before_after_code_files": [
      "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs",
      "tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast||tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast"
    ]
  },
  "patch_diff": {
    "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs": [
      "File: crates/runtime/src/instance.rs -> crates/runtime/src/instance.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "802:         let module = self.module().clone();",
      "805:         let elements = match module.passive_elements_map.get(&elem_index) {",
      "806:             Some(index) if !self.dropped_elements.contains(elem_index) => {",
      "807:                 &module.passive_elements[*index]",
      "",
      "[Removed Lines]",
      "804:         let empty = TableSegmentElements::Functions(Box::new([]));",
      "",
      "[Added Lines]",
      "808:         let empty = TableSegmentElements::Expressions(Box::new([]));",
      "",
      "---------------"
    ],
    "tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast||tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast": [
      "File: tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast -> tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: (module",
      "2:   (table $t 0 0 externref)",
      "4:   (func (export \"f1\")",
      "5:     (i32.const 0)",
      "6:     (i32.const 0)",
      "7:     (i32.const 0)",
      "8:     (table.init $t $declared)",
      "9:   )",
      "11:   (func (export \"f2\")",
      "12:     (i32.const 0)",
      "13:     (i32.const 0)",
      "14:     (i32.const 0)",
      "15:     (table.init $t $passive)",
      "17:     (elem.drop $passive)",
      "19:     (i32.const 0)",
      "20:     (i32.const 0)",
      "21:     (i32.const 0)",
      "22:     (table.init $t $passive)",
      "23:   )",
      "25:   (func (export \"f3\")",
      "26:     (i32.const 0)",
      "27:     (i32.const 0)",
      "28:     (i32.const 0)",
      "29:     (table.init $t $active)",
      "30:   )",
      "32:   (elem $declared declare externref)",
      "33:   (elem $passive externref)",
      "34:   (elem $active (i32.const 0) externref)",
      "35: )",
      "37: (assert_return (invoke \"f1\"))",
      "38: (assert_return (invoke \"f2\"))",
      "39: (assert_return (invoke \"f3\"))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bc647d43fa7b1afe4dd4fb50b917be9ecfdc4106",
      "candidate_info": {
        "commit_hash": "bc647d43fa7b1afe4dd4fb50b917be9ecfdc4106",
        "repo": "bytecodealliance/wasmtime",
        "commit_url": "https://github.com/bytecodealliance/wasmtime/commit/bc647d43fa7b1afe4dd4fb50b917be9ecfdc4106",
        "files": [
          "crates/runtime/src/instance.rs",
          "crates/runtime/src/instance/allocator.rs",
          "crates/runtime/src/table.rs",
          "tests/all/gc.rs"
        ],
        "message": "Refactor runtime table management for more type-safety (#8018)\n\nThis commit is an attempt to make the mistake fixed in #8016 harder to\nhappen again. This removes the `set_raw` helper entirely from tables and\ninstead forces all callers to view the table as either a table of\nfuncrefs or a table of externefs. By forcing that choice outwards\ninstead of handling it inwards it enables dealing with a typed table in\nmore contexts which should help naturally do the right thing.",
        "before_after_code_files": [
          "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs",
          "crates/runtime/src/instance/allocator.rs||crates/runtime/src/instance/allocator.rs",
          "crates/runtime/src/table.rs||crates/runtime/src/table.rs",
          "tests/all/gc.rs||tests/all/gc.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs"
          ],
          "candidate": [
            "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs"
          ]
        }
      },
      "candidate_diff": {
        "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs": [
          "File: crates/runtime/src/instance.rs -> crates/runtime/src/instance.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "835:                     .get(src..)",
          "836:                     .and_then(|s| s.get(..len))",
          "837:                     .ok_or(Trap::TableOutOfBounds)?;",
          "839:                     dst,",
          "845:                 )?;",
          "846:             }",
          "847:             TableSegmentElements::Expressions(exprs) => {",
          "",
          "[Removed Lines]",
          "838:                 table.init(",
          "840:                     elements.iter().map(|idx| {",
          "841:                         TableElement::FuncRef(",
          "842:                             self.get_func_ref(*idx).unwrap_or(std::ptr::null_mut()),",
          "843:                         )",
          "844:                     }),",
          "",
          "[Added Lines]",
          "838:                 table.init_func(",
          "840:                     elements",
          "841:                         .iter()",
          "842:                         .map(|idx| self.get_func_ref(*idx).unwrap_or(std::ptr::null_mut())),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "850:                     .get(src..)",
          "851:                     .and_then(|s| s.get(..len))",
          "852:                     .ok_or(Trap::TableOutOfBounds)?;",
          "858:                                 TableElementExpression::Null => std::ptr::null_mut(),",
          "859:                                 TableElementExpression::Function(idx) => {",
          "860:                                     self.get_func_ref(*idx).unwrap()",
          "",
          "[Removed Lines]",
          "853:                 table.init(",
          "854:                     dst,",
          "855:                     exprs.iter().map(|expr| match ty {",
          "856:                         TableElementType::Func => {",
          "857:                             let funcref = match expr {",
          "",
          "[Added Lines]",
          "851:                 match ty {",
          "852:                     TableElementType::Func => {",
          "853:                         table.init_func(",
          "854:                             dst,",
          "855:                             exprs.iter().map(|expr| match expr {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "863:                                     let global = self.defined_or_imported_global_ptr(*idx);",
          "864:                                     unsafe { (*global).as_func_ref() }",
          "865:                                 }",
          "871:                                 TableElementExpression::Null => None,",
          "872:                                 TableElementExpression::Function(_) => unreachable!(),",
          "873:                                 TableElementExpression::GlobalGet(idx) => {",
          "874:                                     let global = self.defined_or_imported_global_ptr(*idx);",
          "875:                                     unsafe { (*global).as_externref().clone() }",
          "876:                                 }",
          "882:             }",
          "883:         }",
          "",
          "[Removed Lines]",
          "866:                             };",
          "867:                             TableElement::FuncRef(funcref)",
          "868:                         }",
          "869:                         TableElementType::Extern => {",
          "870:                             let externref = match expr {",
          "877:                             };",
          "878:                             TableElement::ExternRef(externref)",
          "879:                         }",
          "880:                     }),",
          "881:                 )?;",
          "",
          "[Added Lines]",
          "864:                             }),",
          "865:                         )?;",
          "866:                     }",
          "867:                     TableElementType::Extern => {",
          "868:                         table.init_extern(",
          "869:                             dst,",
          "870:                             exprs.iter().map(|expr| match expr {",
          "877:                             }),",
          "878:                         )?;",
          "879:                     }",
          "880:                 }",
          "",
          "---------------"
        ],
        "crates/runtime/src/instance/allocator.rs||crates/runtime/src/instance/allocator.rs": [
          "File: crates/runtime/src/instance/allocator.rs -> crates/runtime/src/instance/allocator.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: use crate::instance::{Instance, InstanceHandle};",
          "3: use crate::memory::Memory;",
          "4: use crate::mpk::ProtectionKey;",
          "6: use crate::{CompiledModuleId, ModuleRuntimeInfo, Store};",
          "7: use anyhow::{anyhow, bail, Result};",
          "8: use std::{alloc, any::Any, mem, ptr, sync::Arc};",
          "",
          "[Removed Lines]",
          "5: use crate::table::Table;",
          "",
          "[Added Lines]",
          "5: use crate::table::{Table, TableElementType};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "531:             TableInitialValue::FuncRef(idx) => {",
          "532:                 let funcref = instance.get_func_ref(*idx).unwrap();",
          "533:                 let table = unsafe { &mut *instance.get_defined_table(table) };",
          "535:             }",
          "537:             TableInitialValue::GlobalGet(idx) => unsafe {",
          "538:                 let global = instance.defined_or_imported_global_ptr(*idx);",
          "540:                 let table = &mut *instance.get_defined_table(table);",
          "542:             },",
          "543:         }",
          "544:     }",
          "",
          "[Removed Lines]",
          "534:                 table.init_func(funcref)?;",
          "539:                 let funcref = (*global).as_func_ref();",
          "541:                 table.init_func(funcref)?;",
          "",
          "[Added Lines]",
          "534:                 let init = (0..table.size()).map(|_| funcref);",
          "535:                 table.init_func(0, init)?;",
          "541:                 match table.element_type() {",
          "542:                     TableElementType::Func => {",
          "543:                         let funcref = (*global).as_func_ref();",
          "544:                         let init = (0..table.size()).map(|_| funcref);",
          "545:                         table.init_func(0, init)?;",
          "546:                     }",
          "547:                     TableElementType::Extern => {",
          "548:                         let externref = (*global).as_externref();",
          "549:                         let init = (0..table.size()).map(|_| externref.clone());",
          "550:                         table.init_extern(0, init)?;",
          "551:                     }",
          "552:                 }",
          "",
          "---------------"
        ],
        "crates/runtime/src/table.rs||crates/runtime/src/table.rs": [
          "File: crates/runtime/src/table.rs -> crates/runtime/src/table.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: unsafe impl Sync for TableElement where VMExternRef: Sync {}",
          "57: impl TableElement {",
          "",
          "[Removed Lines]",
          "65:     unsafe fn from_table_value(ty: TableElementType, ptr: TableValue) -> Self {",
          "66:         match (ty, ptr) {",
          "67:             (TableElementType::Func, None) => Self::UninitFunc,",
          "68:             (TableElementType::Func, Some(ptr)) => {",
          "69:                 let ptr = ptr.as_ptr();",
          "70:                 let masked = Strict::map_addr(ptr, |a| a & FUNCREF_MASK);",
          "71:                 Self::FuncRef(masked.cast())",
          "72:             }",
          "73:             (TableElementType::Extern, None) => Self::ExternRef(None),",
          "74:             (TableElementType::Extern, Some(ptr)) => {",
          "75:                 Self::ExternRef(VMExternRef::from_raw(ptr.as_ptr()))",
          "76:             }",
          "77:         }",
          "78:     }",
          "85:     unsafe fn clone_from_table_value(ty: TableElementType, ptr: TableValue) -> Self {",
          "86:         match ty {",
          "88:             TableElementType::Func => TableElement::from_table_value(ty, ptr),",
          "90:             TableElementType::Extern => {",
          "91:                 Self::ExternRef(ptr.and_then(|p| VMExternRef::clone_from_raw(p.as_ptr())))",
          "92:             }",
          "93:         }",
          "94:     }",
          "105:     unsafe fn into_table_value(self) -> TableValue {",
          "106:         match self {",
          "107:             Self::UninitFunc => None,",
          "108:             Self::FuncRef(e) => {",
          "109:                 let tagged = Strict::map_addr(e, |e| e | FUNCREF_INIT_BIT);",
          "110:                 Some(NonNull::new(tagged.cast()).unwrap().into())",
          "111:             }",
          "112:             Self::ExternRef(e) => e.map(|e| NonNull::new(e.into_raw()).unwrap().into()),",
          "113:         }",
          "114:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:     }",
          "161: }",
          "164: pub enum Table {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: #[derive(Copy, Clone)]",
          "106: #[repr(transparent)]",
          "107: struct TaggedFuncRef(*mut VMFuncRef);",
          "109: impl TaggedFuncRef {",
          "110:     const UNINIT: TaggedFuncRef = TaggedFuncRef(ptr::null_mut());",
          "114:     fn from(ptr: *mut VMFuncRef) -> Self {",
          "115:         let masked = Strict::map_addr(ptr, |a| a | FUNCREF_INIT_BIT);",
          "116:         TaggedFuncRef(masked)",
          "117:     }",
          "121:     fn into_table_element(self) -> TableElement {",
          "122:         let ptr = self.0;",
          "123:         if ptr.is_null() {",
          "124:             TableElement::UninitFunc",
          "125:         } else {",
          "126:             let unmasked = Strict::map_addr(ptr, |a| a & FUNCREF_MASK);",
          "127:             TableElement::FuncRef(unmasked)",
          "128:         }",
          "129:     }",
          "130: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:     }",
          "299:         }",
          "300:         Ok(())",
          "301:     }",
          "",
          "[Removed Lines]",
          "293:     pub fn init_func(&mut self, init: *mut VMFuncRef) -> Result<(), Trap> {",
          "294:         assert!(self.element_type() == TableElementType::Func);",
          "295:         for slot in self.elements_mut().iter_mut() {",
          "296:             unsafe {",
          "298:             }",
          "",
          "[Added Lines]",
          "266:     pub fn init_func(",
          "267:         &mut self,",
          "268:         dst: u32,",
          "269:         items: impl ExactSizeIterator<Item = *mut VMFuncRef>,",
          "270:     ) -> Result<(), Trap> {",
          "271:         let dst = usize::try_from(dst).map_err(|_| Trap::TableOutOfBounds)?;",
          "273:         let elements = self",
          "274:             .funcrefs_mut()",
          "275:             .get_mut(dst..)",
          "276:             .and_then(|s| s.get_mut(..items.len()))",
          "277:             .ok_or(Trap::TableOutOfBounds)?;",
          "279:         for (item, slot) in items.zip(elements) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "307:         &mut self,",
          "308:         dst: u32,",
          "310:     ) -> Result<(), Trap> {",
          "316:             .and_then(|s| s.get_mut(..items.len()))",
          "322:         for (item, slot) in items.zip(elements) {",
          "327:         }",
          "328:         Ok(())",
          "329:     }",
          "",
          "[Removed Lines]",
          "306:     pub fn init(",
          "309:         items: impl ExactSizeIterator<Item = TableElement>,",
          "311:         let ty = self.element_type();",
          "313:         let elements = match self",
          "314:             .elements_mut()",
          "315:             .get_mut(usize::try_from(dst).unwrap()..)",
          "317:         {",
          "318:             Some(elements) => elements,",
          "319:             None => return Err(Trap::TableOutOfBounds),",
          "320:         };",
          "323:             debug_assert!(ty.matches(&item));",
          "324:             unsafe {",
          "326:             }",
          "",
          "[Added Lines]",
          "288:     pub fn init_extern(",
          "291:         items: impl ExactSizeIterator<Item = Option<VMExternRef>>,",
          "293:         let dst = usize::try_from(dst).map_err(|_| Trap::TableOutOfBounds)?;",
          "295:         let elements = self",
          "296:             .externrefs_mut()",
          "297:             .get_mut(dst..)",
          "299:             .ok_or(Trap::TableOutOfBounds)?;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "341:             return Err(Trap::TableOutOfBounds);",
          "342:         }",
          "350:             }",
          "353:         }",
          "355:         Ok(())",
          "",
          "[Removed Lines]",
          "344:         debug_assert!(self.type_matches(&val));",
          "346:         let ty = self.element_type();",
          "347:         if let Some((last, elements)) = self.elements_mut()[start..end].split_last_mut() {",
          "348:             for e in elements {",
          "349:                 Self::set_raw(ty, e, val.clone());",
          "352:             Self::set_raw(ty, last, val);",
          "",
          "[Added Lines]",
          "324:         match val {",
          "325:             TableElement::FuncRef(f) => {",
          "326:                 self.funcrefs_mut()[start..end].fill(TaggedFuncRef::from(f));",
          "327:             }",
          "328:             TableElement::ExternRef(e) => {",
          "329:                 self.externrefs_mut()[start..end].fill(e);",
          "330:             }",
          "331:             TableElement::UninitFunc => {",
          "332:                 self.funcrefs_mut()[start..end].fill(TaggedFuncRef::UNINIT);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "426:     pub fn get(&self, index: u32) -> Option<TableElement> {",
          "430:     }",
          "",
          "[Removed Lines]",
          "427:         self.elements()",
          "428:             .get(index as usize)",
          "429:             .map(|p| unsafe { TableElement::clone_from_table_value(self.element_type(), *p) })",
          "",
          "[Added Lines]",
          "412:         let index = usize::try_from(index).ok()?;",
          "413:         match self.element_type() {",
          "414:             TableElementType::Func => self",
          "415:                 .funcrefs()",
          "416:                 .get(index)",
          "417:                 .copied()",
          "418:                 .map(|e| e.into_table_element()),",
          "419:             TableElementType::Extern => self",
          "420:                 .externrefs()",
          "421:                 .get(index)",
          "422:                 .cloned()",
          "423:                 .map(TableElement::ExternRef),",
          "424:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "438:     pub fn set(&mut self, index: u32, elem: TableElement) -> Result<(), ()> {",
          "441:         }",
          "446:         Ok(())",
          "447:     }",
          "",
          "[Removed Lines]",
          "439:         if !self.type_matches(&elem) {",
          "440:             return Err(());",
          "443:         let ty = self.element_type();",
          "444:         let e = self.elements_mut().get_mut(index as usize).ok_or(())?;",
          "445:         Self::set_raw(ty, e, elem);",
          "",
          "[Added Lines]",
          "438:         let index = usize::try_from(index).map_err(|_| ())?;",
          "439:         match elem {",
          "440:             TableElement::FuncRef(f) => {",
          "442:             }",
          "443:             TableElement::UninitFunc => {",
          "445:             }",
          "446:             TableElement::ExternRef(e) => {",
          "448:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "507:         self.element_type().matches(val)",
          "508:     }",
          "511:         match self {",
          "512:             Table::Static { data, size, .. } => unsafe { &data.as_ref()[..*size as usize] },",
          "513:             Table::Dynamic { elements, .. } => &elements[..],",
          "514:         }",
          "515:     }",
          "518:         match self {",
          "519:             Table::Static { data, size, .. } => unsafe { &mut data.as_mut()[..*size as usize] },",
          "520:             Table::Dynamic { elements, .. } => &mut elements[..],",
          "521:         }",
          "522:     }",
          "525:         unsafe {",
          "531:         }",
          "532:     }",
          "",
          "[Removed Lines]",
          "510:     fn elements(&self) -> &[TableValue] {",
          "517:     fn elements_mut(&mut self) -> &mut [TableValue] {",
          "524:     fn set_raw(ty: TableElementType, elem: &mut TableValue, val: TableElement) {",
          "526:             let old = *elem;",
          "530:             let _ = TableElement::from_table_value(ty, old);",
          "",
          "[Added Lines]",
          "514:     fn raw_elements(&self) -> &[TableValue] {",
          "521:     fn raw_elements_mut(&mut self) -> &mut [TableValue] {",
          "528:     fn funcrefs(&self) -> &[TaggedFuncRef] {",
          "529:         assert_eq!(self.element_type(), TableElementType::Func);",
          "531:             let (a, b, c) = self.raw_elements().align_to();",
          "532:             assert!(a.is_empty());",
          "533:             assert!(c.is_empty());",
          "534:             b",
          "535:         }",
          "536:     }",
          "538:     fn funcrefs_mut(&mut self) -> &mut [TaggedFuncRef] {",
          "539:         assert_eq!(self.element_type(), TableElementType::Func);",
          "540:         unsafe {",
          "541:             let (a, b, c) = self.raw_elements_mut().align_to_mut();",
          "542:             assert!(a.is_empty());",
          "543:             assert!(c.is_empty());",
          "544:             b",
          "545:         }",
          "546:     }",
          "548:     fn externrefs(&self) -> &[Option<VMExternRef>] {",
          "549:         assert_eq!(self.element_type(), TableElementType::Extern);",
          "550:         unsafe {",
          "551:             let (a, b, c) = self.raw_elements().align_to();",
          "552:             assert!(a.is_empty());",
          "553:             assert!(c.is_empty());",
          "554:             b",
          "555:         }",
          "556:     }",
          "558:     fn externrefs_mut(&mut self) -> &mut [Option<VMExternRef>] {",
          "559:         assert_eq!(self.element_type(), TableElementType::Extern);",
          "560:         unsafe {",
          "561:             let (a, b, c) = self.raw_elements_mut().align_to_mut();",
          "562:             assert!(a.is_empty());",
          "563:             assert!(c.is_empty());",
          "564:             b",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "545:         match ty {",
          "546:             TableElementType::Func => {",
          "550:             }",
          "551:             TableElementType::Extern => {",
          "559:             }",
          "560:         }",
          "561:     }",
          "563:     fn copy_elements_within(&mut self, dst_range: Range<usize>, src_range: Range<usize>) {",
          "564:         let ty = self.element_type();",
          "566:         match ty {",
          "567:             TableElementType::Func => {",
          "570:             }",
          "571:             TableElementType::Extern => {",
          "574:                 if dst_range.start <= src_range.start {",
          "575:                     for (s, d) in src_range.zip(dst_range) {",
          "578:                     }",
          "579:                 } else {",
          "580:                     for (s, d) in src_range.rev().zip(dst_range.rev()) {",
          "583:                     }",
          "584:                 }",
          "585:             }",
          "",
          "[Removed Lines]",
          "548:                 dst_table.elements_mut()[dst_range]",
          "549:                     .copy_from_slice(&src_table.elements()[src_range]);",
          "553:                 let dst = dst_table.elements_mut();",
          "554:                 let src = src_table.elements();",
          "555:                 for (s, d) in src_range.zip(dst_range) {",
          "556:                     let elem = unsafe { TableElement::clone_from_table_value(ty, src[s]) };",
          "557:                     Self::set_raw(ty, &mut dst[d], elem);",
          "558:                 }",
          "565:         let dst = self.elements_mut();",
          "569:                 dst.copy_within(src_range, dst_range.start);",
          "576:                         let elem = unsafe { TableElement::clone_from_table_value(ty, dst[s]) };",
          "577:                         Self::set_raw(ty, &mut dst[d], elem);",
          "581:                         let elem = unsafe { TableElement::clone_from_table_value(ty, dst[s]) };",
          "582:                         Self::set_raw(ty, &mut dst[d], elem);",
          "",
          "[Added Lines]",
          "582:                 dst_table.funcrefs_mut()[dst_range]",
          "583:                     .copy_from_slice(&src_table.funcrefs()[src_range]);",
          "586:                 dst_table.externrefs_mut()[dst_range]",
          "587:                     .clone_from_slice(&src_table.externrefs()[src_range]);",
          "597:                 self.funcrefs_mut().copy_within(src_range, dst_range.start);",
          "602:                 let elements = self.externrefs_mut();",
          "605:                         elements[d] = elements[s].clone();",
          "609:                         elements[d] = elements[s].clone();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "590: impl Drop for Table {",
          "591:     fn drop(&mut self) {",
          "602:         }",
          "603:     }",
          "604: }",
          "",
          "[Removed Lines]",
          "592:         let ty = self.element_type();",
          "595:         if let TableElementType::Func = ty {",
          "596:             return;",
          "597:         }",
          "600:         for element in self.elements() {",
          "601:             drop(unsafe { TableElement::from_table_value(ty, *element) });",
          "",
          "[Added Lines]",
          "619:         match self.element_type() {",
          "621:             TableElementType::Func => {}",
          "625:             TableElementType::Extern => {",
          "626:                 for e in self.externrefs_mut() {",
          "627:                     let _ = e.take();",
          "628:                 }",
          "629:             }",
          "",
          "---------------"
        ],
        "tests/all/gc.rs||tests/all/gc.rs": [
          "File: tests/all/gc.rs -> tests/all/gc.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "652:     Ok(())",
          "653: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "655: #[test]",
          "656: #[cfg_attr(miri, ignore)]",
          "657: fn no_leak_with_global_get_elem_segment() -> anyhow::Result<()> {",
          "658:     let dropped = Arc::new(AtomicBool::new(false));",
          "660:     let engine = Engine::default();",
          "661:     let mut store = Store::new(&engine, ());",
          "662:     let module = Module::new(",
          "663:         &engine,",
          "664:         r#\"",
          "665:             (module",
          "666:                 (import \"\" \"\" (global $init externref))",
          "667:                 (start $f)",
          "668:                 (table $t 1 externref)",
          "669:                 (elem $e externref (global.get $init))",
          "671:                 (func $f",
          "672:                     i32.const 0",
          "673:                     i32.const 0",
          "674:                     i32.const 1",
          "675:                     table.init $t $e",
          "677:                     i32.const 0",
          "678:                     i32.const 0",
          "679:                     i32.const 1",
          "680:                     table.init $t $e",
          "681:                 )",
          "682:             )",
          "683:         \"#,",
          "684:     )?;",
          "686:     let global = Global::new(",
          "687:         &mut store,",
          "688:         GlobalType::new(ValType::EXTERNREF, Mutability::Const),",
          "689:         Val::ExternRef(Some(ExternRef::new(SetFlagOnDrop(dropped.clone())))),",
          "690:     )?;",
          "692:     Instance::new(&mut store, &module, &[global.into()])?;",
          "694:     drop(store);",
          "696:     assert!(dropped.load(SeqCst));",
          "697:     Ok(())",
          "698: }",
          "700: #[test]",
          "701: #[cfg_attr(miri, ignore)]",
          "702: fn table_init_with_externref_global_get() -> anyhow::Result<()> {",
          "703:     let dropped = Arc::new(AtomicBool::new(false));",
          "705:     let mut config = Config::new();",
          "706:     config.wasm_function_references(true);",
          "707:     let engine = Engine::new(&config)?;",
          "708:     let mut store = Store::new(&engine, ());",
          "709:     let module = Module::new(",
          "710:         &engine,",
          "711:         r#\"",
          "712:             (module",
          "713:                 (import \"\" \"\" (global $init externref))",
          "714:                 (table $t 1 externref (global.get $init))",
          "715:             )",
          "716:         \"#,",
          "717:     )?;",
          "719:     let global = Global::new(",
          "720:         &mut store,",
          "721:         GlobalType::new(ValType::EXTERNREF, Mutability::Const),",
          "722:         Val::ExternRef(Some(ExternRef::new(SetFlagOnDrop(dropped.clone())))),",
          "723:     )?;",
          "725:     Instance::new(&mut store, &module, &[global.into()])?;",
          "727:     drop(store);",
          "729:     assert!(dropped.load(SeqCst));",
          "730:     Ok(())",
          "731: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36fb62ca3bea7dd1456f12ead03084e2ceb48cda",
      "candidate_info": {
        "commit_hash": "36fb62ca3bea7dd1456f12ead03084e2ceb48cda",
        "repo": "bytecodealliance/wasmtime",
        "commit_url": "https://github.com/bytecodealliance/wasmtime/commit/36fb62ca3bea7dd1456f12ead03084e2ceb48cda",
        "files": [
          "crates/environ/src/module.rs",
          "crates/environ/src/module_environ.rs",
          "crates/runtime/src/instance.rs",
          "crates/runtime/src/instance/allocator.rs",
          "crates/runtime/src/table.rs",
          "crates/wast/src/spectest.rs",
          "tests/all/wast.rs",
          "tests/spec_testsuite"
        ],
        "message": "Support `global.get` in more constant expressions (#7996)\n\nThis commit updates Wasmtime to support `global.get` in constant\nexpressions when located in table initializers and element segments.\nPre-reference-types this never came up because there was no valid\n`global.get` that would typecheck. After the reference-types proposal\nlanded however this became possible but Wasmtime did not support it.\nThis was surfaced in #6705 when the spec test suite was updated and has\na new test that exercises this functionality.\n\nThis commit both updates the spec test suite and additionally adds\nsupport for this new form of element segment and table initialization\nexpression.\n\nThe fact that Wasmtime hasn't supported this until now also means that\nwe have a gap in our fuzz-testing infrastructure. The `wasm-smith`\ngenerator is being updated in bytecodealliance/wasm-tools#1426 to\ngenerate modules with this particular feature and I've tested that with\nthat PR fuzzing here eventually generates an error before this PR.\n\nCloses #6705",
        "before_after_code_files": [
          "crates/environ/src/module.rs||crates/environ/src/module.rs",
          "crates/environ/src/module_environ.rs||crates/environ/src/module_environ.rs",
          "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs",
          "crates/runtime/src/instance/allocator.rs||crates/runtime/src/instance/allocator.rs",
          "crates/runtime/src/table.rs||crates/runtime/src/table.rs",
          "crates/wast/src/spectest.rs||crates/wast/src/spectest.rs",
          "tests/all/wast.rs||tests/all/wast.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs"
          ],
          "candidate": [
            "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs"
          ]
        }
      },
      "candidate_diff": {
        "crates/environ/src/module.rs||crates/environ/src/module.rs": [
          "File: crates/environ/src/module.rs -> crates/environ/src/module.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:                 Some(top) => top,",
          "464:                 None => break,",
          "465:             };",
          "",
          "[Removed Lines]",
          "462:             let top = match segment.offset.checked_add(segment.elements.len() as u32) {",
          "",
          "[Added Lines]",
          "462:             let top = match segment.offset.checked_add(segment.elements.len()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482:                 WasmHeapType::Extern => break,",
          "483:             }",
          "485:             let precomputed =",
          "486:                 match &mut self.module.table_initialization.initial_values[defined_index] {",
          "487:                     TableInitialValue::Null { precomputed } => precomputed,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487:             let function_elements = match &segment.elements {",
          "488:                 TableSegmentElements::Functions(indices) => indices,",
          "489:                 TableSegmentElements::Expressions(_) => break,",
          "490:             };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "496:                 };",
          "",
          "[Removed Lines]",
          "495:                     TableInitialValue::FuncRef(_) => break,",
          "",
          "[Added Lines]",
          "502:                     TableInitialValue::FuncRef(_) | TableInitialValue::GlobalGet(_) => break,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "504:                 precomputed.resize(top as usize, FuncIndex::reserved_value());",
          "505:             }",
          "506:             let dst = &mut precomputed[(segment.offset as usize)..(top as usize)];",
          "510:             let _ = segments.next();",
          "",
          "[Removed Lines]",
          "507:             dst.copy_from_slice(&segment.elements[..]);",
          "",
          "[Added Lines]",
          "514:             dst.copy_from_slice(&function_elements);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "759:     FuncRef(FuncIndex),",
          "760: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "770:     GlobalGet(GlobalIndex),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "770:     pub offset: u32,",
          "773: }",
          "",
          "[Removed Lines]",
          "772:     pub elements: Box<[FuncIndex]>,",
          "",
          "[Added Lines]",
          "783:     pub elements: TableSegmentElements,",
          "784: }",
          "788: #[derive(Clone, Debug, Serialize, Deserialize)]",
          "789: pub enum TableSegmentElements {",
          "792:     Functions(Box<[FuncIndex]>),",
          "794:     Expressions(Box<[TableElementExpression]>),",
          "795: }",
          "797: impl TableSegmentElements {",
          "799:     pub fn len(&self) -> u32 {",
          "800:         match self {",
          "801:             Self::Functions(s) => s.len() as u32,",
          "802:             Self::Expressions(s) => s.len() as u32,",
          "803:         }",
          "804:     }",
          "805: }",
          "808: #[derive(Clone, Debug, Serialize, Deserialize)]",
          "809: pub enum TableElementExpression {",
          "811:     Function(FuncIndex),",
          "813:     GlobalGet(GlobalIndex),",
          "815:     Null,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "815:     pub memory_initialization: MemoryInitialization,",
          "821:     pub passive_elements_map: BTreeMap<ElemIndex, usize>,",
          "",
          "[Removed Lines]",
          "818:     pub passive_elements: Vec<Box<[FuncIndex]>>,",
          "",
          "[Added Lines]",
          "861:     pub passive_elements: Vec<TableSegmentElements>,",
          "",
          "---------------"
        ],
        "crates/environ/src/module_environ.rs||crates/environ/src/module_environ.rs": [
          "File: crates/environ/src/module_environ.rs -> crates/environ/src/module_environ.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use crate::module::{",
          "2:     FuncRefIndex, Initializer, MemoryInitialization, MemoryInitializer, MemoryPlan, Module,",
          "4: };",
          "5: use crate::{",
          "6:     DataIndex, DefinedFuncIndex, ElemIndex, EntityIndex, EntityType, FuncIndex, GlobalIndex,",
          "",
          "[Removed Lines]",
          "3:     ModuleType, TablePlan, TableSegment,",
          "",
          "[Added Lines]",
          "3:     ModuleType, TableElementExpression, TablePlan, TableSegment, TableSegmentElements,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8:     Tunables, TypeConvert, TypeIndex, Unsigned, WasmError, WasmHeapType, WasmResult, WasmValType,",
          "9:     WasmparserTypeConverter,",
          "10: };",
          "12: use std::borrow::Cow;",
          "13: use std::collections::HashMap;",
          "14: use std::path::PathBuf;",
          "",
          "[Removed Lines]",
          "11: use cranelift_entity::packed_option::ReservedValue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "320:                                     self.flag_func_escaped(index);",
          "321:                                     TableInitialValue::FuncRef(index)",
          "322:                                 }",
          "323:                                 s => {",
          "324:                                     return Err(WasmError::Unsupported(format!(",
          "325:                                         \"unsupported init expr in table section: {:?}\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:                                 Operator::GlobalGet { global_index } => {",
          "323:                                     let index = GlobalIndex::from_u32(global_index);",
          "324:                                     TableInitialValue::GlobalGet(index)",
          "325:                                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "454:                         ElementItems::Functions(funcs) => {",
          "456:                             for func in funcs {",
          "457:                                 let func = FuncIndex::from_u32(func?);",
          "458:                                 self.flag_func_escaped(func);",
          "460:                             }",
          "461:                         }",
          "467:                                     Operator::RefFunc { function_index } => {",
          "468:                                         let func = FuncIndex::from_u32(function_index);",
          "469:                                         self.flag_func_escaped(func);",
          "471:                                     }",
          "472:                                     s => {",
          "473:                                         return Err(WasmError::Unsupported(format!(",
          "",
          "[Removed Lines]",
          "452:                     let mut elements = Vec::new();",
          "453:                     match items {",
          "455:                             elements.reserve(usize::try_from(funcs.count()).unwrap());",
          "459:                                 elements.push(func);",
          "462:                         ElementItems::Expressions(_ty, funcs) => {",
          "463:                             elements.reserve(usize::try_from(funcs.count()).unwrap());",
          "464:                             for func in funcs {",
          "465:                                 let func = match func?.get_binary_reader().read_operator()? {",
          "466:                                     Operator::RefNull { .. } => FuncIndex::reserved_value(),",
          "470:                                         func",
          "",
          "[Added Lines]",
          "455:                     let elements = match items {",
          "457:                             let mut elems =",
          "458:                                 Vec::with_capacity(usize::try_from(funcs.count()).unwrap());",
          "462:                                 elems.push(func);",
          "464:                             TableSegmentElements::Functions(elems.into())",
          "466:                         ElementItems::Expressions(_ty, items) => {",
          "467:                             let mut exprs =",
          "468:                                 Vec::with_capacity(usize::try_from(items.count()).unwrap());",
          "469:                             for expr in items {",
          "470:                                 let expr = match expr?.get_binary_reader().read_operator()? {",
          "471:                                     Operator::RefNull { .. } => TableElementExpression::Null,",
          "475:                                         TableElementExpression::Function(func)",
          "476:                                     }",
          "477:                                     Operator::GlobalGet { global_index } => {",
          "478:                                         let global = GlobalIndex::from_u32(global_index);",
          "479:                                         TableElementExpression::GlobalGet(global)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "476:                                         )));",
          "477:                                     }",
          "478:                                 };",
          "480:                             }",
          "481:                         }",
          "484:                     match kind {",
          "485:                         ElementKind::Active {",
          "",
          "[Removed Lines]",
          "479:                                 elements.push(func);",
          "482:                     }",
          "",
          "[Added Lines]",
          "488:                                 exprs.push(expr);",
          "490:                             TableSegmentElements::Expressions(exprs.into())",
          "492:                     };",
          "",
          "---------------"
        ],
        "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs": [
          "File: crates/runtime/src/instance.rs -> crates/runtime/src/instance.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: use wasmtime_environ::{",
          "30:     packed_option::ReservedValue, DataIndex, DefinedGlobalIndex, DefinedMemoryIndex,",
          "31:     DefinedTableIndex, ElemIndex, EntityIndex, EntityRef, EntitySet, FuncIndex, GlobalIndex,",
          "34: };",
          "35: #[cfg(feature = \"wmemcheck\")]",
          "36: use wasmtime_wmemcheck::Wmemcheck;",
          "",
          "[Removed Lines]",
          "32:     GlobalInit, HostPtr, MemoryIndex, MemoryPlan, Module, PrimaryMap, TableIndex,",
          "33:     TableInitialValue, Trap, VMOffsets, WasmHeapType, WasmRefType, WasmValType, VMCONTEXT_MAGIC,",
          "",
          "[Added Lines]",
          "32:     GlobalInit, HostPtr, MemoryIndex, MemoryPlan, Module, PrimaryMap, TableElementExpression,",
          "33:     TableIndex, TableInitialValue, TableSegmentElements, Trap, VMOffsets, WasmHeapType,",
          "34:     WasmRefType, WasmValType, VMCONTEXT_MAGIC,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "805:         let module = self.module().clone();",
          "807:         let elements = match module.passive_elements_map.get(&elem_index) {",
          "808:             Some(index) if !self.dropped_elements.contains(elem_index) => {",
          "810:             }",
          "812:         };",
          "813:         self.table_init_segment(table_index, elements, dst, src, len)",
          "814:     }",
          "",
          "[Removed Lines]",
          "809:                 module.passive_elements[*index].as_ref()",
          "811:             _ => &[],",
          "",
          "[Added Lines]",
          "808:         let empty = TableSegmentElements::Functions(Box::new([]));",
          "811:                 &module.passive_elements[*index]",
          "813:             _ => &empty,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "816:     pub(crate) fn table_init_segment(",
          "817:         &mut self,",
          "818:         table_index: TableIndex,",
          "820:         dst: u32,",
          "821:         src: u32,",
          "822:         len: u32,",
          "",
          "[Removed Lines]",
          "819:         elements: &[FuncIndex],",
          "",
          "[Added Lines]",
          "821:         elements: &TableSegmentElements,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "826:         let table = unsafe { &mut *self.get_table(table_index) };",
          "839:                     dst,",
          "843:                 )?;",
          "844:             }",
          "849:             }",
          "850:         }",
          "851:         Ok(())",
          "852:     }",
          "",
          "[Removed Lines]",
          "828:         let elements = match elements",
          "829:             .get(usize::try_from(src).unwrap()..)",
          "830:             .and_then(|s| s.get(..usize::try_from(len).unwrap()))",
          "831:         {",
          "832:             Some(elements) => elements,",
          "833:             None => return Err(Trap::TableOutOfBounds),",
          "834:         };",
          "836:         match table.element_type() {",
          "837:             TableElementType::Func => {",
          "838:                 table.init_funcs(",
          "840:                     elements",
          "841:                         .iter()",
          "842:                         .map(|idx| self.get_func_ref(*idx).unwrap_or(std::ptr::null_mut())),",
          "846:             TableElementType::Extern => {",
          "847:                 debug_assert!(elements.iter().all(|e| *e == FuncIndex::reserved_value()));",
          "848:                 table.fill(dst, TableElement::ExternRef(None), len)?;",
          "",
          "[Added Lines]",
          "829:         let src = usize::try_from(src).map_err(|_| Trap::TableOutOfBounds)?;",
          "830:         let len = usize::try_from(len).map_err(|_| Trap::TableOutOfBounds)?;",
          "832:         match elements {",
          "833:             TableSegmentElements::Functions(funcs) => {",
          "834:                 let elements = funcs",
          "835:                     .get(src..)",
          "836:                     .and_then(|s| s.get(..len))",
          "837:                     .ok_or(Trap::TableOutOfBounds)?;",
          "838:                 table.init(",
          "840:                     elements.iter().map(|idx| {",
          "841:                         TableElement::FuncRef(",
          "842:                             self.get_func_ref(*idx).unwrap_or(std::ptr::null_mut()),",
          "843:                         )",
          "844:                     }),",
          "847:             TableSegmentElements::Expressions(exprs) => {",
          "848:                 let ty = table.element_type();",
          "849:                 let exprs = exprs",
          "850:                     .get(src..)",
          "851:                     .and_then(|s| s.get(..len))",
          "852:                     .ok_or(Trap::TableOutOfBounds)?;",
          "853:                 table.init(",
          "854:                     dst,",
          "855:                     exprs.iter().map(|expr| match ty {",
          "856:                         TableElementType::Func => {",
          "857:                             let funcref = match expr {",
          "858:                                 TableElementExpression::Null => std::ptr::null_mut(),",
          "859:                                 TableElementExpression::Function(idx) => {",
          "860:                                     self.get_func_ref(*idx).unwrap()",
          "861:                                 }",
          "862:                                 TableElementExpression::GlobalGet(idx) => {",
          "863:                                     let global = self.defined_or_imported_global_ptr(*idx);",
          "864:                                     unsafe { (*global).as_func_ref() }",
          "865:                                 }",
          "866:                             };",
          "867:                             TableElement::FuncRef(funcref)",
          "868:                         }",
          "869:                         TableElementType::Extern => {",
          "870:                             let externref = match expr {",
          "871:                                 TableElementExpression::Null => None,",
          "872:                                 TableElementExpression::Function(_) => unreachable!(),",
          "873:                                 TableElementExpression::GlobalGet(idx) => {",
          "874:                                     let global = self.defined_or_imported_global_ptr(*idx);",
          "875:                                     unsafe { (*global).as_externref().clone() }",
          "876:                                 }",
          "877:                             };",
          "878:                             TableElement::ExternRef(externref)",
          "879:                         }",
          "880:                     }),",
          "881:                 )?;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1060:                 let module = self.module();",
          "1061:                 let precomputed = match &module.table_initialization.initial_values[idx] {",
          "1062:                     TableInitialValue::Null { precomputed } => precomputed,",
          "1064:                 };",
          "1065:                 let func_index = precomputed.get(i as usize).cloned();",
          "1066:                 let func_ref = func_index",
          "",
          "[Removed Lines]",
          "1063:                     TableInitialValue::FuncRef(_) => unreachable!(),",
          "",
          "[Added Lines]",
          "1097:                     TableInitialValue::FuncRef(_) | TableInitialValue::GlobalGet(_) => {",
          "1098:                         unreachable!()",
          "1099:                     }",
          "",
          "---------------"
        ],
        "crates/runtime/src/instance/allocator.rs||crates/runtime/src/instance/allocator.rs": [
          "File: crates/runtime/src/instance/allocator.rs -> crates/runtime/src/instance/allocator.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "507:         let table = unsafe { &*instance.get_table(segment.table_index) };",
          "508:         let start = get_table_init_start(segment, instance)?;",
          "509:         let start = usize::try_from(start).unwrap();",
          "512:         match end {",
          "513:             Some(end) if end <= table.size() as usize => {",
          "",
          "[Removed Lines]",
          "510:         let end = start.checked_add(segment.elements.len());",
          "",
          "[Added Lines]",
          "510:         let end = start.checked_add(usize::try_from(segment.elements.len()).unwrap());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "533:                 let table = unsafe { &mut *instance.get_defined_table(table) };",
          "534:                 table.init_func(funcref)?;",
          "535:             }",
          "536:         }",
          "537:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537:             TableInitialValue::GlobalGet(idx) => unsafe {",
          "538:                 let global = instance.defined_or_imported_global_ptr(*idx);",
          "539:                 let funcref = (*global).as_func_ref();",
          "540:                 let table = &mut *instance.get_defined_table(table);",
          "541:                 table.init_func(funcref)?;",
          "542:             },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "550:             &segment.elements,",
          "551:             start,",
          "552:             0,",
          "554:         )?;",
          "555:     }",
          "",
          "[Removed Lines]",
          "553:             segment.elements.len() as u32,",
          "",
          "[Added Lines]",
          "560:             segment.elements.len(),",
          "",
          "---------------"
        ],
        "crates/runtime/src/table.rs||crates/runtime/src/table.rs": [
          "File: crates/runtime/src/table.rs -> crates/runtime/src/table.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     Extern,",
          "40: }",
          "44: unsafe impl Send for TableElement where VMExternRef: Send {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: impl TableElementType {",
          "43:     fn matches(&self, val: &TableElement) -> bool {",
          "44:         match (val, self) {",
          "45:             (TableElement::FuncRef(_), TableElementType::Func) => true,",
          "46:             (TableElement::ExternRef(_), TableElementType::Extern) => true,",
          "47:             _ => false,",
          "48:         }",
          "49:     }",
          "50: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:         &mut self,",
          "298:         dst: u32,",
          "300:     ) -> Result<(), Trap> {",
          "303:         let elements = match self",
          "304:             .elements_mut()",
          "",
          "[Removed Lines]",
          "296:     pub fn init_funcs(",
          "299:         items: impl ExactSizeIterator<Item = *mut VMFuncRef>,",
          "301:         assert!(self.element_type() == TableElementType::Func);",
          "",
          "[Added Lines]",
          "306:     pub fn init(",
          "309:         items: impl ExactSizeIterator<Item = TableElement>,",
          "311:         let ty = self.element_type();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "310:         };",
          "312:         for (item, slot) in items.zip(elements) {",
          "313:             unsafe {",
          "315:             }",
          "316:         }",
          "317:         Ok(())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:             debug_assert!(ty.matches(&item));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "493:     }",
          "495:     fn type_matches(&self, val: &TableElement) -> bool {",
          "501:     }",
          "503:     fn elements(&self) -> &[TableValue] {",
          "",
          "[Removed Lines]",
          "496:         match (&val, self.element_type()) {",
          "497:             (TableElement::FuncRef(_), TableElementType::Func) => true,",
          "498:             (TableElement::ExternRef(_), TableElementType::Extern) => true,",
          "499:             _ => false,",
          "500:         }",
          "",
          "[Added Lines]",
          "507:         self.element_type().matches(val)",
          "",
          "---------------"
        ],
        "crates/wast/src/spectest.rs||crates/wast/src/spectest.rs": [
          "File: crates/wast/src/spectest.rs -> crates/wast/src/spectest.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     linker.define(&mut *store, \"spectest\", \"global_i64\", g)?;",
          "32:     let ty = GlobalType::new(ValType::F32, Mutability::Const);",
          "34:     linker.define(&mut *store, \"spectest\", \"global_f32\", g)?;",
          "36:     let ty = GlobalType::new(ValType::F64, Mutability::Const);",
          "38:     linker.define(&mut *store, \"spectest\", \"global_f64\", g)?;",
          "40:     let ty = TableType::new(RefType::FUNCREF, 10, Some(20));",
          "",
          "[Removed Lines]",
          "33:     let g = Global::new(&mut *store, ty, Val::F32(0x4426_8000))?;",
          "37:     let g = Global::new(&mut *store, ty, Val::F64(0x4084_d000_0000_0000))?;",
          "",
          "[Added Lines]",
          "33:     let g = Global::new(&mut *store, ty, Val::F32(0x4426_a666))?;",
          "37:     let g = Global::new(&mut *store, ty, Val::F64(0x4084_d4cc_cccc_cccd))?;",
          "",
          "---------------"
        ],
        "tests/all/wast.rs||tests/all/wast.rs": [
          "File: tests/all/wast.rs -> tests/all/wast.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:             .max_memory_protection_keys(2)",
          "134:             .memory_pages(805)",
          "135:             .max_memories_per_module(if multi_memory { 9 } else { 1 })",
          "",
          "[Removed Lines]",
          "136:             .max_tables_per_module(4);",
          "",
          "[Added Lines]",
          "136:             .max_tables_per_module(5);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24f7f40f5ec5f96722e97abe4090195a0afa59d2",
      "candidate_info": {
        "commit_hash": "24f7f40f5ec5f96722e97abe4090195a0afa59d2",
        "repo": "bytecodealliance/wasmtime",
        "commit_url": "https://github.com/bytecodealliance/wasmtime/commit/24f7f40f5ec5f96722e97abe4090195a0afa59d2",
        "files": [
          "crates/runtime/src/instance.rs",
          "tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast"
        ],
        "message": "Fix a panic using tables with the wrong type (#8283) (#8284)\n\nThis commit fixes an accidental issue introduced in #8018 where using an\nelement segment which had been dropped with an `externref` table would\ncause a panic. The panic happened due to an assertion that tables are\nbeing used with the right type of item and that was being mismatched.\nThe underlying issue was that dropped element segments are modeled as an\nempty element segment but the empty element segment was using the\n\"functions\" encoding as opposed to the \"expressions\" encoding. This\nmeant that code later assumed that due to the use of functions the table\nmust be a table-of-functions, but this was not correct for\nexternref-based tables.\n\nThe fix in this commit is to instead model the encoding as an\n\"expressions\" list which means that the table type is dispatched on to\ncall the appropriate initializer.\n\nThere is no memory safety issue with this mistake as the assertion was\nspecifically targetted at preventing memory safety. This does, however,\nenable any WebAssembly module to panic a host.\n\nCloses #8281",
        "before_after_code_files": [
          "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs",
          "tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast||tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs",
            "tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast||tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast"
          ],
          "candidate": [
            "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs",
            "tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast||tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast"
          ]
        }
      },
      "candidate_diff": {
        "crates/runtime/src/instance.rs||crates/runtime/src/instance.rs": [
          "File: crates/runtime/src/instance.rs -> crates/runtime/src/instance.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "806:         let module = self.module().clone();",
          "809:         let elements = match module.passive_elements_map.get(&elem_index) {",
          "810:             Some(index) if !self.dropped_elements.contains(elem_index) => {",
          "811:                 &module.passive_elements[*index]",
          "",
          "[Removed Lines]",
          "808:         let empty = TableSegmentElements::Functions(Box::new([]));",
          "",
          "[Added Lines]",
          "812:         let empty = TableSegmentElements::Expressions(Box::new([]));",
          "",
          "---------------"
        ],
        "tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast||tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast": [
          "File: tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast -> tests/misc_testsuite/externref-table-dropped-segment-issue-8281.wast",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: (module",
          "2:   (table $t 0 0 externref)",
          "4:   (func (export \"f1\")",
          "5:     (i32.const 0)",
          "6:     (i32.const 0)",
          "7:     (i32.const 0)",
          "8:     (table.init $t $declared)",
          "9:   )",
          "11:   (func (export \"f2\")",
          "12:     (i32.const 0)",
          "13:     (i32.const 0)",
          "14:     (i32.const 0)",
          "15:     (table.init $t $passive)",
          "17:     (elem.drop $passive)",
          "19:     (i32.const 0)",
          "20:     (i32.const 0)",
          "21:     (i32.const 0)",
          "22:     (table.init $t $passive)",
          "23:   )",
          "25:   (func (export \"f3\")",
          "26:     (i32.const 0)",
          "27:     (i32.const 0)",
          "28:     (i32.const 0)",
          "29:     (table.init $t $active)",
          "30:   )",
          "32:   (elem $declared declare externref)",
          "33:   (elem $passive externref)",
          "34:   (elem $active (i32.const 0) externref)",
          "35: )",
          "37: (assert_return (invoke \"f1\"))",
          "38: (assert_return (invoke \"f2\"))",
          "39: (assert_return (invoke \"f3\"))",
          "",
          "---------------"
        ]
      }
    }
  ]
}