{
  "cve_id": "CVE-2021-4026",
  "cve_desc": "bookstack is vulnerable to Improper Access Control",
  "repo": "bookstackapp/bookstack",
  "patch_hash": "b4fa82e3298a15443ca40bff205b7a16a1031d92",
  "patch_info": {
    "commit_hash": "b4fa82e3298a15443ca40bff205b7a16a1031d92",
    "repo": "bookstackapp/bookstack",
    "commit_url": "https://github.com/bookstackapp/bookstack/commit/b4fa82e3298a15443ca40bff205b7a16a1031d92",
    "files": [
      "app/Actions/ActivityService.php",
      "app/Auth/Permissions/PermissionService.php",
      "app/Exceptions/Handler.php",
      "tests/Api/AttachmentsApiTest.php"
    ],
    "message": "Fixed related permissions query not considering drafts\n\nPage-related items added on drafts could be visible in certain scenarios\nsince the applied permissions query filters would not consider\npage draft visibility.\nThis commit alters queries on related items to apply such filtering.\n\nIncluded test to cover API scenario.\nThanks to @haxatron for reporting.",
    "before_after_code_files": [
      "app/Actions/ActivityService.php||app/Actions/ActivityService.php",
      "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php",
      "app/Exceptions/Handler.php||app/Exceptions/Handler.php",
      "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
    ]
  },
  "patch_diff": {
    "app/Actions/ActivityService.php||app/Actions/ActivityService.php": [
      "File: app/Actions/ActivityService.php -> app/Actions/ActivityService.php"
    ],
    "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
      "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "608:     public function filterRestrictedEntityRelations($query, string $tableName, string $entityIdColumn, string $entityTypeColumn, string $action = 'view')",
      "609:     {",
      "610:         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn, 'entityTypeColumn' => $entityTypeColumn];",
      "624:         });",
      "626:         $this->clean();",
      "",
      "[Removed Lines]",
      "612:         $q = $query->where(function ($query) use ($tableDetails, $action) {",
      "613:             $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {",
      "615:                 $permissionQuery->select(['role_id'])->from('joint_permissions')",
      "616:                     ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "617:                     ->whereColumn('joint_permissions.entity_type', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
      "618:                     ->where('action', '=', $action)",
      "619:                     ->whereIn('role_id', $this->getCurrentUserRoles())",
      "620:                     ->where(function (QueryBuilder $query) {",
      "621:                         $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "622:                     });",
      "623:             });",
      "",
      "[Added Lines]",
      "613:         $pageMorphClass = (new Page())->getMorphClass();",
      "615:         $q = $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {",
      "617:             $permissionQuery->select(['role_id'])->from('joint_permissions')",
      "618:                 ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "619:                 ->whereColumn('joint_permissions.entity_type', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
      "620:                 ->where('joint_permissions.action', '=', $action)",
      "621:                 ->whereIn('joint_permissions.role_id', $this->getCurrentUserRoles())",
      "622:                 ->where(function (QueryBuilder $query) {",
      "623:                     $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "624:                 });",
      "625:         })->where(function ($query) use ($tableDetails, $pageMorphClass) {",
      "627:             $query->where($tableDetails['entityTypeColumn'], '!=', $pageMorphClass)",
      "628:                 ->orWhereExists(function(QueryBuilder $query) use ($tableDetails, $pageMorphClass) {",
      "629:                     $query->select('id')->from('pages')",
      "630:                         ->whereColumn('pages.id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "631:                         ->where($tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'], '=', $pageMorphClass)",
      "632:                         ->where('pages.draft', '=', false);",
      "633:                 });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "635:     public function filterRelatedEntity(string $entityClass, Builder $query, string $tableName, string $entityIdColumn): Builder",
      "636:     {",
      "652:                 });",
      "654:         });",
      "656:         $this->clean();",
      "658:         return $q;",
      "",
      "[Removed Lines]",
      "637:         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn];",
      "638:         $morphClass = app($entityClass)->getMorphClass();",
      "640:         $q = $query->where(function ($query) use ($tableDetails, $morphClass) {",
      "641:             $query->where(function ($query) use (&$tableDetails, $morphClass) {",
      "642:                 $query->whereExists(function ($permissionQuery) use (&$tableDetails, $morphClass) {",
      "644:                     $permissionQuery->select('id')->from('joint_permissions')",
      "645:                         ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "646:                         ->where('entity_type', '=', $morphClass)",
      "647:                         ->where('action', '=', 'view')",
      "648:                         ->whereIn('role_id', $this->getCurrentUserRoles())",
      "649:                         ->where(function (QueryBuilder $query) {",
      "650:                             $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "651:                         });",
      "653:             })->orWhere($tableDetails['entityIdColumn'], '=', 0);",
      "",
      "[Added Lines]",
      "647:         $fullEntityIdColumn = $tableName . '.' . $entityIdColumn;",
      "648:         $instance = new $entityClass;",
      "649:         $morphClass = $instance->getMorphClass();",
      "651:         $existsQuery = function($permissionQuery) use ($fullEntityIdColumn, $morphClass) {",
      "653:             $permissionQuery->select('joint_permissions.role_id')->from('joint_permissions')",
      "654:                 ->whereColumn('joint_permissions.entity_id', '=', $fullEntityIdColumn)",
      "655:                 ->where('joint_permissions.entity_type', '=', $morphClass)",
      "656:                 ->where('joint_permissions.action', '=', 'view')",
      "657:                 ->whereIn('joint_permissions.role_id', $this->getCurrentUserRoles())",
      "658:                 ->where(function (QueryBuilder $query) {",
      "659:                     $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "661:         };",
      "663:         $q = $query->where(function ($query) use ($existsQuery, $fullEntityIdColumn) {",
      "664:             $query->whereExists($existsQuery)",
      "665:                 ->orWhere($fullEntityIdColumn, '=', 0);",
      "668:         if ($instance instanceof Page) {",
      "670:             $q->whereExists(function(QueryBuilder $query) use ($fullEntityIdColumn) {",
      "671:                 $query->select('id')->from('pages')",
      "672:                     ->whereColumn('pages.id', '=', $fullEntityIdColumn)",
      "673:                     ->where(function (QueryBuilder $query) {",
      "674:                         $query->where('pages.draft', '=', false)",
      "675:                             ->orWhere('pages.owned_by', '=', $this->currentUser()->id);",
      "676:                     });",
      "677:             });",
      "678:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "667:     protected function addJointHasPermissionCheck($query, int $userIdToCheck)",
      "668:     {",
      "672:         });",
      "673:     }",
      "",
      "[Removed Lines]",
      "669:         $query->where('has_permission', '=', true)->orWhere(function ($query) use ($userIdToCheck) {",
      "670:             $query->where('has_permission_own', '=', true)",
      "671:                 ->where('owned_by', '=', $userIdToCheck);",
      "",
      "[Added Lines]",
      "693:         $query->where('joint_permissions.has_permission', '=', true)->orWhere(function ($query) use ($userIdToCheck) {",
      "694:             $query->where('joint_permissions.has_permission_own', '=', true)",
      "695:                 ->where('joint_permissions.owned_by', '=', $userIdToCheck);",
      "",
      "---------------"
    ],
    "app/Exceptions/Handler.php||app/Exceptions/Handler.php": [
      "File: app/Exceptions/Handler.php -> app/Exceptions/Handler.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: use Exception;",
      "6: use Illuminate\\Auth\\AuthenticationException;",
      "7: use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;",
      "8: use Illuminate\\Http\\JsonResponse;",
      "9: use Illuminate\\Http\\Request;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: use Illuminate\\Database\\Eloquent\\ModelNotFoundException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:     {",
      "81:         $headers = [];",
      "82:         if ($e instanceof HttpException) {",
      "83:             $code = $e->getStatusCode();",
      "84:             $headers = $e->getHeaders();",
      "85:         }",
      "87:         $responseData = [",
      "88:             'error' => [",
      "89:                 'message' => $e->getMessage(),",
      "",
      "[Removed Lines]",
      "78:     protected function renderApiException(Exception $e): JsonResponse",
      "80:         $code = $e->getCode() === 0 ? 500 : $e->getCode();",
      "",
      "[Added Lines]",
      "79:     protected function renderApiException(Throwable $e): JsonResponse",
      "81:         $code = 500;",
      "89:         if ($e instanceof ModelNotFoundException) {",
      "90:             $code = 404;",
      "91:         }",
      "",
      "---------------"
    ],
    "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php": [
      "File: tests/Api/AttachmentsApiTest.php -> tests/Api/AttachmentsApiTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "224:         unlink(storage_path($attachment->path));",
      "225:     }",
      "227:     public function test_update_endpoint()",
      "228:     {",
      "229:         $this->actingAsApiAdmin();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227:     public function test_attachment_not_visible_on_other_users_draft()",
      "228:     {",
      "229:         $this->actingAsApiAdmin();",
      "230:         $editor = $this->getEditor();",
      "233:         $page = Page::query()->first();",
      "234:         $page->draft = true;",
      "235:         $page->owned_by = $editor;",
      "236:         $page->save();",
      "237:         $this->regenEntityPermissions($page);",
      "239:         $attachment = $this->createAttachmentForPage($page, [",
      "240:             'name'  => 'my attachment',",
      "241:             'path'  => 'https://example.com',",
      "242:             'order' => 1,",
      "243:         ]);",
      "245:         $resp = $this->getJson(\"{$this->baseEndpoint}/{$attachment->id}\");",
      "247:         $resp->assertStatus(404);",
      "248:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "068a8a068c5d7c7ab98a6ee95baae8d321c3c61f",
      "candidate_info": {
        "commit_hash": "068a8a068c5d7c7ab98a6ee95baae8d321c3c61f",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/068a8a068c5d7c7ab98a6ee95baae8d321c3c61f",
        "files": [
          "tests/Api/AttachmentsApiTest.php",
          "tests/Api/PagesApiTest.php",
          "tests/Api/UsersApiTest.php",
          "tests/Commands/CopyShelfPermissionsCommandTest.php",
          "tests/Entity/BookShelfTest.php",
          "tests/Entity/BookTest.php",
          "tests/Entity/ChapterTest.php",
          "tests/Entity/EntityAccessTest.php",
          "tests/Entity/EntitySearchTest.php",
          "tests/Entity/PageTest.php",
          "tests/Entity/SortTest.php",
          "tests/Entity/TagTest.php",
          "tests/Helpers/EntityProvider.php",
          "tests/HomepageTest.php",
          "tests/Permissions/EntityPermissionsTest.php",
          "tests/Permissions/ExportPermissionsTest.php",
          "tests/Permissions/RolesTest.php",
          "tests/PublicActionTest.php",
          "tests/References/CrossLinkParserTest.php",
          "tests/References/ReferencesTest.php",
          "tests/TestCase.php",
          "tests/Uploads/ImageTest.php",
          "tests/User/UserProfileTest.php"
        ],
        "message": "Extracted entity testcase methods to own class\n\nAlso added some new fetch helper methods for future use.",
        "before_after_code_files": [
          "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php",
          "tests/Api/PagesApiTest.php||tests/Api/PagesApiTest.php",
          "tests/Api/UsersApiTest.php||tests/Api/UsersApiTest.php",
          "tests/Commands/CopyShelfPermissionsCommandTest.php||tests/Commands/CopyShelfPermissionsCommandTest.php",
          "tests/Entity/BookShelfTest.php||tests/Entity/BookShelfTest.php",
          "tests/Entity/BookTest.php||tests/Entity/BookTest.php",
          "tests/Entity/ChapterTest.php||tests/Entity/ChapterTest.php",
          "tests/Entity/EntityAccessTest.php||tests/Entity/EntityAccessTest.php",
          "tests/Entity/EntitySearchTest.php||tests/Entity/EntitySearchTest.php",
          "tests/Entity/PageTest.php||tests/Entity/PageTest.php",
          "tests/Entity/SortTest.php||tests/Entity/SortTest.php",
          "tests/Entity/TagTest.php||tests/Entity/TagTest.php",
          "tests/Helpers/EntityProvider.php||tests/Helpers/EntityProvider.php",
          "tests/HomepageTest.php||tests/HomepageTest.php",
          "tests/Permissions/EntityPermissionsTest.php||tests/Permissions/EntityPermissionsTest.php",
          "tests/Permissions/ExportPermissionsTest.php||tests/Permissions/ExportPermissionsTest.php",
          "tests/Permissions/RolesTest.php||tests/Permissions/RolesTest.php",
          "tests/PublicActionTest.php||tests/PublicActionTest.php",
          "tests/References/CrossLinkParserTest.php||tests/References/CrossLinkParserTest.php",
          "tests/References/ReferencesTest.php||tests/References/ReferencesTest.php",
          "tests/TestCase.php||tests/TestCase.php",
          "tests/Uploads/ImageTest.php||tests/Uploads/ImageTest.php",
          "tests/User/UserProfileTest.php||tests/User/UserProfileTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
          ],
          "candidate": [
            "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
          ]
        }
      },
      "candidate_diff": {
        "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php": [
          "File: tests/Api/AttachmentsApiTest.php -> tests/Api/AttachmentsApiTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         $page->restricted = true;",
          "55:         $page->save();",
          "58:         $resp = $this->getJson($this->baseEndpoint . '?count=1&sort=+id');",
          "59:         $resp->assertJsonMissing(['data' => [",
          "",
          "[Removed Lines]",
          "56:         $this->regenEntityPermissions($page);",
          "",
          "[Added Lines]",
          "56:         $this->entities->regenPermissions($page);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:         $page->draft = true;",
          "265:         $page->owned_by = $editor->id;",
          "266:         $page->save();",
          "269:         $attachment = $this->createAttachmentForPage($page, [",
          "270:             'name'  => 'my attachment',",
          "",
          "[Removed Lines]",
          "267:         $this->regenEntityPermissions($page);",
          "",
          "[Added Lines]",
          "267:         $this->entities->regenPermissions($page);",
          "",
          "---------------"
        ],
        "tests/Api/PagesApiTest.php||tests/Api/PagesApiTest.php": [
          "File: tests/Api/PagesApiTest.php -> tests/Api/PagesApiTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:         $this->actingAsApiEditor();",
          "211:         $page = Page::visible()->first();",
          "212:         $chapter = Chapter::visible()->where('book_id', '!=', $page->book_id)->first();",
          "214:         $details = [",
          "215:             'name'       => 'My updated API page',",
          "216:             'chapter_id' => $chapter->id,",
          "",
          "[Removed Lines]",
          "213:         $this->setEntityRestrictions($chapter, ['view'], [$this->getEditor()->roles()->first()]);",
          "",
          "[Added Lines]",
          "213:         $this->entities->setPermissions($chapter, ['view'], [$this->getEditor()->roles()->first()]);",
          "",
          "---------------"
        ],
        "tests/Api/UsersApiTest.php||tests/Api/UsersApiTest.php": [
          "File: tests/Api/UsersApiTest.php -> tests/Api/UsersApiTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:         $user = User::query()->where('id', '!=', $this->getAdmin()->id)",
          "240:             ->whereNull('system_name')",
          "241:             ->first();",
          "244:         $newOwner = User::query()->where('id', '!=', $user->id)->first();",
          "",
          "[Removed Lines]",
          "242:         $entityChain = $this->createEntityChainBelongingToUser($user);",
          "",
          "[Added Lines]",
          "242:         $entityChain = $this->entities->createChainBelongingToUser($user);",
          "",
          "---------------"
        ],
        "tests/Commands/CopyShelfPermissionsCommandTest.php||tests/Commands/CopyShelfPermissionsCommandTest.php": [
          "File: tests/Commands/CopyShelfPermissionsCommandTest.php -> tests/Commands/CopyShelfPermissionsCommandTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         $this->assertFalse(boolval($child->restricted), 'Child book should not be restricted by default');",
          "23:         $this->assertTrue($child->permissions()->count() === 0, 'Child book should have no permissions by default');",
          "26:         $this->artisan('bookstack:copy-shelf-permissions', [",
          "27:             '--slug' => $shelf->slug,",
          "28:         ]);",
          "",
          "[Removed Lines]",
          "25:         $this->setEntityRestrictions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "[Added Lines]",
          "25:         $this->entities->setPermissions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:         $this->assertFalse(boolval($child->restricted), 'Child book should not be restricted by default');",
          "44:         $this->assertTrue($child->permissions()->count() === 0, 'Child book should have no permissions by default');",
          "47:         $this->artisan('bookstack:copy-shelf-permissions --all')",
          "48:             ->expectsQuestion('Permission settings for all shelves will be cascaded. Books assigned to multiple shelves will receive only the permissions of it\\'s last processed shelf. Are you sure you want to proceed?', 'y');",
          "49:         $child = $shelf->books()->first();",
          "",
          "[Removed Lines]",
          "46:         $this->setEntityRestrictions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "[Added Lines]",
          "46:         $this->entities->setPermissions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "---------------"
        ],
        "tests/Entity/BookShelfTest.php||tests/Entity/BookShelfTest.php": [
          "File: tests/Entity/BookShelfTest.php -> tests/Entity/BookShelfTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:         $resp = $this->actingAs($user)->get('/');",
          "46:         $this->withHtml($resp)->assertElementNotContains('header', 'Shelves');",
          "50:         $resp = $this->get('/');",
          "51:         $this->withHtml($resp)->assertElementContains('header', 'Shelves');",
          "",
          "[Removed Lines]",
          "48:         $this->setEntityRestrictions($shelf, ['view'], [$userRole]);",
          "",
          "[Added Lines]",
          "48:         $this->entities->setPermissions($shelf, ['view'], [$userRole]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:         $resp->assertSee($book->name);",
          "70:         $resp->assertSee($book->getUrl());",
          "74:         $resp = $this->asEditor()->get('/shelves');",
          "75:         $resp->assertDontSee($book->name);",
          "",
          "[Removed Lines]",
          "72:         $this->setEntityRestrictions($book, []);",
          "",
          "[Added Lines]",
          "72:         $this->entities->setPermissions($book, []);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:         $this->assertFalse(boolval($child->restricted), 'Child book should not be restricted by default');",
          "299:         $this->assertTrue($child->permissions()->count() === 0, 'Child book should have no permissions by default');",
          "302:         $resp = $this->post($shelf->getUrl('/copy-permissions'));",
          "303:         $child = $shelf->books()->first();",
          "",
          "[Removed Lines]",
          "301:         $this->setEntityRestrictions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "[Added Lines]",
          "301:         $this->entities->setPermissions($shelf, ['view', 'update'], [$editorRole]);",
          "",
          "---------------"
        ],
        "tests/Entity/BookTest.php||tests/Entity/BookTest.php": [
          "File: tests/Entity/BookTest.php -> tests/Entity/BookTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:     public function test_slug_multi_byte_url_safe()",
          "248:     {",
          "250:             'name' => '\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f',",
          "251:         ]);",
          "253:         $this->assertEquals('informaciya', $book->slug);",
          "256:             'name' => '\u00bfQu\u00e9?',",
          "257:         ]);",
          "",
          "[Removed Lines]",
          "249:         $book = $this->newBook([",
          "255:         $book = $this->newBook([",
          "",
          "[Added Lines]",
          "249:         $book = $this->entities->newBook([",
          "255:         $book = $this->entities->newBook([",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "262:     public function test_slug_format()",
          "263:     {",
          "265:             'name' => 'PartA / PartB / PartC',",
          "266:         ]);",
          "",
          "[Removed Lines]",
          "264:         $book = $this->newBook([",
          "",
          "[Added Lines]",
          "264:         $book = $this->entities->newBook([",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "311:         foreach ($book->getDirectChildren() as $child) {",
          "312:             $child->restricted = true;",
          "313:             $child->save();",
          "315:         }",
          "317:         $this->asEditor()->post($book->getUrl('/copy'), ['name' => 'My copy book']);",
          "",
          "[Removed Lines]",
          "314:             $this->regenEntityPermissions($child);",
          "",
          "[Added Lines]",
          "314:             $this->entities->regenPermissions($child);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366:         $viewer = $this->getViewer();",
          "367:         $this->giveUserPermissions($viewer, ['book-update-all', 'book-create-all', 'bookshelf-update-all']);",
          "371:         $this->asEditor()->post($book->getUrl('/copy'), ['name' => 'My copy book']);",
          "",
          "[Removed Lines]",
          "368:         $this->setEntityRestrictions($shelfB);",
          "",
          "[Added Lines]",
          "368:         $this->entities->setPermissions($shelfB);",
          "",
          "---------------"
        ],
        "tests/Entity/ChapterTest.php||tests/Entity/ChapterTest.php": [
          "File: tests/Entity/ChapterTest.php -> tests/Entity/ChapterTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:         foreach ($chapter->pages as $page) {",
          "108:             $page->restricted = true;",
          "109:             $page->save();",
          "111:         }",
          "113:         $this->asEditor()->post($chapter->getUrl('/copy'), [",
          "",
          "[Removed Lines]",
          "110:             $this->regenEntityPermissions($page);",
          "",
          "[Added Lines]",
          "110:             $this->entities->regenPermissions($page);",
          "",
          "---------------"
        ],
        "tests/Entity/EntityAccessTest.php||tests/Entity/EntityAccessTest.php": [
          "File: tests/Entity/EntityAccessTest.php -> tests/Entity/EntityAccessTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:         $creator = $this->getEditor();",
          "16:         $updater = $this->getViewer();",
          "18:         app()->make(UserRepo::class)->destroy($creator);",
          "19:         app()->make(PageRepo::class)->update($entities['page'], ['html' => '<p>hello!</p>>']);",
          "",
          "[Removed Lines]",
          "17:         $entities = $this->createEntityChainBelongingToUser($creator, $updater);",
          "",
          "[Added Lines]",
          "17:         $entities = $this->entities->createChainBelongingToUser($creator, $updater);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:         $creator = $this->getViewer();",
          "28:         $updater = $this->getEditor();",
          "30:         app()->make(UserRepo::class)->destroy($updater);",
          "31:         app()->make(PageRepo::class)->update($entities['page'], ['html' => '<p>Hello there!</p>']);",
          "",
          "[Removed Lines]",
          "29:         $entities = $this->createEntityChainBelongingToUser($creator, $updater);",
          "",
          "[Added Lines]",
          "29:         $entities = $this->entities->createChainBelongingToUser($creator, $updater);",
          "",
          "---------------"
        ],
        "tests/Entity/EntitySearchTest.php||tests/Entity/EntitySearchTest.php": [
          "File: tests/Entity/EntitySearchTest.php -> tests/Entity/EntitySearchTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     public function test_searching_accents_and_small_terms()",
          "49:     {",
          "51:         $this->asEditor();",
          "53:         $accentSearch = $this->get('/search?term=' . urlencode('\u00e1\u00e9\u00ed\u00ed'));",
          "",
          "[Removed Lines]",
          "50:         $page = $this->newPage(['name' => 'My new test quaffleachits', 'html' => 'some \u00e1\u00e9\u00ed\u00ed\u00fa\u00fc\u00bf\u00a1 test content a2 orange dog']);",
          "",
          "[Added Lines]",
          "50:         $page = $this->entities->newPage(['name' => 'My new test quaffleachits', 'html' => 'some \u00e1\u00e9\u00ed\u00ed\u00fa\u00fc\u00bf\u00a1 test content a2 orange dog']);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:     public function test_exact_searches()",
          "113:     {",
          "116:         $exactSearchA = $this->asEditor()->get('/search?term=' . urlencode('\"story about an orange\"'));",
          "117:         $exactSearchA->assertStatus(200)->assertSee($page->name);",
          "",
          "[Removed Lines]",
          "114:         $page = $this->newPage(['name' => 'My new test page', 'html' => 'this is a story about an orange donkey']);",
          "",
          "[Added Lines]",
          "114:         $page = $this->entities->newPage(['name' => 'My new test page', 'html' => 'this is a story about an orange donkey']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:     public function test_search_terms_with_delimiters_are_converted_to_exact_matches()",
          "124:     {",
          "125:         $this->asEditor();",
          "127:         $terms = explode(' ', '1.1 2,2 3?3 4:4 5;5 (8) <9> \"10\" \\'11\\' `12`');",
          "129:         foreach ($terms as $term) {",
          "",
          "[Removed Lines]",
          "126:         $page = $this->newPage(['name' => 'Delimiter test', 'html' => '<p>1.1 2,2 3?3 4:4 5;5 (8) &lt;9&gt; \"10\" \\'11\\' `12`</p>']);",
          "",
          "[Added Lines]",
          "126:         $page = $this->entities->newPage(['name' => 'Delimiter test', 'html' => '<p>1.1 2,2 3?3 4:4 5;5 (8) &lt;9&gt; \"10\" \\'11\\' `12`</p>']);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:     public function test_search_filters()",
          "136:     {",
          "138:         $this->asEditor();",
          "139:         $editorId = $this->getEditor()->id;",
          "140:         $editorSlug = $this->getEditor()->slug;",
          "",
          "[Removed Lines]",
          "137:         $page = $this->newPage(['name' => 'My new test quaffleachits', 'html' => 'this is about an orange donkey danzorbhsing']);",
          "",
          "[Added Lines]",
          "137:         $page = $this->entities->newPage(['name' => 'My new test quaffleachits', 'html' => 'this is about an orange donkey danzorbhsing']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198:     public function test_ajax_entity_search()",
          "199:     {",
          "201:         $notVisitedPage = Page::first();",
          "",
          "[Removed Lines]",
          "200:         $page = $this->newPage(['name' => 'my ajax search test', 'html' => 'ajax test']);",
          "",
          "[Added Lines]",
          "200:         $page = $this->entities->newPage(['name' => 'my ajax search test', 'html' => 'ajax test']);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "335:     public function test_search_ranks_common_words_lower()",
          "336:     {",
          "340:         $search = $this->asEditor()->get('/search?term=cat+dog+biscuit');",
          "341:         $this->withHtml($search)->assertElementContains('.entity-list > .page:nth-child(1)', 'Test page A');",
          "342:         $this->withHtml($search)->assertElementContains('.entity-list > .page:nth-child(2)', 'Test page B');",
          "344:         for ($i = 0; $i < 2; $i++) {",
          "346:         }",
          "348:         $search = $this->asEditor()->get('/search?term=cat+dog+biscuit');",
          "",
          "[Removed Lines]",
          "337:         $this->newPage(['name' => 'Test page A', 'html' => '<p>dog biscuit dog dog</p>']);",
          "338:         $this->newPage(['name' => 'Test page B', 'html' => '<p>cat biscuit</p>']);",
          "345:             $this->newPage(['name' => 'Test page ' . $i, 'html' => '<p>dog</p>']);",
          "",
          "[Added Lines]",
          "337:         $this->entities->newPage(['name' => 'Test page A', 'html' => '<p>dog biscuit dog dog</p>']);",
          "338:         $this->entities->newPage(['name' => 'Test page B', 'html' => '<p>cat biscuit</p>']);",
          "345:             $this->entities->newPage(['name' => 'Test page ' . $i, 'html' => '<p>dog</p>']);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "353:     public function test_terms_in_headers_have_an_adjusted_index_score()",
          "354:     {",
          "356:             <p>TermA</p>",
          "357:             <h1>TermB <strong>TermNested</strong></h1>",
          "358:             <h2>TermC</h2>",
          "",
          "[Removed Lines]",
          "355:         $page = $this->newPage(['name' => 'Test page A', 'html' => '",
          "",
          "[Added Lines]",
          "355:         $page = $this->entities->newPage(['name' => 'Test page A', 'html' => '",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "378:     public function test_name_and_content_terms_are_merged_to_single_score()",
          "379:     {",
          "381:             <p>TermA</p>",
          "382:         ']);",
          "",
          "[Removed Lines]",
          "380:         $page = $this->newPage(['name' => 'TermA', 'html' => '",
          "",
          "[Added Lines]",
          "380:         $page = $this->entities->newPage(['name' => 'TermA', 'html' => '",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "390:     public function test_tag_names_and_values_are_indexed_for_search()",
          "391:     {",
          "393:             ['name' => 'Animal', 'value' => 'MeowieCat'],",
          "394:             ['name' => 'SuperImportant'],",
          "395:         ]]);",
          "",
          "[Removed Lines]",
          "392:         $page = $this->newPage(['name' => 'PageA', 'html' => '<p>content</p>', 'tags' => [",
          "",
          "[Added Lines]",
          "392:         $page = $this->entities->newPage(['name' => 'PageA', 'html' => '<p>content</p>', 'tags' => [",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "403:     public function test_matching_terms_in_search_results_are_highlighted()",
          "404:     {",
          "406:             ['name' => 'Animal', 'value' => 'MeowieCat'],",
          "407:             ['name' => 'SuperImportant'],",
          "408:         ]]);",
          "",
          "[Removed Lines]",
          "405:         $this->newPage(['name' => 'My Meowie Cat', 'html' => '<p>A superimportant page about meowieable animals</p>', 'tags' => [",
          "",
          "[Added Lines]",
          "405:         $this->entities->newPage(['name' => 'My Meowie Cat', 'html' => '<p>A superimportant page about meowieable animals</p>', 'tags' => [",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "421:     public function test_match_highlighting_works_with_multibyte_content()",
          "422:     {",
          "424:             'name' => 'Test Page',",
          "425:             'html' => '<p>\u041d\u0430 \u043c\u0435\u043d \u043c\u0438 \u0442\u0440\u044f\u0431\u0432\u0430 \u043d\u0435\u0449\u043e \u0434\u043e\u0431\u0440\u043e test</p>',",
          "426:         ]);",
          "",
          "[Removed Lines]",
          "423:         $this->newPage([",
          "",
          "[Added Lines]",
          "423:         $this->entities->newPage([",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "432:     public function test_html_entities_in_item_details_remains_escaped_in_search_results()",
          "433:     {",
          "436:         $search = $this->asEditor()->get('/search?term=TestPageContent');",
          "437:         $search->assertSee('My &lt;cool&gt; <strong>TestPageContent</strong>', false);",
          "",
          "[Removed Lines]",
          "434:         $this->newPage(['name' => 'My <cool> TestPageContent', 'html' => '<p>My supercool &lt;great&gt; TestPageContent page</p>']);",
          "",
          "[Added Lines]",
          "434:         $this->entities->newPage(['name' => 'My <cool> TestPageContent', 'html' => '<p>My supercool &lt;great&gt; TestPageContent page</p>']);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "441:     public function test_words_adjacent_to_lines_breaks_can_be_matched_with_normal_terms()",
          "442:     {",
          "444:             <p>TermA<br>TermB<br>TermC</p>",
          "445:         ']);",
          "",
          "[Removed Lines]",
          "443:         $page = $this->newPage(['name' => 'TermA', 'html' => '",
          "",
          "[Added Lines]",
          "443:         $page = $this->entities->newPage(['name' => 'TermA', 'html' => '",
          "",
          "---------------"
        ],
        "tests/Entity/PageTest.php||tests/Entity/PageTest.php": [
          "File: tests/Entity/PageTest.php -> tests/Entity/PageTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:         $newBook->owned_by = $viewer->id;",
          "202:         $newBook->save();",
          "203:         $this->giveUserPermissions($viewer, ['page-create-own']);",
          "206:         $resp = $this->actingAs($viewer)->get($page->getUrl());",
          "207:         $resp->assertSee($page->getUrl('/copy'));",
          "",
          "[Removed Lines]",
          "204:         $this->regenEntityPermissions($newBook);",
          "",
          "[Added Lines]",
          "204:         $this->entities->regenPermissions($newBook);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:     public function test_recently_updated_pages_view()",
          "256:     {",
          "257:         $user = $this->getEditor();",
          "260:         $resp = $this->asAdmin()->get('/pages/recently-updated');",
          "261:         $this->withHtml($resp)->assertElementContains('.entity-list .page:nth-child(1)', $content['page']->name);",
          "",
          "[Removed Lines]",
          "258:         $content = $this->createEntityChainBelongingToUser($user);",
          "",
          "[Added Lines]",
          "258:         $content = $this->entities->createChainBelongingToUser($user);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:             'html' => '<p>Updated content</p>',",
          "304:         ]);",
          "309:         $resp = $this->get('/pages/recently-updated');",
          "310:         $resp->assertDontSee($page->book->getShortName(42));",
          "",
          "[Removed Lines]",
          "306:         $this->setEntityRestrictions($page->book);",
          "307:         $this->setEntityRestrictions($page, ['view'], [$user->roles->first()]);",
          "",
          "[Added Lines]",
          "306:         $this->entities->setPermissions($page->book);",
          "307:         $this->entities->setPermissions($page, ['view'], [$user->roles->first()]);",
          "",
          "---------------"
        ],
        "tests/Entity/SortTest.php||tests/Entity/SortTest.php": [
          "File: tests/Entity/SortTest.php -> tests/Entity/SortTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:         $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();",
          "99:         $editor = $this->getEditor();",
          "103:         $movePageResp = $this->actingAs($editor)->put($page->getUrl('/move'), [",
          "104:             'entity_selection' => 'book:' . $newBook->id,",
          "105:         ]);",
          "106:         $this->assertPermissionError($movePageResp);",
          "109:         $movePageResp = $this->put($page->getUrl('/move'), [",
          "110:             'entity_selection' => 'book:' . $newBook->id,",
          "111:         ]);",
          "",
          "[Removed Lines]",
          "101:         $this->setEntityRestrictions($newBook, ['view', 'update', 'delete'], $editor->roles->all());",
          "108:         $this->setEntityRestrictions($newBook, ['view', 'update', 'delete', 'create'], $editor->roles->all());",
          "",
          "[Added Lines]",
          "101:         $this->entities->setPermissions($newBook, ['view', 'update', 'delete'], $editor->roles->all());",
          "108:         $this->entities->setPermissions($newBook, ['view', 'update', 'delete', 'create'], $editor->roles->all());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:         $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();",
          "124:         $editor = $this->getEditor();",
          "129:         $movePageResp = $this->actingAs($editor)->put($page->getUrl('/move'), [",
          "130:             'entity_selection' => 'book:' . $newBook->id,",
          "",
          "[Removed Lines]",
          "126:         $this->setEntityRestrictions($newBook, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "127:         $this->setEntityRestrictions($page, ['view', 'update', 'create'], $editor->roles->all());",
          "",
          "[Added Lines]",
          "126:         $this->entities->setPermissions($newBook, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "127:         $this->entities->setPermissions($page, ['view', 'update', 'create'], $editor->roles->all());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:         $pageView = $this->get($page->getUrl());",
          "134:         $pageView->assertDontSee($page->getUrl('/move'));",
          "137:         $movePageResp = $this->put($page->getUrl('/move'), [",
          "138:             'entity_selection' => 'book:' . $newBook->id,",
          "139:         ]);",
          "",
          "[Removed Lines]",
          "136:         $this->setEntityRestrictions($page, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "",
          "[Added Lines]",
          "136:         $this->entities->setPermissions($page, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:         $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();",
          "179:         $editor = $this->getEditor();",
          "184:         $moveChapterResp = $this->actingAs($editor)->put($chapter->getUrl('/move'), [",
          "185:             'entity_selection' => 'book:' . $newBook->id,",
          "",
          "[Removed Lines]",
          "181:         $this->setEntityRestrictions($newBook, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "182:         $this->setEntityRestrictions($chapter, ['view', 'update', 'create'], $editor->roles->all());",
          "",
          "[Added Lines]",
          "181:         $this->entities->setPermissions($newBook, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "182:         $this->entities->setPermissions($chapter, ['view', 'update', 'create'], $editor->roles->all());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "188:         $pageView = $this->get($chapter->getUrl());",
          "189:         $pageView->assertDontSee($chapter->getUrl('/move'));",
          "192:         $moveChapterResp = $this->put($chapter->getUrl('/move'), [",
          "193:             'entity_selection' => 'book:' . $newBook->id,",
          "194:         ]);",
          "",
          "[Removed Lines]",
          "191:         $this->setEntityRestrictions($chapter, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "",
          "[Added Lines]",
          "191:         $this->entities->setPermissions($chapter, ['view', 'update', 'create', 'delete'], $editor->roles->all());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "205:         $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();",
          "206:         $editor = $this->getEditor();",
          "211:         $moveChapterResp = $this->actingAs($editor)->put($chapter->getUrl('/move'), [",
          "212:             'entity_selection' => 'book:' . $newBook->id,",
          "213:         ]);",
          "214:         $this->assertPermissionError($moveChapterResp);",
          "217:         $moveChapterResp = $this->put($chapter->getUrl('/move'), [",
          "218:             'entity_selection' => 'book:' . $newBook->id,",
          "219:         ]);",
          "",
          "[Removed Lines]",
          "208:         $this->setEntityRestrictions($newBook, ['view', 'update', 'delete'], [$editor->roles->first()]);",
          "209:         $this->setEntityRestrictions($chapter, ['view', 'update', 'create', 'delete'], [$editor->roles->first()]);",
          "216:         $this->setEntityRestrictions($newBook, ['view', 'update', 'create', 'delete'], [$editor->roles->first()]);",
          "",
          "[Added Lines]",
          "208:         $this->entities->setPermissions($newBook, ['view', 'update', 'delete'], [$editor->roles->first()]);",
          "209:         $this->entities->setPermissions($chapter, ['view', 'update', 'create', 'delete'], [$editor->roles->first()]);",
          "216:         $this->entities->setPermissions($newBook, ['view', 'update', 'create', 'delete'], [$editor->roles->first()]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257:     public function test_book_sort()",
          "258:     {",
          "259:         $oldBook = Book::query()->first();",
          "262:         $pagesToMove = Page::query()->take(5)->get();",
          "",
          "[Removed Lines]",
          "260:         $chapterToMove = $this->newChapter(['name' => 'chapter to move'], $oldBook);",
          "261:         $newBook = $this->newBook(['name' => 'New sort book']);",
          "",
          "[Added Lines]",
          "260:         $chapterToMove = $this->entities->newChapter(['name' => 'chapter to move'], $oldBook);",
          "261:         $newBook = $this->entities->newBook(['name' => 'New sort book']);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "323:         $page = Page::query()->where('chapter_id', '!=', 0)->first();",
          "325:         $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();",
          "328:         $sortData = [",
          "329:             'id'            => $page->id,",
          "",
          "[Removed Lines]",
          "326:         $this->setEntityRestrictions($otherChapter);",
          "",
          "[Added Lines]",
          "326:         $this->entities->setPermissions($otherChapter);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "347:         $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();",
          "348:         $editor = $this->getEditor();",
          "351:         $sortData = [",
          "352:             'id'            => $page->id,",
          "",
          "[Removed Lines]",
          "349:         $this->setEntityRestrictions($otherChapter->book, ['update', 'delete'], [$editor->roles()->first()]);",
          "",
          "[Added Lines]",
          "349:         $this->entities->setPermissions($otherChapter->book, ['update', 'delete'], [$editor->roles()->first()]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "370:         $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();",
          "371:         $editor = $this->getEditor();",
          "374:         $sortData = [",
          "375:             'id'            => $page->id,",
          "",
          "[Removed Lines]",
          "372:         $this->setEntityRestrictions($otherChapter, ['view', 'delete'], [$editor->roles()->first()]);",
          "",
          "[Added Lines]",
          "372:         $this->entities->setPermissions($otherChapter, ['view', 'delete'], [$editor->roles()->first()]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "393:         $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();",
          "394:         $editor = $this->getEditor();",
          "397:         $sortData = [",
          "398:             'id'            => $page->id,",
          "",
          "[Removed Lines]",
          "395:         $this->setEntityRestrictions($page, ['view', 'delete'], [$editor->roles()->first()]);",
          "",
          "[Added Lines]",
          "395:         $this->entities->setPermissions($page, ['view', 'delete'], [$editor->roles()->first()]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "416:         $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();",
          "417:         $editor = $this->getEditor();",
          "420:         $sortData = [",
          "421:             'id'            => $page->id,",
          "",
          "[Removed Lines]",
          "418:         $this->setEntityRestrictions($page, ['view', 'update'], [$editor->roles()->first()]);",
          "",
          "[Added Lines]",
          "418:         $this->entities->setPermissions($page, ['view', 'update'], [$editor->roles()->first()]);",
          "",
          "---------------"
        ],
        "tests/Entity/TagTest.php||tests/Entity/TagTest.php": [
          "File: tests/Entity/TagTest.php -> tests/Entity/TagTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:         $resp->assertSee('GreatTestContent');",
          "190:         $page->restricted = true;",
          "193:         $resp = $this->asEditor()->get('/tags');",
          "194:         $resp->assertDontSee('SuperCategory');",
          "",
          "[Removed Lines]",
          "191:         $this->regenEntityPermissions($page);",
          "",
          "[Added Lines]",
          "191:         $this->entities->regenPermissions($page);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:     {",
          "208:         $this->asEditor();",
          "211:             $entity->tags()->create(['name' => 'My Super Tag Name', 'value' => 'An-awesome-value']);",
          "212:             $html = $this->withHtml($this->get($entity->getUrl()));",
          "213:             $html->assertElementExists('body.tag-name-mysupertagname.tag-value-anawesomevalue.tag-pair-mysupertagname-anawesomevalue');",
          "",
          "[Removed Lines]",
          "210:         foreach ($this->getEachEntityType() as $entity) {",
          "",
          "[Added Lines]",
          "210:         foreach ($this->entities->all() as $entity) {",
          "",
          "---------------"
        ],
        "tests/Helpers/EntityProvider.php||tests/Helpers/EntityProvider.php": [
          "File: tests/Helpers/EntityProvider.php -> tests/Helpers/EntityProvider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Tests\\Helpers;",
          "5: use BookStack\\Auth\\Role;",
          "6: use BookStack\\Auth\\User;",
          "7: use BookStack\\Entities\\Models\\Book;",
          "8: use BookStack\\Entities\\Models\\Bookshelf;",
          "9: use BookStack\\Entities\\Models\\Chapter;",
          "10: use BookStack\\Entities\\Models\\Entity;",
          "11: use BookStack\\Entities\\Models\\Page;",
          "12: use BookStack\\Entities\\Repos\\BookRepo;",
          "13: use BookStack\\Entities\\Repos\\BookshelfRepo;",
          "14: use BookStack\\Entities\\Repos\\ChapterRepo;",
          "15: use BookStack\\Entities\\Repos\\PageRepo;",
          "17: class EntityProvider",
          "18: {",
          "22:     protected array $fetchCache = [",
          "23:         'book' => [],",
          "24:         'page' => [],",
          "25:         'bookshelf' => [],",
          "26:         'chapter' => [],",
          "27:     ];",
          "32:     public function page(): Page",
          "33:     {",
          "35:         $page = Page::query()->whereNotIn('id', $this->fetchCache['page'])->first();",
          "36:         $this->addToCache($page);",
          "37:         return $page;",
          "38:     }",
          "43:     public function chapter(): Chapter",
          "44:     {",
          "46:         $chapter = Chapter::query()->whereNotIn('id', $this->fetchCache['chapter'])->first();",
          "47:         $this->addToCache($chapter);",
          "48:         return $chapter;",
          "49:     }",
          "54:     public function book(): Book",
          "55:     {",
          "57:         $book = Book::query()->whereNotIn('id', $this->fetchCache['book'])->first();",
          "58:         $this->addToCache($book);",
          "59:         return $book;",
          "60:     }",
          "65:     public function shelf(): Bookshelf",
          "66:     {",
          "68:         $shelf = Bookshelf::query()->whereNotIn('id', $this->fetchCache['bookshelf'])->first();",
          "69:         $this->addToCache($shelf);",
          "70:         return $shelf;",
          "71:     }",
          "77:     public function all(): array",
          "78:     {",
          "79:         return [",
          "80:             'page'      => $this->page(),",
          "81:             'chapter'   => $this->chapter(),",
          "82:             'book'      => $this->book(),",
          "83:             'bookshelf' => $this->shelf(),",
          "84:         ];",
          "85:     }",
          "91:     public function createChainBelongingToUser(User $creatorUser, ?User $updaterUser = null): array",
          "92:     {",
          "93:         if (empty($updaterUser)) {",
          "94:             $updaterUser = $creatorUser;",
          "95:         }",
          "97:         $userAttrs = ['created_by' => $creatorUser->id, 'owned_by' => $creatorUser->id, 'updated_by' => $updaterUser->id];",
          "99:         $book = Book::factory()->create($userAttrs);",
          "100:         $chapter = Chapter::factory()->create(array_merge(['book_id' => $book->id], $userAttrs));",
          "101:         $page = Page::factory()->create(array_merge(['book_id' => $book->id, 'chapter_id' => $chapter->id], $userAttrs));",
          "103:         $book->rebuildPermissions();",
          "104:         $this->addToCache([$page, $chapter, $book]);",
          "106:         return compact('book', 'chapter', 'page');",
          "107:     }",
          "112:     public function newShelf(array $input = ['name' => 'test shelf', 'description' => 'My new test shelf']): Bookshelf",
          "113:     {",
          "114:         $shelf = app(BookshelfRepo::class)->create($input, []);",
          "115:         $this->addToCache($shelf);",
          "116:         return $shelf;",
          "117:     }",
          "122:     public function newBook(array $input = ['name' => 'test book', 'description' => 'My new test book']): Book",
          "123:     {",
          "124:         $book = app(BookRepo::class)->create($input);",
          "125:         $this->addToCache($book);",
          "126:         return $book;",
          "127:     }",
          "132:     public function newChapter(array $input, Book $book): Chapter",
          "133:     {",
          "134:         $chapter = app(ChapterRepo::class)->create($input, $book);",
          "135:         $this->addToCache($chapter);",
          "136:         return $chapter;",
          "137:     }",
          "142:     public function newPage(array $input = ['name' => 'test page', 'html' => 'My new test page']): Page",
          "143:     {",
          "144:         $book = Book::query()->first();",
          "145:         $pageRepo = app(PageRepo::class);",
          "146:         $draftPage = $pageRepo->getNewDraftPage($book);",
          "147:         $this->addToCache($draftPage);",
          "148:         return $pageRepo->publishDraft($draftPage, $input);",
          "149:     }",
          "155:     public function regenPermissions(Entity $entity): void",
          "156:     {",
          "157:         $entity->rebuildPermissions();",
          "158:         $entity->load('jointPermissions');",
          "159:     }",
          "167:     public function setPermissions(Entity $entity, array $actions = [], array $roles = []): void",
          "168:     {",
          "169:         $entity->restricted = true;",
          "170:         $entity->permissions()->delete();",
          "172:         $permissions = [];",
          "173:         foreach ($actions as $action) {",
          "174:             foreach ($roles as $role) {",
          "175:                 $permissions[] = [",
          "176:                     'role_id' => $role->id,",
          "177:                     'action'  => strtolower($action),",
          "178:                 ];",
          "179:             }",
          "180:         }",
          "182:         $entity->permissions()->createMany($permissions);",
          "183:         $entity->save();",
          "184:         $entity->load('permissions');",
          "185:         $this->regenPermissions($entity);",
          "186:     }",
          "191:     protected function addToCache($entities): void",
          "192:     {",
          "193:         if (!is_array($entities)) {",
          "194:             $entities = [$entities];",
          "195:         }",
          "197:         foreach ($entities as $entity) {",
          "198:             $this->fetchCache[$entity->getType()][] = $entity->id;",
          "199:         }",
          "200:     }",
          "201: }",
          "",
          "---------------"
        ],
        "tests/HomepageTest.php||tests/HomepageTest.php": [
          "File: tests/HomepageTest.php -> tests/HomepageTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:         $this->asEditor();",
          "25:         $name = 'My custom homepage';",
          "26:         $content = str_repeat('This is the body content of my custom homepage.', 20);",
          "28:         $this->setSettings(['app-homepage' => $customPage->id]);",
          "29:         $this->setSettings(['app-homepage-type' => 'page']);",
          "",
          "[Removed Lines]",
          "27:         $customPage = $this->newPage(['name' => $name, 'html' => $content]);",
          "",
          "[Added Lines]",
          "27:         $customPage = $this->entities->newPage(['name' => $name, 'html' => $content]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:         $this->asEditor();",
          "42:         $name = 'My custom homepage';",
          "43:         $content = str_repeat('This is the body content of my custom homepage.', 20);",
          "45:         $this->setSettings([",
          "46:             'app-homepage'      => $customPage->id,",
          "47:             'app-homepage-type' => 'page',",
          "",
          "[Removed Lines]",
          "44:         $customPage = $this->newPage(['name' => $name, 'html' => $content]);",
          "",
          "[Added Lines]",
          "44:         $customPage = $this->entities->newPage(['name' => $name, 'html' => $content]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:         $this->asEditor();",
          "68:         $name = 'My custom homepage';",
          "69:         $content = str_repeat('This is the body content of my custom homepage.', 20);",
          "71:         $this->setSettings([",
          "72:             'app-homepage'      => $customPage->id,",
          "73:             'app-homepage-type' => 'default',",
          "",
          "[Removed Lines]",
          "70:         $customPage = $this->newPage(['name' => $name, 'html' => $content]);",
          "",
          "[Added Lines]",
          "70:         $customPage = $this->entities->newPage(['name' => $name, 'html' => $content]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:         $included->save();",
          "109:         $name = 'My custom homepage';",
          "111:         $this->setSettings(['app-homepage' => $customPage->id]);",
          "112:         $this->setSettings(['app-homepage-type' => 'page']);",
          "",
          "[Removed Lines]",
          "110:         $customPage = $this->newPage(['name' => $name, 'html' => '{{@' . $included->id . '}}']);",
          "",
          "[Added Lines]",
          "110:         $customPage = $this->entities->newPage(['name' => $name, 'html' => '{{@' . $included->id . '}}']);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:         $this->withHtml($homeVisit)->assertElementNotContains('.content-wrap', $book->name);",
          "181:         $homeVisit = $this->get('/');",
          "182:         $this->withHtml($homeVisit)->assertElementContains('.content-wrap', $shelf->name);",
          "183:         $this->withHtml($homeVisit)->assertElementContains('.content-wrap', $book->name);",
          "",
          "[Removed Lines]",
          "180:         $this->setEntityRestrictions($book, ['view'], [$editor->roles()->first()]);",
          "",
          "[Added Lines]",
          "180:         $this->entities->setPermissions($book, ['view'], [$editor->roles()->first()]);",
          "",
          "---------------"
        ],
        "tests/Permissions/EntityPermissionsTest.php||tests/Permissions/EntityPermissionsTest.php": [
          "File: tests/Permissions/EntityPermissionsTest.php -> tests/Permissions/EntityPermissionsTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:             $this->user->roles->first(),",
          "37:             $this->viewer->roles->first(),",
          "38:         ];",
          "40:     }",
          "42:     public function test_bookshelf_view_restriction()",
          "",
          "[Removed Lines]",
          "39:         $this->setEntityRestrictions($entity, $actions, $roles);",
          "",
          "[Added Lines]",
          "39:         $this->entities->setPermissions($entity, $actions, $roles);",
          "",
          "---------------"
        ],
        "tests/Permissions/ExportPermissionsTest.php||tests/Permissions/ExportPermissionsTest.php": [
          "File: tests/Permissions/ExportPermissionsTest.php -> tests/Permissions/ExportPermissionsTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:             $resp->assertSee($pageContent);",
          "28:         }",
          "32:         foreach ($formats as $format) {",
          "33:             $resp = $this->get($chapter->getUrl(\"export/{$format}\"));",
          "",
          "[Removed Lines]",
          "30:         $this->setEntityRestrictions($page, []);",
          "",
          "[Added Lines]",
          "30:         $this->entities->setPermissions($page, []);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:             $resp->assertSee($pageContent);",
          "56:         }",
          "60:         foreach ($formats as $format) {",
          "61:             $resp = $this->get($book->getUrl(\"export/{$format}\"));",
          "",
          "[Removed Lines]",
          "58:         $this->setEntityRestrictions($page, []);",
          "",
          "[Added Lines]",
          "58:         $this->entities->setPermissions($page, []);",
          "",
          "---------------"
        ],
        "tests/Permissions/RolesTest.php||tests/Permissions/RolesTest.php": [
          "File: tests/Permissions/RolesTest.php -> tests/Permissions/RolesTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:     {",
          "287:         $otherUsersPage = Page::query()->first();",
          "",
          "[Removed Lines]",
          "288:         $content = $this->createEntityChainBelongingToUser($this->user);",
          "",
          "[Added Lines]",
          "288:         $content = $this->entities->createChainBelongingToUser($this->user);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355:     {",
          "357:         $otherShelf = Bookshelf::query()->first();",
          "359:         $ownShelf->forceFill(['owned_by' => $this->user->id, 'updated_by' => $this->user->id])->save();",
          "362:         $this->checkAccessPermission('bookshelf-update-own', [",
          "363:             $ownShelf->getUrl('/edit'),",
          "",
          "[Removed Lines]",
          "358:         $ownShelf = $this->newShelf(['name' => 'test-shelf', 'slug' => 'test-shelf']);",
          "360:         $this->regenEntityPermissions($ownShelf);",
          "",
          "[Added Lines]",
          "358:         $ownShelf = $this->entities->newShelf(['name' => 'test-shelf', 'slug' => 'test-shelf']);",
          "360:         $this->entities->regenPermissions($ownShelf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "386:         $this->giveUserPermissions($this->user, ['bookshelf-update-all']);",
          "388:         $otherShelf = Bookshelf::query()->first();",
          "390:         $ownShelf->forceFill(['owned_by' => $this->user->id, 'updated_by' => $this->user->id])->save();",
          "393:         $this->checkAccessPermission('bookshelf-delete-own', [",
          "394:             $ownShelf->getUrl('/delete'),",
          "",
          "[Removed Lines]",
          "389:         $ownShelf = $this->newShelf(['name' => 'test-shelf', 'slug' => 'test-shelf']);",
          "391:         $this->regenEntityPermissions($ownShelf);",
          "",
          "[Added Lines]",
          "389:         $ownShelf = $this->entities->newShelf(['name' => 'test-shelf', 'slug' => 'test-shelf']);",
          "391:         $this->entities->regenPermissions($ownShelf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "438:     {",
          "440:         $otherBook = Book::query()->take(1)->get()->first();",
          "442:         $this->checkAccessPermission('book-update-own', [",
          "443:             $ownBook->getUrl() . '/edit',",
          "444:         ], [",
          "",
          "[Removed Lines]",
          "441:         $ownBook = $this->createEntityChainBelongingToUser($this->user)['book'];",
          "",
          "[Added Lines]",
          "441:         $ownBook = $this->entities->createChainBelongingToUser($this->user)['book'];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "466:         $this->giveUserPermissions($this->user, ['book-update-all']);",
          "468:         $otherBook = Book::query()->take(1)->get()->first();",
          "470:         $this->checkAccessPermission('book-delete-own', [",
          "471:             $ownBook->getUrl() . '/delete',",
          "472:         ], [",
          "",
          "[Removed Lines]",
          "469:         $ownBook = $this->createEntityChainBelongingToUser($this->user)['book'];",
          "",
          "[Added Lines]",
          "469:         $ownBook = $this->entities->createChainBelongingToUser($this->user)['book'];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "501:     {",
          "503:         $book = Book::query()->take(1)->get()->first();",
          "505:         $this->checkAccessPermission('chapter-create-own', [",
          "506:             $ownBook->getUrl('/create-chapter'),",
          "507:         ], [",
          "",
          "[Removed Lines]",
          "504:         $ownBook = $this->createEntityChainBelongingToUser($this->user)['book'];",
          "",
          "[Added Lines]",
          "504:         $ownBook = $this->entities->createChainBelongingToUser($this->user)['book'];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "538:     {",
          "540:         $otherChapter = Chapter::query()->first();",
          "542:         $this->checkAccessPermission('chapter-update-own', [",
          "543:             $ownChapter->getUrl() . '/edit',",
          "544:         ], [",
          "",
          "[Removed Lines]",
          "541:         $ownChapter = $this->createEntityChainBelongingToUser($this->user)['chapter'];",
          "",
          "[Added Lines]",
          "541:         $ownChapter = $this->entities->createChainBelongingToUser($this->user)['chapter'];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "566:         $this->giveUserPermissions($this->user, ['chapter-update-all']);",
          "568:         $otherChapter = Chapter::query()->first();",
          "570:         $this->checkAccessPermission('chapter-delete-own', [",
          "571:             $ownChapter->getUrl() . '/delete',",
          "572:         ], [",
          "",
          "[Removed Lines]",
          "569:         $ownChapter = $this->createEntityChainBelongingToUser($this->user)['chapter'];",
          "",
          "[Added Lines]",
          "569:         $ownChapter = $this->entities->createChainBelongingToUser($this->user)['chapter'];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "609:         $chapter = Chapter::query()->first();",
          "612:         $ownBook = $entities['book'];",
          "613:         $ownChapter = $entities['chapter'];",
          "",
          "[Removed Lines]",
          "611:         $entities = $this->createEntityChainBelongingToUser($this->user);",
          "",
          "[Added Lines]",
          "611:         $entities = $this->entities->createChainBelongingToUser($this->user);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "699:     {",
          "701:         $otherPage = Page::query()->first();",
          "703:         $this->checkAccessPermission('page-update-own', [",
          "704:             $ownPage->getUrl() . '/edit',",
          "705:         ], [",
          "",
          "[Removed Lines]",
          "702:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "702:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "727:         $this->giveUserPermissions($this->user, ['page-update-all']);",
          "729:         $otherPage = Page::query()->first();",
          "731:         $this->checkAccessPermission('page-delete-own', [",
          "732:             $ownPage->getUrl() . '/delete',",
          "733:         ], [",
          "",
          "[Removed Lines]",
          "730:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "730:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "865:         $admin = $this->getAdmin();",
          "867:         $book = Book::factory()->create(['created_by' => $admin->id, 'updated_by' => $admin->id]);",
          "869:         $this->actingAs($this->getViewer())->get($book->getUrl())",
          "870:             ->assertDontSee('Create a new page')",
          "871:             ->assertDontSee('Add a chapter');",
          "874:         $chapter = Chapter::factory()->create(['created_by' => $admin->id, 'updated_by' => $admin->id, 'book_id' => $book->id]);",
          "876:         $this->actingAs($this->getViewer())->get($chapter->getUrl())",
          "877:             ->assertDontSee('Create a new page')",
          "878:             ->assertDontSee('Sort the current book');",
          "",
          "[Removed Lines]",
          "868:         $this->regenEntityPermissions($book);",
          "875:         $this->regenEntityPermissions($chapter);",
          "",
          "[Added Lines]",
          "868:         $this->entities->regenPermissions($book);",
          "875:         $this->entities->regenPermissions($chapter);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "881:     public function test_comment_create_permission()",
          "882:     {",
          "885:         $this->actingAs($this->user)",
          "886:             ->addComment($ownPage)",
          "",
          "[Removed Lines]",
          "883:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "883:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "896:     public function test_comment_update_own_permission()",
          "897:     {",
          "899:         $this->giveUserPermissions($this->user, ['comment-create-all']);",
          "900:         $this->actingAs($this->user)->addComment($ownPage);",
          "",
          "[Removed Lines]",
          "898:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "898:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "913:     public function test_comment_update_all_permission()",
          "914:     {",
          "917:         $this->asAdmin()->addComment($ownPage);",
          "919:         $comment = $ownPage->comments()->latest()->first();",
          "",
          "[Removed Lines]",
          "916:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "916:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "930:     public function test_comment_delete_own_permission()",
          "931:     {",
          "934:         $this->giveUserPermissions($this->user, ['comment-create-all']);",
          "935:         $this->actingAs($this->user)->addComment($ownPage);",
          "",
          "[Removed Lines]",
          "933:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "933:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "949:     public function test_comment_delete_all_permission()",
          "950:     {",
          "953:         $this->asAdmin()->addComment($ownPage);",
          "955:         $comment = $ownPage->comments()->latest()->first();",
          "",
          "[Removed Lines]",
          "952:         $ownPage = $this->createEntityChainBelongingToUser($this->user)['page'];",
          "",
          "[Added Lines]",
          "952:         $ownPage = $this->entities->createChainBelongingToUser($this->user)['page'];",
          "",
          "---------------"
        ],
        "tests/PublicActionTest.php||tests/PublicActionTest.php": [
          "File: tests/PublicActionTest.php -> tests/PublicActionTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:         $this->setSettings(['app-public' => 'true']);",
          "179:         $book = Book::query()->first();",
          "182:         $resp = $this->get($book->getUrl());",
          "183:         $resp->assertSee('Book not found');",
          "",
          "[Removed Lines]",
          "180:         $this->setEntityRestrictions($book);",
          "",
          "[Added Lines]",
          "180:         $this->entities->setPermissions($book);",
          "",
          "---------------"
        ],
        "tests/References/CrossLinkParserTest.php||tests/References/CrossLinkParserTest.php": [
          "File: tests/References/CrossLinkParserTest.php -> tests/References/CrossLinkParserTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: {",
          "11:     public function test_instance_with_entity_resolvers_matches_entity_links()",
          "12:     {",
          "14:         $otherPage = Page::query()->where('id', '!=', $entities['page']->id)->first();",
          "16:         $html = '",
          "",
          "[Removed Lines]",
          "13:         $entities = $this->getEachEntityType();",
          "",
          "[Added Lines]",
          "13:         $entities = $this->entities->all();",
          "",
          "---------------"
        ],
        "tests/References/ReferencesTest.php||tests/References/ReferencesTest.php": [
          "File: tests/References/ReferencesTest.php -> tests/References/ReferencesTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     public function test_references_to_count_visible_on_entity_show_view()",
          "59:     {",
          "62:         $otherPage = Page::query()->where('id', '!=', $entities['page']->id)->first();",
          "",
          "[Removed Lines]",
          "60:         $entities = $this->getEachEntityType();",
          "",
          "[Added Lines]",
          "60:         $entities = $this->entities->all();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     public function test_references_to_visible_on_references_page()",
          "81:     {",
          "83:         $this->asEditor();",
          "84:         foreach ($entities as $entity) {",
          "85:             $this->createReference($entities['page'], $entity);",
          "",
          "[Removed Lines]",
          "82:         $entities = $this->getEachEntityType();",
          "",
          "[Added Lines]",
          "82:         $entities = $this->entities->all();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:         $pageB = Page::query()->where('id', '!=', $page->id)->first();",
          "102:         $this->createReference($pageB, $page);",
          "106:         $this->asEditor()->get($page->getUrl('/references'))->assertDontSee($pageB->name);",
          "107:         $this->asAdmin()->get($page->getUrl('/references'))->assertSee($pageB->name);",
          "",
          "[Removed Lines]",
          "104:         $this->setEntityRestrictions($pageB);",
          "",
          "[Added Lines]",
          "104:         $this->entities->setPermissions($pageB);",
          "",
          "---------------"
        ],
        "tests/TestCase.php||tests/TestCase.php": [
          "File: tests/TestCase.php -> tests/TestCase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: use BookStack\\Auth\\Permissions\\RolePermission;",
          "8: use BookStack\\Auth\\Role;",
          "9: use BookStack\\Auth\\User;",
          "13: use BookStack\\Entities\\Models\\Entity;",
          "19: use BookStack\\Settings\\SettingService;",
          "20: use BookStack\\Uploads\\HttpFetcher;",
          "21: use GuzzleHttp\\Client;",
          "",
          "[Removed Lines]",
          "10: use BookStack\\Entities\\Models\\Book;",
          "11: use BookStack\\Entities\\Models\\Bookshelf;",
          "12: use BookStack\\Entities\\Models\\Chapter;",
          "14: use BookStack\\Entities\\Models\\Page;",
          "15: use BookStack\\Entities\\Repos\\BookRepo;",
          "16: use BookStack\\Entities\\Repos\\BookshelfRepo;",
          "17: use BookStack\\Entities\\Repos\\ChapterRepo;",
          "18: use BookStack\\Entities\\Repos\\PageRepo;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: use Monolog\\Logger;",
          "35: use Psr\\Http\\Client\\ClientInterface;",
          "36: use Ssddanbrown\\AssertHtml\\TestsHtml;",
          "38: abstract class TestCase extends BaseTestCase",
          "39: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: use Tests\\Helpers\\EntityProvider;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:     protected ?User $admin = null;",
          "45:     protected ?User $editor = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     protected EntityProvider $entities;",
          "41:     protected function setUp(): void",
          "42:     {",
          "43:         $this->entities = new EntityProvider();",
          "44:         parent::setUp();",
          "45:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:         return User::query()->where('system_name', '=', null)->get()->last();",
          "136:     }",
          "",
          "[Removed Lines]",
          "141:     protected function regenEntityPermissions(Entity $entity): void",
          "142:     {",
          "143:         $entity->rebuildPermissions();",
          "144:         $entity->load('jointPermissions');",
          "145:     }",
          "150:     public function newShelf(array $input = ['name' => 'test shelf', 'description' => 'My new test shelf']): Bookshelf",
          "151:     {",
          "152:         return app(BookshelfRepo::class)->create($input, []);",
          "153:     }",
          "158:     public function newBook(array $input = ['name' => 'test book', 'description' => 'My new test book']): Book",
          "159:     {",
          "160:         return app(BookRepo::class)->create($input);",
          "161:     }",
          "166:     public function newChapter(array $input, Book $book): Chapter",
          "167:     {",
          "168:         return app(ChapterRepo::class)->create($input, $book);",
          "169:     }",
          "174:     public function newPage(array $input = ['name' => 'test page', 'html' => 'My new test page']): Page",
          "175:     {",
          "176:         $book = Book::query()->first();",
          "177:         $pageRepo = app(PageRepo::class);",
          "178:         $draftPage = $pageRepo->getNewDraftPage($book);",
          "180:         return $pageRepo->publishDraft($draftPage, $input);",
          "181:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191:         }",
          "192:     }",
          "",
          "[Removed Lines]",
          "197:     protected function setEntityRestrictions(Entity $entity, array $actions = [], array $roles = []): void",
          "198:     {",
          "199:         $entity->restricted = true;",
          "200:         $entity->permissions()->delete();",
          "202:         $permissions = [];",
          "203:         foreach ($actions as $action) {",
          "204:             foreach ($roles as $role) {",
          "205:                 $permissions[] = [",
          "206:                     'role_id' => $role->id,",
          "207:                     'action'  => strtolower($action),",
          "208:                 ];",
          "209:             }",
          "210:         }",
          "211:         $entity->permissions()->createMany($permissions);",
          "213:         $entity->save();",
          "214:         $entity->load('permissions');",
          "215:         $this->app->make(JointPermissionBuilder::class)->rebuildForEntity($entity);",
          "216:         $entity->load('jointPermissions');",
          "217:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "262:         return $permissionRepo->saveNewRole($roleData);",
          "263:     }",
          "",
          "[Removed Lines]",
          "270:     protected function createEntityChainBelongingToUser(User $creatorUser, ?User $updaterUser = null): array",
          "271:     {",
          "272:         if (empty($updaterUser)) {",
          "273:             $updaterUser = $creatorUser;",
          "274:         }",
          "276:         $userAttrs = ['created_by' => $creatorUser->id, 'owned_by' => $creatorUser->id, 'updated_by' => $updaterUser->id];",
          "277:         $book = Book::factory()->create($userAttrs);",
          "278:         $chapter = Chapter::factory()->create(array_merge(['book_id' => $book->id], $userAttrs));",
          "279:         $page = Page::factory()->create(array_merge(['book_id' => $book->id, 'chapter_id' => $chapter->id], $userAttrs));",
          "281:         $this->app->make(JointPermissionBuilder::class)->rebuildForEntity($book);",
          "283:         return compact('book', 'chapter', 'page');",
          "284:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "461:         $this->assertDatabaseHas('activities', $detailsToCheck);",
          "462:     }",
          "476: }",
          "",
          "[Removed Lines]",
          "467:     protected function getEachEntityType(): array",
          "468:     {",
          "469:         return [",
          "470:             'page'      => Page::query()->first(),",
          "471:             'chapter'   => Chapter::query()->first(),",
          "472:             'book'      => Book::query()->first(),",
          "473:             'bookshelf' => Bookshelf::query()->first(),",
          "474:         ];",
          "475:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/Uploads/ImageTest.php||tests/Uploads/ImageTest.php": [
          "File: tests/Uploads/ImageTest.php -> tests/Uploads/ImageTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "343:         $this->get($expectedUrl)->assertOk();",
          "347:         $resp = $this->get($expectedUrl);",
          "348:         $resp->assertNotFound();",
          "",
          "[Removed Lines]",
          "345:         $this->setEntityRestrictions($page, [], []);",
          "",
          "[Added Lines]",
          "345:         $this->entities->setPermissions($page, [], []);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368:         $this->get($expectedUrl)->assertOk();",
          "372:         $resp = $this->get($expectedUrl);",
          "373:         $resp->assertNotFound();",
          "",
          "[Removed Lines]",
          "370:         $this->setEntityRestrictions($page, [], []);",
          "",
          "[Added Lines]",
          "370:         $this->entities->setPermissions($page, [], []);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "400:         $export = $this->get($pageB->getUrl('/export/html'));",
          "401:         $this->assertStringContainsString($encodedImageContent, $export->getContent());",
          "405:         $export = $this->get($pageB->getUrl('/export/html'));",
          "406:         $this->assertStringNotContainsString($encodedImageContent, $export->getContent());",
          "",
          "[Removed Lines]",
          "403:         $this->setEntityRestrictions($pageA, [], []);",
          "",
          "[Added Lines]",
          "403:         $this->entities->setPermissions($pageA, [], []);",
          "",
          "---------------"
        ],
        "tests/User/UserProfileTest.php||tests/User/UserProfileTest.php": [
          "File: tests/User/UserProfileTest.php -> tests/User/UserProfileTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     public function test_profile_page_shows_recent_entities()",
          "31:     {",
          "34:         $resp = $this->asAdmin()->get('/user/' . $this->user->slug);",
          "",
          "[Removed Lines]",
          "32:         $content = $this->createEntityChainBelongingToUser($this->user, $this->user);",
          "",
          "[Added Lines]",
          "32:         $content = $this->entities->createChainBelongingToUser($this->user, $this->user);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:             ->assertElementContains('#content-counts', '0 Chapters')",
          "51:             ->assertElementContains('#content-counts', '0 Pages');",
          "55:         $resp = $this->asAdmin()->get('/user/' . $newUser->slug)",
          "56:             ->assertSee($newUser->name);",
          "",
          "[Removed Lines]",
          "53:         $this->createEntityChainBelongingToUser($newUser, $newUser);",
          "",
          "[Added Lines]",
          "53:         $this->entities->createChainBelongingToUser($newUser, $newUser);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:     {",
          "64:         $newUser = User::factory()->create();",
          "65:         $this->actingAs($newUser);",
          "67:         Activity::add(ActivityType::BOOK_UPDATE, $entities['book']);",
          "68:         Activity::add(ActivityType::PAGE_CREATE, $entities['page']);",
          "",
          "[Removed Lines]",
          "66:         $entities = $this->createEntityChainBelongingToUser($newUser, $newUser);",
          "",
          "[Added Lines]",
          "66:         $entities = $this->entities->createChainBelongingToUser($newUser, $newUser);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:     {",
          "78:         $newUser = User::factory()->create();",
          "79:         $this->actingAs($newUser);",
          "81:         Activity::add(ActivityType::BOOK_UPDATE, $entities['book']);",
          "82:         Activity::add(ActivityType::PAGE_CREATE, $entities['page']);",
          "",
          "[Removed Lines]",
          "80:         $entities = $this->createEntityChainBelongingToUser($newUser, $newUser);",
          "",
          "[Added Lines]",
          "80:         $entities = $this->entities->createChainBelongingToUser($newUser, $newUser);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "025442fcd9b582ce6e911490f1840d7ce120f66f",
      "candidate_info": {
        "commit_hash": "025442fcd9b582ce6e911490f1840d7ce120f66f",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/025442fcd9b582ce6e911490f1840d7ce120f66f",
        "files": [
          ".env.example",
          ".env.example.complete",
          "app/Auth/Permissions/PermissionService.php",
          "app/Config/database.php"
        ],
        "message": "Reviewed addition to db table prefix\n\nReview of #2935\n\n- Removed from .env files and added warnings for use if found in config\n  file.\n- Updated permission service to use whereColumn queries to auto-handle\n  use of prefixes.",
        "before_after_code_files": [
          ".env.example||.env.example",
          ".env.example.complete||.env.example.complete",
          "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php",
          "app/Config/database.php||app/Config/database.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ],
          "candidate": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ]
        }
      },
      "candidate_diff": {
        ".env.example||.env.example": [
          "File: .env.example -> .env.example",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: # Database details",
          "24: DB_HOST=localhost",
          "25: DB_DATABASE=database_database",
          "27: DB_USERNAME=database_username",
          "28: DB_PASSWORD=database_user_password",
          "",
          "[Removed Lines]",
          "26: DB_TABLE_PREFIX=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        ".env.example.complete||.env.example.complete": [
          "File: .env.example.complete -> .env.example.complete",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: DB_HOST=localhost",
          "56: DB_PORT=3306",
          "57: DB_DATABASE=database_database",
          "59: DB_USERNAME=database_username",
          "60: DB_PASSWORD=database_user_password",
          "",
          "[Removed Lines]",
          "58: DB_TABLE_PREFIX=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
          "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:     public function filterRestrictedEntityRelations($query, string $tableName, string $entityIdColumn, string $entityTypeColumn, string $action = 'view')",
          "609:     {",
          "612:         $q = $query->where(function ($query) use ($tableDetails, $action) {",
          "613:             $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {",
          "614:                 $permissionQuery->select(['role_id'])->from('joint_permissions')",
          "617:                     ->where('action', '=', $action)",
          "618:                     ->whereIn('role_id', $this->getCurrentUserRoles())",
          "619:                     ->where(function (QueryBuilder $query) {",
          "",
          "[Removed Lines]",
          "610:         $tableDetails = ['tableName' => $this->db->getTablePrefix() . $tableName, 'entityIdColumn' => $entityIdColumn, 'entityTypeColumn' => $entityTypeColumn];",
          "615:                     ->whereRaw($this->db->getTablePrefix() . 'joint_permissions.entity_id=' . $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "616:                     ->whereRaw($this->db->getTablePrefix() . 'joint_permissions.entity_type=' . $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
          "",
          "[Added Lines]",
          "610:         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn, 'entityTypeColumn' => $entityTypeColumn];",
          "616:                     ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "617:                     ->whereColumn('joint_permissions.entity_type', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "639:         $q = $query->where(function ($query) use ($tableDetails, $morphClass) {",
          "640:             $query->where(function ($query) use (&$tableDetails, $morphClass) {",
          "641:                 $query->whereExists(function ($permissionQuery) use (&$tableDetails, $morphClass) {",
          "642:                     $permissionQuery->select('id')->from('joint_permissions')",
          "644:                         ->where('entity_type', '=', $morphClass)",
          "645:                         ->where('action', '=', 'view')",
          "646:                         ->whereIn('role_id', $this->getCurrentUserRoles())",
          "",
          "[Removed Lines]",
          "643:                         ->whereRaw($this->db->getTablePrefix() . 'joint_permissions.entity_id=' . $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "",
          "[Added Lines]",
          "645:                         ->whereColumn('joint_permissions.entity_id', '=',  $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "",
          "---------------"
        ],
        "app/Config/database.php||app/Config/database.php": [
          "File: app/Config/database.php -> app/Config/database.php"
        ]
      }
    },
    {
      "candidate_hash": "b929c0adbb4b4ef8a4db7e79f606d5b4e4a79ce9",
      "candidate_info": {
        "commit_hash": "b929c0adbb4b4ef8a4db7e79f606d5b4e4a79ce9",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/b929c0adbb4b4ef8a4db7e79f606d5b4e4a79ce9",
        "files": [
          "app/Auth/Permissions/PermissionService.php",
          "app/Entities/Tools/SearchRunner.php"
        ],
        "message": "Performed further cleanup in permission service",
        "before_after_code_files": [
          "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php",
          "app/Entities/Tools/SearchRunner.php||app/Entities/Tools/SearchRunner.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ],
          "candidate": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
          "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "495:         $userRoleIds = $this->currentUser()->roles()->select('id')->pluck('id')->toArray();",
          "496:         $userId = $this->currentUser()->id;",
          "499:             ->where('action', '=', $permission)",
          "500:             ->whereIn('role_id', $userRoleIds)",
          "507:             });",
          "509:         if (!is_null($entityClass)) {",
          "511:             $permissionQuery = $permissionQuery->where('entity_type', '=', $entityInstance->getMorphClass());",
          "512:         }",
          "",
          "[Removed Lines]",
          "498:         $permissionQuery = $this->db->table('joint_permissions')",
          "501:             ->where(function ($query) use ($userId) {",
          "502:                 $query->where('has_permission', '=', 1)",
          "503:                     ->orWhere(function ($query2) use ($userId) {",
          "504:                         $query2->where('has_permission_own', '=', 1)",
          "505:                             ->where('owned_by', '=', $userId);",
          "506:                     });",
          "510:             $entityInstance = app()->make($entityClass);",
          "",
          "[Added Lines]",
          "498:         $permissionQuery = JointPermission::query()",
          "501:             ->where(function (Builder $query) use ($userId) {",
          "502:                 $this->addJointHasPermissionCheck($query, $userId);",
          "506:             $entityInstance = app($entityClass);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "526:             $parentQuery->whereHas('jointPermissions', function ($permissionQuery) use ($action) {",
          "527:                 $permissionQuery->whereIn('role_id', $this->getCurrentUserRoles())",
          "528:                     ->where('action', '=', $action)",
          "535:                     });",
          "536:             });",
          "537:         });",
          "",
          "[Removed Lines]",
          "529:                     ->where(function ($query) {",
          "530:                         $query->where('has_permission', '=', true)",
          "531:                             ->orWhere(function ($query) {",
          "532:                                 $query->where('has_permission_own', '=', true)",
          "533:                                     ->where('owned_by', '=', $this->currentUser()->id);",
          "534:                             });",
          "",
          "[Added Lines]",
          "525:                     ->where(function (Builder $query) {",
          "526:                         $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "552:                 $permissionQuery->whereIn('role_id', $this->getCurrentUserRoles())",
          "553:                     ->where('action', '=', $ability)",
          "554:                     ->where(function (Builder $query) {",
          "560:                     });",
          "561:             });",
          "562:         });",
          "",
          "[Removed Lines]",
          "555:                         $query->where('has_permission', '=', true)",
          "556:                             ->orWhere(function (Builder $query) {",
          "557:                                 $query->where('has_permission_own', '=', true)",
          "558:                                     ->where('owned_by', '=', $this->currentUser()->id);",
          "559:                             });",
          "",
          "[Added Lines]",
          "547:                         $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "584:     {",
          "594:         }",
          "596:         return $this->entityRestrictionQuery($query, $action);",
          "",
          "[Removed Lines]",
          "583:     public function enforceEntityRestrictions(string $entityType, Builder $query, string $action = 'view'): Builder",
          "585:         if (strtolower($entityType) === 'page') {",
          "587:             $query->where(function ($query) {",
          "588:                 $query->where('draft', '=', false)",
          "589:                     ->orWhere(function ($query) {",
          "590:                         $query->where('draft', '=', true)",
          "591:                             ->where('owned_by', '=', $this->currentUser()->id);",
          "592:                     });",
          "593:             });",
          "",
          "[Added Lines]",
          "571:     public function enforceEntityRestrictions(Entity $entity, Builder $query, string $action = 'view'): Builder",
          "573:         if ($entity instanceof Page) {",
          "575:             $this->enforceDraftVisibilityOnQuery($query);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "610:                     ->whereRaw('joint_permissions.entity_type=' . $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
          "611:                     ->where('action', '=', $action)",
          "612:                     ->whereIn('role_id', $this->getCurrentUserRoles())",
          "618:                     });",
          "619:             });",
          "620:         });",
          "",
          "[Removed Lines]",
          "613:                     ->where(function ($query) {",
          "614:                         $query->where('has_permission', '=', true)->orWhere(function ($query) {",
          "615:                             $query->where('has_permission_own', '=', true)",
          "616:                                 ->where('owned_by', '=', $this->currentUser()->id);",
          "617:                         });",
          "",
          "[Added Lines]",
          "595:                     ->where(function (QueryBuilder $query) {",
          "596:                         $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "640:                         ->where('entity_type', '=', $morphClass)",
          "641:                         ->where('action', '=', 'view')",
          "642:                         ->whereIn('role_id', $this->getCurrentUserRoles())",
          "648:                         });",
          "649:                 });",
          "650:             })->orWhere($tableDetails['entityIdColumn'], '=', 0);",
          "",
          "[Removed Lines]",
          "643:                         ->where(function ($query) {",
          "644:                             $query->where('has_permission', '=', true)->orWhere(function ($query) {",
          "645:                                 $query->where('has_permission_own', '=', true)",
          "646:                                     ->where('owned_by', '=', $this->currentUser()->id);",
          "647:                             });",
          "",
          "[Added Lines]",
          "622:                         ->where(function (QueryBuilder $query) {",
          "623:                             $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "654:         return $q;",
          "655:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638:     protected function addJointHasPermissionCheck($query, int $userIdToCheck)",
          "639:     {",
          "640:         $query->where('has_permission', '=', true)->orWhere(function ($query) use ($userIdToCheck) {",
          "641:             $query->where('has_permission_own', '=', true)",
          "642:                 ->where('owned_by', '=', $userIdToCheck);",
          "643:         });",
          "644:     }",
          "",
          "---------------"
        ],
        "app/Entities/Tools/SearchRunner.php||app/Entities/Tools/SearchRunner.php": [
          "File: app/Entities/Tools/SearchRunner.php -> app/Entities/Tools/SearchRunner.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:             }",
          "180:         }",
          "183:     }",
          "",
          "[Removed Lines]",
          "182:         return $this->permissionService->enforceEntityRestrictions($entityType, $entitySelect, $action);",
          "",
          "[Added Lines]",
          "182:         return $this->permissionService->enforceEntityRestrictions($entity, $entitySelect, $action);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b493becadfd0acf177decb796b460f92ca56f4e1",
      "candidate_info": {
        "commit_hash": "b493becadfd0acf177decb796b460f92ca56f4e1",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/b493becadfd0acf177decb796b460f92ca56f4e1",
        "files": [
          "app/Actions/Comment.php",
          "app/Auth/Permissions/PermissionService.php",
          "app/Entities/Models/Entity.php",
          "app/Http/Controllers/Controller.php",
          "app/Traits/HasCreatorAndUpdater.php",
          "app/Traits/HasOwner.php",
          "app/Uploads/Attachment.php",
          "app/Uploads/Image.php",
          "app/helpers.php",
          "database/migrations/2020_12_30_173528_add_owned_by_field_to_entities.php",
          "resources/lang/en/entities.php",
          "resources/views/partials/entity-meta.blade.php"
        ],
        "message": "Started change for entities to have concept of owners",
        "before_after_code_files": [
          "app/Actions/Comment.php||app/Actions/Comment.php",
          "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php",
          "app/Entities/Models/Entity.php||app/Entities/Models/Entity.php",
          "app/Http/Controllers/Controller.php||app/Http/Controllers/Controller.php",
          "app/Ownable.php||app/Traits/HasCreatorAndUpdater.php",
          "app/Traits/HasOwner.php||app/Traits/HasOwner.php",
          "app/Uploads/Attachment.php||app/Uploads/Attachment.php",
          "app/Uploads/Image.php||app/Uploads/Image.php",
          "app/helpers.php||app/helpers.php",
          "database/migrations/2020_12_30_173528_add_owned_by_field_to_entities.php||database/migrations/2020_12_30_173528_add_owned_by_field_to_entities.php",
          "resources/lang/en/entities.php||resources/lang/en/entities.php",
          "resources/views/partials/entity-meta.blade.php||resources/views/partials/entity-meta.blade.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ],
          "candidate": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Actions/Comment.php||app/Actions/Comment.php": [
          "File: app/Actions/Comment.php -> app/Actions/Comment.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php namespace BookStack\\Actions;",
          "",
          "[Removed Lines]",
          "3: use BookStack\\Ownable;",
          "",
          "[Added Lines]",
          "3: use BookStack\\Model;",
          "4: use BookStack\\Traits\\HasCreatorAndUpdater;",
          "5: use Illuminate\\Database\\Eloquent\\Relations\\MorphTo;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12: {",
          "13:     protected $fillable = ['text', 'parent_id'];",
          "14:     protected $appends = ['created', 'updated'];",
          "21:     {",
          "22:         return $this->morphTo('entity');",
          "23:     }",
          "30:     {",
          "31:         return $this->updated_at->timestamp > $this->created_at->timestamp;",
          "32:     }",
          "",
          "[Removed Lines]",
          "11: class Comment extends Ownable",
          "20:     public function entity()",
          "29:     public function isUpdated()",
          "",
          "[Added Lines]",
          "13: class Comment extends Model",
          "15:     use HasCreatorAndUpdater;",
          "23:     public function entity(): MorphTo",
          "31:     public function isUpdated(): bool",
          "",
          "---------------"
        ],
        "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
          "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use BookStack\\Entities\\Models\\Book;",
          "6: use BookStack\\Entities\\Models\\Entity;",
          "7: use BookStack\\Entities\\EntityProvider;",
          "9: use Illuminate\\Database\\Connection;",
          "10: use Illuminate\\Database\\Eloquent\\Builder;",
          "11: use Illuminate\\Database\\Query\\Builder as QueryBuilder;",
          "",
          "[Removed Lines]",
          "8: use BookStack\\Ownable;",
          "",
          "[Added Lines]",
          "8: use BookStack\\Model;",
          "9: use BookStack\\Traits\\HasCreatorAndUpdater;",
          "10: use BookStack\\Traits\\HasOwner;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:         });",
          "172:             ->chunk(50, function ($shelves) use ($roles) {",
          "173:                 $this->buildJointPermissionsForShelves($shelves, $roles);",
          "174:             });",
          "",
          "[Removed Lines]",
          "171:         $this->entityProvider->bookshelf->newQuery()->withTrashed()->select(['id', 'restricted', 'created_by'])",
          "",
          "[Added Lines]",
          "173:         $this->entityProvider->bookshelf->newQuery()->withTrashed()->select(['id', 'restricted', 'owned_by'])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:     protected function bookFetchQuery()",
          "182:     {",
          "183:         return $this->entityProvider->book->withTrashed()->newQuery()",
          "186:             }, 'pages'  => function ($query) {",
          "188:             }]);",
          "189:     }",
          "",
          "[Removed Lines]",
          "184:             ->select(['id', 'restricted', 'created_by'])->with(['chapters' => function ($query) {",
          "185:                 $query->withTrashed()->select(['id', 'restricted', 'created_by', 'book_id']);",
          "187:                 $query->withTrashed()->select(['id', 'restricted', 'created_by', 'book_id', 'chapter_id']);",
          "",
          "[Added Lines]",
          "186:             ->select(['id', 'restricted', 'owned_by'])->with(['chapters' => function ($query) {",
          "187:                 $query->withTrashed()->select(['id', 'restricted', 'owned_by', 'book_id']);",
          "189:                 $query->withTrashed()->select(['id', 'restricted', 'owned_by', 'book_id', 'chapter_id']);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286:         });",
          "290:             ->chunk(50, function ($shelves) use ($roles) {",
          "291:                 $this->buildJointPermissionsForShelves($shelves, $roles);",
          "292:             });",
          "",
          "[Removed Lines]",
          "289:         $this->entityProvider->bookshelf->newQuery()->select(['id', 'restricted', 'created_by'])",
          "",
          "[Added Lines]",
          "291:         $this->entityProvider->bookshelf->newQuery()->select(['id', 'restricted', 'owned_by'])",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "508:             'action'             => $action,",
          "509:             'has_permission'     => $permissionAll,",
          "510:             'has_permission_own' => $permissionOwn,",
          "512:         ];",
          "513:     }",
          "522:     {",
          "523:         $explodedPermission = explode('-', $permission);",
          "526:         $action = end($explodedPermission);",
          "527:         $this->currentAction = $action;",
          "533:             $allPermission = $this->currentUser() && $this->currentUser()->can($permission . '-all');",
          "534:             $ownPermission = $this->currentUser() && $this->currentUser()->can($permission . '-own');",
          "535:             $this->currentAction = 'view';",
          "",
          "[Removed Lines]",
          "511:             'created_by'         => $entity->getRawAttribute('created_by')",
          "521:     public function checkOwnableUserAccess(Ownable $ownable, $permission)",
          "525:         $baseQuery = $ownable->where('id', '=', $ownable->id);",
          "529:         $nonJointPermissions = ['restrictions', 'image', 'attachment', 'comment'];",
          "532:         if (in_array($explodedPermission[0], $nonJointPermissions)) {",
          "",
          "[Added Lines]",
          "513:             'owned_by'         => $entity->getRawAttribute('owned_by')",
          "521:     public function checkOwnableUserAccess(Model $ownable, string $permission): bool",
          "525:         $baseQuery = $ownable->newQuery()->where('id', '=', $ownable->id);",
          "530:         if (!($ownable instanceof Entity)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "566:                 $query->where('has_permission', '=', 1)",
          "567:                     ->orWhere(function ($query2) use ($userId) {",
          "568:                         $query2->where('has_permission_own', '=', 1)",
          "570:                     });",
          "571:             });",
          "",
          "[Removed Lines]",
          "569:                             ->where('created_by', '=', $userId);",
          "",
          "[Added Lines]",
          "567:                             ->where('owned_by', '=', $userId);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "615:                         $query->where('has_permission', '=', true)",
          "616:                             ->orWhere(function ($query) {",
          "617:                                 $query->where('has_permission_own', '=', true)",
          "619:                             });",
          "620:                     });",
          "621:             });",
          "",
          "[Removed Lines]",
          "618:                                     ->where('created_by', '=', $this->currentUser()->id);",
          "",
          "[Added Lines]",
          "616:                                     ->where('owned_by', '=', $this->currentUser()->id);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "639:                         $query->where('has_permission', '=', true)",
          "640:                             ->orWhere(function (Builder $query) {",
          "641:                                 $query->where('has_permission_own', '=', true)",
          "643:                             });",
          "644:                     });",
          "645:             });",
          "",
          "[Removed Lines]",
          "642:                                     ->where('created_by', '=', $this->currentUser()->id);",
          "",
          "[Added Lines]",
          "640:                                     ->where('owned_by', '=', $this->currentUser()->id);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "656:             $query->where('draft', '=', false)",
          "657:                 ->orWhere(function (Builder $query) {",
          "658:                     $query->where('draft', '=', true)",
          "660:                 });",
          "661:         });",
          "662:     }",
          "",
          "[Removed Lines]",
          "659:                         ->where('created_by', '=', $this->currentUser()->id);",
          "",
          "[Added Lines]",
          "657:                         ->where('owned_by', '=', $this->currentUser()->id);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "676:                 $query->where('draft', '=', false)",
          "677:                     ->orWhere(function ($query) {",
          "678:                         $query->where('draft', '=', true)",
          "680:                     });",
          "681:             });",
          "682:         }",
          "",
          "[Removed Lines]",
          "679:                             ->where('created_by', '=', $this->currentUser()->id);",
          "",
          "[Added Lines]",
          "677:                             ->where('owned_by', '=', $this->currentUser()->id);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "710:                     ->where(function ($query) {",
          "711:                         $query->where('has_permission', '=', true)->orWhere(function ($query) {",
          "712:                             $query->where('has_permission_own', '=', true)",
          "714:                         });",
          "715:                     });",
          "716:             });",
          "",
          "[Removed Lines]",
          "713:                                 ->where('created_by', '=', $this->currentUser()->id);",
          "",
          "[Added Lines]",
          "711:                                 ->where('owned_by', '=', $this->currentUser()->id);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "746:                         ->where(function ($query) {",
          "747:                             $query->where('has_permission', '=', true)->orWhere(function ($query) {",
          "748:                                 $query->where('has_permission_own', '=', true)",
          "750:                             });",
          "751:                         });",
          "752:                 });",
          "",
          "[Removed Lines]",
          "749:                                     ->where('created_by', '=', $this->currentUser()->id);",
          "",
          "[Added Lines]",
          "747:                                     ->where('owned_by', '=', $this->currentUser()->id);",
          "",
          "---------------"
        ],
        "app/Entities/Models/Entity.php||app/Entities/Models/Entity.php": [
          "File: app/Entities/Models/Entity.php -> app/Entities/Models/Entity.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: use BookStack\\Entities\\Tools\\SearchIndex;",
          "10: use BookStack\\Entities\\Tools\\SlugGenerator;",
          "11: use BookStack\\Facades\\Permissions;",
          "13: use Carbon\\Carbon;",
          "14: use Illuminate\\Database\\Eloquent\\Builder;",
          "15: use Illuminate\\Database\\Eloquent\\Collection;",
          "",
          "[Removed Lines]",
          "12: use BookStack\\Ownable;",
          "",
          "[Added Lines]",
          "12: use BookStack\\Model;",
          "13: use BookStack\\Traits\\HasCreatorAndUpdater;",
          "14: use BookStack\\Traits\\HasOwner;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: {",
          "40:     use SoftDeletes;",
          "",
          "[Removed Lines]",
          "38: abstract class Entity extends Ownable",
          "",
          "[Added Lines]",
          "40: abstract class Entity extends Model",
          "43:     use HasCreatorAndUpdater;",
          "44:     use HasOwner;",
          "",
          "---------------"
        ],
        "app/Http/Controllers/Controller.php||app/Http/Controllers/Controller.php": [
          "File: app/Http/Controllers/Controller.php -> app/Http/Controllers/Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use BookStack\\Facades\\Activity;",
          "6: use BookStack\\Interfaces\\Loggable;",
          "8: use Illuminate\\Foundation\\Bus\\DispatchesJobs;",
          "9: use Illuminate\\Foundation\\Validation\\ValidatesRequests;",
          "10: use Illuminate\\Http\\Exceptions\\HttpResponseException;",
          "",
          "[Removed Lines]",
          "7: use BookStack\\Ownable;",
          "",
          "[Added Lines]",
          "7: use BookStack\\HasCreatorAndUpdater;",
          "8: use BookStack\\Model;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     {",
          "77:         if (!userCan($permission, $ownable)) {",
          "78:             $this->showPermissionError();",
          "",
          "[Removed Lines]",
          "75:     protected function checkOwnablePermission(string $permission, Ownable $ownable): void",
          "",
          "[Added Lines]",
          "76:     protected function checkOwnablePermission(string $permission, Model $ownable): void",
          "",
          "---------------"
        ],
        "app/Ownable.php||app/Traits/HasCreatorAndUpdater.php": [
          "File: app/Ownable.php -> app/Traits/HasCreatorAndUpdater.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use BookStack\\Auth\\User;",
          "10: {",
          "16:     {",
          "17:         return $this->belongsTo(User::class, 'created_by');",
          "18:     }",
          "25:     {",
          "26:         return $this->belongsTo(User::class, 'updated_by');",
          "27:     }",
          "",
          "[Removed Lines]",
          "1: <?php namespace BookStack;",
          "9: abstract class Ownable extends Model",
          "15:     public function createdBy()",
          "24:     public function updatedBy()",
          "",
          "[Added Lines]",
          "1: <?php namespace BookStack\\Traits;",
          "4: use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;",
          "10: trait HasCreatorAndUpdater",
          "15:     public function createdBy(): BelongsTo",
          "23:     public function updatedBy(): BelongsTo",
          "",
          "---------------"
        ],
        "app/Traits/HasOwner.php||app/Traits/HasOwner.php": [
          "File: app/Traits/HasOwner.php -> app/Traits/HasOwner.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php namespace BookStack\\Traits;",
          "3: use BookStack\\Auth\\User;",
          "4: use Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;",
          "9: trait HasOwner",
          "10: {",
          "14:     public function ownedBy(): BelongsTo",
          "15:     {",
          "16:         return $this->belongsTo(User::class, 'owned_by');",
          "17:     }",
          "19: }",
          "",
          "---------------"
        ],
        "app/Uploads/Attachment.php||app/Uploads/Attachment.php": [
          "File: app/Uploads/Attachment.php -> app/Uploads/Attachment.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php namespace BookStack\\Uploads;",
          "3: use BookStack\\Entities\\Models\\Page;",
          "",
          "[Removed Lines]",
          "4: use BookStack\\Ownable;",
          "",
          "[Added Lines]",
          "4: use BookStack\\Model;",
          "5: use BookStack\\Traits\\HasCreatorAndUpdater;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: {",
          "15:     protected $fillable = ['name', 'order'];",
          "",
          "[Removed Lines]",
          "13: class Attachment extends Ownable",
          "",
          "[Added Lines]",
          "14: class Attachment extends Model",
          "16:     use HasCreatorAndUpdater;",
          "",
          "---------------"
        ],
        "app/Uploads/Image.php||app/Uploads/Image.php": [
          "File: app/Uploads/Image.php -> app/Uploads/Image.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php namespace BookStack\\Uploads;",
          "3: use BookStack\\Entities\\Models\\Page;",
          "5: use Images;",
          "8: {",
          "10:     protected $fillable = ['name'];",
          "11:     protected $hidden = [];",
          "",
          "[Removed Lines]",
          "4: use BookStack\\Ownable;",
          "7: class Image extends Ownable",
          "",
          "[Added Lines]",
          "4: use BookStack\\Model;",
          "5: use BookStack\\Traits\\HasCreatorAndUpdater;",
          "8: class Image extends Model",
          "10:     use HasCreatorAndUpdater;",
          "",
          "---------------"
        ],
        "app/helpers.php||app/helpers.php": [
          "File: app/helpers.php -> app/helpers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: use BookStack\\Auth\\Permissions\\PermissionService;",
          "4: use BookStack\\Auth\\User;",
          "6: use BookStack\\Settings\\SettingService;",
          "",
          "[Removed Lines]",
          "5: use BookStack\\Ownable;",
          "",
          "[Added Lines]",
          "5: use BookStack\\Model;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: {",
          "61:     if ($ownable === null) {",
          "62:         return user() && user()->can($permission);",
          "",
          "[Removed Lines]",
          "59: function userCan(string $permission, Ownable $ownable = null): bool",
          "",
          "[Added Lines]",
          "59: function userCan(string $permission, Model $ownable = null): bool",
          "",
          "---------------"
        ],
        "database/migrations/2020_12_30_173528_add_owned_by_field_to_entities.php||database/migrations/2020_12_30_173528_add_owned_by_field_to_entities.php": [
          "File: database/migrations/2020_12_30_173528_add_owned_by_field_to_entities.php -> database/migrations/2020_12_30_173528_add_owned_by_field_to_entities.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: use Illuminate\\Database\\Migrations\\Migration;",
          "4: use Illuminate\\Database\\Schema\\Blueprint;",
          "5: use Illuminate\\Support\\Facades\\Schema;",
          "6: use Illuminate\\Support\\Facades\\DB;",
          "8: class AddOwnedByFieldToEntities extends Migration",
          "9: {",
          "15:     public function up()",
          "16:     {",
          "17:         $tables = ['pages', 'books', 'chapters', 'bookshelves'];",
          "18:         foreach ($tables as $table) {",
          "19:             Schema::table($table, function (Blueprint $table) {",
          "20:                 $table->integer('owned_by')->unsigned()->index();",
          "21:             });",
          "23:             DB::table($table)->update(['owned_by' => DB::raw('`created_by`')]);",
          "24:         }",
          "26:         Schema::table('joint_permissions', function (Blueprint $table) {",
          "27:             $table->renameColumn('created_by', 'owned_by');",
          "28:         });",
          "29:     }",
          "36:     public function down()",
          "37:     {",
          "38:         $tables = ['pages', 'books', 'chapters', 'bookshelves'];",
          "39:         foreach ($tables as $table) {",
          "40:             Schema::table($table, function (Blueprint $table) {",
          "41:                 $table->dropColumn('owned_by');",
          "42:             });",
          "43:         }",
          "45:         Schema::table('joint_permissions', function (Blueprint $table) {",
          "46:             $table->renameColumn('owned_by', 'created_by');",
          "47:         });",
          "48:     }",
          "49: }",
          "",
          "---------------"
        ],
        "resources/lang/en/entities.php||resources/lang/en/entities.php": [
          "File: resources/lang/en/entities.php -> resources/lang/en/entities.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     'meta_created_name' => 'Created :timeLength by :user',",
          "23:     'meta_updated' => 'Updated :timeLength',",
          "24:     'meta_updated_name' => 'Updated :timeLength by :user',",
          "25:     'entity_select' => 'Entity Select',",
          "26:     'images' => 'Images',",
          "27:     'my_recent_drafts' => 'My Recent Drafts',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     'meta_owned_name' => 'Owned by :user',",
          "",
          "---------------"
        ],
        "resources/views/partials/entity-meta.blade.php||resources/views/partials/entity-meta.blade.php": [
          "File: resources/views/partials/entity-meta.blade.php -> resources/views/partials/entity-meta.blade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <div class=\"entity-meta\">",
          "2:     @if($entity->isA('revision'))",
          "6:     @endif",
          "8:     @if ($entity->isA('page'))",
          "11:             @if (userCan('page-update', $entity))</a>@endif",
          "12:     @endif",
          "15:     @if ($entity->createdBy)",
          "17:             'timeLength' => '<span title=\"'.$entity->created_at->toDayDateTimeString().'\">'.$entity->created_at->diffForHumans() . '</span>',",
          "19:             ]) !!}",
          "20:     @else",
          "22:     @endif",
          "26:     @if ($entity->updatedBy)",
          "28:                 'timeLength' => '<span title=\"' . $entity->updated_at->toDayDateTimeString() .'\">' . $entity->updated_at->diffForHumans() .'</span>',",
          "30:             ]) !!}",
          "31:     @elseif (!$entity->isA('revision'))",
          "33:     @endif",
          "34: </div>",
          "",
          "[Removed Lines]",
          "3:         @icon('history'){{ trans('entities.pages_revision') }}",
          "4:         {{ trans('entities.pages_revisions_number') }}{{ $entity->revision_number == 0 ? '' : $entity->revision_number }}",
          "5:         <br>",
          "9:         @if (userCan('page-update', $entity)) <a href=\"{{ $entity->getUrl('/revisions') }}\"> @endif",
          "10:             @icon('history'){{ trans('entities.meta_revision', ['revisionCount' => $entity->revision_count]) }} <br>",
          "16:         @icon('star'){!! trans('entities.meta_created_name', [",
          "18:             'user' => \"<a href='{$entity->createdBy->getProfileUrl()}'>\".htmlentities($entity->createdBy->name). \"</a>\"",
          "21:         @icon('star')<span title=\"{{$entity->created_at->toDayDateTimeString()}}\">{{ trans('entities.meta_created', ['timeLength' => $entity->created_at->diffForHumans()]) }}</span>",
          "24:     <br>",
          "27:         @icon('edit'){!! trans('entities.meta_updated_name', [",
          "29:                 'user' => \"<a href='{$entity->updatedBy->getProfileUrl()}'>\".htmlentities($entity->updatedBy->name). \"</a>\"",
          "32:         @icon('edit')<span title=\"{{ $entity->updated_at->toDayDateTimeString() }}\">{{ trans('entities.meta_updated', ['timeLength' => $entity->updated_at->diffForHumans()]) }}</span>",
          "",
          "[Added Lines]",
          "3:         <div>",
          "4:             @icon('history'){{ trans('entities.pages_revision') }}",
          "5:             {{ trans('entities.pages_revisions_number') }}{{ $entity->revision_number == 0 ? '' : $entity->revision_number }}",
          "6:         </div>",
          "10:         <div>",
          "11:             @if (userCan('page-update', $entity)) <a href=\"{{ $entity->getUrl('/revisions') }}\"> @endif",
          "12:             @icon('history'){{ trans('entities.meta_revision', ['revisionCount' => $entity->revision_count]) }}",
          "14:         </div>",
          "17:     @if ($entity->ownedBy && $entity->ownedBy->id !== $entity->createdBy->id)",
          "18:         <div>",
          "19:             @icon('user'){!! trans('entities.meta_owned_name', [",
          "20:             'user' => \"<a href='{$entity->ownedBy->getProfileUrl()}'>\".e($entity->ownedBy->name). \"</a>\"",
          "21:         ]) !!}",
          "22:         </div>",
          "23:     @endif",
          "26:         <div>",
          "27:             @icon('star'){!! trans('entities.meta_created_name', [",
          "29:             'user' => \"<a href='{$entity->createdBy->getProfileUrl()}'>\".e($entity->createdBy->name). \"</a>\"",
          "31:         </div>",
          "33:         <div>",
          "34:             @icon('star')<span title=\"{{$entity->created_at->toDayDateTimeString()}}\">{{ trans('entities.meta_created', ['timeLength' => $entity->created_at->diffForHumans()]) }}</span>",
          "35:         </div>",
          "39:         <div>",
          "40:             @icon('edit'){!! trans('entities.meta_updated_name', [",
          "42:                 'user' => \"<a href='{$entity->updatedBy->getProfileUrl()}'>\".e($entity->updatedBy->name). \"</a>\"",
          "44:         </div>",
          "46:         <div>",
          "47:             @icon('edit')<span title=\"{{ $entity->updated_at->toDayDateTimeString() }}\">{{ trans('entities.meta_updated', ['timeLength' => $entity->updated_at->diffForHumans()]) }}</span>",
          "48:         </div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "505d7e604ee87b3ac6d5a661b2da8c73b87d867b",
      "candidate_info": {
        "commit_hash": "505d7e604ee87b3ac6d5a661b2da8c73b87d867b",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/505d7e604ee87b3ac6d5a661b2da8c73b87d867b",
        "files": [
          "app/Actions/ActivityService.php",
          "app/Auth/Permissions/PermissionService.php",
          "tests/AuditLogTest.php"
        ],
        "message": "Applied StyleCI changes",
        "before_after_code_files": [
          "app/Actions/ActivityService.php||app/Actions/ActivityService.php",
          "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php",
          "tests/AuditLogTest.php||tests/AuditLogTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/Actions/ActivityService.php||app/Actions/ActivityService.php",
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ],
          "candidate": [
            "app/Actions/ActivityService.php||app/Actions/ActivityService.php",
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Actions/ActivityService.php||app/Actions/ActivityService.php": [
          "File: app/Actions/ActivityService.php -> app/Actions/ActivityService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: use Illuminate\\Database\\Eloquent\\Builder;",
          "12: use Illuminate\\Database\\Eloquent\\Relations\\Relation;",
          "13: use Illuminate\\Support\\Facades\\Log;",
          "16: class ActivityService",
          "17: {",
          "",
          "[Removed Lines]",
          "14: use Illuminate\\Support\\Facades\\Request;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
          "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "642:                 $query->whereExists(function ($permissionQuery) use (&$tableDetails, $morphClass) {",
          "644:                     $permissionQuery->select('id')->from('joint_permissions')",
          "646:                         ->where('entity_type', '=', $morphClass)",
          "647:                         ->where('action', '=', 'view')",
          "648:                         ->whereIn('role_id', $this->getCurrentUserRoles())",
          "",
          "[Removed Lines]",
          "645:                         ->whereColumn('joint_permissions.entity_id', '=',  $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "",
          "[Added Lines]",
          "645:                         ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "",
          "---------------"
        ],
        "tests/AuditLogTest.php||tests/AuditLogTest.php": [
          "File: tests/AuditLogTest.php -> tests/AuditLogTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:             'name' => 'Updated page',",
          "153:             'html' => '<p>Updated content</p>',",
          "154:         ], [",
          "156:         ])->assertRedirect($page->refresh()->getUrl());",
          "158:         $this->assertDatabaseHas('activities', [",
          "162:             'entity_id' => $page->id,",
          "163:         ]);",
          "",
          "[Removed Lines]",
          "155:             'X-Forwarded-For' => '192.123.45.1'",
          "159:             'type' => ActivityType::PAGE_UPDATE,",
          "160:             'ip' => '192.123.45.1',",
          "161:             'user_id' => $editor->id,",
          "",
          "[Added Lines]",
          "155:             'X-Forwarded-For' => '192.123.45.1',",
          "159:             'type'      => ActivityType::PAGE_UPDATE,",
          "160:             'ip'        => '192.123.45.1',",
          "161:             'user_id'   => $editor->id,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179:             'html' => '<p>Updated content</p>',",
          "180:         ], [",
          "181:             'X-Forwarded-For' => '192.123.45.1',",
          "183:         ])->assertRedirect($page->refresh()->getUrl());",
          "185:         $this->assertDatabaseHas('activities', [",
          "189:             'entity_id' => $page->id,",
          "190:         ]);",
          "191:     }",
          "",
          "[Removed Lines]",
          "182:             'REMOTE_ADDR' => '192.123.45.2',",
          "186:             'type' => ActivityType::PAGE_UPDATE,",
          "187:             'ip' => '127.0.0.1',",
          "188:             'user_id' => $editor->id,",
          "",
          "[Added Lines]",
          "182:             'REMOTE_ADDR'     => '192.123.45.2',",
          "186:             'type'      => ActivityType::PAGE_UPDATE,",
          "187:             'ip'        => '127.0.0.1',",
          "188:             'user_id'   => $editor->id,",
          "",
          "---------------"
        ]
      }
    }
  ]
}