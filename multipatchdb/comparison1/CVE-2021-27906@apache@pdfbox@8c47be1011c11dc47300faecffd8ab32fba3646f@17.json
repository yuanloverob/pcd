{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "72d8afd884c5a7111cb15a28040ebc3f45f9273b",
      "candidate_info": {
        "commit_hash": "72d8afd884c5a7111cb15a28040ebc3f45f9273b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/72d8afd884c5a7111cb15a28040ebc3f45f9273b",
        "files": [
          "xmpbox/src/main/java/org/apache/xmpbox/xml/XmpSerializer.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890880 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "xmpbox/src/main/java/org/apache/xmpbox/xml/XmpSerializer.java||xmpbox/src/main/java/org/apache/xmpbox/xml/XmpSerializer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "xmpbox/src/main/java/org/apache/xmpbox/xml/XmpSerializer.java||xmpbox/src/main/java/org/apache/xmpbox/xml/XmpSerializer.java": [
          "File: xmpbox/src/main/java/org/apache/xmpbox/xml/XmpSerializer.java -> xmpbox/src/main/java/org/apache/xmpbox/xml/XmpSerializer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     public void serializeFields(Document doc, Element parent, List<AbstractField> fields, String resourceNS, String prefix, boolean wrapWithProperty)",
          "122:     {",
          "123:         for (AbstractField field : fields)",
          "124:         {",
          "126:             if (field instanceof AbstractSimpleProperty)",
          "127:             {",
          "128:                 AbstractSimpleProperty simple = (AbstractSimpleProperty) field;",
          "130:                 String localPrefix;",
          "133:                 {",
          "134:                     localPrefix = prefix;",
          "135:                 }",
          "",
          "[Removed Lines]",
          "132:                 if (prefix != null && !prefix.isEmpty())",
          "",
          "[Added Lines]",
          "123:         boolean usePrefix = prefix != null && !prefix.isEmpty();",
          "132:                 if (usePrefix)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "47fa134ec8c7b4f59d460ae569c644526893be07",
      "candidate_info": {
        "commit_hash": "47fa134ec8c7b4f59d460ae569c644526893be07",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/47fa134ec8c7b4f59d460ae569c644526893be07",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/CCITTFactoryTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/util/TestNumberFormatUtil.java"
        ],
        "message": "PDFBOX-4892: SonarQube fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881576 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/CCITTFactoryTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/CCITTFactoryTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/util/TestNumberFormatUtil.java||pdfbox/src/test/java/org/apache/pdfbox/util/TestNumberFormatUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/CCITTFactoryTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/CCITTFactoryTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/CCITTFactoryTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/CCITTFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import static org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent;",
          "39: import static org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:     {",
          "173:         PDDocument document = new PDDocument();",
          "174:         BufferedImage bim = new BufferedImage(343, 287, BufferedImage.TYPE_BYTE_BINARY);",
          "176:         int col = 0;",
          "177:         for (int x = 0; x < bim.getWidth(); ++x)",
          "178:         {",
          "",
          "[Removed Lines]",
          "175:         assertTrue((bim.getWidth() / 8) * 8 != bim.getWidth()); // not mult of 8",
          "",
          "[Added Lines]",
          "176:         Assert.assertNotEquals((bim.getWidth() / 8) * 8, bim.getWidth()); // not mult of 8",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactoryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import org.apache.pdfbox.pdmodel.PDPage;",
          "42: import org.apache.pdfbox.pdmodel.PDPageContentStream;",
          "43: import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;",
          "45: import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;",
          "46: import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB;",
          "47: import static org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent;",
          "",
          "[Removed Lines]",
          "44: import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: import static org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.doWritePDF;",
          "50: import static org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate;",
          "51: import org.apache.pdfbox.rendering.PDFRenderer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:         BufferedImage bitonalImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_BYTE_BINARY);",
          "99:         g = bitonalImage.getGraphics();",
          "100:         g.drawImage(image, 0, 0, null);",
          "",
          "[Removed Lines]",
          "97:         assertFalse(bitonalImage.getWidth() % 8 == 0);",
          "",
          "[Added Lines]",
          "97:         Assert.assertNotEquals(0, bitonalImage.getWidth() % 8);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "490:         BufferedImage maskImage = ximage.getSoftMask().getImage();",
          "495:         assertEquals(Transparency.OPAQUE, maskImage.getTransparency());",
          "496:         for (int x = 0; x < width; ++x)",
          "497:         {",
          "",
          "[Removed Lines]",
          "493:         assertFalse(maskImage.getWidth() % 8 == 0);",
          "",
          "[Added Lines]",
          "493:         Assert.assertNotEquals(0, maskImage.getWidth() % 8);",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/util/TestNumberFormatUtil.java||pdfbox/src/test/java/org/apache/pdfbox/util/TestNumberFormatUtil.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/util/TestNumberFormatUtil.java -> pdfbox/src/test/java/org/apache/pdfbox/util/TestNumberFormatUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import junit.framework.Test;",
          "24: import junit.framework.TestCase;",
          "25: import junit.framework.TestSuite;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139:             {",
          "141:                 int byteCount = NumberFormatUtil.formatFloatFast(value.floatValue(), maxFractionDigits, formatBuffer);",
          "143:                 String newStringResult = new String(formatBuffer, 0, byteCount, Charsets.US_ASCII);",
          "144:                 BigDecimal formattedDecimal = new BigDecimal(newStringResult);",
          "",
          "[Removed Lines]",
          "142:                 assertFalse(byteCount == -1);",
          "",
          "[Added Lines]",
          "143:                 Assert.assertNotEquals(-1, byteCount);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37c0f16fae21a93832b74f3a4e585242fda8b6ff",
      "candidate_info": {
        "commit_hash": "37c0f16fae21a93832b74f3a4e585242fda8b6ff",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/37c0f16fae21a93832b74f3a4e585242fda8b6ff",
        "files": [
          "tools/src/main/java/org/apache/pdfbox/tools/imageio/TIFFUtil.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890854 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "tools/src/main/java/org/apache/pdfbox/tools/imageio/TIFFUtil.java||tools/src/main/java/org/apache/pdfbox/tools/imageio/TIFFUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/src/main/java/org/apache/pdfbox/tools/imageio/TIFFUtil.java||tools/src/main/java/org/apache/pdfbox/tools/imageio/TIFFUtil.java": [
          "File: tools/src/main/java/org/apache/pdfbox/tools/imageio/TIFFUtil.java -> tools/src/main/java/org/apache/pdfbox/tools/imageio/TIFFUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import javax.imageio.metadata.IIOMetadataNode;",
          "26: import java.awt.image.BufferedImage;",
          "27: import static org.apache.pdfbox.tools.imageio.MetaUtil.debugLogMetadata;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.w3c.dom.NodeList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:         IIOMetadataNode root = new IIOMetadataNode(metaDataFormat);",
          "88:         IIOMetadataNode ifd;",
          "90:         {",
          "91:             ifd = new IIOMetadataNode(\"TIFFIFD\");",
          "92:             root.appendChild(ifd);",
          "93:         }",
          "94:         else",
          "95:         {",
          "97:         }",
          "",
          "[Removed Lines]",
          "89:         if (root.getElementsByTagName(\"TIFFIFD\").getLength() == 0)",
          "96:             ifd = (IIOMetadataNode)root.getElementsByTagName(\"TIFFIFD\").item(0);",
          "",
          "[Added Lines]",
          "90:         NodeList nodeListTIFFIFD = root.getElementsByTagName(\"TIFFIFD\");",
          "91:         if (nodeListTIFFIFD.getLength() == 0)",
          "98:             ifd = (IIOMetadataNode) nodeListTIFFIFD.item(0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14a98081927fa62e410601033a38d3202a178d79",
      "candidate_info": {
        "commit_hash": "14a98081927fa62e410601033a38d3202a178d79",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/14a98081927fa62e410601033a38d3202a178d79",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java"
        ],
        "message": "PDFBOX-5016: reset toggled PDButton subtype when changing subtype\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1883399 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     public void setPushButton(boolean pushbutton)",
          "100:     {",
          "101:         getCOSObject().setFlag(COSName.FF, FLAG_PUSHBUTTON, pushbutton);",
          "102:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:         if (pushbutton)",
          "103:         {",
          "104:             setRadioButton(false);",
          "105:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:     public void setRadioButton(boolean radiobutton)",
          "120:     {",
          "121:         getCOSObject().setFlag(COSName.FF, FLAG_RADIO, radiobutton);",
          "122:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:         if (radiobutton)",
          "127:         {",
          "128:             setPushButton(false);",
          "129:         }",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDButtonTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:         assertTrue(buttonField.isRadioButton());",
          "95:         assertFalse(buttonField.isPushButton());",
          "96:     }",
          "98:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:     @Test",
          "99:     public void changeRadioButtonToPushButton()",
          "100:     {",
          "101:         PDButton buttonField = new PDRadioButton(acroForm);",
          "103:         assertEquals(buttonField.getFieldType(), buttonField.getCOSObject().getNameAsString(COSName.FT));",
          "104:         assertEquals(\"Btn\", buttonField.getFieldType());",
          "105:         assertTrue(buttonField.isRadioButton());",
          "106:         assertFalse(buttonField.isPushButton());",
          "109:         buttonField.setPushButton(true);",
          "110:         assertFalse(buttonField.isRadioButton());",
          "111:         assertTrue(buttonField.isPushButton());",
          "112:     }",
          "114:     @Test",
          "115:     public void changePushButtonToRadioButton()",
          "116:     {",
          "117:         PDButton buttonField = new PDPushButton(acroForm);",
          "119:         assertEquals(buttonField.getFieldType(), buttonField.getCOSObject().getNameAsString(COSName.FT));",
          "120:         assertEquals(\"Btn\", buttonField.getFieldType());",
          "121:         assertTrue(buttonField.isPushButton());",
          "122:         assertFalse(buttonField.isRadioButton());",
          "125:         buttonField.setRadioButton(true);",
          "126:         assertFalse(buttonField.isPushButton());",
          "127:         assertTrue(buttonField.isRadioButton());",
          "128:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "537fe2bb11d767998eccb4f426791d3eeca14379",
      "candidate_info": {
        "commit_hash": "537fe2bb11d767998eccb4f426791d3eeca14379",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/537fe2bb11d767998eccb4f426791d3eeca14379",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java"
        ],
        "message": "PDFBOX-4892: improve javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888766 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java -> pdfbox/src/main/java/org/apache/pdfbox/multipdf/Splitter.java"
        ]
      }
    }
  ]
}