{
  "cve_id": "CVE-2020-26149",
  "cve_desc": "NATS nats.js before 2.0.0-209, nats.ws before 1.0.0-111, and nats.deno before 1.0.0-9 allow credential disclosure from a client to a server.",
  "repo": "nats-io/nats.ws",
  "patch_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
  "patch_info": {
    "commit_hash": "0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "repo": "nats-io/nats.ws",
    "commit_url": "https://github.com/nats-io/nats.ws/commit/0a37ac2a411ff63f0707cda69a268c5fc4079eb7",
    "files": [
      ".github/workflows/natsws.yml",
      "package.json",
      "src/nats-base-client.ts",
      "src/ws_transport.ts"
    ],
    "message": "[update] [security] updated nats-base-client to v1.0.0-9 (#47)\n\n* [update] [security] updated nats-base-client to v1.0.0-9\n\n* bumped package version",
    "before_after_code_files": [
      "src/nats-base-client.ts||src/nats-base-client.ts",
      "src/ws_transport.ts||src/ws_transport.ts"
    ]
  },
  "patch_diff": {
    "src/nats-base-client.ts||src/nats-base-client.ts": [
      "File: src/nats-base-client.ts -> src/nats-base-client.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-8/nats-base-client/internal_mod.ts\";",
      "",
      "[Added Lines]",
      "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-9/nats-base-client/internal_mod.ts\";",
      "",
      "---------------"
    ],
    "src/ws_transport.ts||src/ws_transport.ts": [
      "File: src/ws_transport.ts -> src/ws_transport.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:   delay,",
      "27: } from \"./nats-base-client.ts\";",
      "30: const LANG = \"nats.ws\";",
      "32: export class WsTransport implements Transport {",
      "",
      "[Removed Lines]",
      "29: const VERSION = \"1.0.0-110\";",
      "",
      "[Added Lines]",
      "29: const VERSION = \"1.0.0-111\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1686e8855e240bc7839e73324f1a7f8f48b43db8",
      "candidate_info": {
        "commit_hash": "1686e8855e240bc7839e73324f1a7f8f48b43db8",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/1686e8855e240bc7839e73324f1a7f8f48b43db8",
        "files": [
          "bin/check-bundle-version.ts",
          "package.json",
          "src/ws_transport.ts"
        ],
        "message": "[FEAT] added a check to insure package version matches version in source (#104)\n\n* [FEAT] added a check to insure package version matches version in source.",
        "before_after_code_files": [
          "bin/check-bundle-version.ts||bin/check-bundle-version.ts",
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "bin/check-bundle-version.ts||bin/check-bundle-version.ts": [
          "File: bin/check-bundle-version.ts -> bin/check-bundle-version.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: const src = await Deno.readTextFile(\"src/ws_transport.ts\");",
          "16: const lines = src.split(\"\\n\");",
          "17: const filtered = lines.filter((txt) => {",
          "18:   return txt.indexOf(\"const VERSION\") === 0;",
          "19: });",
          "20: let parsed = filtered.map((line) => {",
          "21:   const chunks = line.split(\" \");",
          "22:   if (",
          "23:     chunks.length === 4 &&",
          "24:     chunks[0] === \"const\" &&",
          "25:     chunks[1] === \"VERSION\" &&",
          "26:     chunks[2] === \"=\"",
          "27:   ) {",
          "28:     let v = chunks[3].replace(\";\", \"\");",
          "29:     v = JSON.parse(v);",
          "30:     return v;",
          "31:   }",
          "32: });",
          "33: parsed = parsed ?? [];",
          "34: if (parsed.length !== 1) {",
          "35:   console.error(`[ERROR] unexpected number of matches on 'const VERSION'.`);",
          "36:   Deno.exit(1);",
          "37: }",
          "38: let VERSION = \"\";",
          "39: if (parsed.length === 1) {",
          "40:   VERSION = parsed[0] ?? \"\";",
          "41: }",
          "43: const pkg = await Deno.readTextFile(\"package.json\");",
          "44: const m = JSON.parse(pkg);",
          "45: if (m.version !== VERSION) {",
          "46:   console.error(",
          "47:     `[ERROR] expected package version ${m.version} and transport version ${VERSION} to match`,",
          "48:   );",
          "49:   Deno.exit(1);",
          "50: } else {",
          "51:   console.info(",
          "52:     `[OK] package version and transport version match ${m.version}`,",
          "53:   );",
          "54: }",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:   render,",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.8/nats-base-client/internal_mod.ts\";",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "35: const VERSION = \"1.1.2\";",
          "",
          "[Added Lines]",
          "35: const VERSION = \"1.1.6\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1411094eaa7bb52abe9f32537f2aa0cc0d9bd2d4",
      "candidate_info": {
        "commit_hash": "1411094eaa7bb52abe9f32537f2aa0cc0d9bd2d4",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/1411094eaa7bb52abe9f32537f2aa0cc0d9bd2d4",
        "files": [
          "src/connect.ts",
          "src/mod.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts"
        ],
        "message": "updated nbc to 1.0.1 (#90)",
        "before_after_code_files": [
          "src/connect.ts||src/connect.ts",
          "src/mod.ts||src/mod.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   setTransportFactory,",
          "20:   Transport,",
          "21:   TransportFactory,",
          "24: import { WsTransport } from \"./ws_transport.ts\";",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/mod.ts||src/mod.ts": [
          "File: src/mod.ts -> src/mod.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export { connect } from \"./connect.ts\";",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   Server,",
          "20:   ServerInfo,",
          "21:   Transport,",
          "23: import {",
          "24:   checkOptions,",
          "25:   DataBuffer,",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   INFO,",
          "31:   NatsError,",
          "32:   render,",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.0.0\";",
          "",
          "[Added Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.1/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.0.1\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eec7f94091941987dfe607c43e274642010161a2",
      "candidate_info": {
        "commit_hash": "eec7f94091941987dfe607c43e274642010161a2",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/eec7f94091941987dfe607c43e274642010161a2",
        "files": [
          ".github/workflows/natsws.yml",
          "README.md",
          "dependencies.md",
          "nats.d.ts",
          "package-lock.json",
          "package.json",
          "src/connect.ts",
          "src/mod.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts",
          "test/jetstream.js"
        ],
        "message": "canary (#87)",
        "before_after_code_files": [
          "nats.d.ts||nats.d.ts",
          "src/connect.ts||src/connect.ts",
          "src/mod.ts||src/mod.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts",
          "test/jetstream.js||test/jetstream.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "nats.d.ts||nats.d.ts": [
          "File: nats.d.ts -> nats.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: ): Promise<NatsConnection>;",
          "19: export declare const Empty: Uint8Array;",
          "21: export declare enum Events {",
          "27: }",
          "28: export interface Status {",
          "31: }",
          "32: export declare enum DebugEvents {",
          "36: }",
          "38: export interface NatsConnection {",
          "58: }",
          "60: export interface ConnectionOptions {",
          "89: export interface Msg {",
          "96: }",
          "97: export interface SubOpts<T> {",
          "102: }",
          "103: export declare type SubscriptionOptions = SubOpts<Msg>;",
          "105: export interface ServerInfo {",
          "126: }",
          "128: export interface ServersChanged {",
          "131: }",
          "132: export interface Sub<T> extends AsyncIterable<T> {",
          "144: }",
          "145: export declare type Subscription = Sub<Msg>;",
          "146: export interface RequestOptions {",
          "151: }",
          "152: export interface PublishOptions {",
          "155: }",
          "157: export interface MsgHdrs extends Iterable<[string, string[]]> {",
          "",
          "[Removed Lines]",
          "22:   Disconnect = \"disconnect\",",
          "23:   Reconnect = \"reconnect\",",
          "24:   Update = \"update\",",
          "25:   LDM = \"ldm\",",
          "26:   Error = \"error\",",
          "29:   type: Events | DebugEvents;",
          "30:   data: string | ServersChanged | number;",
          "33:   Reconnecting = \"reconnecting\",",
          "34:   PingTimer = \"pingTimer\",",
          "35:   StaleConnection = \"staleConnection\",",
          "39:   info?: ServerInfo;",
          "40:   closed(): Promise<void | Error>;",
          "41:   close(): Promise<void>;",
          "42:   publish(subject: string, data?: Uint8Array, options?: PublishOptions): void;",
          "43:   subscribe(subject: string, opts?: SubscriptionOptions): Subscription;",
          "44:   request(",
          "45:     subject: string,",
          "46:     data?: Uint8Array,",
          "47:     opts?: RequestOptions,",
          "48:   ): Promise<Msg>;",
          "49:   flush(): Promise<void>;",
          "50:   drain(): Promise<void>;",
          "51:   isClosed(): boolean;",
          "52:   isDraining(): boolean;",
          "53:   getServer(): string;",
          "54:   status(): AsyncIterable<Status>;",
          "55:   stats(): Stats;",
          "56:   jetstreamManager(opts?: JetStreamOptions): Promise<JetStreamManager>;",
          "57:   jetstream(opts?: JetStreamOptions): JetStreamClient;",
          "61:   authenticator?: Authenticator;",
          "62:   debug?: boolean;",
          "63:   ignoreClusterUpdates?: boolean;",
          "64:   inboxPrefix?: string;",
          "65:   maxPingOut?: number;",
          "66:   maxReconnectAttempts?: number;",
          "67:   name?: string;",
          "68:   noEcho?: boolean;",
          "69:   noRandomize?: boolean;",
          "70:   pass?: string;",
          "71:   pedantic?: boolean;",
          "72:   pingInterval?: number;",
          "73:   port?: number;",
          "74:   reconnect?: boolean;",
          "75:   reconnectDelayHandler?: () => number;",
          "76:   reconnectJitter?: number;",
          "77:   reconnectJitterTLS?: number;",
          "78:   reconnectTimeWait?: number;",
          "79:   servers?: Array<string> | string;",
          "80:   timeout?: number;",
          "81:   tls?: TlsOptions;",
          "82:   token?: string;",
          "83:   user?: string;",
          "84:   verbose?: boolean;",
          "85:   waitOnFirstConnect?: boolean;",
          "86: }",
          "87: export interface TlsOptions {}",
          "90:   subject: string;",
          "91:   sid: number;",
          "92:   reply?: string;",
          "93:   data: Uint8Array;",
          "94:   headers?: MsgHdrs;",
          "95:   respond(data?: Uint8Array, opts?: PublishOptions): boolean;",
          "98:   queue?: string;",
          "99:   max?: number;",
          "100:   timeout?: number;",
          "101:   callback?: (err: NatsError | null, msg: T) => void;",
          "106:   \"auth_required\"?: boolean;",
          "107:   \"client_id\": number;",
          "108:   \"client_ip\"?: string;",
          "109:   \"connect_urls\"?: string[];",
          "110:   \"git_commit\"?: string;",
          "111:   go: string;",
          "112:   headers?: boolean;",
          "113:   host: string;",
          "114:   jetstream?: boolean;",
          "115:   ldm?: boolean;",
          "116:   \"max_payload\": number;",
          "117:   nonce?: string;",
          "118:   port: number;",
          "119:   proto: number;",
          "120:   \"server_id\": string;",
          "121:   \"server_name\": string;",
          "122:   \"tls_available\"?: boolean;",
          "123:   \"tls_required\"?: boolean;",
          "124:   \"tls_verify\"?: boolean;",
          "125:   version: string;",
          "129:   readonly added: string[];",
          "130:   readonly deleted: string[];",
          "133:   unsubscribe(max?: number): void;",
          "134:   drain(): Promise<void>;",
          "135:   isDraining(): boolean;",
          "136:   isClosed(): boolean;",
          "137:   callback(err: NatsError | null, msg: Msg): void;",
          "138:   getSubject(): string;",
          "139:   getReceived(): number;",
          "140:   getProcessed(): number;",
          "141:   getPending(): number;",
          "142:   getID(): number;",
          "143:   getMax(): number | undefined;",
          "147:   timeout: number;",
          "148:   headers?: MsgHdrs;",
          "149:   noMux?: boolean;",
          "150:   reply?: string;",
          "153:   reply?: string;",
          "154:   headers?: MsgHdrs;",
          "",
          "[Added Lines]",
          "21:     Disconnect = \"disconnect\",",
          "22:     Reconnect = \"reconnect\",",
          "23:     Update = \"update\",",
          "24:     LDM = \"ldm\",",
          "25:     Error = \"error\"",
          "28:     type: Events | DebugEvents;",
          "29:     data: string | ServersChanged | number;",
          "32:     Reconnecting = \"reconnecting\",",
          "33:     PingTimer = \"pingTimer\",",
          "34:     StaleConnection = \"staleConnection\"",
          "38:     info?: ServerInfo;",
          "39:     closed(): Promise<void | Error>;",
          "40:     close(): Promise<void>;",
          "41:     publish(subject: string, data?: Uint8Array, options?: PublishOptions): void;",
          "42:     subscribe(subject: string, opts?: SubscriptionOptions): Subscription;",
          "43:     request(subject: string, data?: Uint8Array, opts?: RequestOptions): Promise<Msg>;",
          "44:     flush(): Promise<void>;",
          "45:     drain(): Promise<void>;",
          "46:     isClosed(): boolean;",
          "47:     isDraining(): boolean;",
          "48:     getServer(): string;",
          "49:     status(): AsyncIterable<Status>;",
          "50:     stats(): Stats;",
          "51:     jetstreamManager(opts?: JetStreamOptions): Promise<JetStreamManager>;",
          "52:     jetstream(opts?: JetStreamOptions): JetStreamClient;",
          "55:     authenticator?: Authenticator;",
          "56:     debug?: boolean;",
          "57:     ignoreClusterUpdates?: boolean;",
          "58:     inboxPrefix?: string;",
          "59:     maxPingOut?: number;",
          "60:     maxReconnectAttempts?: number;",
          "61:     name?: string;",
          "62:     noEcho?: boolean;",
          "63:     noRandomize?: boolean;",
          "64:     pass?: string;",
          "65:     pedantic?: boolean;",
          "66:     pingInterval?: number;",
          "67:     port?: number;",
          "68:     reconnect?: boolean;",
          "69:     reconnectDelayHandler?: () => number;",
          "70:     reconnectJitter?: number;",
          "71:     reconnectJitterTLS?: number;",
          "72:     reconnectTimeWait?: number;",
          "73:     servers?: Array<string> | string;",
          "74:     timeout?: number;",
          "75:     tls?: TlsOptions;",
          "76:     token?: string;",
          "77:     user?: string;",
          "78:     verbose?: boolean;",
          "79:     waitOnFirstConnect?: boolean;",
          "80: }",
          "81: export interface TlsOptions {",
          "82: }",
          "84:     subject: string;",
          "85:     sid: number;",
          "86:     reply?: string;",
          "87:     data: Uint8Array;",
          "88:     headers?: MsgHdrs;",
          "89:     respond(data?: Uint8Array, opts?: PublishOptions): boolean;",
          "92:     queue?: string;",
          "93:     max?: number;",
          "94:     timeout?: number;",
          "95:     callback?: (err: NatsError | null, msg: T) => void;",
          "100:     \"auth_required\"?: boolean;",
          "101:     \"client_id\": number;",
          "102:     \"client_ip\"?: string;",
          "103:     \"connect_urls\"?: string[];",
          "104:     \"git_commit\"?: string;",
          "105:     go: string;",
          "106:     headers?: boolean;",
          "107:     host: string;",
          "108:     jetstream?: boolean;",
          "109:     ldm?: boolean;",
          "110:     \"max_payload\": number;",
          "111:     nonce?: string;",
          "112:     port: number;",
          "113:     proto: number;",
          "114:     \"server_id\": string;",
          "115:     \"server_name\": string;",
          "116:     \"tls_available\"?: boolean;",
          "117:     \"tls_required\"?: boolean;",
          "118:     \"tls_verify\"?: boolean;",
          "119:     version: string;",
          "123:     readonly added: string[];",
          "124:     readonly deleted: string[];",
          "127:     unsubscribe(max?: number): void;",
          "128:     drain(): Promise<void>;",
          "129:     isDraining(): boolean;",
          "130:     isClosed(): boolean;",
          "131:     callback(err: NatsError | null, msg: Msg): void;",
          "132:     getSubject(): string;",
          "133:     getReceived(): number;",
          "134:     getProcessed(): number;",
          "135:     getPending(): number;",
          "136:     getID(): number;",
          "137:     getMax(): number | undefined;",
          "141:     timeout: number;",
          "142:     headers?: MsgHdrs;",
          "143:     noMux?: boolean;",
          "144:     reply?: string;",
          "147:     reply?: string;",
          "148:     headers?: MsgHdrs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251: }",
          "253: export interface Stats {",
          "258: }",
          "260: export interface Codec<T> {",
          "",
          "[Removed Lines]",
          "254:   inBytes: number;",
          "255:   outBytes: number;",
          "256:   inMsgs: number;",
          "257:   outMsgs: number;",
          "",
          "[Added Lines]",
          "248:     inBytes: number;",
          "249:     outBytes: number;",
          "250:     inMsgs: number;",
          "251:     outMsgs: number;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265: export declare function JSONCodec<T = unknown>(): Codec<T>;",
          "267: export interface JetStreamOptions {",
          "270: }",
          "271: export interface JetStreamManager {",
          "276: }",
          "277: export interface PullOptions {",
          "281: }",
          "282: export interface PubAck {",
          "287: }",
          "288: export interface JetStreamPublishOptions {",
          "297: }",
          "298: export interface ConsumerInfoable {",
          "300: }",
          "301: export interface Closed {",
          "312: export interface Pullable {",
          "314: }",
          "315: export interface Destroyable {",
          "317: }",
          "319: export interface Dispatcher<T> {",
          "",
          "[Removed Lines]",
          "268:   apiPrefix?: string;",
          "269:   timeout?: number;",
          "272:   consumers: ConsumerAPI;",
          "273:   streams: StreamAPI;",
          "274:   getAccountInfo(): Promise<JetStreamAccountStats>;",
          "275:   advisories(): AsyncIterable<Advisory>;",
          "278:   batch: number;",
          "279:   \"no_wait\": boolean;",
          "280:   expires: number;",
          "283:   stream: string;",
          "284:   seq: number;",
          "285:   duplicate: boolean;",
          "286:   ack(): void;",
          "289:   msgID: string;",
          "290:   timeout: number;",
          "291:   ackWait: Nanos;",
          "292:   expect: Partial<{",
          "293:     lastMsgID: string;",
          "294:     streamName: string;",
          "295:     lastSequence: number;",
          "296:   }>;",
          "299:   consumerInfo(): Promise<ConsumerInfo>;",
          "302:   closed: Promise<void>;",
          "303: }",
          "304: export declare type JetStreamSubscription =",
          "305:   & Sub<JsMsg>",
          "306:   & Destroyable",
          "307:   & Closed",
          "308:   & ConsumerInfoable;",
          "309: export declare type JetStreamSubscriptionOptions = TypedSubscriptionOptions<",
          "310:   JsMsg",
          "311: >;",
          "313:   pull(opts?: Partial<PullOptions>): void;",
          "316:   destroy(): Promise<void>;",
          "",
          "[Added Lines]",
          "262:     apiPrefix?: string;",
          "263:     timeout?: number;",
          "266:     consumers: ConsumerAPI;",
          "267:     streams: StreamAPI;",
          "268:     getAccountInfo(): Promise<JetStreamAccountStats>;",
          "269:     advisories(): AsyncIterable<Advisory>;",
          "272:     batch: number;",
          "273:     \"no_wait\": boolean;",
          "274:     expires: number;",
          "277:     stream: string;",
          "278:     seq: number;",
          "279:     duplicate: boolean;",
          "280:     ack(): void;",
          "283:     msgID: string;",
          "284:     timeout: number;",
          "285:     ackWait: Nanos;",
          "286:     expect: Partial<{",
          "287:         lastMsgID: string;",
          "288:         streamName: string;",
          "289:         lastSequence: number;",
          "290:     }>;",
          "293:     consumerInfo(): Promise<ConsumerInfo>;",
          "296:     closed: Promise<void>;",
          "297: }",
          "298: export declare type JetStreamSubscription = Sub<JsMsg> & Destroyable & Closed & ConsumerInfoable;",
          "299: export declare type JetStreamSubscriptionOptions = TypedSubscriptionOptions<JsMsg>;",
          "301:     pull(opts?: Partial<PullOptions>): void;",
          "304:     destroy(): Promise<void>;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327:   getReceived(): number;",
          "328: }",
          "337: export interface JetStreamClient {",
          "357: }",
          "358: export interface ConsumerOpts {",
          "367: }",
          "368: export declare function consumerOpts(): ConsumerOptsBuilder;",
          "370: export interface ConsumerOptsBuilder {",
          "387: }",
          "388: export interface Lister<T> {",
          "390: }",
          "391: export interface ConsumerAPI {",
          "396: }",
          "397: export interface StreamAPI {",
          "407: }",
          "408: export interface JsMsg {",
          "421: }",
          "422: export interface DeliveryInfo {",
          "431: }",
          "432: export interface StoredMsg {",
          "438: }",
          "439: export interface Advisory {",
          "442: }",
          "443: export declare enum AdvisoryKind {",
          "458: }",
          "459: export declare type Nanos = number;",
          "460: export interface ApiError {",
          "463: }",
          "464: export interface ApiResponse {",
          "467: }",
          "468: export interface ApiPaged {",
          "472: }",
          "473: export interface ApiPagedRequest {",
          "475: }",
          "476: export interface StreamInfo {",
          "483: }",
          "484: export interface StreamConfig {",
          "502: }",
          "503: export interface StreamSource {",
          "508: }",
          "509: export interface Placement {",
          "512: }",
          "513: export declare enum RetentionPolicy {",
          "517: }",
          "518: export declare enum DiscardPolicy {",
          "521: }",
          "522: export declare enum StorageType {",
          "525: }",
          "526: export declare enum DeliverPolicy {",
          "532: }",
          "533: export declare enum AckPolicy {",
          "538: }",
          "539: export declare enum ReplayPolicy {",
          "542: }",
          "543: export interface StreamState {",
          "553: }",
          "554: export interface LostStreamData {",
          "557: }",
          "558: export interface ClusterInfo {",
          "562: }",
          "563: export interface PeerInfo {",
          "569: }",
          "570: export interface StreamSourceInfo {",
          "575: }",
          "576: export interface PurgeResponse extends Success {",
          "578: }",
          "579: export interface CreateConsumerRequest {",
          "582: }",
          "583: export interface StreamMsgResponse extends ApiResponse {",
          "591: }",
          "592: export interface SequencePair {",
          "595: }",
          "596: export interface ConsumerInfo {",
          "608: }",
          "609: export interface ConsumerListResponse extends ApiResponse, ApiPaged {",
          "611: }",
          "612: export interface StreamListResponse extends ApiResponse, ApiPaged {",
          "614: }",
          "615: export interface Success {",
          "617: }",
          "618: export declare type SuccessResponse = ApiResponse & Success;",
          "619: export interface MsgRequest {",
          "621: }",
          "622: export interface MsgDeleteRequest extends MsgRequest {",
          "624: }",
          "625: export interface JetStreamAccountStats {",
          "632: }",
          "633: export interface JetStreamApiStats {",
          "636: }",
          "639: }",
          "640: export interface AccountLimits {",
          "645: }",
          "646: export interface ConsumerConfig {",
          "662: }",
          "663: export interface Consumer {",
          "666: }",
          "667: export interface StreamNames {",
          "669: }",
          "670: export interface StreamNameBySubject {",
          "672: }",
          "673: export interface NextRequest {",
          "677: }",
          "679: export declare type MsgAdapter<T> = (",
          "",
          "[Removed Lines]",
          "330: export declare type JetStreamPullSubscription =",
          "331:   & JetStreamSubscription",
          "332:   & Pullable;",
          "333: export declare type JsMsgCallback = (",
          "334:   err: NatsError | null,",
          "335:   msg: JsMsg | null,",
          "336: ) => void;",
          "338:   publish(",
          "339:     subj: string,",
          "340:     data?: Uint8Array,",
          "341:     options?: Partial<JetStreamPublishOptions>,",
          "342:   ): Promise<PubAck>;",
          "343:   pull(stream: string, durable: string): Promise<JsMsg>;",
          "344:   pullBatch(",
          "345:     stream: string,",
          "346:     durable: string,",
          "347:     opts?: Partial<PullOptions>,",
          "348:   ): QueuedIterator<JsMsg>;",
          "349:   pullSubscribe(",
          "350:     subject: string,",
          "351:     opts: ConsumerOptsBuilder | ConsumerOpts,",
          "352:   ): Promise<JetStreamPullSubscription>;",
          "353:   subscribe(",
          "354:     subject: string,",
          "355:     opts: ConsumerOptsBuilder | ConsumerOpts,",
          "356:   ): Promise<JetStreamSubscription>;",
          "359:   config: Partial<ConsumerConfig>;",
          "360:   mack: boolean;",
          "361:   subQueue: string;",
          "362:   stream: string;",
          "363:   callbackFn?: JsMsgCallback;",
          "364:   name?: string;",
          "365:   max?: number;",
          "366:   debug?: boolean;",
          "371:   deliverTo(subject: string): void;",
          "372:   manualAck(): void;",
          "373:   durable(name: string): void;",
          "374:   deliverAll(): void;",
          "375:   deliverLast(): void;",
          "376:   deliverNew(): void;",
          "377:   startSequence(seq: number): void;",
          "378:   startTime(time: Date | Nanos): void;",
          "379:   ackNone(): void;",
          "380:   ackAll(): void;",
          "381:   ackExplicit(): void;",
          "382:   maxDeliver(max: number): void;",
          "383:   maxAckPending(max: number): void;",
          "384:   maxWaiting(max: number): void;",
          "385:   maxMessages(max: number): void;",
          "386:   callback(fn: JsMsgCallback): void;",
          "389:   next(): Promise<T[]>;",
          "392:   info(stream: string, consumer: string): Promise<ConsumerInfo>;",
          "393:   add(stream: string, cfg: Partial<ConsumerConfig>): Promise<ConsumerInfo>;",
          "394:   delete(stream: string, consumer: string): Promise<boolean>;",
          "395:   list(stream: string): Lister<ConsumerInfo>;",
          "398:   info(stream: string): Promise<StreamInfo>;",
          "399:   add(cfg: Partial<StreamConfig>): Promise<StreamInfo>;",
          "400:   update(cfg: StreamConfig): Promise<StreamInfo>;",
          "401:   purge(stream: string): Promise<PurgeResponse>;",
          "402:   delete(stream: string): Promise<boolean>;",
          "403:   list(): Lister<StreamInfo>;",
          "404:   deleteMessage(stream: string, seq: number): Promise<boolean>;",
          "405:   getMessage(stream: string, seq: number): Promise<StoredMsg>;",
          "406:   find(subject: string): Promise<string>;",
          "409:   redelivered: boolean;",
          "410:   info: DeliveryInfo;",
          "411:   seq: number;",
          "412:   headers: MsgHdrs | undefined;",
          "413:   data: Uint8Array;",
          "414:   subject: string;",
          "415:   sid: number;",
          "416:   ack(): void;",
          "417:   nak(): void;",
          "418:   working(): void;",
          "419:   term(): void;",
          "420:   ackAck(): Promise<boolean>;",
          "423:   stream: string;",
          "424:   consumer: string;",
          "425:   redeliveryCount: number;",
          "426:   streamSequence: number;",
          "427:   deliverySequence: number;",
          "428:   timestampNanos: number;",
          "429:   pending: number;",
          "430:   redelivered: boolean;",
          "433:   subject: string;",
          "434:   seq: number;",
          "435:   header: MsgHdrs;",
          "436:   data: Uint8Array;",
          "437:   time: Date;",
          "440:   kind: AdvisoryKind;",
          "441:   data: unknown;",
          "444:   API = \"api_audit\",",
          "445:   StreamAction = \"stream_action\",",
          "446:   ConsumerAction = \"consumer_action\",",
          "447:   SnapshotCreate = \"snapshot_create\",",
          "448:   SnapshotComplete = \"snapshot_complete\",",
          "449:   RestoreCreate = \"restore_create\",",
          "450:   RestoreComplete = \"restore_complete\",",
          "451:   MaxDeliver = \"max_deliver\",",
          "452:   Terminated = \"terminated\",",
          "453:   Ack = \"consumer_ack\",",
          "454:   StreamLeaderElected = \"stream_leader_elected\",",
          "455:   StreamQuorumLost = \"stream_quorum_lost\",",
          "456:   ConsumerLeaderElected = \"consumer_leader_elected\",",
          "457:   ConsumerQuorumLost = \"consumer_quorum_lost\",",
          "461:   code: number;",
          "462:   description: string;",
          "465:   type: string;",
          "466:   error?: ApiError;",
          "469:   total: number;",
          "470:   offset: number;",
          "471:   limit: number;",
          "474:   offset: number;",
          "477:   config: StreamConfig;",
          "478:   created: number;",
          "479:   state: StreamState;",
          "480:   cluster?: ClusterInfo;",
          "481:   mirror?: StreamSourceInfo;",
          "482:   sources?: StreamSourceInfo[];",
          "485:   name: string;",
          "486:   subjects?: string[];",
          "487:   retention: RetentionPolicy;",
          "488:   \"max_consumers\": number;",
          "489:   \"max_msgs\": number;",
          "490:   \"max_bytes\": number;",
          "491:   discard?: DiscardPolicy;",
          "492:   \"max_age\": number;",
          "493:   \"max_msg_size\"?: number;",
          "494:   storage: StorageType;",
          "495:   \"num_replicas\": number;",
          "496:   \"no_ack\"?: boolean;",
          "497:   \"template_owner\"?: string;",
          "498:   \"duplicate_window\"?: number;",
          "499:   placement?: Placement;",
          "500:   mirror?: StreamSource;",
          "501:   sources?: StreamSource[];",
          "504:   name: string;",
          "505:   \"opt_start_seq\": number;",
          "506:   \"opt_start_time\": string;",
          "507:   \"filter_subject\": string;",
          "510:   cluster: string;",
          "511:   tags: string[];",
          "514:   Limits = \"limits\",",
          "515:   Interest = \"interest\",",
          "516:   Workqueue = \"workqueue\",",
          "519:   Old = \"old\",",
          "520:   New = \"new\",",
          "523:   File = \"file\",",
          "524:   Memory = \"memory\",",
          "527:   All = \"all\",",
          "528:   Last = \"last\",",
          "529:   New = \"new\",",
          "530:   StartSequence = \"by_start_sequence\",",
          "531:   StartTime = \"by_start_time\",",
          "534:   None = \"none\",",
          "535:   All = \"all\",",
          "536:   Explicit = \"explicit\",",
          "537:   NotSet = \"\",",
          "540:   Instant = \"instant\",",
          "541:   Original = \"original\",",
          "544:   messages: number;",
          "545:   bytes: number;",
          "546:   \"first_seq\": number;",
          "547:   \"first_ts\": number;",
          "548:   \"last_seq\": number;",
          "549:   \"last_ts\": string;",
          "550:   deleted: number[];",
          "551:   lost: LostStreamData;",
          "552:   \"consumer_count\": number;",
          "555:   msgs: number;",
          "556:   bytes: number;",
          "559:   name?: string;",
          "560:   leader?: string;",
          "561:   replicas?: PeerInfo[];",
          "564:   name: string;",
          "565:   current: boolean;",
          "566:   offline: boolean;",
          "567:   active: Nanos;",
          "568:   lag: number;",
          "571:   name: string;",
          "572:   lag: number;",
          "573:   active: Nanos;",
          "574:   error?: ApiError;",
          "577:   purged: number;",
          "580:   \"stream_name\": string;",
          "581:   config: Partial<ConsumerConfig>;",
          "584:   message: {",
          "585:     subject: string;",
          "586:     seq: number;",
          "587:     data: string;",
          "588:     hdrs: string;",
          "589:     time: string;",
          "590:   };",
          "593:   \"consumer_seq\": number;",
          "594:   \"stream_seq\": number;",
          "597:   \"stream_name\": string;",
          "598:   name: string;",
          "599:   created: number;",
          "600:   config: ConsumerConfig;",
          "601:   delivered: SequencePair;",
          "602:   \"ack_floor\": SequencePair;",
          "603:   \"num_ack_pending\": number;",
          "604:   \"num_redelivered\": number;",
          "605:   \"num_waiting\": number;",
          "606:   \"num_pending\": number;",
          "607:   cluster?: ClusterInfo;",
          "610:   consumers: ConsumerInfo[];",
          "613:   streams: StreamInfo[];",
          "616:   success: boolean;",
          "620:   seq: number;",
          "623:   \"no_erase\"?: boolean;",
          "626:   memory: number;",
          "627:   storage: number;",
          "628:   streams: number;",
          "629:   consumers: number;",
          "630:   api: JetStreamApiStats;",
          "631:   limits: AccountLimits;",
          "634:   total: number;",
          "635:   errors: number;",
          "637: export interface AccountInfoResponse",
          "638:   extends ApiResponse, JetStreamAccountStats {",
          "641:   \"max_memory\": number;",
          "642:   \"max_storage\": number;",
          "643:   \"max_streams\": number;",
          "644:   \"max_consumers\": number;",
          "647:   name: string;",
          "648:   \"durable_name\"?: string;",
          "649:   \"deliver_subject\"?: string;",
          "650:   \"deliver_policy\": DeliverPolicy;",
          "651:   \"opt_start_seq\"?: number;",
          "652:   \"opt_start_time\"?: string;",
          "653:   \"ack_policy\": AckPolicy;",
          "654:   \"ack_wait\"?: number;",
          "655:   \"max_deliver\"?: number;",
          "656:   \"filter_subject\"?: string;",
          "657:   \"replay_policy\": ReplayPolicy;",
          "658:   \"rate_limit_bps\"?: number;",
          "659:   \"sample_freq\"?: string;",
          "660:   \"max_waiting\"?: number;",
          "661:   \"max_ack_pending\"?: number;",
          "664:   \"stream_name\": string;",
          "665:   config: ConsumerConfig;",
          "668:   streams: string[];",
          "671:   subject: string;",
          "674:   expires: number;",
          "675:   batch: number;",
          "676:   \"no_wait\": boolean;",
          "",
          "[Added Lines]",
          "318: export declare type JetStreamPullSubscription = JetStreamSubscription & Pullable;",
          "319: export declare type JsMsgCallback = (err: NatsError | null, msg: JsMsg | null) => void;",
          "321:     publish(subj: string, data?: Uint8Array, options?: Partial<JetStreamPublishOptions>): Promise<PubAck>;",
          "322:     pull(stream: string, durable: string): Promise<JsMsg>;",
          "323:     fetch(stream: string, durable: string, opts?: Partial<PullOptions>): QueuedIterator<JsMsg>;",
          "324:     pullSubscribe(subject: string, opts: ConsumerOptsBuilder | Partial<ConsumerOpts>): Promise<JetStreamPullSubscription>;",
          "325:     subscribe(subject: string, opts: ConsumerOptsBuilder | Partial<ConsumerOpts>): Promise<JetStreamSubscription>;",
          "328:     config: Partial<ConsumerConfig>;",
          "329:     mack: boolean;",
          "330:     subQueue: string;",
          "331:     stream: string;",
          "332:     callbackFn?: JsMsgCallback;",
          "333:     name?: string;",
          "334:     max?: number;",
          "335:     debug?: boolean;",
          "340:     deliverTo(subject: string): void;",
          "341:     manualAck(): void;",
          "342:     durable(name: string): void;",
          "343:     deliverAll(): void;",
          "344:     deliverLast(): void;",
          "345:     deliverNew(): void;",
          "346:     startSequence(seq: number): void;",
          "347:     startTime(time: Date | Nanos): void;",
          "348:     ackNone(): void;",
          "349:     ackAll(): void;",
          "350:     ackExplicit(): void;",
          "351:     maxDeliver(max: number): void;",
          "352:     maxAckPending(max: number): void;",
          "353:     maxWaiting(max: number): void;",
          "354:     maxMessages(max: number): void;",
          "355:     callback(fn: JsMsgCallback): void;",
          "358:     next(): Promise<T[]>;",
          "361:     info(stream: string, consumer: string): Promise<ConsumerInfo>;",
          "362:     add(stream: string, cfg: Partial<ConsumerConfig>): Promise<ConsumerInfo>;",
          "363:     delete(stream: string, consumer: string): Promise<boolean>;",
          "364:     list(stream: string): Lister<ConsumerInfo>;",
          "367:     info(stream: string): Promise<StreamInfo>;",
          "368:     add(cfg: Partial<StreamConfig>): Promise<StreamInfo>;",
          "369:     update(cfg: StreamConfig): Promise<StreamInfo>;",
          "370:     purge(stream: string): Promise<PurgeResponse>;",
          "371:     delete(stream: string): Promise<boolean>;",
          "372:     list(): Lister<StreamInfo>;",
          "373:     deleteMessage(stream: string, seq: number): Promise<boolean>;",
          "374:     getMessage(stream: string, seq: number): Promise<StoredMsg>;",
          "375:     find(subject: string): Promise<string>;",
          "378:     redelivered: boolean;",
          "379:     info: DeliveryInfo;",
          "380:     seq: number;",
          "381:     headers: MsgHdrs | undefined;",
          "382:     data: Uint8Array;",
          "383:     subject: string;",
          "384:     sid: number;",
          "385:     ack(): void;",
          "386:     nak(): void;",
          "387:     working(): void;",
          "388:     term(): void;",
          "389:     ackAck(): Promise<boolean>;",
          "392:     stream: string;",
          "393:     consumer: string;",
          "394:     redeliveryCount: number;",
          "395:     streamSequence: number;",
          "396:     deliverySequence: number;",
          "397:     timestampNanos: number;",
          "398:     pending: number;",
          "399:     redelivered: boolean;",
          "402:     subject: string;",
          "403:     seq: number;",
          "404:     header: MsgHdrs;",
          "405:     data: Uint8Array;",
          "406:     time: Date;",
          "409:     kind: AdvisoryKind;",
          "410:     data: unknown;",
          "413:     API = \"api_audit\",",
          "414:     StreamAction = \"stream_action\",",
          "415:     ConsumerAction = \"consumer_action\",",
          "416:     SnapshotCreate = \"snapshot_create\",",
          "417:     SnapshotComplete = \"snapshot_complete\",",
          "418:     RestoreCreate = \"restore_create\",",
          "419:     RestoreComplete = \"restore_complete\",",
          "420:     MaxDeliver = \"max_deliver\",",
          "421:     Terminated = \"terminated\",",
          "422:     Ack = \"consumer_ack\",",
          "423:     StreamLeaderElected = \"stream_leader_elected\",",
          "424:     StreamQuorumLost = \"stream_quorum_lost\",",
          "425:     ConsumerLeaderElected = \"consumer_leader_elected\",",
          "426:     ConsumerQuorumLost = \"consumer_quorum_lost\"",
          "430:     code: number;",
          "431:     description: string;",
          "434:     type: string;",
          "435:     error?: ApiError;",
          "438:     total: number;",
          "439:     offset: number;",
          "440:     limit: number;",
          "443:     offset: number;",
          "446:     config: StreamConfig;",
          "447:     created: number;",
          "448:     state: StreamState;",
          "449:     cluster?: ClusterInfo;",
          "450:     mirror?: StreamSourceInfo;",
          "451:     sources?: StreamSourceInfo[];",
          "454:     name: string;",
          "455:     subjects?: string[];",
          "456:     retention: RetentionPolicy;",
          "457:     \"max_consumers\": number;",
          "458:     \"max_msgs\": number;",
          "459:     \"max_bytes\": number;",
          "460:     discard?: DiscardPolicy;",
          "461:     \"max_age\": number;",
          "462:     \"max_msg_size\"?: number;",
          "463:     storage: StorageType;",
          "464:     \"num_replicas\": number;",
          "465:     \"no_ack\"?: boolean;",
          "466:     \"template_owner\"?: string;",
          "467:     \"duplicate_window\"?: number;",
          "468:     placement?: Placement;",
          "469:     mirror?: StreamSource;",
          "470:     sources?: StreamSource[];",
          "473:     name: string;",
          "474:     \"opt_start_seq\": number;",
          "475:     \"opt_start_time\": string;",
          "476:     \"filter_subject\": string;",
          "479:     cluster: string;",
          "480:     tags: string[];",
          "483:     Limits = \"limits\",",
          "484:     Interest = \"interest\",",
          "485:     Workqueue = \"workqueue\"",
          "488:     Old = \"old\",",
          "489:     New = \"new\"",
          "492:     File = \"file\",",
          "493:     Memory = \"memory\"",
          "496:     All = \"all\",",
          "497:     Last = \"last\",",
          "498:     New = \"new\",",
          "499:     StartSequence = \"by_start_sequence\",",
          "500:     StartTime = \"by_start_time\"",
          "503:     None = \"none\",",
          "504:     All = \"all\",",
          "505:     Explicit = \"explicit\",",
          "506:     NotSet = \"\"",
          "509:     Instant = \"instant\",",
          "510:     Original = \"original\"",
          "513:     messages: number;",
          "514:     bytes: number;",
          "515:     \"first_seq\": number;",
          "516:     \"first_ts\": number;",
          "517:     \"last_seq\": number;",
          "518:     \"last_ts\": string;",
          "519:     deleted: number[];",
          "520:     lost: LostStreamData;",
          "521:     \"consumer_count\": number;",
          "524:     msgs: number;",
          "525:     bytes: number;",
          "528:     name?: string;",
          "529:     leader?: string;",
          "530:     replicas?: PeerInfo[];",
          "533:     name: string;",
          "534:     current: boolean;",
          "535:     offline: boolean;",
          "536:     active: Nanos;",
          "537:     lag: number;",
          "540:     name: string;",
          "541:     lag: number;",
          "542:     active: Nanos;",
          "543:     error?: ApiError;",
          "546:     purged: number;",
          "549:     \"stream_name\": string;",
          "550:     config: Partial<ConsumerConfig>;",
          "553:     message: {",
          "554:         subject: string;",
          "555:         seq: number;",
          "556:         data: string;",
          "557:         hdrs: string;",
          "558:         time: string;",
          "559:     };",
          "562:     \"consumer_seq\": number;",
          "563:     \"stream_seq\": number;",
          "566:     \"stream_name\": string;",
          "567:     name: string;",
          "568:     created: number;",
          "569:     config: ConsumerConfig;",
          "570:     delivered: SequencePair;",
          "571:     \"ack_floor\": SequencePair;",
          "572:     \"num_ack_pending\": number;",
          "573:     \"num_redelivered\": number;",
          "574:     \"num_waiting\": number;",
          "575:     \"num_pending\": number;",
          "576:     cluster?: ClusterInfo;",
          "579:     consumers: ConsumerInfo[];",
          "582:     streams: StreamInfo[];",
          "585:     success: boolean;",
          "589:     seq: number;",
          "592:     \"no_erase\"?: boolean;",
          "595:     memory: number;",
          "596:     storage: number;",
          "597:     streams: number;",
          "598:     consumers: number;",
          "599:     api: JetStreamApiStats;",
          "600:     limits: AccountLimits;",
          "603:     total: number;",
          "604:     errors: number;",
          "606: export interface AccountInfoResponse extends ApiResponse, JetStreamAccountStats {",
          "609:     \"max_memory\": number;",
          "610:     \"max_storage\": number;",
          "611:     \"max_streams\": number;",
          "612:     \"max_consumers\": number;",
          "615:     name: string;",
          "616:     \"durable_name\"?: string;",
          "617:     \"deliver_subject\"?: string;",
          "618:     \"deliver_policy\": DeliverPolicy;",
          "619:     \"opt_start_seq\"?: number;",
          "620:     \"opt_start_time\"?: string;",
          "621:     \"ack_policy\": AckPolicy;",
          "622:     \"ack_wait\"?: number;",
          "623:     \"max_deliver\"?: number;",
          "624:     \"filter_subject\"?: string;",
          "625:     \"replay_policy\": ReplayPolicy;",
          "626:     \"rate_limit_bps\"?: number;",
          "627:     \"sample_freq\"?: string;",
          "628:     \"max_waiting\"?: number;",
          "629:     \"max_ack_pending\"?: number;",
          "632:     \"stream_name\": string;",
          "633:     config: ConsumerConfig;",
          "636:     streams: string[];",
          "639:     subject: string;",
          "642:     expires: number;",
          "643:     batch: number;",
          "644:     \"no_wait\": boolean;",
          "",
          "---------------"
        ],
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   setTransportFactory,",
          "20:   Transport,",
          "21:   TransportFactory,",
          "24: import { WsTransport } from \"./ws_transport.ts\";",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/subscribe-requires-deliverto/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/mod.ts||src/mod.ts": [
          "File: src/mod.ts -> src/mod.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export { connect } from \"./connect.ts\";",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/subscribe-requires-deliverto/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/subscribe-requires-deliverto/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "16: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   Server,",
          "20:   ServerInfo,",
          "21:   Transport,",
          "23: import {",
          "24:   checkOptions,",
          "25:   DataBuffer,",
          "",
          "[Removed Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/subscribe-requires-deliverto/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "22: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   INFO,",
          "31:   NatsError,",
          "32:   render,",
          "36: const LANG = \"nats.ws\";",
          "38: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/subscribe-requires-deliverto/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.0.0-122\";",
          "",
          "[Added Lines]",
          "33: } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0/nats-base-client/internal_mod.ts\";",
          "35: const VERSION = \"1.0.0-124\";",
          "",
          "---------------"
        ],
        "test/jetstream.js||test/jetstream.js": [
          "File: test/jetstream.js -> test/jetstream.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   await ns.stop();",
          "147: });",
          "150:   const ns = await NatsServer.start(jetstreamServerConf(wsConfig()));",
          "151:   const nc = await connect({ servers: `ws://127.0.0.1:${ns.websocket}` });",
          "",
          "[Removed Lines]",
          "149: test(\"jetstream - pullbatch\", async (t) => {",
          "",
          "[Added Lines]",
          "149: test(\"jetstream - fetch\", async (t) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:   });",
          "160:   const js = nc.jetstream();",
          "162:   await (async () => {",
          "163:     for await (const m of iter) {",
          "",
          "[Removed Lines]",
          "161:   let iter = await js.pullBatch(\"stream\", \"me\", { no_wait: true });",
          "",
          "[Added Lines]",
          "161:   let iter = await js.fetch(\"stream\", \"me\", { no_wait: true });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:   pa = await js.publish(\"hello.world\", Empty, { expect: { lastSequence: 2 } });",
          "176:   t.is(pa.seq, 3);",
          "179:   await (async () => {",
          "180:     for await (const m of iter) {",
          "181:       m.ack();",
          "",
          "[Removed Lines]",
          "178:   iter = await js.pullBatch(\"stream\", \"me\", { no_wait: true, batch: 2 });",
          "",
          "[Added Lines]",
          "178:   iter = await js.fetch(\"stream\", \"me\", { no_wait: true, batch: 2 });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183:   })();",
          "184:   t.is(iter.getProcessed(), 2);",
          "187:   await (async () => {",
          "188:     for await (const m of iter) {",
          "189:       m.ack();",
          "",
          "[Removed Lines]",
          "186:   iter = await js.pullBatch(\"stream\", \"me\", { no_wait: true, batch: 2 });",
          "",
          "[Added Lines]",
          "186:   iter = await js.fetch(\"stream\", \"me\", { no_wait: true, batch: 2 });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191:   })();",
          "192:   t.is(iter.getProcessed(), 1);",
          "195:   await (async () => {",
          "196:     for await (const m of iter) {",
          "197:       m.ack();",
          "",
          "[Removed Lines]",
          "194:   iter = await js.pullBatch(\"stream\", \"me\", { no_wait: true, batch: 3 });",
          "",
          "[Added Lines]",
          "194:   iter = await js.fetch(\"stream\", \"me\", { no_wait: true, batch: 3 });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92ca85083e4a02c717dcccbe8e7146ce8911c910",
      "candidate_info": {
        "commit_hash": "92ca85083e4a02c717dcccbe8e7146ce8911c910",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/92ca85083e4a02c717dcccbe8e7146ce8911c910",
        "files": [
          ".gitignore",
          "nats.d.ts",
          "package.json",
          "src/nats-base-client.ts",
          "src/ws_transport.ts"
        ],
        "message": "- clamped nats-base-client dependency. (#33)\n\n- bumped versions for next npm release\n- [breaking] the `tls` option was defined as `boolean` or `TLSOptions` - all arguments are now optional, and presence indicates desire for TLS.",
        "before_after_code_files": [
          "nats.d.ts||nats.d.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "nats.d.ts||nats.d.ts": [
          "File: nats.d.ts -> nats.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   reconnectTimeWait?: number;",
          "53:   servers?: Array<string> | string;",
          "54:   timeout?: number;",
          "56:   token?: string;",
          "57:   user?: string;",
          "58:   verbose?: boolean;",
          "",
          "[Removed Lines]",
          "55:   tls?: boolean | TlsOptions;",
          "",
          "[Added Lines]",
          "55:   tls?: TlsOptions;",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: export interface ConnectionOptions extends CO {",
          "20:   ws?: boolean;",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/main/nats-base-client/internal_mod.ts\";",
          "17: import { ConnectionOptions as CO } from \"https://raw.githubusercontent.com/nats-io/nats.deno/main/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v0.1.1-31/nats-base-client/internal_mod.ts\";",
          "17: import { ConnectionOptions as CO } from \"https://raw.githubusercontent.com/nats-io/nats.deno/v0.1.1-31/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   Transport,",
          "20:   Deferred,",
          "21:   deferred,",
          "24: import { ConnectionOptions } from \"./nats-base-client.ts\";",
          "27: const LANG = \"nats.ws\";",
          "29: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "22: } from \"https://deno.land/x/nats@v0.1.1-19/nats-base-client/internal_mod.ts\";",
          "26: const VERSION = \"1.0.0-50\";",
          "",
          "[Added Lines]",
          "22: } from \"./nats-base-client.ts\";",
          "26: const VERSION = \"1.0.0-90\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88ce679047ff39c45b65b4d8f34cd8f14e5f85f1",
      "candidate_info": {
        "commit_hash": "88ce679047ff39c45b65b4d8f34cd8f14e5f85f1",
        "repo": "nats-io/nats.ws",
        "commit_url": "https://github.com/nats-io/nats.ws/commit/88ce679047ff39c45b65b4d8f34cd8f14e5f85f1",
        "files": [
          "bin/cjs-fix-imports.ts",
          "bin/clone-nd.ts",
          "examples/bench.js",
          "package-lock.json",
          "package.json",
          "src/connect.ts",
          "src/nats-base-client.ts",
          "src/ws_transport.ts"
        ],
        "message": "[updated] deno 1.4.6 and std to 0.74.0 (#53)\n\n* [updated] deno 1.4.6 and std to 0.74.0\n\n* bumped transport version",
        "before_after_code_files": [
          "bin/cjs-fix-imports.ts||bin/cjs-fix-imports.ts",
          "bin/clone-nd.ts||bin/clone-nd.ts",
          "examples/bench.js||examples/bench.js",
          "src/connect.ts||src/connect.ts",
          "src/nats-base-client.ts||src/nats-base-client.ts",
          "src/ws_transport.ts||src/ws_transport.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ],
          "candidate": [
            "src/nats-base-client.ts||src/nats-base-client.ts",
            "src/ws_transport.ts||src/ws_transport.ts"
          ]
        }
      },
      "candidate_diff": {
        "bin/cjs-fix-imports.ts||bin/cjs-fix-imports.ts": [
          "File: bin/cjs-fix-imports.ts -> bin/cjs-fix-imports.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import {",
          "5:   basename,",
          "6:   extname,",
          "9: const argv = parse(",
          "10:   Deno.args,",
          "",
          "[Removed Lines]",
          "1: import { parse } from \"https://deno.land/std@0.69.0/flags/mod.ts\";",
          "3:   join,",
          "4:   resolve,",
          "7: } from \"https://deno.land/std@0.69.0/path/mod.ts\";",
          "",
          "[Added Lines]",
          "1: import { parse } from \"https://deno.land/std@0.74.0/flags/mod.ts\";",
          "5:   join,",
          "6:   resolve,",
          "7: } from \"https://deno.land/std@0.74.0/path/mod.ts\";",
          "",
          "---------------"
        ],
        "bin/clone-nd.ts||bin/clone-nd.ts": [
          "File: bin/clone-nd.ts -> bin/clone-nd.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: const argv = parse(",
          "8:   Deno.args,",
          "",
          "[Removed Lines]",
          "1: import { parse } from \"https://deno.land/std@0.69.0/flags/mod.ts\";",
          "2: import {",
          "3:   resolve,",
          "4:   join,",
          "5: } from \"https://deno.land/std@0.69.0/path/mod.ts\";",
          "",
          "[Added Lines]",
          "1: import { parse } from \"https://deno.land/std@0.74.0/flags/mod.ts\";",
          "2: import { join, resolve } from \"https://deno.land/std@0.74.0/path/mod.ts\";",
          "",
          "---------------"
        ],
        "examples/bench.js||examples/bench.js": [
          "File: examples/bench.js -> examples/bench.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: function getString(id) {",
          "19:   return document.getElementById(id).value;",
          "",
          "[Removed Lines]",
          "16: import { connect, Bench, Metric } from \"../nats.mjs\";",
          "",
          "[Added Lines]",
          "16: import { Bench, connect, Metric } from \"../nats.mjs\";",
          "",
          "---------------"
        ],
        "src/connect.ts||src/connect.ts": [
          "File: src/connect.ts -> src/connect.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import {",
          "18:   ConnectionOptions,",
          "19:   setTransportFactory,",
          "20:   setUrlParseFn,",
          "21:   Transport,",
          "",
          "[Removed Lines]",
          "16:   NatsConnectionImpl,",
          "17:   NatsConnection,",
          "",
          "[Added Lines]",
          "17:   NatsConnection,",
          "18:   NatsConnectionImpl,",
          "",
          "---------------"
        ],
        "src/nats-base-client.ts||src/nats-base-client.ts": [
          "File: src/nats-base-client.ts -> src/nats-base-client.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-10/nats-base-client/internal_mod.ts\";",
          "",
          "[Added Lines]",
          "15: export * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-11/nats-base-client/internal_mod.ts\";",
          "",
          "---------------"
        ],
        "src/ws_transport.ts||src/ws_transport.ts": [
          "File: src/ws_transport.ts -> src/ws_transport.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: import type {",
          "16:   ConnectionOptions,",
          "18:   Deferred,",
          "19:   Server,",
          "20: } from \"./nats-base-client.ts\";",
          "21: import {",
          "22:   ErrorCode,",
          "23:   NatsError,",
          "24:   render,",
          "27: } from \"./nats-base-client.ts\";",
          "30: const LANG = \"nats.ws\";",
          "32: export class WsTransport implements Transport {",
          "",
          "[Removed Lines]",
          "17:   Transport,",
          "25:   deferred,",
          "26:   delay,",
          "29: const VERSION = \"1.0.0-112\";",
          "",
          "[Added Lines]",
          "19:   Transport,",
          "22:   deferred,",
          "23:   delay,",
          "29: const VERSION = \"1.0.0-113\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}