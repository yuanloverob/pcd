{
  "cve_id": "CVE-2023-24457",
  "cve_desc": "A cross-site request forgery (CSRF) vulnerability in Jenkins Keycloak Authentication Plugin 2.3.0 and earlier allows attackers to trick users into logging in to the attacker's account.",
  "repo": "jenkinsci/keycloak-plugin",
  "patch_hash": "e48da7b12473510092de6f74db29298171a30b7e",
  "patch_info": {
    "commit_hash": "e48da7b12473510092de6f74db29298171a30b7e",
    "repo": "jenkinsci/keycloak-plugin",
    "commit_url": "https://github.com/jenkinsci/keycloak-plugin/commit/e48da7b12473510092de6f74db29298171a30b7e",
    "files": [
      "Jenkinsfile",
      "pom.xml",
      "src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java"
    ],
    "message": "Merge pull request #14 from mrmateo/bugfix/SECURITY-2986\n\n[SECURITY-2986] Add verification check for state parameter that comes back during finish login request.",
    "before_after_code_files": [
      "src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java||src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java"
    ]
  },
  "patch_diff": {
    "src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java||src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java": [
      "File: src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java -> src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: import org.acegisecurity.AuthenticationManager;",
      "45: import org.acegisecurity.BadCredentialsException;",
      "46: import org.acegisecurity.context.SecurityContextHolder;",
      "47: import org.keycloak.KeycloakSecurityContext;",
      "48: import org.keycloak.OAuth2Constants;",
      "49: import org.keycloak.adapters.AdapterDeploymentContext;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: import org.apache.commons.lang.StringUtils;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74: import org.kohsuke.stapler.QueryParameter;",
      "75: import org.kohsuke.stapler.StaplerRequest;",
      "76: import org.kohsuke.stapler.StaplerResponse;",
      "78: import hudson.Extension;",
      "79: import hudson.model.Descriptor;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78: import org.springframework.security.authentication.AuthenticationServiceException;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "179:         KeycloakUriBuilder builder = getKeycloakDeployment().getAuthUrl().clone()",
      "180:     .queryParam(OAuth2Constants.CLIENT_ID, getKeycloakDeployment().getResourceName())",
      "182:     .queryParam(OAuth2Constants.RESPONSE_TYPE, OAuth2Constants.CODE)",
      "183:     .queryParam(OAuth2Constants.SCOPE, scopeParam);",
      "184:         String keycloakIdp = getKeycloakIdp();",
      "",
      "[Removed Lines]",
      "181:     .queryParam(OAuth2Constants.REDIRECT_URI, redirect).queryParam(OAuth2Constants.STATE, state)",
      "",
      "[Added Lines]",
      "183:     .queryParam(OAuth2Constants.REDIRECT_URI, redirect)",
      "184:     .queryParam(OAuth2Constants.STATE, state)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "187:         }",
      "188:   String authUrl = builder.build().toString();",
      "189:   request.getSession().setAttribute(AUTH_REQUESTED, Boolean.valueOf(true));",
      "190:   createFilter();",
      "191:   return new HttpRedirect(authUrl);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "193:   request.getSession().setAttribute(OAuth2Constants.STATE, state);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "234:    LOGGER.log(Level.FINE, \"TokenURL\" + resolvedDeployment.getTokenUrl());",
      "236:    AccessTokenResponse tokenResponse = ServerRequest.invokeAccessCodeToToken(resolvedDeployment,",
      "237:      request.getParameter(OAuth2Constants.CODE), redirect, null);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "240:    checkState(request.getParameter(OAuth2Constants.STATE), request.getSession().getAttribute(OAuth2Constants.STATE));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "292:   return HttpResponses.redirectToContextRoot();",
      "293:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "301:  private void checkState(String queryState, Object sessionStateObj) {",
      "302:   if (StringUtils.isEmpty(queryState) || sessionStateObj == null) {",
      "303:    LOGGER.log(Level.WARNING, \"Cannot validate incoming authentication attempt due to state not being found. State from query: \"",
      "304:     + queryState + \" State from session: \" + sessionStateObj);",
      "305:    throw new AuthenticationServiceException(\"Could not validate state token during authentication.\");",
      "306:   }",
      "307:   String sessionState = sessionStateObj.toString();",
      "308:   if (StringUtils.equals(queryState, sessionState)) {",
      "309:    LOGGER.log(Level.FINE, \"State cookie matches parameter value.\");",
      "310:   } else {",
      "311:    LOGGER.log(Level.WARNING, \"State session value (\" + sessionState + \") did NOT match parameter value (\" + queryState + \")\");",
      "312:    throw new AuthenticationServiceException(\"State values did not match\");",
      "313:   }",
      "314:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7a3045926943e0d39a6522eede81d7e758e84e14",
      "candidate_info": {
        "commit_hash": "7a3045926943e0d39a6522eede81d7e758e84e14",
        "repo": "jenkinsci/keycloak-plugin",
        "commit_url": "https://github.com/jenkinsci/keycloak-plugin/commit/7a3045926943e0d39a6522eede81d7e758e84e14",
        "files": [
          "src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java"
        ],
        "message": "[SECURITY-2986] Add verification check for state parameter that comes back during finish login request.",
        "before_after_code_files": [
          "src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java||src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/keycloak-plugin/pull/14"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java||src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java"
          ],
          "candidate": [
            "src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java||src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java||src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java": [
          "File: src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java -> src/main/java/org/jenkinsci/plugins/KeycloakSecurityRealm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import org.acegisecurity.AuthenticationManager;",
          "45: import org.acegisecurity.BadCredentialsException;",
          "46: import org.acegisecurity.context.SecurityContextHolder;",
          "47: import org.keycloak.KeycloakSecurityContext;",
          "48: import org.keycloak.OAuth2Constants;",
          "49: import org.keycloak.adapters.AdapterDeploymentContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: import org.apache.commons.lang.StringUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: import org.kohsuke.stapler.QueryParameter;",
          "75: import org.kohsuke.stapler.StaplerRequest;",
          "76: import org.kohsuke.stapler.StaplerResponse;",
          "78: import hudson.Extension;",
          "79: import hudson.model.Descriptor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: import org.springframework.security.authentication.AuthenticationServiceException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:         KeycloakUriBuilder builder = getKeycloakDeployment().getAuthUrl().clone()",
          "180:     .queryParam(OAuth2Constants.CLIENT_ID, getKeycloakDeployment().getResourceName())",
          "182:     .queryParam(OAuth2Constants.RESPONSE_TYPE, OAuth2Constants.CODE)",
          "183:     .queryParam(OAuth2Constants.SCOPE, scopeParam);",
          "184:         String keycloakIdp = getKeycloakIdp();",
          "",
          "[Removed Lines]",
          "181:     .queryParam(OAuth2Constants.REDIRECT_URI, redirect).queryParam(OAuth2Constants.STATE, state)",
          "",
          "[Added Lines]",
          "183:     .queryParam(OAuth2Constants.REDIRECT_URI, redirect)",
          "184:     .queryParam(OAuth2Constants.STATE, state)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "187:         }",
          "188:   String authUrl = builder.build().toString();",
          "189:   request.getSession().setAttribute(AUTH_REQUESTED, Boolean.valueOf(true));",
          "190:   createFilter();",
          "191:   return new HttpRedirect(authUrl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:   request.getSession().setAttribute(OAuth2Constants.STATE, state);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "234:    LOGGER.log(Level.FINE, \"TokenURL\" + resolvedDeployment.getTokenUrl());",
          "236:    AccessTokenResponse tokenResponse = ServerRequest.invokeAccessCodeToToken(resolvedDeployment,",
          "237:      request.getParameter(OAuth2Constants.CODE), redirect, null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:    checkState(request.getParameter(OAuth2Constants.STATE), request.getSession().getAttribute(OAuth2Constants.STATE));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "292:   return HttpResponses.redirectToContextRoot();",
          "293:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301:  private void checkState(String queryState, Object sessionStateObj) {",
          "302:   if (StringUtils.isEmpty(queryState) || sessionStateObj == null) {",
          "303:    LOGGER.log(Level.WARNING, \"Cannot validate incoming authentication attempt due to state not being found. State from query: \"",
          "304:     + queryState + \" State from session: \" + sessionStateObj);",
          "305:    throw new AuthenticationServiceException(\"Could not validate state token during authentication.\");",
          "306:   }",
          "307:   String sessionState = sessionStateObj.toString();",
          "308:   if (StringUtils.equals(queryState, sessionState)) {",
          "309:    LOGGER.log(Level.FINE, \"State cookie matches parameter value.\");",
          "310:   } else {",
          "311:    LOGGER.log(Level.WARNING, \"State session value (\" + sessionState + \") did NOT match parameter value (\" + queryState + \")\");",
          "312:    throw new AuthenticationServiceException(\"State values did not match\");",
          "313:   }",
          "314:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}