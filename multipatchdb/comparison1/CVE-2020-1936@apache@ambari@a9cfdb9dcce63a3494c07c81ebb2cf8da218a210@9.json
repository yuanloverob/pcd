{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4fe520ce0d90ee61ca263b3851cd67c8057959b6",
      "candidate_info": {
        "commit_hash": "4fe520ce0d90ee61ca263b3851cd67c8057959b6",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/4fe520ce0d90ee61ca263b3851cd67c8057959b6",
        "files": [
          "ambari-server/src/main/resources/scripts/Ambaripreupload.py"
        ],
        "message": "AMBARI-24398 : HDP 3.0 Hive meta store fails to start on a sysprepped Azure cluster. (#1953)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/scripts/Ambaripreupload.py||ambari-server/src/main/resources/scripts/Ambaripreupload.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/scripts/Ambaripreupload.py||ambari-server/src/main/resources/scripts/Ambaripreupload.py": [
          "File: ambari-server/src/main/resources/scripts/Ambaripreupload.py -> ambari-server/src/main/resources/scripts/Ambaripreupload.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:     params.HdfsResource(format('{hdfs_path_prefix}/atshistory'), user='hdfs', change_permissions_for_parents=True, owner='yarn', group='hadoop', type='directory', action= ['create_on_execute'], mode=0755)",
          "253:     params.HdfsResource(format('{hdfs_path_prefix}/user/hcat'), owner='hcat', type='directory', action=['create_on_execute'], mode=0755)",
          "254:     params.HdfsResource(format('{hdfs_path_prefix}/hive/warehouse'), owner='hive', type='directory', action=['create_on_execute'], mode=0777)",
          "255:     params.HdfsResource(format('{hdfs_path_prefix}/user/hive'), owner='hive', type='directory', action=['create_on_execute'], mode=0755)",
          "256:     params.HdfsResource(format('{hdfs_path_prefix}/tmp'), mode=0777, action=['create_on_execute'], type='directory', owner='hdfs')",
          "257:     params.HdfsResource(format('{hdfs_path_prefix}/user/ambari-qa'), type='directory', action=['create_on_execute'], mode=0770)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:     params.HdfsResource(format('{hdfs_path_prefix}/warehouse/tablespace/external/hive'), owner='hive', type='directory', action=['create_on_execute'], mode=01777)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15939ef421ace98996d46504a1cd68a000a15f7a",
      "candidate_info": {
        "commit_hash": "15939ef421ace98996d46504a1cd68a000a15f7a",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/15939ef421ace98996d46504a1cd68a000a15f7a",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java"
        ],
        "message": "AMBARI-25444. Deploy fails with 401:Unauthorized on HDP-GPL; whereas url is actually accessible with credentials supplied by Releng team (aonishuk)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import org.apache.ambari.server.controller.spi.SystemException;",
          "45: import org.apache.ambari.server.controller.spi.UnsupportedPropertyException;",
          "46: import org.apache.ambari.server.controller.utilities.PropertyHelper;",
          "48: import org.apache.commons.lang.BooleanUtils;",
          "50: public class RepositoryResourceProvider extends AbstractControllerResourceProvider {",
          "",
          "[Removed Lines]",
          "47: import org.apache.ambari.server.utils.URLCredentialsHider;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "edfa078d78dbd2056563b61f8ef29e8c98d5d1e4",
      "candidate_info": {
        "commit_hash": "edfa078d78dbd2056563b61f8ef29e8c98d5d1e4",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/edfa078d78dbd2056563b61f8ef29e8c98d5d1e4",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java"
        ],
        "message": "AMBARI-25159. http.strict-transport-security change does not take affect in 2.7.x. (mpapirkovskyy) (#2862)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "670:     ServerConnector apiConnector;",
          "672:     HttpConfiguration http_config = new HttpConfiguration();",
          "674:     http_config.setRequestHeaderSize(configs.getHttpRequestHeaderSize());",
          "675:     http_config.setResponseHeaderSize(configs.getHttpResponseHeaderSize());",
          "676:     http_config.setSendServerVersion(false);",
          "",
          "[Removed Lines]",
          "673:     http_config.addCustomizer(new SecureRequestCustomizer());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "684:       String httpsCrtPass = configsMap.get(Configuration.CLIENT_API_SSL_CRT_PASS.getKey());",
          "686:       HttpConfiguration https_config = new HttpConfiguration(http_config);",
          "687:       https_config.setSecurePort(configs.getClientSSLApiPort());",
          "689:       SslContextFactory contextFactoryApi = new SslContextFactory();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:       https_config.addCustomizer(new SecureRequestCustomizer());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "146eca02451b4d2bf92596cdf312c9d7dde9dd47",
      "candidate_info": {
        "commit_hash": "146eca02451b4d2bf92596cdf312c9d7dde9dd47",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/146eca02451b4d2bf92596cdf312c9d7dde9dd47",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java",
          "ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java"
        ],
        "message": "AMBARI-24335. Updating service metainfo to declare if Kerberos is required for SSO integration support (#1887)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java||ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java||ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java",
          "ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java||ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java||ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   private final boolean ssoIntegrationSupported;",
          "40:   private final boolean ssoIntegrationDesired;",
          "41:   private final boolean ssoIntegrationEnabled;",
          "43:   public ServiceResponse(Long clusterId, String clusterName, String serviceName,",
          "44:                          StackId desiredStackId, String desiredRepositoryVersion,",
          "45:                          RepositoryVersionState repositoryVersionState, String desiredState,",
          "47:     this.clusterId = clusterId;",
          "48:     this.clusterName = clusterName;",
          "49:     this.serviceName = serviceName;",
          "",
          "[Removed Lines]",
          "46:                          boolean credentialStoreSupported, boolean credentialStoreEnabled, boolean ssoIntegrationSupported, boolean ssoIntegrationDesired, boolean ssoIntegrationEnabled) {",
          "",
          "[Added Lines]",
          "42:   private final boolean ssoIntegrationRequiresKerberos;",
          "47:                          boolean credentialStoreSupported, boolean credentialStoreEnabled, boolean ssoIntegrationSupported,",
          "48:                          boolean ssoIntegrationDesired, boolean ssoIntegrationEnabled, boolean ssoIntegrationRequiresKerberos) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:     this.desiredRepositoryVersion = desiredRepositoryVersion;",
          "57:     this.credentialStoreSupported = credentialStoreSupported;",
          "58:     this.credentialStoreEnabled = credentialStoreEnabled;",
          "59:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     this.ssoIntegrationRequiresKerberos = ssoIntegrationRequiresKerberos;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258:     return ssoIntegrationEnabled;",
          "259:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:   @ApiModelProperty(name = \"sso_integration_requires_kerberos\")",
          "268:   public boolean isSsoIntegrationRequiresKerberos() {",
          "269:     return ssoIntegrationRequiresKerberos;",
          "270:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java||ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:   private boolean isSupportDeleteViaUI;",
          "82:   private final boolean ssoIntegrationSupported;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   private final boolean ssoIntegrationRequiresKerberos;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:     credentialStoreEnabled = service.isCredentialStoreEnabled();",
          "118:     isSupportDeleteViaUI = service.isSupportDeleteViaUI();",
          "119:     ssoIntegrationSupported = service.isSingleSignOnSupported();",
          "120:   }",
          "122:   @ApiModelProperty(name = \"selection\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     ssoIntegrationRequiresKerberos = service.isKerberosRequiredForSingleSignOnIntegration();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "343:     return ssoIntegrationSupported;",
          "344:   }",
          "346:   public interface StackServiceResponseSwagger extends ApiModel {",
          "347:     @ApiModelProperty(name = \"StackServices\")",
          "348:     public StackServiceResponse getStackServiceResponse();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:   @ApiModelProperty(name = \"sso_integration_requires_kerberos\")",
          "352:   public boolean isSsoIntegrationRequiresKerberos() {",
          "353:     return ssoIntegrationRequiresKerberos;",
          "354:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:   private static final String SSO_INTEGRATION_DESIRED_PROPERTY_ID = PropertyHelper.getPropertyId(",
          "131:     \"ServiceInfo\", \"sso_integration_desired\");",
          "133:   protected static final String SERVICE_REPOSITORY_STATE = \"ServiceInfo/repository_state\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:   private static final String SSO_INTEGRATION_REQUIRES_KERBEROS_PROPERTY_ID = PropertyHelper.getPropertyId(",
          "134:       \"ServiceInfo\", \"sso_integration_requires_kerberos\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:     PROPERTY_IDS.add(SSO_INTEGRATION_SUPPORTED_PROPERTY_ID);",
          "173:     PROPERTY_IDS.add(SSO_INTEGRATION_ENABLED_PROPERTY_ID);",
          "174:     PROPERTY_IDS.add(SSO_INTEGRATION_DESIRED_PROPERTY_ID);",
          "177:     KEY_PROPERTY_IDS.put(Resource.Type.Service, SERVICE_SERVICE_NAME_PROPERTY_ID);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     PROPERTY_IDS.add(SSO_INTEGRATION_REQUIRES_KERBEROS_PROPERTY_ID);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "295:         response.isSsoIntegrationEnabled(), requestedIds);",
          "296:       setResourceProperty(resource, SSO_INTEGRATION_DESIRED_PROPERTY_ID,",
          "297:         response.isSsoIntegrationDesired(), requestedIds);",
          "299:       Map<String, Object> serviceSpecificProperties = getServiceSpecificProperties(",
          "300:           response.getClusterName(), response.getServiceName(), requestedIds);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:       setResourceProperty(resource, SSO_INTEGRATION_REQUIRES_KERBEROS_PROPERTY_ID,",
          "303:         response.isSsoIntegrationRequiresKerberos(), requestedIds);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   private static final String SSO_INTEGRATION_SUPPORTED_PROPERTY_ID = PropertyHelper.getPropertyId(",
          "106:     \"StackServices\", \"sso_integration_supported\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:   private static final String SSO_INTEGRATION_REQUIRES_KERBEROS_PROPERTY_ID = PropertyHelper.getPropertyId(",
          "109:     \"StackServices\", \"sso_integration_requires_kerberos\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:       CREDENTIAL_STORE_REQUIRED,",
          "137:       CREDENTIAL_STORE_ENABLED,",
          "138:       SUPPORT_DELETE_VIA_UI,",
          "",
          "[Removed Lines]",
          "139:       SSO_INTEGRATION_SUPPORTED_PROPERTY_ID);",
          "",
          "[Added Lines]",
          "142:       SSO_INTEGRATION_SUPPORTED_PROPERTY_ID,",
          "143:       SSO_INTEGRATION_REQUIRES_KERBEROS_PROPERTY_ID);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "244:         response.isSupportDeleteViaUI(), requestedIds);",
          "246:     setResourceProperty(resource, SSO_INTEGRATION_SUPPORTED_PROPERTY_ID, response.isSsoIntegrationSupported(), requestedIds);",
          "248:     return resource;",
          "249:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     setResourceProperty(resource, SSO_INTEGRATION_REQUIRES_KERBEROS_PROPERTY_ID, response.isSsoIntegrationRequiresKerberos(), requestedIds);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   private boolean isCredentialStoreRequired;",
          "84:   private final boolean ssoIntegrationSupported;",
          "85:   private final String ssoEnabledConfiguration;",
          "86:   private AmbariMetaInfo ambariMetaInfo;",
          "87:   private AtomicReference<MaintenanceState> maintenanceState = new AtomicReference<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   private final boolean ssoRequiresKerberos;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:     isCredentialStoreRequired = sInfo.isCredentialStoreRequired();",
          "151:     ssoIntegrationSupported = sInfo.isSingleSignOnSupported();",
          "152:     ssoEnabledConfiguration = sInfo.getSingleSignOnEnabledConfiguration();",
          "154:     persist(serviceEntity);",
          "155:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154:     ssoRequiresKerberos = sInfo.isKerberosRequiredForSingleSignOnIntegration();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:     displayName = sInfo.getDisplayName();",
          "200:     ssoIntegrationSupported = sInfo.isSingleSignOnSupported();",
          "201:     ssoEnabledConfiguration = sInfo.getSingleSignOnEnabledConfiguration();",
          "202:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204:     ssoRequiresKerberos = sInfo.isKerberosRequiredForSingleSignOnIntegration();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "377:     ServiceResponse r = new ServiceResponse(cluster.getClusterId(), cluster.getClusterName(),",
          "378:         getName(), desiredStackId, desiredRespositoryVersion.getVersion(), getRepositoryState(),",
          "379:         getDesiredState().toString(), isCredentialStoreSupported(), isCredentialStoreEnabled(),",
          "382:     r.setDesiredRepositoryVersionId(desiredRespositoryVersion.getId());",
          "",
          "[Removed Lines]",
          "380:       ssoIntegrationSupported, isSsoIntegrationDesired(), isSsoIntegrationEnabled());",
          "",
          "[Added Lines]",
          "383:       ssoIntegrationSupported, isSsoIntegrationDesired(), isSsoIntegrationEnabled(), isKerberosRequredForSsoIntegration());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "717:     return ssoEnabledConfiguration != null && ssoEnabledConfiguration.split(\"/\").length == 2;",
          "718:   }",
          "720:   private String ssoEnabledConfigValue() {",
          "721:     String configType = ssoEnabledConfiguration.split(\"/\")[0];",
          "722:     String propertyName = ssoEnabledConfiguration.split(\"/\")[1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723:   private boolean isKerberosRequredForSsoIntegration() {",
          "724:     return ssoRequiresKerberos;",
          "725:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java -> ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:     return properties;",
          "457:   }",
          "460:     this.properties = properties;",
          "461:   }",
          "",
          "[Removed Lines]",
          "459:   public void setProperties(List properties) {",
          "",
          "[Added Lines]",
          "459:   public void setProperties(List<PropertyInfo> properties) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "657:     return singleSignOnInfo != null ? singleSignOnInfo.getEnabledConfiguration() : null;",
          "658:   }",
          "660:   @Override",
          "661:   public String toString() {",
          "662:     StringBuilder sb = new StringBuilder();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "663:   public boolean isKerberosRequiredForSingleSignOnIntegration() {",
          "664:     return singleSignOnInfo != null && singleSignOnInfo.isKerberosRequired();",
          "665:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java||ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java -> ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   @XmlElement(name = \"enabledConfiguration\")",
          "54:   private String enabledConfiguration = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:   @XmlElement(name = \"kerberosRequired\")",
          "60:   private Boolean kerberosRequired = Boolean.FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     this.supported = supported;",
          "71:     this.enabledConfiguration = enabledConfiguration;",
          "72:   }",
          "",
          "[Removed Lines]",
          "69:   public SingleSignOnInfo(Boolean supported, String enabledConfiguration) {",
          "",
          "[Added Lines]",
          "76:   public SingleSignOnInfo(Boolean supported, String enabledConfiguration, Boolean kerberosRequired) {",
          "79:     this.kerberosRequired = kerberosRequired;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:     this.enabledConfiguration = enabledConfiguration;",
          "119:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:   public boolean isKerberosRequired() {",
          "133:     return Boolean.TRUE.equals(kerberosRequired);",
          "134:   }",
          "139:   public void setKerberosRequired(Boolean kerberosRequired) {",
          "140:     this.kerberosRequired = kerberosRequired;",
          "141:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "128:     return MoreObjects.toStringHelper(this)",
          "129:         .add(\"supported\", supported)",
          "130:         .add(\"enabledConfiguration\", enabledConfiguration)",
          "131:         .toString();",
          "132:   }",
          "133: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:         .add(\"kerberosRequired\", kerberosRequired)",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java||ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java -> ambari-server/src/test/java/org/apache/ambari/server/stack/ServiceModuleTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1078:   @Test",
          "1079:   public void testResolve_SingleSignOnInfo() throws Exception {",
          "1082:     ServiceInfo childInfo = new ServiceInfo();",
          "1083:     ServiceInfo parentInfo = new ServiceInfo();",
          "1084:     ServiceModule serviceModule;",
          "",
          "[Removed Lines]",
          "1080:     SingleSignOnInfo singleSignOnInfoChild = new SingleSignOnInfo(false, null);",
          "1081:     SingleSignOnInfo singleSignOnInfoParent = new SingleSignOnInfo(true, \"config-type/property_name\");",
          "",
          "[Added Lines]",
          "1080:     SingleSignOnInfo singleSignOnInfoChild = new SingleSignOnInfo(false, null, true);",
          "1081:     SingleSignOnInfo singleSignOnInfoParent = new SingleSignOnInfo(true, \"config-type/property_name\", false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1093:     assertEquals(singleSignOnInfoChild.isSupported(), serviceInfo.getSingleSignOnInfo().isSupported());",
          "1094:     assertEquals(singleSignOnInfoChild.getSupported(), serviceInfo.getSingleSignOnInfo().getSupported());",
          "1095:     assertEquals(singleSignOnInfoChild.getEnabledConfiguration(), serviceInfo.getSingleSignOnInfo().getEnabledConfiguration());",
          "1098:     childInfo.setSingleSignOnInfo(null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1096:     assertEquals(singleSignOnInfoChild.isKerberosRequired(), serviceInfo.isKerberosRequiredForSingleSignOnIntegration());",
          "1097:     assertEquals(singleSignOnInfoChild.isKerberosRequired(), serviceInfo.getSingleSignOnInfo().isKerberosRequired());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1103:     assertEquals(singleSignOnInfoParent.isSupported(), serviceInfo.getSingleSignOnInfo().isSupported());",
          "1104:     assertEquals(singleSignOnInfoParent.getSupported(), serviceInfo.getSingleSignOnInfo().getSupported());",
          "1105:     assertEquals(singleSignOnInfoParent.getEnabledConfiguration(), serviceInfo.getSingleSignOnInfo().getEnabledConfiguration());",
          "1108:     childInfo.setSingleSignOnInfo(singleSignOnInfoChild);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1108:     assertEquals(singleSignOnInfoParent.isKerberosRequired(), serviceInfo.isKerberosRequiredForSingleSignOnIntegration());",
          "1109:     assertEquals(singleSignOnInfoParent.isKerberosRequired(), serviceInfo.getSingleSignOnInfo().isKerberosRequired());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1113:     assertEquals(singleSignOnInfoChild.isSupported(), serviceInfo.getSingleSignOnInfo().isSupported());",
          "1114:     assertEquals(singleSignOnInfoChild.getSupported(), serviceInfo.getSingleSignOnInfo().getSupported());",
          "1115:     assertEquals(singleSignOnInfoChild.getEnabledConfiguration(), serviceInfo.getSingleSignOnInfo().getEnabledConfiguration());",
          "1116:   }",
          "1118:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120:     assertEquals(singleSignOnInfoChild.isKerberosRequired(), serviceInfo.isKerberosRequiredForSingleSignOnIntegration());",
          "1121:     assertEquals(singleSignOnInfoChild.isKerberosRequired(), serviceInfo.getSingleSignOnInfo().isKerberosRequired());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java||ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java -> ambari-server/src/test/java/org/apache/ambari/server/state/ServiceInfoTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "726:             \"      <sso>\" +",
          "727:             \"        <supported>true</supported>\" +",
          "728:             \"        <enabledConfiguration>config-type/property_name</enabledConfiguration>\" +",
          "729:             \"      </sso>\" +",
          "730:             \"    </service>\" +",
          "731:             \"  </services>\" +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729:             \"        <kerberosRequired>true</kerberosRequired> \" +",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "739:     assertTrue(singleSignOnInfo.isSupported());",
          "740:     assertEquals(Boolean.TRUE, singleSignOnInfo.getSupported());",
          "741:     assertEquals(\"config-type/property_name\", singleSignOnInfo.getEnabledConfiguration());",
          "744:     serviceInfoXml =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "743:     assertTrue(singleSignOnInfo.isKerberosRequired());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "792fd45d6dcfca2749a9c7be3daa04c7b2b18819",
      "candidate_info": {
        "commit_hash": "792fd45d6dcfca2749a9c7be3daa04c7b2b18819",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/792fd45d6dcfca2749a9c7be3daa04c7b2b18819",
        "files": [
          "ambari-web/app/models/host.js",
          "ambari-web/app/routes/main.js",
          "ambari-web/app/styles/hosts.less",
          "ambari-web/app/styles/top-nav.less",
          "ambari-web/app/templates/main/host/details.hbs",
          "ambari-web/app/views/main/host/details.js",
          "ambari-web/test/views/main/host/details_test.js"
        ],
        "message": "AMBARI-24241 Host details page: remove duplicate title",
        "before_after_code_files": [
          "ambari-web/app/models/host.js||ambari-web/app/models/host.js",
          "ambari-web/app/routes/main.js||ambari-web/app/routes/main.js",
          "ambari-web/app/styles/hosts.less||ambari-web/app/styles/hosts.less",
          "ambari-web/app/styles/top-nav.less||ambari-web/app/styles/top-nav.less",
          "ambari-web/app/templates/main/host/details.hbs||ambari-web/app/templates/main/host/details.hbs",
          "ambari-web/app/views/main/host/details.js||ambari-web/app/views/main/host/details.js",
          "ambari-web/test/views/main/host/details_test.js||ambari-web/test/views/main/host/details_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/models/host.js||ambari-web/app/models/host.js": [
          "File: ambari-web/app/models/host.js -> ambari-web/app/models/host.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   selected:DS.attr('boolean'),",
          "64:   criticalWarningAlertsCount: function() {",
          "65:     const alertsSummary = this.get('alertsSummary');",
          "66:     return alertsSummary ? (alertsSummary.CRITICAL || 0) + (alertsSummary.WARNING || 0) : 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:   isActive: Em.computed.equal('passiveState', 'OFF'),",
          "",
          "---------------"
        ],
        "ambari-web/app/routes/main.js||ambari-web/app/routes/main.js": [
          "File: ambari-web/app/routes/main.js -> ambari-web/app/routes/main.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:     hostDetails: Em.Route.extend({",
          "234:       breadcrumbs: {",
          "236:       },",
          "238:       route: '/:host_id',",
          "",
          "[Removed Lines]",
          "235:         labelBindingPath: 'App.router.mainHostDetailsController.content.hostName'",
          "",
          "[Added Lines]",
          "235:         itemView: Em.View.extend({",
          "236:           tagName: \"a\",",
          "237:           contentBinding: 'App.router.mainHostDetailsController.content',",
          "238:           isActive: Em.computed.equal('content.passiveState', 'OFF'),",
          "239:           click: function() {",
          "240:             App.router.transitionTo('hosts.hostDetails.summary', this.get('content'));",
          "241:           },",
          "242:           template: Em.Handlebars.compile('<span class=\"host-breadcrumb\">{{view.content.hostName}}</span>' +",
          "243:             '<span rel=\"HealthTooltip\" {{bindAttr class=\"view.content.healthClass view.content.healthIconClass :icon\"}} ' +",
          "244:             'data-placement=\"bottom\" {{bindAttr data-original-title=\"view.content.healthToolTip\" }}></span>')",
          "245:         })",
          "",
          "---------------"
        ],
        "ambari-web/app/styles/hosts.less||ambari-web/app/styles/hosts.less": [
          "File: ambari-web/app/styles/hosts.less -> ambari-web/app/styles/hosts.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "462:   }",
          "463: }",
          "465: #host-alerts {",
          "466:   padding: 0 10px;",
          "467:   background-color: #ffffff;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465: .host-breadcrumb {",
          "466:   max-width: 50%;",
          "467:   display: inline-block;",
          "468:   text-overflow: ellipsis;",
          "469:   white-space: nowrap;",
          "470:   overflow: hidden;",
          "471:   vertical-align: bottom;",
          "472: }",
          "",
          "---------------"
        ],
        "ambari-web/app/styles/top-nav.less||ambari-web/app/styles/top-nav.less": [
          "File: ambari-web/app/styles/top-nav.less -> ambari-web/app/styles/top-nav.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     margin-bottom: 10px;",
          "28:     .navbar-header {",
          "30:       margin-top: -5px;",
          "31:       font-size: 20px;",
          "32:       a {",
          "33:         color: #313D54;",
          "34:         cursor: pointer;",
          "",
          "[Removed Lines]",
          "29:       padding: 19px 15px 19px 0px;",
          "",
          "[Added Lines]",
          "29:       padding: 19px 15px 19px 0;",
          "32:       width: ~\"calc(100% - 400px)\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:         cursor: default;",
          "38:         color: #999;",
          "39:       }",
          "40:     }",
          "42:     .cluster-notifications {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:       .icon {",
          "42:         font-size: @default-font-size;",
          "43:         margin: 0 4px;",
          "44:         vertical-align: baseline;",
          "45:       }",
          "",
          "---------------"
        ],
        "ambari-web/app/templates/main/host/details.hbs||ambari-web/app/templates/main/host/details.hbs": [
          "File: ambari-web/app/templates/main/host/details.hbs -> ambari-web/app/templates/main/host/details.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: {{#if view.isLoaded}}",
          "20:   <div id=\"host-details\">",
          "33:       {{view App.MainHostMenuView hostBinding=\"view.content\"}}",
          "34:         <div class=\"service-button\">",
          "35:           <div class=\"btn-group display-inline-block\">",
          "",
          "[Removed Lines]",
          "21:     <div class=\"host-details-header\">",
          "22:       <div class=\"status-info mbm\">",
          "23:         <h2 class='table-title display-inline'>",
          "24:           <a class=\"disabled\">{{t common.host}}</a><span>:&nbsp;{{unbound view.content.hostName}}</span>",
          "25:         </h2>",
          "26:         <span rel=\"HealthTooltip\" {{bindAttr class=\"view.content.healthClass view.content.healthIconClass\"}} data-placement=\"bottom\" {{bindAttr data-original-title=\"view.content.healthToolTip\" }}></span>",
          "27:         {{#unless view.isActive}}",
          "28:           <span class=\"host-maintenance-notice pull-right\"><span class=\"icon-medkit\"></span> {{t hosts.host.passive.mode}}</span>",
          "29:         {{/unless}}",
          "30:       </div>",
          "31:     </div>",
          "32:     <div class=\"content\">",
          "",
          "[Added Lines]",
          "21:        <div class=\"content\">",
          "",
          "---------------"
        ],
        "ambari-web/app/views/main/host/details.js||ambari-web/app/views/main/host/details.js": [
          "File: ambari-web/app/views/main/host/details.js -> ambari-web/app/views/main/host/details.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   hasManyClientsWithConfigs: Em.computed.gt('clientsWithConfigs.length', 1),",
          "43:   maintenance: function () {",
          "45:     var result = [];",
          "46:     if (App.isAuthorized(\"SERVICE.START_STOP\")) {",
          "47:       result = result.concat([",
          "",
          "[Removed Lines]",
          "41:   isActive: Em.computed.equal('controller.content.passiveState', 'OFF'),",
          "44:     var onOff = this.get('isActive') ? \"On\" : \"Off\";",
          "",
          "[Added Lines]",
          "42:     var onOff = this.get('controller.content.isActive') ? \"On\" : \"Off\";",
          "",
          "---------------"
        ],
        "ambari-web/test/views/main/host/details_test.js||ambari-web/test/views/main/host/details_test.js": [
          "File: ambari-web/test/views/main/host/details_test.js -> ambari-web/test/views/main/host/details_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     });",
          "73:   });",
          "88:   describe('#maintenance', function () {",
          "89:     activeCases.forEach(function (item) {",
          "90:       it('passive state label should contain ' + item.label, function () {",
          "91:         view.set('controller', {",
          "92:           content: {",
          "94:           }",
          "95:         });",
          "96:         expect(view.get('maintenance').findProperty('action', 'onOffPassiveModeForHost').label).to.contain(item.label);",
          "",
          "[Removed Lines]",
          "75:   describe('#isActive', function () {",
          "76:     activeCases.forEach(function (item) {",
          "77:       it('should be ' + item.isActive, function () {",
          "78:         view.set('controller', {",
          "79:           content: {",
          "80:             passiveState: item.passiveState",
          "81:           }",
          "82:         });",
          "83:         expect(view.get('isActive')).to.equal(item.isActive);",
          "84:       });",
          "85:     });",
          "86:   });",
          "93:             passiveState: item.passiveState",
          "",
          "[Added Lines]",
          "80:             passiveState: item.passiveState,",
          "81:             isActive: item.isActive",
          "",
          "---------------"
        ]
      }
    }
  ]
}