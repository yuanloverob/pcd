{
  "cve_id": "CVE-2021-20329",
  "cve_desc": "Specific cstrings input may not be properly validated in the MongoDB Go Driver when marshalling Go objects into BSON. A malicious user could use a Go object with specific string to potentially inject additional fields into marshalled documents. This issue affects all MongoDB GO Drivers prior to and including 1.5.0.",
  "repo": "mongodb/mongo-go-driver",
  "patch_hash": "2aca31d5986a9e1c65a92264736de9fdc3b9b4ca",
  "patch_info": {
    "commit_hash": "2aca31d5986a9e1c65a92264736de9fdc3b9b4ca",
    "repo": "mongodb/mongo-go-driver",
    "commit_url": "https://github.com/mongodb/mongo-go-driver/commit/2aca31d5986a9e1c65a92264736de9fdc3b9b4ca",
    "files": [
      "bson/bsonrw/value_writer.go",
      "bson/marshal_test.go",
      "x/bsonx/bsoncore/bsoncore.go",
      "x/bsonx/bsoncore/bsoncore_test.go"
    ],
    "message": "GODRIVER-1923 Error if BSON cstrings contain null bytes (#622)",
    "before_after_code_files": [
      "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go",
      "bson/marshal_test.go||bson/marshal_test.go",
      "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go",
      "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go"
    ]
  },
  "patch_diff": {
    "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go": [
      "File: bson/bsonrw/value_writer.go -> bson/bsonrw/value_writer.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "12:  \"io\"",
      "13:  \"math\"",
      "14:  \"strconv\"",
      "15:  \"sync\"",
      "17:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15:  \"strings\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "247: func (vw *valueWriter) writeElementHeader(t bsontype.Type, destination mode, callerName string, addmodes ...mode) error {",
      "248:  switch vw.stack[vw.frame].mode {",
      "249:  case mElement:",
      "251:  case mValue:",
      "253:   vw.buf = bsoncore.AppendHeader(vw.buf, t, strconv.Itoa(vw.stack[vw.frame].arrkey))",
      "",
      "[Removed Lines]",
      "250:   vw.buf = bsoncore.AppendHeader(vw.buf, t, vw.stack[vw.frame].key)",
      "",
      "[Added Lines]",
      "251:   key := vw.stack[vw.frame].key",
      "252:   if !isValidCString(key) {",
      "253:    return errors.New(\"BSON element key cannot contain null bytes\")",
      "254:   }",
      "256:   vw.buf = bsoncore.AppendHeader(vw.buf, t, key)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "430: }",
      "432: func (vw *valueWriter) WriteRegex(pattern string, options string) error {",
      "433:  if err := vw.writeElementHeader(bsontype.Regex, mode(0), \"WriteRegex\"); err != nil {",
      "434:   return err",
      "435:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "439:  if !isValidCString(pattern) || !isValidCString(options) {",
      "440:   return errors.New(\"BSON regex values cannot contain null bytes\")",
      "441:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "602:  vw.buf[start+3] = byte(length >> 24)",
      "603:  return nil",
      "604: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "615: func isValidCString(cs string) bool {",
      "616:  return !strings.ContainsRune(cs, '\\x00')",
      "617: }",
      "",
      "---------------"
    ],
    "bson/marshal_test.go||bson/marshal_test.go": [
      "File: bson/marshal_test.go -> bson/marshal_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: import (",
      "10:  \"bytes\"",
      "11:  \"fmt\"",
      "12:  \"reflect\"",
      "13:  \"testing\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11:  \"errors\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "267:   })",
      "268:  })",
      "269: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "272: func TestNullBytes(t *testing.T) {",
      "273:  t.Run(\"element keys\", func(t *testing.T) {",
      "274:   doc := D{{\"a\\x00\", \"foobar\"}}",
      "275:   res, err := Marshal(doc)",
      "276:   want := errors.New(\"BSON element key cannot contain null bytes\")",
      "277:   assert.Equal(t, want, err, \"expected Marshal error %v, got error %v with result %q\", want, err, Raw(res))",
      "278:  })",
      "280:  t.Run(\"regex values\", func(t *testing.T) {",
      "281:   wantErr := errors.New(\"BSON regex values cannot contain null bytes\")",
      "283:   testCases := []struct {",
      "284:    name    string",
      "285:    pattern string",
      "286:    options string",
      "287:   }{",
      "288:    {\"null bytes in pattern\", \"a\\x00\", \"i\"},",
      "289:    {\"null bytes in options\", \"pattern\", \"i\\x00\"},",
      "290:   }",
      "291:   for _, tc := range testCases {",
      "292:    t.Run(tc.name, func(t *testing.T) {",
      "293:     regex := primitive.Regex{",
      "294:      Pattern: tc.pattern,",
      "295:      Options: tc.options,",
      "296:     }",
      "297:     res, err := Marshal(D{{\"foo\", regex}})",
      "298:     assert.Equal(t, wantErr, err, \"expected Marshal error %v, got error %v with result %q\", wantErr, err, Raw(res))",
      "299:    })",
      "300:   }",
      "301:  })",
      "302: }",
      "",
      "---------------"
    ],
    "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go": [
      "File: x/bsonx/bsoncore/bsoncore.go -> x/bsonx/bsoncore/bsoncore.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:  \"fmt\"",
      "31:  \"math\"",
      "32:  \"strconv\"",
      "33:  \"time\"",
      "35:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
      "36:  \"go.mongodb.org/mongo-driver/bson/primitive\"",
      "37: )",
      "46: func AppendType(dst []byte, t bsontype.Type) []byte { return append(dst, byte(t)) }",
      "",
      "[Removed Lines]",
      "40: const EmptyDocumentLength = 5",
      "43: const nullTerminator = string(byte(0))",
      "",
      "[Added Lines]",
      "33:  \"strings\"",
      "40: const (",
      "42:  EmptyDocumentLength = 5",
      "44:  nullTerminator       = string(byte(0))",
      "45:  invalidKeyPanicMsg   = \"BSON element keys cannot contain null bytes\"",
      "46:  invalidRegexPanicMsg = \"BSON regex values cannot contain null bytes\"",
      "47: )",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "53: func AppendHeader(dst []byte, t bsontype.Type, key string) []byte {",
      "54:  dst = AppendType(dst, t)",
      "55:  dst = append(dst, key...)",
      "56:  return append(dst, 0x00)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:  if !isValidCString(key) {",
      "59:   panic(invalidKeyPanicMsg)",
      "60:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "432: func AppendRegex(dst []byte, pattern, options string) []byte {",
      "433:  return append(dst, pattern+nullTerminator+options+nullTerminator...)",
      "434: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "441:  if !isValidCString(pattern) || !isValidCString(options) {",
      "442:   panic(invalidRegexPanicMsg)",
      "443:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "844:  dst = appendLength(dst, int32(len(b)))",
      "845:  return append(dst, b...)",
      "846: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "860: func isValidCString(cs string) bool {",
      "861:  return !strings.ContainsRune(cs, '\\x00')",
      "862: }",
      "",
      "---------------"
    ],
    "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go": [
      "File: x/bsonx/bsoncore/bsoncore_test.go -> x/bsonx/bsoncore/bsoncore_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:  \"github.com/google/go-cmp/cmp\"",
      "17:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
      "18:  \"go.mongodb.org/mongo-driver/bson/primitive\"",
      "19: )",
      "21: func noerr(t *testing.T, err error) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:  \"go.mongodb.org/mongo-driver/internal/testutil/assert\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "899:  }",
      "900: }",
      "902: func compareDecimal128(d1, d2 primitive.Decimal128) bool {",
      "903:  d1H, d1L := d1.GetBytes()",
      "904:  d2H, d2L := d2.GetBytes()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "903: func TestNullBytes(t *testing.T) {",
      "906:  assertBSONCreationPanics := func(t *testing.T, createBSONFn func(), expected string) {",
      "907:   t.Helper()",
      "909:   defer func() {",
      "910:    got := recover()",
      "911:    assert.Equal(t, expected, got, \"expected panic with error %v, got error %v\", expected, got)",
      "912:   }()",
      "913:   createBSONFn()",
      "914:  }",
      "916:  t.Run(\"element keys\", func(t *testing.T) {",
      "917:   createDocFn := func() {",
      "918:    NewDocumentBuilder().AppendString(\"a\\x00\", \"foo\")",
      "919:   }",
      "920:   assertBSONCreationPanics(t, createDocFn, invalidKeyPanicMsg)",
      "921:  })",
      "922:  t.Run(\"regex values\", func(t *testing.T) {",
      "923:   testCases := []struct {",
      "924:    name    string",
      "925:    pattern string",
      "926:    options string",
      "927:   }{",
      "928:    {\"null bytes in pattern\", \"a\\x00\", \"i\"},",
      "929:    {\"null bytes in options\", \"pattern\", \"i\\x00\"},",
      "930:   }",
      "931:   for _, tc := range testCases {",
      "932:    t.Run(tc.name+\"-AppendRegexElement\", func(t *testing.T) {",
      "933:     createDocFn := func() {",
      "934:      AppendRegexElement(nil, \"foo\", tc.pattern, tc.options)",
      "935:     }",
      "936:     assertBSONCreationPanics(t, createDocFn, invalidRegexPanicMsg)",
      "937:    })",
      "938:    t.Run(tc.name+\"-AppendRegex\", func(t *testing.T) {",
      "939:     createValFn := func() {",
      "940:      AppendRegex(nil, tc.pattern, tc.options)",
      "941:     }",
      "942:     assertBSONCreationPanics(t, createValFn, invalidRegexPanicMsg)",
      "943:    })",
      "944:   }",
      "945:  })",
      "946: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1aa08c501f4c34674d933b317d8830e0d9eeeddc",
      "candidate_info": {
        "commit_hash": "1aa08c501f4c34674d933b317d8830e0d9eeeddc",
        "repo": "mongodb/mongo-go-driver",
        "commit_url": "https://github.com/mongodb/mongo-go-driver/commit/1aa08c501f4c34674d933b317d8830e0d9eeeddc",
        "files": [
          ".evergreen/config.yml",
          "bson/bson_test.go",
          "bson/raw_value.go",
          "mongo/mongo_test.go",
          "x/bsonx/bsoncore/bsoncore.go",
          "x/mongo/driver/wiremessage/wiremessage.go"
        ],
        "message": "Use Go 1.15 in Evergreen (#492)\n\nThis commit also fixes errors from \"go vet\" and \"gofmt\".\n\nGODRIVER-1729\nGODRIVER-1730",
        "before_after_code_files": [
          "bson/bson_test.go||bson/bson_test.go",
          "bson/raw_value.go||bson/raw_value.go",
          "mongo/mongo_test.go||mongo/mongo_test.go",
          "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go",
          "x/mongo/driver/wiremessage/wiremessage.go||x/mongo/driver/wiremessage/wiremessage.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go"
          ],
          "candidate": [
            "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go"
          ]
        }
      },
      "candidate_diff": {
        "bson/bson_test.go||bson/bson_test.go": [
          "File: bson/bson_test.go -> bson/bson_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  }",
          "31: }",
          "35: func TestTimeRoundTrip(t *testing.T) {",
          "36:  val := struct {",
          "",
          "[Removed Lines]",
          "33: func requireErrEqual(t *testing.T, err1 error, err2 error) { require.True(t, compareErrors(err1, err2)) }",
          "",
          "[Added Lines]",
          "33: func requireErrEqual(t *testing.T, err1 error, err2 error) {",
          "34:  require.True(t, compareErrors(err1, err2))",
          "35: }",
          "",
          "---------------"
        ],
        "bson/raw_value.go||bson/raw_value.go": [
          "File: bson/raw_value.go -> bson/raw_value.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: }",
          "106: func convertFromCoreValue(v bsoncore.Value) RawValue { return RawValue{Type: v.Type, Value: v.Data} }",
          "110: func (rv RawValue) Validate() error { return convertToCoreValue(rv).Validate() }",
          "",
          "[Removed Lines]",
          "107: func convertToCoreValue(v RawValue) bsoncore.Value   { return bsoncore.Value{Type: v.Type, Data: v.Value} }",
          "",
          "[Added Lines]",
          "107: func convertToCoreValue(v RawValue) bsoncore.Value {",
          "108:  return bsoncore.Value{Type: v.Type, Data: v.Value}",
          "109: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "179: func (rv RawValue) ObjectIDOK() (primitive.ObjectID, bool) { return convertToCoreValue(rv).ObjectIDOK() }",
          "",
          "[Added Lines]",
          "181: func (rv RawValue) ObjectIDOK() (primitive.ObjectID, bool) {",
          "182:  return convertToCoreValue(rv).ObjectIDOK()",
          "183: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "217: func (rv RawValue) DBPointer() (string, primitive.ObjectID) { return convertToCoreValue(rv).DBPointer() }",
          "",
          "[Added Lines]",
          "221: func (rv RawValue) DBPointer() (string, primitive.ObjectID) {",
          "222:  return convertToCoreValue(rv).DBPointer()",
          "223: }",
          "",
          "---------------"
        ],
        "mongo/mongo_test.go||mongo/mongo_test.go": [
          "File: mongo/mongo_test.go -> mongo/mongo_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:    got, id, err := transformAndEnsureID(bson.DefaultRegistry, doc)",
          "117:    assert.Nil(t, err, \"transformAndEnsureID error: %v\", err)",
          "118:    _, ok := id.(string)",
          "120:    assert.Equal(t, got, want, \"expected document %v, got %v\", got, want)",
          "121:   })",
          "122:  })",
          "",
          "[Removed Lines]",
          "119:    assert.True(t, ok, \"expected returned id type %T, got %T\", string(0), id)",
          "",
          "[Added Lines]",
          "119:    assert.True(t, ok, \"expected returned id type string, got %T\", id)",
          "",
          "---------------"
        ],
        "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go": [
          "File: x/bsonx/bsoncore/bsoncore.go -> x/bsonx/bsoncore/bsoncore.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: const EmptyDocumentLength = 5",
          "43: func AppendType(dst []byte, t bsontype.Type) []byte { return append(dst, byte(t)) }",
          "",
          "[Removed Lines]",
          "46: func AppendKey(dst []byte, key string) []byte { return append(dst, key+string(0x00)...) }",
          "",
          "[Added Lines]",
          "43: const nullTerminator = string(byte(0))",
          "49: func AppendKey(dst []byte, key string) []byte { return append(dst, key+nullTerminator...) }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429: func AppendRegex(dst []byte, pattern, options string) []byte {",
          "431: }",
          "",
          "[Removed Lines]",
          "430:  return append(dst, pattern+string(0x00)+options+string(0x00)...)",
          "",
          "[Added Lines]",
          "433:  return append(dst, pattern+nullTerminator+options+nullTerminator...)",
          "",
          "---------------"
        ],
        "x/mongo/driver/wiremessage/wiremessage.go||x/mongo/driver/wiremessage/wiremessage.go": [
          "File: x/mongo/driver/wiremessage/wiremessage.go -> x/mongo/driver/wiremessage/wiremessage.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "496: func ReadCompressedCompressorID(src []byte) (id CompressorID, rem []byte, ok bool) {",
          "",
          "[Removed Lines]",
          "493: func ReadCompressedUncompressedSize(src []byte) (size int32, rem []byte, ok bool) { return readi32(src) }",
          "",
          "[Added Lines]",
          "493: func ReadCompressedUncompressedSize(src []byte) (size int32, rem []byte, ok bool) {",
          "494:  return readi32(src)",
          "495: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a89e6cde18d6ac5d38f39b54eaa8d4e321fd118",
      "candidate_info": {
        "commit_hash": "3a89e6cde18d6ac5d38f39b54eaa8d4e321fd118",
        "repo": "mongodb/mongo-go-driver",
        "commit_url": "https://github.com/mongodb/mongo-go-driver/commit/3a89e6cde18d6ac5d38f39b54eaa8d4e321fd118",
        "files": [
          "bson/bsonrw/value_writer.go",
          "bson/marshal_test.go",
          "x/bsonx/bsoncore/bsoncore.go",
          "x/bsonx/bsoncore/bsoncore_test.go"
        ],
        "message": "GODRIVER-1923 Error if BSON cstrings contain null bytes (#622)",
        "before_after_code_files": [
          "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go",
          "bson/marshal_test.go||bson/marshal_test.go",
          "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go",
          "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go",
            "bson/marshal_test.go||bson/marshal_test.go",
            "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go",
            "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go"
          ],
          "candidate": [
            "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go",
            "bson/marshal_test.go||bson/marshal_test.go",
            "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go",
            "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go"
          ]
        }
      },
      "candidate_diff": {
        "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go": [
          "File: bson/bsonrw/value_writer.go -> bson/bsonrw/value_writer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  \"io\"",
          "13:  \"math\"",
          "14:  \"strconv\"",
          "15:  \"sync\"",
          "17:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247: func (vw *valueWriter) writeElementHeader(t bsontype.Type, destination mode, callerName string, addmodes ...mode) error {",
          "248:  switch vw.stack[vw.frame].mode {",
          "249:  case mElement:",
          "251:  case mValue:",
          "253:   vw.buf = bsoncore.AppendHeader(vw.buf, t, strconv.Itoa(vw.stack[vw.frame].arrkey))",
          "",
          "[Removed Lines]",
          "250:   vw.buf = bsoncore.AppendHeader(vw.buf, t, vw.stack[vw.frame].key)",
          "",
          "[Added Lines]",
          "251:   key := vw.stack[vw.frame].key",
          "252:   if !isValidCString(key) {",
          "253:    return errors.New(\"BSON element key cannot contain null bytes\")",
          "254:   }",
          "256:   vw.buf = bsoncore.AppendHeader(vw.buf, t, key)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430: }",
          "432: func (vw *valueWriter) WriteRegex(pattern string, options string) error {",
          "433:  if err := vw.writeElementHeader(bsontype.Regex, mode(0), \"WriteRegex\"); err != nil {",
          "434:   return err",
          "435:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:  if !isValidCString(pattern) || !isValidCString(options) {",
          "440:   return errors.New(\"BSON regex values cannot contain null bytes\")",
          "441:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "602:  vw.buf[start+3] = byte(length >> 24)",
          "603:  return nil",
          "604: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: func isValidCString(cs string) bool {",
          "616:  return !strings.ContainsRune(cs, '\\x00')",
          "617: }",
          "",
          "---------------"
        ],
        "bson/marshal_test.go||bson/marshal_test.go": [
          "File: bson/marshal_test.go -> bson/marshal_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import (",
          "10:  \"bytes\"",
          "11:  \"fmt\"",
          "12:  \"reflect\"",
          "13:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:   })",
          "268:  })",
          "269: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272: func TestNullBytes(t *testing.T) {",
          "273:  t.Run(\"element keys\", func(t *testing.T) {",
          "274:   doc := D{{\"a\\x00\", \"foobar\"}}",
          "275:   res, err := Marshal(doc)",
          "276:   want := errors.New(\"BSON element key cannot contain null bytes\")",
          "277:   assert.Equal(t, want, err, \"expected Marshal error %v, got error %v with result %q\", want, err, Raw(res))",
          "278:  })",
          "280:  t.Run(\"regex values\", func(t *testing.T) {",
          "281:   wantErr := errors.New(\"BSON regex values cannot contain null bytes\")",
          "283:   testCases := []struct {",
          "284:    name    string",
          "285:    pattern string",
          "286:    options string",
          "287:   }{",
          "288:    {\"null bytes in pattern\", \"a\\x00\", \"i\"},",
          "289:    {\"null bytes in options\", \"pattern\", \"i\\x00\"},",
          "290:   }",
          "291:   for _, tc := range testCases {",
          "292:    t.Run(tc.name, func(t *testing.T) {",
          "293:     regex := primitive.Regex{",
          "294:      Pattern: tc.pattern,",
          "295:      Options: tc.options,",
          "296:     }",
          "297:     res, err := Marshal(D{{\"foo\", regex}})",
          "298:     assert.Equal(t, wantErr, err, \"expected Marshal error %v, got error %v with result %q\", wantErr, err, Raw(res))",
          "299:    })",
          "300:   }",
          "301:  })",
          "302: }",
          "",
          "---------------"
        ],
        "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go": [
          "File: x/bsonx/bsoncore/bsoncore.go -> x/bsonx/bsoncore/bsoncore.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  \"fmt\"",
          "31:  \"math\"",
          "32:  \"strconv\"",
          "33:  \"time\"",
          "35:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
          "36:  \"go.mongodb.org/mongo-driver/bson/primitive\"",
          "37: )",
          "46: func AppendType(dst []byte, t bsontype.Type) []byte { return append(dst, byte(t)) }",
          "",
          "[Removed Lines]",
          "40: const EmptyDocumentLength = 5",
          "43: const nullTerminator = string(byte(0))",
          "",
          "[Added Lines]",
          "33:  \"strings\"",
          "40: const (",
          "42:  EmptyDocumentLength = 5",
          "44:  nullTerminator       = string(byte(0))",
          "45:  invalidKeyPanicMsg   = \"BSON element keys cannot contain null bytes\"",
          "46:  invalidRegexPanicMsg = \"BSON regex values cannot contain null bytes\"",
          "47: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: func AppendHeader(dst []byte, t bsontype.Type, key string) []byte {",
          "54:  dst = AppendType(dst, t)",
          "55:  dst = append(dst, key...)",
          "56:  return append(dst, 0x00)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:  if !isValidCString(key) {",
          "59:   panic(invalidKeyPanicMsg)",
          "60:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "432: func AppendRegex(dst []byte, pattern, options string) []byte {",
          "433:  return append(dst, pattern+nullTerminator+options+nullTerminator...)",
          "434: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:  if !isValidCString(pattern) || !isValidCString(options) {",
          "442:   panic(invalidRegexPanicMsg)",
          "443:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "844:  dst = appendLength(dst, int32(len(b)))",
          "845:  return append(dst, b...)",
          "846: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "860: func isValidCString(cs string) bool {",
          "861:  return !strings.ContainsRune(cs, '\\x00')",
          "862: }",
          "",
          "---------------"
        ],
        "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go": [
          "File: x/bsonx/bsoncore/bsoncore_test.go -> x/bsonx/bsoncore/bsoncore_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  \"github.com/google/go-cmp/cmp\"",
          "17:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
          "18:  \"go.mongodb.org/mongo-driver/bson/primitive\"",
          "19: )",
          "21: func noerr(t *testing.T, err error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  \"go.mongodb.org/mongo-driver/internal/testutil/assert\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "899:  }",
          "900: }",
          "902: func compareDecimal128(d1, d2 primitive.Decimal128) bool {",
          "903:  d1H, d1L := d1.GetBytes()",
          "904:  d2H, d2L := d2.GetBytes()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903: func TestNullBytes(t *testing.T) {",
          "906:  assertBSONCreationPanics := func(t *testing.T, createBSONFn func(), expected string) {",
          "907:   t.Helper()",
          "909:   defer func() {",
          "910:    got := recover()",
          "911:    assert.Equal(t, expected, got, \"expected panic with error %v, got error %v\", expected, got)",
          "912:   }()",
          "913:   createBSONFn()",
          "914:  }",
          "916:  t.Run(\"element keys\", func(t *testing.T) {",
          "917:   createDocFn := func() {",
          "918:    NewDocumentBuilder().AppendString(\"a\\x00\", \"foo\")",
          "919:   }",
          "920:   assertBSONCreationPanics(t, createDocFn, invalidKeyPanicMsg)",
          "921:  })",
          "922:  t.Run(\"regex values\", func(t *testing.T) {",
          "923:   testCases := []struct {",
          "924:    name    string",
          "925:    pattern string",
          "926:    options string",
          "927:   }{",
          "928:    {\"null bytes in pattern\", \"a\\x00\", \"i\"},",
          "929:    {\"null bytes in options\", \"pattern\", \"i\\x00\"},",
          "930:   }",
          "931:   for _, tc := range testCases {",
          "932:    t.Run(tc.name+\"-AppendRegexElement\", func(t *testing.T) {",
          "933:     createDocFn := func() {",
          "934:      AppendRegexElement(nil, \"foo\", tc.pattern, tc.options)",
          "935:     }",
          "936:     assertBSONCreationPanics(t, createDocFn, invalidRegexPanicMsg)",
          "937:    })",
          "938:    t.Run(tc.name+\"-AppendRegex\", func(t *testing.T) {",
          "939:     createValFn := func() {",
          "940:      AppendRegex(nil, tc.pattern, tc.options)",
          "941:     }",
          "942:     assertBSONCreationPanics(t, createValFn, invalidRegexPanicMsg)",
          "943:    })",
          "944:   }",
          "945:  })",
          "946: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4436297cc5371974a7f0aa5f0b0474ad2501ca35",
      "candidate_info": {
        "commit_hash": "4436297cc5371974a7f0aa5f0b0474ad2501ca35",
        "repo": "mongodb/mongo-go-driver",
        "commit_url": "https://github.com/mongodb/mongo-go-driver/commit/4436297cc5371974a7f0aa5f0b0474ad2501ca35",
        "files": [
          "bson/bsonrw/value_writer.go",
          "bson/marshal_test.go",
          "x/bsonx/bsoncore/bsoncore.go",
          "x/bsonx/bsoncore/bsoncore_test.go"
        ],
        "message": "GODRIVER-1923 Error if BSON cstrings contain null bytes (#622)",
        "before_after_code_files": [
          "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go",
          "bson/marshal_test.go||bson/marshal_test.go",
          "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go",
          "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go",
            "bson/marshal_test.go||bson/marshal_test.go",
            "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go",
            "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go"
          ],
          "candidate": [
            "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go",
            "bson/marshal_test.go||bson/marshal_test.go",
            "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go",
            "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go"
          ]
        }
      },
      "candidate_diff": {
        "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go": [
          "File: bson/bsonrw/value_writer.go -> bson/bsonrw/value_writer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  \"io\"",
          "13:  \"math\"",
          "14:  \"strconv\"",
          "15:  \"sync\"",
          "17:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247: func (vw *valueWriter) writeElementHeader(t bsontype.Type, destination mode, callerName string, addmodes ...mode) error {",
          "248:  switch vw.stack[vw.frame].mode {",
          "249:  case mElement:",
          "251:  case mValue:",
          "253:   vw.buf = bsoncore.AppendHeader(vw.buf, t, strconv.Itoa(vw.stack[vw.frame].arrkey))",
          "",
          "[Removed Lines]",
          "250:   vw.buf = bsoncore.AppendHeader(vw.buf, t, vw.stack[vw.frame].key)",
          "",
          "[Added Lines]",
          "251:   key := vw.stack[vw.frame].key",
          "252:   if !isValidCString(key) {",
          "253:    return errors.New(\"BSON element key cannot contain null bytes\")",
          "254:   }",
          "256:   vw.buf = bsoncore.AppendHeader(vw.buf, t, key)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430: }",
          "432: func (vw *valueWriter) WriteRegex(pattern string, options string) error {",
          "433:  if err := vw.writeElementHeader(bsontype.Regex, mode(0), \"WriteRegex\"); err != nil {",
          "434:   return err",
          "435:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:  if !isValidCString(pattern) || !isValidCString(options) {",
          "440:   return errors.New(\"BSON regex values cannot contain null bytes\")",
          "441:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "602:  vw.buf[start+3] = byte(length >> 24)",
          "603:  return nil",
          "604: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: func isValidCString(cs string) bool {",
          "616:  return !strings.ContainsRune(cs, '\\x00')",
          "617: }",
          "",
          "---------------"
        ],
        "bson/marshal_test.go||bson/marshal_test.go": [
          "File: bson/marshal_test.go -> bson/marshal_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import (",
          "10:  \"bytes\"",
          "11:  \"fmt\"",
          "12:  \"reflect\"",
          "13:  \"testing\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:   })",
          "268:  })",
          "269: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272: func TestNullBytes(t *testing.T) {",
          "273:  t.Run(\"element keys\", func(t *testing.T) {",
          "274:   doc := D{{\"a\\x00\", \"foobar\"}}",
          "275:   res, err := Marshal(doc)",
          "276:   want := errors.New(\"BSON element key cannot contain null bytes\")",
          "277:   assert.Equal(t, want, err, \"expected Marshal error %v, got error %v with result %q\", want, err, Raw(res))",
          "278:  })",
          "280:  t.Run(\"regex values\", func(t *testing.T) {",
          "281:   wantErr := errors.New(\"BSON regex values cannot contain null bytes\")",
          "283:   testCases := []struct {",
          "284:    name    string",
          "285:    pattern string",
          "286:    options string",
          "287:   }{",
          "288:    {\"null bytes in pattern\", \"a\\x00\", \"i\"},",
          "289:    {\"null bytes in options\", \"pattern\", \"i\\x00\"},",
          "290:   }",
          "291:   for _, tc := range testCases {",
          "292:    t.Run(tc.name, func(t *testing.T) {",
          "293:     regex := primitive.Regex{",
          "294:      Pattern: tc.pattern,",
          "295:      Options: tc.options,",
          "296:     }",
          "297:     res, err := Marshal(D{{\"foo\", regex}})",
          "298:     assert.Equal(t, wantErr, err, \"expected Marshal error %v, got error %v with result %q\", wantErr, err, Raw(res))",
          "299:    })",
          "300:   }",
          "301:  })",
          "302: }",
          "",
          "---------------"
        ],
        "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go": [
          "File: x/bsonx/bsoncore/bsoncore.go -> x/bsonx/bsoncore/bsoncore.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  \"fmt\"",
          "31:  \"math\"",
          "32:  \"strconv\"",
          "33:  \"time\"",
          "35:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
          "36:  \"go.mongodb.org/mongo-driver/bson/primitive\"",
          "37: )",
          "46: func AppendType(dst []byte, t bsontype.Type) []byte { return append(dst, byte(t)) }",
          "",
          "[Removed Lines]",
          "40: const EmptyDocumentLength = 5",
          "43: const nullTerminator = string(byte(0))",
          "",
          "[Added Lines]",
          "33:  \"strings\"",
          "40: const (",
          "42:  EmptyDocumentLength = 5",
          "44:  nullTerminator       = string(byte(0))",
          "45:  invalidKeyPanicMsg   = \"BSON element keys cannot contain null bytes\"",
          "46:  invalidRegexPanicMsg = \"BSON regex values cannot contain null bytes\"",
          "47: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: func AppendHeader(dst []byte, t bsontype.Type, key string) []byte {",
          "54:  dst = AppendType(dst, t)",
          "55:  dst = append(dst, key...)",
          "56:  return append(dst, 0x00)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:  if !isValidCString(key) {",
          "59:   panic(invalidKeyPanicMsg)",
          "60:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "432: func AppendRegex(dst []byte, pattern, options string) []byte {",
          "433:  return append(dst, pattern+nullTerminator+options+nullTerminator...)",
          "434: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:  if !isValidCString(pattern) || !isValidCString(options) {",
          "442:   panic(invalidRegexPanicMsg)",
          "443:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "844:  dst = appendLength(dst, int32(len(b)))",
          "845:  return append(dst, b...)",
          "846: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "860: func isValidCString(cs string) bool {",
          "861:  return !strings.ContainsRune(cs, '\\x00')",
          "862: }",
          "",
          "---------------"
        ],
        "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go": [
          "File: x/bsonx/bsoncore/bsoncore_test.go -> x/bsonx/bsoncore/bsoncore_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  \"github.com/google/go-cmp/cmp\"",
          "17:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
          "18:  \"go.mongodb.org/mongo-driver/bson/primitive\"",
          "19: )",
          "21: func noerr(t *testing.T, err error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  \"go.mongodb.org/mongo-driver/internal/testutil/assert\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "899:  }",
          "900: }",
          "902: func compareDecimal128(d1, d2 primitive.Decimal128) bool {",
          "903:  d1H, d1L := d1.GetBytes()",
          "904:  d2H, d2L := d2.GetBytes()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903: func TestNullBytes(t *testing.T) {",
          "906:  assertBSONCreationPanics := func(t *testing.T, createBSONFn func(), expected string) {",
          "907:   t.Helper()",
          "909:   defer func() {",
          "910:    got := recover()",
          "911:    assert.Equal(t, expected, got, \"expected panic with error %v, got error %v\", expected, got)",
          "912:   }()",
          "913:   createBSONFn()",
          "914:  }",
          "916:  t.Run(\"element keys\", func(t *testing.T) {",
          "917:   createDocFn := func() {",
          "918:    BuildDocument(nil, AppendStringElement(nil, \"a\\x00\", \"foo\"))",
          "919:   }",
          "921:   assertBSONCreationPanics(t, createDocFn, invalidKeyPanicMsg)",
          "922:  })",
          "923:  t.Run(\"regex values\", func(t *testing.T) {",
          "924:   testCases := []struct {",
          "925:    name    string",
          "926:    pattern string",
          "927:    options string",
          "928:   }{",
          "929:    {\"null bytes in pattern\", \"a\\x00\", \"i\"},",
          "930:    {\"null bytes in options\", \"pattern\", \"i\\x00\"},",
          "931:   }",
          "932:   for _, tc := range testCases {",
          "933:    t.Run(tc.name+\"-AppendRegexElement\", func(t *testing.T) {",
          "934:     createDocFn := func() {",
          "935:      AppendRegexElement(nil, \"foo\", tc.pattern, tc.options)",
          "936:     }",
          "937:     assertBSONCreationPanics(t, createDocFn, invalidRegexPanicMsg)",
          "938:    })",
          "939:    t.Run(tc.name+\"-AppendRegex\", func(t *testing.T) {",
          "940:     createValFn := func() {",
          "941:      AppendRegex(nil, tc.pattern, tc.options)",
          "942:     }",
          "943:     assertBSONCreationPanics(t, createValFn, invalidRegexPanicMsg)",
          "944:    })",
          "945:   }",
          "946:  })",
          "947: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98af5b4c5e755de06855976b05bed45b44b2d24a",
      "candidate_info": {
        "commit_hash": "98af5b4c5e755de06855976b05bed45b44b2d24a",
        "repo": "mongodb/mongo-go-driver",
        "commit_url": "https://github.com/mongodb/mongo-go-driver/commit/98af5b4c5e755de06855976b05bed45b44b2d24a",
        "files": [
          "bson/bsonrw/value_writer.go",
          "bson/marshal_test.go",
          "mongo/mongo_test.go",
          "x/bsonx/bsoncore/bsoncore.go",
          "x/bsonx/bsoncore/bsoncore_test.go"
        ],
        "message": "GODRIVER-1923 Error if BSON cstrings contain null bytes (#622) (#684)\n\nCo-authored-by: Divjot Arora <divjot.arora@10gen.com>",
        "before_after_code_files": [
          "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go",
          "bson/marshal_test.go||bson/marshal_test.go",
          "mongo/mongo_test.go||mongo/mongo_test.go",
          "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go",
          "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go",
            "bson/marshal_test.go||bson/marshal_test.go",
            "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go",
            "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go"
          ],
          "candidate": [
            "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go",
            "bson/marshal_test.go||bson/marshal_test.go",
            "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go",
            "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go"
          ]
        }
      },
      "candidate_diff": {
        "bson/bsonrw/value_writer.go||bson/bsonrw/value_writer.go": [
          "File: bson/bsonrw/value_writer.go -> bson/bsonrw/value_writer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  \"io\"",
          "13:  \"math\"",
          "14:  \"strconv\"",
          "15:  \"sync\"",
          "17:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247: func (vw *valueWriter) writeElementHeader(t bsontype.Type, destination mode, callerName string, addmodes ...mode) error {",
          "248:  switch vw.stack[vw.frame].mode {",
          "249:  case mElement:",
          "251:  case mValue:",
          "253:   vw.buf = bsoncore.AppendHeader(vw.buf, t, strconv.Itoa(vw.stack[vw.frame].arrkey))",
          "",
          "[Removed Lines]",
          "250:   vw.buf = bsoncore.AppendHeader(vw.buf, t, vw.stack[vw.frame].key)",
          "",
          "[Added Lines]",
          "251:   key := vw.stack[vw.frame].key",
          "252:   if !isValidCString(key) {",
          "253:    return errors.New(\"BSON element key cannot contain null bytes\")",
          "254:   }",
          "256:   vw.buf = bsoncore.AppendHeader(vw.buf, t, key)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430: }",
          "432: func (vw *valueWriter) WriteRegex(pattern string, options string) error {",
          "433:  if err := vw.writeElementHeader(bsontype.Regex, mode(0), \"WriteRegex\"); err != nil {",
          "434:   return err",
          "435:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:  if !isValidCString(pattern) || !isValidCString(options) {",
          "440:   return errors.New(\"BSON regex values cannot contain null bytes\")",
          "441:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "602:  vw.buf[start+3] = byte(length >> 24)",
          "603:  return nil",
          "604: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: func isValidCString(cs string) bool {",
          "616:  return !strings.ContainsRune(cs, '\\x00')",
          "617: }",
          "",
          "---------------"
        ],
        "bson/marshal_test.go||bson/marshal_test.go": [
          "File: bson/marshal_test.go -> bson/marshal_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import (",
          "10:  \"bytes\"",
          "11:  \"testing\"",
          "13:  \"github.com/google/go-cmp/cmp\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:   t.Errorf(\"Documents to not match. got %v; want %v\", after, before)",
          "208:  }",
          "209: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212: func TestNullBytes(t *testing.T) {",
          "213:  t.Run(\"element keys\", func(t *testing.T) {",
          "214:   doc := D{{\"a\\x00\", \"foobar\"}}",
          "215:   res, err := Marshal(doc)",
          "216:   want := errors.New(\"BSON element key cannot contain null bytes\")",
          "217:   require.Equal(t, want, err, \"expected Marshal error %v, got error %v with result %q\", want, err, Raw(res))",
          "218:  })",
          "220:  t.Run(\"regex values\", func(t *testing.T) {",
          "221:   wantErr := errors.New(\"BSON regex values cannot contain null bytes\")",
          "223:   testCases := []struct {",
          "224:    name    string",
          "225:    pattern string",
          "226:    options string",
          "227:   }{",
          "228:    {\"null bytes in pattern\", \"a\\x00\", \"i\"},",
          "229:    {\"null bytes in options\", \"pattern\", \"i\\x00\"},",
          "230:   }",
          "231:   for _, tc := range testCases {",
          "232:    t.Run(tc.name, func(t *testing.T) {",
          "233:     regex := primitive.Regex{",
          "234:      Pattern: tc.pattern,",
          "235:      Options: tc.options,",
          "236:     }",
          "237:     res, err := Marshal(D{{\"foo\", regex}})",
          "238:     require.Equal(t, wantErr, err, \"expected Marshal error %v, got error %v with result %q\", wantErr, err, Raw(res))",
          "239:    })",
          "240:   }",
          "241:  })",
          "242: }",
          "",
          "---------------"
        ],
        "mongo/mongo_test.go||mongo/mongo_test.go": [
          "File: mongo/mongo_test.go -> mongo/mongo_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:    got, id, err := transformAndEnsureID(bson.DefaultRegistry, doc)",
          "117:    assert.Nil(t, err, \"transformAndEnsureID error: %v\", err)",
          "118:    _, ok := id.(string)",
          "120:    assert.Equal(t, got, want, \"expected document %v, got %v\", got, want)",
          "121:   })",
          "122:  })",
          "",
          "[Removed Lines]",
          "119:    assert.True(t, ok, \"expected returned id type %T, got %T\", string(0), id)",
          "",
          "[Added Lines]",
          "119:    assert.True(t, ok, \"expected returned id type string, got %T\", id)",
          "",
          "---------------"
        ],
        "x/bsonx/bsoncore/bsoncore.go||x/bsonx/bsoncore/bsoncore.go": [
          "File: x/bsonx/bsoncore/bsoncore.go -> x/bsonx/bsoncore/bsoncore.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  \"fmt\"",
          "31:  \"math\"",
          "32:  \"strconv\"",
          "33:  \"time\"",
          "35:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
          "36:  \"go.mongodb.org/mongo-driver/bson/primitive\"",
          "37: )",
          "43: func AppendType(dst []byte, t bsontype.Type) []byte { return append(dst, byte(t)) }",
          "50: func AppendHeader(dst []byte, t bsontype.Type, key string) []byte {",
          "51:  dst = AppendType(dst, t)",
          "52:  dst = append(dst, key...)",
          "53:  return append(dst, 0x00)",
          "",
          "[Removed Lines]",
          "40: const EmptyDocumentLength = 5",
          "46: func AppendKey(dst []byte, key string) []byte { return append(dst, key+string(0x00)...) }",
          "",
          "[Added Lines]",
          "33:  \"strings\"",
          "40: const (",
          "42:  EmptyDocumentLength = 5",
          "44:  nullTerminator       = string(byte(0))",
          "45:  invalidKeyPanicMsg   = \"BSON element keys cannot contain null bytes\"",
          "46:  invalidRegexPanicMsg = \"BSON regex values cannot contain null bytes\"",
          "47: )",
          "53: func AppendKey(dst []byte, key string) []byte { return append(dst, key+nullTerminator...) }",
          "58:  if !isValidCString(key) {",
          "59:   panic(invalidKeyPanicMsg)",
          "60:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429: func AppendRegex(dst []byte, pattern, options string) []byte {",
          "431: }",
          "",
          "[Removed Lines]",
          "430:  return append(dst, pattern+string(0x00)+options+string(0x00)...)",
          "",
          "[Added Lines]",
          "441:  if !isValidCString(pattern) || !isValidCString(options) {",
          "442:   panic(invalidRegexPanicMsg)",
          "443:  }",
          "445:  return append(dst, pattern+nullTerminator+options+nullTerminator...)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "841:  dst = appendLength(dst, int32(len(b)))",
          "842:  return append(dst, b...)",
          "843: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "860: func isValidCString(cs string) bool {",
          "861:  return !strings.ContainsRune(cs, '\\x00')",
          "862: }",
          "",
          "---------------"
        ],
        "x/bsonx/bsoncore/bsoncore_test.go||x/bsonx/bsoncore/bsoncore_test.go": [
          "File: x/bsonx/bsoncore/bsoncore_test.go -> x/bsonx/bsoncore/bsoncore_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  \"github.com/google/go-cmp/cmp\"",
          "17:  \"go.mongodb.org/mongo-driver/bson/bsontype\"",
          "18:  \"go.mongodb.org/mongo-driver/bson/primitive\"",
          "19: )",
          "21: func noerr(t *testing.T, err error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  \"go.mongodb.org/mongo-driver/internal/testutil/assert\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "899:  }",
          "900: }",
          "902: func compareDecimal128(d1, d2 primitive.Decimal128) bool {",
          "903:  d1H, d1L := d1.GetBytes()",
          "904:  d2H, d2L := d2.GetBytes()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "903: func TestNullBytes(t *testing.T) {",
          "906:  assertBSONCreationPanics := func(t *testing.T, createBSONFn func(), expected string) {",
          "907:   t.Helper()",
          "909:   defer func() {",
          "910:    got := recover()",
          "911:    assert.Equal(t, expected, got, \"expected panic with error %v, got error %v\", expected, got)",
          "912:   }()",
          "913:   createBSONFn()",
          "914:  }",
          "916:  t.Run(\"element keys\", func(t *testing.T) {",
          "917:   createDocFn := func() {",
          "918:    BuildDocument(nil, AppendStringElement(nil, \"a\\x00\", \"foo\"))",
          "919:   }",
          "921:   assertBSONCreationPanics(t, createDocFn, invalidKeyPanicMsg)",
          "922:  })",
          "923:  t.Run(\"regex values\", func(t *testing.T) {",
          "924:   testCases := []struct {",
          "925:    name    string",
          "926:    pattern string",
          "927:    options string",
          "928:   }{",
          "929:    {\"null bytes in pattern\", \"a\\x00\", \"i\"},",
          "930:    {\"null bytes in options\", \"pattern\", \"i\\x00\"},",
          "931:   }",
          "932:   for _, tc := range testCases {",
          "933:    t.Run(tc.name+\"-AppendRegexElement\", func(t *testing.T) {",
          "934:     createDocFn := func() {",
          "935:      AppendRegexElement(nil, \"foo\", tc.pattern, tc.options)",
          "936:     }",
          "937:     assertBSONCreationPanics(t, createDocFn, invalidRegexPanicMsg)",
          "938:    })",
          "939:    t.Run(tc.name+\"-AppendRegex\", func(t *testing.T) {",
          "940:     createValFn := func() {",
          "941:      AppendRegex(nil, tc.pattern, tc.options)",
          "942:     }",
          "943:     assertBSONCreationPanics(t, createValFn, invalidRegexPanicMsg)",
          "944:    })",
          "945:   }",
          "946:  })",
          "947: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}