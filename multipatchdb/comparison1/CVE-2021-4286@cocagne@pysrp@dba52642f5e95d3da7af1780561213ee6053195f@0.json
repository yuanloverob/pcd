{
  "cve_id": "CVE-2021-4286",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in cocagne pysrp up to 1.0.16. This issue affects the function calculate_x of the file srp/_ctsrp.py. The manipulation leads to information exposure through discrepancy. Upgrading to version 1.0.17 is able to address this issue. The name of the patch is dba52642f5e95d3da7af1780561213ee6053195f. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216875.",
  "repo": "cocagne/pysrp",
  "patch_hash": "dba52642f5e95d3da7af1780561213ee6053195f",
  "patch_info": {
    "commit_hash": "dba52642f5e95d3da7af1780561213ee6053195f",
    "repo": "cocagne/pysrp",
    "commit_url": "https://github.com/cocagne/pysrp/commit/dba52642f5e95d3da7af1780561213ee6053195f",
    "files": [
      "srp/_ctsrp.py"
    ],
    "message": "Merge pull request #43 from ddealmei/fix-srp-vuln\n\nFix side channel leaks",
    "before_after_code_files": [
      "srp/_ctsrp.py||srp/_ctsrp.py"
    ]
  },
  "patch_diff": {
    "srp/_ctsrp.py||srp/_ctsrp.py": [
      "File: srp/_ctsrp.py -> srp/_ctsrp.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "201: load_func( 'BN_CTX_new',  []        , BN_CTX )",
      "202: load_func( 'BN_CTX_free', [ BN_CTX ], None   )",
      "204: load_func( 'BN_cmp',      [ BIGNUM, BIGNUM ], ctypes.c_int )",
      "206: load_func( 'BN_num_bits', [ BIGNUM ], ctypes.c_int )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "204: load_func( 'BN_set_flags', [ BIGNUM, ctypes.c_int ], None )",
      "205: BN_FLG_CONSTTIME = 0x04",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "292:         username = six.b('')",
      "293:     up = hash_class(username + six.b(':') + password).digest()",
      "294:     H_bn_str( hash_class, dest, salt, up )",
      "297: def update_hash( ctx, n ):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "298:     BN_set_flags(dest, BN_FLG_CONSTTIME)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "430:                 bytes_to_bn( self.b, bytes_b )",
      "431:             else:",
      "432:                 BN_rand(self.b, 256, 0, 0)",
      "434:             # B = kv + g^b",
      "435:             BN_mul(self.tmp1, k, self.v, self.ctx)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "437:             BN_set_flags(self.b, BN_FLG_CONSTTIME)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "541:         if bytes_A:",
      "542:             bytes_to_bn( self.A, bytes_A )",
      "543:         else:",
      "544:             BN_mod_exp(self.A, g, self.a, N, self.ctx)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "549:             BN_set_flags(self.a, BN_FLG_CONSTTIME)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "485561aa9a4e951f6e9bbfaefe38724724c9a3db",
      "candidate_info": {
        "commit_hash": "485561aa9a4e951f6e9bbfaefe38724724c9a3db",
        "repo": "cocagne/pysrp",
        "commit_url": "https://github.com/cocagne/pysrp/commit/485561aa9a4e951f6e9bbfaefe38724724c9a3db",
        "files": [
          "srp/_ctsrp.py"
        ],
        "message": "Fix side channel leaks\n\nCalling BN_mod_exp with a small base, and no constant time flag fallback on an\ninsecure implementation with OpenSSL. A simple fix is to set the appropriate\nflag before the modular exponentiation.",
        "before_after_code_files": [
          "srp/_ctsrp.py||srp/_ctsrp.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cocagne/pysrp/pull/43"
        ],
        "olp_code_files": {
          "patch": [
            "srp/_ctsrp.py||srp/_ctsrp.py"
          ],
          "candidate": [
            "srp/_ctsrp.py||srp/_ctsrp.py"
          ]
        }
      },
      "candidate_diff": {
        "srp/_ctsrp.py||srp/_ctsrp.py": [
          "File: srp/_ctsrp.py -> srp/_ctsrp.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: load_func( 'BN_CTX_new',  []        , BN_CTX )",
          "202: load_func( 'BN_CTX_free', [ BN_CTX ], None   )",
          "204: load_func( 'BN_cmp',      [ BIGNUM, BIGNUM ], ctypes.c_int )",
          "206: load_func( 'BN_num_bits', [ BIGNUM ], ctypes.c_int )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "204: load_func( 'BN_set_flags', [ BIGNUM, ctypes.c_int ], None )",
          "205: BN_FLG_CONSTTIME = 0x04",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "292:         username = six.b('')",
          "293:     up = hash_class(username + six.b(':') + password).digest()",
          "294:     H_bn_str( hash_class, dest, salt, up )",
          "297: def update_hash( ctx, n ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:     BN_set_flags(dest, BN_FLG_CONSTTIME)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430:                 bytes_to_bn( self.b, bytes_b )",
          "431:             else:",
          "432:                 BN_rand(self.b, 256, 0, 0)",
          "434:             # B = kv + g^b",
          "435:             BN_mul(self.tmp1, k, self.v, self.ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437:             BN_set_flags(self.b, BN_FLG_CONSTTIME)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "541:         if bytes_A:",
          "542:             bytes_to_bn( self.A, bytes_A )",
          "543:         else:",
          "544:             BN_mod_exp(self.A, g, self.a, N, self.ctx)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549:             BN_set_flags(self.a, BN_FLG_CONSTTIME)",
          "",
          "---------------"
        ]
      }
    }
  ]
}