{
  "cve_id": "CVE-2023-5115",
  "cve_desc": "An absolute path traversal attack exists in the Ansible automation platform. This flaw allows an attacker to craft a malicious Ansible role and make the victim execute the role. A symlink can be used to overwrite a file outside of the extraction path.",
  "repo": "ansible/ansible",
  "patch_hash": "1e930684bc0a76ec3d094cd326738ad26416541c",
  "patch_info": {
    "commit_hash": "1e930684bc0a76ec3d094cd326738ad26416541c",
    "repo": "ansible/ansible",
    "commit_url": "https://github.com/ansible/ansible/commit/1e930684bc0a76ec3d094cd326738ad26416541c",
    "files": [
      "changelogs/fragments/cve-2023-5115.yml",
      "lib/ansible/galaxy/role.py",
      "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
      "test/integration/targets/ansible-galaxy-role/tasks/dir-traversal.yml",
      "test/integration/targets/ansible-galaxy-role/tasks/main.yml"
    ],
    "message": "[stable-2.15] Prevent roles from using symlinks to overwrite files outside of the installation directory (#81780) (#81785)\n\n* Sanitize linkname during role installs\n\n* Add tests\n\n* add clog frag.\n(cherry picked from commit ddf0311c63287e2d5334770377350c1e0cbfff28)",
    "before_after_code_files": [
      "lib/ansible/galaxy/role.py||liansible/galaxy/role.py",
      "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
    ]
  },
  "patch_diff": {
    "lib/ansible/galaxy/role.py||liansible/galaxy/role.py": [
      "File: lib/ansible/galaxy/role.py -> liansible/galaxy/role.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "394:                             # bits that might be in the file for security purposes",
      "395:                             # and drop any containing directory, as mentioned above",
      "396:                             if member.isreg() or member.issym():",
      "407:                                         n_final_parts.append(n_part)",
      "410:                                 if _check_working_data_filter():",
      "411:                                     # deprecated: description='extract fallback without filter' python_version='3.11'",
      "",
      "[Removed Lines]",
      "397:                                 n_member_name = to_native(member.name)",
      "398:                                 n_archive_parent_dir = to_native(archive_parent_dir)",
      "399:                                 n_parts = n_member_name.replace(n_archive_parent_dir, \"\", 1).split(os.sep)",
      "400:                                 n_final_parts = []",
      "401:                                 for n_part in n_parts:",
      "402:                                     # TODO if the condition triggers it produces a broken installation.",
      "403:                                     # It will create the parent directory as an empty file and will",
      "404:                                     # explode if the directory contains valid files.",
      "405:                                     # Leaving this as is since the whole module needs a rewrite.",
      "406:                                     if n_part != '..' and not n_part.startswith('~') and '$' not in n_part:",
      "408:                                 member.name = os.path.join(*n_final_parts)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py": [
      "File: test/integration/targets/ansible-galaxy-role/files/create-role-archive.py -> test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #!/usr/bin/env python",
      "2: \"\"\"Create a role archive which overwrites an arbitrary file.\"\"\"",
      "4: import argparse",
      "5: import pathlib",
      "6: import tarfile",
      "7: import tempfile",
      "10: def main() -> None:",
      "11:     parser = argparse.ArgumentParser(description=__doc__)",
      "12:     parser.add_argument('archive', type=pathlib.Path, help='archive to create')",
      "13:     parser.add_argument('content', type=pathlib.Path, help='content to write')",
      "14:     parser.add_argument('target', type=pathlib.Path, help='file to overwrite')",
      "16:     args = parser.parse_args()",
      "18:     create_archive(args.archive, args.content, args.target)",
      "21: def create_archive(archive_path: pathlib.Path, content_path: pathlib.Path, target_path: pathlib.Path) -> None:",
      "22:     with (",
      "23:         tarfile.open(name=archive_path, mode='w') as role_archive,",
      "24:         tempfile.TemporaryDirectory() as temp_dir_name,",
      "25:     ):",
      "26:         temp_dir_path = pathlib.Path(temp_dir_name)",
      "28:         meta_main_path = temp_dir_path / 'meta' / 'main.yml'",
      "29:         meta_main_path.parent.mkdir()",
      "30:         meta_main_path.write_text('')",
      "32:         symlink_path = temp_dir_path / 'symlink'",
      "33:         symlink_path.symlink_to(target_path)",
      "35:         role_archive.add(meta_main_path)",
      "36:         role_archive.add(symlink_path)",
      "38:         content_tarinfo = role_archive.gettarinfo(content_path, str(symlink_path))",
      "40:         with content_path.open('rb') as content_file:",
      "41:             role_archive.addfile(content_tarinfo, content_file)",
      "44: if __name__ == '__main__':",
      "45:     main()",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ddf0311c63287e2d5334770377350c1e0cbfff28",
      "candidate_info": {
        "commit_hash": "ddf0311c63287e2d5334770377350c1e0cbfff28",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/ddf0311c63287e2d5334770377350c1e0cbfff28",
        "files": [
          "changelogs/fragments/cve-2023-5115.yml",
          "lib/ansible/galaxy/role.py",
          "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
          "test/integration/targets/ansible-galaxy-role/tasks/dir-traversal.yml",
          "test/integration/targets/ansible-galaxy-role/tasks/main.yml"
        ],
        "message": "Prevent roles from using symlinks to overwrite files outside of the installation directory (#81780)\n\n* Sanitize linkname during role installs\n\n* Add tests\n\n* add clog frag",
        "before_after_code_files": [
          "lib/ansible/galaxy/role.py||lib/ansible/galaxy/role.py",
          "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/galaxy/role.py||liansible/galaxy/role.py",
            "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
          ],
          "candidate": [
            "lib/ansible/galaxy/role.py||lib/ansible/galaxy/role.py",
            "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/galaxy/role.py||lib/ansible/galaxy/role.py": [
          "File: lib/ansible/galaxy/role.py -> lib/ansible/galaxy/role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:                             # bits that might be in the file for security purposes",
          "395:                             # and drop any containing directory, as mentioned above",
          "396:                             if member.isreg() or member.issym():",
          "412:                                         continue",
          "422:                                 if _check_working_data_filter():",
          "423:                                     # deprecated: description='extract fallback without filter' python_version='3.11'",
          "",
          "[Removed Lines]",
          "397:                                 n_member_name = to_native(member.name)",
          "398:                                 n_archive_parent_dir = to_native(archive_parent_dir)",
          "399:                                 n_parts = n_member_name.replace(n_archive_parent_dir, \"\", 1).split(os.sep)",
          "400:                                 n_final_parts = []",
          "401:                                 for n_part in n_parts:",
          "402:                                     # TODO if the condition triggers it produces a broken installation.",
          "403:                                     # It will create the parent directory as an empty file and will",
          "404:                                     # explode if the directory contains valid files.",
          "405:                                     # Leaving this as is since the whole module needs a rewrite.",
          "406:                                     #",
          "407:                                     # Check if we have any files with illegal names,",
          "408:                                     # and display a warning if so. This could help users",
          "409:                                     # to debug a broken installation.",
          "410:                                     if n_part == '..':",
          "411:                                         display.warning(f\"Illegal filename '{n_part}': '..' is not allowed\")",
          "413:                                     if n_part.startswith('~'):",
          "414:                                         display.warning(f\"Illegal filename '{n_part}': names cannot start with '~'\")",
          "415:                                         continue",
          "416:                                     if '$' in n_part:",
          "417:                                         display.warning(f\"Illegal filename '{n_part}': names cannot contain '$'\")",
          "418:                                         continue",
          "419:                                     n_final_parts.append(n_part)",
          "420:                                 member.name = os.path.join(*n_final_parts)",
          "",
          "[Added Lines]",
          "397:                                 for attr in ('name', 'linkname'):",
          "398:                                     attr_value = getattr(member, attr, None)",
          "399:                                     if not attr_value:",
          "401:                                     n_attr_value = to_native(attr_value)",
          "402:                                     n_archive_parent_dir = to_native(archive_parent_dir)",
          "403:                                     n_parts = n_attr_value.replace(n_archive_parent_dir, \"\", 1).split(os.sep)",
          "404:                                     n_final_parts = []",
          "405:                                     for n_part in n_parts:",
          "406:                                         # TODO if the condition triggers it produces a broken installation.",
          "407:                                         # It will create the parent directory as an empty file and will",
          "408:                                         # explode if the directory contains valid files.",
          "409:                                         # Leaving this as is since the whole module needs a rewrite.",
          "410:                                         #",
          "411:                                         # Check if we have any files with illegal names,",
          "412:                                         # and display a warning if so. This could help users",
          "413:                                         # to debug a broken installation.",
          "414:                                         if not n_part:",
          "415:                                             continue",
          "416:                                         if n_part == '..':",
          "417:                                             display.warning(f\"Illegal filename '{n_part}': '..' is not allowed\")",
          "418:                                             continue",
          "419:                                         if n_part.startswith('~'):",
          "420:                                             display.warning(f\"Illegal filename '{n_part}': names cannot start with '~'\")",
          "421:                                             continue",
          "422:                                         if '$' in n_part:",
          "423:                                             display.warning(f\"Illegal filename '{n_part}': names cannot contain '$'\")",
          "424:                                             continue",
          "425:                                         n_final_parts.append(n_part)",
          "426:                                     setattr(member, attr, os.path.join(*n_final_parts))",
          "",
          "---------------"
        ],
        "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py": [
          "File: test/integration/targets/ansible-galaxy-role/files/create-role-archive.py -> test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "2: \"\"\"Create a role archive which overwrites an arbitrary file.\"\"\"",
          "4: import argparse",
          "5: import pathlib",
          "6: import tarfile",
          "7: import tempfile",
          "10: def main() -> None:",
          "11:     parser = argparse.ArgumentParser(description=__doc__)",
          "12:     parser.add_argument('archive', type=pathlib.Path, help='archive to create')",
          "13:     parser.add_argument('content', type=pathlib.Path, help='content to write')",
          "14:     parser.add_argument('target', type=pathlib.Path, help='file to overwrite')",
          "16:     args = parser.parse_args()",
          "18:     create_archive(args.archive, args.content, args.target)",
          "21: def create_archive(archive_path: pathlib.Path, content_path: pathlib.Path, target_path: pathlib.Path) -> None:",
          "22:     with (",
          "23:         tarfile.open(name=archive_path, mode='w') as role_archive,",
          "24:         tempfile.TemporaryDirectory() as temp_dir_name,",
          "25:     ):",
          "26:         temp_dir_path = pathlib.Path(temp_dir_name)",
          "28:         meta_main_path = temp_dir_path / 'meta' / 'main.yml'",
          "29:         meta_main_path.parent.mkdir()",
          "30:         meta_main_path.write_text('')",
          "32:         symlink_path = temp_dir_path / 'symlink'",
          "33:         symlink_path.symlink_to(target_path)",
          "35:         role_archive.add(meta_main_path)",
          "36:         role_archive.add(symlink_path)",
          "38:         content_tarinfo = role_archive.gettarinfo(content_path, str(symlink_path))",
          "40:         with content_path.open('rb') as content_file:",
          "41:             role_archive.addfile(content_tarinfo, content_file)",
          "44: if __name__ == '__main__':",
          "45:     main()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fffb3c403fe6def8d07e1062c751199ca3b98b7a",
      "candidate_info": {
        "commit_hash": "fffb3c403fe6def8d07e1062c751199ca3b98b7a",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/fffb3c403fe6def8d07e1062c751199ca3b98b7a",
        "files": [
          "changelogs/fragments/cve-2023-5115.yml",
          "lib/ansible/galaxy/role.py",
          "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
          "test/integration/targets/ansible-galaxy-role/tasks/dir-traversal.yml",
          "test/integration/targets/ansible-galaxy-role/tasks/main.yml"
        ],
        "message": "[stable-2.16] Prevent roles from using symlinks to overwrite files outside of the installation directory (#81780) (#81783)\n\n* Sanitize linkname during role installs\n\n* Add tests\n\n* add clog frag\n(cherry picked from commit ddf0311)",
        "before_after_code_files": [
          "lib/ansible/galaxy/role.py||liansible/galaxy/role.py",
          "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/galaxy/role.py||liansible/galaxy/role.py",
            "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
          ],
          "candidate": [
            "lib/ansible/galaxy/role.py||liansible/galaxy/role.py",
            "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/galaxy/role.py||liansible/galaxy/role.py": [
          "File: lib/ansible/galaxy/role.py -> liansible/galaxy/role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:                             # bits that might be in the file for security purposes",
          "395:                             # and drop any containing directory, as mentioned above",
          "396:                             if member.isreg() or member.issym():",
          "412:                                         continue",
          "422:                                 if _check_working_data_filter():",
          "423:                                     # deprecated: description='extract fallback without filter' python_version='3.11'",
          "",
          "[Removed Lines]",
          "397:                                 n_member_name = to_native(member.name)",
          "398:                                 n_archive_parent_dir = to_native(archive_parent_dir)",
          "399:                                 n_parts = n_member_name.replace(n_archive_parent_dir, \"\", 1).split(os.sep)",
          "400:                                 n_final_parts = []",
          "401:                                 for n_part in n_parts:",
          "402:                                     # TODO if the condition triggers it produces a broken installation.",
          "403:                                     # It will create the parent directory as an empty file and will",
          "404:                                     # explode if the directory contains valid files.",
          "405:                                     # Leaving this as is since the whole module needs a rewrite.",
          "406:                                     #",
          "407:                                     # Check if we have any files with illegal names,",
          "408:                                     # and display a warning if so. This could help users",
          "409:                                     # to debug a broken installation.",
          "410:                                     if n_part == '..':",
          "411:                                         display.warning(f\"Illegal filename '{n_part}': '..' is not allowed\")",
          "413:                                     if n_part.startswith('~'):",
          "414:                                         display.warning(f\"Illegal filename '{n_part}': names cannot start with '~'\")",
          "415:                                         continue",
          "416:                                     if '$' in n_part:",
          "417:                                         display.warning(f\"Illegal filename '{n_part}': names cannot contain '$'\")",
          "418:                                         continue",
          "419:                                     n_final_parts.append(n_part)",
          "420:                                 member.name = os.path.join(*n_final_parts)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py": [
          "File: test/integration/targets/ansible-galaxy-role/files/create-role-archive.py -> test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "2: \"\"\"Create a role archive which overwrites an arbitrary file.\"\"\"",
          "4: import argparse",
          "5: import pathlib",
          "6: import tarfile",
          "7: import tempfile",
          "10: def main() -> None:",
          "11:     parser = argparse.ArgumentParser(description=__doc__)",
          "12:     parser.add_argument('archive', type=pathlib.Path, help='archive to create')",
          "13:     parser.add_argument('content', type=pathlib.Path, help='content to write')",
          "14:     parser.add_argument('target', type=pathlib.Path, help='file to overwrite')",
          "16:     args = parser.parse_args()",
          "18:     create_archive(args.archive, args.content, args.target)",
          "21: def create_archive(archive_path: pathlib.Path, content_path: pathlib.Path, target_path: pathlib.Path) -> None:",
          "22:     with (",
          "23:         tarfile.open(name=archive_path, mode='w') as role_archive,",
          "24:         tempfile.TemporaryDirectory() as temp_dir_name,",
          "25:     ):",
          "26:         temp_dir_path = pathlib.Path(temp_dir_name)",
          "28:         meta_main_path = temp_dir_path / 'meta' / 'main.yml'",
          "29:         meta_main_path.parent.mkdir()",
          "30:         meta_main_path.write_text('')",
          "32:         symlink_path = temp_dir_path / 'symlink'",
          "33:         symlink_path.symlink_to(target_path)",
          "35:         role_archive.add(meta_main_path)",
          "36:         role_archive.add(symlink_path)",
          "38:         content_tarinfo = role_archive.gettarinfo(content_path, str(symlink_path))",
          "40:         with content_path.open('rb') as content_file:",
          "41:             role_archive.addfile(content_tarinfo, content_file)",
          "44: if __name__ == '__main__':",
          "45:     main()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "820dae4aff6ac8773bca9f379fe17a889ec13a3b",
      "candidate_info": {
        "commit_hash": "820dae4aff6ac8773bca9f379fe17a889ec13a3b",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/820dae4aff6ac8773bca9f379fe17a889ec13a3b",
        "files": [
          "changelogs/fragments/cve-2023-5115.yml",
          "lib/ansible/galaxy/role.py",
          "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
          "test/integration/targets/ansible-galaxy-role/tasks/dir-traversal.yml",
          "test/integration/targets/ansible-galaxy-role/tasks/main.yml"
        ],
        "message": "[stable-2.13] Prevent roles from using symlinks to overwrite files outside of the installation directory (#81780) (#81787)\n\n* [stable-2.13] Prevent roles from using symlinks to overwrite files outside of the installation directory (#81780)\n\n* Sanitize linkname during role installs\n\n* Add tests\n\n* add clog frag.\n(cherry picked from commit ddf0311c63287e2d5334770377350c1e0cbfff28)\n\nCo-authored-by: Matt Martz <matt@sivel.net>\n\n* Update syntax for py3.8",
        "before_after_code_files": [
          "lib/ansible/galaxy/role.py||lib/ansible/galaxy/role.py",
          "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/galaxy/role.py||liansible/galaxy/role.py",
            "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
          ],
          "candidate": [
            "lib/ansible/galaxy/role.py||lib/ansible/galaxy/role.py",
            "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/galaxy/role.py||lib/ansible/galaxy/role.py": [
          "File: lib/ansible/galaxy/role.py -> lib/ansible/galaxy/role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:                             # bits that might be in the file for security purposes",
          "374:                             # and drop any containing directory, as mentioned above",
          "375:                             if member.isreg() or member.issym():",
          "386:                                         n_final_parts.append(n_part)",
          "389:                                 if _check_working_data_filter():",
          "390:                                     # deprecated: description='extract fallback without filter' python_version='3.11'",
          "",
          "[Removed Lines]",
          "376:                                 n_member_name = to_native(member.name)",
          "377:                                 n_archive_parent_dir = to_native(archive_parent_dir)",
          "378:                                 n_parts = n_member_name.replace(n_archive_parent_dir, \"\", 1).split(os.sep)",
          "379:                                 n_final_parts = []",
          "380:                                 for n_part in n_parts:",
          "381:                                     # TODO if the condition triggers it produces a broken installation.",
          "382:                                     # It will create the parent directory as an empty file and will",
          "383:                                     # explode if the directory contains valid files.",
          "384:                                     # Leaving this as is since the whole module needs a rewrite.",
          "385:                                     if n_part != '..' and not n_part.startswith('~') and '$' not in n_part:",
          "387:                                 member.name = os.path.join(*n_final_parts)",
          "",
          "[Added Lines]",
          "376:                                 for attr in ('name', 'linkname'):",
          "377:                                     attr_value = getattr(member, attr, None)",
          "378:                                     if not attr_value:",
          "379:                                         continue",
          "380:                                     n_attr_value = to_native(attr_value)",
          "381:                                     n_archive_parent_dir = to_native(archive_parent_dir)",
          "382:                                     n_parts = n_attr_value.replace(n_archive_parent_dir, \"\", 1).split(os.sep)",
          "383:                                     n_final_parts = []",
          "384:                                     for n_part in n_parts:",
          "385:                                         # TODO if the condition triggers it produces a broken installation.",
          "386:                                         # It will create the parent directory as an empty file and will",
          "387:                                         # explode if the directory contains valid files.",
          "388:                                         # Leaving this as is since the whole module needs a rewrite.",
          "389:                                         #",
          "390:                                         # Check if we have any files with illegal names,",
          "391:                                         # and display a warning if so. This could help users",
          "392:                                         # to debug a broken installation.",
          "393:                                         if not n_part:",
          "394:                                             continue",
          "395:                                         if n_part == '..':",
          "396:                                             display.warning(f\"Illegal filename '{n_part}': '..' is not allowed\")",
          "397:                                             continue",
          "398:                                         if n_part.startswith('~'):",
          "399:                                             display.warning(f\"Illegal filename '{n_part}': names cannot start with '~'\")",
          "400:                                             continue",
          "401:                                         if '$' in n_part:",
          "402:                                             display.warning(f\"Illegal filename '{n_part}': names cannot contain '$'\")",
          "403:                                             continue",
          "405:                                     setattr(member, attr, os.path.join(*n_final_parts))",
          "",
          "---------------"
        ],
        "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py": [
          "File: test/integration/targets/ansible-galaxy-role/files/create-role-archive.py -> test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "2: \"\"\"Create a role archive which overwrites an arbitrary file.\"\"\"",
          "4: import argparse",
          "5: import pathlib",
          "6: import tarfile",
          "7: import tempfile",
          "10: def main() -> None:",
          "11:     parser = argparse.ArgumentParser(description=__doc__)",
          "12:     parser.add_argument('archive', type=pathlib.Path, help='archive to create')",
          "13:     parser.add_argument('content', type=pathlib.Path, help='content to write')",
          "14:     parser.add_argument('target', type=pathlib.Path, help='file to overwrite')",
          "16:     args = parser.parse_args()",
          "18:     create_archive(args.archive, args.content, args.target)",
          "21: def create_archive(archive_path: pathlib.Path, content_path: pathlib.Path, target_path: pathlib.Path) -> None:",
          "22:     with tarfile.open(name=archive_path, mode='w') as role_archive:",
          "23:         with tempfile.TemporaryDirectory() as temp_dir_name:",
          "24:             temp_dir_path = pathlib.Path(temp_dir_name)",
          "26:             meta_main_path = temp_dir_path / 'meta' / 'main.yml'",
          "27:             meta_main_path.parent.mkdir()",
          "28:             meta_main_path.write_text('')",
          "30:             symlink_path = temp_dir_path / 'symlink'",
          "31:             symlink_path.symlink_to(target_path)",
          "33:             role_archive.add(meta_main_path)",
          "34:             role_archive.add(symlink_path)",
          "36:             content_tarinfo = role_archive.gettarinfo(content_path, str(symlink_path))",
          "38:             with content_path.open('rb') as content_file:",
          "39:                 role_archive.addfile(content_tarinfo, content_file)",
          "42: if __name__ == '__main__':",
          "43:     main()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6809f986fc9c75c9e574657a74cef4eb911d9d34",
      "candidate_info": {
        "commit_hash": "6809f986fc9c75c9e574657a74cef4eb911d9d34",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/6809f986fc9c75c9e574657a74cef4eb911d9d34",
        "files": [
          "changelogs/fragments/cve-2023-5115.yml",
          "lib/ansible/galaxy/role.py",
          "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
          "test/integration/targets/ansible-galaxy-role/tasks/dir-traversal.yml",
          "test/integration/targets/ansible-galaxy-role/tasks/main.yml"
        ],
        "message": "[stable-2.14] Prevent roles from using symlinks to overwrite files outside of the installation directory (#81780) (#81786)\n\n* Sanitize linkname during role installs\n\n* Add tests\n\n* add clog frag.\n(cherry picked from commit ddf0311c63287e2d5334770377350c1e0cbfff28)",
        "before_after_code_files": [
          "lib/ansible/galaxy/role.py||lib/ansible/galaxy/role.py",
          "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "lib/ansible/galaxy/role.py||liansible/galaxy/role.py",
            "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
          ],
          "candidate": [
            "lib/ansible/galaxy/role.py||lib/ansible/galaxy/role.py",
            "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/galaxy/role.py||lib/ansible/galaxy/role.py": [
          "File: lib/ansible/galaxy/role.py -> lib/ansible/galaxy/role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:                             # bits that might be in the file for security purposes",
          "395:                             # and drop any containing directory, as mentioned above",
          "396:                             if member.isreg() or member.issym():",
          "407:                                         n_final_parts.append(n_part)",
          "410:                                 if _check_working_data_filter():",
          "411:                                     # deprecated: description='extract fallback without filter' python_version='3.11'",
          "",
          "[Removed Lines]",
          "397:                                 n_member_name = to_native(member.name)",
          "398:                                 n_archive_parent_dir = to_native(archive_parent_dir)",
          "399:                                 n_parts = n_member_name.replace(n_archive_parent_dir, \"\", 1).split(os.sep)",
          "400:                                 n_final_parts = []",
          "401:                                 for n_part in n_parts:",
          "402:                                     # TODO if the condition triggers it produces a broken installation.",
          "403:                                     # It will create the parent directory as an empty file and will",
          "404:                                     # explode if the directory contains valid files.",
          "405:                                     # Leaving this as is since the whole module needs a rewrite.",
          "406:                                     if n_part != '..' and not n_part.startswith('~') and '$' not in n_part:",
          "408:                                 member.name = os.path.join(*n_final_parts)",
          "",
          "[Added Lines]",
          "397:                                 for attr in ('name', 'linkname'):",
          "398:                                     attr_value = getattr(member, attr, None)",
          "399:                                     if not attr_value:",
          "400:                                         continue",
          "401:                                     n_attr_value = to_native(attr_value)",
          "402:                                     n_archive_parent_dir = to_native(archive_parent_dir)",
          "403:                                     n_parts = n_attr_value.replace(n_archive_parent_dir, \"\", 1).split(os.sep)",
          "404:                                     n_final_parts = []",
          "405:                                     for n_part in n_parts:",
          "406:                                         # TODO if the condition triggers it produces a broken installation.",
          "407:                                         # It will create the parent directory as an empty file and will",
          "408:                                         # explode if the directory contains valid files.",
          "409:                                         # Leaving this as is since the whole module needs a rewrite.",
          "410:                                         #",
          "411:                                         # Check if we have any files with illegal names,",
          "412:                                         # and display a warning if so. This could help users",
          "413:                                         # to debug a broken installation.",
          "414:                                         if not n_part:",
          "415:                                             continue",
          "416:                                         if n_part == '..':",
          "417:                                             display.warning(f\"Illegal filename '{n_part}': '..' is not allowed\")",
          "418:                                             continue",
          "419:                                         if n_part.startswith('~'):",
          "420:                                             display.warning(f\"Illegal filename '{n_part}': names cannot start with '~'\")",
          "421:                                             continue",
          "422:                                         if '$' in n_part:",
          "423:                                             display.warning(f\"Illegal filename '{n_part}': names cannot contain '$'\")",
          "424:                                             continue",
          "426:                                     setattr(member, attr, os.path.join(*n_final_parts))",
          "",
          "---------------"
        ],
        "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py": [
          "File: test/integration/targets/ansible-galaxy-role/files/create-role-archive.py -> test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/env python",
          "2: \"\"\"Create a role archive which overwrites an arbitrary file.\"\"\"",
          "4: import argparse",
          "5: import pathlib",
          "6: import tarfile",
          "7: import tempfile",
          "10: def main() -> None:",
          "11:     parser = argparse.ArgumentParser(description=__doc__)",
          "12:     parser.add_argument('archive', type=pathlib.Path, help='archive to create')",
          "13:     parser.add_argument('content', type=pathlib.Path, help='content to write')",
          "14:     parser.add_argument('target', type=pathlib.Path, help='file to overwrite')",
          "16:     args = parser.parse_args()",
          "18:     create_archive(args.archive, args.content, args.target)",
          "21: def create_archive(archive_path: pathlib.Path, content_path: pathlib.Path, target_path: pathlib.Path) -> None:",
          "22:     with (",
          "23:         tarfile.open(name=archive_path, mode='w') as role_archive,",
          "24:         tempfile.TemporaryDirectory() as temp_dir_name,",
          "25:     ):",
          "26:         temp_dir_path = pathlib.Path(temp_dir_name)",
          "28:         meta_main_path = temp_dir_path / 'meta' / 'main.yml'",
          "29:         meta_main_path.parent.mkdir()",
          "30:         meta_main_path.write_text('')",
          "32:         symlink_path = temp_dir_path / 'symlink'",
          "33:         symlink_path.symlink_to(target_path)",
          "35:         role_archive.add(meta_main_path)",
          "36:         role_archive.add(symlink_path)",
          "38:         content_tarinfo = role_archive.gettarinfo(content_path, str(symlink_path))",
          "40:         with content_path.open('rb') as content_file:",
          "41:             role_archive.addfile(content_tarinfo, content_file)",
          "44: if __name__ == '__main__':",
          "45:     main()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2477059be2314c79baa30c3d7f7adebd3819b3e1",
      "candidate_info": {
        "commit_hash": "2477059be2314c79baa30c3d7f7adebd3819b3e1",
        "repo": "ansible/ansible",
        "commit_url": "https://github.com/ansible/ansible/commit/2477059be2314c79baa30c3d7f7adebd3819b3e1",
        "files": [
          "changelogs/fragments/ansible-galaxy-role-install-symlink.yml",
          "lib/ansible/galaxy/role.py",
          "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
          "test/integration/targets/ansible-galaxy-role/tasks/dir-traversal.yml",
          "test/integration/targets/ansible-galaxy-role/tasks/main.yml",
          "test/integration/targets/ansible-galaxy-role/tasks/valid-role-symlinks.yml"
        ],
        "message": "Targeted fix for installing roles with symlinks containing '..' (#82165) (#82324)\n\nSet the tarfile attribute to a normalized value from unfrackpath instead\nof validating path parts and omiting potentially invald parts\n\nAllow tarfile paths/links containing '..', '$', '~' as long as the\nnormalized realpath is in the tarfile's role directory\n\n(cherry picked from commit 3a42a0036875c8cab6a62ab9ea67a365e1dd4781)",
        "before_after_code_files": [
          "lib/ansible/galaxy/role.py||lib/ansible/galaxy/role.py",
          "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
          ],
          "candidate": [
            "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py"
          ]
        }
      },
      "candidate_diff": {
        "lib/ansible/galaxy/role.py||lib/ansible/galaxy/role.py": [
          "File: lib/ansible/galaxy/role.py -> lib/ansible/galaxy/role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: from ansible.module_utils.urls import open_url",
          "43: from ansible.playbook.role.requirement import RoleRequirement",
          "44: from ansible.utils.display import Display",
          "46: display = Display()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: from ansible.utils.path import is_subpath, unfrackpath",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:                             # we only extract files, and remove any relative path",
          "394:                             # bits that might be in the file for security purposes",
          "395:                             # and drop any containing directory, as mentioned above",
          "431:                                 else:",
          "434:                         # write out the install info file for later use",
          "435:                         self._write_galaxy_install_info()",
          "",
          "[Removed Lines]",
          "396:                             if member.isreg() or member.issym():",
          "397:                                 for attr in ('name', 'linkname'):",
          "398:                                     attr_value = getattr(member, attr, None)",
          "399:                                     if not attr_value:",
          "400:                                         continue",
          "401:                                     n_attr_value = to_native(attr_value)",
          "402:                                     n_archive_parent_dir = to_native(archive_parent_dir)",
          "403:                                     n_parts = n_attr_value.replace(n_archive_parent_dir, \"\", 1).split(os.sep)",
          "404:                                     n_final_parts = []",
          "405:                                     for n_part in n_parts:",
          "406:                                         # TODO if the condition triggers it produces a broken installation.",
          "407:                                         # It will create the parent directory as an empty file and will",
          "408:                                         # explode if the directory contains valid files.",
          "409:                                         # Leaving this as is since the whole module needs a rewrite.",
          "410:                                         #",
          "411:                                         # Check if we have any files with illegal names,",
          "412:                                         # and display a warning if so. This could help users",
          "413:                                         # to debug a broken installation.",
          "414:                                         if not n_part:",
          "415:                                             continue",
          "416:                                         if n_part == '..':",
          "417:                                             display.warning(f\"Illegal filename '{n_part}': '..' is not allowed\")",
          "418:                                             continue",
          "419:                                         if n_part.startswith('~'):",
          "420:                                             display.warning(f\"Illegal filename '{n_part}': names cannot start with '~'\")",
          "421:                                             continue",
          "422:                                         if '$' in n_part:",
          "423:                                             display.warning(f\"Illegal filename '{n_part}': names cannot contain '$'\")",
          "424:                                             continue",
          "425:                                         n_final_parts.append(n_part)",
          "426:                                     setattr(member, attr, os.path.join(*n_final_parts))",
          "428:                                 if _check_working_data_filter():",
          "429:                                     # deprecated: description='extract fallback without filter' python_version='3.11'",
          "430:                                     role_tar_file.extract(member, to_native(self.path), filter='data')  # type: ignore[call-arg]",
          "432:                                     role_tar_file.extract(member, to_native(self.path))",
          "",
          "[Added Lines]",
          "397:                             if not (member.isreg() or member.issym()):",
          "398:                                 continue",
          "400:                             for attr in ('name', 'linkname'):",
          "401:                                 if not (attr_value := getattr(member, attr, None)):",
          "402:                                     continue",
          "404:                                 if attr_value.startswith(os.sep) and not is_subpath(attr_value, archive_parent_dir):",
          "405:                                     err = f\"Invalid {attr} for tarfile member: path {attr_value} is not a subpath of the role {archive_parent_dir}\"",
          "406:                                     raise AnsibleError(err)",
          "408:                                 if attr == 'linkname':",
          "409:                                     # Symlinks are relative to the link",
          "410:                                     relative_to_archive_dir = os.path.dirname(getattr(member, 'name', ''))",
          "411:                                     archive_dir_path = os.path.join(archive_parent_dir, relative_to_archive_dir, attr_value)",
          "413:                                     # Normalize paths that start with the archive dir",
          "414:                                     attr_value = attr_value.replace(archive_parent_dir, \"\", 1)",
          "415:                                     attr_value = os.path.join(*attr_value.split(os.sep))  # remove leading os.sep",
          "416:                                     archive_dir_path = os.path.join(archive_parent_dir, attr_value)",
          "418:                                 resolved_archive = unfrackpath(archive_parent_dir)",
          "419:                                 resolved_path = unfrackpath(archive_dir_path)",
          "420:                                 if not is_subpath(resolved_path, resolved_archive):",
          "421:                                     err = f\"Invalid {attr} for tarfile member: path {resolved_path} is not a subpath of the role {resolved_archive}\"",
          "422:                                     raise AnsibleError(err)",
          "424:                                 relative_path = os.path.join(*resolved_path.replace(resolved_archive, \"\", 1).split(os.sep)) or '.'",
          "425:                                 setattr(member, attr, relative_path)",
          "427:                             if _check_working_data_filter():",
          "428:                                 # deprecated: description='extract fallback without filter' python_version='3.11'",
          "429:                                 role_tar_file.extract(member, to_native(self.path), filter='data')  # type: ignore[call-arg]",
          "430:                             else:",
          "431:                                 role_tar_file.extract(member, to_native(self.path))",
          "",
          "---------------"
        ],
        "test/integration/targets/ansible-galaxy-role/files/create-role-archive.py||test/integration/targets/ansible-galaxy-role/files/create-role-archive.py": [
          "File: test/integration/targets/ansible-galaxy-role/files/create-role-archive.py -> test/integration/targets/ansible-galaxy-role/files/create-role-archive.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"Create a role archive which overwrites an arbitrary file.\"\"\"",
          "4: import argparse",
          "5: import pathlib",
          "6: import tarfile",
          "7: import tempfile",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import os",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     create_archive(args.archive, args.content, args.target)",
          "21: def create_archive(archive_path: pathlib.Path, content_path: pathlib.Path, target_path: pathlib.Path) -> None:",
          "22:     with (",
          "23:         tarfile.open(name=archive_path, mode='w') as role_archive,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: def generate_files_from_path(path):",
          "23:     if os.path.isdir(path):",
          "24:         for subpath in os.listdir(path):",
          "25:             _path = os.path.join(path, subpath)",
          "26:             yield from generate_files_from_path(_path)",
          "27:     elif os.path.isfile(path):",
          "28:         yield pathlib.Path(path)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:         role_archive.add(meta_main_path)",
          "36:         role_archive.add(symlink_path)",
          "44: if __name__ == '__main__':",
          "",
          "[Removed Lines]",
          "38:         content_tarinfo = role_archive.gettarinfo(content_path, str(symlink_path))",
          "40:         with content_path.open('rb') as content_file:",
          "41:             role_archive.addfile(content_tarinfo, content_file)",
          "",
          "[Added Lines]",
          "48:         for path in generate_files_from_path(content_path):",
          "49:             if path == content_path:",
          "50:                 arcname = str(symlink_path)",
          "51:             else:",
          "52:                 arcname = os.path.join(temp_dir_path, path)",
          "54:             content_tarinfo = role_archive.gettarinfo(path, arcname)",
          "55:             with path.open('rb') as file_content:",
          "56:                 role_archive.addfile(content_tarinfo, file_content)",
          "",
          "---------------"
        ]
      }
    }
  ]
}