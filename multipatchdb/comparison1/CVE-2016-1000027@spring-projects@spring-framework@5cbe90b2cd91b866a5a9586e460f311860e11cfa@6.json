{
  "cve_id": "CVE-2016-1000027",
  "cve_desc": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
  "repo": "spring-projects/spring-framework",
  "patch_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
  "patch_info": {
    "commit_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "repo": "spring-projects/spring-framework",
    "commit_url": "https://github.com/spring-projects/spring-framework/commit/5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ],
    "message": "Explicit note on Java deserialization",
    "before_after_code_files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "patch_diff": {
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java"
    ],
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4fe386d572136fe9a90f3a1a2b2240fa4e9c44d2",
      "candidate_info": {
        "commit_hash": "4fe386d572136fe9a90f3a1a2b2240fa4e9c44d2",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/4fe386d572136fe9a90f3a1a2b2240fa4e9c44d2",
        "files": [
          "spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java"
        ],
        "message": "TimerScheduledFuture correctly calculates getDelay result\n\nIssue: SPR-13977\n(cherry picked from commit 97b0177)",
        "before_after_code_files": [
          "spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java||spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java||spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java": [
          "File: spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java -> spring-context-support/src/main/java/org/springframework/scheduling/commonj/TimerManagerTaskScheduler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:   }",
          "128:   public long getDelay(TimeUnit unit) {",
          "130:   }",
          "132:   public int compareTo(Delayed other) {",
          "",
          "[Removed Lines]",
          "129:    return unit.convert(System.currentTimeMillis() - this.timer.getScheduledExecutionTime(), TimeUnit.MILLISECONDS);",
          "",
          "[Added Lines]",
          "129:    return unit.convert(this.timer.getScheduledExecutionTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4b5425108f07f33438acc06c0b2cb7d5dad2eb9",
      "candidate_info": {
        "commit_hash": "a4b5425108f07f33438acc06c0b2cb7d5dad2eb9",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/a4b5425108f07f33438acc06c0b2cb7d5dad2eb9",
        "files": [
          "spring-core/src/main/java/org/springframework/core/io/support/ResourcePatternUtils.java"
        ],
        "message": "ResourcePatternUtils.getResourcePatternResolver actually accepts null argument\n\nIssue: SPR-14500\n(cherry picked from commit f1fc74c)",
        "before_after_code_files": [
          "spring-core/src/main/java/org/springframework/core/io/support/ResourcePatternUtils.java||spring-core/src/main/java/org/springframework/core/io/support/ResourcePatternUtils.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-core/src/main/java/org/springframework/core/io/support/ResourcePatternUtils.java||spring-core/src/main/java/org/springframework/core/io/support/ResourcePatternUtils.java": [
          "File: spring-core/src/main/java/org/springframework/core/io/support/ResourcePatternUtils.java -> spring-core/src/main/java/org/springframework/core/io/support/ResourcePatternUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.springframework.core.io.support;",
          "19: import org.springframework.core.io.ResourceLoader;",
          "21: import org.springframework.util.ResourceUtils;",
          "",
          "[Removed Lines]",
          "20: import org.springframework.util.Assert;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:  public static ResourcePatternResolver getResourcePatternResolver(ResourceLoader resourceLoader) {",
          "63:   if (resourceLoader instanceof ResourcePatternResolver) {",
          "64:    return (ResourcePatternResolver) resourceLoader;",
          "65:   }",
          "",
          "[Removed Lines]",
          "62:   Assert.notNull(resourceLoader, \"ResourceLoader must not be null\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6009e03a7f6dd6659d05c580da1f811bcc06b175",
      "candidate_info": {
        "commit_hash": "6009e03a7f6dd6659d05c580da1f811bcc06b175",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/6009e03a7f6dd6659d05c580da1f811bcc06b175",
        "files": [
          "gradle.properties"
        ],
        "message": "Next Development Version",
        "before_after_code_files": [
          "gradle.properties||gradle.properties"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "gradle.properties||gradle.properties": [
          "File: gradle.properties -> gradle.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: version=3.2.17.BUILD-SNAPSHOT",
          "",
          "[Added Lines]",
          "1: version=3.2.18.BUILD-SNAPSHOT",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ec50a278ed3d34e036c431dac19877a6c4dd219",
      "candidate_info": {
        "commit_hash": "9ec50a278ed3d34e036c431dac19877a6c4dd219",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/9ec50a278ed3d34e036c431dac19877a6c4dd219",
        "files": [
          "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHandle.java",
          "spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java",
          "spring-web/src/main/java/org/springframework/web/util/HtmlUtils.java"
        ],
        "message": "Javadoc fixes (cherry picked from commit 392f9c8)",
        "before_after_code_files": [
          "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHandle.java||spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHandle.java",
          "spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java||spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java",
          "spring-web/src/main/java/org/springframework/web/util/HtmlUtils.java||spring-web/src/main/java/org/springframework/web/util/HtmlUtils.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHandle.java||spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHandle.java": [
          "File: spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHandle.java -> spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHandle.java"
        ],
        "spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java||spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java": [
          "File: spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java -> spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import org.springframework.web.method.support.ModelAndViewContainer;",
          "58:  protected final Log logger = LogFactory.getLog(getClass());",
          "",
          "[Removed Lines]",
          "56: public class ModelAttributeMethodProcessor implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler {",
          "",
          "[Added Lines]",
          "56: public class ModelAttributeMethodProcessor",
          "57:   implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:    NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {",
          "102:   String name = ModelFactory.getNameForParameter(parameter);",
          "106:   WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);",
          "107:   if (binder.getTarget() != null) {",
          "",
          "[Removed Lines]",
          "103:   Object attribute = (mavContainer.containsAttribute(name) ?",
          "104:     mavContainer.getModel().get(name) : createAttribute(name, parameter, binderFactory, webRequest));",
          "",
          "[Added Lines]",
          "106:   Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :",
          "107:     createAttribute(name, parameter, binderFactory, webRequest));",
          "",
          "---------------"
        ],
        "spring-web/src/main/java/org/springframework/web/util/HtmlUtils.java||spring-web/src/main/java/org/springframework/web/util/HtmlUtils.java": [
          "File: spring-web/src/main/java/org/springframework/web/util/HtmlUtils.java -> spring-web/src/main/java/org/springframework/web/util/HtmlUtils.java"
        ]
      }
    },
    {
      "candidate_hash": "8c26717bdcb6c07688fa757782a1597b642f827a",
      "candidate_info": {
        "commit_hash": "8c26717bdcb6c07688fa757782a1597b642f827a",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/8c26717bdcb6c07688fa757782a1597b642f827a",
        "files": [
          "spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java",
          "spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java"
        ],
        "message": "MBeanExporter silently ignores null beans\n\nIssue: SPR-15031\n(cherry picked from commit e9def51)",
        "before_after_code_files": [
          "spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java||spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java",
          "spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java||spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java||spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java": [
          "File: spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java -> spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:     objectName = JmxUtils.appendIdentityToObjectName(objectName, managedResource);",
          "447:    }",
          "448:   }",
          "450:    throw new MBeanExportException(\"Unable to generate ObjectName for MBean [\" + managedResource + \"]\", ex);",
          "451:   }",
          "452:   registerManagedResource(managedResource, objectName);",
          "",
          "[Removed Lines]",
          "449:   catch (Exception ex) {",
          "",
          "[Added Lines]",
          "449:   catch (Throwable ex) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "577:     }",
          "578:     else {",
          "579:      Object bean = this.beanFactory.getBean(beanName);",
          "583:     }",
          "584:    }",
          "587:     if (this.beanFactory != null) {",
          "588:      Map<String, ?> beansOfSameType =",
          "",
          "[Removed Lines]",
          "580:      ObjectName objectName = registerBeanInstance(bean, beanKey);",
          "581:      replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName);",
          "582:      return objectName;",
          "585:    else {",
          "",
          "[Added Lines]",
          "581:      if (bean != null) {",
          "582:       ObjectName objectName = registerBeanInstance(bean, beanKey);",
          "583:       replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName);",
          "584:       return objectName;",
          "585:      }",
          "588:    else if (mapValue != null) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "599:     return registerBeanInstance(mapValue, beanKey);",
          "600:    }",
          "601:   }",
          "603:    throw new UnableToRegisterMBeanException(",
          "604:      \"Unable to register MBean [\" + mapValue + \"] with key '\" + beanKey + \"'\", ex);",
          "605:   }",
          "606:  }",
          "",
          "[Removed Lines]",
          "602:   catch (Exception ex) {",
          "",
          "[Added Lines]",
          "605:   catch (Throwable ex) {",
          "609:   return null;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "794:    mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE);",
          "795:    return mbean;",
          "796:   }",
          "798:    throw new MBeanExportException(\"Could not create ModelMBean for managed resource [\" +",
          "799:      managedResource + \"] with key '\" + beanKey + \"'\", ex);",
          "800:   }",
          "",
          "[Removed Lines]",
          "797:   catch (Exception ex) {",
          "",
          "[Added Lines]",
          "801:   catch (Throwable ex) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "960:       }",
          "961:      }",
          "962:     }",
          "964:      throw new MBeanExportException(\"Unable to register NotificationListener\", ex);",
          "965:     }",
          "966:    }",
          "",
          "[Removed Lines]",
          "963:     catch (Exception ex) {",
          "",
          "[Added Lines]",
          "967:     catch (Throwable ex) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "980:      this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),",
          "981:        bean.getNotificationFilter(), bean.getHandback());",
          "982:     }",
          "984:      if (logger.isDebugEnabled()) {",
          "985:       logger.debug(\"Unable to unregister NotificationListener\", ex);",
          "986:      }",
          "",
          "[Removed Lines]",
          "983:     catch (Exception ex) {",
          "",
          "[Added Lines]",
          "987:     catch (Throwable ex) {",
          "",
          "---------------"
        ],
        "spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java||spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java": [
          "File: spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java -> spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.junit.Test;",
          "37: import org.springframework.aop.framework.ProxyFactory;",
          "38: import org.springframework.beans.factory.support.BeanDefinitionBuilder;",
          "39: import org.springframework.beans.factory.support.DefaultListableBeanFactory;",
          "40: import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;",
          "41: import org.springframework.core.io.ClassPathResource;",
          "42: import org.springframework.jmx.AbstractMBeanServerTests;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.springframework.beans.factory.FactoryBean;",
          "41: import org.springframework.beans.factory.support.RootBeanDefinition;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "677:     ObjectNameManager.getInstance(objectName2));",
          "678:  }",
          "680:  private Map<String, Object> getBeanMap() {",
          "681:   Map<String, Object> map = new HashMap<String, Object>();",
          "682:   map.put(OBJECT_NAME, new JmxTestBean());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "682:  @Test",
          "683:  public void testRegisterFactoryBean() throws MalformedObjectNameException {",
          "684:   DefaultListableBeanFactory factory = new DefaultListableBeanFactory();",
          "685:   factory.registerBeanDefinition(\"spring:type=FactoryBean\", new RootBeanDefinition(ProperSomethingFactoryBean.class));",
          "687:   MBeanExporter exporter = new MBeanExporter();",
          "688:   exporter.setServer(getServer());",
          "689:   exporter.setBeanFactory(factory);",
          "690:   exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ALL);",
          "691:   exporter.afterPropertiesSet();",
          "693:   assertIsRegistered(\"Non-null FactoryBean object registered\",",
          "694:     ObjectNameManager.getInstance(\"spring:type=FactoryBean\"));",
          "695:  }",
          "697:  @Test",
          "698:  public void testIgnoreNullObjectFromFactoryBean() throws MalformedObjectNameException {",
          "699:   DefaultListableBeanFactory factory = new DefaultListableBeanFactory();",
          "700:   factory.registerBeanDefinition(\"spring:type=FactoryBean\", new RootBeanDefinition(NullSomethingFactoryBean.class));",
          "702:   MBeanExporter exporter = new MBeanExporter();",
          "703:   exporter.setServer(getServer());",
          "704:   exporter.setBeanFactory(factory);",
          "705:   exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ALL);",
          "706:   exporter.afterPropertiesSet();",
          "708:   assertIsNotRegistered(\"Null FactoryBean object not registered\",",
          "709:     ObjectNameManager.getInstance(\"spring:type=FactoryBean\"));",
          "710:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "805:   }",
          "806:  }",
          "808: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "842:  public interface SomethingMBean {}",
          "844:  public static class Something implements SomethingMBean {}",
          "847:  public static class ProperSomethingFactoryBean implements FactoryBean<Something> {",
          "849:   public Something getObject() {",
          "850:    return new Something();",
          "851:   }",
          "853:   public Class<?> getObjectType() {",
          "854:    return Something.class;",
          "855:   }",
          "857:   public boolean isSingleton() {",
          "858:    return true;",
          "859:   }",
          "860:  }",
          "863:  public static class NullSomethingFactoryBean implements FactoryBean<Something> {",
          "865:   public Something getObject() {",
          "866:    return null;",
          "867:   }",
          "869:   public Class<?> getObjectType() {",
          "870:    return Something.class;",
          "871:   }",
          "873:   public boolean isSingleton() {",
          "874:    return true;",
          "875:   }",
          "876:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}