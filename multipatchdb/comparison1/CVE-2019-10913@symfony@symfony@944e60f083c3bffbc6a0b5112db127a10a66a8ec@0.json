{
  "cve_id": "CVE-2019-10913",
  "cve_desc": "In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, HTTP Methods provided as verbs or using the override header may be treated as trusted input, but they are not validated, possibly causing SQL injection or XSS. This is related to symfony/http-foundation.",
  "repo": "symfony/symfony",
  "patch_hash": "944e60f083c3bffbc6a0b5112db127a10a66a8ec",
  "patch_info": {
    "commit_hash": "944e60f083c3bffbc6a0b5112db127a10a66a8ec",
    "repo": "symfony/symfony",
    "commit_url": "https://github.com/symfony/symfony/commit/944e60f083c3bffbc6a0b5112db127a10a66a8ec",
    "files": [
      "src/Symfony/Component/HttpFoundation/Request.php"
    ],
    "message": "[HttpFoundation] reject invalid method override",
    "before_after_code_files": [
      "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php"
    ]
  },
  "patch_diff": {
    "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
      "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1347:     public function getMethod()",
      "1348:     {",
      "1362:         }",
      "1365:     }",
      "",
      "[Removed Lines]",
      "1349:         if (null === $this->method) {",
      "1350:             $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));",
      "1352:             if ('POST' === $this->method) {",
      "1353:                 if ($method = $this->headers->get('X-HTTP-METHOD-OVERRIDE')) {",
      "1354:                     $this->method = strtoupper($method);",
      "1355:                 } elseif (self::$httpMethodParameterOverride) {",
      "1356:                     $method = $this->request->get('_method', $this->query->get('_method', 'POST'));",
      "1357:                     if (\\is_string($method)) {",
      "1358:                         $this->method = strtoupper($method);",
      "1359:                     }",
      "1360:                 }",
      "1361:             }",
      "1364:         return $this->method;",
      "",
      "[Added Lines]",
      "1349:         if (null !== $this->method) {",
      "1350:             return $this->method;",
      "1351:         }",
      "1353:         $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));",
      "1355:         if ('POST' !== $this->method) {",
      "1356:             return $this->method;",
      "1357:         }",
      "1359:         $method = $this->headers->get('X-HTTP-METHOD-OVERRIDE');",
      "1361:         if (!$method && self::$httpMethodParameterOverride) {",
      "1362:             $method = $this->request->get('_method', $this->query->get('_method', 'POST'));",
      "1363:         }",
      "1365:         if (!\\is_string($method)) {",
      "1366:             return $this->method;",
      "1367:         }",
      "1369:         $method = strtoupper($method);",
      "1371:         if (\\in_array($method, ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH', 'PURGE', 'TRACE'], true)) {",
      "1372:             return $this->method = $method;",
      "1373:         }",
      "1375:         if (!preg_match('/^[A-Z]++$/D', $method)) {",
      "1376:             throw new SuspiciousOperationException(sprintf('Invalid method override \"%s\".', $method));",
      "1379:         return $this->method = $method;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "63583debd20817f55f67e11224f61618abb9835d",
      "candidate_info": {
        "commit_hash": "63583debd20817f55f67e11224f61618abb9835d",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/63583debd20817f55f67e11224f61618abb9835d",
        "files": [
          "src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
        ],
        "message": "[HttpFoundation] fixed using _method parameter with invalid type",
        "before_after_code_files": [
          "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
          "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1276:                 if ($method = $this->headers->get('X-HTTP-METHOD-OVERRIDE')) {",
          "1277:                     $this->method = strtoupper($method);",
          "1278:                 } elseif (self::$httpMethodParameterOverride) {",
          "1280:                 }",
          "1281:             }",
          "1282:         }",
          "",
          "[Removed Lines]",
          "1279:                     $this->method = strtoupper($this->request->get('_method', $this->query->get('_method', 'POST')));",
          "",
          "[Added Lines]",
          "1279:                     $method = $this->request->get('_method', $this->query->get('_method', 'POST'));",
          "1280:                     if (\\is_string($method)) {",
          "1281:                         $this->method = strtoupper($method);",
          "1282:                     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php": [
          "File: src/Symfony/Component/HttpFoundation/Tests/RequestTest.php -> src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "816:         $request->setMethod('POST');",
          "817:         $request->headers->set('X-HTTP-METHOD-OVERRIDE', 'delete');",
          "818:         $this->assertEquals('DELETE', $request->getMethod(), '->getMethod() returns the method from X-HTTP-Method-Override if defined and POST');",
          "819:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:         $request = new Request();",
          "821:         $request->setMethod('POST');",
          "822:         $request->query->set('_method', array('delete', 'patch'));",
          "823:         $this->assertSame('POST', $request->getMethod(), '->getMethod() returns the request method if invalid type is defined in query');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "742cd667086afd199d4535b1076af592107c7cb7",
      "candidate_info": {
        "commit_hash": "742cd667086afd199d4535b1076af592107c7cb7",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/742cd667086afd199d4535b1076af592107c7cb7",
        "files": [
          "src/Symfony/Component/HttpFoundation/Request.php"
        ],
        "message": "[HttpFoundation] reject invalid method override",
        "before_after_code_files": [
          "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
          "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1212:     public function getMethod()",
          "1213:     {",
          "1227:         }",
          "1230:     }",
          "",
          "[Removed Lines]",
          "1214:         if (null === $this->method) {",
          "1215:             $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));",
          "1217:             if ('POST' === $this->method) {",
          "1218:                 if ($method = $this->headers->get('X-HTTP-METHOD-OVERRIDE')) {",
          "1219:                     $this->method = strtoupper($method);",
          "1220:                 } elseif (self::$httpMethodParameterOverride) {",
          "1221:                     $method = $this->request->get('_method', $this->query->get('_method', 'POST'));",
          "1222:                     if (\\is_string($method)) {",
          "1223:                         $this->method = strtoupper($method);",
          "1224:                     }",
          "1225:                 }",
          "1226:             }",
          "1229:         return $this->method;",
          "",
          "[Added Lines]",
          "1214:         if (null !== $this->method) {",
          "1215:             return $this->method;",
          "1216:         }",
          "1218:         $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));",
          "1220:         if ('POST' !== $this->method) {",
          "1221:             return $this->method;",
          "1222:         }",
          "1224:         $method = $this->headers->get('X-HTTP-METHOD-OVERRIDE');",
          "1226:         if (!$method && self::$httpMethodParameterOverride) {",
          "1227:             $method = $this->request->get('_method', $this->query->get('_method', 'POST'));",
          "1228:         }",
          "1230:         if (!\\is_string($method)) {",
          "1231:             return $this->method;",
          "1232:         }",
          "1234:         $method = strtoupper($method);",
          "1236:         if (\\in_array($method, ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH', 'PURGE', 'TRACE'], true)) {",
          "1237:             return $this->method = $method;",
          "1238:         }",
          "1240:         if (!preg_match('/^[A-Z]++$/D', $method)) {",
          "1241:             throw new SuspiciousOperationException(sprintf('Invalid method override \"%s\".', $method));",
          "1244:         return $this->method = $method;",
          "",
          "---------------"
        ]
      }
    }
  ]
}