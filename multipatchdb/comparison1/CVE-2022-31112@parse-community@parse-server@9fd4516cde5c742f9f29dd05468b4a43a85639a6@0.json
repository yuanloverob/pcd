{
  "cve_id": "CVE-2022-31112",
  "cve_desc": "Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. In affected versions parse Server LiveQuery does not remove protected fields in classes, passing them to the client. The LiveQueryController now removes protected fields from the client response. Users are advised to upgrade. Users unable t upgrade should use `Parse.Cloud.afterLiveQueryEvent` to manually remove protected fields.",
  "repo": "parse-community/parse-server",
  "patch_hash": "9fd4516cde5c742f9f29dd05468b4a43a85639a6",
  "patch_info": {
    "commit_hash": "9fd4516cde5c742f9f29dd05468b4a43a85639a6",
    "repo": "parse-community/parse-server",
    "commit_url": "https://github.com/parse-community/parse-server/commit/9fd4516cde5c742f9f29dd05468b4a43a85639a6",
    "files": [
      "spec/ParseLiveQuery.spec.js",
      "src/Controllers/DatabaseController.js",
      "src/LiveQuery/ParseCloudCodePublisher.js",
      "src/LiveQuery/ParseLiveQueryServer.js"
    ],
    "message": "fix: protected fields exposed via LiveQuery (GHSA-crrq-vr9j-fxxh) [skip release] (#8076)",
    "before_after_code_files": [
      "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
      "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js",
      "src/LiveQuery/ParseCloudCodePublisher.js||src/LiveQuery/ParseCloudCodePublisher.js",
      "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
    ]
  },
  "patch_diff": {
    "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js": [
      "File: spec/ParseLiveQuery.spec.js -> spec/ParseLiveQuery.spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "1110:     }",
      "1111:   });",
      "1113:   afterEach(async function (done) {",
      "1114:     const client = await Parse.CoreManager.getLiveQueryController().getDefaultLiveQueryClient();",
      "1115:     client.close();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1113:   it('should strip out protected fields', async () => {",
      "1114:     await reconfigureServer({",
      "1115:       liveQuery: { classNames: ['Test'] },",
      "1116:       startLiveQueryServer: true,",
      "1117:     });",
      "1118:     const obj1 = new Parse.Object('Test');",
      "1119:     obj1.set('foo', 'foo');",
      "1120:     obj1.set('bar', 'bar');",
      "1121:     obj1.set('qux', 'qux');",
      "1122:     await obj1.save();",
      "1123:     const config = Config.get(Parse.applicationId);",
      "1124:     const schemaController = await config.database.loadSchema();",
      "1125:     await schemaController.updateClass(",
      "1126:       'Test',",
      "1127:       {},",
      "1128:       {",
      "1129:         get: { '*': true },",
      "1130:         find: { '*': true },",
      "1131:         update: { '*': true },",
      "1132:         protectedFields: {",
      "1133:           '*': ['foo'],",
      "1134:         },",
      "1135:       }",
      "1136:     );",
      "1137:     const object = await obj1.fetch();",
      "1138:     expect(object.get('foo')).toBe(undefined);",
      "1139:     expect(object.get('bar')).toBeDefined();",
      "1140:     expect(object.get('qux')).toBeDefined();",
      "1142:     const subscription = await new Parse.Query('Test').subscribe();",
      "1143:     await Promise.all([",
      "1144:       new Promise(resolve => {",
      "1145:         subscription.on('update', (obj, original) => {",
      "1146:           expect(obj.get('foo')).toBe(undefined);",
      "1147:           expect(obj.get('bar')).toBeDefined();",
      "1148:           expect(obj.get('qux')).toBeDefined();",
      "1149:           expect(original.get('foo')).toBe(undefined);",
      "1150:           expect(original.get('bar')).toBeDefined();",
      "1151:           expect(original.get('qux')).toBeDefined();",
      "1152:           resolve();",
      "1153:         });",
      "1154:       }),",
      "1155:       obj1.save({ foo: 'abc' }),",
      "1156:     ]);",
      "1157:   });",
      "",
      "---------------"
    ],
    "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js": [
      "File: src/Controllers/DatabaseController.js -> src/Controllers/DatabaseController.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:   aclGroup: any[],",
      "128:   auth: any,",
      "129:   operation: any,",
      "131:   className: string,",
      "132:   protectedFields: null | Array<any>,",
      "133:   object: any",
      "",
      "[Removed Lines]",
      "130:   schema: SchemaController.SchemaController,",
      "",
      "[Added Lines]",
      "130:   schema: SchemaController.SchemaController | any,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "136:   if (auth && auth.user) userId = auth.user.id;",
      "140:   if (perms) {",
      "141:     const isReadOperation = ['get', 'find'].indexOf(operation) > -1;",
      "",
      "[Removed Lines]",
      "139:   const perms = schema.getClassLevelPermissions(className);",
      "",
      "[Added Lines]",
      "139:   const perms =",
      "140:     schema && schema.getClassLevelPermissions ? schema.getClassLevelPermissions(className) : {};",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1533:   }",
      "1535:   addProtectedFields(",
      "1537:     className: string,",
      "1538:     query: any = {},",
      "1539:     aclGroup: any[] = [],",
      "1540:     auth: any = {},",
      "1541:     queryOptions: FullQueryOptions = {}",
      "1542:   ): null | string[] {",
      "1544:     if (!perms) return null;",
      "1546:     const protectedFields = perms.protectedFields;",
      "",
      "[Removed Lines]",
      "1536:     schema: SchemaController.SchemaController,",
      "1543:     const perms = schema.getClassLevelPermissions(className);",
      "",
      "[Added Lines]",
      "1537:     schema: SchemaController.SchemaController | any,",
      "1544:     const perms =",
      "1545:       schema && schema.getClassLevelPermissions",
      "1546:         ? schema.getClassLevelPermissions(className)",
      "1547:         : schema;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1806:   }",
      "1808:   static _validateQuery: any => void;",
      "1809: }",
      "1811: module.exports = DatabaseController;",
      "1813: module.exports._validateQuery = validateQuery;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1813:   static filterSensitiveData: (boolean, any[], any, any, any, string, any[], any) => void;",
      "1819: module.exports.filterSensitiveData = filterSensitiveData;",
      "",
      "---------------"
    ],
    "src/LiveQuery/ParseCloudCodePublisher.js||src/LiveQuery/ParseCloudCodePublisher.js": [
      "File: src/LiveQuery/ParseCloudCodePublisher.js -> src/LiveQuery/ParseCloudCodePublisher.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:     if (request.original) {",
      "41:       message.originalParseObject = request.original._toFullJSON();",
      "42:     }",
      "43:     this.parsePublisher.publish(type, JSON.stringify(message));",
      "44:   }",
      "45: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43:     if (request.classLevelPermissions) {",
      "44:       message.classLevelPermissions = request.classLevelPermissions;",
      "45:     }",
      "",
      "---------------"
    ],
    "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js": [
      "File: src/LiveQuery/ParseLiveQueryServer.js -> src/LiveQuery/ParseLiveQueryServer.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "18:   toJSONwithObjects,",
      "19: } from '../triggers';",
      "20: import { getAuthForSessionToken, Auth } from '../Auth';",
      "22: import LRU from 'lru-cache';",
      "23: import UserRouter from '../Routers/UsersRouter';",
      "25: class ParseLiveQueryServer {",
      "26:   clients: Map;",
      "",
      "[Removed Lines]",
      "21: import { getCacheController } from '../Controllers';",
      "",
      "[Added Lines]",
      "21: import { getCacheController, getDatabaseController } from '../Controllers';",
      "24: import DatabaseController from '../Controllers/DatabaseController';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "196:             if (res.object && typeof res.object.toJSON === 'function') {",
      "197:               deletedParseObject = toJSONwithObjects(res.object, res.object.className || className);",
      "198:             }",
      "207:             client.pushDelete(requestId, deletedParseObject);",
      "208:           } catch (e) {",
      "209:             const error = resolveError(e);",
      "",
      "[Removed Lines]",
      "199:             if (",
      "200:               (deletedParseObject.className === '_User' ||",
      "201:                 deletedParseObject.className === '_Session') &&",
      "202:               !client.hasMasterKey",
      "203:             ) {",
      "204:               delete deletedParseObject.sessionToken;",
      "205:               delete deletedParseObject.authData;",
      "206:             }",
      "",
      "[Added Lines]",
      "200:             await this._filterSensitiveData(",
      "201:               classLevelPermissions,",
      "202:               res,",
      "203:               client,",
      "204:               requestId,",
      "205:               op,",
      "206:               subscription.query",
      "207:             );",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "350:                 res.original.className || className",
      "351:               );",
      "352:             }",
      "363:             const functionName = 'push' + res.event.charAt(0).toUpperCase() + res.event.slice(1);",
      "364:             if (client[functionName]) {",
      "365:               client[functionName](requestId, currentParseObject, originalParseObject);",
      "",
      "[Removed Lines]",
      "353:             if (",
      "354:               (currentParseObject.className === '_User' ||",
      "355:                 currentParseObject.className === '_Session') &&",
      "356:               !client.hasMasterKey",
      "357:             ) {",
      "358:               delete currentParseObject.sessionToken;",
      "359:               delete originalParseObject?.sessionToken;",
      "360:               delete currentParseObject.authData;",
      "361:               delete originalParseObject?.authData;",
      "362:             }",
      "",
      "[Added Lines]",
      "354:             await this._filterSensitiveData(",
      "355:               classLevelPermissions,",
      "356:               res,",
      "357:               client,",
      "358:               requestId,",
      "359:               op,",
      "360:               subscription.query",
      "361:             );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "578:   }",
      "580:   _getCLPOperation(query: any) {",
      "581:     return typeof query === 'object' &&",
      "582:       Object.keys(query).length == 1 &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "579:   async _filterSensitiveData(",
      "580:     classLevelPermissions: ?any,",
      "581:     res: any,",
      "582:     client: any,",
      "583:     requestId: number,",
      "584:     op: string,",
      "585:     query: any",
      "586:   ) {",
      "587:     const subscriptionInfo = client.getSubscriptionInfo(requestId);",
      "588:     const aclGroup = ['*'];",
      "589:     let clientAuth;",
      "590:     if (typeof subscriptionInfo !== 'undefined') {",
      "591:       const { userId, auth } = await this.getAuthForSessionToken(subscriptionInfo.sessionToken);",
      "592:       if (userId) {",
      "593:         aclGroup.push(userId);",
      "594:       }",
      "595:       clientAuth = auth;",
      "596:     }",
      "597:     const filter = obj => {",
      "598:       if (!obj) {",
      "599:         return;",
      "600:       }",
      "601:       let protectedFields = classLevelPermissions?.protectedFields || [];",
      "602:       if (!client.hasMasterKey && !Array.isArray(protectedFields)) {",
      "603:         protectedFields = getDatabaseController(this.config).addProtectedFields(",
      "604:           classLevelPermissions,",
      "605:           res.object.className,",
      "606:           query,",
      "607:           aclGroup,",
      "608:           clientAuth",
      "609:         );",
      "610:       }",
      "611:       return DatabaseController.filterSensitiveData(",
      "612:         client.hasMasterKey,",
      "613:         aclGroup,",
      "614:         clientAuth,",
      "615:         op,",
      "616:         classLevelPermissions,",
      "617:         res.object.className,",
      "618:         protectedFields,",
      "619:         obj,",
      "620:         query",
      "621:       );",
      "622:     };",
      "623:     res.object = filter(res.object);",
      "624:     res.original = filter(res.original);",
      "625:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "834ae366f98179c99332ea90692d943dd00851b1",
      "candidate_info": {
        "commit_hash": "834ae366f98179c99332ea90692d943dd00851b1",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/834ae366f98179c99332ea90692d943dd00851b1",
        "files": [
          "CHANGELOG.md",
          "package-lock.json",
          "package.json",
          "spec/ParseLiveQuery.spec.js",
          "spec/ParseUser.spec.js",
          "src/LiveQuery/ParseLiveQueryServer.js"
        ],
        "message": "Merge pull request from GHSA-7pr3-p5fm-8r9x\n\n* fix: strip sessionToken on _User LiveQuery\n\n* delete authData\n\n* add changelog\n\n* Update package.json\n\n* Update CHANGELOG.md\n\n* add changes\n\n* Update ParseLiveQuery.spec.js\n\nCo-authored-by: Manuel <5673677+mtrezza@users.noreply.github.com>",
        "before_after_code_files": [
          "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
          "spec/ParseUser.spec.js||spec/ParseUser.spec.js",
          "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ],
          "candidate": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js": [
          "File: spec/ParseLiveQuery.spec.js -> spec/ParseLiveQuery.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "840:     done();",
          "841:   });",
          "843:   afterEach(async function (done) {",
          "844:     const client = await Parse.CoreManager.getLiveQueryController().getDefaultLiveQueryClient();",
          "845:     client.close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "843:   it('should strip out session token in LiveQuery', async () => {",
          "844:     await reconfigureServer({",
          "845:       liveQuery: { classNames: ['_User'] },",
          "846:       startLiveQueryServer: true,",
          "847:       verbose: false,",
          "848:       silent: true,",
          "849:     });",
          "851:     const user = new Parse.User();",
          "852:     user.setUsername('username');",
          "853:     user.setPassword('password');",
          "854:     user.set('foo', 'bar');",
          "856:     const query = new Parse.Query(Parse.User);",
          "857:     query.equalTo('foo', 'bar');",
          "858:     const subscription = await query.subscribe();",
          "860:     const events = ['create', 'update', 'enter', 'leave', 'delete'];",
          "861:     const response = (obj, prev) => {",
          "862:       expect(obj.get('sessionToken')).toBeUndefined();",
          "863:       expect(obj.sessionToken).toBeUndefined();",
          "864:       expect(prev?.sessionToken).toBeUndefined();",
          "865:       if (prev && prev.get) {",
          "866:         expect(prev.get('sessionToken')).toBeUndefined();",
          "867:       }",
          "868:     };",
          "869:     const calls = {};",
          "870:     for (const key of events) {",
          "871:       calls[key] = response;",
          "872:       spyOn(calls, key).and.callThrough();",
          "873:       subscription.on(key, calls[key]);",
          "874:     }",
          "875:     await user.signUp();",
          "876:     user.unset('foo');",
          "877:     await user.save();",
          "878:     user.set('foo', 'bar');",
          "879:     await user.save();",
          "880:     user.set('yolo', 'bar');",
          "881:     await user.save();",
          "882:     await user.destroy();",
          "883:     await new Promise(resolve => process.nextTick(resolve));",
          "884:     for (const key of events) {",
          "885:       expect(calls[key]).toHaveBeenCalled();",
          "886:     }",
          "887:   });",
          "",
          "---------------"
        ],
        "spec/ParseUser.spec.js||spec/ParseUser.spec.js": [
          "File: spec/ParseUser.spec.js -> spec/ParseUser.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3966:       ok(model._isLinked('facebook'), 'User should be linked to facebook');",
          "3967:     });",
          "3968:   });",
          "3969: });",
          "3971: describe('Security Advisory GHSA-8w3j-g983-8jh5', function () {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3970:   it('should strip out authdata in LiveQuery', async () => {",
          "3971:     const provider = getMockFacebookProvider();",
          "3972:     Parse.User._registerAuthenticationProvider(provider);",
          "3974:     await reconfigureServer({",
          "3975:       liveQuery: { classNames: ['_User'] },",
          "3976:       startLiveQueryServer: true,",
          "3977:       verbose: false,",
          "3978:       silent: true,",
          "3979:     });",
          "3981:     const query = new Parse.Query(Parse.User);",
          "3982:     query.doesNotExist('foo');",
          "3983:     const subscription = await query.subscribe();",
          "3985:     const events = ['create', 'update', 'enter', 'leave', 'delete'];",
          "3986:     const response = (obj, prev) => {",
          "3987:       expect(obj.get('authData')).toBeUndefined();",
          "3988:       expect(obj.authData).toBeUndefined();",
          "3989:       expect(prev?.authData).toBeUndefined();",
          "3990:       if (prev && prev.get) {",
          "3991:         expect(prev.get('authData')).toBeUndefined();",
          "3992:       }",
          "3993:     };",
          "3994:     const calls = {};",
          "3995:     for (const key of events) {",
          "3996:       calls[key] = response;",
          "3997:       spyOn(calls, key).and.callThrough();",
          "3998:       subscription.on(key, calls[key]);",
          "3999:     }",
          "4000:     const user = await Parse.User._logInWith('facebook');",
          "4002:     user.set('foo', 'bar');",
          "4003:     await user.save();",
          "4004:     user.unset('foo');",
          "4005:     await user.save();",
          "4006:     user.set('yolo', 'bar');",
          "4007:     await user.save();",
          "4008:     await user.destroy();",
          "4009:     await new Promise(resolve => process.nextTick(resolve));",
          "4010:     for (const key of events) {",
          "4011:       expect(calls[key]).toHaveBeenCalled();",
          "4012:     }",
          "4013:   });",
          "",
          "---------------"
        ],
        "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js": [
          "File: src/LiveQuery/ParseLiveQueryServer.js -> src/LiveQuery/ParseLiveQueryServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:               deletedParseObject = res.object.toJSON();",
          "187:               deletedParseObject.className = className;",
          "188:             }",
          "189:             client.pushDelete(requestId, deletedParseObject);",
          "190:           } catch (error) {",
          "191:             Client.pushError(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:             if (",
          "190:               (deletedParseObject.className === '_User' ||",
          "191:                 deletedParseObject.className === '_Session') &&",
          "192:               !client.hasMasterKey",
          "193:             ) {",
          "194:               delete deletedParseObject.sessionToken;",
          "195:               delete deletedParseObject.authData;",
          "196:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:               originalParseObject = res.original.toJSON();",
          "338:               originalParseObject.className = res.original.className || className;",
          "339:             }",
          "340:             const functionName = 'push' + res.event.charAt(0).toUpperCase() + res.event.slice(1);",
          "341:             if (client[functionName]) {",
          "342:               client[functionName](requestId, currentParseObject, originalParseObject);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:             if (",
          "349:               (currentParseObject.className === '_User' ||",
          "350:                 currentParseObject.className === '_Session') &&",
          "351:               !client.hasMasterKey",
          "352:             ) {",
          "353:               delete currentParseObject.sessionToken;",
          "354:               delete originalParseObject?.sessionToken;",
          "355:               delete currentParseObject.authData;",
          "356:               delete originalParseObject?.authData;",
          "357:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "054f3e6ab01d66a0dcfb77725af28eac1485b375",
      "candidate_info": {
        "commit_hash": "054f3e6ab01d66a0dcfb77725af28eac1485b375",
        "repo": "parse-community/parse-server",
        "commit_url": "https://github.com/parse-community/parse-server/commit/054f3e6ab01d66a0dcfb77725af28eac1485b375",
        "files": [
          "spec/ParseLiveQuery.spec.js",
          "src/Controllers/DatabaseController.js",
          "src/LiveQuery/ParseCloudCodePublisher.js",
          "src/LiveQuery/ParseLiveQueryServer.js"
        ],
        "message": "fix: protected fields exposed via LiveQuery; this removes protected fields from the client response; this may be a breaking change if your app is currently expecting to receive these protected fields ([GHSA-crrq-vr9j-fxxh](https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh)) (#8074)",
        "before_after_code_files": [
          "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
          "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js",
          "src/LiveQuery/ParseCloudCodePublisher.js||src/LiveQuery/ParseCloudCodePublisher.js",
          "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js",
            "src/LiveQuery/ParseCloudCodePublisher.js||src/LiveQuery/ParseCloudCodePublisher.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ],
          "candidate": [
            "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js",
            "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js",
            "src/LiveQuery/ParseCloudCodePublisher.js||src/LiveQuery/ParseCloudCodePublisher.js",
            "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js"
          ]
        }
      },
      "candidate_diff": {
        "spec/ParseLiveQuery.spec.js||spec/ParseLiveQuery.spec.js": [
          "File: spec/ParseLiveQuery.spec.js -> spec/ParseLiveQuery.spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "974:     }",
          "975:   });",
          "977:   afterEach(async function (done) {",
          "978:     const client = await Parse.CoreManager.getLiveQueryController().getDefaultLiveQueryClient();",
          "979:     client.close();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "977:   it('should strip out protected fields', async () => {",
          "978:     await reconfigureServer({",
          "979:       liveQuery: { classNames: ['Test'] },",
          "980:       startLiveQueryServer: true,",
          "981:     });",
          "982:     const obj1 = new Parse.Object('Test');",
          "983:     obj1.set('foo', 'foo');",
          "984:     obj1.set('bar', 'bar');",
          "985:     obj1.set('qux', 'qux');",
          "986:     await obj1.save();",
          "987:     const config = Config.get(Parse.applicationId);",
          "988:     const schemaController = await config.database.loadSchema();",
          "989:     await schemaController.updateClass(",
          "990:       'Test',",
          "991:       {},",
          "992:       {",
          "993:         get: { '*': true },",
          "994:         find: { '*': true },",
          "995:         update: { '*': true },",
          "996:         protectedFields: {",
          "997:           '*': ['foo'],",
          "998:         },",
          "999:       }",
          "1000:     );",
          "1001:     const object = await obj1.fetch();",
          "1002:     expect(object.get('foo')).toBe(undefined);",
          "1003:     expect(object.get('bar')).toBeDefined();",
          "1004:     expect(object.get('qux')).toBeDefined();",
          "1006:     const subscription = await new Parse.Query('Test').subscribe();",
          "1007:     await Promise.all([",
          "1008:       new Promise(resolve => {",
          "1009:         subscription.on('update', (obj, original) => {",
          "1010:           expect(obj.get('foo')).toBe(undefined);",
          "1011:           expect(obj.get('bar')).toBeDefined();",
          "1012:           expect(obj.get('qux')).toBeDefined();",
          "1013:           expect(original.get('foo')).toBe(undefined);",
          "1014:           expect(original.get('bar')).toBeDefined();",
          "1015:           expect(original.get('qux')).toBeDefined();",
          "1016:           resolve();",
          "1017:         });",
          "1018:       }),",
          "1019:       obj1.save({ foo: 'abc' }),",
          "1020:     ]);",
          "1021:   });",
          "",
          "---------------"
        ],
        "src/Controllers/DatabaseController.js||src/Controllers/DatabaseController.js": [
          "File: src/Controllers/DatabaseController.js -> src/Controllers/DatabaseController.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:   aclGroup: any[],",
          "124:   auth: any,",
          "125:   operation: any,",
          "127:   className: string,",
          "128:   protectedFields: null | Array<any>,",
          "129:   object: any",
          "",
          "[Removed Lines]",
          "126:   schema: SchemaController.SchemaController,",
          "",
          "[Added Lines]",
          "126:   schema: SchemaController.SchemaController | any,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:   if (auth && auth.user) userId = auth.user.id;",
          "136:   if (perms) {",
          "137:     const isReadOperation = ['get', 'find'].indexOf(operation) > -1;",
          "",
          "[Removed Lines]",
          "135:   const perms = schema.getClassLevelPermissions(className);",
          "",
          "[Added Lines]",
          "135:   const perms =",
          "136:     schema && schema.getClassLevelPermissions ? schema.getClassLevelPermissions(className) : {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1430:   }",
          "1432:   addProtectedFields(",
          "1434:     className: string,",
          "1435:     query: any = {},",
          "1436:     aclGroup: any[] = [],",
          "1437:     auth: any = {},",
          "1438:     queryOptions: FullQueryOptions = {}",
          "1439:   ): null | string[] {",
          "1441:     if (!perms) return null;",
          "1443:     const protectedFields = perms.protectedFields;",
          "",
          "[Removed Lines]",
          "1433:     schema: SchemaController.SchemaController,",
          "1440:     const perms = schema.getClassLevelPermissions(className);",
          "",
          "[Added Lines]",
          "1434:     schema: SchemaController.SchemaController | any,",
          "1441:     const perms =",
          "1442:       schema && schema.getClassLevelPermissions",
          "1443:         ? schema.getClassLevelPermissions(className)",
          "1444:         : schema;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1741:   }",
          "1743:   static _validateQuery: any => void;",
          "1744: }",
          "1746: module.exports = DatabaseController;",
          "1748: module.exports._validateQuery = validateQuery;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1748:   static filterSensitiveData: (boolean, any[], any, any, any, string, any[], any) => void;",
          "1754: module.exports.filterSensitiveData = filterSensitiveData;",
          "",
          "---------------"
        ],
        "src/LiveQuery/ParseCloudCodePublisher.js||src/LiveQuery/ParseCloudCodePublisher.js": [
          "File: src/LiveQuery/ParseCloudCodePublisher.js -> src/LiveQuery/ParseCloudCodePublisher.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     if (request.original) {",
          "34:       message.originalParseObject = request.original._toFullJSON();",
          "35:     }",
          "36:     this.parsePublisher.publish(type, JSON.stringify(message));",
          "37:   }",
          "38: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:     if (request.classLevelPermissions) {",
          "37:       message.classLevelPermissions = request.classLevelPermissions;",
          "38:     }",
          "",
          "---------------"
        ],
        "src/LiveQuery/ParseLiveQueryServer.js||src/LiveQuery/ParseLiveQueryServer.js": [
          "File: src/LiveQuery/ParseLiveQueryServer.js -> src/LiveQuery/ParseLiveQueryServer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:   maybeRunAfterEventTrigger,",
          "18: } from '../triggers';",
          "19: import { getAuthForSessionToken, Auth } from '../Auth';",
          "21: import LRU from 'lru-cache';",
          "22: import UserRouter from '../Routers/UsersRouter';",
          "24: class ParseLiveQueryServer {",
          "25:   clients: Map;",
          "",
          "[Removed Lines]",
          "20: import { getCacheController } from '../Controllers';",
          "",
          "[Added Lines]",
          "20: import { getCacheController, getDatabaseController } from '../Controllers';",
          "23: import DatabaseController from '../Controllers/DatabaseController';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:               };",
          "172:               return maybeRunAfterEventTrigger('afterEvent', className, res);",
          "173:             })",
          "175:               if (!res.sendEvent) {",
          "176:                 return;",
          "177:               }",
          "",
          "[Removed Lines]",
          "174:             .then(() => {",
          "",
          "[Added Lines]",
          "175:             .then(async () => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:                 deletedParseObject = res.object.toJSON();",
          "180:                 deletedParseObject.className = className;",
          "181:               }",
          "190:               client.pushDelete(requestId, deletedParseObject);",
          "191:             })",
          "192:             .catch(error => {",
          "",
          "[Removed Lines]",
          "182:               if (",
          "183:                 (deletedParseObject.className === '_User' ||",
          "184:                   deletedParseObject.className === '_Session') &&",
          "185:                 !client.hasMasterKey",
          "186:               ) {",
          "187:                 delete deletedParseObject.sessionToken;",
          "188:                 delete deletedParseObject.authData;",
          "189:               }",
          "",
          "[Added Lines]",
          "183:               await this._filterSensitiveData(",
          "184:                 classLevelPermissions,",
          "185:                 res,",
          "186:                 client,",
          "187:                 requestId,",
          "188:                 op,",
          "189:                 subscription.query",
          "190:               );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "310:               return maybeRunAfterEventTrigger('afterEvent', className, res);",
          "311:             })",
          "312:             .then(",
          "314:                 if (!res.sendEvent) {",
          "315:                   return;",
          "316:                 }",
          "",
          "[Removed Lines]",
          "313:               () => {",
          "",
          "[Added Lines]",
          "314:               async () => {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "323:                   originalParseObject = res.original.toJSON();",
          "324:                   originalParseObject.className = res.original.className || className;",
          "325:                 }",
          "336:                 const functionName =",
          "337:                   'push' + message.event.charAt(0).toUpperCase() + message.event.slice(1);",
          "338:                 if (client[functionName]) {",
          "",
          "[Removed Lines]",
          "326:                 if (",
          "327:                   (currentParseObject.className === '_User' ||",
          "328:                     currentParseObject.className === '_Session') &&",
          "329:                   !client.hasMasterKey",
          "330:                 ) {",
          "331:                   delete currentParseObject.sessionToken;",
          "332:                   delete originalParseObject?.sessionToken;",
          "333:                   delete currentParseObject.authData;",
          "334:                   delete originalParseObject?.authData;",
          "335:                 }",
          "",
          "[Added Lines]",
          "327:                 await this._filterSensitiveData(",
          "328:                   classLevelPermissions,",
          "329:                   res,",
          "330:                   client,",
          "331:                   requestId,",
          "332:                   op,",
          "333:                   subscription.query",
          "334:                 );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "533:   }",
          "535:   _getCLPOperation(query: any) {",
          "536:     return typeof query === 'object' &&",
          "537:       Object.keys(query).length == 1 &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "534:   async _filterSensitiveData(",
          "535:     classLevelPermissions: ?any,",
          "536:     res: any,",
          "537:     client: any,",
          "538:     requestId: number,",
          "539:     op: string,",
          "540:     query: any",
          "541:   ) {",
          "542:     const subscriptionInfo = client.getSubscriptionInfo(requestId);",
          "543:     const aclGroup = ['*'];",
          "544:     let clientAuth;",
          "545:     if (typeof subscriptionInfo !== 'undefined') {",
          "546:       const { userId, auth } = await this.getAuthForSessionToken(subscriptionInfo.sessionToken);",
          "547:       if (userId) {",
          "548:         aclGroup.push(userId);",
          "549:       }",
          "550:       clientAuth = auth;",
          "551:     }",
          "552:     const filter = obj => {",
          "553:       if (!obj) {",
          "554:         return;",
          "555:       }",
          "556:       let protectedFields = classLevelPermissions?.protectedFields || [];",
          "557:       if (!client.hasMasterKey && !Array.isArray(protectedFields)) {",
          "558:         protectedFields = getDatabaseController(this.config).addProtectedFields(",
          "559:           classLevelPermissions,",
          "560:           res.object.className,",
          "561:           query,",
          "562:           aclGroup,",
          "563:           clientAuth",
          "564:         );",
          "565:       }",
          "566:       return DatabaseController.filterSensitiveData(",
          "567:         client.hasMasterKey,",
          "568:         aclGroup,",
          "569:         clientAuth,",
          "570:         op,",
          "571:         classLevelPermissions,",
          "572:         res.object.className,",
          "573:         protectedFields,",
          "574:         obj",
          "575:       );",
          "576:     };",
          "577:     res.object = filter(res.object);",
          "578:     res.original = filter(res.original);",
          "579:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}