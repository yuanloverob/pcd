{
  "cve_id": "CVE-2024-31621",
  "cve_desc": "An issue in FlowiseAI Inc Flowise v.1.6.2 and before allows a remote attacker to execute arbitrary code via a crafted script to the api/v1 component.",
  "repo": "FlowiseAI/Flowise",
  "patch_hash": "e32b64344544312bf38b3e1fefe7b26c1776a426",
  "patch_info": {
    "commit_hash": "e32b64344544312bf38b3e1fefe7b26c1776a426",
    "repo": "FlowiseAI/Flowise",
    "commit_url": "https://github.com/FlowiseAI/Flowise/commit/e32b64344544312bf38b3e1fefe7b26c1776a426",
    "files": [
      "packages/server/src/index.ts",
      "packages/server/src/utils/logger.ts"
    ],
    "message": "Bugfix/Regex check for auth middleware (#2469)\n\nadd regex check for auth middleware",
    "before_after_code_files": [
      "packages/server/src/index.ts||packages/server/src/index.ts",
      "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
    ]
  },
  "patch_diff": {
    "packages/server/src/index.ts||packages/server/src/index.ts": [
      "File: packages/server/src/index.ts -> packages/server/src/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "140:                 '/api/v1/ip'",
      "141:             ]",
      "142:             this.app.use((req, res, next) => {",
      "145:                 } else next()",
      "146:             })",
      "147:         }",
      "",
      "[Removed Lines]",
      "143:                 if (req.url.includes('/api/v1/')) {",
      "144:                     whitelistURLs.some((url) => req.url.includes(url)) ? next() : basicAuthMiddleware(req, res, next)",
      "",
      "[Added Lines]",
      "143:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
      "144:                     whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url)) ? next() : basicAuthMiddleware(req, res, next)",
      "",
      "---------------"
    ],
    "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts": [
      "File: packages/server/src/utils/logger.ts -> packages/server/src/utils/logger.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "59: export function expressRequestLogger(req: Request, res: Response, next: NextFunction): void {",
      "62:         const fileLogger = createLogger({",
      "63:             format: combine(timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), format.json(), errors({ stack: true })),",
      "64:             defaultMeta: {",
      "",
      "[Removed Lines]",
      "60:     const unwantedLogURLs = ['/api/v1/node-icon/']",
      "61:     if (req.url.includes('/api/v1/') && !unwantedLogURLs.some((url) => req.url.includes(url))) {",
      "",
      "[Added Lines]",
      "60:     const unwantedLogURLs = ['/api/v1/node-icon/', '/api/v1/components-credentials-icon/']",
      "61:     if (/\\/api\\/v1\\//i.test(req.url) && !unwantedLogURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "286121e4e3b95b09e950941259814422b7ead2c9",
      "candidate_info": {
        "commit_hash": "286121e4e3b95b09e950941259814422b7ead2c9",
        "repo": "FlowiseAI/Flowise",
        "commit_url": "https://github.com/FlowiseAI/Flowise/commit/286121e4e3b95b09e950941259814422b7ead2c9",
        "files": [
          "packages/server/src/index.ts"
        ],
        "message": "Bugfix/Auth URL Bypass (#3095)\n\nadd fixes to prevent bypassing api url",
        "before_after_code_files": [
          "packages/server/src/index.ts||packages/server/src/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ],
          "candidate": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/server/src/index.ts||packages/server/src/index.ts": [
          "File: packages/server/src/index.ts -> packages/server/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:             '/api/v1/ip',",
          "136:             '/api/v1/ping'",
          "137:         ]",
          "139:         if (process.env.FLOWISE_USERNAME && process.env.FLOWISE_PASSWORD) {",
          "140:             const username = process.env.FLOWISE_USERNAME",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:         const URL_CASE_INSENSITIVE_REGEX: RegExp = /\\/api\\/v1\\//i",
          "139:         const URL_CASE_SENSITIVE_REGEX: RegExp = /\\/api\\/v1\\//",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:                 users: { [username]: password }",
          "144:             })",
          "145:             this.app.use(async (req, res, next) => {",
          "155:                         }",
          "157:                     }",
          "158:                 } else {",
          "159:                     next()",
          "160:                 }",
          "161:             })",
          "162:         } else {",
          "163:             this.app.use(async (req, res, next) => {",
          "173:                         }",
          "175:                     }",
          "176:                 } else {",
          "177:                     next()",
          "178:                 }",
          "179:             })",
          "",
          "[Removed Lines]",
          "146:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "147:                     if (whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
          "148:                         next()",
          "149:                     } else if (req.headers['x-request-from'] === 'internal') {",
          "150:                         basicAuthMiddleware(req, res, next)",
          "151:                     } else {",
          "152:                         const isKeyValidated = await validateAPIKey(req)",
          "153:                         if (!isKeyValidated) {",
          "154:                             return res.status(401).json({ error: 'Unauthorized Access' })",
          "156:                         next()",
          "164:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "165:                     if (whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
          "166:                         next()",
          "167:                     } else if (req.headers['x-request-from'] === 'internal') {",
          "168:                         next()",
          "169:                     } else {",
          "170:                         const isKeyValidated = await validateAPIKey(req)",
          "171:                         if (!isKeyValidated) {",
          "172:                             return res.status(401).json({ error: 'Unauthorized Access' })",
          "174:                         next()",
          "",
          "[Added Lines]",
          "149:                 if (URL_CASE_INSENSITIVE_REGEX.test(req.path)) {",
          "151:                     if (URL_CASE_SENSITIVE_REGEX.test(req.path)) {",
          "153:                         const isWhitelisted = whitelistURLs.some((url) => req.path.startsWith(url))",
          "154:                         if (isWhitelisted) {",
          "155:                             next()",
          "156:                         } else if (req.headers['x-request-from'] === 'internal') {",
          "157:                             basicAuthMiddleware(req, res, next)",
          "158:                         } else {",
          "159:                             const isKeyValidated = await validateAPIKey(req)",
          "160:                             if (!isKeyValidated) {",
          "161:                                 return res.status(401).json({ error: 'Unauthorized Access' })",
          "162:                             }",
          "163:                             next()",
          "165:                     } else {",
          "166:                         return res.status(401).json({ error: 'Unauthorized Access' })",
          "176:                 if (URL_CASE_INSENSITIVE_REGEX.test(req.path)) {",
          "178:                     if (URL_CASE_SENSITIVE_REGEX.test(req.path)) {",
          "180:                         const isWhitelisted = whitelistURLs.some((url) => req.path.startsWith(url))",
          "181:                         if (isWhitelisted) {",
          "182:                             next()",
          "183:                         } else if (req.headers['x-request-from'] === 'internal') {",
          "184:                             next()",
          "185:                         } else {",
          "186:                             const isKeyValidated = await validateAPIKey(req)",
          "187:                             if (!isKeyValidated) {",
          "188:                                 return res.status(401).json({ error: 'Unauthorized Access' })",
          "189:                             }",
          "190:                             next()",
          "192:                     } else {",
          "193:                         return res.status(401).json({ error: 'Unauthorized Access' })",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb19c206cfddc9d3f62e98312a6bee7641ed84ce",
      "candidate_info": {
        "commit_hash": "eb19c206cfddc9d3f62e98312a6bee7641ed84ce",
        "repo": "FlowiseAI/Flowise",
        "commit_url": "https://github.com/FlowiseAI/Flowise/commit/eb19c206cfddc9d3f62e98312a6bee7641ed84ce",
        "files": [
          "packages/components/nodes/agents/AutoGPT/AutoGPT.ts",
          "packages/components/nodes/agents/OpenAIFunctionAgent/OpenAIFunctionAgent.ts",
          "packages/components/nodes/chains/ApiChain/GETApiChain.ts",
          "packages/components/nodes/chains/ApiChain/OpenAPIChain.ts",
          "packages/components/nodes/chains/ApiChain/POSTApiChain.ts",
          "packages/components/nodes/chains/ConversationChain/ConversationChain.ts",
          "packages/components/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.ts",
          "packages/components/nodes/chains/LLMChain/LLMChain.ts",
          "packages/components/nodes/chains/MultiPromptChain/MultiPromptChain.ts",
          "packages/components/nodes/chains/MultiRetrievalQAChain/MultiRetrievalQAChain.ts",
          "packages/components/nodes/chains/RetrievalQAChain/RetrievalQAChain.ts",
          "packages/components/nodes/chains/SqlDatabaseChain/SqlDatabaseChain.ts",
          "packages/components/nodes/chains/VectorDBQAChain/VectorDBQAChain.ts",
          "packages/components/src/handler.ts",
          "packages/components/src/utils.ts",
          "packages/server/.env.example",
          "packages/server/src/ChatflowPool.ts",
          "packages/server/src/ChildProcess.ts",
          "packages/server/src/commands/start.ts",
          "packages/server/src/index.ts",
          "packages/server/src/utils/config.ts",
          "packages/server/src/utils/index.ts",
          "packages/server/src/utils/logger.ts"
        ],
        "message": "add logs to component chains/agents",
        "before_after_code_files": [
          "packages/components/nodes/agents/AutoGPT/AutoGPT.ts||packages/components/nodes/agents/AutoGPT/AutoGPT.ts",
          "packages/components/nodes/agents/OpenAIFunctionAgent/OpenAIFunctionAgent.ts||packages/components/nodes/agents/OpenAIFunctionAgent/OpenAIFunctionAgent.ts",
          "packages/components/nodes/chains/ApiChain/GETApiChain.ts||packages/components/nodes/chains/ApiChain/GETApiChain.ts",
          "packages/components/nodes/chains/ApiChain/OpenAPIChain.ts||packages/components/nodes/chains/ApiChain/OpenAPIChain.ts",
          "packages/components/nodes/chains/ApiChain/POSTApiChain.ts||packages/components/nodes/chains/ApiChain/POSTApiChain.ts",
          "packages/components/nodes/chains/ConversationChain/ConversationChain.ts||packages/components/nodes/chains/ConversationChain/ConversationChain.ts",
          "packages/components/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.ts||packages/components/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.ts",
          "packages/components/nodes/chains/LLMChain/LLMChain.ts||packages/components/nodes/chains/LLMChain/LLMChain.ts",
          "packages/components/nodes/chains/MultiPromptChain/MultiPromptChain.ts||packages/components/nodes/chains/MultiPromptChain/MultiPromptChain.ts",
          "packages/components/nodes/chains/MultiRetrievalQAChain/MultiRetrievalQAChain.ts||packages/components/nodes/chains/MultiRetrievalQAChain/MultiRetrievalQAChain.ts",
          "packages/components/nodes/chains/RetrievalQAChain/RetrievalQAChain.ts||packages/components/nodes/chains/RetrievalQAChain/RetrievalQAChain.ts",
          "packages/components/nodes/chains/SqlDatabaseChain/SqlDatabaseChain.ts||packages/components/nodes/chains/SqlDatabaseChain/SqlDatabaseChain.ts",
          "packages/components/nodes/chains/VectorDBQAChain/VectorDBQAChain.ts||packages/components/nodes/chains/VectorDBQAChain/VectorDBQAChain.ts",
          "packages/components/src/handler.ts||packages/components/src/handler.ts",
          "packages/components/src/utils.ts||packages/components/src/utils.ts",
          "packages/server/.env.example||packages/server/.env.example",
          "packages/server/src/ChatflowPool.ts||packages/server/src/ChatflowPool.ts",
          "packages/server/src/ChildProcess.ts||packages/server/src/ChildProcess.ts",
          "packages/server/src/commands/start.ts||packages/server/src/commands/start.ts",
          "packages/server/src/index.ts||packages/server/src/index.ts",
          "packages/server/src/utils/config.ts||packages/server/src/utils/config.ts",
          "packages/server/src/utils/index.ts||packages/server/src/utils/index.ts",
          "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/server/src/index.ts||packages/server/src/index.ts",
            "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
          ],
          "candidate": [
            "packages/server/src/index.ts||packages/server/src/index.ts",
            "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/components/nodes/agents/AutoGPT/AutoGPT.ts||packages/components/nodes/agents/AutoGPT/AutoGPT.ts": [
          "File: packages/components/nodes/agents/AutoGPT/AutoGPT.ts -> packages/components/nodes/agents/AutoGPT/AutoGPT.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:             const res = await executor.run([input])",
          "91:             return res || 'I have completed all my tasks.'",
          "92:         } catch (e) {",
          "94:             throw new Error(e)",
          "95:         }",
          "96:     }",
          "",
          "[Removed Lines]",
          "93:             console.error(e)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/components/nodes/agents/OpenAIFunctionAgent/OpenAIFunctionAgent.ts||packages/components/nodes/agents/OpenAIFunctionAgent/OpenAIFunctionAgent.ts": [
          "File: packages/components/nodes/agents/OpenAIFunctionAgent/OpenAIFunctionAgent.ts -> packages/components/nodes/agents/OpenAIFunctionAgent/OpenAIFunctionAgent.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ICommonObject, IMessage, INode, INodeData, INodeParams } from '../../../src/Interface'",
          "2: import { initializeAgentExecutorWithOptions, AgentExecutor } from 'langchain/agents'",
          "4: import { BaseLanguageModel } from 'langchain/base_language'",
          "5: import { flatten } from 'lodash'",
          "6: import { BaseChatMemory, ChatMessageHistory } from 'langchain/memory'",
          "7: import { AIMessage, HumanMessage } from 'langchain/schema'",
          "9: class OpenAIFunctionAgent_Agents implements INode {",
          "10:     label: string",
          "",
          "[Removed Lines]",
          "3: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "3: import { getBaseClasses } from '../../../src/utils'",
          "8: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:             executor.memory = memory",
          "94:         }",
          "96:         if (options.socketIO && options.socketIOClientId) {",
          "97:             const handler = new CustomChainHandler(options.socketIO, options.socketIOClientId)",
          "99:             return result",
          "100:         } else {",
          "102:             return result",
          "103:         }",
          "104:     }",
          "",
          "[Removed Lines]",
          "98:             const result = await executor.run(input, [handler])",
          "101:             const result = await executor.run(input)",
          "",
          "[Added Lines]",
          "97:         const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "101:             const result = await executor.run(input, [loggerHandler, handler])",
          "104:             const result = await executor.run(input, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/nodes/chains/ApiChain/GETApiChain.ts||packages/components/nodes/chains/ApiChain/GETApiChain.ts": [
          "File: packages/components/nodes/chains/ApiChain/GETApiChain.ts -> packages/components/nodes/chains/ApiChain/GETApiChain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ICommonObject, INode, INodeData, INodeParams } from '../../../src/Interface'",
          "2: import { APIChain } from 'langchain/chains'",
          "4: import { BaseLanguageModel } from 'langchain/base_language'",
          "5: import { PromptTemplate } from 'langchain/prompts'",
          "7: export const API_URL_RAW_PROMPT_TEMPLATE = `You are given the below API Documentation:",
          "8: {api_docs}",
          "",
          "[Removed Lines]",
          "3: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "3: import { getBaseClasses } from '../../../src/utils'",
          "6: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:         const ansPrompt = nodeData.inputs?.ansPrompt as string",
          "97:         const chain = await getAPIChain(apiDocs, model, headers, urlPrompt, ansPrompt)",
          "98:         if (options.socketIO && options.socketIOClientId) {",
          "99:             const handler = new CustomChainHandler(options.socketIO, options.socketIOClientId, 2)",
          "101:             return res",
          "102:         } else {",
          "104:             return res",
          "105:         }",
          "106:     }",
          "",
          "[Removed Lines]",
          "100:             const res = await chain.run(input, [handler])",
          "103:             const res = await chain.run(input)",
          "",
          "[Added Lines]",
          "99:         const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "103:             const res = await chain.run(input, [loggerHandler, handler])",
          "106:             const res = await chain.run(input, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/nodes/chains/ApiChain/OpenAPIChain.ts||packages/components/nodes/chains/ApiChain/OpenAPIChain.ts": [
          "File: packages/components/nodes/chains/ApiChain/OpenAPIChain.ts -> packages/components/nodes/chains/ApiChain/OpenAPIChain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ICommonObject, INode, INodeData, INodeParams } from '../../../src/Interface'",
          "2: import { APIChain, createOpenAPIChain } from 'langchain/chains'",
          "4: import { ChatOpenAI } from 'langchain/chat_models/openai'",
          "6: class OpenApiChain_Chains implements INode {",
          "7:     label: string",
          "",
          "[Removed Lines]",
          "3: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "3: import { getBaseClasses } from '../../../src/utils'",
          "5: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     async run(nodeData: INodeData, input: string, options: ICommonObject): Promise<string> {",
          "59:         const chain = await initChain(nodeData)",
          "60:         if (options.socketIO && options.socketIOClientId) {",
          "61:             const handler = new CustomChainHandler(options.socketIO, options.socketIOClientId)",
          "63:             return res",
          "64:         } else {",
          "66:             return res",
          "67:         }",
          "68:     }",
          "",
          "[Removed Lines]",
          "62:             const res = await chain.run(input, [handler])",
          "65:             const res = await chain.run(input)",
          "",
          "[Added Lines]",
          "61:         const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "65:             const res = await chain.run(input, [loggerHandler, handler])",
          "68:             const res = await chain.run(input, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/nodes/chains/ApiChain/POSTApiChain.ts||packages/components/nodes/chains/ApiChain/POSTApiChain.ts": [
          "File: packages/components/nodes/chains/ApiChain/POSTApiChain.ts -> packages/components/nodes/chains/ApiChain/POSTApiChain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ICommonObject, INode, INodeData, INodeParams } from '../../../src/Interface'",
          "3: import { BaseLanguageModel } from 'langchain/base_language'",
          "4: import { PromptTemplate } from 'langchain/prompts'",
          "5: import { API_RESPONSE_RAW_PROMPT_TEMPLATE, API_URL_RAW_PROMPT_TEMPLATE, APIChain } from './postCore'",
          "7: class POSTApiChain_Chains implements INode {",
          "8:     label: string",
          "",
          "[Removed Lines]",
          "2: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "2: import { getBaseClasses } from '../../../src/utils'",
          "6: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:         const ansPrompt = nodeData.inputs?.ansPrompt as string",
          "86:         const chain = await getAPIChain(apiDocs, model, headers, urlPrompt, ansPrompt)",
          "87:         if (options.socketIO && options.socketIOClientId) {",
          "88:             const handler = new CustomChainHandler(options.socketIO, options.socketIOClientId, 2)",
          "90:             return res",
          "91:         } else {",
          "93:             return res",
          "94:         }",
          "95:     }",
          "",
          "[Removed Lines]",
          "89:             const res = await chain.run(input, [handler])",
          "92:             const res = await chain.run(input)",
          "",
          "[Added Lines]",
          "88:         const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "92:             const res = await chain.run(input, [loggerHandler, handler])",
          "95:             const res = await chain.run(input, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/nodes/chains/ConversationChain/ConversationChain.ts||packages/components/nodes/chains/ConversationChain/ConversationChain.ts": [
          "File: packages/components/nodes/chains/ConversationChain/ConversationChain.ts -> packages/components/nodes/chains/ConversationChain/ConversationChain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ICommonObject, IMessage, INode, INodeData, INodeParams } from '../../../src/Interface'",
          "2: import { ConversationChain } from 'langchain/chains'",
          "4: import { ChatPromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder, SystemMessagePromptTemplate } from 'langchain/prompts'",
          "5: import { BufferMemory, ChatMessageHistory } from 'langchain/memory'",
          "6: import { BaseChatModel } from 'langchain/chat_models/base'",
          "7: import { AIMessage, HumanMessage } from 'langchain/schema'",
          "9: const systemMessage = `The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.`",
          "",
          "[Removed Lines]",
          "3: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "3: import { getBaseClasses } from '../../../src/utils'",
          "8: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:             chain.memory = memory",
          "91:         }",
          "93:         if (options.socketIO && options.socketIOClientId) {",
          "94:             const handler = new CustomChainHandler(options.socketIO, options.socketIOClientId)",
          "96:             return res?.response",
          "97:         } else {",
          "99:             return res?.response",
          "100:         }",
          "101:     }",
          "",
          "[Removed Lines]",
          "95:             const res = await chain.call({ input }, [handler])",
          "98:             const res = await chain.call({ input })",
          "",
          "[Added Lines]",
          "94:         const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "98:             const res = await chain.call({ input }, [loggerHandler, handler])",
          "101:             const res = await chain.call({ input }, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.ts||packages/components/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.ts": [
          "File: packages/components/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.ts -> packages/components/nodes/chains/ConversationalRetrievalQAChain/ConversationalRetrievalQAChain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { BaseLanguageModel } from 'langchain/base_language'",
          "2: import { ICommonObject, IMessage, INode, INodeData, INodeParams } from '../../../src/Interface'",
          "4: import { ConversationalRetrievalQAChain } from 'langchain/chains'",
          "5: import { AIMessage, BaseRetriever, HumanMessage } from 'langchain/schema'",
          "6: import { BaseChatMemory, BufferMemory, ChatMessageHistory } from 'langchain/memory'",
          "7: import { PromptTemplate } from 'langchain/prompts'",
          "9: const default_qa_template = `Use the following pieces of context to answer the question at the end, in its original language. If you don't know the answer, just say that you don't know in its original language, don't try to make up an answer.",
          "",
          "[Removed Lines]",
          "3: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "3: import { getBaseClasses } from '../../../src/utils'",
          "8: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:             chain.memory = memory",
          "176:         }",
          "178:         if (options.socketIO && options.socketIOClientId) {",
          "179:             const handler = new CustomChainHandler(options.socketIO, options.socketIOClientId, undefined, returnSourceDocuments)",
          "181:             if (res.text && res.sourceDocuments) return res",
          "182:             return res?.text",
          "183:         } else {",
          "185:             if (res.text && res.sourceDocuments) return res",
          "186:             return res?.text",
          "187:         }",
          "",
          "[Removed Lines]",
          "180:             const res = await chain.call(obj, [handler])",
          "184:             const res = await chain.call(obj)",
          "",
          "[Added Lines]",
          "179:         const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "183:             const res = await chain.call(obj, [loggerHandler, handler])",
          "187:             const res = await chain.call(obj, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/nodes/chains/LLMChain/LLMChain.ts||packages/components/nodes/chains/LLMChain/LLMChain.ts": [
          "File: packages/components/nodes/chains/LLMChain/LLMChain.ts -> packages/components/nodes/chains/LLMChain/LLMChain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ICommonObject, INode, INodeData, INodeOutputsValue, INodeParams } from '../../../src/Interface'",
          "3: import { LLMChain } from 'langchain/chains'",
          "4: import { BaseLanguageModel } from 'langchain/base_language'",
          "6: class LLMChain_Chains implements INode {",
          "7:     label: string",
          "",
          "[Removed Lines]",
          "2: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "2: import { getBaseClasses } from '../../../src/utils'",
          "5: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         ]",
          "56:     }",
          "59:         const model = nodeData.inputs?.model as BaseLanguageModel",
          "60:         const prompt = nodeData.inputs?.prompt",
          "61:         const output = nodeData.outputs?.output as string",
          "",
          "[Removed Lines]",
          "58:     async init(nodeData: INodeData, input: string): Promise<any> {",
          "",
          "[Added Lines]",
          "59:     async init(nodeData: INodeData, input: string, options: ICommonObject): Promise<any> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:         } else if (output === 'outputPrediction') {",
          "68:             const chain = new LLMChain({ llm: model, prompt, verbose: process.env.DEBUG === 'true' ? true : false })",
          "69:             const inputVariables = chain.prompt.inputVariables as string[] // [\"product\"]",
          "72:             console.log('\\x1b[92m\\x1b[1m\\n*****OUTPUT PREDICTION*****\\n\\x1b[0m\\x1b[0m')",
          "",
          "[Removed Lines]",
          "70:             const res = await runPrediction(inputVariables, chain, input, promptValues)",
          "",
          "[Added Lines]",
          "71:             const res = await runPrediction(inputVariables, chain, input, promptValues, options)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "81:         const chain = nodeData.instance as LLMChain",
          "82:         const promptValues = nodeData.inputs?.prompt.promptValues as ICommonObject",
          "88:         console.log('\\x1b[93m\\x1b[1m\\n*****FINAL RESULT*****\\n\\x1b[0m\\x1b[0m')",
          "",
          "[Removed Lines]",
          "84:         const res = options.socketIO",
          "85:             ? await runPrediction(inputVariables, chain, input, promptValues, true, options.socketIO, options.socketIOClientId)",
          "86:             : await runPrediction(inputVariables, chain, input, promptValues)",
          "",
          "[Added Lines]",
          "85:         const res = await runPrediction(inputVariables, chain, input, promptValues, options)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "97:     chain: LLMChain,",
          "98:     input: string,",
          "99:     promptValues: ICommonObject,",
          "103: ) => {",
          "104:     if (inputVariables.length === 1) {",
          "105:         if (isStreaming) {",
          "106:             const handler = new CustomChainHandler(socketIO, socketIOClientId)",
          "108:             return res",
          "109:         } else {",
          "111:             return res",
          "112:         }",
          "113:     } else if (inputVariables.length > 1) {",
          "",
          "[Removed Lines]",
          "100:     isStreaming?: boolean,",
          "101:     socketIO?: any,",
          "102:     socketIOClientId = ''",
          "107:             const res = await chain.run(input, [handler])",
          "110:             const res = await chain.run(input)",
          "",
          "[Added Lines]",
          "99:     options: ICommonObject",
          "101:     const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "102:     const isStreaming = options.socketIO && options.socketIOClientId",
          "103:     const socketIO = isStreaming ? options.socketIO : undefined",
          "104:     const socketIOClientId = isStreaming ? options.socketIOClientId : ''",
          "109:             const res = await chain.run(input, [loggerHandler, handler])",
          "112:             const res = await chain.run(input, [loggerHandler])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:         if (seen.length === 0) {",
          "128:             if (isStreaming) {",
          "129:                 const handler = new CustomChainHandler(socketIO, socketIOClientId)",
          "131:                 return res?.text",
          "132:             } else {",
          "134:                 return res?.text",
          "135:             }",
          "136:         } else if (seen.length === 1) {",
          "",
          "[Removed Lines]",
          "125:             const options = {",
          "126:                 ...promptValues",
          "127:             }",
          "130:                 const res = await chain.call(options, [handler])",
          "133:                 const res = await chain.call(options)",
          "",
          "[Added Lines]",
          "127:             const options = { ...promptValues }",
          "130:                 const res = await chain.call(options, [loggerHandler, handler])",
          "133:                 const res = await chain.call(options, [loggerHandler])",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "143:             }",
          "144:             if (isStreaming) {",
          "145:                 const handler = new CustomChainHandler(socketIO, socketIOClientId)",
          "147:                 return res?.text",
          "148:             } else {",
          "150:                 return res?.text",
          "151:             }",
          "152:         } else {",
          "",
          "[Removed Lines]",
          "146:                 const res = await chain.call(options, [handler])",
          "149:                 const res = await chain.call(options)",
          "",
          "[Added Lines]",
          "146:                 const res = await chain.call(options, [loggerHandler, handler])",
          "149:                 const res = await chain.call(options, [loggerHandler])",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "155:     } else {",
          "156:         if (isStreaming) {",
          "157:             const handler = new CustomChainHandler(socketIO, socketIOClientId)",
          "159:             return res",
          "160:         } else {",
          "162:             return res",
          "163:         }",
          "164:     }",
          "",
          "[Removed Lines]",
          "158:             const res = await chain.run(input, [handler])",
          "161:             const res = await chain.run(input)",
          "",
          "[Added Lines]",
          "158:             const res = await chain.run(input, [loggerHandler, handler])",
          "161:             const res = await chain.run(input, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/nodes/chains/MultiPromptChain/MultiPromptChain.ts||packages/components/nodes/chains/MultiPromptChain/MultiPromptChain.ts": [
          "File: packages/components/nodes/chains/MultiPromptChain/MultiPromptChain.ts -> packages/components/nodes/chains/MultiPromptChain/MultiPromptChain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { BaseLanguageModel } from 'langchain/base_language'",
          "2: import { ICommonObject, INode, INodeData, INodeParams, PromptRetriever } from '../../../src/Interface'",
          "4: import { MultiPromptChain } from 'langchain/chains'",
          "6: class MultiPromptChain_Chains implements INode {",
          "7:     label: string",
          "",
          "[Removed Lines]",
          "3: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "3: import { getBaseClasses } from '../../../src/utils'",
          "5: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:         const chain = nodeData.instance as MultiPromptChain",
          "64:         const obj = { input }",
          "66:         if (options.socketIO && options.socketIOClientId) {",
          "67:             const handler = new CustomChainHandler(options.socketIO, options.socketIOClientId, 2)",
          "69:             return res?.text",
          "70:         } else {",
          "72:             return res?.text",
          "73:         }",
          "74:     }",
          "",
          "[Removed Lines]",
          "68:             const res = await chain.call(obj, [handler])",
          "71:             const res = await chain.call(obj)",
          "",
          "[Added Lines]",
          "67:         const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "71:             const res = await chain.call(obj, [loggerHandler, handler])",
          "74:             const res = await chain.call(obj, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/nodes/chains/MultiRetrievalQAChain/MultiRetrievalQAChain.ts||packages/components/nodes/chains/MultiRetrievalQAChain/MultiRetrievalQAChain.ts": [
          "File: packages/components/nodes/chains/MultiRetrievalQAChain/MultiRetrievalQAChain.ts -> packages/components/nodes/chains/MultiRetrievalQAChain/MultiRetrievalQAChain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { BaseLanguageModel } from 'langchain/base_language'",
          "2: import { ICommonObject, INode, INodeData, INodeParams, VectorStoreRetriever } from '../../../src/Interface'",
          "4: import { MultiRetrievalQAChain } from 'langchain/chains'",
          "6: class MultiRetrievalQAChain_Chains implements INode {",
          "7:     label: string",
          "",
          "[Removed Lines]",
          "3: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "3: import { getBaseClasses } from '../../../src/utils'",
          "5: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:         const returnSourceDocuments = nodeData.inputs?.returnSourceDocuments as boolean",
          "73:         const obj = { input }",
          "75:         if (options.socketIO && options.socketIOClientId) {",
          "76:             const handler = new CustomChainHandler(options.socketIO, options.socketIOClientId, 2, returnSourceDocuments)",
          "78:             if (res.text && res.sourceDocuments) return res",
          "79:             return res?.text",
          "80:         } else {",
          "82:             if (res.text && res.sourceDocuments) return res",
          "83:             return res?.text",
          "84:         }",
          "",
          "[Removed Lines]",
          "77:             const res = await chain.call(obj, [handler])",
          "81:             const res = await chain.call(obj)",
          "",
          "[Added Lines]",
          "75:         const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "79:             const res = await chain.call(obj, [loggerHandler, handler])",
          "83:             const res = await chain.call(obj, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/nodes/chains/RetrievalQAChain/RetrievalQAChain.ts||packages/components/nodes/chains/RetrievalQAChain/RetrievalQAChain.ts": [
          "File: packages/components/nodes/chains/RetrievalQAChain/RetrievalQAChain.ts -> packages/components/nodes/chains/RetrievalQAChain/RetrievalQAChain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ICommonObject, INode, INodeData, INodeParams } from '../../../src/Interface'",
          "2: import { RetrievalQAChain } from 'langchain/chains'",
          "3: import { BaseRetriever } from 'langchain/schema'",
          "5: import { BaseLanguageModel } from 'langchain/base_language'",
          "7: class RetrievalQAChain_Chains implements INode {",
          "8:     label: string",
          "",
          "[Removed Lines]",
          "4: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "4: import { getBaseClasses } from '../../../src/utils'",
          "6: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         const obj = {",
          "50:             query: input",
          "51:         }",
          "53:         if (options.socketIO && options.socketIOClientId) {",
          "54:             const handler = new CustomChainHandler(options.socketIO, options.socketIOClientId)",
          "56:             return res?.text",
          "57:         } else {",
          "59:             return res?.text",
          "60:         }",
          "61:     }",
          "",
          "[Removed Lines]",
          "55:             const res = await chain.call(obj, [handler])",
          "58:             const res = await chain.call(obj)",
          "",
          "[Added Lines]",
          "53:         const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "57:             const res = await chain.call(obj, [loggerHandler, handler])",
          "60:             const res = await chain.call(obj, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/nodes/chains/SqlDatabaseChain/SqlDatabaseChain.ts||packages/components/nodes/chains/SqlDatabaseChain/SqlDatabaseChain.ts": [
          "File: packages/components/nodes/chains/SqlDatabaseChain/SqlDatabaseChain.ts -> packages/components/nodes/chains/SqlDatabaseChain/SqlDatabaseChain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ICommonObject, INode, INodeData, INodeParams } from '../../../src/Interface'",
          "2: import { SqlDatabaseChain, SqlDatabaseChainInput } from 'langchain/chains/sql_db'",
          "4: import { DataSource } from 'typeorm'",
          "5: import { SqlDatabase } from 'langchain/sql_db'",
          "6: import { BaseLanguageModel } from 'langchain/base_language'",
          "8: class SqlDatabaseChain_Chains implements INode {",
          "9:     label: string",
          "",
          "[Removed Lines]",
          "3: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "3: import { getBaseClasses } from '../../../src/utils'",
          "7: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:         const dbFilePath = nodeData.inputs?.dbFilePath",
          "67:         const chain = await getSQLDBChain(databaseType, dbFilePath, model)",
          "68:         if (options.socketIO && options.socketIOClientId) {",
          "69:             const handler = new CustomChainHandler(options.socketIO, options.socketIOClientId, 2)",
          "71:             return res",
          "72:         } else {",
          "74:             return res",
          "75:         }",
          "76:     }",
          "",
          "[Removed Lines]",
          "70:             const res = await chain.run(input, [handler])",
          "73:             const res = await chain.run(input)",
          "",
          "[Added Lines]",
          "69:         const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "73:             const res = await chain.run(input, [loggerHandler, handler])",
          "76:             const res = await chain.run(input, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/nodes/chains/VectorDBQAChain/VectorDBQAChain.ts||packages/components/nodes/chains/VectorDBQAChain/VectorDBQAChain.ts": [
          "File: packages/components/nodes/chains/VectorDBQAChain/VectorDBQAChain.ts -> packages/components/nodes/chains/VectorDBQAChain/VectorDBQAChain.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ICommonObject, INode, INodeData, INodeParams } from '../../../src/Interface'",
          "3: import { VectorDBQAChain } from 'langchain/chains'",
          "4: import { BaseLanguageModel } from 'langchain/base_language'",
          "5: import { VectorStore } from 'langchain/vectorstores'",
          "7: class VectorDBQAChain_Chains implements INode {",
          "8:     label: string",
          "",
          "[Removed Lines]",
          "2: import { CustomChainHandler, getBaseClasses } from '../../../src/utils'",
          "",
          "[Added Lines]",
          "2: import { getBaseClasses } from '../../../src/utils'",
          "6: import { ConsoleCallbackHandler, CustomChainHandler } from '../../../src/handler'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:             query: input",
          "54:         }",
          "56:         if (options.socketIO && options.socketIOClientId) {",
          "57:             const handler = new CustomChainHandler(options.socketIO, options.socketIOClientId)",
          "59:             return res?.text",
          "60:         } else {",
          "62:             return res?.text",
          "63:         }",
          "64:     }",
          "",
          "[Removed Lines]",
          "58:             const res = await chain.call(obj, [handler])",
          "61:             const res = await chain.call(obj)",
          "",
          "[Added Lines]",
          "57:         const loggerHandler = new ConsoleCallbackHandler(options.logger)",
          "61:             const res = await chain.call(obj, [loggerHandler, handler])",
          "64:             const res = await chain.call(obj, [loggerHandler])",
          "",
          "---------------"
        ],
        "packages/components/src/handler.ts||packages/components/src/handler.ts": [
          "File: packages/components/src/handler.ts -> packages/components/src/handler.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { BaseTracer, Run, BaseCallbackHandler } from 'langchain/callbacks'",
          "2: import { AgentAction, ChainValues } from 'langchain/schema'",
          "3: import { Logger } from 'winston'",
          "4: import { Server } from 'socket.io'",
          "6: interface AgentRun extends Run {",
          "7:     actions: AgentAction[]",
          "8: }",
          "10: function tryJsonStringify(obj: unknown, fallback: string) {",
          "11:     try {",
          "12:         return JSON.stringify(obj, null, 2)",
          "13:     } catch (err) {",
          "14:         return fallback",
          "15:     }",
          "16: }",
          "18: function elapsed(run: Run): string {",
          "19:     if (!run.end_time) return ''",
          "20:     const elapsed = run.end_time - run.start_time",
          "21:     if (elapsed < 1000) {",
          "22:         return `${elapsed}ms`",
          "23:     }",
          "24:     return `${(elapsed / 1000).toFixed(2)}s`",
          "25: }",
          "27: export class ConsoleCallbackHandler extends BaseTracer {",
          "28:     name = 'console_callback_handler' as const",
          "29:     logger: Logger",
          "31:     protected persistRun(_run: Run) {",
          "32:         return Promise.resolve()",
          "33:     }",
          "35:     constructor(logger: Logger) {",
          "36:         super()",
          "37:         this.logger = logger",
          "38:     }",
          "42:     getParents(run: Run) {",
          "43:         const parents: Run[] = []",
          "44:         let currentRun = run",
          "45:         while (currentRun.parent_run_id) {",
          "46:             const parent = this.runMap.get(currentRun.parent_run_id)",
          "47:             if (parent) {",
          "48:                 parents.push(parent)",
          "49:                 currentRun = parent",
          "50:             } else {",
          "51:                 break",
          "52:             }",
          "53:         }",
          "54:         return parents",
          "55:     }",
          "57:     getBreadcrumbs(run: Run) {",
          "58:         const parents = this.getParents(run).reverse()",
          "59:         const string = [...parents, run]",
          "60:             .map((parent) => {",
          "61:                 const name = `${parent.execution_order}:${parent.run_type}:${parent.name}`",
          "62:                 return name",
          "63:             })",
          "64:             .join(' > ')",
          "65:         return string",
          "66:     }",
          "70:     onChainStart(run: Run) {",
          "71:         const crumbs = this.getBreadcrumbs(run)",
          "72:         this.logger.verbose(`[chain/start] [${crumbs}] Entering Chain run with input: ${tryJsonStringify(run.inputs, '[inputs]')}`)",
          "73:     }",
          "75:     onChainEnd(run: Run) {",
          "76:         const crumbs = this.getBreadcrumbs(run)",
          "77:         this.logger.verbose(",
          "78:             `[chain/end] [${crumbs}] [${elapsed(run)}] Exiting Chain run with output: ${tryJsonStringify(run.outputs, '[outputs]')}`",
          "79:         )",
          "80:     }",
          "82:     onChainError(run: Run) {",
          "83:         const crumbs = this.getBreadcrumbs(run)",
          "84:         this.logger.verbose(",
          "85:             `[chain/error] [${crumbs}] [${elapsed(run)}] Chain run errored with error: ${tryJsonStringify(run.error, '[error]')}`",
          "86:         )",
          "87:     }",
          "89:     onLLMStart(run: Run) {",
          "90:         const crumbs = this.getBreadcrumbs(run)",
          "91:         const inputs = 'prompts' in run.inputs ? { prompts: (run.inputs.prompts as string[]).map((p) => p.trim()) } : run.inputs",
          "92:         this.logger.verbose(`[llm/start] [${crumbs}] Entering LLM run with input: ${tryJsonStringify(inputs, '[inputs]')}`)",
          "93:     }",
          "95:     onLLMEnd(run: Run) {",
          "96:         const crumbs = this.getBreadcrumbs(run)",
          "97:         this.logger.verbose(",
          "98:             `[llm/end] [${crumbs}] [${elapsed(run)}] Exiting LLM run with output: ${tryJsonStringify(run.outputs, '[response]')}`",
          "99:         )",
          "100:     }",
          "102:     onLLMError(run: Run) {",
          "103:         const crumbs = this.getBreadcrumbs(run)",
          "104:         this.logger.verbose(",
          "105:             `[llm/error] [${crumbs}] [${elapsed(run)}] LLM run errored with error: ${tryJsonStringify(run.error, '[error]')}`",
          "106:         )",
          "107:     }",
          "109:     onToolStart(run: Run) {",
          "110:         const crumbs = this.getBreadcrumbs(run)",
          "111:         this.logger.verbose(`[tool/start] [${crumbs}] Entering Tool run with input: \"${run.inputs.input?.trim()}\"`)",
          "112:     }",
          "114:     onToolEnd(run: Run) {",
          "115:         const crumbs = this.getBreadcrumbs(run)",
          "116:         this.logger.verbose(`[tool/end] [${crumbs}] [${elapsed(run)}] Exiting Tool run with output: \"${run.outputs?.output?.trim()}\"`)",
          "117:     }",
          "119:     onToolError(run: Run) {",
          "120:         const crumbs = this.getBreadcrumbs(run)",
          "121:         this.logger.verbose(",
          "122:             `[tool/error] [${crumbs}] [${elapsed(run)}] Tool run errored with error: ${tryJsonStringify(run.error, '[error]')}`",
          "123:         )",
          "124:     }",
          "126:     onAgentAction(run: Run) {",
          "127:         const agentRun = run as AgentRun",
          "128:         const crumbs = this.getBreadcrumbs(run)",
          "129:         this.logger.verbose(",
          "130:             `[agent/action] [${crumbs}] Agent selected action: ${tryJsonStringify(",
          "131:                 agentRun.actions[agentRun.actions.length - 1],",
          "132:                 '[action]'",
          "133:             )}`",
          "134:         )",
          "135:     }",
          "136: }",
          "141: export class CustomChainHandler extends BaseCallbackHandler {",
          "142:     name = 'custom_chain_handler'",
          "143:     isLLMStarted = false",
          "144:     socketIO: Server",
          "145:     socketIOClientId = ''",
          "146:     skipK = 0 // Skip streaming for first K numbers of handleLLMStart",
          "147:     returnSourceDocuments = false",
          "149:     constructor(socketIO: Server, socketIOClientId: string, skipK?: number, returnSourceDocuments?: boolean) {",
          "150:         super()",
          "151:         this.socketIO = socketIO",
          "152:         this.socketIOClientId = socketIOClientId",
          "153:         this.skipK = skipK ?? this.skipK",
          "154:         this.returnSourceDocuments = returnSourceDocuments ?? this.returnSourceDocuments",
          "155:     }",
          "157:     handleLLMStart() {",
          "158:         if (this.skipK > 0) this.skipK -= 1",
          "159:     }",
          "161:     handleLLMNewToken(token: string) {",
          "162:         if (this.skipK === 0) {",
          "163:             if (!this.isLLMStarted) {",
          "164:                 this.isLLMStarted = true",
          "165:                 this.socketIO.to(this.socketIOClientId).emit('start', token)",
          "166:             }",
          "167:             this.socketIO.to(this.socketIOClientId).emit('token', token)",
          "168:         }",
          "169:     }",
          "171:     handleLLMEnd() {",
          "172:         this.socketIO.to(this.socketIOClientId).emit('end')",
          "173:     }",
          "175:     handleChainEnd(outputs: ChainValues): void | Promise<void> {",
          "176:         if (this.returnSourceDocuments) {",
          "177:             this.socketIO.to(this.socketIOClientId).emit('sourceDocuments', outputs?.sourceDocuments)",
          "178:         }",
          "179:     }",
          "180: }",
          "",
          "---------------"
        ],
        "packages/components/src/utils.ts||packages/components/src/utils.ts": [
          "File: packages/components/src/utils.ts -> packages/components/src/utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import * as fs from 'fs'",
          "4: import * as path from 'path'",
          "5: import { JSDOM } from 'jsdom'",
          "10: export const numberOrExpressionRegex = '^(\\\\d+\\\\.?\\\\d*|{{.*}})$' //return true if string consists only numbers OR expression {{}}",
          "11: export const notEmptyRegex = '(.|\\\\s)*\\\\S(.|\\\\s)*' //return true if string is not empty or blank",
          "",
          "[Removed Lines]",
          "6: import { BaseCallbackHandler } from 'langchain/callbacks'",
          "7: import { Server } from 'socket.io'",
          "8: import { ChainValues } from 'langchain/dist/schema'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:     }",
          "351: }",
          "397: export const availableDependencies = [",
          "398:     '@dqbd/tiktoken',",
          "399:     '@getzep/zep-js',",
          "",
          "[Removed Lines]",
          "356: export class CustomChainHandler extends BaseCallbackHandler {",
          "357:     name = 'custom_chain_handler'",
          "358:     isLLMStarted = false",
          "359:     socketIO: Server",
          "360:     socketIOClientId = ''",
          "361:     skipK = 0 // Skip streaming for first K numbers of handleLLMStart",
          "362:     returnSourceDocuments = false",
          "364:     constructor(socketIO: Server, socketIOClientId: string, skipK?: number, returnSourceDocuments?: boolean) {",
          "365:         super()",
          "366:         this.socketIO = socketIO",
          "367:         this.socketIOClientId = socketIOClientId",
          "368:         this.skipK = skipK ?? this.skipK",
          "369:         this.returnSourceDocuments = returnSourceDocuments ?? this.returnSourceDocuments",
          "370:     }",
          "372:     handleLLMStart() {",
          "373:         if (this.skipK > 0) this.skipK -= 1",
          "374:     }",
          "376:     handleLLMNewToken(token: string) {",
          "377:         if (this.skipK === 0) {",
          "378:             if (!this.isLLMStarted) {",
          "379:                 this.isLLMStarted = true",
          "380:                 this.socketIO.to(this.socketIOClientId).emit('start', token)",
          "381:             }",
          "382:             this.socketIO.to(this.socketIOClientId).emit('token', token)",
          "383:         }",
          "384:     }",
          "386:     handleLLMEnd() {",
          "387:         this.socketIO.to(this.socketIOClientId).emit('end')",
          "388:     }",
          "390:     handleChainEnd(outputs: ChainValues): void | Promise<void> {",
          "391:         if (this.returnSourceDocuments) {",
          "392:             this.socketIO.to(this.socketIOClientId).emit('sourceDocuments', outputs?.sourceDocuments)",
          "393:         }",
          "394:     }",
          "395: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/server/.env.example||packages/server/.env.example": [
          "File: packages/server/.env.example -> packages/server/.env.example",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: # DATABASE_PATH=/your_database_path/.flowise",
          "6: # APIKEY_PATH=/your_api_key_path/.flowise",
          "7: # LOG_PATH=/your_log_path/logs",
          "",
          "[Removed Lines]",
          "8: # EXECUTION_MODE=child or main",
          "",
          "[Added Lines]",
          "8: # LOG_LEVEL=debug (error | warn | info | verbose | debug)",
          "9: # EXECUTION_MODE=main (child | main)",
          "",
          "---------------"
        ],
        "packages/server/src/ChatflowPool.ts||packages/server/src/ChatflowPool.ts": [
          "File: packages/server/src/ChatflowPool.ts -> packages/server/src/ChatflowPool.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { ICommonObject } from 'flowise-components'",
          "2: import { IActiveChatflows, INodeData, IReactFlowNode } from './Interface'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import logger from './utils/logger'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:             inSync: true",
          "23:         }",
          "24:         if (overrideConfig) this.activeChatflows[chatflowid].overrideConfig = overrideConfig",
          "25:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:         logger.info(`[server]: Chatflow ${chatflowid} added into ChatflowPool`)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:     updateInSync(chatflowid: string, inSync: boolean) {",
          "33:         if (Object.prototype.hasOwnProperty.call(this.activeChatflows, chatflowid)) {",
          "34:             this.activeChatflows[chatflowid].inSync = inSync",
          "35:         }",
          "36:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:             logger.info(`[server]: Chatflow ${chatflowid} updated inSync=${inSync} in ChatflowPool`)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "42:     async remove(chatflowid: string) {",
          "43:         if (Object.prototype.hasOwnProperty.call(this.activeChatflows, chatflowid)) {",
          "44:             delete this.activeChatflows[chatflowid]",
          "45:         }",
          "46:     }",
          "47: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:             logger.info(`[server]: Chatflow ${chatflowid} removed from ChatflowPool`)",
          "",
          "---------------"
        ],
        "packages/server/src/ChildProcess.ts||packages/server/src/ChildProcess.ts": [
          "File: packages/server/src/ChildProcess.ts -> packages/server/src/ChildProcess.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import { ChatFlow } from './entity/ChatFlow'",
          "6: import { ChatMessage } from './entity/ChatMessage'",
          "7: import { Tool } from './entity/Tool'",
          "9: export class ChildProcess {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import logger from './utils/logger'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:         await sendToParentProcess('start', '_')",
          "76:                 )",
          "102:             }",
          "123:     }",
          "124: }",
          "",
          "[Removed Lines]",
          "30:         const childAppDataSource = await initDB()",
          "33:         const { endingNodeData, chatflow, chatId, incomingInput, componentNodes } = messageValue",
          "35:         let nodeToExecuteData: INodeData",
          "36:         let addToChatFlowPool: any = {}",
          "44:         if (endingNodeData) {",
          "45:             nodeToExecuteData = endingNodeData",
          "46:         } else {",
          "48:             const flowData = chatflow.flowData",
          "49:             const parsedFlowData: IReactFlowObject = JSON.parse(flowData)",
          "50:             const nodes = parsedFlowData.nodes",
          "51:             const edges = parsedFlowData.edges",
          "54:             const { graph, nodeDependencies } = constructGraphs(nodes, edges)",
          "55:             const directedGraph = graph",
          "56:             const endingNodeId = getEndingNode(nodeDependencies, directedGraph)",
          "57:             if (!endingNodeId) {",
          "58:                 await sendToParentProcess('error', `Ending node must be either a Chain or Agent`)",
          "59:                 return",
          "60:             }",
          "62:             const endingNodeData = nodes.find((nd) => nd.id === endingNodeId)?.data",
          "63:             if (!endingNodeData) {",
          "64:                 await sendToParentProcess('error', `Ending node must be either a Chain or Agent`)",
          "65:                 return",
          "66:             }",
          "68:             if (",
          "69:                 endingNodeData.outputs &&",
          "70:                 Object.keys(endingNodeData.outputs).length &&",
          "71:                 !Object.values(endingNodeData.outputs).includes(endingNodeData.name)",
          "72:             ) {",
          "73:                 await sendToParentProcess(",
          "74:                     'error',",
          "75:                     `Output of ${endingNodeData.label} (${endingNodeData.id}) must be ${endingNodeData.label}, can't be an Output Prediction`",
          "77:                 return",
          "78:             }",
          "81:             const constructedObj = constructGraphs(nodes, edges, true)",
          "82:             const nonDirectedGraph = constructedObj.graph",
          "83:             const { startingNodeIds, depthQueue } = getStartingNodes(nonDirectedGraph, endingNodeId)",
          "86:             const reactFlowNodes = await buildLangchain(",
          "87:                 startingNodeIds,",
          "88:                 nodes,",
          "89:                 graph,",
          "90:                 depthQueue,",
          "91:                 componentNodes,",
          "92:                 incomingInput.question,",
          "93:                 chatId,",
          "94:                 childAppDataSource,",
          "95:                 incomingInput?.overrideConfig",
          "96:             )",
          "98:             const nodeToExecute = reactFlowNodes.find((node: IReactFlowNode) => node.id === endingNodeId)",
          "99:             if (!nodeToExecute) {",
          "100:                 await sendToParentProcess('error', `Node ${endingNodeId} not found`)",
          "101:                 return",
          "104:             const reactFlowNodeData: INodeData = resolveVariables(nodeToExecute.data, reactFlowNodes, incomingInput.question)",
          "105:             nodeToExecuteData = reactFlowNodeData",
          "107:             const startingNodes = nodes.filter((nd) => startingNodeIds.includes(nd.id))",
          "108:             addToChatFlowPool = {",
          "109:                 chatflowid: chatflow.id,",
          "110:                 nodeToExecuteData,",
          "111:                 startingNodes,",
          "112:                 overrideConfig: incomingInput?.overrideConfig",
          "113:             }",
          "114:         }",
          "116:         const nodeInstanceFilePath = componentNodes[nodeToExecuteData.name].filePath as string",
          "117:         const nodeModule = await import(nodeInstanceFilePath)",
          "118:         const nodeInstance = new nodeModule.nodeClass()",
          "120:         const result = await nodeInstance.run(nodeToExecuteData, incomingInput.question, { chatHistory: incomingInput.history })",
          "122:         await sendToParentProcess('finish', { result, addToChatFlowPool })",
          "",
          "[Added Lines]",
          "31:         try {",
          "32:             const childAppDataSource = await initDB()",
          "35:             const { endingNodeData, chatflow, chatId, incomingInput, componentNodes } = messageValue",
          "37:             let nodeToExecuteData: INodeData",
          "38:             let addToChatFlowPool: any = {}",
          "46:             if (endingNodeData) {",
          "47:                 nodeToExecuteData = endingNodeData",
          "48:             } else {",
          "50:                 const flowData = chatflow.flowData",
          "51:                 const parsedFlowData: IReactFlowObject = JSON.parse(flowData)",
          "52:                 const nodes = parsedFlowData.nodes",
          "53:                 const edges = parsedFlowData.edges",
          "56:                 const { graph, nodeDependencies } = constructGraphs(nodes, edges)",
          "57:                 const directedGraph = graph",
          "58:                 const endingNodeId = getEndingNode(nodeDependencies, directedGraph)",
          "59:                 if (!endingNodeId) {",
          "60:                     await sendToParentProcess('error', `Ending node ${endingNodeId} not found`)",
          "61:                     return",
          "62:                 }",
          "64:                 const endingNodeData = nodes.find((nd) => nd.id === endingNodeId)?.data",
          "65:                 if (!endingNodeData) {",
          "66:                     await sendToParentProcess('error', `Ending node ${endingNodeId} data not found`)",
          "67:                     return",
          "68:                 }",
          "70:                 if (endingNodeData && endingNodeData.category !== 'Chains' && endingNodeData.category !== 'Agents') {",
          "71:                     await sendToParentProcess('error', `Ending node must be either a Chain or Agent`)",
          "72:                     return",
          "73:                 }",
          "75:                 if (",
          "76:                     endingNodeData.outputs &&",
          "77:                     Object.keys(endingNodeData.outputs).length &&",
          "78:                     !Object.values(endingNodeData.outputs).includes(endingNodeData.name)",
          "79:                 ) {",
          "80:                     await sendToParentProcess(",
          "81:                         'error',",
          "82:                         `Output of ${endingNodeData.label} (${endingNodeData.id}) must be ${endingNodeData.label}, can't be an Output Prediction`",
          "83:                     )",
          "84:                     return",
          "85:                 }",
          "88:                 const constructedObj = constructGraphs(nodes, edges, true)",
          "89:                 const nonDirectedGraph = constructedObj.graph",
          "90:                 const { startingNodeIds, depthQueue } = getStartingNodes(nonDirectedGraph, endingNodeId)",
          "92:                 logger.debug(`[server] [mode:child]: Start building chatflow ${chatflow.id}`)",
          "94:                 const reactFlowNodes = await buildLangchain(",
          "95:                     startingNodeIds,",
          "96:                     nodes,",
          "97:                     graph,",
          "98:                     depthQueue,",
          "99:                     componentNodes,",
          "100:                     incomingInput.question,",
          "101:                     chatId,",
          "102:                     childAppDataSource,",
          "103:                     incomingInput?.overrideConfig",
          "106:                 const nodeToExecute = reactFlowNodes.find((node: IReactFlowNode) => node.id === endingNodeId)",
          "107:                 if (!nodeToExecute) {",
          "108:                     await sendToParentProcess('error', `Node ${endingNodeId} not found`)",
          "109:                     return",
          "110:                 }",
          "112:                 const reactFlowNodeData: INodeData = resolveVariables(nodeToExecute.data, reactFlowNodes, incomingInput.question)",
          "113:                 nodeToExecuteData = reactFlowNodeData",
          "115:                 const startingNodes = nodes.filter((nd) => startingNodeIds.includes(nd.id))",
          "116:                 addToChatFlowPool = {",
          "117:                     chatflowid: chatflow.id,",
          "118:                     nodeToExecuteData,",
          "119:                     startingNodes,",
          "120:                     overrideConfig: incomingInput?.overrideConfig",
          "121:                 }",
          "124:             const nodeInstanceFilePath = componentNodes[nodeToExecuteData.name].filePath as string",
          "125:             const nodeModule = await import(nodeInstanceFilePath)",
          "126:             const nodeInstance = new nodeModule.nodeClass()",
          "128:             logger.debug(`[server] [mode:child]: Running ${nodeToExecuteData.label} (${nodeToExecuteData.id})`)",
          "129:             const result = await nodeInstance.run(nodeToExecuteData, incomingInput.question, { chatHistory: incomingInput.history })",
          "130:             logger.debug(`[server] [mode:child]: Finished running ${nodeToExecuteData.label} (${nodeToExecuteData.id})`)",
          "132:             await sendToParentProcess('finish', { result, addToChatFlowPool })",
          "133:         } catch (e: any) {",
          "134:             await sendToParentProcess('error', e.message)",
          "135:             logger.error('[server] [mode:child]: Error:', e)",
          "136:         }",
          "",
          "---------------"
        ],
        "packages/server/src/commands/start.ts||packages/server/src/commands/start.ts": [
          "File: packages/server/src/commands/start.ts -> packages/server/src/commands/start.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:         DATABASE_PATH: Flags.string(),",
          "24:         APIKEY_PATH: Flags.string(),",
          "25:         LOG_PATH: Flags.string(),",
          "26:         EXECUTION_MODE: Flags.string()",
          "27:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:         LOG_LEVEL: Flags.string(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:         if (flags.DATABASE_PATH) process.env.DATABASE_PATH = flags.DATABASE_PATH",
          "62:         if (flags.APIKEY_PATH) process.env.APIKEY_PATH = flags.APIKEY_PATH",
          "63:         if (flags.LOG_PATH) process.env.LOG_PATH = flags.LOG_PATH",
          "64:         if (flags.EXECUTION_MODE) process.env.EXECUTION_MODE = flags.EXECUTION_MODE",
          "65:         if (flags.DEBUG) process.env.DEBUG = flags.DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:         if (flags.LOG_LEVEL) process.env.LOG_LEVEL = flags.LOG_LEVEL",
          "",
          "---------------"
        ],
        "packages/server/src/index.ts||packages/server/src/index.ts": [
          "File: packages/server/src/index.ts -> packages/server/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:             const nodes = parsedFlowData.nodes",
          "284:             const edges = parsedFlowData.edges",
          "285:             const { graph, nodeDependencies } = constructGraphs(nodes, edges)",
          "286:             const endingNodeId = getEndingNode(nodeDependencies, graph)",
          "288:             const endingNodeData = nodes.find((nd) => nd.id === endingNodeId)?.data",
          "291:             const obj = {",
          "292:                 isStreaming: isFlowValidForStream(nodes, endingNodeData)",
          "",
          "[Removed Lines]",
          "287:             if (!endingNodeId) return res.status(500).send(`Ending node must be either a Chain or Agent`)",
          "289:             if (!endingNodeData) return res.status(500).send(`Ending node must be either a Chain or Agent`)",
          "",
          "[Added Lines]",
          "288:             if (!endingNodeId) return res.status(500).send(`Ending node ${endingNodeId} not found`)",
          "291:             if (!endingNodeData) return res.status(500).send(`Ending node ${endingNodeId} data not found`)",
          "293:             if (endingNodeData && endingNodeData.category !== 'Chains' && endingNodeData.category !== 'Agents') {",
          "294:                 return res.status(500).send(`Ending node must be either a Chain or Agent`)",
          "295:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "638:                 })",
          "639:             })",
          "640:         } catch (err) {",
          "642:         }",
          "643:     }",
          "",
          "[Removed Lines]",
          "641:             logger.error(err)",
          "",
          "[Added Lines]",
          "647:             logger.error('[server] [mode:child]: Error:', err)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "714:             if (process.env.EXECUTION_MODE === 'child') {",
          "715:                 if (isFlowReusable()) {",
          "716:                     nodeToExecuteData = this.chatflowPool.activeChatflows[chatflowid].endingNodeData",
          "717:                     try {",
          "718:                         const result = await this.startChildProcess(chatflow, chatId, incomingInput, nodeToExecuteData)",
          "720:                         return res.json(result)",
          "721:                     } catch (error) {",
          "722:                         return res.status(500).send(error)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723:                     logger.debug(",
          "724:                         `[server] [mode:child]: Reuse existing chatflow ${chatflowid} with ending node ${nodeToExecuteData.label} (${nodeToExecuteData.id})`",
          "725:                     )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "739:                 if (isFlowReusable()) {",
          "740:                     nodeToExecuteData = this.chatflowPool.activeChatflows[chatflowid].endingNodeData",
          "741:                     isStreamValid = isFlowValidForStream(nodes, nodeToExecuteData)",
          "742:                 } else {",
          "744:                     const { graph, nodeDependencies } = constructGraphs(nodes, edges)",
          "745:                     const directedGraph = graph",
          "746:                     const endingNodeId = getEndingNode(nodeDependencies, directedGraph)",
          "749:                     const endingNodeData = nodes.find((nd) => nd.id === endingNodeId)?.data",
          "752:                     if (",
          "753:                         endingNodeData.outputs &&",
          "",
          "[Removed Lines]",
          "747:                     if (!endingNodeId) return res.status(500).send(`Ending node must be either a Chain or Agent`)",
          "750:                     if (!endingNodeData) return res.status(500).send(`Ending node must be either a Chain or Agent`)",
          "",
          "[Added Lines]",
          "750:                     logger.debug(",
          "751:                         `[server]: Reuse existing chatflow ${chatflowid} with ending node ${nodeToExecuteData.label} (${nodeToExecuteData.id})`",
          "752:                     )",
          "758:                     if (!endingNodeId) return res.status(500).send(`Ending node ${endingNodeId} not found`)",
          "761:                     if (!endingNodeData) return res.status(500).send(`Ending node ${endingNodeId} data not found`)",
          "763:                     if (endingNodeData && endingNodeData.category !== 'Chains' && endingNodeData.category !== 'Agents') {",
          "764:                         return res.status(500).send(`Ending node must be either a Chain or Agent`)",
          "765:                     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "768:                     const nonDirectedGraph = constructedObj.graph",
          "769:                     const { startingNodeIds, depthQueue } = getStartingNodes(nonDirectedGraph, endingNodeId)",
          "772:                     const reactFlowNodes = await buildLangchain(",
          "773:                         startingNodeIds,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786:                     logger.debug(`[server]: Start building chatflow ${chatflowid}`)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "796:                 const nodeInstance = new nodeModule.nodeClass()",
          "798:                 isStreamValid = isStreamValid && !isVectorStoreFaiss(nodeToExecuteData)",
          "799:                 const result = isStreamValid",
          "800:                     ? await nodeInstance.run(nodeToExecuteData, incomingInput.question, {",
          "801:                           chatHistory: incomingInput.history,",
          "802:                           socketIO,",
          "804:                       })",
          "807:                 return res.json(result)",
          "808:             }",
          "809:         } catch (e: any) {",
          "810:             return res.status(500).send(e.message)",
          "811:         }",
          "812:     }",
          "",
          "[Removed Lines]",
          "803:                           socketIOClientId: incomingInput.socketIOClientId",
          "805:                     : await nodeInstance.run(nodeToExecuteData, incomingInput.question, { chatHistory: incomingInput.history })",
          "",
          "[Added Lines]",
          "815:                 logger.debug(`[server]: Running ${nodeToExecuteData.label} (${nodeToExecuteData.id})`)",
          "820:                           socketIOClientId: incomingInput.socketIOClientId,",
          "821:                           logger",
          "823:                     : await nodeInstance.run(nodeToExecuteData, incomingInput.question, { chatHistory: incomingInput.history, logger })",
          "825:                 logger.debug(`[server]: Finished running ${nodeToExecuteData.label} (${nodeToExecuteData.id})`)",
          "829:             logger.error('[server]: Error:', e)",
          "",
          "---------------"
        ],
        "packages/server/src/utils/config.ts||packages/server/src/utils/config.ts": [
          "File: packages/server/src/utils/config.ts -> packages/server/src/utils/config.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const loggingConfig = {",
          "10:     dir: process.env.LOG_PATH ?? path.join(__dirname, '..', '..', '..', '..', 'logs'),",
          "11:     server: {",
          "13:         filename: 'server.log',",
          "14:         errorFilename: 'server-error.log'",
          "15:     },",
          "16:     express: {",
          "18:         format: 'jsonl', // can't be changed currently",
          "19:         filename: 'server-requests.log.jsonl' // should end with .jsonl",
          "20:     }",
          "",
          "[Removed Lines]",
          "12:         level: 'info',",
          "17:         level: 'info',",
          "",
          "[Added Lines]",
          "12:         level: process.env.LOG_LEVEL ?? 'info',",
          "17:         level: process.env.LOG_LEVEL ?? 'info',",
          "",
          "---------------"
        ],
        "packages/server/src/utils/index.ts||packages/server/src/utils/index.ts": [
          "File: packages/server/src/utils/index.ts -> packages/server/src/utils/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:             if (overrideConfig) flowNodeData = replaceInputsWithConfig(flowNodeData, overrideConfig)",
          "223:             const reactFlowNodeData: INodeData = resolveVariables(flowNodeData, flowNodes, question)",
          "225:             flowNodes[nodeIndex].data.instance = await newNodeInstance.init(reactFlowNodeData, question, {",
          "226:                 chatId,",
          "227:                 appDataSource,",
          "229:             })",
          "230:         } catch (e: any) {",
          "231:             logger.error(e)",
          "232:             throw new Error(e)",
          "",
          "[Removed Lines]",
          "228:                 databaseEntities",
          "",
          "[Added Lines]",
          "228:             logger.debug(`[server]: Initializing ${reactFlowNode.data.label} (${reactFlowNode.data.id})`)",
          "232:                 databaseEntities,",
          "233:                 logger",
          "235:             logger.debug(`[server]: Finished initializing ${reactFlowNode.data.label} (${reactFlowNode.data.id})`)",
          "",
          "---------------"
        ],
        "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts": [
          "File: packages/server/src/utils/logger.ts -> packages/server/src/utils/logger.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { createLogger, transports, format } from 'winston'",
          "5: import { NextFunction, Request, Response } from 'express'",
          "10: const logDir = config.logging.dir",
          "",
          "[Removed Lines]",
          "7: const { combine, timestamp, printf } = format",
          "",
          "[Added Lines]",
          "7: const { combine, timestamp, printf, errors } = format",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     format: combine(",
          "19:         timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),",
          "20:         format.json(),",
          "24:     ),",
          "25:     defaultMeta: {",
          "26:         package: 'server'",
          "",
          "[Removed Lines]",
          "21:         printf(({ level, message, timestamp }) => {",
          "22:             return `${timestamp} [${level.toUpperCase()}]: ${message}`",
          "23:         })",
          "",
          "[Added Lines]",
          "21:         printf(({ level, message, timestamp, stack }) => {",
          "22:             const text = `${timestamp} [${level.toUpperCase()}]: ${message}`",
          "23:             return stack ? text + '\\n' + stack : text",
          "24:         }),",
          "25:         errors({ stack: true })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57: export function expressRequestLogger(req: Request, res: Response, next: NextFunction): void {",
          "58:     const fileLogger = createLogger({",
          "60:         defaultMeta: {",
          "61:             package: 'server',",
          "62:             request: {",
          "",
          "[Removed Lines]",
          "59:         format: combine(timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), format.json()),",
          "",
          "[Added Lines]",
          "61:         format: combine(timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), format.json(), errors({ stack: true })),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:         transports: [",
          "72:             new transports.File({",
          "73:                 filename: path.join(logDir, config.logging.express.filename ?? 'server-requests.log.jsonl'),",
          "75:             })",
          "76:         ]",
          "77:     })",
          "",
          "[Removed Lines]",
          "74:                 level: 'debug'",
          "",
          "[Added Lines]",
          "76:                 level: config.logging.express.level ?? 'debug'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a9e269b52c8578301a1f098f1d175e0148551cc4",
      "candidate_info": {
        "commit_hash": "a9e269b52c8578301a1f098f1d175e0148551cc4",
        "repo": "FlowiseAI/Flowise",
        "commit_url": "https://github.com/FlowiseAI/Flowise/commit/a9e269b52c8578301a1f098f1d175e0148551cc4",
        "files": [
          ".gitignore",
          "docker/.env.example",
          "packages/server/.env.example",
          "packages/server/package.json",
          "packages/server/src/commands/start.ts",
          "packages/server/src/index.ts",
          "packages/server/src/utils/config.ts",
          "packages/server/src/utils/index.ts",
          "packages/server/src/utils/logger.ts"
        ],
        "message": "Added winston logging - use logger.xxx instead of console.xxx - added express middleware logging (using jsonl) - added LOG_PATH as environment variable - more configs postponed for later iteration",
        "before_after_code_files": [
          "docker/.env.example||docker/.env.example",
          "packages/server/.env.example||packages/server/.env.example",
          "packages/server/src/commands/start.ts||packages/server/src/commands/start.ts",
          "packages/server/src/index.ts||packages/server/src/index.ts",
          "packages/server/src/utils/config.ts||packages/server/src/utils/config.ts",
          "packages/server/src/utils/index.ts||packages/server/src/utils/index.ts",
          "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/server/src/index.ts||packages/server/src/index.ts",
            "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
          ],
          "candidate": [
            "packages/server/src/index.ts||packages/server/src/index.ts",
            "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
          ]
        }
      },
      "candidate_diff": {
        "docker/.env.example||docker/.env.example": [
          "File: docker/.env.example -> docker/.env.example",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: # DEBUG=true",
          "5: # DATABASE_PATH=/your_database_path/.flowise",
          "6: # APIKEY_PATH=/your_api_key_path/.flowise",
          "7: # EXECUTION_MODE=child or main",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: # LOG_PATH=/your_api_key_path/logs",
          "",
          "---------------"
        ],
        "packages/server/.env.example||packages/server/.env.example": [
          "File: packages/server/.env.example -> packages/server/.env.example",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: # DEBUG=true",
          "5: # DATABASE_PATH=/your_database_path/.flowise",
          "6: # APIKEY_PATH=/your_api_key_path/.flowise",
          "7: # EXECUTION_MODE=child or main",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: # LOG_PATH=./logs",
          "",
          "---------------"
        ],
        "packages/server/src/commands/start.ts||packages/server/src/commands/start.ts": [
          "File: packages/server/src/commands/start.ts -> packages/server/src/commands/start.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import * as Server from '../index'",
          "4: import * as DataSource from '../DataSource'",
          "5: import dotenv from 'dotenv'",
          "7: dotenv.config({ path: path.join(__dirname, '..', '..', '.env'), override: true })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import logger from '../utils/logger'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     }",
          "27:     async stopProcess() {",
          "29:         try {",
          "31:             setTimeout(() => {",
          "33:                 process.exit(processExitCode)",
          "34:             }, 30000)",
          "",
          "[Removed Lines]",
          "28:         console.info('Shutting down Flowise...')",
          "32:                 console.info('Flowise was forced to shut down after 30 secs')",
          "",
          "[Added Lines]",
          "29:         logger.info('Shutting down Flowise...')",
          "33:                 logger.info('Flowise was forced to shut down after 30 secs')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:             const serverApp = Server.getInstance()",
          "38:             if (serverApp) await serverApp.stopApp()",
          "39:         } catch (error) {",
          "41:         }",
          "42:         process.exit(processExitCode)",
          "43:     }",
          "",
          "[Removed Lines]",
          "40:             console.error('There was an error shutting down Flowise...', error)",
          "",
          "[Added Lines]",
          "41:             logger.error('There was an error shutting down Flowise...', error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "51:         process.on('uncaughtException', (err) => {",
          "53:         })",
          "55:         const { flags } = await this.parse(Start)",
          "",
          "[Removed Lines]",
          "52:             console.error('uncaughtException: ', err)",
          "",
          "[Added Lines]",
          "53:             logger.error('uncaughtException: ', err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "64:         await (async () => {",
          "65:             try {",
          "67:                 await DataSource.init()",
          "68:                 await Server.start()",
          "69:             } catch (error) {",
          "71:                 processExitCode = EXIT_CODE.FAILED",
          "73:                 process.emit('SIGINT')",
          "",
          "[Removed Lines]",
          "66:                 this.log('Starting Flowise...')",
          "70:                 console.error('There was an error starting Flowise...', error)",
          "",
          "[Added Lines]",
          "67:                 logger.info('Starting Flowise...')",
          "71:                 logger.error('There was an error starting Flowise...', error)",
          "",
          "---------------"
        ],
        "packages/server/src/index.ts||packages/server/src/index.ts": [
          "File: packages/server/src/index.ts -> packages/server/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import * as fs from 'fs'",
          "7: import basicAuth from 'express-basic-auth'",
          "8: import { Server } from 'socket.io'",
          "10: import {",
          "11:     IChatFlow,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import logger from './utils/logger'",
          "10: import { expressRequestLogger } from './utils/logger'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     constructor() {",
          "59:         this.app = express()",
          "60:     }",
          "62:     async initDatabase() {",
          "64:         this.AppDataSource.initialize()",
          "65:             .then(async () => {",
          "69:                 this.nodesPool = new NodesPool()",
          "",
          "[Removed Lines]",
          "66:                 console.info('\ud83d\udce6[server]: Data Source has been initialized!')",
          "",
          "[Added Lines]",
          "64:         this.app.use(expressRequestLogger)",
          "71:                 logger.info('\ud83d\udce6 [server]: Data Source has been initialized!')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:                 await getAPIKeys()",
          "76:             })",
          "77:             .catch((err) => {",
          "79:             })",
          "80:     }",
          "",
          "[Removed Lines]",
          "78:                 console.error('\u274c[server]: Error during Data Source initialization:', err)",
          "",
          "[Added Lines]",
          "83:                 logger.error('\u274c [server]: Error during Data Source initialization:', err)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "614:                 })",
          "615:             })",
          "616:         } catch (err) {",
          "618:         }",
          "619:     }",
          "",
          "[Removed Lines]",
          "617:             console.error(err)",
          "",
          "[Added Lines]",
          "622:             logger.error(err)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "792:             const removePromises: any[] = []",
          "793:             await Promise.all(removePromises)",
          "794:         } catch (e) {",
          "796:         }",
          "797:     }",
          "798: }",
          "",
          "[Removed Lines]",
          "795:             console.error(`\u274c[server]: Flowise Server shut down error: ${e}`)",
          "",
          "[Added Lines]",
          "800:             logger.error(`\u274c[server]: Flowise Server shut down error: ${e}`)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "832:     await serverApp.config(io)",
          "834:     server.listen(port, () => {",
          "836:     })",
          "837: }",
          "",
          "[Removed Lines]",
          "835:         console.info(`\u26a1\ufe0f[server]: Flowise Server is listening at ${port}`)",
          "",
          "[Added Lines]",
          "840:         logger.info(`\u26a1\ufe0f [server]: Flowise Server is listening at ${port}`)",
          "",
          "---------------"
        ],
        "packages/server/src/utils/config.ts||packages/server/src/utils/config.ts": [
          "File: packages/server/src/utils/config.ts -> packages/server/src/utils/config.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import path from 'path'",
          "4: import dotenv from 'dotenv'",
          "6: dotenv.config({ path: path.join(__dirname, '..', '..', '.env'), override: true })",
          "9: const loggingConfig = {",
          "10:     dir: process.env.LOG_PATH ?? './logs',",
          "11:     server: {",
          "12:         level: 'info',",
          "13:         filename: 'server.log',",
          "14:         errorFilename: 'server-error.log'",
          "15:     },",
          "16:     express: {",
          "17:         level: 'info',",
          "18:         format: 'jsonl', // can't be changed currently",
          "19:         filename: 'server-requests.log.jsonl' // should end with .jsonl",
          "20:     }",
          "21: }",
          "23: export default {",
          "24:     logging: loggingConfig",
          "25: }",
          "",
          "---------------"
        ],
        "packages/server/src/utils/index.ts||packages/server/src/utils/index.ts": [
          "File: packages/server/src/utils/index.ts -> packages/server/src/utils/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import path from 'path'",
          "2: import fs from 'fs'",
          "3: import moment from 'moment'",
          "4: import {",
          "5:     IComponentNodes,",
          "6:     IDepthQueue,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import logger from './logger'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:                 databaseEntities",
          "228:             })",
          "229:         } catch (e: any) {",
          "231:             throw new Error(e)",
          "232:         }",
          "",
          "[Removed Lines]",
          "230:             console.error(e)",
          "",
          "[Added Lines]",
          "231:             logger.error(e)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "595:     try {",
          "596:         await fs.promises.writeFile(getAPIKeyPath(), JSON.stringify(content), 'utf8')",
          "597:     } catch (error) {",
          "599:     }",
          "600: }",
          "",
          "[Removed Lines]",
          "598:         console.error(error)",
          "",
          "[Added Lines]",
          "599:         logger.error(error)",
          "",
          "---------------"
        ],
        "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts": [
          "File: packages/server/src/utils/logger.ts -> packages/server/src/utils/logger.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import * as path from 'path'",
          "2: import * as fs from 'fs'",
          "3: import config from './config' // should be replaced by node-config or similar",
          "4: import { createLogger, transports, format } from 'winston'",
          "5: import { NextFunction, Request, Response } from 'express'",
          "7: const { combine, timestamp, printf } = format",
          "10: const logDir = path.join(__dirname, '../../../..', config.logging.dir ?? './logs')",
          "13: if (!fs.existsSync(logDir)) {",
          "14:     fs.mkdirSync(logDir)",
          "15: }",
          "17: const logger = createLogger({",
          "18:     format: combine(",
          "19:         timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),",
          "20:         format.json(),",
          "21:         printf(({ level, message, timestamp }) => {",
          "22:             return `${timestamp} [${level.toUpperCase()}]: ${message}`",
          "23:         })",
          "24:     ),",
          "25:     defaultMeta: {",
          "26:         package: 'server'",
          "27:     },",
          "28:     transports: [",
          "29:         new transports.Console(),",
          "30:         new transports.File({",
          "31:             filename: path.join(logDir, config.logging.server.filename ?? 'server.log'),",
          "32:             level: config.logging.server.level ?? 'info'",
          "33:         }),",
          "34:         new transports.File({",
          "35:             filename: path.join(logDir, config.logging.server.errorFilename ?? 'server-error.log'),",
          "36:             level: 'error' // Log only errors to this file",
          "37:         })",
          "38:     ],",
          "39:     exceptionHandlers: [",
          "40:         new transports.File({",
          "41:             filename: path.join(logDir, config.logging.server.errorFilename ?? 'server-error.log')",
          "42:         })",
          "43:     ],",
          "44:     rejectionHandlers: [",
          "45:         new transports.File({",
          "46:             filename: path.join(logDir, config.logging.server.errorFilename ?? 'server-error.log')",
          "47:         })",
          "48:     ]",
          "49: })",
          "57: export function expressRequestLogger(req: Request, res: Response, next: NextFunction): void {",
          "58:     const fileLogger = createLogger({",
          "59:         format: combine(timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), format.json()),",
          "60:         defaultMeta: {",
          "61:             package: 'server',",
          "62:             request: {",
          "63:                 method: req.method,",
          "64:                 url: req.url,",
          "65:                 body: req.body,",
          "66:                 query: req.query,",
          "67:                 params: req.params,",
          "68:                 headers: req.headers",
          "69:             }",
          "70:         },",
          "71:         transports: [",
          "72:             new transports.File({",
          "73:                 filename: path.join(logDir, config.logging.express.filename ?? 'server-requests.log.jsonl'),",
          "74:                 level: 'debug'",
          "75:             })",
          "76:         ]",
          "77:     })",
          "79:     const getRequestEmoji = (method: string) => {",
          "80:         const requetsEmojis: Record<string, string> = {",
          "81:             GET: '\u2b07\ufe0f',",
          "82:             POST: '\u2b06\ufe0f',",
          "83:             PUT: '\ud83d\udd8a',",
          "84:             DELETE: '\u274c'",
          "85:         }",
          "87:         return requetsEmojis[method] || '?'",
          "88:     }",
          "90:     if (req.method !== 'GET') {",
          "91:         fileLogger.info(`${getRequestEmoji(req.method)} ${req.method} ${req.url}`)",
          "92:         logger.info(`${getRequestEmoji(req.method)} ${req.method} ${req.url}`)",
          "93:     } else {",
          "94:         fileLogger.http(`${getRequestEmoji(req.method)} ${req.method} ${req.url}`)",
          "95:     }",
          "97:     next()",
          "98: }",
          "100: export default logger",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78674897270d58a7086c6c7ccefcc44a5fe9fbf6",
      "candidate_info": {
        "commit_hash": "78674897270d58a7086c6c7ccefcc44a5fe9fbf6",
        "repo": "FlowiseAI/Flowise",
        "commit_url": "https://github.com/FlowiseAI/Flowise/commit/78674897270d58a7086c6c7ccefcc44a5fe9fbf6",
        "files": [
          "Dockerfile",
          "docker/Dockerfile",
          "docker/docker-compose.yml",
          "packages/server/src/utils/logger.ts"
        ],
        "message": "Add curl in docker image for native healthchecks (#4170)\n\n* Add curl in docker image for native healthchecks\n\nFixes this issue: https://github.com/FlowiseAI/Flowise/issues/4126\n\n* fix: add container-native healthcheck\n\n- Added curl utility in dockerfile\n- Added healthcheck configuration in docker compose\n\n* fix: exclude ping endpoint from logging",
        "before_after_code_files": [
          "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
          ],
          "candidate": [
            "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/server/src/utils/logger.ts||packages/server/src/utils/logger.ts": [
          "File: packages/server/src/utils/logger.ts -> packages/server/src/utils/logger.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: })",
          "140: export function expressRequestLogger(req: Request, res: Response, next: NextFunction): void {",
          "142:     if (/\\/api\\/v1\\//i.test(req.url) && !unwantedLogURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
          "143:         const fileLogger = createLogger({",
          "144:             format: combine(timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), format.json(), errors({ stack: true })),",
          "",
          "[Removed Lines]",
          "141:     const unwantedLogURLs = ['/api/v1/node-icon/', '/api/v1/components-credentials-icon/']",
          "",
          "[Added Lines]",
          "141:     const unwantedLogURLs = ['/api/v1/node-icon/', '/api/v1/components-credentials-icon/', '/api/v1/ping']",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d240f6f4291f42e2138eaee1b9bcdd10c017e968",
      "candidate_info": {
        "commit_hash": "d240f6f4291f42e2138eaee1b9bcdd10c017e968",
        "repo": "FlowiseAI/Flowise",
        "commit_url": "https://github.com/FlowiseAI/Flowise/commit/d240f6f4291f42e2138eaee1b9bcdd10c017e968",
        "files": [
          "packages/server/src/index.ts"
        ],
        "message": "whitelist urls for non password protected instance",
        "before_after_code_files": [
          "packages/server/src/index.ts||packages/server/src/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ],
          "candidate": [
            "packages/server/src/index.ts||packages/server/src/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/server/src/index.ts||packages/server/src/index.ts": [
          "File: packages/server/src/index.ts -> packages/server/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:             next()",
          "118:         })",
          "120:         if (process.env.FLOWISE_USERNAME && process.env.FLOWISE_PASSWORD) {",
          "121:             const username = process.env.FLOWISE_USERNAME",
          "122:             const password = process.env.FLOWISE_PASSWORD",
          "123:             const basicAuthMiddleware = basicAuth({",
          "124:                 users: { [username]: password }",
          "125:             })",
          "144:             this.app.use(async (req, res, next) => {",
          "145:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "146:                     if (whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
          "",
          "[Removed Lines]",
          "126:             const whitelistURLs = [",
          "127:                 '/api/v1/verify/apikey/',",
          "128:                 '/api/v1/chatflows/apikey/',",
          "129:                 '/api/v1/public-chatflows',",
          "130:                 '/api/v1/public-chatbotConfig',",
          "131:                 '/api/v1/prediction/',",
          "132:                 '/api/v1/vector/upsert/',",
          "133:                 '/api/v1/node-icon/',",
          "134:                 '/api/v1/components-credentials-icon/',",
          "135:                 '/api/v1/chatflows-streaming',",
          "136:                 '/api/v1/chatflows-uploads',",
          "137:                 '/api/v1/openai-assistants-file/download',",
          "138:                 '/api/v1/feedback',",
          "139:                 '/api/v1/leads',",
          "140:                 '/api/v1/get-upload-file',",
          "141:                 '/api/v1/ip',",
          "142:                 '/api/v1/ping'",
          "143:             ]",
          "",
          "[Added Lines]",
          "120:         const whitelistURLs = [",
          "121:             '/api/v1/verify/apikey/',",
          "122:             '/api/v1/chatflows/apikey/',",
          "123:             '/api/v1/public-chatflows',",
          "124:             '/api/v1/public-chatbotConfig',",
          "125:             '/api/v1/prediction/',",
          "126:             '/api/v1/vector/upsert/',",
          "127:             '/api/v1/node-icon/',",
          "128:             '/api/v1/components-credentials-icon/',",
          "129:             '/api/v1/chatflows-streaming',",
          "130:             '/api/v1/chatflows-uploads',",
          "131:             '/api/v1/openai-assistants-file/download',",
          "132:             '/api/v1/feedback',",
          "133:             '/api/v1/leads',",
          "134:             '/api/v1/get-upload-file',",
          "135:             '/api/v1/ip',",
          "136:             '/api/v1/ping'",
          "137:         ]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:         } else {",
          "162:             this.app.use(async (req, res, next) => {",
          "163:                 if (/\\/api\\/v1\\//i.test(req.url)) {",
          "165:                         next()",
          "166:                     } else {",
          "167:                         const isKeyValidated = await validateAPIKey(req)",
          "",
          "[Removed Lines]",
          "164:                     if (req.headers['x-request-from'] === 'internal') {",
          "",
          "[Added Lines]",
          "165:                     if (whitelistURLs.some((url) => new RegExp(url, 'i').test(req.url))) {",
          "166:                         next()",
          "167:                     } else if (req.headers['x-request-from'] === 'internal') {",
          "",
          "---------------"
        ]
      }
    }
  ]
}