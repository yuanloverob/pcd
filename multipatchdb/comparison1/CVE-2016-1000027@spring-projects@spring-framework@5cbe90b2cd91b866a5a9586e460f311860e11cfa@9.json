{
  "cve_id": "CVE-2016-1000027",
  "cve_desc": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
  "repo": "spring-projects/spring-framework",
  "patch_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
  "patch_info": {
    "commit_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "repo": "spring-projects/spring-framework",
    "commit_url": "https://github.com/spring-projects/spring-framework/commit/5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ],
    "message": "Explicit note on Java deserialization",
    "before_after_code_files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "patch_diff": {
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java"
    ],
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51a557b885b2001b9d505bb1b5d69b8d15760b16",
      "candidate_info": {
        "commit_hash": "51a557b885b2001b9d505bb1b5d69b8d15760b16",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/51a557b885b2001b9d505bb1b5d69b8d15760b16",
        "files": [
          "spring-core/src/main/java/org/springframework/core/MethodParameter.java",
          "spring-core/src/main/java/org/springframework/core/convert/ConversionService.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerInterceptor.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java"
        ],
        "message": "Polishing (cherry picked from commit dd7ddc0)",
        "before_after_code_files": [
          "spring-core/src/main/java/org/springframework/core/MethodParameter.java||spring-core/src/main/java/org/springframework/core/MethodParameter.java",
          "spring-core/src/main/java/org/springframework/core/convert/ConversionService.java||spring-core/src/main/java/org/springframework/core/convert/ConversionService.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java||spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerInterceptor.java||spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerInterceptor.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java||spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-core/src/main/java/org/springframework/core/MethodParameter.java||spring-core/src/main/java/org/springframework/core/MethodParameter.java": [
          "File: spring-core/src/main/java/org/springframework/core/MethodParameter.java -> spring-core/src/main/java/org/springframework/core/MethodParameter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:  }",
          "164:  private Member getMember() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:  public Class<?> getDeclaringClass() {",
          "166:   return getMember().getDeclaringClass();",
          "167:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:  }",
          "172:  private AnnotatedElement getAnnotatedElement() {",
          "173:   return (this.method != null ? this.method : this.constructor);",
          "174:  }",
          "187:  public int getParameterIndex() {",
          "188:   return this.parameterIndex;",
          "",
          "[Removed Lines]",
          "179:  public Class<?> getDeclaringClass() {",
          "180:   return getMember().getDeclaringClass();",
          "181:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "spring-core/src/main/java/org/springframework/core/convert/ConversionService.java||spring-core/src/main/java/org/springframework/core/convert/ConversionService.java": [
          "File: spring-core/src/main/java/org/springframework/core/convert/ConversionService.java -> spring-core/src/main/java/org/springframework/core/convert/ConversionService.java"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java||spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/AsyncHandlerInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:    throws Exception;",
          "66: }",
          "",
          "[Removed Lines]",
          "62:  void afterConcurrentHandlingStarted(",
          "63:    HttpServletRequest request, HttpServletResponse response, Object handler)",
          "",
          "[Added Lines]",
          "60:  void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler)",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerInterceptor.java||spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerInterceptor.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerInterceptor.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:    throws Exception;",
          "",
          "[Removed Lines]",
          "111:  void postHandle(",
          "112:    HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)",
          "",
          "[Added Lines]",
          "117:  void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:    throws Exception;",
          "135: }",
          "",
          "[Removed Lines]",
          "131:  void afterCompletion(",
          "132:    HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)",
          "",
          "[Added Lines]",
          "139:  void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java||spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:  @Override",
          "56:  protected final ModelAndView doResolveException(",
          "60:   return doResolveHandlerMethodException(request, response, (HandlerMethod) handler, ex);",
          "61:  }",
          "",
          "[Removed Lines]",
          "57:    HttpServletRequest request, HttpServletResponse response,",
          "58:    Object handler, Exception ex) {",
          "",
          "[Added Lines]",
          "57:    HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:  protected abstract ModelAndView doResolveHandlerMethodException(",
          "81: }",
          "",
          "[Removed Lines]",
          "78:    HttpServletRequest request, HttpServletResponse response,",
          "79:    HandlerMethod handlerMethod, Exception ex);",
          "",
          "[Added Lines]",
          "77:    HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod, Exception ex);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8562bb3afdfa98b073c74e02d6b1e20a8c1b12c",
      "candidate_info": {
        "commit_hash": "e8562bb3afdfa98b073c74e02d6b1e20a8c1b12c",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/e8562bb3afdfa98b073c74e02d6b1e20a8c1b12c",
        "files": [
          "spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java",
          "spring-core/src/test/java/org/springframework/util/LinkedCaseInsensitiveMapTests.java"
        ],
        "message": "LinkedCaseInsensitiveMap properly overrides HashMap.clone()\n\nIssue: SPR-14509\n(cherry picked from commit dadd2c3)",
        "before_after_code_files": [
          "spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java||spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java",
          "spring-core/src/test/java/org/springframework/util/LinkedCaseInsensitiveMapTests.java||spring-core/src/test/java/org/springframework/util/LinkedCaseInsensitiveMapTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java||spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java": [
          "File: spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java -> spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: @SuppressWarnings(\"serial\")",
          "37: public class LinkedCaseInsensitiveMap<V> extends LinkedHashMap<String, V> {",
          "41:  private final Locale locale;",
          "",
          "[Removed Lines]",
          "39:  private final Map<String, String> caseInsensitiveKeys;",
          "",
          "[Added Lines]",
          "39:  private Map<String, String> caseInsensitiveKeys;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:  @Override",
          "115:  public V get(Object key) {",
          "116:   if (key instanceof String) {",
          "121:   }",
          "122:  }",
          "124:  @Override",
          "125:  public V remove(Object key) {",
          "131:   }",
          "132:  }",
          "134:  @Override",
          "",
          "[Removed Lines]",
          "117:    return super.get(this.caseInsensitiveKeys.get(convertKey((String) key)));",
          "118:   }",
          "119:   else {",
          "120:    return null;",
          "126:   if (key instanceof String ) {",
          "127:    return super.remove(this.caseInsensitiveKeys.remove(convertKey((String) key)));",
          "128:   }",
          "129:   else {",
          "130:    return null;",
          "",
          "[Added Lines]",
          "117:    String caseInsensitiveKey = this.caseInsensitiveKeys.get(convertKey((String) key));",
          "118:    if (caseInsensitiveKey != null) {",
          "119:     return super.get(caseInsensitiveKey);",
          "120:    }",
          "122:   return null;",
          "127:   if (key instanceof String) {",
          "128:    String caseInsensitiveKey = this.caseInsensitiveKeys.remove(convertKey((String) key));",
          "129:    if (caseInsensitiveKey != null) {",
          "130:     return super.remove(caseInsensitiveKey);",
          "131:    }",
          "133:   return null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:   super.clear();",
          "138:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:  @Override",
          "143:  @SuppressWarnings(\"unchecked\")",
          "144:  public Object clone() {",
          "145:   LinkedCaseInsensitiveMap<V> copy = (LinkedCaseInsensitiveMap<V>) super.clone();",
          "146:   copy.caseInsensitiveKeys = new HashMap<String, String>(this.caseInsensitiveKeys);",
          "147:   return copy;",
          "148:  }",
          "",
          "---------------"
        ],
        "spring-core/src/test/java/org/springframework/util/LinkedCaseInsensitiveMapTests.java||spring-core/src/test/java/org/springframework/util/LinkedCaseInsensitiveMapTests.java": [
          "File: spring-core/src/test/java/org/springframework/util/LinkedCaseInsensitiveMapTests.java -> spring-core/src/test/java/org/springframework/util/LinkedCaseInsensitiveMapTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.springframework.util;",
          "20: import org.junit.Test;",
          "22: import static org.junit.Assert.*;",
          "",
          "[Removed Lines]",
          "19: import org.junit.Before;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: public class LinkedCaseInsensitiveMapTests {",
          "36:  @Test",
          "37:  public void putAndGet() {",
          "",
          "[Removed Lines]",
          "29:  private LinkedCaseInsensitiveMap<String> map;",
          "31:  @Before",
          "32:  public void setUp() {",
          "33:   map = new LinkedCaseInsensitiveMap<String>();",
          "34:  }",
          "",
          "[Added Lines]",
          "28:  private final LinkedCaseInsensitiveMap<String> map = new LinkedCaseInsensitiveMap<String>();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:   assertEquals(\"value3\", map.get(\"Key\"));",
          "56:  }",
          "58: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:  @Test",
          "54:  @SuppressWarnings(\"unchecked\")",
          "55:  public void mapClone() {",
          "56:   map.put(\"key\", \"value1\");",
          "57:   LinkedCaseInsensitiveMap<String> copy = (LinkedCaseInsensitiveMap<String>) map.clone();",
          "58:   assertEquals(\"value1\", map.get(\"key\"));",
          "59:   assertEquals(\"value1\", map.get(\"KEY\"));",
          "60:   assertEquals(\"value1\", map.get(\"Key\"));",
          "61:   assertEquals(\"value1\", copy.get(\"key\"));",
          "62:   assertEquals(\"value1\", copy.get(\"KEY\"));",
          "63:   assertEquals(\"value1\", copy.get(\"Key\"));",
          "64:   copy.put(\"Key\", \"value2\");",
          "65:   assertEquals(1, map.size());",
          "66:   assertEquals(1, copy.size());",
          "67:   assertEquals(\"value1\", map.get(\"key\"));",
          "68:   assertEquals(\"value1\", map.get(\"KEY\"));",
          "69:   assertEquals(\"value1\", map.get(\"Key\"));",
          "70:   assertEquals(\"value2\", copy.get(\"key\"));",
          "71:   assertEquals(\"value2\", copy.get(\"KEY\"));",
          "72:   assertEquals(\"value2\", copy.get(\"Key\"));",
          "73:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71fd621a1b01855f74fcba0ae59b8ad0458adbe6",
      "candidate_info": {
        "commit_hash": "71fd621a1b01855f74fcba0ae59b8ad0458adbe6",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/71fd621a1b01855f74fcba0ae59b8ad0458adbe6",
        "files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java"
        ],
        "message": "Polishing (cherry picked from commit 96f1a0e)",
        "before_after_code_files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:  private List<Object> interceptors;",
          "169:  private PathMatchConfigurer pathMatchConfigurer;",
          "171:  private List<HttpMessageConverter<?>> messageConverters;",
          "",
          "[Removed Lines]",
          "167:  private ContentNegotiationManager contentNegotiationManager;",
          "",
          "[Added Lines]",
          "169:  private ContentNegotiationManager contentNegotiationManager;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:   if (configurer.isUseTrailingSlashMatch() != null) {",
          "208:    handlerMapping.setUseTrailingSlashMatch(configurer.isUseTrailingSlashMatch());",
          "209:   }",
          "212:   }",
          "215:   }",
          "217:   return handlerMapping;",
          "",
          "[Removed Lines]",
          "210:   if (configurer.getPathMatcher() != null) {",
          "211:    handlerMapping.setPathMatcher(configurer.getPathMatcher());",
          "213:   if (configurer.getUrlPathHelper() != null) {",
          "214:    handlerMapping.setUrlPathHelper(configurer.getUrlPathHelper());",
          "",
          "[Added Lines]",
          "211:   UrlPathHelper pathHelper = configurer.getUrlPathHelper();",
          "212:   if (pathHelper != null) {",
          "213:    handlerMapping.setUrlPathHelper(pathHelper);",
          "215:   PathMatcher pathMatcher = configurer.getPathMatcher();",
          "216:   if (pathMatcher != null) {",
          "217:    handlerMapping.setPathMatcher(pathMatcher);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "240:  protected void addInterceptors(InterceptorRegistry registry) {",
          "241:  }",
          "",
          "[Removed Lines]",
          "247:  @Bean",
          "248:  public ContentNegotiationManager mvcContentNegotiationManager() {",
          "249:   if (this.contentNegotiationManager == null) {",
          "250:    ContentNegotiationConfigurer configurer = new ContentNegotiationConfigurer(this.servletContext);",
          "251:    configurer.mediaTypes(getDefaultMediaTypes());",
          "252:    configureContentNegotiation(configurer);",
          "253:    try {",
          "254:     this.contentNegotiationManager = configurer.getContentNegotiationManager();",
          "255:    }",
          "256:    catch (Exception ex) {",
          "257:     throw new BeanInitializationException(\"Could not create ContentNegotiationManager\", ex);",
          "258:    }",
          "259:   }",
          "260:   return this.contentNegotiationManager;",
          "261:  }",
          "263:  protected Map<String, MediaType> getDefaultMediaTypes() {",
          "264:   Map<String, MediaType> map = new HashMap<String, MediaType>();",
          "265:   if (romePresent) {",
          "266:    map.put(\"atom\", MediaType.APPLICATION_ATOM_XML);",
          "267:    map.put(\"rss\", MediaType.valueOf(\"application/rss+xml\"));",
          "268:   }",
          "269:   if (jaxb2Present) {",
          "270:    map.put(\"xml\", MediaType.APPLICATION_XML);",
          "271:   }",
          "272:   if (jackson2Present || jacksonPresent) {",
          "273:    map.put(\"json\", MediaType.APPLICATION_JSON);",
          "274:   }",
          "275:   return map;",
          "276:  }",
          "282:  protected void configureContentNegotiation(ContentNegotiationConfigurer configurer) {",
          "283:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "313:  @Bean",
          "314:  public PathMatcher mvcPathMatcher() {",
          "321:  }",
          "",
          "[Removed Lines]",
          "315:   if (getPathMatchConfigurer().getPathMatcher() != null) {",
          "316:    return getPathMatchConfigurer().getPathMatcher();",
          "317:   }",
          "318:   else {",
          "319:    return new AntPathMatcher();",
          "320:   }",
          "",
          "[Added Lines]",
          "276:   PathMatcher pathMatcher = getPathMatchConfigurer().getPathMatcher();",
          "277:   return (pathMatcher != null ? pathMatcher : new AntPathMatcher());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "330:  @Bean",
          "331:  public UrlPathHelper mvcUrlPathHelper() {",
          "334:   }",
          "337:   }",
          "338:  }",
          "",
          "[Removed Lines]",
          "332:   if (getPathMatchConfigurer().getUrlPathHelper() != null) {",
          "333:    return getPathMatchConfigurer().getUrlPathHelper();",
          "335:   else {",
          "336:    return new UrlPathHelper();",
          "",
          "[Added Lines]",
          "289:   UrlPathHelper pathHelper = getPathMatchConfigurer().getUrlPathHelper();",
          "290:   return (pathHelper != null ? pathHelper : new UrlPathHelper());",
          "291:  }",
          "297:  @Bean",
          "298:  public ContentNegotiationManager mvcContentNegotiationManager() {",
          "299:   if (this.contentNegotiationManager == null) {",
          "300:    ContentNegotiationConfigurer configurer = new ContentNegotiationConfigurer(this.servletContext);",
          "301:    configurer.mediaTypes(getDefaultMediaTypes());",
          "302:    configureContentNegotiation(configurer);",
          "303:    try {",
          "304:     this.contentNegotiationManager = configurer.getContentNegotiationManager();",
          "305:    }",
          "306:    catch (Exception ex) {",
          "307:     throw new BeanInitializationException(\"Could not create ContentNegotiationManager\", ex);",
          "308:    }",
          "310:   return this.contentNegotiationManager;",
          "311:  }",
          "313:  protected Map<String, MediaType> getDefaultMediaTypes() {",
          "314:   Map<String, MediaType> map = new HashMap<String, MediaType>(4);",
          "315:   if (romePresent) {",
          "316:    map.put(\"atom\", MediaType.APPLICATION_ATOM_XML);",
          "317:    map.put(\"rss\", MediaType.valueOf(\"application/rss+xml\"));",
          "318:   }",
          "319:   if (jaxb2Present) {",
          "320:    map.put(\"xml\", MediaType.APPLICATION_XML);",
          "322:   if (jackson2Present || jacksonPresent) {",
          "323:    map.put(\"json\", MediaType.APPLICATION_JSON);",
          "324:   }",
          "325:   return map;",
          "326:  }",
          "332:  protected void configureContentNegotiation(ContentNegotiationConfigurer configurer) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "475:   return initializer;",
          "476:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475:  protected MessageCodesResolver getMessageCodesResolver() {",
          "476:   return null;",
          "477:  }",
          "483:  protected void configureAsyncSupport(AsyncSupportConfigurer configurer) {",
          "484:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "487:   return conversionService;",
          "488:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "501:  protected void addFormatters(FormatterRegistry registry) {",
          "502:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "511:     catch (LinkageError ex) {",
          "512:      throw new BeanInitializationException(\"Could not load default validator class\", ex);",
          "513:     }",
          "515:    }",
          "516:    else {",
          "517:     validator = new NoOpValidator();",
          "",
          "[Removed Lines]",
          "514:     validator = (Validator) BeanUtils.instantiate(clazz);",
          "",
          "[Added Lines]",
          "528:     validator = (Validator) BeanUtils.instantiateClass(clazz);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "527:   return null;",
          "528:  }",
          "",
          "[Removed Lines]",
          "533:  protected MessageCodesResolver getMessageCodesResolver() {",
          "534:   return null;",
          "535:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "625:   }",
          "626:  }",
          "",
          "[Removed Lines]",
          "631:  protected void addFormatters(FormatterRegistry registry) {",
          "632:  }",
          "638:  public void configureAsyncSupport(AsyncSupportConfigurer configurer) {",
          "639:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  void configureMessageConverters(List<HttpMessageConverter<?>> converters);",
          "",
          "[Removed Lines]",
          "70:  Validator getValidator();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:  void addInterceptors(InterceptorRegistry registry);",
          "",
          "[Removed Lines]",
          "134:  MessageCodesResolver getMessageCodesResolver();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:  void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer);",
          "157: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:  Validator getValidator();",
          "154:  MessageCodesResolver getMessageCodesResolver();",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {",
          "50:  }",
          "",
          "[Removed Lines]",
          "56:  public Validator getValidator() {",
          "57:   return null;",
          "58:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:  }",
          "115:  }",
          "122:  }",
          "129:  }",
          "136:  }",
          "138: }",
          "",
          "[Removed Lines]",
          "106:  public MessageCodesResolver getMessageCodesResolver() {",
          "107:   return null;",
          "114:  public void addInterceptors(InterceptorRegistry registry) {",
          "121:  public void addViewControllers(ViewControllerRegistry registry) {",
          "128:  public void addResourceHandlers(ResourceHandlerRegistry registry) {",
          "135:  public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {",
          "",
          "[Added Lines]",
          "98:  public void addInterceptors(InterceptorRegistry registry) {",
          "105:  public void addViewControllers(ViewControllerRegistry registry) {",
          "112:  public void addResourceHandlers(ResourceHandlerRegistry registry) {",
          "119:  public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {",
          "126:  public Validator getValidator() {",
          "127:   return null;",
          "128:  }",
          "134:  public MessageCodesResolver getMessageCodesResolver() {",
          "135:   return null;",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.springframework.format.FormatterRegistry;",
          "23: import org.springframework.http.converter.HttpMessageConverter;",
          "24: import org.springframework.validation.MessageCodesResolver;",
          "25: import org.springframework.validation.Validator;",
          "26: import org.springframework.web.method.support.HandlerMethodArgumentResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import org.springframework.util.CollectionUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:  private final List<WebMvcConfigurer> delegates = new ArrayList<WebMvcConfigurer>();",
          "40:  public void addWebMvcConfigurers(List<WebMvcConfigurer> configurers) {",
          "42:    this.delegates.addAll(configurers);",
          "43:   }",
          "44:  }",
          "46:  public void addFormatters(FormatterRegistry registry) {",
          "47:   for (WebMvcConfigurer delegate : this.delegates) {",
          "48:    delegate.addFormatters(registry);",
          "",
          "[Removed Lines]",
          "41:   if (configurers != null) {",
          "",
          "[Added Lines]",
          "43:   if (!CollectionUtils.isEmpty(configurers)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:   return selectSingleInstance(candidates, Validator.class);",
          "127:  }",
          "129:  private <T> T selectSingleInstance(List<T> instances, Class<T> instanceType) {",
          "130:   if (instances.size() > 1) {",
          "131:    throw new IllegalStateException(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:  public MessageCodesResolver getMessageCodesResolver() {",
          "133:   List<MessageCodesResolver> candidates = new ArrayList<MessageCodesResolver>();",
          "134:   for (WebMvcConfigurer configurer : this.delegates) {",
          "135:    MessageCodesResolver messageCodesResolver = configurer.getMessageCodesResolver();",
          "136:    if (messageCodesResolver != null) {",
          "137:     candidates.add(messageCodesResolver);",
          "138:    }",
          "139:   }",
          "140:   return selectSingleInstance(candidates, MessageCodesResolver.class);",
          "141:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "139:   }",
          "140:  }",
          "153: }",
          "",
          "[Removed Lines]",
          "142:  public MessageCodesResolver getMessageCodesResolver() {",
          "143:   List<MessageCodesResolver> candidates = new ArrayList<MessageCodesResolver>();",
          "144:   for (WebMvcConfigurer configurer : this.delegates) {",
          "145:    MessageCodesResolver messageCodesResolver = configurer.getMessageCodesResolver();",
          "146:    if (messageCodesResolver != null) {",
          "147:     candidates.add(messageCodesResolver);",
          "148:    }",
          "149:   }",
          "150:   return selectSingleInstance(candidates, MessageCodesResolver.class);",
          "151:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java": [
          "File: spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java -> spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.springframework.web.servlet.config.annotation;",
          "19: import java.util.ArrayList;",
          "21: import java.util.List;",
          "23: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "20: import java.util.Arrays;",
          "",
          "[Added Lines]",
          "20: import java.util.Collections;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:   delegatingConfig = new DelegatingWebMvcConfiguration();",
          "89:  }",
          "91:  @Test",
          "92:  public void requestMappingHandlerAdapter() throws Exception {",
          "95:   RequestMappingHandlerAdapter adapter = delegatingConfig.requestMappingHandlerAdapter();",
          "97:   ConfigurableWebBindingInitializer initializer = (ConfigurableWebBindingInitializer) adapter.getWebBindingInitializer();",
          "",
          "[Removed Lines]",
          "94:   delegatingConfig.setConfigurers(Arrays.asList(webMvcConfigurer));",
          "",
          "[Added Lines]",
          "95:   delegatingConfig.setConfigurers(Collections.singletonList(webMvcConfigurer));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:  public void getCustomValidator() {",
          "133:   given(webMvcConfigurer.getValidator()).willReturn(new LocalValidatorFactoryBean());",
          "136:   delegatingConfig.mvcValidator();",
          "138:   verify(webMvcConfigurer).getValidator();",
          "",
          "[Removed Lines]",
          "135:   delegatingConfig.setConfigurers(Arrays.asList(webMvcConfigurer));",
          "",
          "[Added Lines]",
          "136:   delegatingConfig.setConfigurers(Collections.singletonList(webMvcConfigurer));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:  public void getCustomMessageCodesResolver() {",
          "143:   given(webMvcConfigurer.getMessageCodesResolver()).willReturn(new DefaultMessageCodesResolver());",
          "146:   delegatingConfig.getMessageCodesResolver();",
          "148:   verify(webMvcConfigurer).getMessageCodesResolver();",
          "",
          "[Removed Lines]",
          "145:   delegatingConfig.setConfigurers(Arrays.asList(webMvcConfigurer));",
          "",
          "[Added Lines]",
          "146:   delegatingConfig.setConfigurers(Collections.singletonList(webMvcConfigurer));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "151:  @Test",
          "152:  public void handlerExceptionResolver() throws Exception {",
          "155:   delegatingConfig.handlerExceptionResolver();",
          "157:   verify(webMvcConfigurer).configureMessageConverters(converters.capture());",
          "",
          "[Removed Lines]",
          "154:   delegatingConfig.setConfigurers(Arrays.asList(webMvcConfigurer));",
          "",
          "[Added Lines]",
          "154:   delegatingConfig.setConfigurers(Collections.singletonList(webMvcConfigurer));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "177:   delegatingConfig.setConfigurers(configurers);",
          "179:   HandlerExceptionResolverComposite composite =",
          "181:   assertEquals(\"Only one custom converter is expected\", 1, composite.getExceptionResolvers().size());",
          "182:  }",
          "",
          "[Removed Lines]",
          "180:    (HandlerExceptionResolverComposite) delegatingConfig.handlerExceptionResolver();",
          "",
          "[Added Lines]",
          "180:     (HandlerExceptionResolverComposite) delegatingConfig.handlerExceptionResolver();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "201:   RequestMappingHandlerMapping handlerMapping = delegatingConfig.requestMappingHandlerMapping();",
          "202:   assertNotNull(handlerMapping);",
          "208:  }",
          "210: }",
          "",
          "[Removed Lines]",
          "203:   assertTrue(handlerMapping.useRegisteredSuffixPatternMatch());",
          "204:   assertTrue(handlerMapping.useSuffixPatternMatch());",
          "205:   assertFalse(handlerMapping.useTrailingSlashMatch());",
          "206:   assertSame(pathHelper, handlerMapping.getUrlPathHelper());",
          "207:   assertSame(pathMatcher, handlerMapping.getPathMatcher());",
          "",
          "[Added Lines]",
          "203:   assertEquals(\"PathMatchConfigurer should configure RegisteredSuffixPatternMatch\",",
          "204:     true, handlerMapping.useRegisteredSuffixPatternMatch());",
          "205:   assertEquals(\"PathMatchConfigurer should configure SuffixPatternMatch\",",
          "206:     true, handlerMapping.useSuffixPatternMatch());",
          "207:   assertEquals(\"PathMatchConfigurer should configure TrailingSlashMatch\",",
          "208:     false, handlerMapping.useTrailingSlashMatch());",
          "209:   assertEquals(\"PathMatchConfigurer should configure UrlPathHelper\",",
          "210:     pathHelper, handlerMapping.getUrlPathHelper());",
          "211:   assertEquals(\"PathMatchConfigurer should configure PathMatcher\",",
          "212:     pathMatcher, handlerMapping.getPathMatcher());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f473392a425fc74bd2f174a1ebcd4667bfcd7679",
      "candidate_info": {
        "commit_hash": "f473392a425fc74bd2f174a1ebcd4667bfcd7679",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/f473392a425fc74bd2f174a1ebcd4667bfcd7679",
        "files": [
          "spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java",
          "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
          "spring-core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java",
          "spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java",
          "spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java",
          "spring-core/src/test/java/org/springframework/tests/TestResourceUtils.java",
          "spring-tx/src/main/java/org/springframework/transaction/interceptor/DefaultTransactionAttribute.java"
        ],
        "message": "Polishing",
        "before_after_code_files": [
          "spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java||spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java",
          "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java||spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
          "spring-core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java||spring-core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java",
          "spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java||spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java",
          "spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java||spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java",
          "spring-core/src/test/java/org/springframework/tests/TestResourceUtils.java||spring-core/src/test/java/org/springframework/tests/TestResourceUtils.java",
          "spring-tx/src/main/java/org/springframework/transaction/interceptor/DefaultTransactionAttribute.java||spring-tx/src/main/java/org/springframework/transaction/interceptor/DefaultTransactionAttribute.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java||spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java": [
          "File: spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java -> spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "117:  void addBeanFactoryPostProcessor(BeanFactoryPostProcessor beanFactoryPostProcessor);",
          "",
          "[Added Lines]",
          "117:  void addBeanFactoryPostProcessor(BeanFactoryPostProcessor postProcessor);",
          "",
          "---------------"
        ],
        "spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java||spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java": [
          "File: spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java -> spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: import org.springframework.context.ApplicationEventPublisherAware;",
          "54: import org.springframework.context.ApplicationListener;",
          "55: import org.springframework.context.ConfigurableApplicationContext;",
          "56: import org.springframework.context.EnvironmentAware;",
          "57: import org.springframework.context.HierarchicalMessageSource;",
          "58: import org.springframework.context.LifecycleProcessor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import org.springframework.context.EmbeddedValueResolverAware;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404:   }",
          "405:  }",
          "409:  }",
          "",
          "[Removed Lines]",
          "407:  public void addBeanFactoryPostProcessor(BeanFactoryPostProcessor beanFactoryPostProcessor) {",
          "408:   this.beanFactoryPostProcessors.add(beanFactoryPostProcessor);",
          "",
          "[Added Lines]",
          "408:  public void addBeanFactoryPostProcessor(BeanFactoryPostProcessor postProcessor) {",
          "409:   Assert.notNull(postProcessor, \"BeanFactoryPostProcessor must not be null\");",
          "410:   this.beanFactoryPostProcessors.add(postProcessor);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "418:  }",
          "420:  public void addApplicationListener(ApplicationListener<?> listener) {",
          "421:   if (this.applicationEventMulticaster != null) {",
          "422:    this.applicationEventMulticaster.addApplicationListener(listener);",
          "423:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423:   Assert.notNull(listener, \"ApplicationListener must not be null\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "562:   beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));",
          "563:   beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);",
          "564:   beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);",
          "565:   beanFactory.ignoreDependencyInterface(MessageSourceAware.class);",
          "566:   beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);",
          "",
          "[Removed Lines]",
          "567:   beanFactory.ignoreDependencyInterface(EnvironmentAware.class);",
          "",
          "[Added Lines]",
          "566:   beanFactory.ignoreDependencyInterface(EnvironmentAware.class);",
          "567:   beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);",
          "",
          "---------------"
        ],
        "spring-core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java||spring-core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java": [
          "File: spring-core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java -> spring-core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "53:  void addConverterFactory(ConverterFactory<?, ?> converterFactory);",
          "",
          "[Added Lines]",
          "54:  void addConverterFactory(ConverterFactory<?, ?> factory);",
          "",
          "---------------"
        ],
        "spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java||spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java": [
          "File: spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java -> spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  public void addConverter(Converter<?, ?> converter) {",
          "83:   GenericConverter.ConvertiblePair typeInfo = getRequiredTypeInfo(converter, Converter.class);",
          "86:   addConverter(new ConverterAdapter(converter, typeInfo));",
          "87:  }",
          "",
          "[Removed Lines]",
          "84:   Assert.notNull(typeInfo, \"Unable to the determine sourceType <S> and targetType \" +",
          "85:     \"<T> which your Converter<S, T> converts between; declare these generic types.\");",
          "",
          "[Added Lines]",
          "84:   if (typeInfo == null) {",
          "85:    throw new IllegalArgumentException(\"Unable to determine source type <S> and target type <T> for your \" +",
          "86:      \"Converter [\" + converter.getClass().getName() + \"]; does the class parameterize those types?\");",
          "87:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   invalidateCache();",
          "97:  }",
          "101:   if (typeInfo == null) {",
          "105:   }",
          "107:  }",
          "109:  public void removeConvertible(Class<?> sourceType, Class<?> targetType) {",
          "",
          "[Removed Lines]",
          "99:  public void addConverterFactory(ConverterFactory<?, ?> converterFactory) {",
          "100:   GenericConverter.ConvertiblePair typeInfo = getRequiredTypeInfo(converterFactory, ConverterFactory.class);",
          "102:    throw new IllegalArgumentException(\"Unable to the determine sourceType <S> and \" +",
          "103:      \"targetRangeType R which your ConverterFactory<S, R> converts between; \" +",
          "104:      \"declare these generic types.\");",
          "106:   addConverter(new ConverterFactoryAdapter(converterFactory, typeInfo));",
          "",
          "[Added Lines]",
          "101:  public void addConverterFactory(ConverterFactory<?, ?> factory) {",
          "102:   GenericConverter.ConvertiblePair typeInfo = getRequiredTypeInfo(factory, ConverterFactory.class);",
          "104:    throw new IllegalArgumentException(\"Unable to determine source type <S> and target type <T> for your \" +",
          "105:      \"ConverterFactory [\" + factory.getClass().getName() + \"]; does the class parameterize those types?\");",
          "107:   addConverter(new ConverterFactoryAdapter(factory, typeInfo));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:  }",
          "141:  public boolean canBypassConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {",
          "143:   if (sourceType == null) {",
          "144:    return true;",
          "145:   }",
          "",
          "[Removed Lines]",
          "142:   Assert.notNull(targetType, \"The targetType to convert to cannot be null\");",
          "",
          "[Added Lines]",
          "144:   Assert.notNull(targetType, \"targetType to convert to cannot be null\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:  @SuppressWarnings(\"unchecked\")",
          "151:  public <T> T convert(Object source, Class<T> targetType) {",
          "153:   return (T) convert(source, TypeDescriptor.forObject(source), TypeDescriptor.valueOf(targetType));",
          "154:  }",
          "156:  public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {",
          "158:   if (sourceType == null) {",
          "161:   }",
          "162:   if (source != null && !sourceType.getObjectType().isInstance(source)) {",
          "164:      sourceType + \"; instead it was a \" + source.getClass().getName());",
          "165:   }",
          "166:   GenericConverter converter = getConverter(sourceType, targetType);",
          "",
          "[Removed Lines]",
          "152:   Assert.notNull(targetType,\"The targetType to convert to cannot be null\");",
          "157:   Assert.notNull(targetType,\"The targetType to convert to cannot be null\");",
          "159:    Assert.isTrue(source == null, \"The source must be [null] if sourceType == [null]\");",
          "160:    return handleResult(sourceType, targetType, convertNullSource(sourceType, targetType));",
          "163:    throw new IllegalArgumentException(\"The source to convert from must be an instance of \" +",
          "",
          "[Added Lines]",
          "154:   Assert.notNull(targetType, \"targetType to convert to cannot be null\");",
          "159:   Assert.notNull(targetType, \"targetType to convert to cannot be null\");",
          "161:    Assert.isTrue(source == null, \"source must be [null] if sourceType == [null]\");",
          "162:    return handleResult(null, targetType, convertNullSource(null, targetType));",
          "165:    throw new IllegalArgumentException(\"source to convert from must be an instance of \" +",
          "",
          "---------------"
        ],
        "spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java||spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java": [
          "File: spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java -> spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:  @Override",
          "157:    return true;",
          "158:   }",
          "164:   }",
          "166:  }",
          "168:  @Override",
          "",
          "[Removed Lines]",
          "155:  public boolean equals(Object obj) {",
          "156:   if (obj == this) {",
          "159:   if (obj instanceof EncodedResource) {",
          "160:    EncodedResource that = (EncodedResource) obj;",
          "161:    return (this.resource.equals(that.resource) &&",
          "162:      ObjectUtils.nullSafeEquals(this.charset, that.charset) &&",
          "163:      ObjectUtils.nullSafeEquals(this.encoding, that.encoding));",
          "165:   return false;",
          "",
          "[Added Lines]",
          "157:  public boolean equals(Object other) {",
          "158:   if (this == other) {",
          "161:   if (!(other instanceof EncodedResource)) {",
          "162:    return false;",
          "164:   EncodedResource otherResource = (EncodedResource) other;",
          "165:   return (this.resource.equals(otherResource.resource) &&",
          "166:     ObjectUtils.nullSafeEquals(this.charset, otherResource.charset) &&",
          "167:     ObjectUtils.nullSafeEquals(this.encoding, otherResource.encoding));",
          "",
          "---------------"
        ],
        "spring-core/src/test/java/org/springframework/tests/TestResourceUtils.java||spring-core/src/test/java/org/springframework/tests/TestResourceUtils.java": [
          "File: spring-core/src/test/java/org/springframework/tests/TestResourceUtils.java -> spring-core/src/test/java/org/springframework/tests/TestResourceUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.springframework.tests;",
          "21: import org.springframework.core.io.ClassPathResource;",
          "",
          "[Removed Lines]",
          "19: import static java.lang.String.format;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:  public static ClassPathResource qualifiedResource(Class<?> clazz, String resourceSuffix) {",
          "44:  }",
          "46: }",
          "",
          "[Removed Lines]",
          "28: public class TestResourceUtils {",
          "43:    return new ClassPathResource(format(\"%s-%s\", clazz.getSimpleName(), resourceSuffix), clazz);",
          "",
          "[Added Lines]",
          "26: public abstract class TestResourceUtils {",
          "36:   return new ClassPathResource(String.format(\"%s-%s\", clazz.getSimpleName(), resourceSuffix), clazz);",
          "",
          "---------------"
        ],
        "spring-tx/src/main/java/org/springframework/transaction/interceptor/DefaultTransactionAttribute.java||spring-tx/src/main/java/org/springframework/transaction/interceptor/DefaultTransactionAttribute.java": [
          "File: spring-tx/src/main/java/org/springframework/transaction/interceptor/DefaultTransactionAttribute.java -> spring-tx/src/main/java/org/springframework/transaction/interceptor/DefaultTransactionAttribute.java"
        ]
      }
    },
    {
      "candidate_hash": "cb64dd15838ee073631e145b21d3c9f78b35dcb8",
      "candidate_info": {
        "commit_hash": "cb64dd15838ee073631e145b21d3c9f78b35dcb8",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/cb64dd15838ee073631e145b21d3c9f78b35dcb8",
        "files": [
          "spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java"
        ],
        "message": "StandardTypeConverter initializes default ConversionService against volatile field\n\nIssue: SPR-14465\n(cherry picked from commit 97d73eb)",
        "before_after_code_files": [
          "spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java||spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java||spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java": [
          "File: spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java -> spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: public class StandardTypeConverter implements TypeConverter {",
          "41:  private final ConversionService conversionService;",
          "",
          "[Removed Lines]",
          "39:  private static ConversionService defaultConversionService;",
          "",
          "[Added Lines]",
          "39:  private static volatile ConversionService defaultConversionService;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  public StandardTypeConverter() {",
          "52:   }",
          "53:   this.conversionService = defaultConversionService;",
          "54:  }",
          "",
          "[Removed Lines]",
          "48:   synchronized (this) {",
          "49:    if (defaultConversionService == null) {",
          "50:     defaultConversionService = new DefaultConversionService();",
          "51:    }",
          "",
          "[Added Lines]",
          "48:   if (defaultConversionService == null) {",
          "49:    defaultConversionService = new DefaultConversionService();",
          "",
          "---------------"
        ]
      }
    }
  ]
}