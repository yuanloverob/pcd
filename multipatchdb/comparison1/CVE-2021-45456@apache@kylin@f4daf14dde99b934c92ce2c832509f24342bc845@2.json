{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a6d4372639dce414829eb31d16dd51368c452b2a",
      "candidate_info": {
        "commit_hash": "a6d4372639dce414829eb31d16dd51368c452b2a",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/a6d4372639dce414829eb31d16dd51368c452b2a",
        "files": [
          "engine-mr/src/main/java/org/apache/kylin/engine/mr/CubingJob.java"
        ],
        "message": "KYLIN-4412 Show cluster name in email title",
        "before_after_code_files": [
          "engine-mr/src/main/java/org/apache/kylin/engine/mr/CubingJob.java||engine-mr/src/main/java/org/apache/kylin/engine/mr/CubingJob.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engine-mr/src/main/java/org/apache/kylin/engine/mr/CubingJob.java||engine-mr/src/main/java/org/apache/kylin/engine/mr/CubingJob.java": [
          "File: engine-mr/src/main/java/org/apache/kylin/engine/mr/CubingJob.java -> engine-mr/src/main/java/org/apache/kylin/engine/mr/CubingJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:         }",
          "251:         String content = MailNotificationUtil.getMailContent(state, dataMap);",
          "253:                 cubeInstance.getName());",
          "254:         return Pair.newPair(title, content);",
          "255:     }",
          "",
          "[Removed Lines]",
          "252:         String title = MailNotificationUtil.getMailTitle(\"JOB\", state.toString(), getDeployEnvName(), getProjectName(),",
          "",
          "[Added Lines]",
          "252:         String title = MailNotificationUtil.getMailTitle(\"JOB\",",
          "253:                 state.toString(),",
          "254:                 context.getConfig().getClusterName(),",
          "255:                 getDeployEnvName(),",
          "256:                 getProjectName(),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "399d25b23c112eaaa090b24ecbc332449dd1a4c1",
      "candidate_info": {
        "commit_hash": "399d25b23c112eaaa090b24ecbc332449dd1a4c1",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/399d25b23c112eaaa090b24ecbc332449dd1a4c1",
        "files": [
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala"
        ],
        "message": "KYLIN-4908 Segment pruner support integer partition col in spark query engine",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala": [
          "File: kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala -> kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         val id = layoutEntity.getOrderedDimensions.asScala.values.find(",
          "123:           column => column.columnName.equals(ref.getName))",
          "125:           pattern = desc.getPartitionDateFormat",
          "126:           dataSchema.filter(_.name == String.valueOf(id.get.id))",
          "127:         } else {",
          "",
          "[Removed Lines]",
          "124:         if (id.isDefined && (ref.getType.isDateTimeFamily || ref.getType.isStringFamily)) {",
          "",
          "[Added Lines]",
          "124:         if (id.isDefined && (ref.getType.isDateTimeFamily || ref.getType.isStringFamily || ref.getType.isIntegerFamily)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "468:         val ts = DateFormat.stringToMillis(v.toString)",
          "469:         func(ts)",
          "471:         val format = DateFormat.getDateFormat(pattern)",
          "472:         val time = format.parse(v.toString).getTime",
          "473:         func(time)",
          "",
          "[Removed Lines]",
          "470:       case v: String if pattern != null =>",
          "",
          "[Added Lines]",
          "470:       case v @ (_:String | _: Int | _: Long) if pattern != null =>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b428f1e1ab6a48101bec03e515d135c57af32878",
      "candidate_info": {
        "commit_hash": "b428f1e1ab6a48101bec03e515d135c57af32878",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/b428f1e1ab6a48101bec03e515d135c57af32878",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala",
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala"
        ],
        "message": "KYLIN-4893 Optimize query performance when using shard by column\n\n(cherry picked from commit bd5ab5e61ca4dc0c5ccabb66b17b4be1642ce13d)\n(cherry picked from commit 8fa9d8d210b2755325999ed3e7496a320e3bd7f9)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala",
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2884:     private String getLogPropertyFile(String filename) {",
          "2885:         if (isDevEnv()) {",
          "2887:         } else {",
          "2889:         }",
          "2890:     }",
          "2892:     public int getQueryPartitionSplitSizeMB() {",
          "2894:     }",
          "2896:     public boolean isShardingJoinOptEnabled() {",
          "2898:     }",
          "2900:     public int getSparkSqlShufflePartitions() {",
          "2902:     }",
          "2904:     public Map<String, String> getQuerySparkConf() {",
          "",
          "[Removed Lines]",
          "2886:             return Paths.get(getKylinHomeWithoutWarn(), \"build\", \"conf\").toString() + File.separator + filename;",
          "2888:             return Paths.get(getKylinHomeWithoutWarn(), \"conf\").toString() + File.separator + filename;",
          "2893:         return Integer.parseInt(getOptional(\"kylin.query.spark-engine.partition-split-size-mb\", \"64\"));",
          "2897:         return Boolean.parseBoolean(getOptional(\"kylin.query.spark-engine.expose-sharding-trait\", \"true\"));",
          "2901:         return Integer.parseInt(getOptional(\"kylin.query.spark-engine.spark-sql-shuffle-partitions\", \"-1\"));",
          "",
          "[Added Lines]",
          "2886:             return Paths.get(getKylinHomeWithoutWarn(),",
          "2887:                     \"build\", \"conf\").toString() + File.separator + filename;",
          "2889:             return Paths.get(getKylinHomeWithoutWarn(),",
          "2890:                     \"conf\").toString() + File.separator + filename;",
          "2895:         return Integer.parseInt(getOptional(\"kylin.query.spark-engine.partition-split-size-mb\",",
          "2896:                 \"64\"));",
          "2897:     }",
          "2903:     public int getMaxShardingSizeMBPerTask() {",
          "2904:         return Integer.parseInt(getOptional(\"kylin.query.spark-engine.max-sharding-size-mb\",",
          "2905:                 \"64\"));",
          "2909:         return Boolean.parseBoolean(getOptional(\"kylin.query.spark-engine.expose-sharding-trait\",",
          "2910:                 \"true\"));",
          "2914:         return Integer.parseInt(getOptional(\"kylin.query.spark-engine.spark-sql-shuffle-partitions\",",
          "2915:                 \"-1\"));",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala": [
          "File: kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala -> kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.sql.{Date, Timestamp}",
          "23: import org.apache.hadoop.fs.{FileStatus, Path}",
          "24: import org.apache.kylin.common.util.DateFormat",
          "25: import org.apache.kylin.cube.cuboid.Cuboid",
          "26: import org.apache.kylin.cube.CubeInstance",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import org.apache.kylin.common.KylinConfig",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:   }",
          "171:   private def genShardSpec(selected: Seq[SegmentDirectory]): Option[ShardSpec] = {",
          "173:       None",
          "174:     } else {",
          "175:       val segments = selected.par.map { segDir =>",
          "176:         cubeInstance.getSegment(segDir.segmentName, SegmentStatusEnum.READY);",
          "178:       val shardNum = segments.head.getCuboidShardNum(layoutEntity.getId).toInt",
          "181:       if (layoutEntity.getShardByColumns.isEmpty || segments.exists(",
          "182:         _.getCuboidShardNum(layoutEntity.getId).toInt != shardNum)) {",
          "185:         None",
          "186:       } else {",
          "189:         } else {",
          "192:         }",
          "194:       }",
          "195:     }",
          "196:   }",
          "",
          "[Removed Lines]",
          "172:     if (selected.isEmpty) {",
          "177:       }.toIterator.toSeq",
          "183:         logInfo(\"Shard by column is empty or segments have the different number of shard, skip \" +",
          "184:           \"shard join.\")",
          "187:         val sortColumns = if (segments.length == 1) {",
          "188:           layoutEntity.getOrderedDimensions.keySet().asScala.map(_.toString).toSeq",
          "190:           logInfo(\"Sort order will lost in multiple segments.\")",
          "191:           Seq.empty[String]",
          "193:         Some(ShardSpec(shardNum, shardBySchema.fieldNames.toSeq, sortColumns))",
          "",
          "[Added Lines]",
          "173:     if (!KylinConfig.getInstanceFromEnv.isShardingJoinOptEnabled || selected.isEmpty) {",
          "178:       }.seq",
          "184:         logInfo(\"Shard by column is empty or segments have the different number of shard, \" +",
          "185:           \"skip shard join.\")",
          "189:         val partitionSizePerId = selected.flatMap(_.files).map( f =>",
          "190:           (FilePruner.getPartitionId(f.getPath), f.getLen)",
          "191:         ).groupBy(_._1).mapValues(_.map(_._2).sum)",
          "193:         if (partitionSizePerId.exists(_._2 > FilePruner.MAX_SHARDING_SIZE_PER_TASK)) {",
          "194:           logInfo(s\"There are some partition ids which the file size exceeds the \" +",
          "195:             s\"threshold size ${FilePruner.MAX_SHARDING_SIZE_PER_TASK}, skip shard join.\")",
          "196:           None",
          "198:           val sortColumns = if (segments.length == 1) {",
          "199:             layoutEntity.getOrderedDimensions.keySet().asScala.map(_.toString).toSeq",
          "200:           } else {",
          "201:             logInfo(\"Sort order will lost in multiple segments.\")",
          "202:             Seq.empty[String]",
          "203:           }",
          "204:           Some(ShardSpec(shardNum, shardBySchema.fieldNames.toSeq, sortColumns))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246:     shardSpec = genShardSpec(selected)",
          "250:     setShufflePartitions(totalFileSize, session)",
          "251:     logInfo(s\"Files pruning in ${(System.nanoTime() - startTime).toDouble / 1000000} ms\")",
          "252:     if (selected.isEmpty) {",
          "",
          "[Removed Lines]",
          "248:     val totalFileSize = selected.flatMap(partition => partition.files).map(_.getLen).sum",
          "249:     logInfo(s\"totalFileSize is ${totalFileSize}\")",
          "",
          "[Added Lines]",
          "260:     val totalFileSize = selected.flatMap(_.files).map(_.getLen).sum",
          "261:     logInfo(s\"After files pruning, total file size is ${totalFileSize}\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434: }",
          "436: object FilePruner {",
          "437:   def getPartitionId(p: Path): Int = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:   val MAX_SHARDING_SIZE_PER_TASK: Long = KylinConfig.getInstanceFromEnv",
          "451:     .getMaxShardingSizeMBPerTask * 1024 * 1024",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala": [
          "File: kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala -> kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/ResetShufflePartition.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import org.apache.spark.utils.SparderUtils",
          "25: trait ResetShufflePartition extends Logging {",
          "28:   def setShufflePartitions(bytes: Long, sparkSession: SparkSession): Unit = {",
          "29:     QueryContextFacade.current().addAndGetSourceScanBytes(bytes)",
          "",
          "[Removed Lines]",
          "26:   val PARTITION_SPLIT_BYTES: Long = KylinConfig.getInstanceFromEnv.getQueryPartitionSplitSizeMB * 1024 * 1024 // 64MB",
          "",
          "[Added Lines]",
          "26:   val PARTITION_SPLIT_BYTES: Long =",
          "27:     KylinConfig.getInstanceFromEnv.getQueryPartitionSplitSizeMB * 1024 * 1024 // 64MB",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     }",
          "39:     sparkSession.conf.set(\"spark.sql.shuffle.partitions\", partitionsNum.toString)",
          "41:   }",
          "42: }",
          "",
          "[Removed Lines]",
          "40:     logInfo(s\"Set partition to $partitionsNum, total bytes ${QueryContextFacade.current().getSourceScanBytes}\")",
          "",
          "[Added Lines]",
          "41:     logInfo(s\"Set partition to $partitionsNum, \" +",
          "42:       s\"total bytes ${QueryContextFacade.current().getSourceScanBytes}\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77526b253ad12e1c6f93520244a187f161e1638a",
      "candidate_info": {
        "commit_hash": "77526b253ad12e1c6f93520244a187f161e1638a",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/77526b253ad12e1c6f93520244a187f161e1638a",
        "files": [
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/spark/deploy/StandaloneAppClient.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala"
        ],
        "message": "KYLIN-5076 Fix spark tracking url missing on spark standalone mode",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/spark/deploy/StandaloneAppClient.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/spark/deploy/StandaloneAppClient.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java -> kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: import org.apache.kylin.common.util.JsonUtil;",
          "56: import org.apache.kylin.metadata.MetadataConstants;",
          "57: import org.apache.spark.SparkConf;",
          "58: import org.apache.spark.sql.SparkSession;",
          "59: import org.apache.spark.sql.hive.utils.ResourceDetectUtils;",
          "60: import org.apache.spark.util.Utils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: import org.apache.spark.deploy.StandaloneAppClient;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:         }",
          "198:     }",
          "201:         String applicationId = ss.sparkContext().applicationId();",
          "202:         Map<String, String> extraInfo = new HashMap<>();",
          "203:         try {",
          "204:             String trackingUrl = getTrackingUrl(applicationId);",
          "205:             if (StringUtils.isBlank(trackingUrl)) {",
          "206:                 logger.warn(\"Get tracking url of application {}, but empty url found.\", applicationId);",
          "207:                 return extraInfo;",
          "",
          "[Removed Lines]",
          "200:     private Map<String, String> getTrackingInfo(boolean ipAddressPreferred) {",
          "",
          "[Added Lines]",
          "201:     private Map<String, String> getTrackingInfo(boolean ipAddressPreferred, String sparkMaster) {",
          "206:             if (sparkMaster.startsWith(\"spark\")) {",
          "207:                 trackingUrl = StandaloneAppClient.getAppUrl(applicationId, sparkMaster);",
          "208:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "291:             if (isJobOnCluster(sparkConf)) {",
          "292:                 updateSparkJobExtraInfo(\"/kylin/api/jobs/spark\", project, jobId,",
          "294:             }",
          "",
          "[Removed Lines]",
          "293:                         getTrackingInfo(config.isTrackingUrlIpAddressEnabled()));",
          "",
          "[Added Lines]",
          "297:                         getTrackingInfo(config.isTrackingUrlIpAddressEnabled(), sparkConf.get(\"spark.master\")));",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/spark/deploy/StandaloneAppClient.scala||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/spark/deploy/StandaloneAppClient.scala": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/spark/deploy/StandaloneAppClient.scala -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/spark/deploy/StandaloneAppClient.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     }",
          "82:   }",
          "85:   def parseApplicationState(responseStr: String): Unit = {",
          "86:     val curr = System.currentTimeMillis()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   def getAppUrl(appId: String, standaloneMaster: String): String = {",
          "84:     var sparkUI = KylinConfig.getInstanceFromEnv.getSparkStandaloneMasterWebUI",
          "85:     if (sparkUI.isEmpty) {",
          "86:       sparkUI = \"http://\" + getMasterHost(standaloneMaster) + \":8080/\"",
          "87:       logWarning(\"Parameter 'kylin.engine.spark.standalone.master.httpUrl' is not configured. Use \" +",
          "88:         sparkUI + \" as the spark standalone Web UI address.\")",
          "89:     }",
          "90:     if (!sparkUI.endsWith(\"/\")) {",
          "91:       sparkUI = sparkUI + \"/\"",
          "92:     }",
          "93:     val sparkApp = sparkUI + \"app/?appId=\"",
          "94:     sparkApp + appId",
          "95:   }",
          "97:   def getMasterHost(master: String): String = {",
          "98:     master.split(\"(://|:)\").tail.head",
          "99:   }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala": [
          "File: kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala -> kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.apache.kylin.common.util.ToolUtil",
          "37: import org.apache.kylin.query.monitor.SparderContextCanary",
          "38: import org.apache.kylin.spark.classloader.ClassLoaderUtils",
          "39: import org.apache.spark.{SparkConf, SparkContext, SparkEnv}",
          "40: import org.apache.spark.sql.execution.datasource.{KylinSourceStrategy, ShardFileStatusCache}",
          "41: import org.apache.spark.sql.metrics.SparderMetricsListener",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.apache.spark.deploy.StandaloneAppClient",
          "40: import org.apache.spark.sql.SparderContext.master_app_url",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "183:                   }",
          "184:                   master_app_url = \"http://\" + hostName + \":\" + sparkSession.sparkContext.getConf",
          "185:                     .get(\"spark.ui.port\", \"4040\")",
          "186:                 case _ =>",
          "187:                   master_app_url = YarnInfoFetcherUtils.getTrackingUrl(appid)",
          "188:               }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:                 case mode: String if mode.startsWith(\"spark\") =>",
          "189:                   val hostName = StandaloneAppClient.getMasterHost(kylinConf.getSparderConfigOverrideWithSpecificName(\"spark.master\"))",
          "190:                   master_app_url = \"http://\" + hostName + \":\" + sparkSession.sparkContext.getConf",
          "191:                     .get(\"spark.ui.port\", \"4040\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "277202a04e4cad4a1473301fb0299bab2270bc91",
      "candidate_info": {
        "commit_hash": "277202a04e4cad4a1473301fb0299bab2270bc91",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/277202a04e4cad4a1473301fb0299bab2270bc91",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java"
        ],
        "message": "KYLIN-4478 Resolve Issue: Use secure AES/CFB/PKCS5Padding instead of insecure AES/ECB/PKCS5Padding\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>\n(cherry picked from commit dadc1dd6716f7075bfcd6171d3358333475b4ecd)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java"
          ]
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:             return null;",
          "37:         }",
          "38:         try {",
          "40:             final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
          "41:             cipher.init(Cipher.ENCRYPT_MODE, secretKey);",
          "42:             final String encryptedString = Base64.encodeBase64String(cipher.doFinal(strToEncrypt.getBytes(",
          "",
          "[Removed Lines]",
          "39:             Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");",
          "",
          "[Added Lines]",
          "39:             Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:             return null;",
          "53:         }",
          "54:         try {",
          "56:             final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
          "57:             cipher.init(Cipher.DECRYPT_MODE, secretKey);",
          "58:             final String decryptedString = new String(cipher.doFinal(Base64.decodeBase64(strToDecrypt)), StandardCharsets.UTF_8);",
          "",
          "[Removed Lines]",
          "55:             Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");",
          "",
          "[Added Lines]",
          "55:             Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}