{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6a30269d98d8e939930f5fea71fc82da6824806e",
      "candidate_info": {
        "commit_hash": "6a30269d98d8e939930f5fea71fc82da6824806e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6a30269d98d8e939930f5fea71fc82da6824806e",
        "files": [
          "version.php"
        ],
        "message": "Moodle release 3.7.2",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052001.14;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.1+ (Build: 20190905)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052002.00;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2 (Build: 20190909)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "18b947671b7e5ffe6010fc2f0f0706fb3bc2525c",
      "candidate_info": {
        "commit_hash": "18b947671b7e5ffe6010fc2f0f0706fb3bc2525c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/18b947671b7e5ffe6010fc2f0f0706fb3bc2525c",
        "files": [
          "course/classes/privacy/provider.php",
          "course/externallib.php",
          "course/tests/privacy_test.php",
          "favourites/classes/privacy/provider.php",
          "favourites/tests/privacy_test.php",
          "lang/en/course.php",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-63969-master-4' of git://github.com/mihailges/moodle",
        "before_after_code_files": [
          "course/classes/privacy/provider.php||course/classes/privacy/provider.php",
          "course/externallib.php||course/externallib.php",
          "course/tests/privacy_test.php||course/tests/privacy_test.php",
          "favourites/classes/privacy/provider.php||favourites/classes/privacy/provider.php",
          "favourites/tests/privacy_test.php||favourites/tests/privacy_test.php",
          "lang/en/course.php||lang/en/course.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "course/classes/privacy/provider.php||course/classes/privacy/provider.php": [
          "File: course/classes/privacy/provider.php -> course/classes/privacy/provider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     public static function get_metadata(collection $collection) : collection {",
          "57:         $collection->add_subsystem_link('core_completion', [], 'privacy:metadata:completionsummary');",
          "58:         $collection->add_user_preference('coursecat_management_perpage', 'privacy:perpage');",
          "59:         return $collection;",
          "60:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:         $collection->add_subsystem_link('core_favourites', [], 'privacy:metadata:favouritessummary');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:         $params['contextcourse'] = CONTEXT_COURSE;",
          "76:         $contextlist = new contextlist();",
          "77:         $contextlist->add_from_sql($sql, $params);",
          "78:         return $contextlist;",
          "79:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:         \\core_favourites\\privacy\\provider::add_contexts_for_userid($contextlist, $userid, 'core_course', 'courses');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:     public static function get_users_in_context(userlist $userlist) {",
          "87:         $context = $userlist->get_context();",
          "90:             return;",
          "91:         }",
          "93:         \\core_completion\\privacy\\provider::add_course_completion_users_to_userlist($userlist);",
          "94:     }",
          "",
          "[Removed Lines]",
          "89:         if (!is_a($context, \\context_course::class)) {",
          "",
          "[Added Lines]",
          "93:         if (!$context instanceof \\context_course) {",
          "98:         \\core_favourites\\privacy\\provider::add_userids_for_context($userlist, 'courses');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:                 WHERE ctx.id $select\";",
          "113:         $courses = $DB->get_recordset_sql($sql, $params);",
          "114:         foreach ($courses as $course) {",
          "115:             $coursecompletion = \\core_completion\\privacy\\provider::get_course_completion_info($contextlist->get_user(), $course);",
          "116:             writer::with_context(\\context_course::instance($course->id))->export_data(",
          "117:                     [get_string('privacy:completionpath', 'course')], (object) $coursecompletion);",
          "118:         }",
          "119:         $courses->close();",
          "120:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:             $coursefavourite = \\core_favourites\\privacy\\provider::get_favourites_info_for_user($contextlist->get_user()->id,",
          "126:                     \\context_course::instance($course->id), 'core_course', 'courses', $course->id);",
          "127:             if ($coursefavourite) { // If the course has been favourited by the user, include it in the export.",
          "128:                 writer::with_context(\\context_course::instance($course->id))->export_data(",
          "129:                         [get_string('privacy:favouritespath', 'course')], (object) $coursefavourite);",
          "130:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "218:     public static function delete_data_for_all_users_in_context(\\context $context) {",
          "223:         }",
          "224:     }",
          "",
          "[Removed Lines]",
          "220:         if ($context->contextlevel == CONTEXT_COURSE) {",
          "222:             \\core_completion\\privacy\\provider::delete_completion(null, $context->instanceid);",
          "",
          "[Added Lines]",
          "233:         if (!$context instanceof \\context_course) {",
          "234:             return;",
          "237:         \\core_completion\\privacy\\provider::delete_completion(null, $context->instanceid);",
          "239:         \\core_favourites\\privacy\\provider::delete_favourites_for_all_users($context, 'core_course',",
          "240:                 'courses');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "231:     public static function delete_data_for_user(approved_contextlist $contextlist) {",
          "232:         foreach ($contextlist as $context) {",
          "235:                 \\core_completion\\privacy\\provider::delete_completion($contextlist->get_user(), $context->instanceid);",
          "236:             }",
          "237:         }",
          "238:     }",
          "",
          "[Removed Lines]",
          "233:             if ($context->contextlevel == CONTEXT_COURSE) {",
          "",
          "[Added Lines]",
          "251:             if ($context instanceof \\context_course) {",
          "255:                 \\core_favourites\\privacy\\provider::delete_favourites_for_user($contextlist, 'core_course',",
          "256:                     'courses');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "245:     public static function delete_data_for_users(approved_userlist $userlist) {",
          "247:         $context = $userlist->get_context();",
          "252:         }",
          "253:     }",
          "254: }",
          "",
          "[Removed Lines]",
          "246:         global $DB;",
          "249:         if ($context->contextlevel == CONTEXT_COURSE) {",
          "251:             \\core_completion\\privacy\\provider::delete_completion_by_approved_userlist($userlist, $context->instanceid);",
          "",
          "[Added Lines]",
          "270:         if (!$context instanceof \\context_course) {",
          "271:             return;",
          "274:         \\core_completion\\privacy\\provider::delete_completion_by_approved_userlist($userlist, $context->instanceid);",
          "276:         \\core_favourites\\privacy\\provider::delete_favourites_for_userlist($userlist, 'courses');",
          "",
          "---------------"
        ],
        "course/externallib.php||course/externallib.php": [
          "File: course/externallib.php -> course/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3824:             $warning = [];",
          "3828:             if ($course['favourite']) {",
          "3829:                 if (!$favouriteexists) {",
          "3830:                     try {",
          "3832:                     } catch (Exception $e) {",
          "3833:                         $warning['courseid'] = $course['id'];",
          "3834:                         if ($e instanceof moodle_exception) {",
          "",
          "[Removed Lines]",
          "3826:             $favouriteexists = $ufservice->favourite_exists('core_course', 'courses', $course['id'], \\context_system::instance());",
          "3831:                         $ufservice->create_favourite('core_course', 'courses', $course['id'], \\context_system::instance());",
          "",
          "[Added Lines]",
          "3826:             $favouriteexists = $ufservice->favourite_exists('core_course', 'courses', $course['id'],",
          "3827:                     \\context_course::instance($course['id']));",
          "3832:                         $ufservice->create_favourite('core_course', 'courses', $course['id'],",
          "3833:                                 \\context_course::instance($course['id']));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3849:             } else {",
          "3850:                 if ($favouriteexists) {",
          "3851:                     try {",
          "3853:                     } catch (Exception $e) {",
          "3854:                         $warning['courseid'] = $course['id'];",
          "3855:                         if ($e instanceof moodle_exception) {",
          "",
          "[Removed Lines]",
          "3852:                         $ufservice->delete_favourite('core_course', 'courses', $course['id'], \\context_system::instance());",
          "",
          "[Added Lines]",
          "3854:                         $ufservice->delete_favourite('core_course', 'courses', $course['id'],",
          "3855:                                 \\context_course::instance($course['id']));",
          "",
          "---------------"
        ],
        "course/tests/privacy_test.php||course/tests/privacy_test.php": [
          "File: course/tests/privacy_test.php -> course/tests/privacy_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: global $CFG;",
          "28: require_once($CFG->dirroot . '/completion/tests/fixtures/completion_creation.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: use \\core_privacy\\local\\request\\transform;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     public function test_get_contexts_for_userid() {",
          "45:         $this->resetAfterTest();",
          "47:         $this->create_course_completion();",
          "51:     }",
          "",
          "[Removed Lines]",
          "46:         $user = $this->getDataGenerator()->create_user();",
          "48:         $this->complete_course($user);",
          "49:         $contextlist = \\core_course\\privacy\\provider::get_contexts_for_userid($user->id);",
          "50:         $this->assertEquals($this->coursecontext->id, $contextlist->current()->id);",
          "",
          "[Added Lines]",
          "49:         $user1 = $this->getDataGenerator()->create_user();",
          "50:         $user2 = $this->getDataGenerator()->create_user();",
          "53:         $contextlist = \\core_course\\privacy\\provider::get_contexts_for_userid($user1->id);",
          "54:         $this->assertCount(0, $contextlist->get_contextids());",
          "57:         $contextlist = \\core_course\\privacy\\provider::get_contexts_for_userid($user2->id);",
          "58:         $this->assertCount(0, $contextlist->get_contextids());",
          "62:         $this->complete_course($user1);",
          "65:         $contextlist = \\core_course\\privacy\\provider::get_contexts_for_userid($user1->id);",
          "66:         $expected = [$this->coursecontext->id];",
          "67:         $actual = $contextlist->get_contextids();",
          "68:         $this->assertCount(1, $actual);",
          "69:         $this->assertEquals($expected, $actual);",
          "72:         $contextlist = \\core_course\\privacy\\provider::get_contexts_for_userid($user2->id);",
          "73:         $this->assertCount(0, $contextlist->get_contextids());",
          "76:         $user2context = \\context_user::instance($user2->id);",
          "77:         $ufservice = \\core_favourites\\service_factory::get_service_for_user_context($user2context);",
          "78:         $ufservice->create_favourite('core_course', 'courses', $this->coursecontext->instanceid,",
          "79:             $this->coursecontext);",
          "82:         $contextlist = \\core_course\\privacy\\provider::get_contexts_for_userid($user2->id);",
          "83:         $expected = [$this->coursecontext->id];",
          "84:         $actual = $contextlist->get_contextids();",
          "85:         $this->assertCount(1, $actual);",
          "86:         $this->assertEquals($expected, $actual);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:         $user1 = $this->getDataGenerator()->create_user();",
          "61:         $user2 = $this->getDataGenerator()->create_user();",
          "62:         $user3 = $this->getDataGenerator()->create_user();",
          "65:         $this->create_course_completion();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:         $user4 = $this->getDataGenerator()->create_user();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:         $this->getDataGenerator()->enrol_user($user3->id, $this->course->id, 'student');",
          "73:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, $component);",
          "74:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "76:         $actual = $userlist->get_userids();",
          "77:         sort($expected);",
          "78:         sort($actual);",
          "80:         $this->assertEquals($expected, $actual);",
          "81:     }",
          "",
          "[Removed Lines]",
          "75:         $expected = [$user1->id, $user2->id];",
          "79:         $this->assertCount(2, $actual);",
          "",
          "[Added Lines]",
          "110:         $systemcontext = \\context_system::instance();",
          "111:         $user4ctx = \\context_user::instance($user4->id);",
          "112:         $ufservice = \\core_favourites\\service_factory::get_service_for_user_context($user4ctx);",
          "113:         $ufservice->create_favourite('core_course', 'courses', $this->coursecontext->instanceid,",
          "114:                 $this->coursecontext);",
          "119:         $expected = [",
          "120:             $user1->id,",
          "121:             $user2->id,",
          "122:             $user4->id",
          "123:         ];",
          "127:         $this->assertCount(3, $actual);",
          "131:         $userlist = new \\core_privacy\\local\\request\\userlist($systemcontext, $component);",
          "132:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "133:         $actual = $userlist->get_userids();",
          "134:         $this->assertCount(0, $actual);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "95:         $completiondata = $writer->get_data([get_string('privacy:completionpath', 'course')]);",
          "96:         $this->assertEquals('In progress', $completiondata->status);",
          "97:         $this->assertCount(2, $completiondata->criteria);",
          "98:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:         $usercontext = \\context_user::instance($user->id);",
          "156:         $ufservice = \\core_favourites\\service_factory::get_service_for_user_context($usercontext);",
          "157:         $favourite = $ufservice->create_favourite('core_course', 'courses',",
          "158:                 $this->coursecontext->instanceid, $this->coursecontext);",
          "161:         $writer = \\core_privacy\\local\\request\\writer::with_context($this->coursecontext);",
          "162:         \\core_course\\privacy\\provider::export_user_data($approvedlist);",
          "163:         $favouritedata = $writer->get_data([get_string('privacy:favouritespath', 'course')]);",
          "165:         $this->assertEquals(transform::yesno(true), $favouritedata->starred);",
          "166:         $this->assertEquals('', $favouritedata->ordering);",
          "167:         $this->assertEquals(transform::datetime($favourite->timecreated), $favouritedata->timecreated);",
          "168:         $this->assertEquals(transform::datetime($favourite->timemodified), $favouritedata->timemodified);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "166:     public function test_delete_data_for_all_users_in_context() {",
          "167:         global $DB;",
          "168:         $this->resetAfterTest();",
          "169:         $user1 = $this->getDataGenerator()->create_user();",
          "170:         $user2 = $this->getDataGenerator()->create_user();",
          "171:         $this->create_course_completion();",
          "172:         $this->complete_course($user1);",
          "173:         $this->complete_course($user2);",
          "174:         $records = $DB->get_records('course_modules_completion');",
          "175:         $this->assertCount(2, $records);",
          "176:         $records = $DB->get_records('course_completion_crit_compl');",
          "177:         $this->assertCount(2, $records);",
          "178:         \\core_course\\privacy\\provider::delete_data_for_all_users_in_context($this->coursecontext);",
          "179:         $records = $DB->get_records('course_modules_completion');",
          "180:         $this->assertCount(0, $records);",
          "181:         $records = $DB->get_records('course_completion_crit_compl');",
          "182:         $this->assertCount(0, $records);",
          "183:     }",
          "188:     public function test_delete_data_for_user() {",
          "190:         $this->resetAfterTest();",
          "191:         $user1 = $this->getDataGenerator()->create_user();",
          "192:         $user2 = $this->getDataGenerator()->create_user();",
          "193:         $this->create_course_completion();",
          "194:         $this->complete_course($user1);",
          "200:         $approvedlist = new \\core_privacy\\local\\request\\approved_contextlist($user1, 'core_course',",
          "201:                 [$this->coursecontext->id]);",
          "202:         \\core_course\\privacy\\provider::delete_data_for_user($approvedlist);",
          "207:     }",
          "212:     public function test_delete_data_for_users() {",
          "214:         $this->resetAfterTest();",
          "216:         $component = 'core_course';",
          "",
          "[Removed Lines]",
          "189:         global $DB;",
          "195:         $this->complete_course($user2);",
          "196:         $records = $DB->get_records('course_modules_completion');",
          "197:         $this->assertCount(2, $records);",
          "198:         $records = $DB->get_records('course_completion_crit_compl');",
          "199:         $this->assertCount(2, $records);",
          "203:         $records = $DB->get_records('course_modules_completion');",
          "204:         $this->assertCount(1, $records);",
          "205:         $records = $DB->get_records('course_completion_crit_compl');",
          "206:         $this->assertCount(1, $records);",
          "213:         global $DB;",
          "",
          "[Added Lines]",
          "246:         $systemcontext = \\context_system::instance();",
          "247:         $user1ctx = \\context_user::instance($user1->id);",
          "248:         $user2ctx = \\context_user::instance($user2->id);",
          "250:         $ufservice1 = \\core_favourites\\service_factory::get_service_for_user_context($user1ctx);",
          "251:         $ufservice1->create_favourite('core_course', 'courses', $this->coursecontext->instanceid,",
          "252:                 $this->coursecontext);",
          "253:         $ufservice2 = \\core_favourites\\service_factory::get_service_for_user_context($user2ctx);",
          "254:         $ufservice2->create_favourite('core_course', 'courses', $this->coursecontext->instanceid,",
          "255:                 $this->coursecontext);",
          "258:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "259:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "260:         $actual = $userlist->get_userids();",
          "261:         $this->assertCount(2, $actual);",
          "264:         $records = $DB->get_records('course_modules_completion');",
          "265:         $this->assertCount(0, $records);",
          "266:         $records = $DB->get_records('course_completion_crit_compl');",
          "267:         $this->assertCount(0, $records);",
          "278:         \\core_course\\privacy\\provider::delete_data_for_all_users_in_context($systemcontext);",
          "281:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "282:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "283:         $actual = $userlist->get_userids();",
          "284:         $this->assertCount(2, $actual);",
          "296:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "297:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "298:         $actual = $userlist->get_userids();",
          "299:         $this->assertCount(0, $actual);",
          "310:         $user3 = $this->getDataGenerator()->create_user();",
          "317:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "318:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "319:         $actual = $userlist->get_userids();",
          "320:         $expected = [$user1->id];",
          "321:         $this->assertCount(1, $actual);",
          "322:         $this->assertEquals($expected, $actual);",
          "325:         $systemcontext = \\context_system::instance();",
          "326:         $user2ctx = \\context_user::instance($user2->id);",
          "327:         $user3ctx = \\context_user::instance($user3->id);",
          "328:         $ufservice2 = \\core_favourites\\service_factory::get_service_for_user_context($user2ctx);",
          "329:         $ufservice2->create_favourite('core_course', 'courses', $this->coursecontext->instanceid,",
          "330:                 $this->coursecontext);",
          "331:         $ufservice3 = \\core_favourites\\service_factory::get_service_for_user_context($user3ctx);",
          "332:         $ufservice3->create_favourite('core_course', 'courses', $this->coursecontext->instanceid,",
          "333:                 $this->coursecontext);",
          "336:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "337:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "338:         $actual = $userlist->get_userids();",
          "339:         $expected = [",
          "340:             $user1->id,",
          "341:             $user2->id,",
          "342:             $user3->id",
          "343:         ];",
          "344:         sort($expected);",
          "345:         sort($actual);",
          "346:         $this->assertCount(3, $actual);",
          "347:         $this->assertEquals($expected, $actual);",
          "355:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "356:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "357:         $actual = $userlist->get_userids();",
          "358:         $expected = [",
          "359:             $user2->id,",
          "360:             $user3->id",
          "361:         ];",
          "362:         sort($expected);",
          "363:         sort($actual);",
          "364:         $this->assertEquals($expected, $actual);",
          "367:         $approvedlist = new \\core_privacy\\local\\request\\approved_contextlist($user2, 'core_course',",
          "368:                 [$systemcontext->id]);",
          "369:         \\core_course\\privacy\\provider::delete_data_for_user($approvedlist);",
          "372:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "373:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "374:         $actual = $userlist->get_userids();",
          "375:         $expected = [",
          "376:             $user2->id,",
          "377:             $user3->id",
          "378:         ];",
          "379:         sort($expected);",
          "380:         sort($actual);",
          "381:         $this->assertEquals($expected, $actual);",
          "384:         $approvedlist = new \\core_privacy\\local\\request\\approved_contextlist($user2, 'core_course',",
          "385:                 [$this->coursecontext->id]);",
          "386:         \\core_course\\privacy\\provider::delete_data_for_user($approvedlist);",
          "389:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "390:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "391:         $actual = $userlist->get_userids();",
          "392:         $expected = [",
          "393:             $user3->id",
          "394:         ];",
          "395:         $this->assertEquals($expected, $actual);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "221:         $this->create_course_completion();",
          "222:         $this->complete_course($user1);",
          "223:         $this->complete_course($user2);",
          "232:         $approveduserids = [$user1->id, $user3->id];",
          "233:         $approvedlist = new \\core_privacy\\local\\request\\approved_userlist($this->coursecontext, $component, $approveduserids);",
          "234:         \\core_course\\privacy\\provider::delete_data_for_users($approvedlist);",
          "245:     }",
          "246: }",
          "",
          "[Removed Lines]",
          "224:         $this->complete_course($user3);",
          "227:         $records = $DB->get_records('course_modules_completion');",
          "228:         $this->assertCount(3, $records);",
          "229:         $records = $DB->get_records('course_completion_crit_compl');",
          "230:         $this->assertCount(3, $records);",
          "237:         $records = $DB->get_records('course_modules_completion');",
          "238:         $this->assertCount(1, $records);",
          "239:         $record = reset($records);",
          "240:         $this->assertEquals($user2->id, $record->userid);",
          "241:         $records = $DB->get_records('course_completion_crit_compl');",
          "242:         $this->assertCount(1, $records);",
          "243:         $record = reset($records);",
          "244:         $this->assertEquals($user2->id, $record->userid);",
          "",
          "[Added Lines]",
          "414:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "415:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "416:         $actual = $userlist->get_userids();",
          "417:         $expected = [",
          "418:             $user1->id,",
          "419:             $user2->id",
          "420:         ];",
          "421:         sort($expected);",
          "422:         sort($actual);",
          "423:         $this->assertCount(2, $actual);",
          "424:         $this->assertEquals($expected, $actual);",
          "426:         $systemcontext = \\context_system::instance();",
          "428:         $user3ctx = \\context_user::instance($user3->id);",
          "429:         $ufservice = \\core_favourites\\service_factory::get_service_for_user_context($user3ctx);",
          "430:         $ufservice->create_favourite('core_course', 'courses', $this->coursecontext->instanceid,",
          "431:                 $this->coursecontext);",
          "434:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "435:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "436:         $actual = $userlist->get_userids();",
          "437:         $expected = [",
          "438:             $user1->id,",
          "439:             $user2->id,",
          "440:             $user3->id",
          "441:         ];",
          "442:         sort($expected);",
          "443:         sort($actual);",
          "444:         $this->assertCount(3, $actual);",
          "445:         $this->assertEquals($expected, $actual);",
          "453:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "454:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "455:         $actual = $userlist->get_userids();",
          "456:         $expected = [$user2->id];",
          "457:         $this->assertCount(1, $actual);",
          "458:         $this->assertEquals($expected, $actual);",
          "461:         $approveduserids = [$user2->id];",
          "462:         $approvedlist = new \\core_privacy\\local\\request\\approved_userlist($systemcontext, $component, $approveduserids);",
          "463:         \\core_course\\privacy\\provider::delete_data_for_users($approvedlist);",
          "466:         $userlist = new \\core_privacy\\local\\request\\userlist($this->coursecontext, 'core_course');",
          "467:         \\core_course\\privacy\\provider::get_users_in_context($userlist);",
          "468:         $actual = $userlist->get_userids();",
          "469:         $expected = [",
          "470:             $user2->id",
          "471:         ];",
          "472:         $this->assertCount(1, $actual);",
          "473:         $this->assertEquals($expected, $actual);",
          "",
          "---------------"
        ],
        "favourites/classes/privacy/provider.php||favourites/classes/privacy/provider.php": [
          "File: favourites/classes/privacy/provider.php -> favourites/classes/privacy/provider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: use \\core_privacy\\local\\metadata\\collection;",
          "30: use \\core_privacy\\local\\request\\context;",
          "31: use \\core_privacy\\local\\request\\approved_contextlist;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: use \\core_privacy\\local\\request\\transform;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "39: class provider implements \\core_privacy\\local\\metadata\\provider, \\core_privacy\\local\\request\\subsystem\\plugin_provider {",
          "",
          "[Added Lines]",
          "40: class provider implements",
          "41:         \\core_privacy\\local\\metadata\\provider,",
          "42:         \\core_privacy\\local\\request\\subsystem\\plugin_provider,",
          "43:         \\core_privacy\\local\\request\\shared_userlist_provider {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:                   FROM {favourite} f",
          "87:                  WHERE userid = :userid",
          "88:                    AND component = :component\";",
          "89:         if (!is_null($itemtype)) {",
          "90:             $sql .= \" AND itemtype = :itemtype\";",
          "91:         }",
          "93:         $contextlist->add_from_sql($sql, $params);",
          "94:     }",
          "",
          "[Removed Lines]",
          "92:         $params = ['userid' => $userid, 'component' => $component, 'itemtype' => $itemtype];",
          "",
          "[Added Lines]",
          "94:         $params = ['userid' => $userid, 'component' => $component];",
          "98:             $params['itemtype'] = $itemtype;",
          "111:     public static function add_userids_for_context(\\core_privacy\\local\\request\\userlist $userlist,",
          "112:                                                    string $itemtype = null) {",
          "113:         if (empty($userlist)) {",
          "114:             return;",
          "115:         }",
          "117:         $params = [",
          "118:             'contextid' => $userlist->get_context()->id,",
          "119:             'component' => $userlist->get_component()",
          "120:         ];",
          "122:         $sql = \"SELECT userid",
          "123:                   FROM {favourite}",
          "124:                  WHERE contextid = :contextid",
          "125:                        AND component = :component\";",
          "127:         if (!is_null($itemtype)) {",
          "128:             $sql .= \" AND itemtype = :itemtype\";",
          "129:             $params['itemtype'] = $itemtype;",
          "130:         }",
          "132:         $userlist->add_from_sql('userid', $sql, $params);",
          "133:     }",
          "145:     public static function get_favourites_info_for_user(int $userid, \\context $context,",
          "146:                                                         string $component, string $itemtype, int $itemid) {",
          "147:         global $DB;",
          "149:         $params = [",
          "150:             'userid' => $userid,",
          "151:             'component' => $component,",
          "152:             'itemtype' => $itemtype,",
          "153:             'itemid' => $itemid,",
          "154:             'contextid' => $context->id",
          "155:         ];",
          "157:         if (!$favourited = $DB->get_record('favourite', $params)) {",
          "158:             return;",
          "159:         }",
          "161:         return [",
          "162:             'starred' => transform::yesno(true),",
          "163:             'ordering' => $favourited->ordering,",
          "164:             'timecreated' => transform::datetime($favourited->timecreated),",
          "165:             'timemodified' => transform::datetime($favourited->timemodified)",
          "166:         ];",
          "167:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "114:         $DB->delete_records_select('favourite', $select, $params);",
          "115:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188:     }",
          "198:     public static function delete_favourites_for_userlist(\\core_privacy\\local\\request\\approved_userlist $userlist,",
          "199:                                                           string $itemtype) {",
          "200:         global $DB;",
          "202:         $userids = $userlist->get_userids();",
          "204:         if (empty($userids)) {",
          "205:             return;",
          "206:         }",
          "208:         $context = $userlist->get_context();",
          "209:         list($usersql, $userparams) = $DB->get_in_or_equal($userids, SQL_PARAMS_NAMED);",
          "211:         $params = [",
          "212:             'component' => $userlist->get_component(),",
          "213:             'itemtype' => $itemtype,",
          "214:             'contextid' => $context->id",
          "215:         ];",
          "217:         $params += $userparams;",
          "218:         $select = \"component = :component AND itemtype = :itemtype AND contextid = :contextid AND userid $usersql\";",
          "220:         $DB->delete_records_select('favourite', $select, $params);",
          "",
          "---------------"
        ],
        "favourites/tests/privacy_test.php||favourites/tests/privacy_test.php": [
          "File: favourites/tests/privacy_test.php -> favourites/tests/privacy_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: use \\core_privacy\\tests\\provider_testcase;",
          "29: use \\core_favourites\\privacy\\provider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: use \\core_privacy\\local\\request\\transform;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:         $ufservice1 = \\core_favourites\\service_factory::get_service_for_user_context($user1context);",
          "66:         $ufservice2 = \\core_favourites\\service_factory::get_service_for_user_context($user2context);",
          "67:         $systemcontext = context_system::instance();",
          "78:         $contextlist = new \\core_privacy\\local\\request\\contextlist();",
          "82:         $this->assertCount(2, $contextlist->get_contextids());",
          "85:         $contextlist = new \\core_privacy\\local\\request\\contextlist();",
          "87:         $this->assertCount(1, $contextlist->get_contextids());",
          "88:     }",
          "",
          "[Removed Lines]",
          "68:         $ufservice1->create_favourite('core_course', 'course', $course1context->instanceid, $systemcontext);",
          "69:         $ufservice1->create_favourite('core_course', 'course', $course2context->instanceid, $systemcontext);",
          "70:         $ufservice2->create_favourite('core_course', 'course', $course2context->instanceid, $systemcontext);",
          "71:         $this->assertCount(2, $ufservice1->find_favourites_by_type('core_course', 'course'));",
          "72:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'course'));",
          "75:         $ufservice1->create_favourite('core_course', 'course', $course1context->instanceid, $user1context);",
          "79:         \\core_favourites\\privacy\\provider::add_contexts_for_userid($contextlist, $user1->id, 'core_course', 'course');",
          "86:         \\core_favourites\\privacy\\provider::add_contexts_for_userid($contextlist, $user2->id, 'core_course', 'course');",
          "",
          "[Added Lines]",
          "69:         $ufservice1->create_favourite('core_course', 'courses', $course1context->instanceid, $systemcontext);",
          "70:         $ufservice1->create_favourite('core_course', 'courses', $course2context->instanceid, $systemcontext);",
          "71:         $ufservice2->create_favourite('core_course', 'courses', $course2context->instanceid, $systemcontext);",
          "72:         $this->assertCount(2, $ufservice1->find_favourites_by_type('core_course', 'courses'));",
          "73:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'courses'));",
          "76:         $ufservice1->create_favourite('core_course', 'courses', $course1context->instanceid, $user1context);",
          "80:         \\core_favourites\\privacy\\provider::add_contexts_for_userid($contextlist, $user1->id, 'core_course', 'courses');",
          "87:         \\core_favourites\\privacy\\provider::add_contexts_for_userid($contextlist, $user2->id, 'core_course', 'courses');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:         $ufservice1 = \\core_favourites\\service_factory::get_service_for_user_context($user1context);",
          "98:         $ufservice2 = \\core_favourites\\service_factory::get_service_for_user_context($user2context);",
          "106:         $approvedcontextlist = new \\core_privacy\\local\\request\\approved_contextlist($user1, 'core_course', [$user1context->id]);",
          "112:     }",
          "114:     public function test_delete_favourites_for_all_users() {",
          "",
          "[Removed Lines]",
          "99:         $ufservice1->create_favourite('core_course', 'course', $course1context->instanceid, $user1context);",
          "100:         $ufservice1->create_favourite('core_course', 'course', $course2context->instanceid, $user1context);",
          "101:         $ufservice2->create_favourite('core_course', 'course', $course2context->instanceid, $user2context);",
          "102:         $this->assertCount(2, $ufservice1->find_favourites_by_type('core_course', 'course'));",
          "103:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'course'));",
          "107:         provider::delete_favourites_for_user($approvedcontextlist, 'core_course', 'course');",
          "110:         $this->assertCount(0, $ufservice1->find_favourites_by_type('core_course', 'course'));",
          "111:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'course'));",
          "",
          "[Added Lines]",
          "100:         $ufservice1->create_favourite('core_course', 'courses', $course1context->instanceid, $user1context);",
          "101:         $ufservice1->create_favourite('core_course', 'courses', $course2context->instanceid, $user1context);",
          "102:         $ufservice2->create_favourite('core_course', 'courses', $course2context->instanceid, $user2context);",
          "103:         $this->assertCount(2, $ufservice1->find_favourites_by_type('core_course', 'courses'));",
          "104:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'courses'));",
          "108:         provider::delete_favourites_for_user($approvedcontextlist, 'core_course', 'courses');",
          "111:         $this->assertCount(0, $ufservice1->find_favourites_by_type('core_course', 'courses'));",
          "112:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'courses'));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:         $this->assertCount(0, $ufservice1->find_favourites_by_type('core_course', 'modules'));",
          "135:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'modules'));",
          "136:     }",
          "137: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     public function test_add_userids_for_context() {",
          "143:         list($user1, $user2, $user1context, $user2context, $course1context, $course2context) = $this->set_up_courses_and_users();",
          "146:         $ufservice1 = \\core_favourites\\service_factory::get_service_for_user_context($user1context);",
          "147:         $ufservice2 = \\core_favourites\\service_factory::get_service_for_user_context($user2context);",
          "148:         $systemcontext = context_system::instance();",
          "149:         $ufservice1->create_favourite('core_course', 'courses', $course1context->instanceid, $systemcontext);",
          "150:         $ufservice1->create_favourite('core_course', 'courses', $course2context->instanceid, $systemcontext);",
          "151:         $ufservice2->create_favourite('core_course', 'courses', $course2context->instanceid, $systemcontext);",
          "152:         $this->assertCount(2, $ufservice1->find_favourites_by_type('core_course', 'courses'));",
          "153:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'courses'));",
          "156:         $ufservice1->create_favourite('core_course', 'courses', $course1context->instanceid, $user1context);",
          "159:         $userlist = new \\core_privacy\\local\\request\\userlist($systemcontext, 'core_course');",
          "160:         provider::add_userids_for_context($userlist, 'courses');",
          "162:         $this->assertCount(2, $userlist->get_userids());",
          "163:         $expected = [",
          "164:             $user1->id,",
          "165:             $user2->id",
          "166:         ];",
          "167:         $this->assertEquals($expected, $userlist->get_userids(), '', 0.0, 10, true);",
          "170:         $userlist = new \\core_privacy\\local\\request\\userlist($user1context, 'core_course');",
          "171:         provider::add_userids_for_context($userlist, 'courses');",
          "173:         $this->assertCount(1, $userlist->get_userids());",
          "174:         $expected = [$user1->id];",
          "175:         $this->assertEquals($expected, $userlist->get_userids());",
          "178:         $userlist = new \\core_privacy\\local\\request\\userlist($user2context, 'core_favourites');",
          "179:         provider::add_userids_for_context($userlist, 'core_course', 'courses');",
          "181:         $this->assertCount(0, $userlist->get_userids());",
          "182:     }",
          "187:     public function test_delete_favourites_for_userlist() {",
          "188:         list($user1, $user2, $user1context, $user2context, $course1context, $course2context) = $this->set_up_courses_and_users();",
          "191:         $systemcontext = context_system::instance();",
          "192:         $ufservice1 = \\core_favourites\\service_factory::get_service_for_user_context($user1context);",
          "193:         $ufservice2 = \\core_favourites\\service_factory::get_service_for_user_context($user2context);",
          "194:         $ufservice1->create_favourite('core_course', 'courses', $course1context->instanceid, $systemcontext);",
          "195:         $ufservice1->create_favourite('core_course', 'courses', $course2context->instanceid, $user1context);",
          "196:         $ufservice2->create_favourite('core_course', 'courses', $course2context->instanceid, $systemcontext);",
          "197:         $this->assertCount(2, $ufservice1->find_favourites_by_type('core_course', 'courses'));",
          "198:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'courses'));",
          "201:         $userlist1 = new \\core_privacy\\local\\request\\userlist($systemcontext, 'core_course');",
          "202:         provider::add_userids_for_context($userlist1, 'courses');",
          "204:         $this->assertCount(2, $userlist1->get_userids());",
          "207:         $userlist2 = new \\core_privacy\\local\\request\\userlist($user1context, 'core_course');",
          "208:         provider::add_userids_for_context($userlist2, 'courses');",
          "210:         $this->assertCount(1, $userlist2->get_userids());",
          "213:         $approveduserlist = new \\core_privacy\\local\\request\\approved_userlist($systemcontext, 'core_course',",
          "214:                 [$user1->id]);",
          "215:         provider::delete_favourites_for_userlist($approveduserlist, 'courses');",
          "217:         $userlist1 = new \\core_privacy\\local\\request\\userlist($systemcontext, 'core_course');",
          "218:         provider::add_userids_for_context($userlist1, 'courses');",
          "219:         $this->assertCount(1, $userlist1->get_userids());",
          "221:         $expected = [$user2->id];",
          "222:         $this->assertEquals($expected, $userlist1->get_userids());",
          "224:         $userlist2 = new \\core_privacy\\local\\request\\userlist($user1context, 'core_course');",
          "225:         provider::add_userids_for_context($userlist2, 'courses');",
          "226:         $expected = [$user1->id];",
          "227:         $this->assertEquals($expected, $userlist2->get_userids());",
          "231:         $approveduserlist = new \\core_privacy\\local\\request\\approved_userlist($user1context, 'core_course',",
          "232:                 [$user2->id]);",
          "233:         provider::delete_favourites_for_userlist($approveduserlist, 'courses');",
          "235:         $userlist2 = new \\core_privacy\\local\\request\\userlist($systemcontext, 'core_course');",
          "236:         provider::add_userids_for_context($userlist2, 'courses');",
          "237:         $this->assertCount(1, $userlist2->get_userids());",
          "239:         $expected = [$user2->id];",
          "240:         $this->assertEquals($expected, $userlist2->get_userids());",
          "243:         $userlist3 = new \\core_privacy\\local\\request\\userlist($user1context, 'core_course');",
          "244:         provider::add_userids_for_context($userlist3, 'courses');",
          "245:         $this->assertCount(1, $userlist3->get_userids());",
          "247:         $expected = [$user1->id];",
          "248:         $this->assertEquals($expected, $userlist3->get_userids());",
          "249:     }",
          "254:     public function test_get_favourites_info_for_user() {",
          "255:         list($user1, $user2, $user1context, $user2context, $course1context, $course2context) = $this->set_up_courses_and_users();",
          "258:         $ufservice1 = \\core_favourites\\service_factory::get_service_for_user_context($user1context);",
          "259:         $ufservice2 = \\core_favourites\\service_factory::get_service_for_user_context($user2context);",
          "260:         $coursefavourite1 = $ufservice1->create_favourite('core_course', 'courses',",
          "261:                 $course1context->instanceid, $course1context);",
          "262:         $this->waitForSecond();",
          "263:         $coursefavourite2 = $ufservice1->create_favourite('core_course', 'courses',",
          "264:                 $course2context->instanceid, $course2context);",
          "265:         $this->waitForSecond();",
          "266:         $coursefavourite3 = $ufservice2->create_favourite('core_course', 'courses',",
          "267:                 $course2context->instanceid, $course2context);",
          "268:         $this->assertCount(2, $ufservice1->find_favourites_by_type('core_course', 'courses'));",
          "269:         $this->assertCount(1, $ufservice2->find_favourites_by_type('core_course', 'courses'));",
          "272:         $favouriteinfo1 = (object) provider::get_favourites_info_for_user($user1->id, $course1context,",
          "273:                 'core_course', 'courses', $course1context->instanceid);",
          "275:         $this->assertEquals(transform::yesno(true), $favouriteinfo1->starred);",
          "276:         $this->assertEquals('', $favouriteinfo1->ordering);",
          "277:         $this->assertEquals(transform::datetime($coursefavourite1->timecreated), $favouriteinfo1->timecreated);",
          "278:         $this->assertEquals(transform::datetime($coursefavourite1->timemodified), $favouriteinfo1->timemodified);",
          "281:         $favouriteinfo2 = (object) provider::get_favourites_info_for_user($user1->id, $course2context,",
          "282:                 'core_course', 'courses', $course2context->instanceid);",
          "284:         $this->assertEquals(transform::yesno(true), $favouriteinfo2->starred);",
          "285:         $this->assertEquals('', $favouriteinfo2->ordering);",
          "286:         $this->assertEquals(transform::datetime($coursefavourite2->timecreated), $favouriteinfo2->timecreated);",
          "287:         $this->assertEquals(transform::datetime($coursefavourite2->timemodified), $favouriteinfo2->timemodified);",
          "290:         $favouriteinfo3 = (object) provider::get_favourites_info_for_user($user2->id, $course2context,",
          "291:                 'core_course', 'courses', $course2context->instanceid);",
          "293:         $this->assertEquals(transform::yesno(true), $favouriteinfo3->starred);",
          "294:         $this->assertEquals('', $favouriteinfo3->ordering);",
          "295:         $this->assertEquals(transform::datetime($coursefavourite3->timecreated), $favouriteinfo3->timecreated);",
          "296:         $this->assertEquals(transform::datetime($coursefavourite3->timemodified), $favouriteinfo3->timemodified);",
          "299:         $favouriteinfo4 = provider::get_favourites_info_for_user($user2->id, $course1context,",
          "300:                 'core_course', 'courses', $course1context->instanceid);",
          "302:         $this->assertEmpty($favouriteinfo4);",
          "303:     }",
          "",
          "---------------"
        ],
        "lang/en/course.php||lang/en/course.php": [
          "File: lang/en/course.php -> lang/en/course.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: $string['favourite'] = 'Starred course';",
          "29: $string['privacy:perpage'] = 'The number of courses to show per page.';",
          "30: $string['privacy:completionpath'] = 'Course completion';",
          "31: $string['privacy:metadata:completionsummary'] = 'The course contains completion information about the user.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: $string['privacy:favouritespath'] = 'Course starred information';",
          "33: $string['privacy:metadata:favouritessummary'] = 'The course contains information relating to the course being starred by the user.';",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2794:         upgrade_main_savepoint(true, 2018111301.00);",
          "2795:     }",
          "2797:     return true;",
          "2798: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2797:     if ($oldversion < 2018111900.00) {",
          "2799:         $favouritedcourses = $DB->get_records('favourite', ['component' => 'core_course', 'itemtype' => 'courses']);",
          "2801:         foreach ($favouritedcourses as $fc) {",
          "2802:             $coursecontext = \\context_course::instance($fc->itemid);",
          "2803:             $fc->contextid = $coursecontext->id;",
          "2804:             $DB->update_record('favourite', $fc);",
          "2805:         }",
          "2807:         upgrade_main_savepoint(true, 2018111900.00);",
          "2808:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018111800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018111900.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed12ba6ba81b83301f1c7ce6d6a2350e80afaa93",
      "candidate_info": {
        "commit_hash": "ed12ba6ba81b83301f1c7ce6d6a2350e80afaa93",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/ed12ba6ba81b83301f1c7ce6d6a2350e80afaa93",
        "files": [
          "admin/settings/analytics.php",
          "admin/tool/analytics/classes/output/form/edit_model.php",
          "admin/tool/analytics/model.php",
          "analytics/classes/manager.php",
          "analytics/classes/model.php",
          "lang/en/analytics.php",
          "lib/classes/plugininfo/mlbackend.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-60520 analytics: Per-model ml backend",
        "before_after_code_files": [
          "admin/settings/analytics.php||admin/settings/analytics.php",
          "admin/tool/analytics/classes/output/form/edit_model.php||admin/tool/analytics/classes/output/form/edit_model.php",
          "admin/tool/analytics/model.php||admin/tool/analytics/model.php",
          "analytics/classes/manager.php||analytics/classes/manager.php",
          "analytics/classes/model.php||analytics/classes/model.php",
          "lang/en/analytics.php||lang/en/analytics.php",
          "lib/classes/plugininfo/mlbackend.php||lib/classes/plugininfo/mlbackend.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/analytics.php||admin/settings/analytics.php": [
          "File: admin/settings/analytics.php -> admin/settings/analytics.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:             $predictors[$fullclassname] = new lang_string('pluginname', $pluginname);",
          "38:         }",
          "39:         $settings->add(new \\core_analytics\\admin_setting_predictor('analytics/predictionsprocessor',",
          "42:         );",
          "",
          "[Removed Lines]",
          "40:             new lang_string('predictionsprocessor', 'analytics'), new lang_string('predictionsprocessor_help', 'analytics'),",
          "41:             '\\mlbackend_php\\processor', $predictors)",
          "",
          "[Added Lines]",
          "40:             new lang_string('defaultpredictionsprocessor', 'analytics'), new lang_string('predictionsprocessor_help', 'analytics'),",
          "41:             \\core_analytics\\manager::default_mlbackend(), $predictors)",
          "",
          "---------------"
        ],
        "admin/tool/analytics/classes/output/form/edit_model.php||admin/tool/analytics/classes/output/form/edit_model.php": [
          "File: admin/tool/analytics/classes/output/form/edit_model.php -> admin/tool/analytics/classes/output/form/edit_model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:         $mform->addElement('select', 'timesplitting', get_string('timesplittingmethod', 'analytics'), $timesplittings);",
          "73:         $mform->addHelpButton('timesplitting', 'timesplittingmethod', 'analytics');",
          "75:         $mform->addElement('hidden', 'id', $this->_customdata['id']);",
          "76:         $mform->setType('id', PARAM_INT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:         $defaultprocessor = \\core_analytics\\manager::get_predictions_processor_name(",
          "76:             \\core_analytics\\manager::get_predictions_processor()",
          "77:         );",
          "78:         $predictionprocessors = ['' => get_string('defaultpredictoroption', 'analytics', $defaultprocessor)];",
          "79:         foreach ($this->_customdata['predictionprocessors'] as $classname => $predictionsprocessor) {",
          "80:             $optionname = \\tool_analytics\\output\\helper::class_to_option($classname);",
          "81:             $predictionprocessors[$optionname] = \\core_analytics\\manager::get_predictions_processor_name($predictionsprocessor);",
          "82:         }",
          "84:         $mform->addElement('select', 'predictionsprocessor', get_string('predictionsprocessor', 'analytics'),",
          "85:             $predictionprocessors);",
          "86:         $mform->addHelpButton('predictionsprocessor', 'predictionsprocessor', 'analytics');",
          "",
          "---------------"
        ],
        "admin/tool/analytics/model.php||admin/tool/analytics/model.php": [
          "File: admin/tool/analytics/model.php -> admin/tool/analytics/model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:             'id' => $model->get_id(),",
          "111:             'model' => $model,",
          "112:             'indicators' => $model->get_potential_indicators(),",
          "114:         );",
          "115:         $mform = new \\tool_analytics\\output\\form\\edit_model(null, $customdata);",
          "",
          "[Removed Lines]",
          "113:             'timesplittings' => \\core_analytics\\manager::get_enabled_time_splitting_methods()",
          "",
          "[Added Lines]",
          "113:             'timesplittings' => \\core_analytics\\manager::get_enabled_time_splitting_methods(),",
          "114:             'predictionprocessors' => \\core_analytics\\manager::get_all_prediction_processors()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:                 $indicators[] = \\core_analytics\\manager::get_indicator($indicatorclass);",
          "127:             }",
          "128:             $timesplitting = \\tool_analytics\\output\\helper::option_to_class($data->timesplitting);",
          "130:             redirect(new \\moodle_url('/admin/tool/analytics/index.php'));",
          "131:         }",
          "",
          "[Removed Lines]",
          "129:             $model->update($data->enabled, $indicators, $timesplitting);",
          "",
          "[Added Lines]",
          "130:             $predictionsprocessor = \\tool_analytics\\output\\helper::option_to_class($data->predictionsprocessor);",
          "131:             $model->update($data->enabled, $indicators, $timesplitting, $predictionsprocessor);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:         $callable = array('\\tool_analytics\\output\\helper', 'class_to_option');",
          "138:         $modelobj->indicators = array_map($callable, json_decode($modelobj->indicators));",
          "139:         $modelobj->timesplitting = \\tool_analytics\\output\\helper::class_to_option($modelobj->timesplitting);",
          "140:         $mform->set_data($modelobj);",
          "141:         $mform->display();",
          "142:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:         $modelobj->predictionsprocessor = \\tool_analytics\\output\\helper::class_to_option($modelobj->predictionsprocessor);",
          "",
          "---------------"
        ],
        "analytics/classes/manager.php||analytics/classes/manager.php": [
          "File: analytics/classes/manager.php -> analytics/classes/manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: class manager {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     const DEFAULT_MLBACKEND = '\\mlbackend_php\\processor';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "129:         $checkisready = intval($checkisready);",
          "132:             $predictionclass = get_config('analytics', 'predictionsprocessor');",
          "133:         }",
          "135:         if (empty($predictionclass)) {",
          "138:         }",
          "140:         if (!class_exists($predictionclass)) {",
          "",
          "[Removed Lines]",
          "131:         if ($predictionclass === false) {",
          "137:             $predictionclass = '\\mlbackend_php\\processor';",
          "",
          "[Added Lines]",
          "136:         if (!$predictionclass) {",
          "142:             $predictionclass = self::default_mlbackend();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "179:         return $predictionprocessors;",
          "180:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:     public static function get_predictions_processor_name(\\core_analytics\\predictor $predictionsprocessor) {",
          "194:             $component = substr(get_class($predictionsprocessor), 0, strpos(get_class($predictionsprocessor), '\\\\', 1));",
          "195:         return get_string('pluginname', $component);",
          "196:     }",
          "204:     public static function is_mlbackend_used($plugin) {",
          "205:         $models = self::get_all_models();",
          "206:         foreach ($models as $model) {",
          "207:             $processor = $model->get_predictions_processor();",
          "208:             $noprefixnamespace = ltrim(get_class($processor), '\\\\');",
          "209:             $processorplugin = substr($noprefixnamespace, 0, strpos($noprefixnamespace, '\\\\'));",
          "210:             if ($processorplugin == $plugin) {",
          "211:                 return true;",
          "212:             }",
          "213:         }",
          "216:         $defaultprocessorclass = get_config('analytics', 'predictionsprocessor');",
          "217:         $pluginclass = '\\\\' . $plugin . '\\\\processor';",
          "218:         if ($pluginclass === $defaultprocessorclass) {",
          "219:             return true;",
          "220:         }",
          "222:         return false;",
          "223:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "546:         }",
          "547:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:     public static function default_mlbackend() {",
          "598:         return self::DEFAULT_MLBACKEND;",
          "599:     }",
          "",
          "---------------"
        ],
        "analytics/classes/model.php||analytics/classes/model.php": [
          "File: analytics/classes/model.php -> analytics/classes/model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     protected $target = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     protected $predictionsprocessor = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:         global $USER, $DB;",
          "342:         \\core_analytics\\manager::check_can_manage_models();",
          "",
          "[Removed Lines]",
          "339:     public static function create(\\core_analytics\\local\\target\\base $target, array $indicators, $timesplittingid = false) {",
          "",
          "[Added Lines]",
          "344:     public static function create(\\core_analytics\\local\\target\\base $target, array $indicators,",
          "345:                                   $timesplittingid = false, $processor = false) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353:         $modelobj->timemodified = $now;",
          "354:         $modelobj->usermodified = $USER->id;",
          "356:         $id = $DB->insert_record('analytics_models', $modelobj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:         if ($processor &&",
          "363:                 !self::is_valid($processor, '\\core_analytics\\classifier') &&",
          "364:                 !self::is_valid($processor, '\\core_analytics\\regressor')) {",
          "365:             throw new \\coding_exception('The provided predictions processor \\\\' . $processor . '\\processor is not valid');",
          "366:         } else {",
          "367:             $modelobj->predictionsprocessor = $processor;",
          "368:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417:         global $USER, $DB;",
          "419:         \\core_analytics\\manager::check_can_manage_models();",
          "",
          "[Removed Lines]",
          "416:     public function update($enabled, $indicators = false, $timesplittingid = '') {",
          "",
          "[Added Lines]",
          "431:     public function update($enabled, $indicators = false, $timesplittingid = '', $predictionsprocessor = false) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "433:             $timesplittingid = $this->model->timesplitting;",
          "434:         }",
          "436:         if ($this->model->timesplitting !== $timesplittingid ||",
          "440:             $this->clear();",
          "",
          "[Removed Lines]",
          "437:                 $this->model->indicators !== $indicatorsstr) {",
          "",
          "[Added Lines]",
          "451:         if ($predictionsprocessor === false) {",
          "453:             $predictionsprocessor = $this->model->predictionsprocessor;",
          "454:         }",
          "457:                 $this->model->indicators !== $indicatorsstr ||",
          "458:                 $this->model->predictionsprocessor !== $predictionsprocessor) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "458:         $this->model->enabled = intval($enabled);",
          "459:         $this->model->indicators = $indicatorsstr;",
          "460:         $this->model->timesplitting = $timesplittingid;",
          "461:         $this->model->timemodified = $now;",
          "462:         $this->model->usermodified = $USER->id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "482:         $this->model->predictionsprocessor = $predictionsprocessor;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "477:         $this->clear();",
          "481:         $predictor->delete_output_dir($this->get_output_dir(array(), true));",
          "483:         $DB->delete_records('analytics_models', array('id' => $this->model->id));",
          "",
          "[Removed Lines]",
          "480:         $predictor = \\core_analytics\\manager::get_predictions_processor();",
          "",
          "[Added Lines]",
          "502:         $predictor = $this->get_predictions_processor();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "516:         $this->heavy_duty_mode();",
          "521:         $datasets = $this->get_analyser()->get_labelled_data();",
          "",
          "[Removed Lines]",
          "519:         $predictor = \\core_analytics\\manager::get_predictions_processor();",
          "",
          "[Added Lines]",
          "541:         $predictor = $this->get_predictions_processor();",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "608:         $outputdir = $this->get_output_dir(array('execution'));",
          "613:         $datasets = $this->get_analyser()->get_labelled_data();",
          "",
          "[Removed Lines]",
          "611:         $predictor = \\core_analytics\\manager::get_predictions_processor();",
          "",
          "[Added Lines]",
          "633:         $predictor = $this->get_predictions_processor();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "679:         if (!$this->is_static()) {",
          "681:         }",
          "683:         $samplesdata = $this->get_analyser()->get_unlabelled_data();",
          "",
          "[Removed Lines]",
          "680:             $predictor = \\core_analytics\\manager::get_predictions_processor();",
          "",
          "[Added Lines]",
          "702:             $predictor = $this->get_predictions_processor();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "738:         return $result;",
          "739:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "768:     public function get_predictions_processor() {",
          "769:         return manager::get_predictions_processor($this->model->predictionsprocessor);",
          "770:     }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1457:         \\core_analytics\\manager::check_can_manage_models();",
          "1461:         $predictor->clear_model($this->get_unique_id(), $this->get_output_dir());",
          "1463:         $predictionids = $DB->get_fieldset_select('analytics_predictions', 'id', 'modelid = :modelid',",
          "",
          "[Removed Lines]",
          "1460:         $predictor = \\core_analytics\\manager::get_predictions_processor();",
          "",
          "[Added Lines]",
          "1491:         $predictor = $this->get_predictions_processor();",
          "",
          "---------------"
        ],
        "lang/en/analytics.php||lang/en/analytics.php": [
          "File: lang/en/analytics.php -> lang/en/analytics.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: $string['analyticssettings'] = 'Analytics settings';",
          "32: $string['coursetoolong'] = 'The course is too long';",
          "33: $string['enabledtimesplittings'] = 'Time splitting methods';",
          "34: $string['disabledmodel'] = 'Disabled model';",
          "35: $string['erroralreadypredict'] = 'File {$a} has already been used to generate predictions.';",
          "36: $string['errorcannotreaddataset'] = 'Dataset file {$a} can not be read';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: $string['defaultpredictionsprocessor'] = 'Default predictions processor';",
          "35: $string['defaultpredictoroption'] = 'Default processor ({$a})';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: $string['onlycli'] = 'Analytics processes execution via command line only';",
          "83: $string['onlycliinfo'] = 'Analytics processes like evaluating models, training machine learning algorithms or getting predictions can take some time, they will run as cron tasks and they can be forced via command line. Disable this setting if you want your site managers to be able to run these processes manually via web interface';",
          "84: $string['predictionsprocessor'] = 'Predictions processor';",
          "86: $string['privacy:metadata:analytics:indicatorcalc'] = 'Indicator calculations';",
          "87: $string['privacy:metadata:analytics:indicatorcalc:starttime'] = 'Calculation start time';",
          "88: $string['privacy:metadata:analytics:indicatorcalc:endtime'] = 'Calculation end time';",
          "",
          "[Removed Lines]",
          "85: $string['predictionsprocessor_help'] = 'A predictions processor is the machine-learning backend that processes the datasets generated by calculating models\\' indicators and targets. All trained algorithms and predictions will be deleted if you change to another predictions processor.';",
          "",
          "[Added Lines]",
          "87: $string['predictionsprocessor_help'] = 'A predictions processor is the machine-learning backend that processes the datasets generated by calculating models\\' indicators and targets. Each model can use a different processor, the one specified here will be the default value.';",
          "",
          "---------------"
        ],
        "lib/classes/plugininfo/mlbackend.php||lib/classes/plugininfo/mlbackend.php": [
          "File: lib/classes/plugininfo/mlbackend.php -> lib/classes/plugininfo/mlbackend.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     public function is_uninstall_allowed() {",
          "44:     }",
          "",
          "[Removed Lines]",
          "43:         return true;",
          "",
          "[Added Lines]",
          "44:         return !\\core_analytics\\manager::is_mlbackend_used('mlbackend_' . $this->name);",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2565:         upgrade_main_savepoint(true, 2018101800.00);",
          "2566:     }",
          "2568:     return true;",
          "2569: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2568:     if ($oldversion < 2018102200.00) {",
          "2570:         $table = new xmldb_table('analytics_models');",
          "2571:         $field = new xmldb_field('predictionsprocessor', XMLDB_TYPE_CHAR, '255', null, null, null, null, 'timesplitting');",
          "2574:         if (!$dbman->field_exists($table, $field)) {",
          "2575:             $dbman->add_field($table, $field);",
          "2576:         }",
          "2579:         upgrade_main_savepoint(true, 2018102200.00);",
          "2580:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018101900.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018102200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "446d8483a3359ab18cdd8a35321c5e9622806a38",
      "candidate_info": {
        "commit_hash": "446d8483a3359ab18cdd8a35321c5e9622806a38",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/446d8483a3359ab18cdd8a35321c5e9622806a38",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.5beta+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '35';                       // This version's branch.",
          "39: $maturity = MATURITY_BETA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018042700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5beta+ (Build: 20180427)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018050200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.5beta+ (Build: 20180502)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1ac8ae517d96996b74d94d95a71be4e029f65265",
      "candidate_info": {
        "commit_hash": "1ac8ae517d96996b74d94d95a71be4e029f65265",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1ac8ae517d96996b74d94d95a71be4e029f65265",
        "files": [
          "auth/classes/external.php",
          "auth/tests/external_test.php",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-63742-master' of git://github.com/jleyva/moodle",
        "before_after_code_files": [
          "auth/classes/external.php||auth/classes/external.php",
          "auth/tests/external_test.php||auth/tests/external_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "auth/classes/external.php||auth/classes/external.php": [
          "File: auth/classes/external.php -> auth/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:             )",
          "337:         );",
          "338:     }",
          "339: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:     public static function resend_confirmation_email_parameters() {",
          "347:         return new external_function_parameters(",
          "348:             array(",
          "349:                 'username' => new external_value(core_user::get_property_type('username'), 'Username.'),",
          "350:                 'password' => new external_value(core_user::get_property_type('password'), 'Plain text password.'),",
          "351:                 'redirect' => new external_value(PARAM_LOCALURL, 'Redirect the user to this site url after confirmation.',",
          "352:                     VALUE_DEFAULT, ''),",
          "353:             )",
          "354:         );",
          "355:     }",
          "367:     public static function resend_confirmation_email($username, $password, $redirect = '') {",
          "368:         global $PAGE;",
          "370:         $warnings = array();",
          "371:         $params = self::validate_parameters(",
          "372:             self::resend_confirmation_email_parameters(),",
          "373:             array(",
          "374:                 'username' => $username,",
          "375:                 'password' => $password,",
          "376:                 'redirect' => $redirect,",
          "377:             )",
          "378:         );",
          "380:         $context = context_system::instance();",
          "381:         $PAGE->set_context($context);   // Need by internal APIs.",
          "382:         $username = trim(core_text::strtolower($params['username']));",
          "383:         $password = $params['password'];",
          "385:         if (is_restored_user($username)) {",
          "386:             throw new moodle_exception('restoredaccountresetpassword', 'webservice');",
          "387:         }",
          "389:         $user = authenticate_user_login($username, $password);",
          "391:         if (empty($user)) {",
          "392:             throw new moodle_exception('invalidlogin');",
          "393:         }",
          "395:         if ($user->confirmed) {",
          "396:             throw new moodle_exception('alreadyconfirmed');",
          "397:         }",
          "400:         $confirmationurl = null;",
          "401:         if (!empty($params['redirect'])) {",
          "403:             $redirect = new moodle_url($params['redirect']);",
          "405:             $confirmationurl = new moodle_url('/login/confirm.php', array('redirect' => $redirect->out()));",
          "406:         }",
          "407:         $status = send_confirmation_email($user, $confirmationurl);",
          "409:         return array(",
          "410:             'status' => $status,",
          "411:             'warnings' => $warnings,",
          "412:         );",
          "413:     }",
          "421:     public static function resend_confirmation_email_returns() {",
          "423:         return new external_single_structure(",
          "424:             array(",
          "425:                 'status' => new external_value(PARAM_BOOL, 'True if the confirmation email was sent, false otherwise.'),",
          "426:                 'warnings'  => new external_warnings(),",
          "427:             )",
          "428:         );",
          "429:     }",
          "",
          "---------------"
        ],
        "auth/tests/external_test.php||auth/tests/external_test.php": [
          "File: auth/tests/external_test.php -> auth/tests/external_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: class core_auth_external_testcase extends externallib_advanced_testcase {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     protected $oldlog;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         $this->resetAfterTest(true);",
          "50:         $CFG->registerauth = 'email';",
          "51:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:         $this->oldlog = ini_get('error_log');",
          "57:         ini_set('error_log', \"$CFG->dataroot/testlog.log\");",
          "58:     }",
          "63:     protected function tearDown() {",
          "64:         ini_set('error_log', $this->oldlog);",
          "65:         parent::tearDown();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:             core_auth_external::is_age_digital_consent_verification_enabled_returns(), $result);",
          "116:         $this->assertTrue($result['status']);",
          "117:     }",
          "118: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:     public function test_resend_confirmation_email() {",
          "138:         global $DB;",
          "140:         $username = 'pepe';",
          "141:         $password = 'abcdefA\u00aa.\u00aa\u00aa!!3';",
          "142:         $firstname = 'Pepe';",
          "143:         $lastname = 'P\u00e9rez';",
          "144:         $email = 'myemail@no.zbc';",
          "147:         $result = auth_email_external::signup_user($username, $password, $firstname, $lastname, $email);",
          "148:         $result = external_api::clean_returnvalue(auth_email_external::signup_user_returns(), $result);",
          "149:         $this->assertTrue($result['success']);",
          "150:         $this->assertEmpty($result['warnings']);",
          "152:         $result = core_auth_external::resend_confirmation_email($username, $password);",
          "153:         $result = external_api::clean_returnvalue(core_auth_external::resend_confirmation_email_returns(), $result);",
          "154:         $this->assertTrue($result['status']);",
          "155:         $this->assertEmpty($result['warnings']);",
          "156:         $confirmed = $DB->get_field('user', 'confirmed', array('username' => $username));",
          "157:         $this->assertEquals(0, $confirmed);",
          "158:     }",
          "163:     public function test_resend_confirmation_email_invalid_username() {",
          "165:         $username = 'pepe';",
          "166:         $password = 'abcdefA\u00aa.\u00aa\u00aa!!3';",
          "167:         $firstname = 'Pepe';",
          "168:         $lastname = 'P\u00e9rez';",
          "169:         $email = 'myemail@no.zbc';",
          "172:         $result = auth_email_external::signup_user($username, $password, $firstname, $lastname, $email);",
          "173:         $result = external_api::clean_returnvalue(auth_email_external::signup_user_returns(), $result);",
          "174:         $this->assertTrue($result['success']);",
          "175:         $this->assertEmpty($result['warnings']);",
          "177:         $_SERVER['HTTP_USER_AGENT'] = 'no browser'; // Hack around missing user agent in CLI scripts.",
          "178:         $this->expectException('moodle_exception');",
          "179:         $this->expectExceptionMessage('error/invalidlogin');",
          "180:         $result = core_auth_external::resend_confirmation_email('abc', $password);",
          "181:     }",
          "186:     public function test_resend_confirmation_email_invalid_password() {",
          "188:         $username = 'pepe';",
          "189:         $password = 'abcdefA\u00aa.\u00aa\u00aa!!3';",
          "190:         $firstname = 'Pepe';",
          "191:         $lastname = 'P\u00e9rez';",
          "192:         $email = 'myemail@no.zbc';",
          "195:         $result = auth_email_external::signup_user($username, $password, $firstname, $lastname, $email);",
          "196:         $result = external_api::clean_returnvalue(auth_email_external::signup_user_returns(), $result);",
          "197:         $this->assertTrue($result['success']);",
          "198:         $this->assertEmpty($result['warnings']);",
          "200:         $_SERVER['HTTP_USER_AGENT'] = 'no browser'; // Hack around missing user agent in CLI scripts.",
          "201:         $this->expectException('moodle_exception');",
          "202:         $this->expectExceptionMessage('error/invalidlogin');",
          "203:         $result = core_auth_external::resend_confirmation_email($username, 'abc');",
          "204:     }",
          "209:     public function test_resend_confirmation_email_already_confirmed_user() {",
          "210:         global $DB;",
          "212:         $username = 'pepe';",
          "213:         $password = 'abcdefA\u00aa.\u00aa\u00aa!!3';",
          "214:         $firstname = 'Pepe';",
          "215:         $lastname = 'P\u00e9rez';",
          "216:         $email = 'myemail@no.zbc';",
          "219:         $result = auth_email_external::signup_user($username, $password, $firstname, $lastname, $email);",
          "220:         $result = external_api::clean_returnvalue(auth_email_external::signup_user_returns(), $result);",
          "221:         $this->assertTrue($result['success']);",
          "222:         $this->assertEmpty($result['warnings']);",
          "223:         $secret = $DB->get_field('user', 'secret', array('username' => $username));",
          "226:         $result = core_auth_external::confirm_user($username, $secret);",
          "227:         $result = external_api::clean_returnvalue(core_auth_external::confirm_user_returns(), $result);",
          "228:         $this->assertTrue($result['success']);",
          "230:         $this->expectException('moodle_exception');",
          "231:         $this->expectExceptionMessage('error/alreadyconfirmed');",
          "232:         core_auth_external::resend_confirmation_email($username, $password);",
          "233:     }",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         'ajax'          => true,",
          "67:         'loginrequired' => false,",
          "68:     ),",
          "69:     'core_badges_get_user_badges' => array(",
          "70:         'classname'     => 'core_badges_external',",
          "71:         'methodname'    => 'get_user_badges',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     'core_auth_resend_confirmation_email' => array(",
          "70:         'classname'   => 'core_auth_external',",
          "71:         'methodname'  => 'resend_confirmation_email',",
          "72:         'description' => 'Resend confirmation email.',",
          "73:         'type'        => 'write',",
          "74:         'ajax'          => true,",
          "75:         'loginrequired' => false,",
          "76:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018102900.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018103000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}