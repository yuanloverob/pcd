{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd04ea6f5704ad3b6132fe125feeb6d9ed5ffae3",
      "candidate_info": {
        "commit_hash": "bd04ea6f5704ad3b6132fe125feeb6d9ed5ffae3",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/bd04ea6f5704ad3b6132fe125feeb6d9ed5ffae3",
        "files": [
          "src/Controllers/BadasoRolePermissionController.php"
        ],
        "message": "remove comment",
        "before_after_code_files": [
          "src/Controllers/BadasoRolePermissionController.php||src/Controllers/BadasoRolePermissionController.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/BadasoRolePermissionController.php||src/Controllers/BadasoRolePermissionController.php": [
          "File: src/Controllers/BadasoRolePermissionController.php -> src/Controllers/BadasoRolePermissionController.php"
        ]
      }
    },
    {
      "candidate_hash": "4fcae7e25656ecd1fc1c10db787146aff46ed033",
      "candidate_info": {
        "commit_hash": "4fcae7e25656ecd1fc1c10db787146aff46ed033",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/4fcae7e25656ecd1fc1c10db787146aff46ed033",
        "files": [
          "composer.json",
          "src/resources/js/components/BadasoUploadFile.vue",
          "src/resources/js/components/BadasoUploadFileMultiple.vue",
          "src/resources/js/components/BadasoUploadImage.vue",
          "src/resources/js/components/BadasoUploadImageMultiple.vue"
        ],
        "message": "add filter mimeType",
        "before_after_code_files": [
          "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
          "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
          "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
          "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086",
          "https://github.com/uasoft-indonesia/badaso/pull/807"
        ],
        "olp_code_files": {
          "patch": [
            "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
            "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
            "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
            "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
          ],
          "candidate": [
            "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
            "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
            "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
            "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
          ]
        }
      },
      "candidate_diff": {
        "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
          "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:           });",
          "337:           return;",
          "338:         }",
          "340:         this.uploadFile(files[0]);",
          "341:       }",
          "342:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
          "340:           this.$vs.notify({",
          "341:             title: this.$t(\"alert.danger\"),",
          "342:             text: \"File type not allowed\",",
          "343:             color: \"danger\",",
          "344:           });",
          "345:           return;",
          "346:         }",
          "",
          "---------------"
        ],
        "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
          "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "367:             });",
          "368:             return;",
          "369:           }",
          "371:           this.uploadFile(file);",
          "372:         }",
          "373:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
          "371:             this.$vs.notify({",
          "372:               title: this.$t(\"alert.danger\"),",
          "373:               text: \"File type not allowed\",",
          "374:               color: \"danger\",",
          "375:             });",
          "376:             return;",
          "377:           }",
          "",
          "---------------"
        ],
        "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
          "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:           });",
          "361:           return;",
          "362:         }",
          "364:         this.uploadImage(files[0]);",
          "365:       }",
          "366:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
          "364:           this.$vs.notify({",
          "365:             title: this.$t(\"alert.danger\"),",
          "366:             text: \"File type not allowed\",",
          "367:             color: \"danger\",",
          "368:           });",
          "369:           return;",
          "370:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "397:     uploadImage(file) {",
          "398:       const files = new FormData();",
          "399:       files.append(\"upload\", file);",
          "401:       files.append(\"working_dir\", this.getActiveFolder);",
          "402:       this.$api.badasoFile",
          "403:         .uploadUsingLfm(files)",
          "",
          "[Removed Lines]",
          "400:       files.append(\"type\", \"image\");",
          "",
          "[Added Lines]",
          "407:       files.append(\"type\", file.type);",
          "",
          "---------------"
        ],
        "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
          "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "395:             });",
          "396:             return;",
          "397:           }",
          "399:           this.uploadImage(file);",
          "400:         }",
          "401:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
          "399:             this.$vs.notify({",
          "400:               title: this.$t(\"alert.danger\"),",
          "401:               text: \"File type not allowed\",",
          "402:               color: \"danger\",",
          "403:             });",
          "404:             return;",
          "405:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa86f498d777158254cfe7a6b7a80aeda417cdd2",
      "candidate_info": {
        "commit_hash": "fa86f498d777158254cfe7a6b7a80aeda417cdd2",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/fa86f498d777158254cfe7a6b7a80aeda417cdd2",
        "files": [
          "src/resources/js/lang/modules/en.js",
          "src/resources/js/lang/modules/id.js",
          "src/resources/js/pages/database-management/add.vue",
          "src/resources/js/pages/database-management/edit.vue"
        ],
        "message": "add notification for unsigned attribute relation",
        "before_after_code_files": [
          "src/resources/js/lang/modules/en.js||src/resources/js/lang/modules/en.js",
          "src/resources/js/lang/modules/id.js||src/resources/js/lang/modules/id.js",
          "src/resources/js/pages/database-management/add.vue||src/resources/js/pages/database-management/add.vue",
          "src/resources/js/pages/database-management/edit.vue||src/resources/js/pages/database-management/edit.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/resources/js/lang/modules/en.js||src/resources/js/lang/modules/en.js": [
          "File: src/resources/js/lang/modules/en.js -> src/resources/js/lang/modules/en.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1043:         crud:",
          "1044:           \"Make sure the table has not been generated with CRUD Management if you want to edit or drop it.\",",
          "1045:         notAllowed: \"You're not allowed to edit.\",",
          "1046:       },",
          "1047:       error: {",
          "1048:         fieldName: \"Field name is required.\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1046:         fieldAttUnsigned: \"Attribute field relation must 'Unsigned'.\",",
          "",
          "---------------"
        ],
        "src/resources/js/lang/modules/id.js||src/resources/js/lang/modules/id.js": [
          "File: src/resources/js/lang/modules/id.js -> src/resources/js/lang/modules/id.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1039:           'Hanya jenis kolom berikut yang dapat \"diubah\": Big Integer, BLOB, Boolean, Date, Datetime, Decimal, Float, Integer, JSON, Long Text, Medium Text, Set, Small Integer, Varchar, Text dan Time.',",
          "1040:         crud:",
          "1041:           \"Pastikan tabel belum dibuat dengan CRUD Management jika ingin mengedit atau menghapus tabel.\",",
          "1042:       },",
          "1043:       error: {",
          "1044:         fieldName: \"Field name dibutuhkan.\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1043:         fieldAttUnsigned: \"Atribut field relasi harus 'Unsigned'\",",
          "",
          "---------------"
        ],
        "src/resources/js/pages/database-management/add.vue||src/resources/js/pages/database-management/add.vue": [
          "File: src/resources/js/pages/database-management/add.vue -> src/resources/js/pages/database-management/add.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:             if (error.errors[\"rows.0.fieldType\"]) {",
          "705:               message = error.errors[\"rows.0.fieldType\"][0];",
          "706:             }",
          "707:             this.$vs.notify({",
          "708:               title: this.$t(\"alert.danger\"),",
          "710:               color: \"danger\",",
          "711:             });",
          "712:           });",
          "713:       } else {",
          "714:         if (this.$v.databaseData.rows.$invalid) {",
          "",
          "[Removed Lines]",
          "709:               text: message,",
          "",
          "[Added Lines]",
          "707:              if(error.errors.code.indexOf(\"HY000\") == 0){",
          "708:               this.$vs.notify({",
          "709:               title: this.$t(\"alert.danger\"),",
          "710:               text : this.$t('database.edit.warning.fieldAttUnsigned'),",
          "711:               color: \"danger\",",
          "712:             });",
          "713:             }else{",
          "716:               text : message ? message : this.$t('database.warning.errorOnRequest'),",
          "719:             }",
          "",
          "---------------"
        ],
        "src/resources/js/pages/database-management/edit.vue||src/resources/js/pages/database-management/edit.vue": [
          "File: src/resources/js/pages/database-management/edit.vue -> src/resources/js/pages/database-management/edit.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "740:             if (error.errors.table) {",
          "741:               message = error.errors.table[0];",
          "742:             }",
          "744:             this.$vs.notify({",
          "745:               title: this.$t(\"alert.danger\"),",
          "746:               text : message ? message : this.$t('database.warning.errorOnRequest'),",
          "747:               color: \"danger\",",
          "748:             });",
          "749:           });",
          "750:       } else {",
          "751:         if (this.$v.databaseData.fields.modifiedFields.$invalid) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "743:             if(error.errors.code.indexOf(\"HY000\") == 0){",
          "744:               this.$vs.notify({",
          "745:               title: this.$t(\"alert.danger\"),",
          "746:               text : this.$t('database.edit.warning.fieldAttUnsigned'),",
          "747:               color: \"danger\",",
          "748:             });",
          "749:             }else{",
          "755:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8e648db3f2ffbf055c8c76bc10c45a305b7c58dd",
      "candidate_info": {
        "commit_hash": "8e648db3f2ffbf055c8c76bc10c45a305b7c58dd",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/8e648db3f2ffbf055c8c76bc10c45a305b7c58dd",
        "files": [
          "src/Commands/BadasoTestSetup.php",
          "src/Helpers/CallHelperTest.php",
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "#514 | Unit test for Crud Management",
        "before_after_code_files": [
          "src/Commands/BadasoTestSetup.php||src/Commands/BadasoTestSetup.php",
          "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php",
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Commands/BadasoTestSetup.php||src/Commands/BadasoTestSetup.php": [
          "File: src/Commands/BadasoTestSetup.php -> src/Commands/BadasoTestSetup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Commands;",
          "5: use DOMDocument;",
          "6: use Illuminate\\Console\\Command;",
          "8: class BadasoTestSetup extends Command",
          "9: {",
          "11:     public static $PHPUNIT_XML_PATH = \"phpunit.xml\";",
          "12:     public static $BADASO_UNIT_TEST_PATHS = [",
          "13:         \"./packages/badaso/core/tests/Unit\",",
          "14:     ];",
          "15:     public static $BADASO_FEATURE_TEST_PATHS = [",
          "16:         \"./packages/badaso/core/tests/Feature\",",
          "17:     ];",
          "24:     protected $signature = 'badaso-test:setup';",
          "31:     protected $description = 'Publish xml directory to file ./project/phpunit.xml';",
          "38:     public function __construct()",
          "39:     {",
          "40:         parent::__construct();",
          "41:     }",
          "48:     public function handle()",
          "49:     {",
          "50:         $phpunit_xml_path = base_path(self::$PHPUNIT_XML_PATH);",
          "51:         $data = file_get_contents($phpunit_xml_path);",
          "53:         $document = new DOMDocument();",
          "54:         $document->loadXML($data);",
          "56:         $test_suite_features = $document",
          "57:             ->getElementsByTagName('testsuite');",
          "59:         foreach ($test_suite_features as $index_test_suite_feature => $test_suite_feature) {",
          "60:             $attribute_name = $test_suite_feature->getAttribute('name');",
          "61:             switch ($attribute_name) {",
          "62:                 case 'Unit':",
          "63:                     $directories = $test_suite_feature->getElementsByTagName('directory');",
          "66:                     $badaso_test_paths = self::$BADASO_UNIT_TEST_PATHS;",
          "69:                     $now_test_paths = [];",
          "70:                     foreach ($directories as $_ => $directory) {",
          "71:                         $now_test_paths[] = $directory->nodeValue;",
          "72:                     }",
          "75:                     foreach ($badaso_test_paths as $_ => $badaso_test_path) {",
          "76:                         if (!in_array($badaso_test_path, $now_test_paths)) {",
          "77:                             $new_directory = $document->createElement(\"directory\", $badaso_test_path);",
          "78:                             $new_directory->setAttribute(\"suffix\", \"Test.php\");",
          "80:                             $test_suite_features->item($index_test_suite_feature)->appendChild($new_directory);",
          "81:                         }",
          "82:                     }",
          "83:                     break;",
          "84:                 case 'Feature':",
          "85:                     $directories = $test_suite_feature->getElementsByTagName('directory');",
          "88:                     $badaso_test_paths = self::$BADASO_FEATURE_TEST_PATHS;",
          "91:                     $now_test_paths = [];",
          "92:                     foreach ($directories as $_ => $directory) {",
          "93:                         $now_test_paths[] = $directory->nodeValue;",
          "94:                     }",
          "97:                     foreach ($badaso_test_paths as $_ => $badaso_test_path) {",
          "98:                         if (!in_array($badaso_test_path, $now_test_paths)) {",
          "99:                             $new_directory = $document->createElement(\"directory\", $badaso_test_path);",
          "100:                             $new_directory->setAttribute(\"suffix\", \"Test.php\");",
          "102:                             $test_suite_features->item($index_test_suite_feature)->appendChild($new_directory);",
          "103:                         }",
          "104:                     }",
          "106:                     break;",
          "107:             }",
          "108:         }",
          "111:         file_put_contents($phpunit_xml_path, $document->saveHTML());",
          "112:     }",
          "113: }",
          "",
          "---------------"
        ],
        "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php": [
          "File: src/Helpers/CallHelperTest.php -> src/Helpers/CallHelperTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Uasoft\\Badaso\\Helpers;",
          "5: use Illuminate\\Support\\Facades\\Cache;",
          "6: use Illuminate\\Support\\Facades\\Hash;",
          "7: use Tests\\TestCase;",
          "8: use Uasoft\\Badaso\\Models\\User;",
          "9: use Uasoft\\Badaso\\Models\\UserRole;",
          "11: class CallHelperTest",
          "12: {",
          "13:     static $KEY_TOKEN_ADMIN_AUTHORIZE = \"TOKEN_ADMIN_AUTHORIZE\";",
          "14:     static $ADMINISTRATOR_ROLE_ID = 1;",
          "16:     public static function getTokenUserAdminAuthorize()",
          "17:     {",
          "18:         return Cache::store('file')->get(self::$KEY_TOKEN_ADMIN_AUTHORIZE);",
          "19:     }",
          "21:     public static function getTokenUserAdminAuthorizeBearer()",
          "22:     {",
          "23:         $authorize = self::getTokenUserAdminAuthorize();",
          "24:         return \"Bearer {$authorize}\";",
          "25:     }",
          "27:     public static function setTokenUserAdminAuthorize($token)",
          "28:     {",
          "29:         Cache::store('file')->set(self::$KEY_TOKEN_ADMIN_AUTHORIZE, $token);",
          "30:     }",
          "32:     public static function getDataCreateOrUpdateUserAdmin()",
          "33:     {",
          "34:         $name = env(\"BADASO_USER_NAME\", \"badaso.test\");",
          "35:         $username = $name;",
          "36:         $email = \"{$name}@test.com\";",
          "37:         $password = Hash::make($name);",
          "38:         $email_verified_at = date('Y-m-d H:i:s');",
          "40:         return [",
          "41:             'name' => $name,",
          "42:             'username' => $username,",
          "43:             'email' => $email,",
          "44:             'password' => $password,",
          "45:             'email_verified_at' => $email_verified_at,",
          "46:         ];",
          "47:     }",
          "49:     public static function getUrlApiV1Prefix($path)",
          "50:     {",
          "51:         $api_prefix = config('badaso.api_route_prefix', 'badaso-api');",
          "53:         return \"{$api_prefix}/v1{$path}\";",
          "54:     }",
          "56:     public static function getUserAdminRole()",
          "57:     {",
          "58:         $data_create_or_update_user_admin = CallHelperTest::getDataCreateOrUpdateUserAdmin();",
          "60:         $user = User::where('email', $data_create_or_update_user_admin['email'])",
          "61:             ->first();",
          "63:         if (!isset($user)) {",
          "64:             $user = User::create($data_create_or_update_user_admin);",
          "65:         } else {",
          "66:             $user->update($data_create_or_update_user_admin);",
          "67:         }",
          "69:         $user_role = UserRole::where('user_id', $user->id)->first();",
          "70:         if (!isset($user_role)) {",
          "71:             $user_role = UserRole::create(['user_id' => $user->id, 'role_id' => self::$ADMINISTRATOR_ROLE_ID]);",
          "72:         }",
          "74:         return $user;",
          "75:     }",
          "78:     public static function handleUserAdminAuthorize(TestCase $test_case)",
          "79:     {",
          "80:         $user = self::getUserAdminRole();",
          "81:         $response = $test_case->json('POST', CallHelperTest::getUrlApiV1Prefix(\"/auth/login\"), [",
          "82:             'email' =>  $user->email,",
          "83:             'password' => $user->name,",
          "84:             'remember' => false",
          "85:         ]);",
          "86:         $response->assertSuccessful();",
          "89:         $token_authorize = $response->json('data.accessToken');",
          "90:         CallHelperTest::setTokenUserAdminAuthorize($token_authorize);",
          "91:         $bearer_token_authorize = \"Bearer {$token_authorize}\";",
          "94:         $cache_token_authorize = CallHelperTest::getTokenUserAdminAuthorize();",
          "95:         $bearer_cache_token_authorize = CallHelperTest::getTokenUserAdminAuthorizeBearer();",
          "98:         $test_case->assertSame($token_authorize, $cache_token_authorize);",
          "99:         $test_case->assertSame($bearer_token_authorize, $bearer_cache_token_authorize);",
          "100:     }",
          "102:     public static function withAuthorizeBearer(TestCase $test_case): TestCase",
          "103:     {",
          "104:         return $test_case->withHeader(\"Authorization\", self::getTokenUserAdminAuthorizeBearer());",
          "105:     }",
          "107:     public static function setCache($key, $value){",
          "108:         Cache::store('file')->set($key, $value);",
          "109:     }",
          "111:     public static function getCache($key){",
          "112:         return Cache::store('file')->get($key);",
          "113:     }",
          "115:     public static function clearCache(){",
          "116:         Cache::store('file')->clear();",
          "117:     }",
          "118: }",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Tests\\Feature;",
          "5: use Illuminate\\Database\\Schema\\Blueprint;",
          "6: use Illuminate\\Support\\Facades\\Schema;",
          "7: use Tests\\TestCase;",
          "8: use Uasoft\\Badaso\\Helpers\\CallHelperTest;",
          "9: use Uasoft\\Badaso\\Models\\DataType;",
          "11: class BadasoApiCrudManagementTest extends TestCase",
          "12: {",
          "13:     private $KEY_LIST_CREATE_TABLES = 'LIST_CREATE_TABLES';",
          "14:     private $KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG = \"DATA_TABLE_CRUD_MANAGEMENT_LOG\";",
          "15:     private $KEY_DATA_RESPONSE_ADD_CRUD_MANAGEMENT = \"DATA_RESPONSE_ADD_CRUD_MANAGEMENT\";",
          "16:     private $TABLE_TEST_PREFIX = \"test_table_\";",
          "18:     private function getFields(): array",
          "19:     {",
          "20:         return",
          "21:             $field_name = [",
          "22:                 [",
          "23:                     'badaso_type' => 'text',",
          "24:                     'schema_type' => 'text',",
          "25:                 ],",
          "26:                 [",
          "27:                     'badaso_type' => 'email',",
          "28:                     'schema_type' => 'string',",
          "29:                 ],",
          "30:                 [",
          "31:                     'badaso_type' => 'password',",
          "32:                     'schema_type' => 'string',",
          "33:                 ],",
          "34:                 [",
          "35:                     'badaso_type' => 'textarea',",
          "36:                     'schema_type' => 'text',",
          "37:                 ],",
          "38:                 [",
          "39:                     'badaso_type' => 'checkbox',",
          "40:                     'schema_type' => 'string',",
          "41:                 ],",
          "42:                 [",
          "43:                     'badaso_type' => 'search',",
          "44:                     'schema_type' => 'string',",
          "45:                 ],",
          "46:                 [",
          "47:                     'badaso_type' => 'number',",
          "48:                     'schema_type' => 'integer',",
          "49:                 ],",
          "50:                 [",
          "51:                     'badaso_type' => 'url',",
          "52:                     'schema_type' => 'string',",
          "53:                 ],",
          "54:                 [",
          "55:                     'badaso_type' => 'time',",
          "56:                     'schema_type' => 'time',",
          "57:                 ],",
          "58:                 [",
          "59:                     'badaso_type' => 'date',",
          "60:                     'schema_type' => 'string',",
          "61:                 ],",
          "62:                 [",
          "63:                     'badaso_type' => 'datetime',",
          "64:                     'schema_type' => 'datetime',",
          "65:                 ],",
          "66:                 [",
          "67:                     'badaso_type' => 'select',",
          "68:                     'schema_type' => 'string',",
          "69:                 ],",
          "70:                 [",
          "71:                     'badaso_type' => 'radio',",
          "72:                     'schema_type' => 'string',",
          "73:                 ],",
          "74:                 [",
          "75:                     'badaso_type' => 'switch',",
          "76:                     'schema_type' => 'string',",
          "77:                 ],",
          "78:                 [",
          "79:                     'badaso_type' => 'slider',",
          "80:                     'schema_type' => 'string',",
          "81:                 ],",
          "82:                 [",
          "83:                     'badaso_type' => 'editor',",
          "84:                     'schema_type' => 'text',",
          "85:                 ],",
          "86:                 [",
          "87:                     'badaso_type' => 'tags',",
          "88:                     'schema_type' => 'string',",
          "89:                 ],",
          "90:                 [",
          "91:                     'badaso_type' => 'code',",
          "92:                     'schema_type' => 'string',",
          "93:                 ],",
          "94:                 [",
          "95:                     'badaso_type' => 'hidden',",
          "96:                     'schema_type' => 'string',",
          "97:                 ],",
          "98:                 [",
          "99:                     'badaso_type' => 'relation',",
          "100:                     'schema_type' => 'bigInteger',",
          "101:                 ],",
          "102:                 [",
          "103:                     'badaso_type' => 'color_picker',",
          "104:                     'schema_type' => 'string',",
          "105:                 ],",
          "106:                 [",
          "107:                     'badaso_type' => 'upload_image',",
          "108:                     'schema_type' => 'string',",
          "109:                 ],",
          "110:                 [",
          "111:                     'badaso_type' => 'select_multiple',",
          "112:                     'schema_type' => 'string',",
          "113:                 ],",
          "114:                 [",
          "115:                     'badaso_type' => 'upload_file',",
          "116:                     'schema_type' => 'string',",
          "117:                 ],",
          "118:                 [",
          "119:                     'badaso_type' => 'upload_image_multiple',",
          "120:                     'schema_type' => 'string',",
          "121:                 ],",
          "122:                 [",
          "123:                     'badaso_type' => 'upload_file_multiple',",
          "124:                     'schema_type' => 'string',",
          "125:                 ],",
          "126:             ];",
          "127:     }",
          "129:     private function createTestTables(int $max_count_table_generate)",
          "130:     {",
          "131:         $table_names = [];",
          "132:         for ($index = 1; $index <= $max_count_table_generate; $index++) {",
          "133:             $table_name = \"{$this->TABLE_TEST_PREFIX}{$index}\";",
          "134:             if (!Schema::hasTable($table_name)) {",
          "135:                 Schema::create($table_name, function (Blueprint $table) use ($index, $table_names) {",
          "136:                     $table->id();",
          "138:                     foreach ($this->getFields() as $key => ['badaso_type' => $badaso_type, 'schema_type' => $schema_type]) {",
          "139:                         if ($badaso_type == 'relation') {",
          "140:                             if ($index >= 2) {",
          "141:                                 $table_name_relation = $table_names[0];",
          "142:                                 $table->{$schema_type}($badaso_type)->nullable()->unsigned();",
          "144:                                 $table->foreign($badaso_type)->references(\"id\")->on($table_name_relation)->onDelete('cascade');",
          "145:                             }",
          "146:                         } else {",
          "147:                             $table->{$schema_type}($badaso_type)->nullable();",
          "148:                         }",
          "149:                     }",
          "150:                     $table->softDeletes();",
          "151:                     $table->timestamps();",
          "152:                 });",
          "153:             }",
          "154:             $table_names[] = $table_name;",
          "155:         }",
          "158:         CallHelperTest::setCache($this->KEY_LIST_CREATE_TABLES, $table_names);",
          "159:     }",
          "161:     private function deleteAllTestTables()",
          "162:     {",
          "163:         $table_names = collect(CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES))->reverse();",
          "164:         foreach ($table_names as $key => $table_names) {",
          "165:             Schema::dropIfExists($table_names);",
          "166:         }",
          "169:         CallHelperTest::clearCache();",
          "170:     }",
          "172:     public function testStartInit()",
          "173:     {",
          "175:         CallHelperTest::handleUserAdminAuthorize($this);",
          "178:         $this->createTestTables(10);",
          "179:     }",
          "181:     public function testBrowseCrudManagement()",
          "182:     {",
          "183:         $response = CallHelperTest::withAuthorizeBearer($this)",
          "184:             ->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/crud\"));",
          "185:         $response->assertSuccessful();",
          "187:         $expect_table = config('badaso-watch-tables');",
          "188:         $with_crud_data_tables = $response->json('data.tablesWithCrudData');",
          "190:         foreach ($with_crud_data_tables as $key => $with_crud_data_table) {",
          "191:             $table_name = $with_crud_data_table['tableName'];",
          "192:             $this->assertIsArray($expect_table, $table_name);",
          "193:         }",
          "194:     }",
          "196:     public function testAddCrudManagement()",
          "197:     {",
          "198:         $table_names = CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES);",
          "199:         $const_fields = $this->getFields();",
          "202:         $data_types = DataType::whereIn('slug', $table_names)->get();",
          "203:         foreach ($data_types as $key => $data_type) {",
          "204:             $data_type->delete();",
          "205:         }",
          "207:         $data_table_crud_management_log = [];",
          "208:         $data_response_add_crud_management = [];",
          "209:         foreach ($table_names as $index_table_name => $table_name) {",
          "211:             $rows = [",
          "212:                 [",
          "213:                     \"field\" => \"id\",",
          "214:                     \"type\" => \"integer\",",
          "215:                     \"displayName\" => \"Id\",",
          "216:                     \"required\" => rand(0, 1),",
          "217:                     \"browse\" => rand(0, 1),",
          "218:                     \"read\" => rand(0, 1),",
          "219:                     \"edit\" => rand(0, 1),",
          "220:                     \"add\" => rand(0, 1),",
          "221:                     \"delete\" => rand(0, 1),",
          "222:                     \"details\" => json_encode((object) []),",
          "223:                     \"order\" => 1,",
          "224:                     \"setRelation\" => false",
          "225:                 ],",
          "226:                 [",
          "227:                     \"field\" => \"created_at\",",
          "228:                     \"type\" => \"datetime\",",
          "229:                     \"displayName\" => \"Created At\",",
          "230:                     \"required\" => rand(0, 1),",
          "231:                     \"browse\" => rand(0, 1),",
          "232:                     \"read\" => rand(0, 1),",
          "233:                     \"edit\" => rand(0, 1),",
          "234:                     \"add\" => rand(0, 1),",
          "235:                     \"delete\" => rand(0, 1),",
          "236:                     \"details\" => json_encode((object) []),",
          "237:                     \"order\" => 1,",
          "238:                     \"setRelation\" => false",
          "239:                 ],",
          "240:                 [",
          "241:                     \"field\" => \"updated_at\",",
          "242:                     \"type\" => \"datetime\",",
          "243:                     \"displayName\" => \"Update At\",",
          "244:                     \"required\" => rand(0, 1),",
          "245:                     \"browse\" => rand(0, 1),",
          "246:                     \"read\" => rand(0, 1),",
          "247:                     \"edit\" => rand(0, 1),",
          "248:                     \"add\" => rand(0, 1),",
          "249:                     \"delete\" => rand(0, 1),",
          "250:                     \"details\" => json_encode((object) []),",
          "251:                     \"order\" => 1,",
          "252:                     \"setRelation\" => false",
          "253:                 ],",
          "254:                 [",
          "255:                     \"field\" => \"deleted_at\",",
          "256:                     \"type\" => \"datetime\",",
          "257:                     \"displayName\" => \"Deleted At\",",
          "258:                     \"required\" => rand(0, 1),",
          "259:                     \"browse\" => rand(0, 1),",
          "260:                     \"read\" => rand(0, 1),",
          "261:                     \"edit\" => rand(0, 1),",
          "262:                     \"add\" => rand(0, 1),",
          "263:                     \"delete\" => rand(0, 1),",
          "264:                     \"details\" => json_encode((object) []),",
          "265:                     \"order\" => 1,",
          "266:                     \"setRelation\" => false",
          "267:                 ]",
          "268:             ];",
          "269:             foreach ($const_fields as $key => ['badaso_type' => $badaso_type, 'schema_type' => $schema_type]) {",
          "270:                 if ($index_table_name == 0 && $badaso_type == 'relation') continue;",
          "272:                 $field_name = ucwords(str_replace([\"_\"], \" \", $badaso_type));",
          "273:                 $row = [",
          "274:                     \"field\" => $badaso_type,",
          "275:                     \"type\" => $badaso_type,",
          "276:                     \"displayName\" => $field_name,",
          "277:                     \"required\" => rand(0, 1),",
          "278:                     \"browse\" => rand(0, 1),",
          "279:                     \"read\" => rand(0, 1),",
          "280:                     \"edit\" => rand(0, 1),",
          "281:                     \"add\" => rand(0, 1),",
          "282:                     \"delete\" => rand(0, 1),",
          "283:                     \"details\" => json_encode((object) []),",
          "284:                     \"order\" => 1,",
          "285:                     \"setRelation\" => false",
          "286:                 ];",
          "288:                 if ($badaso_type == 'relation') {",
          "289:                     $destination_field = $const_fields[rand(0, count($const_fields) - 1)];",
          "290:                     $row['relationType'] = ['belongs_to', 'has_one', 'has_many'][rand(0, 2)];",
          "291:                     $row['relationType'] = true;",
          "292:                     $row['destinationTable'] = $table_names[0];",
          "293:                     $row['destinationTableColumn'] = $destination_field;",
          "294:                     $row['destinationTableDisplayColumn'] = $destination_field;",
          "295:                 }",
          "297:                 $rows[] = $row;",
          "298:             }",
          "299:             $data_table_crud_management_log[$index_table_name]['rows'] = $rows;",
          "301:             $model = \"\";",
          "302:             $model_data = [];",
          "303:             if (rand(0, 1)) {",
          "305:                 $model_name = str_replace([\" \", \"_\"], \"\", ucwords($table_name));",
          "306:                 $model_file_name = \"{$model_name}.php\";",
          "307:                 $model_body = <<<PHP",
          "308:                 <?php",
          "309:                 namespace App\\Models;",
          "310:                 use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;",
          "311:                 use Illuminate\\Database\\Eloquent\\Model;",
          "312:                 class {$model_name} extends Model {",
          "313:                     use HasFactory;",
          "314:                     protected \\$table = \"{$table_name}\" ;",
          "315:                 }",
          "316:                 PHP;",
          "317:                 $model_path = app_path(\"Models/$model_file_name\");",
          "318:                 if (!file_exists($model_path)) {",
          "319:                     file_put_contents($model_path, $model_body);",
          "320:                 }",
          "323:                 $model = \"App\\Models\\\\$model_name\";",
          "325:                 $model_data = [",
          "326:                     'model_name' => $model_name,",
          "327:                     'model_file_name' => $model_file_name,",
          "328:                     'model_body' => $model_body,",
          "329:                     'model_path' => $model_path,",
          "330:                     'model' => $model,",
          "331:                 ];",
          "332:             }",
          "333:             $data_table_crud_management_log[$index_table_name]['model'] = $model_data;",
          "335:             $controller = \"\";",
          "336:             $controller_data = [];",
          "337:             if (rand(0, 1)) {",
          "339:                 $controller_name = str_replace([\" \", \"_\"], \"\", ucwords($table_name)) . \"Controller\";",
          "340:                 $controller_file_name = \"{$controller_name}.php\";",
          "341:                 $controller_body = <<<PHP",
          "342:                 <?php",
          "343:                 namespace App\\Http\\Controllers;",
          "344:                 use Illuminate\\Http\\Request;",
          "345:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "346:                 PHP;",
          "347:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "348:                 if (!file_exists($controller_path)) {",
          "349:                     file_put_contents($controller_path, $controller_body);",
          "350:                 }",
          "353:                 $controller = \"App\\Http\\Controllers\\\\$controller_name\";",
          "355:                 $controller_data = [",
          "356:                     'controller_name' => $controller_file_name,",
          "357:                     'controller_file_name' => $controller_file_name,",
          "358:                     'controller_body' => $controller_body,",
          "359:                     'controller_path' => $controller_path,",
          "360:                     'controller' => $controller,",
          "361:                 ];",
          "362:             }",
          "363:             $data_table_crud_management_log[$index_table_name]['controller'] = $controller_data;",
          "365:             $table_label = ucwords(str_replace([\"_\"], \" \", $table_name));",
          "366:             $request_body = [",
          "367:                 \"name\" =>  $table_name,",
          "368:                 \"slug\" =>  $table_name,",
          "369:                 \"displayNameSingular\" =>  $table_label,",
          "370:                 \"displayNamePlural\" =>  $table_label,",
          "371:                 \"icon\" =>  \"add\",",
          "372:                 \"modelName\" =>  $model,",
          "373:                 \"policyName\" =>  \"\",",
          "374:                 \"description\" => \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",",
          "375:                 \"generatePermissions\" =>  rand(0, 1),",
          "376:                 \"createSoftDelete\" =>  rand(0, 1),",
          "377:                 \"serverSide\" =>  rand(0, 1),",
          "378:                 \"details\" =>  json_encode((object)[]),",
          "379:                 \"controller\" =>  $controller,",
          "380:                 \"orderColumn\" =>  \"\",",
          "381:                 \"orderDisplayColumn\" =>  \"\",",
          "382:                 \"orderDirection\" =>  \"\",",
          "383:                 \"notification\" =>   array_slice([\"onCreate\", \"onDelete\", \"onUpdate\", \"onRead\"], 0, rand(0, 3)),",
          "384:                 \"isMaintenance\" => rand(0, 1),",
          "385:                 \"rows\" => $rows,",
          "386:             ];",
          "387:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/crud/add'), $request_body);",
          "388:             $response->assertSuccessful();",
          "391:             $data_table_crud_management_log[$index_table_name]['request_body'] = $request_body;",
          "392:             $data_response_add_crud_management[] = $response->json('data');",
          "393:         }",
          "395:         CallHelperTest::setCache($this->KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG, $data_table_crud_management_log);",
          "396:         CallHelperTest::setCache($this->KEY_DATA_RESPONSE_ADD_CRUD_MANAGEMENT, $data_response_add_crud_management);",
          "397:     }",
          "399:     public function testEditCrudManagement()",
          "400:     {",
          "401:         $data_table_crud_management_log = CallHelperTest::getCache($this->KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG);",
          "402:         $data_response_add_crud_managements = CallHelperTest::getCache($this->KEY_DATA_RESPONSE_ADD_CRUD_MANAGEMENT);",
          "404:         foreach ($data_response_add_crud_managements as $index => $data_response_add_crud_management) {",
          "405:             $table_name = $data_response_add_crud_management['name'];",
          "406:             $rows = $data_response_add_crud_management['dataRows'];",
          "408:             $table_label = ucwords(str_replace([\"_\"], \" \", $table_name));",
          "410:             $model = \"\";",
          "411:             $model_data = [];",
          "412:             if (rand(0, 1)) {",
          "414:                 $model_name = str_replace([\" \", \"_\"], \"\", ucwords($table_name));",
          "415:                 $model_file_name = \"{$model_name}.php\";",
          "416:                 $model_body = <<<PHP",
          "417:                 <?php",
          "418:                 namespace App\\Models;",
          "419:                 use Illuminate\\Database\\Eloquent\\Factories\\HasFactory;",
          "420:                 use Illuminate\\Database\\Eloquent\\Model;",
          "421:                 class {$model_name} extends Model {",
          "422:                     use HasFactory;",
          "423:                     protected \\$table = \"{$table_name}\" ;",
          "424:                 }",
          "425:                 PHP;",
          "426:                 $model_path = app_path(\"Models/$model_file_name\");",
          "427:                 if (!file_exists($model_path)) {",
          "428:                     file_put_contents($model_path, $model_body);",
          "429:                 }",
          "432:                 $model = \"App\\Models\\\\$model_name\";",
          "434:                 $model_data = [",
          "435:                     'model_name' => $model_name,",
          "436:                     'model_file_name' => $model_file_name,",
          "437:                     'model_body' => $model_body,",
          "438:                     'model_path' => $model_path,",
          "439:                     'model' => $model,",
          "440:                 ];",
          "441:             }",
          "442:             $data_table_crud_management_log[$index]['model'] = $model_data;",
          "444:             $controller = \"\";",
          "445:             $controller_data = [];",
          "446:             if (rand(0, 1)) {",
          "448:                 $controller_name = str_replace([\" \", \"_\"], \"\", ucwords($table_name)) . \"Controller\";",
          "449:                 $controller_file_name = \"{$controller_name}.php\";",
          "450:                 $controller_body = <<<PHP",
          "451:                 <?php",
          "452:                 namespace App\\Http\\Controllers;",
          "453:                 use Illuminate\\Http\\Request;",
          "454:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "455:                 PHP;",
          "456:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "457:                 if (!file_exists($controller_path)) {",
          "458:                     file_put_contents($controller_path, $controller_body);",
          "459:                 }",
          "462:                 $controller = \"App\\Http\\Controllers\\\\$controller_name\";",
          "464:                 $controller_data = [",
          "465:                     'controller_name' => $controller_file_name,",
          "466:                     'controller_file_name' => $controller_file_name,",
          "467:                     'controller_body' => $controller_body,",
          "468:                     'controller_path' => $controller_path,",
          "469:                     'controller' => $controller,",
          "470:                 ];",
          "471:             }",
          "472:             $data_table_crud_management_log[$index]['controller'] = $controller_data;",
          "474:             $request_body = [",
          "475:                 \"name\" =>  $table_name,",
          "476:                 \"slug\" =>  $table_name,",
          "477:                 \"displayNameSingular\" =>  $table_label . \"(update)\",",
          "478:                 \"displayNamePlural\" =>  $table_label . \"(update)\",",
          "479:                 \"icon\" =>  \"add\",",
          "480:                 \"modelName\" =>  $model,",
          "481:                 \"policyName\" =>  \"\",",
          "482:                 \"description\" => \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. (update)\",",
          "483:                 \"generatePermissions\" =>  rand(0, 1),",
          "484:                 \"createSoftDelete\" =>  rand(0, 1),",
          "485:                 \"serverSide\" =>  rand(0, 1),",
          "486:                 \"details\" =>  json_encode((object)[]),",
          "487:                 \"controller\" =>  $controller,",
          "488:                 \"orderColumn\" =>  \"\",",
          "489:                 \"orderDisplayColumn\" =>  \"\",",
          "490:                 \"orderDirection\" =>  \"\",",
          "491:                 \"notification\" =>   array_slice([\"onCreate\", \"onDelete\", \"onUpdate\", \"onRead\"], 0, rand(0, 0)),",
          "492:                 \"rows\" => $rows,",
          "493:             ];",
          "495:             foreach ($request_body as $key => $value) {",
          "496:                 $data_response_add_crud_management[$key] = $value;",
          "497:             }",
          "499:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"PUT\", CallHelperTest::getUrlApiV1Prefix('/crud/edit'), $data_response_add_crud_management);",
          "500:             $response->assertSuccessful();",
          "501:         }",
          "503:         CallHelperTest::setCache($this->KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG, $data_table_crud_management_log);",
          "504:     }",
          "506:     public function testReadCrudManagement()",
          "507:     {",
          "508:         $data_table_crud_management_logs = CallHelperTest::getCache($this->KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG);",
          "510:         foreach ($data_table_crud_management_logs as $key => $data_table_crud_management_log) {",
          "511:             $request_body = $data_table_crud_management_log['request_body'];",
          "512:             $name = $request_body['name'];",
          "514:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix('/crud/read'), [",
          "515:                 'table' => $name,",
          "516:             ]);",
          "517:             $response->assertSuccessful();",
          "518:         }",
          "519:     }",
          "521:     public function testReadBySlugCrudManagement()",
          "522:     {",
          "523:         $data_table_crud_management_logs = CallHelperTest::getCache($this->KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG);",
          "525:         foreach ($data_table_crud_management_logs as $key => $data_table_crud_management_log) {",
          "526:             $request_body = $data_table_crud_management_log['request_body'];",
          "527:             $slug = $request_body['slug'];",
          "529:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix('/crud/read-by-slug'), [",
          "530:                 'slug' => $slug,",
          "531:             ]);",
          "532:             $response->assertSuccessful();",
          "533:         }",
          "534:     }",
          "536:     public function testDeleteCrudManagement()",
          "537:     {",
          "538:         $tables = CallHelperTest::getCache($this->KEY_LIST_CREATE_TABLES);",
          "540:         $data_types = DataType::whereIn('name', $tables)->get();",
          "541:         foreach ($data_types as $key => $data_type) {",
          "542:             $table_name = $data_type['name'];",
          "543:             $name = ucwords(str_replace(\"_\", \"\", $table_name));",
          "545:             $id = $data_type->id;",
          "546:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"DELETE\", CallHelperTest::getUrlApiV1Prefix('/crud/delete'), [",
          "547:                 'id' => $id,",
          "548:             ]);",
          "549:             $response->assertSuccessful();",
          "552:             $controller_name = \"{$name}Controller.php\";",
          "553:             $controller_path = app_path(\"Http/Controllers/\" . $controller_name);",
          "554:             if (file_exists($controller_path)) {",
          "555:                 unlink($controller_path);",
          "556:             }",
          "559:             $model_name = \"{$name}.php\";",
          "560:             $model_path = app_path(\"Models/\" . $model_name);",
          "561:             if (file_exists($model_path)) {",
          "562:                 unlink($model_path);",
          "563:             }",
          "564:         }",
          "565:         $data_types = DataType::whereIn('name', $tables)->get();",
          "566:         $this->assertEmpty($data_types);",
          "567:     }",
          "569:     public function testFinish()",
          "570:     {",
          "572:         $this->deleteAllTestTables();",
          "574:         $this->assertTrue(true);",
          "575:     }",
          "576: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77009624019330c20a7da8946929f850859bc3c8",
      "candidate_info": {
        "commit_hash": "77009624019330c20a7da8946929f850859bc3c8",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/77009624019330c20a7da8946929f850859bc3c8",
        "files": [
          "src/Controllers/BadasoTableController.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Controllers/BadasoTableController.php||src/Controllers/BadasoTableController.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/BadasoTableController.php||src/Controllers/BadasoTableController.php": [
          "File: src/Controllers/BadasoTableController.php -> src/Controllers/BadasoTableController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:                 $destination_table_display_column = array_key_exists('destination_table_display_column', $relation_detail) ? $relation_detail['destination_table_display_column'] : null;",
          "178:                 $destination_table_display_more_column = array_key_exists('destination_table_display_more_column', $relation_detail) ? $relation_detail['destination_table_display_more_column'] : null;",
          "181:                 if (",
          "182:                     $relation_type",
          "183:                     && $destination_table",
          "184:                     && $destination_table_column",
          "186:                 ) {",
          "187:                     $arr_query_select = [",
          "188:                         $destination_table_column,",
          "189:                         $destination_table_display_column,",
          "190:                     ];",
          "197:                             }",
          "198:                         }",
          "199:                     }",
          "",
          "[Removed Lines]",
          "185:                     && ($destination_table_display_column ||$destination_table_display_more_column)",
          "192:                     if(count($destination_table_display_more_column) > 0){",
          "193:                         foreach ($destination_table_display_more_column as $index =>",
          "194:                         $item_destination_table_display_more_column) {",
          "195:                             if(!in_array($item_destination_table_display_more_column  ,$arr_query_select)){",
          "196:                                  $arr_query_select[] = $item_destination_table_display_more_column;",
          "",
          "[Added Lines]",
          "184:                     && ($destination_table_display_column || $destination_table_display_more_column)",
          "191:                     if (count($destination_table_display_more_column) > 0) {",
          "192:                         foreach ($destination_table_display_more_column as $index => $item_destination_table_display_more_column) {",
          "193:                             if (! in_array($item_destination_table_display_more_column, $arr_query_select)) {",
          "194:                                 $arr_query_select[] = $item_destination_table_display_more_column;",
          "",
          "---------------"
        ]
      }
    }
  ]
}