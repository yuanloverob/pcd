{
  "cve_id": "CVE-2021-4041",
  "cve_desc": "A flaw was found in ansible-runner. An improper escaping of the shell command, while calling the ansible_runner.interface.run_command, can lead to parameters getting executed as host's shell command. A developer could unintentionally write code that gets executed in the host rather than the virtual environment.",
  "repo": "ansible/ansible-runner",
  "patch_hash": "3533f265f4349a3f2a0283158cd01b59a6bbc7bd",
  "patch_info": {
    "commit_hash": "3533f265f4349a3f2a0283158cd01b59a6bbc7bd",
    "repo": "ansible/ansible-runner",
    "commit_url": "https://github.com/ansible/ansible-runner/commit/3533f265f4349a3f2a0283158cd01b59a6bbc7bd",
    "files": [
      "ansible_runner/config/doc.py",
      "ansible_runner/runner.py",
      "test/integration/test_interface.py",
      "test/unit/config/test_doc.py"
    ],
    "message": "Remove shell use in subprocess\n\nCo-authored-by: Sam Doran <sdoran@redhat.com>",
    "before_after_code_files": [
      "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
      "ansible_runner/runner.py||ansible_runner/runner.py",
      "test/integration/test_interface.py||test/integration/test_interface.py",
      "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
    ]
  },
  "patch_diff": {
    "ansible_runner/config/doc.py||ansible_runner/config/doc.py": [
      "File: ansible_runner/config/doc.py -> ansible_runner/config/doc.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:         if module_path:",
      "88:             self.cmdline_args.extend(['-M', module_path])",
      "92:         self.command = [self._ansible_doc_exec_path] + self.cmdline_args",
      "93:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
      "",
      "[Removed Lines]",
      "90:         self.cmdline_args.append(\" \".join(plugin_names))",
      "",
      "[Added Lines]",
      "90:         self.cmdline_args.extend(plugin_names)",
      "",
      "---------------"
    ],
    "ansible_runner/runner.py||ansible_runner/runner.py": [
      "File: ansible_runner/runner.py -> ansible_runner/runner.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "204:             user = getpass.getuser()",
      "205:             group = grp.getgrgid(os.getgid()).gr_name",
      "209:             _, stderr = proc.communicate()",
      "210:             if proc.returncode:",
      "211:                 # Unable to create cgroup",
      "",
      "[Removed Lines]",
      "207:             cmd = 'cgcreate -a {user}:{group} -t {user}:{group} -g cpuacct,memory,pids:{}'.format(cgroup_path, user=user, group=group)",
      "208:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
      "",
      "[Added Lines]",
      "207:             cmd = ['cgcreate',",
      "208:                    '-a', f'{user}:{group}',",
      "209:                    '-t', f'{user}:{group}',",
      "210:                    '-g', f'cpuacct,memory,pids:{cgroup_path}',",
      "211:                    ]",
      "212:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "249:                     'stderr': error_fd,",
      "250:                     'check': True,",
      "251:                     'universal_newlines': True,",
      "253:                 }",
      "254:                 if subprocess_timeout is not None:",
      "255:                     kwargs.update({'timeout': subprocess_timeout})",
      "259:                 stdout_response = proc_out.stdout",
      "260:                 stderr_response = proc_out.stderr",
      "",
      "[Removed Lines]",
      "252:                     'shell': True",
      "257:                 proc_out = run_subprocess(\" \".join(command), **kwargs)",
      "",
      "[Added Lines]",
      "260:                 proc_out = run_subprocess(command, **kwargs)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "391:                 return True",
      "392:             _delete()",
      "393:         if self.resource_profiling:",
      "396:             _, stderr = proc.communicate()",
      "397:             if proc.returncode:",
      "398:                 logger.error('Failed to delete cgroup: {}'.format(stderr))",
      "",
      "[Removed Lines]",
      "394:             cmd = 'cgdelete -g cpuacct,memory,pids:{}'.format(cgroup_path)",
      "395:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
      "",
      "[Added Lines]",
      "397:             cmd = ['cgdelete', '-g', f'cpuacct,memory,pids:{cgroup_path}']",
      "398:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "532:         container_name = self.config.container_name",
      "533:         if container_name:",
      "534:             container_cli = self.config.process_isolation_executable",
      "537:             _, stderr = proc.communicate()",
      "538:             if proc.returncode:",
      "539:                 logger.info('Error from {} kill {} command:\\n{}'.format(container_cli, container_name, stderr))",
      "",
      "[Removed Lines]",
      "535:             cmd = '{} kill {}'.format(container_cli, container_name)",
      "536:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)",
      "",
      "[Added Lines]",
      "538:             cmd = [container_cli, 'kill', container_name]",
      "539:             proc = Popen(cmd, stdout=PIPE, stderr=PIPE)",
      "",
      "---------------"
    ],
    "test/integration/test_interface.py||test/integration/test_interface.py": [
      "File: test/integration/test_interface.py -> test/integration/test_interface.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "152:     assert err == ''",
      "155: @pytest.mark.test_all_runtimes",
      "156: def test_run_ansible_command_within_container(project_fixtures, runtime):",
      "157:     private_data_dir = project_fixtures / 'debug'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "155: def test_run_command_injection_error():",
      "156:     out, err, rc = run_command(",
      "157:         executable_cmd='whoami',",
      "158:         cmdline_args=[';hostname'],",
      "159:         runner_mode='subprocess',",
      "160:     )",
      "161:     assert rc == 1",
      "162:     assert \"usage: whoami\" in err or \"whoami: extra operand \u2018;hostname\u2019\" in err",
      "165: @pytest.mark.test_all_runtimes",
      "166: def test_run_command_injection_error_within_container(runtime):",
      "167:     out, err, rc = run_command(",
      "168:         executable_cmd='whoami',",
      "169:         cmdline_args=[';hostname'],",
      "170:         runner_mode='subprocess',",
      "171:         process_isolation_executable=runtime,",
      "172:         process_isolation=True,",
      "173:         container_image=defaults.default_container_image,",
      "174:     )",
      "175:     assert rc == 1",
      "176:     assert \"whoami: extra operand ';hostname'\" in err",
      "",
      "---------------"
    ],
    "test/unit/config/test_doc.py||test/unit/config/test_doc.py": [
      "File: test/unit/config/test_doc.py -> test/unit/config/test_doc.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:     plugin_names = ['copy', 'file']",
      "53:     plugin_type = 'module'",
      "54:     rc.prepare_plugin_docs_command(plugin_names, plugin_type=plugin_type, snippet=True, playbook_dir='/tmp/test')",
      "56:     assert rc.command == expected_command",
      "57:     assert rc.runner_mode == 'subprocess'",
      "58:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
      "",
      "[Removed Lines]",
      "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy file']",
      "",
      "[Added Lines]",
      "55:     expected_command = [get_executable_path('ansible-doc'), '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy', 'file']",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:         '-s',",
      "114:         '-t', 'module',",
      "115:         '--playbook-dir', '/tmp/test',",
      "117:         'file',",
      "118:     ])",
      "",
      "[Removed Lines]",
      "116:         'copy '",
      "",
      "[Added Lines]",
      "116:         'copy',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3ba65128cdd53894d2d0166812464d6183744cea",
      "candidate_info": {
        "commit_hash": "3ba65128cdd53894d2d0166812464d6183744cea",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/3ba65128cdd53894d2d0166812464d6183744cea",
        "files": [
          "test/unit/config/test__base.py",
          "test/unit/config/test_ansible_cfg.py",
          "test/unit/config/test_command.py",
          "test/unit/config/test_doc.py",
          "test/unit/config/test_inventory.py",
          "test/unit/test_utils.py"
        ],
        "message": "Fix unit tests to run consistently in CI and locally\n\n- use pytest-mock fixture\n- mock test environment variables to prevent inconsistent test results\n- reformat test fixtures so they are easire to read\n\nRemove extra line space",
        "before_after_code_files": [
          "test/unit/config/test__base.py||test/unit/config/test__base.py",
          "test/unit/config/test_ansible_cfg.py||test/unit/config/test_ansible_cfg.py",
          "test/unit/config/test_command.py||test/unit/config/test_command.py",
          "test/unit/config/test_doc.py||test/unit/config/test_doc.py",
          "test/unit/config/test_inventory.py||test/unit/config/test_inventory.py",
          "test/unit/test_utils.py||test/unit/test_utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ],
          "candidate": [
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ]
        }
      },
      "candidate_diff": {
        "test/unit/config/test__base.py||test/unit/config/test__base.py": [
          "File: test/unit/config/test__base.py -> test/unit/config/test__base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "277: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "294:     extra_container_args = []",
          "295:     if container_runtime == 'podman':",
          "",
          "[Removed Lines]",
          "278: def test_containerization_settings(tmpdir, container_runtime):",
          "279:     with patch('ansible_runner.config._base.BaseConfig.containerized', new_callable=PropertyMock) as mock_containerized:",
          "280:         rc = BaseConfig(private_data_dir=tmpdir)",
          "281:         rc.ident = 'foo'",
          "282:         rc.cmdline_args = ['main.yaml', '-i', '/tmp/inventory']",
          "283:         rc.command = ['ansible-playbook'] + rc.cmdline_args",
          "284:         rc.process_isolation = True",
          "285:         rc.runner_mode = 'pexpect'",
          "286:         rc.process_isolation_executable = container_runtime",
          "287:         rc.container_image = 'my_container'",
          "288:         rc.container_volume_mounts = ['/host1:/container1', 'host2:/container2']",
          "289:         mock_containerized.return_value = True",
          "290:         rc.execution_mode = BaseExecutionMode.ANSIBLE_COMMANDS",
          "291:         rc._prepare_env()",
          "292:         rc._handle_command_wrap(rc.execution_mode, rc.cmdline_args)",
          "",
          "[Added Lines]",
          "278: def test_containerization_settings(tmpdir, container_runtime, mocker):",
          "279:     mocker.patch.dict('os.environ', {'HOME': str(tmpdir)}, clear=True)",
          "280:     os.mkdir(os.path.join(tmpdir, '.ssh'))",
          "282:     mock_containerized = mocker.patch('ansible_runner.config._base.BaseConfig.containerized', new_callable=PropertyMock)",
          "283:     mock_containerized.return_value = True",
          "285:     rc = BaseConfig(private_data_dir=tmpdir)",
          "286:     rc.ident = 'foo'",
          "287:     rc.cmdline_args = ['main.yaml', '-i', '/tmp/inventory']",
          "288:     rc.command = ['ansible-playbook'] + rc.cmdline_args",
          "289:     rc.process_isolation = True",
          "290:     rc.runner_mode = 'pexpect'",
          "291:     rc.process_isolation_executable = container_runtime",
          "292:     rc.container_image = 'my_container'",
          "293:     rc.container_volume_mounts = ['/host1:/container1', 'host2:/container2']",
          "294:     rc.execution_mode = BaseExecutionMode.ANSIBLE_COMMANDS",
          "295:     rc._prepare_env()",
          "296:     rc._handle_command_wrap(rc.execution_mode, rc.cmdline_args)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:     else:",
          "298:         extra_container_args = ['--user={os.getuid()}']",
          "302:     if container_runtime == 'podman':",
          "312:     for index, element in enumerate(expected_command_start):",
          "313:         if '--user=' in element:",
          "",
          "[Removed Lines]",
          "300:     expected_command_start = [container_runtime, 'run', '--rm', '--tty', '--interactive', '--workdir', '/runner/project'] + \\",
          "301:                              ['-v', '{}/.ssh/:/home/runner/.ssh/'.format(os.environ['HOME'])]",
          "303:         expected_command_start += ['--group-add=root', '--ipc=host']",
          "305:     expected_command_start += ['-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir)] + \\",
          "306:         ['-v', '{}/:/runner/:Z'.format(rc.private_data_dir)] + \\",
          "307:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "308:         extra_container_args + \\",
          "309:         ['--name', 'ansible_runner_foo'] + \\",
          "310:         ['my_container', 'ansible-playbook', 'main.yaml', '-i', '/tmp/inventory']",
          "",
          "[Added Lines]",
          "304:     expected_command_start = [",
          "305:         container_runtime,",
          "306:         'run',",
          "307:         '--rm',",
          "308:         '--tty',",
          "309:         '--interactive',",
          "310:         '--workdir',",
          "311:         '/runner/project',",
          "312:         '-v', '{}/.ssh/:/home/runner/.ssh/'.format(str(tmpdir))",
          "313:     ]",
          "316:         expected_command_start.extend(['--group-add=root', '--ipc=host'])",
          "318:     expected_command_start.extend([",
          "319:         '-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir),",
          "320:         '-v', '{}/:/runner/:Z'.format(rc.private_data_dir),",
          "321:         '--env-file', '{}/env.list'.format(rc.artifact_dir),",
          "322:     ])",
          "324:     expected_command_start.extend(extra_container_args)",
          "326:     expected_command_start.extend([",
          "327:         '--name', 'ansible_runner_foo',",
          "328:         'my_container', 'ansible-playbook', 'main.yaml', '-i', '/tmp/inventory',",
          "329:     ])",
          "",
          "---------------"
        ],
        "test/unit/config/test_ansible_cfg.py||test/unit/config/test_ansible_cfg.py": [
          "File: test/unit/config/test_ansible_cfg.py -> test/unit/config/test_ansible_cfg.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "59:     kwargs = {",
          "60:         'private_data_dir': tmpdir,",
          "61:         'process_isolation': True,",
          "",
          "[Removed Lines]",
          "58: def test_prepare_config_command_with_containerization(tmpdir, container_runtime):",
          "",
          "[Added Lines]",
          "58: def test_prepare_config_command_with_containerization(tmpdir, container_runtime, mocker):",
          "59:     mocker.patch.dict('os.environ', {'HOME': str(tmpdir)}, clear=True)",
          "60:     os.mkdir(os.path.join(tmpdir, '.ssh'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:     else:",
          "74:         extra_container_args = ['--user={os.getuid()}']",
          "78:     if container_runtime == 'podman':",
          "88:     for index, element in enumerate(expected_command_start):",
          "89:         if '--user=' in element:",
          "",
          "[Removed Lines]",
          "76:     expected_command_start = [container_runtime, 'run', '--rm', '--interactive', '--workdir', '/runner/project'] + \\",
          "77:                              ['-v', '{}/.ssh/:/home/runner/.ssh/'.format(os.environ['HOME'])]",
          "79:         expected_command_start += ['--group-add=root', '--ipc=host']",
          "81:     expected_command_start += ['-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir)] + \\",
          "82:         ['-v', '{}/:/runner/:Z'.format(rc.private_data_dir)] + \\",
          "83:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "84:         extra_container_args + \\",
          "85:         ['--name', 'ansible_runner_foo'] + \\",
          "86:         ['my_container', 'ansible-config', 'list', '-c', '/tmp/ansible.cfg']",
          "",
          "[Added Lines]",
          "79:     expected_command_start = [",
          "80:         container_runtime,",
          "81:         'run',",
          "82:         '--rm',",
          "83:         '--interactive',",
          "84:         '--workdir',",
          "85:         '/runner/project',",
          "86:         '-v', '{}/.ssh/:/home/runner/.ssh/'.format(rc.private_data_dir),",
          "87:     ]",
          "90:         expected_command_start.extend(['--group-add=root', '--ipc=host'])",
          "92:     expected_command_start.extend([",
          "93:         '-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir),",
          "94:         '-v', '{}/:/runner/:Z'.format(rc.private_data_dir),",
          "95:         '--env-file', '{}/env.list'.format(rc.artifact_dir),",
          "96:     ])",
          "98:     expected_command_start.extend(extra_container_args)",
          "100:     expected_command_start.extend([",
          "101:         '--name',",
          "102:         'ansible_runner_foo',",
          "103:         'my_container',",
          "104:         'ansible-config',",
          "105:         'list',",
          "106:         '-c',",
          "107:         '/tmp/ansible.cfg',",
          "108:     ])",
          "",
          "---------------"
        ],
        "test/unit/config/test_command.py||test/unit/config/test_command.py": [
          "File: test/unit/config/test_command.py -> test/unit/config/test_command.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "68:     kwargs = {",
          "69:         'private_data_dir': tmpdir,",
          "70:         'process_isolation': True,",
          "",
          "[Removed Lines]",
          "67: def test_prepare_run_command_with_containerization(tmpdir, container_runtime):",
          "",
          "[Added Lines]",
          "67: def test_prepare_run_command_with_containerization(tmpdir, container_runtime, mocker):",
          "68:     mocker.patch.dict('os.environ', {'HOME': str(tmpdir)}, clear=True)",
          "69:     os.mkdir(os.path.join(tmpdir, '.ssh'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:     else:",
          "86:         extra_container_args = ['--user={os.getuid()}']",
          "91:     if container_runtime == 'podman':",
          "101:     for index, element in enumerate(expected_command_start):",
          "102:         if '--user=' in element:",
          "",
          "[Removed Lines]",
          "88:     expected_command_start = [container_runtime, 'run', '--rm', '--tty', '--interactive', '--workdir', '/runner/project'] + \\",
          "89:                              ['-v', '{}/:{}/'.format(cwd, cwd), '-v', '{}/.ssh/:/home/runner/.ssh/'.format(os.environ['HOME'])]",
          "92:         expected_command_start += ['--group-add=root', '--ipc=host']",
          "94:     expected_command_start += ['-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir)] + \\",
          "95:         ['-v', '{}/:/runner/:Z'.format(rc.private_data_dir)] + \\",
          "96:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "97:         extra_container_args + \\",
          "98:         ['--name', 'ansible_runner_foo'] + \\",
          "99:         ['my_container'] + [executable_cmd] + cmdline_args",
          "",
          "[Added Lines]",
          "91:     expected_command_start = [",
          "92:         container_runtime,",
          "93:         'run',",
          "94:         '--rm',",
          "95:         '--tty',",
          "96:         '--interactive',",
          "97:         '--workdir',",
          "98:         '/runner/project',",
          "99:         '-v', '{}/:{}/'.format(cwd, cwd),",
          "100:         '-v', '{}/.ssh/:/home/runner/.ssh/'.format(rc.private_data_dir),",
          "101:     ]",
          "104:         expected_command_start.extend(['--group-add=root', '--ipc=host'])",
          "106:     expected_command_start.extend([",
          "107:         '-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir),",
          "108:         '-v', '{}/:/runner/:Z'.format(rc.private_data_dir),",
          "109:         '--env-file', '{}/env.list'.format(rc.artifact_dir),",
          "110:     ])",
          "112:     expected_command_start.extend(extra_container_args)",
          "114:     expected_command_start.extend([",
          "115:         '--name',",
          "116:         'ansible_runner_foo',",
          "117:         'my_container',",
          "118:         executable_cmd,",
          "119:     ])",
          "121:     expected_command_start.extend(cmdline_args)",
          "",
          "---------------"
        ],
        "test/unit/config/test_doc.py||test/unit/config/test_doc.py": [
          "File: test/unit/config/test_doc.py -> test/unit/config/test_doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "65:     kwargs = {",
          "66:         'private_data_dir': tmpdir,",
          "67:         'process_isolation': True,",
          "",
          "[Removed Lines]",
          "64: def test_prepare_plugin_docs_command_with_containerization(tmpdir, container_runtime):",
          "",
          "[Added Lines]",
          "64: def test_prepare_plugin_docs_command_with_containerization(tmpdir, container_runtime, mocker):",
          "65:     mocker.patch.dict('os.environ', {'HOME': str(tmpdir)}, clear=True)",
          "66:     os.mkdir(os.path.join(tmpdir, '.ssh'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     else:",
          "84:         extra_container_args = ['--user={os.getuid()}']",
          "98:     for index, element in enumerate(expected_command_start):",
          "99:         if '--user=' in element:",
          "",
          "[Removed Lines]",
          "86:     expected_command_start = [container_runtime, 'run', '--rm', '--interactive', '--workdir', '/runner/project'] + \\",
          "87:                              ['-v', '{}/.ssh/:/home/runner/.ssh/'.format(os.environ['HOME'])]",
          "88:     if container_runtime == 'podman':",
          "89:         expected_command_start += ['--group-add=root', '--ipc=host']",
          "91:     expected_command_start += ['-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir)] + \\",
          "92:         ['-v', '{}/:/runner/:Z'.format(rc.private_data_dir)] + \\",
          "93:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "94:         extra_container_args + \\",
          "95:         ['--name', 'ansible_runner_foo'] + \\",
          "96:         ['my_container'] + ['ansible-doc', '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy file']",
          "",
          "[Added Lines]",
          "89:     expected_command_start = [",
          "90:         container_runtime,",
          "91:         'run',",
          "92:         '--rm',",
          "93:         '--interactive',",
          "94:         '--workdir',",
          "95:         '/runner/project',",
          "96:         '-v', '{}/.ssh/:/home/runner/.ssh/'.format(rc.private_data_dir),",
          "97:     ]",
          "99:     if container_runtime == 'podman':",
          "100:         expected_command_start.extend(['--group-add=root', '--ipc=host'])",
          "102:     expected_command_start.extend([",
          "103:         '-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir),",
          "104:         '-v', '{}/:/runner/:Z'.format(rc.private_data_dir),",
          "105:         '--env-file', '{}/env.list'.format(rc.artifact_dir),",
          "106:     ])",
          "108:     expected_command_start.extend(extra_container_args)",
          "110:     expected_command_start.extend([",
          "111:         '--name', 'ansible_runner_foo',",
          "112:         'my_container',",
          "113:         'ansible-doc',",
          "114:         '-s',",
          "115:         '-t', 'module',",
          "116:         '--playbook-dir', '/tmp/test',",
          "117:         'copy '",
          "118:         'file',",
          "119:     ])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "116:     kwargs = {",
          "117:         'private_data_dir': tmpdir,",
          "118:         'process_isolation': True,",
          "",
          "[Removed Lines]",
          "115: def test_prepare_plugin_list_command_with_containerization(tmpdir, container_runtime):",
          "",
          "[Added Lines]",
          "138: def test_prepare_plugin_list_command_with_containerization(tmpdir, container_runtime, mocker):",
          "139:     mocker.patch.dict('os.environ', {'HOME': str(tmpdir)}, clear=True)",
          "140:     os.mkdir(os.path.join(tmpdir, '.ssh'))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:     else:",
          "132:         extra_container_args = ['--user={os.getuid()}']",
          "136:     if container_runtime == 'podman':",
          "146:     for index, element in enumerate(expected_command_start):",
          "147:         if '--user=' in element:",
          "",
          "[Removed Lines]",
          "134:     expected_command_start = [container_runtime, 'run', '--rm', '--interactive', '--workdir', '/runner/project'] + \\",
          "135:                              ['-v', '{}/.ssh/:/home/runner/.ssh/'.format(os.environ['HOME'])]",
          "137:         expected_command_start += ['--group-add=root', '--ipc=host']",
          "139:     expected_command_start += ['-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir)] + \\",
          "140:         ['-v', '{}/:/runner/:Z'.format(rc.private_data_dir)] + \\",
          "141:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "142:         extra_container_args + \\",
          "143:         ['--name', 'ansible_runner_foo'] + \\",
          "144:         ['my_container'] + ['ansible-doc', '-F', '-t', 'module', '--playbook-dir', '/tmp/test', '-M', '/test/module']",
          "",
          "[Added Lines]",
          "160:     expected_command_start = [",
          "161:         container_runtime,",
          "162:         'run',",
          "163:         '--rm',",
          "164:         '--interactive',",
          "165:         '--workdir',",
          "166:         '/runner/project',",
          "167:         '-v', '{}/.ssh/:/home/runner/.ssh/'.format(rc.private_data_dir),",
          "168:     ]",
          "171:         expected_command_start.extend(['--group-add=root', '--ipc=host'])",
          "173:     expected_command_start.extend([",
          "174:         '-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir),",
          "175:         '-v', '{}/:/runner/:Z'.format(rc.private_data_dir),",
          "176:         '--env-file', '{}/env.list'.format(rc.artifact_dir),",
          "177:     ])",
          "179:     expected_command_start.extend(extra_container_args)",
          "181:     expected_command_start.extend([",
          "182:         '--name', 'ansible_runner_foo',",
          "183:         'my_container',",
          "184:         'ansible-doc',",
          "185:         '-F',",
          "186:         '-t', 'module',",
          "187:         '--playbook-dir', '/tmp/test',",
          "188:         '-M', '/test/module'",
          "189:     ])",
          "",
          "---------------"
        ],
        "test/unit/config/test_inventory.py||test/unit/config/test_inventory.py": [
          "File: test/unit/config/test_inventory.py -> test/unit/config/test_inventory.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "91:     kwargs = {",
          "92:         'private_data_dir': tmpdir,",
          "93:         'process_isolation': True,",
          "",
          "[Removed Lines]",
          "90: def test_prepare_inventory_command_with_containerization(tmpdir, container_runtime):",
          "",
          "[Added Lines]",
          "90: def test_prepare_inventory_command_with_containerization(tmpdir, container_runtime, mocker):",
          "91:     mocker.patch.dict('os.environ', {'HOME': str(tmpdir)}, clear=True)",
          "92:     os.mkdir(os.path.join(tmpdir, '.ssh'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     else:",
          "109:         extra_container_args = ['--user={os.getuid()}']",
          "113:     if container_runtime == 'podman':",
          "125:     assert len(expected_command_start) == len(rc.command)",
          "",
          "[Removed Lines]",
          "111:     expected_command_start = [container_runtime, 'run', '--rm', '--interactive', '--workdir', '/runner/project'] + \\",
          "112:                              ['-v', '{}/.ssh/:/home/runner/.ssh/'.format(os.environ['HOME'])]",
          "114:         expected_command_start += ['--group-add=root', '--ipc=host']",
          "116:     expected_command_start += ['-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir)] + \\",
          "117:         ['-v', '{}/:/runner/:Z'.format(rc.private_data_dir)] + \\",
          "118:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "119:         extra_container_args + \\",
          "120:         ['--name', 'ansible_runner_foo', 'my_container'] + \\",
          "121:         ['ansible-inventory', '--list', '-i', '/tmp/inventory1', '-i', '/tmp/inventory2', '--yaml', '--playbook-dir'] + \\",
          "122:         ['/tmp', '--vault-id', '1234', '--vault-password-file', '/tmp/password', '--output', '/tmp/inv_out.txt'] + \\",
          "123:         ['--export']",
          "",
          "[Added Lines]",
          "114:     expected_command_start = [",
          "115:         container_runtime,",
          "116:         'run',",
          "117:         '--rm',",
          "118:         '--interactive',",
          "119:         '--workdir',",
          "120:         '/runner/project',",
          "121:         '-v', '{}/.ssh/:/home/runner/.ssh/'.format(rc.private_data_dir),",
          "122:     ]",
          "125:         expected_command_start.extend(['--group-add=root', '--ipc=host'])",
          "127:     expected_command_start.extend([",
          "128:         '-v', '{}/artifacts/:/runner/artifacts/:Z'.format(rc.private_data_dir),",
          "129:         '-v', '{}/:/runner/:Z'.format(rc.private_data_dir),",
          "130:         '--env-file', '{}/env.list'.format(rc.artifact_dir),",
          "131:     ])",
          "133:     expected_command_start.extend(extra_container_args)",
          "135:     expected_command_start.extend([",
          "136:         '--name',",
          "137:         'ansible_runner_foo',",
          "138:         'my_container',",
          "139:         'ansible-inventory',",
          "140:         '--list',",
          "141:         '-i', '/tmp/inventory1',",
          "142:         '-i', '/tmp/inventory2',",
          "143:         '--yaml',",
          "144:         '--playbook-dir', '/tmp',",
          "145:         '--vault-id', '1234',",
          "146:         '--vault-password-file', '/tmp/password',",
          "147:         '--output', '/tmp/inv_out.txt',",
          "148:         '--export',",
          "149:     ])",
          "",
          "---------------"
        ],
        "test/unit/test_utils.py||test/unit/test_utils.py": [
          "File: test/unit/test_utils.py -> test/unit/test_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     ('filedoesnotexist.txt', [])",
          "236: ], ids=['global', 'local', 'directory', 'recursive', 'bad'])",
          "237: def test_transmit_symlink(tmpdir, symlink_dest, check_content):",
          "238:     # prepare the input private_data_dir directory to zip",
          "239:     pdd = tmpdir.mkdir('symlink_zip_test')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     if not os.path.exists(symlink_dest):",
          "239:         pytest.skip(f\"File does not exists {symlink_dest}\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0ae8c3a73df1c4862d1d0893785d3112e4a4f5a",
      "candidate_info": {
        "commit_hash": "c0ae8c3a73df1c4862d1d0893785d3112e4a4f5a",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/c0ae8c3a73df1c4862d1d0893785d3112e4a4f5a",
        "files": [
          "ansible_runner/config/doc.py",
          "ansible_runner/config/inventory.py",
          "ansible_runner/interface.py",
          "ansible_runner/runner_config.py",
          "test/integration/test_interface.py",
          "test/unit/config/test_command.py",
          "test/unit/config/test_doc.py",
          "test/unit/config/test_runner.py"
        ],
        "message": "remove json default for ansible-doc",
        "before_after_code_files": [
          "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
          "ansible_runner/config/inventory.py||ansible_runner/config/inventory.py",
          "ansible_runner/interface.py||ansible_runner/interface.py",
          "ansible_runner/runner_config.py||ansible_runner/runner_config.py",
          "test/integration/test_interface.py||test/integration/test_interface.py",
          "test/unit/config/test_command.py||test/unit/config/test_command.py",
          "test/unit/config/test_doc.py||test/unit/config/test_doc.py",
          "test/unit/config/test_runner.py||test/unit/config/test_runner.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ],
          "candidate": [
            "ansible_runner/config/doc.py||ansible_runner/config/doc.py",
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/config/doc.py||ansible_runner/config/doc.py": [
          "File: ansible_runner/config/doc.py -> ansible_runner/config/doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     _supported_response_formats = ('json', 'human')",
          "57:                                     snippet=False, playbook_dir=None, module_path=None):",
          "59:         if response_format and response_format not in DocConfig._supported_response_formats:",
          "",
          "[Removed Lines]",
          "56:     def prepare_plugin_docs_command(self, plugin_names, plugin_type=None, response_format='json',",
          "",
          "[Added Lines]",
          "56:     def prepare_plugin_docs_command(self, plugin_names, plugin_type=None, response_format=None,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:         self.command = ['ansible-doc'] + self.cmdline_args",
          "88:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
          "91:                                     playbook_dir=None, module_path=None):",
          "93:         if response_format and response_format not in DocConfig._supported_response_formats:",
          "",
          "[Removed Lines]",
          "90:     def prepare_plugin_list_command(self, list_files=None, response_format='json', plugin_type=None,",
          "",
          "[Added Lines]",
          "90:     def prepare_plugin_list_command(self, list_files=None, response_format=None, plugin_type=None,",
          "",
          "---------------"
        ],
        "ansible_runner/config/inventory.py||ansible_runner/config/inventory.py": [
          "File: ansible_runner/config/inventory.py -> ansible_runner/config/inventory.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     _supported_response_formats = ('json', 'yaml', 'toml')",
          "54:     _supported_actions = ('graph', 'host', 'list')",
          "58:         if action not in InventoryConfig._supported_actions:",
          "59:             raise ConfigurationError(\"Invalid action {0}, valid value is one of either {1}\".format(action, \", \".join(InventoryConfig._supported_actions)))",
          "",
          "[Removed Lines]",
          "56:     def prepare_inventory_command(self, action, inventories, response_format='json', host=None, playbook_dir=None, vault_ids=None, vault_password_file=None):",
          "",
          "[Added Lines]",
          "56:     def prepare_inventory_command(self, action, inventories, response_format=None, host=None, playbook_dir=None, vault_ids=None, vault_password_file=None):",
          "",
          "---------------"
        ],
        "ansible_runner/interface.py||ansible_runner/interface.py": [
          "File: ansible_runner/interface.py -> ansible_runner/interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:                   cancel_callback=cancel_callback, finished_callback=finished_callback)",
          "416:     '''",
          "417:     Run an ansible-doc command to get plugin docs  in the foreground and return a Runner object when complete.",
          "",
          "[Removed Lines]",
          "415: def get_plugin_docs(plugin_names, plugin_type=None, response_format='json', snippet=False, playbook_dir=None, module_path=None, **kwargs):",
          "",
          "[Added Lines]",
          "415: def get_plugin_docs(plugin_names, plugin_type=None, response_format=None, snippet=False, playbook_dir=None, module_path=None, **kwargs):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426:     :param playbook_dir: This parameter is used to sets the relative path to handle playbook adjacent installed plugins.",
          "427:     :param module_path: This parameter is prepend colon-separated path(s) to module library",
          "428:                         (default=~/.ansible/plugins/modules:/usr/share/ansible/plugins/modules).",
          "431:     :param envvars: Environment variables to be used when running Ansible. Environment variables will also be",
          "432:                     read from ``env/envvars`` in ``private_data_dir``",
          "433:     :param passwords: A dictionary containing password prompt patterns and response values used when processing output from",
          "",
          "[Removed Lines]",
          "429:     :param runner_mode: The applicable values are ``pexpect`` and ``subprocess``. Default is set to ``subporcess``.",
          "430:     :param cwd: The current working directory from which the command in executable_cmd shoulbe be executed.",
          "",
          "[Added Lines]",
          "429:     :param runner_mode: The applicable values are ``pexpect`` and ``subprocess``. Default is set to ``subprocess``.",
          "430:     :param cwd: The current working directory from which the command in executable_cmd should be be executed.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "518:     return doc_runner_thread, r",
          "522:     '''",
          "523:     Run an ansible-doc command to get list of installed Ansible plugins.",
          "",
          "[Removed Lines]",
          "521: def get_plugin_list(list_files=None, response_format='json', plugin_type=None, playbook_dir=None, module_path=None, **kwargs):",
          "",
          "[Added Lines]",
          "521: def get_plugin_list(list_files=None, response_format=None, plugin_type=None, playbook_dir=None, module_path=None, **kwargs):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "531:     :param playbook_dir: This parameter is used to sets the relative path to handle playbook adjacent installed plugins.",
          "532:     :param module_path: This parameter is prepend colon-separated path(s) to module library",
          "533:                         (default=~/.ansible/plugins/modules:/usr/share/ansible/plugins/modules).",
          "536:     :param envvars: Environment variables to be used when running Ansible. Environment variables will also be",
          "537:                     read from ``env/envvars`` in ``private_data_dir``",
          "538:     :param passwords: A dictionary containing password prompt patterns and response values used when processing output from",
          "",
          "[Removed Lines]",
          "534:     :param runner_mode: The applicable values are ``pexpect`` and ``subprocess``. Default is set to ``subporcess``.",
          "535:     :param cwd: The current working directory from which the command in executable_cmd shoulbe be executed.",
          "",
          "[Added Lines]",
          "534:     :param runner_mode: The applicable values are ``pexpect`` and ``subprocess``. Default is set to ``subprocess``.",
          "535:     :param cwd: The current working directory from which the command in executable_cmd should be be executed.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "622:     return response, error",
          "626:     '''",
          "629:     :param action: Valid values are one of ``graph``, ``host``, ``list``",
          "630:                    ``graph`` create inventory graph, ``host`` returns specific host info and works as inventory script and",
          "",
          "[Removed Lines]",
          "625: def get_inventory(action, inventories, response_format='json', host=None, playbook_dir=None, vault_ids=None, vault_password_file=None, **kwargs):",
          "627:     Run an ansible-inventory command to get inventory releated details.",
          "",
          "[Added Lines]",
          "625: def get_inventory(action, inventories, response_format=None, host=None, playbook_dir=None, vault_ids=None, vault_password_file=None, **kwargs):",
          "627:     Run an ansible-inventory command to get inventory related details.",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "636:     :param playbook_dir: This parameter is used to sets the relative path for the inventory.",
          "637:     :param vault_ids: The vault identity to use.",
          "638:     :param vault_password_file: The vault password files to use.",
          "641:     :param envvars: Environment variables to be used when running Ansible. Environment variables will also be",
          "642:                     read from ``env/envvars`` in ``private_data_dir``",
          "643:     :param passwords: A dictionary containing password prompt patterns and response values used when processing output from",
          "",
          "[Removed Lines]",
          "639:     :param runner_mode: The applicable values are ``pexpect`` and ``subprocess``. Default is set to ``subporcess``.",
          "640:     :param cwd: The current working directory from which the command in executable_cmd shoulbe be executed.",
          "",
          "[Added Lines]",
          "639:     :param runner_mode: The applicable values are ``pexpect`` and ``subprocess``. Default is set to ``subprocess``.",
          "640:     :param cwd: The current working directory from which the command in executable_cmd should be be executed.",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "740:     :param config_file: Path to configuration file, defaults to first file found in precedence.                         .",
          "741:     :param only_changed: The boolean value when set to ``True`` returns only the configurations that have changed",
          "742:                          from the default. This parameter is applicable only when ``action`` is set to ``dump``.",
          "745:     :param envvars: Environment variables to be used when running Ansible. Environment variables will also be",
          "746:                     read from ``env/envvars`` in ``private_data_dir``",
          "747:     :param passwords: A dictionary containing password prompt patterns and response values used when processing output from Ansible.",
          "",
          "[Removed Lines]",
          "743:     :param runner_mode: The applicable values are ``pexpect`` and ``subprocess``. Default is set to ``subporcess``.",
          "744:     :param cwd: The current working directory from which the command in executable_cmd shoulbe be executed.",
          "",
          "[Added Lines]",
          "743:     :param runner_mode: The applicable values are ``pexpect`` and ``subprocess``. Default is set to ``subprocess``.",
          "744:     :param cwd: The current working directory from which the command in executable_cmd should be be executed.",
          "",
          "---------------"
        ],
        "ansible_runner/runner_config.py||ansible_runner/runner_config.py": [
          "File: ansible_runner/runner_config.py -> ansible_runner/runner_config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: # under the License.",
          "18: #",
          "",
          "[Removed Lines]",
          "20: # to maintian backward compatiblity",
          "21: from ansible_runner.config.runner import *  # noqa",
          "",
          "[Added Lines]",
          "21: from ansible_runner.config.runner import *  # noqa",
          "",
          "---------------"
        ],
        "test/integration/test_interface.py||test/integration/test_interface.py": [
          "File: test/integration/test_interface.py -> test/integration/test_interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:     out, _ = get_plugin_docs(",
          "209:         plugin_names=['file', 'copy'],",
          "210:         plugin_type='module',",
          "212:         quiet=True",
          "213:     )",
          "218: def test_get_plugin_docs_async():",
          "219:     thread, r = get_plugin_docs_async(",
          "220:         plugin_names=['file', 'copy'],",
          "221:         plugin_type='module',",
          "223:         quiet=True",
          "224:     )",
          "225:     thread.join()",
          "",
          "[Removed Lines]",
          "211:         response_format='json',",
          "214:     assert out['copy'] is not None",
          "215:     assert out['file'] is not None",
          "222:         response_format='json',",
          "",
          "[Added Lines]",
          "213:     assert 'copy' in out",
          "214:     assert 'file' in out",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:     out, _ = get_plugin_docs(",
          "239:         plugin_names=['file', 'copy'],",
          "240:         plugin_type='module',",
          "242:         quiet=True,",
          "244:     )",
          "249: def test_get_plugin_docs_list():",
          "250:     out, _ = get_plugin_list(",
          "251:         list_files=True,",
          "253:         quiet=True",
          "254:     )",
          "259: def test_get_plugin_docs_list_within_container(container_runtime_installed):",
          "",
          "[Removed Lines]",
          "241:         response_format='json',",
          "245:     assert out['copy'] is not None",
          "246:     assert out['file'] is not None",
          "252:         response_format='json',",
          "255:     assert out['copy'] is not None",
          "256:     assert out['file'] is not None",
          "",
          "[Added Lines]",
          "242:     assert 'copy' in out",
          "243:     assert 'file' in out",
          "251:     assert 'copy' in out",
          "252:     assert 'file' in out",
          "",
          "---------------"
        ],
        "test/unit/config/test_command.py||test/unit/config/test_command.py": [
          "File: test/unit/config/test_command.py -> test/unit/config/test_command.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: def test_prepare_run_command_non_interactive():",
          "37:     rc = CommandConfig()",
          "38:     executable_cmd = 'ansible-doc'",
          "40:     rc.prepare_run_command(executable_cmd, cmdline_args=cmdline_args)",
          "42:     assert rc.command == expected_command",
          "43:     assert rc.runner_mode == 'subprocess'",
          "44:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "",
          "[Removed Lines]",
          "39:     cmdline_args = ['-l', '-j']",
          "41:     expected_command = ['ansible-doc', '-l', '-j']",
          "",
          "[Added Lines]",
          "39:     cmdline_args = ['-l']",
          "41:     expected_command = ['ansible-doc', '-l']",
          "",
          "---------------"
        ],
        "test/unit/config/test_doc.py||test/unit/config/test_doc.py": [
          "File: test/unit/config/test_doc.py -> test/unit/config/test_doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "85:         extra_container_args + \\",
          "86:         ['--name', 'ansible_runner_foo'] + \\",
          "89:     for index, element in enumerate(expected_command_start):",
          "90:         if '--user=' in element:",
          "",
          "[Removed Lines]",
          "87:         ['my_container'] + ['ansible-doc', '-j', '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy file']",
          "",
          "[Added Lines]",
          "87:         ['my_container'] + ['ansible-doc', '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy file']",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: def test_prepare_plugin_list_command():",
          "97:     rc = DocConfig()",
          "98:     rc.prepare_plugin_list_command(list_files=True, plugin_type='module', playbook_dir='/tmp/test', module_path='/test/module')",
          "100:     assert rc.command == expected_command",
          "101:     assert rc.runner_mode == 'subprocess'",
          "102:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "",
          "[Removed Lines]",
          "99:     expected_command = ['ansible-doc', '-F', '-j', '-t', 'module', '--playbook-dir', '/tmp/test', '-M', '/test/module']",
          "",
          "[Added Lines]",
          "99:     expected_command = ['ansible-doc', '-F', '-t', 'module', '--playbook-dir', '/tmp/test', '-M', '/test/module']",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "133:         extra_container_args + \\",
          "134:         ['--name', 'ansible_runner_foo'] + \\",
          "137:     for index, element in enumerate(expected_command_start):",
          "138:         if '--user=' in element:",
          "",
          "[Removed Lines]",
          "135:         ['my_container'] + ['ansible-doc', '-F', '-j', '-t', 'module', '--playbook-dir', '/tmp/test', '-M', '/test/module']",
          "",
          "[Added Lines]",
          "135:         ['my_container'] + ['ansible-doc', '-F', '-t', 'module', '--playbook-dir', '/tmp/test', '-M', '/test/module']",
          "",
          "---------------"
        ],
        "test/unit/config/test_runner.py||test/unit/config/test_runner.py": [
          "File: test/unit/config/test_runner.py -> test/unit/config/test_runner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:         \"PYTHONPATH is the union of the explicit env['PYTHONPATH'] override and AWX_LIB_DIRECTORY\"",
          "382: def test_prepare_with_ssh_key(open_fifo_write_mock):",
          "383:     rc = RunnerConfig('/')",
          "",
          "[Removed Lines]",
          "381: @patch('ansible_runner.runner_config.open_fifo_write')",
          "",
          "[Added Lines]",
          "381: @patch('ansible_runner.config.runner.open_fifo_write')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7bfa8ad4544e6c6f798413e0a7c84530f710924",
      "candidate_info": {
        "commit_hash": "d7bfa8ad4544e6c6f798413e0a7c84530f710924",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/d7bfa8ad4544e6c6f798413e0a7c84530f710924",
        "files": [
          "ansible_runner/config/__init__.py",
          "ansible_runner/config/_base.py",
          "ansible_runner/config/ansible_cfg.py",
          "ansible_runner/config/command.py",
          "ansible_runner/config/doc.py",
          "ansible_runner/config/inventory.py",
          "ansible_runner/config/runner.py",
          "ansible_runner/interface.py",
          "ansible_runner/runner_config.py",
          "ansible_runner/utils.py",
          "test/data/files/test_ee.py",
          "test/integration/test_interface.py",
          "test/unit/config/__init__.py",
          "test/unit/config/test__base.py",
          "test/unit/config/test_ansible_cfg.py",
          "test/unit/config/test_command.py",
          "test/unit/config/test_doc.py",
          "test/unit/config/test_inventory.py",
          "test/unit/config/test_runner.py"
        ],
        "message": "fix review comments and add testcases",
        "before_after_code_files": [
          "ansible_runner/base_config.py||ansible_runner/config/_base.py",
          "ansible_runner/ansible_config.py||ansible_runner/config/ansible_cfg.py",
          "ansible_runner/command_config.py||ansible_runner/config/command.py",
          "ansible_runner/doc_config.py||ansible_runner/config/doc.py",
          "ansible_runner/inventory_config.py||ansible_runner/config/inventory.py",
          "ansible_runner/config/runner.py||ansible_runner/config/runner.py",
          "ansible_runner/interface.py||ansible_runner/interface.py",
          "ansible_runner/runner_config.py||ansible_runner/runner_config.py",
          "ansible_runner/utils.py||ansible_runner/utils.py",
          "test/data/files/test_ee.py||test/data/files/test_ee.py",
          "test/integration/test_interface.py||test/integration/test_interface.py",
          "test/unit/config/test__base.py||test/unit/config/test__base.py",
          "test/unit/config/test_ansible_cfg.py||test/unit/config/test_ansible_cfg.py",
          "test/unit/config/test_command.py||test/unit/config/test_command.py",
          "test/unit/config/test_doc.py||test/unit/config/test_doc.py",
          "test/unit/config/test_inventory.py||test/unit/config/test_inventory.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ],
          "candidate": [
            "test/integration/test_interface.py||test/integration/test_interface.py",
            "test/unit/config/test_doc.py||test/unit/config/test_doc.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/base_config.py||ansible_runner/config/_base.py": [
          "File: ansible_runner/base_config.py -> ansible_runner/config/_base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "18: #",
          "20: import logging",
          "21: import os",
          "22: import pexpect",
          "",
          "[Removed Lines]",
          "19: import json",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: logger = logging.getLogger('ansible-runner')",
          "48:     NONE = 0",
          "49:     # run ansible commands either locally or within EE",
          "50:     ANSIBLE_COMMANDS = 1",
          "",
          "[Removed Lines]",
          "47: class ExecutionMode():",
          "",
          "[Added Lines]",
          "46: class BaseExecutionMode():",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55: class BaseConfig(object):",
          "57:     def __init__(self,",
          "60:                  process_isolation=False, process_isolation_executable=None,",
          "62:                  ident=None, rotate_artifacts=0, ssh_key=None, quiet=False, json_mode=False):",
          "63:         # common params",
          "64:         self.cwd = cwd",
          "",
          "[Removed Lines]",
          "58:                  cwd=None, envvars=None, passwords=None, settings=None,",
          "59:                  private_data_dir=None, project_dir=None, artifact_dir=None, fact_cache_type='jsonfile', fact_cache=None,",
          "61:                  container_image=None, container_volume_mounts=None, container_options=None, containter_workdir=None,",
          "",
          "[Added Lines]",
          "57:                  private_data_dir=None, cwd=None, envvars=None, passwords=None, settings=None,",
          "58:                  project_dir=None, artifact_dir=None, fact_cache_type='jsonfile', fact_cache=None,",
          "60:                  container_image=None, container_volume_mounts=None, container_options=None, container_workdir=None,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:         self.process_isolation_executable = process_isolation_executable or defaults.default_process_isolation_executable",
          "71:         self.container_image = container_image",
          "72:         self.container_volume_mounts = container_volume_mounts",
          "74:         self.container_name = None  # like other properties, not accurate until prepare is called",
          "75:         self.container_options = container_options",
          "76:         self._volume_mount_paths = []",
          "",
          "[Removed Lines]",
          "73:         self.containter_workdir = containter_workdir",
          "",
          "[Added Lines]",
          "72:         self.container_workdir = container_workdir",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:         self.fact_cache = os.path.join(self.artifact_dir, fact_cache or 'fact_cache') if self.fact_cache_type == 'jsonfile' else None",
          "115:         self.loader = ArtifactLoader(self.private_data_dir)",
          "123:         if not os.path.exists(self.private_data_dir):",
          "124:             os.makedirs(self.private_data_dir, mode=0o700)",
          "",
          "[Removed Lines]",
          "117:         if not self.cwd:",
          "118:             if os.path.exists(self.project_dir):",
          "119:                 self.cwd = self.project_dir",
          "120:             else:",
          "121:                 self.cwd = os.getcwd()",
          "",
          "[Added Lines]",
          "115:         self.cwd = cwd",
          "116:         if not self.cwd and os.path.exists(self.project_dir):",
          "117:             self.cwd = self.project_dir",
          "118:         if self.cwd:",
          "119:             self.cwd = os.path.abspath(self.cwd)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "131:     def containerized(self):",
          "132:         return self.process_isolation and self.process_isolation_executable in self._CONTAINER_ENGINES",
          "135:         \"\"\"",
          "136:         Manages reading environment metadata files under ``private_data_dir`` and merging/updating",
          "137:         with existing values so the :py:class:`ansible_runner.runner.Runner` object can read and use them easily",
          "",
          "[Removed Lines]",
          "134:     def _prepare_env(self):",
          "",
          "[Added Lines]",
          "132:     def _prepare_env(self, runner_mode='pexpect'):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "145:             debug(\"Not loading settings\")",
          "146:             self.settings = dict()",
          "149:             try:",
          "150:                 passwords = self.loader.load_file('env/passwords', Mapping)",
          "151:                 self.expect_passwords = {",
          "",
          "[Removed Lines]",
          "148:         if self.runner_mode == 'pexpect':",
          "",
          "[Added Lines]",
          "146:         if runner_mode == 'pexpect':",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "167:             self.idle_timeout = self.settings.get('idle_timeout', None)",
          "168:             self.job_timeout = self.settings.get('job_timeout', None)",
          "171:             self.subprocess_timeout = self.settings.get('subprocess_timeout', 300)",
          "173:         self.process_isolation = self.settings.get('process_isolation', self.process_isolation)",
          "",
          "[Removed Lines]",
          "170:         elif self.runner_mode == 'subprocess':",
          "",
          "[Added Lines]",
          "168:         elif runner_mode == 'subprocess':",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "230:         if not self.containerized:",
          "231:             callback_dir = self.env.get('AWX_LIB_DIRECTORY', os.getenv('AWX_LIB_DIRECTORY'))",
          "232:             if callback_dir is None:",
          "234:             python_path = self.env.get('PYTHONPATH', os.getenv('PYTHONPATH', ''))",
          "235:             self.env['PYTHONPATH'] = ':'.join([python_path, callback_dir])",
          "236:             if python_path and not python_path.endswith(':'):",
          "",
          "[Removed Lines]",
          "233:                 callback_dir = os.path.join(os.path.split(os.path.abspath(__file__))[0], \"callbacks\")",
          "",
          "[Added Lines]",
          "231:                 callback_dir = os.path.join(os.path.split(os.path.abspath(__file__))[0], \"..\", \"callbacks\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "256:         for k,v in sorted(self.env.items()):",
          "257:             debug(f' {k}: {v}')",
          "260:         if self.ssh_key_data:",
          "261:             logger.debug('ssh key data added')",
          "262:             self.command = self.wrap_args_with_ssh_agent(self.command, self.ssh_key_path)",
          "264:         if self.containerized:",
          "265:             logger.debug('containerization enabled')",
          "267:         else:",
          "268:             logger.debug('containerization disabled')",
          "",
          "[Removed Lines]",
          "259:     def _handle_command_wrap(self):",
          "266:             self.command = self.wrap_args_for_containerization(self.command)",
          "",
          "[Added Lines]",
          "257:     def _handle_command_wrap(self, execution_mode, cmdline_args):",
          "264:             self.command = self.wrap_args_for_containerization(self.command, execution_mode, cmdline_args)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "276:         if path in ('/', '/home', '/usr'):",
          "277:             raise ConfigurationError(\"When using containerized execution, cannot mount '/' or '/home' or '/usr'\")",
          "280:         _playbook = \"\"",
          "283:             if arg in ['-i', '--inventory', '--inventory-file']:",
          "284:                 _book_keeping_copy_inventory_index = _book_keeping_copy.index(arg)",
          "285:                 _book_keeping_copy.pop(_book_keeping_copy_inventory_index)",
          "",
          "[Removed Lines]",
          "279:     def _get_playbook_path(self):",
          "281:         _book_keeping_copy = self.cmdline_args.copy()",
          "282:         for arg in self.cmdline_args:",
          "",
          "[Added Lines]",
          "277:     def _get_playbook_path(self, cmdline_args):",
          "279:         _book_keeping_copy = cmdline_args.copy()",
          "280:         for arg in cmdline_args:",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "325:             else:",
          "326:                 volume_mount_path = \"{}:{}\".format(os.path.dirname(src_mount_path), os.path.dirname(dest_mount_path))",
          "327:         else:",
          "335:                 volume_mount_path = \"{}:{}\".format(src_mount_path, dest_mount_path)",
          "336:             else:",
          "337:                 volume_mount_path = \"{}:{}\".format(os.path.dirname(src_mount_path), os.path.dirname(dest_mount_path))",
          "",
          "[Removed Lines]",
          "328:             if self.containter_workdir and not os.path.isabs(dest_mount_path):",
          "329:                 dest_mount_path = os.path.join(self.containter_workdir, dest_mount_path)",
          "331:             src_mount_path = os.path.abspath(src_mount_path)",
          "332:             dest_mount_path = os.path.abspath(dest_mount_path)",
          "334:             if os.path.isdir(src_mount_path):",
          "",
          "[Added Lines]",
          "326:             if self.container_workdir and not os.path.isabs(dest_mount_path):",
          "327:                 dest_mount_path = os.path.join(self.container_workdir, dest_mount_path)",
          "329:             if os.path.isdir(os.path.abspath(src_mount_path)):",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "343:         if ', '.join(map(str, ['-v', volume_mount_path])) not in ', '.join(map(str, args_list)):",
          "344:             args_list.extend(['-v', volume_mount_path])",
          "347:         inventory_file_options = ['-i', '--inventory', '--inventory-file']",
          "348:         vault_file_options = ['--vault-password-file', '--vault-pass-file']",
          "349:         private_key_file_options = ['--private-key', '--key-file']",
          "351:         optional_mount_args = inventory_file_options + vault_file_options + private_key_file_options",
          "354:             return",
          "357:             return",
          "359:         if 'ansible-playbook' in self.command[0]:",
          "361:             if playbook_file_path:",
          "362:                 self._update_volume_mount_paths(args_list, playbook_file_path)",
          "365:         optional_arg_paths = []",
          "368:             if arg not in optional_mount_args:",
          "369:                 continue",
          "371:             optional_arg_index = cmdline_args_copy.index(arg)",
          "373:             cmdline_args_copy.pop(optional_arg_index)",
          "374:             try:",
          "375:                 optional_arg_value = cmdline_args_copy.pop(optional_arg_index)",
          "",
          "[Removed Lines]",
          "346:     def _handle_ansible_cmd_options_bind_mounts(self, args_list):",
          "353:         if not self.cmdline_args:",
          "356:         if '-h' in self.cmdline_args or '--help' in self.cmdline_args:",
          "360:             playbook_file_path = self._get_playbook_path()",
          "364:         cmdline_args_copy = self.cmdline_args.copy()",
          "366:         for arg in self.cmdline_args:",
          "372:             optional_arg_paths.append(self.cmdline_args[optional_arg_index + 1])",
          "",
          "[Added Lines]",
          "341:     def _handle_ansible_cmd_options_bind_mounts(self, args_list, cmdline_args):",
          "348:         if not cmdline_args:",
          "351:         if '-h' in cmdline_args or '--help' in cmdline_args:",
          "355:             playbook_file_path = self._get_playbook_path(cmdline_args)",
          "359:         cmdline_args_copy = cmdline_args.copy()",
          "361:         for arg in cmdline_args:",
          "367:             optional_arg_paths.append(cmdline_args[optional_arg_index + 1])",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "385:             self._update_volume_mount_paths(args_list, optional_arg_value)",
          "388:         new_args = [self.process_isolation_executable]",
          "389:         new_args.extend(['run', '--rm', '--interactive', '--tty'])",
          "400:             self._update_volume_mount_paths(new_args, self.cwd)",
          "404:         self._ensure_path_safe_to_mount(workdir)",
          "405:         new_args.extend([\"--workdir\", workdir])",
          "407:         self._ensure_path_safe_to_mount(self.private_data_dir)",
          "412:         # Handle automounts",
          "413:         self._handle_automounts(new_args)",
          "",
          "[Removed Lines]",
          "387:     def wrap_args_for_containerization(self, args):",
          "390:         if self.runner_mode == 'pexpect':",
          "391:             new_args.extend(['--tty'])",
          "393:         #new_args.extend([\"-u\", 'root'])",
          "395:         if not self.containter_workdir:",
          "396:             self.container_workdir = \"/runner/project\"",
          "398:         workdir = self.container_workdir",
          "399:         if self.cwd is not None:",
          "401:             if os.path.isabs(self.cwd):",
          "402:                 workdir = self.cwd",
          "409:         if self.execution_mode == ExecutionMode.ANSIBLE_COMMANDS:",
          "410:             self._handle_ansible_cmd_options_bind_mounts(new_args)",
          "",
          "[Added Lines]",
          "382:     def wrap_args_for_containerization(self, args, execution_mode, cmdline_args):",
          "386:         if self.container_workdir:",
          "387:             workdir = self.container_workdir",
          "388:         elif self.cwd is not None and os.path.exists(self.cwd):",
          "389:             # mount current local working diretory if passed and exist",
          "391:             workdir = self.cwd",
          "392:         else:",
          "393:             workdir = \"/runner/project\"",
          "400:         if execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS:",
          "401:             self._handle_ansible_cmd_options_bind_mounts(new_args, cmdline_args)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "418:             new_args.extend([\"--userns=keep-id\"])",
          "419:             new_args.extend([\"--ipc=host\"])",
          "421:         self._update_volume_mount_paths(new_args, \"{}\".format(self.private_data_dir), dest_mount_path=\"/runner\", labels=\":Z\")",
          "423:         if self.container_volume_mounts:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "412:         # Relative paths are mounted relative to /runner/project",
          "413:         for subdir in ('project', 'artifacts'):",
          "414:             subdir_path = os.path.join(self.private_data_dir, subdir)",
          "415:             if not os.path.exists(subdir_path):",
          "416:                 os.mkdir(subdir_path, 0o700)",
          "418:         # playbook / adhoc commands need artifacts mounted to output data",
          "419:         self._update_volume_mount_paths(new_args, \"{}/artifacts\".format(self.private_data_dir), dest_mount_path=\"/runner/artifacts\", labels=\":Z\")",
          "421:         # Mount the entire private_data_dir",
          "422:         # custom show paths inside private_data_dir do not make sense",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "449:         new_args.extend([self.container_image])",
          "450:         new_args.extend(args)",
          "451:         logger.debug(f\"container engine invocation: {' '.join(new_args)}\")",
          "452:         return new_args",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:         print(new_args)",
          "",
          "---------------"
        ],
        "ansible_runner/ansible_config.py||ansible_runner/config/ansible_cfg.py": [
          "File: ansible_runner/ansible_config.py -> ansible_runner/config/ansible_cfg.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: # under the License.",
          "18: #",
          "19: import logging",
          "21: from ansible_runner.exceptions import ConfigurationError",
          "23: logger = logging.getLogger('ansible-runner')",
          "27:     \"\"\"",
          "28:     A ``Runner`` configuration object that's meant to encapsulate the configuration used by the",
          "30:     command execution.",
          "32:     Typically this object is initialized for you when using the standard ``get_ansible_config`` interfaces in :py:mod:`ansible_runner.interface`",
          "36:     :Example:",
          "39:     >>> r = Runner(config=ac)",
          "40:     >>> r.run()",
          "",
          "[Removed Lines]",
          "20: from ansible_runner import base_config",
          "26: class AnsibleConfig(base_config.BaseConfig):",
          "29:     :py:mod:`ansible_runner.runner.AnsibleConfig` object to launch and manage the invocation of",
          "33:     but can be used to construct the ``AnsibleConfig`` configuration to be invoked elsewhere. It can also be overridden to provide different",
          "34:     functionality to the AnsibleConfig object.",
          "38:     >>> ac = AnsibleConfig(...)",
          "",
          "[Added Lines]",
          "20: from ansible_runner.config._base import BaseConfig, BaseExecutionMode",
          "26: class AnsibleCfgConfig(BaseConfig):",
          "29:     :py:mod:`ansible_runner.runner.AnsibleCfgConfig` object to launch and manage the invocation of",
          "33:     but can be used to construct the ``AnsibleCfgConfig`` configuration to be invoked elsewhere. It can also be overridden to provide different",
          "34:     functionality to the AnsibleCfgConfig object.",
          "38:     >>> ac = AnsibleCfgConfig(...)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         if self.runner_mode not in ['pexpect', 'subprocess']:",
          "48:             raise ConfigurationError(\"Invalid runner mode {0}, valid value is either 'pexpect' or 'subprocess'\".format(self.runner_mode))",
          "53:     _supported_actions = ('list', 'dump', 'view')",
          "61:         if action != 'dump' and only_changed:",
          "62:             raise ConfigurationError(\"only_changed is applicable for action 'dump'\")",
          "64:         self.cmdline_args = []",
          "66:         self.cmdline_args.append(action)",
          "",
          "[Removed Lines]",
          "50:         self.execution_mode = base_config.ExecutionMode.ANSIBLE_COMMANDS",
          "51:         super(AnsibleConfig, self).__init__(**kwargs)",
          "56:     def get_ansible_config(self, action, config_file=None, only_changed=None):",
          "58:         if action not in AnsibleConfig._supported_actions:",
          "59:             raise ConfigurationError(\"Invalid action {0}, valid value is one of either {1}\".format(action, \" \".join(AnsibleConfig._supported_actions)))",
          "63:         self._prepare_env()",
          "",
          "[Added Lines]",
          "50:         self.execution_mode = BaseExecutionMode.ANSIBLE_COMMANDS",
          "51:         super(AnsibleCfgConfig, self).__init__(**kwargs)",
          "56:     def prepare_ansible_config_command(self, action, config_file=None, only_changed=None):",
          "58:         if action not in AnsibleCfgConfig._supported_actions:",
          "59:             raise ConfigurationError(\"Invalid action {0}, valid value is one of either {1}\".format(action, \", \".join(AnsibleCfgConfig._supported_actions)))",
          "63:         self._prepare_env(runner_mode=self.runner_mode)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:         if only_changed:",
          "71:             self.cmdline_args.append('--only-changed')",
          "73:         self.command = ['ansible-config'] + self.cmdline_args",
          "",
          "[Removed Lines]",
          "74:         self._handle_command_wrap()",
          "",
          "[Added Lines]",
          "74:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
          "",
          "---------------"
        ],
        "ansible_runner/command_config.py||ansible_runner/config/command.py": [
          "File: ansible_runner/command_config.py -> ansible_runner/config/command.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import logging",
          "20: import os",
          "23: from ansible_runner.exceptions import ConfigurationError",
          "25: logger = logging.getLogger('ansible-runner')",
          "29:     \"\"\"",
          "30:     A ``Runner`` configuration object that's meant to encapsulate the configuration used by the",
          "31:     :py:mod:`ansible_runner.runner.CommandConfig` object to launch and manage the invocation of",
          "",
          "[Removed Lines]",
          "22: from ansible_runner import base_config",
          "28: class CommandConfig(base_config.BaseConfig):",
          "",
          "[Added Lines]",
          "22: from ansible_runner.config._base import BaseConfig, BaseExecutionMode",
          "28: class CommandConfig(BaseConfig):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:             raise ConfigurationError(\"input_fd is applicable only with 'subprocess' runner mode\")",
          "53:         if runner_mode and runner_mode not in ['pexpect', 'subprocess']:",
          "56:         # runner params",
          "57:         self.runner_mode = runner_mode",
          "61:         super(CommandConfig, self).__init__(**kwargs)",
          "",
          "[Removed Lines]",
          "54:             raise ConfigurationError(\"Invalid runner mode {0}, valid value is either 'pexpect' or 'subprocess'\".format(self.runner_mode))",
          "59:         self.execution_mode = base_config.ExecutionMode.NONE",
          "",
          "[Added Lines]",
          "54:             raise ConfigurationError(\"Invalid runner mode {0}, valid value is either 'pexpect' or 'subprocess'\".format(runner_mode))",
          "59:         self.execution_mode = BaseExecutionMode.NONE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:         else:",
          "73:             self.runner_mode = 'pexpect'",
          "76:         self.executable_cmd = executable_cmd",
          "77:         self.cmdline_args = cmdline_args",
          "79:         if self.runner_mode is None:",
          "80:             self._set_runner_mode()",
          "83:         self._prepare_command()",
          "87:     def _prepare_command(self):",
          "88:         \"\"\"",
          "89:         Determines if it is ``ansible`` command or ``generic`` command and generate the command line",
          "90:         \"\"\"",
          "91:         if not self.executable_cmd:",
          "92:             raise ConfigurationError(\"For CommandRunner 'executable_cmd' value is required\")",
          "94:         if self.executable_cmd.split(os.pathsep)[-1].startswith('ansible'):",
          "96:         else:",
          "99:         if self.cmdline_args:",
          "100:             self.command = [self.executable_cmd] + self.cmdline_args",
          "101:         else:",
          "102:             self.command = [self.executable_cmd]",
          "105:            and 'python' in self.executable_cmd.split(os.pathsep)[-1] and self.cmdline_args is None:",
          "106:             raise ConfigurationError(\"Runner requires python filename for execution\")",
          "108:             raise ConfigurationError(\"No executable for runner to run\")",
          "",
          "[Removed Lines]",
          "75:     def run_command(self, executable_cmd, cmdline_args=None):",
          "82:         self._prepare_env()",
          "85:         self._handle_command_wrap()",
          "95:             self.execution_mode = base_config.ExecutionMode.ANSIBLE_COMMANDS",
          "97:             self.execution_mode = base_config.ExecutionMode.GENERIC_COMMANDS",
          "104:         if self.execution_mode == base_config.ExecutionMode.GENERIC_COMMANDS \\",
          "107:         elif self.execution_mode == base_config.ExecutionMode.NONE:",
          "",
          "[Added Lines]",
          "75:     def prepare_run_command(self, executable_cmd, cmdline_args=None):",
          "82:         self._prepare_env(runner_mode=self.runner_mode)",
          "85:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
          "95:             self.execution_mode = BaseExecutionMode.ANSIBLE_COMMANDS",
          "97:             self.execution_mode = BaseExecutionMode.GENERIC_COMMANDS",
          "104:         if self.execution_mode == BaseExecutionMode.GENERIC_COMMANDS \\",
          "107:         elif self.execution_mode == BaseExecutionMode.NONE:",
          "",
          "---------------"
        ],
        "ansible_runner/doc_config.py||ansible_runner/config/doc.py": [
          "File: ansible_runner/doc_config.py -> ansible_runner/config/doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #",
          "19: import logging",
          "22: from ansible_runner.exceptions import ConfigurationError",
          "24: logger = logging.getLogger('ansible-runner')",
          "28:     \"\"\"",
          "29:     A ``Runner`` configuration object that's meant to encapsulate the configuration used by the",
          "30:     :py:mod:`ansible_runner.runner.DocConfig` object to launch and manage the invocation of",
          "",
          "[Removed Lines]",
          "21: from ansible_runner import base_config",
          "27: class DocConfig(base_config.BaseConfig):",
          "",
          "[Added Lines]",
          "21: from ansible_runner.config._base import BaseConfig, BaseExecutionMode",
          "27: class DocConfig(BaseConfig):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         if self.runner_mode not in ['pexpect', 'subprocess']:",
          "49:             raise ConfigurationError(\"Invalid runner mode {0}, valid value is either 'pexpect' or 'subprocess'\".format(self.runner_mode))",
          "52:         super(DocConfig, self).__init__(**kwargs)",
          "54:     _supported_response_formats = ('json', 'human')",
          "59:         if response_format and response_format not in DocConfig._supported_response_formats:",
          "60:             raise ConfigurationError(\"Invalid response_format {0}, valid value is one of either {1}\".format(response_format,",
          "63:         if not isinstance(plugin_names, list):",
          "64:             raise ConfigurationError(\"plugin_names should be of type list, instead received {0} of type {1}\".format(plugin_names, type(plugin_names)))",
          "67:         self.command = ['ansible-doc']",
          "68:         self.cmdline_args = []",
          "",
          "[Removed Lines]",
          "51:         self.execution_mode = base_config.ExecutionMode.ANSIBLE_COMMANDS",
          "56:     def get_plugin_docs(self, plugin_names, plugin_type=None, response_format='json',",
          "57:                         snippet=False, playbook_dir=None, module_path=None):",
          "61:                                                                                                             \" \".join(DocConfig._supported_output_formats)))",
          "66:         self._prepare_env()",
          "",
          "[Added Lines]",
          "51:         self.execution_mode = BaseExecutionMode.ANSIBLE_COMMANDS",
          "56:     def prepare_plugin_docs_command(self, plugin_names, plugin_type=None, response_format='json',",
          "57:                                     snippet=False, playbook_dir=None, module_path=None):",
          "61:                                                                                                             \", \".join(DocConfig._supported_response_formats)))",
          "66:         self._prepare_env(runner_mode=self.runner_mode)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:         self.cmdline_args.append(\" \".join(plugin_names))",
          "87:         self.command = ['ansible-doc'] + self.cmdline_args",
          "93:         if response_format and response_format not in DocConfig._supported_response_formats:",
          "94:             raise ConfigurationError(\"Invalid response_format {0}, valid value is one of either {1}\".format(response_format,",
          "97:         self._prepare_env()",
          "98:         self.cmdline_args = []",
          "",
          "[Removed Lines]",
          "88:         self._handle_command_wrap()",
          "90:     def get_plugin_list(self, list_files=None, response_format='json', plugin_type=None,",
          "91:                         playbook_dir=None, module_path=None):",
          "95:                                                                                                             \" \".join(DocConfig._supported_output_formats)))",
          "",
          "[Added Lines]",
          "88:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
          "90:     def prepare_plugin_list_command(self, list_files=None, response_format='json', plugin_type=None,",
          "91:                                     playbook_dir=None, module_path=None):",
          "95:                                                                                                             \", \".join(DocConfig._supported_response_formats)))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:             self.cmdline_args.extend(['-M', module_path])",
          "117:         self.command = ['ansible-doc'] + self.cmdline_args",
          "",
          "[Removed Lines]",
          "118:         self._handle_command_wrap()",
          "",
          "[Added Lines]",
          "118:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
          "",
          "---------------"
        ],
        "ansible_runner/inventory_config.py||ansible_runner/config/inventory.py": [
          "File: ansible_runner/inventory_config.py -> ansible_runner/config/inventory.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: # under the License.",
          "18: #",
          "19: import logging",
          "21: from ansible_runner.exceptions import ConfigurationError",
          "23: logger = logging.getLogger('ansible-runner')",
          "27:     \"\"\"",
          "28:     A ``Runner`` configuration object that's meant to encapsulate the configuration used by the",
          "29:     :py:mod:`ansible_runner.runner.InventoryConfig` object to launch and manage the invocation of",
          "",
          "[Removed Lines]",
          "20: from ansible_runner import base_config",
          "26: class InventoryConfig(base_config.BaseConfig):",
          "",
          "[Added Lines]",
          "20: from ansible_runner.config._base import BaseConfig, BaseExecutionMode",
          "26: class InventoryConfig(BaseConfig):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:         if self.runner_mode not in ['pexpect', 'subprocess']:",
          "48:             raise ConfigurationError(\"Invalid runner mode {0}, valid value is either 'pexpect' or 'subprocess'\".format(self.runner_mode))",
          "51:         super(InventoryConfig, self).__init__(**kwargs)",
          "53:     _supported_response_formats = ('json', 'yaml', 'toml')",
          "54:     _supported_actions = ('graph', 'host', 'list')",
          "58:         if action not in InventoryConfig._supported_actions:",
          "61:         if response_format and response_format not in InventoryConfig._supported_response_formats:",
          "62:             raise ConfigurationError(\"Invalid response_format {0}, valid value is one of \"",
          "65:         if not isinstance(inventories, list):",
          "66:             raise ConfigurationError(\"inventories should be of type list, instead received {0} of type {1}\".format(inventories, type(inventories)))",
          "68:         if action == \"host\" and host is None:",
          "71:         if action == \"graph\" and response_format and response_format != 'json':",
          "72:             raise ConfigurationError(\"'graph' action supports only 'json' response format\")",
          "75:         self.cmdline_args = []",
          "77:         self.cmdline_args.append('--{0}'.format(action))",
          "",
          "[Removed Lines]",
          "50:         self.execution_mode = base_config.ExecutionMode.ANSIBLE_COMMANDS",
          "56:     def get_inventory(self, action, inventories, response_format='json', host=None, playbook_dir=None, vault_ids=None, vault_password_file=None):",
          "59:             raise ConfigurationError(\"Invalid action {0}, valid value is one of either {1}\".format(action, \" \".join(InventoryConfig._supported_actions)))",
          "63:                                      \"either {1}\".format(response_format, \" \".join(InventoryConfig._supported_output_formats)))",
          "69:             raise ConfigurationError(\"Value of host paramter is required when action in 'host'\")",
          "74:         self._prepare_env()",
          "",
          "[Added Lines]",
          "50:         self.execution_mode = BaseExecutionMode.ANSIBLE_COMMANDS",
          "56:     def prepare_inventory_command(self, action, inventories, response_format='json', host=None, playbook_dir=None, vault_ids=None, vault_password_file=None):",
          "59:             raise ConfigurationError(\"Invalid action {0}, valid value is one of either {1}\".format(action, \", \".join(InventoryConfig._supported_actions)))",
          "63:                                      \"either {1}\".format(response_format, \", \".join(InventoryConfig._supported_response_formats)))",
          "69:             raise ConfigurationError(\"Value of host parameter is required when action in 'host'\")",
          "74:         self._prepare_env(runner_mode=self.runner_mode)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:             self.cmdline_args.extend(['--vault-password-file', vault_password_file])",
          "96:         self.command = ['ansible-inventory'] + self.cmdline_args",
          "",
          "[Removed Lines]",
          "97:         self._handle_command_wrap()",
          "",
          "[Added Lines]",
          "97:         self._handle_command_wrap(self.execution_mode, self.cmdline_args)",
          "",
          "---------------"
        ],
        "ansible_runner/config/runner.py||ansible_runner/config/runner.py": [
          "File: ansible_runner/config/runner.py -> ansible_runner/config/runner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ############################",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #   http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing,",
          "13: # software distributed under the License is distributed on an",
          "14: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "15: # KIND, either express or implied.  See the License for the",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "18: #",
          "19: import json",
          "20: import logging",
          "21: import os",
          "22: import pexpect",
          "23: import re",
          "24: import shlex",
          "25: import stat",
          "26: import tempfile",
          "28: import six",
          "29: from uuid import uuid4",
          "30: try:",
          "31:     from collections.abc import Mapping",
          "32: except ImportError:",
          "33:     from collections import Mapping",
          "35: from distutils.dir_util import copy_tree",
          "37: from six import iteritems, string_types, text_type",
          "39: from ansible_runner import defaults",
          "40: from ansible_runner import output",
          "41: from ansible_runner.exceptions import ConfigurationError",
          "42: from ansible_runner.loader import ArtifactLoader",
          "43: from ansible_runner.output import debug",
          "44: from ansible_runner.utils import (",
          "45:     open_fifo_write,",
          "46:     args2cmdline,",
          "47:     sanitize_container_name",
          "48: )",
          "50: logger = logging.getLogger('ansible-runner')",
          "53: class ExecutionMode():",
          "54:     NONE = 0",
          "55:     ANSIBLE = 1",
          "56:     ANSIBLE_PLAYBOOK = 2",
          "57:     RAW = 3",
          "58:     CLI_EXECENV = 4",
          "61: class RunnerConfig(object):",
          "62:     \"\"\"",
          "63:     A ``Runner`` configuration object that's meant to encapsulate the configuration used by the",
          "64:     :py:mod:`ansible_runner.runner.Runner` object to launch and manage the invocation of ``ansible``",
          "65:     and ``ansible-playbook``",
          "67:     Typically this object is initialized for you when using the standard ``run`` interfaces in :py:mod:`ansible_runner.interface`",
          "68:     but can be used to construct the ``Runner`` configuration to be invoked elsewhere. It can also be overridden to provide different",
          "69:     functionality to the Runner object.",
          "71:     :Example:",
          "73:     >>> rc = RunnerConfig(...)",
          "74:     >>> r = Runner(config=rc)",
          "75:     >>> r.run()",
          "77:     \"\"\"",
          "79:     def __init__(self,",
          "80:                  private_data_dir=None, playbook=None, ident=None,",
          "81:                  inventory=None, roles_path=None, limit=None, module=None, module_args=None,",
          "82:                  verbosity=None, quiet=False, json_mode=False, artifact_dir=None,",
          "83:                  rotate_artifacts=0, host_pattern=None, binary=None, extravars=None, suppress_ansible_output=False,",
          "84:                  process_isolation=False, process_isolation_executable=None, process_isolation_path=None,",
          "85:                  process_isolation_hide_paths=None, process_isolation_show_paths=None, process_isolation_ro_paths=None,",
          "86:                  container_image=None, container_volume_mounts=None, container_options=None,",
          "87:                  resource_profiling=False, resource_profiling_base_cgroup='ansible-runner', resource_profiling_cpu_poll_interval=0.25,",
          "88:                  resource_profiling_memory_poll_interval=0.25, resource_profiling_pid_poll_interval=0.25,",
          "89:                  resource_profiling_results_dir=None,",
          "90:                  tags=None, skip_tags=None, fact_cache_type='jsonfile', fact_cache=None, ssh_key=None,",
          "91:                  project_dir=None, directory_isolation_base_path=None, envvars=None, forks=None, cmdline=None, omit_event_data=False,",
          "92:                  only_failed_event_data=False, cli_execenv_cmd=\"\"):",
          "93:         self.private_data_dir = os.path.abspath(private_data_dir)",
          "94:         if ident is None:",
          "95:             self.ident = str(uuid4())",
          "96:         else:",
          "97:             self.ident = ident",
          "98:         self.json_mode = json_mode",
          "99:         self.playbook = playbook",
          "100:         self.inventory = inventory",
          "101:         self.roles_path = roles_path",
          "102:         self.limit = limit",
          "103:         self.module = module",
          "104:         self.module_args = module_args",
          "105:         self.cli_execenv_cmd = cli_execenv_cmd",
          "106:         self.host_pattern = host_pattern",
          "107:         self.binary = binary",
          "108:         self.rotate_artifacts = rotate_artifacts",
          "109:         self.artifact_dir = os.path.abspath(artifact_dir or self.private_data_dir)",
          "111:         if artifact_dir is None:",
          "112:             self.artifact_dir = os.path.join(self.private_data_dir, 'artifacts')",
          "113:         else:",
          "114:             self.artifact_dir = os.path.abspath(artifact_dir)",
          "116:         if self.ident is not None:",
          "117:             self.artifact_dir = os.path.join(self.artifact_dir, \"{}\".format(self.ident))",
          "119:         self.extra_vars = extravars",
          "120:         self.process_isolation = process_isolation",
          "121:         self.process_isolation_executable = process_isolation_executable or defaults.default_process_isolation_executable",
          "122:         self.process_isolation_path = process_isolation_path",
          "123:         self.container_name = None  # like other properties, not accurate until prepare is called",
          "124:         self.process_isolation_path_actual = None",
          "125:         self.process_isolation_hide_paths = process_isolation_hide_paths",
          "126:         self.process_isolation_show_paths = process_isolation_show_paths",
          "127:         self.process_isolation_ro_paths = process_isolation_ro_paths",
          "128:         self.container_image = container_image or defaults.default_container_image",
          "129:         self.container_volume_mounts = container_volume_mounts",
          "130:         self.container_options = container_options",
          "131:         self.resource_profiling = resource_profiling",
          "132:         self.resource_profiling_base_cgroup = resource_profiling_base_cgroup",
          "133:         self.resource_profiling_cpu_poll_interval = resource_profiling_cpu_poll_interval",
          "134:         self.resource_profiling_memory_poll_interval = resource_profiling_memory_poll_interval",
          "135:         self.resource_profiling_pid_poll_interval = resource_profiling_pid_poll_interval",
          "136:         self.resource_profiling_results_dir = resource_profiling_results_dir",
          "138:         self.directory_isolation_path = directory_isolation_base_path",
          "139:         if not project_dir:",
          "140:             self.project_dir = os.path.join(self.private_data_dir, 'project')",
          "141:         else:",
          "142:             self.project_dir = project_dir",
          "143:         self.verbosity = verbosity",
          "144:         self.quiet = quiet",
          "145:         self.suppress_ansible_output = suppress_ansible_output",
          "146:         self.loader = ArtifactLoader(self.private_data_dir)",
          "147:         self.tags = tags",
          "148:         self.skip_tags = skip_tags",
          "149:         self.fact_cache_type = fact_cache_type",
          "150:         self.fact_cache = os.path.join(self.artifact_dir, fact_cache or 'fact_cache') if self.fact_cache_type == 'jsonfile' else None",
          "151:         self.ssh_key_data = ssh_key",
          "152:         self.execution_mode = ExecutionMode.NONE",
          "153:         self.envvars = envvars",
          "154:         self.forks = forks",
          "155:         self.cmdline_args = cmdline",
          "157:         self.omit_event_data = omit_event_data",
          "158:         self.only_failed_event_data = only_failed_event_data",
          "160:     _CONTAINER_ENGINES = ('docker', 'podman')",
          "162:     @property",
          "163:     def sandboxed(self):",
          "164:         return self.process_isolation and self.process_isolation_executable not in self._CONTAINER_ENGINES",
          "166:     @property",
          "167:     def containerized(self):",
          "168:         return self.process_isolation and self.process_isolation_executable in self._CONTAINER_ENGINES",
          "170:     def prepare(self):",
          "171:         \"\"\"",
          "172:         Performs basic checks and then properly invokes",
          "174:         - prepare_inventory",
          "175:         - prepare_env",
          "176:         - prepare_command",
          "178:         It's also responsible for wrapping the command with the proper ssh agent invocation",
          "179:         and setting early ANSIBLE_ environment variables.",
          "180:         \"\"\"",
          "181:         # ansible_path = find_executable('ansible')",
          "182:         # if ansible_path is None or not os.access(ansible_path, os.X_OK):",
          "183:         #     raise ConfigurationError(\"Ansible not found. Make sure that it is installed.\")",
          "184:         if self.private_data_dir is None:",
          "185:             raise ConfigurationError(\"Runner Base Directory is not defined\")",
          "186:         if self.module and self.playbook:",
          "187:             raise ConfigurationError(\"Only one of playbook and module options are allowed\")",
          "188:         if not os.path.exists(self.artifact_dir):",
          "189:             os.makedirs(self.artifact_dir, mode=0o700)",
          "190:         if self.sandboxed and self.directory_isolation_path is not None:",
          "191:             self.directory_isolation_path = tempfile.mkdtemp(prefix='runner_di_', dir=self.directory_isolation_path)",
          "192:             if os.path.exists(self.project_dir):",
          "193:                 output.debug(\"Copying directory tree from {} to {} for working directory isolation\".format(self.project_dir,",
          "194:                                                                                                            self.directory_isolation_path))",
          "195:                 copy_tree(self.project_dir, self.directory_isolation_path, preserve_symlinks=True)",
          "197:         self.prepare_env()",
          "198:         self.prepare_inventory()",
          "199:         self.prepare_command()",
          "201:         if self.execution_mode == ExecutionMode.ANSIBLE_PLAYBOOK and self.playbook is None:",
          "202:             raise ConfigurationError(\"Runner playbook required when running ansible-playbook\")",
          "203:         elif self.execution_mode == ExecutionMode.ANSIBLE and self.module is None:",
          "204:             raise ConfigurationError(\"Runner module required when running ansible\")",
          "205:         elif self.execution_mode == ExecutionMode.CLI_EXECENV and self.cmdline_args is None:",
          "206:             raise ConfigurationError(\"Runner requires arguments to pass to ansible, try '-h' for ansible help output\")",
          "207:         elif self.execution_mode == ExecutionMode.NONE:",
          "208:             raise ConfigurationError(\"No executable for runner to run\")",
          "210:         # write the SSH key data into a fifo read by ssh-agent",
          "211:         if self.ssh_key_data:",
          "212:             self.ssh_key_path = os.path.join(self.artifact_dir, 'ssh_key_data')",
          "213:             open_fifo_write(self.ssh_key_path, self.ssh_key_data)",
          "214:             self.command = self.wrap_args_with_ssh_agent(self.command, self.ssh_key_path)",
          "216:         # Use local callback directory",
          "217:         if not self.containerized:",
          "218:             callback_dir = self.env.get('AWX_LIB_DIRECTORY', os.getenv('AWX_LIB_DIRECTORY'))",
          "219:             if callback_dir is None:",
          "220:                 callback_dir = os.path.join(os.path.split(os.path.abspath(__file__))[0], \"..\", \"callbacks\")",
          "221:             python_path = self.env.get('PYTHONPATH', os.getenv('PYTHONPATH', ''))",
          "222:             self.env['PYTHONPATH'] = ':'.join([python_path, callback_dir])",
          "223:             if python_path and not python_path.endswith(':'):",
          "224:                 python_path += ':'",
          "225:             self.env['ANSIBLE_CALLBACK_PLUGINS'] = ':'.join(filter(None,(self.env.get('ANSIBLE_CALLBACK_PLUGINS'), callback_dir)))",
          "227:         if 'AD_HOC_COMMAND_ID' in self.env:",
          "228:             self.env['ANSIBLE_STDOUT_CALLBACK'] = 'minimal'",
          "229:         else:",
          "230:             self.env['ANSIBLE_STDOUT_CALLBACK'] = 'awx_display'",
          "231:         self.env['ANSIBLE_RETRY_FILES_ENABLED'] = 'False'",
          "232:         if 'ANSIBLE_HOST_KEY_CHECKING' not in self.env:",
          "233:             self.env['ANSIBLE_HOST_KEY_CHECKING'] = 'False'",
          "234:         if not self.containerized:",
          "235:             self.env['AWX_ISOLATED_DATA_DIR'] = self.artifact_dir",
          "237:         if self.resource_profiling:",
          "238:             callback_whitelist = os.environ.get('ANSIBLE_CALLBACK_WHITELIST', '').strip()",
          "239:             self.env['ANSIBLE_CALLBACK_WHITELIST'] = ','.join(filter(None, [callback_whitelist, 'cgroup_perf_recap']))",
          "240:             self.env['CGROUP_CONTROL_GROUP'] = '{}/{}'.format(self.resource_profiling_base_cgroup, self.ident)",
          "241:             if self.resource_profiling_results_dir:",
          "242:                 cgroup_output_dir = self.resource_profiling_results_dir",
          "243:             else:",
          "244:                 cgroup_output_dir = os.path.normpath(os.path.join(self.private_data_dir, 'profiling_data'))",
          "246:             # Create results directory if it does not exist",
          "247:             if not os.path.isdir(cgroup_output_dir):",
          "248:                 os.mkdir(cgroup_output_dir, stat.S_IREAD | stat.S_IWRITE | stat.S_IEXEC)",
          "250:             self.env['CGROUP_OUTPUT_DIR'] = cgroup_output_dir",
          "251:             self.env['CGROUP_OUTPUT_FORMAT'] = 'json'",
          "252:             self.env['CGROUP_CPU_POLL_INTERVAL'] = str(self.resource_profiling_cpu_poll_interval)",
          "253:             self.env['CGROUP_MEMORY_POLL_INTERVAL'] = str(self.resource_profiling_memory_poll_interval)",
          "254:             self.env['CGROUP_PID_POLL_INTERVAL'] = str(self.resource_profiling_pid_poll_interval)",
          "255:             self.env['CGROUP_FILE_PER_TASK'] = 'True'",
          "256:             self.env['CGROUP_WRITE_FILES'] = 'True'",
          "257:             self.env['CGROUP_DISPLAY_RECAP'] = 'False'",
          "259:         if self.roles_path:",
          "260:             if isinstance(self.roles_path, list):",
          "261:                 self.env['ANSIBLE_ROLES_PATH'] = ':'.join(self.roles_path)",
          "262:             else:",
          "263:                 self.env['ANSIBLE_ROLES_PATH'] = self.roles_path",
          "265:         if self.sandboxed:",
          "266:             debug('sandbox enabled')",
          "267:             self.command = self.wrap_args_for_sandbox(self.command)",
          "268:         else:",
          "269:             debug('sandbox disabled')",
          "271:         if self.resource_profiling and self.execution_mode == ExecutionMode.ANSIBLE_PLAYBOOK:",
          "272:             self.command = self.wrap_args_with_cgexec(self.command)",
          "274:         if self.fact_cache_type == 'jsonfile':",
          "275:             self.env['ANSIBLE_CACHE_PLUGIN'] = 'jsonfile'",
          "276:             if not self.containerized:",
          "277:                 self.env['ANSIBLE_CACHE_PLUGIN_CONNECTION'] = self.fact_cache",
          "279:         self.env[\"RUNNER_OMIT_EVENTS\"] = str(self.omit_event_data)",
          "280:         self.env[\"RUNNER_ONLY_FAILED_EVENTS\"] = str(self.only_failed_event_data)",
          "282:         if self.containerized:",
          "283:             debug('containerization enabled')",
          "284:             self.command = self.wrap_args_for_containerization(self.command)",
          "285:         else:",
          "286:             debug('containerization disabled')",
          "288:         debug('env:')",
          "289:         for k,v in sorted(self.env.items()):",
          "290:             debug(f' {k}: {v}')",
          "291:         if hasattr(self, 'command') and isinstance(self.command, list):",
          "292:             debug(f\"command: {' '.join(self.command)}\")",
          "294:     def prepare_inventory(self):",
          "295:         \"\"\"",
          "296:         Prepares the inventory default under ``private_data_dir`` if it's not overridden by the constructor.",
          "297:         \"\"\"",
          "298:         if self.containerized:",
          "299:             self.inventory = '/runner/inventory/hosts'",
          "300:             return",
          "302:         if self.inventory is None:",
          "303:             if os.path.exists(os.path.join(self.private_data_dir, \"inventory\")):",
          "304:                 self.inventory = os.path.join(self.private_data_dir, \"inventory\")",
          "306:     def prepare_env(self):",
          "307:         \"\"\"",
          "308:         Manages reading environment metadata files under ``private_data_dir`` and merging/updating",
          "309:         with existing values so the :py:class:`ansible_runner.runner.Runner` object can read and use them easily",
          "310:         \"\"\"",
          "311:         try:",
          "312:             passwords = self.loader.load_file('env/passwords', Mapping)",
          "313:             self.expect_passwords = {",
          "314:                 re.compile(pattern, re.M): password",
          "315:                 for pattern, password in iteritems(passwords)",
          "316:             }",
          "317:         except ConfigurationError:",
          "318:             output.debug('Not loading passwords')",
          "319:             self.expect_passwords = dict()",
          "320:         self.expect_passwords[pexpect.TIMEOUT] = None",
          "321:         self.expect_passwords[pexpect.EOF] = None",
          "323:         try:",
          "324:             self.settings = self.loader.load_file('env/settings', Mapping)",
          "325:         except ConfigurationError:",
          "326:             output.debug(\"Not loading settings\")",
          "327:             self.settings = dict()",
          "329:         self.process_isolation = self.settings.get('process_isolation', self.process_isolation)",
          "330:         self.process_isolation_executable = self.settings.get('process_isolation_executable', self.process_isolation_executable)",
          "332:         if self.containerized:",
          "333:             self.container_name = \"ansible_runner_{}\".format(sanitize_container_name(self.ident))",
          "334:             self.env = {}",
          "335:             # Special flags to convey info to entrypoint or process in container",
          "336:             self.env['LAUNCHED_BY_RUNNER'] = '1'",
          "337:             artifact_dir = os.path.join(\"/runner/artifacts\", \"{}\".format(self.ident))",
          "338:             self.env['AWX_ISOLATED_DATA_DIR'] = artifact_dir",
          "339:             if self.fact_cache_type == 'jsonfile':",
          "340:                 self.env['ANSIBLE_CACHE_PLUGIN_CONNECTION'] = os.path.join(artifact_dir, 'fact_cache')",
          "341:         else:",
          "342:             # seed env with existing shell env",
          "343:             self.env = os.environ.copy()",
          "345:         if self.envvars and isinstance(self.envvars, dict):",
          "346:             self.env.update(self.envvars)",
          "348:         try:",
          "349:             envvars = self.loader.load_file('env/envvars', Mapping)",
          "350:             if envvars:",
          "351:                 self.env.update({str(k):str(v) for k, v in envvars.items()})",
          "352:         except ConfigurationError:",
          "353:             output.debug(\"Not loading environment vars\")",
          "354:             # Still need to pass default environment to pexpect",
          "356:         try:",
          "357:             if self.ssh_key_data is None:",
          "358:                 self.ssh_key_data = self.loader.load_file('env/ssh_key', string_types)",
          "359:         except ConfigurationError:",
          "360:             output.debug(\"Not loading ssh key\")",
          "361:             self.ssh_key_data = None",
          "363:         self.idle_timeout = self.settings.get('idle_timeout', None)",
          "364:         self.job_timeout = self.settings.get('job_timeout', None)",
          "365:         self.pexpect_timeout = self.settings.get('pexpect_timeout', 5)",
          "367:         self.process_isolation_path = self.settings.get('process_isolation_path', self.process_isolation_path)",
          "368:         self.process_isolation_hide_paths = self.settings.get('process_isolation_hide_paths', self.process_isolation_hide_paths)",
          "369:         self.process_isolation_show_paths = self.settings.get('process_isolation_show_paths', self.process_isolation_show_paths)",
          "370:         self.process_isolation_ro_paths = self.settings.get('process_isolation_ro_paths', self.process_isolation_ro_paths)",
          "371:         self.directory_isolation_cleanup = bool(self.settings.get('directory_isolation_cleanup', True))",
          "372:         self.container_image = self.settings.get('container_image', self.container_image)",
          "373:         self.container_volume_mounts = self.settings.get('container_volume_mounts', self.container_volume_mounts)",
          "374:         self.container_options = self.settings.get('container_options', self.container_options)",
          "376:         self.resource_profiling = self.settings.get('resource_profiling', self.resource_profiling)",
          "377:         self.resource_profiling_base_cgroup = self.settings.get('resource_profiling_base_cgroup', self.resource_profiling_base_cgroup)",
          "378:         self.resource_profiling_cpu_poll_interval = self.settings.get('resource_profiling_cpu_poll_interval', self.resource_profiling_cpu_poll_interval)",
          "379:         self.resource_profiling_memory_poll_interval = self.settings.get('resource_profiling_memory_poll_interval',",
          "380:                                                                          self.resource_profiling_memory_poll_interval)",
          "381:         self.resource_profiling_pid_poll_interval = self.settings.get('resource_profiling_pid_poll_interval', self.resource_profiling_pid_poll_interval)",
          "382:         self.resource_profiling_results_dir = self.settings.get('resource_profiling_results_dir', self.resource_profiling_results_dir)",
          "383:         self.pexpect_use_poll = self.settings.get('pexpect_use_poll', True)",
          "384:         self.suppress_ansible_output = self.settings.get('suppress_ansible_output', self.quiet)",
          "386:         if 'AD_HOC_COMMAND_ID' in self.env or not os.path.exists(self.project_dir):",
          "387:             self.cwd = self.private_data_dir",
          "388:         else:",
          "389:             if self.directory_isolation_path is not None:",
          "390:                 self.cwd = self.directory_isolation_path",
          "391:             else:",
          "392:                 self.cwd = self.project_dir",
          "394:         if 'fact_cache' in self.settings:",
          "395:             if 'fact_cache_type' in self.settings:",
          "396:                 if self.settings['fact_cache_type'] == 'jsonfile':",
          "397:                     self.fact_cache = os.path.join(self.artifact_dir, self.settings['fact_cache'])",
          "398:             else:",
          "399:                 self.fact_cache = os.path.join(self.artifact_dir, self.settings['fact_cache'])",
          "401:     def prepare_command(self):",
          "402:         \"\"\"",
          "403:         Determines if the literal ``ansible`` or ``ansible-playbook`` commands are given",
          "404:         and if not calls :py:meth:`ansible_runner.runner_config.RunnerConfig.generate_ansible_command`",
          "405:         \"\"\"",
          "406:         if not self.cli_execenv_cmd:",
          "407:             try:",
          "408:                 cmdline_args = self.loader.load_file('args', string_types, encoding=None)",
          "410:                 if six.PY2 and isinstance(cmdline_args, text_type):",
          "411:                     cmdline_args = cmdline_args.encode('utf-8')",
          "412:                 self.command = shlex.split(cmdline_args)",
          "413:                 self.execution_mode = ExecutionMode.RAW",
          "414:             except ConfigurationError:",
          "415:                 self.command = self.generate_ansible_command()",
          "416:         else:",
          "417:             if self.cli_execenv_cmd:",
          "418:                 if self.cli_execenv_cmd == 'adhoc':",
          "419:                     self.command = ['ansible'] + self.cmdline_args",
          "420:                 elif self.cli_execenv_cmd == 'playbook':",
          "421:                     self.command = ['ansible-playbook'] + self.cmdline_args",
          "422:                 self.execution_mode = ExecutionMode.CLI_EXECENV",
          "425:     def generate_ansible_command(self):",
          "426:         \"\"\"",
          "427:         Given that the ``RunnerConfig`` preparation methods have been run to gather the inputs this method",
          "428:         will generate the ``ansible`` or ``ansible-playbook`` command that will be used by the",
          "429:         :py:class:`ansible_runner.runner.Runner` object to start the process",
          "430:         \"\"\"",
          "431:         # FIXME - this never happens because the conditional in prepare_command",
          "432:         #         \"branches around it\" and I need to figure out if that's the",
          "433:         #         correct course of action or not.",
          "434:         if self.cli_execenv_cmd:",
          "435:             if self.cli_execenv_cmd == 'adhoc':",
          "436:                 base_command = 'ansible'",
          "437:             elif self.cli_execenv_cmd == 'playbook':",
          "438:                 base_command = 'ansible-playbook'",
          "439:             self.execution_mode = ExecutionMode.CLI_EXECENV",
          "440:         elif self.binary is not None:",
          "441:             base_command = self.binary",
          "442:             self.execution_mode = ExecutionMode.RAW",
          "443:         elif self.module is not None:",
          "444:             base_command = 'ansible'",
          "445:             self.execution_mode = ExecutionMode.ANSIBLE",
          "446:         else:",
          "447:             base_command = 'ansible-playbook'",
          "448:             self.execution_mode = ExecutionMode.ANSIBLE_PLAYBOOK",
          "450:         exec_list = [base_command]",
          "452:         if self.cli_execenv_cmd:",
          "453:             # Provide dummy data for Tower/AWX vars so that playbooks won't",
          "454:             # fail with undefined var errors",
          "455:             awx_tower_vars = {",
          "456:                 'awx_job_id': 1,",
          "457:                 'tower_job_id': 1,",
          "458:                 'awx_job_launch_type': 'workflow',",
          "459:                 'tower_job_launch_type': 'workflow',",
          "460:                 'awx_workflow_job_name': 'workflow-job',",
          "461:                 'tower_workflow_job_name': 'workflow-job',",
          "462:                 'awx_workflow_job_id': 1,",
          "463:                 'tower_workflow_job_id': 1,",
          "464:                 'awx_parent_job_schedule_id': 1,",
          "465:                 'tower_parent_job_schedule_id': 1,",
          "466:                 'awx_parent_job_schedule_name': 'job-schedule',",
          "467:                 'tower_parent_job_schedule_name': 'job-schedule',",
          "468:             }",
          "469:             for k,v in awx_tower_vars.items():",
          "470:                 exec_list.append('-e')",
          "471:                 exec_list.append('\"{}={}\"'.format(k, v))",
          "473:         try:",
          "474:             if self.cmdline_args:",
          "475:                 cmdline_args = self.cmdline_args",
          "476:             else:",
          "477:                 cmdline_args = self.loader.load_file('env/cmdline', string_types, encoding=None)",
          "479:             if six.PY2 and isinstance(cmdline_args, text_type):",
          "480:                 cmdline_args = cmdline_args.encode('utf-8')",
          "482:             args = shlex.split(cmdline_args)",
          "483:             exec_list.extend(args)",
          "484:         except ConfigurationError:",
          "485:             pass",
          "487:         if self.inventory is None:",
          "488:             pass",
          "489:         elif isinstance(self.inventory, list):",
          "490:             for i in self.inventory:",
          "491:                 exec_list.append(\"-i\")",
          "492:                 exec_list.append(i)",
          "493:         else:",
          "494:             exec_list.append(\"-i\")",
          "495:             exec_list.append(self.inventory)",
          "497:         if self.limit is not None:",
          "498:             exec_list.append(\"--limit\")",
          "499:             exec_list.append(self.limit)",
          "501:         if self.loader.isfile('env/extravars'):",
          "502:             if self.containerized:",
          "503:                 extravars_path = '/runner/env/extravars'",
          "504:             else:",
          "505:                 extravars_path = self.loader.abspath('env/extravars')",
          "506:             exec_list.extend(['-e', '@{}'.format(extravars_path)])",
          "508:         if self.extra_vars:",
          "509:             if isinstance(self.extra_vars, dict) and self.extra_vars:",
          "510:                 extra_vars_list = []",
          "511:                 for k in self.extra_vars:",
          "512:                     extra_vars_list.append(\"\\\"{}\\\":{}\".format(k, json.dumps(self.extra_vars[k])))",
          "514:                 exec_list.extend(",
          "515:                     [",
          "516:                         '-e',",
          "517:                         '{%s}' % ','.join(extra_vars_list)",
          "518:                     ]",
          "519:                 )",
          "520:             elif self.loader.isfile(self.extra_vars):",
          "521:                 exec_list.extend(['-e', '@{}'.format(self.loader.abspath(self.extra_vars))])",
          "523:         if self.verbosity:",
          "524:             v = 'v' * self.verbosity",
          "525:             exec_list.append('-{}'.format(v))",
          "527:         if self.tags:",
          "528:             exec_list.extend(['--tags', '{}'.format(self.tags)])",
          "530:         if self.skip_tags:",
          "531:             exec_list.extend(['--skip-tags', '{}'.format(self.skip_tags)])",
          "533:         if self.forks:",
          "534:             exec_list.extend(['--forks', '{}'.format(self.forks)])",
          "536:         # Other parameters",
          "537:         if self.execution_mode == ExecutionMode.ANSIBLE_PLAYBOOK:",
          "538:             exec_list.append(self.playbook)",
          "539:         elif self.execution_mode == ExecutionMode.ANSIBLE:",
          "540:             exec_list.append(\"-m\")",
          "541:             exec_list.append(self.module)",
          "543:             if self.module_args is not None:",
          "544:                 exec_list.append(\"-a\")",
          "545:                 exec_list.append(self.module_args)",
          "547:             if self.host_pattern is not None:",
          "548:                 exec_list.append(self.host_pattern)",
          "550:         return exec_list",
          "552:     def build_process_isolation_temp_dir(self):",
          "553:         '''",
          "554:         Create a temporary directory for process isolation to use.",
          "555:         '''",
          "556:         path = tempfile.mkdtemp(prefix='ansible_runner_pi_', dir=self.process_isolation_path)",
          "557:         os.chmod(path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)",
          "558:         return path",
          "560:     def wrap_args_with_cgexec(self, args):",
          "561:         '''",
          "562:         Wrap existing command line with cgexec in order to profile resource usage",
          "563:         '''",
          "564:         new_args = ['cgexec', '--sticky', '-g', 'cpuacct,memory,pids:{}/{}'.format(self.resource_profiling_base_cgroup, self.ident)]",
          "565:         new_args.extend(args)",
          "566:         return new_args",
          "569:     def wrap_args_for_sandbox(self, args):",
          "570:         '''",
          "571:         Wrap existing command line with bwrap to restrict access to:",
          "572:          - self.process_isolation_path (generally, /tmp) (except for own /tmp files)",
          "573:         '''",
          "574:         cwd = os.path.realpath(self.cwd)",
          "575:         self.process_isolation_path_actual = self.build_process_isolation_temp_dir()",
          "576:         new_args = [self.process_isolation_executable or 'bwrap', '--die-with-parent', '--unshare-pid', '--dev-bind', '/', '/', '--proc', '/proc']",
          "578:         for path in sorted(set(self.process_isolation_hide_paths or [])):",
          "579:             if not os.path.exists(path):",
          "580:                 logger.debug('hide path not found: {0}'.format(path))",
          "581:                 continue",
          "582:             path = os.path.realpath(path)",
          "583:             if os.path.isdir(path):",
          "584:                 new_path = tempfile.mkdtemp(dir=self.process_isolation_path_actual)",
          "585:                 os.chmod(new_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)",
          "586:             else:",
          "587:                 handle, new_path = tempfile.mkstemp(dir=self.process_isolation_path_actual)",
          "588:                 os.close(handle)",
          "589:                 os.chmod(new_path, stat.S_IRUSR | stat.S_IWUSR)",
          "590:             new_args.extend(['--bind', '{0}'.format(new_path), '{0}'.format(path)])",
          "592:         if self.private_data_dir:",
          "593:             show_paths = [self.private_data_dir]",
          "594:         else:",
          "595:             show_paths = [cwd]",
          "597:         for path in sorted(set(self.process_isolation_ro_paths or [])):",
          "598:             if not os.path.exists(path):",
          "599:                 logger.debug('read-only path not found: {0}'.format(path))",
          "600:                 continue",
          "601:             path = os.path.realpath(path)",
          "602:             new_args.extend(['--ro-bind', '{0}'.format(path),  '{0}'.format(path)])",
          "604:         show_paths.extend(self.process_isolation_show_paths or [])",
          "605:         for path in sorted(set(show_paths)):",
          "606:             if not os.path.exists(path):",
          "607:                 logger.debug('show path not found: {0}'.format(path))",
          "608:                 continue",
          "609:             path = os.path.realpath(path)",
          "610:             new_args.extend(['--bind', '{0}'.format(path), '{0}'.format(path)])",
          "612:         if self.execution_mode == ExecutionMode.ANSIBLE_PLAYBOOK:",
          "613:             # playbook runs should cwd to the SCM checkout dir",
          "614:             if self.directory_isolation_path is not None:",
          "615:                 new_args.extend(['--chdir', os.path.realpath(self.directory_isolation_path)])",
          "616:             else:",
          "617:                 new_args.extend(['--chdir', os.path.realpath(self.project_dir)])",
          "618:         elif self.execution_mode == ExecutionMode.ANSIBLE:",
          "619:             # ad-hoc runs should cwd to the root of the private data dir",
          "620:             new_args.extend(['--chdir', os.path.realpath(self.private_data_dir)])",
          "622:         new_args.extend(args)",
          "623:         return new_args",
          "625:     def wrap_args_for_containerization(self, args):",
          "626:         new_args = [self.process_isolation_executable]",
          "627:         new_args.extend(['run', '--rm', '--tty', '--interactive'])",
          "628:         container_workdir = \"/runner/project\"",
          "629:         new_args.extend([\"--workdir\", container_workdir])",
          "630:         self.cwd = container_workdir",
          "632:         def _ensure_path_safe_to_mount(path):",
          "633:             if path in ('/home', '/usr'):",
          "634:                 raise ConfigurationError(\"When using containerized execution, cannot mount /home or /usr\")",
          "636:         _ensure_path_safe_to_mount(self.private_data_dir)",
          "638:         def _parse_cli_execenv_cmd_playbook_args():",
          "640:             # Determine all inventory file paths, accounting for the possibility of multiple",
          "641:             # inventory files provided",
          "642:             _inventory_paths = []",
          "643:             _playbook = \"\"",
          "644:             _book_keeping_copy = self.cmdline_args.copy()",
          "645:             for arg in self.cmdline_args:",
          "646:                 if arg == '-i':",
          "647:                     _book_keeping_copy_inventory_index = _book_keeping_copy.index('-i')",
          "648:                     _inventory_paths.append(self.cmdline_args[_book_keeping_copy_inventory_index + 1])",
          "649:                     _book_keeping_copy.pop(_book_keeping_copy_inventory_index)",
          "650:                     _book_keeping_copy.pop(_book_keeping_copy_inventory_index)",
          "652:             if len(_book_keeping_copy) == 1:",
          "653:                 # it's probably safe to assume this is the playbook",
          "654:                 _playbook = _book_keeping_copy[0]",
          "655:             elif _book_keeping_copy[0][0] != '-':",
          "656:                 # this should be the playbook, it's the only \"naked\" arg",
          "657:                 _playbook = _book_keeping_copy[0]",
          "658:             else:",
          "659:                 # parse everything beyond the first arg because we checked that",
          "660:                 # in the previous case already",
          "661:                 for arg in _book_keeping_copy[1:]:",
          "662:                     if arg[0] == '-':",
          "663:                         continue",
          "664:                     elif _book_keeping_copy[(_book_keeping_copy.index(arg) - 1)][0] != '-':",
          "665:                         _playbook = arg",
          "666:                         break",
          "668:             return (_playbook, _inventory_paths)",
          "670:         if self.cli_execenv_cmd:",
          "671:             _parsed_playbook_path, _parsed_inventory_paths = _parse_cli_execenv_cmd_playbook_args()",
          "672:             if self.cli_execenv_cmd == 'playbook':",
          "673:                 playbook_file_path = _parsed_playbook_path",
          "674:                 _ensure_path_safe_to_mount(playbook_file_path)",
          "675:                 if os.path.isabs(playbook_file_path) and (os.path.dirname(playbook_file_path) != '/'):",
          "676:                     new_args.extend([",
          "677:                         \"-v\", \"{}:{}\".format(",
          "678:                             os.path.dirname(playbook_file_path),",
          "679:                             os.path.dirname(playbook_file_path),",
          "680:                         )",
          "681:                     ])",
          "682:                 else:",
          "683:                     new_args.extend([",
          "684:                         \"-v\", \"{}:/runner/project/{}\".format(",
          "685:                             os.path.dirname(os.path.abspath(playbook_file_path)),",
          "686:                             os.path.dirname(playbook_file_path),",
          "687:                         )",
          "688:                     ])",
          "690:             # volume mount inventory into the exec env container if provided at cli",
          "691:             if '-i' in self.cmdline_args:",
          "692:                 inventory_file_paths = _parsed_inventory_paths",
          "693:                 inventory_playbook_share_parent = False",
          "694:                 for inventory_file_path in inventory_file_paths:",
          "695:                     _ensure_path_safe_to_mount(inventory_file_path)",
          "696:                     if self.cli_execenv_cmd == 'playbook':",
          "697:                         if os.path.dirname(os.path.abspath(inventory_file_path)) == \\",
          "698:                                 os.path.dirname(os.path.abspath(playbook_file_path)):",
          "699:                             inventory_playbook_share_parent = True",
          "700:                     if not inventory_file_path.endswith(',') and not inventory_playbook_share_parent:",
          "701:                         if os.path.isabs(inventory_file_path) and (os.path.dirname(inventory_file_path) != '/'):",
          "702:                             new_args.extend([",
          "703:                                 \"-v\", \"{}:{}\".format(",
          "704:                                     os.path.dirname(inventory_file_path),",
          "705:                                     os.path.dirname(inventory_file_path),",
          "706:                                 )",
          "707:                             ])",
          "708:                         else:",
          "709:                             new_args.extend([",
          "710:                                 \"-v\", \"{}:/runner/project/{}\".format(",
          "711:                                     os.path.dirname(os.path.abspath(inventory_file_path)),",
          "712:                                     os.path.dirname(inventory_file_path),",
          "713:                                 )",
          "714:                             ])",
          "717:             # Handle automounts",
          "718:             cli_automounts = [",
          "719:                 {",
          "720:                     'ENVS': ['SSH_AUTH_SOCK'],",
          "721:                     'PATHS': [",
          "722:                         {",
          "723:                             'src': '{}/.ssh/'.format(os.environ['HOME']),",
          "724:                             'dest': '/home/runner/.ssh/'",
          "725:                         },",
          "726:                         {",
          "727:                             'src': '/etc/ssh/ssh_known_hosts',",
          "728:                             'dest': '/etc/ssh/ssh_known_hosts'",
          "729:                         }",
          "730:                     ]",
          "731:                 },",
          "732:                 {",
          "733:                     \"ENVS\": ['K8S_AUTH_KUBECONFIG'],",
          "734:                     \"PATHS\": [",
          "735:                         {",
          "736:                             'src': '{}/.kube/'.format(os.environ['HOME']),",
          "737:                             'dest': '/home/runner/.kube/'",
          "738:                         },",
          "739:                     ]",
          "740:                 },",
          "741:                 {",
          "742:                     \"ENVS\": [",
          "743:                         'AWS_URL', 'EC2_URL', 'AWS_ACCESS_KEY_ID', 'AWS_ACCESS_KEY',",
          "744:                         'EC2_ACCESS_KEY', 'AWS_SECRET_ACCESS_KEY', 'AWS_SECRET_KEY', 'EC2_SECRET_KEY',",
          "745:                         'AWS_SECURITY_TOKEN', 'EC2_SECURITY_TOKEN', 'AWS_REGION', 'EC2_REGION'",
          "746:                     ],",
          "747:                     \"PATHS\": [",
          "748:                         {",
          "749:                             'src': '{}/.boto/'.format(os.environ['HOME']),",
          "750:                             'dest': '/home/runner/.boto/'",
          "751:                         },",
          "752:                     ]",
          "753:                 },",
          "754:                 {",
          "755:                     \"ENVS\": [",
          "756:                         'AZURE_SUBSCRIPTION_ID', 'AZURE_CLIENT_ID', 'AZURE_SECRET', 'AZURE_TENANT',",
          "757:                         'AZURE_AD_USER', 'AZURE_PASSWORD'",
          "758:                     ],",
          "759:                     \"PATHS\": [",
          "760:                         {",
          "761:                             'src': '{}/.azure/'.format(os.environ['HOME']),",
          "762:                             'dest': '/home/runner/.azure/'",
          "763:                         },",
          "764:                     ]",
          "765:                 },",
          "766:                 {",
          "767:                     \"ENVS\": [",
          "768:                         'gcp_service_account_file', 'GCP_SERVICE_ACCOUNT_FILE', 'GCP_SERVICE_ACCOUNT_CONTENTS',",
          "769:                         'GCP_SERVICE_ACCOUNT_EMAIL', 'GCP_AUTH_KIND', 'GCP_SCOPES'",
          "770:                     ],",
          "771:                     \"PATHS\": [",
          "772:                         {",
          "773:                             'src': '{}/.gcp/'.format(os.environ['HOME']),",
          "774:                             'dest': '/home/runner/.gcp/'",
          "775:                         },",
          "776:                     ]",
          "777:                 }",
          "778:             ]",
          "779:             for cli_automount in cli_automounts:",
          "780:                 for env in cli_automount['ENVS']:",
          "781:                     if env in os.environ:",
          "782:                         dest_path = os.environ[env]",
          "784:                         if os.path.exists(os.environ[env]):",
          "785:                             if os.environ[env].startswith(os.environ['HOME']):",
          "786:                                 dest_path = '/home/runner/{}'.format(os.environ[env].lstrip(os.environ['HOME']))",
          "787:                             elif os.environ[env].startswith('~'):",
          "788:                                 dest_path = '/home/runner/{}'.format(os.environ[env].lstrip('~/'))",
          "789:                             else:",
          "790:                                 dest_path = os.environ[env]",
          "791:                             new_args.extend([\"-v\", \"{}:{}\".format(os.environ[env], dest_path)])",
          "793:                         new_args.extend([\"-e\", \"{}={}\".format(env, dest_path)])",
          "795:                 for paths in cli_automount['PATHS']:",
          "796:                     if os.path.exists(paths['src']):",
          "797:                         new_args.extend([\"-v\", \"{}:{}\".format(paths['src'], paths['dest'])])",
          "799:             if 'podman' in self.process_isolation_executable:",
          "800:                 # container namespace stuff",
          "801:                 new_args.extend([\"--group-add=root\"])",
          "802:                 new_args.extend([\"--userns=keep-id\"])",
          "803:                 new_args.extend([\"--ipc=host\"])",
          "805:         # the playbook / adhoc cases (cli_execenv_cmd) are handled separately",
          "806:         # because they have pre-existing mounts already in new_args",
          "807:         if self.cli_execenv_cmd:",
          "808:             # Relative paths are mounted relative to /runner/project",
          "809:             for subdir in ('project', 'artifacts'):",
          "810:                 subdir_path = os.path.join(self.private_data_dir, subdir)",
          "811:                 if not os.path.exists(subdir_path):",
          "812:                     os.mkdir(subdir_path, 0o700)",
          "814:             # playbook / adhoc commands need artifacts mounted to output data",
          "815:             new_args.extend([\"-v\", \"{}/artifacts:/runner/artifacts:Z\".format(self.private_data_dir)])",
          "816:         else:",
          "817:             subdir_path = os.path.join(self.private_data_dir, 'artifacts')",
          "818:             if not os.path.exists(subdir_path):",
          "819:                 os.mkdir(subdir_path, 0o700)",
          "821:             # Mount the entire private_data_dir",
          "822:             # custom show paths inside private_data_dir do not make sense",
          "823:             new_args.extend([\"-v\", \"{}:/runner:Z\".format(self.private_data_dir)])",
          "825:         container_volume_mounts = self.container_volume_mounts",
          "826:         if container_volume_mounts:",
          "827:             for mapping in container_volume_mounts:",
          "828:                 host_path, container_path = mapping.split(':', 1)",
          "829:                 _ensure_path_safe_to_mount(host_path)",
          "830:                 new_args.extend([\"-v\", \"{}:{}\".format(host_path, container_path)])",
          "832:         # Reference the file with list of keys to pass into container",
          "833:         # this file will be written in ansible_runner.runner",
          "834:         env_file_host = os.path.join(self.artifact_dir, 'env.list')",
          "835:         new_args.extend(['--env-file', env_file_host])",
          "837:         if 'podman' in self.process_isolation_executable:",
          "838:             # docker doesnt support this option",
          "839:             new_args.extend(['--quiet'])",
          "841:         if 'docker' in self.process_isolation_executable:",
          "842:             new_args.extend([f'--user={os.getuid()}'])",
          "844:         new_args.extend(['--name', self.container_name])",
          "846:         if self.container_options:",
          "847:             new_args.extend(self.container_options)",
          "849:         new_args.extend([self.container_image])",
          "851:         new_args.extend(args)",
          "852:         debug(f\"container engine invocation: {' '.join(new_args)}\")",
          "854:         return new_args",
          "856:     def wrap_args_with_ssh_agent(self, args, ssh_key_path, ssh_auth_sock=None, silence_ssh_add=False):",
          "857:         \"\"\"",
          "858:         Given an existing command line and parameterization this will return the same command line wrapped with the",
          "859:         necessary calls to ``ssh-agent``",
          "860:         \"\"\"",
          "861:         if self.containerized:",
          "862:             artifact_dir = os.path.join(\"/runner/artifacts\", \"{}\".format(self.ident))",
          "863:             ssh_key_path = os.path.join(artifact_dir, \"ssh_key_data\")",
          "865:         if ssh_key_path:",
          "866:             ssh_add_command = args2cmdline('ssh-add', ssh_key_path)",
          "867:             if silence_ssh_add:",
          "868:                 ssh_add_command = ' '.join([ssh_add_command, '2>/dev/null'])",
          "869:             ssh_key_cleanup_command = 'rm -f {}'.format(ssh_key_path)",
          "870:             # The trap ensures the fifo is cleaned up even if the call to ssh-add fails.",
          "871:             # This prevents getting into certain scenarios where subsequent reads will",
          "872:             # hang forever.",
          "873:             cmd = ' && '.join([args2cmdline('trap', ssh_key_cleanup_command, 'EXIT'),",
          "874:                                ssh_add_command,",
          "875:                                ssh_key_cleanup_command,",
          "876:                                args2cmdline(*args)])",
          "877:             args = ['ssh-agent']",
          "878:             if ssh_auth_sock:",
          "879:                 args.extend(['-a', ssh_auth_sock])",
          "880:             args.extend(['sh', '-c', cmd])",
          "881:         return args",
          "",
          "---------------"
        ],
        "ansible_runner/interface.py||ansible_runner/interface.py": [
          "File: ansible_runner/interface.py -> ansible_runner/interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: # under the License.",
          "19: #",
          "20: import os",
          "21: import sys",
          "22: import threading",
          "23: import logging",
          "25: from ansible_runner import output",
          "31: from ansible_runner.runner import Runner",
          "32: from ansible_runner.streaming import Transmitter, Worker, Processor",
          "33: from ansible_runner.utils import (",
          "34:     dump_artifacts,",
          "35:     check_isolation_executable_installed,",
          "36: )",
          "38: logging.getLogger('ansible-runner').addHandler(logging.NullHandler())",
          "",
          "[Removed Lines]",
          "26: from ansible_runner.runner_config import RunnerConfig",
          "27: from ansible_runner.command_config import CommandConfig",
          "28: from ansible_runner.inventory_config import InventoryConfig",
          "29: from ansible_runner.ansible_config import AnsibleConfig",
          "30: from ansible_runner.doc_config import DocConfig",
          "",
          "[Added Lines]",
          "21: import json",
          "27: from ansible_runner.config.runner import RunnerConfig",
          "28: from ansible_runner.config.command import CommandConfig",
          "29: from ansible_runner.config.inventory import InventoryConfig",
          "30: from ansible_runner.config.ansible_cfg import AnsibleCfgConfig",
          "31: from ansible_runner.config.doc import DocConfig",
          "37:     santize_json_response",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:     finished_callback = kwargs.pop('finished_callback', None)",
          "280:     rc = CommandConfig(**kwargs)",
          "282:     return Runner(rc,",
          "283:                   event_handler=event_callback_handler,",
          "284:                   status_handler=status_callback_handler,",
          "",
          "[Removed Lines]",
          "281:     rc.run_command(executable_cmd, cmdline_args=cmdline_args)",
          "",
          "[Added Lines]",
          "283:     rc.prepare_run_command(executable_cmd, cmdline_args=cmdline_args)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:     :param runner_mode: The applicable values are ``pexpect`` and ``subprocess``. If the value of ``input_fd`` parameter",
          "302:                         is set or the executable command is one of ``ansible-config``, ``ansible-doc`` or ``ansible-galaxy``",
          "303:                         the default value is set to ``subprocess`` else in other cases it is set to ``pexpect``.",
          "305:     :param envvars: Environment variables to be used when running Ansible. Environment variables will also be",
          "306:                     read from ``env/envvars`` in ``private_data_dir``",
          "307:     :param passwords: A dictionary containing password prompt patterns and response values used when processing output from",
          "",
          "[Removed Lines]",
          "304:     :param cwd: The current working directory from which the command in executable_cmd shoulbe be executed.",
          "",
          "[Added Lines]",
          "306:     :param cwd: The current working directory from which the command in executable_cmd shoul be be executed.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "319:     :param container_image: Container image to use when running an ansible task (default: quay.io/ansible/ansible-runner:devel)",
          "320:     :param container_volume_mounts: List of bind mounts in the form 'host_dir:/container_dir:labels. (default: None)",
          "321:     :param container_options: List of container options to pass to execution engine.",
          "323:     :param fact_cache: A string that will be used as the name for the subdirectory of the fact cache in artifacts directory.",
          "324:                        This is only used for 'jsonfile' type fact caches.",
          "325:     :param fact_cache_type: A string of the type of fact cache to use.  Defaults to 'jsonfile'.",
          "",
          "[Removed Lines]",
          "322:     :param containter_workdir: The working directory within the container.",
          "",
          "[Added Lines]",
          "324:     :param container_workdir: The working directory within the container.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "344:     :type settings: dict",
          "345:     :type private_data_dir: str",
          "346:     :type project_dir: str",
          "348:     :type fact_cache_type: str",
          "349:     :type fact_cache: str",
          "350:     :type process_isolation: bool",
          "",
          "[Removed Lines]",
          "347:     :type artifact_dir: int",
          "",
          "[Added Lines]",
          "349:     :type artifact_dir: str",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "352:     :type container_image: str",
          "353:     :type container_volume_mounts: list",
          "354:     :type container_options: list",
          "356:     :type ident: str",
          "357:     :type rotate_artifacts: int",
          "358:     :type ssh_key: str",
          "",
          "[Removed Lines]",
          "355:     :type containter_workdir: str",
          "",
          "[Added Lines]",
          "357:     :type container_workdir: str",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "405:     finished_callback = kwargs.pop('finished_callback', None)",
          "407:     rd = DocConfig(**kwargs)",
          "409:     return Runner(rd, event_handler=event_callback_handler, status_handler=status_callback_handler, artifacts_handler=artifacts_handler,",
          "410:                   cancel_callback=cancel_callback, finished_callback=finished_callback)",
          "",
          "[Removed Lines]",
          "408:     rd.get_plugin_docs(plugin_names, plugin_type=plugin_type, response_format=response_format, snippet=snippet, playbook_dir=playbook_dir)",
          "",
          "[Added Lines]",
          "410:     rd.prepare_plugin_docs_command(plugin_names, plugin_type=plugin_type, response_format=response_format, snippet=snippet, playbook_dir=playbook_dir)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "443:     :param container_image: Container image to use when running an ansible task (default: quay.io/ansible/ansible-runner:devel)",
          "444:     :param container_volume_mounts: List of bind mounts in the form 'host_dir:/container_dir:labels. (default: None)",
          "445:     :param container_options: List of container options to pass to execution engine.",
          "447:     :param fact_cache: A string that will be used as the name for the subdirectory of the fact cache in artifacts directory.",
          "448:                        This is only used for 'jsonfile' type fact caches.",
          "449:     :param fact_cache_type: A string of the type of fact cache to use.  Defaults to 'jsonfile'.",
          "",
          "[Removed Lines]",
          "446:     :param containter_workdir: The working directory within the container.",
          "",
          "[Added Lines]",
          "448:     :param container_workdir: The working directory within the container.",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "469:     :type settings: dict",
          "470:     :type private_data_dir: str",
          "471:     :type project_dir: str",
          "473:     :type fact_cache_type: str",
          "474:     :type fact_cache: str",
          "475:     :type process_isolation: bool",
          "",
          "[Removed Lines]",
          "472:     :type artifact_dir: int",
          "",
          "[Added Lines]",
          "474:     :type artifact_dir: str",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "477:     :type container_image: str",
          "478:     :type container_volume_mounts: list",
          "479:     :type container_options: list",
          "481:     :type ident: str",
          "482:     :type rotate_artifacts: int",
          "483:     :type ssh_key: str",
          "",
          "[Removed Lines]",
          "480:     :type containter_workdir: str",
          "",
          "[Added Lines]",
          "482:     :type container_workdir: str",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "490:     :type artifacts_handler: function",
          "492:     :returns: Returns a tuple of response and error string. In case if ``runner_mode`` is set to ``pexpect`` the error value is empty as",
          "494:     '''",
          "495:     r = init_plugin_docs_config(plugin_names, plugin_type=plugin_type, response_format=response_format, snippet=snippet, playbook_dir=snippet, **kwargs)",
          "496:     r.run()",
          "497:     response = r.stdout.read()",
          "498:     error = r.stderr.read()",
          "499:     return response, error",
          "",
          "[Removed Lines]",
          "493:               ``pexpect`` uses same output descriptor for stdout and stderr.",
          "",
          "[Added Lines]",
          "495:               ``pexpect`` uses same output descriptor for stdout and stderr. If the vaue of ``response_format`` is ``json``",
          "496:               it returns a python dictionary object.",
          "502:     if response_format == 'json':",
          "503:         response = json.loads(santize_json_response(response))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "545:     :param container_image: Container image to use when running an ansible task (default: quay.io/ansible/ansible-runner:devel)",
          "546:     :param container_volume_mounts: List of bind mounts in the form 'host_dir:/container_dir:labels. (default: None)",
          "547:     :param container_options: List of container options to pass to execution engine.",
          "549:     :param fact_cache: A string that will be used as the name for the subdirectory of the fact cache in artifacts directory.",
          "550:                        This is only used for 'jsonfile' type fact caches.",
          "551:     :param fact_cache_type: A string of the type of fact cache to use.  Defaults to 'jsonfile'.",
          "",
          "[Removed Lines]",
          "548:     :param containter_workdir: The working directory within the container.",
          "",
          "[Added Lines]",
          "553:     :param container_workdir: The working directory within the container.",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "570:     :type settings: dict",
          "571:     :type private_data_dir: str",
          "572:     :type project_dir: str",
          "574:     :type fact_cache_type: str",
          "575:     :type fact_cache: str",
          "576:     :type process_isolation: bool",
          "",
          "[Removed Lines]",
          "573:     :type artifact_dir: int",
          "",
          "[Added Lines]",
          "578:     :type artifact_dir: str",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "578:     :type container_image: str",
          "579:     :type container_volume_mounts: list",
          "580:     :type container_options: list",
          "582:     :type ident: str",
          "583:     :type rotate_artifacts: int",
          "584:     :type ssh_key: str",
          "",
          "[Removed Lines]",
          "581:     :type containter_workdir: str",
          "",
          "[Added Lines]",
          "586:     :type container_workdir: str",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "591:     :type artifacts_handler: function",
          "593:     :returns: Returns a tuple of response and error string. In case if ``runner_mode`` is set to ``pexpect`` the error value is empty as",
          "595:     '''",
          "596:     event_callback_handler = kwargs.pop('event_handler', None)",
          "597:     status_callback_handler = kwargs.pop('status_handler', None)",
          "",
          "[Removed Lines]",
          "594:               ``pexpect`` uses same output descriptor for stdout and stderr.",
          "",
          "[Added Lines]",
          "599:               ``pexpect`` uses same output descriptor for stdout and stderr. If the vaue of ``response_format`` is ``json``",
          "600:               it returns a python dictionary object.",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "600:     finished_callback = kwargs.pop('finished_callback', None)",
          "602:     rd = DocConfig(**kwargs)",
          "605:     r = Runner(rd,",
          "606:                event_handler=event_callback_handler,",
          "607:                status_handler=status_callback_handler,",
          "",
          "[Removed Lines]",
          "603:     rd.get_plugin_list(list_files=list_files, response_format=response_format, plugin_type=plugin_type,",
          "604:                        playbook_dir=playbook_dir, module_path=module_path)",
          "",
          "[Added Lines]",
          "609:     rd.prepare_plugin_list_command(list_files=list_files, response_format=response_format, plugin_type=plugin_type,",
          "610:                                    playbook_dir=playbook_dir, module_path=module_path)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "611:     r.run()",
          "612:     response = r.stdout.read()",
          "613:     error = r.stderr.read()",
          "614:     return response, error",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:     if response_format == 'json':",
          "621:         response = json.loads(santize_json_response(response))",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "647:     :param container_image: Container image to use when running an ansible task (default: quay.io/ansible/ansible-runner:devel)",
          "648:     :param container_volume_mounts: List of bind mounts in the form 'host_dir:/container_dir:labels. (default: None)",
          "649:     :param container_options: List of container options to pass to execution engine.",
          "651:     :param fact_cache: A string that will be used as the name for the subdirectory of the fact cache in artifacts directory.",
          "652:                        This is only used for 'jsonfile' type fact caches.",
          "653:     :param fact_cache_type: A string of the type of fact cache to use.  Defaults to 'jsonfile'.",
          "",
          "[Removed Lines]",
          "650:     :param containter_workdir: The working directory within the container.",
          "",
          "[Added Lines]",
          "658:     :param container_workdir: The working directory within the container.",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "674:     :type settings: dict",
          "675:     :type private_data_dir: str",
          "676:     :type project_dir: str",
          "678:     :type fact_cache_type: str",
          "679:     :type fact_cache: str",
          "680:     :type process_isolation: bool",
          "",
          "[Removed Lines]",
          "677:     :type artifact_dir: int",
          "",
          "[Added Lines]",
          "685:     :type artifact_dir: str",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "682:     :type container_image: str",
          "683:     :type container_volume_mounts: list",
          "684:     :type container_options: list",
          "686:     :type ident: str",
          "687:     :type rotate_artifacts: int",
          "688:     :type ssh_key: str",
          "",
          "[Removed Lines]",
          "685:     :type containter_workdir: str",
          "",
          "[Added Lines]",
          "693:     :type container_workdir: str",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "695:     :type artifacts_handler: function",
          "697:     :returns: Returns a tuple of response and error string. In case if ``runner_mode`` is set to ``pexpect`` the error value is",
          "699:     '''",
          "701:     event_callback_handler = kwargs.pop('event_handler', None)",
          "",
          "[Removed Lines]",
          "698:               empty as ``pexpect`` uses same output descriptor for stdout and stderr.",
          "",
          "[Added Lines]",
          "706:               empty as ``pexpect`` uses same output descriptor for stdout and stderr. If the vaue of ``response_format`` is ``json``",
          "707:               it returns a python dictionary object.",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "705:     finished_callback = kwargs.pop('finished_callback', None)",
          "707:     rd = InventoryConfig(**kwargs)",
          "710:     r = Runner(rd,",
          "711:                event_handler=event_callback_handler,",
          "712:                status_handler=status_callback_handler,",
          "",
          "[Removed Lines]",
          "708:     rd.get_inventory(action=action, inventories=inventories, response_format=response_format, host=host, playbook_dir=playbook_dir,",
          "709:                      vault_ids=vault_ids, vault_password_file=vault_password_file)",
          "",
          "[Added Lines]",
          "717:     rd.prepare_inventory_command(action=action, inventories=inventories, response_format=response_format, host=host, playbook_dir=playbook_dir,",
          "718:                                  vault_ids=vault_ids, vault_password_file=vault_password_file)",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "716:     r.run()",
          "717:     response = r.stdout.read()",
          "718:     error = r.stderr.read()",
          "719:     return response, error",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "728:     if response_format == 'json':",
          "729:         response = json.loads(santize_json_response(response))",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "748:     :param container_image: Container image to use when running an ansible task (default: quay.io/ansible/ansible-runner:devel)",
          "749:     :param container_volume_mounts: List of bind mounts in the form 'host_dir:/container_dir:labels. (default: None)",
          "750:     :param container_options: List of container options to pass to execution engine.",
          "752:     :param fact_cache: A string that will be used as the name for the subdirectory of the fact cache in artifacts directory.",
          "753:                        This is only used for 'jsonfile' type fact caches.",
          "754:     :param fact_cache_type: A string of the type of fact cache to use.  Defaults to 'jsonfile'.",
          "",
          "[Removed Lines]",
          "751:     :param containter_workdir: The working directory within the container.",
          "",
          "[Added Lines]",
          "762:     :param container_workdir: The working directory within the container.",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "771:     :type settings: dict",
          "772:     :type private_data_dir: str",
          "773:     :type project_dir: str",
          "775:     :type fact_cache_type: str",
          "776:     :type fact_cache: str",
          "777:     :type process_isolation: bool",
          "",
          "[Removed Lines]",
          "774:     :type artifact_dir: int",
          "",
          "[Added Lines]",
          "785:     :type artifact_dir: str",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "779:     :type container_image: str",
          "780:     :type container_volume_mounts: list",
          "781:     :type container_options: list",
          "783:     :type ident: str",
          "784:     :type rotate_artifacts: int",
          "785:     :type ssh_key: str",
          "",
          "[Removed Lines]",
          "782:     :type containter_workdir: str",
          "",
          "[Added Lines]",
          "793:     :type container_workdir: str",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "800:     cancel_callback = kwargs.pop('cancel_callback', None)",
          "801:     finished_callback = kwargs.pop('finished_callback', None)",
          "805:     r = Runner(rd,",
          "806:                event_handler=event_callback_handler,",
          "807:                status_handler=status_callback_handler,",
          "",
          "[Removed Lines]",
          "803:     rd = AnsibleConfig(**kwargs)",
          "804:     rd.get_ansible_config(action=action, config_file=config_file, only_changed=only_changed)",
          "",
          "[Added Lines]",
          "814:     rd = AnsibleCfgConfig(**kwargs)",
          "815:     rd.prepare_ansible_config_command(action=action, config_file=config_file, only_changed=only_changed)",
          "",
          "---------------"
        ],
        "ansible_runner/runner_config.py||ansible_runner/runner_config.py": [
          "File: ansible_runner/runner_config.py -> ansible_runner/runner_config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "18: #",
          "",
          "[Removed Lines]",
          "19: import json",
          "20: import logging",
          "21: import os",
          "22: import pexpect",
          "23: import re",
          "24: import shlex",
          "25: import stat",
          "26: import tempfile",
          "28: import six",
          "29: from uuid import uuid4",
          "30: try:",
          "31:     from collections.abc import Mapping",
          "32: except ImportError:",
          "33:     from collections import Mapping",
          "35: from distutils.dir_util import copy_tree",
          "37: from six import iteritems, string_types, text_type",
          "39: from ansible_runner import defaults",
          "40: from ansible_runner import output",
          "41: from ansible_runner.exceptions import ConfigurationError",
          "42: from ansible_runner.loader import ArtifactLoader",
          "43: from ansible_runner.output import debug",
          "44: from ansible_runner.utils import (",
          "45:     open_fifo_write,",
          "46:     args2cmdline,",
          "47:     sanitize_container_name",
          "48: )",
          "50: logger = logging.getLogger('ansible-runner')",
          "53: class ExecutionMode():",
          "54:     NONE = 0",
          "55:     ANSIBLE = 1",
          "56:     ANSIBLE_PLAYBOOK = 2",
          "57:     RAW = 3",
          "58:     CLI_EXECENV = 4",
          "61: class RunnerConfig(object):",
          "62:     \"\"\"",
          "63:     A ``Runner`` configuration object that's meant to encapsulate the configuration used by the",
          "64:     :py:mod:`ansible_runner.runner.Runner` object to launch and manage the invocation of ``ansible``",
          "65:     and ``ansible-playbook``",
          "67:     Typically this object is initialized for you when using the standard ``run`` interfaces in :py:mod:`ansible_runner.interface`",
          "68:     but can be used to construct the ``Runner`` configuration to be invoked elsewhere. It can also be overridden to provide different",
          "69:     functionality to the Runner object.",
          "71:     :Example:",
          "73:     >>> rc = RunnerConfig(...)",
          "74:     >>> r = Runner(config=rc)",
          "75:     >>> r.run()",
          "77:     \"\"\"",
          "79:     def __init__(self,",
          "80:                  private_data_dir=None, playbook=None, ident=None,",
          "81:                  inventory=None, roles_path=None, limit=None, module=None, module_args=None,",
          "82:                  verbosity=None, quiet=False, json_mode=False, artifact_dir=None,",
          "83:                  rotate_artifacts=0, host_pattern=None, binary=None, extravars=None, suppress_ansible_output=False,",
          "84:                  process_isolation=False, process_isolation_executable=None, process_isolation_path=None,",
          "85:                  process_isolation_hide_paths=None, process_isolation_show_paths=None, process_isolation_ro_paths=None,",
          "86:                  container_image=None, container_volume_mounts=None, container_options=None,",
          "87:                  resource_profiling=False, resource_profiling_base_cgroup='ansible-runner', resource_profiling_cpu_poll_interval=0.25,",
          "88:                  resource_profiling_memory_poll_interval=0.25, resource_profiling_pid_poll_interval=0.25,",
          "89:                  resource_profiling_results_dir=None,",
          "90:                  tags=None, skip_tags=None, fact_cache_type='jsonfile', fact_cache=None, ssh_key=None,",
          "91:                  project_dir=None, directory_isolation_base_path=None, envvars=None, forks=None, cmdline=None, omit_event_data=False,",
          "92:                  only_failed_event_data=False, cli_execenv_cmd=\"\"):",
          "93:         self.private_data_dir = os.path.abspath(private_data_dir)",
          "94:         if ident is None:",
          "95:             self.ident = str(uuid4())",
          "96:         else:",
          "97:             self.ident = ident",
          "98:         self.json_mode = json_mode",
          "99:         self.playbook = playbook",
          "100:         self.inventory = inventory",
          "101:         self.roles_path = roles_path",
          "102:         self.limit = limit",
          "103:         self.module = module",
          "104:         self.module_args = module_args",
          "105:         self.cli_execenv_cmd = cli_execenv_cmd",
          "106:         self.host_pattern = host_pattern",
          "107:         self.binary = binary",
          "108:         self.rotate_artifacts = rotate_artifacts",
          "109:         self.artifact_dir = os.path.abspath(artifact_dir or self.private_data_dir)",
          "111:         if artifact_dir is None:",
          "112:             self.artifact_dir = os.path.join(self.private_data_dir, 'artifacts')",
          "113:         else:",
          "114:             self.artifact_dir = os.path.abspath(artifact_dir)",
          "116:         if self.ident is not None:",
          "117:             self.artifact_dir = os.path.join(self.artifact_dir, \"{}\".format(self.ident))",
          "119:         self.extra_vars = extravars",
          "120:         self.process_isolation = process_isolation",
          "121:         self.process_isolation_executable = process_isolation_executable or defaults.default_process_isolation_executable",
          "122:         self.process_isolation_path = process_isolation_path",
          "123:         self.container_name = None  # like other properties, not accurate until prepare is called",
          "124:         self.process_isolation_path_actual = None",
          "125:         self.process_isolation_hide_paths = process_isolation_hide_paths",
          "126:         self.process_isolation_show_paths = process_isolation_show_paths",
          "127:         self.process_isolation_ro_paths = process_isolation_ro_paths",
          "128:         self.container_image = container_image or defaults.default_container_image",
          "129:         self.container_volume_mounts = container_volume_mounts",
          "130:         self.container_options = container_options",
          "131:         self.resource_profiling = resource_profiling",
          "132:         self.resource_profiling_base_cgroup = resource_profiling_base_cgroup",
          "133:         self.resource_profiling_cpu_poll_interval = resource_profiling_cpu_poll_interval",
          "134:         self.resource_profiling_memory_poll_interval = resource_profiling_memory_poll_interval",
          "135:         self.resource_profiling_pid_poll_interval = resource_profiling_pid_poll_interval",
          "136:         self.resource_profiling_results_dir = resource_profiling_results_dir",
          "138:         self.directory_isolation_path = directory_isolation_base_path",
          "139:         if not project_dir:",
          "140:             self.project_dir = os.path.join(self.private_data_dir, 'project')",
          "141:         else:",
          "142:             self.project_dir = project_dir",
          "143:         self.verbosity = verbosity",
          "144:         self.quiet = quiet",
          "145:         self.suppress_ansible_output = suppress_ansible_output",
          "146:         self.loader = ArtifactLoader(self.private_data_dir)",
          "147:         self.tags = tags",
          "148:         self.skip_tags = skip_tags",
          "149:         self.fact_cache_type = fact_cache_type",
          "150:         self.fact_cache = os.path.join(self.artifact_dir, fact_cache or 'fact_cache') if self.fact_cache_type == 'jsonfile' else None",
          "151:         self.ssh_key_data = ssh_key",
          "152:         self.execution_mode = ExecutionMode.NONE",
          "153:         self.envvars = envvars",
          "154:         self.forks = forks",
          "155:         self.cmdline_args = cmdline",
          "157:         self.omit_event_data = omit_event_data",
          "158:         self.only_failed_event_data = only_failed_event_data",
          "160:     _CONTAINER_ENGINES = ('docker', 'podman')",
          "162:     @property",
          "163:     def sandboxed(self):",
          "164:         return self.process_isolation and self.process_isolation_executable not in self._CONTAINER_ENGINES",
          "166:     @property",
          "167:     def containerized(self):",
          "168:         return self.process_isolation and self.process_isolation_executable in self._CONTAINER_ENGINES",
          "170:     def prepare(self):",
          "171:         \"\"\"",
          "172:         Performs basic checks and then properly invokes",
          "174:         - prepare_inventory",
          "175:         - prepare_env",
          "176:         - prepare_command",
          "178:         It's also responsible for wrapping the command with the proper ssh agent invocation",
          "179:         and setting early ANSIBLE_ environment variables.",
          "180:         \"\"\"",
          "181:         # ansible_path = find_executable('ansible')",
          "182:         # if ansible_path is None or not os.access(ansible_path, os.X_OK):",
          "183:         #     raise ConfigurationError(\"Ansible not found. Make sure that it is installed.\")",
          "184:         if self.private_data_dir is None:",
          "185:             raise ConfigurationError(\"Runner Base Directory is not defined\")",
          "186:         if self.module and self.playbook:",
          "187:             raise ConfigurationError(\"Only one of playbook and module options are allowed\")",
          "188:         if not os.path.exists(self.artifact_dir):",
          "189:             os.makedirs(self.artifact_dir, mode=0o700)",
          "190:         if self.sandboxed and self.directory_isolation_path is not None:",
          "191:             self.directory_isolation_path = tempfile.mkdtemp(prefix='runner_di_', dir=self.directory_isolation_path)",
          "192:             if os.path.exists(self.project_dir):",
          "193:                 output.debug(\"Copying directory tree from {} to {} for working directory isolation\".format(self.project_dir,",
          "194:                                                                                                            self.directory_isolation_path))",
          "195:                 copy_tree(self.project_dir, self.directory_isolation_path, preserve_symlinks=True)",
          "197:         self.prepare_env()",
          "198:         self.prepare_inventory()",
          "199:         self.prepare_command()",
          "201:         if self.execution_mode == ExecutionMode.ANSIBLE_PLAYBOOK and self.playbook is None:",
          "202:             raise ConfigurationError(\"Runner playbook required when running ansible-playbook\")",
          "203:         elif self.execution_mode == ExecutionMode.ANSIBLE and self.module is None:",
          "204:             raise ConfigurationError(\"Runner module required when running ansible\")",
          "205:         elif self.execution_mode == ExecutionMode.CLI_EXECENV and self.cmdline_args is None:",
          "206:             raise ConfigurationError(\"Runner requires arguments to pass to ansible, try '-h' for ansible help output\")",
          "207:         elif self.execution_mode == ExecutionMode.NONE:",
          "208:             raise ConfigurationError(\"No executable for runner to run\")",
          "210:         # write the SSH key data into a fifo read by ssh-agent",
          "211:         if self.ssh_key_data:",
          "212:             self.ssh_key_path = os.path.join(self.artifact_dir, 'ssh_key_data')",
          "213:             open_fifo_write(self.ssh_key_path, self.ssh_key_data)",
          "214:             self.command = self.wrap_args_with_ssh_agent(self.command, self.ssh_key_path)",
          "216:         # Use local callback directory",
          "217:         if not self.containerized:",
          "218:             callback_dir = self.env.get('AWX_LIB_DIRECTORY', os.getenv('AWX_LIB_DIRECTORY'))",
          "219:             if callback_dir is None:",
          "220:                 callback_dir = os.path.join(os.path.split(os.path.abspath(__file__))[0], \"callbacks\")",
          "221:             python_path = self.env.get('PYTHONPATH', os.getenv('PYTHONPATH', ''))",
          "222:             self.env['PYTHONPATH'] = ':'.join([python_path, callback_dir])",
          "223:             if python_path and not python_path.endswith(':'):",
          "224:                 python_path += ':'",
          "225:             self.env['ANSIBLE_CALLBACK_PLUGINS'] = ':'.join(filter(None,(self.env.get('ANSIBLE_CALLBACK_PLUGINS'), callback_dir)))",
          "227:         if 'AD_HOC_COMMAND_ID' in self.env:",
          "228:             self.env['ANSIBLE_STDOUT_CALLBACK'] = 'minimal'",
          "229:         else:",
          "230:             self.env['ANSIBLE_STDOUT_CALLBACK'] = 'awx_display'",
          "231:         self.env['ANSIBLE_RETRY_FILES_ENABLED'] = 'False'",
          "232:         if 'ANSIBLE_HOST_KEY_CHECKING' not in self.env:",
          "233:             self.env['ANSIBLE_HOST_KEY_CHECKING'] = 'False'",
          "234:         if not self.containerized:",
          "235:             self.env['AWX_ISOLATED_DATA_DIR'] = self.artifact_dir",
          "237:         if self.resource_profiling:",
          "238:             callback_whitelist = os.environ.get('ANSIBLE_CALLBACK_WHITELIST', '').strip()",
          "239:             self.env['ANSIBLE_CALLBACK_WHITELIST'] = ','.join(filter(None, [callback_whitelist, 'cgroup_perf_recap']))",
          "240:             self.env['CGROUP_CONTROL_GROUP'] = '{}/{}'.format(self.resource_profiling_base_cgroup, self.ident)",
          "241:             if self.resource_profiling_results_dir:",
          "242:                 cgroup_output_dir = self.resource_profiling_results_dir",
          "243:             else:",
          "244:                 cgroup_output_dir = os.path.normpath(os.path.join(self.private_data_dir, 'profiling_data'))",
          "246:             # Create results directory if it does not exist",
          "247:             if not os.path.isdir(cgroup_output_dir):",
          "248:                 os.mkdir(cgroup_output_dir, stat.S_IREAD | stat.S_IWRITE | stat.S_IEXEC)",
          "250:             self.env['CGROUP_OUTPUT_DIR'] = cgroup_output_dir",
          "251:             self.env['CGROUP_OUTPUT_FORMAT'] = 'json'",
          "252:             self.env['CGROUP_CPU_POLL_INTERVAL'] = str(self.resource_profiling_cpu_poll_interval)",
          "253:             self.env['CGROUP_MEMORY_POLL_INTERVAL'] = str(self.resource_profiling_memory_poll_interval)",
          "254:             self.env['CGROUP_PID_POLL_INTERVAL'] = str(self.resource_profiling_pid_poll_interval)",
          "255:             self.env['CGROUP_FILE_PER_TASK'] = 'True'",
          "256:             self.env['CGROUP_WRITE_FILES'] = 'True'",
          "257:             self.env['CGROUP_DISPLAY_RECAP'] = 'False'",
          "259:         if self.roles_path:",
          "260:             if isinstance(self.roles_path, list):",
          "261:                 self.env['ANSIBLE_ROLES_PATH'] = ':'.join(self.roles_path)",
          "262:             else:",
          "263:                 self.env['ANSIBLE_ROLES_PATH'] = self.roles_path",
          "265:         if self.sandboxed:",
          "266:             debug('sandbox enabled')",
          "267:             self.command = self.wrap_args_for_sandbox(self.command)",
          "268:         else:",
          "269:             debug('sandbox disabled')",
          "271:         if self.resource_profiling and self.execution_mode == ExecutionMode.ANSIBLE_PLAYBOOK:",
          "272:             self.command = self.wrap_args_with_cgexec(self.command)",
          "274:         if self.fact_cache_type == 'jsonfile':",
          "275:             self.env['ANSIBLE_CACHE_PLUGIN'] = 'jsonfile'",
          "276:             if not self.containerized:",
          "277:                 self.env['ANSIBLE_CACHE_PLUGIN_CONNECTION'] = self.fact_cache",
          "279:         self.env[\"RUNNER_OMIT_EVENTS\"] = str(self.omit_event_data)",
          "280:         self.env[\"RUNNER_ONLY_FAILED_EVENTS\"] = str(self.only_failed_event_data)",
          "282:         if self.containerized:",
          "283:             debug('containerization enabled')",
          "284:             self.command = self.wrap_args_for_containerization(self.command)",
          "285:         else:",
          "286:             debug('containerization disabled')",
          "288:         debug('env:')",
          "289:         for k,v in sorted(self.env.items()):",
          "290:             debug(f' {k}: {v}')",
          "291:         if hasattr(self, 'command') and isinstance(self.command, list):",
          "292:             debug(f\"command: {' '.join(self.command)}\")",
          "294:     def prepare_inventory(self):",
          "295:         \"\"\"",
          "296:         Prepares the inventory default under ``private_data_dir`` if it's not overridden by the constructor.",
          "297:         \"\"\"",
          "298:         if self.containerized:",
          "299:             self.inventory = '/runner/inventory/hosts'",
          "300:             return",
          "302:         if self.inventory is None:",
          "303:             if os.path.exists(os.path.join(self.private_data_dir, \"inventory\")):",
          "304:                 self.inventory = os.path.join(self.private_data_dir, \"inventory\")",
          "306:     def prepare_env(self):",
          "307:         \"\"\"",
          "308:         Manages reading environment metadata files under ``private_data_dir`` and merging/updating",
          "309:         with existing values so the :py:class:`ansible_runner.runner.Runner` object can read and use them easily",
          "310:         \"\"\"",
          "311:         try:",
          "312:             passwords = self.loader.load_file('env/passwords', Mapping)",
          "313:             self.expect_passwords = {",
          "314:                 re.compile(pattern, re.M): password",
          "315:                 for pattern, password in iteritems(passwords)",
          "316:             }",
          "317:         except ConfigurationError:",
          "318:             output.debug('Not loading passwords')",
          "319:             self.expect_passwords = dict()",
          "320:         self.expect_passwords[pexpect.TIMEOUT] = None",
          "321:         self.expect_passwords[pexpect.EOF] = None",
          "323:         try:",
          "324:             self.settings = self.loader.load_file('env/settings', Mapping)",
          "325:         except ConfigurationError:",
          "326:             output.debug(\"Not loading settings\")",
          "327:             self.settings = dict()",
          "329:         self.process_isolation = self.settings.get('process_isolation', self.process_isolation)",
          "330:         self.process_isolation_executable = self.settings.get('process_isolation_executable', self.process_isolation_executable)",
          "332:         if self.containerized:",
          "333:             self.container_name = \"ansible_runner_{}\".format(sanitize_container_name(self.ident))",
          "334:             self.env = {}",
          "335:             # Special flags to convey info to entrypoint or process in container",
          "336:             self.env['LAUNCHED_BY_RUNNER'] = '1'",
          "337:             artifact_dir = os.path.join(\"/runner/artifacts\", \"{}\".format(self.ident))",
          "338:             self.env['AWX_ISOLATED_DATA_DIR'] = artifact_dir",
          "339:             if self.fact_cache_type == 'jsonfile':",
          "340:                 self.env['ANSIBLE_CACHE_PLUGIN_CONNECTION'] = os.path.join(artifact_dir, 'fact_cache')",
          "341:         else:",
          "342:             # seed env with existing shell env",
          "343:             self.env = os.environ.copy()",
          "345:         if self.envvars and isinstance(self.envvars, dict):",
          "346:             self.env.update(self.envvars)",
          "348:         try:",
          "349:             envvars = self.loader.load_file('env/envvars', Mapping)",
          "350:             if envvars:",
          "351:                 self.env.update({str(k):str(v) for k, v in envvars.items()})",
          "352:         except ConfigurationError:",
          "353:             output.debug(\"Not loading environment vars\")",
          "354:             # Still need to pass default environment to pexpect",
          "356:         try:",
          "357:             if self.ssh_key_data is None:",
          "358:                 self.ssh_key_data = self.loader.load_file('env/ssh_key', string_types)",
          "359:         except ConfigurationError:",
          "360:             output.debug(\"Not loading ssh key\")",
          "361:             self.ssh_key_data = None",
          "363:         self.idle_timeout = self.settings.get('idle_timeout', None)",
          "364:         self.job_timeout = self.settings.get('job_timeout', None)",
          "365:         self.pexpect_timeout = self.settings.get('pexpect_timeout', 5)",
          "367:         self.process_isolation_path = self.settings.get('process_isolation_path', self.process_isolation_path)",
          "368:         self.process_isolation_hide_paths = self.settings.get('process_isolation_hide_paths', self.process_isolation_hide_paths)",
          "369:         self.process_isolation_show_paths = self.settings.get('process_isolation_show_paths', self.process_isolation_show_paths)",
          "370:         self.process_isolation_ro_paths = self.settings.get('process_isolation_ro_paths', self.process_isolation_ro_paths)",
          "371:         self.directory_isolation_cleanup = bool(self.settings.get('directory_isolation_cleanup', True))",
          "372:         self.container_image = self.settings.get('container_image', self.container_image)",
          "373:         self.container_volume_mounts = self.settings.get('container_volume_mounts', self.container_volume_mounts)",
          "374:         self.container_options = self.settings.get('container_options', self.container_options)",
          "376:         self.resource_profiling = self.settings.get('resource_profiling', self.resource_profiling)",
          "377:         self.resource_profiling_base_cgroup = self.settings.get('resource_profiling_base_cgroup', self.resource_profiling_base_cgroup)",
          "378:         self.resource_profiling_cpu_poll_interval = self.settings.get('resource_profiling_cpu_poll_interval', self.resource_profiling_cpu_poll_interval)",
          "379:         self.resource_profiling_memory_poll_interval = self.settings.get('resource_profiling_memory_poll_interval',",
          "380:                                                                          self.resource_profiling_memory_poll_interval)",
          "381:         self.resource_profiling_pid_poll_interval = self.settings.get('resource_profiling_pid_poll_interval', self.resource_profiling_pid_poll_interval)",
          "382:         self.resource_profiling_results_dir = self.settings.get('resource_profiling_results_dir', self.resource_profiling_results_dir)",
          "383:         self.pexpect_use_poll = self.settings.get('pexpect_use_poll', True)",
          "384:         self.suppress_ansible_output = self.settings.get('suppress_ansible_output', self.quiet)",
          "386:         if 'AD_HOC_COMMAND_ID' in self.env or not os.path.exists(self.project_dir):",
          "387:             self.cwd = self.private_data_dir",
          "388:         else:",
          "389:             if self.directory_isolation_path is not None:",
          "390:                 self.cwd = self.directory_isolation_path",
          "391:             else:",
          "392:                 self.cwd = self.project_dir",
          "394:         if 'fact_cache' in self.settings:",
          "395:             if 'fact_cache_type' in self.settings:",
          "396:                 if self.settings['fact_cache_type'] == 'jsonfile':",
          "397:                     self.fact_cache = os.path.join(self.artifact_dir, self.settings['fact_cache'])",
          "398:             else:",
          "399:                 self.fact_cache = os.path.join(self.artifact_dir, self.settings['fact_cache'])",
          "401:     def prepare_command(self):",
          "402:         \"\"\"",
          "403:         Determines if the literal ``ansible`` or ``ansible-playbook`` commands are given",
          "404:         and if not calls :py:meth:`ansible_runner.runner_config.RunnerConfig.generate_ansible_command`",
          "405:         \"\"\"",
          "406:         if not self.cli_execenv_cmd:",
          "407:             try:",
          "408:                 cmdline_args = self.loader.load_file('args', string_types, encoding=None)",
          "410:                 if six.PY2 and isinstance(cmdline_args, text_type):",
          "411:                     cmdline_args = cmdline_args.encode('utf-8')",
          "412:                 self.command = shlex.split(cmdline_args)",
          "413:                 self.execution_mode = ExecutionMode.RAW",
          "414:             except ConfigurationError:",
          "415:                 self.command = self.generate_ansible_command()",
          "416:         else:",
          "417:             if self.cli_execenv_cmd:",
          "418:                 if self.cli_execenv_cmd == 'adhoc':",
          "419:                     self.command = ['ansible'] + self.cmdline_args",
          "420:                 elif self.cli_execenv_cmd == 'playbook':",
          "421:                     self.command = ['ansible-playbook'] + self.cmdline_args",
          "422:                 self.execution_mode = ExecutionMode.CLI_EXECENV",
          "425:     def generate_ansible_command(self):",
          "426:         \"\"\"",
          "427:         Given that the ``RunnerConfig`` preparation methods have been run to gather the inputs this method",
          "428:         will generate the ``ansible`` or ``ansible-playbook`` command that will be used by the",
          "429:         :py:class:`ansible_runner.runner.Runner` object to start the process",
          "430:         \"\"\"",
          "431:         # FIXME - this never happens because the conditional in prepare_command",
          "432:         #         \"branches around it\" and I need to figure out if that's the",
          "433:         #         correct course of action or not.",
          "434:         if self.cli_execenv_cmd:",
          "435:             if self.cli_execenv_cmd == 'adhoc':",
          "436:                 base_command = 'ansible'",
          "437:             elif self.cli_execenv_cmd == 'playbook':",
          "438:                 base_command = 'ansible-playbook'",
          "439:             self.execution_mode = ExecutionMode.CLI_EXECENV",
          "440:         elif self.binary is not None:",
          "441:             base_command = self.binary",
          "442:             self.execution_mode = ExecutionMode.RAW",
          "443:         elif self.module is not None:",
          "444:             base_command = 'ansible'",
          "445:             self.execution_mode = ExecutionMode.ANSIBLE",
          "446:         else:",
          "447:             base_command = 'ansible-playbook'",
          "448:             self.execution_mode = ExecutionMode.ANSIBLE_PLAYBOOK",
          "450:         exec_list = [base_command]",
          "452:         if self.cli_execenv_cmd:",
          "453:             # Provide dummy data for Tower/AWX vars so that playbooks won't",
          "454:             # fail with undefined var errors",
          "455:             awx_tower_vars = {",
          "456:                 'awx_job_id': 1,",
          "457:                 'tower_job_id': 1,",
          "458:                 'awx_job_launch_type': 'workflow',",
          "459:                 'tower_job_launch_type': 'workflow',",
          "460:                 'awx_workflow_job_name': 'workflow-job',",
          "461:                 'tower_workflow_job_name': 'workflow-job',",
          "462:                 'awx_workflow_job_id': 1,",
          "463:                 'tower_workflow_job_id': 1,",
          "464:                 'awx_parent_job_schedule_id': 1,",
          "465:                 'tower_parent_job_schedule_id': 1,",
          "466:                 'awx_parent_job_schedule_name': 'job-schedule',",
          "467:                 'tower_parent_job_schedule_name': 'job-schedule',",
          "468:             }",
          "469:             for k,v in awx_tower_vars.items():",
          "470:                 exec_list.append('-e')",
          "471:                 exec_list.append('\"{}={}\"'.format(k, v))",
          "473:         try:",
          "474:             if self.cmdline_args:",
          "475:                 cmdline_args = self.cmdline_args",
          "476:             else:",
          "477:                 cmdline_args = self.loader.load_file('env/cmdline', string_types, encoding=None)",
          "479:             if six.PY2 and isinstance(cmdline_args, text_type):",
          "480:                 cmdline_args = cmdline_args.encode('utf-8')",
          "482:             args = shlex.split(cmdline_args)",
          "483:             exec_list.extend(args)",
          "484:         except ConfigurationError:",
          "485:             pass",
          "487:         if self.inventory is None:",
          "488:             pass",
          "489:         elif isinstance(self.inventory, list):",
          "490:             for i in self.inventory:",
          "491:                 exec_list.append(\"-i\")",
          "492:                 exec_list.append(i)",
          "493:         else:",
          "494:             exec_list.append(\"-i\")",
          "495:             exec_list.append(self.inventory)",
          "497:         if self.limit is not None:",
          "498:             exec_list.append(\"--limit\")",
          "499:             exec_list.append(self.limit)",
          "501:         if self.loader.isfile('env/extravars'):",
          "502:             if self.containerized:",
          "503:                 extravars_path = '/runner/env/extravars'",
          "504:             else:",
          "505:                 extravars_path = self.loader.abspath('env/extravars')",
          "506:             exec_list.extend(['-e', '@{}'.format(extravars_path)])",
          "508:         if self.extra_vars:",
          "509:             if isinstance(self.extra_vars, dict) and self.extra_vars:",
          "510:                 extra_vars_list = []",
          "511:                 for k in self.extra_vars:",
          "512:                     extra_vars_list.append(\"\\\"{}\\\":{}\".format(k, json.dumps(self.extra_vars[k])))",
          "514:                 exec_list.extend(",
          "515:                     [",
          "516:                         '-e',",
          "517:                         '{%s}' % ','.join(extra_vars_list)",
          "518:                     ]",
          "519:                 )",
          "520:             elif self.loader.isfile(self.extra_vars):",
          "521:                 exec_list.extend(['-e', '@{}'.format(self.loader.abspath(self.extra_vars))])",
          "523:         if self.verbosity:",
          "524:             v = 'v' * self.verbosity",
          "525:             exec_list.append('-{}'.format(v))",
          "527:         if self.tags:",
          "528:             exec_list.extend(['--tags', '{}'.format(self.tags)])",
          "530:         if self.skip_tags:",
          "531:             exec_list.extend(['--skip-tags', '{}'.format(self.skip_tags)])",
          "533:         if self.forks:",
          "534:             exec_list.extend(['--forks', '{}'.format(self.forks)])",
          "536:         # Other parameters",
          "537:         if self.execution_mode == ExecutionMode.ANSIBLE_PLAYBOOK:",
          "538:             exec_list.append(self.playbook)",
          "539:         elif self.execution_mode == ExecutionMode.ANSIBLE:",
          "540:             exec_list.append(\"-m\")",
          "541:             exec_list.append(self.module)",
          "543:             if self.module_args is not None:",
          "544:                 exec_list.append(\"-a\")",
          "545:                 exec_list.append(self.module_args)",
          "547:             if self.host_pattern is not None:",
          "548:                 exec_list.append(self.host_pattern)",
          "550:         return exec_list",
          "552:     def build_process_isolation_temp_dir(self):",
          "553:         '''",
          "554:         Create a temporary directory for process isolation to use.",
          "555:         '''",
          "556:         path = tempfile.mkdtemp(prefix='ansible_runner_pi_', dir=self.process_isolation_path)",
          "557:         os.chmod(path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)",
          "558:         return path",
          "560:     def wrap_args_with_cgexec(self, args):",
          "561:         '''",
          "562:         Wrap existing command line with cgexec in order to profile resource usage",
          "563:         '''",
          "564:         new_args = ['cgexec', '--sticky', '-g', 'cpuacct,memory,pids:{}/{}'.format(self.resource_profiling_base_cgroup, self.ident)]",
          "565:         new_args.extend(args)",
          "566:         return new_args",
          "569:     def wrap_args_for_sandbox(self, args):",
          "570:         '''",
          "571:         Wrap existing command line with bwrap to restrict access to:",
          "572:          - self.process_isolation_path (generally, /tmp) (except for own /tmp files)",
          "573:         '''",
          "574:         cwd = os.path.realpath(self.cwd)",
          "575:         self.process_isolation_path_actual = self.build_process_isolation_temp_dir()",
          "576:         new_args = [self.process_isolation_executable or 'bwrap', '--die-with-parent', '--unshare-pid', '--dev-bind', '/', '/', '--proc', '/proc']",
          "578:         for path in sorted(set(self.process_isolation_hide_paths or [])):",
          "579:             if not os.path.exists(path):",
          "580:                 logger.debug('hide path not found: {0}'.format(path))",
          "581:                 continue",
          "582:             path = os.path.realpath(path)",
          "583:             if os.path.isdir(path):",
          "584:                 new_path = tempfile.mkdtemp(dir=self.process_isolation_path_actual)",
          "585:                 os.chmod(new_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)",
          "586:             else:",
          "587:                 handle, new_path = tempfile.mkstemp(dir=self.process_isolation_path_actual)",
          "588:                 os.close(handle)",
          "589:                 os.chmod(new_path, stat.S_IRUSR | stat.S_IWUSR)",
          "590:             new_args.extend(['--bind', '{0}'.format(new_path), '{0}'.format(path)])",
          "592:         if self.private_data_dir:",
          "593:             show_paths = [self.private_data_dir]",
          "594:         else:",
          "595:             show_paths = [cwd]",
          "597:         for path in sorted(set(self.process_isolation_ro_paths or [])):",
          "598:             if not os.path.exists(path):",
          "599:                 logger.debug('read-only path not found: {0}'.format(path))",
          "600:                 continue",
          "601:             path = os.path.realpath(path)",
          "602:             new_args.extend(['--ro-bind', '{0}'.format(path),  '{0}'.format(path)])",
          "604:         show_paths.extend(self.process_isolation_show_paths or [])",
          "605:         for path in sorted(set(show_paths)):",
          "606:             if not os.path.exists(path):",
          "607:                 logger.debug('show path not found: {0}'.format(path))",
          "608:                 continue",
          "609:             path = os.path.realpath(path)",
          "610:             new_args.extend(['--bind', '{0}'.format(path), '{0}'.format(path)])",
          "612:         if self.execution_mode == ExecutionMode.ANSIBLE_PLAYBOOK:",
          "613:             # playbook runs should cwd to the SCM checkout dir",
          "614:             if self.directory_isolation_path is not None:",
          "615:                 new_args.extend(['--chdir', os.path.realpath(self.directory_isolation_path)])",
          "616:             else:",
          "617:                 new_args.extend(['--chdir', os.path.realpath(self.project_dir)])",
          "618:         elif self.execution_mode == ExecutionMode.ANSIBLE:",
          "619:             # ad-hoc runs should cwd to the root of the private data dir",
          "620:             new_args.extend(['--chdir', os.path.realpath(self.private_data_dir)])",
          "622:         new_args.extend(args)",
          "623:         return new_args",
          "625:     def wrap_args_for_containerization(self, args):",
          "626:         new_args = [self.process_isolation_executable]",
          "627:         new_args.extend(['run', '--rm', '--tty', '--interactive'])",
          "628:         container_workdir = \"/runner/project\"",
          "629:         new_args.extend([\"--workdir\", container_workdir])",
          "630:         self.cwd = container_workdir",
          "632:         def _ensure_path_safe_to_mount(path):",
          "633:             if path in ('/home', '/usr'):",
          "634:                 raise ConfigurationError(\"When using containerized execution, cannot mount /home or /usr\")",
          "636:         _ensure_path_safe_to_mount(self.private_data_dir)",
          "638:         def _parse_cli_execenv_cmd_playbook_args():",
          "640:             # Determine all inventory file paths, accounting for the possibility of multiple",
          "641:             # inventory files provided",
          "642:             _inventory_paths = []",
          "643:             _playbook = \"\"",
          "644:             _book_keeping_copy = self.cmdline_args.copy()",
          "645:             for arg in self.cmdline_args:",
          "646:                 if arg == '-i':",
          "647:                     _book_keeping_copy_inventory_index = _book_keeping_copy.index('-i')",
          "648:                     _inventory_paths.append(self.cmdline_args[_book_keeping_copy_inventory_index + 1])",
          "649:                     _book_keeping_copy.pop(_book_keeping_copy_inventory_index)",
          "650:                     _book_keeping_copy.pop(_book_keeping_copy_inventory_index)",
          "652:             if len(_book_keeping_copy) == 1:",
          "653:                 # it's probably safe to assume this is the playbook",
          "654:                 _playbook = _book_keeping_copy[0]",
          "655:             elif _book_keeping_copy[0][0] != '-':",
          "656:                 # this should be the playbook, it's the only \"naked\" arg",
          "657:                 _playbook = _book_keeping_copy[0]",
          "658:             else:",
          "659:                 # parse everything beyond the first arg because we checked that",
          "660:                 # in the previous case already",
          "661:                 for arg in _book_keeping_copy[1:]:",
          "662:                     if arg[0] == '-':",
          "663:                         continue",
          "664:                     elif _book_keeping_copy[(_book_keeping_copy.index(arg) - 1)][0] != '-':",
          "665:                         _playbook = arg",
          "666:                         break",
          "668:             return (_playbook, _inventory_paths)",
          "670:         if self.cli_execenv_cmd:",
          "671:             _parsed_playbook_path, _parsed_inventory_paths = _parse_cli_execenv_cmd_playbook_args()",
          "672:             if self.cli_execenv_cmd == 'playbook':",
          "673:                 playbook_file_path = _parsed_playbook_path",
          "674:                 _ensure_path_safe_to_mount(playbook_file_path)",
          "675:                 if os.path.isabs(playbook_file_path) and (os.path.dirname(playbook_file_path) != '/'):",
          "676:                     new_args.extend([",
          "677:                         \"-v\", \"{}:{}\".format(",
          "678:                             os.path.dirname(playbook_file_path),",
          "679:                             os.path.dirname(playbook_file_path),",
          "680:                         )",
          "681:                     ])",
          "682:                 else:",
          "683:                     new_args.extend([",
          "684:                         \"-v\", \"{}:/runner/project/{}\".format(",
          "685:                             os.path.dirname(os.path.abspath(playbook_file_path)),",
          "686:                             os.path.dirname(playbook_file_path),",
          "687:                         )",
          "688:                     ])",
          "690:             # volume mount inventory into the exec env container if provided at cli",
          "691:             if '-i' in self.cmdline_args:",
          "692:                 inventory_file_paths = _parsed_inventory_paths",
          "693:                 inventory_playbook_share_parent = False",
          "694:                 for inventory_file_path in inventory_file_paths:",
          "695:                     _ensure_path_safe_to_mount(inventory_file_path)",
          "696:                     if self.cli_execenv_cmd == 'playbook':",
          "697:                         if os.path.dirname(os.path.abspath(inventory_file_path)) == \\",
          "698:                                 os.path.dirname(os.path.abspath(playbook_file_path)):",
          "699:                             inventory_playbook_share_parent = True",
          "700:                     if not inventory_file_path.endswith(',') and not inventory_playbook_share_parent:",
          "701:                         if os.path.isabs(inventory_file_path) and (os.path.dirname(inventory_file_path) != '/'):",
          "702:                             new_args.extend([",
          "703:                                 \"-v\", \"{}:{}\".format(",
          "704:                                     os.path.dirname(inventory_file_path),",
          "705:                                     os.path.dirname(inventory_file_path),",
          "706:                                 )",
          "707:                             ])",
          "708:                         else:",
          "709:                             new_args.extend([",
          "710:                                 \"-v\", \"{}:/runner/project/{}\".format(",
          "711:                                     os.path.dirname(os.path.abspath(inventory_file_path)),",
          "712:                                     os.path.dirname(inventory_file_path),",
          "713:                                 )",
          "714:                             ])",
          "717:             # Handle automounts",
          "718:             cli_automounts = [",
          "719:                 {",
          "720:                     'ENVS': ['SSH_AUTH_SOCK'],",
          "721:                     'PATHS': [",
          "722:                         {",
          "723:                             'src': '{}/.ssh/'.format(os.environ['HOME']),",
          "724:                             'dest': '/home/runner/.ssh/'",
          "725:                         },",
          "726:                         {",
          "727:                             'src': '/etc/ssh/ssh_known_hosts',",
          "728:                             'dest': '/etc/ssh/ssh_known_hosts'",
          "729:                         }",
          "730:                     ]",
          "731:                 },",
          "732:                 {",
          "733:                     \"ENVS\": ['K8S_AUTH_KUBECONFIG'],",
          "734:                     \"PATHS\": [",
          "735:                         {",
          "736:                             'src': '{}/.kube/'.format(os.environ['HOME']),",
          "737:                             'dest': '/home/runner/.kube/'",
          "738:                         },",
          "739:                     ]",
          "740:                 },",
          "741:                 {",
          "742:                     \"ENVS\": [",
          "743:                         'AWS_URL', 'EC2_URL', 'AWS_ACCESS_KEY_ID', 'AWS_ACCESS_KEY',",
          "744:                         'EC2_ACCESS_KEY', 'AWS_SECRET_ACCESS_KEY', 'AWS_SECRET_KEY', 'EC2_SECRET_KEY',",
          "745:                         'AWS_SECURITY_TOKEN', 'EC2_SECURITY_TOKEN', 'AWS_REGION', 'EC2_REGION'",
          "746:                     ],",
          "747:                     \"PATHS\": [",
          "748:                         {",
          "749:                             'src': '{}/.boto/'.format(os.environ['HOME']),",
          "750:                             'dest': '/home/runner/.boto/'",
          "751:                         },",
          "752:                     ]",
          "753:                 },",
          "754:                 {",
          "755:                     \"ENVS\": [",
          "756:                         'AZURE_SUBSCRIPTION_ID', 'AZURE_CLIENT_ID', 'AZURE_SECRET', 'AZURE_TENANT',",
          "757:                         'AZURE_AD_USER', 'AZURE_PASSWORD'",
          "758:                     ],",
          "759:                     \"PATHS\": [",
          "760:                         {",
          "761:                             'src': '{}/.azure/'.format(os.environ['HOME']),",
          "762:                             'dest': '/home/runner/.azure/'",
          "763:                         },",
          "764:                     ]",
          "765:                 },",
          "766:                 {",
          "767:                     \"ENVS\": [",
          "768:                         'gcp_service_account_file', 'GCP_SERVICE_ACCOUNT_FILE', 'GCP_SERVICE_ACCOUNT_CONTENTS',",
          "769:                         'GCP_SERVICE_ACCOUNT_EMAIL', 'GCP_AUTH_KIND', 'GCP_SCOPES'",
          "770:                     ],",
          "771:                     \"PATHS\": [",
          "772:                         {",
          "773:                             'src': '{}/.gcp/'.format(os.environ['HOME']),",
          "774:                             'dest': '/home/runner/.gcp/'",
          "775:                         },",
          "776:                     ]",
          "777:                 }",
          "778:             ]",
          "779:             for cli_automount in cli_automounts:",
          "780:                 for env in cli_automount['ENVS']:",
          "781:                     if env in os.environ:",
          "782:                         dest_path = os.environ[env]",
          "784:                         if os.path.exists(os.environ[env]):",
          "785:                             if os.environ[env].startswith(os.environ['HOME']):",
          "786:                                 dest_path = '/home/runner/{}'.format(os.environ[env].lstrip(os.environ['HOME']))",
          "787:                             elif os.environ[env].startswith('~'):",
          "788:                                 dest_path = '/home/runner/{}'.format(os.environ[env].lstrip('~/'))",
          "789:                             else:",
          "790:                                 dest_path = os.environ[env]",
          "791:                             new_args.extend([\"-v\", \"{}:{}\".format(os.environ[env], dest_path)])",
          "793:                         new_args.extend([\"-e\", \"{}={}\".format(env, dest_path)])",
          "795:                 for paths in cli_automount['PATHS']:",
          "796:                     if os.path.exists(paths['src']):",
          "797:                         new_args.extend([\"-v\", \"{}:{}\".format(paths['src'], paths['dest'])])",
          "799:             if 'podman' in self.process_isolation_executable:",
          "800:                 # container namespace stuff",
          "801:                 new_args.extend([\"--group-add=root\"])",
          "802:                 new_args.extend([\"--userns=keep-id\"])",
          "803:                 new_args.extend([\"--ipc=host\"])",
          "805:         # the playbook / adhoc cases (cli_execenv_cmd) are handled separately",
          "806:         # because they have pre-existing mounts already in new_args",
          "807:         if self.cli_execenv_cmd:",
          "808:             # Relative paths are mounted relative to /runner/project",
          "809:             for subdir in ('project', 'artifacts'):",
          "810:                 subdir_path = os.path.join(self.private_data_dir, subdir)",
          "811:                 if not os.path.exists(subdir_path):",
          "812:                     os.mkdir(subdir_path, 0o700)",
          "814:             # playbook / adhoc commands need artifacts mounted to output data",
          "815:             new_args.extend([\"-v\", \"{}/artifacts:/runner/artifacts:Z\".format(self.private_data_dir)])",
          "816:         else:",
          "817:             subdir_path = os.path.join(self.private_data_dir, 'artifacts')",
          "818:             if not os.path.exists(subdir_path):",
          "819:                 os.mkdir(subdir_path, 0o700)",
          "821:             # Mount the entire private_data_dir",
          "822:             # custom show paths inside private_data_dir do not make sense",
          "823:             new_args.extend([\"-v\", \"{}:/runner:Z\".format(self.private_data_dir)])",
          "825:         container_volume_mounts = self.container_volume_mounts",
          "826:         if container_volume_mounts:",
          "827:             for mapping in container_volume_mounts:",
          "828:                 host_path, container_path = mapping.split(':', 1)",
          "829:                 _ensure_path_safe_to_mount(host_path)",
          "830:                 new_args.extend([\"-v\", \"{}:{}\".format(host_path, container_path)])",
          "832:         # Reference the file with list of keys to pass into container",
          "833:         # this file will be written in ansible_runner.runner",
          "834:         env_file_host = os.path.join(self.artifact_dir, 'env.list')",
          "835:         new_args.extend(['--env-file', env_file_host])",
          "837:         if 'podman' in self.process_isolation_executable:",
          "838:             # docker doesnt support this option",
          "839:             new_args.extend(['--quiet'])",
          "841:         if 'docker' in self.process_isolation_executable:",
          "842:             new_args.extend([f'--user={os.getuid()}'])",
          "844:         new_args.extend(['--name', self.container_name])",
          "846:         if self.container_options:",
          "847:             new_args.extend(self.container_options)",
          "849:         new_args.extend([self.container_image])",
          "851:         new_args.extend(args)",
          "852:         debug(f\"container engine invocation: {' '.join(new_args)}\")",
          "854:         return new_args",
          "856:     def wrap_args_with_ssh_agent(self, args, ssh_key_path, ssh_auth_sock=None, silence_ssh_add=False):",
          "857:         \"\"\"",
          "858:         Given an existing command line and parameterization this will return the same command line wrapped with the",
          "859:         necessary calls to ``ssh-agent``",
          "860:         \"\"\"",
          "861:         if self.containerized:",
          "862:             artifact_dir = os.path.join(\"/runner/artifacts\", \"{}\".format(self.ident))",
          "863:             ssh_key_path = os.path.join(artifact_dir, \"ssh_key_data\")",
          "865:         if ssh_key_path:",
          "866:             ssh_add_command = args2cmdline('ssh-add', ssh_key_path)",
          "867:             if silence_ssh_add:",
          "868:                 ssh_add_command = ' '.join([ssh_add_command, '2>/dev/null'])",
          "869:             ssh_key_cleanup_command = 'rm -f {}'.format(ssh_key_path)",
          "870:             # The trap ensures the fifo is cleaned up even if the call to ssh-add fails.",
          "871:             # This prevents getting into certain scenarios where subsequent reads will",
          "872:             # hang forever.",
          "873:             cmd = ' && '.join([args2cmdline('trap', ssh_key_cleanup_command, 'EXIT'),",
          "874:                                ssh_add_command,",
          "875:                                ssh_key_cleanup_command,",
          "876:                                args2cmdline(*args)])",
          "877:             args = ['ssh-agent']",
          "878:             if ssh_auth_sock:",
          "879:                 args.extend(['-a', ssh_auth_sock])",
          "880:             args.extend(['sh', '-c', cmd])",
          "881:         return args",
          "",
          "[Added Lines]",
          "20: # to maintian backward compatiblity",
          "21: from ansible_runner.config.runner import *  # noqa",
          "",
          "---------------"
        ],
        "ansible_runner/utils.py||ansible_runner/utils.py": [
          "File: ansible_runner/utils.py -> ansible_runner/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:             ]",
          "448:         },",
          "449:     ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452: def santize_json_response(data):",
          "453:     '''",
          "454:     Removes warning message from response message emitted by ansible",
          "455:     command line utilities.",
          "456:     :param action: The string data to be santizied",
          "457:     :type action: str",
          "458:     '''",
          "459:     start_re = re.compile(\"{(.|\\n)*\", re.MULTILINE)",
          "460:     data = start_re.search(data).group().strip()",
          "461:     return data",
          "",
          "---------------"
        ],
        "test/data/files/test_ee.py||test/data/files/test_ee.py": [
          "File: test/data/files/test_ee.py -> test/data/files/test_ee.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os",
          "3: print('this is execution environment {}'.format(os.environ['HOSTNAME']))",
          "",
          "---------------"
        ],
        "test/integration/test_interface.py||test/integration/test_interface.py": [
          "File: test/integration/test_interface.py -> test/integration/test_interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import pytest",
          "3: import shutil",
          "8: def test_run():",
          "",
          "[Removed Lines]",
          "5: from ansible_runner.interface import run, run_async",
          "",
          "[Added Lines]",
          "5: from ansible_runner.interface import run, run_async, run_command, run_command_async, get_plugin_docs, \\",
          "6:     get_plugin_docs_async, get_plugin_list, get_ansible_config, get_inventory",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:     # hosts can be down-selected to one inventory out of those available",
          "135:     assert 'host_1' in stdout",
          "136:     assert 'host_2' not in stdout",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140: def test_run_command(test_data_dir):",
          "141:     private_data_dir = os.path.join(test_data_dir, 'debug')",
          "142:     inventory = os.path.join(private_data_dir, 'inventory', 'inv_1')",
          "143:     playbook = os.path.join(private_data_dir, 'project', 'debug.yml')",
          "144:     out, err = run_command(",
          "145:         private_data_dir=private_data_dir,",
          "146:         executable_cmd='ansible-playbook',",
          "147:         cmdline_args=[playbook, '-i', inventory]",
          "148:     )",
          "149:     assert \"Hello world!\" in out",
          "150:     assert err == ''",
          "153: def test_run_ansible_command_within_container(test_data_dir, container_runtime_installed):",
          "154:     private_data_dir = os.path.join(test_data_dir, 'debug')",
          "155:     inventory = os.path.join(private_data_dir, 'inventory', 'inv_1')",
          "156:     playbook = os.path.join(private_data_dir, 'project', 'debug.yml')",
          "157:     container_kwargs = {",
          "158:         'process_isolation_executable': container_runtime_installed,",
          "159:         'process_isolation': True,",
          "160:         'container_image': 'quay.io/ansible/ansible-runner:devel'",
          "161:     }",
          "162:     out, err = run_command(",
          "163:         private_data_dir=private_data_dir,",
          "164:         executable_cmd='ansible-playbook',",
          "165:         cmdline_args=[playbook, '-i', inventory],",
          "167:     )",
          "168:     assert \"Hello world!\" in out",
          "169:     assert err == ''",
          "172: def test_run_script_within_container(test_data_dir, container_runtime_installed):",
          "173:     private_data_dir = os.path.join(test_data_dir, 'debug')",
          "174:     script_path = os.path.join(test_data_dir, 'files')",
          "175:     container_volume_mounts = [\"{}:{}:Z\".format(script_path, script_path)]",
          "176:     container_kwargs = {",
          "177:         'process_isolation_executable': container_runtime_installed,",
          "178:         'process_isolation': True,",
          "179:         'container_image': 'quay.io/ansible/ansible-runner:devel',",
          "180:         'container_volume_mounts': container_volume_mounts",
          "181:     }",
          "182:     out, err = run_command(",
          "183:         private_data_dir=private_data_dir,",
          "184:         executable_cmd='python3',",
          "185:         cmdline_args=[os.path.join(script_path, 'test_ee.py')],",
          "187:     )",
          "189:     assert \"this is execution environment\" in out",
          "190:     assert err == ''",
          "193: def test_run_command_async(test_data_dir):",
          "194:     private_data_dir = os.path.join(test_data_dir, 'debug')",
          "195:     inventory = os.path.join(private_data_dir, 'inventory', 'inv_1')",
          "196:     playbook = os.path.join(private_data_dir, 'project', 'debug.yml')",
          "197:     thread, r = run_command_async(",
          "198:         private_data_dir=private_data_dir,",
          "199:         executable_cmd='ansible-playbook',",
          "200:         cmdline_args=[playbook, '-i', inventory]",
          "201:     )",
          "202:     thread.join()",
          "203:     out = r.stdout.read()",
          "204:     assert \"Hello world!\" in out",
          "205:     assert r.status == 'successful'",
          "208: def test_get_plugin_docs():",
          "209:     out, _ = get_plugin_docs(",
          "210:         plugin_names=['ansible.builtin.file', 'ansible.builtin.copy'],",
          "211:         plugin_type='module',",
          "212:         response_format='json',",
          "213:         quiet=True",
          "214:     )",
          "215:     assert out['ansible.builtin.copy'] is not None",
          "216:     assert out['ansible.builtin.file'] is not None",
          "219: def test_get_plugin_docs_async():",
          "220:     thread, r = get_plugin_docs_async(",
          "221:         plugin_names=['ansible.builtin.file', 'ansible.builtin.copy'],",
          "222:         plugin_type='module',",
          "223:         response_format='json',",
          "224:         quiet=True",
          "225:     )",
          "226:     thread.join()",
          "227:     out = r.stdout.read()",
          "228:     assert 'ansible.builtin.copy' in out",
          "229:     assert 'ansible.builtin.file' in out",
          "230:     assert r.status == 'successful'",
          "233: def test_get_plugin_docs_within_container(container_runtime_installed):",
          "234:     container_kwargs = {",
          "235:         'process_isolation_executable': container_runtime_installed,",
          "236:         'process_isolation': True,",
          "237:         'container_image': 'quay.io/ansible/ansible-runner:devel'",
          "238:     }",
          "239:     out, _ = get_plugin_docs(",
          "240:         plugin_names=['ansible.builtin.file', 'ansible.builtin.copy'],",
          "241:         plugin_type='module',",
          "242:         response_format='json',",
          "243:         quiet=True,",
          "245:     )",
          "246:     assert out['ansible.builtin.copy'] is not None",
          "247:     assert out['ansible.builtin.file'] is not None",
          "250: def test_get_plugin_docs_list():",
          "251:     out, _ = get_plugin_list(",
          "252:         list_files=True,",
          "253:         response_format='json',",
          "254:         quiet=True",
          "255:     )",
          "256:     assert out['copy'] is not None",
          "257:     assert out['file'] is not None",
          "260: def test_get_plugin_docs_list_within_container(container_runtime_installed):",
          "261:     container_kwargs = {",
          "262:         'process_isolation_executable': container_runtime_installed,",
          "263:         'process_isolation': True,",
          "264:         'container_image': 'quay.io/ansible/ansible-runner:devel'",
          "265:     }",
          "266:     out, _ = get_plugin_list(",
          "267:         list_files=True,",
          "268:         response_format='json',",
          "269:         quiet=True,",
          "271:     )",
          "272:     assert out['copy'] is not None",
          "273:     assert out['file'] is not None",
          "276: def test_ansible_config():",
          "277:     out, _ = get_ansible_config(",
          "278:         action='list',",
          "279:         quiet=True",
          "280:     )",
          "281:     assert 'DEFAULT_VERBOSITY' in out",
          "284: def test_get_inventory(test_data_dir):",
          "285:     private_data_dir = os.path.join(test_data_dir, 'debug')",
          "286:     inventory1 = os.path.join(private_data_dir, 'inventory', 'inv_1')",
          "287:     inventory2 = os.path.join(private_data_dir, 'inventory', 'inv_2')",
          "289:     out, _ = get_inventory(",
          "290:         action='list',",
          "291:         inventories=[inventory1, inventory2],",
          "292:         response_format='json',",
          "293:         quiet=True",
          "294:     )",
          "295:     assert 'host_1' in out['ungrouped']['hosts']",
          "296:     assert 'host_2' in out['ungrouped']['hosts']",
          "299: def test_get_inventory_within_container(test_data_dir, container_runtime_installed):",
          "300:     container_kwargs = {",
          "301:         'process_isolation_executable': container_runtime_installed,",
          "302:         'process_isolation': True,",
          "303:         'container_image': 'quay.io/ansible/ansible-runner:devel'",
          "304:     }",
          "305:     private_data_dir = os.path.join(test_data_dir, 'debug')",
          "306:     inventory1 = os.path.join(private_data_dir, 'inventory', 'inv_1')",
          "307:     inventory2 = os.path.join(private_data_dir, 'inventory', 'inv_2')",
          "309:     out, _ = get_inventory(",
          "310:         action='list',",
          "311:         inventories=[inventory1, inventory2],",
          "312:         response_format='json',",
          "313:         quiet=True,",
          "315:     )",
          "316:     assert 'host_1' in out['ungrouped']['hosts']",
          "317:     assert 'host_2' in out['ungrouped']['hosts']",
          "",
          "---------------"
        ],
        "test/unit/config/test__base.py||test/unit/config/test__base.py": [
          "File: test/unit/config/test__base.py -> test/unit/config/test__base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3: from functools import partial",
          "4: import os",
          "5: import re",
          "7: import six",
          "8: from pexpect import TIMEOUT, EOF",
          "10: import pytest",
          "11: from unittest.mock import (Mock, patch, PropertyMock)",
          "13: from ansible_runner.config._base import BaseConfig, BaseExecutionMode",
          "14: from ansible_runner.loader import ArtifactLoader",
          "15: from ansible_runner.exceptions import ConfigurationError",
          "17: try:",
          "18:     Pattern = re._pattern_type",
          "19: except AttributeError:",
          "20:     # Python 3.7",
          "21:     Pattern = re.Pattern",
          "24: def load_file_side_effect(path, value=None, *args, **kwargs):",
          "25:     if args[0] == path:",
          "26:         if value:",
          "27:             return value",
          "28:     raise ConfigurationError",
          "31: def test_base_config_init_defaults():",
          "32:     rc = BaseConfig(private_data_dir='/')",
          "33:     assert rc.private_data_dir == '/'",
          "34:     assert rc.ident is not None",
          "35:     assert rc.process_isolation is False",
          "36:     assert rc.fact_cache_type == 'jsonfile'",
          "37:     assert rc.json_mode is False",
          "38:     assert rc.quiet is False",
          "39:     assert rc.quiet is False",
          "40:     assert rc.rotate_artifacts == 0",
          "41:     assert rc.artifact_dir == os.path.join('/artifacts/%s' % rc.ident)",
          "42:     assert isinstance(rc.loader, ArtifactLoader)",
          "45: def test_base_config_with_artifact_dir():",
          "46:     rc = BaseConfig(artifact_dir='/this-is-some-dir')",
          "47:     assert rc.artifact_dir == os.path.join('/this-is-some-dir', rc.ident)",
          "48:     assert rc.private_data_dir == os.path.abspath(os.path.expanduser('~/.ansible-runner'))",
          "51: def test_base_config_init_with_ident():",
          "52:     rc = BaseConfig(private_data_dir='/', ident='test')",
          "53:     assert rc.private_data_dir == '/'",
          "54:     assert rc.ident == 'test'",
          "55:     assert rc.artifact_dir == os.path.join('/artifacts/test')",
          "56:     assert isinstance(rc.loader, ArtifactLoader)",
          "59: def test_base_config_project_dir():",
          "60:     rc = BaseConfig(private_data_dir='/', project_dir='/another/path')",
          "61:     assert rc.project_dir == '/another/path'",
          "62:     rc = BaseConfig(private_data_dir='/')",
          "63:     assert rc.project_dir == '/project'",
          "66: def test_prepare_environment_vars_only_strings():",
          "67:     rc = BaseConfig(private_data_dir=\"/\", envvars=dict(D='D'))",
          "69:     value = dict(A=1, B=True, C=\"foo\")",
          "70:     envvar_side_effect = partial(load_file_side_effect, 'env/envvars', value)",
          "72:     with patch.object(rc.loader, 'load_file', side_effect=envvar_side_effect):",
          "73:         rc._prepare_env()",
          "74:         assert 'A' in rc.env",
          "75:         assert isinstance(rc.env['A'], six.string_types)",
          "76:         assert 'B' in rc.env",
          "77:         assert isinstance(rc.env['B'], six.string_types)",
          "78:         assert 'C' in rc.env",
          "79:         assert isinstance(rc.env['C'], six.string_types)",
          "80:         assert 'D' in rc.env",
          "81:         assert rc.env['D'] == 'D'",
          "84: def test_prepare_environment_pexpect_defaults():",
          "85:     rc = BaseConfig(private_data_dir=\"/\")",
          "86:     rc._prepare_env()",
          "88:     assert len(rc.expect_passwords) == 2",
          "89:     assert TIMEOUT in rc.expect_passwords",
          "90:     assert rc.expect_passwords[TIMEOUT] is None",
          "91:     assert EOF in rc.expect_passwords",
          "92:     assert rc.expect_passwords[EOF] is None",
          "95: def test_prepare_env_passwords():",
          "96:     rc = BaseConfig(private_data_dir='/')",
          "98:     value = {'^SSH [pP]assword.*$': 'secret'}",
          "99:     password_side_effect = partial(load_file_side_effect, 'env/passwords', value)",
          "101:     with patch.object(rc.loader, 'load_file', side_effect=password_side_effect):",
          "102:         rc._prepare_env()",
          "103:         rc.expect_passwords.pop(TIMEOUT)",
          "104:         rc.expect_passwords.pop(EOF)",
          "105:         assert len(rc.expect_passwords) == 1",
          "106:         assert isinstance(list(rc.expect_passwords.keys())[0], Pattern)",
          "107:         assert 'secret' in rc.expect_passwords.values()",
          "110: def test_prepare_environment_subprocess_defaults():",
          "111:     rc = BaseConfig(private_data_dir=\"/\")",
          "112:     rc._prepare_env(runner_mode=\"subprocess\")",
          "114:     assert rc.subprocess_timeout == 300",
          "117: def test_prepare_env_settings_defaults():",
          "118:     rc = BaseConfig(private_data_dir='/')",
          "119:     rc._prepare_env()",
          "120:     assert rc.settings == {}",
          "123: def test_prepare_env_settings():",
          "124:     rc = BaseConfig(private_data_dir='/')",
          "126:     value = {'test': 'string'}",
          "127:     settings_side_effect = partial(load_file_side_effect, 'env/settings', value)",
          "129:     with patch.object(rc.loader, 'load_file', side_effect=settings_side_effect):",
          "130:         rc._prepare_env()",
          "131:         assert rc.settings == value",
          "134: def test_prepare_env_sshkey_defaults():",
          "135:     rc = BaseConfig(private_data_dir='/')",
          "136:     rc._prepare_env()",
          "137:     assert rc.ssh_key_data is None",
          "140: def test_prepare_env_sshkey():",
          "141:     rc = BaseConfig(private_data_dir='/')",
          "143:     value = '01234567890'",
          "144:     sshkey_side_effect = partial(load_file_side_effect, 'env/ssh_key', value)",
          "146:     with patch.object(rc.loader, 'load_file', side_effect=sshkey_side_effect):",
          "147:         rc._prepare_env()",
          "148:         assert rc.ssh_key_data == value",
          "151: def test_prepare_env_defaults():",
          "152:     with patch('os.path.exists') as path_exists:",
          "153:         path_exists.return_value=True",
          "154:         rc = BaseConfig('/')",
          "155:         rc._prepare_env()",
          "156:         assert rc.idle_timeout is None",
          "157:         assert rc.job_timeout is None",
          "158:         assert rc.pexpect_timeout == 5",
          "159:         assert rc.cwd == '/project'",
          "162: @patch.dict('os.environ', {'PYTHONPATH': '/python_path_via_environ',",
          "163:                            'AWX_LIB_DIRECTORY': '/awx_lib_directory_via_environ'})",
          "164: def test_prepare_env_ansible_vars():",
          "165:     rc = BaseConfig(private_data_dir='/')",
          "166:     rc.ssh_key_data = None",
          "167:     rc.artifact_dir = '/'",
          "168:     rc.env = {}",
          "169:     rc.execution_mode = BaseExecutionMode.ANSIBLE_COMMANDS",
          "171:     rc._prepare_env()",
          "173:     assert not hasattr(rc, 'ssh_key_path')",
          "174:     assert not hasattr(rc, 'command')",
          "176:     assert rc.env['ANSIBLE_STDOUT_CALLBACK'] == 'awx_display'",
          "177:     assert rc.env['ANSIBLE_RETRY_FILES_ENABLED'] == 'False'",
          "178:     assert rc.env['ANSIBLE_HOST_KEY_CHECKING'] == 'False'",
          "179:     assert rc.env['AWX_ISOLATED_DATA_DIR'] == '/'",
          "180:     assert rc.env['PYTHONPATH'] == '/python_path_via_environ:/awx_lib_directory_via_environ', \\",
          "181:         \"PYTHONPATH is the union of the env PYTHONPATH and AWX_LIB_DIRECTORY\"",
          "183:     del rc.env['PYTHONPATH']",
          "184:     os.environ['PYTHONPATH'] = \"/foo/bar/python_path_via_environ\"",
          "185:     rc._prepare_env()",
          "186:     assert rc.env['PYTHONPATH'] == \"/foo/bar/python_path_via_environ:/awx_lib_directory_via_environ\", \\",
          "187:         \"PYTHONPATH is the union of the explicit env['PYTHONPATH'] override and AWX_LIB_DIRECTORY\"",
          "190: @patch('ansible_runner.config._base.open_fifo_write')",
          "191: def test_prepare_with_ssh_key(open_fifo_write_mock):",
          "192:     rc = BaseConfig(private_data_dir='/')",
          "193:     rc.artifact_dir = '/'",
          "194:     rc.env = {}",
          "195:     rc.execution_mode = BaseExecutionMode.ANSIBLE_COMMANDS",
          "196:     rc.ssh_key_data = '01234567890'",
          "197:     rc.command = 'ansible-playbook'",
          "198:     rc.cmdline_args = []",
          "200:     with patch.dict('os.environ', {'AWX_LIB_DIRECTORY': '/'}):",
          "201:         rc._prepare_env()",
          "203:     assert rc.ssh_key_path == '/ssh_key_data'",
          "204:     assert open_fifo_write_mock.called",
          "207: def test_wrap_args_with_ssh_agent_defaults():",
          "208:     rc = BaseConfig(private_data_dir='/')",
          "209:     res = rc.wrap_args_with_ssh_agent(['ansible-playbook', 'main.yaml'], '/tmp/sshkey')",
          "210:     assert res == [",
          "211:         'ssh-agent',",
          "212:         'sh', '-c',",
          "213:         \"trap 'rm -f /tmp/sshkey' EXIT && ssh-add /tmp/sshkey && rm -f /tmp/sshkey && ansible-playbook main.yaml\"",
          "214:     ]",
          "217: def test_wrap_args_with_ssh_agent_with_auth():",
          "218:     rc = BaseConfig(private_data_dir='/')",
          "219:     res = rc.wrap_args_with_ssh_agent(['ansible-playbook', 'main.yaml'], '/tmp/sshkey', '/tmp/sshauth')",
          "220:     assert res == [",
          "221:         'ssh-agent', '-a', '/tmp/sshauth',",
          "222:         'sh', '-c',",
          "223:         \"trap 'rm -f /tmp/sshkey' EXIT && ssh-add /tmp/sshkey && rm -f /tmp/sshkey && ansible-playbook main.yaml\"",
          "224:     ]",
          "227: def test_wrap_args_with_ssh_agent_silent():",
          "228:     rc = BaseConfig(private_data_dir='/')",
          "229:     res = rc.wrap_args_with_ssh_agent(['ansible-playbook', 'main.yaml'], '/tmp/sshkey', silence_ssh_add=True)",
          "230:     assert res == [",
          "231:         'ssh-agent',",
          "232:         'sh', '-c',",
          "233:         \"trap 'rm -f /tmp/sshkey' EXIT && ssh-add /tmp/sshkey 2>/dev/null && rm -f /tmp/sshkey && ansible-playbook main.yaml\"",
          "234:     ]",
          "237: @patch('os.path.isdir', return_value=False)",
          "238: @patch('os.path.exists', return_value=True)",
          "239: def test_container_volume_mounting_with_Z(mock_isdir, mock_exists, tmpdir):",
          "240:     rc = BaseConfig(private_data_dir=str(tmpdir))",
          "241:     os.path.isdir = Mock()",
          "242:     rc.container_volume_mounts = ['project_path:project_path:Z']",
          "243:     rc.container_name = 'foo'",
          "244:     rc.env = {}",
          "245:     rc.execution_mode = BaseExecutionMode.ANSIBLE_COMMANDS",
          "246:     rc.command = ['ansible-playbook', 'foo.yml']",
          "247:     rc.container_image = 'network-ee'",
          "248:     rc.cmdline_args = ['foo.yml']",
          "250:     new_args = rc.wrap_args_for_containerization(rc.command, rc.execution_mode, rc.cmdline_args)",
          "252:     assert new_args[0] == 'podman'",
          "253:     for i, entry in enumerate(new_args):",
          "254:         if entry == '-v':",
          "255:             mount = new_args[i + 1]",
          "256:             if mount.endswith('project_path:Z'):",
          "257:                 break",
          "258:     else:",
          "259:         raise Exception('Could not find expected mount, args: {}'.format(new_args))",
          "262: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "263: def test_containerization_settings(tmpdir, container_runtime):",
          "264:     with patch('ansible_runner.config._base.BaseConfig.containerized', new_callable=PropertyMock) as mock_containerized:",
          "265:         rc = BaseConfig(private_data_dir=tmpdir)",
          "266:         rc.ident = 'foo'",
          "267:         rc.cmdline_args = ['main.yaml', '-i', '/tmp/inventory']",
          "268:         rc.command = ['ansible-playbook'] + rc.cmdline_args",
          "269:         rc.process_isolation = True",
          "270:         rc.process_isolation_executable=container_runtime",
          "271:         rc.container_image = 'my_container'",
          "272:         rc.container_volume_mounts=['/host1:/container1', 'host2:/container2']",
          "273:         mock_containerized.return_value = True",
          "274:         rc.execution_mode = BaseExecutionMode.ANSIBLE_COMMANDS",
          "275:         rc._prepare_env()",
          "276:         rc._handle_command_wrap(rc.execution_mode, rc.cmdline_args)",
          "278:     extra_container_args = []",
          "279:     if container_runtime == 'podman':",
          "280:         extra_container_args = ['--quiet']",
          "281:     else:",
          "282:         extra_container_args = ['--user={os.getuid()}']",
          "284:     expected_command_start = [container_runtime, 'run', '--rm', '--interactive', '--tty', '--workdir', '/runner/project']",
          "285:     if container_runtime == 'podman':",
          "286:         expected_command_start +=['--group-add=root', '--userns=keep-id', '--ipc=host']",
          "288:     expected_command_start += ['-v', '{}/artifacts:/runner/artifacts:Z'.format(rc.private_data_dir)] + \\",
          "289:         ['-v', '{}:/runner:Z'.format(rc.private_data_dir)] + \\",
          "290:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "291:         extra_container_args + \\",
          "292:         ['--name', 'ansible_runner_foo'] + \\",
          "293:         ['my_container', 'ansible-playbook', 'main.yaml', '-i', '/tmp/inventory']",
          "295:     for index, element in enumerate(expected_command_start):",
          "296:         if '--user=' in element:",
          "297:             assert '--user=' in rc.command[index]",
          "298:         else:",
          "299:             assert rc.command[index] == element",
          "",
          "---------------"
        ],
        "test/unit/config/test_ansible_cfg.py||test/unit/config/test_ansible_cfg.py": [
          "File: test/unit/config/test_ansible_cfg.py -> test/unit/config/test_ansible_cfg.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3: import os",
          "4: import pytest",
          "6: from ansible_runner.config.ansible_cfg import AnsibleCfgConfig",
          "7: from ansible_runner.config._base import BaseExecutionMode",
          "8: from ansible_runner.exceptions import ConfigurationError",
          "11: def test_ansible_cfg_init_defaults():",
          "12:     rc = AnsibleCfgConfig()",
          "13:     assert rc.private_data_dir == os.path.abspath(os.path.expanduser('~/.ansible-runner'))",
          "14:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "17: def test_invalid_runner_mode_value():",
          "18:     with pytest.raises(ConfigurationError) as exc:",
          "19:         AnsibleCfgConfig(runner_mode='test')",
          "21:     assert \"Invalid runner mode\" in exc.value.args[0]",
          "24: def test_prepare_config_command():",
          "25:     rc = AnsibleCfgConfig()",
          "26:     rc.prepare_ansible_config_command('list', config_file='/tmp/ansible.cfg')",
          "27:     expected_command = ['ansible-config', 'list', '-c', '/tmp/ansible.cfg']",
          "28:     assert rc.command == expected_command",
          "29:     assert rc.runner_mode == 'subprocess'",
          "32: def test_prepare_config_invalid_command():",
          "33:     with pytest.raises(ConfigurationError) as exc:",
          "34:         rc = AnsibleCfgConfig()",
          "35:         rc.prepare_ansible_config_command('list', config_file='/tmp/ansible.cfg', only_changed=True)",
          "37:     assert \"only_changed is applicable for action 'dump'\" == exc.value.args[0]",
          "40: def test_prepare_config_invalid_action():",
          "41:     with pytest.raises(ConfigurationError) as exc:",
          "42:         rc = AnsibleCfgConfig()",
          "43:         rc.prepare_ansible_config_command('test')",
          "45:     assert \"Invalid action test, valid value is one of either list, dump, view\" == exc.value.args[0]",
          "48: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "49: def test_prepare_config_command_with_containerization(tmpdir, container_runtime):",
          "50:     kwargs = {",
          "51:         'private_data_dir': tmpdir,",
          "52:         'process_isolation': True,",
          "53:         'container_image': 'my_container',",
          "54:         'process_isolation_executable': container_runtime",
          "55:     }",
          "56:     rc = AnsibleCfgConfig(**kwargs)",
          "57:     rc.ident = 'foo'",
          "58:     rc.prepare_ansible_config_command('list', config_file='/tmp/ansible.cfg')",
          "60:     assert rc.runner_mode == 'subprocess'",
          "61:     extra_container_args = []",
          "62:     if container_runtime == 'podman':",
          "63:         extra_container_args = ['--quiet']",
          "64:     else:",
          "65:         extra_container_args = ['--user={os.getuid()}']",
          "67:     expected_command_start = [container_runtime, 'run', '--rm', '--interactive', '--tty', '--workdir', '/runner/project']",
          "68:     if container_runtime == 'podman':",
          "69:         expected_command_start +=['--group-add=root', '--userns=keep-id', '--ipc=host']",
          "71:     expected_command_start += ['-v', '{}/artifacts:/runner/artifacts:Z'.format(rc.private_data_dir)] + \\",
          "72:         ['-v', '{}:/runner:Z'.format(rc.private_data_dir)] + \\",
          "73:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "74:         extra_container_args + \\",
          "75:         ['--name', 'ansible_runner_foo'] + \\",
          "76:         ['my_container', 'ansible-config', 'list', '-c', '/tmp/ansible.cfg']",
          "78:     for index, element in enumerate(expected_command_start):",
          "79:         if '--user=' in element:",
          "80:             assert '--user=' in rc.command[index]",
          "81:         else:",
          "82:             assert rc.command[index] == element",
          "",
          "---------------"
        ],
        "test/unit/config/test_command.py||test/unit/config/test_command.py": [
          "File: test/unit/config/test_command.py -> test/unit/config/test_command.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3: import os",
          "4: import pytest",
          "6: from ansible_runner.config.command import CommandConfig",
          "7: from ansible_runner.config._base import BaseExecutionMode",
          "8: from ansible_runner.exceptions import ConfigurationError",
          "11: def test_ansible_config_defaults():",
          "12:     rc = CommandConfig()",
          "13:     assert rc.private_data_dir == os.path.abspath(os.path.expanduser('~/.ansible-runner'))",
          "14:     assert rc.execution_mode == BaseExecutionMode.NONE",
          "15:     assert rc.runner_mode is None",
          "18: def test_invalid_runner_mode_value():",
          "19:     with pytest.raises(ConfigurationError) as exc:",
          "20:         CommandConfig(runner_mode='test')",
          "22:     assert \"Invalid runner mode\" in exc.value.args[0]",
          "25: def test_prepare_run_command_interactive():",
          "26:     rc = CommandConfig()",
          "27:     executable_cmd = 'ansible-playbook'",
          "28:     cmdline_args = ['main.yaml', '-i', 'test']",
          "29:     rc.prepare_run_command(executable_cmd, cmdline_args=cmdline_args)",
          "30:     expected_command = ['ansible-playbook', 'main.yaml', '-i', 'test']",
          "31:     assert rc.command == expected_command",
          "32:     assert rc.runner_mode == 'pexpect'",
          "33:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "36: def test_prepare_run_command_non_interactive():",
          "37:     rc = CommandConfig()",
          "38:     executable_cmd = 'ansible-doc'",
          "39:     cmdline_args = ['-l', '-j']",
          "40:     rc.prepare_run_command(executable_cmd, cmdline_args=cmdline_args)",
          "41:     expected_command = ['ansible-doc', '-l', '-j']",
          "42:     assert rc.command == expected_command",
          "43:     assert rc.runner_mode == 'subprocess'",
          "44:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "47: def test_prepare_run_command_generic():",
          "48:     rc = CommandConfig()",
          "49:     executable_cmd = 'python3'",
          "50:     cmdline_args = ['test.py']",
          "51:     rc.prepare_run_command(executable_cmd, cmdline_args=cmdline_args)",
          "52:     expected_command = ['python3', 'test.py']",
          "53:     assert rc.command == expected_command",
          "54:     assert rc.runner_mode == 'pexpect'",
          "55:     assert rc.execution_mode == BaseExecutionMode.GENERIC_COMMANDS",
          "58: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "59: def test_prepare_run_command_with_containerization(tmpdir, container_runtime):",
          "60:     kwargs = {",
          "61:         'private_data_dir': tmpdir,",
          "62:         'process_isolation': True,",
          "63:         'container_image': 'my_container',",
          "64:         'process_isolation_executable': container_runtime",
          "65:     }",
          "66:     cwd = os.getcwd()",
          "67:     executable_cmd = 'ansible-playbook'",
          "68:     cmdline_args = ['main.yaml', '-i', cwd]",
          "69:     rc = CommandConfig(**kwargs)",
          "70:     rc.ident = 'foo'",
          "71:     rc.prepare_run_command(executable_cmd, cmdline_args=cmdline_args)",
          "73:     assert rc.runner_mode == 'pexpect'",
          "74:     extra_container_args = []",
          "75:     if container_runtime == 'podman':",
          "76:         extra_container_args = ['--quiet']",
          "77:     else:",
          "78:         extra_container_args = ['--user={os.getuid()}']",
          "80:     expected_command_start = [container_runtime, 'run', '--rm', '--interactive', '--tty', '--workdir', '/runner/project'] + \\",
          "81:         ['-v', '{}:{}'.format(cwd, cwd)]",
          "82:     if container_runtime == 'podman':",
          "83:         expected_command_start +=['--group-add=root', '--userns=keep-id', '--ipc=host']",
          "85:     expected_command_start += ['-v', '{}/artifacts:/runner/artifacts:Z'.format(rc.private_data_dir)] + \\",
          "86:         ['-v', '{}:/runner:Z'.format(rc.private_data_dir)] + \\",
          "87:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "88:         extra_container_args + \\",
          "89:         ['--name', 'ansible_runner_foo'] + \\",
          "90:         ['my_container'] + [executable_cmd] + cmdline_args",
          "92:     for index, element in enumerate(expected_command_start):",
          "93:         if '--user=' in element:",
          "94:             assert '--user=' in rc.command[index]",
          "95:         else:",
          "96:             assert rc.command[index] == element",
          "",
          "---------------"
        ],
        "test/unit/config/test_doc.py||test/unit/config/test_doc.py": [
          "File: test/unit/config/test_doc.py -> test/unit/config/test_doc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3: import os",
          "4: import pytest",
          "6: from ansible_runner.config.doc import DocConfig",
          "7: from ansible_runner.config._base import BaseExecutionMode",
          "8: from ansible_runner.exceptions import ConfigurationError",
          "11: def test_ansible_doc_defaults():",
          "12:     rc = DocConfig()",
          "13:     assert rc.private_data_dir == os.path.abspath(os.path.expanduser('~/.ansible-runner'))",
          "14:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "15:     assert rc.runner_mode == 'subprocess'",
          "18: def test_invalid_runner_mode_value():",
          "19:     with pytest.raises(ConfigurationError) as exc:",
          "20:         DocConfig(runner_mode='test')",
          "22:     assert \"Invalid runner mode\" in exc.value.args[0]",
          "25: def test_invalid_response_format_value():",
          "26:     with pytest.raises(ConfigurationError) as exc:",
          "27:         rc = DocConfig()",
          "28:         plugin_names = ['copy', 'file']",
          "29:         rc.prepare_plugin_docs_command(plugin_names, response_format='test')",
          "31:     assert \"Invalid response_format test, valid value is one of either json, human\" == exc.value.args[0]",
          "34: def test_invalid_plugin_name_value():",
          "35:     with pytest.raises(ConfigurationError) as exc:",
          "36:         rc = DocConfig()",
          "37:         plugin_names = 'copy', 'file'",
          "38:         rc.prepare_plugin_docs_command(plugin_names)",
          "40:     assert \"plugin_names should be of type list\" in exc.value.args[0]",
          "43: def test_prepare_plugin_docs_command():",
          "44:     rc = DocConfig()",
          "45:     plugin_names = ['copy', 'file']",
          "46:     plugin_type = 'module'",
          "47:     rc.prepare_plugin_docs_command(plugin_names, plugin_type=plugin_type, snippet=True, playbook_dir='/tmp/test')",
          "48:     expected_command = ['ansible-doc', '-j', '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy file']",
          "49:     assert rc.command == expected_command",
          "50:     assert rc.runner_mode == 'subprocess'",
          "51:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "54: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "55: def test_prepare_plugin_docs_command_with_containerization(tmpdir, container_runtime):",
          "56:     kwargs = {",
          "57:         'private_data_dir': tmpdir,",
          "58:         'process_isolation': True,",
          "59:         'container_image': 'my_container',",
          "60:         'process_isolation_executable': container_runtime",
          "61:     }",
          "62:     rc = DocConfig(**kwargs)",
          "63:     rc.ident = 'foo'",
          "65:     plugin_names = ['copy', 'file']",
          "66:     plugin_type = 'module'",
          "67:     rc.prepare_plugin_docs_command(plugin_names, plugin_type=plugin_type, snippet=True, playbook_dir='/tmp/test')",
          "69:     assert rc.runner_mode == 'subprocess'",
          "70:     extra_container_args = []",
          "72:     if container_runtime == 'podman':",
          "73:         extra_container_args = ['--quiet']",
          "74:     else:",
          "75:         extra_container_args = ['--user={os.getuid()}']",
          "77:     expected_command_start = [container_runtime, 'run', '--rm', '--interactive', '--tty', '--workdir', '/runner/project']",
          "78:     if container_runtime == 'podman':",
          "79:         expected_command_start +=['--group-add=root', '--userns=keep-id', '--ipc=host']",
          "81:     expected_command_start += ['-v', '{}/artifacts:/runner/artifacts:Z'.format(rc.private_data_dir)] + \\",
          "82:         ['-v', '{}:/runner:Z'.format(rc.private_data_dir)] + \\",
          "83:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "84:         extra_container_args + \\",
          "85:         ['--name', 'ansible_runner_foo'] + \\",
          "86:         ['my_container'] + ['ansible-doc', '-j', '-s', '-t', 'module', '--playbook-dir', '/tmp/test', 'copy file']",
          "88:     for index, element in enumerate(expected_command_start):",
          "89:         if '--user=' in element:",
          "90:             assert '--user=' in rc.command[index]",
          "91:         else:",
          "92:             assert rc.command[index] == element",
          "95: def test_prepare_plugin_list_command():",
          "96:     rc = DocConfig()",
          "97:     rc.prepare_plugin_list_command(list_files=True, plugin_type='module', playbook_dir='/tmp/test', module_path='/test/module')",
          "98:     expected_command = ['ansible-doc', '-F', '-j', '-t', 'module', '--playbook-dir', '/tmp/test', '-M', '/test/module']",
          "99:     assert rc.command == expected_command",
          "100:     assert rc.runner_mode == 'subprocess'",
          "101:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "104: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "105: def test_prepare_plugin_list_command_with_containerization(tmpdir, container_runtime):",
          "106:     kwargs = {",
          "107:         'private_data_dir': tmpdir,",
          "108:         'process_isolation': True,",
          "109:         'container_image': 'my_container',",
          "110:         'process_isolation_executable': container_runtime",
          "111:     }",
          "112:     rc = DocConfig(**kwargs)",
          "113:     rc.ident = 'foo'",
          "114:     rc.prepare_plugin_list_command(list_files=True, plugin_type='module', playbook_dir='/tmp/test', module_path='/test/module')",
          "116:     assert rc.runner_mode == 'subprocess'",
          "117:     extra_container_args = []",
          "119:     if container_runtime == 'podman':",
          "120:         extra_container_args = ['--quiet']",
          "121:     else:",
          "122:         extra_container_args = ['--user={os.getuid()}']",
          "124:     expected_command_start = [container_runtime, 'run', '--rm', '--interactive', '--tty', '--workdir', '/runner/project']",
          "125:     if container_runtime == 'podman':",
          "126:         expected_command_start +=['--group-add=root', '--userns=keep-id', '--ipc=host']",
          "128:     expected_command_start += ['-v', '{}/artifacts:/runner/artifacts:Z'.format(rc.private_data_dir)] + \\",
          "129:         ['-v', '{}:/runner:Z'.format(rc.private_data_dir)] + \\",
          "130:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "131:         extra_container_args + \\",
          "132:         ['--name', 'ansible_runner_foo'] + \\",
          "133:         ['my_container'] + ['ansible-doc', '-F', '-j', '-t', 'module', '--playbook-dir', '/tmp/test', '-M', '/test/module']",
          "135:     for index, element in enumerate(expected_command_start):",
          "136:         if '--user=' in element:",
          "137:             assert '--user=' in rc.command[index]",
          "138:         else:",
          "139:             assert rc.command[index] == element",
          "",
          "---------------"
        ],
        "test/unit/config/test_inventory.py||test/unit/config/test_inventory.py": [
          "File: test/unit/config/test_inventory.py -> test/unit/config/test_inventory.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3: import os",
          "4: import pytest",
          "6: from ansible_runner.config.inventory import InventoryConfig",
          "7: from ansible_runner.config._base import BaseExecutionMode",
          "8: from ansible_runner.exceptions import ConfigurationError",
          "11: def test_ansible_cfg_init_defaults():",
          "12:     rc = InventoryConfig()",
          "13:     assert rc.private_data_dir == os.path.abspath(os.path.expanduser('~/.ansible-runner'))",
          "14:     assert rc.execution_mode == BaseExecutionMode.ANSIBLE_COMMANDS",
          "17: def test_invalid_runner_mode_value():",
          "18:     with pytest.raises(ConfigurationError) as exc:",
          "19:         InventoryConfig(runner_mode='test')",
          "21:     assert \"Invalid runner mode\" in exc.value.args[0]",
          "24: def test_prepare_inventory_command():",
          "25:     rc = InventoryConfig()",
          "26:     inventories = ['/tmp/inventory1', '/tmp/inventory2']",
          "27:     rc.prepare_inventory_command('list', inventories, response_format='yaml', playbook_dir='/tmp',",
          "28:                                  vault_ids='1234', vault_password_file='/tmp/password')",
          "29:     expected_command = ['ansible-inventory', '--list', '-i', '/tmp/inventory1', '-i', '/tmp/inventory2', '--yaml', '--playbook-dir'] + \\",
          "30:                        ['/tmp', '--vault-id', '1234', '--vault-password-file', '/tmp/password']",
          "31:     assert rc.command == expected_command",
          "32:     assert rc.runner_mode == 'subprocess'",
          "35: def test_prepare_inventory_invalid_action():",
          "36:     with pytest.raises(ConfigurationError) as exc:",
          "37:         rc = InventoryConfig()",
          "38:         inventories = ['/tmp/inventory1', '/tmp/inventory2']",
          "39:         rc.prepare_inventory_command('test', inventories=inventories)",
          "41:     assert \"Invalid action test, valid value is one of either graph, host, list\" == exc.value.args[0]",
          "44: def test_prepare_inventory_invalid_response_format():",
          "45:     with pytest.raises(ConfigurationError) as exc:",
          "46:         rc = InventoryConfig()",
          "47:         inventories = ['/tmp/inventory1', '/tmp/inventory2']",
          "48:         rc.prepare_inventory_command('list', inventories=inventories, response_format='test')",
          "50:     assert \"Invalid response_format test, valid value is one of either json, yaml, toml\" == exc.value.args[0]",
          "53: def test_prepare_inventory_invalid_inventories():",
          "54:     with pytest.raises(ConfigurationError) as exc:",
          "55:         rc = InventoryConfig()",
          "56:         inventories = '/tmp/inventory1'",
          "57:         rc.prepare_inventory_command('list', inventories=inventories)",
          "59:     assert \"inventories should be of type list\" in exc.value.args[0]",
          "62: def test_prepare_inventory_invalid_host_action():",
          "63:     with pytest.raises(ConfigurationError) as exc:",
          "64:         rc = InventoryConfig()",
          "65:         inventories = ['/tmp/inventory1', '/tmp/inventory2']",
          "66:         rc.prepare_inventory_command('host', inventories=inventories)",
          "68:     assert \"Value of host parameter is required when action in 'host'\" == exc.value.args[0]",
          "71: def test_prepare_inventory_invalid_graph_response_format():",
          "72:     with pytest.raises(ConfigurationError) as exc:",
          "73:         rc = InventoryConfig()",
          "74:         inventories = ['/tmp/inventory1', '/tmp/inventory2']",
          "75:         rc.prepare_inventory_command('graph', inventories=inventories, response_format='toml')",
          "77:     assert \"'graph' action supports only 'json' response format\" == exc.value.args[0]",
          "80: @pytest.mark.parametrize('container_runtime', ['docker', 'podman'])",
          "81: def test_prepare_config_command_with_containerization(tmpdir, container_runtime):",
          "82:     kwargs = {",
          "83:         'private_data_dir': tmpdir,",
          "84:         'process_isolation': True,",
          "85:         'container_image': 'my_container',",
          "86:         'process_isolation_executable': container_runtime",
          "87:     }",
          "88:     rc = InventoryConfig(**kwargs)",
          "89:     rc.ident = 'foo'",
          "90:     inventories = ['/tmp/inventory1', '/tmp/inventory2']",
          "91:     rc.prepare_inventory_command('list', inventories, response_format='yaml', playbook_dir='/tmp',",
          "92:                                  vault_ids='1234', vault_password_file='/tmp/password')",
          "94:     assert rc.runner_mode == 'subprocess'",
          "95:     extra_container_args = []",
          "96:     if container_runtime == 'podman':",
          "97:         extra_container_args = ['--quiet']",
          "98:     else:",
          "99:         extra_container_args = ['--user={os.getuid()}']",
          "101:     expected_command_start = [container_runtime, 'run', '--rm', '--interactive', '--tty', '--workdir', '/runner/project']",
          "102:     if container_runtime == 'podman':",
          "103:         expected_command_start +=['--group-add=root', '--userns=keep-id', '--ipc=host']",
          "105:     expected_command_start += ['-v', '{}/artifacts:/runner/artifacts:Z'.format(rc.private_data_dir)] + \\",
          "106:         ['-v', '{}:/runner:Z'.format(rc.private_data_dir)] + \\",
          "107:         ['--env-file', '{}/env.list'.format(rc.artifact_dir)] + \\",
          "108:         extra_container_args + \\",
          "109:         ['--name', 'ansible_runner_foo', 'my_container'] + \\",
          "110:         ['ansible-inventory', '--list', '-i', '/tmp/inventory1', '-i', '/tmp/inventory2', '--yaml', '--playbook-dir'] + \\",
          "111:         ['/tmp', '--vault-id', '1234', '--vault-password-file', '/tmp/password']",
          "113:     for index, element in enumerate(expected_command_start):",
          "114:         if '--user=' in element:",
          "115:             assert '--user=' in rc.command[index]",
          "116:         else:",
          "117:             assert rc.command[index] == element",
          "",
          "---------------"
        ]
      }
    }
  ]
}