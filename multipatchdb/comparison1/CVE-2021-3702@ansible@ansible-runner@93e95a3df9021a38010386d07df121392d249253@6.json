{
  "cve_id": "CVE-2021-3702",
  "cve_desc": "A race condition flaw was found in ansible-runner, where an attacker could watch for rapid creation and deletion of a temporary directory, substitute their directory at that name, and then have access to ansible-runner's private_data_dir the next time ansible-runner made use of the private_data_dir. The highest Threat out of this flaw is to integrity and confidentiality.",
  "repo": "ansible/ansible-runner",
  "patch_hash": "93e95a3df9021a38010386d07df121392d249253",
  "patch_info": {
    "commit_hash": "93e95a3df9021a38010386d07df121392d249253",
    "repo": "ansible/ansible-runner",
    "commit_url": "https://github.com/ansible/ansible-runner/commit/93e95a3df9021a38010386d07df121392d249253",
    "files": [
      "ansible_runner/interface.py",
      "ansible_runner/runner.py",
      "ansible_runner/streaming.py"
    ],
    "message": "Successfully runs\n\nStreamController and StreamWorker are now fleshed out.",
    "before_after_code_files": [
      "ansible_runner/interface.py||ansible_runner/interface.py",
      "ansible_runner/runner.py||ansible_runner/runner.py",
      "ansible_runner/streaming.py||ansible_runner/streaming.py"
    ]
  },
  "patch_diff": {
    "ansible_runner/interface.py||ansible_runner/interface.py": [
      "File: ansible_runner/interface.py -> ansible_runner/interface.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: from ansible_runner import output",
      "25: from ansible_runner.runner_config import RunnerConfig",
      "26: from ansible_runner.runner import Runner",
      "28: from ansible_runner.utils import (",
      "29:     dump_artifacts,",
      "30:     check_isolation_executable_installed,",
      "",
      "[Removed Lines]",
      "27: from ansible_runner.streaming import StreamWorker",
      "",
      "[Added Lines]",
      "27: from ansible_runner.streaming import StreamController, StreamWorker",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:     event_callback_handler = kwargs.pop('event_handler', None)",
      "66:     status_callback_handler = kwargs.pop('status_handler', None)",
      "67:     cancel_callback = kwargs.pop('cancel_callback', None)",
      "69:     finished_callback = kwargs.pop('finished_callback', None)",
      "71:     control_out = kwargs.pop('control_out', None)",
      "78:     rc = RunnerConfig(**kwargs)",
      "79:     rc.prepare()",
      "",
      "[Removed Lines]",
      "68:     artifacts_callback = kwargs.pop('artifacts_callback', None)  # Currently not expected",
      "72:     if control_out is not None:",
      "73:         stream_worker = StreamWorker(control_out)",
      "74:         status_callback_handler = stream_worker.status_handler",
      "75:         event_callback_handler = stream_worker.event_handler",
      "76:         artifacts_callback = stream_worker.artifacts_callback",
      "",
      "[Added Lines]",
      "67:     artifacts_handler = kwargs.pop('artifacts_handler', None)",
      "71:     control_in = kwargs.pop('control_in', None)",
      "73:     worker_in = kwargs.pop('worker_in', None)",
      "74:     worker_out = kwargs.pop('worker_out', None)",
      "76:     if worker_in is not None and worker_out is not None:",
      "77:         stream_worker = StreamWorker(worker_in, worker_out, **kwargs)",
      "78:         return stream_worker",
      "80:     if control_in is not None and control_out is not None:",
      "81:         stream_controller = StreamController(control_in, control_out,",
      "82:                                              event_handler=event_callback_handler,",
      "83:                                              status_handler=status_callback_handler,",
      "84:                                              artifacts_handler=artifacts_handler,",
      "85:                                              cancel_callback=cancel_callback,",
      "86:                                              finished_callback=finished_callback,",
      "88:         return stream_controller",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "81:     return Runner(rc,",
      "82:                   event_handler=event_callback_handler,",
      "83:                   status_handler=status_callback_handler,",
      "84:                   cancel_callback=cancel_callback,",
      "86:                   finished_callback=finished_callback)",
      "",
      "[Removed Lines]",
      "85:                   artifacts_callback=artifacts_callback,",
      "",
      "[Added Lines]",
      "96:                   artifacts_handler=artifacts_handler,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "124:     :param artifact_dir: The path to the directory where artifacts should live, this defaults to 'artifacts' under the private data dir",
      "125:     :param project_dir: The path to the playbook content, this defaults to 'project' within the private data dir",
      "126:     :param rotate_artifacts: Keep at most n artifact directories, disable with a value of 0 which is the default",
      "128:     :param event_handler: An optional callback that will be invoked any time an event is received by Runner itself, return True to keep the event",
      "129:     :param cancel_callback: An optional callback that can inform runner to cancel (returning True) or not (returning False)",
      "130:     :param finished_callback: An optional callback that will be invoked at shutdown after process cleanup.",
      "131:     :param status_handler: An optional callback that will be invoked any time the status changes (e.g...started, running, failed, successful, timeout)",
      "132:     :param process_isolation: Enable process isolation, using either a container engine (e.g. podman) or a sandbox (e.g. bwrap).",
      "133:     :param process_isolation_executable: Process isolation executable or container engine used to isolate execution. (default: podman)",
      "134:     :param process_isolation_path: Path that an isolated playbook run will use for staging. (default: /tmp)",
      "",
      "[Removed Lines]",
      "127:     :param control_out: A file-like object used for streaming information back to a control instance of Runner",
      "",
      "[Added Lines]",
      "139:     :param control_in: A file object used for receiving streamed data back from a worker instance of Runner",
      "140:     :param control_out: A file object used for streaming project data to a worker instance of Runner",
      "141:     :param worker_in: A file object used for streaming project data to a worker instance of Runner",
      "142:     :param worker_out: A file object used for streaming information back to a control instance of Runner",
      "147:     :param artifacts_handler: An optional callback that will be invoked at the end of the run to deal with the artifacts from the run.",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "170:     :type forks: int",
      "171:     :type quiet: bool",
      "172:     :type verbosity: int",
      "173:     :type control_out: file",
      "174:     :type event_handler: function",
      "175:     :type cancel_callback: function",
      "176:     :type finished_callback: function",
      "177:     :type status_handler: function",
      "178:     :type process_isolation: bool",
      "179:     :type process_isolation_executable: str",
      "180:     :type process_isolation_path: str",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "189:     :type control_in: file",
      "191:     :type worker_in: file",
      "192:     :type worker_out: file",
      "197:     :type artifacts_handler: function",
      "",
      "---------------"
    ],
    "ansible_runner/runner.py||ansible_runner/runner.py": [
      "File: ansible_runner/runner.py -> ansible_runner/runner.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: class Runner(object):",
      "29:     def __init__(self, config, cancel_callback=None, remove_partials=True, event_handler=None,",
      "31:         self.config = config",
      "32:         self.cancel_callback = cancel_callback",
      "33:         self.event_handler = event_handler",
      "35:         self.finished_callback = finished_callback",
      "36:         self.status_handler = status_handler",
      "37:         self.canceled = False",
      "",
      "[Removed Lines]",
      "30:                  artifacts_callback=None, finished_callback=None, status_handler=None):",
      "34:         self.artifacts_callback = artifacts_callback",
      "",
      "[Added Lines]",
      "30:                  artifacts_handler=None, finished_callback=None, status_handler=None):",
      "34:         self.artifacts_handler = artifacts_handler",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "284:                 logger.error('Failed to delete cgroup: {}'.format(stderr))",
      "285:                 raise RuntimeError('Failed to delete cgroup: {}'.format(stderr))",
      "288:             try:",
      "290:             except Exception as e:",
      "291:                 raise CallbackError(\"Exception in Artifact Callback: {}\".format(e))",
      "",
      "[Removed Lines]",
      "287:         if self.artifacts_callback is not None:",
      "289:                 self.artifacts_callback(self.config.artifact_dir)",
      "",
      "[Added Lines]",
      "287:         if self.artifacts_handler is not None:",
      "289:                 self.artifacts_handler(self.config.artifact_dir)",
      "",
      "---------------"
    ],
    "ansible_runner/streaming.py||ansible_runner/streaming.py": [
      "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import base64",
      "2: import io",
      "3: import json",
      "4: import os",
      "5: import zipfile",
      "10:         self.control_out = control_out",
      "14:         self.control_out.write(b'\\n')",
      "15:         self.control_out.flush()",
      "17:     def event_handler(self, event_data):",
      "23:         buf = io.BytesIO()",
      "24:         with zipfile.ZipFile(buf, 'w', compression=zipfile.ZIP_DEFLATED, allowZip64=True) as archive:",
      "25:             for dirpath, dirs, files in os.walk(artifact_dir):",
      "",
      "[Removed Lines]",
      "8: class StreamWorker(object):",
      "9:     def __init__(self, control_out):",
      "12:     def status_handler(self, status, runner_config):",
      "13:         self.control_out.write(json.dumps(status).encode('utf-8'))",
      "18:         self.control_out.write(json.dumps(event_data).encode('utf-8'))",
      "19:         self.control_out.write(b'\\n')",
      "20:         self.control_out.flush()",
      "22:     def artifacts_callback(self, artifact_dir):",
      "",
      "[Added Lines]",
      "2: import codecs",
      "6: import stat",
      "7: import tempfile",
      "8: import uuid",
      "11: import ansible_runner",
      "12: import ansible_runner.plugins",
      "15: class UUIDEncoder(json.JSONEncoder):",
      "16:     def default(self, obj):",
      "17:         if isinstance(obj, uuid.UUID):",
      "18:             return obj.hex",
      "19:         return json.JSONEncoder.default(self, obj)",
      "22: # List of kwargs options to the run method that should be sent to the remote executor.",
      "23: remote_run_options = (",
      "24:     'forks',",
      "25:     'host_pattern',",
      "26:     'ident',",
      "27:     'ignore_logging',",
      "28:     'inventory',",
      "29:     'limit',",
      "30:     'module',",
      "31:     'module_args',",
      "32:     'omit_event_data',",
      "33:     'only_failed_event_data',",
      "34:     'playbook',",
      "35:     'verbosity',",
      "36: )",
      "39: class StreamController(object):",
      "40:     def __init__(self, control_in, control_out, status_handler=None, event_handler=None,",
      "41:                  artifacts_handler=None, cancel_callback=None, finished_callback=None, **kwargs):",
      "42:         self.control_in = control_in",
      "45:         self.kwargs = kwargs",
      "46:         self.config = ansible_runner.RunnerConfig(**kwargs)",
      "47:         self.status_handler = status_handler",
      "48:         self.event_handler = event_handler",
      "49:         self.artifacts_handler = artifacts_handler",
      "51:         self.cancel_callback = cancel_callback",
      "52:         self.finished_callback = finished_callback",
      "54:         self.status = \"unstarted\"",
      "55:         self.rc = None",
      "57:     def run(self):",
      "58:         self.send_job()",
      "60:         job_events_path = os.path.join(self.config.artifact_dir, 'job_events')",
      "61:         if not os.path.exists(job_events_path):",
      "62:             os.mkdir(job_events_path, 0o700)",
      "64:         for line in self.control_in:",
      "65:             data = json.loads(line)",
      "66:             if 'status' in data:",
      "67:                 self.status_callback(data)",
      "68:             elif 'artifacts' in data:",
      "69:                 self.artifacts_callback(data)",
      "70:             elif 'eof' in data:",
      "71:                 break",
      "72:             else:",
      "73:                 self.event_callback(data)",
      "75:         if self.finished_callback is not None:",
      "76:             self.finished_callback(self)",
      "77:         return self.status, self.rc",
      "79:     def send_job(self):",
      "80:         self.config.prepare()",
      "81:         remote_options = {key: value for key, value in self.kwargs.items() if key in remote_run_options}",
      "83:         buf = io.BytesIO()",
      "84:         with zipfile.ZipFile(buf, 'w', compression=zipfile.ZIP_DEFLATED, allowZip64=True) as archive:",
      "85:             private_data_dir = self.kwargs.get('private_data_dir', None)",
      "86:             if private_data_dir:",
      "87:                 for dirpath, dirs, files in os.walk(private_data_dir):",
      "88:                     relpath = os.path.relpath(dirpath, private_data_dir)",
      "89:                     if relpath == \".\":",
      "90:                         relpath = \"\"",
      "91:                     for fname in files:",
      "92:                         archive.write(os.path.join(dirpath, fname), arcname=os.path.join(relpath, fname))",
      "94:             kwargs = json.dumps(remote_options, cls=UUIDEncoder)",
      "95:             archive.writestr('kwargs', kwargs)",
      "96:             archive.close()",
      "97:         buf.flush()",
      "99:         data = {",
      "100:             'private_data_dir': True,",
      "101:             'payload': base64.b64encode(buf.getvalue()).decode('ascii'),",
      "102:         }",
      "103:         self.control_out.write(json.dumps(data).encode('utf-8'))",
      "106:         self.control_out.close()",
      "108:     def status_callback(self, status_data):",
      "109:         self.status = status_data['status']",
      "111:         for plugin in ansible_runner.plugins:",
      "112:             ansible_runner.plugins[plugin].status_handler(self.config, status_data)",
      "113:         if self.status_handler is not None:",
      "114:             self.status_handler(status_data, runner_config=self.config)",
      "116:     def event_callback(self, event_data):",
      "117:         full_filename = os.path.join(self.config.artifact_dir,",
      "118:                                      'job_events',",
      "119:                                      '{}-{}.json'.format(event_data['counter'],",
      "120:                                                          event_data['uuid']))",
      "122:         if self.event_handler is not None:",
      "123:             should_write = self.event_handler(event_data)",
      "124:         else:",
      "125:             should_write = True",
      "126:         for plugin in ansible_runner.plugins:",
      "127:             ansible_runner.plugins[plugin].event_handler(self.config, event_data)",
      "128:         if should_write:",
      "129:             with codecs.open(full_filename, 'w', encoding='utf-8') as write_file:",
      "130:                 os.chmod(full_filename, stat.S_IRUSR | stat.S_IWUSR)",
      "131:                 json.dump(event_data, write_file)",
      "133:     def artifacts_callback(self, artifacts_data):  # FIXME",
      "134:         if self.artifacts_handler is not None:",
      "135:             self.artifacts_handler()",
      "138: class StreamWorker(object):",
      "139:     def __init__(self, worker_in, worker_out, **kwargs):",
      "140:         self.worker_in = worker_in",
      "141:         self.worker_out = worker_out",
      "143:         self.kwargs = kwargs",
      "145:         self.private_data_dir = tempfile.TemporaryDirectory().name",
      "147:     def run(self):",
      "148:         for line in self.worker_in:",
      "149:             data = json.loads(line)",
      "150:             if data.get('private_data_dir'):",
      "151:                 buf = io.BytesIO(base64.b64decode(data['payload']))",
      "152:                 with zipfile.ZipFile(buf, 'r') as archive:",
      "153:                     archive.extractall(path=self.private_data_dir)",
      "155:         kwargs_path = os.path.join(self.private_data_dir, 'kwargs')",
      "156:         if os.path.exists(kwargs_path):",
      "157:             with open(kwargs_path, \"r\") as kwf:",
      "158:                 kwargs = json.load(kwf)",
      "159:             if not isinstance(kwargs, dict):",
      "160:                 raise ValueError(\"Invalid kwargs data\")",
      "161:         else:",
      "162:             kwargs = {}",
      "164:         self.kwargs.update(kwargs)",
      "166:         self.kwargs['quiet'] = True",
      "167:         self.kwargs['private_data_dir'] = self.private_data_dir",
      "168:         self.kwargs['status_handler'] = self.status_handler",
      "169:         self.kwargs['event_handler'] = self.event_handler",
      "170:         self.kwargs['artifacts_handler'] = self.artifacts_handler",
      "171:         self.kwargs['finished_callback'] = self.finished_callback",
      "173:         ansible_runner.interface.run(**self.kwargs)",
      "175:         # FIXME: do cleanup on the tempdir",
      "177:     def status_handler(self, status, runner_config):",
      "178:         self.worker_out.write(json.dumps(status).encode('utf-8'))",
      "179:         self.worker_out.write(b'\\n')",
      "180:         self.worker_out.flush()",
      "183:         self.worker_out.write(json.dumps(event_data).encode('utf-8'))",
      "184:         self.worker_out.write(b'\\n')",
      "185:         self.worker_out.flush()",
      "187:     def artifacts_handler(self, artifact_dir):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34:             'artifacts': True,",
      "35:             'payload': base64.b64encode(buf.getvalue()).decode('ascii'),",
      "36:         }",
      "",
      "[Removed Lines]",
      "37:         self.control_out.write(json.dumps(data).encode('utf-8'))",
      "38:         self.control_out.write(b'\\n')",
      "39:         self.control_out.flush()",
      "40:         self.control_out.close()",
      "",
      "[Added Lines]",
      "202:         self.worker_out.write(json.dumps(data).encode('utf-8'))",
      "203:         self.worker_out.write(b'\\n')",
      "204:         self.worker_out.flush()",
      "206:     def finished_callback(self, runner_obj):",
      "207:         self.worker_out.write(json.dumps({'eof': True}).encode('utf-8'))",
      "208:         self.worker_out.write(b'\\n')",
      "209:         self.worker_out.flush()",
      "210:         self.worker_out.close()",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14e75ba0ddedb289c443b990ddebac99b8fb7eb0",
      "candidate_info": {
        "commit_hash": "14e75ba0ddedb289c443b990ddebac99b8fb7eb0",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/14e75ba0ddedb289c443b990ddebac99b8fb7eb0",
        "files": [
          "ansible_runner/streaming.py",
          "ansible_runner/utils.py"
        ],
        "message": "Factor out a new unstream_dir utility function",
        "before_after_code_files": [
          "ansible_runner/streaming.py||ansible_runner/streaming.py",
          "ansible_runner/utils.py||ansible_runner/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ],
          "candidate": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/streaming.py||ansible_runner/streaming.py": [
          "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import codecs",
          "3: import json",
          "4: import os",
          "5: import stat",
          "6: import sys",
          "7: import tempfile",
          "8: import uuid",
          "10: try:",
          "11:     from collections.abc import Mapping",
          "12: except ImportError:",
          "",
          "[Removed Lines]",
          "2: import io",
          "9: import zipfile",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:                 self.job_kwargs = data['kwargs']",
          "87:             elif 'zipfile' in data:",
          "88:                 zip_data = self._input.read(data['zipfile'])",
          "98:             elif 'eof' in data:",
          "99:                 break",
          "",
          "[Removed Lines]",
          "89:                 buf = io.BytesIO(zip_data)",
          "90:                 with zipfile.ZipFile(buf, 'r') as archive:",
          "91:                     # Fancy extraction in order to preserve permissions",
          "92:                     # https://www.burgundywall.com/post/preserving-file-perms-with-python-zipfile-module",
          "93:                     for info in archive.infolist():",
          "94:                         archive.extract(info.filename, path=self.private_data_dir)",
          "95:                         out_path = os.path.join(self.private_data_dir, info.filename)",
          "96:                         perm = info.external_attr >> 16",
          "97:                         os.chmod(out_path, perm)",
          "",
          "[Added Lines]",
          "87:                 utils.unstream_dir(zip_data, self.private_data_dir)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:                 json.dump(event_data, write_file)",
          "206:     def artifacts_callback(self, artifacts_data):",
          "217:         if self.artifacts_handler is not None:",
          "218:             self.artifacts_handler(self.artifact_dir)",
          "",
          "[Removed Lines]",
          "207:         buf = io.BytesIO(self._input.read(artifacts_data['zipfile']))",
          "208:         with zipfile.ZipFile(buf, 'r') as archive:",
          "209:             # Fancy extraction in order to preserve permissions",
          "210:             # https://www.burgundywall.com/post/preserving-file-perms-with-python-zipfile-module",
          "211:             for info in archive.infolist():",
          "212:                 archive.extract(info.filename, path=self.private_data_dir)",
          "213:                 out_path = os.path.join(self.private_data_dir, info.filename)",
          "214:                 perm = info.external_attr >> 16",
          "215:                 os.chmod(out_path, perm)",
          "",
          "[Added Lines]",
          "197:         zip_data = self._input.read(artifacts_data['zipfile'])",
          "198:         utils.unstream_dir(zip_data, self.artifact_dir)",
          "",
          "---------------"
        ],
        "ansible_runner/utils.py||ansible_runner/utils.py": [
          "File: ansible_runner/utils.py -> ansible_runner/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     return b'\\n'.join((json.dumps({'zipfile': len(payload)}).encode('utf-8'), payload))",
          "102: def dump_artifact(obj, path, filename=None):",
          "103:     '''",
          "104:     Write the artifact to disk at the specified path",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: def unstream_dir(data, directory):",
          "103:     buf = BytesIO(data)",
          "104:     with zipfile.ZipFile(buf, 'r') as archive:",
          "105:         # Fancy extraction in order to preserve permissions",
          "106:         # https://www.burgundywall.com/post/preserving-file-perms-with-python-zipfile-module",
          "107:         for info in archive.infolist():",
          "108:             archive.extract(info.filename, path=directory)",
          "109:             out_path = os.path.join(directory, info.filename)",
          "110:             perm = info.external_attr >> 16",
          "111:             os.chmod(out_path, perm)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a7185ee6b956ce9318a0c98089972b2350d0b69",
      "candidate_info": {
        "commit_hash": "6a7185ee6b956ce9318a0c98089972b2350d0b69",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/6a7185ee6b956ce9318a0c98089972b2350d0b69",
        "files": [
          "ansible_runner/streaming.py"
        ],
        "message": "Attempt to deal gracefully with errors in streamed message parsing",
        "before_after_code_files": [
          "ansible_runner/streaming.py||ansible_runner/streaming.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ],
          "candidate": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/streaming.py||ansible_runner/streaming.py": [
          "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     def run(self):",
          "93:         while True:",
          "97:             if 'kwargs' in data:",
          "98:                 self.job_kwargs = self.update_paths(data['kwargs'])",
          "",
          "[Removed Lines]",
          "94:             line = self._input.readline()",
          "95:             data = json.loads(line)",
          "",
          "[Added Lines]",
          "94:             try:",
          "95:                 line = self._input.readline()",
          "96:                 data = json.loads(line)",
          "97:             except (json.decoder.JSONDecodeError, IOError):",
          "98:                 self.status_handler({'status': 'error'}, None)",
          "99:                 return self.status, self.rc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:             os.makedirs(job_events_path, 0o700, exist_ok=True)",
          "224:         while True:",
          "228:             if 'status' in data:",
          "229:                 self.status_callback(data)",
          "",
          "[Removed Lines]",
          "225:             line = self._input.readline()",
          "226:             data = json.loads(line)",
          "",
          "[Added Lines]",
          "229:             try:",
          "230:                 line = self._input.readline()",
          "231:                 data = json.loads(line)",
          "232:             except (json.decoder.JSONDecodeError, IOError):",
          "233:                 self.status_callback({'status': 'error'})",
          "234:                 return self.status, self.rc",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5149285d5c8df36e982e198865d33cf2aa712fe",
      "candidate_info": {
        "commit_hash": "b5149285d5c8df36e982e198865d33cf2aa712fe",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/b5149285d5c8df36e982e198865d33cf2aa712fe",
        "files": [
          "ansible_runner/streaming.py"
        ],
        "message": "Stop swallowing errors when unpacking zip data",
        "before_after_code_files": [
          "ansible_runner/streaming.py||ansible_runner/streaming.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ],
          "candidate": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/streaming.py||ansible_runner/streaming.py": [
          "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "225:     def artifacts_callback(self, artifacts_data):",
          "226:         zip_data = self._input.read(artifacts_data['zipfile'])",
          "233:         if self.artifacts_handler is not None:",
          "234:             self.artifacts_handler(self.artifact_dir)",
          "",
          "[Removed Lines]",
          "228:         try:",
          "229:             utils.unstream_dir(zip_data, self.artifact_dir)",
          "230:         except Exception:",
          "231:             return  # FIXME?",
          "",
          "[Added Lines]",
          "228:         utils.unstream_dir(zip_data, self.artifact_dir)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3ba0c5472414070781ca5af4a4577eade92b36f",
      "candidate_info": {
        "commit_hash": "b3ba0c5472414070781ca5af4a4577eade92b36f",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/b3ba0c5472414070781ca5af4a4577eade92b36f",
        "files": [
          "ansible_runner/streaming.py",
          "ansible_runner/utils.py",
          "test/integration/test_transmit_worker_process.py"
        ],
        "message": "Check for the case where garbage data has been streamed as a zipfile",
        "before_after_code_files": [
          "ansible_runner/streaming.py||ansible_runner/streaming.py",
          "ansible_runner/utils.py||ansible_runner/utils.py",
          "test/integration/test_transmit_worker_process.py||test/integration/test_transmit_worker_process.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ],
          "candidate": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/streaming.py||ansible_runner/streaming.py": [
          "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:                 self.job_kwargs = self.update_paths(data['kwargs'])",
          "95:             elif 'zipfile' in data:",
          "96:                 zip_data = self._input.read(data['zipfile'])",
          "98:             elif 'eof' in data:",
          "99:                 break",
          "",
          "[Removed Lines]",
          "97:                 utils.unstream_dir(zip_data, self.private_data_dir)",
          "",
          "[Added Lines]",
          "97:                 if not utils.unstream_dir(zip_data, self.private_data_dir):",
          "98:                     break",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:     def artifacts_callback(self, artifacts_data):",
          "207:         zip_data = self._input.read(artifacts_data['zipfile'])",
          "210:         if self.artifacts_handler is not None:",
          "211:             self.artifacts_handler(self.artifact_dir)",
          "",
          "[Removed Lines]",
          "208:         utils.unstream_dir(zip_data, self.artifact_dir)",
          "",
          "[Added Lines]",
          "209:         if not utils.unstream_dir(zip_data, self.artifact_dir):",
          "210:             return  # FIXME?",
          "",
          "---------------"
        ],
        "ansible_runner/utils.py||ansible_runner/utils.py": [
          "File: ansible_runner/utils.py -> ansible_runner/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: def unstream_dir(data, directory):",
          "103:     buf = BytesIO(data)",
          "114: def dump_artifact(obj, path, filename=None):",
          "",
          "[Removed Lines]",
          "104:     with zipfile.ZipFile(buf, 'r') as archive:",
          "105:         # Fancy extraction in order to preserve permissions",
          "106:         # https://www.burgundywall.com/post/preserving-file-perms-with-python-zipfile-module",
          "107:         for info in archive.infolist():",
          "108:             archive.extract(info.filename, path=directory)",
          "109:             out_path = os.path.join(directory, info.filename)",
          "110:             perm = info.external_attr >> 16",
          "111:             os.chmod(out_path, perm)",
          "",
          "[Added Lines]",
          "104:     try:",
          "105:         with zipfile.ZipFile(buf, 'r') as archive:",
          "106:             # Fancy extraction in order to preserve permissions",
          "107:             # https://www.burgundywall.com/post/preserving-file-perms-with-python-zipfile-module",
          "108:             for info in archive.infolist():",
          "109:                 archive.extract(info.filename, path=directory)",
          "110:                 out_path = os.path.join(directory, info.filename)",
          "111:                 perm = info.external_attr >> 16",
          "112:                 os.chmod(out_path, perm)",
          "113:     except zipfile.BadZipFile:",
          "114:         return False",
          "116:     return True",
          "",
          "---------------"
        ],
        "test/integration/test_transmit_worker_process.py||test/integration/test_transmit_worker_process.py": [
          "File: test/integration/test_transmit_worker_process.py -> test/integration/test_transmit_worker_process.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         )",
          "72:     assert \"private_data_dir path is either invalid or does not exist\" in str(excinfo.value)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: def test_garbage_private_dir_worker(tmpdir):",
          "76:     worker_dir = str(tmpdir.mkdir('for_worker'))",
          "77:     incoming_buffer = io.BytesIO(",
          "78:         b'{\"kwargs\": {\"playbook\": \"debug.yml\"}}\\n{\"zipfile\": 5}\\n\\x01\\x02\\x03\\x04\\x05{\"eof\": true}\\n')",
          "79:     outgoing_buffer = io.BytesIO()",
          "81:     # Worker",
          "82:     run(",
          "83:         streamer='worker',",
          "84:         _input=incoming_buffer,",
          "85:         _output=outgoing_buffer,",
          "86:         private_data_dir=worker_dir,",
          "87:     )",
          "88:     sent = outgoing_buffer.getvalue()",
          "89:     assert b'\"status\": \"failed\"' in sent",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65cb34e9fd937ea5ecf156f966bd06a45ae9976d",
      "candidate_info": {
        "commit_hash": "65cb34e9fd937ea5ecf156f966bd06a45ae9976d",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/65cb34e9fd937ea5ecf156f966bd06a45ae9976d",
        "files": [
          "ansible_runner/streaming.py"
        ],
        "message": "Do not transmit the private_data_dir to the worker",
        "before_after_code_files": [
          "ansible_runner/streaming.py||ansible_runner/streaming.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ],
          "candidate": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/streaming.py||ansible_runner/streaming.py": [
          "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:         if _output is None:",
          "37:             _output = sys.stdout.buffer",
          "38:         self._output = _output",
          "39:         self.kwargs = kwargs",
          "41:         self.status = \"unstarted\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:         self.private_data_dir = kwargs.pop('private_data_dir')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         self._output.write(b'\\n')",
          "49:         self._output.flush()",
          "53:         self._output.write(json.dumps({'eof': True}).encode('utf-8'))",
          "54:         self._output.write(b'\\n')",
          "55:         self._output.flush()",
          "",
          "[Removed Lines]",
          "51:         private_data_dir = self.kwargs.get('private_data_dir')",
          "52:         self._output.write(utils.stream_dir(private_data_dir))",
          "",
          "[Added Lines]",
          "52:         self._output.write(utils.stream_dir(self.private_data_dir))",
          "",
          "---------------"
        ]
      }
    }
  ]
}