{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "984c8cebfef840375a3e57fad09adab3a0f1a45d",
      "candidate_info": {
        "commit_hash": "984c8cebfef840375a3e57fad09adab3a0f1a45d",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/984c8cebfef840375a3e57fad09adab3a0f1a45d",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "backport of commit a085696c196b667816f8e72cfd2288defa2dad27 (#24775)\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  github.com/shoenig/go-m1cpu v0.1.6",
          "125:  github.com/shoenig/test v1.12.0",
          "126:  github.com/stretchr/testify v1.10.0",
          "128:  github.com/zclconf/go-cty-yaml v1.1.0",
          "129:  go.etcd.io/bbolt v1.3.9",
          "130:  go.uber.org/goleak v1.2.1",
          "",
          "[Removed Lines]",
          "127:  github.com/zclconf/go-cty v1.13.0",
          "",
          "[Added Lines]",
          "127:  github.com/zclconf/go-cty v1.16.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:  github.com/VividCortex/ewma v1.1.1 // indirect",
          "173:  github.com/agext/levenshtein v1.2.1 // indirect",
          "174:  github.com/apparentlymart/go-cidr v1.0.1 // indirect",
          "176:  github.com/apparentlymart/go-textseg/v15 v15.0.0 // indirect",
          "177:  github.com/armon/go-radix v1.0.0 // indirect",
          "178:  github.com/beorn7/perks v1.0.1 // indirect",
          "",
          "[Removed Lines]",
          "175:  github.com/apparentlymart/go-textseg/v13 v13.0.0 // indirect",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "276: github.com/apparentlymart/go-cidr v1.0.1 h1:NmIwLZ/KdsjIUlhf+/Np40atNXm/+lZ5txfTJ/SpF+U=",
          "277: github.com/apparentlymart/go-cidr v1.0.1/go.mod h1:EBcsNrHc3zQeuaeCeCtQruQm+n9/YjEn/vI25Lg7Gwc=",
          "278: github.com/apparentlymart/go-textseg/v12 v12.0.0/go.mod h1:S/4uRK2UtaQttw1GenVJEynmyUenKwP++x/+DdGV/Ec=",
          "281: github.com/apparentlymart/go-textseg/v15 v15.0.0 h1:uYvfpb3DyLSCGWnctWKGj857c6ew1u1fNQOlOtuGxQY=",
          "282: github.com/apparentlymart/go-textseg/v15 v15.0.0/go.mod h1:K8XmNZdhEBkdlyDdvbmmsvpAG721bKi0joRfFdHIWJ4=",
          "283: github.com/armon/circbuf v0.0.0-20150827004946-bbbad097214e h1:QEF07wC0T1rKkctt1RINW/+RMTVmiwxETico2l3gxJA=",
          "",
          "[Removed Lines]",
          "279: github.com/apparentlymart/go-textseg/v13 v13.0.0 h1:Y+KvPE1NYz0xl601PVImeQfFyEy6iT90AvPUL1NNfNw=",
          "280: github.com/apparentlymart/go-textseg/v13 v13.0.0/go.mod h1:ZK2fH7c4NqDTLtiYLvIkEghdlcqw7yxLeM89kiTRPUo=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1097: github.com/yusufpapurcu/wmi v1.2.4 h1:zFUKzehAFReQwLys1b/iSMl+JQGSCSjtVqQn9bBrPo0=",
          "1098: github.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=",
          "1099: github.com/zclconf/go-cty v1.4.0/go.mod h1:nHzOclRkoj++EU9ZjSrZvRG0BXIWt8c7loYc0qXAFGQ=",
          "1102: github.com/zclconf/go-cty-debug v0.0.0-20240509010212-0d6042c53940 h1:4r45xpDWB6ZMSMNJFMOjqrGHynW3DIBuR2H9j0ug+Mo=",
          "1103: github.com/zclconf/go-cty-debug v0.0.0-20240509010212-0d6042c53940/go.mod h1:CmBdvvj3nqzfzJ6nTCIwDTPZ56aVGvDrmztiO5g3qrM=",
          "1104: github.com/zclconf/go-cty-yaml v1.1.0 h1:nP+jp0qPHv2IhUVqmQSzjvqAWcObN0KBkUl2rWBdig0=",
          "",
          "[Removed Lines]",
          "1100: github.com/zclconf/go-cty v1.13.0 h1:It5dfKTTZHe9aeppbNOda3mN7Ag7sg6QkBNm6TkyFa0=",
          "1101: github.com/zclconf/go-cty v1.13.0/go.mod h1:YKQzy/7pZ7iq2jNFzy5go57xdxdWoLLpaEp4u238AE0=",
          "",
          "[Added Lines]",
          "1098: github.com/zclconf/go-cty v1.16.0 h1:xPKEhst+BW5D0wxebMZkxgapvOE/dw7bFTlgSc9nD6w=",
          "1099: github.com/zclconf/go-cty v1.16.0/go.mod h1:VvMs5i0vgZdhYawQNq5kePSpLAoz8u1xvZgrPIxfnZE=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0654df0ea7b832a2888c6904970e0f2215908d08",
      "candidate_info": {
        "commit_hash": "0654df0ea7b832a2888c6904970e0f2215908d08",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/0654df0ea7b832a2888c6904970e0f2215908d08",
        "files": [
          ".changelog/24561.txt",
          "command/agent/retry_join.go",
          "command/agent/retry_join_test.go"
        ],
        "message": "agent: Fix a bug where retry_join was not retrying (#24566)\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "command/agent/retry_join.go||command/agent/retry_join.go",
          "command/agent/retry_join_test.go||command/agent/retry_join_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/agent/retry_join.go||command/agent/retry_join.go": [
          "File: command/agent/retry_join.go -> command/agent/retry_join.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:   var err error",
          "178:   for _, addr := range serverJoin.RetryJoin {",
          "179:    servers, err := r.autoDiscover.Addrs(addr, r.logger)",
          "180:    if err != nil {",
          "181:     r.logger.Error(\"discovering join addresses failed\", \"join_config\", addr, \"error\", err)",
          "183:    }",
          "186:   }",
          "188:   if len(addrs) > 0 {",
          "",
          "[Removed Lines]",
          "182:     return",
          "185:    addrs = append(addrs, servers...)",
          "",
          "[Added Lines]",
          "186:    } else {",
          "187:     addrs = append(addrs, servers...)",
          "",
          "---------------"
        ],
        "command/agent/retry_join_test.go||command/agent/retry_join_test.go": [
          "File: command/agent/retry_join_test.go -> command/agent/retry_join_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  \"github.com/hashicorp/go-netaddrs\"",
          "16:  \"github.com/hashicorp/nomad/ci\"",
          "17:  \"github.com/hashicorp/nomad/helper/testlog\"",
          "18:  \"github.com/hashicorp/nomad/testutil\"",
          "19:  \"github.com/mitchellh/cli\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:  \"github.com/hashicorp/nomad/helper\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:  require.Equal(stubAddress, output[0])",
          "262: }",
          "264: func TestRetryJoin_Validate(t *testing.T) {",
          "265:  ci.Parallel(t)",
          "266:  type validateExpect struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267: type MockFailDiscover struct {",
          "268:  ReceivedConfig string",
          "269: }",
          "271: func (m *MockFailDiscover) Addrs(cfg string, _ *golog.Logger) ([]string, error) {",
          "272:  return nil, fmt.Errorf(\"test: failed discovery %q\", cfg)",
          "273: }",
          "274: func (m *MockFailDiscover) Help() string { return \"\" }",
          "275: func (m *MockFailDiscover) Names() []string {",
          "276:  return []string{\"\"}",
          "277: }",
          "279: func TestRetryJoin_RetryMaxAttempts(t *testing.T) {",
          "280:  ci.Parallel(t)",
          "285:  errCh := make(chan struct{})",
          "289:  timeout, timeoutStop := helper.NewSafeTimer(2 * time.Second)",
          "290:  defer timeoutStop()",
          "292:  var output []string",
          "294:  joiner := retryJoiner{",
          "295:   autoDiscover: autoDiscover{goDiscover: &MockFailDiscover{}},",
          "296:   clientJoin: func(s []string) (int, error) {",
          "297:    output = s",
          "298:    return 0, nil",
          "299:   },",
          "300:   clientEnabled: true,",
          "301:   logger:        testlog.HCLogger(t),",
          "302:   errCh:         errCh,",
          "303:  }",
          "308:  doneCh := make(chan struct{})",
          "310:  go func(doneCh chan struct{}) {",
          "311:   joiner.RetryJoin(&ServerJoin{RetryMaxAttempts: 1, RetryJoin: []string{\"provider=foo\"}})",
          "312:   close(doneCh)",
          "313:  }(doneCh)",
          "317:  select {",
          "318:  case <-errCh:",
          "319:   must.Len(t, 0, output)",
          "320:  case <-doneCh:",
          "321:   t.Fatal(\"retry join completed without closing error channel\")",
          "322:  case <-timeout.C:",
          "323:   t.Fatal(\"timeout reached without error channel close\")",
          "324:  }",
          "325: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5172358981cc3406af7c3138275297983c409c5b",
      "candidate_info": {
        "commit_hash": "5172358981cc3406af7c3138275297983c409c5b",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/5172358981cc3406af7c3138275297983c409c5b",
        "files": [
          ".changelog/24265.txt",
          "go.mod",
          "go.sum",
          "plugins/drivers/testutils/testing.go"
        ],
        "message": "Backport of deps: update go-plugin to 1.6.2 into release/1.9.x (#24267)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "plugins/drivers/testutils/testing.go||plugins/drivers/testutils/testing.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  github.com/hashicorp/go-msgpack/v2 v2.1.2",
          "67:  github.com/hashicorp/go-multierror v1.1.1",
          "68:  github.com/hashicorp/go-netaddrs v0.1.0",
          "70:  github.com/hashicorp/go-secure-stdlib/listenerutil v0.1.9",
          "71:  github.com/hashicorp/go-secure-stdlib/strutil v0.1.2",
          "72:  github.com/hashicorp/go-set/v3 v3.0.0-alpha.1",
          "",
          "[Removed Lines]",
          "69:  github.com/hashicorp/go-plugin v1.6.1",
          "",
          "[Added Lines]",
          "69:  github.com/hashicorp/go-plugin v1.6.2",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "689: github.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=",
          "690: github.com/hashicorp/go-netaddrs v0.1.0 h1:TnlYvODD4C/wO+j7cX1z69kV5gOzI87u3OcUinANaW8=",
          "691: github.com/hashicorp/go-netaddrs v0.1.0/go.mod h1:33+a/emi5R5dqRspOuZKO0E+Tuz5WV1F84eRWALkedA=",
          "694: github.com/hashicorp/go-retryablehttp v0.5.3/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=",
          "695: github.com/hashicorp/go-retryablehttp v0.6.6/go.mod h1:vAew36LZh98gCBJNLH42IQ1ER/9wtLZZ8meHqQvEYWY=",
          "696: github.com/hashicorp/go-retryablehttp v0.7.7 h1:C8hUCYzor8PIfXHa4UrZkU4VvK8o9ISHxT2Q8+VepXU=",
          "",
          "[Removed Lines]",
          "692: github.com/hashicorp/go-plugin v1.6.1 h1:P7MR2UP6gNKGPp+y7EZw2kOiq4IR9WiqLvp0XOsVdwI=",
          "693: github.com/hashicorp/go-plugin v1.6.1/go.mod h1:XPHFku2tFo3o3QKFgSYo+cghcUhw1NA1hZyMK0PWAw0=",
          "",
          "[Added Lines]",
          "692: github.com/hashicorp/go-plugin v1.6.2 h1:zdGAEd0V1lCaU0u+MxWQhtSDQmahpkwOun8U8EiRVog=",
          "693: github.com/hashicorp/go-plugin v1.6.2/go.mod h1:CkgLQ5CZqNmdL9U9JzM532t8ZiYQ35+pj3b1FD37R0Q=",
          "",
          "---------------"
        ],
        "plugins/drivers/testutils/testing.go||plugins/drivers/testutils/testing.go": [
          "File: plugins/drivers/testutils/testing.go -> plugins/drivers/testutils/testing.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"os\"",
          "10:  \"path/filepath\"",
          "11:  \"runtime\"",
          "12:  \"time\"",
          "14:  hclog \"github.com/hashicorp/go-hclog\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  \"testing\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  \"github.com/hashicorp/nomad/plugins/drivers\"",
          "26:  \"github.com/hashicorp/nomad/plugins/drivers/fsisolation\"",
          "27:  \"github.com/hashicorp/nomad/plugins/shared/hclspec\"",
          "29:  \"github.com/shoenig/test/must\"",
          "30: )",
          "",
          "[Removed Lines]",
          "28:  testing \"github.com/mitchellh/go-testing-interface\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "33:  drivers.DriverPlugin",
          "34:  client *plugin.GRPCClient",
          "35:  server *plugin.GRPCServer",
          "37:  logger hclog.Logger",
          "38:  impl   drivers.DriverPlugin",
          "39:  cgroup string",
          "",
          "[Removed Lines]",
          "36:  t      testing.T",
          "",
          "[Added Lines]",
          "36:  t      *testing.T",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "42: func (h *DriverHarness) Impl() drivers.DriverPlugin {",
          "43:  return h.impl",
          "44: }",
          "46:  logger := testlog.HCLogger(t).Named(\"driver_harness\")",
          "47:  pd := drivers.NewDriverPlugin(d, logger)",
          "",
          "[Removed Lines]",
          "45: func NewDriverHarness(t testing.T, d drivers.DriverPlugin) *DriverHarness {",
          "",
          "[Added Lines]",
          "45: func NewDriverHarness(t *testing.T, d drivers.DriverPlugin) *DriverHarness {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5385848e0d602997b05c5ff1d9d7528138f4575f",
      "candidate_info": {
        "commit_hash": "5385848e0d602997b05c5ff1d9d7528138f4575f",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/5385848e0d602997b05c5ff1d9d7528138f4575f",
        "files": [
          ".changelog/24166.txt",
          "command/agent/consul/service_client.go",
          "command/agent/consul/unit_test.go"
        ],
        "message": "Backport of Consul: improve reliability of deregistration into release/1.9.x (#24176)\n\nCo-authored-by: Tim Gross <tgross@hashicorp.com>",
        "before_after_code_files": [
          "command/agent/consul/service_client.go||command/agent/consul/service_client.go",
          "command/agent/consul/unit_test.go||command/agent/consul/unit_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/agent/consul/service_client.go||command/agent/consul/service_client.go": [
          "File: command/agent/consul/service_client.go -> command/agent/consul/service_client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  \"github.com/armon/go-metrics\"",
          "23:  \"github.com/hashicorp/consul/api\"",
          "24:  \"github.com/hashicorp/go-hclog\"",
          "25:  \"github.com/hashicorp/go-set/v3\"",
          "26:  \"github.com/hashicorp/nomad/client/serviceregistration\"",
          "27:  \"github.com/hashicorp/nomad/helper\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:  \"github.com/hashicorp/go-multierror\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "973: func (c *ServiceClient) sync(reason syncReason) error {",
          "974:  c.logger.Trace(\"execute sync\", \"reason\", reason)",
          "980:  namespaces, err := c.namespacesClient.List()",
          "",
          "[Removed Lines]",
          "976:  sreg, creg, sdereg, cdereg := 0, 0, 0, 0",
          "977:  var err error",
          "",
          "[Added Lines]",
          "977:  sreg, creg, sdereg, cdereg, fails := 0, 0, 0, 0, 0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1002:  inProbation := time.Now().Before(c.deregisterProbationExpiry)",
          "1006:   if _, ok := c.services[id]; ok {",
          "1008:    continue",
          "",
          "[Removed Lines]",
          "1005:  for id := range servicesInConsul {",
          "",
          "[Added Lines]",
          "1004:  var mErr *multierror.Error // collect errors for individual services/checks",
          "1007:  for id, service := range servicesInConsul {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1027:    continue",
          "1028:   }",
          "1059:    metrics.IncrCounter([]string{\"client\", \"consul\", \"sync_failure\"}, 1)",
          "1061:   }",
          "1062:   sdereg++",
          "1063:   metrics.IncrCounter([]string{\"client\", \"consul\", \"service_deregistrations\"}, 1)",
          "1064:  }",
          "",
          "[Removed Lines]",
          "1031:   ns := servicesInConsul[id].Namespace",
          "1033:   token := c.getServiceToken(id)",
          "1041:   if sidecar := getNomadSidecar(id, servicesInConsul); sidecar != nil {",
          "1042:    if err := c.agentAPI.ServiceDeregisterOpts(sidecar.ID,",
          "1043:     &api.QueryOptions{Namespace: ns, Token: token},",
          "1044:    ); err != nil {",
          "1045:     metrics.IncrCounter([]string{\"client\", \"consul\", \"sync_failure\"}, 1)",
          "1046:     return err",
          "1047:    }",
          "1048:   }",
          "1051:   if err := c.agentAPI.ServiceDeregisterOpts(id,",
          "1052:    &api.QueryOptions{Namespace: ns, Token: token},",
          "1053:   ); err != nil {",
          "1054:    if isOldNomadService(id) {",
          "1056:     continue",
          "1057:    }",
          "1060:    return err",
          "",
          "[Added Lines]",
          "1034:   err := c.syncRemoveService(service.Namespace, id, servicesInConsul)",
          "1035:   if err != nil {",
          "1037:    mErr = multierror.Append(mErr, err)",
          "1038:    fails++",
          "1039:    continue",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1078:      Token:                 token,",
          "1079:     }); err != nil {",
          "1080:     metrics.IncrCounter([]string{\"client\", \"consul\", \"sync_failure\"}, 1)",
          "1082:    }",
          "1083:    sreg++",
          "1084:    metrics.IncrCounter([]string{\"client\", \"consul\", \"service_registrations\"}, 1)",
          "",
          "[Removed Lines]",
          "1081:     return err",
          "",
          "[Added Lines]",
          "1061:     mErr = multierror.Append(mErr, err)",
          "1062:     fails++",
          "1063:     continue",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1092:   nsChecks, err := c.agentAPI.ChecksWithFilterOpts(\"\", &api.QueryOptions{Namespace: normalizeNamespace(namespace)})",
          "1093:   if err != nil {",
          "1094:    metrics.IncrCounter([]string{\"client\", \"consul\", \"sync_failure\"}, 1)",
          "1096:   }",
          "1097:   for k, v := range nsChecks {",
          "1098:    checksInConsul[k] = v",
          "",
          "[Removed Lines]",
          "1095:    return fmt.Errorf(\"failed to query Consul checks: %w\", err)",
          "",
          "[Added Lines]",
          "1077:    err = fmt.Errorf(\"failed to query Consul checks: %w\", err)",
          "1078:    if mErr.Len() == 0 {",
          "1079:     return err",
          "1080:    } else {",
          "1081:     mErr = multierror.Append(mErr, err)",
          "1082:     return mErr.ErrorOrNil()",
          "1083:    }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1137:    metrics.IncrCounter([]string{\"client\", \"consul\", \"sync_failure\"}, 1)",
          "1139:   }",
          "1140:   cdereg++",
          "1141:   metrics.IncrCounter([]string{\"client\", \"consul\", \"check_deregistrations\"}, 1)",
          "",
          "[Removed Lines]",
          "1131:   if err := c.agentAPI.CheckDeregisterOpts(id, &api.QueryOptions{Namespace: check.Namespace}); err != nil {",
          "1132:    if isOldNomadService(check.ServiceID) {",
          "1134:     continue",
          "1135:    }",
          "1138:    return err",
          "",
          "[Added Lines]",
          "1119:   err := c.agentAPI.CheckDeregisterOpts(id, &api.QueryOptions{Namespace: check.Namespace})",
          "1120:   if err != nil {",
          "1122:    mErr = multierror.Append(mErr, err)",
          "1123:    fails++",
          "1124:    continue",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1152:   }",
          "1153:   if err := c.agentAPI.CheckRegisterOpts(check, opts); err != nil {",
          "1154:    metrics.IncrCounter([]string{\"client\", \"consul\", \"sync_failure\"}, 1)",
          "1156:   }",
          "1157:   creg++",
          "1158:   metrics.IncrCounter([]string{\"client\", \"consul\", \"check_registrations\"}, 1)",
          "1159:  }",
          "1163:   c.logger.Debug(\"sync complete\", \"registered_services\", sreg, \"deregistered_services\", sdereg,",
          "1165:  }",
          "1166:  return nil",
          "1167: }",
          "",
          "[Removed Lines]",
          "1155:    return err",
          "1162:  if sreg > 0 || sdereg > 0 || creg > 0 || cdereg > 0 {",
          "1164:    \"registered_checks\", creg, \"deregistered_checks\", cdereg)",
          "",
          "[Added Lines]",
          "1141:    mErr = multierror.Append(mErr, err)",
          "1142:    fails++",
          "1143:    continue",
          "1150:  if sreg > 0 || sdereg > 0 || creg > 0 || cdereg > 0 || fails > 0 {",
          "1152:    \"registered_checks\", creg, \"deregistered_checks\", cdereg, \"failures\", fails)",
          "1153:  }",
          "1154:  return mErr.ErrorOrNil()",
          "1155: }",
          "1161: func (c *ServiceClient) syncRemoveService(ns, id string, servicesInConsul map[string]*api.AgentService) error {",
          "1164:  if sidecar := getNomadSidecar(id, servicesInConsul); sidecar != nil {",
          "1165:   err := c.agentAPI.ServiceDeregisterOpts(sidecar.ID, &api.QueryOptions{Namespace: ns})",
          "1166:   if err != nil {",
          "1167:    return err",
          "1168:   }",
          "1169:  }",
          "1171:  err := c.agentAPI.ServiceDeregisterOpts(id, &api.QueryOptions{Namespace: ns})",
          "1172:  if err != nil {",
          "1173:   return err",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1827:  for id := range c.agentServices.Items() {",
          "1832:    c.logger.Error(\"failed deregistering agent service\", \"service_id\", id, \"error\", err)",
          "1833:   }",
          "1834:  }",
          "",
          "[Removed Lines]",
          "1828:   opts := &api.QueryOptions{",
          "1829:    Token: c.getServiceToken(id),",
          "1830:   }",
          "1831:   if err := c.agentAPI.ServiceDeregisterOpts(id, opts); err != nil {",
          "",
          "[Added Lines]",
          "1837:   if err := c.agentAPI.ServiceDeregisterOpts(id, nil); err != nil {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1865:   if remainingChecks == nil || checkRemains(id) {",
          "1866:    check := remainingChecks[id]",
          "1867:    ns := check.Namespace",
          "1870:    if err := c.agentAPI.CheckDeregisterOpts(id,",
          "1872:     c.logger.Error(\"failed deregistering agent check\", \"check_id\", id, \"error\", err)",
          "1873:    }",
          "1874:   }",
          "",
          "[Removed Lines]",
          "1868:    token := c.getServiceToken(check.ServiceID)",
          "1871:     &api.QueryOptions{Namespace: ns, Token: token}); err != nil {",
          "",
          "[Added Lines]",
          "1875:     &api.QueryOptions{Namespace: ns}); err != nil {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2045: func isNomadService(id string) bool {",
          "2047: }",
          "",
          "[Removed Lines]",
          "2046:  return strings.HasPrefix(id, nomadTaskPrefix) || isOldNomadService(id)",
          "",
          "[Added Lines]",
          "2050:  return strings.HasPrefix(id, nomadTaskPrefix)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2052:  return strings.HasPrefix(id, nomadCheckPrefix)",
          "2053: }",
          "2067: const (",
          "2068:  sidecarSuffix = \"-sidecar-proxy\"",
          "2069: )",
          "",
          "[Removed Lines]",
          "2062: func isOldNomadService(id string) bool {",
          "2063:  const prefix = nomadServicePrefix + \"-executor\"",
          "2064:  return strings.HasPrefix(id, prefix)",
          "2065: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "command/agent/consul/unit_test.go||command/agent/consul/unit_test.go": [
          "File: command/agent/consul/unit_test.go -> command/agent/consul/unit_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "891:  }{",
          "892:   {\"_nomad-client-nomad-client-http\", false},",
          "893:   {\"_nomad-server-nomad-serf\", false},",
          "900:   {\"_nomad-task-FBBK265QN4TMT25ND4EP42TJVMYJ3HR4\", true},",
          "902:   {\"not-nomad\", false},",
          "903:   {\"_nomad\", false},",
          "904:  }",
          "",
          "[Removed Lines]",
          "896:   {\"_nomad-executor-abc\", true},",
          "897:   {\"_nomad-executor\", true},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "906:  for _, test := range tests {",
          "907:   t.Run(test.id, func(t *testing.T) {",
          "908:    actual := isNomadService(test.id)",
          "912:   })",
          "913:  }",
          "914: }",
          "",
          "[Removed Lines]",
          "909:    if actual != test.result {",
          "910:     t.Errorf(\"%q should be %t but found %t\", test.id, test.result, actual)",
          "911:    }",
          "",
          "[Added Lines]",
          "902:    must.Eq(t, test.result, actual)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9fcfbc8484b548a75e4e5d2c33560be860d306a0",
      "candidate_info": {
        "commit_hash": "9fcfbc8484b548a75e4e5d2c33560be860d306a0",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/9fcfbc8484b548a75e4e5d2c33560be860d306a0",
        "files": [
          ".changelog/25378.txt",
          "ui/app/controllers/jobs/index.js",
          "ui/mirage/config.js",
          "ui/tests/acceptance/jobs-list-test.js"
        ],
        "message": "backport of commit 239ac3e4bdec33cd2181333605d8b9fee1c06af4 (#25389)\n\nCo-authored-by: Phil Renaud <phil.renaud@hashicorp.com>",
        "before_after_code_files": [
          "ui/app/controllers/jobs/index.js||ui/app/controllers/jobs/index.js",
          "ui/mirage/config.js||ui/mirage/config.js",
          "ui/tests/acceptance/jobs-list-test.js||ui/tests/acceptance/jobs-list-test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/app/controllers/jobs/index.js||ui/app/controllers/jobs/index.js": [
          "File: ui/app/controllers/jobs/index.js -> ui/app/controllers/jobs/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "653:       this.searchText = newFilter;",
          "654:     } else {",
          "657:     }",
          "658:   }",
          "",
          "[Removed Lines]",
          "656:       this.searchText = `Name contains \"${newFilter}\"`;",
          "",
          "[Added Lines]",
          "656:       this.searchText = `Name matches \"(?i)${newFilter}\"`;",
          "",
          "---------------"
        ],
        "ui/mirage/config.js||ui/mirage/config.js": [
          "File: ui/mirage/config.js -> ui/mirage/config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:                   job[condition.field] &&",
          "232:                   job[condition.field].includes(condition.value)",
          "233:                 );",
          "234:               } else if (condition.operator === '==') {",
          "235:                 return job[condition.field] === condition.value;",
          "236:               } else if (condition.operator === '!=') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:               } else if (condition.operator === 'matches') {",
          "238:                 const value = condition.value.replace('(?i)', '');",
          "239:                 return new RegExp(value, 'i').test(job[condition.field]);",
          "",
          "---------------"
        ],
        "ui/tests/acceptance/jobs-list-test.js||ui/tests/acceptance/jobs-list-test.js": [
          "File: ui/tests/acceptance/jobs-list-test.js -> ui/tests/acceptance/jobs-list-test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:     assert.equal(",
          "190:       currentURL(),",
          "192:       'No page query param'",
          "193:     );",
          "194:   });",
          "",
          "[Removed Lines]",
          "191:       '/jobs?filter=Name%20contains%20%22foobar%22',",
          "",
          "[Added Lines]",
          "191:       '/jobs?filter=Name%20matches%20%22(%3Fi)foobar%22',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1271:         assert.ok(",
          "1272:           server.pretender.handledRequests.find((req) =>",
          "1273:             decodeURIComponent(req.url).includes(",
          "1275:             )",
          "1276:           ),",
          "1277:           'A request was made with a filter query param that assumed job name'",
          "",
          "[Removed Lines]",
          "1274:               '?filter=Name contains \"something-that-surely-doesnt-exist\"'",
          "",
          "[Added Lines]",
          "1274:               '?filter=Name matches \"(?i)something-that-surely-doesnt-exist\"'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1386:         localStorage.removeItem('nomadPageSize');",
          "1387:       });",
          "1389:       test('Searching by type filters the list', async function (assert) {",
          "1390:         localStorage.setItem('nomadPageSize', '10');",
          "1391:         server.createList('job', 10, {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1389:       test('Searching by name filters the list case-insensitively', async function (assert) {",
          "1390:         localStorage.setItem('nomadPageSize', '10');",
          "1391:         createJobs(server, 10);",
          "1392:         server.create('job', {",
          "1393:           name: 'hashi-one',",
          "1394:           id: 'hashi-one',",
          "1395:           modifyIndex: 0,",
          "1396:         });",
          "1397:         server.create('job', {",
          "1398:           name: 'Hashi-two',",
          "1399:           id: 'hashi-two',",
          "1400:           modifyIndex: 0,",
          "1401:         });",
          "1403:         await JobsList.visit();",
          "1405:         await JobsList.search.fillIn('Hashi');",
          "1406:         assert.dom('.job-row').exists({ count: 2 });",
          "1407:         assert.dom('[data-test-job-row=\"hashi-one\"]').exists();",
          "1408:         assert.dom('[data-test-job-row=\"hashi-two\"]').exists();",
          "1409:       });",
          "",
          "---------------"
        ]
      }
    }
  ]
}