{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5076901d81027c4a871043c03d04c3fc49a6f508",
      "candidate_info": {
        "commit_hash": "5076901d81027c4a871043c03d04c3fc49a6f508",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/5076901d81027c4a871043c03d04c3fc49a6f508",
        "files": [
          "examples/views/grid/GridTest.vue",
          "package.json",
          "packages/table/src/body.ts",
          "packages/table/src/methods.ts",
          "packages/table/src/table.ts",
          "packages/ui/index.ts"
        ],
        "message": "releases 3.11.19",
        "before_after_code_files": [
          "examples/views/grid/GridTest.vue||examples/views/grid/GridTest.vue",
          "packages/table/src/body.ts||packages/table/src/body.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts",
          "packages/ui/index.ts||packages/ui/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/grid/GridTest.vue||examples/views/grid/GridTest.vue": [
          "File: examples/views/grid/GridTest.vue -> examples/views/grid/GridTest.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <template>",
          "2:   <div>",
          "4:   </div>",
          "5: </template>",
          "16:     return {",
          "263:     }",
          "264:   },",
          "265:   methods: {",
          "275:           })",
          "290:       }",
          "296:       }",
          "297:     }",
          "298:   }",
          "300: </script>",
          "",
          "[Removed Lines]",
          "3:     <vxe-grid ref='xGrid' v-bind=\"gridOptions\"></vxe-grid>",
          "7: <script lang=\"ts\">",
          "8: import Vue from 'vue'",
          "9: import XEUtils from 'xe-utils'",
          "11: import { VxeUI } from '../../../packages'",
          "12: import type { VxeGridInstance, VxeGridProps } from '../../../types'",
          "14: export default Vue.extend({",
          "15:   data (this: any) {",
          "17:       gridOptions: {",
          "18:         border: true,",
          "19:         resizable: true,",
          "20:         showHeaderOverflow: true,",
          "21:         showOverflow: true,",
          "22:         keepSource: true,",
          "23:         id: 'full_edit_1',",
          "24:         height: 600,",
          "25:         columnConfig: {",
          "26:           useKey: true",
          "27:         },",
          "28:         rowConfig: {",
          "29:           keyField: 'id',",
          "30:           isHover: true",
          "31:         },",
          "32:         customConfig: {",
          "33:           storage: true,",
          "34:           checkMethod ({ column }) {",
          "35:             if (['nickname', 'role'].includes(column.field)) {",
          "36:               return false",
          "37:             }",
          "38:             return true",
          "39:           }",
          "40:         },",
          "41:         printConfig: {",
          "42:           columns: [",
          "43:             { field: 'name' },",
          "44:             { field: 'email' },",
          "45:             { field: 'nickname' },",
          "46:             { field: 'age' },",
          "47:             { field: 'amount' }",
          "48:           ]",
          "49:         },",
          "50:         sortConfig: {",
          "51:           trigger: 'cell',",
          "52:           remote: true",
          "53:         },",
          "54:         filterConfig: {",
          "55:           remote: true",
          "56:         },",
          "57:         pagerConfig: {",
          "58:           pageSize: 10,",
          "59:           pageSizes: [5, 10, 15, 20, 50, 100, 200, 500, 1000]",
          "60:         },",
          "61:         formConfig: {",
          "62:           titleWidth: 100,",
          "63:           titleAlign: 'right',",
          "64:           items: [",
          "65:             { field: 'name', title: 'app.body.label.name', span: 8, titlePrefix: { message: 'app.body.valid.rName', icon: 'vxe-icon-question-circle-fill' }, itemRender: { name: '$input', props: { placeholder: '\u8bf7\u8f93\u5165\u540d\u79f0' } } },",
          "66:             { field: 'email', title: '\u90ae\u4ef6', span: 8, titlePrefix: { useHTML: true, message: '\u70b9\u51fb\u94fe\u63a5\uff1a<a class=\"link\" href=\"https://vxetable.cn\" target=\"_blank\">vxe-table\u5b98\u7f51</a>', icon: 'vxe-icon-question-circle-fill' }, itemRender: { name: '$input', props: { placeholder: '\u8bf7\u8f93\u5165\u90ae\u4ef6' } } },",
          "67:             { field: 'nickname', title: '\u6635\u79f0', span: 8, itemRender: { name: '$input', props: { placeholder: '\u8bf7\u8f93\u5165\u6635\u79f0' } } },",
          "68:             { field: 'role', title: '\u89d2\u8272', span: 8, folding: true, itemRender: { name: '$input', props: { placeholder: '\u8bf7\u8f93\u5165\u89d2\u8272' } } },",
          "69:             { field: 'sex', title: '\u6027\u522b', span: 8, folding: true, titleSuffix: { message: '\u6ce8\u610f\uff0c\u5fc5\u586b\u4fe1\u606f\uff01', icon: 'fa fa-info-circle' }, itemRender: { name: '$select', options: [] } },",
          "70:             { field: 'age', title: '\u5e74\u9f84', span: 8, folding: true, itemRender: { name: '$input', props: { type: 'number', min: 1, max: 120, placeholder: '\u8bf7\u8f93\u5165\u5e74\u9f84' } } },",
          "71:             { span: 24, align: 'center', collapseNode: true, itemRender: { name: '$buttons', children: [{ props: { type: 'submit', content: 'app.body.label.search', status: 'primary' } }, { props: { type: 'reset', content: 'app.body.label.reset' } }] } }",
          "72:           ]",
          "73:         },",
          "74:         toolbarConfig: {",
          "75:           buttons: [",
          "76:             { code: 'insert_edit', name: '\u65b0\u589e', icon: 'fa fa-plus' },",
          "77:             { code: 'delete', name: '\u76f4\u63a5\u5220\u9664', icon: 'fa fa-trash-o' },",
          "78:             { code: 'mark_cancel', name: '\u5220\u9664/\u53d6\u6d88', icon: 'fa fa-trash-o' },",
          "79:             { code: 'save', name: 'app.body.button.save', icon: 'fa fa-save', status: 'success' }",
          "80:           ],",
          "81:           refresh: true,",
          "82:           import: true,",
          "83:           export: true,",
          "84:           print: true,",
          "85:           zoom: true,",
          "86:           custom: true",
          "87:         },",
          "88:         proxyConfig: {",
          "89:           seq: true, // \u542f\u7528\u52a8\u6001\u5e8f\u53f7\u4ee3\u7406\uff0c\u6bcf\u4e00\u9875\u7684\u5e8f\u53f7\u4f1a\u6839\u636e\u5f53\u524d\u9875\u6570\u53d8\u5316",
          "90:           sort: true, // \u542f\u7528\u6392\u5e8f\u4ee3\u7406\uff0c\u5f53\u70b9\u51fb\u6392\u5e8f\u65f6\u4f1a\u81ea\u52a8\u89e6\u53d1 query \u884c\u4e3a",
          "91:           filter: true, // \u542f\u7528\u7b5b\u9009\u4ee3\u7406\uff0c\u5f53\u70b9\u51fb\u7b5b\u9009\u65f6\u4f1a\u81ea\u52a8\u89e6\u53d1 query \u884c\u4e3a",
          "92:           form: true, // \u542f\u7528\u8868\u5355\u4ee3\u7406\uff0c\u5f53\u70b9\u51fb\u8868\u5355\u63d0\u4ea4\u6309\u94ae\u65f6\u4f1a\u81ea\u52a8\u89e6\u53d1 reload \u884c\u4e3a",
          "94:           props: {",
          "95:             result: 'result', // \u914d\u7f6e\u54cd\u5e94\u7ed3\u679c\u5217\u8868\u5b57\u6bb5",
          "96:             total: 'page.total' // \u914d\u7f6e\u54cd\u5e94\u7ed3\u679c\u603b\u9875\u6570\u5b57\u6bb5",
          "97:           },",
          "98:           ajax: {",
          "100:             query: ({ page, sorts, filters, form }) => {",
          "101:               const queryParams: any = Object.assign({}, form)",
          "103:               const firstSort = sorts[0]",
          "104:               if (firstSort) {",
          "105:                 queryParams.sort = firstSort.property",
          "106:                 queryParams.order = firstSort.order",
          "107:               }",
          "109:               filters.forEach(({ property, values }) => {",
          "110:                 queryParams[property] = values.join(',')",
          "111:               })",
          "112:               return fetch(`https://api.vxetable.cn/demo/api/pub/page/list/${page.pageSize}/${page.currentPage}?${XEUtils.serialize(queryParams)}`).then(response => response.json())",
          "113:             },",
          "114:             delete: ({ body }) => {",
          "115:               return this.postMock('https://api.vxetable.cn/demo/api/pub/save', body)",
          "116:             },",
          "117:             save: ({ body }) => this.postMock('https://api.vxetable.cn/demo/api/pub/save', body)",
          "118:           }",
          "119:         },",
          "120:         columns: [",
          "121:           { type: 'checkbox', title: 'ID', width: 120 },",
          "122:           { field: 'name', title: 'Name', sortable: true, titleHelp: { message: '\u540d\u79f0\u5fc5\u987b\u586b\u51992\uff01' }, titleSuffix: { content: '\u540d\u79f0\u5fc5\u987b\u586b\u51991\uff01' }, editRender: { name: 'input', attrs: { placeholder: '\u8bf7\u8f93\u5165\u540d\u79f0' } } },",
          "123:           {",
          "124:             field: 'role',",
          "125:             title: 'Role',",
          "126:             sortable: true,",
          "127:             titlePrefix: { useHTML: true, content: '1\u70b9\u51fb\u94fe\u63a5\uff1a<a class=\"link\" href=\"https://vxetable.cn\" target=\"_blank\">vxe-table\u5b98\u7f51</a>' },",
          "128:             titleSuffix: { useHTML: true, content: '2\u70b9\u51fb\u94fe\u63a5\uff1a<a class=\"link\" href=\"https://vxetable.cn\" target=\"_blank\">vxe-table\u5b98\u7f51</a>' },",
          "129:             filters: [",
          "130:               { label: '\u524d\u7aef\u5f00\u53d1', value: '\u524d\u7aef' },",
          "131:               { label: '\u540e\u7aef\u5f00\u53d1', value: '\u540e\u7aef' },",
          "132:               { label: '\u6d4b\u8bd5', value: '\u6d4b\u8bd5' },",
          "133:               { label: '\u7a0b\u5e8f\u5458\u9f13\u52b1\u5e08', value: '\u7a0b\u5e8f\u5458\u9f13\u52b1\u5e08' }",
          "134:             ],",
          "135:             filterMultiple: false,",
          "136:             editRender: { name: 'input', attrs: { placeholder: '\u8bf7\u8f93\u5165\u89d2\u8272' } }",
          "137:           },",
          "138:           { field: 'email', title: 'Email', width: 160, editRender: { name: '$input', props: { placeholder: '\u8bf7\u8f93\u5165\u90ae\u4ef6' } } },",
          "139:           { field: 'nickname', title: 'Nickname', editRender: { name: 'input', attrs: { placeholder: '\u8bf7\u8f93\u5165\u6635\u79f0' } } },",
          "140:           {",
          "141:             field: 'sex',",
          "142:             title: 'Sex',",
          "143:             filters: [",
          "144:               { label: '\u7537', value: '1' },",
          "145:               { label: '\u5973', value: '0' }",
          "146:             ],",
          "147:             editRender: { name: '$select', options: [], props: { placeholder: '\u8bf7\u9009\u62e9\u6027\u522b' } }",
          "148:           },",
          "149:           { field: 'age', title: 'Age', visible: false, sortable: true, editRender: { name: '$input', props: { type: 'number', min: 1, max: 120 } } },",
          "150:           {",
          "151:             field: 'amount',",
          "152:             title: 'Amount',",
          "153:             formatter ({ cellValue }) {",
          "154:               return cellValue ? `\uffe5${XEUtils.commafy(XEUtils.toNumber(cellValue), { digits: 2 })}` : ''",
          "155:             },",
          "156:             editRender:",
          "157:            { name: '$input', props: { type: 'float', digits: 2, placeholder: '\u8bf7\u8f93\u5165\u6570\u503c' } }",
          "158:           },",
          "159:           {",
          "160:             field: 'updateDate',",
          "161:             title: 'Update Date',",
          "162:             width: 160,",
          "163:             visible: false,",
          "164:             sortable: true,",
          "165:             formatter ({ cellValue }) {",
          "166:               return XEUtils.toDateString(cellValue, 'yyyy-MM-dd HH:ss:mm')",
          "167:             }",
          "168:           },",
          "169:           {",
          "170:             field: 'createDate',",
          "171:             title: 'Create Date',",
          "172:             width: 160,",
          "173:             visible: false,",
          "174:             sortable: true,",
          "175:             formatter ({ cellValue }) {",
          "176:               return XEUtils.toDateString(cellValue, 'yyyy-MM-dd')",
          "177:             }",
          "178:           }",
          "179:         ],",
          "180:         importConfig: {",
          "181:           remote: true,",
          "182:           types: ['xlsx'],",
          "183:           modes: ['insert'],",
          "185:           importMethod: ({ file }) => {",
          "186:             const $grid = this.$refs.xGrid as VxeGridInstance",
          "187:             const formBody = new FormData()",
          "188:             formBody.append('file', file)",
          "189:             return this.postMock('https://api.vxetable.cn/demo/api/pub/import', formBody).then((data: any) => {",
          "190:               VxeUI.modal.message({ content: `\u6210\u529f\u5bfc\u5165 ${data.result.insertRows} \u6761\u8bb0\u5f55\uff01`, status: 'success' })",
          "192:               $grid.commitProxy('query')",
          "193:             }).catch(() => {",
          "194:               VxeUI.modal.message({ content: '\u5bfc\u5165\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u6570\u636e\u662f\u5426\u6b63\u786e\uff01', status: 'error' })",
          "195:             })",
          "196:           }",
          "197:         },",
          "198:         exportConfig: {",
          "199:           remote: true,",
          "200:           types: ['xlsx'],",
          "201:           modes: ['current', 'selected', 'all'],",
          "203:           exportMethod: ({ options }) => {",
          "204:             const $grid = this.$refs.xGrid as VxeGridInstance",
          "205:             const proxyInfo = $grid.getProxyInfo()",
          "207:             const body = {",
          "208:               filename: options.filename,",
          "209:               sheetName: options.sheetName,",
          "210:               isHeader: options.isHeader,",
          "211:               original: options.original,",
          "212:               mode: options.mode,",
          "213:               pager: proxyInfo ? proxyInfo.pager : null,",
          "214:               ids: options.mode === 'selected' ? options.data.map((item) => item.id) : [],",
          "215:               fields: options.columns.map((column) => {",
          "216:                 return {",
          "217:                   field: column.property,",
          "218:                   title: column.title",
          "219:                 }",
          "220:               })",
          "221:             }",
          "223:             return this.postMock('https://api.vxetable.cn/demo/api/pub/export', body).then((data: any) => {",
          "224:               if (data.id) {",
          "225:                 VxeUI.modal.message({ content: '\u5bfc\u51fa\u6210\u529f\uff0c\u5f00\u59cb\u4e0b\u8f7d', status: 'success' })",
          "227:                 fetch(`https://api.vxetable.cn/demo/api/pub/export/download/${data.id}`).then(response => {",
          "228:                   response.blob().then(blob => {",
          "230:                     VxeUI.saveFile({ filename: '\u5bfc\u51fa\u6570\u636e', type: 'xlsx', content: blob })",
          "231:                   })",
          "232:                 })",
          "233:               }",
          "234:             }).catch(() => {",
          "235:               VxeUI.modal.message({ content: '\u5bfc\u51fa\u5931\u8d25\uff01', status: 'error' })",
          "236:             })",
          "237:           }",
          "238:         },",
          "239:         checkboxConfig: {",
          "240:           labelField: 'id',",
          "241:           reserve: true,",
          "242:           highlight: true,",
          "243:           range: true",
          "244:         },",
          "245:         editRules: {",
          "246:           name: [",
          "247:             { required: true, message: 'app.body.valid.rName' },",
          "248:             { min: 3, max: 50, message: '\u540d\u79f0\u957f\u5ea6\u5728 3 \u5230 50 \u4e2a\u5b57\u7b26' }",
          "249:           ],",
          "250:           email: [",
          "251:             { required: true, message: '\u90ae\u4ef6\u5fc5\u987b\u586b\u5199' }",
          "252:           ],",
          "253:           role: [",
          "254:             { required: true, message: '\u89d2\u8272\u5fc5\u987b\u586b\u5199' }",
          "255:           ]",
          "256:         },",
          "257:         editConfig: {",
          "258:           trigger: 'click',",
          "259:           mode: 'row',",
          "260:           showStatus: true",
          "261:         }",
          "262:       } as VxeGridProps",
          "266:     postMock (url:string, body: any): Promise<any> {",
          "267:       return new Promise((resolve) => {",
          "268:         console.log(`\u6a21\u62df\u63d0\u4ea4${url}\uff1a${JSON.stringify(body)}`)",
          "269:         setTimeout(() => {",
          "270:           resolve({",
          "271:             code: 200,",
          "272:             result: {",
          "273:               insertRows: 0",
          "274:             }",
          "276:         }, 300)",
          "277:       })",
          "278:     }",
          "279:   },",
          "280:   mounted () {",
          "281:     const sexList = [",
          "282:       { label: '\u5973', value: '0' },",
          "283:       { label: '\u7537', value: '1' }",
          "284:     ]",
          "285:     const { formConfig, columns } = this.gridOptions",
          "286:     if (columns) {",
          "287:       const sexColumn = columns[5]",
          "288:       if (sexColumn && sexColumn.editRender) {",
          "289:         sexColumn.editRender.options = sexList",
          "291:     }",
          "292:     if (formConfig && formConfig.items) {",
          "293:       const sexItem = formConfig.items[4]",
          "294:       if (sexItem && sexItem.itemRender) {",
          "295:         sexItem.itemRender.options = sexList",
          "299: })",
          "",
          "[Added Lines]",
          "3:     <vxe-grid ref=\"gridRef\" v-bind=\"gridOptions\" @scroll=\"scrollEvent\"></vxe-grid>",
          "7: <script>",
          "8: export default {",
          "9:   data () {",
          "10:     const gridOptions = {",
          "11:       border: true,",
          "12:       loading: false,",
          "13:       showOverflow: true,",
          "14:       showHeaderOverflow: true,",
          "15:       showFooterOverflow: true,",
          "16:       height: 600,",
          "17:       columnConfig: {",
          "18:         resizable: true",
          "19:       },",
          "20:       scrollX: {",
          "21:         enabled: true,",
          "22:         gt: 0",
          "23:       }",
          "24:     }",
          "25:     const tableColumn = []",
          "26:     const tableData = []",
          "28:       gridOptions,",
          "29:       rowKey: 0,",
          "30:       colKey: 0,",
          "31:       tableColumn,",
          "32:       tableData",
          "37:     loadDataAndColumns (rowSize, colSize) {",
          "38:       if (this.gridOptions.loading) {",
          "39:         return",
          "40:       }",
          "41:       this.gridOptions.loading = true",
          "42:       setTimeout(() => {",
          "43:         const colList = []",
          "44:         for (let i = 0; i < colSize; i++) {",
          "45:           this.colKey++",
          "46:           colList.push({",
          "47:             field: `col${this.colKey}`,",
          "48:             title: `\u6807\u9898${this.colKey}`,",
          "49:             width: 160",
          "51:         }",
          "52:         const columnList = [...this.tableColumn, ...colList]",
          "53:         const dataList = []",
          "54:         for (let i = 0; i < rowSize; i++) {",
          "55:           this.rowKey++",
          "56:           const item = {",
          "57:             id: `${this.rowKey}`",
          "58:           }",
          "59:           for (let j = 0; j < 10000; j++) {",
          "60:             item[`col${j}`] = `\u503c_${i}_${j}`",
          "61:           }",
          "62:           dataList.push(item)",
          "63:         }",
          "64:         const $grid = this.$refs.gridRef",
          "65:         if ($grid) {",
          "66:           this.tableColumn = columnList",
          "67:           this.tableData = [...this.tableData, ...dataList]",
          "68:           $grid.loadColumn(this.tableColumn)",
          "69:           $grid.loadData(this.tableData)",
          "70:           this.gridOptions.loading = false",
          "71:         }",
          "72:       }, 500)",
          "73:     },",
          "74:     scrollEvent ({ isTop, isBottom, isLeft, isRight }) {",
          "75:       if (isTop) {",
          "76:         console.log('\u89e6\u78b0\u5230\u9876\u90e8')",
          "78:       if (isBottom) {",
          "79:         console.log('\u89e6\u78b0\u5230\u5e95\u90e8')",
          "80:         this.loadDataAndColumns(20, 0)",
          "81:       }",
          "82:       if (isLeft) {",
          "83:         console.log('\u89e6\u78b0\u5230\u5de6\u4fa7')",
          "84:       }",
          "85:       if (isRight) {",
          "86:         console.log('\u89e6\u78b0\u5230\u53f3\u4fa7')",
          "87:         this.loadDataAndColumns(0, 15)",
          "90:   },",
          "91:   created () {",
          "92:     this.loadDataAndColumns(20, 15)",
          "94: }",
          "",
          "---------------"
        ],
        "packages/table/src/body.ts||packages/table/src/body.ts": [
          "File: packages/table/src/body.ts -> packages/table/src/body.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   const showEllipsis = cellOverflow === 'ellipsis'",
          "114:   const showTitle = cellOverflow === 'title'",
          "115:   const showTooltip = cellOverflow === true || cellOverflow === 'tooltip'",
          "117:   let isDirty: any",
          "118:   const tdOns: any = {}",
          "119:   const rest = fullAllDataRowIdData[rowid]",
          "",
          "[Removed Lines]",
          "116:   const hasEllipsis = showTitle || showTooltip || showEllipsis",
          "",
          "[Added Lines]",
          "117:   const hasEllipsis = allColumnOverflow || showTitle || showTooltip || showEllipsis",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "668:   loadTableData (datas: any) {",
          "669:     const { keepSource, showOverflow, treeConfig, treeOpts, editStore, scrollYStore, scrollXStore, lastScrollLeft, lastScrollTop, scrollYLoad: oldScrollYLoad, sXOpts, sYOpts } = this",
          "670:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "671:     let treeData = []",
          "672:     let fullData = datas ? datas.slice(0) : []",
          "673:     if (treeConfig) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "669:     const $xeTable = this",
          "673:     const rowOpts = $xeTable.computeRowOpts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "729:     }",
          "730:     if (sYLoad) {",
          "731:       if (showOverflow) {",
          "735:         }",
          "736:       }",
          "",
          "[Removed Lines]",
          "732:         const errColumn = this.tableFullColumn.find((column: any) => column.showOverflow === false)",
          "733:         if (errColumn) {",
          "734:           errLog('vxe.error.errProp', [`column[field=\"${errColumn.field}\"].show-overflow=false`, 'show-overflow=true'])",
          "",
          "[Added Lines]",
          "735:         if (!rowOpts.height) {",
          "736:           const errColumn = this.tableFullColumn.find((column: any) => column.showOverflow === false)",
          "737:           if (errColumn) {",
          "738:             errLog('vxe.error.errProp', [`column[field=\"${errColumn.field}\"].show-overflow=false`, 'show-overflow=true'])",
          "739:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2257:     const isCustomVisible = isAllCustom || storageOpts.visible",
          "2258:     const isCustomFixed = isAllCustom || storageOpts.fixed",
          "2259:     const isCustomSort = isAllCustom || storageOpts.sort",
          "2261:       if (!tableId) {",
          "2262:         errLog('vxe.error.reqProp', ['id'])",
          "2263:         return",
          "",
          "[Removed Lines]",
          "2260:     if (customConfig && (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort)) {",
          "",
          "[Added Lines]",
          "2265:     if ((customConfig ? isEnableConf(customOpts) : customOpts.enabled) && (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2354:     return storeData",
          "2355:   },",
          "2356:   saveCustomStore (type: any) {",
          "2358:     const { updateStore, storage } = customOpts",
          "2359:     const isAllCustom = storage === true",
          "2360:     const storageOpts = isAllCustom ? {} : Object.assign({}, storage || {})",
          "",
          "[Removed Lines]",
          "2357:     const { tableId, customOpts } = this",
          "",
          "[Added Lines]",
          "2362:     const $xeTable = this",
          "2363:     const props = $xeTable",
          "2365:     const { customConfig } = props",
          "2366:     const tableId = $xeTable.computeTableId",
          "2367:     const customOpts = $xeTable.computeCustomOpts",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2362:     const isCustomVisible = isAllCustom || storageOpts.visible",
          "2363:     const isCustomFixed = isAllCustom || storageOpts.fixed",
          "2364:     const isCustomSort = isAllCustom || storageOpts.sort",
          "2366:       if (!tableId) {",
          "2367:         errLog('vxe.error.reqProp', ['id'])",
          "2368:         return this.$nextTick()",
          "",
          "[Removed Lines]",
          "2365:     if (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort) {",
          "",
          "[Added Lines]",
          "2375:     if ((customConfig ? isEnableConf(customOpts) : customOpts.enabled) && (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2417:   parseColumns () {",
          "2418:     const leftList: any[] = []",
          "2419:     const centerList: any[] = []",
          "2420:     const rightList: any[] = []",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2428:     const $xeTable = this",
          "2429:     const props = $xeTable",
          "2430:     const internalData = $xeTable",
          "2432:     const { showOverflow } = props",
          "2433:     const rowOpts = $xeTable.computeRowOpts",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2477:     this.hasFixedColumn = leftList.length > 0 || rightList.length > 0",
          "2478:     Object.assign(columnStore, { leftList, centerList, rightList })",
          "2479:     if (scrollXLoad) {",
          "2480:       if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2496:       if (showOverflow) {",
          "2497:         if (!rowOpts.height) {",
          "2498:           const errColumn = internalData.tableFullColumn.find((column: any) => column.showOverflow === false)",
          "2499:           if (errColumn) {",
          "2500:             errLog('vxe.error.errProp', [`column[field=\"${errColumn.field}\"].show-overflow=false`, 'show-overflow=true'])",
          "2501:           }",
          "2502:         }",
          "2503:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2619:   calcCellWidth () {",
          "2620:     const $xeTable = this",
          "2627:     this.isCalcColumn = true",
          "2628:     return this.$nextTick().then(() => {",
          "2629:       const internalData = $xeTable",
          "",
          "[Removed Lines]",
          "2622:     const { autoWidthColumnList, tableData } = this",
          "2623:     if (!tableData.length || !autoWidthColumnList.length) {",
          "2624:       this.isCalcColumn = false",
          "2625:       return this.$nextTick()",
          "2626:     }",
          "",
          "[Added Lines]",
          "2646:     const { autoWidthColumnList } = this",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3174:     const { tableBody, leftContainer, rightContainer } = $xeTable.$refs",
          "3175:     const bodyElem = tableBody ? tableBody.$el : null",
          "3177:     const bodtTargetEl = xHandleEl || bodyElem",
          "3178:     if (bodtTargetEl) {",
          "3179:       if (leftContainer) {",
          "",
          "[Removed Lines]",
          "3176:     const xHandleEl = $xeTable.$refs.refScrollXHandleElem",
          "",
          "[Added Lines]",
          "3196:     const xHandleEl = $xeTable.$refs.refScrollXHandleElem as HTMLDivElement",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3475:           } else {",
          "3477:             if (selected.row || actived.row) {",
          "3479:               if (hasShiftKey) {",
          "3480:                 if (keyboardOpts.enterToTab) {",
          "3482:                 } else {",
          "3484:                 }",
          "3485:               } else {",
          "3486:                 if (keyboardOpts.enterToTab) {",
          "3488:                 } else {",
          "3490:                   const etrParams = {",
          "3494:                     _rowIndex,",
          "3499:                     $table: $xeTable",
          "3500:                   }",
          "3501:                   if (!beforeEnterMethod || beforeEnterMethod(etrParams) !== false) {",
          "",
          "[Removed Lines]",
          "3478:               const targetArgs = selected.row ? selected.args : actived.args",
          "3481:                   this.moveTabSelected(targetArgs, hasShiftKey, evnt)",
          "3483:                   this.moveSelected(targetArgs, isLeftArrow, true, isRightArrow, false, evnt)",
          "3487:                   this.moveTabSelected(targetArgs, hasShiftKey, evnt)",
          "3489:                   const _rowIndex = $xeTable.getVTRowIndex(selected.row)",
          "3491:                     row: selected.row,",
          "3492:                     rowIndex: $xeTable.getRowIndex(selected.row),",
          "3493:                     $rowIndex: $xeTable.getVMRowIndex(selected.row),",
          "3495:                     column: selected.column,",
          "3496:                     columnIndex: $xeTable.getColumnIndex(selected.column),",
          "3497:                     $columnIndex: $xeTable.getVMColumnIndex(selected.column),",
          "3498:                     _columnIndex: $xeTable.getVTColumnIndex(selected.column),",
          "",
          "[Added Lines]",
          "3498:               const activeParams = selected.row ? selected.args : actived.args",
          "3501:                   this.moveTabSelected(activeParams, hasShiftKey, evnt)",
          "3503:                   this.moveSelected(activeParams, isLeftArrow, true, isRightArrow, false, evnt)",
          "3507:                   this.moveTabSelected(activeParams, hasShiftKey, evnt)",
          "3509:                   const activeRow = selected.row || actived.row",
          "3510:                   const activeColumn = selected.column || actived.column",
          "3511:                   const _rowIndex = $xeTable.getVTRowIndex(activeRow)",
          "3513:                     row: activeRow,",
          "3514:                     rowIndex: $xeTable.getRowIndex(activeRow),",
          "3515:                     $rowIndex: $xeTable.getVMRowIndex(activeRow),",
          "3517:                     column: activeColumn,",
          "3518:                     columnIndex: $xeTable.getColumnIndex(activeColumn),",
          "3519:                     $columnIndex: $xeTable.getVMColumnIndex(activeColumn),",
          "3520:                     _columnIndex: $xeTable.getVTColumnIndex(activeColumn),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3504:                       if (_rowIndex >= afterFullData.length - 1) {",
          "3505:                         $xeTable.insertAt({}, -1).then(({ row: newRow }: any) => {",
          "3506:                           $xeTable.scrollToRow(newRow, selected.column)",
          "3508:                         })",
          "3509:                         $xeTable.dispatchEvent('enter-append-row', etrParams, evnt)",
          "3510:                         return",
          "3511:                       }",
          "3512:                     }",
          "3514:                     if (enterMethod) {",
          "3515:                       enterMethod(etrParams)",
          "3516:                     }",
          "",
          "[Removed Lines]",
          "3507:                           $xeTable.setSelectCell(newRow, selected.column)",
          "3513:                     this.moveSelected(targetArgs, isLeftArrow, false, isRightArrow, true, evnt)",
          "",
          "[Added Lines]",
          "3529:                           $xeTable.handleSelected({ ...activeParams, row: newRow }, evnt)",
          "3535:                     this.moveSelected(activeParams, isLeftArrow, false, isRightArrow, true, evnt)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6190:       }",
          "6191:       $xeTable.checkScrolling()",
          "6192:       internalData.lastScrollLeft = scrollLeft",
          "6194:       const yThreshold = $xeTable.computeScrollYThreshold",
          "6195:       isTop = scrollTop <= 0",
          "6196:       if (!isTop) {",
          "",
          "[Removed Lines]",
          "6193:     } else {",
          "",
          "[Added Lines]",
          "6215:     }",
          "6216:     if (isRollY) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "6312:     const $xeTable = this",
          "6313:     const internalData = $xeTable",
          "6316:     if (inFooterScroll) {",
          "6317:       return",
          "6318:     }",
          "",
          "[Removed Lines]",
          "6315:     const { inFooterScroll, inBodyScroll } = internalData",
          "",
          "[Added Lines]",
          "6338:     const { inFooterScroll, inBodyScroll, lastScrollTop } = internalData",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "6325:     const bodyElem = tableBody.$el as HTMLDivElement",
          "6326:     const headerElem = tableHeader ? tableHeader.$el as HTMLDivElement : null",
          "6327:     const footerElem = tableFooter ? tableFooter.$el as HTMLDivElement : null",
          "6328:     const wrapperEl = evnt.currentTarget as HTMLDivElement",
          "6330:     const isRollX = true",
          "6332:     internalData.inVirtualScroll = true",
          "6333:     setScrollLeft(bodyElem, scrollLeft)",
          "6334:     setScrollLeft(headerElem, scrollLeft)",
          "",
          "[Removed Lines]",
          "6329:     const { scrollTop, scrollLeft } = wrapperEl",
          "6331:     const isRollY = false",
          "",
          "[Added Lines]",
          "6351:     const yHandleEl = $xeTable.$refs.refScrollYHandleElem as HTMLDivElement",
          "6353:     const { scrollLeft } = wrapperEl",
          "6354:     const yBodyEl = yHandleEl || bodyElem",
          "6355:     let scrollTop = 0",
          "6356:     if (yBodyEl) {",
          "6357:       scrollTop = yBodyEl.scrollTop",
          "6358:     }",
          "6360:     const isRollY = scrollTop !== lastScrollTop",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "6343:     const $xeTable = this",
          "6344:     const internalData = $xeTable",
          "6347:     if (inFooterScroll) {",
          "6348:       return",
          "6349:     }",
          "",
          "[Removed Lines]",
          "6346:     const { inFooterScroll, inBodyScroll } = internalData",
          "",
          "[Added Lines]",
          "6376:     const { inFooterScroll, inBodyScroll, lastScrollLeft } = internalData",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6356:     const bodyElem = tableBody.$el as HTMLDivElement",
          "6357:     const leftElem = leftBody ? leftBody.$el as HTMLDivElement : null",
          "6358:     const rightElem = rightBody ? rightBody.$el as HTMLDivElement : null",
          "6359:     const wrapperEl = evnt.currentTarget as HTMLDivElement",
          "6362:     const isRollY = true",
          "6364:     internalData.inVirtualScroll = true",
          "",
          "[Removed Lines]",
          "6360:     const { scrollTop, scrollLeft } = wrapperEl",
          "6361:     const isRollX = false",
          "",
          "[Added Lines]",
          "6389:     const xHandleEl = $xeTable.$refs.refScrollXHandleElem as HTMLDivElement",
          "6391:     const { scrollTop } = wrapperEl",
          "6392:     const xBodyEl = xHandleEl || bodyElem",
          "6393:     let scrollLeft = 0",
          "6394:     if (xBodyEl) {",
          "6395:       scrollLeft = xBodyEl.scrollLeft",
          "6396:     }",
          "6397:     const isRollX = scrollLeft !== lastScrollLeft",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6585:     const tableHeaderElem = tableHeader ? tableHeader.$el : null",
          "6586:     const tableFooterElem = tableFooter ? tableFooter.$el : null",
          "6587:     if (XEUtils.isNumber(scrollLeft)) {",
          "6589:       if (xHandleEl) {",
          "6590:         setScrollLeft(xHandleEl, scrollLeft)",
          "6591:       } else {",
          "",
          "[Removed Lines]",
          "6588:       const xHandleEl = $xeTable.$refs.refScrollXHandleElem",
          "",
          "[Added Lines]",
          "6624:       const xHandleEl = $xeTable.$refs.refScrollXHandleElem as HTMLDivElement",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6595:       }",
          "6596:     }",
          "6597:     if (XEUtils.isNumber(scrollTop)) {",
          "6599:       if (yHandleEl) {",
          "6600:         setScrollTop(yHandleEl, scrollTop)",
          "6601:       } else {",
          "",
          "[Removed Lines]",
          "6598:       const yHandleEl = $xeTable.$refs.refScrollYHandleElem",
          "",
          "[Added Lines]",
          "6634:       const yHandleEl = $xeTable.$refs.refScrollYHandleElem as HTMLDivElement",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6605:       }",
          "6606:     }",
          "6607:     if (this.scrollXLoad || this.scrollYLoad) {",
          "6609:     }",
          "6610:     return this.$nextTick()",
          "6611:   },",
          "",
          "[Removed Lines]",
          "6608:       return new Promise(resolve => setTimeout(() => resolve(this.$nextTick()), 50))",
          "",
          "[Added Lines]",
          "6644:       return new Promise(resolve => setTimeout(() => resolve(this.$nextTick()), 30))",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6674:     const rightBodyElem = rightBody ? rightBody.$el : null",
          "6675:     const tableHeaderElem = tableHeader ? tableHeader.$el : null",
          "6676:     const tableFooterElem = tableFooter ? tableFooter.$el : null",
          "6678:     if (xHandleEl) {",
          "6679:       setScrollLeft(xHandleEl, 0)",
          "6680:     } else {",
          "",
          "[Removed Lines]",
          "6677:     const xHandleEl = $xeTable.$refs.refScrollXHandleElem",
          "",
          "[Added Lines]",
          "6713:     const xHandleEl = $xeTable.$refs.refScrollXHandleElem as HTMLDivElement",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6682:       setScrollLeft(tableHeaderElem, 0)",
          "6683:       setScrollLeft(tableFooterElem, 0)",
          "6684:     }",
          "6686:     if (yHandleEl) {",
          "6687:       setScrollTop(yHandleEl, 0)",
          "6688:     } else {",
          "",
          "[Removed Lines]",
          "6685:     const yHandleEl = $xeTable.$refs.refScrollYHandleElem",
          "",
          "[Added Lines]",
          "6721:     const yHandleEl = $xeTable.$refs.refScrollYHandleElem as HTMLDivElement",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:       $xeTabs(): (VxeTabsConstructor & VxeTabsPrivateMethods) | null",
          "416:     }),",
          "417:     tableId () {",
          "418:       const { id } = this",
          "419:       if (id) {",
          "420:         if (XEUtils.isFunction(id)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:       return this.computeTableId",
          "419:     },",
          "420:     computeTableId () {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "904:     if (process.env.VUE_APP_VXE_ENV === 'development') {",
          "905:       const customOpts = this.customOpts",
          "908:       }",
          "909:       if (this.treeConfig && this.checkboxOpts.range) {",
          "910:         errLog('vxe.error.noTree', ['checkbox-config.range'])",
          "",
          "[Removed Lines]",
          "906:       if (!this.id && this.customConfig && (customOpts.storage === true || (customOpts.storage && customOpts.storage.resizable) || (customOpts.storage && customOpts.storage.visible))) {",
          "907:         errLog('vxe.error.reqProp', ['id'])",
          "",
          "[Added Lines]",
          "909:       if (!this.id) {",
          "910:         if ((this.customConfig ? isEnableConf(customOpts) : customOpts.enabled) && customOpts.storage) {",
          "911:           errLog('vxe.error.reqProp', ['id'])",
          "912:         }",
          "",
          "---------------"
        ],
        "packages/ui/index.ts||packages/ui/index.ts": [
          "File: packages/ui/index.ts -> packages/ui/index.ts"
        ]
      }
    },
    {
      "candidate_hash": "3520ee15f3a1349194dab367edc85f99d29511e8",
      "candidate_info": {
        "commit_hash": "3520ee15f3a1349194dab367edc85f99d29511e8",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/3520ee15f3a1349194dab367edc85f99d29511e8",
        "files": [
          "package.json",
          "packages/table/src/body.ts",
          "packages/table/src/methods.ts"
        ],
        "message": "releases 3.11.8",
        "before_after_code_files": [
          "packages/table/src/body.ts||packages/table/src/body.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/body.ts||packages/table/src/body.ts": [
          "File: packages/table/src/body.ts -> packages/table/src/body.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "668:                   class: 'vxe-table--cell-main-area-btn',",
          "669:                   on: {",
          "670:                     mousedown (evnt: any) {",
          "672:                     }",
          "673:                   }",
          "674:                 })",
          "",
          "[Removed Lines]",
          "671:                       $xetable.triggerCellExtendMousedownEvent(evnt, { $table: $xetable, fixed: fixedType, type: renderType })",
          "",
          "[Added Lines]",
          "671:                       if ($xetable.triggerCellAreaExtendMousedownEvent) {",
          "672:                         $xetable.triggerCellAreaExtendMousedownEvent(evnt, { $table: $xetable, fixed: fixedType, type: renderType })",
          "673:                       }",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts"
        ]
      }
    },
    {
      "candidate_hash": "eb70864f85455b5e9b6008e99803a35f9b6a4ce9",
      "candidate_info": {
        "commit_hash": "eb70864f85455b5e9b6008e99803a35f9b6a4ce9",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/eb70864f85455b5e9b6008e99803a35f9b6a4ce9",
        "files": [
          "README.md",
          "package.json",
          "packages/export/src/mixin.js",
          "packages/keyboard/src/mixin.js",
          "packages/table/src/methods.js",
          "packages/validator/src/mixin.js",
          "types/v-x-e-table/index.d.ts"
        ],
        "message": "\u4fee\u590d\u6811\u6e32\u67d3\u95ee\u9898",
        "before_after_code_files": [
          "packages/export/src/mixin.js||packages/export/src/mixin.js",
          "packages/keyboard/src/mixin.js||packages/keyboard/src/mixin.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/validator/src/mixin.js||packages/validator/src/mixin.js",
          "types/v-x-e-table/index.d.ts||types/v-x-e-table/index.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/export/src/mixin.js||packages/export/src/mixin.js": [
          "File: packages/export/src/mixin.js -> packages/export/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: function getLabelData ($xetable, opts, columns, datas) {",
          "80:   const { isAllExpand, mode } = opts",
          "81:   const { treeConfig, treeOpts, radioOpts, checkboxOpts, columnOpts } = $xetable",
          "82:   if (!htmlCellElem) {",
          "83:     htmlCellElem = document.createElement('div')",
          "84:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:   const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         expandMaps.set(row, 1)",
          "150:         rest.push(Object.assign(item, row))",
          "151:       }",
          "153:     return rest",
          "154:   }",
          "155:   return datas.map((row, $rowIndex) => {",
          "",
          "[Removed Lines]",
          "152:     }, treeOpts)",
          "",
          "[Added Lines]",
          "153:     }, { children: childrenField })",
          "",
          "---------------"
        ],
        "packages/keyboard/src/mixin.js||packages/keyboard/src/mixin.js": [
          "File: packages/keyboard/src/mixin.js -> packages/keyboard/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     moveCurrentRow (isUpArrow, isDwArrow, evnt) {",
          "114:       const { currentRow, treeConfig, treeOpts, afterFullData } = this",
          "115:       let targetRow",
          "116:       evnt.preventDefault()",
          "117:       if (currentRow) {",
          "118:         if (treeConfig) {",
          "120:           if (isUpArrow && index > 0) {",
          "121:             targetRow = items[index - 1]",
          "122:           } else if (isDwArrow && index < items.length - 1) {",
          "",
          "[Removed Lines]",
          "119:           const { index, items } = XEUtils.findTree(afterFullData, item => item === currentRow, treeOpts)",
          "",
          "[Added Lines]",
          "115:       const childrenField = treeOpts.children || treeOpts.childrenField",
          "120:           const { index, items } = XEUtils.findTree(afterFullData, item => item === currentRow, { children: childrenField })",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:     fullAllDataRowIdData = this.fullAllDataRowIdData = {}",
          "624:     fullAllDataRowMap.clear()",
          "625:     if (treeConfig) {",
          "627:     } else {",
          "628:       tableFullData.forEach(handleCache)",
          "629:     }",
          "",
          "[Removed Lines]",
          "626:       XEUtils.eachTree(tableFullTreeData, handleCache, treeOpts)",
          "",
          "[Added Lines]",
          "626:       XEUtils.eachTree(tableFullTreeData, handleCache, { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "646:     }",
          "648:     if (treeConfig && !treeOpts.transform) {",
          "650:     } else {",
          "651:       sourceData.forEach(handleSourceRow)",
          "652:     }",
          "",
          "[Removed Lines]",
          "649:       XEUtils.eachTree(sourceData, handleSourceRow, treeOpts)",
          "",
          "[Added Lines]",
          "649:       const childrenField = treeOpts.children || treeOpts.childrenField",
          "650:       XEUtils.eachTree(sourceData, handleSourceRow, { children: treeOpts.transform ? treeOpts.mapChildrenField : childrenField })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "661:     return this.createData(childRecords).then((rows) => {",
          "662:       if (keepSource) {",
          "663:         const rowid = getRowid(this, row)",
          "665:         if (matchObj) {",
          "666:           matchObj.item[childrenField] = XEUtils.clone(rows, true)",
          "667:         }",
          "",
          "[Removed Lines]",
          "664:         const matchObj = XEUtils.findTree(tableSourceData, (item) => rowid === getRowid(this, item), treeOpts)",
          "",
          "[Added Lines]",
          "665:         const matchObj = XEUtils.findTree(tableSourceData, (item) => rowid === getRowid(this, item), { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "673:         fullDataRowMap.set(childRow, rest)",
          "674:         fullAllDataRowIdData[rowid] = rest",
          "675:         fullAllDataRowMap.set(childRow, rest)",
          "677:       row[childrenField] = rows",
          "678:       if (transform) {",
          "679:         row[mapChildrenField] = rows",
          "",
          "[Removed Lines]",
          "676:       }, treeOpts)",
          "",
          "[Added Lines]",
          "677:       }, { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2520:         const operArrow = isLeftArrow || isUpArrow || isRightArrow || isDwArrow",
          "2521:         const operCtxMenu = isCtxMenu && ctxMenuStore.visible && (isEnter || isSpacebar || operArrow)",
          "2522:         const isEditStatus = isEnableConf(editConfig) && actived.column && actived.row",
          "2523:         let params",
          "2524:         if (filterStore.visible) {",
          "2525:           if (isEsc) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2524:         const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2592:               }",
          "2593:             } else if (treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow) {",
          "2596:               if (childrens && childrens.length) {",
          "2597:                 evnt.preventDefault()",
          "2598:                 const targetRow = childrens[0]",
          "",
          "[Removed Lines]",
          "2595:               const childrens = currentRow[treeOpts.children]",
          "",
          "[Added Lines]",
          "2597:               const childrens = currentRow[childrenField]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2654:               }",
          "2655:             } else if (isBack && keyboardOpts.isArrow && treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow) {",
          "2658:               if (parentRow) {",
          "2659:                 evnt.preventDefault()",
          "2660:                 params = { $table: this, row: parentRow }",
          "",
          "[Removed Lines]",
          "2657:               const { parent: parentRow } = XEUtils.findTree(this.afterFullData, item => item === currentRow, treeOpts)",
          "",
          "[Added Lines]",
          "2659:               const { parent: parentRow } = XEUtils.findTree(this.afterFullData, item => item === currentRow, { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2981:   handleSelectRow ({ row }, value, isForce) {",
          "2982:     const { selectCheckboxRows, afterFullData, treeConfig, treeOpts, treeIndeterminates, checkboxOpts } = this",
          "2983:     const { checkField, checkStrictly, checkMethod } = checkboxOpts",
          "2984:     if (checkField) {",
          "2985:       if (treeConfig && !checkStrictly) {",
          "2986:         if (value === -1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2986:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2996:               XEUtils.remove(treeIndeterminates, half => this.eqRow(half, item))",
          "2997:               this.handleCheckboxReserveRow(row, value)",
          "2998:             }",
          "3000:         }",
          "3003:         if (matchObj && matchObj.parent) {",
          "3004:           let parentStatus",
          "3005:           const vItems = !isForce && checkMethod ? matchObj.items.filter((item) => checkMethod({ row: item })) : matchObj.items",
          "",
          "[Removed Lines]",
          "2999:           }, treeOpts)",
          "3002:         const matchObj = XEUtils.findTree(afterFullData, item => this.eqRow(item, row), treeOpts)",
          "",
          "[Added Lines]",
          "3002:           }, { children: childrenField })",
          "3005:         const matchObj = XEUtils.findTree(afterFullData, item => this.eqRow(item, row), { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3037:               XEUtils.remove(treeIndeterminates, half => this.eqRow(half, item))",
          "3038:               this.handleCheckboxReserveRow(row, value)",
          "3039:             }",
          "3041:         }",
          "3044:         if (matchObj && matchObj.parent) {",
          "3045:           let parentStatus",
          "3046:           const vItems = !isForce && checkMethod ? matchObj.items.filter((item) => checkMethod({ row: item })) : matchObj.items",
          "",
          "[Removed Lines]",
          "3040:           }, treeOpts)",
          "3043:         const matchObj = XEUtils.findTree(afterFullData, item => this.eqRow(item, row), treeOpts)",
          "",
          "[Added Lines]",
          "3043:           }, { children: childrenField })",
          "3046:         const matchObj = XEUtils.findTree(afterFullData, item => this.eqRow(item, row), { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3122:     const { afterFullData, treeConfig, treeOpts, selectCheckboxRows, checkboxReserveRowMap, checkboxOpts } = this",
          "3123:     const { checkField, reserve, checkStrictly, checkMethod } = checkboxOpts",
          "3124:     const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField",
          "3125:     let selectRows = []",
          "3126:     const beforeSelection = treeConfig ? [] : selectCheckboxRows.filter(row => this.findRowIndexOf(afterFullData, row) === -1)",
          "3127:     if (checkStrictly) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3128:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3148:         if (treeConfig) {",
          "3150:         } else {",
          "3151:           afterFullData.forEach(checkValFn)",
          "3152:         }",
          "",
          "[Removed Lines]",
          "3149:           XEUtils.eachTree(afterFullData, checkValFn, treeOpts)",
          "",
          "[Added Lines]",
          "3153:           XEUtils.eachTree(afterFullData, checkValFn, { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3165:               if (isForce || (!checkMethod || checkMethod({ row }))) {",
          "3166:                 selectRows.push(row)",
          "3167:               }",
          "3169:           } else {",
          "",
          "[Removed Lines]",
          "3168:             }, treeOpts)",
          "",
          "[Added Lines]",
          "3172:             }, { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3176:                 if (checkMethod({ row }) ? 0 : this.findRowIndexOf(selectCheckboxRows, row) > -1) {",
          "3177:                   selectRows.push(row)",
          "3178:                 }",
          "3180:             }",
          "3181:           }",
          "3182:         } else {",
          "",
          "[Removed Lines]",
          "3179:               }, treeOpts)",
          "",
          "[Added Lines]",
          "3183:               }, { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3333:   getRadioReserveRecord (isFull) {",
          "3334:     const { fullDataRowIdData, radioReserveRow, radioOpts, afterFullData, treeConfig, treeOpts } = this",
          "3335:     if (radioOpts.reserve && radioReserveRow) {",
          "3336:       const rowid = getRowid(this, radioReserveRow)",
          "3337:       if (isFull) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3339:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3341:       } else {",
          "3342:         const rowkey = getRowkey(this)",
          "3343:         if (treeConfig) {",
          "3345:           if (matchObj) {",
          "3346:             return radioReserveRow",
          "3347:           }",
          "",
          "[Removed Lines]",
          "3344:           const matchObj = XEUtils.findTree(afterFullData, row => rowid === XEUtils.get(row, rowkey), treeOpts)",
          "",
          "[Added Lines]",
          "3349:           const matchObj = XEUtils.findTree(afterFullData, row => rowid === XEUtils.get(row, rowkey), { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3370:   getCheckboxReserveRecords (isFull) {",
          "3371:     const { fullDataRowIdData, afterFullData, checkboxReserveRowMap, checkboxOpts, treeConfig, treeOpts } = this",
          "3372:     const reserveSelection = []",
          "3373:     if (checkboxOpts.reserve) {",
          "3374:       const afterFullIdMaps = {}",
          "3375:       if (treeConfig) {",
          "3376:         XEUtils.eachTree(afterFullData, row => {",
          "3377:           afterFullIdMaps[getRowid(this, row)] = 1",
          "3379:       } else {",
          "3380:         afterFullData.forEach(row => {",
          "3381:           afterFullIdMaps[getRowid(this, row)] = 1",
          "",
          "[Removed Lines]",
          "3378:         }, treeOpts)",
          "",
          "[Added Lines]",
          "3377:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "3384:         }, { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3433:   clearCheckboxRow () {",
          "3434:     const { tableFullData, treeConfig, treeOpts, checkboxOpts } = this",
          "3435:     const { checkField, reserve } = checkboxOpts",
          "3436:     const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField",
          "3437:     if (checkField) {",
          "3438:       const handleClearChecked = (item) => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3442:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3442:         XEUtils.set(item, checkField, false)",
          "3443:       }",
          "3444:       if (treeConfig) {",
          "3446:       } else {",
          "3447:         tableFullData.forEach(handleClearChecked)",
          "3448:       }",
          "",
          "[Removed Lines]",
          "3445:         XEUtils.eachTree(tableFullData, handleClearChecked, treeOpts)",
          "",
          "[Added Lines]",
          "3452:         XEUtils.eachTree(tableFullData, handleClearChecked, { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3568:   getRadioRecord (isFull) {",
          "3569:     const { treeConfig, treeOpts, selectRow, fullDataRowIdData, afterFullData } = this",
          "3570:     if (selectRow) {",
          "3571:       const rowid = getRowid(this, selectRow)",
          "3572:       if (isFull) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3577:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3576:       } else {",
          "3577:         if (treeConfig) {",
          "3578:           const rowkey = getRowkey(this)",
          "3580:           if (matchObj) {",
          "3581:             return selectRow",
          "3582:           }",
          "",
          "[Removed Lines]",
          "3579:           const matchObj = XEUtils.findTree(afterFullData, row => rowid === XEUtils.get(row, rowkey), treeOpts)",
          "",
          "[Added Lines]",
          "3587:           const matchObj = XEUtils.findTree(afterFullData, row => rowid === XEUtils.get(row, rowkey), { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4022:   setAllRowExpand (expanded) {",
          "4023:     const { treeConfig, treeOpts, tableFullData, tableFullTreeData } = this",
          "4024:     let expandedRows = []",
          "4025:     if (treeConfig) {",
          "4026:       XEUtils.eachTree(tableFullTreeData, (row) => {",
          "4027:         expandedRows.push(row)",
          "4029:     } else {",
          "4030:       expandedRows = tableFullData",
          "4031:     }",
          "",
          "[Removed Lines]",
          "4028:       }, treeOpts)",
          "",
          "[Added Lines]",
          "4032:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "4037:       }, { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4229:     const { treeConfig, treeOpts, tableFullData } = this",
          "4230:     if (treeConfig) {",
          "4231:       const { expandAll, expandRowKeys } = treeOpts",
          "4232:       if (expandAll) {",
          "4233:         this.setAllTreeExpand(true)",
          "4234:       } else if (expandRowKeys) {",
          "4235:         const defExpandeds = []",
          "4236:         const rowkey = getRowkey(this)",
          "4237:         expandRowKeys.forEach(rowid => {",
          "4239:           if (matchObj) {",
          "4240:             defExpandeds.push(matchObj.item)",
          "4241:           }",
          "",
          "[Removed Lines]",
          "4238:           const matchObj = XEUtils.findTree(tableFullData, item => rowid === XEUtils.get(item, rowkey), treeOpts)",
          "",
          "[Added Lines]",
          "4241:       const childrenField = treeOpts.children || treeOpts.childrenField",
          "4248:           const matchObj = XEUtils.findTree(tableFullData, item => rowid === XEUtils.get(item, rowkey), { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4297:       if (lazy || (rowChildren && rowChildren.length)) {",
          "4298:         expandeds.push(row)",
          "4299:       }",
          "4301:     return this.setTreeExpand(expandeds, expanded)",
          "4302:   },",
          "",
          "[Removed Lines]",
          "4300:     }, treeOpts)",
          "",
          "[Added Lines]",
          "4310:     }, { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4318:     if (accordion) {",
          "4319:       validRows = validRows.length ? [validRows[validRows.length - 1]] : []",
          "4322:       if (matchObj) {",
          "4323:         XEUtils.remove(treeExpandeds, item => matchObj.items.indexOf(item) > -1)",
          "4324:       }",
          "",
          "[Removed Lines]",
          "4321:       const matchObj = XEUtils.findTree(tableFullData, item => item === validRows[0], treeOpts)",
          "",
          "[Added Lines]",
          "4331:       const matchObj = XEUtils.findTree(tableFullData, item => item === validRows[0], { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4398:   clearTreeExpand () {",
          "4399:     const { treeOpts, treeExpandeds, tableFullData } = this",
          "4400:     const { transform, reserve } = treeOpts",
          "4401:     const isExists = treeExpandeds.length",
          "4402:     this.treeExpandeds = []",
          "4403:     if (reserve) {",
          "4405:     }",
          "4406:     return this.handleTableData().then(() => {",
          "4407:       if (transform) {",
          "",
          "[Removed Lines]",
          "4404:       XEUtils.eachTree(tableFullData, row => this.handleTreeExpandReserve(row, false), treeOpts)",
          "",
          "[Added Lines]",
          "4411:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "4415:       XEUtils.eachTree(tableFullData, row => this.handleTreeExpandReserve(row, false), { children: childrenField })",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4679:   scrollToTreeRow (row) {",
          "4680:     const { tableFullData, treeConfig, treeOpts } = this",
          "4681:     const rests = []",
          "4682:     if (treeConfig) {",
          "4684:       if (matchObj) {",
          "4685:         const nodes = matchObj.nodes",
          "4686:         nodes.forEach((row, index) => {",
          "",
          "[Removed Lines]",
          "4683:       const matchObj = XEUtils.findTree(tableFullData, item => item === row, treeOpts)",
          "",
          "[Added Lines]",
          "4692:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "4695:       const matchObj = XEUtils.findTree(tableFullData, item => item === row, { children: childrenField })",
          "",
          "---------------"
        ],
        "packages/validator/src/mixin.js||packages/validator/src/mixin.js": [
          "File: packages/validator/src/mixin.js -> packages/validator/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     beginValidate (rows, cb, isFull) {",
          "113:       const validRest = {}",
          "114:       const { editRules, afterFullData, treeConfig, treeOpts } = this",
          "115:       let vaildDatas",
          "116:       if (rows === true) {",
          "117:         vaildDatas = afterFullData",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:       const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:           }",
          "166:         }",
          "167:         if (treeConfig) {",
          "169:         } else {",
          "170:           vaildDatas.forEach(handleVaild)",
          "171:         }",
          "",
          "[Removed Lines]",
          "168:           XEUtils.eachTree(vaildDatas, handleVaild, treeOpts)",
          "",
          "[Added Lines]",
          "169:           XEUtils.eachTree(vaildDatas, handleVaild, { children: childrenField })",
          "",
          "---------------"
        ],
        "types/v-x-e-table/index.d.ts||types/v-x-e-table/index.d.ts": [
          "File: types/v-x-e-table/index.d.ts -> types/v-x-e-table/index.d.ts"
        ]
      }
    },
    {
      "candidate_hash": "b4f8d33e1b4cbcd87c2ff946635b27fb1f7e8927",
      "candidate_info": {
        "commit_hash": "b4f8d33e1b4cbcd87c2ff946635b27fb1f7e8927",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/b4f8d33e1b4cbcd87c2ff946635b27fb1f7e8927",
        "files": [
          "examples/views/table/advanced/Footer.vue",
          "packages/button/src/button.js",
          "packages/footer/src/footer.js",
          "packages/table/src/cell.js",
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "types/footer.d.ts",
          "types/table.d.ts"
        ],
        "message": "table \u589e\u52a0\u53c2\u6570 footer-data",
        "before_after_code_files": [
          "examples/views/table/advanced/Footer.vue||examples/views/table/advanced/Footer.vue",
          "packages/button/src/button.js||packages/button/src/button.js",
          "packages/footer/src/footer.js||packages/footer/src/footer.js",
          "packages/table/src/cell.js||packages/table/src/cell.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "types/footer.d.ts||types/footer.d.ts",
          "types/table.d.ts||types/table.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/table/advanced/Footer.vue||examples/views/table/advanced/Footer.vue": [
          "File: examples/views/table/advanced/Footer.vue -> examples/views/table/advanced/Footer.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:       highlight-hover-row",
          "13:       show-footer",
          "14:       max-height=\"400\"",
          "16:       :data=\"tableData1\">",
          "17:       <vxe-column type=\"seq\" width=\"60\"></vxe-column>",
          "18:       <vxe-column field=\"name\" title=\"Name\" sortable></vxe-column>",
          "",
          "[Removed Lines]",
          "15:       :footer-method=\"footerMethod1\"",
          "",
          "[Added Lines]",
          "15:       :footer-data=\"footerData1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:       <vxe-column field=\"amount\" title=\"Amount\"></vxe-column>",
          "22:     </vxe-table>",
          "31:     <p class=\"tip\">\u8fd8\u53ef\u4ee5\u914d\u5408 <table-api-link prop=\"footer-cell-class-name\"/> \u81ea\u5b9a\u4e49\u4e0d\u540c\u5217\u989c\u8272</p>",
          "33:     <vxe-table",
          "",
          "[Removed Lines]",
          "24:     <p class=\"demo-code\">{{ $t('app.body.button.showCode') }}</p>",
          "26:     <pre>",
          "27:       <pre-code class=\"xml\">{{ demoCodes[0] }}</pre-code>",
          "28:       <pre-code class=\"javascript\">{{ demoCodes[1] }}</pre-code>",
          "29:     </pre>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:       <vxe-column field=\"amount\" title=\"Amount\"></vxe-column>",
          "46:     </vxe-table>",
          "56:     <p class=\"tip\">\u8fd8\u53ef\u4ee5\u56fa\u5b9a\u5217</p>",
          "58:     <vxe-toolbar>",
          "",
          "[Removed Lines]",
          "48:     <p class=\"demo-code\">{{ $t('app.body.button.showCode') }}</p>",
          "50:     <pre>",
          "51:       <pre-code class=\"xml\">{{ demoCodes[2] }}</pre-code>",
          "52:       <pre-code class=\"javascript\">{{ demoCodes[3] }}</pre-code>",
          "53:       <pre-code class=\"css\">{{ demoCodes[4] }}</pre-code>",
          "54:     </pre>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "80:       <vxe-column field=\"date\" title=\"Date\" min-width=\"600\"></vxe-column>",
          "81:       <vxe-column field=\"amount\" title=\"Amount\" width=\"200\" fixed=\"right\"></vxe-column>",
          "82:     </vxe-table>",
          "91:   </div>",
          "92: </template>",
          "",
          "[Removed Lines]",
          "84:     <p class=\"demo-code\">{{ $t('app.body.button.showCode') }}</p>",
          "86:     <pre>",
          "87:       <pre-code class=\"xml\">{{ demoCodes[5] }}</pre-code>",
          "88:       <pre-code class=\"javascript\">{{ demoCodes[6] }}</pre-code>",
          "89:       <pre-code class=\"javascript\">{{ demoCodes[7] }}</pre-code>",
          "90:     </pre>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106:         { id: 10006, name: 'Test6', role: 'Designer', sex: '0', age: 21, amount: 998, address: 'test abc' }",
          "107:       ],",
          "108:       footerData1: [",
          "110:       ],",
          "111:       tableData2: [",
          "112:         { id: 10001, name: 'Test1', role: 'Develop', sex: '0', age: 28, amount: 888, address: 'test abc' },",
          "",
          "[Removed Lines]",
          "109:         ['\u5408\u8ba1', '2', '44', '67', '-']",
          "",
          "[Added Lines]",
          "86:         { name: 11, sex: 44 }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "127:         { id: 10006, name: 'Test6', role: 'Designer', sex: '0', age: 21, amount: 998, address: 'test abc' },",
          "128:         { id: 10007, name: 'Test7', role: 'Test', sex: '1', age: 29, amount: 2000, address: 'test abc' },",
          "129:         { id: 10008, name: 'Test8', role: 'Develop', sex: '1', age: 35, amount: 999, address: 'test abc' }",
          "389:       ]",
          "390:     }",
          "391:   },",
          "",
          "[Removed Lines]",
          "130:       ],",
          "131:       demoCodes: [",
          "132:         `",
          "133:         <vxe-table",
          "134:           class=\"mytable-footer\"",
          "135:           border",
          "136:           highlight-hover-row",
          "137:           show-footer",
          "138:           max-height=\"400\"",
          "139:           :footer-method=\"footerMethod1\"",
          "140:           :data=\"tableData1\">",
          "141:           <vxe-column type=\"seq\" width=\"60\"></vxe-column>",
          "142:           <vxe-column field=\"name\" title=\"Name\" sortable></vxe-column>",
          "143:           <vxe-column field=\"sex\" title=\"Sex\"></vxe-column>",
          "144:           <vxe-column field=\"age\" title=\"Age\"></vxe-column>",
          "145:           <vxe-column field=\"amount\" title=\"Amount\"></vxe-column>",
          "146:         </vxe-table>",
          "147:         `,",
          "148:         `",
          "149:         export default {",
          "150:           data () {",
          "151:             return {",
          "152:               tableData1: [",
          "153:                 { id: 10001, name: 'Test1', role: 'Develop', sex: '0', age: 28, amount: 888, address: 'test abc' },",
          "154:                 { id: 10002, name: 'Test2', role: 'Test', sex: '1', age: 22, amount: 666, address: 'Guangzhou' },",
          "155:                 { id: 10003, name: 'Test3', role: 'PM', sex: '1', age: 32, amount: 89, address: 'Shanghai' },",
          "156:                 { id: 10004, name: 'Test4', role: 'Designer', sex: '0', age: 23, amount: 1000, address: 'test abc' },",
          "157:                 { id: 10005, name: 'Test5', role: 'Develop', sex: '0', age: 30, amount: 999, address: 'Shanghai' },",
          "158:                 { id: 10006, name: 'Test6', role: 'Designer', sex: '0', age: 21, amount: 998, address: 'test abc' }",
          "159:               ],",
          "160:               footerData1: [",
          "161:                 ['\u5408\u8ba1', '2', '44', '67', '-']",
          "162:               ]",
          "163:             }",
          "164:           },",
          "165:           methods: {",
          "166:             footerMethod1 () {",
          "168:               return this.footerData1",
          "169:             }",
          "170:           }",
          "171:         }",
          "172:         `,",
          "173:         `",
          "174:         <vxe-table",
          "175:           class=\"mytable-footer\"",
          "176:           border",
          "177:           show-footer",
          "178:           height=\"400\"",
          "179:           :footer-method=\"footerMethod\"",
          "180:           :footer-cell-class-name=\"footerCellClassName2\"",
          "181:           :data=\"tableData2\">",
          "182:           <vxe-column type=\"seq\" width=\"60\"></vxe-column>",
          "183:           <vxe-column field=\"name\" title=\"Name\" sortable></vxe-column>",
          "184:           <vxe-column field=\"sex\" title=\"Sex\"></vxe-column>",
          "185:           <vxe-column field=\"age\" title=\"Age\"></vxe-column>",
          "186:           <vxe-column field=\"amount\" title=\"Amount\"></vxe-column>",
          "187:         </vxe-table>",
          "188:         `,",
          "189:         `",
          "190:         export default {",
          "191:           data () {",
          "192:             return {",
          "193:               tableData2: [",
          "194:                 { id: 10001, name: 'Test1', role: 'Develop', sex: '0', age: 28, amount: 888, address: 'test abc' },",
          "195:                 { id: 10002, name: 'Test2', role: 'Test', sex: '1', age: 22, amount: 666, address: 'Guangzhou' },",
          "196:                 { id: 10003, name: 'Test3', role: 'PM', sex: '1', age: 32, amount: 89, address: 'Shanghai' },",
          "197:                 { id: 10004, name: 'Test4', role: 'Designer', sex: '0', age: 23, amount: 1000, address: 'test abc' },",
          "198:                 { id: 10005, name: 'Test5', role: 'Develop', sex: '0', age: 30, amount: 999, address: 'Shanghai' },",
          "199:                 { id: 10006, name: 'Test6', role: 'Designer', sex: '0', age: 21, amount: 998, address: 'test abc' },",
          "200:                 { id: 10007, name: 'Test7', role: 'Test', sex: '1', age: 29, amount: 2000, address: 'test abc' },",
          "201:                 { id: 10008, name: 'Test8', role: 'Develop', sex: '1', age: 35, amount: 999, address: 'test abc' }",
          "202:               ]",
          "203:             }",
          "204:           },",
          "205:           methods: {",
          "206:             footerCellClassName2 ({ $rowIndex, column, columnIndex }) {",
          "207:               if (columnIndex === 0) {",
          "208:                 if ($rowIndex === 0) {",
          "209:                   return 'col-blue'",
          "210:                 } else {",
          "211:                   return 'col-red'",
          "212:                 }",
          "213:               }",
          "214:             },",
          "215:             meanNum (list, field) {",
          "216:               let count = 0",
          "217:               list.forEach(item => {",
          "218:                 count += Number(item[field])",
          "219:               })",
          "220:               return count / list.length",
          "221:             },",
          "222:             sumNum (list, field) {",
          "223:               let count = 0",
          "224:               list.forEach(item => {",
          "225:                 count += Number(item[field])",
          "226:               })",
          "227:               return count",
          "228:             },",
          "229:             footerMethod ({ columns, data }) {",
          "230:               const means = []",
          "231:               const sums = []",
          "232:               const others = []",
          "233:               columns.forEach((column, columnIndex) => {",
          "234:                 if (columnIndex === 0) {",
          "235:                   means.push('\u5e73\u5747')",
          "236:                   sums.push('\u548c\u503c')",
          "237:                   others.push('\u5176\u4ed6')",
          "238:                 } else {",
          "239:                   let meanCell = null",
          "240:                   let sumCell = null",
          "241:                   let otherCell = '-'",
          "242:                   switch (column.property) {",
          "243:                     case 'age':",
          "244:                     case 'amount':",
          "245:                       meanCell = this.meanNum(data, column.property)",
          "246:                       sumCell = this.sumNum(data, column.property)",
          "247:                       break",
          "248:                     case 'sex':",
          "249:                       otherCell = '\u65e0'",
          "250:                       break",
          "251:                   }",
          "252:                   means.push(meanCell)",
          "253:                   sums.push(sumCell)",
          "254:                   others.push(otherCell)",
          "255:                 }",
          "256:               })",
          "258:               return [means, sums, others]",
          "259:             }",
          "260:           }",
          "261:         }",
          "262:         `,",
          "263:         `",
          "264:         .mytable-footer .col-blue {",
          "265:           background-color: #2db7f5;",
          "266:           color: #fff;",
          "267:         }",
          "268:         .mytable-footer .col-red {",
          "269:           background-color: red;",
          "270:           color: #fff;",
          "271:         }",
          "272:         `,",
          "273:         `",
          "274:         <vxe-toolbar>",
          "275:           <template #buttons>",
          "276:             <vxe-button @click=\"showHeader = !showHeader\">\u663e\u793a/\u9690\u85cf\u8868\u5934</vxe-button>",
          "277:             <vxe-button @click=\"showFooter = !showFooter\">\u663e\u793a/\u9690\u85cf\u8868\u5c3e</vxe-button>",
          "278:           </template>",
          "279:         </vxe-toolbar>",
          "281:         <vxe-table",
          "282:           class=\"mytable-footer\"",
          "283:           border",
          "284:           height=\"400\"",
          "285:           show-overflow",
          "286:           :show-header=\"showHeader\"",
          "287:           :show-footer=\"showFooter\"",
          "288:           :footer-method=\"footerMethod\"",
          "289:           :footer-cell-class-name=\"footerCellClassName3\"",
          "290:           :data=\"tableData3\">",
          "291:           <vxe-column type=\"seq\" width=\"60\" fixed=\"left\"></vxe-column>",
          "292:           <vxe-colgroup title=\"\u57fa\u672c\u4fe1\u606f\">",
          "293:             <vxe-column field=\"name\" title=\"Name\" min-width=\"600\" sortable></vxe-column>",
          "294:             <vxe-column field=\"age\" title=\"Age\" min-width=\"600\"></vxe-column>",
          "295:           </vxe-colgroup>",
          "296:           <vxe-column field=\"date\" title=\"Date\" min-width=\"600\"></vxe-column>",
          "297:           <vxe-column field=\"rate\" title=\"Rate\" width=\"200\" fixed=\"right\"></vxe-column>",
          "298:         </vxe-table>",
          "299:         `,",
          "300:         `",
          "301:         export default {",
          "302:           data () {",
          "303:             return {",
          "304:               showFooter: true,",
          "305:               tableData3: [",
          "306:                 { id: 10001, name: 'Test1', role: 'Develop', sex: '0', age: 28, amount: 888, address: 'test abc' },",
          "307:                 { id: 10002, name: 'Test2', role: 'Test', sex: '1', age: 22, amount: 666, address: 'Guangzhou' },",
          "308:                 { id: 10003, name: 'Test3', role: 'PM', sex: '1', age: 32, amount: 89, address: 'Shanghai' },",
          "309:                 { id: 10004, name: 'Test4', role: 'Designer', sex: '0', age: 23, amount: 1000, address: 'test abc' },",
          "310:                 { id: 10005, name: 'Test5', role: 'Develop', sex: '0', age: 30, amount: 999, address: 'Shanghai' },",
          "311:                 { id: 10006, name: 'Test6', role: 'Designer', sex: '0', age: 21, amount: 998, address: 'test abc' },",
          "312:                 { id: 10007, name: 'Test7', role: 'Test', sex: '1', age: 29, amount: 2000, address: 'test abc' },",
          "313:                 { id: 10008, name: 'Test8', role: 'Develop', sex: '1', age: 35, amount: 999, address: 'test abc' }",
          "314:               ]",
          "315:             }",
          "316:           },",
          "317:           methods: {",
          "318:             footerCellClassName3 ({ $rowIndex, column }) {",
          "319:               if (column.type === 'seq') {",
          "320:                 if ($rowIndex === 0) {",
          "321:                   return 'col-blue'",
          "322:                 } else {",
          "323:                   return 'col-red'",
          "324:                 }",
          "325:               } else if (column.property === 'age') {",
          "326:                 if ($rowIndex === 1) {",
          "327:                   return 'col-red'",
          "328:                 }",
          "329:               }",
          "330:             },",
          "331:             meanNum (list, field) {",
          "332:               let count = 0",
          "333:               list.forEach(item => {",
          "334:                 count += Number(item[field])",
          "335:               })",
          "336:               return count / list.length",
          "337:             },",
          "338:             sumNum (list, field) {",
          "339:               let count = 0",
          "340:               list.forEach(item => {",
          "341:                 count += Number(item[field])",
          "342:               })",
          "343:               return count",
          "344:             },",
          "345:             footerMethod ({ columns, data }) {",
          "346:               const means = []",
          "347:               const sums = []",
          "348:               const others = []",
          "349:               columns.forEach((column, columnIndex) => {",
          "350:                 if (columnIndex === 0) {",
          "351:                   means.push('\u5e73\u5747')",
          "352:                   sums.push('\u548c\u503c')",
          "353:                   others.push('\u5176\u4ed6')",
          "354:                 } else {",
          "355:                   let meanCell = null",
          "356:                   let sumCell = null",
          "357:                   let otherCell = '-'",
          "358:                   switch (column.property) {",
          "359:                     case 'age':",
          "360:                     case 'amount':",
          "361:                       meanCell = this.meanNum(data, column.property)",
          "362:                       sumCell = this.sumNum(data, column.property)",
          "363:                       break",
          "364:                     case 'sex':",
          "365:                       otherCell = '\u65e0'",
          "366:                       break",
          "367:                   }",
          "368:                   means.push(meanCell)",
          "369:                   sums.push(sumCell)",
          "370:                   others.push(otherCell)",
          "371:                 }",
          "372:               })",
          "374:               return [means, sums, others]",
          "375:             }",
          "376:           }",
          "377:         }",
          "378:         `,",
          "379:         `",
          "380:         .mytable-footer .col-blue {",
          "381:           background-color: #2db7f5;",
          "382:           color: #fff;",
          "383:         }",
          "384:         .mytable-footer .col-red {",
          "385:           background-color: red;",
          "386:           color: #fff;",
          "387:         }",
          "388:         `",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/button/src/button.js||packages/button/src/button.js": [
          "File: packages/button/src/button.js -> packages/button/src/button.js"
        ],
        "packages/footer/src/footer.js||packages/footer/src/footer.js": [
          "File: packages/footer/src/footer.js -> packages/footer/src/footer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:             const columnIndex = $xetable.getColumnIndex(column)",
          "153:             const _columnIndex = $xetable.getVTColumnIndex(column)",
          "154:             const itemIndex = _columnIndex",
          "157:             if (scrollXLoad && !hasEllipsis) {",
          "158:               showEllipsis = hasEllipsis = true",
          "",
          "[Removed Lines]",
          "155:             const params = { $table: $xetable, $grid: $xetable.xegrid, _rowIndex, $rowIndex, column, columnIndex, $columnIndex, _columnIndex, itemIndex, items: list, fixed: fixedType, type: cellType, data: footerTableData }",
          "",
          "[Added Lines]",
          "155:             const params = {",
          "156:               $table: $xetable,",
          "157:               $grid: $xetable.xegrid,",
          "158:               row: list,",
          "159:               _rowIndex,",
          "160:               $rowIndex,",
          "161:               column,",
          "162:               columnIndex,",
          "163:               $columnIndex,",
          "164:               _columnIndex,",
          "165:               itemIndex,",
          "166:               items: list,",
          "167:               fixed: fixedType,",
          "168:               type: cellType,",
          "169:               data: footerTableData",
          "170:             }",
          "",
          "---------------"
        ],
        "packages/table/src/cell.js||packages/table/src/cell.js": [
          "File: packages/table/src/cell.js -> packages/table/src/cell.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: }",
          "90: function getFooterContent (h, params) {",
          "92:   const { slots, editRender, cellRender } = column",
          "93:   const renderOpts = editRender || cellRender",
          "94:   if (slots && slots.footer) {",
          "",
          "[Removed Lines]",
          "91:   const { $table, column, _columnIndex, items } = params",
          "",
          "[Added Lines]",
          "91:   const { $table, column, _columnIndex, row, items } = params",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:       return getSlotVNs(compConf.renderFooter.call($table, h, renderOpts, params))",
          "101:     }",
          "102:   }",
          "104: }",
          "106: function getDefaultCellLabel (params) {",
          "",
          "[Removed Lines]",
          "103:   return [UtilTools.formatText(items[_columnIndex], 1)]",
          "",
          "[Added Lines]",
          "104:   if (XEUtils.isArray(items)) {",
          "105:     return [UtilTools.formatText(items[_columnIndex], 1)]",
          "106:   }",
          "107:   return [UtilTools.formatText(XEUtils.get(row, column.field), 1)]",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4356:     return !!rowExpandedMaps[rowid]",
          "4357:   },",
          "4358:   isExpandByRow (row) {",
          "4363:     return this.isRowExpandByRow(row)",
          "4364:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4359:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "4360:       warnLog('vxe.error.delFunc', ['isExpandByRow', 'isRowExpandByRow'])",
          "4361:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5033:   updateFooter () {",
          "5038:     return this.$nextTick()",
          "5039:   },",
          "",
          "[Removed Lines]",
          "5034:     const { showFooter, visibleColumn, footerMethod } = this",
          "5035:     if (showFooter && footerMethod) {",
          "5036:       this.footerTableData = visibleColumn.length ? footerMethod({ columns: visibleColumn, data: this.afterFullData, $table: this, $grid: this.$xegrid }) : []",
          "5037:     }",
          "",
          "[Added Lines]",
          "5034:     const { showFooter, visibleColumn, footerData, footerMethod } = this",
          "5035:     let footData = []",
          "5036:     if (showFooter && footerData && footerData.length) {",
          "5037:       footData = footerData.slice(0)",
          "5038:     } else if (showFooter && footerMethod) {",
          "5039:       footData = visibleColumn.length ? footerMethod({ columns: visibleColumn, data: this.afterFullData, $table: this, $grid: this.$xegrid }) : []",
          "5040:     }",
          "5041:     this.footerTableData = footData",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     highlightCell: Boolean,",
          "136:     showFooter: Boolean,",
          "138:     footerMethod: Function,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:     footerData: Array,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "780:       if (treeConfig && (treeOpts.showLine || treeOpts.line) && (!(this.rowKey || rowOpts.useKey) || !showOverflow)) {",
          "781:         warnLog('vxe.error.reqProp', ['row-config.useKey | show-overflow'])",
          "782:       }",
          "785:       }",
          "786:       if (treeConfig && this.stripe) {",
          "787:         warnLog('vxe.error.noTree', ['stripe'])",
          "",
          "[Removed Lines]",
          "783:       if (this.showFooter && !this.footerMethod) {",
          "784:         warnLog('vxe.error.reqProp', ['footer-method'])",
          "",
          "[Added Lines]",
          "785:       if (this.showFooter && !(this.footerMethod || this.footerData)) {",
          "786:         warnLog('vxe.error.reqProp', ['footer-data | footer-method'])",
          "",
          "---------------"
        ],
        "types/footer.d.ts||types/footer.d.ts": [
          "File: types/footer.d.ts -> types/footer.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: export interface ColumnFooterRenderParams extends TableRenderParams {",
          "",
          "[Removed Lines]",
          "21:     column: ColumnInfo;",
          "25:     columnIndex: number;",
          "29:     _columnIndex: number;",
          "33:     $columnIndex: number;",
          "37:     $rowIndex: number;",
          "41:     items: any[];",
          "45:     data: any[][];",
          "46:   }",
          "",
          "[Added Lines]",
          "21:   column: ColumnInfo;",
          "25:   columnIndex: number;",
          "29:   _columnIndex: number;",
          "33:   $columnIndex: number;",
          "34:   row: any",
          "38:   $rowIndex: number;",
          "42:   items: any[];",
          "46:   data: any[][];",
          "47: }",
          "",
          "---------------"
        ],
        "types/table.d.ts||types/table.d.ts": [
          "File: types/table.d.ts -> types/table.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:   showFooter?: boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:   footerData: any[]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1199:   highlightCell?: boolean;",
          "1200:   showFooter?: boolean;",
          "1201:   footerMethod?: typeof TableFooterMethod;",
          "1202:   rowClassName?: string | ((params: any) => any);",
          "1203:   cellClassName?: string | ((params: any) => any);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1205:   footerData?: any[];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a2b24e8dafeade1af76512ec717fd781432954f",
      "candidate_info": {
        "commit_hash": "4a2b24e8dafeade1af76512ec717fd781432954f",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/4a2b24e8dafeade1af76512ec717fd781432954f",
        "files": [
          "styles/custom.scss",
          "styles/variable.scss"
        ],
        "message": "\u4f18\u5316\u81ea\u5b9a\u4e49\u5217",
        "before_after_code_files": [
          "styles/custom.scss||styles/custom.scss",
          "styles/variable.scss||styles/variable.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "styles/custom.scss||styles/custom.scss": [
          "File: styles/custom.scss -> styles/custom.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   z-index: 19;",
          "62:   border: 1px solid $vxe-table-border-color;",
          "63:   border-radius: $vxe-border-radius;",
          "65:   &.is--active {",
          "66:     display: block;",
          "67:   }",
          "",
          "[Removed Lines]",
          "64:   box-shadow: $vxe-border-radius;",
          "",
          "[Added Lines]",
          "64:   box-shadow: $vxe-base-popup-box-shadow;",
          "",
          "---------------"
        ],
        "styles/variable.scss||styles/variable.scss": [
          "File: styles/variable.scss -> styles/variable.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: $vxe-table-popup-border-color: #DADCE0 !default;",
          "54: $vxe-table-header-font-color: $vxe-font-color !default;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: $vxe-base-popup-box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.16) !default;",
          "",
          "---------------"
        ]
      }
    }
  ]
}