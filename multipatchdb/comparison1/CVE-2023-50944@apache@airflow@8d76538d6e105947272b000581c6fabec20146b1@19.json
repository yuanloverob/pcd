{
  "cve_id": "CVE-2023-50944",
  "cve_desc": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows an authenticated user to access the source code of a DAG to which they don't have access.\u00a0This vulnerability is considered low since it requires an authenticated user to exploit it. Users are recommended to upgrade to version 2.8.1, which fixes this issue.",
  "repo": "apache/airflow",
  "patch_hash": "8d76538d6e105947272b000581c6fabec20146b1",
  "patch_info": {
    "commit_hash": "8d76538d6e105947272b000581c6fabec20146b1",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/8d76538d6e105947272b000581c6fabec20146b1",
    "files": [
      "airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "airflow/models/dagcode.py",
      "tests/api_connexion/endpoints/test_dag_source_endpoint.py"
    ],
    "message": "Check DAG read permission before accessing DAG code (#36257)\n\n(cherry picked from commit 30ea37e0d247ce54c2d25b115e807fdb0074d795)",
    "before_after_code_files": [
      "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "airflow/models/dagcode.py||airflow/models/dagcode.py",
      "tests/api_connexion/endpoints/test_dag_source_endpoint.py||tests/api_connexion/endpoints/test_dag_source_endpoint.py"
    ]
  },
  "patch_diff": {
    "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py": [
      "File: airflow/api_connexion/endpoints/dag_source_endpoint.py -> airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: from __future__ import annotations",
      "19: from http import HTTPStatus",
      "21: from flask import Response, current_app, request",
      "22: from itsdangerous import BadSignature, URLSafeSerializer",
      "24: from airflow.api_connexion import security",
      "26: from airflow.api_connexion.schemas.dag_source_schema import dag_source_schema",
      "27: from airflow.auth.managers.models.resource_details import DagAccessEntity",
      "28: from airflow.models.dagcode import DagCode",
      "31: @security.requires_access_dag(\"GET\", DagAccessEntity.CODE)",
      "33:     \"\"\"Get source code using file token.\"\"\"",
      "34:     secret_key = current_app.config[\"SECRET_KEY\"]",
      "35:     auth_s = URLSafeSerializer(secret_key)",
      "36:     try:",
      "37:         path = auth_s.loads(file_token)",
      "39:     except (BadSignature, FileNotFoundError):",
      "40:         raise NotFound(\"Dag source not found\")",
      "",
      "[Removed Lines]",
      "25: from airflow.api_connexion.exceptions import NotFound",
      "32: def get_dag_source(*, file_token: str) -> Response:",
      "38:         dag_source = DagCode.code(path)",
      "",
      "[Added Lines]",
      "20: from typing import TYPE_CHECKING",
      "26: from airflow.api_connexion.exceptions import NotFound, PermissionDenied",
      "28: from airflow.api_connexion.security import get_readable_dags",
      "30: from airflow.models.dag import DagModel",
      "32: from airflow.utils.session import NEW_SESSION, provide_session",
      "34: if TYPE_CHECKING:",
      "35:     from sqlalchemy.orm import Session",
      "39: @provide_session",
      "40: def get_dag_source(*, file_token: str, session: Session = NEW_SESSION) -> Response:",
      "46:         dag_ids = session.query(DagModel.dag_id).filter(DagModel.fileloc == path).all()",
      "47:         readable_dags = get_readable_dags()",
      "48:         # Check if user has read access to all the DAGs defined in the file",
      "49:         if any(dag_id[0] not in readable_dags for dag_id in dag_ids):",
      "50:             raise PermissionDenied()",
      "51:         dag_source = DagCode.code(path, session=session)",
      "",
      "---------------"
    ],
    "airflow/models/dagcode.py||airflow/models/dagcode.py": [
      "File: airflow/models/dagcode.py -> airflow/models/dagcode.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:         return cls.code(fileloc)",
      "179:     @classmethod",
      "181:         \"\"\"Return source code for this DagCode object.",
      "183:         :return: source code as string",
      "184:         \"\"\"",
      "187:     @staticmethod",
      "188:     def _get_code_from_file(fileloc):",
      "",
      "[Removed Lines]",
      "180:     def code(cls, fileloc) -> str:",
      "185:         return cls._get_code_from_db(fileloc)",
      "",
      "[Added Lines]",
      "180:     @provide_session",
      "181:     def code(cls, fileloc, session: Session = NEW_SESSION) -> str:",
      "186:         return cls._get_code_from_db(fileloc, session)",
      "",
      "---------------"
    ],
    "tests/api_connexion/endpoints/test_dag_source_endpoint.py||tests/api_connexion/endpoints/test_dag_source_endpoint.py": [
      "File: tests/api_connexion/endpoints/test_dag_source_endpoint.py -> tests/api_connexion/endpoints/test_dag_source_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))",
      "36: EXAMPLE_DAG_FILE = os.path.join(\"airflow\", \"example_dags\", \"example_bash_operator.py\")",
      "39: @pytest.fixture(scope=\"module\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: EXAMPLE_DAG_ID = \"example_bash_operator\"",
      "38: TEST_DAG_ID = \"latest_only\"",
      "39: NOT_READABLE_DAG_ID = \"latest_only_with_trigger\"",
      "40: TEST_MULTIPLE_DAGS_ID = \"dataset_produces_1\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "45:         role_name=\"Test\",",
      "46:         permissions=[(permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_CODE)],  # type: ignore",
      "47:     )",
      "48:     create_user(app, username=\"test_no_permissions\", role_name=\"TestNoPermissions\")  # type: ignore",
      "50:     yield app",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "53:         TEST_DAG_ID,",
      "54:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "55:     )",
      "56:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "57:         EXAMPLE_DAG_ID,",
      "58:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "59:     )",
      "60:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "61:         TEST_MULTIPLE_DAGS_ID,",
      "62:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "63:     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "80:     def test_should_respond_200_text(self, url_safe_serializer):",
      "81:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "82:         dagbag.sync_to_db()",
      "87:         response = self.client.get(",
      "88:             url, headers={\"Accept\": \"text/plain\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "89:         )",
      "",
      "[Removed Lines]",
      "83:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "84:         dag_docstring = self._get_dag_file_docstring(first_dag.fileloc)",
      "86:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "99:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "100:         dag_docstring = self._get_dag_file_docstring(test_dag.fileloc)",
      "102:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "95:     def test_should_respond_200_json(self, url_safe_serializer):",
      "96:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "97:         dagbag.sync_to_db()",
      "102:         response = self.client.get(",
      "103:             url, headers={\"Accept\": \"application/json\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "104:         )",
      "",
      "[Removed Lines]",
      "98:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "99:         dag_docstring = self._get_dag_file_docstring(first_dag.fileloc)",
      "101:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "114:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "115:         dag_docstring = self._get_dag_file_docstring(test_dag.fileloc)",
      "117:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "110:     def test_should_respond_406(self, url_safe_serializer):",
      "111:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "112:         dagbag.sync_to_db()",
      "116:         response = self.client.get(",
      "117:             url, headers={\"Accept\": \"image/webp\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "118:         )",
      "",
      "[Removed Lines]",
      "113:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "115:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "129:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "131:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "151:             environ_overrides={\"REMOTE_USER\": \"test_no_permissions\"},",
      "152:         )",
      "153:         assert response.status_code == 403",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "171:     def test_should_respond_403_not_readable(self, url_safe_serializer):",
      "172:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "173:         dagbag.sync_to_db()",
      "174:         dag: DAG = dagbag.dags[NOT_READABLE_DAG_ID]",
      "176:         response = self.client.get(",
      "177:             f\"/api/v1/dagSources/{url_safe_serializer.dumps(dag.fileloc)}\",",
      "178:             headers={\"Accept\": \"text/plain\"},",
      "179:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "180:         )",
      "181:         read_dag = self.client.get(",
      "182:             f\"/api/v1/dags/{NOT_READABLE_DAG_ID}\",",
      "183:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "184:         )",
      "185:         assert response.status_code == 403",
      "186:         assert read_dag.status_code == 403",
      "188:     def test_should_respond_403_some_dags_not_readable_in_the_file(self, url_safe_serializer):",
      "189:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "190:         dagbag.sync_to_db()",
      "191:         dag: DAG = dagbag.dags[TEST_MULTIPLE_DAGS_ID]",
      "193:         response = self.client.get(",
      "194:             f\"/api/v1/dagSources/{url_safe_serializer.dumps(dag.fileloc)}\",",
      "195:             headers={\"Accept\": \"text/plain\"},",
      "196:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "197:         )",
      "199:         read_dag = self.client.get(",
      "200:             f\"/api/v1/dags/{TEST_MULTIPLE_DAGS_ID}\",",
      "201:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "202:         )",
      "203:         assert response.status_code == 403",
      "204:         assert read_dag.status_code == 200",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c2e6b9a92dcd603c05f3008a7139eff52fe3e1b7",
      "candidate_info": {
        "commit_hash": "c2e6b9a92dcd603c05f3008a7139eff52fe3e1b7",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/c2e6b9a92dcd603c05f3008a7139eff52fe3e1b7",
        "files": [
          "dev/breeze/src/airflow_breeze/utils/kubernetes_utils.py"
        ],
        "message": "Add version check for k8s setup venv command (#36673)\n\nThis command install airflow in k8s venv and in case version of\nPython is not yet supported by Airflow, it might fail.\n\nWe do not have check it lower-bound because breeze supports the\nsame minimum version of Airflow as Airflow itself.\n\nThe command prints instructions on how to reinstall breeze with\ndifferent Python version in such case.\n\n(cherry picked from commit 9264a4b4e21702a2bc71bb77ee3cc4ada9dfd5e7)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/utils/kubernetes_utils.py||dev/breeze/src/airflow_breeze/utils/kubernetes_utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/utils/kubernetes_utils.py||dev/breeze/src/airflow_breeze/utils/kubernetes_utils.py": [
          "File: dev/breeze/src/airflow_breeze/utils/kubernetes_utils.py -> dev/breeze/src/airflow_breeze/utils/kubernetes_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: from typing import Any, NamedTuple",
          "33: from urllib import request",
          "36: from airflow_breeze.utils.console import Output, get_console",
          "37: from airflow_breeze.utils.host_info_utils import Architecture, get_host_architecture, get_host_os",
          "38: from airflow_breeze.utils.path_utils import AIRFLOW_SOURCES_ROOT, BUILD_CACHE_DIR",
          "",
          "[Removed Lines]",
          "35: from airflow_breeze.global_constants import ALLOWED_ARCHITECTURES, HELM_VERSION, KIND_VERSION, PIP_VERSION",
          "",
          "[Added Lines]",
          "35: from airflow_breeze.global_constants import (",
          "36:     ALLOWED_ARCHITECTURES,",
          "37:     ALLOWED_PYTHON_MAJOR_MINOR_VERSIONS,",
          "38:     HELM_VERSION,",
          "39:     KIND_VERSION,",
          "40:     PIP_VERSION,",
          "41: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330:         get_console().print(f\"[info]Dry run - would be removing {K8S_ENV_PATH}\")",
          "331:     else:",
          "332:         shutil.rmtree(K8S_ENV_PATH, ignore_errors=True)",
          "333:     venv_command_result = run_command(",
          "334:         [sys.executable, \"-m\", \"venv\", str(K8S_ENV_PATH)],",
          "335:         check=False,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:     max_python_version = ALLOWED_PYTHON_MAJOR_MINOR_VERSIONS[-1]",
          "340:     max_python_version_tuple = tuple(int(x) for x in max_python_version.split(\".\"))",
          "341:     higher_python_version_tuple = max_python_version_tuple[0], max_python_version_tuple[1] + 1",
          "342:     if sys.version_info >= higher_python_version_tuple:",
          "343:         get_console().print(",
          "344:             f\"[red]This is not supported in Python {higher_python_version_tuple} and above[/]\\n\"",
          "345:         )",
          "346:         get_console().print(f\"[warning]Please use Python version before {higher_python_version_tuple}[/]\\n\")",
          "347:         get_console().print(",
          "348:             \"[info]You can uninstall breeze and install it again with earlier Python \"",
          "349:             \"version. For example:[/]\\n\"",
          "350:         )",
          "351:         get_console().print(\"pipx uninstall apache-airflow-breeze\")",
          "352:         get_console().print(\"pipx install --python PYTHON_PATH -e ./dev/breeze\\n\")",
          "353:         get_console().print(",
          "354:             f\"[info]PYTHON_PATH - path to your Python binary(< {higher_python_version_tuple})[/]\\n\"",
          "355:         )",
          "356:         get_console().print(\"[info]Then recreate your k8s virtualenv with:[/]\\n\")",
          "357:         get_console().print(\"breeze k8s setup-env --force-venv-setup\\n\")",
          "358:         sys.exit(1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c284ece1454bc64afdb2686464e91e42a4519b55",
      "candidate_info": {
        "commit_hash": "c284ece1454bc64afdb2686464e91e42a4519b55",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/c284ece1454bc64afdb2686464e91e42a4519b55",
        "files": [
          "dev/breeze/src/airflow_breeze/utils/md5_build_check.py"
        ],
        "message": "Less verbose information about changed provider.yaml files (#36307)\n\nWhen we attempt to see if provider.yaml files make changes in\ndependencies, we print verbose information on what provider.yaml\nfiles changeed, but this is not necessary or needed. This change\nmakes the output less verbose by detail - just a number of changed\nfiles rather than full list of them - the full list is only printed\nwhen `--verbose` flag is used.\n\n(cherry picked from commit 7212301b2200cb968cd38cdaddb30d7ed7360bda)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/utils/md5_build_check.py||dev/breeze/src/airflow_breeze/utils/md5_build_check.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/utils/md5_build_check.py||dev/breeze/src/airflow_breeze/utils/md5_build_check.py": [
          "File: dev/breeze/src/airflow_breeze/utils/md5_build_check.py -> dev/breeze/src/airflow_breeze/utils/md5_build_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: from airflow_breeze.utils.console import get_console",
          "30: from airflow_breeze.utils.path_utils import AIRFLOW_SOURCES_ROOT",
          "31: from airflow_breeze.utils.run_utils import run_command",
          "33: if TYPE_CHECKING:",
          "34:     from airflow_breeze.params.build_ci_params import BuildCiParams",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: from airflow_breeze.utils.shared_options import get_verbose",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:         if modified_provider_yaml_files:",
          "103:             get_console().print(",
          "104:                 \"[info]Attempting to generate provider dependencies. \"",
          "109:             )",
          "110:             # Regenerate provider_dependencies.json",
          "111:             run_command(",
          "112:                 [",
          "",
          "[Removed Lines]",
          "105:                 \"Provider yaml files changed since last check:[/]\"",
          "106:             )",
          "107:             get_console().print(",
          "108:                 [os.fspath(file.relative_to(AIRFLOW_SOURCES_ROOT)) for file in modified_provider_yaml_files]",
          "",
          "[Added Lines]",
          "106:                 f\"{len(modified_provider_yaml_files)} provider.yaml file(s) changed since last check.\"",
          "108:             if get_verbose():",
          "109:                 get_console().print(",
          "110:                     [",
          "111:                         os.fspath(file.relative_to(AIRFLOW_SOURCES_ROOT))",
          "112:                         for file in modified_provider_yaml_files",
          "113:                     ]",
          "114:                 )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21a411d58ffb08638817acf958c3119198860c0f",
      "candidate_info": {
        "commit_hash": "21a411d58ffb08638817acf958c3119198860c0f",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/21a411d58ffb08638817acf958c3119198860c0f",
        "files": [
          "dev/breeze/src/airflow_breeze/global_constants.py"
        ],
        "message": "Add utkarsharma2 to committers list (#36474)\n\n(cherry picked from commit e3fb20d358646d276d4e275fa67d34b4fc13b73a)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/global_constants.py||dev/breeze/src/airflow_breeze/global_constants.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/global_constants.py||dev/breeze/src/airflow_breeze/global_constants.py": [
          "File: dev/breeze/src/airflow_breeze/global_constants.py -> dev/breeze/src/airflow_breeze/global_constants.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:     \"sekikn\",",
          "339:     \"turbaszek\",",
          "340:     \"uranusjr\",",
          "341:     \"vikramkoka\",",
          "342:     \"vincbeck\",",
          "343:     \"xinbinhuang\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:     \"utkarsharma2\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b915ed88715cbbf5a8cecb02c210cd529095026f",
      "candidate_info": {
        "commit_hash": "b915ed88715cbbf5a8cecb02c210cd529095026f",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b915ed88715cbbf5a8cecb02c210cd529095026f",
        "files": [
          "airflow/api_connexion/endpoints/dag_source_endpoint.py"
        ],
        "message": "Use `batch_is_authorized_dag` to check if user has permission to read DAGs (#36279)\n\n(cherry picked from commit a7ab64e29b60502ee8b9d5088470113d836283d1)",
        "before_after_code_files": [
          "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py"
          ],
          "candidate": [
            "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py": [
          "File: airflow/api_connexion/endpoints/dag_source_endpoint.py -> airflow/api_connexion/endpoints/dag_source_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: from __future__ import annotations",
          "19: from http import HTTPStatus",
          "22: from flask import Response, current_app, request",
          "23: from itsdangerous import BadSignature, URLSafeSerializer",
          "",
          "[Removed Lines]",
          "20: from typing import TYPE_CHECKING",
          "",
          "[Added Lines]",
          "20: from typing import TYPE_CHECKING, Sequence",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: from airflow.api_connexion import security",
          "26: from airflow.api_connexion.exceptions import NotFound, PermissionDenied",
          "27: from airflow.api_connexion.schemas.dag_source_schema import dag_source_schema",
          "30: from airflow.models.dag import DagModel",
          "31: from airflow.models.dagcode import DagCode",
          "32: from airflow.utils.session import NEW_SESSION, provide_session",
          "34: if TYPE_CHECKING:",
          "35:     from sqlalchemy.orm import Session",
          "38: @security.requires_access_dag(\"GET\", DagAccessEntity.CODE)",
          "39: @provide_session",
          "",
          "[Removed Lines]",
          "28: from airflow.api_connexion.security import get_readable_dags",
          "29: from airflow.auth.managers.models.resource_details import DagAccessEntity",
          "",
          "[Added Lines]",
          "28: from airflow.auth.managers.models.resource_details import DagAccessEntity, DagDetails",
          "32: from airflow.www.extensions.init_auth_manager import get_auth_manager",
          "37:     from airflow.auth.managers.models.batch_apis import IsAuthorizedDagRequest",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:     try:",
          "45:         path = auth_s.loads(file_token)",
          "46:         dag_ids = session.query(DagModel.dag_id).filter(DagModel.fileloc == path).all()",
          "48:         # Check if user has read access to all the DAGs defined in the file",
          "50:             raise PermissionDenied()",
          "51:         dag_source = DagCode.code(path, session=session)",
          "52:     except (BadSignature, FileNotFoundError):",
          "",
          "[Removed Lines]",
          "47:         readable_dags = get_readable_dags()",
          "49:         if any(dag_id[0] not in readable_dags for dag_id in dag_ids):",
          "",
          "[Added Lines]",
          "49:         requests: Sequence[IsAuthorizedDagRequest] = [",
          "50:             {",
          "51:                 \"method\": \"GET\",",
          "52:                 \"details\": DagDetails(id=dag_id[0]),",
          "53:             }",
          "54:             for dag_id in dag_ids",
          "55:         ]",
          "58:         if not get_auth_manager().batch_is_authorized_dag(requests):",
          "",
          "---------------"
        ]
      }
    }
  ]
}