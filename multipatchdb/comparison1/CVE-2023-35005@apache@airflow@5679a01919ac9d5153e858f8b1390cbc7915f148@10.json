{
  "cve_id": "CVE-2023-35005",
  "cve_desc": "In Apache Airflow, some potentially sensitive values were being shown to the user in certain situations.\n\nThis vulnerability is mitigated by the fact configuration is not shown in the UI by default (only if `[webserver] expose_config` is set to `non-sensitive-only`), and not all uncensored values are actually sentitive.\n\n\nThis issue affects Apache Airflow: from 2.5.0 before 2.6.2. Users are recommended to update to version 2.6.2 or later.\n\n\n",
  "repo": "apache/airflow",
  "patch_hash": "5679a01919ac9d5153e858f8b1390cbc7915f148",
  "patch_info": {
    "commit_hash": "5679a01919ac9d5153e858f8b1390cbc7915f148",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/5679a01919ac9d5153e858f8b1390cbc7915f148",
    "files": [
      "airflow/config_templates/config.yml",
      "airflow/config_templates/default_airflow.cfg",
      "airflow/configuration.py",
      "airflow/www/views.py",
      "tests/core/test_configuration.py",
      "tests/www/views/test_views_configuration.py"
    ],
    "message": "Use single source of truth for sensitive config items (#31820)\n\nPreviously we had them defined both in constant and in config.yml.\n\nNow just config.yml\n\n(cherry picked from commit cab342ee010bfd048006ca458c760b37470b6ea5)",
    "before_after_code_files": [
      "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg",
      "airflow/configuration.py||airflow/configuration.py",
      "airflow/www/views.py||airflow/www/views.py",
      "tests/core/test_configuration.py||tests/core/test_configuration.py",
      "tests/www/views/test_views_configuration.py||tests/www/views/test_views_configuration.py"
    ]
  },
  "patch_diff": {
    "airflow/config_templates/default_airflow.cfg||airflow/config_templates/default_airflow.cfg": [
      "File: airflow/config_templates/default_airflow.cfg -> airflow/config_templates/default_airflow.cfg",
      "--- Hunk 1 ---",
      "[Context before]",
      "995: # Example: result_backend = db+postgresql://postgres:airflow@postgres/airflow",
      "996: # result_backend =",
      "998: # Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start",
      "999: # it ``airflow celery flower``. This defines the IP that Celery Flower runs on",
      "1000: flower_host = 0.0.0.0",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "998: # Optional configuration dictionary to pass to the Celery result backend SQLAlchemy engine.",
      "999: # Example: result_backend_sqlalchemy_engine_options = {{\"pool_recycle\": 1800}}",
      "1000: result_backend_sqlalchemy_engine_options =",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1018: # Import path for celery configuration options",
      "1019: celery_config_options = airflow.config_templates.default_celery.DEFAULT_CELERY_CONFIG",
      "1020: ssl_active = False",
      "1021: ssl_key =",
      "1022: ssl_cert =",
      "1023: ssl_cacert =",
      "1025: # Celery Pool implementation.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1026: # Path to the client key.",
      "1029: # Path to the client certificate.",
      "1032: # Path to the CA certificate.",
      "",
      "---------------"
    ],
    "airflow/configuration.py||airflow/configuration.py": [
      "File: airflow/configuration.py -> airflow/configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: from contextlib import contextmanager, suppress",
      "38: from json.decoder import JSONDecodeError",
      "39: from re import Pattern",
      "41: from urllib.parse import urlsplit",
      "43: from typing_extensions import overload",
      "",
      "[Removed Lines]",
      "40: from typing import IO, Any, Dict, Iterable, Tuple, Union",
      "",
      "[Added Lines]",
      "40: from typing import IO, Any, Dict, Iterable, Set, Tuple, Union",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "147:         return yaml.safe_load(config_file)",
      "165: class AirflowConfigParser(ConfigParser):",
      "166:     \"\"\"Custom Airflow Configparser supporting defaults and deprecated options.\"\"\"",
      "",
      "[Removed Lines]",
      "150: SENSITIVE_CONFIG_VALUES = {",
      "151:     (\"database\", \"sql_alchemy_conn\"),",
      "152:     (\"core\", \"fernet_key\"),",
      "153:     (\"celery\", \"broker_url\"),",
      "154:     (\"celery\", \"flower_basic_auth\"),",
      "155:     (\"celery\", \"result_backend\"),",
      "156:     (\"atlas\", \"password\"),",
      "157:     (\"smtp\", \"smtp_password\"),",
      "158:     (\"webserver\", \"secret_key\"),",
      "159:     (\"secrets\", \"backend_kwargs\"),",
      "160:     # The following options are deprecated",
      "161:     (\"core\", \"sql_alchemy_conn\"),",
      "162: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "171:     # These configs can also be fetched from Secrets backend",
      "172:     # following the \"{section}__{name}__secret\" pattern",
      "176:     # A mapping of (new section, new option) -> (old section, old option, since_version).",
      "177:     # When reading new option, the old option will be checked to see if it exists. If it does a",
      "",
      "[Removed Lines]",
      "174:     sensitive_config_values: set[tuple[str, str]] = SENSITIVE_CONFIG_VALUES",
      "",
      "[Added Lines]",
      "159:     @cached_property",
      "160:     def sensitive_config_values(self) -> Set[tuple[str, str]]:  # noqa: UP006",
      "161:         default_config = default_config_yaml()",
      "162:         flattened = {",
      "163:             (s, k): item for s, s_c in default_config.items() for k, item in s_c.get(\"options\").items()",
      "164:         }",
      "165:         sensitive = {(section, key) for (section, key), v in flattened.items() if v.get(\"sensitive\") is True}",
      "166:         depr_option = {self.deprecated_options[x][:-1] for x in sensitive if x in self.deprecated_options}",
      "167:         depr_section = {",
      "168:             (self.deprecated_sections[s][0], k) for s, k in sensitive if s in self.deprecated_sections",
      "169:         }",
      "170:         sensitive.update(depr_section, depr_option)",
      "171:         return sensitive",
      "",
      "---------------"
    ],
    "airflow/www/views.py||airflow/www/views.py": [
      "File: airflow/www/views.py -> airflow/www/views.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3951:         # TODO remove \"if raw\" usage in Airflow 3.0. Configuration can be fetched via the REST API.",
      "3952:         if raw:",
      "3953:             if expose_config == \"non-sensitive-only\":",
      "3956:                 updater = configupdater.ConfigUpdater()",
      "3957:                 updater.read(AIRFLOW_CONFIG)",
      "3959:                     if updater.has_option(sect, key):",
      "3960:                         updater[sect][key].value = \"< hidden >\"",
      "3961:                 config = str(updater)",
      "",
      "[Removed Lines]",
      "3954:                 from airflow.configuration import SENSITIVE_CONFIG_VALUES",
      "3958:                 for sect, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "3956:                 for sect, key in conf.sensitive_config_values:",
      "",
      "---------------"
    ],
    "tests/core/test_configuration.py||tests/core/test_configuration.py": [
      "File: tests/core/test_configuration.py -> tests/core/test_configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     AirflowConfigException,",
      "37:     AirflowConfigParser,",
      "38:     conf,",
      "39:     expand_env_var,",
      "40:     get_airflow_config,",
      "41:     get_airflow_home,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39:     default_config_yaml,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1447:             w = captured.pop()",
      "1448:             assert \"your `conf.get*` call to use the new name\" in str(w.message)",
      "1449:             assert w.category == FutureWarning",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1453: def test_sensitive_values():",
      "1454:     from airflow.settings import conf",
      "1456:     # this list was hardcoded prior to 2.6.2",
      "1457:     # included here to avoid regression in refactor",
      "1458:     # inclusion of keys ending in \"password\" or \"kwargs\" is automated from 2.6.2",
      "1459:     # items not matching this pattern must be added here manually",
      "1460:     sensitive_values = {",
      "1461:         (\"database\", \"sql_alchemy_conn\"),",
      "1462:         (\"core\", \"fernet_key\"),",
      "1463:         (\"celery\", \"broker_url\"),",
      "1464:         (\"celery\", \"flower_basic_auth\"),",
      "1465:         (\"celery\", \"result_backend\"),",
      "1466:         (\"atlas\", \"password\"),",
      "1467:         (\"smtp\", \"smtp_password\"),",
      "1468:         (\"webserver\", \"secret_key\"),",
      "1469:         (\"secrets\", \"backend_kwargs\"),",
      "1470:         (\"sentry\", \"sentry_dsn\"),",
      "1471:         (\"database\", \"sql_alchemy_engine_args\"),",
      "1472:         (\"core\", \"sql_alchemy_conn\"),",
      "1473:     }",
      "1474:     default_config = default_config_yaml()",
      "1475:     all_keys = {(s, k) for s, v in default_config.items() for k in v.get(\"options\")}",
      "1476:     suspected_sensitive = {(s, k) for (s, k) in all_keys if k.endswith((\"password\", \"kwargs\"))}",
      "1477:     exclude_list = {",
      "1478:         (\"kubernetes_executor\", \"delete_option_kwargs\"),",
      "1479:     }",
      "1480:     suspected_sensitive -= exclude_list",
      "1481:     sensitive_values.update(suspected_sensitive)",
      "1482:     assert sensitive_values == conf.sensitive_config_values",
      "",
      "---------------"
    ],
    "tests/www/views/test_views_configuration.py||tests/www/views/test_views_configuration.py": [
      "File: tests/www/views/test_views_configuration.py -> tests/www/views/test_views_configuration.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import html",
      "22: from tests.test_utils.config import conf_vars",
      "23: from tests.test_utils.www import check_content_in_response, check_content_not_in_response",
      "",
      "[Removed Lines]",
      "21: from airflow.configuration import SENSITIVE_CONFIG_VALUES, conf",
      "",
      "[Added Lines]",
      "21: from airflow.configuration import conf",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: @conf_vars({(\"webserver\", \"expose_config\"): \"True\"})",
      "37: def test_user_can_view_configuration(admin_client):",
      "38:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "40:         value = conf.get(section, key, fallback=\"\")",
      "41:         if not value:",
      "42:             continue",
      "",
      "[Removed Lines]",
      "39:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "39:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "46: @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
      "47: def test_configuration_redacted(admin_client):",
      "48:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "50:         value = conf.get(section, key, fallback=\"\")",
      "51:         if not value or value == \"airflow\":",
      "52:             continue",
      "",
      "[Removed Lines]",
      "49:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "49:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "58: @conf_vars({(\"webserver\", \"expose_config\"): \"non-sensitive-only\"})",
      "59: def test_configuration_redacted_in_running_configuration(admin_client):",
      "60:     resp = admin_client.get(\"configuration\", follow_redirects=True)",
      "62:         value = conf.get(section, key, fallback=\"\")",
      "63:         if not value or value == \"airflow\":",
      "64:             continue",
      "",
      "[Removed Lines]",
      "61:     for section, key in SENSITIVE_CONFIG_VALUES:",
      "",
      "[Added Lines]",
      "61:     for section, key in conf.sensitive_config_values:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0fa7270d95b2cbfa77ca11254f0a86ded405ded0",
      "candidate_info": {
        "commit_hash": "0fa7270d95b2cbfa77ca11254f0a86ded405ded0",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/0fa7270d95b2cbfa77ca11254f0a86ded405ded0",
        "files": [
          "docker_tests/test_examples_of_prod_image_building.py",
          "docs/docker-stack/build.rst",
          "docs/docker-stack/docker-examples/customizing/own-requirements.sh",
          "docs/docker-stack/docker-examples/extending/add-providers/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-pypi-packages/Dockerfile",
          "docs/docker-stack/docker-examples/extending/add-requirement-packages/Dockerfile",
          "docs/docker-stack/docker-examples/extending/custom-providers/Dockerfile"
        ],
        "message": "Add instructions on how to avoid accidental airflow upgrade/downgrade (#30813)\n\nSome of our users raised issues that when extending the image, airflow\nsuddenly started reporting problem with database versions and migration\nnot aplied or out-of-sync. This almost always turns out to be a\ndependency conflict, that leads to automated downgrate or upgrade of\ninstalled airflow version. This is - obviously - undesired (you should\nbe upgrading airflow consciously rather than accidentally). However\nthere is no way to do it implicitly - `pip` might decide to upgrade or\ndowngrade airflow as it sees fit. From the point of view - airflow is\njust one of the packages and has no special meaning.\n\nThe only way to \"keep\" airflow version is to specify it together with\nother requirements, pinned to the specific version. This PR updates\nour examples to do this and explains why airflow is added there.\n\nThere is - of course - another risk that the user will forget to\nupdate the version of airflow when they upgrade, however, sinc this\nis explicit action performed during image extension, it is much easier\nto diagnose and notice. We also warn the users that they should upgrade\nwhen airflow is upgraded.\n\n(cherry picked from commit bf6ebe990cbcc290b5b9cd1060573f3cf44782ad)",
        "before_after_code_files": [
          "docker_tests/test_examples_of_prod_image_building.py||docker_tests/test_examples_of_prod_image_building.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "docker_tests/test_examples_of_prod_image_building.py||docker_tests/test_examples_of_prod_image_building.py": [
          "File: docker_tests/test_examples_of_prod_image_building.py -> docker_tests/test_examples_of_prod_image_building.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     rel_dockerfile_path = Path(dockerfile).relative_to(DOCKER_EXAMPLES_DIR)",
          "56:     image_name = str(rel_dockerfile_path).lower().replace(\"/\", \"-\")",
          "57:     content = Path(dockerfile).read_text()",
          "58:     new_content = re.sub(",
          "60:     )",
          "61:     try:",
          "62:         run_command(",
          "63:             [\"docker\", \"build\", \".\", \"--tag\", image_name, \"-f\", \"-\"],",
          "",
          "[Removed Lines]",
          "59:         r\"FROM apache/airflow:.*\", rf\"FROM apache/airflow:{get_latest_airflow_version_released()}\", content",
          "",
          "[Added Lines]",
          "58:     latest_released_version: str = get_latest_airflow_version_released()",
          "60:         r\"FROM apache/airflow:.*\", rf\"FROM apache/airflow:{latest_released_version}\", content",
          "62:     new_content = re.sub(r\"apache-airflow==\\S*\", rf\"apache-airflow=={latest_released_version}\", new_content)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "072655244828bdfc3f93540c92f9846deea0cb1e",
      "candidate_info": {
        "commit_hash": "072655244828bdfc3f93540c92f9846deea0cb1e",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/072655244828bdfc3f93540c92f9846deea0cb1e",
        "files": [
          "README.md",
          "docs/apache-airflow/installation/supported-versions.rst",
          "scripts/ci/pre_commit/pre_commit_supported_versions.py"
        ],
        "message": "Fix Update Airflow version to 2.6.2",
        "before_after_code_files": [
          "scripts/ci/pre_commit/pre_commit_supported_versions.py||scripts/ci/pre_commit/pre_commit_supported_versions.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scripts/ci/pre_commit/pre_commit_supported_versions.py||scripts/ci/pre_commit/pre_commit_supported_versions.py": [
          "File: scripts/ci/pre_commit/pre_commit_supported_versions.py -> scripts/ci/pre_commit/pre_commit_supported_versions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: HEADERS = (\"Version\", \"Current Patch/Minor\", \"State\", \"First Release\", \"Limited Support\", \"EOL/Terminated\")",
          "29: SUPPORTED_VERSIONS = (",
          "31:     (\"1.10\", \"1.10.15\", \"EOL\", \"Aug 27, 2018\", \"Dec 17, 2020\", \"June 17, 2021\"),",
          "32:     (\"1.9\", \"1.9.0\", \"EOL\", \"Jan 03, 2018\", \"Aug 27, 2018\", \"Aug 27, 2018\"),",
          "33:     (\"1.8\", \"1.8.2\", \"EOL\", \"Mar 19, 2017\", \"Jan 03, 2018\", \"Jan 03, 2018\"),",
          "",
          "[Removed Lines]",
          "30:     (\"2\", \"2.6.1\", \"Supported\", \"Dec 17, 2020\", \"TBD\", \"TBD\"),",
          "",
          "[Added Lines]",
          "30:     (\"2\", \"2.6.2\", \"Supported\", \"Dec 17, 2020\", \"TBD\", \"TBD\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b41ed8209d965402c7f593afb85c1e13afeb23a",
      "candidate_info": {
        "commit_hash": "5b41ed8209d965402c7f593afb85c1e13afeb23a",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/5b41ed8209d965402c7f593afb85c1e13afeb23a",
        "files": [
          "airflow/www/views.py",
          "tests/www/views/test_views.py"
        ],
        "message": "Fix failing get_safe_url tests for latest Python 3.8 and 3.9 (#31766)\n\nThe latest release of Python 3.8 and 3.9 have been just released\nthat contain the fix to a security vulnerability backported to\nthose versions:\n\nhttps://github.com/python/cpython/issues/102153\n\nRelease notes:\n* https://www.python.org/downloads/release/python-3817/\n* https://www.python.org/downloads/release/python-3917/\n\nThe fix improved sanitizing of the URLs and until Python 3.10 and\n3.11 get released, we need to add the sanitization ourselves to\npass tests on all versions.\n\nIn order to improve security of airflow users and make the tests\nwork regardless whether the users have latest Python versions\nreleased, we add extra sanitisation step to the URL to apply\nthe standard WHATWG specification.\n\n(cherry picked from commit 87c5c9fa629317090ce65ec4c686596a2c4cd148)",
        "before_after_code_files": [
          "airflow/www/views.py||airflow/www/views.py",
          "tests/www/views/test_views.py||tests/www/views/test_views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [
            "airflow/www/views.py||airflow/www/views.py"
          ],
          "candidate": [
            "airflow/www/views.py||airflow/www/views.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     return {key: value for key, value in args.items() if not key.startswith(\"_\")}",
          "165: def get_safe_url(url):",
          "166:     \"\"\"Given a user-supplied URL, ensure it points to our web server\"\"\"",
          "167:     if not url:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165: # Following the release of https://github.com/python/cpython/issues/102153 in Python 3.8.17 and 3.9.17 on",
          "166: # June 6, 2023, we are adding extra sanitization of the urls passed to get_safe_url method to make it works",
          "167: # the same way regardless if the user uses latest Python patchlevel versions or not. This also follows",
          "168: # a recommended solution by the Python core team.",
          "169: #",
          "170: # From: https://github.com/python/cpython/commit/d28bafa2d3e424b6fdcfd7ae7cde8e71d7177369",
          "171: #",
          "172: #   We recommend that users of these APIs where the values may be used anywhere",
          "173: #   with security implications code defensively. Do some verification within your",
          "174: #   code before trusting a returned component part.  Does that ``scheme`` make",
          "175: #   sense?  Is that a sensible ``path``?  Is there anything strange about that",
          "176: #   ``hostname``?  etc.",
          "177: #",
          "178: # C0 control and space to be stripped per WHATWG spec.",
          "179: # == \"\".join([chr(i) for i in range(0, 0x20 + 1)])",
          "180: _WHATWG_C0_CONTROL_OR_SPACE = (",
          "181:     \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\"",
          "182:     \"\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f \"",
          "183: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:     if \";\" in unquote(url):",
          "173:         return url_for(\"Airflow.index\")",
          "175:     host_url = urlsplit(request.host_url)",
          "176:     redirect_url = urlsplit(urljoin(request.host_url, url))",
          "177:     if not (redirect_url.scheme in (\"http\", \"https\") and host_url.netloc == redirect_url.netloc):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:     url = url.lstrip(_WHATWG_C0_CONTROL_OR_SPACE)",
          "",
          "---------------"
        ],
        "tests/www/views/test_views.py||tests/www/views/test_views.py": [
          "File: tests/www/views/test_views.py -> tests/www/views/test_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:     [",
          "182:         (\"\", \"/home\"),",
          "183:         (\"javascript:alert(1)\", \"/home\"),",
          "185:         (\"http://google.com\", \"/home\"),",
          "186:         (\"google.com\", \"http://localhost:8080/google.com\"),",
          "187:         (\"\\\\/google.com\", \"http://localhost:8080/\\\\/google.com\"),",
          "",
          "[Removed Lines]",
          "184:         (\" javascript:alert(1)\", \"http://localhost:8080/ javascript:alert(1)\"),",
          "",
          "[Added Lines]",
          "184:         (\" javascript:alert(1)\", \"/home\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d2ef9dd287507805d139756811227bd021093c35",
      "candidate_info": {
        "commit_hash": "d2ef9dd287507805d139756811227bd021093c35",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/d2ef9dd287507805d139756811227bd021093c35",
        "files": [
          "setup.cfg",
          "setup.py"
        ],
        "message": "Upgrade FAB to 4.3.1 (#31203)\n\n(cherry picked from commit 1133035f7912fb2d2612c7cee5017ebf01f8ec9d)",
        "before_after_code_files": [
          "setup.cfg||setup.cfg",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     # `airflow/www/fab_security` with their upstream counterparts. In particular, make sure any breaking changes,",
          "96:     # for example any new methods, are accounted for.",
          "97:     # NOTE! When you change the value here, you also have to update flask-appbuilder[oauth] in setup.py",
          "99:     flask-caching>=1.5.0",
          "100:     flask-login>=0.6.2",
          "101:     flask-session>=0.4.0",
          "",
          "[Removed Lines]",
          "98:     flask-appbuilder==4.3.0",
          "",
          "[Added Lines]",
          "98:     flask-appbuilder==4.3.1",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "285: flask_appbuilder_oauth = [",
          "286:     \"authlib>=1.0.0\",",
          "287:     # The version here should be upgraded at the same time as flask-appbuilder in setup.cfg",
          "289: ]",
          "290: kerberos = [",
          "291:     \"pykerberos>=1.1.13\",",
          "",
          "[Removed Lines]",
          "288:     \"flask-appbuilder[oauth]==4.3.0\",",
          "",
          "[Added Lines]",
          "288:     \"flask-appbuilder[oauth]==4.3.1\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f343975a1b1b514926f6092447b2597c5bba610",
      "candidate_info": {
        "commit_hash": "8f343975a1b1b514926f6092447b2597c5bba610",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/8f343975a1b1b514926f6092447b2597c5bba610",
        "files": [
          "airflow/utils/task_group.py",
          "tests/utils/test_task_group.py"
        ],
        "message": "Fix wrong update for nested group default args (#31776)\n\nSigned-off-by: Hussein Awala <hussein@awala.fr>\n(cherry picked from commit 8891c6944671d8965a63ddbd59b5c23597e86f0a)",
        "before_after_code_files": [
          "airflow/utils/task_group.py||airflow/utils/task_group.py",
          "tests/utils/test_task_group.py||tests/utils/test_task_group.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/31796"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/utils/task_group.py||airflow/utils/task_group.py": [
          "File: airflow/utils/task_group.py -> airflow/utils/task_group.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:     def _update_default_args(self, parent_group: TaskGroup):",
          "181:         if parent_group.default_args:",
          "184:     @classmethod",
          "185:     def create_root(cls, dag: DAG) -> TaskGroup:",
          "",
          "[Removed Lines]",
          "182:             self.default_args = {**self.default_args, **parent_group.default_args}",
          "",
          "[Added Lines]",
          "182:             self.default_args = {**parent_group.default_args, **self.default_args}",
          "",
          "---------------"
        ],
        "tests/utils/test_task_group.py||tests/utils/test_task_group.py": [
          "File: tests/utils/test_task_group.py -> tests/utils/test_task_group.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1368:                 \"execution_timeout\": timedelta(seconds=10),",
          "1369:             },",
          "1370:         ):",
          "1372:                 with TaskGroup(group_id=\"second_nested_task_group\"):",
          "1373:                     with TaskGroup(group_id=\"third_nested_task_group\"):",
          "1374:                         task = EmptyOperator(task_id=\"task\")",
          "1376:     assert task.retries == 1",
          "1378:     assert task.execution_timeout == timedelta(seconds=10)",
          "",
          "[Removed Lines]",
          "1371:             with TaskGroup(group_id=\"first_nested_task_group\"):",
          "1377:     assert task.owner == \"y\"",
          "",
          "[Added Lines]",
          "1371:             with TaskGroup(",
          "1372:                 group_id=\"first_nested_task_group\",",
          "1373:                 default_args={",
          "1374:                     \"owner\": \"z\",",
          "1375:                 },",
          "1376:             ):",
          "1382:     assert task.owner == \"z\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}