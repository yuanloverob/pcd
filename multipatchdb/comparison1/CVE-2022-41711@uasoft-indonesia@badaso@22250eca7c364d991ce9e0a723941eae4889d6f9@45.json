{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2f100dacd4f16598d11f0209c16be877ae322272",
      "candidate_info": {
        "commit_hash": "2f100dacd4f16598d11f0209c16be877ae322272",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/2f100dacd4f16598d11f0209c16be877ae322272",
        "files": [
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:                     'schema_type' => 'integer',",
          "302:                     'details' => json_encode((object) []),",
          "303:                     'example' => 1,",
          "305:                 ],",
          "306:                 [",
          "307:                     'badaso_type' => 'url',",
          "",
          "[Removed Lines]",
          "304:                     'example_update' => NULL,",
          "",
          "[Added Lines]",
          "304:                     'example_update' => null,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:                     'schema_type' => 'string',",
          "399:                     'details' => json_encode((object) []),",
          "400:                     'example' => \"[\\'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png\\',\\'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png\\']\",",
          "402:                 ],",
          "403:             ];",
          "404:     }",
          "",
          "[Removed Lines]",
          "401:                     'example_update' => \"[]\",",
          "",
          "[Added Lines]",
          "401:                     'example_update' => '[]',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "408:         $table_names = [];",
          "409:         for ($index = 1; $index <= $max_count_table_generate; $index++) {",
          "410:             $table_name = \"{$this->TABLE_TEST_PREFIX}{$index}\";",
          "412:                 Schema::create($table_name, function (Blueprint $table) use ($index, $table_names) {",
          "413:                     $table->id();",
          "",
          "[Removed Lines]",
          "411:             if (!Schema::hasTable($table_name)) {",
          "",
          "[Added Lines]",
          "411:             if (! Schema::hasTable($table_name)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439:         $table_names = [];",
          "440:         for ($index = 1; $index <= $max_count_table_generate; $index++) {",
          "441:             $table_name = \"{$this->TABLE_TEST_EMPTY_VALUE_PREFIX}{$index}\";",
          "443:                 Schema::create($table_name, function (Blueprint $table) use ($index, $table_names) {",
          "444:                     $table->id();",
          "",
          "[Removed Lines]",
          "442:             if (!Schema::hasTable($table_name)) {",
          "",
          "[Added Lines]",
          "442:             if (! Schema::hasTable($table_name)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "639:                 }",
          "640:                 PHP;",
          "641:                 $model_path = app_path(\"Models/$model_file_name\");",
          "643:                     file_put_contents($model_path, $model_body);",
          "644:                 }",
          "",
          "[Removed Lines]",
          "642:                 if (!file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "642:                 if (! file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "660:             $controller_data = [];",
          "661:             if (rand(0, 1)) {",
          "664:                 $controller_file_name = \"{$controller_name}.php\";",
          "665:                 $controller_body = <<<PHP",
          "666:                 <?php",
          "",
          "[Removed Lines]",
          "663:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "",
          "[Added Lines]",
          "663:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "669:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "670:                 PHP;",
          "671:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "673:                     file_put_contents($controller_path, $controller_body);",
          "674:                 }",
          "",
          "[Removed Lines]",
          "672:                 if (!file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "672:                 if (! file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1112:             if ($table['table'] == 'table_relation') {",
          "1113:                 for ($i = 0; $i < 2; $i++) {",
          "1114:                     $field[$i] = [",
          "1117:                         'fieldType' => 'bigint',",
          "1118:                         'fieldLength' => null,",
          "1119:                         'fieldNull' => false,",
          "",
          "[Removed Lines]",
          "1115:                         'id' => $name_table[$i] . '_id',",
          "1116:                         'fieldName' => $name_table[$i] . '_id',",
          "",
          "[Added Lines]",
          "1115:                         'id' => $name_table[$i].'_id',",
          "1116:                         'fieldName' => $name_table[$i].'_id',",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1126:                     array_push($table['rows'], $field[$i]);",
          "1127:                 }",
          "1128:                 $table['relations'] = [",
          "1131:                         'target_table' => $name_table[1],",
          "1132:                         'target_field' => 'id',",
          "1133:                         'on_delete' => 'cascade',",
          "1134:                         'on_update' => 'restrict',",
          "1135:                     ],",
          "1138:                         'target_table' => $name_table[0],",
          "1139:                         'target_field' => 'id',",
          "1140:                         'on_delete' => 'cascade',",
          "",
          "[Removed Lines]",
          "1129:                     $name_table[1] . '_id' => [",
          "1130:                         'source_field' => $name_table[1] . '_id',",
          "1136:                     $name_table[0] . '_id' => [",
          "1137:                         'source_field' => $name_table[0] . '_id',",
          "",
          "[Added Lines]",
          "1129:                     $name_table[1].'_id' => [",
          "1130:                         'source_field' => $name_table[1].'_id',",
          "1136:                     $name_table[0].'_id' => [",
          "1137:                         'source_field' => $name_table[0].'_id',",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1148:         foreach ($name_table as $key => $crud_table) {",
          "1149:             $crud_table = [",
          "1150:                 'name' => $crud_table,",
          "1152:                 'displayNameSingular' => $crud_table,",
          "1153:                 'displayNamePlural' => $crud_table,",
          "1154:                 'icon' => '',",
          "",
          "[Removed Lines]",
          "1151:                 'slug' => 'table-' . $key + 1,",
          "",
          "[Added Lines]",
          "1151:                 'slug' => 'table-'.$key + 1,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1275:         foreach ($name_table as $key => $table) {",
          "1276:             if ($table == 'table-2') {",
          "1277:                 for ($i = 1; $i < 4; $i++) {",
          "1279:                         'data' => [",
          "1281:                         ],",
          "1282:                     ]);",
          "1283:                 }",
          "1284:             } else {",
          "1286:                 $response->assertSuccessful();",
          "1287:             }",
          "1288:         }",
          "1292:         $response->assertSuccessful();",
          "1293:         $data_browse = $response['data']['data'][0];",
          "1297:             'data' => [",
          "1298:                 'id' => $data_browse['id'],",
          "1299:                 'name' => 'lorem ipsum',",
          "",
          "[Removed Lines]",
          "1278:                     $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/add'), [",
          "1280:                             'name' => 'option ' . $i,",
          "1285:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/add'), $data_table_primary);",
          "1291:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table));",
          "1296:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/edit'), [",
          "",
          "[Added Lines]",
          "1278:                     $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/add'), [",
          "1280:                             'name' => 'option '.$i,",
          "1285:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/add'), $data_table_primary);",
          "1291:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table));",
          "1296:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/edit'), [",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1303:         $response->assertSuccessful();",
          "1307:             'slug' => $table,",
          "1308:             'data' => [",
          "1309:                 [",
          "",
          "[Removed Lines]",
          "1306:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/delete'), [",
          "",
          "[Added Lines]",
          "1306:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/entities/'.$table.'/delete'), [",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1653:                 }",
          "1654:                 PHP;",
          "1655:                 $model_path = app_path(\"Models/$model_file_name\");",
          "1657:                     file_put_contents($model_path, $model_body);",
          "1658:                 }",
          "",
          "[Removed Lines]",
          "1656:                 if (!file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "1656:                 if (! file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1674:             $controller_data = [];",
          "1675:             if (rand(0, 1)) {",
          "1678:                 $controller_file_name = \"{$controller_name}.php\";",
          "1679:                 $controller_body = <<<PHP",
          "1680:                 <?php",
          "",
          "[Removed Lines]",
          "1677:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "",
          "[Added Lines]",
          "1677:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1683:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "1684:                 PHP;",
          "1685:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "1687:                     file_put_contents($controller_path, $controller_body);",
          "1688:                 }",
          "",
          "[Removed Lines]",
          "1686:                 if (!file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "1686:                 if (! file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1963:                 }",
          "1964:                 PHP;",
          "1965:                 $model_path = app_path(\"Models/$model_file_name\");",
          "1967:                     file_put_contents($model_path, $model_body);",
          "1968:                 }",
          "",
          "[Removed Lines]",
          "1966:                 if (!file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "1966:                 if (! file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1984:             $controller_data = [];",
          "1985:             if (rand(0, 1)) {",
          "1988:                 $controller_file_name = \"{$controller_name}.php\";",
          "1989:                 $controller_body = <<<PHP",
          "1990:                 <?php",
          "",
          "[Removed Lines]",
          "1987:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "",
          "[Added Lines]",
          "1987:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1993:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "1994:                 PHP;",
          "1995:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "1997:                     file_put_contents($controller_path, $controller_body);",
          "1998:                 }",
          "",
          "[Removed Lines]",
          "1996:                 if (!file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "1996:                 if (! file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2013:             $request_body = [",
          "2014:                 'name' =>  $table_name,",
          "2015:                 'slug' =>  $table_name,",
          "2018:                 'icon' =>  'add',",
          "2019:                 'modelName' =>  $model,",
          "2020:                 'policyName' =>  '',",
          "",
          "[Removed Lines]",
          "2016:                 'displayNameSingular' =>  $table_label . '(update)',",
          "2017:                 'displayNamePlural' =>  $table_label . '(update)',",
          "",
          "[Added Lines]",
          "2016:                 'displayNameSingular' =>  $table_label.'(update)',",
          "2017:                 'displayNamePlural' =>  $table_label.'(update)',",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2100:             $controller_name = \"{$name}Controller.php\";",
          "2102:             if (file_exists($controller_path)) {",
          "2103:                 unlink($controller_path);",
          "2104:             }",
          "2107:             $model_name = \"{$name}.php\";",
          "2109:             if (file_exists($model_path)) {",
          "2110:                 unlink($model_path);",
          "2111:             }",
          "",
          "[Removed Lines]",
          "2101:             $controller_path = app_path('Http/Controllers/' . $controller_name);",
          "2108:             $model_path = app_path('Models/' . $model_name);",
          "",
          "[Added Lines]",
          "2101:             $controller_path = app_path('Http/Controllers/'.$controller_name);",
          "2108:             $model_path = app_path('Models/'.$model_name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6545cda09a41b0578a11a84a18668798a35a2f34",
      "candidate_info": {
        "commit_hash": "6545cda09a41b0578a11a84a18668798a35a2f34",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/6545cda09a41b0578a11a84a18668798a35a2f34",
        "files": [
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "commit",
        "before_after_code_files": [
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1812:             }",
          "1813:         }",
          "1819:     }",
          "1821:     public function testReadDataEntityCrudManagement()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1815:         CallHelperTest::setCache(",
          "1816:             $this->KEY_EMPTY_DATA_ADD_ENTITY,",
          "1817:             $data_add_entities",
          "1818:         );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d1905c8d8f6c33dd04204c85a93f3c506c0dfac",
      "candidate_info": {
        "commit_hash": "4d1905c8d8f6c33dd04204c85a93f3c506c0dfac",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/4d1905c8d8f6c33dd04204c85a93f3c506c0dfac",
        "files": [
          "src/Helpers/GetData.php"
        ],
        "message": "remove coment in GetData",
        "before_after_code_files": [
          "src/Helpers/GetData.php||src/Helpers/GetData.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php"
        ]
      }
    },
    {
      "candidate_hash": "7f55842eb6f7b1b68c20b75d7d321cd7c85b75d7",
      "candidate_info": {
        "commit_hash": "7f55842eb6f7b1b68c20b75d7d321cd7c85b75d7",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/7f55842eb6f7b1b68c20b75d7d321cd7c85b75d7",
        "files": [
          "src/Commands/BadasoSetup.php",
          "src/Config/badaso.php",
          "src/Controllers/BadasoAuthController.php",
          "src/Controllers/BadasoMaintenanceController.php",
          "src/Middleware/ApiRequest.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Commands/BadasoSetup.php||src/Commands/BadasoSetup.php",
          "src/Config/badaso.php||src/Config/badaso.php",
          "src/Controllers/BadasoAuthController.php||src/Controllers/BadasoAuthController.php",
          "src/Controllers/BadasoMaintenanceController.php||src/Controllers/BadasoMaintenanceController.php",
          "src/Middleware/ApiRequest.php||src/Middleware/ApiRequest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Commands/BadasoSetup.php||src/Commands/BadasoSetup.php": [
          "File: src/Commands/BadasoSetup.php -> src/Commands/BadasoSetup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "258:             'MIX_DEFAULT_MENU' => 'general',",
          "259:             'MIX_BADASO_MENU' => '${MIX_DEFAULT_MENU}',",
          "260:             'MIX_ADMIN_PANEL_ROUTE_PREFIX' => 'badaso-dashboard',",
          "262:             'MIX_API_ROUTE_PREFIX' => 'badaso-api',",
          "263:             'MIX_LOG_VIEWER_ROUTE' => '\"log-viewer\"',",
          "264:             'MIX_FIREBASE_API_KEY' => '',",
          "",
          "[Removed Lines]",
          "261:             \"MIX_BADASO_SECRET_LOGIN_PREFIX\" =>'badaso-secret-login',",
          "",
          "[Added Lines]",
          "261:             'MIX_BADASO_SECRET_LOGIN_PREFIX' =>'badaso-secret-login',",
          "",
          "---------------"
        ],
        "src/Config/badaso.php||src/Config/badaso.php": [
          "File: src/Config/badaso.php -> src/Config/badaso.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:         'web' => [],",
          "27:         'badaso' => [",
          "28:             '/maintenance',",
          "30:         ],",
          "31:         'api' => [",
          "32:             '/v1/configurations/applyable',",
          "33:             '/v1/maintenance',",
          "35:             '/v1/file/*',",
          "36:         ],",
          "37:     ],",
          "",
          "[Removed Lines]",
          "29:             '/' . env('MIX_BADASO_SECRET_LOGIN_PREFIX')",
          "34:             '/v1/auth/'. env('MIX_BADASO_SECRET_LOGIN_PREFIX'),",
          "",
          "[Added Lines]",
          "29:             '/'.env('MIX_BADASO_SECRET_LOGIN_PREFIX'),",
          "34:             '/v1/auth/'.env('MIX_BADASO_SECRET_LOGIN_PREFIX'),",
          "",
          "---------------"
        ],
        "src/Controllers/BadasoAuthController.php||src/Controllers/BadasoAuthController.php": [
          "File: src/Controllers/BadasoAuthController.php -> src/Controllers/BadasoAuthController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: use Uasoft\\Badaso\\Helpers\\Config;",
          "18: use Uasoft\\Badaso\\Mail\\ForgotPassword;",
          "19: use Uasoft\\Badaso\\Mail\\SendUserVerification;",
          "21: use Uasoft\\Badaso\\Models\\Configuration;",
          "22: use Uasoft\\Badaso\\Models\\EmailReset;",
          "23: use Uasoft\\Badaso\\Models\\PasswordReset;",
          "",
          "[Removed Lines]",
          "20: use Uasoft\\Badaso\\Middleware\\BadasoAuthenticate;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:                 'email' => [",
          "49:                     'required',",
          "50:                     function ($attribute, $value, $fail) use ($credentials) {",
          "52:                             $fail(__('badaso::validation.auth.invalid_credentials'));",
          "53:                         }",
          "54:                     },",
          "",
          "[Removed Lines]",
          "51:                         if (!$token = auth()->attempt($credentials)) {",
          "",
          "[Added Lines]",
          "50:                         if (! $token = auth()->attempt($credentials)) {",
          "",
          "---------------"
        ],
        "src/Controllers/BadasoMaintenanceController.php||src/Controllers/BadasoMaintenanceController.php": [
          "File: src/Controllers/BadasoMaintenanceController.php -> src/Controllers/BadasoMaintenanceController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     private function checkMaintenanceConfiguration()",
          "92:     {",
          "95:                 return true;",
          "97:                 return false;",
          "98:             }",
          "101:                 $configuration_model = ConfigurationRedis::get();",
          "102:                 $maintenance = $configuration_model->where('key', 'maintenance')->firstOrFail();",
          "104:                 return $maintenance->value == '1' ? true : false;",
          "106:                 $maintenance = Configuration::where('key', 'maintenance')->firstOrFail();",
          "108:                 return $maintenance->value == '1' ? true : false;",
          "",
          "[Removed Lines]",
          "93:         if(isset($this->badaso_maintenance)){",
          "94:             if($this->badaso_maintenance == true){",
          "96:             }else{",
          "99:         } else{",
          "100:             try{",
          "105:             } catch(Exception $e){",
          "",
          "[Added Lines]",
          "93:         if (isset($this->badaso_maintenance)) {",
          "94:             if ($this->badaso_maintenance == true) {",
          "96:             } else {",
          "99:         } else {",
          "100:             try {",
          "105:             } catch (Exception $e) {",
          "",
          "---------------"
        ],
        "src/Middleware/ApiRequest.php||src/Middleware/ApiRequest.php": [
          "File: src/Middleware/ApiRequest.php -> src/Middleware/ApiRequest.php"
        ]
      }
    },
    {
      "candidate_hash": "20b75483c29335fd5c7bac979d1680e50a320668",
      "candidate_info": {
        "commit_hash": "20b75483c29335fd5c7bac979d1680e50a320668",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/20b75483c29335fd5c7bac979d1680e50a320668",
        "files": [
          "src/Badaso.php",
          "src/Controllers/BadasoCRUDController.php",
          "src/Controllers/BadasoTableController.php",
          "src/Controllers/Controller.php",
          "src/Helpers/GetData.php",
          "src/resources/js/lang/modules/en.js",
          "src/resources/js/pages/crud-generated/add.vue",
          "src/resources/js/pages/crud-generated/browse.vue",
          "src/resources/js/pages/crud-generated/edit.vue",
          "src/resources/js/pages/crud-generated/read.vue",
          "src/resources/js/pages/crud-management/add.vue",
          "src/resources/js/pages/crud-management/edit.vue",
          "src/resources/js/router/admin/configuration-router.js",
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "add feature belongs to many",
        "before_after_code_files": [
          "src/Badaso.php||src/Badaso.php",
          "src/Controllers/BadasoCRUDController.php||src/Controllers/BadasoCRUDController.php",
          "src/Controllers/BadasoTableController.php||src/Controllers/BadasoTableController.php",
          "src/Controllers/Controller.php||src/Controllers/Controller.php",
          "src/Helpers/GetData.php||src/Helpers/GetData.php",
          "src/resources/js/lang/modules/en.js||src/resources/js/lang/modules/en.js",
          "src/resources/js/pages/crud-generated/add.vue||src/resources/js/pages/crud-generated/add.vue",
          "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue",
          "src/resources/js/pages/crud-generated/edit.vue||src/resources/js/pages/crud-generated/edit.vue",
          "src/resources/js/pages/crud-generated/read.vue||src/resources/js/pages/crud-generated/read.vue",
          "src/resources/js/pages/crud-management/add.vue||src/resources/js/pages/crud-management/add.vue",
          "src/resources/js/pages/crud-management/edit.vue||src/resources/js/pages/crud-management/edit.vue",
          "src/resources/js/router/admin/configuration-router.js||src/resources/js/router/admin/configuration-router.js",
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Badaso.php||src/Badaso.php": [
          "File: src/Badaso.php -> src/Badaso.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         'belongs_to',",
          "68:         'has_one',",
          "69:         'has_many',",
          "70:     ];",
          "72:     protected $protected_tables = [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:         'belongs_to_many',",
          "",
          "---------------"
        ],
        "src/Controllers/BadasoCRUDController.php||src/Controllers/BadasoCRUDController.php": [
          "File: src/Controllers/BadasoCRUDController.php -> src/Controllers/BadasoCRUDController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use Exception;",
          "6: use Illuminate\\Filesystem\\Filesystem as LaravelFileSystem;",
          "7: use Illuminate\\Http\\Request;",
          "8: use Illuminate\\Support\\Facades\\DB;",
          "9: use Illuminate\\Support\\Facades\\Schema;",
          "10: use Illuminate\\Support\\Str;",
          "11: use Illuminate\\Validation\\Rule;",
          "12: use Uasoft\\Badaso\\Database\\Schema\\SchemaManager;",
          "13: use Uasoft\\Badaso\\Events\\CRUDDataAdded;",
          "14: use Uasoft\\Badaso\\Events\\CRUDDataDeleted;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: use Illuminate\\Support\\Facades\\Artisan;",
          "13: use Uasoft\\Badaso\\ContentManager\\FileGenerator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: class BadasoCRUDController extends Controller",
          "28: {",
          "29:     public function browse(Request $request)",
          "30:     {",
          "31:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     private $file_generator;",
          "34:     private $file_name;",
          "36:     public function __construct(FileGenerator $file_generator)",
          "37:     {",
          "38:         $this->file_generator = $file_generator;",
          "39:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:     public function edit(Request $request)",
          "127:     {",
          "128:         DB::beginTransaction();",
          "130:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:         $this->addTablePolymorphism($request);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:                     'required',",
          "145:                     function ($attribute, $value, $fail) use ($request) {",
          "146:                         if (! Schema::hasColumn($request->name, $value)) {",
          "148:                         } else {",
          "149:                             $table_fields = SchemaManager::describeTable($request->name);",
          "150:                             $field = collect($table_fields)->where('field', $value)->first();",
          "",
          "[Removed Lines]",
          "147:                             $fail(__('badaso::validation.crud.table_column_not_found', ['table_column' => \"$request->name.{$value}\"]));",
          "",
          "[Added Lines]",
          "161:                             $split_attribute = explode('.', $attribute);",
          "162:                             $split_attribute[2] = 'relation_type';",
          "163:                             $field_to_relation = join('.', $split_attribute);",
          "164:                             if (!$field_to_relation == 'belongs_to_many') {",
          "165:                                 $request->{$attribute} == $value ? $value : $fail(__('badaso::validation.crud.table_column_not_found', ['table_column' => \"$request->name.{$value}\"]));",
          "166:                             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "231:                     if (isset($data_row['destination_table_display_more_column'])) {",
          "232:                         $relation['destination_table_display_more_column'] = $data_row['destination_table_display_more_column'];",
          "233:                     }",
          "235:                         $new_data_row->relation = json_encode($relation);",
          "236:                     }",
          "237:                 }",
          "239:                 $new_data_row->order = $index + 1;",
          "240:                 $new_data_row->save();",
          "",
          "[Removed Lines]",
          "234:                     if (count($relation) == 5) {",
          "",
          "[Added Lines]",
          "253:                     if (in_array(count($relation), range(4, 5))) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "278:     public function add(Request $request)",
          "279:     {",
          "280:         DB::beginTransaction();",
          "282:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:         $this->addTablePolymorphism($request);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "296:                     'required',",
          "297:                     function ($attribute, $value, $fail) use ($request) {",
          "298:                         if (! Schema::hasColumn($request->name, $value)) {",
          "300:                         } else {",
          "301:                             $table_fields = SchemaManager::describeTable($request->name);",
          "302:                             $field = collect($table_fields)->where('field', $value)->first();",
          "",
          "[Removed Lines]",
          "299:                             $fail(__('badaso::validation.crud.table_column_not_found', ['table_column' => \"$request->name.{$value}\"]));",
          "",
          "[Added Lines]",
          "319:                             $split_attribute = explode('.', $attribute);",
          "320:                             $split_attribute[2] = 'relation_type';",
          "321:                             $field_to_relation = join('.', $split_attribute);",
          "322:                             if(!$field_to_relation == 'belongs_to_many'){",
          "323:                                 $fail(__('badaso::validation.crud.table_column_not_found', ['table_column' => \"$request->name.{$value}\"]));",
          "324:                             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "376:                 if (isset($data_row['destination_table_display_more_column'])) {",
          "377:                     $relation['destination_table_display_more_column'] = $data_row['destination_table_display_more_column'];",
          "378:                 }",
          "381:                     $new_data_row->relation = json_encode($relation);",
          "382:                 }",
          "383:                 $new_data_row->order = $index + 1;",
          "",
          "[Removed Lines]",
          "380:                 if (count($relation) == 5 && $data_row['type'] == 'relation') {",
          "",
          "[Added Lines]",
          "404:                 if (in_array(count($relation), range(4,5)) && $data_row['type'] == 'relation') {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "524:         return false;",
          "525:     }",
          "526: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551:     private function addTablePolymorphism($request){",
          "552:         foreach ($request['rows'] as $key => $value) {",
          "553:             if (isset($value['relation_type']) && $value['relation_type'] == 'belongs_to_many') {",
          "555:                 $table = $value['field'];",
          "556:                 $rows = [",
          "557:                     0 => [",
          "558:                         \"id\" => \"id\",",
          "559:                         \"field_name\" => \"id\",",
          "560:                         \"field_type\" => \"bigint\",",
          "561:                         \"field_length\" => null,",
          "562:                         \"field_null\" => false,",
          "563:                         \"field_attribute\" => true,",
          "564:                         \"field_increment\" => true,",
          "565:                         \"field_index\" => \"primary\",",
          "566:                         \"field_default\" => null,",
          "567:                         \"undeletable\" => true,",
          "568:                     ],",
          "569:                     1 => [",
          "570:                         \"id\" => $request['name'] . \"_id\",",
          "571:                         \"field_name\" => $request['name'] . \"_id\",",
          "572:                         \"field_type\" => \"bigint\",",
          "573:                         \"field_length\" => null,",
          "574:                         \"field_null\" => false,",
          "575:                         \"field_attribute\" => true,",
          "576:                         \"field_increment\" => false,",
          "577:                         \"field_index\" => \"foreign\",",
          "578:                         \"field_default\" => null,",
          "579:                     ],",
          "580:                     2 => [",
          "581:                         \"id\" => $value['destination_table'] . \"_id\",",
          "582:                         \"field_name\" => $value['destination_table'] . \"_id\",",
          "583:                         \"field_type\" => \"bigint\",",
          "584:                         \"field_length\" => null,",
          "585:                         \"field_null\" => false,",
          "586:                         \"field_attribute\" => true,",
          "587:                         \"field_increment\" => false,",
          "588:                         \"field_index\" => \"foreign\",",
          "589:                         \"field_default\" => null,",
          "590:                     ],",
          "591:                     3 => [",
          "592:                         \"field_name\" => \"created_at\",",
          "593:                         \"field_type\" => \"timestamp\",",
          "594:                         \"field_length\" => null,",
          "595:                         \"field_null\" => true,",
          "596:                         \"field_attribute\" => false,",
          "597:                         \"field_increment\" => false,",
          "598:                         \"field_index\" => null,",
          "599:                         \"field_default\" => null,",
          "600:                         \"undeletable\" => true,",
          "601:                         \"indexes\" => true,",
          "602:                     ],",
          "603:                     4 => [",
          "604:                         \"field_name\" => \"updated_at\",",
          "605:                         \"field_type\" => \"timestamp\",",
          "606:                         \"field_length\" => null,",
          "607:                         \"field_null\" => true,",
          "608:                         \"field_attribute\" => false,",
          "609:                         \"field_increment\" => false,",
          "610:                         \"field_index\" => null,",
          "611:                         \"field_default\" => null,",
          "612:                         \"undeletable\" => true,",
          "613:                     ]",
          "614:                 ];",
          "616:                 $relations = [",
          "617:                     $request['name'] . \"_id\" => [",
          "618:                         \"source_field\" => $request['name'] . \"_id\",",
          "619:                         \"target_table\" => $request['name'],",
          "620:                         \"target_field\" => \"id\",",
          "621:                         \"on_delete\" => \"cascade\",",
          "622:                         \"on_update\" => \"restrict\",",
          "623:                     ],",
          "624:                     $value['destination_table'] . \"_id\" => [",
          "625:                         \"source_field\" => $value['destination_table'] . \"_id\",",
          "626:                         \"target_table\" => $value['destination_table'],",
          "627:                         \"target_field\" => \"id\",",
          "628:                         \"on_delete\" => \"cascade\",",
          "629:                         \"on_update\" => \"restrict\",",
          "630:                     ]",
          "631:                 ];",
          "632:                 if(!Schema::hasTable($table)){",
          "633:                     $this->file_name = $this->file_generator->generateBDOMigrationFile($table, 'create', $rows, $relations);",
          "634:                     $exitCode = Artisan::call('migrate', [",
          "635:                         '--path' => 'database/migrations/badaso/',",
          "636:                         '--force' => true,",
          "637:                     ]);",
          "638:                 }",
          "639:             }",
          "640:         }",
          "641:     }",
          "",
          "---------------"
        ],
        "src/Controllers/BadasoTableController.php||src/Controllers/BadasoTableController.php": [
          "File: src/Controllers/BadasoTableController.php -> src/Controllers/BadasoTableController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:                         $destination_table_display_column,",
          "189:                     ];",
          "192:                         foreach ($destination_table_display_more_column as $index => $item_destination_table_display_more_column) {",
          "193:                             if (! in_array($item_destination_table_display_more_column, $arr_query_select)) {",
          "194:                                 $arr_query_select[] = $item_destination_table_display_more_column;",
          "",
          "[Removed Lines]",
          "191:                     if (count($destination_table_display_more_column) > 0) {",
          "",
          "[Added Lines]",
          "191:                     if (isset($destination_table_display_more_column)) {",
          "",
          "---------------"
        ],
        "src/Controllers/Controller.php||src/Controllers/Controller.php": [
          "File: src/Controllers/Controller.php -> src/Controllers/Controller.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:     public function getDataDetail($slug, $id)",
          "233:     {",
          "234:         $data_type = $this->getDataType($slug);",
          "235:         $fields = collect($data_type->dataRows)->where('read', 1)->pluck('field')->all();",
          "236:         $ids = collect($data_type->dataRows)->where('field', 'id')->pluck('field')->all();",
          "238:         $data = null;",
          "239:         $record = null;",
          "",
          "[Removed Lines]",
          "237:         $fields = array_merge($fields, $ids);",
          "",
          "[Added Lines]",
          "235:         $data_rows = collect($data_type->dataRows);",
          "238:         $field_manytomany = [];",
          "240:         foreach ($data_rows as $key => $data_row) {",
          "241:             if (isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "242:                 $field_manytomany[] = $data_row['field'];",
          "243:             }",
          "244:         }",
          "246:         $fields = array_diff(array_merge($fields, $ids), $field_manytomany);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:         } else {",
          "259:             $record = DB::table($data_type->name)->select($fields)->where('id', $id)->first();",
          "260:         }",
          "262:         $record = GetData::getRelationData($data_type, $record);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270:         if(count($field_manytomany) > 0){",
          "271:             foreach ($data_rows as $key => $data_row) {",
          "272:                 if (isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many') {",
          "273:                     $table_name = $data_type['name'];",
          "274:                     $table_destination = $data_row->relation['destination_table'];",
          "275:                     $table_manytomany = $data_row['field'];",
          "276:                     $data_relation = DB::table($table_manytomany)",
          "277:                         ->leftjoin($table_name, $table_manytomany . '.id', '=', $table_name . '_id')",
          "278:                         ->select($table_name . '_id', $table_destination . '_id')",
          "279:                         ->get();",
          "280:                     $record->$table_manytomany = $data_relation;",
          "281:                 }",
          "282:             }",
          "283:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "268:     {",
          "269:         $data_rows = collect($data_type->dataRows)->where('add', 1)->all();",
          "270:         $model = null;",
          "271:         if ($data_type->model_name) {",
          "272:             $model = app($data_type->model_name);",
          "273:             foreach ($data as $key => $value) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:         $multi_select = [];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "276:                     $model->{$key} = $this->getContentByType($data_type, $data_row, $value);",
          "277:                 }",
          "278:             }",
          "279:             $model->save();",
          "280:         } else {",
          "281:             $new_data = [];",
          "282:             $timestamp = date('Y-m-d H:i:s');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:             foreach ($data_rows as $key => $data_row) {",
          "305:                 if(isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many'){",
          "306:                             $field = $data_row['field'];",
          "307:                             $data_manytomany = $data[$field];",
          "308:                             $table_primary = $data_type['name'];",
          "309:                             $table_manytomany = $data_row['field'];",
          "310:                             $table_relation = $data_row['relation']['destination_table'];",
          "311:                             $model_manytomany = Badaso::model('DataType')::where('name', $table_relation)->first();",
          "313:                             collect($model)->map(function($models, $index) use ($model,$field)  {",
          "314:                                 if($index == $field){",
          "315:                                     unset($model[$index]);",
          "316:                                 }",
          "317:                             });",
          "319:                             $multi_select[] = [",
          "320:                                 'model'           => $model_manytomany['model_name'],",
          "321:                                 'content'         => $data_manytomany,",
          "322:                                 'table'           => $table_manytomany,",
          "323:                                 'foreignPivotKey' => $table_primary . '_id' ? $table_primary . '_id' : null,",
          "324:                                 'relatedPivotKey' => $table_relation . '_id' ? $table_relation . '_id' : null,",
          "325:                                 'parentKey'       => null,",
          "326:                                 'relatedKey'      => 'id',",
          "327:                             ];",
          "328:                 }",
          "329:             }",
          "331:             foreach ($multi_select as $key => $sync_data) {",
          "332:                 try {",
          "333:                     $model->belongsToMany(",
          "334:                         $sync_data['model'],",
          "335:                         $sync_data['table'],",
          "336:                         $sync_data['foreignPivotKey'],",
          "337:                         $sync_data['relatedPivotKey'],",
          "338:                         $sync_data['parentKey'],",
          "339:                         $sync_data['relatedKey']",
          "340:                     )->sync($sync_data['content']);",
          "341:                 } catch (Exception $e) {",
          "342:                 }",
          "343:             }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "288:                     if ($data_row['type'] == 'upload_image_multiple') {",
          "289:                         $new_data[$key] = $this->getContentByType($data_type, $data_row, $value);",
          "290:                     }",
          "291:                     $new_data[$key] = $this->getContentByType($data_type, $data_row, $value);",
          "292:                 } else {",
          "293:                     if (in_array($key, ['created_at', 'updated_at'])) {",
          "294:                         $new_data[$key] = $value;",
          "295:                     }",
          "296:                 }",
          "297:             }",
          "298:             $id = DB::table($data_type->name)->insertGetId($new_data);",
          "299:             $model = DB::table($data_type->name)->where('id', $id)->first();",
          "300:         }",
          "302:         return $model;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:                     if($data_row['type'] == 'relation' && $data_row['relation']['relation_type'] == 'belongs_to_many'){",
          "356:                             $table_manytomany = $data_row['field'];",
          "357:                             $table_primary = $data_type['name'];",
          "358:                             $table_relation = $data_row['relation']['destination_table'];",
          "359:                             $field = $data_row['field'];",
          "360:                     }",
          "363:                     if($data_row['type'] == 'relation' && $data_row['relation']['relation_type'] == 'belongs_to_many'){",
          "364:                         $field_manytomany = $data_row['field'];",
          "365:                         $table_relation = $data_row['relation']['destination_table'];",
          "366:                         unset($new_data[$field_manytomany]);",
          "367:                     }",
          "377:             foreach ($data as $key => $value) {",
          "378:                 $data_row = collect($data_rows)->where('field', $key)->first();",
          "379:                 if (isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "380:                     $field_manytomany = $data_row['field'];",
          "381:                     $table_relation = $data_row['relation']['destination_table'];",
          "382:                     $data_manytomany = $data[$field_manytomany];",
          "383:                     $table_primary = $data_type['name'];",
          "384:                     foreach ($data_manytomany as $key => $value) {",
          "385:                         try {",
          "386:                             DB::table($field_manytomany)->insert([",
          "387:                                 $table_relation . '_id' => $value,",
          "388:                                 $table_primary . '_id' => $id",
          "389:                             ]);",
          "390:                         } catch (Exception $e) {",
          "391:                         }",
          "392:                     }",
          "393:                 }",
          "394:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308:         $model = null;",
          "309:         $id = $data['id'];",
          "310:         $data = collect($data)->forget('id')->all();",
          "311:         if ($data_type->model_name) {",
          "312:             $model = app($data_type->model_name);",
          "313:             $model = $model::find($id);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406:         $multi_select = [];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "337:                         }",
          "338:                     }",
          "339:                     $model->{$key} = $this->getContentByType($data_type, $data_row, $value);",
          "340:                 }",
          "341:             }",
          "342:             $model->save();",
          "343:         } else {",
          "344:             $new_data = [];",
          "345:             $data['updated_at'] = date('Y-m-d H:i:s');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437:                     if (isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "438:                         $field = $data_row['field'];",
          "439:                         $data_manytomany = $data[$field];",
          "440:                         $table_primary = $data_type['name'];",
          "441:                         $has_relation_belongs_to_many = true;",
          "442:                         $table_manytomany = $data_row['field'];",
          "443:                         $table_relation = $data_row['relation']['destination_table'];",
          "444:                         $model_manytomany = Badaso::model('DataType')::where('name', $table_relation)->first();",
          "446:                         collect($model)->map(function ($models, $index) use ($model, $field) {",
          "447:                             if ($index == $field) {",
          "448:                                 unset($model[$index]);",
          "449:                             }",
          "450:                         });",
          "452:                         $multi_select[] = [",
          "453:                             'model'           => $model_manytomany['model_name'],",
          "454:                             'content'         => $data_manytomany,",
          "455:                             'table'           => $table_manytomany,",
          "456:                             'foreignPivotKey' => $table_primary . '_id' ? $table_primary . '_id' : null,",
          "457:                             'relatedPivotKey' => $table_relation . '_id' ? $table_relation . '_id' : null,",
          "458:                             'parentKey'       => null,",
          "459:                             'relatedKey'      => 'id',",
          "460:                         ];",
          "461:                     }",
          "466:             foreach ($multi_select as $key => $sync_data) {",
          "467:                 try {",
          "468:                     $model->belongsToMany(",
          "469:                         $sync_data['model'],",
          "470:                         $sync_data['table'],",
          "471:                         $sync_data['foreignPivotKey'],",
          "472:                         $sync_data['relatedPivotKey'],",
          "473:                         $sync_data['parentKey'],",
          "474:                         $sync_data['relatedKey']",
          "475:                     )->sync($sync_data['content']);",
          "476:                 } catch (Exception $e) {",
          "477:                     dd($e);",
          "478:                 }",
          "479:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "349:                 $data_row = collect($data_rows)->where('field', $key)->first();",
          "350:                 if (is_null($data_row)) {",
          "352:                 } else {",
          "353:                     if (in_array($data_row->type, [",
          "354:                         'upload_image',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489:                 } else if(isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many'){",
          "490:                     $table_manytomany = $data_row->field;",
          "491:                     $table_relation = $data_row->relation['destination_table'];",
          "492:                     $table_primary = $data_type['name'];",
          "493:                     $table_primary_id = $table_primary . '_id';",
          "494:                     $table_relation_id = $table_relation . '_id';",
          "495:                     $data_manytomany = $data[$table_manytomany];",
          "497:                     $data_table_manytomany = DB::table($table_manytomany)->where($table_primary_id, $id)->get();",
          "498:                     foreach ($data_table_manytomany as $key => $value_table_manytomany) {",
          "499:                         if(!in_array($value_table_manytomany->{$table_relation_id}, $data_manytomany)){",
          "500:                             DB::table($table_manytomany)",
          "501:                             ->where($table_primary_id, $id)",
          "502:                             ->where($table_relation_id, $value_table_manytomany->{$table_relation_id})",
          "503:                             ->delete();",
          "504:                         }",
          "505:                     }",
          "506:                     foreach ($data_manytomany as $key => $id_destination_table) {",
          "507:                         $data_table_manytomany = DB::table($table_manytomany)",
          "508:                                                 ->where($table_relation_id, $id_destination_table)",
          "509:                                                 ->where($table_primary_id, $id)",
          "510:                                                 ->first();",
          "511:                         if($data_table_manytomany){",
          "512:                             try {",
          "513:                                 DB::table($table_manytomany)",
          "514:                                     ->where($table_relation_id, $id_destination_table)",
          "515:                                     ->where($table_primary_id, $id)",
          "516:                                     ->update([",
          "517:                                         $table_relation_id => $id_destination_table,",
          "518:                                         $table_primary_id => $id",
          "519:                                     ]);",
          "520:                             } catch (Exception $e) {",
          "521:                             }",
          "522:                         }else{",
          "523:                             try {",
          "524:                                 DB::table($table_manytomany)->insert([",
          "525:                                     $table_relation_id => $id_destination_table,",
          "526:                                     $table_primary_id => $id",
          "527:                                 ]);",
          "528:                             } catch (Exception $e) {",
          "529:                             }",
          "530:                         }",
          "531:                     }",
          "",
          "---------------"
        ],
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     public static function clientSideWithModel($data_type, $builder_params, $only_data_soft_delete = false)",
          "74:     {",
          "75:         $fields = collect($data_type->dataRows)->where('browse', 1)->pluck('field')->all();",
          "76:         $ids = collect($data_type->dataRows)->where('field', 'id')->pluck('field')->all();",
          "79:         $model = app($data_type->model_name);",
          "80:         $order_field = $builder_params['order_field'];",
          "81:         $order_direction = $builder_params['order_direction'];",
          "",
          "[Removed Lines]",
          "77:         $fields = array_merge($fields, $ids);",
          "",
          "[Added Lines]",
          "75:         $data_rows = collect($data_type->dataRows);",
          "78:         $field_manytomany = [];",
          "80:         foreach ($data_rows as $key => $data_row) {",
          "81:             if (isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'belongs_to_many') {",
          "82:                 $field_manytomany[] = $data_row['field'];",
          "83:             }",
          "84:         }",
          "86:         $fields = array_diff(array_merge($fields, $ids), $field_manytomany);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:                     }",
          "114:                 }",
          "115:             }",
          "117:             $records[] = self::getRelationData($data_type, $record);",
          "118:         }",
          "123:         return $entities;",
          "124:     }",
          "",
          "[Removed Lines]",
          "120:         $entities['data'] = $records;",
          "121:         $entities['total'] = count($records);",
          "",
          "[Added Lines]",
          "129:         $records = collect($records)->map(function ($record) use ($data_rows) {",
          "130:             foreach ($data_rows as $index => $data_row) {",
          "131:                  if (isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many') {",
          "132:                     $table_manytomany = $data_row['field'];",
          "133:                     $data_relation = DB::table($table_manytomany)",
          "134:                         ->get();",
          "135:                     $record->$table_manytomany = $data_relation;",
          "136:                  };",
          "137:                 }",
          "138:                 return $record;",
          "139:         });",
          "141:         $data = [];",
          "142:         foreach ($records as $row) {",
          "143:             $data[] = self::getRelationData($data_type, $row);",
          "144:         }",
          "146:         $entities['data'] = $data;",
          "147:         $entities['total'] = count($data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "198:         $data_rows = collect($data_type->dataRows);",
          "199:         $fields = $data_rows->where('browse', 1)->pluck('field')->all();",
          "200:         $ids = $data_rows->where('field', 'id')->pluck('field')->all();",
          "202:         $order_field = $builder_params['order_field'];",
          "203:         $order_direction = $builder_params['order_direction'];",
          "205:         if ($order_field) {",
          "207:         } else {",
          "208:             $records = DB::table($data_type->name)->select($fields);",
          "209:         }",
          "",
          "[Removed Lines]",
          "201:         $fields = array_merge($fields, $ids);",
          "206:             $records = DB::table($data_type->name)->select($fields)->orderBy($order_field, $order_direction);",
          "",
          "[Added Lines]",
          "226:         $field_manytomany = [];",
          "228:         foreach ($data_rows as $key => $data_row) {",
          "229:             if(isset($data_row['relation']) && $data_row['relation']['relation_type'] == 'belongs_to_many'){",
          "230:                 $field_manytomany[] = $data_row['field'];",
          "231:             }",
          "232:         }",
          "234:         $fields = array_diff(array_merge($fields, $ids), $field_manytomany) ;",
          "239:             $records = DB::table($data_type->name)->select( $fields)->orderBy($order_field, $order_direction);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "242:                         }",
          "243:                         $record->{$data_row->field} = $upload_image_multiples;",
          "244:                     }",
          "246:                     if (isset($record->{$data_row->field})) {",
          "247:                         $upload_image = $record->{$data_row->field};",
          "248:                         if (isset($upload_image)) {",
          "",
          "[Removed Lines]",
          "245:                 } elseif ($data_row->type == 'upload_image') {",
          "",
          "[Added Lines]",
          "278:                 } else if ($data_row->type == 'upload_image') {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "258:                             $record->{$data_row->field} = $upload_image;",
          "259:                         }",
          "260:                     }",
          "261:                 }",
          "262:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:                 }",
          "295:                 else if (isset($data_row->relation) && $data_row->relation['relation_type'] == 'belongs_to_many') {",
          "296:                     $table_manytomany = $data_row['field'];",
          "297:                     $data_relation = DB::table($table_manytomany)->get();",
          "298:                     $record->$table_manytomany = $data_relation;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "307:                     $destination_table_display_column,",
          "308:                 ];",
          "311:                     foreach ($destination_table_display_more_column as $index => $item_destination_table_display_more_column) {",
          "312:                         if (! in_array($item_destination_table_display_more_column, $arr_query_select)) {",
          "313:                             $arr_query_select[] = $item_destination_table_display_more_column;",
          "",
          "[Removed Lines]",
          "310:                 if (count($destination_table_display_more_column) > 0) {",
          "",
          "[Added Lines]",
          "348:                 if (isset($destination_table_display_more_column)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "316:                 }",
          "318:                 if (isset($row->{$field->field})) {",
          "329:                             }",
          "344:                 }",
          "345:             }",
          "346:         }",
          "348:         return $row;",
          "349:     }",
          "350: }",
          "",
          "[Removed Lines]",
          "319:                     $relation_data = DB::table($destination_table)->select($arr_query_select)",
          "320:                         ->where($destination_table_column, $row->{$field->field})",
          "321:                         ->get();",
          "323:                     switch ($relation_type) {",
          "324:                         case 'belongs_to':",
          "325:                             if (isset($row->{$destination_table})) {",
          "326:                                 array_push($row->{$destination_table}, collect($relation_data)->first());",
          "327:                             } else {",
          "328:                                 $row->{$destination_table} = collect($relation_data)->toArray();",
          "330:                             break;",
          "332:                         case 'has_many':",
          "333:                             $row->{$destination_table} = collect($relation_data)->toArray();",
          "334:                             break;",
          "336:                         case 'has_many':",
          "337:                             $row->{$destination_table} = collect($relation_data)->first();",
          "338:                             break;",
          "340:                         default:",
          "342:                             break;",
          "343:                     }",
          "",
          "[Added Lines]",
          "357:                     if($field->relation['relation_type'] == 'belongs_to_many'){",
          "358:                         $data_table_destination = DB::table($destination_table)->get();",
          "359:                         $table_primary_id = $data_type['name'] . '_id';",
          "360:                         $row->{$field->field}->filter(function ($fields, $key) use ($data_table_destination, $destination_table, $destination_table_display_column) {",
          "361:                             foreach ($data_table_destination as $key => $value) {",
          "362:                                 if($fields->{$destination_table.'_id'} == $value->id){",
          "363:                                     $fields->{$destination_table_display_column} = $value->{$destination_table_display_column};",
          "364:                                 }",
          "366:                         });",
          "367:                         $row->{$field->field} = $row->{$field->field}->filter(function ($field, $key) use ($row,$table_primary_id) {",
          "368:                             if($field->{$table_primary_id} == $row->id){",
          "369:                                 return $field;",
          "370:                             };",
          "371:                         });",
          "372:                     }else{",
          "373:                         $relation_data = DB::table($destination_table)->select($arr_query_select)",
          "374:                             ->where($destination_table_column, $row->{$field->field})",
          "375:                             ->get();",
          "376:                             switch ($relation_type) {",
          "377:                                 case 'belongs_to':",
          "378:                                     if (isset($row->{$destination_table})) {",
          "379:                                         array_push($row->{$destination_table}, collect($relation_data)->first());",
          "380:                                     } else {",
          "381:                                         $row->{$destination_table} = collect($relation_data)->toArray();",
          "382:                                     }",
          "383:                                     break;",
          "385:                                 case 'has_many':",
          "386:                                     $row->{$destination_table} = collect($relation_data)->toArray();",
          "387:                                     break;",
          "389:                                 case 'has_one':",
          "390:                                     $row->{$destination_table} = collect($relation_data)->first();",
          "391:                                     break;",
          "393:                                 default:",
          "395:                                     break;",
          "396:                             }",
          "397:                     }",
          "",
          "---------------"
        ],
        "src/resources/js/lang/modules/en.js||src/resources/js/lang/modules/en.js": [
          "File: src/resources/js/lang/modules/en.js -> src/resources/js/lang/modules/en.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "383:         delete: \"Delete\",",
          "384:         displayName: \"Display Name\",",
          "385:         setRelation: \"Set Relation\",",
          "386:         relationType: \"Relation Type\",",
          "387:         destinationTable: \"Destination Table\",",
          "388:         destinationTableColumn: \"Destination Column\",",
          "389:         destinationTableDisplayColumn: \"Destination Column To Display\",",
          "390:         destinationTableDisplayMoreColumn: \"More Data For API\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:         setRelationManytomany: \"Set Relation Many To Many\",",
          "389:         destinationTableManytomany: \"Destination Table Many To Many\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "501:         delete: \"Delete\",",
          "502:         displayName: \"Display Name\",",
          "503:         setRelation: \"Set Relation\",",
          "504:         relationType: \"Relation Type\",",
          "505:         destinationTable: \"Destination Table\",",
          "506:         destinationTableColumn: \"Destination Column\",",
          "507:         destinationTableDisplayColumn: \"Destination Column To Display\",",
          "508:         destinationTableDisplayMoreColumn: \"More Data For API\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:         setRelationManytomany: \"Set Relation Many To Many\",",
          "509:         destinationTableManytomany: \"Destination Table Many To Many\",",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/add.vue||src/resources/js/pages/crud-generated/add.vue": [
          "File: src/resources/js/pages/crud-generated/add.vue -> src/resources/js/pages/crud-generated/add.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:                   <badaso-text",
          "311:                     v-if=\"",
          "312:                       dataRow.type == 'relation' &&",
          "314:                     \"",
          "315:                     :label=\"dataRow.displayName\"",
          "316:                     :placeholder=\"dataRow.displayName\"",
          "",
          "[Removed Lines]",
          "313:                       dataRow.relation.relationType !== 'belongs_to'",
          "",
          "[Added Lines]",
          "313:                       dataRow.relation.relationType !== 'belongs_to' &&",
          "314:                       dataRow.relation.relationType !== 'belongs_to_many'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:                       errors[$caseConvert.stringSnakeToCamel(dataRow.field)]",
          "321:                     \"",
          "322:                   ></badaso-text>",
          "323:                 </template>",
          "324:               </vs-col>",
          "325:             </vs-row>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:                   <badaso-select-multiple",
          "325:                     v-if=\"dataRow.type == 'relation' &&",
          "326:                     dataRow.relation.relationType == 'belongs_to_many'\"",
          "327:                     :label=\"dataRow.displayName\"",
          "328:                     :placeholder=\"dataRow.displayName\"",
          "329:                     v-model=\"dataRow.value\"",
          "330:                     size=\"12\"",
          "331:                     :alert=\"",
          "332:                       errors[$caseConvert.stringSnakeToCamel(dataRow.field)]",
          "333:                     \"",
          "334:                     :items=\"",
          "335:                       relationData[",
          "336:                         $caseConvert.stringSnakeToCamel(",
          "337:                           dataRow.relation.destinationTable",
          "338:                         )",
          "339:                       ]",
          "340:                     \"",
          "341:                   ></badaso-select-multiple>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "494:           } catch (error) {}",
          "495:           return data;",
          "496:         });",
          "498:         this.dataType.dataRows = JSON.parse(JSON.stringify(dataRows));",
          "499:       } catch (error) {",
          "500:         if (error.status == 503) {",
          "501:           this.isMaintenance = true;",
          "",
          "[Removed Lines]",
          "497:         console.log(response.data.crudData.dataRows);",
          "",
          "[Added Lines]",
          "517:         console.log(this.dataType.dataRows);",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/browse.vue||src/resources/js/pages/crud-generated/browse.vue": [
          "File: src/resources/js/pages/crud-generated/browse.vue -> src/resources/js/pages/crud-generated/browse.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "1061:             return null",
          "1062:           });",
          "1063:           return flatList.join(\",\").replace(\",\", \"\");",
          "1067:       } else {",
          "1068:         return null;",
          "1069:       }",
          "",
          "[Removed Lines]",
          "1064:         } else {",
          "1065:           return record[table] ? record[table][displayColumn] : null;",
          "1066:         }",
          "",
          "[Added Lines]",
          "1064:         }  else if (relationType == \"belongs_to_many\") {",
          "1065:           let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "1066:           const lists = record[field]",
          "1067:           let flatList = []",
          "1068:           Object.keys(lists).forEach(function (ls, key) {",
          "1069:             flatList.push(lists[ls][displayColumn]);",
          "1070:           });",
          "1071:           return flatList.join(\",\").replace(\",\", \", \");",
          "1072:         }",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/edit.vue||src/resources/js/pages/crud-generated/edit.vue": [
          "File: src/resources/js/pages/crud-generated/edit.vue -> src/resources/js/pages/crud-generated/edit.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:                       ]",
          "305:                     \"",
          "306:                   ></badaso-select>",
          "307:                   <badaso-text",
          "308:                     v-if=\"",
          "309:                       dataRow.type == 'relation' &&",
          "311:                     \"",
          "312:                     :label=\"dataRow.displayName\"",
          "313:                     :placeholder=\"dataRow.displayName\"",
          "",
          "[Removed Lines]",
          "310:                       dataRow.relation.relationType !== 'belongs_to'",
          "",
          "[Added Lines]",
          "307:                   <badaso-select-multiple",
          "308:                     v-if=\"dataRow.type == 'relation' &&",
          "309:                     dataRow.relation.relationType == 'belongs_to_many'\"",
          "310:                     :label=\"dataRow.displayName\"",
          "311:                     :placeholder=\"dataRow.displayName\"",
          "312:                     v-model=\"dataRow.value\"",
          "313:                     size=\"12\"",
          "314:                     :alert=\"",
          "315:                         errors[$caseConvert.stringSnakeToCamel(dataRow.field)]",
          "316:                       \"",
          "317:                     :items=\"",
          "318:                       relationData[",
          "319:                         $caseConvert.stringSnakeToCamel(",
          "320:                           dataRow.relation.destinationTable",
          "321:                         )",
          "322:                       ]",
          "323:                     \">",
          "324:                   </badaso-select-multiple>",
          "328:                       dataRow.relation.relationType !== 'belongs_to' &&",
          "329:                       dataRow.relation.relationType !== 'belongs_to_many'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "477:             ) {",
          "478:               const val =",
          "479:                 this.record[this.$caseConvert.stringSnakeToCamel(data.field)];",
          "486:               ]",
          "487:                 ? this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "488:                 : false;",
          "489:             } else if (data.type == \"slider\") {",
          "490:               data.value = parseInt(",
          "491:                 this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "497:                 ? this.record[",
          "500:                 : null;",
          "515:             } else {",
          "516:               data.value =",
          "517:                 this.record[this.$caseConvert.stringSnakeToCamel(data.field)];",
          "",
          "[Removed Lines]",
          "480:               if (val) {",
          "481:                 data.value = val.split(\",\");",
          "482:               }",
          "483:             } else if (data.type == \"switch\") {",
          "484:               data.value = this.record[",
          "485:                 this.$caseConvert.stringSnakeToCamel(data.field)",
          "492:               );",
          "493:             } else if (data.type == \"datetime\") {",
          "494:               data.value = this.record[",
          "495:                 this.$caseConvert.stringSnakeToCamel(data.field)",
          "496:               ]",
          "498:                     this.$caseConvert.stringSnakeToCamel(data.field)",
          "499:                   ].replace(\" \", \"T\")",
          "501:             } else if (data.value == undefined && data.type == \"hidden\") {",
          "502:               data.value = data.details.value ? data.details.value : \"\";",
          "503:             } else if (",
          "504:               data.type == \"text\" ||",
          "505:               data.type == \"hidden\" ||",
          "506:               data.type == \"url\" ||",
          "507:               data.type == \"search\" ||",
          "508:               data.type == \"password\"",
          "509:             ) {",
          "510:               data.value = this.record[",
          "511:                 this.$caseConvert.stringSnakeToCamel(data.field)",
          "512:               ]",
          "513:                 ? this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "514:                 : \"\";",
          "",
          "[Added Lines]",
          "499:                 if (val) {",
          "500:                   data.value = val.split(\",\");",
          "501:                 }",
          "502:               } else if (data.type == \"switch\") {",
          "503:                 data.value = this.record[",
          "504:                   this.$caseConvert.stringSnakeToCamel(data.field)",
          "511:                 );",
          "512:               } else if (data.type == \"datetime\") {",
          "513:                 data.value = this.record[",
          "514:                   this.$caseConvert.stringSnakeToCamel(data.field)",
          "515:                 ]",
          "517:                   this.$caseConvert.stringSnakeToCamel(data.field)",
          "518:                 ].replace(\" \", \"T\")",
          "520:               } else if (data.value == undefined && data.type == \"hidden\") {",
          "521:                 data.value = data.details.value ? data.details.value : \"\";",
          "522:               } else if (",
          "523:                 data.type == \"text\" ||",
          "524:                 data.type == \"hidden\" ||",
          "525:                 data.type == \"url\" ||",
          "526:                 data.type == \"search\" ||",
          "527:                 data.type == \"password\"",
          "528:                 ) {",
          "529:                   data.value = this.record[",
          "530:                     this.$caseConvert.stringSnakeToCamel(data.field)",
          "531:                   ]",
          "532:                   ? this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "533:                   : \"\";",
          "534:               } else if (data.type == \"relation\" && data.relation.relationType == 'belongs_to_many'){",
          "535:                   let record = this.record[this.$caseConvert.stringSnakeToCamel(data.field)]",
          "536:                   let destinationTableId = data.relation.destinationTable + 'Id'",
          "537:                   data.value = []",
          "538:                   Object.entries(record).filter(function (item,key) {",
          "539:                     data.value[key] = item[1][destinationTableId];",
          "540:               });",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-generated/read.vue||src/resources/js/pages/crud-generated/read.vue": [
          "File: src/resources/js/pages/crud-generated/read.vue -> src/resources/js/pages/crud-generated/read.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:           return ls[displayColumn];",
          "321:         });",
          "322:         return flatList.join(\", \");",
          "323:       } else {",
          "324:         return record[table] ? record[table][displayColumn] : null;",
          "325:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:       } else if (dataRow.relation.relationType == \"belongs_to\") {",
          "325:         const list = record[table];",
          "326:         let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "327:         const flatList = list.map((ls) => {",
          "328:           if (ls.id == record[field]) {",
          "329:             return ls[displayColumn];",
          "330:           }",
          "331:           return null",
          "332:         });",
          "333:         return flatList.join(\",\").replace(\",\", \"\");",
          "334:       } else if (dataRow.relation.relationType == \"belongs_to_many\") {",
          "335:         let field = this.$caseConvert.stringSnakeToCamel(dataRow.field)",
          "336:         const lists = record[field]",
          "337:         let flatList = []",
          "338:         Object.keys(lists).forEach(function (ls, key) {",
          "339:           flatList.push(lists[ls][displayColumn]);",
          "340:         });",
          "341:         console.log(record);",
          "342:         return flatList.join(\",\").replace(\",\", \", \");",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-management/add.vue||src/resources/js/pages/crud-management/add.vue": [
          "File: src/resources/js/pages/crud-management/add.vue -> src/resources/js/pages/crud-management/add.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "464:                         v-model=\"field.details\"",
          "465:                         v-if=\"field.type !== 'relation'\"",
          "466:                       >",
          "468:                       <vs-button",
          "469:                         color=\"primary\"",
          "470:                         type=\"relief\"",
          "471:                         @click.stop",
          "472:                         @click=\"openRelationSetup(field)\"",
          "474:                         >{{ $t(\"crud.add.body.setRelation\") }}</vs-button",
          "475:                       >",
          "476:                       <vs-popup",
          "477:                         :title=\"$t('crud.add.body.setRelation')\"",
          "478:                         :active.sync=\"field.setRelation\"",
          "",
          "[Removed Lines]",
          "467:                       </badaso-code-editor>",
          "473:                         v-else",
          "",
          "[Added Lines]",
          "467:                     </badaso-code-editor>",
          "473:                         v-else-if=\"field.relationType !== 'belongs_to_many'\"",
          "476:                       <vs-button",
          "477:                         color=\"danger\"",
          "478:                         type=\"relief\"",
          "479:                         @click=\"dropItemManytomany(index)\"",
          "480:                         v-else-if=\"field.relationType == 'belongs_to_many'\"",
          "481:                       >",
          "482:                         <vs-icon icon=\"delete\"></vs-icon>",
          "483:                       </vs-button>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "548:                       </vs-popup>",
          "549:                     </td>",
          "550:                   </tr>",
          "551:                 </draggable>",
          "552:               </table>",
          "553:             </vs-col>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "559:                   <tr>",
          "560:                     <td></td>",
          "561:                     <vs-button",
          "562:                       color=\"primary\"",
          "563:                       type=\"relief\"",
          "564:                       @click.stop",
          "565:                       @click=\"openRelationSetupManytomany()\"",
          "566:                       >",
          "567:                       {{ $t(\"crud.add.body.setRelationManytomany\") }}",
          "568:                     </vs-button>",
          "569:                     <vs-popup",
          "570:                       :title=\"$t('crud.add.body.setRelation')\"",
          "571:                       :active.sync=\"setRelationManytomany\">",
          "572:                       <vs-row>",
          "573:                         <badaso-select size=\"12\"",
          "574:                           v-model=\"relationManytomany.relationType\"",
          "575:                           :items=\"relationTypesBelongsToMany\"",
          "576:                           :label=\"$t('crud.add.body.relationType')\"",
          "577:                         ></badaso-select>",
          "578:                         <vs-col",
          "579:                           vs-lg=\"12\"",
          "580:                           class=\"crud-management__relation-destination\">",
          "581:                           <vs-select",
          "582:                             :label=\"$t('crud.add.body.destinationTable')\"",
          "583:                             width=\"100%\"",
          "584:                             v-model=\"relationManytomany.destinationTable\"",
          "585:                             @input=\"changeTableManytomany\">",
          "586:                             <vs-select-item",
          "587:                             :key=\"index\"",
          "588:                             :value=\"item.value ? item.value : item\"",
          "589:                             :text=\"item.label ? item.label : item\"",
          "590:                               v-for=\"(item, index) in destinationTables\" />",
          "591:                           </vs-select>",
          "592:                         </vs-col>",
          "593:                         <badaso-select",
          "594:                           size=\"12\"",
          "595:                           v-model=\"relationManytomany.destinationTableColumn\"",
          "596:                           :items=\"destinationTableColumns\"",
          "597:                           :label=\"$t('crud.add.body.destinationTableColumn')\"",
          "598:                         ></badaso-select>",
          "599:                         <badaso-select",
          "600:                           size=\"12\"",
          "601:                           v-model=\"relationManytomany.destinationTableDisplayColumn\" :items=\"destinationTableColumns\"",
          "602:                           :label=\"",
          "603:                           $t('crud.add.body.destinationTableDisplayColumn')",
          "604:                           \"",
          "605:                         ></badaso-select>",
          "606:                         <vs-col vs-lg=\"14\">",
          "607:                           <badaso-collapse>",
          "608:                             <badaso-collapse-item>",
          "609:                               <h3 slot=\"header\">{{ $t(\"crud.add.title.advance\") }}</h3>",
          "610:                                 <vs-row>",
          "611:                                   <vs-col",
          "612:                                     vs-lg=\"12\"",
          "613:                                     class=\"crud-management__relation-destination\">",
          "614:                                     <vs-select",
          "615:                                       :label=\"$t('crud.add.body.destinationTableManytomany')\"",
          "616:                                       width=\"100%\"",
          "617:                                       v-model=\"relationManytomanyAdvance.destinationTableManytomany\"",
          "618:                                       >",
          "619:                                       <vs-select-item",
          "620:                                       :key=\"index\"",
          "621:                                       :value=\"item.value ? item.value : item\"",
          "622:                                       :text=\"item.label ? item.label : item\"",
          "623:                                         v-for=\"(item, index) in destinationTables\" />",
          "624:                                     </vs-select>",
          "625:                                   </vs-col>",
          "626:                               </vs-row>",
          "627:                             </badaso-collapse-item>",
          "628:                           </badaso-collapse>",
          "629:                         </vs-col>",
          "630:                       </vs-row>",
          "631:                       <vs-row vs-type=\"flex\" vs-justify=\"space-between\">",
          "632:                         <vs-col vs-lg=\"2\" vs-type=\"flex\" vs-align=\"flex-end\">",
          "633:                           <vs-button",
          "634:                             class=\"crud-management__button--block\"",
          "635:                             color=\"danger\"",
          "636:                             @click=\"cancelRelationManytomany\"",
          "637:                             type=\"relief\">",
          "638:                             {{",
          "639:                             $t(\"crud.add.body.cancelRelation\")",
          "640:                             }}",
          "641:                           </vs-button>",
          "642:                         </vs-col>",
          "643:                         <vs-col vs-lg=\"2\" vs-type=\"flex\" vs-align=\"flex-end\">",
          "644:                           <vs-button",
          "645:                               class=\"crud-management__button--block\"",
          "646:                               color=\"primary\"",
          "647:                               @click=\"saveRelationManytomany()\"",
          "648:                               type=\"relief\">{{",
          "649:                               $t(\"crud.add.body.saveRelation\") }}",
          "650:                           </vs-button>",
          "651:                         </vs-col>",
          "652:                       </vs-row>",
          "653:                     </vs-popup>",
          "654:                   </tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "652:                             v-if=\"field.type !== 'relation'\"",
          "653:                           >",
          "654:                           </badaso-code-editor>",
          "655:                           <vs-button",
          "656:                             color=\"primary\"",
          "657:                             type=\"relief\"",
          "658:                             @click.stop",
          "659:                             @click=\"openRelationSetup(field)\"",
          "661:                             >{{ $t(\"crud.add.body.setRelation\") }}</vs-button",
          "662:                           >",
          "663:                           <vs-popup",
          "",
          "[Removed Lines]",
          "660:                             v-else",
          "",
          "[Added Lines]",
          "759:                            <vs-button",
          "760:                             color=\"danger\"",
          "761:                             type=\"relief\"",
          "762:                             @click=\"dropItemManytomany(index)\"",
          "763:                             v-else-if=\"field.relationType == 'belongs_to_many'\"",
          "764:                           >",
          "765:                             <vs-icon icon=\"delete\"></vs-icon>",
          "766:                           </vs-button>",
          "772:                             v-else-if=\"field.relationType !== 'belongs_to_many'\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "671:                                 :items=\"relationTypes\"",
          "672:                                 :label=\"$t('crud.add.body.relationType')\"",
          "673:                               ></badaso-select>",
          "674:                               <vs-col",
          "675:                                 vs-lg=\"12\"",
          "676:                                 class=\"crud-management__relation-destination\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786:                               <vs-col",
          "787:                                 v-if=\"relation.relationType == 'belongs_to_many'\"",
          "788:                                 vs-lg=\"12\"",
          "789:                                 class=\"crud-management__relation-destination\"",
          "790:                               >",
          "791:                                 <vs-select",
          "792:                                   :label=\"$t('crud.add.body.destinationTableManytomany')\"",
          "793:                                   width=\"100%\"",
          "794:                                   v-model=\"relation.destinationTableManytomany\"",
          "795:                                 >",
          "796:                                   <vs-select-item",
          "797:                                     :key=\"index\"",
          "798:                                     :value=\"item.value ? item.value : item\"",
          "799:                                     :text=\"item.label ? item.label : item\"",
          "800:                                     v-for=\"(item, index) in destinationTables\"",
          "801:                                   />",
          "802:                                 </vs-select>",
          "803:                               </vs-col>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "678:                                 <vs-select",
          "679:                                   :label=\"$t('crud.add.body.destinationTable')\"",
          "680:                                   width=\"100%\"",
          "682:                                   @input=\"changeTable\"",
          "683:                                 >",
          "684:                                   <vs-select-item",
          "",
          "[Removed Lines]",
          "681:                                   v-model=\"relation.destinationTable\"",
          "",
          "[Added Lines]",
          "811:                                   v-model=\"relation.destinationTableManytomany\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "712:                                 v-model=\"relation.destinationTableDisplayMoreColumn\"",
          "713:                                 :items=\"destinationTableColumns\"",
          "714:                                 :label=\"$t('crud.add.body.destinationTableDisplayMoreColumn')\"",
          "716:                             </vs-row>",
          "717:                             <vs-row vs-type=\"flex\" vs-justify=\"space-between\">",
          "718:                               <vs-col",
          "",
          "[Removed Lines]",
          "715:                           ></badaso-select-multiple>",
          "",
          "[Added Lines]",
          "845:                               ></badaso-select-multiple>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "720:                                 vs-type=\"flex\"",
          "721:                                 vs-align=\"flex-end\"",
          "722:                               >",
          "730:                               </vs-col>",
          "731:                               <vs-col",
          "732:                                 vs-lg=\"2\"",
          "",
          "[Removed Lines]",
          "723:                                 <vs-button",
          "724:                                   color=\"primary\"",
          "725:                                   @click=\"saveRelation(field)\"",
          "726:                                   >{{",
          "727:                                     $t(\"crud.add.body.saveRelation\")",
          "728:                                   }}</vs-button",
          "729:                                 >",
          "",
          "[Added Lines]",
          "853:                               <vs-button",
          "854:                                 color=\"primary\"",
          "855:                                 @click=\"saveRelation(field)\"",
          "856:                                 >{{",
          "857:                                   $t(\"crud.add.body.saveRelation\")",
          "858:                                 }}</vs-button",
          "859:                               >",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "748:                     </table>",
          "749:                   </vs-col>",
          "750:                 </vs-row>",
          "751:               </draggable>",
          "752:             </vs-col>",
          "753:           </vs-row>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "881:                 <vs-button",
          "882:                   color=\"primary\"",
          "883:                   type=\"relief\"",
          "884:                   @click.stop",
          "885:                   @click=\"openRelationSetupManytomany()\"",
          "886:                   >",
          "887:                   {{ $t(\"crud.add.body.setRelationManytomany\") }}",
          "888:                 </vs-button>",
          "889:                 <vs-popup",
          "890:                   :title=\"$t('crud.add.body.setRelationManytomany')\"",
          "891:                   :active.sync=\"setRelationManytomany\"",
          "892:                 >",
          "893:                   <vs-row>",
          "894:                     <badaso-select",
          "895:                       size=\"12\"",
          "896:                       v-model=\"relationManytomany.relationType\"",
          "897:                       :items=\"relationTypesBelongsToMany\"",
          "898:                       :label=\"$t('crud.add.body.relationType')\"",
          "899:                     ></badaso-select>",
          "900:                     <vs-col",
          "901:                       vs-lg=\"12\"",
          "902:                       class=\"crud-management__relation-destination\"",
          "903:                     >",
          "904:                       <vs-select",
          "905:                         :label=\"$t('crud.add.body.destinationTable')\"",
          "906:                         width=\"100%\"",
          "907:                         v-model=\"relationManytomany.destinationTable\"",
          "908:                         @input=\"changeTableManytomany\"",
          "909:                       >",
          "910:                         <vs-select-item",
          "911:                           :key=\"index\"",
          "912:                           :value=\"item.value ? item.value : item\"",
          "913:                           :text=\"item.label ? item.label : item\"",
          "914:                           v-for=\"(item, index) in destinationTables\"",
          "915:                         />",
          "916:                       </vs-select>",
          "917:                     </vs-col>",
          "918:                     <badaso-select",
          "919:                       size=\"12\"",
          "920:                       v-model=\"relationManytomany.destinationTableColumn\"",
          "921:                       :items=\"destinationTableColumns\"",
          "922:                       :label=\"",
          "923:                         $t('crud.add.body.destinationTableColumn')",
          "924:                       \"",
          "925:                     ></badaso-select>",
          "926:                     <badaso-select",
          "927:                       size=\"12\"",
          "928:                       v-model=\"relationManytomany.destinationTableDisplayColumn\"",
          "929:                       :items=\"destinationTableColumns\"",
          "930:                       :label=\"",
          "931:                         $t(",
          "932:                           'crud.add.body.destinationTableDisplayColumn'",
          "933:                         )",
          "934:                       \"",
          "935:                     ></badaso-select>",
          "936:                     <badaso-collapse>",
          "937:                       <badaso-collapse-item>",
          "938:                         <h3 slot=\"header\">{{ $t(\"crud.add.title.advance\") }}</h3>",
          "939:                           <vs-row>",
          "940:                             <vs-col",
          "941:                               vs-lg=\"12\"",
          "942:                               class=\"crud-management__relation-destination\">",
          "943:                               <vs-select",
          "944:                                 :label=\"$t('crud.add.body.destinationTableManytomany')\"",
          "945:                                 width=\"100%\"",
          "946:                                 v-model=\"relationManytomanyAdvance.destinationTableManytomany\"",
          "947:                                 >",
          "948:                                 <vs-select-item",
          "949:                                 :key=\"index\"",
          "950:                                 :value=\"item.value ? item.value : item\"",
          "951:                                 :text=\"item.label ? item.label : item\"",
          "952:                                   v-for=\"(item, index) in destinationTables\" />",
          "953:                               </vs-select>",
          "954:                             </vs-col>",
          "955:                         </vs-row>",
          "956:                       </badaso-collapse-item>",
          "957:                     </badaso-collapse>",
          "958:                   </vs-row>",
          "959:                   <vs-row vs-type=\"flex\" vs-justify=\"space-between\">",
          "960:                     <vs-col",
          "961:                       vs-lg=\"2\"",
          "962:                       vs-type=\"flex\"",
          "963:                       vs-align=\"flex-end\"",
          "964:                     >",
          "965:                       <vs-button",
          "966:                         color=\"primary\"",
          "967:                         @click=\"saveRelationManytomany()\"",
          "968:                         >{{",
          "969:                           $t(\"crud.add.body.saveRelation\")",
          "970:                         }}</vs-button",
          "971:                       >",
          "972:                     </vs-col>",
          "973:                     <vs-col",
          "974:                       vs-lg=\"2\"",
          "975:                       vs-type=\"flex\"",
          "976:                       vs-align=\"flex-end\"",
          "977:                     >",
          "978:                       <vs-button",
          "979:                         color=\"danger\"",
          "980:                         @click=\"cancelRelationManytomany\"",
          "981:                         >{{",
          "982:                           $t(\"crud.add.body.cancelRelation\")",
          "983:                         }}</vs-button",
          "984:                       >",
          "985:                     </vs-col>",
          "986:                   </vs-row>",
          "987:                 </vs-popup>",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "823:       rows: [],",
          "824:     },",
          "825:     relationTypes: [],",
          "826:     destinationTables: [],",
          "827:     destinationTableColumns: [],",
          "829:     relation: {",
          "830:       relationType: \"\",",
          "831:       destinationTable: \"\",",
          "832:       destinationTableColumn: \"\",",
          "833:       destinationTableDisplayColumn: \"\",",
          "834:       destinationTableDisplayMoreColumn: [],",
          "835:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1063:     relationTypesBelongsToMany: [",
          "1064:       {",
          "1065:         'label': 'Belongs To Many',",
          "1066:         'value': 'belongs_to_many'",
          "1067:       }",
          "1068:     ],",
          "1071:     setRelationManytomany:false,",
          "1072:     relationManytomany: {",
          "1073:       relationType: \"\",",
          "1074:       destinationTable: \"\",",
          "1075:       destinationTableColumn: \"\",",
          "1076:       destinationTableDisplayColumn: \"\",",
          "1077:     },",
          "1078:     relationManytomanyAdvance: {",
          "1079:       destinationTableManytomany: \"\",",
          "1080:     },",
          "1081:     itemKey: \"\",",
          "1086:       destinationTableManytomany:\"\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "914:       field.destinationTableColumn = this.relation.destinationTableColumn;",
          "915:       field.destinationTableDisplayColumn =",
          "916:         this.relation.destinationTableDisplayColumn;",
          "918:         this.relation.destinationTableDisplayMoreColumn;",
          "919:       this.relation = {};",
          "920:       field.setRelation = false;",
          "922:     },",
          "923:     dataNotificationEventHandle() {",
          "924:       this.crudData.notification = this.crudData.notification.map(",
          "",
          "[Removed Lines]",
          "917:     field.destinationTableDisplayMoreColumn =",
          "",
          "[Added Lines]",
          "1171:       field.destinationTableDisplayMoreColumn =",
          "1175:     },",
          "1176:     openRelationSetupManytomany() {",
          "1177:       this.setRelationManytomany = true;",
          "1178:       this.relationManytomany = {",
          "1179:         relationType: this.relationManytomany.relationType ? this.relationManytomany.relationType : \"\",",
          "1180:         destinationTable: this.relationManytomany.destinationTable ? this.relationManytomany.destinationTable : \"\",",
          "1181:         destinationTableManytomany: this.relationManytomany.destinationTableManytomany ? this.relationManytomany.destinationTableManytomany : \"\",",
          "1182:         destinationTableColumn: this.relationManytomany.destinationTableColumn",
          "1183:           ? this.relationManytomany.destinationTableColumn",
          "1184:           : \"\",",
          "1185:         destinationTableDisplayColumn: this.relationManytomany.destinationTableDisplayColumn",
          "1186:           ? this.relationManytomany.destinationTableDisplayColumn",
          "1187:           : \"\",",
          "1188:       };",
          "1189:     },",
          "1190:     changeTableManytomany(table) {",
          "1191:       if (table) {",
          "1192:         this.relationManytomany.destinationTableColumn = \"\";",
          "1193:         this.relationManytomany.destinationTableDisplayColumn = \"\";",
          "1194:         this.relationManytomany.destinationTableDisplayMoreColumn = \"\";",
          "1195:         this.getDestinationTableColumns(table);",
          "1196:       }",
          "1197:     },",
          "1198:     saveRelationManytomany() {",
          "1199:       let fielName = this.relationManytomanyAdvance.destinationTableManytomany ? this.relationManytomanyAdvance.destinationTableManytomany : this.crudData.name + \"_\" + this.relationManytomany.destinationTable + \"_relations\"",
          "1200:       const existKeyAutomatic = obj => obj.field === fielName;",
          "1201:       if (!this.crudData.rows.some(existKeyAutomatic) && this.relationManytomany.relationType != '') {",
          "1202:         this.crudData.rows.push({",
          "1203:           field: fielName,",
          "1204:           type: \"relation\",",
          "1205:           displayName: this.crudData.name + \" \" + this.relationManytomany.destinationTable,",
          "1206:           required: 0,",
          "1207:           browse: 1,",
          "1208:           read: 1,",
          "1209:           edit: 1,",
          "1210:           add: 1,",
          "1211:           delete: 1,",
          "1212:           details: \"{}\",",
          "1213:           order: 1,",
          "1214:           relationType: this.relationManytomany.relationType ? this.relationManytomany.relationType : \"\",",
          "1215:           destinationTable: this.relationManytomany.destinationTable ? this.relationManytomany.destinationTable : \"\",",
          "1216:           destinationTableColumn: this.relationManytomany.destinationTableColumn ? this.relationManytomany.destinationTableColumn",
          "1217:             : \"\",",
          "1218:           destinationTableDisplayColumn: this.relationManytomany.destinationTableDisplayColumn ? this.relationManytomany.destinationTableDisplayColumn",
          "1219:             : \"\",",
          "1220:           setRelation: false,",
          "1221:         });",
          "1222:       }",
          "1223:       this.setRelationManytomany = false",
          "1224:       this.relationManytomany = {}",
          "1225:       this.relationManytomanyAdvance.destinationTableManytomany = \"\"",
          "1226:     },",
          "1227:     cancelRelationManytomany() {",
          "1228:       this.setRelationManytomany = false",
          "1229:       this.relationManytomany.relationType = \"\"",
          "1230:       this.relationManytomany.destinationTable = \"\"",
          "1231:       this.relationManytomany.destinationTableColumn = \"\"",
          "1232:       this.relationManytomany.destinationTableDisplayColumn = \"\"",
          "1233:       this.relationManytomanyAdvance.destinationTableManytomany = \"\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "986:                 type: field.type,",
          "987:                 displayName: this.$helper.generateDisplayName(field.name),",
          "988:                 required: field.isNotNull,",
          "994:                 details: \"{}\",",
          "995:                 order: 1,",
          "996:                 setRelation: false,",
          "",
          "[Removed Lines]",
          "989:                 browse: true,",
          "990:                 read: true,",
          "991:                 edit: true,",
          "992:                 add: true,",
          "993:                 delete: true,",
          "",
          "[Added Lines]",
          "1300:                 browse: false,",
          "1301:                 read: false,",
          "1302:                 edit: false,",
          "1303:                 add: false,",
          "1304:                 delete: false,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1120:       this.crudData.notification = notification;",
          "1121:     },",
          "1122:   },",
          "1123: };",
          "1124: </script>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1433:     dropItemManytomany(key) {",
          "1434:       this.$vs.dialog({",
          "1435:         type: \"confirm\",",
          "1436:         color: \"danger\",",
          "1437:         title: this.$t(\"action.delete.title\"),",
          "1438:         text: this.$t(\"action.delete.text\"),",
          "1439:         accept: () => this.$delete(this.crudData.rows, key),",
          "1440:         acceptText: this.$t(\"action.delete.accept\"),",
          "1441:         cancelText: this.$t(\"action.delete.cancel\"),",
          "1442:         cancel: () => { },",
          "1443:       });",
          "1444:     },",
          "",
          "---------------"
        ],
        "src/resources/js/pages/crud-management/edit.vue||src/resources/js/pages/crud-management/edit.vue": [
          "File: src/resources/js/pages/crud-management/edit.vue -> src/resources/js/pages/crud-management/edit.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:                         type=\"relief\"",
          "476:                         @click.stop",
          "477:                         @click=\"openRelationSetup(field)\"",
          "479:                         >{{ $t(\"crud.edit.body.setRelation\") }}</vs-button",
          "480:                       >",
          "481:                       <vs-popup",
          "482:                         :title=\"$t('crud.edit.body.setRelation')\"",
          "483:                         :active.sync=\"field.setRelation\"",
          "",
          "[Removed Lines]",
          "478:                         v-else",
          "",
          "[Added Lines]",
          "478:                         v-else-if=\"field.relationType !== 'belongs_to_many'\"",
          "481:                       <vs-button",
          "482:                         color=\"danger\"",
          "483:                         type=\"relief\"",
          "484:                         @click=\"dropItemManytomany(index)\"",
          "485:                         v-else-if=\"field.relationType == 'belongs_to_many'\"",
          "486:                       >",
          "487:                         <vs-icon icon=\"delete\"></vs-icon>",
          "488:                       </vs-button>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "555:                       </vs-popup>",
          "556:                     </td>",
          "557:                   </tr>",
          "558:                 </draggable>",
          "559:               </table>",
          "560:             </vs-col>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566:                   <tr>",
          "567:                     <td></td>",
          "568:                     <vs-button",
          "569:                         size=\"12\"",
          "570:                         color=\"primary\"",
          "571:                         type=\"relief\"",
          "572:                         @click.stop",
          "573:                         @click=\"openRelationSetupManytomany()\"",
          "574:                         >{{ $t(\"crud.edit.body.setRelationManytomany\") }}</vs-button",
          "575:                       >",
          "576:                     <vs-popup",
          "577:                       :title=\"$t('crud.edit.body.setRelationManytomany')\"",
          "578:                       :active.sync=\"setRelationManytomany\"",
          "579:                     >",
          "580:                       <vs-row>",
          "581:                         <badaso-select",
          "582:                           size=\"12\"",
          "583:                           v-model=\"relationManytomany.relationType\"",
          "584:                           :items=\"relationTypesBelongsToMany\"",
          "585:                           :label=\"$t('crud.edit.body.relationType')\"",
          "586:                         ></badaso-select>",
          "587:                         <vs-col",
          "588:                           vs-lg=\"12\"",
          "589:                           class=\"crud-management__relation-destination\"",
          "590:                         >",
          "591:                           <vs-select",
          "592:                             :label=\"$t('crud.edit.body.destinationTable')\"",
          "593:                             width=\"100%\"",
          "594:                             v-model=\"relationManytomany.destinationTable\"",
          "595:                             @input=\"changeTableManytomany\"",
          "596:                           >",
          "597:                             <vs-select-item",
          "598:                               :key=\"index\"",
          "599:                               :value=\"item.value ? item.value : item\"",
          "600:                               :text=\"item.label ? item.label : item\"",
          "601:                               v-for=\"(item, index) in destinationTables\"",
          "602:                             />",
          "603:                           </vs-select>",
          "604:                         </vs-col>",
          "605:                         <badaso-select",
          "606:                           size=\"12\"",
          "607:                           v-model=\"relationManytomany.destinationTableColumn\"",
          "608:                           :items=\"destinationTableColumns\"",
          "609:                           :label=\"$t('crud.edit.body.destinationTableColumn')\"",
          "610:                         ></badaso-select>",
          "611:                         <badaso-select",
          "612:                           size=\"12\"",
          "613:                           v-model=\"relationManytomany.destinationTableDisplayColumn\"",
          "614:                           :items=\"destinationTableColumns\"",
          "615:                           :label=\"",
          "616:                             $t('crud.edit.body.destinationTableDisplayColumn')",
          "617:                           \"",
          "618:                         ></badaso-select>",
          "619:                         <vs-col vs-lg=\"14\">",
          "620:                         <badaso-collapse>",
          "621:                           <badaso-collapse-item>",
          "622:                             <h3 slot=\"header\">{{ $t(\"crud.add.title.advance\") }}</h3>",
          "623:                               <vs-row>",
          "624:                                 <vs-col",
          "625:                                   vs-lg=\"12\"",
          "626:                                   class=\"crud-management__relation-destination\">",
          "627:                                   <vs-select",
          "628:                                     :label=\"$t('crud.add.body.destinationTableManytomany')\"",
          "629:                                     width=\"100%\"",
          "630:                                     v-model=\"relationManytomanyAdvance.destinationTableManytomany\"",
          "631:                                     >",
          "632:                                     <vs-select-item",
          "633:                                     :key=\"index\"",
          "634:                                     :value=\"item.value ? item.value : item\"",
          "635:                                     :text=\"item.label ? item.label : item\"",
          "636:                                       v-for=\"(item, index) in destinationTables\" />",
          "637:                                   </vs-select>",
          "638:                                 </vs-col>",
          "639:                             </vs-row>",
          "640:                           </badaso-collapse-item>",
          "641:                         </badaso-collapse>",
          "642:                         </vs-col>",
          "643:                       </vs-row>",
          "644:                       <vs-row vs-type=\"flex\" vs-justify=\"space-between\">",
          "645:                         <vs-col vs-lg=\"2\" vs-type=\"flex\" vs-align=\"flex-end\">",
          "646:                           <vs-button",
          "647:                             class=\"crud-management__button--block\"",
          "648:                             color=\"danger\"",
          "649:                             @click=\"cancelRelationManytomany\"",
          "650:                             type=\"relief\"",
          "651:                             >{{",
          "652:                               $t(\"crud.edit.body.cancelRelation\")",
          "653:                             }}</vs-button",
          "654:                           >",
          "655:                         </vs-col>",
          "656:                         <vs-col vs-lg=\"2\" vs-type=\"flex\" vs-align=\"flex-end\">",
          "657:                           <vs-button",
          "658:                             class=\"crud-management__button--block\"",
          "659:                             color=\"primary\"",
          "660:                             @click=\"saveRelationManytomany()\"",
          "661:                             type=\"relief\"",
          "662:                             >{{",
          "663:                               $t(\"crud.edit.body.saveRelation\")",
          "664:                             }}</vs-button",
          "665:                           >",
          "666:                         </vs-col>",
          "667:                       </vs-row>",
          "668:                     </vs-popup>",
          "669:                   </tr>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "664:                             type=\"relief\"",
          "665:                             @click.stop",
          "666:                             @click=\"openRelationSetup(field)\"",
          "668:                             >{{ $t(\"crud.add.body.setRelation\") }}</vs-button",
          "669:                           >",
          "670:                           <vs-popup",
          "",
          "[Removed Lines]",
          "667:                             v-else",
          "",
          "[Added Lines]",
          "779:                             v-else-if=\"field.relationType !== 'belongs_to_many'\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "747:                           </vs-popup>",
          "748:                         </td>",
          "749:                       </tr>",
          "750:                     </table>",
          "751:                   </vs-col>",
          "752:                 </vs-row>",
          "753:               </draggable>",
          "754:             </vs-col>",
          "755:           </vs-row>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "866:                 <vs-button",
          "867:                   size=\"12\"",
          "868:                   color=\"primary\"",
          "869:                   type=\"relief\"",
          "870:                   @click.stop",
          "871:                   @click=\"openRelationSetupManytomany()\"",
          "872:                 >{{ $t(\"crud.edit.body.setRelationManytomany\") }}</vs-button",
          "873:                 >",
          "874:                 <vs-popup",
          "875:                 class=\"holamundo\"",
          "876:                 :title=\"$t('crud.add.body.setRelation')\"",
          "877:                 :active.sync=\"setRelationManytomany\">",
          "878:                   <vs-row>",
          "879:                     <badaso-select",
          "880:                       size=\"12\"",
          "881:                       v-model=\"relationManytomany.relationType\"",
          "882:                       :items=\"relationTypesBelongsToMany\"",
          "883:                       :label=\"$t('crud.add.body.relationType')\">",
          "884:                       </badaso-select",
          "885:                     >",
          "886:                     <vs-col",
          "887:                       vs-lg=\"12\"",
          "888:                       class=\"crud-management__relation-destination\"",
          "889:                     >",
          "890:                       <vs-select",
          "891:                         :label=\"$t('crud.add.body.destinationTable')\"",
          "892:                         width=\"100%\"",
          "893:                         v-model=\"relationManytomany.destinationTable\"",
          "894:                         @input=\"changeTableManytomany\"",
          "895:                       >",
          "896:                         <vs-select-item",
          "897:                         :key=\"index\" :value=\"item.value ? item.value : item\"",
          "898:                         :text=\"item.label ? item.label : item\"",
          "899:                           v-for=\"(item, index) in destinationTables\" />",
          "900:                       </vs-select>",
          "901:                     </vs-col>",
          "902:                     <badaso-select",
          "903:                       size=\"12\"",
          "904:                       v-model=\"relationManytomany.destinationTableColumn\"",
          "905:                       :items=\"destinationTableColumns\"",
          "906:                       :label=\"",
          "907:                             $t('crud.add.body.destinationTableColumn')",
          "908:                       \"></badaso-select>",
          "909:                     <badaso-select",
          "910:                     size=\"12\"",
          "911:                     v-model=\"relationManytomany.destinationTableDisplayColumn\"",
          "912:                     :items=\"destinationTableColumns\"",
          "913:                     :label=\"",
          "914:                       $t(",
          "915:                         'crud.add.body.destinationTableDisplayColumn'",
          "916:                       )",
          "917:                     \"></badaso-select>",
          "918:                     <vs-col vs-lg=\"14\">",
          "919:                       <badaso-collapse>",
          "920:                         <badaso-collapse-item>",
          "921:                           <h3 slot=\"header\">{{ $t(\"crud.add.title.advance\") }}</h3>",
          "922:                           <vs-row>",
          "923:                             <vs-col vs-lg=\"12\" class=\"crud-management__relation-destination\">",
          "924:                               <vs-select",
          "925:                                 :label=\"$t('crud.add.body.destinationTableManytomany')\" width=\"100%\"",
          "926:                                 v-model=\"relationManytomanyAdvance.destinationTableManytomany\">",
          "927:                                 <vs-select-item",
          "928:                                   :key=\"index\"",
          "929:                                   :value=\"item.value ? item.value : item\"",
          "930:                                   :text=\"item.label ? item.label : item\"",
          "931:                                   v-for=\"(item, index) in destinationTables\" />",
          "932:                               </vs-select>",
          "933:                             </vs-col>",
          "934:                           </vs-row>",
          "935:                         </badaso-collapse-item>",
          "936:                       </badaso-collapse>",
          "937:                     </vs-col>",
          "938:                   </vs-row>",
          "939:                   <vs-row vs-type=\"flex\" vs-justify=\"space-between\">",
          "940:                     <vs-col vs-lg=\"2\" vs-type=\"flex\" vs-align=\"flex-end\">",
          "941:                       <vs-button",
          "942:                       color=\"primary\"",
          "943:                       @click=\"saveRelationManytomany()\">{{",
          "944:                         $t(\"crud.add.body.saveRelation\")",
          "945:                       }}</vs-button>",
          "946:                     </vs-col>",
          "947:                     <vs-col vs-lg=\"2\" vs-type=\"flex\" vs-align=\"flex-end\">",
          "948:                       <vs-button",
          "949:                       color=\"danger\"",
          "950:                       @click=\"cancelRelationManytomany\">{{",
          "951:                         $t(\"crud.add.body.cancelRelation\")",
          "952:                       }}</vs-button>",
          "953:                     </vs-col>",
          "954:                   </vs-row>",
          "955:                 </vs-popup>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "823:       notification: [],",
          "824:       rows: [],",
          "825:     },",
          "826:     relationTypes: [],",
          "827:     destinationTables: [],",
          "828:     destinationTableColumns: [],",
          "829:     relation: {},",
          "830:     onCreate: false,",
          "831:     onCreateTitle: \"\",",
          "832:     onCreateMessage: \"\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1029:     setRelationManytomany: false,",
          "1031:     relationTypesBelongsToMany: [",
          "1032:       {",
          "1033:         'label' : 'Belongs To Many',",
          "1034:         'value' : 'belongs_to_many'",
          "1035:       }",
          "1036:     ],",
          "1040:     relationManytomany: {",
          "1041:       relationType: \"\",",
          "1042:       destinationTable: \"\",",
          "1043:       destinationTableColumn: \"\",",
          "1044:       destinationTableDisplayColumn: \"\",",
          "1045:     },",
          "1046:     relationManytomanyAdvance: {",
          "1047:       destinationTableManytomany: \"\",",
          "1048:     },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "884:         destinationTableDisplayColumn: field.destinationTableDisplayColumn",
          "885:           ? field.destinationTableDisplayColumn",
          "886:           : \"\",",
          "890:       };",
          "891:       if (field.destinationTable !== \"\") {",
          "892:         this.getDestinationTableColumns(field.destinationTable);",
          "893:       }",
          "895:     changeTable(table) {",
          "896:       if (table) {",
          "897:         this.relation.destinationTableColumn = \"\";",
          "",
          "[Removed Lines]",
          "887:            destinationTableDisplayMoreColumn: field.destinationTableDisplayMoreColumn",
          "888:           ? field.destinationTableDisplayMoreColumn",
          "889:           : \"\",",
          "894:     },",
          "",
          "[Added Lines]",
          "1106:           destinationTableDisplayMoreColumn: field.destinationTableDisplayMoreColumn",
          "1107:         ? field.destinationTableDisplayMoreColumn",
          "1108:         : \"\",",
          "1113:     },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "910:         this.relation.destinationTableDisplayMoreColumn;",
          "911:       this.relation = {};",
          "912:       field.setRelation = false;",
          "913:     },",
          "914:     dataNotificationEventHandle() {",
          "915:       if (!Array.isArray(this.crudData.notification)) return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1132:     },",
          "1133:     openRelationSetupManytomany() {",
          "1134:       this.setRelationManytomany = true;",
          "1135:       this.relationManytomany = {",
          "1136:         relationType: this.relationManytomany.relationType ? this.relationManytomany.relationType : \"\",",
          "1137:         destinationTable: this.relationManytomany.destinationTable ? this.relationManytomany.destinationTable : \"\",",
          "1138:         destinationTableColumn: this.relationManytomany.destinationTableColumn",
          "1139:           ? this.relationManytomany.destinationTableColumn",
          "1140:           : \"\",",
          "1141:         destinationTableDisplayColumn: this.relationManytomany.destinationTableDisplayColumn",
          "1142:           ? this.relationManytomany.destinationTableDisplayColumn",
          "1143:           : \"\",",
          "1144:       };",
          "1145:       if (this.relationManytomany.destinationTable !== \"\") {",
          "1146:         this.getDestinationTableColumns(this.relationManytomany.destinationTable);",
          "1147:       }",
          "1148:     },",
          "1149:     changeTableManytomany(table) {",
          "1150:       if (table) {",
          "1151:         this.relationManytomany.destinationTableColumn = \"\";",
          "1152:         this.relationManytomany.destinationTableDisplayColumn = \"\";",
          "1153:         this.relationManytomany.destinationTableDisplayMoreColumn = \"\";",
          "1154:         this.getDestinationTableColumns(table);",
          "1155:       }",
          "1156:     },",
          "1157:     saveRelationManytomany() {",
          "1158:       let fielName = this.relationManytomanyAdvance.destinationTableManytomany ? this.relationManytomanyAdvance.destinationTableManytomany : this.crudData.name + \"_\" + this.relationManytomany.destinationTable + \"_relations\"",
          "1159:       const existKeyAutomatic = obj => obj.field === fielName;",
          "1161:       if (!this.crudData.dataRows.some(existKeyAutomatic) && this.relationManytomany.relationType != '') {",
          "1162:         this.crudData.dataRows.push({",
          "1163:           field: fielName,",
          "1164:           type: \"relation\",",
          "1165:           displayName: this.crudData.name + \" \" + this.relationManytomany.destinationTable,",
          "1166:           required: 0,",
          "1167:           browse: 1,",
          "1168:           read: 1,",
          "1169:           edit: 1,",
          "1170:           add: 1,",
          "1171:           delete: 1,",
          "1172:           details: \"{}\",",
          "1173:           order: 1,",
          "1174:           relation: this.relationManytomany,",
          "1175:           setRelation: false,",
          "1176:         });",
          "1177:         this.crudData.rows.push({",
          "1178:           field: fielName,",
          "1179:           type: \"relation\",",
          "1180:           displayName: this.crudData.name + \" \" + this.relationManytomany.destinationTable,",
          "1181:           required: 0,",
          "1182:           browse: 1,",
          "1183:           read: 1,",
          "1184:           edit: 1,",
          "1185:           add: 1,",
          "1186:           delete: 1,",
          "1187:           details: \"{}\",",
          "1188:           order: 1,",
          "1189:           relationType: this.relationManytomany.relationType ? this.relationManytomany.relationType : \"\",",
          "1190:           destinationTable: this.relationManytomany.destinationTable ? this.relationManytomany.destinationTable : \"\",",
          "1191:           destinationTableColumn: this.relationManytomany.destinationTableColumn",
          "1192:             ? this.relationManytomany.destinationTableColumn",
          "1193:             : \"\",",
          "1194:           destinationTableDisplayColumn: this.relationManytomany.destinationTableDisplayColumn",
          "1195:             ? this.relationManytomany.destinationTableDisplayColumn",
          "1196:             : \"\",",
          "1197:           setRelation: false,",
          "1198:         });",
          "1199:       }",
          "1200:       this.setRelationManytomany = false",
          "1201:       this.relationManytomany = {}",
          "1202:       this.relationManytomanyAdvance.destinationTableManytomany = \"\"",
          "1203:     },",
          "1204:     cancelRelationManytomany(){",
          "1205:       this.setRelationManytomany = false",
          "1206:       this.relationManytomany.relationType = \"\"",
          "1207:       this.relationManytomany.destinationTable = \"\"",
          "1208:       this.relationManytomany.destinationTableColumn = \"\"",
          "1209:       this.relationManytomany.destinationTableDisplayColumn = \"\"",
          "1210:       this.relationManytomanyAdvance.destinationTableManytomany = \"\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1124:       this.crudData.notification = notification;",
          "1125:     },",
          "1126:   },",
          "1127: };",
          "1128: </script>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1424:     dropItemManytomany(key) {",
          "1425:       this.$vs.dialog({",
          "1426:         type: \"confirm\",",
          "1427:         color: \"danger\",",
          "1428:         title: this.$t(\"action.delete.title\"),",
          "1429:         text: this.$t(\"action.delete.text\"),",
          "1430:         accept: () => this.$delete(this.crudData.rows, key),",
          "1431:         acceptText: this.$t(\"action.delete.accept\"),",
          "1432:         cancelText: this.$t(\"action.delete.cancel\"),",
          "1433:         cancel: () => { },",
          "1434:       });",
          "1435:     },",
          "",
          "---------------"
        ],
        "src/resources/js/router/admin/configuration-router.js||src/resources/js/router/admin/configuration-router.js": [
          "File: src/resources/js/router/admin/configuration-router.js -> src/resources/js/router/admin/configuration-router.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: const apiDocs = process.env.MIX_API_DOCS_ROUTE",
          "12:   ? process.env.MIX_API_DOCS_ROUTE",
          "15: export default [",
          "16:   {",
          "17:     path: prefix + \"/permission\",",
          "",
          "[Removed Lines]",
          "13:   : \"api-docs\";",
          "",
          "[Added Lines]",
          "13:   : \"api-docs\"",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:         $table_names = [];",
          "252:         for ($index = 1; $index <= $max_count_table_generate; $index++) {",
          "253:             $table_name = \"{$this->TABLE_TEST_PREFIX}{$index}\";",
          "255:                 Schema::create($table_name, function (Blueprint $table) use ($index, $table_names) {",
          "256:                     $table->id();",
          "",
          "[Removed Lines]",
          "254:             if (! Schema::hasTable($table_name)) {",
          "",
          "[Added Lines]",
          "254:             if (!Schema::hasTable($table_name)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:                 if ($badaso_type == 'relation') {",
          "416:                     $destination_field['badaso_type'] = 'id';",
          "417:                     $destination_more_field['badaso_type'] = ['select_multiple'];",
          "419:                     $row['relationType'] = ['belongs_to', 'has_one', 'has_many'][rand(0, 2)];",
          "421:                     $row['destinationTable'] = $table_names[0];",
          "422:                     $row['destinationTableColumn'] = $destination_field['badaso_type'];",
          "423:                     $row['destinationTableDisplayColumn'] = $destination_field['badaso_type'];",
          "",
          "[Removed Lines]",
          "420:                     $row['relationType'] = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "446:                 }",
          "447:                 PHP;",
          "448:                 $model_path = app_path(\"Models/$model_file_name\");",
          "450:                     file_put_contents($model_path, $model_body);",
          "451:                 }",
          "",
          "[Removed Lines]",
          "449:                 if (! file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "447:                 if (!file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "467:             $controller_data = [];",
          "468:             if (rand(0, 1)) {",
          "471:                 $controller_file_name = \"{$controller_name}.php\";",
          "472:                 $controller_body = <<<PHP",
          "473:                 <?php",
          "",
          "[Removed Lines]",
          "470:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "[Added Lines]",
          "468:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "476:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "477:                 PHP;",
          "478:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "480:                     file_put_contents($controller_path, $controller_body);",
          "481:                 }",
          "",
          "[Removed Lines]",
          "479:                 if (! file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "477:                 if (!file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "857:         foreach ($add_crud_table as $key => $request_data_crud_table) {",
          "858:             $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/crud/add'), $request_data_crud_table);",
          "859:             $response->assertSuccessful();",
          "860:         }",
          "861:     }",
          "863:     public function testAddEntityMultiRelation()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "858:         }",
          "859:     }",
          "861:     public function testAddTableManyToMany()",
          "862:     {",
          "863:         $name_table = ['table_primary', 'table_destination', 'table_relation'];",
          "864:         foreach ($name_table as $key => $table) {",
          "865:             $table = [",
          "866:                 'table' => $table,",
          "867:                 'rows' => [",
          "868:                     0 => [",
          "869:                         'id' => 'id',",
          "870:                         'fieldName' => 'id',",
          "871:                         'fieldType' => 'bigint',",
          "872:                         'fieldLength' => null,",
          "873:                         'fieldNull' => false,",
          "874:                         'fieldAttribute' => true,",
          "875:                         'fieldIncrement' => true,",
          "876:                         'fieldIndex' => 'primary',",
          "877:                         'fieldDefault' => null,",
          "878:                         'undeletable' => true,",
          "879:                     ],",
          "880:                     1 => [",
          "881:                         'id' => '8b01b738-377b-4782-898f-c4c46722bf23',",
          "882:                         'fieldName' => 'name',",
          "883:                         'fieldType' => 'text',",
          "884:                         'fieldLength' => null,",
          "885:                         'fieldNull' => false,",
          "886:                         'fieldAttribute' => false,",
          "887:                         'fieldIncrement' => false,",
          "888:                         'fieldIndex' => null,",
          "889:                         'fieldDefault' => '',",
          "890:                     ],",
          "891:                     2 => [",
          "892:                         'fieldName' => 'created_at',",
          "893:                         'fieldType' => 'timestamp',",
          "894:                         'fieldLength' => null,",
          "895:                         'fieldNull' => true,",
          "896:                         'fieldAttribute' => false,",
          "897:                         'fieldIncrement' => false,",
          "898:                         'fieldIndex' => null,",
          "899:                         'fieldDefault' => null,",
          "900:                         'undeletable' => true,",
          "901:                         'indexes' => true,",
          "902:                     ],",
          "903:                     3 => [",
          "904:                         'fieldName' => 'updated_at',",
          "905:                         'fieldType' => 'timestamp',",
          "906:                         'fieldLength' => null,",
          "907:                         'fieldNull' => true,",
          "908:                         'fieldAttribute' => false,",
          "909:                         'fieldIncrement' => false,",
          "910:                         'fieldIndex' => null,",
          "911:                         'fieldDefault' => null,",
          "912:                         'undeletable' => true,",
          "913:                     ],",
          "914:                 ],",
          "915:                 'relations' => [],",
          "916:             ];",
          "917:             if ($table['table'] == 'table_relation') {",
          "918:                 for ($i = 0; $i < 2; $i++) {",
          "919:                     $field[$i] = [",
          "920:                         'id' => $name_table[$i] . '_id',",
          "921:                         'fieldName' => $name_table[$i] . '_id',",
          "922:                         'fieldType' => 'bigint',",
          "923:                         'fieldLength' => null,",
          "924:                         'fieldNull' => false,",
          "925:                         'fieldAttribute' => true,",
          "926:                         'fieldIncrement' => false,",
          "927:                         'fieldIndex' => 'foreign',",
          "928:                         'fieldDefault' => null,",
          "929:                     ];",
          "930:                     unset($table['rows'][1]);",
          "931:                     array_push($table['rows'], $field[$i]);",
          "932:                 }",
          "933:                 $table['relations'] = [",
          "934:                     $name_table[1] . \"_id\" => [",
          "935:                         \"source_field\" => $name_table[1] . \"_id\",",
          "936:                         \"target_table\" => $name_table[1],",
          "937:                         \"target_field\" => \"id\",",
          "938:                         \"on_delete\" => \"cascade\",",
          "939:                         \"on_update\" => \"restrict\",",
          "940:                     ],",
          "941:                     $name_table[0] . \"_id\" => [",
          "942:                         \"source_field\" => $name_table[0] . \"_id\",",
          "943:                         \"target_table\" => $name_table[0],",
          "944:                         \"target_field\" => \"id\",",
          "945:                         \"on_delete\" => \"cascade\",",
          "946:                         \"on_update\" => \"restrict\",",
          "947:                     ]",
          "948:                 ];",
          "949:             }",
          "950:             $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/database/add'), $table);",
          "953:         foreach ($name_table as $key => $crud_table) {",
          "954:             $crud_table = [",
          "955:                 'name' => $crud_table,",
          "956:                 'slug' => 'table-' . $key + 1,",
          "957:                 'displayNameSingular' => $crud_table,",
          "958:                 'displayNamePlural' => $crud_table,",
          "959:                 'icon' => '',",
          "960:                 'modelName' => '',",
          "961:                 'policyName' => '',",
          "962:                 'description' => '',",
          "963:                 'generatePermissions' => true,",
          "964:                 'createSoftDelete' => false,",
          "965:                 'serverSide' => false,",
          "966:                 'details' => '',",
          "967:                 'controller' => '',",
          "968:                 'orderColumn' => '',",
          "969:                 'orderDisplayColumn' => '',",
          "970:                 'orderDirection' => '',",
          "971:                 'notification' => [],",
          "972:                 'rows' => [",
          "973:                     0 => [",
          "974:                         'field' => 'id',",
          "975:                         'type' => 'number',",
          "976:                         'displayName' => 'Id',",
          "977:                         'required' => true,",
          "978:                         'browse' => false,",
          "979:                         'read' => false,",
          "980:                         'edit' => false,",
          "981:                         'add' => false,",
          "982:                         'delete' => false,",
          "983:                         'details' => '{}',",
          "984:                         'order' => 1,",
          "985:                         'setRelation' => false,",
          "986:                     ],",
          "987:                     1 => [",
          "988:                         'field' => 'name',",
          "989:                         'type' => 'text',",
          "990:                         'displayName' => 'name',",
          "991:                         'required' => true,",
          "992:                         'browse' => true,",
          "993:                         'read' => true,",
          "994:                         'edit' => true,",
          "995:                         'add' => true,",
          "996:                         'delete' => true,",
          "997:                         'details' => '{}',",
          "998:                         'order' => 1,",
          "999:                         'setRelation' => false,",
          "1000:                         'relationType' => 'null',",
          "1001:                         'destinationTable' => 'null',",
          "1002:                         'destinationTableColumn' => 'null',",
          "1003:                         'destinationTableDisplayColumn' => 'null',",
          "1004:                     ],",
          "1005:                     2 => [",
          "1006:                         'field' => 'created_at',",
          "1007:                         'type' => 'datetime',",
          "1008:                         'displayName' => 'Created At',",
          "1009:                         'required' => false,",
          "1010:                         'browse' => true,",
          "1011:                         'read' => true,",
          "1012:                         'edit' => false,",
          "1013:                         'add' => false,",
          "1014:                         'delete' => false,",
          "1015:                         'details' => '{}',",
          "1016:                         'order' => 1,",
          "1017:                         'setRelation' => false,",
          "1018:                     ],",
          "1019:                     3 => [",
          "1020:                         'field' => 'updated_at',",
          "1021:                         'type' => 'datetime',",
          "1022:                         'displayName' => 'Updated At',",
          "1023:                         'required' => false,",
          "1024:                         'browse' => true,",
          "1025:                         'read' => true,",
          "1026:                         'edit' => false,",
          "1027:                         'add' => false,",
          "1028:                         'delete' => false,",
          "1029:                         'details' => '{}',",
          "1030:                         'order' => 1,",
          "1031:                         'setRelation' => false,",
          "1032:                     ],",
          "1033:                 ],",
          "1034:             ];",
          "1035:             $relation_field =  [",
          "1036:                 'field' => 'table_relation',",
          "1037:                 'type' => 'relation',",
          "1038:                 'displayName' => 'table 1 table 2 relation',",
          "1039:                 'required' => true,",
          "1040:                 'browse' => true,",
          "1041:                 'read' => true,",
          "1042:                 'edit' => true,",
          "1043:                 'add' => true,",
          "1044:                 'delete' => true,",
          "1045:                 'details' => '{}',",
          "1046:                 'order' => 1,",
          "1047:                 'setRelation' => false,",
          "1048:                 'relationType' => 'belongs_to_many',",
          "1049:                 'destinationTable' => $name_table[1],",
          "1050:                 'destinationTableColumn' => 'id',",
          "1051:                 'destinationTableDisplayColumn' => 'name',",
          "1052:             ];",
          "1053:             if ($crud_table['name'] == $name_table[0]) {",
          "1054:                 array_push($crud_table['rows'], $relation_field);",
          "1055:             }",
          "1057:             if ($crud_table['name'] != 'table_relation') {",
          "1058:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/crud/add'), $crud_table);",
          "1059:                 $response->assertSuccessful();",
          "1060:             }",
          "1061:         }",
          "1062:     }",
          "1064:     public function testEntityManytoMany()",
          "1065:     {",
          "1066:         $table_lists = ['table_relation', 'table_destination', 'table_primary'];",
          "1067:         $name_table = ['table-2', 'table-1'];",
          "1068:         $data_table_destination =  [",
          "1069:             \"data\" =>",
          "1070:             [",
          "1071:                 \"name\" => \"option 1\"",
          "1072:             ]",
          "1073:         ];",
          "1074:         $data_table_primary = [",
          "1075:             \"data\" => [",
          "1076:                 \"name\" => \"lorem ipsum\",",
          "1077:                 \"table_relation\" => [2, 3]",
          "1078:             ]",
          "1079:         ];",
          "1081:         foreach ($name_table as $key => $table) {",
          "1082:             if ($table == 'table-2') {",
          "1083:                 for ($i = 1; $i < 4; $i++) {",
          "1084:                     $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/add'), [",
          "1085:                         \"data\" =>",
          "1086:                         [",
          "1087:                             \"name\" => \"option \" . $i",
          "1088:                         ]",
          "1089:                     ]);",
          "1090:                 }",
          "1091:             } else {",
          "1092:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/add'), $data_table_primary);",
          "1093:                 $response->assertSuccessful();",
          "1094:             }",
          "1095:         }",
          "1098:         $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table));",
          "1099:         $response->assertSuccessful();",
          "1100:         $data_browse = $response['data']['data'][0];",
          "1104:         $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/edit'), [",
          "1105:             \"data\" => [",
          "1106:                 \"id\" => $data_browse['id'],",
          "1107:                 \"name\" => \"lorem ipsum\",",
          "1108:                 \"table_relation\" => [1, 2]",
          "1109:             ]",
          "1110:         ]);",
          "1111:         $response->assertSuccessful();",
          "1114:         $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/entities/' . $table . '/delete'), [",
          "1115:             \"slug\" => $table,",
          "1116:             \"data\" => [",
          "1117:                 [",
          "1118:                     \"field\" => \"id\",",
          "1119:                     \"value\" => $data_browse['id']",
          "1120:                 ]",
          "1121:             ]",
          "1122:         ]);",
          "1124:         $response_crud_table = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/crud?'));",
          "1125:         $response_crud_table = $response_crud_table['data'];",
          "1126:         foreach ($response_crud_table['tablesWithCrudData'] as $key => $value_response_crud_table) {",
          "1127:             if (in_array($value_response_crud_table['tableName'], $table_lists)) {",
          "1128:                 if ($value_response_crud_table['tableName'] != $table_lists[0]) {",
          "1129:                     $ids_list_table[$key] = [",
          "1130:                         'id' => $value_response_crud_table['crudData']['id'],",
          "1131:                     ];",
          "1132:                 }",
          "1133:             }",
          "1134:         }",
          "1136:         foreach ($table_lists as $key => $table) {",
          "1137:             if ($table != $table_lists[0]) {",
          "1138:                 foreach ($ids_list_table as $key => $id) {",
          "1139:                     $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/crud/delete'), $id);",
          "1140:                 }",
          "1141:             }",
          "1142:             $deleted =  Schema::dropIfExists($table);",
          "1143:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "933:             $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/database/delete'), ['table' => $request_data_table]);",
          "934:             $response->assertSuccessful();",
          "935:         }",
          "936:     }",
          "938:     public function testAddEditEntityCrudManagement()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1221:         $response = CallHelperTest::withAuthorizeBearer($this)",
          "1222:             ->json('GET', CallHelperTest::getUrlApiV1Prefix('/database/migration/browse'));",
          "1224:         $response = $response->json('data');",
          "1225:         $migration_name = [];",
          "1226:         for ($i = count($response) - 8; $i < count($response); $i++) {",
          "1227:             $migration_name[] = $response[$i]['migration'];",
          "1228:         }",
          "1229:         $response = CallHelperTest::withAuthorizeBearer($this)",
          "1230:             ->json('POST', CallHelperTest::getUrlApiV1Prefix('/database/migration/delete'), [",
          "1231:                 'file_name' => $migration_name,",
          "1232:             ]);",
          "1233:         $response->assertSuccessful();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1179:                 }",
          "1180:                 PHP;",
          "1181:                 $model_path = app_path(\"Models/$model_file_name\");",
          "1183:                     file_put_contents($model_path, $model_body);",
          "1184:                 }",
          "",
          "[Removed Lines]",
          "1182:                 if (! file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "1480:                 if (!file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1200:             $controller_data = [];",
          "1201:             if (rand(0, 1)) {",
          "1204:                 $controller_file_name = \"{$controller_name}.php\";",
          "1205:                 $controller_body = <<<PHP",
          "1206:                 <?php",
          "",
          "[Removed Lines]",
          "1203:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "[Added Lines]",
          "1501:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)) . 'Controller';",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1209:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "1210:                 PHP;",
          "1211:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "1213:                     file_put_contents($controller_path, $controller_body);",
          "1214:                 }",
          "",
          "[Removed Lines]",
          "1212:                 if (! file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "1510:                 if (!file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1229:             $request_body = [",
          "1230:                 'name' =>  $table_name,",
          "1231:                 'slug' =>  $table_name,",
          "1234:                 'icon' =>  'add',",
          "1235:                 'modelName' =>  $model,",
          "1236:                 'policyName' =>  '',",
          "",
          "[Removed Lines]",
          "1232:                 'displayNameSingular' =>  $table_label.'(update)',",
          "1233:                 'displayNamePlural' =>  $table_label.'(update)',",
          "",
          "[Added Lines]",
          "1530:                 'displayNameSingular' =>  $table_label . '(update)',",
          "1531:                 'displayNamePlural' =>  $table_label . '(update)',",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1316:             $controller_name = \"{$name}Controller.php\";",
          "1318:             if (file_exists($controller_path)) {",
          "1319:                 unlink($controller_path);",
          "1320:             }",
          "1323:             $model_name = \"{$name}.php\";",
          "1325:             if (file_exists($model_path)) {",
          "1326:                 unlink($model_path);",
          "1327:             }",
          "",
          "[Removed Lines]",
          "1317:             $controller_path = app_path('Http/Controllers/'.$controller_name);",
          "1324:             $model_path = app_path('Models/'.$model_name);",
          "",
          "[Added Lines]",
          "1615:             $controller_path = app_path('Http/Controllers/' . $controller_name);",
          "1622:             $model_path = app_path('Models/' . $model_name);",
          "",
          "---------------"
        ]
      }
    }
  ]
}