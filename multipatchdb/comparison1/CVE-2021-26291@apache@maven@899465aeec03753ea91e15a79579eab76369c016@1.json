{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "899465aeec03753ea91e15a79579eab76369c016",
  "patch_info": {
    "commit_hash": "899465aeec03753ea91e15a79579eab76369c016",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/899465aeec03753ea91e15a79579eab76369c016",
    "files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/pom.xml",
      "maven-settings/src/main/mdo/settings.mdo"
    ],
    "message": "[MNG-7117] add support for blocked mirror",
    "before_after_code_files": [
      "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo"
    ]
  },
  "patch_diff": {
    "maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java||maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java": [
      "File: maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java -> maven-core/src/main/java/org/apache/maven/internal/aether/DefaultRepositorySystemSessionFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:         DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();",
      "178:         for ( Mirror mirror : request.getMirrors() )",
      "179:         {",
      "182:         }",
      "183:         session.setMirrorSelector( mirrorSelector );",
      "",
      "[Removed Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(),",
      "181:                                 mirror.getMirrorOfLayouts() );",
      "",
      "[Added Lines]",
      "180:             mirrorSelector.add( mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.isBlocked(),",
      "181:                                 mirror.getMirrorOf(), mirror.getMirrorOfLayouts() );",
      "",
      "---------------"
    ],
    "maven-settings/src/main/mdo/settings.mdo||maven-settings/src/main/mdo/settings.mdo": [
      "File: maven-settings/src/main/mdo/settings.mdo -> maven-settings/src/main/mdo/settings.mdo",
      "--- Hunk 1 ---",
      "[Context before]",
      "633:             of the mirror to repositories with a matching layout (apart from a matching id). Since Maven 3.",
      "634:           </description>",
      "635:         </field>",
      "636:       </fields>",
      "637:       <codeSegments>",
      "638:         <codeSegment>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "636:         <field>",
      "637:           <name>blocked</name>",
      "638:           <version>1.2.0+</version>",
      "639:           <type>boolean</type>",
      "640:           <defaultValue>false</defaultValue>",
      "641:           <description>",
      "642:             Whether this mirror should be blocked from any download request but fail the download process, explaining why.",
      "643:           </description>",
      "644:         </field>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "648:         sb.append( \",mirrorOf=\" ).append( mirrorOf );",
      "649:         sb.append( \",url=\" ).append( this.url );",
      "650:         sb.append( \",name=\" ).append( this.name );",
      "651:         sb.append( \"]\" );",
      "652:         return sb.toString();",
      "653:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "660:         if ( isBlocked() )",
      "661:         {",
      "662:             sb.append( \",blocked\" );",
      "663:         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3a465e14779483c1c4f0be552298f5d2b232a29b",
      "candidate_info": {
        "commit_hash": "3a465e14779483c1c4f0be552298f5d2b232a29b",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/3a465e14779483c1c4f0be552298f5d2b232a29b",
        "files": [
          "apache-maven/src/bin/mvn.cmd"
        ],
        "message": "[MNG-6837] Simplify detection of the MAVEN_HOME and make it fully qualified on Windows\n\nThe removed 'stripMHome' recursive function is not needed anymore\n\nThis closes #307",
        "before_after_code_files": [
          "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/bin/mvn.cmd||apache-maven/src/bin/mvn.cmd": [
          "File: apache-maven/src/bin/mvn.cmd -> apache-maven/src/bin/mvn.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: goto error",
          "62: :chkMHome",
          "65: goto error",
          "72: :checkMCmd",
          "73: if exist \"%MAVEN_HOME%\\bin\\mvn.cmd\" goto init",
          "74: goto error",
          "",
          "[Removed Lines]",
          "63: set \"MAVEN_HOME=%~dp0..\"",
          "64: if not \"%MAVEN_HOME%\"==\"\" goto stripMHome",
          "67: :stripMHome",
          "68: if not \"_%MAVEN_HOME:~-1%\"==\"_\\\" goto checkMCmd",
          "69: set \"MAVEN_HOME=%MAVEN_HOME:~0,-1%\"",
          "70: goto stripMHome",
          "",
          "[Added Lines]",
          "63: set \"MAVEN_HOME=%~dp0\"",
          "64: set \"MAVEN_HOME=%MAVEN_HOME:~0,-5%\"",
          "65: if not \"%MAVEN_HOME%\"==\"\" goto checkMCmd",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8456294977b40660ce37db853de344f0d26ee46d",
      "candidate_info": {
        "commit_hash": "8456294977b40660ce37db853de344f0d26ee46d",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/8456294977b40660ce37db853de344f0d26ee46d",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java",
          "maven-embedder/src/main/mdo/core-extensions.mdo"
        ],
        "message": "[MNG-6326] Make the build fail if core extensions can not be loaded (#648)",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java",
          "maven-embedder/src/main/mdo/core-extensions.mdo||maven-embedder/src/main/mdo/core-extensions.mdo"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java -> maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "706:     private List<CoreExtensionEntry> loadCoreExtensions( CliRequest cliRequest, ClassRealm containerRealm,",
          "707:                                                          Set<String> providedArtifacts )",
          "708:     {",
          "709:         if ( cliRequest.multiModuleProjectDirectory == null )",
          "710:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "708:             throws Exception",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "717:             return Collections.emptyList();",
          "718:         }",
          "721:         {",
          "737:             {",
          "783:         }",
          "785:         {",
          "787:         }",
          "789:     }",
          "791:     private List<CoreExtension> readCoreExtensionsDescriptor( File extensionsFile )",
          "",
          "[Removed Lines]",
          "720:         try",
          "722:             List<CoreExtension> extensions = readCoreExtensionsDescriptor( extensionsFile );",
          "723:             if ( extensions.isEmpty() )",
          "724:             {",
          "725:                 return Collections.emptyList();",
          "726:             }",
          "728:             ContainerConfiguration cc = new DefaultContainerConfiguration() //",
          "729:                 .setClassWorld( cliRequest.classWorld ) //",
          "730:                 .setRealm( containerRealm ) //",
          "731:                 .setClassPathScanning( PlexusConstants.SCANNING_INDEX ) //",
          "732:                 .setAutoWiring( true ) //",
          "733:                 .setJSR250Lifecycle( true ) //",
          "734:                 .setName( \"maven\" );",
          "736:             DefaultPlexusContainer container = new DefaultPlexusContainer( cc, new AbstractModule()",
          "738:                 @Override",
          "739:                 protected void configure()",
          "740:                 {",
          "741:                     bind( ILoggerFactory.class ).toInstance( slf4jLoggerFactory );",
          "742:                 }",
          "743:             } );",
          "745:             try",
          "746:             {",
          "747:                 container.setLookupRealm( null );",
          "749:                 container.setLoggerManager( plexusLoggerManager );",
          "751:                 container.getLoggerManager().setThresholds( cliRequest.request.getLoggingLevel() );",
          "753:                 Thread.currentThread().setContextClassLoader( container.getContainerRealm() );",
          "755:                 executionRequestPopulator = container.lookup( MavenExecutionRequestPopulator.class );",
          "757:                 configurationProcessors = container.lookupMap( ConfigurationProcessor.class );",
          "759:                 configure( cliRequest );",
          "761:                 MavenExecutionRequest request = DefaultMavenExecutionRequest.copy( cliRequest.request );",
          "763:                 request = populateRequest( cliRequest, request );",
          "765:                 request = executionRequestPopulator.populateDefaults( request );",
          "767:                 BootstrapCoreExtensionManager resolver = container.lookup( BootstrapCoreExtensionManager.class );",
          "769:                 return Collections.unmodifiableList( resolver.loadCoreExtensions( request, providedArtifacts,",
          "770:                                                                                   extensions ) );",
          "772:             }",
          "773:             finally",
          "774:             {",
          "775:                 executionRequestPopulator = null;",
          "776:                 container.dispose();",
          "777:             }",
          "778:         }",
          "779:         catch ( RuntimeException e )",
          "780:         {",
          "782:             throw e;",
          "784:         catch ( Exception e )",
          "786:             slf4jLogger.warn( \"Failed to read extensions descriptor {}: {}\", extensionsFile, e.getMessage() );",
          "788:         return Collections.emptyList();",
          "",
          "[Added Lines]",
          "721:         List<CoreExtension> extensions = readCoreExtensionsDescriptor( extensionsFile );",
          "722:         if ( extensions.isEmpty() )",
          "724:             return Collections.emptyList();",
          "725:         }",
          "727:         ContainerConfiguration cc = new DefaultContainerConfiguration() //",
          "728:             .setClassWorld( cliRequest.classWorld ) //",
          "729:             .setRealm( containerRealm ) //",
          "730:             .setClassPathScanning( PlexusConstants.SCANNING_INDEX ) //",
          "731:             .setAutoWiring( true ) //",
          "732:             .setJSR250Lifecycle( true ) //",
          "733:             .setName( \"maven\" );",
          "735:         DefaultPlexusContainer container = new DefaultPlexusContainer( cc, new AbstractModule()",
          "736:         {",
          "737:             @Override",
          "738:             protected void configure()",
          "740:                 bind( ILoggerFactory.class ).toInstance( slf4jLoggerFactory );",
          "741:             }",
          "742:         } );",
          "744:         try",
          "745:         {",
          "746:             container.setLookupRealm( null );",
          "748:             container.setLoggerManager( plexusLoggerManager );",
          "750:             container.getLoggerManager().setThresholds( cliRequest.request.getLoggingLevel() );",
          "752:             Thread.currentThread().setContextClassLoader( container.getContainerRealm() );",
          "754:             executionRequestPopulator = container.lookup( MavenExecutionRequestPopulator.class );",
          "756:             configurationProcessors = container.lookupMap( ConfigurationProcessor.class );",
          "758:             configure( cliRequest );",
          "760:             MavenExecutionRequest request = DefaultMavenExecutionRequest.copy( cliRequest.request );",
          "762:             request = populateRequest( cliRequest, request );",
          "764:             request = executionRequestPopulator.populateDefaults( request );",
          "766:             BootstrapCoreExtensionManager resolver = container.lookup( BootstrapCoreExtensionManager.class );",
          "768:             return Collections.unmodifiableList( resolver.loadCoreExtensions( request, providedArtifacts,",
          "769:                                                                               extensions ) );",
          "772:         finally",
          "774:             executionRequestPopulator = null;",
          "775:             container.dispose();",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java -> maven-embedder/src/main/java/org/apache/maven/cli/internal/BootstrapCoreExtensionManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:     private List<Artifact> resolveExtension( CoreExtension extension, RepositorySystemSession repoSession,",
          "130:                                              List<RemoteRepository> repositories, DependencyFilter dependencyFilter )",
          "132:     {",
          "145:     }",
          "146: }",
          "",
          "[Removed Lines]",
          "131:         throws PluginResolutionException",
          "133:         Plugin plugin = new Plugin();",
          "134:         plugin.setGroupId( extension.getGroupId() );",
          "135:         plugin.setArtifactId( extension.getArtifactId() );",
          "136:         plugin.setVersion( extension.getVersion() );",
          "138:         DependencyNode root =",
          "139:             pluginDependenciesResolver.resolveCoreExtension( plugin, dependencyFilter, repositories, repoSession );",
          "140:         PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();",
          "141:         root.accept( nlg );",
          "142:         List<Artifact> artifacts = nlg.getArtifacts( false );",
          "144:         return artifacts;",
          "",
          "[Added Lines]",
          "131:         throws ExtensionResolutionException",
          "133:         try",
          "134:         {",
          "138:             Plugin plugin = new Plugin();",
          "139:             plugin.setGroupId( extension.getGroupId() );",
          "140:             plugin.setArtifactId( extension.getArtifactId() );",
          "141:             plugin.setVersion( extension.getVersion() );",
          "143:             DependencyNode root = pluginDependenciesResolver",
          "144:                     .resolveCoreExtension( plugin, dependencyFilter, repositories, repoSession );",
          "145:             PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();",
          "146:             root.accept( nlg );",
          "147:             List<Artifact> artifacts = nlg.getArtifacts( false );",
          "149:             return artifacts;",
          "150:         }",
          "151:         catch ( PluginResolutionException e )",
          "152:         {",
          "153:             throw new ExtensionResolutionException( extension, e.getCause() );",
          "154:         }",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java||maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java -> maven-embedder/src/main/java/org/apache/maven/cli/internal/ExtensionResolutionException.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.cli.internal;",
          "22: import org.apache.maven.cli.internal.extension.model.CoreExtension;",
          "29: public class ExtensionResolutionException",
          "30:     extends Exception",
          "31: {",
          "33:     private final CoreExtension extension;",
          "35:     public ExtensionResolutionException( CoreExtension extension, Throwable cause )",
          "36:     {",
          "37:         super( \"Extension \" + extension.getId() + \" or one of its dependencies could not be resolved: \"",
          "38:                         + cause.getMessage(), cause );",
          "39:         this.extension = extension;",
          "40:     }",
          "42:     public CoreExtension getExtension()",
          "43:     {",
          "44:         return extension;",
          "45:     }",
          "47: }",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/mdo/core-extensions.mdo||maven-embedder/src/main/mdo/core-extensions.mdo": [
          "File: maven-embedder/src/main/mdo/core-extensions.mdo -> maven-embedder/src/main/mdo/core-extensions.mdo",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:           <type>String</type>",
          "84:         </field>",
          "85:       </fields>",
          "86:     </class>",
          "87:   </classes>",
          "88: </model>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:       <codeSegments>",
          "87:         <codeSegment>",
          "88:           <version>1.0.0+</version>",
          "89:           <code>",
          "90:             <![CDATA[",
          "96:     public String getId()",
          "97:     {",
          "98:         StringBuilder id = new StringBuilder( 128 );",
          "100:         id.append( ( getGroupId() == null ) ? \"[unknown-group-id]\" : getGroupId() );",
          "101:         id.append( \":\" );",
          "102:         id.append( ( getArtifactId() == null ) ? \"[unknown-artifact-id]\" : getArtifactId() );",
          "103:         id.append( \":\" );",
          "104:         id.append( ( getVersion() == null ) ? \"[unknown-version]\" : getVersion() );",
          "106:         return id.toString();",
          "107:     }",
          "108:             ]]>",
          "109:           </code>",
          "110:         </codeSegment>",
          "111:       </codeSegments>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f141968464b4ad24e5d90f1389065141cda5e3b",
      "candidate_info": {
        "commit_hash": "6f141968464b4ad24e5d90f1389065141cda5e3b",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/6f141968464b4ad24e5d90f1389065141cda5e3b",
        "files": [
          "maven-core/src/main/java/org/apache/maven/DefaultMaven.java"
        ],
        "message": "[MNG-7400] Allow more WorkspaceReaders to participate\n\nThis closes #668",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/DefaultMaven.java||maven-core/src/main/java/org/apache/maven/DefaultMaven.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/DefaultMaven.java||maven-core/src/main/java/org/apache/maven/DefaultMaven.java": [
          "File: maven-core/src/main/java/org/apache/maven/DefaultMaven.java -> maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:             return addExceptionToResult( result, e );",
          "233:         }",
          "236:         try",
          "237:         {",
          "239:         }",
          "240:         catch ( ComponentLookupException e )",
          "241:         {",
          "242:             return addExceptionToResult( result, e );",
          "243:         }",
          "255:         repoSession.setReadOnly();",
          "257:         ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();",
          "",
          "[Removed Lines]",
          "235:         WorkspaceReader reactorWorkspace;",
          "238:             reactorWorkspace = container.lookup( WorkspaceReader.class, ReactorReader.HINT );",
          "252:         repoSession.setWorkspaceReader( ChainedWorkspaceReader.newInstance( reactorWorkspace,",
          "253:                                                                             repoSession.getWorkspaceReader() ) );",
          "",
          "[Added Lines]",
          "237:             setupWorkspaceReader( session, repoSession );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "326:         return result;",
          "327:     }",
          "329:     private void afterSessionEnd( Collection<MavenProject> projects, MavenSession session )",
          "330:         throws MavenExecutionException",
          "331:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:     private void setupWorkspaceReader( MavenSession session, DefaultRepositorySystemSession repoSession )",
          "319:         throws ComponentLookupException",
          "320:     {",
          "322:         List<WorkspaceReader> workspaceReaders = new ArrayList<WorkspaceReader>();",
          "324:         workspaceReaders.add( container.lookup( WorkspaceReader.class, ReactorReader.HINT ) );",
          "326:         WorkspaceReader repoWorkspaceReader = repoSession.getWorkspaceReader();",
          "327:         if ( repoWorkspaceReader != null )",
          "328:         {",
          "329:             workspaceReaders.add( repoWorkspaceReader );",
          "330:         }",
          "332:         for ( WorkspaceReader workspaceReader : getProjectScopedExtensionComponents( session.getProjects(),",
          "333:                                                                                      WorkspaceReader.class ) )",
          "334:         {",
          "335:             if ( workspaceReaders.contains( workspaceReader ) )",
          "336:             {",
          "337:                 continue;",
          "338:             }",
          "339:             workspaceReaders.add( workspaceReader );",
          "340:         }",
          "341:         WorkspaceReader[] readers = workspaceReaders.toArray( new WorkspaceReader[0] );",
          "342:         repoSession.setWorkspaceReader( new ChainedWorkspaceReader( readers ) );",
          "344:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "369:     {",
          "370:         Collection<AbstractMavenLifecycleParticipant> lifecycleListeners = new LinkedHashSet<>();",
          "373:         try",
          "374:         {",
          "387:             for ( MavenProject project : projects )",
          "388:             {",
          "389:                 ClassLoader projectRealm = project.getClassRealm();",
          "391:                 if ( projectRealm != null && scannedRealms.add( projectRealm ) )",
          "392:                 {",
          "395:                     try",
          "396:                     {",
          "398:                     }",
          "399:                     catch ( ComponentLookupException e )",
          "400:                     {",
          "403:                     }",
          "404:                 }",
          "405:             }",
          "406:         }",
          "407:         finally",
          "408:         {",
          "410:         }",
          "413:     }",
          "415:     private MavenExecutionResult addExceptionToResult( MavenExecutionResult result, Throwable e )",
          "",
          "[Removed Lines]",
          "372:         ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();",
          "375:             try",
          "376:             {",
          "377:                 lifecycleListeners.addAll( container.lookupList( AbstractMavenLifecycleParticipant.class ) );",
          "378:             }",
          "379:             catch ( ComponentLookupException e )",
          "380:             {",
          "382:                 logger.warn( \"Failed to lookup lifecycle participants: \" + e.getMessage() );",
          "383:             }",
          "385:             Collection<ClassLoader> scannedRealms = new HashSet<>();",
          "393:                     Thread.currentThread().setContextClassLoader( projectRealm );",
          "397:                         lifecycleListeners.addAll( container.lookupList( AbstractMavenLifecycleParticipant.class ) );",
          "402:                         logger.warn( \"Failed to lookup lifecycle participants: \" + e.getMessage() );",
          "409:             Thread.currentThread().setContextClassLoader( originalClassLoader );",
          "412:         return lifecycleListeners;",
          "",
          "[Added Lines]",
          "391:             lifecycleListeners.addAll( container.lookupList( AbstractMavenLifecycleParticipant.class ) );",
          "392:         }",
          "393:         catch ( ComponentLookupException e )",
          "394:         {",
          "396:             logger.warn( \"Failed to lookup lifecycle participants: \" + e.getMessage() );",
          "397:         }",
          "399:         lifecycleListeners.addAll( getProjectScopedExtensionComponents( projects,",
          "400:                                                                         AbstractMavenLifecycleParticipant.class ) );",
          "402:         return lifecycleListeners;",
          "403:     }",
          "405:     protected <T> Collection<T> getProjectScopedExtensionComponents( Collection<MavenProject> projects, Class<T> role )",
          "406:     {",
          "408:         Collection<T> foundComponents = new LinkedHashSet<>();",
          "409:         Collection<ClassLoader> scannedRealms = new HashSet<>();",
          "411:         Thread currentThread = Thread.currentThread();",
          "412:         ClassLoader originalContextClassLoader = currentThread.getContextClassLoader();",
          "413:         try",
          "414:         {",
          "421:                     currentThread.setContextClassLoader( projectRealm );",
          "425:                         foundComponents.addAll( container.lookupList( role ) );",
          "430:                         logger.warn( \"Failed to lookup \" + role + \": \" + e.getMessage() );",
          "434:             return foundComponents;",
          "438:             currentThread.setContextClassLoader( originalContextClassLoader );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91894251505fe917b911885d565e6bc1c8bebadd",
      "candidate_info": {
        "commit_hash": "91894251505fe917b911885d565e6bc1c8bebadd",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/91894251505fe917b911885d565e6bc1c8bebadd",
        "files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java"
        ],
        "message": "[MNG-6967] Improve the command line output from maven-artifact.",
        "before_after_code_files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java||maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java||maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java": [
          "File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java -> maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:             }",
          "591:             return buffer.toString();",
          "592:         }",
          "593:     }",
          "595:     public ComparableVersion( String version )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "597:         private String toListString()",
          "598:         {",
          "599:             StringBuilder buffer = new StringBuilder();",
          "600:             buffer.append( \"[\" );",
          "601:             for ( Item item : this )",
          "602:             {",
          "603:                 if ( buffer.length() > 1 )",
          "604:                 {",
          "605:                     buffer.append( \", \" );",
          "606:                 }",
          "607:                 if ( item instanceof ListItem )",
          "608:                 {",
          "609:                     buffer.append( ( (ListItem ) item ).toListString() );",
          "610:                 }",
          "611:                 else",
          "612:                 {",
          "613:                     buffer.append( item );",
          "614:                 }",
          "615:             }",
          "616:             buffer.append( \"]\" );",
          "617:             return buffer.toString();",
          "618:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "777:     public static void main( String... args )",
          "778:     {",
          "780:         if ( args.length == 0 )",
          "781:         {",
          "782:             return;",
          "",
          "[Removed Lines]",
          "779:         System.out.println( \"Display parameters as parsed by Maven (in canonical form) and comparison result:\" );",
          "",
          "[Added Lines]",
          "804:         System.out.println( \"Display parameters as parsed by Maven (in canonical form and as a list of tokens) and\"",
          "805:                                 + \" comparison result:\" );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "795:                     + ( ( compare == 0 ) ? \"==\" : ( ( compare < 0 ) ? \"<\" : \">\" ) ) + ' ' + version );",
          "796:             }",
          "800:             prev = c;",
          "801:         }",
          "802:     }",
          "803: }",
          "",
          "[Removed Lines]",
          "798:             System.out.println( String.valueOf( i++ ) + \". \" + version + \" == \" + c.getCanonical() );",
          "",
          "[Added Lines]",
          "824:             System.out.println( ( i++ ) + \". \" + version + \" -> \" + c.getCanonical() + \"; tokens: \" + c.items.toListString() );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0635e92665cbd247a4144c328321b0e9f058398e",
      "candidate_info": {
        "commit_hash": "0635e92665cbd247a4144c328321b0e9f058398e",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/0635e92665cbd247a4144c328321b0e9f058398e",
        "files": [
          "apache-maven/src/site/apt/index.apt.vm"
        ],
        "message": "[MNG-7184] document .mavenrc/mavenrc_pre.bat|cmd and MAVEN_SKIP_RC",
        "before_after_code_files": [
          "apache-maven/src/site/apt/index.apt.vm||apache-maven/src/site/apt/index.apt.vm"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apache-maven/src/site/apt/index.apt.vm||apache-maven/src/site/apt/index.apt.vm": [
          "File: apache-maven/src/site/apt/index.apt.vm -> apache-maven/src/site/apt/index.apt.vm",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: ~~ Licensed to the Apache Software Foundation (ASF) under one",
          "2: ~~ or more contributor license agreements.  See the NOTICE file",
          "3: ~~ distributed with this work for additional information",
          "4: ~~ regarding copyright ownership.  The ASF licenses this file",
          "5: ~~ to you under the Apache License, Version 2.0 (the",
          "6: ~~ \"License\"); you may not use this file except in compliance",
          "7: ~~ with the License.  You may obtain a copy of the License at",
          "8: ~~",
          "9: ~~ http://www.apache.org/licenses/LICENSE-2.0",
          "10: ~~",
          "11: ~~ Unless required by applicable law or agreed to in writing,",
          "12: ~~ software distributed under the License is distributed on an",
          "13: ~~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "14: ~~ KIND, either express or implied.  See the License for the",
          "15: ~~ specific language governing permissions and limitations",
          "16: ~~ under the License.",
          "18:  -----",
          "19:  ${project.name}",
          "20:  -----",
          "21:  Herv\u00e9 Boutemy",
          "22:  -----",
          "23:  2021-07-11",
          "24:  -----",
          "26: ${project.name}",
          "28:  ${project.description}",
          "38:    []",
          "40:   and these scripts calls can be disabled by setting <<<MAVEN_SKIP_RC>>> environment variable.",
          "",
          "---------------"
        ]
      }
    }
  ]
}