{
  "cve_id": "CVE-2020-27589",
  "cve_desc": "Synopsys hub-rest-api-python (aka blackduck on PyPI) version 0.0.25 - 0.0.52 does not validate SSL certificates in certain cases.",
  "repo": "blackducksoftware/hub-rest-api-python",
  "patch_hash": "0a25777117515b8b4ff287a98f57837a8c6bdbdb",
  "patch_info": {
    "commit_hash": "0a25777117515b8b4ff287a98f57837a8c6bdbdb",
    "repo": "blackducksoftware/hub-rest-api-python",
    "commit_url": "https://github.com/blackducksoftware/hub-rest-api-python/commit/0a25777117515b8b4ff287a98f57837a8c6bdbdb",
    "files": [
      "blackduck/HubRestApi.py",
      "blackduck/__version__.py"
    ],
    "message": "Merge pull request #113 from blackducksoftware/gsnyder/fix-hard-coded-use-of-insecure-connections\n\nfixed use of hard-coded values for the verify parameter being supplied to requests calls",
    "before_after_code_files": [
      "blackduck/HubRestApi.py||blackduck/HubRestApi.py",
      "blackduck/__version__.py||blackduck/__version__.py"
    ]
  },
  "patch_diff": {
    "blackduck/HubRestApi.py||blackduck/HubRestApi.py": [
      "File: blackduck/HubRestApi.py -> blackduck/HubRestApi.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1307:         if filename.endswith('.json') or filename.endswith('.jsonld'):",
      "1308:             headers['Content-Type'] = 'application/ld+json'",
      "1309:             with open(filename,\"r\") as f:",
      "1311:         elif filename.endswith('.bdio'):",
      "1312:             headers['Content-Type'] = 'application/vnd.blackducksoftware.bdio+zip'",
      "1313:             with open(filename,\"rb\") as f:",
      "1315:         else:",
      "1316:             raise Exception(\"Unkown file type\")",
      "1317:         return response",
      "",
      "[Removed Lines]",
      "1310:                 response = requests.post(url, headers=headers, data=f, verify=False)",
      "1314:                 response = requests.post(url, headers=headers, data=f, verify=False)",
      "",
      "[Added Lines]",
      "1310:                 response = requests.post(url, headers=headers, data=f, verify=not self.config['insecure'])",
      "1314:                 response = requests.post(url, headers=headers, data=f, verify=not self.config['insecure'])",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1338:                     if not os.path.exists(project_name):",
      "1339:                         os.mkdir(project_name)",
      "1340:                     pathname = os.path.join(project_name, filename)",
      "1342:                 with open(pathname, \"wb\") as f:",
      "1343:                     for data in responce.iter_content():",
      "1344:                         f.write(data)",
      "",
      "[Removed Lines]",
      "1341:                 responce = requests.get(url, headers=self.get_headers(), stream=True, verify=False)",
      "",
      "[Added Lines]",
      "1341:                 responce = requests.get(url, headers=self.get_headers(), stream=True, verify=not self.config['insecure'])",
      "",
      "---------------"
    ],
    "blackduck/__version__.py||blackduck/__version__.py": [
      "File: blackduck/__version__.py -> blackduck/__version__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: __version__ = '.'.join(map(str, VERSION))",
      "",
      "[Removed Lines]",
      "1: VERSION = (0, 0, 52)",
      "",
      "[Added Lines]",
      "1: VERSION = (0, 0, 53)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "273b27d0de1004389dd8cf43c40b1197c787e7cd",
      "candidate_info": {
        "commit_hash": "273b27d0de1004389dd8cf43c40b1197c787e7cd",
        "repo": "blackducksoftware/hub-rest-api-python",
        "commit_url": "https://github.com/blackducksoftware/hub-rest-api-python/commit/273b27d0de1004389dd8cf43c40b1197c787e7cd",
        "files": [
          "blackduck/HubRestApi.py",
          "blackduck/__version__.py"
        ],
        "message": "fixed use of hard-coded values for the verify parameter being supplied to the requests module calls",
        "before_after_code_files": [
          "blackduck/HubRestApi.py||blackduck/HubRestApi.py",
          "blackduck/__version__.py||blackduck/__version__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/blackducksoftware/hub-rest-api-python/pull/113"
        ],
        "olp_code_files": {
          "patch": [
            "blackduck/HubRestApi.py||blackduck/HubRestApi.py",
            "blackduck/__version__.py||blackduck/__version__.py"
          ],
          "candidate": [
            "blackduck/HubRestApi.py||blackduck/HubRestApi.py",
            "blackduck/__version__.py||blackduck/__version__.py"
          ]
        }
      },
      "candidate_diff": {
        "blackduck/HubRestApi.py||blackduck/HubRestApi.py": [
          "File: blackduck/HubRestApi.py -> blackduck/HubRestApi.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1307:         if filename.endswith('.json') or filename.endswith('.jsonld'):",
          "1308:             headers['Content-Type'] = 'application/ld+json'",
          "1309:             with open(filename,\"r\") as f:",
          "1311:         elif filename.endswith('.bdio'):",
          "1312:             headers['Content-Type'] = 'application/vnd.blackducksoftware.bdio+zip'",
          "1313:             with open(filename,\"rb\") as f:",
          "1315:         else:",
          "1316:             raise Exception(\"Unkown file type\")",
          "1317:         return response",
          "",
          "[Removed Lines]",
          "1310:                 response = requests.post(url, headers=headers, data=f, verify=False)",
          "1314:                 response = requests.post(url, headers=headers, data=f, verify=False)",
          "",
          "[Added Lines]",
          "1310:                 response = requests.post(url, headers=headers, data=f, verify=not self.config['insecure'])",
          "1314:                 response = requests.post(url, headers=headers, data=f, verify=not self.config['insecure'])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1338:                     if not os.path.exists(project_name):",
          "1339:                         os.mkdir(project_name)",
          "1340:                     pathname = os.path.join(project_name, filename)",
          "1342:                 with open(pathname, \"wb\") as f:",
          "1343:                     for data in responce.iter_content():",
          "1344:                         f.write(data)",
          "",
          "[Removed Lines]",
          "1341:                 responce = requests.get(url, headers=self.get_headers(), stream=True, verify=False)",
          "",
          "[Added Lines]",
          "1341:                 responce = requests.get(url, headers=self.get_headers(), stream=True, verify=not self.config['insecure'])",
          "",
          "---------------"
        ],
        "blackduck/__version__.py||blackduck/__version__.py": [
          "File: blackduck/__version__.py -> blackduck/__version__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: __version__ = '.'.join(map(str, VERSION))",
          "",
          "[Removed Lines]",
          "1: VERSION = (0, 0, 52)",
          "",
          "[Added Lines]",
          "1: VERSION = (0, 0, 53)",
          "",
          "---------------"
        ]
      }
    }
  ]
}