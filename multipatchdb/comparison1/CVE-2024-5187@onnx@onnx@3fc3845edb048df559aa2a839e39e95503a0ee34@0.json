{
  "cve_id": "CVE-2024-5187",
  "cve_desc": "A vulnerability in the `download_model_with_test_data` function of the onnx/onnx framework, version 1.16.0, allows for arbitrary file overwrite due to inadequate prevention of path traversal attacks in malicious tar files. This vulnerability enables attackers to overwrite any file on the system, potentially leading to remote code execution, deletion of system, personal, or application files, thus impacting the integrity and availability of the system. The issue arises from the function's handling of tar file extraction without performing security checks on the paths within the tar file, as demonstrated by the ability to overwrite the `/home/kali/.ssh/authorized_keys` file by specifying an absolute path in the malicious tar file.",
  "repo": "onnx/onnx",
  "patch_hash": "3fc3845edb048df559aa2a839e39e95503a0ee34",
  "patch_info": {
    "commit_hash": "3fc3845edb048df559aa2a839e39e95503a0ee34",
    "repo": "onnx/onnx",
    "commit_url": "https://github.com/onnx/onnx/commit/3fc3845edb048df559aa2a839e39e95503a0ee34",
    "files": [
      "onnx/hub.py"
    ],
    "message": "Mitigate tarball directory traversal risks (#6164)\n\nHi, this pr is cleaner version than #6145\n\nSigned-off-by: sunriseXu <15927176697@163.com>\nCo-authored-by: sunriseXu <15927176697@163.com>\nCo-authored-by: Justin Chu <justinchuby@users.noreply.github.com>",
    "before_after_code_files": [
      "onnx/hub.py||onnx/hub.py"
    ]
  },
  "patch_diff": {
    "onnx/hub.py||onnx/hub.py": [
      "File: onnx/hub.py -> onnx/hub.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "290:     return onnx.load(cast(IO[bytes], BytesIO(model_bytes)))",
      "293: def download_model_with_test_data(",
      "294:     model: str,",
      "295:     repo: str = \"onnx/models:main\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "293: def _tar_members_filter(tar: tarfile.TarFile, base: str) -> list[tarfile.TarInfo]:",
      "294:     \"\"\"Check that the content of ``tar`` will be extracted safely",
      "296:     Args:",
      "297:         tar: The tarball file",
      "298:         base: The directory where the tarball will be extracted",
      "300:     Returns:",
      "301:         list of tarball members",
      "302:     \"\"\"",
      "303:     result = []",
      "304:     for member in tar:",
      "305:         member_path = os.path.join(base, member.name)",
      "306:         abs_base = os.path.abspath(base)",
      "307:         abs_member = os.path.abspath(member_path)",
      "308:         if not abs_member.startswith(abs_base):",
      "309:             raise RuntimeError(",
      "310:                 f\"The tarball member {member_path} in downloading model contains \"",
      "311:                 f\"directory traversal sequence which may contain harmful payload.\"",
      "312:             )",
      "313:         elif member.issym() or member.islnk():",
      "314:             raise RuntimeError(",
      "315:                 f\"The tarball member {member_path} in downloading model contains \"",
      "316:                 f\"symbolic links which may contain harmful payload.\"",
      "317:             )",
      "318:         result.append(member)",
      "319:     return result",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "298:     silent: bool = False,",
      "299: ) -> str | None:",
      "300:     \"\"\"Downloads a model along with test data by name from the onnx model hub and returns the directory to which the files have been extracted.",
      "302:     Args:",
      "303:         model: The name of the onnx model in the manifest. This field is",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "330:     Users are responsible for making sure the model comes from a trusted source, and the data is safe to be extracted.",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "368:         local_model_with_data_dir_path = local_model_with_data_path[",
      "369:             0 : len(local_model_with_data_path) - 7",
      "370:         ]",
      "372:     model_with_data_path = (",
      "373:         local_model_with_data_dir_path",
      "374:         + \"/\"",
      "",
      "[Removed Lines]",
      "371:         model_with_data_zipped.extractall(local_model_with_data_dir_path)",
      "",
      "[Added Lines]",
      "401:         # Mitigate tarball directory traversal risks",
      "402:         if hasattr(tarfile, \"data_filter\"):",
      "403:             model_with_data_zipped.extractall(",
      "404:                 path=local_model_with_data_dir_path, filter=\"data\"",
      "405:             )",
      "406:         else:",
      "407:             model_with_data_zipped.extractall(",
      "408:                 path=local_model_with_data_dir_path,",
      "409:                 members=_tar_members_filter(",
      "410:                     model_with_data_zipped, local_model_with_data_dir_path",
      "411:                 ),",
      "412:             )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "467fc3253e579a0332c5c8d822c599c51e09eec5",
      "candidate_info": {
        "commit_hash": "467fc3253e579a0332c5c8d822c599c51e09eec5",
        "repo": "onnx/onnx",
        "commit_url": "https://github.com/onnx/onnx/commit/467fc3253e579a0332c5c8d822c599c51e09eec5",
        "files": [
          "onnx/hub.py"
        ],
        "message": "Mitigate tarball directory traversal risks (#6164)\n\nHi, this pr is cleaner version than #6145\n\nSigned-off-by: sunflowersxu <166728538+sunflowersxu@users.noreply.github.com>\nCo-authored-by: sunflowersxu <166728538+sunflowersxu@users.noreply.github.com>\nCo-authored-by: Justin Chu <justinchuby@users.noreply.github.com>\n(cherry picked from commit 3fc3845edb048df559aa2a839e39e95503a0ee34)\nSigned-off-by: Andreas Fehlner <fehlner@arcor.de>",
        "before_after_code_files": [
          "onnx/hub.py||onnx/hub.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "onnx/hub.py||onnx/hub.py"
          ],
          "candidate": [
            "onnx/hub.py||onnx/hub.py"
          ]
        }
      },
      "candidate_diff": {
        "onnx/hub.py||onnx/hub.py": [
          "File: onnx/hub.py -> onnx/hub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:     return onnx.load(cast(IO[bytes], BytesIO(model_bytes)))",
          "291: def download_model_with_test_data(",
          "292:     model: str,",
          "293:     repo: str = \"onnx/models:main\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291: def _tar_members_filter(tar: tarfile.TarFile, base: str) -> list[tarfile.TarInfo]:",
          "292:     \"\"\"Check that the content of ``tar`` will be extracted safely",
          "294:     Args:",
          "295:         tar: The tarball file",
          "296:         base: The directory where the tarball will be extracted",
          "298:     Returns:",
          "299:         list of tarball members",
          "300:     \"\"\"",
          "301:     result = []",
          "302:     for member in tar:",
          "303:         member_path = os.path.join(base, member.name)",
          "304:         abs_base = os.path.abspath(base)",
          "305:         abs_member = os.path.abspath(member_path)",
          "306:         if not abs_member.startswith(abs_base):",
          "307:             raise RuntimeError(",
          "308:                 f\"The tarball member {member_path} in downloading model contains \"",
          "309:                 f\"directory traversal sequence which may contain harmful payload.\"",
          "310:             )",
          "311:         elif member.issym() or member.islnk():",
          "312:             raise RuntimeError(",
          "313:                 f\"The tarball member {member_path} in downloading model contains \"",
          "314:                 f\"symbolic links which may contain harmful payload.\"",
          "315:             )",
          "316:         result.append(member)",
          "317:     return result",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:     silent: bool = False,",
          "297: ) -> Optional[str]:",
          "298:     \"\"\"Downloads a model along with test data by name from the onnx model hub and returns the directory to which the files have been extracted.",
          "300:     Args:",
          "301:         model: The name of the onnx model in the manifest. This field is",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:     Users are responsible for making sure the model comes from a trusted source, and the data is safe to be extracted.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366:         local_model_with_data_dir_path = local_model_with_data_path[",
          "367:             0 : len(local_model_with_data_path) - 7",
          "368:         ]",
          "370:     model_with_data_path = (",
          "371:         local_model_with_data_dir_path",
          "372:         + \"/\"",
          "",
          "[Removed Lines]",
          "369:         model_with_data_zipped.extractall(local_model_with_data_dir_path)",
          "",
          "[Added Lines]",
          "399:         # Mitigate tarball directory traversal risks",
          "400:         if hasattr(tarfile, \"data_filter\"):",
          "401:             model_with_data_zipped.extractall(",
          "402:                 path=local_model_with_data_dir_path, filter=\"data\"",
          "403:             )",
          "404:         else:",
          "405:             model_with_data_zipped.extractall(",
          "406:                 path=local_model_with_data_dir_path,",
          "407:                 members=_tar_members_filter(",
          "408:                     model_with_data_zipped, local_model_with_data_dir_path",
          "409:                 ),",
          "410:             )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "766cd2e7b2d6e2462fb2e0e4c4770a523a89134d",
      "candidate_info": {
        "commit_hash": "766cd2e7b2d6e2462fb2e0e4c4770a523a89134d",
        "repo": "onnx/onnx",
        "commit_url": "https://github.com/onnx/onnx/commit/766cd2e7b2d6e2462fb2e0e4c4770a523a89134d",
        "files": [
          "onnx/hub.py"
        ],
        "message": "Mitigate tarball directory traversal risks (#6164)\n\nHi, this pr is cleaner version than #6145\n\nSigned-off-by: sunflowersxu <166728538+sunflowersxu@users.noreply.github.com>\nCo-authored-by: sunflowersxu <166728538+sunflowersxu@users.noreply.github.com>\nCo-authored-by: Justin Chu <justinchuby@users.noreply.github.com>\n(cherry picked from commit 3fc3845edb048df559aa2a839e39e95503a0ee34)",
        "before_after_code_files": [
          "onnx/hub.py||onnx/hub.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "onnx/hub.py||onnx/hub.py"
          ],
          "candidate": [
            "onnx/hub.py||onnx/hub.py"
          ]
        }
      },
      "candidate_diff": {
        "onnx/hub.py||onnx/hub.py": [
          "File: onnx/hub.py -> onnx/hub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:     return onnx.load(cast(IO[bytes], BytesIO(model_bytes)))",
          "291: def download_model_with_test_data(",
          "292:     model: str,",
          "293:     repo: str = \"onnx/models:main\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291: def _tar_members_filter(tar: tarfile.TarFile, base: str) -> list[tarfile.TarInfo]:",
          "292:     \"\"\"Check that the content of ``tar`` will be extracted safely",
          "294:     Args:",
          "295:         tar: The tarball file",
          "296:         base: The directory where the tarball will be extracted",
          "298:     Returns:",
          "299:         list of tarball members",
          "300:     \"\"\"",
          "301:     result = []",
          "302:     for member in tar:",
          "303:         member_path = os.path.join(base, member.name)",
          "304:         abs_base = os.path.abspath(base)",
          "305:         abs_member = os.path.abspath(member_path)",
          "306:         if not abs_member.startswith(abs_base):",
          "307:             raise RuntimeError(",
          "308:                 f\"The tarball member {member_path} in downloading model contains \"",
          "309:                 f\"directory traversal sequence which may contain harmful payload.\"",
          "310:             )",
          "311:         elif member.issym() or member.islnk():",
          "312:             raise RuntimeError(",
          "313:                 f\"The tarball member {member_path} in downloading model contains \"",
          "314:                 f\"symbolic links which may contain harmful payload.\"",
          "315:             )",
          "316:         result.append(member)",
          "317:     return result",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:     silent: bool = False,",
          "297: ) -> Optional[str]:",
          "298:     \"\"\"Downloads a model along with test data by name from the onnx model hub and returns the directory to which the files have been extracted.",
          "300:     Args:",
          "301:         model: The name of the onnx model in the manifest. This field is",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:     Users are responsible for making sure the model comes from a trusted source, and the data is safe to be extracted.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "366:         local_model_with_data_dir_path = local_model_with_data_path[",
          "367:             0 : len(local_model_with_data_path) - 7",
          "368:         ]",
          "370:     model_with_data_path = (",
          "371:         local_model_with_data_dir_path",
          "372:         + \"/\"",
          "",
          "[Removed Lines]",
          "369:         model_with_data_zipped.extractall(local_model_with_data_dir_path)",
          "",
          "[Added Lines]",
          "399:         # Mitigate tarball directory traversal risks",
          "400:         if hasattr(tarfile, \"data_filter\"):",
          "401:             model_with_data_zipped.extractall(",
          "402:                 path=local_model_with_data_dir_path, filter=\"data\"",
          "403:             )",
          "404:         else:",
          "405:             model_with_data_zipped.extractall(",
          "406:                 path=local_model_with_data_dir_path,",
          "407:                 members=_tar_members_filter(",
          "408:                     model_with_data_zipped, local_model_with_data_dir_path",
          "409:                 ),",
          "410:             )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b70f9b673259360b6a2339c4bd97db9ea6e552f",
      "candidate_info": {
        "commit_hash": "1b70f9b673259360b6a2339c4bd97db9ea6e552f",
        "repo": "onnx/onnx",
        "commit_url": "https://github.com/onnx/onnx/commit/1b70f9b673259360b6a2339c4bd97db9ea6e552f",
        "files": [
          "onnx/backend/test/runner/__init__.py",
          "onnx/hub.py",
          "onnx/utils.py"
        ],
        "message": "Refactor safe extract method to fix issue 6215 (#6222)\n\n### Description\n#6215\n\n---------\n\nSigned-off-by: liqunfu <liqun.fu@microsoft.com>\nSigned-off-by: liqun Fu <liqun.fu@microsoft.com>\nCo-authored-by: G. Ramalingam <grama@microsoft.com>\nCo-authored-by: Justin Chu <justinchuby@users.noreply.github.com>",
        "before_after_code_files": [
          "onnx/backend/test/runner/__init__.py||onnx/backend/test/runner/__init__.py",
          "onnx/hub.py||onnx/hub.py",
          "onnx/utils.py||onnx/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "onnx/hub.py||onnx/hub.py"
          ],
          "candidate": [
            "onnx/hub.py||onnx/hub.py"
          ]
        }
      },
      "candidate_diff": {
        "onnx/backend/test/runner/__init__.py||onnx/backend/test/runner/__init__.py": [
          "File: onnx/backend/test/runner/__init__.py -> onnx/backend/test/runner/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import re",
          "11: import shutil",
          "12: import sys",
          "14: import tempfile",
          "15: import time",
          "16: import unittest",
          "",
          "[Removed Lines]",
          "13: import tarfile",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:             )",
          "243:             urlretrieve(model_test.url, download_file.name)",
          "244:             print(\"Done\")",
          "247:         except Exception as e:",
          "248:             print(f\"Failed to prepare data for model {model_test.model_name}: {e}\")",
          "249:             raise",
          "",
          "[Removed Lines]",
          "245:             with tarfile.open(download_file.name) as t:",
          "246:                 t.extractall(models_dir)",
          "",
          "[Added Lines]",
          "244:             onnx.utils._extract_model_safe(download_file.name, models_dir)",
          "",
          "---------------"
        ],
        "onnx/hub.py||onnx/hub.py": [
          "File: onnx/hub.py -> onnx/hub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import json",
          "12: import os",
          "13: import sys",
          "15: from io import BytesIO",
          "16: from os.path import join",
          "17: from typing import IO, Any, Dict, List, cast",
          "",
          "[Removed Lines]",
          "14: import tarfile",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "290:     return onnx.load(cast(IO[bytes], BytesIO(model_bytes)))",
          "322: def download_model_with_test_data(",
          "323:     model: str,",
          "324:     repo: str = \"onnx/models:main\",",
          "",
          "[Removed Lines]",
          "293: def _tar_members_filter(tar: tarfile.TarFile, base: str) -> list[tarfile.TarInfo]:",
          "294:     \"\"\"Check that the content of ``tar`` will be extracted safely",
          "296:     Args:",
          "297:         tar: The tarball file",
          "298:         base: The directory where the tarball will be extracted",
          "300:     Returns:",
          "301:         list of tarball members",
          "302:     \"\"\"",
          "303:     result = []",
          "304:     for member in tar:",
          "305:         member_path = os.path.join(base, member.name)",
          "306:         abs_base = os.path.abspath(base)",
          "307:         abs_member = os.path.abspath(member_path)",
          "308:         if not abs_member.startswith(abs_base):",
          "309:             raise RuntimeError(",
          "310:                 f\"The tarball member {member_path} in downloading model contains \"",
          "311:                 f\"directory traversal sequence which may contain harmful payload.\"",
          "312:             )",
          "313:         elif member.issym() or member.islnk():",
          "314:             raise RuntimeError(",
          "315:                 f\"The tarball member {member_path} in downloading model contains \"",
          "316:                 f\"symbolic links which may contain harmful payload.\"",
          "317:             )",
          "318:         result.append(member)",
          "319:     return result",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "393:                 \"download the model from the model hub.\"",
          "394:             )",
          "413:     model_with_data_path = (",
          "414:         local_model_with_data_dir_path",
          "415:         + \"/\"",
          "",
          "[Removed Lines]",
          "396:     with tarfile.open(local_model_with_data_path) as model_with_data_zipped:",
          "397:         # FIXME: Avoid index manipulation with magic numbers",
          "398:         local_model_with_data_dir_path = local_model_with_data_path[",
          "399:             0 : len(local_model_with_data_path) - 7",
          "400:         ]",
          "401:         # Mitigate tarball directory traversal risks",
          "402:         if hasattr(tarfile, \"data_filter\"):",
          "403:             model_with_data_zipped.extractall(",
          "404:                 path=local_model_with_data_dir_path, filter=\"data\"",
          "405:             )",
          "406:         else:",
          "407:             model_with_data_zipped.extractall(",
          "408:                 path=local_model_with_data_dir_path,",
          "409:                 members=_tar_members_filter(",
          "410:                     model_with_data_zipped, local_model_with_data_dir_path",
          "411:                 ),",
          "412:             )",
          "",
          "[Added Lines]",
          "366:     # FIXME: Avoid index manipulation with magic numbers,",
          "367:     # remove \".tar.gz\"",
          "368:     local_model_with_data_dir_path = local_model_with_data_path[",
          "369:         0 : len(local_model_with_data_path) - 7",
          "370:     ]",
          "371:     onnx.utils._extract_model_safe(",
          "372:         local_model_with_data_path, local_model_with_data_dir_path",
          "373:     )",
          "",
          "---------------"
        ],
        "onnx/utils.py||onnx/utils.py": [
          "File: onnx/utils.py -> onnx/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from __future__ import annotations",
          "6: import os",
          "8: import onnx.checker",
          "9: import onnx.helper",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import tarfile",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:     onnx.save(extracted, output_path)",
          "233:     if check_model:",
          "234:         onnx.checker.check_model(output_path)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238: def _tar_members_filter(",
          "239:     tar: tarfile.TarFile, base: str | os.PathLike",
          "240: ) -> list[tarfile.TarInfo]:",
          "241:     \"\"\"Check that the content of ``tar`` will be extracted safely",
          "243:     Args:",
          "244:         tar: The tarball file",
          "245:         base: The directory where the tarball will be extracted",
          "247:     Returns:",
          "248:         list of tarball members",
          "249:     \"\"\"",
          "250:     result = []",
          "251:     for member in tar:",
          "252:         member_path = os.path.join(base, member.name)",
          "253:         abs_base = os.path.abspath(base)",
          "254:         abs_member = os.path.abspath(member_path)",
          "255:         if not abs_member.startswith(abs_base):",
          "256:             raise RuntimeError(",
          "257:                 f\"The tarball member {member_path} in downloading model contains \"",
          "258:                 f\"directory traversal sequence which may contain harmful payload.\"",
          "259:             )",
          "260:         elif member.issym() or member.islnk():",
          "261:             raise RuntimeError(",
          "262:                 f\"The tarball member {member_path} in downloading model contains \"",
          "263:                 f\"symbolic links which may contain harmful payload.\"",
          "264:             )",
          "265:         result.append(member)",
          "266:     return result",
          "269: def _extract_model_safe(",
          "270:     model_tar_path: str | os.PathLike, local_model_with_data_dir_path: str | os.PathLike",
          "271: ) -> None:",
          "272:     \"\"\"Safely extracts a tar file to a specified directory.",
          "274:     This function ensures that the extraction process mitigates against",
          "275:     directory traversal vulnerabilities by validating or sanitizing paths",
          "276:     within the tar file. It also provides compatibility for different versions",
          "277:     of the tarfile module by checking for the availability of certain attributes",
          "278:     or methods before invoking them.",
          "280:     Args:",
          "281:         model_tar_path: The path to the tar file to be extracted.",
          "282:         local_model_with_data_dir_path: The directory path where the tar file",
          "283:       contents will be extracted to.",
          "284:     \"\"\"",
          "285:     with tarfile.open(model_tar_path) as model_with_data_zipped:",
          "286:         # Mitigate tarball directory traversal risks",
          "287:         if hasattr(tarfile, \"data_filter\"):",
          "288:             model_with_data_zipped.extractall(",
          "289:                 path=local_model_with_data_dir_path, filter=\"data\"",
          "290:             )",
          "291:         else:",
          "292:             model_with_data_zipped.extractall(",
          "293:                 path=local_model_with_data_dir_path,",
          "294:                 members=_tar_members_filter(",
          "295:                     model_with_data_zipped, local_model_with_data_dir_path",
          "296:                 ),",
          "297:             )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f615b26d564ca5d2e2a28af81f4b86a99a1865f1",
      "candidate_info": {
        "commit_hash": "f615b26d564ca5d2e2a28af81f4b86a99a1865f1",
        "repo": "onnx/onnx",
        "commit_url": "https://github.com/onnx/onnx/commit/f615b26d564ca5d2e2a28af81f4b86a99a1865f1",
        "files": [
          "onnx/compose.py",
          "onnx/gen_proto.py",
          "onnx/helper.py",
          "onnx/hub.py",
          "onnx/utils.py"
        ],
        "message": "Add type annotations and fix some lint warnings in Python code (#6470)\n\n### Description\n<!-- - Describe your changes. -->\nMore robust type checking in Python.\n### Motivation and Context\nFor better code.\n<!-- - Why is this change required? What problem does it solve? -->\n<!-- - If it fixes an open issue, please link to the issue here. -->\n\n---------\n\nSigned-off-by: cyy <cyyever@outlook.com>\nSigned-off-by: cyyever <cyyever@outlook.com>\nCo-authored-by: Justin Chu <justinchuby@users.noreply.github.com>",
        "before_after_code_files": [
          "onnx/compose.py||onnx/compose.py",
          "onnx/gen_proto.py||onnx/gen_proto.py",
          "onnx/helper.py||onnx/helper.py",
          "onnx/hub.py||onnx/hub.py",
          "onnx/utils.py||onnx/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "onnx/hub.py||onnx/hub.py"
          ],
          "candidate": [
            "onnx/hub.py||onnx/hub.py"
          ]
        }
      },
      "candidate_diff": {
        "onnx/compose.py||onnx/compose.py": [
          "File: onnx/compose.py -> onnx/compose.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     Optionally, it takes an io_map, representing the output/inputs to be connected. It provided, overlapping",
          "29:     present in the io_map argument will be ignored.",
          "30:     \"\"\"",
          "36:     def _overlapping(c1: list[str], c2: list[str]) -> list[str]:",
          "37:         return list(set(c1) & set(c2))",
          "",
          "[Removed Lines]",
          "31:     if type(g1) is not GraphProto:",
          "32:         raise ValueError(\"g1 argument is not an ONNX graph\")",
          "33:     if type(g2) is not GraphProto:",
          "34:         raise ValueError(\"g2 argument is not an ONNX graph\")",
          "",
          "[Added Lines]",
          "31:     if not isinstance(g1, GraphProto):",
          "32:         raise TypeError(\"g1 argument is not an ONNX graph\")",
          "33:     if not isinstance(g2, GraphProto):",
          "34:         raise TypeError(\"g2 argument is not an ONNX graph\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:     Returns:",
          "124:         GraphProto",
          "125:     \"\"\"",
          "131:     # Prefixing names in the graph if requested, adjusting io_map accordingly",
          "132:     if prefix1 or prefix2:",
          "",
          "[Removed Lines]",
          "126:     if type(g1) is not GraphProto:",
          "127:         raise ValueError(\"g1 argument is not an ONNX graph\")",
          "128:     if type(g2) is not GraphProto:",
          "129:         raise ValueError(\"g2 argument is not an ONNX graph\")",
          "",
          "[Added Lines]",
          "126:     if not isinstance(g1, GraphProto):",
          "127:         raise TypeError(\"g1 argument is not an ONNX graph\")",
          "128:     if not isinstance(g2, GraphProto):",
          "129:         raise TypeError(\"g2 argument is not an ONNX graph\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329:     Returns:",
          "330:         ModelProto",
          "331:     \"\"\"",
          "337:     if m1.ir_version != m2.ir_version:",
          "338:         raise ValueError(",
          "",
          "[Removed Lines]",
          "332:     if type(m1) is not ModelProto:",
          "333:         raise ValueError(\"m1 argument is not an ONNX model\")",
          "334:     if type(m2) is not ModelProto:",
          "335:         raise ValueError(\"m2 argument is not an ONNX model\")",
          "",
          "[Added Lines]",
          "332:     if not isinstance(m1, ModelProto):",
          "333:         raise TypeError(\"m1 argument is not an ONNX model\")",
          "334:     if not isinstance(m2, ModelProto):",
          "335:         raise TypeError(\"m2 argument is not an ONNX model\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "460:     Returns:",
          "461:         GraphProto",
          "462:     \"\"\"",
          "466:     if not inplace:",
          "467:         g = GraphProto()",
          "",
          "[Removed Lines]",
          "463:     if type(graph) is not GraphProto:",
          "464:         raise ValueError(\"graph argument is not an ONNX graph\")",
          "",
          "[Added Lines]",
          "463:     if not isinstance(graph, GraphProto):",
          "464:         raise TypeError(\"graph argument is not an ONNX graph\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "577:     Returns:",
          "578:         ModelProto",
          "579:     \"\"\"",
          "583:     if not inplace:",
          "584:         m = ModelProto()",
          "",
          "[Removed Lines]",
          "580:     if type(model) is not ModelProto:",
          "581:         raise ValueError(\"model argument is not an ONNX model\")",
          "",
          "[Added Lines]",
          "580:     if not isinstance(model, ModelProto):",
          "581:         raise TypeError(\"model argument is not an ONNX model\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "637:     Returns:",
          "638:         GraphProto",
          "639:     \"\"\"",
          "643:     if not inplace:",
          "644:         g = GraphProto()",
          "",
          "[Removed Lines]",
          "640:     if type(graph) is not GraphProto:",
          "641:         raise ValueError(\"graph argument is not an ONNX graph\")",
          "",
          "[Added Lines]",
          "640:     if not isinstance(graph, GraphProto):",
          "641:         raise TypeError(\"graph argument is not an ONNX graph\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "717:     Returns:",
          "718:         ModelProto",
          "719:     \"\"\"",
          "723:     if not inplace:",
          "724:         m = ModelProto()",
          "",
          "[Removed Lines]",
          "720:     if type(model) is not ModelProto:",
          "721:         raise ValueError(\"model argument is not an ONNX model\")",
          "",
          "[Added Lines]",
          "720:     if not isinstance(model, ModelProto):",
          "721:         raise TypeError(\"model argument is not an ONNX model\")",
          "",
          "---------------"
        ],
        "onnx/gen_proto.py||onnx/gen_proto.py": [
          "File: onnx/gen_proto.py -> onnx/gen_proto.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:             assert in_if == 1",
          "44:             in_if = 2",
          "45:         elif ENDIF_ONNX_ML_REGEX.match(line):",
          "47:             in_if = 0",
          "48:         else:  # noqa: PLR5501",
          "49:             if in_if == 0:",
          "",
          "[Removed Lines]",
          "46:             assert in_if == 1 or in_if == 2  # noqa: PLR1714, PLR2004",
          "",
          "[Added Lines]",
          "46:             assert in_if in (1, 2)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:         lines = convert_to_proto3(lines)",
          "120:     else:",
          "121:         assert proto == 2  # noqa: PLR2004",
          "125: def qualify(f: str, pardir: str | None = None) -> str:",
          "",
          "[Removed Lines]",
          "122:     return \"\\n\".join(lines)  # TODO: not Windows friendly",
          "",
          "[Added Lines]",
          "122:     return os.linesep.join(lines)",
          "",
          "---------------"
        ],
        "onnx/helper.py||onnx/helper.py": [
          "File: onnx/helper.py -> onnx/helper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:     model.ir_version = IR_VERSION",
          "308:     model.graph.CopyFrom(graph)",
          "312:     if opset_imports is not None:",
          "313:         model.opset_import.extend(opset_imports)",
          "314:     else:",
          "",
          "[Removed Lines]",
          "310:     opset_imports: Sequence[OperatorSetIdProto] | None = None",
          "311:     opset_imports = kwargs.pop(\"opset_imports\", None)  # type: ignore",
          "",
          "[Added Lines]",
          "310:     opset_imports: Sequence[OperatorSetIdProto] | None = kwargs.pop(",
          "311:         \"opset_imports\", None",
          "312:     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:         imp = model.opset_import.add()",
          "317:         imp.version = defs.onnx_opset_version()",
          "321:     if functions is not None:",
          "322:         model.functions.extend(functions)",
          "",
          "[Removed Lines]",
          "319:     functions: Sequence[FunctionProto] | None = None",
          "320:     functions = kwargs.pop(\"functions\", None)  # type: ignore",
          "",
          "[Added Lines]",
          "320:     functions: Sequence[FunctionProto] | None = kwargs.pop(\"functions\", None)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "665:     if is_odd_volume:",
          "666:         array_flat = np.append(array_flat, np.array([0]))",
          "669:     func = np.frompyfunc(single_func, 2, 1)",
          "675: def pack_float32_to_float4e2m1(array: np.ndarray | Sequence) -> np.ndarray:",
          "",
          "[Removed Lines]",
          "668:     single_func = lambda x, y: subbyte.float32x2_to_4bitx2(x, y, signed)  # noqa: E731",
          "671:     arr = func(array_flat[0::2], array_flat[1::2])",
          "672:     return arr.astype(np.uint8)  # type: ignore[no-any-return]",
          "",
          "[Added Lines]",
          "668:     def single_func(x, y) -> np.ndarray:",
          "669:         return subbyte.float32x2_to_4bitx2(x, y, signed)",
          "673:     arr: np.ndarray = func(array_flat[0::2], array_flat[1::2])",
          "674:     return arr.astype(np.uint8)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "742:         else:",
          "743:             expected_size = np_dtype.itemsize",
          "746:         vals = vals.flatten()",
          "747:     for d in dims:",
          "748:         expected_size *= d",
          "",
          "[Removed Lines]",
          "745:     if type(vals) is np.ndarray and len(vals.shape) > 1:",
          "",
          "[Added Lines]",
          "747:     if isinstance(vals, np.ndarray) and len(vals.shape) > 1:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "892:         map_proto.string_keys.extend(keys)",
          "893:     elif key_type in valid_key_int_types:",
          "894:         map_proto.keys.extend(keys)",
          "896:     return map_proto",
          "899: def make_optional(",
          "900:     name: str,",
          "901:     elem_type: OptionalProto.DataType,",
          "903: ) -> OptionalProto:",
          "904:     \"\"\"Make an Optional with specified value arguments.\"\"\"",
          "905:     optional = OptionalProto()",
          "",
          "[Removed Lines]",
          "895:     map_proto.values.CopyFrom(values)",
          "902:     value: Any | None,",
          "",
          "[Added Lines]",
          "897:     map_proto.values.CopyFrom(values)  # type: ignore[arg-type]",
          "904:     value: google.protobuf.message.Message | None,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "921:     else:",
          "922:         raise TypeError(\"The element type in the input optional is not supported.\")",
          "925:     return optional",
          "928: def _to_bytes(value: str | bytes) -> bytes:",
          "929:     \"\"\"Coerce a string (or bytes) value into UTF-8 bytes.\"\"\"",
          "933: def make_attribute(",
          "",
          "[Removed Lines]",
          "924:     attribute.CopyFrom(value)  # type: ignore[arg-type]",
          "930:     return value if isinstance(value, bytes) else value.encode(\"utf-8\")",
          "",
          "[Added Lines]",
          "926:     assert value is not None",
          "927:     attribute.CopyFrom(value)",
          "933:     if isinstance(value, str):",
          "934:         return value.encode(\"utf-8\")",
          "935:     return value",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1462:     if len(graph.input):",
          "1463:         header.append(\"(\")",
          "1464:         in_strs = []  # required inputs",
          "1466:             []",
          "1467:         )  # optional inputs with initializer providing default value",
          "1468:         for inp in graph.input:",
          "",
          "[Removed Lines]",
          "1465:         in_with_init_strs = (",
          "",
          "[Added Lines]",
          "1470:         in_with_init_strs: list = (",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1659:     return mapping.TENSOR_TYPE_MAP.keys()",
          "1665: def _attr_type_to_str(attr_type: int) -> str:",
          "",
          "[Removed Lines]",
          "1662: _ATTRIBUTE_TYPE_TO_STR = {k: v for v, k in AttributeProto.AttributeType.items()}",
          "",
          "[Added Lines]",
          "1667: _ATTRIBUTE_TYPE_TO_STR: dict[int, str] = {",
          "1668:     k: v for v, k in AttributeProto.AttributeType.items()",
          "1669: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1672:         String representing the supplied attr_type.",
          "1673:     \"\"\"",
          "1674:     if attr_type in AttributeProto.AttributeType.values():",
          "",
          "[Removed Lines]",
          "1675:         return _ATTRIBUTE_TYPE_TO_STR[attr_type]  # type: ignore[no-any-return]",
          "1676:     return AttributeProto.AttributeType.keys()[0]  # type: ignore[no-any-return]",
          "",
          "[Added Lines]",
          "1682:         return _ATTRIBUTE_TYPE_TO_STR[attr_type]",
          "1683:     return AttributeProto.AttributeType.keys()[0]",
          "",
          "---------------"
        ],
        "onnx/hub.py||onnx/hub.py": [
          "File: onnx/hub.py -> onnx/hub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:                 \"download the model from the model hub.\"",
          "364:             )",
          "368:     local_model_with_data_dir_path = local_model_with_data_path[",
          "370:     ]",
          "371:     onnx.utils._extract_model_safe(",
          "372:         local_model_with_data_path, local_model_with_data_dir_path",
          "",
          "[Removed Lines]",
          "366:     # FIXME: Avoid index manipulation with magic numbers,",
          "367:     # remove \".tar.gz\"",
          "369:         0 : len(local_model_with_data_path) - 7",
          "",
          "[Added Lines]",
          "368:         0 : len(local_model_with_data_path) - len(\".tar.gz\")",
          "",
          "---------------"
        ],
        "onnx/utils.py||onnx/utils.py": [
          "File: onnx/utils.py -> onnx/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         self.vimap = self._build_name2obj_dict(self.graph.value_info)",
          "24:     @staticmethod",
          "26:         return {obj.name: obj for obj in objs}",
          "28:     def _collect_new_io_core(",
          "",
          "[Removed Lines]",
          "25:     def _build_name2obj_dict(objs):  # type: ignore",
          "",
          "[Added Lines]",
          "25:     def _build_name2obj_dict(objs) -> dict:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     def _collect_referred_local_functions(",
          "106:         self,",
          "109:         # a node in a model graph may refer a function.",
          "110:         # a function contains nodes, some of which may in turn refer a function.",
          "111:         # we need to find functions referred by graph nodes and",
          "112:         # by nodes used to define functions.",
          "114:             new_nodes = []  # type: list[NodeProto]",
          "115:             for node in nodes:",
          "116:                 # check if the node is a function op",
          "",
          "[Removed Lines]",
          "107:         nodes,  # type: list[NodeProto]",
          "108:     ):  # type: (...) -> list[FunctionProto]",
          "113:         def find_referred_funcs(nodes, referred_local_functions):  # type: ignore",
          "",
          "[Added Lines]",
          "107:         nodes: list[NodeProto],",
          "108:     ) -> list[FunctionProto]:",
          "113:         def find_referred_funcs(",
          "114:             nodes: list[NodeProto], referred_local_functions: list[FunctionProto]",
          "115:         ) -> list[NodeProto]:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "284:                 f\"The tarball member {member_path} in downloading model contains \"",
          "285:                 f\"directory traversal sequence which may contain harmful payload.\"",
          "286:             )",
          "288:             raise RuntimeError(",
          "289:                 f\"The tarball member {member_path} in downloading model contains \"",
          "290:                 f\"symbolic links which may contain harmful payload.\"",
          "",
          "[Removed Lines]",
          "287:         elif member.issym() or member.islnk():",
          "",
          "[Added Lines]",
          "289:         if member.issym() or member.islnk():",
          "",
          "---------------"
        ]
      }
    }
  ]
}