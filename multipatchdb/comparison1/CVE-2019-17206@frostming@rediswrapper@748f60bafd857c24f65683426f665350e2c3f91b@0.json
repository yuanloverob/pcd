{
  "cve_id": "CVE-2019-17206",
  "cve_desc": "Uncontrolled deserialization of a pickled object in models.py in Frost Ming rediswrapper (aka Redis Wrapper) before 0.3.0 allows attackers to execute arbitrary scripts.",
  "repo": "frostming/rediswrapper",
  "patch_hash": "748f60bafd857c24f65683426f665350e2c3f91b",
  "patch_info": {
    "commit_hash": "748f60bafd857c24f65683426f665350e2c3f91b",
    "repo": "frostming/rediswrapper",
    "commit_url": "https://github.com/frostming/rediswrapper/commit/748f60bafd857c24f65683426f665350e2c3f91b",
    "files": [
      ".gitignore",
      "rediswrapper/models.py",
      "setup.py",
      "test_rediswrapper.py"
    ],
    "message": "Merge pull request #1 from 0x2b3bfa0/patch-1\n\nQuick fix for CVE Request 766166",
    "before_after_code_files": [
      "rediswrapper/models.py||rediswrapper/models.py",
      "setup.py||setup.py",
      "test_rediswrapper.py||test_rediswrapper.py"
    ]
  },
  "patch_diff": {
    "rediswrapper/models.py||rediswrapper/models.py": [
      "File: rediswrapper/models.py -> rediswrapper/models.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "39:     def __iter__(self):",
      "40:         for key in self._r.hkeys(self.key):",
      "41:             if isinstance(key, bytes):",
      "43:             yield key",
      "45:     def __len__(self):",
      "",
      "[Removed Lines]",
      "42:                 key = key.decode('utf8')",
      "",
      "[Added Lines]",
      "44:                 key = key.decode(\"utf8\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:             raise AttributeError(name)",
      "54:     def __repr__(self):",
      "57:     def _set(self, other):",
      "58:         for key in self:",
      "",
      "[Removed Lines]",
      "55:         return '%s value(%s)' % (self.__class__.__name__, dict(self))",
      "",
      "[Added Lines]",
      "57:         return \"%s value(%s)\" % (self.__class__.__name__, dict(self))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "74:                     if indices[2] != 1:",
      "75:                         raise ValueError(\"The value length doesn't match\")",
      "76:                     else:",
      "78:                         break",
      "79:             else:",
      "80:                 # The value length is larger than slice",
      "",
      "[Removed Lines]",
      "77:                         del self[i:indices[1]]",
      "",
      "[Added Lines]",
      "80:                         del self[i : indices[1]]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "88:         elif isinstance(index, int):",
      "89:             index = index + len(self) if index < 0 else index",
      "90:             if index >= len(self):",
      "92:             self._r.lset(self.key, index, from_value(value))",
      "93:         else:",
      "97:     def __getitem__(self, index):",
      "98:         if isinstance(index, slice):",
      "",
      "[Removed Lines]",
      "91:                 raise IndexError('Index out of range')",
      "94:             raise TypeError('list indices must be integers, not %r'",
      "95:                             % type(index))",
      "",
      "[Added Lines]",
      "94:                 raise IndexError(\"Index out of range\")",
      "97:             raise TypeError(\"list indices must be integers, not %r\" % type(index))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "101:         elif isinstance(index, int):",
      "102:             index = index + len(self) if index < 0 else index",
      "103:             if index >= len(self):",
      "105:             return to_value(self._r.lindex(self.key, index))",
      "108:     def __delitem__(self, index):",
      "109:         if isinstance(index, slice):",
      "",
      "[Removed Lines]",
      "104:                 raise IndexError('Index out of range')",
      "106:         raise TypeError('list indices must be integers, not %r' % type(index))",
      "",
      "[Added Lines]",
      "106:                 raise IndexError(\"Index out of range\")",
      "108:         raise TypeError(\"list indices must be integers, not %r\" % type(index))",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "114:         elif isinstance(index, int):",
      "115:             index = index + len(self) if index < 0 else index",
      "116:             if index >= len(self):",
      "118:             if index == 0:",
      "119:                 return self._r.lpop(self.key)",
      "120:             elif index == len(self) - 1:",
      "121:                 return self._r.rpop(self.key)",
      "124:             for item in temp:",
      "125:                 self._r.rpush(self.key, item)",
      "126:         else:",
      "130:     def __len__(self):",
      "131:         return self._r.llen(self.key)",
      "",
      "[Removed Lines]",
      "117:                 raise IndexError('Index out of range')",
      "122:             temp = self._r.lrange(self.key, index+1, len(self))",
      "123:             self._r.ltrim(self.key, 0, index-1)",
      "127:             raise TypeError('list indices must be integers, not %r'",
      "128:                             % type(index))",
      "",
      "[Added Lines]",
      "119:                 raise IndexError(\"Index out of range\")",
      "124:             temp = self._r.lrange(self.key, index + 1, len(self))",
      "125:             self._r.ltrim(self.key, 0, index - 1)",
      "129:             raise TypeError(\"list indices must be integers, not %r\" % type(index))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "136:         return list(self) == list(other)",
      "138:     def __repr__(self):",
      "141:     def insert(self, index, value):",
      "142:         index = index + len(self) if index < 0 else index",
      "",
      "[Removed Lines]",
      "139:         return '%s value(%s)' % (self.__class__.__name__, list(self))",
      "",
      "[Added Lines]",
      "140:         return \"%s value(%s)\" % (self.__class__.__name__, list(self))",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "144:             if index == 0:",
      "145:                 return self._r.lpush(self.key, from_value(value))",
      "146:             temp = self._r.lrange(self.key, index, len(self))",
      "148:             self.append(value)",
      "149:             for item in temp:",
      "150:                 self._r.rpush(self.key, item)",
      "",
      "[Removed Lines]",
      "147:             self._r.ltrim(self.key, 0, index-1)",
      "",
      "[Added Lines]",
      "148:             self._r.ltrim(self.key, 0, index - 1)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "174:         self._r.srem(self.key, from_value(value))",
      "176:     def __repr__(self):",
      "179:     def _set(self, other):",
      "180:         for v in self:",
      "",
      "[Removed Lines]",
      "177:         return '%s value(%s)' % (self.__class__.__name__, list(self))",
      "",
      "[Added Lines]",
      "179:         return \"%s value(%s)\" % (self.__class__.__name__, list(self))",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "186:         return set(other)",
      "192: def from_value(value):",
      "193:     \"\"\"Convert a value to be stored in redis\"\"\"",
      "203: def to_value(pickled):",
      "204:     \"\"\"Convert a storage value from redis to human readable\"\"\"",
      "",
      "[Removed Lines]",
      "189: type_map = {'list': ListType, 'hash': HashType, 'set': SetType}",
      "194:     if isinstance(value, basestring):",
      "195:         # Keep most readability, do not pickle string values",
      "196:         return value",
      "197:     try:",
      "198:         return pickle.dumps(value)",
      "199:     except Exception:",
      "200:         return value",
      "205:     try:",
      "206:         return pickle.loads(pickled)",
      "207:     except:",
      "208:         return pickled.decode('utf8')",
      "",
      "[Added Lines]",
      "191: type_map = {\"list\": ListType, \"hash\": HashType, \"set\": SetType}",
      "196:     return pickle.dumps(value)",
      "201:     return pickle.loads(pickled)",
      "",
      "---------------"
    ],
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: from setuptools import setup",
      "8:     os.system(\"python setup.py sdist upload\")",
      "9:     sys.exit()",
      "12:     try:",
      "14:     except ImportError:",
      "16:         sys.exit(1)",
      "19:     sys.exit(bool(errors))",
      "22: def get_version():",
      "24:     return re.findall(r'__version__\\s*=\\s*[\\'\"](.*)[\\'\"]', content)[0]",
      "29:         readme = name",
      "30:         break",
      "31: try:",
      "",
      "[Removed Lines]",
      "7: if sys.argv[-1] == 'publish':",
      "11: if sys.argv[-1] == 'test':",
      "13:         __import__('py')",
      "15:         print('pytest required.')",
      "18:     errors = os.system('py.test')",
      "23:     content = open('rediswrapper/__init__.py').read()",
      "26: readme = 'README'",
      "27: for name in os.listdir('.'):",
      "28:     if name.startswith('README'):",
      "",
      "[Added Lines]",
      "7: if sys.argv[-1] == \"publish\":",
      "11: if sys.argv[-1] == \"test\":",
      "13:         __import__(\"pytest\")",
      "15:         print(\"pytest required.\")",
      "18:     errors = os.system(\"pytest\")",
      "23:     content = open(\"rediswrapper/__init__.py\").read()",
      "27: readme = \"README\"",
      "28: for name in os.listdir(\".\"):",
      "29:     if name.startswith(\"README\"):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34: except:",
      "35:     long_description = \"RedisWrapper, a pythonic wrapper for redis client\"",
      "",
      "[Removed Lines]",
      "37: setup(name='rediswrapper',",
      "38:       version=get_version(),",
      "39:       description='Pythonic wrapper for Redis Client.',",
      "40:       url='https://github.com/frostming/rediswrapper',",
      "41:       author='Frost Ming',",
      "42:       author_email='mianghong@gmail.com',",
      "43:       license='MIT',",
      "44:       packages=['rediswrapper'],",
      "45:       test_suite='test_rediswrapper',",
      "46:       zip_safe=False,",
      "47:       long_description=long_description,",
      "48:       keywords='redis client mock',",
      "49:       test_requires=['pytest', 'fakeredis'],",
      "50:       install_requires=['redis'],",
      "51:       classifiers=[",
      "52:           \"Intended Audience :: Developers\",",
      "53:           \"Operating System :: OS Independent\",",
      "54:           \"Topic :: Software Development\",",
      "55:           \"Programming Language :: Python :: 2.7\",",
      "56:           \"Programming Language :: Python :: 3.3\",",
      "57:           \"Programming Language :: Python :: 3.4\",",
      "58:           \"Programming Language :: Python :: 3.5\",",
      "59:           \"Programming Language :: Python :: 3.6\",",
      "60:           \"Programming Language :: Python :: Implementation :: CPython\",",
      "61:           \"Programming Language :: Python :: Implementation :: PyPy\",",
      "62:           \"Development Status :: 3 - Alpha\",",
      "63:           \"License :: OSI Approved :: MIT License\"",
      "64:       ],",
      "65:       )",
      "",
      "[Added Lines]",
      "38: setup(",
      "39:     name=\"rediswrapper\",",
      "40:     version=get_version(),",
      "41:     description=\"Pythonic wrapper for Redis Client.\",",
      "42:     url=\"https://github.com/frostming/rediswrapper\",",
      "43:     author=\"Frost Ming\",",
      "44:     author_email=\"mianghong@gmail.com\",",
      "45:     license=\"MIT\",",
      "46:     packages=[\"rediswrapper\"],",
      "47:     test_suite=\"test_rediswrapper\",",
      "48:     zip_safe=False,",
      "49:     long_description=long_description,",
      "50:     keywords=\"redis client mock\",",
      "51:     test_requires=[\"pytest\", \"fakeredis\"],",
      "52:     install_requires=[\"redis\"],",
      "53:     classifiers=[",
      "54:         \"Intended Audience :: Developers\",",
      "55:         \"Operating System :: OS Independent\",",
      "56:         \"Topic :: Software Development\",",
      "57:         \"Programming Language :: Python :: 2.7\",",
      "58:         \"Programming Language :: Python :: 3.3\",",
      "59:         \"Programming Language :: Python :: 3.4\",",
      "60:         \"Programming Language :: Python :: 3.5\",",
      "61:         \"Programming Language :: Python :: 3.6\",",
      "62:         \"Programming Language :: Python :: Implementation :: CPython\",",
      "63:         \"Programming Language :: Python :: Implementation :: PyPy\",",
      "64:         \"Development Status :: 3 - Alpha\",",
      "65:         \"License :: OSI Approved :: MIT License\",",
      "66:     ],",
      "67: )",
      "",
      "---------------"
    ],
    "test_rediswrapper.py||test_rediswrapper.py": [
      "File: test_rediswrapper.py -> test_rediswrapper.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: from collections import Set, MutableSequence",
      "11: now = datetime.datetime.now()",
      "22: def cmp_no_order(seq1, seq2):",
      "",
      "[Removed Lines]",
      "12: golden = {'a': 'hello',",
      "13:           'b': True,",
      "14:           'c': 1,",
      "15:           'd': None,",
      "16:           'e': now,",
      "17:           'f': list(range(5)),",
      "18:           'g': dict(zip('abcd', range(4))),",
      "19:           'h': set(['a', 'b', 'c'])}",
      "",
      "[Added Lines]",
      "12: golden = {",
      "13:     \"a\": \"hello\",",
      "14:     \"b\": True,",
      "15:     \"c\": 1,",
      "16:     \"d\": None,",
      "17:     \"e\": now,",
      "18:     \"f\": list(range(5)),",
      "19:     \"g\": dict(zip(\"abcd\", range(4))),",
      "20:     \"h\": set([\"a\", \"b\", \"c\"]),",
      "21: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36:     def setUp(self):",
      "37:         global redis",
      "40:         redis.update(golden)",
      "42:     def tearDown(self):",
      "",
      "[Removed Lines]",
      "39:         redis = RedisDict(prefix='test', client=FakeStrictRedis)",
      "",
      "[Added Lines]",
      "41:         redis = RedisDict(prefix=\"test\", client=FakeStrictRedis)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:     def test_prefix(self):",
      "46:         \"\"\"Test the key is prefixed correctly\"\"\"",
      "49:             assert redis._r.exists(key)",
      "51:     def test_contains(self):",
      "53:             assert c in redis",
      "55:     def test_get_item(self):",
      "58:         with pytest.raises(KeyError):",
      "61:     def test_iter_item(self):",
      "62:         assert dict(redis) == golden",
      "64:     def test_keys(self):",
      "67:     def test_set_item(self):",
      "73:     def test_set_different_type(self):",
      "81:     def test_del_item(self):",
      "84:         with pytest.raises(KeyError):",
      "87:     def test_get_attribute(self):",
      "88:         assert redis.f == list(range(5))",
      "90:         assert callable(redis.get)",
      "91:         with pytest.raises(AttributeError):",
      "92:             redis.other",
      "94:     def test_list_get_item(self):",
      "96:         assert data[1] == 1",
      "97:         with pytest.raises(IndexError):",
      "98:             data[10]",
      "99:         with pytest.raises(TypeError):",
      "102:     def test_list_get_slice(self):",
      "104:         assert data[2:] == [2, 3, 4]",
      "105:         assert data[:-2] == [0, 1, 2]",
      "106:         assert data[1:4:2] == [1, 3]",
      "108:     def test_list_contains(self):",
      "110:         assert 1 in data",
      "113:     def test_list_set_item(self):",
      "115:         data[1] = 4",
      "117:         data[-1] = 1",
      "119:         with pytest.raises(IndexError):",
      "120:             data[10] = 10",
      "121:         with pytest.raises(TypeError):",
      "124:     def test_list_set_slice(self):",
      "130:         data[:] = [1, 2, 3]",
      "134:         with pytest.raises(ValueError):",
      "135:             # target length < source length and step != 1",
      "136:             data[::2] = [1]",
      "",
      "[Removed Lines]",
      "47:         for c in 'abcdefgh':",
      "48:             key = 'test.' + c",
      "52:         for c in 'abcdefgh':",
      "56:         assert redis['d'] is None",
      "57:         assert redis.get('a') == 'hello'",
      "59:             redis['z']",
      "65:         assert cmp_no_order(redis.keys(), list('abcdefgh'))",
      "68:         redis['a'] = 'hello michael'",
      "69:         assert redis['a'] == 'hello michael'",
      "70:         assert redis.setdefault('i', 1.2) == 1.2",
      "71:         assert 'i' in redis",
      "74:         redis['b'] = [1, 2, 3]",
      "75:         assert isinstance(redis['b'], MutableSequence)",
      "76:         redis['f'] = 'hello'",
      "77:         assert redis['f'] == 'hello'",
      "78:         redis['g'] = set([1, 2, 3])",
      "79:         assert isinstance(redis['g'], Set)",
      "82:         del redis['a']",
      "83:         assert 'a' not in redis",
      "85:             del redis['z']",
      "89:         redis['get'] = 1",
      "95:         data = redis['f']",
      "100:             data['1']",
      "103:         data = redis['f']",
      "109:         data = redis['f']",
      "111:         assert 'a' not in data",
      "114:         data = redis['f']",
      "116:         assert redis['f'] == [0, 4, 2, 3, 4]",
      "118:         assert redis['f'] == [0, 4, 2, 3, 1]",
      "122:             data['1'] = 1",
      "125:         data = redis['f']",
      "126:         data[1:3] = ['a', 'b']",
      "127:         assert redis['f'] == [0, 'a', 'b', 3, 4]",
      "128:         data[1:1] = ['c', 'd']",
      "129:         assert redis['f'] == [0, 'c', 'd', 'a', 'b', 3, 4]",
      "131:         assert redis['f'] == [1, 2, 3]",
      "132:         data[::2] = ['a', 'b']",
      "133:         assert redis['f'] == ['a', 2, 'b']",
      "",
      "[Added Lines]",
      "49:         for c in \"abcdefgh\":",
      "50:             key = \"test.\" + c",
      "54:         for c in \"abcdefgh\":",
      "58:         assert redis[\"d\"] is None",
      "59:         assert redis.get(\"a\") == \"hello\"",
      "61:             redis[\"z\"]",
      "67:         assert cmp_no_order(redis.keys(), list(\"abcdefgh\"))",
      "70:         redis[\"a\"] = \"hello michael\"",
      "71:         assert redis[\"a\"] == \"hello michael\"",
      "72:         assert redis.setdefault(\"i\", 1.2) == 1.2",
      "73:         assert \"i\" in redis",
      "76:         redis[\"b\"] = [1, 2, 3]",
      "77:         assert isinstance(redis[\"b\"], MutableSequence)",
      "78:         redis[\"f\"] = \"hello\"",
      "79:         assert redis[\"f\"] == \"hello\"",
      "80:         redis[\"g\"] = set([1, 2, 3])",
      "81:         assert isinstance(redis[\"g\"], Set)",
      "84:         del redis[\"a\"]",
      "85:         assert \"a\" not in redis",
      "87:             del redis[\"z\"]",
      "91:         redis[\"get\"] = 1",
      "97:         data = redis[\"f\"]",
      "102:             data[\"1\"]",
      "105:         data = redis[\"f\"]",
      "111:         data = redis[\"f\"]",
      "113:         assert \"a\" not in data",
      "116:         data = redis[\"f\"]",
      "118:         assert redis[\"f\"] == [0, 4, 2, 3, 4]",
      "120:         assert redis[\"f\"] == [0, 4, 2, 3, 1]",
      "124:             data[\"1\"] = 1",
      "127:         data = redis[\"f\"]",
      "128:         data[1:3] = [\"a\", \"b\"]",
      "129:         assert redis[\"f\"] == [0, \"a\", \"b\", 3, 4]",
      "130:         data[1:1] = [\"c\", \"d\"]",
      "131:         assert redis[\"f\"] == [0, \"c\", \"d\", \"a\", \"b\", 3, 4]",
      "133:         assert redis[\"f\"] == [1, 2, 3]",
      "134:         data[::2] = [\"a\", \"b\"]",
      "135:         assert redis[\"f\"] == [\"a\", 2, \"b\"]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "142:             data[::-1] = [1, 3]",
      "144:     def test_list_del_item(self):",
      "146:         del data[1]",
      "148:         del data[-1]",
      "150:         with pytest.raises(IndexError):",
      "151:             del data[10]",
      "152:         with pytest.raises(TypeError):",
      "155:     def test_list_del_slice(self):",
      "157:         del data[1:1]",
      "159:         del data[1:5:2]",
      "161:         del data[:]",
      "164:     def test_list_insert(self):",
      "173:     def test_list_append_pop(self):",
      "177:         assert data.pop(0) == 0",
      "178:         assert len(data) == 4",
      "180:     def test_hash_contains(self):",
      "184:     def test_hash_get_item(self):",
      "187:         with pytest.raises(KeyError):",
      "190:     def test_hash_set_item(self):",
      "198:     def test_hash_del_item(self):",
      "201:         with pytest.raises(KeyError):",
      "204:     def test_hash_representation(self):",
      "210:     def test_hash_keys(self):",
      "213:     def test_hash_get_attr(self):",
      "216:         with pytest.raises(AttributeError):",
      "219:     def test_set_contains(self):",
      "223:     def test_set_representation(self):",
      "226:     def test_set_add(self):",
      "232:     def test_set_discard(self):",
      "238:     def test_set_op(self):",
      "247:     unittest.main()",
      "",
      "[Removed Lines]",
      "145:         data = redis['f']",
      "147:         assert len(redis['f']) == 4",
      "149:         assert redis['f'] == [0, 2, 3]",
      "153:             del data['1']",
      "156:         data = redis['f']",
      "158:         assert len(redis['f']) == 5",
      "160:         assert redis['f'] == [0, 2, 4]",
      "162:         assert len(redis['f']) == 0",
      "165:         data = redis['f']",
      "166:         data.insert(0, 'a')",
      "167:         assert data == ['a', 0, 1, 2, 3, 4]",
      "168:         data.insert(2, 'b')",
      "169:         assert data == ['a', 0, 'b', 1, 2, 3, 4]",
      "170:         data.insert(10, 'c')",
      "171:         assert data == ['a', 0, 'b', 1, 2, 3, 4, 'c']",
      "174:         data = redis['f']",
      "175:         data.append('a')",
      "176:         assert data.pop() == 'a'",
      "181:         assert 'a' in redis['g']",
      "182:         assert 2 not in redis['g']",
      "185:         assert redis['g']['b'] == 1",
      "186:         assert redis['g'].get('c') == 2",
      "188:             redis['g'][5]",
      "191:         redis['g'][1] = True",
      "192:         assert redis['g'][1] is True",
      "193:         redis['g']['c'] = 'c'",
      "194:         assert redis['g']['c'] == 'c'",
      "195:         redis['g']['other'] = [1, 2]",
      "196:         assert redis['g']['other'] == [1, 2]",
      "199:         del redis['g']['d']",
      "200:         assert 'd' not in redis['g']",
      "202:             del redis['g'][5]",
      "205:         assert redis['g'] == {'a': 0,",
      "206:                               'b': 1,",
      "207:                               'c': 2,",
      "208:                               'd': 3}",
      "211:         assert cmp_no_order(redis['g'].keys(), list('abcd'))",
      "214:         assert callable(redis['g'].get)",
      "215:         assert redis['g'].c == 2",
      "217:             redis['g'].other",
      "220:         assert 'a' in redis['h']",
      "221:         assert 5 not in redis['h']",
      "224:         assert set(redis['h']) == set(['a', 'b', 'c'])",
      "227:         redis['h'].add('a')",
      "228:         assert len(redis['h']) == 3",
      "229:         redis['h'].add('d')",
      "230:         assert 'd' in redis['h']",
      "233:         redis['h'].discard('d')",
      "234:         assert len(redis['h']) == 3",
      "235:         redis['h'].discard('b')",
      "236:         assert len(redis['h']) == 2",
      "239:         assert redis['h'] == set(['a', 'b', 'c'])",
      "240:         assert redis['h'] < set(['a', 'b', 'c', 'd', 'e'])",
      "241:         assert redis['h'] & set(['a']) == set(['a'])",
      "242:         assert redis['h'] | set(['a', 'e']) \\",
      "243:             == set(['a', 'b', 'c', 'e'])",
      "246: if __name__ == '__main__':",
      "",
      "[Added Lines]",
      "147:         data = redis[\"f\"]",
      "149:         assert len(redis[\"f\"]) == 4",
      "151:         assert redis[\"f\"] == [0, 2, 3]",
      "155:             del data[\"1\"]",
      "158:         data = redis[\"f\"]",
      "160:         assert len(redis[\"f\"]) == 5",
      "162:         assert redis[\"f\"] == [0, 2, 4]",
      "164:         assert \"f\" not in redis",
      "167:         data = redis[\"f\"]",
      "168:         data.insert(0, \"a\")",
      "169:         assert data == [\"a\", 0, 1, 2, 3, 4]",
      "170:         data.insert(2, \"b\")",
      "171:         assert data == [\"a\", 0, \"b\", 1, 2, 3, 4]",
      "172:         data.insert(10, \"c\")",
      "173:         assert data == [\"a\", 0, \"b\", 1, 2, 3, 4, \"c\"]",
      "176:         data = redis[\"f\"]",
      "177:         data.append(\"a\")",
      "178:         assert data.pop() == \"a\"",
      "183:         assert \"a\" in redis[\"g\"]",
      "184:         assert 2 not in redis[\"g\"]",
      "187:         assert redis[\"g\"][\"b\"] == 1",
      "188:         assert redis[\"g\"].get(\"c\") == 2",
      "190:             redis[\"g\"][5]",
      "193:         redis[\"g\"][1] = True",
      "194:         assert redis[\"g\"][1] is True",
      "195:         redis[\"g\"][\"c\"] = \"c\"",
      "196:         assert redis[\"g\"][\"c\"] == \"c\"",
      "197:         redis[\"g\"][\"other\"] = [1, 2]",
      "198:         assert redis[\"g\"][\"other\"] == [1, 2]",
      "201:         del redis[\"g\"][\"d\"]",
      "202:         assert \"d\" not in redis[\"g\"]",
      "204:             del redis[\"g\"][5]",
      "207:         assert redis[\"g\"] == {\"a\": 0, \"b\": 1, \"c\": 2, \"d\": 3}",
      "210:         assert cmp_no_order(redis[\"g\"].keys(), list(\"abcd\"))",
      "213:         assert callable(redis[\"g\"].get)",
      "214:         assert redis[\"g\"].c == 2",
      "216:             redis[\"g\"].other",
      "219:         assert \"a\" in redis[\"h\"]",
      "220:         assert 5 not in redis[\"h\"]",
      "223:         assert set(redis[\"h\"]) == set([\"a\", \"b\", \"c\"])",
      "226:         redis[\"h\"].add(\"a\")",
      "227:         assert len(redis[\"h\"]) == 3",
      "228:         redis[\"h\"].add(\"d\")",
      "229:         assert \"d\" in redis[\"h\"]",
      "232:         redis[\"h\"].discard(\"d\")",
      "233:         assert len(redis[\"h\"]) == 3",
      "234:         redis[\"h\"].discard(\"b\")",
      "235:         assert len(redis[\"h\"]) == 2",
      "238:         assert redis[\"h\"] == set([\"a\", \"b\", \"c\"])",
      "239:         assert redis[\"h\"] < set([\"a\", \"b\", \"c\", \"d\", \"e\"])",
      "240:         assert redis[\"h\"] & set([\"a\"]) == set([\"a\"])",
      "241:         assert redis[\"h\"] | set([\"a\", \"e\"]) == set([\"a\", \"b\", \"c\", \"e\"])",
      "244: if __name__ == \"__main__\":",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2751f6ff86e3f90c9e14b8b8acc8ef02c86987e1",
      "candidate_info": {
        "commit_hash": "2751f6ff86e3f90c9e14b8b8acc8ef02c86987e1",
        "repo": "frostming/rediswrapper",
        "commit_url": "https://github.com/frostming/rediswrapper/commit/2751f6ff86e3f90c9e14b8b8acc8ef02c86987e1",
        "files": [
          "rediswrapper/models.py"
        ],
        "message": "Quick fix for CVE Request 766166",
        "before_after_code_files": [
          "rediswrapper/models.py||rediswrapper/models.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/frostming/rediswrapper/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "rediswrapper/models.py||rediswrapper/models.py"
          ],
          "candidate": [
            "rediswrapper/models.py||rediswrapper/models.py"
          ]
        }
      },
      "candidate_diff": {
        "rediswrapper/models.py||rediswrapper/models.py": [
          "File: rediswrapper/models.py -> rediswrapper/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "192: def from_value(value):",
          "193:     \"\"\"Convert a value to be stored in redis\"\"\"",
          "203: def to_value(pickled):",
          "204:     \"\"\"Convert a storage value from redis to human readable\"\"\"",
          "",
          "[Removed Lines]",
          "194:     if isinstance(value, basestring):",
          "195:         # Keep most readability, do not pickle string values",
          "196:         return value",
          "197:     try:",
          "198:         return pickle.dumps(value)",
          "199:     except Exception:",
          "200:         return value",
          "205:     try:",
          "206:         return pickle.loads(pickled)",
          "207:     except:",
          "208:         return pickled.decode('utf8')",
          "",
          "[Added Lines]",
          "194:     return pickle.dumps(value)",
          "200:     return pickle.loads(pickled)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f24212589b568c9f9ae11d4bf504f42303b341d5",
      "candidate_info": {
        "commit_hash": "f24212589b568c9f9ae11d4bf504f42303b341d5",
        "repo": "frostming/rediswrapper",
        "commit_url": "https://github.com/frostming/rediswrapper/commit/f24212589b568c9f9ae11d4bf504f42303b341d5",
        "files": [
          ".gitignore",
          "rediswrapper/models.py",
          "setup.py",
          "test_rediswrapper.py"
        ],
        "message": "Fix test cases",
        "before_after_code_files": [
          "rediswrapper/models.py||rediswrapper/models.py",
          "setup.py||setup.py",
          "test_rediswrapper.py||test_rediswrapper.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/frostming/rediswrapper/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "rediswrapper/models.py||rediswrapper/models.py",
            "setup.py||setup.py",
            "test_rediswrapper.py||test_rediswrapper.py"
          ],
          "candidate": [
            "rediswrapper/models.py||rediswrapper/models.py",
            "setup.py||setup.py",
            "test_rediswrapper.py||test_rediswrapper.py"
          ]
        }
      },
      "candidate_diff": {
        "rediswrapper/models.py||rediswrapper/models.py": [
          "File: rediswrapper/models.py -> rediswrapper/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     def __iter__(self):",
          "40:         for key in self._r.hkeys(self.key):",
          "41:             if isinstance(key, bytes):",
          "43:             yield key",
          "45:     def __len__(self):",
          "",
          "[Removed Lines]",
          "42:                 key = key.decode('utf8')",
          "",
          "[Added Lines]",
          "44:                 key = key.decode(\"utf8\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:             raise AttributeError(name)",
          "54:     def __repr__(self):",
          "57:     def _set(self, other):",
          "58:         for key in self:",
          "",
          "[Removed Lines]",
          "55:         return '%s value(%s)' % (self.__class__.__name__, dict(self))",
          "",
          "[Added Lines]",
          "57:         return \"%s value(%s)\" % (self.__class__.__name__, dict(self))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:                     if indices[2] != 1:",
          "75:                         raise ValueError(\"The value length doesn't match\")",
          "76:                     else:",
          "78:                         break",
          "79:             else:",
          "80:                 # The value length is larger than slice",
          "",
          "[Removed Lines]",
          "77:                         del self[i:indices[1]]",
          "",
          "[Added Lines]",
          "80:                         del self[i : indices[1]]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:         elif isinstance(index, int):",
          "89:             index = index + len(self) if index < 0 else index",
          "90:             if index >= len(self):",
          "92:             self._r.lset(self.key, index, from_value(value))",
          "93:         else:",
          "97:     def __getitem__(self, index):",
          "98:         if isinstance(index, slice):",
          "",
          "[Removed Lines]",
          "91:                 raise IndexError('Index out of range')",
          "94:             raise TypeError('list indices must be integers, not %r'",
          "95:                             % type(index))",
          "",
          "[Added Lines]",
          "94:                 raise IndexError(\"Index out of range\")",
          "97:             raise TypeError(\"list indices must be integers, not %r\" % type(index))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:         elif isinstance(index, int):",
          "102:             index = index + len(self) if index < 0 else index",
          "103:             if index >= len(self):",
          "105:             return to_value(self._r.lindex(self.key, index))",
          "108:     def __delitem__(self, index):",
          "109:         if isinstance(index, slice):",
          "",
          "[Removed Lines]",
          "104:                 raise IndexError('Index out of range')",
          "106:         raise TypeError('list indices must be integers, not %r' % type(index))",
          "",
          "[Added Lines]",
          "106:                 raise IndexError(\"Index out of range\")",
          "108:         raise TypeError(\"list indices must be integers, not %r\" % type(index))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "114:         elif isinstance(index, int):",
          "115:             index = index + len(self) if index < 0 else index",
          "116:             if index >= len(self):",
          "118:             if index == 0:",
          "119:                 return self._r.lpop(self.key)",
          "120:             elif index == len(self) - 1:",
          "121:                 return self._r.rpop(self.key)",
          "124:             for item in temp:",
          "125:                 self._r.rpush(self.key, item)",
          "126:         else:",
          "130:     def __len__(self):",
          "131:         return self._r.llen(self.key)",
          "",
          "[Removed Lines]",
          "117:                 raise IndexError('Index out of range')",
          "122:             temp = self._r.lrange(self.key, index+1, len(self))",
          "123:             self._r.ltrim(self.key, 0, index-1)",
          "127:             raise TypeError('list indices must be integers, not %r'",
          "128:                             % type(index))",
          "",
          "[Added Lines]",
          "119:                 raise IndexError(\"Index out of range\")",
          "124:             temp = self._r.lrange(self.key, index + 1, len(self))",
          "125:             self._r.ltrim(self.key, 0, index - 1)",
          "129:             raise TypeError(\"list indices must be integers, not %r\" % type(index))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "136:         return list(self) == list(other)",
          "138:     def __repr__(self):",
          "141:     def insert(self, index, value):",
          "142:         index = index + len(self) if index < 0 else index",
          "",
          "[Removed Lines]",
          "139:         return '%s value(%s)' % (self.__class__.__name__, list(self))",
          "",
          "[Added Lines]",
          "140:         return \"%s value(%s)\" % (self.__class__.__name__, list(self))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "144:             if index == 0:",
          "145:                 return self._r.lpush(self.key, from_value(value))",
          "146:             temp = self._r.lrange(self.key, index, len(self))",
          "148:             self.append(value)",
          "149:             for item in temp:",
          "150:                 self._r.rpush(self.key, item)",
          "",
          "[Removed Lines]",
          "147:             self._r.ltrim(self.key, 0, index-1)",
          "",
          "[Added Lines]",
          "148:             self._r.ltrim(self.key, 0, index - 1)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "174:         self._r.srem(self.key, from_value(value))",
          "176:     def __repr__(self):",
          "179:     def _set(self, other):",
          "180:         for v in self:",
          "",
          "[Removed Lines]",
          "177:         return '%s value(%s)' % (self.__class__.__name__, list(self))",
          "",
          "[Added Lines]",
          "179:         return \"%s value(%s)\" % (self.__class__.__name__, list(self))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "186:         return set(other)",
          "192: def from_value(value):",
          "193:     \"\"\"Convert a value to be stored in redis\"\"\"",
          "194:     return pickle.dumps(value)",
          "198: def to_value(pickled):",
          "199:     \"\"\"Convert a storage value from redis to human readable\"\"\"",
          "200:     return pickle.loads(pickled)",
          "",
          "[Removed Lines]",
          "189: type_map = {'list': ListType, 'hash': HashType, 'set': SetType}",
          "",
          "[Added Lines]",
          "191: type_map = {\"list\": ListType, \"hash\": HashType, \"set\": SetType}",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from setuptools import setup",
          "8:     os.system(\"python setup.py sdist upload\")",
          "9:     sys.exit()",
          "12:     try:",
          "14:     except ImportError:",
          "16:         sys.exit(1)",
          "19:     sys.exit(bool(errors))",
          "22: def get_version():",
          "24:     return re.findall(r'__version__\\s*=\\s*[\\'\"](.*)[\\'\"]', content)[0]",
          "29:         readme = name",
          "30:         break",
          "31: try:",
          "",
          "[Removed Lines]",
          "7: if sys.argv[-1] == 'publish':",
          "11: if sys.argv[-1] == 'test':",
          "13:         __import__('py')",
          "15:         print('pytest required.')",
          "18:     errors = os.system('py.test')",
          "23:     content = open('rediswrapper/__init__.py').read()",
          "26: readme = 'README'",
          "27: for name in os.listdir('.'):",
          "28:     if name.startswith('README'):",
          "",
          "[Added Lines]",
          "7: if sys.argv[-1] == \"publish\":",
          "11: if sys.argv[-1] == \"test\":",
          "13:         __import__(\"pytest\")",
          "15:         print(\"pytest required.\")",
          "18:     errors = os.system(\"pytest\")",
          "23:     content = open(\"rediswrapper/__init__.py\").read()",
          "27: readme = \"README\"",
          "28: for name in os.listdir(\".\"):",
          "29:     if name.startswith(\"README\"):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: except:",
          "35:     long_description = \"RedisWrapper, a pythonic wrapper for redis client\"",
          "",
          "[Removed Lines]",
          "37: setup(name='rediswrapper',",
          "38:       version=get_version(),",
          "39:       description='Pythonic wrapper for Redis Client.',",
          "40:       url='https://github.com/frostming/rediswrapper',",
          "41:       author='Frost Ming',",
          "42:       author_email='mianghong@gmail.com',",
          "43:       license='MIT',",
          "44:       packages=['rediswrapper'],",
          "45:       test_suite='test_rediswrapper',",
          "46:       zip_safe=False,",
          "47:       long_description=long_description,",
          "48:       keywords='redis client mock',",
          "49:       test_requires=['pytest', 'fakeredis'],",
          "50:       install_requires=['redis'],",
          "51:       classifiers=[",
          "52:           \"Intended Audience :: Developers\",",
          "53:           \"Operating System :: OS Independent\",",
          "54:           \"Topic :: Software Development\",",
          "55:           \"Programming Language :: Python :: 2.7\",",
          "56:           \"Programming Language :: Python :: 3.3\",",
          "57:           \"Programming Language :: Python :: 3.4\",",
          "58:           \"Programming Language :: Python :: 3.5\",",
          "59:           \"Programming Language :: Python :: 3.6\",",
          "60:           \"Programming Language :: Python :: Implementation :: CPython\",",
          "61:           \"Programming Language :: Python :: Implementation :: PyPy\",",
          "62:           \"Development Status :: 3 - Alpha\",",
          "63:           \"License :: OSI Approved :: MIT License\"",
          "64:       ],",
          "65:       )",
          "",
          "[Added Lines]",
          "38: setup(",
          "39:     name=\"rediswrapper\",",
          "40:     version=get_version(),",
          "41:     description=\"Pythonic wrapper for Redis Client.\",",
          "42:     url=\"https://github.com/frostming/rediswrapper\",",
          "43:     author=\"Frost Ming\",",
          "44:     author_email=\"mianghong@gmail.com\",",
          "45:     license=\"MIT\",",
          "46:     packages=[\"rediswrapper\"],",
          "47:     test_suite=\"test_rediswrapper\",",
          "48:     zip_safe=False,",
          "49:     long_description=long_description,",
          "50:     keywords=\"redis client mock\",",
          "51:     test_requires=[\"pytest\", \"fakeredis\"],",
          "52:     install_requires=[\"redis\"],",
          "53:     classifiers=[",
          "54:         \"Intended Audience :: Developers\",",
          "55:         \"Operating System :: OS Independent\",",
          "56:         \"Topic :: Software Development\",",
          "57:         \"Programming Language :: Python :: 2.7\",",
          "58:         \"Programming Language :: Python :: 3.3\",",
          "59:         \"Programming Language :: Python :: 3.4\",",
          "60:         \"Programming Language :: Python :: 3.5\",",
          "61:         \"Programming Language :: Python :: 3.6\",",
          "62:         \"Programming Language :: Python :: Implementation :: CPython\",",
          "63:         \"Programming Language :: Python :: Implementation :: PyPy\",",
          "64:         \"Development Status :: 3 - Alpha\",",
          "65:         \"License :: OSI Approved :: MIT License\",",
          "66:     ],",
          "67: )",
          "",
          "---------------"
        ],
        "test_rediswrapper.py||test_rediswrapper.py": [
          "File: test_rediswrapper.py -> test_rediswrapper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: from collections import Set, MutableSequence",
          "11: now = datetime.datetime.now()",
          "22: def cmp_no_order(seq1, seq2):",
          "",
          "[Removed Lines]",
          "12: golden = {'a': 'hello',",
          "13:           'b': True,",
          "14:           'c': 1,",
          "15:           'd': None,",
          "16:           'e': now,",
          "17:           'f': list(range(5)),",
          "18:           'g': dict(zip('abcd', range(4))),",
          "19:           'h': set(['a', 'b', 'c'])}",
          "",
          "[Added Lines]",
          "12: golden = {",
          "13:     \"a\": \"hello\",",
          "14:     \"b\": True,",
          "15:     \"c\": 1,",
          "16:     \"d\": None,",
          "17:     \"e\": now,",
          "18:     \"f\": list(range(5)),",
          "19:     \"g\": dict(zip(\"abcd\", range(4))),",
          "20:     \"h\": set([\"a\", \"b\", \"c\"]),",
          "21: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     def setUp(self):",
          "37:         global redis",
          "40:         redis.update(golden)",
          "42:     def tearDown(self):",
          "",
          "[Removed Lines]",
          "39:         redis = RedisDict(prefix='test', client=FakeStrictRedis)",
          "",
          "[Added Lines]",
          "41:         redis = RedisDict(prefix=\"test\", client=FakeStrictRedis)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     def test_prefix(self):",
          "46:         \"\"\"Test the key is prefixed correctly\"\"\"",
          "49:             assert redis._r.exists(key)",
          "51:     def test_contains(self):",
          "53:             assert c in redis",
          "55:     def test_get_item(self):",
          "58:         with pytest.raises(KeyError):",
          "61:     def test_iter_item(self):",
          "62:         assert dict(redis) == golden",
          "64:     def test_keys(self):",
          "67:     def test_set_item(self):",
          "73:     def test_set_different_type(self):",
          "81:     def test_del_item(self):",
          "84:         with pytest.raises(KeyError):",
          "87:     def test_get_attribute(self):",
          "88:         assert redis.f == list(range(5))",
          "90:         assert callable(redis.get)",
          "91:         with pytest.raises(AttributeError):",
          "92:             redis.other",
          "94:     def test_list_get_item(self):",
          "96:         assert data[1] == 1",
          "97:         with pytest.raises(IndexError):",
          "98:             data[10]",
          "99:         with pytest.raises(TypeError):",
          "102:     def test_list_get_slice(self):",
          "104:         assert data[2:] == [2, 3, 4]",
          "105:         assert data[:-2] == [0, 1, 2]",
          "106:         assert data[1:4:2] == [1, 3]",
          "108:     def test_list_contains(self):",
          "110:         assert 1 in data",
          "113:     def test_list_set_item(self):",
          "115:         data[1] = 4",
          "117:         data[-1] = 1",
          "119:         with pytest.raises(IndexError):",
          "120:             data[10] = 10",
          "121:         with pytest.raises(TypeError):",
          "124:     def test_list_set_slice(self):",
          "130:         data[:] = [1, 2, 3]",
          "134:         with pytest.raises(ValueError):",
          "135:             # target length < source length and step != 1",
          "136:             data[::2] = [1]",
          "",
          "[Removed Lines]",
          "47:         for c in 'abcdefgh':",
          "48:             key = 'test.' + c",
          "52:         for c in 'abcdefgh':",
          "56:         assert redis['d'] is None",
          "57:         assert redis.get('a') == 'hello'",
          "59:             redis['z']",
          "65:         assert cmp_no_order(redis.keys(), list('abcdefgh'))",
          "68:         redis['a'] = 'hello michael'",
          "69:         assert redis['a'] == 'hello michael'",
          "70:         assert redis.setdefault('i', 1.2) == 1.2",
          "71:         assert 'i' in redis",
          "74:         redis['b'] = [1, 2, 3]",
          "75:         assert isinstance(redis['b'], MutableSequence)",
          "76:         redis['f'] = 'hello'",
          "77:         assert redis['f'] == 'hello'",
          "78:         redis['g'] = set([1, 2, 3])",
          "79:         assert isinstance(redis['g'], Set)",
          "82:         del redis['a']",
          "83:         assert 'a' not in redis",
          "85:             del redis['z']",
          "89:         redis['get'] = 1",
          "95:         data = redis['f']",
          "100:             data['1']",
          "103:         data = redis['f']",
          "109:         data = redis['f']",
          "111:         assert 'a' not in data",
          "114:         data = redis['f']",
          "116:         assert redis['f'] == [0, 4, 2, 3, 4]",
          "118:         assert redis['f'] == [0, 4, 2, 3, 1]",
          "122:             data['1'] = 1",
          "125:         data = redis['f']",
          "126:         data[1:3] = ['a', 'b']",
          "127:         assert redis['f'] == [0, 'a', 'b', 3, 4]",
          "128:         data[1:1] = ['c', 'd']",
          "129:         assert redis['f'] == [0, 'c', 'd', 'a', 'b', 3, 4]",
          "131:         assert redis['f'] == [1, 2, 3]",
          "132:         data[::2] = ['a', 'b']",
          "133:         assert redis['f'] == ['a', 2, 'b']",
          "",
          "[Added Lines]",
          "49:         for c in \"abcdefgh\":",
          "50:             key = \"test.\" + c",
          "54:         for c in \"abcdefgh\":",
          "58:         assert redis[\"d\"] is None",
          "59:         assert redis.get(\"a\") == \"hello\"",
          "61:             redis[\"z\"]",
          "67:         assert cmp_no_order(redis.keys(), list(\"abcdefgh\"))",
          "70:         redis[\"a\"] = \"hello michael\"",
          "71:         assert redis[\"a\"] == \"hello michael\"",
          "72:         assert redis.setdefault(\"i\", 1.2) == 1.2",
          "73:         assert \"i\" in redis",
          "76:         redis[\"b\"] = [1, 2, 3]",
          "77:         assert isinstance(redis[\"b\"], MutableSequence)",
          "78:         redis[\"f\"] = \"hello\"",
          "79:         assert redis[\"f\"] == \"hello\"",
          "80:         redis[\"g\"] = set([1, 2, 3])",
          "81:         assert isinstance(redis[\"g\"], Set)",
          "84:         del redis[\"a\"]",
          "85:         assert \"a\" not in redis",
          "87:             del redis[\"z\"]",
          "91:         redis[\"get\"] = 1",
          "97:         data = redis[\"f\"]",
          "102:             data[\"1\"]",
          "105:         data = redis[\"f\"]",
          "111:         data = redis[\"f\"]",
          "113:         assert \"a\" not in data",
          "116:         data = redis[\"f\"]",
          "118:         assert redis[\"f\"] == [0, 4, 2, 3, 4]",
          "120:         assert redis[\"f\"] == [0, 4, 2, 3, 1]",
          "124:             data[\"1\"] = 1",
          "127:         data = redis[\"f\"]",
          "128:         data[1:3] = [\"a\", \"b\"]",
          "129:         assert redis[\"f\"] == [0, \"a\", \"b\", 3, 4]",
          "130:         data[1:1] = [\"c\", \"d\"]",
          "131:         assert redis[\"f\"] == [0, \"c\", \"d\", \"a\", \"b\", 3, 4]",
          "133:         assert redis[\"f\"] == [1, 2, 3]",
          "134:         data[::2] = [\"a\", \"b\"]",
          "135:         assert redis[\"f\"] == [\"a\", 2, \"b\"]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:             data[::-1] = [1, 3]",
          "144:     def test_list_del_item(self):",
          "146:         del data[1]",
          "148:         del data[-1]",
          "150:         with pytest.raises(IndexError):",
          "151:             del data[10]",
          "152:         with pytest.raises(TypeError):",
          "155:     def test_list_del_slice(self):",
          "157:         del data[1:1]",
          "159:         del data[1:5:2]",
          "161:         del data[:]",
          "164:     def test_list_insert(self):",
          "173:     def test_list_append_pop(self):",
          "177:         assert data.pop(0) == 0",
          "178:         assert len(data) == 4",
          "180:     def test_hash_contains(self):",
          "184:     def test_hash_get_item(self):",
          "187:         with pytest.raises(KeyError):",
          "190:     def test_hash_set_item(self):",
          "198:     def test_hash_del_item(self):",
          "201:         with pytest.raises(KeyError):",
          "204:     def test_hash_representation(self):",
          "210:     def test_hash_keys(self):",
          "213:     def test_hash_get_attr(self):",
          "216:         with pytest.raises(AttributeError):",
          "219:     def test_set_contains(self):",
          "223:     def test_set_representation(self):",
          "226:     def test_set_add(self):",
          "232:     def test_set_discard(self):",
          "238:     def test_set_op(self):",
          "247:     unittest.main()",
          "",
          "[Removed Lines]",
          "145:         data = redis['f']",
          "147:         assert len(redis['f']) == 4",
          "149:         assert redis['f'] == [0, 2, 3]",
          "153:             del data['1']",
          "156:         data = redis['f']",
          "158:         assert len(redis['f']) == 5",
          "160:         assert redis['f'] == [0, 2, 4]",
          "162:         assert len(redis['f']) == 0",
          "165:         data = redis['f']",
          "166:         data.insert(0, 'a')",
          "167:         assert data == ['a', 0, 1, 2, 3, 4]",
          "168:         data.insert(2, 'b')",
          "169:         assert data == ['a', 0, 'b', 1, 2, 3, 4]",
          "170:         data.insert(10, 'c')",
          "171:         assert data == ['a', 0, 'b', 1, 2, 3, 4, 'c']",
          "174:         data = redis['f']",
          "175:         data.append('a')",
          "176:         assert data.pop() == 'a'",
          "181:         assert 'a' in redis['g']",
          "182:         assert 2 not in redis['g']",
          "185:         assert redis['g']['b'] == 1",
          "186:         assert redis['g'].get('c') == 2",
          "188:             redis['g'][5]",
          "191:         redis['g'][1] = True",
          "192:         assert redis['g'][1] is True",
          "193:         redis['g']['c'] = 'c'",
          "194:         assert redis['g']['c'] == 'c'",
          "195:         redis['g']['other'] = [1, 2]",
          "196:         assert redis['g']['other'] == [1, 2]",
          "199:         del redis['g']['d']",
          "200:         assert 'd' not in redis['g']",
          "202:             del redis['g'][5]",
          "205:         assert redis['g'] == {'a': 0,",
          "206:                               'b': 1,",
          "207:                               'c': 2,",
          "208:                               'd': 3}",
          "211:         assert cmp_no_order(redis['g'].keys(), list('abcd'))",
          "214:         assert callable(redis['g'].get)",
          "215:         assert redis['g'].c == 2",
          "217:             redis['g'].other",
          "220:         assert 'a' in redis['h']",
          "221:         assert 5 not in redis['h']",
          "224:         assert set(redis['h']) == set(['a', 'b', 'c'])",
          "227:         redis['h'].add('a')",
          "228:         assert len(redis['h']) == 3",
          "229:         redis['h'].add('d')",
          "230:         assert 'd' in redis['h']",
          "233:         redis['h'].discard('d')",
          "234:         assert len(redis['h']) == 3",
          "235:         redis['h'].discard('b')",
          "236:         assert len(redis['h']) == 2",
          "239:         assert redis['h'] == set(['a', 'b', 'c'])",
          "240:         assert redis['h'] < set(['a', 'b', 'c', 'd', 'e'])",
          "241:         assert redis['h'] & set(['a']) == set(['a'])",
          "242:         assert redis['h'] | set(['a', 'e']) \\",
          "243:             == set(['a', 'b', 'c', 'e'])",
          "246: if __name__ == '__main__':",
          "",
          "[Added Lines]",
          "147:         data = redis[\"f\"]",
          "149:         assert len(redis[\"f\"]) == 4",
          "151:         assert redis[\"f\"] == [0, 2, 3]",
          "155:             del data[\"1\"]",
          "158:         data = redis[\"f\"]",
          "160:         assert len(redis[\"f\"]) == 5",
          "162:         assert redis[\"f\"] == [0, 2, 4]",
          "164:         assert \"f\" not in redis",
          "167:         data = redis[\"f\"]",
          "168:         data.insert(0, \"a\")",
          "169:         assert data == [\"a\", 0, 1, 2, 3, 4]",
          "170:         data.insert(2, \"b\")",
          "171:         assert data == [\"a\", 0, \"b\", 1, 2, 3, 4]",
          "172:         data.insert(10, \"c\")",
          "173:         assert data == [\"a\", 0, \"b\", 1, 2, 3, 4, \"c\"]",
          "176:         data = redis[\"f\"]",
          "177:         data.append(\"a\")",
          "178:         assert data.pop() == \"a\"",
          "183:         assert \"a\" in redis[\"g\"]",
          "184:         assert 2 not in redis[\"g\"]",
          "187:         assert redis[\"g\"][\"b\"] == 1",
          "188:         assert redis[\"g\"].get(\"c\") == 2",
          "190:             redis[\"g\"][5]",
          "193:         redis[\"g\"][1] = True",
          "194:         assert redis[\"g\"][1] is True",
          "195:         redis[\"g\"][\"c\"] = \"c\"",
          "196:         assert redis[\"g\"][\"c\"] == \"c\"",
          "197:         redis[\"g\"][\"other\"] = [1, 2]",
          "198:         assert redis[\"g\"][\"other\"] == [1, 2]",
          "201:         del redis[\"g\"][\"d\"]",
          "202:         assert \"d\" not in redis[\"g\"]",
          "204:             del redis[\"g\"][5]",
          "207:         assert redis[\"g\"] == {\"a\": 0, \"b\": 1, \"c\": 2, \"d\": 3}",
          "210:         assert cmp_no_order(redis[\"g\"].keys(), list(\"abcd\"))",
          "213:         assert callable(redis[\"g\"].get)",
          "214:         assert redis[\"g\"].c == 2",
          "216:             redis[\"g\"].other",
          "219:         assert \"a\" in redis[\"h\"]",
          "220:         assert 5 not in redis[\"h\"]",
          "223:         assert set(redis[\"h\"]) == set([\"a\", \"b\", \"c\"])",
          "226:         redis[\"h\"].add(\"a\")",
          "227:         assert len(redis[\"h\"]) == 3",
          "228:         redis[\"h\"].add(\"d\")",
          "229:         assert \"d\" in redis[\"h\"]",
          "232:         redis[\"h\"].discard(\"d\")",
          "233:         assert len(redis[\"h\"]) == 3",
          "234:         redis[\"h\"].discard(\"b\")",
          "235:         assert len(redis[\"h\"]) == 2",
          "238:         assert redis[\"h\"] == set([\"a\", \"b\", \"c\"])",
          "239:         assert redis[\"h\"] < set([\"a\", \"b\", \"c\", \"d\", \"e\"])",
          "240:         assert redis[\"h\"] & set([\"a\"]) == set([\"a\"])",
          "241:         assert redis[\"h\"] | set([\"a\", \"e\"]) == set([\"a\", \"b\", \"c\", \"e\"])",
          "244: if __name__ == \"__main__\":",
          "",
          "---------------"
        ]
      }
    }
  ]
}