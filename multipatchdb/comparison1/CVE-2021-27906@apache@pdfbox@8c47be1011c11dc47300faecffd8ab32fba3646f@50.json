{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0340eac7f57c3373c35dd435c532e43faafeb7e7",
      "candidate_info": {
        "commit_hash": "0340eac7f57c3373c35dd435c532e43faafeb7e7",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/0340eac7f57c3373c35dd435c532e43faafeb7e7",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java"
        ],
        "message": "PDFBOX-3777, PDFBOX-4892: avoid ClassCastException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884398 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:     public List<PDField> getFields()",
          "365:     {",
          "367:         if (cosFields == null)",
          "368:         {",
          "369:             return Collections.emptyList();",
          "",
          "[Removed Lines]",
          "366:         COSArray cosFields = (COSArray) dictionary.getDictionaryObject(COSName.FIELDS);",
          "",
          "[Added Lines]",
          "366:         COSArray cosFields = dictionary.getCOSArray(COSName.FIELDS);",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.pdmodel.interactive.form;",
          "19: import static org.junit.Assert.assertEquals;",
          "20: import static org.junit.Assert.assertNotNull;",
          "21: import static org.junit.Assert.assertNull;",
          "22: import static org.junit.Assert.assertTrue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import static org.junit.Assert.assertFalse;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26: import java.io.ByteArrayOutputStream;",
          "27: import java.io.File;",
          "28: import java.io.IOException;",
          "29: import java.util.ArrayList;",
          "30: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import java.net.URL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "385:         doc.close();",
          "386:     }",
          "388:     @After",
          "389:     public void tearDown() throws IOException",
          "390:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:     @Test",
          "396:     public void testIllegalFieldsDefinition() throws IOException",
          "397:     {",
          "398:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12866226/D1790B.PDF\";",
          "400:         PDDocument testPdf = null;",
          "401:         try",
          "402:         {",
          "403:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "404:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "405:             boolean thrown = false;",
          "406:             try",
          "407:             {",
          "408:                 catalog.getAcroForm();",
          "409:             }",
          "410:             catch (Exception e)",
          "411:             {",
          "412:                 thrown = true;",
          "413:             }",
          "414:             assertFalse(\"There shall be no exception when getting the AcroForm\", thrown);",
          "415:         }",
          "416:         finally",
          "417:         {",
          "418:             IOUtils.closeQuietly(testPdf);",
          "419:         }",
          "420:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41a3975c4846d379a84c808f93ad94cc9e8f2505",
      "candidate_info": {
        "commit_hash": "41a3975c4846d379a84c808f93ad94cc9e8f2505",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/41a3975c4846d379a84c808f93ad94cc9e8f2505",
        "files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestHelloWorld.java"
        ],
        "message": "PDFBOX-5141: add tests for two HelloWorld examples\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888089 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestHelloWorld.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestHelloWorld.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestHelloWorld.java||examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestHelloWorld.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestHelloWorld.java -> examples/src/test/java/org/apache/pdfbox/examples/pdmodel/TestHelloWorld.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.examples.pdmodel;",
          "19: import java.io.File;",
          "20: import java.io.IOException;",
          "21: import org.apache.pdfbox.pdmodel.PDDocument;",
          "22: import org.apache.pdfbox.text.PDFTextStripper;",
          "23: import static org.junit.Assert.assertEquals;",
          "24: import org.junit.BeforeClass;",
          "25: import org.junit.Test;",
          "31: public class TestHelloWorld",
          "32: {",
          "33:     private static final String OUTPUT_DIR = \"target/test-output\";",
          "35:     @BeforeClass",
          "36:     public static void init() throws Exception",
          "37:     {",
          "38:         new File(OUTPUT_DIR).mkdirs();",
          "39:     }",
          "41:     @Test",
          "42:     public void testHelloWorldTTF() throws IOException",
          "43:     {",
          "44:         String outputFile = OUTPUT_DIR + \"/HelloWorldTTF.pdf\";",
          "45:         String message = \"HelloWorldTTF.pdf\";",
          "46:         String fontFile = \"../pdfbox/src/main/resources/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf\";",
          "48:         new File(outputFile).delete();",
          "50:         String[] args = new String[] { outputFile, message, fontFile };",
          "51:         HelloWorldTTF.main(args);",
          "53:         checkOutputFile(outputFile, message);",
          "55:         new File(outputFile).delete();",
          "56:     }",
          "58:     @Test",
          "59:     public void testHelloWorld() throws IOException",
          "60:     {",
          "61:         String outputDir = \"target/test-output\";",
          "62:         String outputFile = outputDir + \"/HelloWorld.pdf\";",
          "63:         String message = \"HelloWorld.pdf\";",
          "65:         new File(outputFile).delete();",
          "67:         String[] args = new String[] { outputFile, message };",
          "68:         HelloWorld.main(args);",
          "70:         checkOutputFile(outputFile, message);",
          "72:         new File(outputFile).delete();",
          "73:     }",
          "75:     private void checkOutputFile(String outputFile, String message) throws IOException",
          "76:     {",
          "77:         PDDocument doc = PDDocument.load(new File(outputFile));",
          "78:         PDFTextStripper stripper = new PDFTextStripper();",
          "79:         String extractedText = stripper.getText(doc).trim();",
          "80:         assertEquals(message, extractedText);",
          "81:         doc.close();",
          "82:     }",
          "83: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49fa40717b7f1cb5e1db4ea53b7d956d96e3bbf6",
      "candidate_info": {
        "commit_hash": "49fa40717b7f1cb5e1db4ea53b7d956d96e3bbf6",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/49fa40717b7f1cb5e1db4ea53b7d956d96e3bbf6",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java"
        ],
        "message": "PDFBOX-4892: performance improvement, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888611 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java -> debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:     @Override",
          "327:     public void mouseMoved(MouseEvent e)",
          "328:     {",
          "333:         float zoomScale = zoomMenu.getPageZoomScale();",
          "334:         float x = e.getX() / zoomScale * (float) defaultTransform.getScaleX();",
          "335:         float y = e.getY() / zoomScale * (float) defaultTransform.getScaleY();",
          "",
          "[Removed Lines]",
          "329:         float height = page.getCropBox().getHeight();",
          "330:         float width  = page.getCropBox().getWidth();",
          "331:         float offsetX = page.getCropBox().getLowerLeftX();",
          "332:         float offsetY = page.getCropBox().getLowerLeftY();",
          "",
          "[Added Lines]",
          "329:         PDRectangle cropBox = page.getCropBox();",
          "330:         float height = cropBox.getHeight();",
          "331:         float width = cropBox.getWidth();",
          "332:         float offsetX = cropBox.getLowerLeftX();",
          "333:         float offsetY = cropBox.getLowerLeftY();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3318903c8bcdf006e76453db601e486d60ced51d",
      "candidate_info": {
        "commit_hash": "3318903c8bcdf006e76453db601e486d60ced51d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3318903c8bcdf006e76453db601e486d60ced51d",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/HorizontalMetricsTable.java"
        ],
        "message": "PDFBOX-4892: correct exception message, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890790 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/HorizontalMetricsTable.java||fontbox/src/main/java/org/apache/fontbox/ttf/HorizontalMetricsTable.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/ttf/HorizontalMetricsTable.java||fontbox/src/main/java/org/apache/fontbox/ttf/HorizontalMetricsTable.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/ttf/HorizontalMetricsTable.java -> fontbox/src/main/java/org/apache/fontbox/ttf/HorizontalMetricsTable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         HorizontalHeaderTable hHeader = ttf.getHorizontalHeader();",
          "53:         if (hHeader == null)",
          "54:         {",
          "56:         }",
          "57:         numHMetrics = hHeader.getNumberOfHMetrics();",
          "58:         int numGlyphs = ttf.getNumberOfGlyphs();",
          "",
          "[Removed Lines]",
          "55:             throw new IOException(\"Could not get hhea table\");",
          "",
          "[Added Lines]",
          "55:             throw new IOException(\"Could not get hmtx table\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "825d3ff389479e473fa8becc3a8d06c09b8c776e",
      "candidate_info": {
        "commit_hash": "825d3ff389479e473fa8becc3a8d06c09b8c776e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/825d3ff389479e473fa8becc3a8d06c09b8c776e",
        "files": [
          "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java"
        ],
        "message": "PDFBOX-4892: optimize / simplify + avoid NPE, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888155 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java||tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java||tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java": [
          "File: tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java -> tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:                 LOG.error(\"Supported formats: \" + Arrays.toString(ImageIO.getWriterFormatNames()));",
          "279:                 return false;",
          "280:             }",
          "283:             if (param != null && param.canWriteCompressed())",
          "284:             {",
          "285:                 param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);",
          "287:                 {",
          "288:                     if (\"\".equals(compressionType))",
          "289:                     {",
          "",
          "[Removed Lines]",
          "286:                 if (formatName.toLowerCase().startsWith(\"tif\"))",
          "",
          "[Added Lines]",
          "282:             boolean isTifFormat = formatName.toLowerCase().startsWith(\"tif\");",
          "288:                 if (isTifFormat)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:                 }",
          "307:             }",
          "310:             {",
          "329:                 {",
          "331:                 }",
          "332:             }",
          "",
          "[Removed Lines]",
          "309:             if (formatName.toLowerCase().startsWith(\"tif\"))",
          "312:                 TIFFUtil.updateMetadata(metadata, image, dpi);",
          "313:             }",
          "314:             else if (\"jpeg\".equalsIgnoreCase(formatName)",
          "315:                     || \"jpg\".equalsIgnoreCase(formatName))",
          "316:             {",
          "321:                 JPEGUtil.updateMetadata(metadata, dpi);",
          "322:             }",
          "323:             else",
          "324:             {",
          "326:                 if (metadata != null",
          "327:                         && !metadata.isReadOnly()",
          "328:                         && metadata.isStandardMetadataFormatSupported())",
          "330:                     setDPI(metadata, dpi, formatName);",
          "",
          "[Added Lines]",
          "311:             if (metadata != null)",
          "313:                 if (isTifFormat)",
          "316:                     TIFFUtil.updateMetadata(metadata, image, dpi);",
          "317:                 }",
          "318:                 else if (\"jpeg\".equalsIgnoreCase(formatName) || \"jpg\".equalsIgnoreCase(formatName))",
          "319:                 {",
          "324:                     JPEGUtil.updateMetadata(metadata, dpi);",
          "325:                 }",
          "326:                 else",
          "327:                 {",
          "329:                     if (!metadata.isReadOnly() && metadata.isStandardMetadataFormatSupported())",
          "330:                     {",
          "331:                         setDPI(metadata, dpi, formatName);",
          "332:                     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}