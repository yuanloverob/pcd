{
  "cve_id": "CVE-2021-40831",
  "cve_desc": "The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on macOS systems. Additionally, SNI validation is also not enabled when the CA has been \u201coverridden\u201d. TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system\u2019s default trust-store. Attackers with access to a host\u2019s trust stores or are able to compromise a certificate authority already in the host's trust store (note: the attacker must also be able to spoof DNS in this case) may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The 'aws_tls_ctx_options_override_default_trust_store_*' function within the aws-c-io submodule has been updated to address this behavior. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.5.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.7.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.14.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.6.0 on macOS. Amazon Web Services AWS-C-IO 0.10.7 on macOS.",
  "repo": "aws/aws-iot-device-sdk-python-v2",
  "patch_hash": "5aef82573202309063eb540b72cee0e565f85a2d",
  "patch_info": {
    "commit_hash": "5aef82573202309063eb540b72cee0e565f85a2d",
    "repo": "aws/aws-iot-device-sdk-python-v2",
    "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/5aef82573202309063eb540b72cee0e565f85a2d",
    "files": [
      "setup.py"
    ],
    "message": "Fix CA override functions (#223)\n\nUpdate to awscrt 0.12.0. This fixes the issue where \"override_default_trust_store\" functions did not actually override the system trust store on Linux and Apple platforms.",
    "before_after_code_files": [
      "setup.py||setup.py"
    ]
  },
  "patch_diff": {
    "setup.py||setup.py": [
      "File: setup.py -> setup.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:         \"Operating System :: OS Independent\",",
      "41:     ],",
      "42:     install_requires=[",
      "44:     ],",
      "45:     python_requires='>=3.6',",
      "46: )",
      "",
      "[Removed Lines]",
      "43:         'awscrt==0.11.25',",
      "",
      "[Added Lines]",
      "43:         'awscrt==0.12.0',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7bd47b56226352ce815d82c8f8f0fd3ab8006fae",
      "candidate_info": {
        "commit_hash": "7bd47b56226352ce815d82c8f8f0fd3ab8006fae",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/7bd47b56226352ce815d82c8f8f0fd3ab8006fae",
        "files": [
          "setup.py"
        ],
        "message": "Updating aws-crt-python submodule for bug fixes. (#190)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         \"Operating System :: OS Independent\",",
          "20:     ],",
          "21:     install_requires=[",
          "23:     ],",
          "24:     python_requires='>=3.5',",
          "25: )",
          "",
          "[Removed Lines]",
          "22:         'awscrt==0.11.12',",
          "",
          "[Added Lines]",
          "22:         'awscrt==0.11.14',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03eb38ec7561976bbec96d315cf25d14317b2f86",
      "candidate_info": {
        "commit_hash": "03eb38ec7561976bbec96d315cf25d14317b2f86",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/03eb38ec7561976bbec96d315cf25d14317b2f86",
        "files": [
          "awsiot/mqtt_connection_builder.py",
          "samples/README.md",
          "samples/pkcs11_pubsub.py",
          "setup.py"
        ],
        "message": "Support PKCS#11 for mutual TLS on Unix platforms (#259)\n\n- Update to latest `aws-crt-python`, which exposes PKCS#11 functionality (see https://github.com/awslabs/aws-crt-python/pull/323)\n- Add `pkcs11_pubsub.py` sample, demonstrating an MQTT connection where the private key is stored in PKCS#11 token.\n  - Add docs for sample",
        "before_after_code_files": [
          "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py",
          "samples/pkcs11_pubsub.py||samples/pkcs11_pubsub.py",
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/mqtt_connection_builder.py||awsiot/mqtt_connection_builder.py": [
          "File: awsiot/mqtt_connection_builder.py -> awsiot/mqtt_connection_builder.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:     return _builder(tls_ctx_options, **kwargs)",
          "252: def websockets_with_default_aws_signing(",
          "253:         region,",
          "254:         credentials_provider,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: def mtls_with_pkcs11(*,",
          "253:                      pkcs11_lib: awscrt.io.Pkcs11Lib,",
          "254:                      user_pin: str,",
          "255:                      slot_id: int = None,",
          "256:                      token_label: str = None,",
          "257:                      private_key_label: str = None,",
          "258:                      cert_filepath: str = None,",
          "259:                      cert_bytes=None,",
          "261:     \"\"\"",
          "262:     This builder creates an :class:`awscrt.mqtt.Connection`, configured for an mTLS MQTT connection to AWS IoT,",
          "263:     using a PKCS#11 library for private key operations.",
          "265:     This function takes all :mod:`common arguments<awsiot.mqtt_connection_builder>`",
          "266:     described at the top of this doc, as well as...",
          "268:     Keyword Args:",
          "269:         pkcs11_lib (awscrt.io.Pkcs11Lib): Use this PKCS#11 library",
          "271:         user_pin (Optional[str]): User PIN, for logging into the PKCS#11 token.",
          "272:             Pass `None` to log into a token with a \"protected authentication path\".",
          "274:         slot_id (Optional[int]): ID of slot containing PKCS#11 token.",
          "275:             If not specified, the token will be chosen based on other criteria (such as token label).",
          "277:         token_label (Optional[str]): Label of the PKCS#11 token to use.",
          "278:             If not specified, the token will be chosen based on other criteria (such as slot ID).",
          "280:         private_key_label (Optional[str]): Label of private key object on PKCS#11 token.",
          "281:             If not specified, the key will be chosen based on other criteria",
          "282:             (such as being the only available private key on the token).",
          "284:         cert_filepath (Optional[str]): Use this X.509 certificate (file on disk).",
          "285:             The certificate must be PEM-formatted. The certificate may be",
          "286:             specified by other means instead (ex: `cert_file_contents`)",
          "288:         cert_bytes (Optional[bytes-like object]):",
          "289:             Use this X.509 certificate (contents in memory).",
          "290:             The certificate must be PEM-formatted. The certificate may be",
          "291:             specified by other means instead (ex: `cert_file_path`)",
          "292:     \"\"\"",
          "293:     _check_required_kwargs(**kwargs)",
          "295:     tls_ctx_options = awscrt.io.TlsContextOptions.create_client_with_mtls_pkcs11(",
          "296:         pkcs11_lib=pkcs11_lib,",
          "297:         user_pin=user_pin,",
          "298:         slot_id=slot_id,",
          "299:         token_label=token_label,",
          "300:         private_key_label=private_key_label,",
          "301:         cert_file_path=cert_filepath,",
          "302:         cert_file_contents=cert_bytes)",
          "304:     return _builder(tls_ctx_options, **kwargs)",
          "",
          "---------------"
        ],
        "samples/pkcs11_pubsub.py||samples/pkcs11_pubsub.py": [
          "File: samples/pkcs11_pubsub.py -> samples/pkcs11_pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: import argparse",
          "5: from awscrt import io, mqtt",
          "6: from awsiot import mqtt_connection_builder",
          "7: import sys",
          "8: import threading",
          "9: import time",
          "10: from uuid import uuid4",
          "11: import json",
          "13: # This sample is similar to `samples/pubsub.py` but the private key",
          "14: # for mutual TLS is stored on a PKCS#11 compatible smart card or",
          "15: # Hardware Security Module (HSM).",
          "16: #",
          "17: # See `samples/README.md` for instructions on setting up your PKCS#11 device",
          "18: # to run this sample.",
          "19: #",
          "20: # WARNING: Unix only. Currently, TLS integration with PKCS#11 is only available on Unix devices.",
          "22: parser = argparse.ArgumentParser(description=\"Send and receive messages through and MQTT connection.\")",
          "23: parser.add_argument('--endpoint', required=True, help=\"Your AWS IoT custom endpoint, not including a port. \" +",
          "24:                                                       \"Ex: \\\"abcd123456wxyz-ats.iot.us-east-1.amazonaws.com\\\"\")",
          "25: parser.add_argument('--port', type=int, help=\"Specify port. AWS IoT supports 443 and 8883. (default: auto)\")",
          "26: parser.add_argument('--cert', required=True, help=\"File path to your client certificate, in PEM format.\")",
          "27: parser.add_argument('--pkcs11-lib', required=True, help=\"Path to PKCS#11 library.\")",
          "28: parser.add_argument('--pin', required=True, help=\"User PIN for logging into PKCS#11 token.\")",
          "29: parser.add_argument('--token-label', help=\"Label of PKCS#11 token to use. (default: None) \")",
          "30: parser.add_argument('--slot-id', help=\"Slot ID containing PKCS#11 token to use. (default: None)\")",
          "31: parser.add_argument('--key-label', help=\"Label of private key on the PKCS#11 token. (default: None)\")",
          "32: parser.add_argument('--root-ca', help=\"File path to root certificate authority, in PEM format. (default: None)\")",
          "33: parser.add_argument('--client-id', default=\"test-\" + str(uuid4()),",
          "34:                     help=\"Client ID for MQTT connection. (default: 'test-*')\")",
          "35: parser.add_argument('--topic', default=\"test/topic\",",
          "36:                     help=\"Topic to subscribe to, and publish messages to. (default: 'test/topic')\")",
          "37: parser.add_argument('--message', default=\"Hello World!\",",
          "38:                     help=\"Message to publish. Specify empty string to publish nothing. (default: 'Hello World!')\")",
          "39: parser.add_argument('--count', default=10, type=int, help=\"Number of messages to publish/receive before exiting. \" +",
          "40:                                                           \"Specify 0 to run forever. (default: 10)\")",
          "41: parser.add_argument('--verbosity', choices=[x.name for x in io.LogLevel], default=io.LogLevel.NoLogs.name,",
          "42:                     help=\"Logging level. (default: 'NoLogs')\")",
          "44: # Using globals to simplify sample code",
          "45: args = parser.parse_args()",
          "47: io.init_logging(getattr(io.LogLevel, args.verbosity), 'stderr')",
          "49: received_count = 0",
          "50: received_all_event = threading.Event()",
          "53: def on_connection_interrupted(connection, error, **kwargs):",
          "54:     # Callback when connection is accidentally lost.",
          "55:     print(\"Connection interrupted. error: {}\".format(error))",
          "58: def on_connection_resumed(connection, return_code, session_present, **kwargs):",
          "59:     # Callback when an interrupted connection is re-established.",
          "60:     print(\"Connection resumed. return_code: {} session_present: {}\".format(return_code, session_present))",
          "63: # Callback when the subscribed topic receives a message",
          "64: def on_message_received(topic, payload, dup, qos, retain, **kwargs):",
          "65:     print(\"Received message from topic '{}': {}\".format(topic, payload))",
          "66:     global received_count",
          "67:     received_count += 1",
          "68:     if received_count == args.count:",
          "69:         received_all_event.set()",
          "72: if __name__ == '__main__':",
          "73:     # Spin up resources",
          "74:     event_loop_group = io.EventLoopGroup(1)",
          "75:     host_resolver = io.DefaultHostResolver(event_loop_group)",
          "76:     client_bootstrap = io.ClientBootstrap(event_loop_group, host_resolver)",
          "78:     print(f\"Loading PKCS#11 library '{args.pkcs11_lib}' ...\")",
          "79:     pkcs11_lib = io.Pkcs11Lib(",
          "80:         file=args.pkcs11_lib,",
          "81:         behavior=io.Pkcs11Lib.InitializeFinalizeBehavior.STRICT)",
          "82:     print(\"Loaded!\")",
          "84:     # Create MQTT connection",
          "85:     mqtt_connection = mqtt_connection_builder.mtls_with_pkcs11(",
          "86:         pkcs11_lib=pkcs11_lib,",
          "87:         user_pin=args.pin,",
          "88:         slot_id=int(args.slot_id) if args.slot_id else None,",
          "89:         token_label=args.token_label,",
          "90:         private_key_label=args.key_label,",
          "91:         cert_filepath=args.cert,",
          "92:         endpoint=args.endpoint,",
          "93:         port=args.port,",
          "94:         client_bootstrap=client_bootstrap,",
          "95:         ca_filepath=args.root_ca,",
          "96:         on_connection_interrupted=on_connection_interrupted,",
          "97:         on_connection_resumed=on_connection_resumed,",
          "98:         client_id=args.client_id,",
          "99:         clean_session=False,",
          "100:         keep_alive_secs=30)",
          "102:     print(\"Connecting to {} with client ID '{}'...\".format(",
          "103:         args.endpoint, args.client_id))",
          "105:     connect_future = mqtt_connection.connect()",
          "107:     # Future.result() waits until a result is available",
          "108:     connect_future.result()",
          "109:     print(\"Connected!\")",
          "111:     # Subscribe",
          "112:     print(\"Subscribing to topic '{}'...\".format(args.topic))",
          "113:     subscribe_future, packet_id = mqtt_connection.subscribe(",
          "114:         topic=args.topic,",
          "115:         qos=mqtt.QoS.AT_LEAST_ONCE,",
          "116:         callback=on_message_received)",
          "118:     subscribe_result = subscribe_future.result()",
          "119:     print(\"Subscribed with {}\".format(str(subscribe_result['qos'])))",
          "121:     # Publish message to server desired number of times.",
          "122:     # This step is skipped if message is blank.",
          "123:     # This step loops forever if count was set to 0.",
          "124:     if args.message:",
          "125:         if args.count == 0:",
          "126:             print(\"Sending messages until program killed\")",
          "127:         else:",
          "128:             print(\"Sending {} message(s)\".format(args.count))",
          "130:         publish_count = 1",
          "131:         while (publish_count <= args.count) or (args.count == 0):",
          "132:             message = \"{} [{}]\".format(args.message, publish_count)",
          "133:             print(\"Publishing message to topic '{}': {}\".format(args.topic, message))",
          "134:             message_json = json.dumps(message)",
          "135:             mqtt_connection.publish(",
          "136:                 topic=args.topic,",
          "137:                 payload=message_json,",
          "138:                 qos=mqtt.QoS.AT_LEAST_ONCE)",
          "139:             time.sleep(1)",
          "140:             publish_count += 1",
          "142:     # Wait for all messages to be received.",
          "143:     # This waits forever if count was set to 0.",
          "144:     if args.count != 0 and not received_all_event.is_set():",
          "145:         print(\"Waiting for all messages to be received...\")",
          "147:     received_all_event.wait()",
          "148:     print(\"{} message(s) received.\".format(received_count))",
          "150:     # Disconnect",
          "151:     print(\"Disconnecting...\")",
          "152:     disconnect_future = mqtt_connection.disconnect()",
          "153:     disconnect_future.result()",
          "154:     print(\"Disconnected!\")",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.12.1',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.13.0',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c2c6d8a47fea733749f23b87328454db177d6b2",
      "candidate_info": {
        "commit_hash": "9c2c6d8a47fea733749f23b87328454db177d6b2",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/9c2c6d8a47fea733749f23b87328454db177d6b2",
        "files": [
          "setup.py"
        ],
        "message": "further awscrt bump for arm64 support (#322)",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         \"Operating System :: OS Independent\",",
          "41:     ],",
          "42:     install_requires=[",
          "44:     ],",
          "45:     python_requires='>=3.6',",
          "46: )",
          "",
          "[Removed Lines]",
          "43:         'awscrt==0.13.11',",
          "",
          "[Added Lines]",
          "43:         'awscrt==0.13.13',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4c66229b972519ca083517afb1cfa7a6788a4019",
      "candidate_info": {
        "commit_hash": "4c66229b972519ca083517afb1cfa7a6788a4019",
        "repo": "aws/aws-iot-device-sdk-python-v2",
        "commit_url": "https://github.com/aws/aws-iot-device-sdk-python-v2/commit/4c66229b972519ca083517afb1cfa7a6788a4019",
        "files": [
          "NOTICE",
          "README.md",
          "awsiot/__init__.py",
          "awsiot/greengrass_discovery.py",
          "builder.json",
          "docsrc/conf.py",
          "docsrc/index.rst",
          "samples/README.md",
          "samples/fleetprovisioning.py",
          "samples/jobs.py",
          "samples/pubsub.py",
          "samples/shadow.py",
          "setup.py",
          "test/test_samples.py",
          "utils/parse_cert_set_result.py"
        ],
        "message": "Remove support for python 2 (#105)\n\nPython 2's end-of-life date was Jan 1 2020.",
        "before_after_code_files": [
          "awsiot/__init__.py||awsiot/__init__.py",
          "awsiot/greengrass_discovery.py||awsiot/greengrass_discovery.py",
          "docsrc/conf.py||docsrc/conf.py",
          "samples/fleetprovisioning.py||samples/fleetprovisioning.py",
          "samples/jobs.py||samples/jobs.py",
          "samples/pubsub.py||samples/pubsub.py",
          "samples/shadow.py||samples/shadow.py",
          "setup.py||setup.py",
          "test/test_samples.py||test/test_samples.py",
          "utils/parse_cert_set_result.py||utils/parse_cert_set_result.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "setup.py||setup.py"
          ],
          "candidate": [
            "setup.py||setup.py"
          ]
        }
      },
      "candidate_diff": {
        "awsiot/__init__.py||awsiot/__init__.py": [
          "File: awsiot/__init__.py -> awsiot/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: PayloadObj = Dict[str, Any]",
          "20: PayloadToClassFn = Callable[[PayloadObj], T]",
          "23:     \"\"\"",
          "24:     Base class for an AWS MQTT Service Client",
          "25:     \"\"\"",
          "",
          "[Removed Lines]",
          "22: class MqttServiceClient(object):",
          "",
          "[Added Lines]",
          "22: class MqttServiceClient:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:         return future, topic",
          "157:     \"\"\"",
          "158:     Base for input/output classes generated from an AWS service model.",
          "159:     \"\"\"",
          "",
          "[Removed Lines]",
          "156: class ModeledClass(object):",
          "",
          "[Added Lines]",
          "156: class ModeledClass:",
          "",
          "---------------"
        ],
        "awsiot/greengrass_discovery.py||awsiot/greengrass_discovery.py": [
          "File: awsiot/greengrass_discovery.py -> awsiot/greengrass_discovery.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from concurrent.futures import Future",
          "8: import json",
          "11:     __slots__ = ['_bootstrap', '_tls_context', '_socket_options', '_region', '_tls_connection_options', '_gg_server_name', 'gg_url', 'port']",
          "13:     def __init__(self, bootstrap, socket_options, tls_context, region):",
          "",
          "[Removed Lines]",
          "10: class DiscoveryClient(object):",
          "",
          "[Added Lines]",
          "10: class DiscoveryClient:",
          "",
          "---------------"
        ],
        "docsrc/conf.py||docsrc/conf.py": [
          "File: docsrc/conf.py -> docsrc/conf.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: # -- Project information -----------------------------------------------------",
          "23: copyright = '%s, Amazon Web Services, Inc' % datetime.now().year",
          "24: author = 'Amazon Web Services, Inc'",
          "",
          "[Removed Lines]",
          "22: project = 'AWS IoT Device SDK Python v2'",
          "",
          "[Added Lines]",
          "22: project = 'AWS IoT Device SDK v2 for Python'",
          "",
          "---------------"
        ],
        "samples/fleetprovisioning.py||samples/fleetprovisioning.py": [
          "File: samples/fleetprovisioning.py -> samples/fleetprovisioning.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import auth, http, io, mqtt",
          "8: from awsiot import iotidentity",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: createCertificateFromCsrResponse = None",
          "64: registerThingResponse = None",
          "67:     def __init__(self):",
          "68:         self.lock = threading.Lock()",
          "69:         self.disconnect_called = False",
          "",
          "[Removed Lines]",
          "66: class LockedData(object):",
          "",
          "[Added Lines]",
          "64: class LockedData:",
          "",
          "---------------"
        ],
        "samples/jobs.py||samples/jobs.py": [
          "File: samples/jobs.py -> samples/jobs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import auth, http, io, mqtt",
          "8: from awsiot import iotjobs",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: jobs_client = None",
          "65: thing_name = \"\"",
          "68:     def __init__(self):",
          "69:         self.lock = threading.Lock()",
          "70:         self.disconnect_called = False",
          "",
          "[Removed Lines]",
          "67: class LockedData(object):",
          "",
          "[Added Lines]",
          "65: class LockedData:",
          "",
          "---------------"
        ],
        "samples/pubsub.py||samples/pubsub.py": [
          "File: samples/pubsub.py -> samples/pubsub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import io, mqtt, auth, http",
          "8: from awsiot import mqtt_connection_builder",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "samples/shadow.py||samples/shadow.py": [
          "File: samples/shadow.py -> samples/shadow.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "6: import argparse",
          "7: from awscrt import auth, io, mqtt, http",
          "8: from awsiot import iotshadow",
          "",
          "[Removed Lines]",
          "4: from __future__ import absolute_import",
          "5: from __future__ import print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65: SHADOW_VALUE_DEFAULT = \"off\"",
          "68:     def __init__(self):",
          "69:         self.lock = threading.Lock()",
          "70:         self.shadow_value = None",
          "",
          "[Removed Lines]",
          "67: class LockedData(object):",
          "",
          "[Added Lines]",
          "65: class LockedData:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:     while True:",
          "208:         try:",
          "209:             # Read user input",
          "215:             # If user wants to quit sample, then quit.",
          "216:             # Otherwise change the shadow value.",
          "",
          "[Removed Lines]",
          "210:             try:",
          "211:                 new_value = raw_input() # python 2 only",
          "212:             except NameError:",
          "213:                 new_value = input() # python 3 only",
          "",
          "[Added Lines]",
          "208:             new_value = input()",
          "",
          "---------------"
        ],
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     description='AWS IoT SDK based on the AWS Common Runtime',",
          "12:     author='AWS SDK Common Runtime Team',",
          "13:     url='https://github.com/aws/aws-iot-device-sdk-python-v2',",
          "15:     install_requires=[",
          "19:     ],",
          "21: )",
          "",
          "[Removed Lines]",
          "14:     packages = ['awsiot'],",
          "16:         'awscrt==0.8.0',",
          "17:         'futures;python_version<\"3.2\"',",
          "18:         'typing;python_version<\"3.5\"',",
          "20:     python_requires='>=2.7',",
          "",
          "[Added Lines]",
          "14:     packages=['awsiot'],",
          "16:         'awscrt==0.9.0',",
          "18:     python_requires='>=3.5',",
          "",
          "---------------"
        ],
        "test/test_samples.py||test/test_samples.py": [
          "File: test/test_samples.py -> test/test_samples.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.",
          "2: # SPDX-License-Identifier: Apache-2.0.",
          "4: import awsiot",
          "5: import boto3",
          "6: import botocore.exceptions",
          "",
          "[Removed Lines]",
          "3: from __future__ import absolute_import, print_function",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:         # boto3 caches the HTTPS connection for the API calls, which appears to the unit test",
          "45:         # framework as a leak, so ignore it, that's not what we're testing here",
          "51:         try:",
          "52:             secrets = boto3.client('secretsmanager')",
          "",
          "[Removed Lines]",
          "46:         try:",
          "47:             warnings.simplefilter('ignore', ResourceWarning)",
          "48:         except NameError:  # Python 2 has no ResourceWarning",
          "49:             pass",
          "",
          "[Added Lines]",
          "45:         warnings.simplefilter('ignore', ResourceWarning)",
          "",
          "---------------"
        ],
        "utils/parse_cert_set_result.py||utils/parse_cert_set_result.py": [
          "File: utils/parse_cert_set_result.py -> utils/parse_cert_set_result.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: Example usage:",
          "15: \"\"\"",
          "",
          "[Removed Lines]",
          "13: aws iot create-provisioning-claim --template-name <TemplateName> | python parse_cert_set_result.py --path <PathToOutputtedCerts> --filename <Filename>",
          "",
          "[Added Lines]",
          "13: aws iot create-provisioning-claim --template-name <TemplateName> | python3 parse_cert_set_result.py --path <PathToOutputtedCerts> --filename <Filename>",
          "",
          "---------------"
        ]
      }
    }
  ]
}