{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cc5a56d63a13cdc33882619a04e0b112e78f9407",
      "candidate_info": {
        "commit_hash": "cc5a56d63a13cdc33882619a04e0b112e78f9407",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/cc5a56d63a13cdc33882619a04e0b112e78f9407",
        "files": [
          "build/bin/kylin-port-replace-util.sh",
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-common/src/main/resources/kylin-defaults.properties",
          "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/cachesync/CachedCrudAssist.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java"
        ],
        "message": "KYLIN-5014 fix log and remove unnecessary config server.port (#1668)\n\n* KYLIN-5014 fix log and remove unnecessary config server.port\n\n* fix",
        "before_after_code_files": [
          "build/bin/kylin-port-replace-util.sh||build/bin/kylin-port-replace-util.sh",
          "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "core-common/src/main/resources/kylin-defaults.properties||core-common/src/main/resources/kylin-defaults.properties",
          "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java||core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/cachesync/CachedCrudAssist.java||core-metadata/src/main/java/org/apache/kylin/metadata/cachesync/CachedCrudAssist.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java",
          "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ],
          "candidate": [
            "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java"
          ]
        }
      },
      "candidate_diff": {
        "build/bin/kylin-port-replace-util.sh||build/bin/kylin-port-replace-util.sh": [
          "File: build/bin/kylin-port-replace-util.sh -> build/bin/kylin-port-replace-util.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     sed -i \"s/^kylin\\.stream\\.node=.*$/$stream_node/g\" ${KYLIN_CONFIG_FILE}",
          "98:     sed -i \"s/#*kylin.server.cluster-servers=\\(.*\\).*:\\(.*\\)/kylin.server.cluster-servers=\\1:${new_kylin_port}/g\" ${KYLIN_CONFIG_FILE}",
          "101:     echo \"New kylin port is : ${new_kylin_port}\"",
          "",
          "[Removed Lines]",
          "99:     sed -i \"s/#*server.port=.*$/server.port=${new_kylin_port}/g\" ${KYLIN_CONFIG_FILE}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "474:         return getMetadataUrl().getIdentifier();",
          "475:     }",
          "481:     public Map<String, String> getResourceStoreImpls() {",
          "482:         Map<String, String> r = Maps.newLinkedHashMap();",
          "",
          "[Removed Lines]",
          "477:     public String getServerPort() {",
          "478:         return getOptional(\"server.port\", \"7070\");",
          "479:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2951:         try {",
          "2953:             if (!isLocal) {",
          "2955:                         \"spark-executor-log4j.properties\");",
          "2959:                 }",
          "2960:             }",
          "2963:         } catch (IOException e) {",
          "2964:             return \"\";",
          "2965:         }",
          "",
          "[Removed Lines]",
          "2950:     public String sparkUploadFiles(boolean isLocal) {",
          "2952:             String path1 = \"\";",
          "2954:                 File storageFile = FileUtils.findFile(KylinConfigBase.getKylinHome() + \"/conf\",",
          "2956:                 if (storageFile != null) {",
          "2957:                     path1 = storageFile.getCanonicalPath();",
          "2962:             return getOptional(\"kylin.query.engine.sparder-additional-files\", path1);",
          "",
          "[Added Lines]",
          "2946:     public String sparkUploadFiles(boolean isLocal, boolean isYarnCluster) {",
          "2948:             String path = \"\";",
          "2950:                 String executorLogPath = \"\";",
          "2951:                 String driverLogPath = \"\";",
          "2952:                 File executorLogFile = FileUtils.findFile(KylinConfigBase.getKylinHome() + \"/conf\",",
          "2954:                 if (executorLogFile != null) {",
          "2955:                     executorLogPath = executorLogFile.getCanonicalPath();",
          "2956:                 }",
          "2957:                 path = executorLogPath;",
          "2958:                 if (isYarnCluster) {",
          "2959:                     File driverLogFile = FileUtils.findFile(KylinConfigBase.getKylinHome() + \"/conf\",",
          "2960:                             \"spark-driver-log4j.properties\");",
          "2961:                     if (driverLogFile != null) {",
          "2962:                         driverLogPath = driverLogFile.getCanonicalPath();",
          "2963:                     }",
          "2964:                     path = executorLogPath + \",\" + driverLogPath;",
          "2968:             return getOptional(\"kylin.query.engine.sparder-additional-files\", path);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2971:     public String sparkUploadFiles() {",
          "2973:     }",
          "2975:     @ConfigTag(ConfigTag.Tag.NOT_CLEAR)",
          "",
          "[Removed Lines]",
          "2972:         return sparkUploadFiles(false);",
          "",
          "[Added Lines]",
          "2978:         return sparkUploadFiles(false, false);",
          "",
          "---------------"
        ],
        "core-common/src/main/resources/kylin-defaults.properties||core-common/src/main/resources/kylin-defaults.properties": [
          "File: core-common/src/main/resources/kylin-defaults.properties -> core-common/src/main/resources/kylin-defaults.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: # Kylin server mode, valid value [all, query, job]",
          "45: kylin.server.mode=all",
          "50: # List of web servers in use, this enables one web server instance to sync up with other servers.",
          "51: kylin.server.cluster-servers=localhost:7070",
          "",
          "[Removed Lines]",
          "47: ## Kylin server port",
          "48: server.port=7070",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java||core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java -> core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:         }",
          "301:     }",
          "304:     public CubeInstance updateCube(CubeUpdate update) throws IOException {",
          "305:         try (AutoLock lock = cubeMapLock.lockForWrite()) {",
          "307:             return cube;",
          "308:         }",
          "309:     }",
          "",
          "[Removed Lines]",
          "306:             CubeInstance cube = updateCubeWithRetry(update, 0);",
          "",
          "[Added Lines]",
          "304:         return updateCube(update, false);",
          "305:     }",
          "308:     public CubeInstance updateCube(CubeUpdate update, boolean isLocal) throws IOException {",
          "310:             CubeInstance cube = updateCubeWithRetry(update, 0, isLocal);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:     }",
          "371:     private CubeInstance updateCubeWithRetry(CubeUpdate update, int retry) throws IOException {",
          "372:         if (update == null || update.getCubeInstance() == null)",
          "373:             throw new IllegalStateException();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:         return updateCubeWithRetry(update, retry, false);",
          "377:     }",
          "379:     private CubeInstance updateCubeWithRetry(CubeUpdate update, int retry, boolean isLocal) throws IOException {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "396:         setCubeMember(cube, update);",
          "398:         try {",
          "400:         } catch (WriteConflictException ise) {",
          "401:             logger.warn(\"Write conflict to update cube {} at try {}, will retry...\", cube.getName(), retry);",
          "402:             if (retry >= 7) {",
          "",
          "[Removed Lines]",
          "399:             cube = crud.save(cube);",
          "",
          "[Added Lines]",
          "407:             cube = crud.save(cube, isLocal);",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/metadata/cachesync/CachedCrudAssist.java||core-metadata/src/main/java/org/apache/kylin/metadata/cachesync/CachedCrudAssist.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/cachesync/CachedCrudAssist.java -> core-metadata/src/main/java/org/apache/kylin/metadata/cachesync/CachedCrudAssist.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:     abstract protected T initEntityAfterReload(T entity, String resourceName);",
          "207:     public T save(T entity) throws IOException {",
          "208:         Preconditions.checkArgument(entity != null);",
          "209:         completeUuidIfNeeded(entity);",
          "210:         Preconditions.checkArgument(entityType.isInstance(entity));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208:         return save(entity, false);",
          "209:     }",
          "211:     public T save(T entity, boolean isLocal) throws IOException {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:         store.checkAndPutResource(path, entity, serializer);",
          "",
          "[Removed Lines]",
          "228:         cache.put(resName, entity);",
          "",
          "[Added Lines]",
          "232:         if (isLocal) {",
          "233:             cache.putLocal(resName, entity);",
          "234:         } else {",
          "235:             cache.put(resName, entity);",
          "236:         }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java -> kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     public void execute(String[] args) {",
          "84:         Path path = new Path(args[0]);",
          "85:         try (",
          "90:         ) {",
          "91:             String argsLine = bufferedReader.readLine();",
          "92:             if (argsLine.isEmpty()) {",
          "93:                 throw new RuntimeException(\"Args file is empty\");",
          "",
          "[Removed Lines]",
          "86:                 FileSystem fileSystem = FileSystem.get(path.toUri(), HadoopUtil.getCurrentConfiguration());",
          "87:                 FSDataInputStream inputStream = fileSystem.open(path);",
          "88:                 InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);",
          "89:                 BufferedReader bufferedReader = new BufferedReader(inputStreamReader);",
          "",
          "[Added Lines]",
          "85:         FileSystem fs = HadoopUtil.getFileSystem(path);",
          "87:                 FSDataInputStream inputStream = fs.open(path);",
          "88:                 InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8)",
          "90:             BufferedReader bufferedReader = new BufferedReader(inputStreamReader);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:     public Boolean updateSparkJobInfo(String url, String json) {",
          "146:         try {",
          "147:             DefaultHttpClient httpClient = new DefaultHttpClient();",
          "",
          "[Removed Lines]",
          "142:         String serverIp = System.getProperty(\"spark.driver.rest.server.ip\", \"127.0.0.1\");",
          "143:         String port = System.getProperty(\"spark.driver.rest.server.port\", \"7070\");",
          "144:         String requestApi = String.format(Locale.ROOT, \"http://%s:%s\" + url, serverIp, port);",
          "",
          "[Added Lines]",
          "142:         String serverAddress = System.getProperty(\"spark.driver.rest.server.address\", \"127.0.0.1:7070\");",
          "143:         String requestApi = String.format(Locale.ROOT, \"http://%s%s\", serverAddress, url);",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java -> kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.File;",
          "23: import java.io.IOException;",
          "27: import java.nio.file.Files;",
          "28: import java.nio.file.Paths;",
          "29: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "25: import java.net.InetAddress;",
          "26: import java.net.UnknownHostException;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:     private static final Logger logger = LoggerFactory.getLogger(NSparkExecutable.class);",
          "83:     protected void setSparkSubmitClassName(String className) {",
          "84:         this.setParam(MetadataConstants.P_CLASS_NAME, className);",
          "85:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:     protected static final String SPARK_MASTER = \"spark.master\";",
          "82:     protected static final String DEPLOY_MODE = \"spark.submit.deployMode\";",
          "83:     private static final String APP_JAR_NAME = \"__app__.jar\";",
          "85:     private volatile boolean isYarnCluster = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "173:             String pathName = getId() + \"_\" + MetadataConstants.P_JOB_ID;",
          "174:             Path tgtPath = new Path(getConfig().getJobTmpDir(getParams().get(\"project\")), pathName);",
          "175:             FileSystem fileSystem = FileSystem.get(tgtPath.toUri(), HadoopUtil.getCurrentConfiguration());",
          "177:                 outputStream.write(JsonUtil.writeValueAsBytes(getParams()));",
          "178:             }",
          "",
          "[Removed Lines]",
          "176:             try (BufferedOutputStream outputStream = new BufferedOutputStream(fileSystem.create(tgtPath, false))) {",
          "",
          "[Added Lines]",
          "180:             try (BufferedOutputStream outputStream = new BufferedOutputStream(fileSystem.create(tgtPath))) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290:     protected Map<String, String> getSparkConfigOverride(KylinConfig config) {",
          "291:         Map<String, String> sparkConfigOverride = config.getSparkConfigOverride();",
          "292:         if (!sparkConfigOverride.containsKey(\"spark.driver.memory\")) {",
          "293:             sparkConfigOverride.put(\"spark.driver.memory\", computeStepDriverMemory() + \"m\");",
          "294:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296:         if (\"yarn\".equals(sparkConfigOverride.get(SPARK_MASTER))",
          "297:                 && \"cluster\".equals(sparkConfigOverride.get(DEPLOY_MODE)) && !(this instanceof NSparkLocalStep)) {",
          "298:             this.isYarnCluster = true;",
          "299:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "325:         if (sparkConfigOverride.containsKey(sparkDriverExtraJavaOptionsKey)) {",
          "326:             sb.append(sparkConfigOverride.get(sparkDriverExtraJavaOptionsKey));",
          "327:         }",
          "335:         String hdfsWorkingDir = config.getHdfsWorkingDirectory();",
          "337:         String sparkDriverHdfsLogPath = null;",
          "",
          "[Removed Lines]",
          "328:         String serverIp = \"127.0.0.1\";",
          "329:         try {",
          "330:             serverIp = InetAddress.getLocalHost().getHostAddress();",
          "331:         } catch (UnknownHostException e) {",
          "332:             logger.warn(\"use the InetAddress get local ip failed!\", e);",
          "333:         }",
          "334:         String serverPort = config.getServerPort();",
          "",
          "[Added Lines]",
          "336:         String serverAddress = config.getServerRestAddress();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "342:             }",
          "343:         }",
          "347:         sb.append(String.format(Locale.ROOT, \" -Dkylin.kerberos.enabled=%s \", config.isKerberosEnabled()));",
          "348:         if (config.isKerberosEnabled()) {",
          "349:             sb.append(String.format(Locale.ROOT, \" -Dkylin.kerberos.principal=%s \", config.getKerberosPrincipal()));",
          "",
          "[Removed Lines]",
          "345:         String log4jConfiguration = \"file:\" + config.getLogSparkDriverPropertiesFile();",
          "346:         sb.append(String.format(Locale.ROOT, \" -Dlog4j.configuration=%s \", log4jConfiguration));",
          "",
          "[Added Lines]",
          "347:         wrapLog4jConf(sb, config);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "356:         sb.append(String.format(Locale.ROOT, \" -Dkylin.hdfs.working.dir=%s \", hdfsWorkingDir));",
          "357:         sb.append(String.format(Locale.ROOT, \" -Dspark.driver.log4j.appender.hdfs.File=%s \", sparkDriverHdfsLogPath));",
          "358:         sb.append(String.format(Locale.ROOT, \" -Dlog4j.debug=%s \", \"true\"));",
          "361:         sb.append(String.format(Locale.ROOT, \" -Dspark.driver.param.taskId=%s \", getId()));",
          "362:         sb.append(String.format(Locale.ROOT, \" -Dspark.driver.local.logDir=%s \", config.getKylinLogDir() + \"/spark\"));",
          "363:         sparkConfigOverride.put(sparkDriverExtraJavaOptionsKey, sb.toString());",
          "",
          "[Removed Lines]",
          "359:         sb.append(String.format(Locale.ROOT, \" -Dspark.driver.rest.server.ip=%s \", serverIp));",
          "360:         sb.append(String.format(Locale.ROOT, \" -Dspark.driver.rest.server.port=%s \", serverPort));",
          "",
          "[Added Lines]",
          "360:         sb.append(String.format(Locale.ROOT, \" -Dspark.driver.rest.server.address=%s \", serverAddress));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "378:         if (!isLocalMaster(sparkConfs)) {",
          "379:             appendSparkConf(sb, \"spark.executor.extraClassPath\", Paths.get(kylinJobJar).getFileName().toString());",
          "380:         }",
          "383:         if (sparkConfs.containsKey(\"spark.sql.hive.metastore.jars\")) {",
          "384:             jars = jars + \",\" + sparkConfs.get(\"spark.sql.hive.metastore.jars\");",
          "385:         }",
          "387:         if (StringUtils.isNotBlank(sparkUploadFiles)) {",
          "388:             sb.append(\"--files \").append(sparkUploadFiles).append(\" \");",
          "389:         }",
          "",
          "[Removed Lines]",
          "381:         appendSparkConf(sb, \"spark.driver.extraClassPath\", kylinJobJar);",
          "386:         String sparkUploadFiles = config.sparkUploadFiles(isLocalMaster(sparkConfs));",
          "",
          "[Added Lines]",
          "382:         appendSparkConf(sb, \"spark.driver.extraClassPath\", isYarnCluster ? //",
          "383:                 String.format(Locale.ROOT, \"%s:%s\", APP_JAR_NAME,",
          "384:                         Paths.get(kylinJobJar).getFileName().toString()) : kylinJobJar);",
          "389:         String sparkUploadFiles = config.sparkUploadFiles(isLocalMaster(sparkConfs), isYarnCluster);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "391:             sb.append(\"--principal \").append(config.getKerberosPrincipal()).append(\" \");",
          "392:             sb.append(\"--keytab \").append(config.getKerberosKeytabPath()).append(\" \");",
          "393:         }",
          "394:         sb.append(\"--name job_step_%s \");",
          "395:         sb.append(\"--jars %s %s %s\");",
          "396:         String cmd = String.format(Locale.ROOT, sb.toString(), hadoopConf, sparkSubmitCmd, getId(), jars, kylinJobJar,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397:         if (isYarnCluster) {",
          "398:             final String aliasedJar = String.format(Locale.ROOT, \"%s#%s\", kylinJobJar, //",
          "399:                     Paths.get(kylinJobJar).getFileName().toString());",
          "401:             if (StringUtils.isBlank(jars) || jars.equals(kylinJobJar)) {",
          "402:                 jars = aliasedJar;",
          "403:             } else if (jars.contains(kylinJobJar)) {",
          "404:                 jars = jars.replace(kylinJobJar, aliasedJar);",
          "405:             } else {",
          "406:                 jars = String.format(Locale.ROOT, \"%s,%s\", jars, aliasedJar);",
          "407:             }",
          "408:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "400:         return cmd;",
          "401:     }",
          "403:     protected void appendSparkConf(StringBuilder sb, String key, String value) {",
          "405:         sb.append(\" --conf '\").append(key).append(\"=\").append(value.trim()).append(\"' \");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "419:     private void wrapLog4jConf(StringBuilder sb, KylinConfig config) {",
          "420:         final String localLog4j = config.getLogSparkDriverPropertiesFile();",
          "421:         final String log4jName = Paths.get(localLog4j).getFileName().toString();",
          "422:         if (isYarnCluster) {",
          "423:             sb.append(String.format(Locale.ROOT, \" -Dlog4j.configuration=%s \", log4jName));",
          "424:         } else {",
          "425:             sb.append(String.format(Locale.ROOT, \" -Dlog4j.configuration=file:%s \", localLog4j));",
          "426:         }",
          "427:     }",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java -> kylin-spark-project/kylin-spark-engine/src/main/java/org/apache/kylin/engine/spark/job/OptimizeBuildJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:         optSeg.setAdditionalInfo(additionalInfo);",
          "215:         cubeSegments.add(optSeg);",
          "216:         update.setToUpdateSegs(cubeSegments.toArray(new CubeSegment[0]));",
          "218:     }",
          "220:     private void build(Collection<NBuildSourceInfo> buildSourceInfos, SegmentInfo seg, SpanningTree st) {",
          "",
          "[Removed Lines]",
          "217:         cubeManager.updateCube(update);",
          "",
          "[Added Lines]",
          "217:         cubeManager.updateCube(update, true);",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:         segment.setAdditionalInfo(additionalInfo);",
          "263:         cubeSegments.add(segment);",
          "264:         update.setToUpdateSegs(cubeSegments.toArray(new CubeSegment[0]));",
          "266:     }",
          "268:     private void collectPersistedTablePath(List<String> persistedFlatTable, ParentSourceChooser sourceChooser) {",
          "",
          "[Removed Lines]",
          "265:         cubeManager.updateCube(update);",
          "",
          "[Added Lines]",
          "265:         cubeManager.updateCube(update, true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "292:         }",
          "293:         if (!cubeSegments.isEmpty()) {",
          "294:             update.setToUpdateSegs(cubeSegments.toArray(new CubeSegment[0]));",
          "296:         }",
          "297:     }",
          "",
          "[Removed Lines]",
          "295:             cubeManager.updateCube(update);",
          "",
          "[Added Lines]",
          "295:             cubeManager.updateCube(update, true);",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeMergeJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:         segment.setAdditionalInfo(additionalInfo);",
          "229:         cubeSegments.add(segment);",
          "230:         update.setToUpdateSegs(cubeSegments.toArray(new CubeSegment[0]));",
          "232:     }",
          "234:     @Override",
          "",
          "[Removed Lines]",
          "231:         cubeManager.updateCube(update);",
          "",
          "[Added Lines]",
          "231:         cubeManager.updateCube(update, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f82397d941a318d0dddf475ebf4b171de859b2ae",
      "candidate_info": {
        "commit_hash": "f82397d941a318d0dddf475ebf4b171de859b2ae",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/f82397d941a318d0dddf475ebf4b171de859b2ae",
        "files": [
          "webapp/app/js/model/projectConfig.js",
          "webapp/app/partials/projects/projects.html"
        ],
        "message": "KYLIN-4716 Optimize the project page\n\n(cherry picked from commit f6278faa24bedc4c6df0050bd518f417baa055ab)",
        "before_after_code_files": [
          "webapp/app/js/model/projectConfig.js||webapp/app/js/model/projectConfig.js",
          "webapp/app/partials/projects/projects.html||webapp/app/partials/projects/projects.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "webapp/app/js/model/projectConfig.js||webapp/app/js/model/projectConfig.js": [
          "File: webapp/app/js/model/projectConfig.js -> webapp/app/js/model/projectConfig.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     {attr: 'name', name: 'Name'},",
          "22:     {attr: 'owner', name: 'Owner'},",
          "23:     {attr: 'description', name: 'Description'},",
          "25:     {attr: 'create_time_utc', name: 'Create Time'}",
          "26:   ]",
          "",
          "[Removed Lines]",
          "24:     {attr: 'realizations.length', name: '#Cubes'},",
          "",
          "[Added Lines]",
          "24:     {attr: 'realizations.length', name: 'Cubes'},",
          "",
          "---------------"
        ],
        "webapp/app/partials/projects/projects.html||webapp/app/partials/projects/projects.html": [
          "File: webapp/app/partials/projects/projects.html -> webapp/app/partials/projects/projects.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         </thead>",
          "49:         <tbody ng-repeat=\"project in projects | orderObjectBy:state.filterAttr:state.filterReverse\">",
          "52:                     <i ng-show=\"!project.showDetail\" class=\"fa fa-chevron-circle-right blue\"></i>",
          "53:                     <i ng-show=\"project.showDetail\" class=\"fa fa-chevron-circle-down blue\"></i>",
          "54:                     {{ project.name}}",
          "",
          "[Removed Lines]",
          "50:             <tr ng-class=\"{accordion:true}\" style=\"cursor: pointer\">",
          "51:                 <td  ng-click=\"project.showDetail=!project.showDetail;\">",
          "",
          "[Added Lines]",
          "50:             <tr ng-class=\"{accordion:true}\" style=\"cursor: pointer\" ng-click=\"project.showDetail=!project.showDetail;\">",
          "51:                 <td>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9cd81a0b1710913af469b04d44f3451d6a87f0c",
      "candidate_info": {
        "commit_hash": "b9cd81a0b1710913af469b04d44f3451d6a87f0c",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/b9cd81a0b1710913af469b04d44f3451d6a87f0c",
        "files": [
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala",
          "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBadQueryAndPushDownTest.java"
        ],
        "message": "KYLIN-4892 Reduce the times of fetching files status from HDFS Namenode in FilePruner\n\n(cherry picked from commit 6e4d94d1c027d5877eb3013f37ef223aa0532cc2)\n(cherry picked from commit edebb98ca33e1f3ddf000842f12d0bff45109c57)",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala",
          "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala",
          "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBadQueryAndPushDownTest.java||kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBadQueryAndPushDownTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala||kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala": [
          "File: kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala -> kylin-spark-project/kylin-spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   if (numShards <= 0) {",
          "60:     throw new AnalysisException(",
          "",
          "[Removed Lines]",
          "54: case class ShardSpec(",
          "55:                       numShards: Int,",
          "56:                       shardColumnNames: Seq[String],",
          "57:                       sortColumnNames: Seq[String]) {",
          "",
          "[Added Lines]",
          "54: case class ShardSpec(numShards: Int,",
          "55:                      shardColumnNames: Seq[String],",
          "56:                      sortColumnNames: Seq[String]) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   }",
          "73: }",
          "80:   extends FileIndex with ResetShufflePartition with Logging {",
          "82:   private lazy val segmentDirs: Seq[SegmentDirectory] = {",
          "83:     cubeInstance.getSegments.asScala",
          "84:       .filter(_.getStatus.equals(SegmentStatusEnum.READY)).map(seg => {",
          "97:   }",
          "99:   val layoutEntity = MetadataConverter.toLayoutEntity(cubeInstance, cuboid)",
          "",
          "[Removed Lines]",
          "75: class FilePruner(",
          "76:                   cubeInstance: CubeInstance,",
          "77:                   cuboid: Cuboid,",
          "78:                   val session: SparkSession,",
          "79:                   val options: Map[String, String])",
          "85:       val segName = seg.getName",
          "86:       val path = PathManager.getParquetStoragePath(cubeInstance, segName, seg.getStorageLocationIdentifier, layoutEntity.getId)",
          "87:       val files = new InMemoryFileIndex(session,",
          "88:         Seq(new Path(path)),",
          "89:         options,",
          "90:         Some(dataSchema),",
          "91:         FileStatusCache.getOrCreate(session))",
          "92:         .listFiles(Nil, Nil)",
          "93:         .flatMap(_.files)",
          "94:         .filter(_.isFile)",
          "95:       SegmentDirectory(segName, seg.getStorageLocationIdentifier, files)",
          "96:     }).filter(_.files.nonEmpty)",
          "",
          "[Added Lines]",
          "74: class FilePruner(cubeInstance: CubeInstance,",
          "75:                  cuboid: Cuboid,",
          "76:                  val session: SparkSession,",
          "77:                  val options: Map[String, String])",
          "83:       SegmentDirectory(seg.getName, seg.getStorageLocationIdentifier, Nil)",
          "84:     })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:       .map { column => StructField(column.id.toString, column.dataType) }",
          "104:       .toSeq ++",
          "105:       layoutEntity.getOrderedMeasures.asScala",
          "107:         .toSeq)",
          "108:   }",
          "",
          "[Removed Lines]",
          "106:         .map { entry => StructField(entry._1.toString, SparkTypeUtil.generateFunctionReturnDataType(entry._2)) }",
          "",
          "[Added Lines]",
          "94:         .map { entry =>",
          "95:           StructField(entry._1.toString, SparkTypeUtil.generateFunctionReturnDataType(entry._2)) }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "130:         val ref = desc.getPartitionDateColumnRef",
          "134:         if (id.isDefined && (ref.getType.isDateTimeFamily || ref.getType.isStringFamily)) {",
          "135:           pattern = desc.getPartitionDateFormat",
          "136:           dataSchema.filter(_.name == String.valueOf(id.get.id))",
          "",
          "[Removed Lines]",
          "133:         val id = layoutEntity.getOrderedDimensions.asScala.values.find(column => column.columnName.equals(ref.getName))",
          "",
          "[Added Lines]",
          "121:         val id = layoutEntity.getOrderedDimensions.asScala.values.find(",
          "122:           column => column.columnName.equals(ref.getName))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209:   var cached = new java.util.HashMap[(Seq[Expression], Seq[Expression]), Seq[PartitionDirectory]]()",
          "212:     if (cached.containsKey((partitionFilters, dataFilters))) {",
          "213:       return cached.get((partitionFilters, dataFilters))",
          "214:     }",
          "216:     require(isResolved)",
          "217:     val timePartitionFilters = getSpecFilter(dataFilters, timePartitionColumn)",
          "218:     logInfo(s\"Applying time partition filters: ${timePartitionFilters.mkString(\",\")}\")",
          "",
          "[Removed Lines]",
          "211:   override def listFiles(partitionFilters: Seq[Expression], dataFilters: Seq[Expression]): Seq[PartitionDirectory] = {",
          "",
          "[Added Lines]",
          "200:   private def getFileStatusBySeg(seg: SegmentDirectory, fsc: FileStatusCache): SegmentDirectory = {",
          "201:     val path = new Path(toPath(seg.segmentName, seg.identifier))",
          "202:     val fs = path.getFileSystem(session.sparkContext.hadoopConfiguration)",
          "203:     if (fs.isDirectory(path) && fs.exists(path)) {",
          "204:       val maybeStatuses = fsc.getLeafFiles(path)",
          "205:       if (maybeStatuses.isDefined) {",
          "206:         SegmentDirectory(seg.segmentName, seg.identifier, maybeStatuses.get)",
          "207:       } else {",
          "208:         val statuses = fs.listStatus(path)",
          "209:         fsc.putLeafFiles(path, statuses)",
          "210:         SegmentDirectory(seg.segmentName, seg.identifier, statuses)",
          "211:       }",
          "212:     } else {",
          "213:       logWarning(s\"Segment path ${path.toString} not exists.\")",
          "214:       SegmentDirectory(seg.segmentName, seg.identifier, Nil)",
          "215:     }",
          "216:   }",
          "218:   override def listFiles(partitionFilters: Seq[Expression],",
          "219:                          dataFilters: Seq[Expression]): Seq[PartitionDirectory] = {",
          "225:     val startTime = System.nanoTime",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "223:     var selected = afterPruning(\"segment\", timePartitionFilters, segmentDirs) {",
          "224:       pruneSegments",
          "225:     }",
          "240:     selected = afterPruning(\"shard\", dataFilters, selected) {",
          "241:       pruneShards",
          "",
          "[Removed Lines]",
          "227:     selected = selected.par.map { e =>",
          "228:       val path = new Path(toPath(e.segmentName, e.identifier))",
          "229:       val maybeStatuses = fsc.getLeafFiles(path)",
          "230:       if (maybeStatuses.isDefined) {",
          "231:         SegmentDirectory(e.segmentName, e.identifier, maybeStatuses.get)",
          "232:       } else {",
          "233:         val statuses = path.getFileSystem(session.sparkContext.hadoopConfiguration).listStatus(path)",
          "234:         fsc.putLeafFiles(path, statuses)",
          "235:         SegmentDirectory(e.segmentName, e.identifier, statuses)",
          "236:       }",
          "237:     }.toIterator.toSeq",
          "",
          "[Added Lines]",
          "237:     selected = selected.par.map(seg => {",
          "238:       getFileStatusBySeg(seg, fsc)",
          "239:     }).filter(_.files.nonEmpty).seq",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "246:     val totalFileSize = selected.flatMap(partition => partition.files).map(_.getLen).sum",
          "247:     logInfo(s\"totalFileSize is ${totalFileSize}\")",
          "248:     setShufflePartitions(totalFileSize, session)",
          "249:     if (selected.isEmpty) {",
          "250:       val value = Seq.empty[PartitionDirectory]",
          "251:       cached.put((partitionFilters, dataFilters), value)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     logInfo(s\"Files pruning in ${(System.nanoTime() - startTime).toDouble / 1000000} ms\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255:       cached.put((partitionFilters, dataFilters), value)",
          "256:       value",
          "257:     }",
          "259:   }",
          "263:     if (specFilters.isEmpty) {",
          "264:       inputs",
          "265:     } else {",
          "",
          "[Removed Lines]",
          "261:   private def afterPruning(pruningType: String, specFilters: Seq[Expression], inputs: Seq[SegmentDirectory])",
          "262:                           (pruningFunc: (Seq[Expression], Seq[SegmentDirectory]) => Seq[SegmentDirectory]): Seq[SegmentDirectory] = {",
          "",
          "[Added Lines]",
          "263:   private def afterPruning(pruningType: String, specFilters: Seq[Expression],",
          "264:                            inputs: Seq[SegmentDirectory])",
          "265:                           (pruningFunc: (Seq[Expression], Seq[SegmentDirectory]) =>",
          "266:                             Seq[SegmentDirectory]): Seq[SegmentDirectory] = {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "281:     dataFilters.filter(_.references.subsetOf(AttributeSet(col)))",
          "282:   }",
          "288:     val filteredStatuses = if (filters.isEmpty) {",
          "289:       segDirs",
          "",
          "[Removed Lines]",
          "284:   private def pruneSegments(",
          "285:                              filters: Seq[Expression],",
          "286:                              segDirs: Seq[SegmentDirectory]): Seq[SegmentDirectory] = {",
          "",
          "[Added Lines]",
          "288:   private def pruneSegments(filters: Seq[Expression],",
          "289:                             segDirs: Seq[SegmentDirectory]): Seq[SegmentDirectory] = {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "298:         val pruned = segDirs.filter {",
          "299:           e => {",
          "300:             val tsRange = cubeInstance.getSegment(e.segmentName, SegmentStatusEnum.READY).getTSRange",
          "302:               case Trivial(true) => true",
          "303:               case Trivial(false) => false",
          "304:             }",
          "",
          "[Removed Lines]",
          "301:             SegFilters(tsRange.startValue, tsRange.endValue, pattern).foldFilter(reducedFilter) match {",
          "",
          "[Added Lines]",
          "304:             SegFilters(tsRange.startValue, tsRange.endValue, pattern)",
          "305:               .foldFilter(reducedFilter) match {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "312:   }",
          "314:   private def pruneShards(filters: Seq[Expression],",
          "316:     val filteredStatuses = if (layoutEntity.getShardByColumns.size() != 1) {",
          "317:       segDirs",
          "318:     } else {",
          "",
          "[Removed Lines]",
          "315:                            segDirs: Seq[SegmentDirectory]): Seq[SegmentDirectory] = {",
          "",
          "[Added Lines]",
          "319:                           segDirs: Seq[SegmentDirectory]): Seq[SegmentDirectory] = {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "323:         val partitionNumber = segment.getCuboidShardNum(layoutEntity.getId).toInt",
          "324:         require(partitionNumber > 0, \"Shards num with shard by col should greater than 0.\")",
          "328:         val selected = files.filter(f => {",
          "329:           val partitionId = FilePruner.getPartitionId(f.getPath)",
          "",
          "[Removed Lines]",
          "326:         val bitSet = getExpressionShards(normalizedFiltersAndExpr, shardByColumn.name, partitionNumber)",
          "",
          "[Added Lines]",
          "330:         val bitSet = getExpressionShards(normalizedFiltersAndExpr, shardByColumn.name,",
          "331:           partitionNumber)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "331:         })",
          "332:         SegmentDirectory(segName, segIdentifier, selected)",
          "333:       }",
          "335:       pruned",
          "336:     }",
          "337:     filteredStatuses",
          "",
          "[Removed Lines]",
          "334:       logInfo(s\"Selected files after shards pruning:\" + pruned.flatMap(_.files).map(_.getPath.toString).mkString(\";\"))",
          "",
          "[Added Lines]",
          "339:       logInfo(s\"Selected files after shards pruning:\" + pruned.flatMap(_.files)",
          "340:         .map(_.getPath.toString).mkString(\";\"))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "349:   override def refresh(): Unit = {}",
          "356:     def getShardNumber(attr: Attribute, v: Any): Int = {",
          "357:       BucketingUtils.getBucketIdFromValue(attr, numShards, v)",
          "",
          "[Removed Lines]",
          "351:   private def getExpressionShards(",
          "352:                                    expr: Expression,",
          "353:                                    shardColumnName: String,",
          "354:                                    numShards: Int): BitSet = {",
          "",
          "[Added Lines]",
          "357:   private def getExpressionShards(expr: Expression,",
          "358:                                   shardColumnName: String,",
          "359:                                   numShards: Int): BitSet = {",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala||kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala": [
          "File: kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala -> kylin-spark-project/kylin-spark-query/src/main/scala/org/apache/spark/sql/SparderContext.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.apache.kylin.query.monitor.SparderContextCanary",
          "37: import org.apache.kylin.spark.classloader.ClassLoaderUtils",
          "38: import org.apache.spark.{SparkConf, SparkContext, SparkEnv}",
          "40: import org.apache.spark.sql.metrics.SparderMetricsListener",
          "41: import org.apache.spark.utils.YarnInfoFetcherUtils",
          "",
          "[Removed Lines]",
          "39: import org.apache.spark.sql.execution.datasource.KylinSourceStrategy",
          "",
          "[Added Lines]",
          "39: import org.apache.spark.sql.execution.datasource.{KylinSourceStrategy, ShardFileStatusCache}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:         SparderContextCanary.init()",
          "204:       }",
          "205:     }",
          "206:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:       ShardFileStatusCache.getFileStatusCache(getOriginalSparkSession)",
          "",
          "---------------"
        ],
        "kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBadQueryAndPushDownTest.java||kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBadQueryAndPushDownTest.java": [
          "File: kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBadQueryAndPushDownTest.java -> kylin-spark-project/kylin-spark-test/src/test/java/org/apache/kylin/engine/spark2/NBadQueryAndPushDownTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:     @Test",
          "94:     public void testPushDownForFileNotExist() throws Exception {",
          "96:         KylinConfig.getInstanceFromEnv().setProperty(PUSHDOWN_RUNNER_KEY,",
          "97:                 \"org.apache.kylin.query.pushdown.PushDownRunnerSparkImpl\");",
          "98:         try {",
          "",
          "[Removed Lines]",
          "95:         final String sql = \"select max(price) from test_kylin_fact\";",
          "",
          "[Added Lines]",
          "95:         final String sql = \"select max(ITEM_COUNT) from test_kylin_fact\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38569190b3cbc1432b9f97fc0146a99143e39c50",
      "candidate_info": {
        "commit_hash": "38569190b3cbc1432b9f97fc0146a99143e39c50",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/38569190b3cbc1432b9f97fc0146a99143e39c50",
        "files": [
          "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java",
          "server/src/test/java/org/apache/kylin/rest/controller/CubeControllerTest.java",
          "server/src/test/java/org/apache/kylin/rest/controller/ProjectControllerTest.java",
          "webapp/app/js/controllers/cube.js",
          "webapp/app/js/controllers/projects.js",
          "webapp/app/js/services/cubes.js",
          "webapp/app/js/services/projects.js",
          "webapp/app/partials/cubes/cube_detail.html",
          "webapp/app/partials/projects/project_detail.html"
        ],
        "message": "KYLIN-4551 Provide interfaces to transfer cube/model/project ownership\n\n(cherry picked from commit a603716b4ab5f0fda9509c7c487d22729813d139)",
        "before_after_code_files": [
          "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java||core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java||core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java||server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java||server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java",
          "server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java||server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java||server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java||server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java",
          "server/src/test/java/org/apache/kylin/rest/controller/CubeControllerTest.java||server/src/test/java/org/apache/kylin/rest/controller/CubeControllerTest.java",
          "server/src/test/java/org/apache/kylin/rest/controller/ProjectControllerTest.java||server/src/test/java/org/apache/kylin/rest/controller/ProjectControllerTest.java",
          "webapp/app/js/controllers/cube.js||webapp/app/js/controllers/cube.js",
          "webapp/app/js/controllers/projects.js||webapp/app/js/controllers/projects.js",
          "webapp/app/js/services/cubes.js||webapp/app/js/services/cubes.js",
          "webapp/app/js/services/projects.js||webapp/app/js/services/projects.js",
          "webapp/app/partials/cubes/cube_detail.html||webapp/app/partials/cubes/cube_detail.html",
          "webapp/app/partials/projects/project_detail.html||webapp/app/partials/projects/project_detail.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java||core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java": [
          "File: core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java -> core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:         }",
          "322:     }",
          "324:     public CubeInstance updateCubeDropSegments(CubeInstance cube, Collection<CubeSegment> segsToDrop)",
          "325:             throws IOException {",
          "326:         CubeSegment[] arr = (CubeSegment[]) segsToDrop.toArray(new CubeSegment[segsToDrop.size()]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:     }",
          "324:     public CubeInstance updateCubeOwner(CubeInstance cube, String owner) throws IOException {",
          "325:         try (AutoLock lock = cubeMapLock.lockForWrite()) {",
          "326:             cube = cube.latestCopyForWrite(); // get a latest copy",
          "327:             CubeUpdate update = new CubeUpdate(cube);",
          "328:             update.setOwner(owner);",
          "329:             ProjectManager.getInstance(config).touchProject(cube.getProject());",
          "330:             return updateCube(update);",
          "331:         }",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java||core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java -> core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:         }",
          "239:     }",
          "241:     public void removeProjectLocal(String proj) {",
          "242:         try (AutoLock lock = prjMapLock.lockForWrite()) {",
          "243:             projectMap.removeLocal(proj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:     public ProjectInstance updateProjectOwner(ProjectInstance project, String newOwner) throws IOException {",
          "243:         try (AutoLock lock = prjMapLock.lockForWrite()) {",
          "244:             project.setOwner(newOwner);",
          "246:             if (project.getUuid() == null)",
          "247:                 project.updateRandomUuid();",
          "249:             return save(project);",
          "250:         }",
          "251:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java||server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:     @Qualifier(\"queryService\")",
          "129:     private QueryService queryService;",
          "131:     @Autowired",
          "132:     private AclEvaluate aclEvaluate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:     @Autowired",
          "132:     @Qualifier(\"validateUtil\")",
          "133:     private ValidateUtil validateUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:         }",
          "262:     }",
          "264:     @RequestMapping(value = \"/{cubeName}/cost\", method = { RequestMethod.PUT }, produces = { \"application/json\" })",
          "265:     @ResponseBody",
          "266:     public CubeInstance updateCubeCost(@PathVariable String cubeName, @RequestParam(value = \"cost\") int cost) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:     @RequestMapping(value = \"/{cubeName}/owner\", method = { RequestMethod.PUT }, produces = {",
          "276:         \"application/json\" })",
          "277:     @ResponseBody",
          "278:     public CubeInstance updateCubeOwner(@PathVariable String cubeName, @RequestBody String owner) {",
          "279:         checkCubeExists(cubeName);",
          "280:         try {",
          "281:             validateUtil.checkIdentifiersExists(owner, true);",
          "282:             CubeInstance cube = cubeService.getCubeManager().getCube(cubeName);",
          "283:             return cubeService.updateCubeOwner(cube, owner);",
          "284:         } catch (AccessDeniedException accessDeniedException) {",
          "285:             throw new ForbiddenException(\"You don't have right to update this cube's owner.\");",
          "286:         } catch (Exception e) {",
          "287:             logger.error(e.getLocalizedMessage(), e);",
          "288:             throw new InternalErrorException(e.getLocalizedMessage(), e);",
          "289:         }",
          "290:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1115:     public void setJobService(JobService jobService) {",
          "1116:         this.jobService = jobService;",
          "1117:     }",
          "1118: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1147:     public void setValidateUtil(ValidateUtil validateUtil) {",
          "1148:         this.validateUtil = validateUtil;",
          "1149:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java||server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/ModelController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.Iterator;",
          "23: import java.util.List;",
          "24: import java.util.Locale;",
          "26: import org.apache.commons.lang.StringUtils;",
          "27: import org.apache.kylin.common.KylinConfig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     @Qualifier(\"projectService\")",
          "76:     private ProjectService projectService;",
          "78:     @RequestMapping(value = \"/validate/{modelName}\", method = RequestMethod.GET, produces = { \"application/json\" })",
          "79:     @ResponseBody",
          "80:     public EnvelopeResponse<Boolean> validateModelName(@PathVariable String modelName) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     @Autowired",
          "80:     @Qualifier(\"validateUtil\")",
          "81:     private ValidateUtil validateUtil;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "224:         return modelRequest;",
          "225:     }",
          "227:     private DataModelDesc deserializeDataModelDesc(ModelRequest modelRequest) {",
          "228:         DataModelDesc desc = null;",
          "229:         try {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:     @RequestMapping(value = \"/{modelName}/owner\", method = { RequestMethod.PUT }, produces = {",
          "241:         \"application/json\" })",
          "242:     @ResponseBody",
          "243:     public ModelRequest updateModelOwner(@PathVariable String modelName, @RequestBody String owner)",
          "244:         throws JsonProcessingException {",
          "245:         DataModelDesc modelDesc = null;",
          "246:         try {",
          "247:             validateUtil.checkIdentifiersExists(owner, true);",
          "248:             DataModelDesc desc = modelService.getDataModelManager().getDataModelDesc(modelName);",
          "249:             if (null == desc) {",
          "250:                 throw new NotFoundException(\"Data Model with name \" + modelName + \" not found..\");",
          "251:             }",
          "253:             if (Objects.equals(desc.getOwner(), owner)) {",
          "254:                 modelDesc = desc;",
          "255:             } else {",
          "256:                 DataModelDesc newModelDesc = DataModelDesc.getCopyOf(desc);",
          "257:                 newModelDesc.setOwner(owner);",
          "258:                 modelDesc = modelService.updateModelAndDesc(newModelDesc.getProject(), newModelDesc);",
          "259:             }",
          "260:         } catch (AccessDeniedException accessDeniedException) {",
          "261:             throw new ForbiddenException(\"You don't have right to update this model's owner.\");",
          "262:         } catch (Exception e) {",
          "263:             logger.error(e.getLocalizedMessage(), e);",
          "264:             throw new InternalErrorException(e.getLocalizedMessage(), e);",
          "265:         }",
          "267:         ModelRequest modelRequest = new ModelRequest();",
          "268:         modelRequest.setProject(modelDesc.getProject());",
          "269:         modelRequest.setModelName(modelName);",
          "270:         modelRequest.setUuid(modelDesc.getUuid());",
          "271:         if (modelDesc.getError().isEmpty()) {",
          "272:             modelRequest.setSuccessful(true);",
          "273:         } else {",
          "274:             logger.warn(\"Model \" + modelDesc.getName() + \" fail to update because \" + modelDesc.getError());",
          "275:             updateRequest(modelRequest, false, omitMessage(modelDesc.getError()));",
          "276:         }",
          "277:         String descData = JsonUtil.writeValueAsIndentString(modelDesc);",
          "278:         modelRequest.setModelDescData(descData);",
          "279:         return modelRequest;",
          "280:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java||server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java -> server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.util.Locale;",
          "27: import org.apache.commons.lang.StringUtils;",
          "28: import org.apache.kylin.common.util.JsonUtil;",
          "29: import org.apache.kylin.metadata.project.ProjectInstance;",
          "30: import org.apache.kylin.rest.exception.BadRequestException;",
          "31: import org.apache.kylin.rest.exception.InternalErrorException;",
          "32: import org.apache.kylin.rest.exception.NotFoundException;",
          "33: import org.apache.kylin.rest.request.ProjectRequest;",
          "34: import org.apache.kylin.rest.service.AccessService;",
          "35: import org.apache.kylin.rest.service.CubeService;",
          "36: import org.apache.kylin.rest.service.ProjectService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.kylin.common.persistence.AclEntity;",
          "32: import org.apache.kylin.rest.exception.ForbiddenException;",
          "36: import org.apache.kylin.rest.security.AclPermission;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import org.slf4j.LoggerFactory;",
          "41: import org.springframework.beans.factory.annotation.Autowired;",
          "42: import org.springframework.beans.factory.annotation.Qualifier;",
          "43: import org.springframework.stereotype.Controller;",
          "44: import org.springframework.web.bind.annotation.PathVariable;",
          "45: import org.springframework.web.bind.annotation.RequestBody;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.springframework.security.access.AccessDeniedException;",
          "47: import org.springframework.security.acls.model.Sid;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:     @Autowired",
          "68:     @Qualifier(\"cubeMgmtService\")",
          "69:     private CubeService cubeService;",
          "70:     @Autowired",
          "71:     private AclEvaluate aclEvaluate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     @Autowired",
          "77:     @Qualifier(\"validateUtil\")",
          "78:     private ValidateUtil validateUtil;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "204:         }",
          "205:     }",
          "207:     public void setProjectService(ProjectService projectService) {",
          "208:         this.projectService = projectService;",
          "209:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:     @RequestMapping(value = \"/{projectName}/owner\", method = { RequestMethod.PUT }, produces = {",
          "218:         \"application/json\" })",
          "219:     @ResponseBody",
          "220:     public ProjectInstance updateProjectOwner(@PathVariable String projectName, @RequestBody String owner) {",
          "221:         ProjectInstance updatedProj;",
          "222:         ProjectInstance currentProject = null;",
          "223:         String oldOwner = null;",
          "224:         boolean updateOwnerSuccess = false;",
          "225:         boolean updateAccessSuccess = false;",
          "226:         try {",
          "227:             validateUtil.checkIdentifiersExists(owner, true);",
          "228:             currentProject = projectService.getProjectManager().getProject(projectName);",
          "229:             if (currentProject == null) {",
          "230:                 throw new NotFoundException(\"The project named \" + projectName + \" does not exists\");",
          "231:             }",
          "232:             oldOwner = currentProject.getOwner();",
          "234:             updatedProj = projectService.updateProjectOwner(currentProject, owner);",
          "235:             updateOwnerSuccess = true;",
          "238:             AclEntity ae = accessService.getAclEntity(\"ProjectInstance\", currentProject.getUuid());",
          "239:             Sid sid = accessService.getSid(owner, true);",
          "240:             accessService.grant(ae, AclPermission.ADMINISTRATION, sid);",
          "241:             updateAccessSuccess = true;",
          "242:         } catch (AccessDeniedException accessDeniedException) {",
          "243:             throw new ForbiddenException(\"You don't have right to update this project's owner.\");",
          "244:         } catch (Exception e) {",
          "245:             logger.error(\"Failed to deal with the request.\", e);",
          "246:             throw new InternalErrorException(e.getLocalizedMessage(), e);",
          "247:         } finally {",
          "248:             if (!updateAccessSuccess && currentProject != null && updateOwnerSuccess) {",
          "249:                 try {",
          "250:                     projectService.updateProjectOwner(currentProject, oldOwner);",
          "251:                 } catch (IOException e) {",
          "252:                     logger.error(\"Failed to roll back the request.\", e);",
          "253:                 }",
          "254:             }",
          "255:         }",
          "257:         return updatedProj;",
          "258:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "215:     public void setCubeService(CubeService cubeService) {",
          "216:         this.cubeService = cubeService;",
          "217:     }",
          "218: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272:     public void setValidateUtil(ValidateUtil validateUtil) {",
          "273:         this.validateUtil = validateUtil;",
          "274:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java||server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java -> server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.util.List;",
          "27: import java.util.Locale;",
          "28: import java.util.Map;",
          "29: import java.util.Set;",
          "31: import org.apache.commons.lang.StringUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "579:         getCubeDescManager().updateCubeDesc(desc);",
          "580:     }",
          "582:     public CubeInstance rebuildLookupSnapshot(CubeInstance cube, String segmentName, String lookupTable)",
          "583:             throws IOException {",
          "584:         aclEvaluate.checkProjectOperationPermission(cube);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "583:     public CubeInstance updateCubeOwner(CubeInstance cube, String owner) throws IOException {",
          "584:         aclEvaluate.checkProjectWritePermission(cube);",
          "585:         if (Objects.equals(cube.getOwner(), owner)) {",
          "587:             return cube;",
          "588:         }",
          "589:         cube.setOwner(owner);",
          "591:         CubeUpdate update = new CubeUpdate(cube.latestCopyForWrite()).setOwner(owner);",
          "592:         return getCubeManager().updateCube(update);",
          "593:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java||server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java -> server-base/src/main/java/org/apache/kylin/rest/service/ProjectService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.LinkedHashMap;",
          "25: import java.util.List;",
          "26: import java.util.Locale;",
          "27: import java.util.Set;",
          "29: import javax.annotation.Nullable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:         return updatedProject;",
          "112:     }",
          "114:     @PostFilter(Constant.ACCESS_POST_FILTER_READ)",
          "115:     public List<ProjectInstance> listProjects(final Integer limit, final Integer offset) {",
          "116:         List<ProjectInstance> projects = listAllProjects(limit, offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + \" or hasPermission(#currentProject, 'ADMINISTRATION')\")",
          "116:     public ProjectInstance updateProjectOwner(ProjectInstance currentProject, String newOwner)",
          "117:         throws IOException {",
          "118:         if (Objects.equals(currentProject.getOwner(), newOwner)) {",
          "120:             return currentProject;",
          "121:         }",
          "122:         ProjectInstance updatedProject = getProjectManager().updateProjectOwner(currentProject, newOwner);",
          "123:         logger.debug(\"Project owner updated.\");",
          "124:         return updatedProject;",
          "125:     }",
          "",
          "---------------"
        ],
        "server/src/test/java/org/apache/kylin/rest/controller/CubeControllerTest.java||server/src/test/java/org/apache/kylin/rest/controller/CubeControllerTest.java": [
          "File: server/src/test/java/org/apache/kylin/rest/controller/CubeControllerTest.java -> server/src/test/java/org/apache/kylin/rest/controller/CubeControllerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import org.apache.kylin.rest.service.JobService;",
          "38: import org.apache.kylin.rest.service.ServiceTestBase;",
          "39: import org.apache.kylin.rest.service.StreamingService;",
          "40: import org.junit.Assert;",
          "41: import org.junit.Before;",
          "42: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: import org.apache.kylin.rest.util.ValidateUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     @Qualifier(\"streamingMgmtService\")",
          "67:     StreamingService streamingService;",
          "69:     @Before",
          "70:     public void setup() throws Exception {",
          "71:         super.setup();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     @Autowired",
          "71:     @Qualifier(\"validateUtil\")",
          "72:     private ValidateUtil validateUtil;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         cubeController = new CubeController();",
          "74:         cubeController.setCubeService(cubeService);",
          "75:         cubeController.setJobService(jobService);",
          "77:         cubeDescController = new CubeDescController();",
          "78:         cubeDescController.setCubeService(cubeService);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:         cubeController.setValidateUtil(validateUtil);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123:         List<String> notifyList = Lists.newArrayList();",
          "124:         notifyList.add(\"john@example.com\");",
          "125:         cubeController.updateNotifyList(newCubeName, notifyList);",
          "127:         List<CubeInstanceResponse> cubeInstances = cubeController.getCubes(newCubeName, cube.getModelName(), \"default\",",
          "128:                 1, 0);",
          "130:         CubeInstance cubeInstance = cubeController.getCube(cubeInstances.get(0).getName());",
          "131:         Assert.assertTrue(cubeInstance.getDescriptor().getNotifyList().contains(\"john@example.com\"));",
          "133:         cubeController.deleteCube(newCubeName);",
          "134:     }",
          "",
          "[Removed Lines]",
          "132:         Assert.assertTrue(cubeInstance.getCost() == 495);",
          "",
          "[Added Lines]",
          "132:         try {",
          "133:             cubeController.updateCubeOwner(newCubeName, \"new_user\");",
          "134:         } catch (InternalErrorException e) {",
          "135:             Assert.assertEquals(\"Operation failed, user:new_user not exists, please add first.\",",
          "136:                 e.getMessage());",
          "137:         }",
          "138:         cubeController.updateCubeOwner(newCubeName, \"MODELER\");",
          "144:         Assert.assertEquals(\"MODELER\", cubeInstance.getOwner());",
          "145:         Assert.assertEquals(495, cubeInstance.getCost());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "191:         int newSegNumber = cubeService.getCubeManager().getCube(cubeName).getSegments().size();",
          "195:         cubeController.enableCube(cubeName);",
          "196:     }",
          "",
          "[Removed Lines]",
          "193:         Assert.assertTrue(segNumber == newSegNumber + 1);",
          "",
          "[Added Lines]",
          "206:         Assert.assertEquals(segNumber, newSegNumber + 1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "214:         List<CubeSegment> holes = cubeController.getHoles(cubeName);",
          "218:         CubeSegment hole = holes.get(0);",
          "221:     }",
          "223:     @Test",
          "224:     public void testGetCubes() {",
          "225:         List<CubeInstanceResponse> cubes = cubeController.getCubes(null, null, null, 1, 0);",
          "227:     }",
          "229:     @Test",
          "",
          "[Removed Lines]",
          "216:         Assert.assertTrue(holes.size() == 1);",
          "220:         Assert.assertTrue(hole.getTSRange().equals(new TSRange(dateEnd, dateEnd + ONEDAY)));",
          "226:         Assert.assertTrue(cubes.size() == 1);",
          "",
          "[Added Lines]",
          "229:         Assert.assertEquals(1, holes.size());",
          "233:         Assert.assertEquals(hole.getTSRange(), new TSRange(dateEnd, dateEnd + ONEDAY));",
          "239:         Assert.assertEquals(1, cubes.size());",
          "",
          "---------------"
        ],
        "server/src/test/java/org/apache/kylin/rest/controller/ProjectControllerTest.java||server/src/test/java/org/apache/kylin/rest/controller/ProjectControllerTest.java": [
          "File: server/src/test/java/org/apache/kylin/rest/controller/ProjectControllerTest.java -> server/src/test/java/org/apache/kylin/rest/controller/ProjectControllerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.kylin.metadata.project.ProjectManager;",
          "26: import org.apache.kylin.rest.exception.InternalErrorException;",
          "27: import org.apache.kylin.rest.request.ProjectRequest;",
          "28: import org.apache.kylin.rest.service.ProjectService;",
          "29: import org.apache.kylin.rest.service.ServiceTestBase;",
          "30: import org.junit.Assert;",
          "31: import org.junit.Before;",
          "32: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.kylin.rest.service.AccessService;",
          "31: import org.apache.kylin.rest.util.ValidateUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     @Qualifier(\"projectService\")",
          "46:     ProjectService projectService;",
          "48:     @Before",
          "49:     public void setup() throws Exception {",
          "50:         super.setup();",
          "52:         projectController = new ProjectController();",
          "53:         projectController.setProjectService(projectService);",
          "55:         try {",
          "56:             projectController.deleteProject(\"new_project\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:     @Autowired",
          "51:     @Qualifier(\"validateUtil\")",
          "52:     private ValidateUtil validateUtil;",
          "54:     @Autowired",
          "55:     @Qualifier(\"accessService\")",
          "56:     private AccessService accessService;",
          "64:         projectController.setValidateUtil(validateUtil);",
          "65:         projectController.setAccessService(accessService);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:         } catch (InternalErrorException e) {",
          "64:         }",
          "65:     }",
          "67:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         try {",
          "78:             projectController.deleteProject(\"new_project_3\");",
          "79:         } catch (InternalErrorException e) {",
          "81:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:         Assert.assertEquals(ProjectManager.getInstance(getTestConfig()).getProject(\"new_project\").getDescription(), \"hello world\");",
          "88:     }",
          "90:     @Test(expected = InternalErrorException.class)",
          "91:     public void testAddExistingProject() throws IOException {",
          "92:         ProjectInstance newProject = new ProjectInstance();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     @Test",
          "108:     public void testUpdateProjectOwner() throws IOException {",
          "109:         int originalProjectCount = projectController.getProjects(null, null).size();",
          "112:         ProjectInstance project = new ProjectInstance();",
          "113:         project.setName(\"new_project_3\");",
          "114:         ProjectInstance ret = projectController.saveProject(getProjectRequest(project, null));",
          "116:         Assert.assertEquals(ret.getOwner(), \"ADMIN\");",
          "117:         Assert.assertEquals(ProjectManager.getInstance(getTestConfig()).listAllProjects().size(), originalProjectCount + 1);",
          "120:         try {",
          "121:             projectController.updateProjectOwner(\"new_project_3\", \"new_user\");",
          "122:         } catch (InternalErrorException e) {",
          "123:             Assert.assertTrue(e.getMessage().equals(\"Operation failed, user:new_user not exists, please add first.\"));",
          "124:         }",
          "125:         projectController.updateProjectOwner(\"new_project_3\", \"MODELER\");",
          "127:         Assert.assertEquals(ProjectManager.getInstance(getTestConfig()).listAllProjects().size(), originalProjectCount + 1);",
          "128:         Assert.assertNotEquals(ProjectManager.getInstance(getTestConfig()).getProject(\"new_project_3\"), null);",
          "129:         Assert.assertEquals(ProjectManager.getInstance(getTestConfig()).getProject(\"new_project_3\").getOwner(), \"MODELER\");",
          "130:     }",
          "",
          "---------------"
        ],
        "webapp/app/js/controllers/cube.js||webapp/app/js/controllers/cube.js": [
          "File: webapp/app/js/controllers/cube.js -> webapp/app/js/controllers/cube.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         });",
          "89:     };",
          "91:     $scope.getStorageInfo = function (cube) {",
          "92:         if (!cube.hbase) {",
          "93:             CubeService.getStorageInfo({cubeId: cube.name, propValue: null, action: null}, function (hbase) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:     $scope.getOwnerString = function (cube) {",
          "92:         cube.newOwner = cube.owner;",
          "93:     };",
          "95:     $scope.updateOwner = function (cube) {",
          "96:       CubeService.updateOwner({cubeId: cube.name}, cube.newOwner, function () {",
          "97:         cube.owner = cube.newOwner;",
          "98:         MessageBox.successNotify('Owner updated successfully!');",
          "99:       },function(e){",
          "100:         if(e.data&& e.data.exception){",
          "101:           var message =e.data.exception;",
          "102:           var msg = !!(message) ? message : 'Failed to take action.';",
          "103:           SweetAlert.swal('Oops...', msg, 'error');",
          "104:         }else{",
          "105:           SweetAlert.swal('Oops...', \"Failed to take action.\", 'error');",
          "106:         }",
          "107:       });",
          "108:     };",
          "",
          "---------------"
        ],
        "webapp/app/js/controllers/projects.js||webapp/app/js/controllers/projects.js": [
          "File: webapp/app/js/controllers/projects.js -> webapp/app/js/controllers/projects.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:                 }",
          "92:             });",
          "93:         }",
          "95:         $scope.getMapLength = function(map) {",
          "97:         }",
          "98:     }",
          "99: );",
          "",
          "[Removed Lines]",
          "96:          return Object.keys(map).length;",
          "",
          "[Added Lines]",
          "96:            return Object.keys(map).length;",
          "99:         $scope.getOwnerString = function (project) {",
          "100:             project.newOwner = project.owner;",
          "101:         };",
          "103:         $scope.updateOwner = function (project) {",
          "104:             ProjectService.updateOwner({projecId: project.name}, project.newOwner, function () {",
          "105:                 project.owner = project.newOwner;",
          "106:                 MessageBox.successNotify('Owner updated successfully!');",
          "107:             },function(e){",
          "108:                 if(e.data&& e.data.exception){",
          "109:                     var message =e.data.exception;",
          "110:                     var msg = !!(message) ? message : 'Failed to take action.';",
          "111:                     SweetAlert.swal('Oops...', msg, 'error');",
          "112:                 } else{",
          "113:                     SweetAlert.swal('Oops...', \"Failed to take action.\", 'error');",
          "114:                 }",
          "115:             });",
          "116:         };",
          "",
          "---------------"
        ],
        "webapp/app/js/services/cubes.js||webapp/app/js/services/cubes.js": [
          "File: webapp/app/js/services/cubes.js -> webapp/app/js/services/cubes.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     getCube: {method: 'GET', params: {}, isArray: false},",
          "45:     getSql: {method: 'GET', params: {action: 'sql'}, isArray: false},",
          "46:     updateNotifyList: {method: 'PUT', params: {propName: 'notify_list'}, isArray: false},",
          "47:     cost: {method: 'PUT', params: {action: 'cost'}, isArray: false},",
          "48:     rebuildLookUp: {method: 'PUT', params: {propName: 'segs', action: 'refresh_lookup'}, isArray: false},",
          "49:     rebuildCube: {method: 'PUT', params: {action: 'rebuild'}, isArray: false},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     updateOwner: {method: 'PUT', params: {propName: 'owner'}, isArray: false},",
          "",
          "---------------"
        ],
        "webapp/app/js/services/projects.js||webapp/app/js/services/projects.js": [
          "File: webapp/app/js/services/projects.js -> webapp/app/js/services/projects.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     listReadable: {method: 'GET', params: {action:'readable'}, isArray: true},",
          "23:     save: {method: 'POST', params: {}, isArray: false},",
          "24:     update: {method: 'PUT', params: {}, isArray: false},",
          "26:   });",
          "27: }]);",
          "",
          "[Removed Lines]",
          "25:     delete: {method: 'DELETE', params: {}, isArray: false}",
          "",
          "[Added Lines]",
          "25:     delete: {method: 'DELETE', params: {}, isArray: false},",
          "26:     updateOwner: {method: 'PUT', params: {propName: 'owner'}, isArray: false}",
          "",
          "---------------"
        ],
        "webapp/app/partials/cubes/cube_detail.html||webapp/app/partials/cubes/cube_detail.html": [
          "File: webapp/app/partials/cubes/cube_detail.html -> webapp/app/partials/cubes/cube_detail.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:             ng-if=\"userService.hasRole('ROLE_ADMIN') || hasPermission('cube',cube, permissions.ADMINISTRATION.mask) && !newAccess\">",
          "38:             <a href=\"\" ng-click=\"cube.visiblePage='notification';getNotifyListString(cube);\">Notification</a>",
          "39:         </li>",
          "40:         <li class=\"{{cube.visiblePage=='hbase'? 'active':''}}\"",
          "41:             ng-if=\"userService.hasRole('ROLE_ADMIN')  || hasPermission('cube' ,cube, permissions.ADMINISTRATION.mask) && !newAccess\">",
          "42:             <a href=\"\" ng-click=\"cube.visiblePage='hbase';getStorageInfo(cube)\">Storage</a>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:         <li class=\"{{cube.visiblePage=='owner'? 'active':''}}\"",
          "41:             ng-if=\"userService.hasRole('ROLE_ADMIN') || hasPermission('cube',cube, permissions.ADMINISTRATION.mask) && !newAccess\">",
          "42:             <a href=\"\" ng-click=\"cube.visiblePage='owner';getOwnerString(cube)\">Owner</a>",
          "43:         </li>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         </div>",
          "101:     </div>",
          "104:         <div style=\"margin: 15px; overflow: hidden;\">",
          "105:             <div ng-if=\"cube.hbase\">",
          "106:               <div class=\"hr hr8 hr-double hr-dotted\"></div>",
          "",
          "[Removed Lines]",
          "103:   <div class=\"cube-detail\" ng-show=\"cube.visiblePage=='hbase'\">",
          "",
          "[Added Lines]",
          "107:     <div class=\"cube-detail\" ng-show=\"cube.visiblePage=='owner'\">",
          "108:         <div style=\"margin: 15px;\">",
          "109:             <h5><b>Owner:</b></h5>",
          "110:             <div class=\"form-group\">",
          "111:                 <input ng-model=\"cube.newOwner\" class=\"form-control\" placeholder=\"User List...\" />",
          "112:             </div>",
          "113:             <div class=\"form-group\">",
          "114:                 <button class=\"btn btn-primary btn-sm\" ng-click=\"updateOwner(cube)\">Save</button>",
          "115:             </div>",
          "116:             <div class=\"space-4\"></div>",
          "117:         </div>",
          "118:     </div>",
          "120:     <div class=\"cube-detail\" ng-show=\"cube.visiblePage=='hbase'\">",
          "",
          "---------------"
        ],
        "webapp/app/partials/projects/project_detail.html||webapp/app/partials/projects/project_detail.html": [
          "File: webapp/app/partials/projects/project_detail.html -> webapp/app/partials/projects/project_detail.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:         <li class=\"{{project.visiblePage=='config'? 'active':''}}\">",
          "29:             <a href=\"\" ng-click=\"project.visiblePage='config';\">Configuration Overwrites</a>",
          "30:         </li>",
          "31:     </ul>",
          "33:     <div class=\"cube-detail\" ng-if=\"project.visiblePage=='cubes'\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:         <li class=\"{{project.visiblePage=='owner'? 'active':''}}\"",
          "32:             ng-if=\"userService.hasRole('ROLE_ADMIN') || hasPermission('project',project, permissions.ADMINISTRATION.mask)\">",
          "33:             <a href=\"\" ng-click=\"project.visiblePage='owner';getOwnerString(project)\">Owner</a>",
          "34:         </li>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:             <div class=\"col-xs-1\"></div>",
          "92:         </div>",
          "93:     </div>",
          "94: </div>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     <div class=\"cube-detail\" ng-show=\"project.visiblePage=='owner'\">",
          "100:         <div class=\"row\">",
          "101:             <div class=\"col-xs-1\"></div>",
          "102:             <div class=\"col-xs-10\">",
          "103:                 <h5><b>Owner:</b></h5>",
          "104:                 <div class=\"form-group\">",
          "105:                     <input ng-model=\"project.newOwner\" class=\"form-control\" placeholder=\"User List...\" />",
          "106:                 </div>",
          "107:                 <div class=\"form-group\">",
          "108:                     <button class=\"btn btn-primary btn-sm\" ng-click=\"updateOwner(project)\">Save</button>",
          "109:                 </div>",
          "110:                 <div class=\"space-4\"></div>",
          "111:             </div>",
          "112:             <div class=\"col-xs-1\"></div>",
          "113:         </div>",
          "114:     </div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a33666183192aa36886b139c5eb3cffa6c3e1c7e",
      "candidate_info": {
        "commit_hash": "a33666183192aa36886b139c5eb3cffa6c3e1c7e",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/a33666183192aa36886b139c5eb3cffa6c3e1c7e",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
          "core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java"
        ],
        "message": "KYLIN-4426 CliCommandExecutor\n\n(cherry picked from commit 335d61b62517006d7e7b55638bb6fd305dffbea1)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java||core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
          "core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java||core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java||server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java||core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java -> core-common/src/main/java/org/apache/kylin/common/util/CliCommandExecutor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:     }",
          "179:     public static final String COMMAND_INJECT_REX = \"[ &`>|{}()$;\\\\-#~!+*\u201d\\\\\\\\]+\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:     public static final String COMMAND_WHITE_LIST = \"[^\\\\w%,@/:=?.\\\"\\\\[\\\\]]\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:     public static String checkParameter(String commandParameter) {",
          "204:         if (repaired.length() != commandParameter.length()) {",
          "206:         }",
          "207:         return repaired;",
          "208:     }",
          "",
          "[Removed Lines]",
          "203:         String repaired = commandParameter.replaceAll(COMMAND_INJECT_REX, \"\");",
          "205:             logger.info(\"Detected illegal character in command {}, replace it to {}.\", commandParameter, repaired);",
          "",
          "[Added Lines]",
          "204:         return checkParameter(commandParameter, COMMAND_INJECT_REX);",
          "205:     }",
          "207:     public static String checkParameterWhiteList(String commandParameter) {",
          "208:         return checkParameter(commandParameter, COMMAND_WHITE_LIST);",
          "209:     }",
          "211:     private static String checkParameter(String commandParameter, String rex) {",
          "212:         String repaired = commandParameter.replaceAll(rex, \"\");",
          "214:             logger.info(\"Detected illegal character in command {} by {} , replace it to {}.\", commandParameter, rex, repaired);",
          "",
          "---------------"
        ],
        "core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java||core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java": [
          "File: core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java -> core-common/src/test/java/org/apache/kylin/common/util/CliCommandExecutorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: public class CliCommandExecutorTest {",
          "26:     @Test",
          "27:     public void testCmd() {",
          "38:         for (String[] pair : commands) {",
          "39:             assertEquals(pair[1], CliCommandExecutor.checkParameter(pair[0]));",
          "40:         }",
          "41:     }",
          "42: }",
          "",
          "[Removed Lines]",
          "28:         String[][] commands = {",
          "29:                 {\"nslookup unknown.com &\", \"nslookupunknown.com\"},",
          "30:                 {\"cat `whoami`\", \"catwhoami\"},",
          "31:                 {\"whoami > /var/www/static/whoami.txt\", \"whoami/var/www/static/whoami.txt\"},",
          "32:                 {\"c1 || c2# || c3 || *c4\\\\\", \"c1c2c3c4\"},",
          "33:                 {\"c1 &&\", \"c1\"},",
          "34:                 {\"c1 + > c2 [p1]%\", \"c1c2[p1]%\"},",
          "35:                 {\"c1 | ${c2}\", \"c1c2\"},",
          "36:         };",
          "",
          "[Added Lines]",
          "26:     private String[][] commands = {",
          "27:             {\"nslookup unknown.com &\", \"nslookupunknown.com\"},",
          "28:             {\"cat `whoami`\", \"catwhoami\"},",
          "29:             {\"echo \\\"kylin@headnode:/home/kylin/lib/job.jar?key=Value123\\\",\", \"echo\\\"kylin@headnode:/home/kylin/lib/job.jar?key=Value123\\\",\"},",
          "30:             {\"whoami > /var/www/static/whoami.txt\", \"whoami/var/www/static/whoami.txt\"},",
          "31:             {\"mysql_test@jdbc,url=jdbc:mysql://localhost:3306/kylin,username=kylin_test,password=bUmSqT/opyqz89Geu0yQ3g==,maxActive=10,maxIdle=10,passwordEncrypted=true\", \"mysql_test@jdbc,url=jdbc:mysql://localhost:3306/kylin,username=kylin_test,password=bUmSqT/opyqz89Geu0yQ3g==,maxActive=10,maxIdle=10,passwordEncrypted=true\"},",
          "32:             {\"c1 || c2# || c3 || *c4\\\\\", \"c1c2c3c4\"},",
          "33:             {\"c1 &&\", \"c1\"},",
          "34:             {\"c1 + > c2 [p1]%\", \"c1c2[p1]%\"},",
          "35:             {\"c1 | ${c2}\", \"c1c2\"},",
          "36:     };",
          "45:     @Test",
          "46:     public void testCmd2() {",
          "47:         for (String[] pair : commands) {",
          "48:             assertEquals(pair[1], CliCommandExecutor.checkParameterWhiteList(pair[0]));",
          "49:         }",
          "50:     }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java||server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java -> server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1117:                 \"Destination configuration should not be empty.\");",
          "1119:         String stringBuilder = (\"%s/bin/kylin.sh org.apache.kylin.tool.CubeMigrationCLI %s %s %s %s %s %s true true\");",
          "1123:         logger.info(\"One click migration cmd: \" + cmd);",
          "",
          "[Removed Lines]",
          "1120:         String cmd = String.format(Locale.ROOT, stringBuilder, KylinConfig.getKylinHome(), srcCfgUri, dstCfgUri,",
          "1121:                 cube.getName(), projectName, config.isAutoMigrateCubeCopyAcl(), config.isAutoMigrateCubePurge());",
          "",
          "[Added Lines]",
          "1120:         String cmd = String.format(Locale.ROOT,",
          "1121:                 stringBuilder,",
          "1122:                 KylinConfig.getKylinHome(),",
          "1123:                 CliCommandExecutor.checkParameterWhiteList(srcCfgUri),",
          "1124:                 CliCommandExecutor.checkParameterWhiteList(dstCfgUri),",
          "1125:                 cube.getName(),",
          "1126:                 CliCommandExecutor.checkParameterWhiteList(projectName),",
          "1127:                 config.isAutoMigrateCubeCopyAcl(),",
          "1128:                 config.isAutoMigrateCubePurge());",
          "",
          "---------------"
        ]
      }
    }
  ]
}