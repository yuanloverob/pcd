{
  "cve_id": "CVE-2023-26144",
  "cve_desc": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
  "repo": "graphql/graphql-js",
  "patch_hash": "8f4c64eb6a7112a929ffeef00caa67529b3f2fcf",
  "patch_info": {
    "commit_hash": "8f4c64eb6a7112a929ffeef00caa67529b3f2fcf",
    "repo": "graphql/graphql-js",
    "commit_url": "https://github.com/graphql/graphql-js/commit/8f4c64eb6a7112a929ffeef00caa67529b3f2fcf",
    "files": [
      "benchmark/repeated-fields-benchmark.js",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ],
    "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3967)\n\nfixes from https://github.com/graphql/graphql-js/pull/3958 into",
    "before_after_code_files": [
      "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
      "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
    ]
  },
  "patch_diff": {
    "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
      "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: 'use strict';",
      "3: const { graphqlSync } = require('graphql/graphql.js');",
      "4: const { buildSchema } = require('graphql/utilities/buildASTSchema.js');",
      "6: const schema = buildSchema('type Query { hello: String! }');",
      "7: const source = `{ ${'hello '.repeat(250)}}`;",
      "9: module.exports = {",
      "10:   name: 'Many repeated fields',",
      "11:   count: 5,",
      "12:   measure() {",
      "13:     graphqlSync({ schema, source });",
      "14:   },",
      "15: };",
      "",
      "---------------"
    ],
    "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
      "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: import { GraphQLError } from '../../error/GraphQLError';",
      "7: import type {",
      "8:   FieldNode,",
      "9:   FragmentDefinitionNode,",
      "11:   SelectionSetNode,",
      "12: } from '../../language/ast';",
      "13: import { Kind } from '../../language/kinds';",
      "14: import { print } from '../../language/printer';",
      "",
      "[Removed Lines]",
      "10:   ObjectValueNode,",
      "",
      "[Added Lines]",
      "8:   DirectiveNode,",
      "12:   ValueNode,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "588:     }",
      "592:       return [",
      "593:         [responseName, 'they have differing arguments'],",
      "594:         [node1],",
      "",
      "[Removed Lines]",
      "591:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
      "",
      "[Added Lines]",
      "592:     if (!sameArguments(node1, node2)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "634:   }",
      "635: }",
      "650: }",
      "",
      "[Removed Lines]",
      "637: function stringifyArguments(fieldNode: FieldNode): string {",
      "639:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
      "641:   const inputObjectWithArgs: ObjectValueNode = {",
      "642:     kind: Kind.OBJECT,",
      "643:     fields: args.map((argNode) => ({",
      "644:       kind: Kind.OBJECT_FIELD,",
      "645:       name: argNode.name,",
      "646:       value: argNode.value,",
      "647:     })),",
      "648:   };",
      "649:   return print(sortValueNode(inputObjectWithArgs));",
      "",
      "[Added Lines]",
      "638: function sameArguments(",
      "639:   node1: FieldNode | DirectiveNode,",
      "640:   node2: FieldNode | DirectiveNode,",
      "641: ): boolean {",
      "642:   const args1 = node1.arguments;",
      "643:   const args2 = node2.arguments;",
      "645:   if (args1 === undefined || args1.length === 0) {",
      "646:     return args2 === undefined || args2.length === 0;",
      "647:   }",
      "648:   if (args2 === undefined || args2.length === 0) {",
      "649:     return false;",
      "650:   }",
      "653:   if (args1.length !== args2.length) {",
      "655:     return false;",
      "657:   }",
      "659:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
      "660:   return args1.every((arg1) => {",
      "661:     const value1 = arg1.value;",
      "662:     const value2 = values2.get(arg1.name.value);",
      "663:     if (value2 === undefined) {",
      "664:       return false;",
      "665:     }",
      "667:     return stringifyValue(value1) === stringifyValue(value2);",
      "668:   });",
      "669: }",
      "671: function stringifyValue(value: ValueNode): string | null {",
      "672:   return print(sortValueNode(value));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
      "candidate_info": {
        "commit_hash": "f94b511386c7e47bd0380dcd56553dc063320226",
        "repo": "graphql/graphql-js",
        "commit_url": "https://github.com/graphql/graphql-js/commit/f94b511386c7e47bd0380dcd56553dc063320226",
        "files": [
          "benchmark/repeated-fields-benchmark.js",
          "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
          "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
        ],
        "message": "OverlappingFieldsCanBeMergedRule: Fix performance degradation (#3958)\n\nCo-authored-by: AaronMoat <AaronMoat@users.noreply.github.com>\nCo-authored-by: Ivan Goncharov <ivan.goncharov.ua@gmail.com>\nResolves https://github.com/graphql/graphql-js/issues/3955 (at least",
        "before_after_code_files": [
          "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
          "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
          "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
            "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
          ],
          "candidate": [
            "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js",
            "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts"
          ]
        }
      },
      "candidate_diff": {
        "benchmark/repeated-fields-benchmark.js||benchmark/repeated-fields-benchmark.js": [
          "File: benchmark/repeated-fields-benchmark.js -> benchmark/repeated-fields-benchmark.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { graphqlSync } from 'graphql/graphql.js';",
          "2: import { buildSchema } from 'graphql/utilities/buildASTSchema.js';",
          "4: const schema = buildSchema('type Query { hello: String! }');",
          "5: const source = `{ ${'hello '.repeat(250)}}`;",
          "7: export const benchmark = {",
          "8:   name: 'Many repeated fields',",
          "9:   count: 5,",
          "10:   measure() {",
          "11:     graphqlSync({ schema, source });",
          "12:   },",
          "13: };",
          "",
          "---------------"
        ],
        "src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts||src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts": [
          "File: src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts -> src/validation/__tests__/OverlappingFieldsCanBeMergedRule-test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:     ]);",
          "180:   });",
          "182:   it('mix of stream and no stream', () => {",
          "183:     expectErrors(`",
          "184:       fragment conflictingArgs on Dog {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:   it('different stream directive extra argument', () => {",
          "183:     expectErrors(`",
          "184:       fragment conflictingArgs on Dog {",
          "185:         name @stream(label: \"streamLabel\", initialCount: 1)",
          "186:         name @stream(label: \"streamLabel\", initialCount: 1, extraArg: true)",
          "187:       }",
          "188:     `).toDeepEqual([",
          "189:       {",
          "190:         message:",
          "191:           'Fields \"name\" conflict because they have differing stream directives. Use different aliases on the fields to fetch both if this was intentional.',",
          "192:         locations: [",
          "193:           { line: 3, column: 9 },",
          "194:           { line: 4, column: 9 },",
          "195:         ],",
          "196:       },",
          "197:     ]);",
          "198:   });",
          "",
          "---------------"
        ],
        "src/validation/rules/OverlappingFieldsCanBeMergedRule.ts||src/validation/rules/OverlappingFieldsCanBeMergedRule.ts": [
          "File: src/validation/rules/OverlappingFieldsCanBeMergedRule.ts -> src/validation/rules/OverlappingFieldsCanBeMergedRule.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:   DirectiveNode,",
          "8:   FieldNode,",
          "9:   FragmentDefinitionNode,",
          "11:   SelectionSetNode,",
          "12: } from '../../language/ast.js';",
          "13: import { Kind } from '../../language/kinds.js';",
          "14: import { print } from '../../language/printer.js';",
          "",
          "[Removed Lines]",
          "10:   ObjectValueNode,",
          "",
          "[Added Lines]",
          "11:   ValueNode,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "592:     }",
          "596:       return [",
          "597:         [responseName, 'they have differing arguments'],",
          "598:         [node1],",
          "",
          "[Removed Lines]",
          "595:     if (stringifyArguments(node1) !== stringifyArguments(node2)) {",
          "",
          "[Added Lines]",
          "595:     if (!sameArguments(node1, node2)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "649:   }",
          "650: }",
          "665: }",
          "667: function getStreamDirective(",
          "",
          "[Removed Lines]",
          "652: function stringifyArguments(fieldNode: FieldNode | DirectiveNode): string {",
          "654:   const args = /* c8 ignore next */ fieldNode.arguments ?? [];",
          "656:   const inputObjectWithArgs: ObjectValueNode = {",
          "657:     kind: Kind.OBJECT,",
          "658:     fields: args.map((argNode) => ({",
          "659:       kind: Kind.OBJECT_FIELD,",
          "660:       name: argNode.name,",
          "661:       value: argNode.value,",
          "662:     })),",
          "663:   };",
          "664:   return print(sortValueNode(inputObjectWithArgs));",
          "",
          "[Added Lines]",
          "652: function sameArguments(",
          "653:   node1: FieldNode | DirectiveNode,",
          "654:   node2: FieldNode | DirectiveNode,",
          "655: ): boolean {",
          "656:   const args1 = node1.arguments;",
          "657:   const args2 = node2.arguments;",
          "659:   if (args1 === undefined || args1.length === 0) {",
          "660:     return args2 === undefined || args2.length === 0;",
          "661:   }",
          "662:   if (args2 === undefined || args2.length === 0) {",
          "663:     return false;",
          "664:   }",
          "666:   if (args1.length !== args2.length) {",
          "667:     return false;",
          "668:   }",
          "670:   const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));",
          "671:   return args1.every((arg1) => {",
          "672:     const value1 = arg1.value;",
          "673:     const value2 = values2.get(arg1.name.value);",
          "674:     if (value2 === undefined) {",
          "675:       return false;",
          "676:     }",
          "678:     return stringifyValue(value1) === stringifyValue(value2);",
          "679:   });",
          "680: }",
          "682: function stringifyValue(value: ValueNode): string | null {",
          "683:   return print(sortValueNode(value));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "681:     return true;",
          "682:   } else if (stream1 && stream2) {",
          "685:   }",
          "687:   return false;",
          "",
          "[Removed Lines]",
          "684:     return stringifyArguments(stream1) === stringifyArguments(stream2);",
          "",
          "[Added Lines]",
          "703:     return sameArguments(stream1, stream2);",
          "",
          "---------------"
        ]
      }
    }
  ]
}