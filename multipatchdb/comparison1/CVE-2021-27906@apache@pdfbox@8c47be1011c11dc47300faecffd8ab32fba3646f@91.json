{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6d83a09d998497033d37b7c82b450cbab90ecf2d",
      "candidate_info": {
        "commit_hash": "6d83a09d998497033d37b7c82b450cbab90ecf2d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6d83a09d998497033d37b7c82b450cbab90ecf2d",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java"
        ],
        "message": "PDFBOX-4892: simplify code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891793 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java||pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java -> pdfbox/src/main/java/org/apache/pdfbox/rendering/TilingPaint.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:                 Math.abs(patternMatrix.getScalingFactorX()),",
          "169:                 Math.abs(patternMatrix.getScalingFactorY()));",
          "",
          "[Removed Lines]",
          "166:         Matrix newPatternMatrix;",
          "167:         newPatternMatrix = Matrix.getScaleInstance(",
          "",
          "[Added Lines]",
          "166:         Matrix newPatternMatrix = Matrix.getScaleInstance(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eac9f8f486650a669907bd6a6fdb408de3c4a5a0",
      "candidate_info": {
        "commit_hash": "eac9f8f486650a669907bd6a6fdb408de3c4a5a0",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/eac9f8f486650a669907bd6a6fdb408de3c4a5a0",
        "files": [
          "xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java"
        ],
        "message": "PDFBOX-4892: improve exception text\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888354 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java||xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java||xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java": [
          "File: xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java -> xmpbox/src/main/java/org/apache/xmpbox/xml/PdfaExtensionHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:         if (cprefix.equals(prefix) && !cnamespace.equals(namespace))",
          "84:         {",
          "86:         }",
          "87:         if (cnamespace.equals(namespace) && !cprefix.equals(prefix))",
          "88:         {",
          "90:         }",
          "91:     }",
          "",
          "[Removed Lines]",
          "85:             throw new XmpParsingException(ErrorType.InvalidPdfaSchema, \"Invalid PDF/A namespace definition\");",
          "89:             throw new XmpParsingException(ErrorType.InvalidPdfaSchema, \"Invalid PDF/A namespace definition\");",
          "",
          "[Added Lines]",
          "85:             throw new XmpParsingException(ErrorType.InvalidPdfaSchema,",
          "86:                     \"Invalid PDF/A namespace definition, \"",
          "87:                             + \"prefix: \" + prefix + \", namespace: \" + namespace);",
          "91:             throw new XmpParsingException(ErrorType.InvalidPdfaSchema,",
          "92:                     \"Invalid PDF/A namespace definition, \"",
          "93:                             + \"prefix: \" + prefix + \", namespace: \" + namespace);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f5aca115bc6c856b94eb8259bff703228e92179",
      "candidate_info": {
        "commit_hash": "9f5aca115bc6c856b94eb8259bff703228e92179",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/9f5aca115bc6c856b94eb8259bff703228e92179",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java"
        ],
        "message": "PDFBOX-4892: revert last revert, commit was good\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889470 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/AxialShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "176:         WritableRaster raster = getColorModel().createCompatibleWritableRaster(w, h);",
          "177:         boolean useBackground;",
          "178:         int[] data = new int[w * h * 4];",
          "179:         for (int j = 0; j < h; j++)",
          "180:         {",
          "181:             for (int i = 0; i < w; i++)",
          "182:             {",
          "183:                 useBackground = false;",
          "185:                 rat.transform(values, 0, values, 0, 1);",
          "186:                 double inputValue = x1x0 * (values[0] - coords[0]) + y1y0 * (values[1] - coords[1]);",
          "",
          "[Removed Lines]",
          "184:                 float[] values = new float[] { x + i, y + j };",
          "",
          "[Added Lines]",
          "179:         float[] values = new float[2];",
          "185:                 values[0] = x + i;",
          "186:                 values[1] = y + j;",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/shading/RadialShadingContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:         float inputValue = -1;",
          "183:         boolean useBackground;",
          "184:         int[] data = new int[w * h * 4];",
          "185:         for (int j = 0; j < h; j++)",
          "186:         {",
          "187:             for (int i = 0; i < w; i++)",
          "188:             {",
          "190:                 rat.transform(values, 0, values, 0, 1);",
          "191:                 useBackground = false;",
          "192:                 float[] inputValues = calculateInputValues(values[0], values[1]);",
          "",
          "[Removed Lines]",
          "189:                 float[] values = new float[] { x + i, y + j };",
          "",
          "[Added Lines]",
          "185:         float[] values = new float[2];",
          "190:                 values[0] = x + i;",
          "191:                 values[1] = y + j;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89b301a420996ec07354cb4fee1356a849f3789c",
      "candidate_info": {
        "commit_hash": "89b301a420996ec07354cb4fee1356a849f3789c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/89b301a420996ec07354cb4fee1356a849f3789c",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/cos/COSDictionaryTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java",
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java",
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java"
        ],
        "message": "PDFBOX-4892: SonarQube fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881492 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/cos/COSDictionaryTest.java||pdfbox/src/test/java/org/apache/pdfbox/cos/COSDictionaryTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java",
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java",
          "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/cos/COSDictionaryTest.java||pdfbox/src/test/java/org/apache/pdfbox/cos/COSDictionaryTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/cos/COSDictionaryTest.java -> pdfbox/src/test/java/org/apache/pdfbox/cos/COSDictionaryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.cos;",
          "20: import org.junit.Test;",
          "22: public class COSDictionaryTest",
          "",
          "[Removed Lines]",
          "19: import static org.junit.Assert.assertFalse;",
          "",
          "[Added Lines]",
          "19: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         cosDictionary.setItem(COSName.BE, COSName.BE);",
          "30:         cosDictionary.setInt(COSName.LENGTH, 0);",
          "31:         cosStream.setItem(COSName.BE, COSName.BE);",
          "34:     }",
          "35: }",
          "",
          "[Removed Lines]",
          "32:         assertFalse(\"a COSDictionary shall not be equal to a COSStream with the same dictionary entries\", cosDictionary.equals(cosStream));",
          "33:         assertFalse(\"a COSStream shall not be equal to a COSDictionary with the same dictionary entries\", cosStream.equals(cosDictionary));",
          "",
          "[Added Lines]",
          "32:         Assert.assertNotEquals(\"a COSDictionary shall not be equal to a COSStream with the same dictionary entries\", cosDictionary, cosStream);",
          "33:         Assert.assertNotEquals(\"a COSStream shall not be equal to a COSDictionary with the same dictionary entries\", cosStream, cosDictionary);",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java -> pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSFloat.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import junit.framework.TestSuite;",
          "28: import org.apache.pdfbox.pdfwriter.COSWriter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:                 COSFloat test2 = new COSFloat(num);",
          "114:                 COSFloat test3 = new COSFloat(num);",
          "125:                 float nf = Float.intBitsToFloat(Float.floatToIntBits(num) + 1);",
          "126:                 COSFloat test4 = new COSFloat(nf);",
          "128:             }",
          "129:         }.runTests();",
          "130:     }",
          "",
          "[Removed Lines]",
          "116:                 assertTrue(test1.equals(test1));",
          "118:                 assertTrue(test2.equals(test3));",
          "119:                 assertTrue(test1.equals(test2));",
          "121:                 assertTrue(test1.equals(test2));",
          "122:                 assertTrue(test2.equals(test3));",
          "123:                 assertTrue(test1.equals(test3));",
          "127:                 assertFalse(test4.equals(test1));",
          "",
          "[Added Lines]",
          "117:                 Assert.assertEquals(test1, test1);",
          "119:                 Assert.assertEquals(test2, test3);",
          "120:                 Assert.assertEquals(test1, test2);",
          "122:                 Assert.assertEquals(test1, test2);",
          "123:                 Assert.assertEquals(test2, test3);",
          "124:                 Assert.assertEquals(test1, test3);",
          "128:                 Assert.assertNotEquals(test4, test1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:         {",
          "138:             COSFloat test1 = new COSFloat(num);",
          "139:             COSFloat test2 = new COSFloat(num);",
          "142:             float nf = Float.intBitsToFloat(Float.floatToIntBits(num) + 1);",
          "143:             COSFloat test3 = new COSFloat(nf);",
          "145:         }",
          "146:     }",
          "",
          "[Removed Lines]",
          "140:             assertEquals(test1.hashCode(), test2.hashCode());",
          "144:             assertFalse(test3.hashCode() == test1.hashCode());",
          "",
          "[Added Lines]",
          "141:             Assert.assertEquals(test1.hashCode(), test2.hashCode());",
          "145:             assertNotSame(test3.hashCode(), test1.hashCode());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "181:             COSFloat testFloat = new COSFloat(num);",
          "185:         }",
          "187:     }",
          "",
          "[Removed Lines]",
          "184:             assertEquals(Float.toString(num), Double.toString(testFloat.doubleValue()));",
          "",
          "[Added Lines]",
          "185:             Assert.assertEquals(Float.toString(num), Double.toString(testFloat.doubleValue()));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199:         void runTest(float num)",
          "200:         {",
          "201:             COSFloat testFloat = new COSFloat(num);",
          "203:         }",
          "205:     }",
          "",
          "[Removed Lines]",
          "202:             assertEquals((int) num, testFloat.intValue());",
          "",
          "[Added Lines]",
          "203:             Assert.assertEquals((int) num, testFloat.intValue());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "277:         void runTest(float num)",
          "278:         {",
          "279:             COSFloat testFloat = new COSFloat(num);",
          "281:         }",
          "283:     }",
          "",
          "[Removed Lines]",
          "280:             assertEquals((long) num, testFloat.longValue());",
          "",
          "[Added Lines]",
          "281:             Assert.assertEquals((long) num, testFloat.longValue());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "300:             {",
          "301:                 COSFloat cosFloat = new COSFloat(num);",
          "302:                 cosFloat.accept(visitor);",
          "304:                 testByteArrays(floatToString(num).getBytes(\"ISO-8859-1\"), outStream.toByteArray());",
          "305:                 outStream.reset();",
          "306:             }",
          "",
          "[Removed Lines]",
          "303:                 assertEquals(floatToString(cosFloat.floatValue()), outStream.toString(\"ISO-8859-1\"));",
          "",
          "[Added Lines]",
          "304:                 Assert.assertEquals(floatToString(cosFloat.floatValue()), outStream.toString(\"ISO-8859-1\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "334:             {",
          "335:                 COSFloat cosFloat = new COSFloat(num);",
          "336:                 cosFloat.writePDF(outStream);",
          "339:                 testByteArrays(floatToString(num).getBytes(\"ISO-8859-1\"), outStream.toByteArray());",
          "340:                 outStream.reset();",
          "341:             }",
          "",
          "[Removed Lines]",
          "337:                 assertEquals(floatToString(cosFloat.floatValue()), outStream.toString(\"ISO-8859-1\"));",
          "338:                 assertEquals(floatToString(num), outStream.toString(\"ISO-8859-1\"));",
          "",
          "[Added Lines]",
          "338:                 Assert.assertEquals(floatToString(cosFloat.floatValue()), outStream.toString(\"ISO-8859-1\"));",
          "339:                 Assert.assertEquals(floatToString(num), outStream.toString(\"ISO-8859-1\"));",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java -> pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSInteger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import junit.framework.TestSuite;",
          "25: import org.apache.pdfbox.pdfwriter.COSWriter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:             COSInteger test2 = COSInteger.get(i);",
          "58:             COSInteger test3 = COSInteger.get(i);",
          "69:             COSInteger test4 = COSInteger.get(i + 1);",
          "71:         }",
          "72:     }",
          "",
          "[Removed Lines]",
          "60:             assertTrue(test1.equals(test1));",
          "62:             assertTrue(test2.equals(test1));",
          "63:             assertTrue(test1.equals(test2));",
          "65:             assertTrue(test1.equals(test2));",
          "66:             assertTrue(test2.equals(test3));",
          "67:             assertTrue(test1.equals(test3));",
          "70:             assertFalse(test4.equals(test1));",
          "",
          "[Added Lines]",
          "61:             Assert.assertEquals(test1, test1);",
          "63:             Assert.assertEquals(test2, test1);",
          "64:             Assert.assertEquals(test1, test2);",
          "66:             Assert.assertEquals(test1, test2);",
          "67:             Assert.assertEquals(test2, test3);",
          "68:             Assert.assertEquals(test1, test3);",
          "71:             Assert.assertNotEquals(test4, test1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:         {",
          "82:             COSInteger test1 = COSInteger.get(i);",
          "83:             COSInteger test2 = COSInteger.get(i);",
          "86:             COSInteger test3 = COSInteger.get(i + 1);",
          "88:         }",
          "89:     }",
          "",
          "[Removed Lines]",
          "84:             assertEquals(test1.hashCode(), test2.hashCode());",
          "87:             assertFalse(test3.hashCode() == test1.hashCode());",
          "",
          "[Added Lines]",
          "85:             Assert.assertEquals(test1.hashCode(), test2.hashCode());",
          "88:             assertNotSame(test3.hashCode(), test1.hashCode());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:     {",
          "112:         for (int i = -1000; i < 3000; i += 200)",
          "113:         {",
          "115:         }",
          "116:     }",
          "",
          "[Removed Lines]",
          "114:             assertEquals(i, COSInteger.get(i).intValue());",
          "",
          "[Added Lines]",
          "115:             Assert.assertEquals(i, COSInteger.get(i).intValue());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:     {",
          "121:         for (int i = -1000; i < 3000; i += 200)",
          "122:         {",
          "124:         }",
          "125:     }",
          "",
          "[Removed Lines]",
          "123:             assertEquals((long) i, COSInteger.get(i).longValue());",
          "",
          "[Added Lines]",
          "124:             Assert.assertEquals((long) i, COSInteger.get(i).longValue());",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java||pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java -> pdfbox/src/test/java/org/apache/pdfbox/cos/TestCOSString.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import junit.framework.TestSuite;",
          "26: import org.apache.pdfbox.pdfwriter.COSWriter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.junit.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         {",
          "101:             fail(\"IOException: \" + e.getMessage());",
          "102:         }",
          "104:     }",
          "",
          "[Removed Lines]",
          "103:         assertEquals(expected, outStream.toString());",
          "",
          "[Added Lines]",
          "104:         Assert.assertEquals(expected, outStream.toString());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:         String expected = \"Test subject for testing getHex\";",
          "151:         COSString test1 = new COSString(expected);",
          "152:         String hexForm = createHex(expected);",
          "154:         COSString escCS = new COSString(ESC_CHAR_STRING);",
          "158:     }",
          "",
          "[Removed Lines]",
          "153:         assertEquals(hexForm, test1.toHexString());",
          "157:         assertEquals(createHex(ESC_CHAR_STRING), escCS.toHexString());",
          "",
          "[Added Lines]",
          "154:         Assert.assertEquals(hexForm, test1.toHexString());",
          "158:         Assert.assertEquals(createHex(ESC_CHAR_STRING), escCS.toHexString());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "166:         {",
          "167:             String testStr = \"Test subject for getString()\";",
          "168:             COSString test1 = new COSString(testStr);",
          "171:             COSString hexStr = COSString.parseHex(createHex(testStr));",
          "174:             COSString escapedString = new COSString(ESC_CHAR_STRING);",
          "177:             testStr = \"Line1\\nLine2\\nLine3\\n\";",
          "178:             COSString lineFeedString = new COSString(testStr);",
          "180:         }",
          "181:         catch (IOException e)",
          "182:         {",
          "",
          "[Removed Lines]",
          "169:             assertEquals(testStr, test1.getString());",
          "172:             assertEquals(testStr, hexStr.getString());",
          "175:             assertEquals(ESC_CHAR_STRING, escapedString.getString());",
          "179:             assertEquals(testStr, lineFeedString.getString());",
          "",
          "[Added Lines]",
          "170:             Assert.assertEquals(testStr, test1.getString());",
          "173:             Assert.assertEquals(testStr, hexStr.getString());",
          "176:             Assert.assertEquals(ESC_CHAR_STRING, escapedString.getString());",
          "180:             Assert.assertEquals(testStr, lineFeedString.getString());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "227:         COSString stringAscii = new COSString( textAscii );",
          "230:         COSString string8Bit = new COSString( text8Bit );",
          "233:         COSString stringHighBits = new COSString( textHighBits );",
          "248:         ByteArrayOutputStream out = new ByteArrayOutputStream();",
          "249:         COSWriter.writeString(stringAscii, out);",
          "252:         out.reset();",
          "253:         COSWriter.writeString(string8Bit, out);",
          "",
          "[Removed Lines]",
          "228:         assertEquals( stringAscii.getString(), textAscii );",
          "231:         assertEquals( string8Bit.getString(), text8Bit );",
          "234:         assertEquals( stringHighBits.getString(), textHighBits );",
          "239:         assertEquals(textAscii, new String(stringAscii.getBytes(), \"ISO-8859-1\"));",
          "241:         assertEquals(text8Bit, new String(string8Bit.getBytes(), \"ISO-8859-1\"));",
          "244:         assertEquals(textHighBits, new String(stringHighBits.getBytes(), \"UnicodeBig\"));",
          "250:         assertEquals(\"(\" + textAscii + \")\", new String(out.toByteArray(), \"ASCII\"));",
          "",
          "[Added Lines]",
          "229:         Assert.assertEquals( stringAscii.getString(), textAscii );",
          "232:         Assert.assertEquals( string8Bit.getString(), text8Bit );",
          "235:         Assert.assertEquals( stringHighBits.getString(), textHighBits );",
          "240:         Assert.assertEquals(textAscii, new String(stringAscii.getBytes(), \"ISO-8859-1\"));",
          "242:         Assert.assertEquals(text8Bit, new String(string8Bit.getBytes(), \"ISO-8859-1\"));",
          "245:         Assert.assertEquals(textHighBits, new String(stringHighBits.getBytes(), \"UnicodeBig\"));",
          "251:         Assert.assertEquals(\"(\" + textAscii + \")\", new String(out.toByteArray(), \"ASCII\"));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "256:         {",
          "257:            hex.append( Integer.toHexString(c).toUpperCase() );",
          "258:         }",
          "261:         out.reset();",
          "262:         COSWriter.writeString(stringHighBits, out);",
          "",
          "[Removed Lines]",
          "259:         assertEquals(\"<\"+hex.toString()+\">\", new String(out.toByteArray(), \"ASCII\"));",
          "",
          "[Added Lines]",
          "260:         Assert.assertEquals(\"<\"+hex.toString()+\">\", new String(out.toByteArray(), \"ASCII\"));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "266:         {",
          "267:            hex.append( Integer.toHexString(c).toUpperCase() );",
          "268:         }",
          "270:     }",
          "272:     @Override",
          "",
          "[Removed Lines]",
          "269:         assertEquals(\"<\"+hex.toString()+\">\", new String(out.toByteArray(), \"ASCII\"));",
          "",
          "[Added Lines]",
          "270:         Assert.assertEquals(\"<\"+hex.toString()+\">\", new String(out.toByteArray(), \"ASCII\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "276:         ICOSVisitor visitor = new COSWriter(outStream);",
          "277:         COSString testSubj = new COSString(ESC_CHAR_STRING);",
          "278:         testSubj.accept(visitor);",
          "280:         outStream.reset();",
          "281:         testSubj.setForceHexForm(true);",
          "282:         testSubj.accept(visitor);",
          "284:     }",
          "",
          "[Removed Lines]",
          "279:         assertEquals(\"(\" + ESC_CHAR_STRING_PDF_FORMAT + \")\", outStream.toString());",
          "283:         assertEquals(\"<\" + createHex(ESC_CHAR_STRING) + \">\", outStream.toString());",
          "",
          "[Added Lines]",
          "280:         Assert.assertEquals(\"(\" + ESC_CHAR_STRING_PDF_FORMAT + \")\", outStream.toString());",
          "284:         Assert.assertEquals(\"<\" + createHex(ESC_CHAR_STRING) + \">\", outStream.toString());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "293:         {",
          "295:             COSString x1 = new COSString(\"Test\");",
          "299:             COSString y1 = new COSString(\"Test\");",
          "302:             COSString x2 = new COSString(\"Test\");",
          "303:             x2.setForceHexForm(true);",
          "309:             COSString z1 = new COSString(\"Test\");",
          "317:         }",
          "318:     }",
          "",
          "[Removed Lines]",
          "296:             assertTrue(x1.equals(x1));",
          "300:             assertTrue(x1.equals(y1));",
          "301:             assertTrue(y1.equals(x1));",
          "305:             assertFalse(x1.equals(x2));",
          "306:             assertFalse(x2.equals(x1));",
          "310:             assertTrue(x1.equals(y1));",
          "311:             assertTrue(y1.equals(z1));",
          "312:             assertTrue(x1.equals(z1));",
          "314:             assertTrue(x1.equals(y1));",
          "315:             assertFalse(y1.equals(x2));",
          "316:             assertFalse(x1.equals(x2));",
          "",
          "[Added Lines]",
          "297:             Assert.assertEquals(x1, x1);",
          "301:             Assert.assertEquals(x1, y1);",
          "302:             Assert.assertEquals(y1, x1);",
          "306:             Assert.assertNotEquals(x1, x2);",
          "307:             Assert.assertNotEquals(x2, x1);",
          "311:             Assert.assertEquals(x1, y1);",
          "312:             Assert.assertEquals(y1, z1);",
          "313:             Assert.assertEquals(x1, z1);",
          "315:             Assert.assertEquals(x1, y1);",
          "316:             Assert.assertNotEquals(y1, x2);",
          "317:             Assert.assertNotEquals(x1, x2);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "324:     {",
          "325:         COSString str1 = new COSString(\"Test1\");",
          "326:         COSString str2 = new COSString(\"Test2\");",
          "328:         COSString str3 = new COSString(\"Test1\");",
          "330:         str3.setForceHexForm(true);",
          "332:     }",
          "",
          "[Removed Lines]",
          "327:         assertFalse(str1.hashCode() == str2.hashCode());",
          "329:         assertTrue(str1.hashCode() == str3.hashCode());",
          "331:         assertFalse(str1.hashCode() == str3.hashCode());",
          "",
          "[Added Lines]",
          "328:         Assert.assertNotEquals(str1.hashCode(), str2.hashCode());",
          "330:         Assert.assertEquals(str1.hashCode(), str3.hashCode());",
          "332:         Assert.assertNotEquals(str1.hashCode(), str3.hashCode());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "339:     {",
          "340:         COSString test1 = COSString.parseHex(\"000000FF000000\");",
          "341:         COSString test2 = COSString.parseHex(\"000000FF00FFFF\");",
          "345:         assertFalse(Arrays.equals(test1.getBytes(), test2.getBytes()));",
          "349:     }",
          "",
          "[Removed Lines]",
          "342:         assertEquals(test1, test1);",
          "343:         assertEquals(test2, test2);",
          "344:         assertFalse(test1.toHexString().equals(test2.toHexString()));",
          "346:         assertFalse(test1.equals(test2));",
          "347:         assertFalse(test2.equals(test1));",
          "348:         assertFalse(test1.getString().equals(test2.getString()));",
          "",
          "[Added Lines]",
          "343:         Assert.assertEquals(test1, test1);",
          "344:         Assert.assertEquals(test2, test2);",
          "345:         Assert.assertNotEquals(test1.toHexString(), test2.toHexString());",
          "347:         Assert.assertNotEquals(test1, test2);",
          "348:         Assert.assertNotEquals(test2, test1);",
          "349:         Assert.assertNotEquals(test1.getString(), test2.getString());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "423c04895678c56de617287f7f6e68555c058761",
      "candidate_info": {
        "commit_hash": "423c04895678c56de617287f7f6e68555c058761",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/423c04895678c56de617287f7f6e68555c058761",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Overlay.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889679 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Overlay.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/Overlay.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/multipdf/Overlay.java||pdfbox/src/main/java/org/apache/pdfbox/multipdf/Overlay.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/multipdf/Overlay.java -> pdfbox/src/main/java/org/apache/pdfbox/multipdf/Overlay.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:         for (PDPage page : document.getPages())",
          "370:         {",
          "371:             pageCounter++;",
          "375:             LayoutPage layoutPage = getLayoutPage(pageCounter, document.getNumberOfPages());",
          "376:             if (layoutPage == null)",
          "377:             {",
          "378:                 continue;",
          "379:             }",
          "380:             switch (position)",
          "381:             {",
          "382:                 case FOREGROUND:",
          "",
          "[Removed Lines]",
          "372:             COSDictionary pageDictionary = page.getCOSObject();",
          "373:             COSBase originalContent = pageDictionary.getDictionaryObject(COSName.CONTENTS);",
          "374:             COSArray newContentArray = new COSArray();",
          "",
          "[Added Lines]",
          "377:             COSDictionary pageDictionary = page.getCOSObject();",
          "378:             COSBase originalContent = pageDictionary.getDictionaryObject(COSName.CONTENTS);",
          "379:             COSArray newContentArray = new COSArray();",
          "",
          "---------------"
        ]
      }
    }
  ]
}