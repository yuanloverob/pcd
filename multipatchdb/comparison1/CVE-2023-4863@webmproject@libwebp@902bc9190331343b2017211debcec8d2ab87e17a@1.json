{
  "cve_id": "CVE-2023-4863",
  "cve_desc": "Heap buffer overflow in libwebp in Google Chrome prior to 116.0.5845.187 and libwebp 1.3.2 allowed a remote attacker to perform an out of bounds memory write via a crafted HTML page. (Chromium security severity: Critical)",
  "repo": "webmproject/libwebp",
  "patch_hash": "902bc9190331343b2017211debcec8d2ab87e17a",
  "patch_info": {
    "commit_hash": "902bc9190331343b2017211debcec8d2ab87e17a",
    "repo": "webmproject/libwebp",
    "commit_url": "https://github.com/webmproject/libwebp/commit/902bc9190331343b2017211debcec8d2ab87e17a",
    "files": [
      "src/dec/vp8l_dec.c",
      "src/dec/vp8li_dec.h",
      "src/utils/huffman_utils.c",
      "src/utils/huffman_utils.h"
    ],
    "message": "Fix OOB write in BuildHuffmanTable.\n\nFirst, BuildHuffmanTable is called to check if the data is valid.\nIf it is and the table is not big enough, more memory is allocated.\n\nThis will make sure that valid (but unoptimized because of unbalanced\ncodes) streams are still decodable.\n\nBug: chromium:1479274\nChange-Id: I31c36dbf3aa78d35ecf38706b50464fd3d375741",
    "before_after_code_files": [
      "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
      "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
      "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
      "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
    ]
  },
  "patch_diff": {
    "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c": [
      "File: src/dec/vp8l_dec.c -> src/dec/vp8l_dec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "262:   int symbol;",
      "263:   int max_symbol;",
      "264:   int prev_code_len = DEFAULT_CODE_LENGTH;",
      "270:     goto End;",
      "271:   }",
      "",
      "[Removed Lines]",
      "265:   HuffmanCode table[1 << LENGTHS_TABLE_BITS];",
      "267:   if (!VP8LBuildHuffmanTable(table, LENGTHS_TABLE_BITS,",
      "268:                              code_length_code_lengths,",
      "269:                              NUM_CODE_LENGTH_CODES)) {",
      "",
      "[Added Lines]",
      "265:   HuffmanTables tables;",
      "267:   if (!VP8LHuffmanTablesAllocate(1 << LENGTHS_TABLE_BITS, &tables) ||",
      "268:       !VP8LBuildHuffmanTable(&tables, LENGTHS_TABLE_BITS,",
      "269:                              code_length_code_lengths, NUM_CODE_LENGTH_CODES)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "286:     int code_len;",
      "287:     if (max_symbol-- == 0) break;",
      "288:     VP8LFillBitWindow(br);",
      "290:     VP8LSetBitPos(br, br->bit_pos_ + p->bits);",
      "291:     code_len = p->value;",
      "292:     if (code_len < kCodeLengthLiterals) {",
      "",
      "[Removed Lines]",
      "289:     p = &table[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
      "",
      "[Added Lines]",
      "289:     p = &tables.curr_segment->start[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "309:   ok = 1;",
      "311:  End:",
      "312:   if (!ok) return VP8LSetError(dec, VP8_STATUS_BITSTREAM_ERROR);",
      "313:   return ok;",
      "314: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "312:   VP8LHuffmanTablesDeallocate(&tables);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "318: static int ReadHuffmanCode(int alphabet_size, VP8LDecoder* const dec,",
      "320:   int ok = 0;",
      "321:   int size = 0;",
      "322:   VP8LBitReader* const br = &dec->br_;",
      "",
      "[Removed Lines]",
      "319:                            int* const code_lengths, HuffmanCode* const table) {",
      "",
      "[Added Lines]",
      "320:                            int* const code_lengths,",
      "321:                            HuffmanTables* const table) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "367:   VP8LMetadata* const hdr = &dec->hdr_;",
      "368:   uint32_t* huffman_image = NULL;",
      "369:   HTreeGroup* htree_groups = NULL;",
      "372:   int num_htree_groups = 1;",
      "373:   int num_htree_groups_max = 1;",
      "374:   const int max_alphabet_size =",
      "",
      "[Removed Lines]",
      "370:   HuffmanCode* huffman_tables = NULL;",
      "371:   HuffmanCode* huffman_table = NULL;",
      "",
      "[Added Lines]",
      "372:   HuffmanTables* huffman_tables = &hdr->huffman_tables_;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "378:   int* mapping = NULL;",
      "379:   int ok = 0;",
      "381:   if (allow_recursion && VP8LReadBits(br, 1)) {",
      "383:     const int huffman_precision = VP8LReadBits(br, 3) + 2;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:   assert(huffman_tables->root.start == NULL);",
      "384:   assert(huffman_tables->curr_segment == NULL);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "430:   code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,",
      "431:                                       sizeof(*code_lengths));",
      "434:   htree_groups = VP8LHtreeGroupsNew(num_htree_groups);",
      "437:     VP8LSetError(dec, VP8_STATUS_OUT_OF_MEMORY);",
      "438:     goto Error;",
      "439:   }",
      "442:   for (i = 0; i < num_htree_groups_max; ++i) {",
      "",
      "[Removed Lines]",
      "432:   huffman_tables = (HuffmanCode*)WebPSafeMalloc(num_htree_groups * table_size,",
      "433:                                                 sizeof(*huffman_tables));",
      "436:   if (htree_groups == NULL || code_lengths == NULL || huffman_tables == NULL) {",
      "441:   huffman_table = huffman_tables;",
      "",
      "[Added Lines]",
      "439:   if (htree_groups == NULL || code_lengths == NULL ||",
      "440:       !VP8LHuffmanTablesAllocate(num_htree_groups * table_size,",
      "441:                                  huffman_tables)) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "463:       int max_bits = 0;",
      "464:       for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {",
      "465:         int alphabet_size = kAlphabetSize[j];",
      "467:         if (j == 0 && color_cache_bits > 0) {",
      "468:           alphabet_size += (1 << color_cache_bits);",
      "469:         }",
      "471:         if (size == 0) {",
      "472:           goto Error;",
      "473:         }",
      "474:         if (is_trivial_literal && kLiteralMap[j] == 1) {",
      "476:         }",
      "479:         if (j <= ALPHA) {",
      "480:           int local_max_bits = code_lengths[0];",
      "481:           int k;",
      "",
      "[Removed Lines]",
      "466:         htrees[j] = huffman_table;",
      "470:         size = ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_table);",
      "475:           is_trivial_literal = (huffman_table->bits == 0);",
      "477:         total_size += huffman_table->bits;",
      "478:         huffman_table += size;",
      "",
      "[Added Lines]",
      "473:         size =",
      "474:             ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_tables);",
      "475:         htrees[j] = huffman_tables->curr_segment->curr_table;",
      "480:           is_trivial_literal = (htrees[j]->bits == 0);",
      "482:         total_size += htrees[j]->bits;",
      "483:         huffman_tables->curr_segment->curr_table += size;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "510:   hdr->huffman_image_ = huffman_image;",
      "511:   hdr->num_htree_groups_ = num_htree_groups;",
      "512:   hdr->htree_groups_ = htree_groups;",
      "515:  Error:",
      "516:   WebPSafeFree(code_lengths);",
      "517:   WebPSafeFree(mapping);",
      "518:   if (!ok) {",
      "519:     WebPSafeFree(huffman_image);",
      "521:     VP8LHtreeGroupsFree(htree_groups);",
      "522:   }",
      "523:   return ok;",
      "",
      "[Removed Lines]",
      "513:   hdr->huffman_tables_ = huffman_tables;",
      "520:     WebPSafeFree(huffman_tables);",
      "",
      "[Added Lines]",
      "524:     VP8LHuffmanTablesDeallocate(huffman_tables);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1352:   assert(hdr != NULL);",
      "1354:   WebPSafeFree(hdr->huffman_image_);",
      "1356:   VP8LHtreeGroupsFree(hdr->htree_groups_);",
      "1357:   VP8LColorCacheClear(&hdr->color_cache_);",
      "1358:   VP8LColorCacheClear(&hdr->saved_color_cache_);",
      "",
      "[Removed Lines]",
      "1355:   WebPSafeFree(hdr->huffman_tables_);",
      "",
      "[Added Lines]",
      "1359:   VP8LHuffmanTablesDeallocate(&hdr->huffman_tables_);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1667:   if (dec == NULL) return 0;",
      "1670:   assert(dec->hdr_.htree_groups_ != NULL);",
      "1671:   assert(dec->hdr_.num_htree_groups_ > 0);",
      "",
      "[Removed Lines]",
      "1669:   assert(dec->hdr_.huffman_tables_ != NULL);",
      "",
      "[Added Lines]",
      "1673:   assert(dec->hdr_.huffman_tables_.root.start != NULL);",
      "",
      "---------------"
    ],
    "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h": [
      "File: src/dec/vp8li_dec.h -> src/dec/vp8li_dec.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "51:   uint32_t*       huffman_image_;",
      "52:   int             num_htree_groups_;",
      "53:   HTreeGroup*     htree_groups_;",
      "55: } VP8LMetadata;",
      "57: typedef struct VP8LDecoder VP8LDecoder;",
      "",
      "[Removed Lines]",
      "54:   HuffmanCode*    huffman_tables_;",
      "",
      "[Added Lines]",
      "54:   HuffmanTables   huffman_tables_;",
      "",
      "---------------"
    ],
    "src/utils/huffman_utils.c||src/utils/huffman_utils.c": [
      "File: src/utils/huffman_utils.c -> src/utils/huffman_utils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:       if (num_open < 0) {",
      "178:         return 0;",
      "179:       }",
      "181:       for (; count[len] > 0; --count[len]) {",
      "182:         HuffmanCode code;",
      "183:         if ((key & mask) != low) {",
      "185:           table_bits = NextTableBitSize(count, len, root_bits);",
      "186:           table_size = 1 << table_bits;",
      "187:           total_size += table_size;",
      "188:           low = key & mask;",
      "191:         }",
      "195:         key = GetNextKey(key, len);",
      "196:       }",
      "197:     }",
      "",
      "[Removed Lines]",
      "180:       if (root_table == NULL) continue;",
      "184:           table += table_size;",
      "189:           root_table[low].bits = (uint8_t)(table_bits + root_bits);",
      "190:           root_table[low].value = (uint16_t)((table - root_table) - low);",
      "192:         code.bits = (uint8_t)(len - root_bits);",
      "193:         code.value = (uint16_t)sorted[symbol++];",
      "194:         ReplicateValue(&table[key >> root_bits], step, table_size, code);",
      "",
      "[Added Lines]",
      "183:           if (root_table != NULL) table += table_size;",
      "188:           if (root_table != NULL) {",
      "189:             root_table[low].bits = (uint8_t)(table_bits + root_bits);",
      "190:             root_table[low].value = (uint16_t)((table - root_table) - low);",
      "191:           }",
      "192:         }",
      "193:         if (root_table != NULL) {",
      "194:           code.bits = (uint8_t)(len - root_bits);",
      "195:           code.value = (uint16_t)sorted[symbol++];",
      "196:           ReplicateValue(&table[key >> root_bits], step, table_size, code);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "211:   ((1 << MAX_CACHE_BITS) + NUM_LITERAL_CODES + NUM_LENGTH_CODES)",
      "213: #define SORTED_SIZE_CUTOFF 512",
      "215:                           const int code_lengths[], int code_lengths_size) {",
      "217:   assert(code_lengths_size <= MAX_CODE_LENGTHS_SIZE);",
      "223:     uint16_t sorted[SORTED_SIZE_CUTOFF];",
      "227:     uint16_t* const sorted =",
      "228:         (uint16_t*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));",
      "229:     if (sorted == NULL) return 0;",
      "232:     WebPSafeFree(sorted);",
      "233:   }",
      "234:   return total_size;",
      "235: }",
      "",
      "[Removed Lines]",
      "214: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
      "216:   int total_size;",
      "218:   if (root_table == NULL) {",
      "219:     total_size = BuildHuffmanTable(NULL, root_bits,",
      "220:                                    code_lengths, code_lengths_size, NULL);",
      "221:   } else if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
      "224:     total_size = BuildHuffmanTable(root_table, root_bits,",
      "225:                                    code_lengths, code_lengths_size, sorted);",
      "226:   } else {   // rare case. Use heap allocation.",
      "230:     total_size = BuildHuffmanTable(root_table, root_bits,",
      "231:                                    code_lengths, code_lengths_size, sorted);",
      "",
      "[Added Lines]",
      "217: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
      "219:   const int total_size =",
      "220:       BuildHuffmanTable(NULL, root_bits, code_lengths, code_lengths_size, NULL);",
      "222:   if (total_size == 0 || root_table == NULL) return total_size;",
      "224:   if (root_table->curr_segment->curr_table + total_size >=",
      "225:       root_table->curr_segment->start + root_table->curr_segment->size) {",
      "229:     const int segment_size = root_table->curr_segment->size;",
      "230:     struct HuffmanTablesSegment* next =",
      "231:         (HuffmanTablesSegment*)WebPSafeMalloc(1, sizeof(*next));",
      "232:     if (next == NULL) return 0;",
      "237:     next->size = total_size > segment_size ? total_size : segment_size;",
      "238:     next->start =",
      "239:         (HuffmanCode*)WebPSafeMalloc(next->size, sizeof(*next->start));",
      "240:     if (next->start == NULL) {",
      "241:       WebPSafeFree(next);",
      "242:       return 0;",
      "243:     }",
      "244:     next->curr_table = next->start;",
      "245:     next->next = NULL;",
      "247:     root_table->curr_segment->next = next;",
      "248:     root_table->curr_segment = next;",
      "249:   }",
      "250:   if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
      "253:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
      "254:                       code_lengths, code_lengths_size, sorted);",
      "255:   } else {  // rare case. Use heap allocation.",
      "259:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
      "260:                       code_lengths, code_lengths_size, sorted);",
      "266: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables) {",
      "268:   HuffmanTablesSegment* const root = &huffman_tables->root;",
      "269:   huffman_tables->curr_segment = root;",
      "271:   root->start = (HuffmanCode*)WebPSafeMalloc(size, sizeof(*root->start));",
      "272:   if (root->start == NULL) return 0;",
      "273:   root->curr_table = root->start;",
      "274:   root->next = NULL;",
      "275:   root->size = size;",
      "276:   return 1;",
      "277: }",
      "279: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables) {",
      "280:   HuffmanTablesSegment *current, *next;",
      "281:   if (huffman_tables == NULL) return;",
      "283:   current = &huffman_tables->root;",
      "284:   next = current->next;",
      "285:   WebPSafeFree(current->start);",
      "286:   current->start = NULL;",
      "287:   current->next = NULL;",
      "288:   current = next;",
      "290:   while (current != NULL) {",
      "291:     next = current->next;",
      "292:     WebPSafeFree(current->start);",
      "293:     WebPSafeFree(current);",
      "294:     current = next;",
      "295:   }",
      "296: }",
      "",
      "---------------"
    ],
    "src/utils/huffman_utils.h||src/utils/huffman_utils.h": [
      "File: src/utils/huffman_utils.h -> src/utils/huffman_utils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: } HuffmanCode32;",
      "46: #define HUFFMAN_PACKED_BITS 6",
      "47: #define HUFFMAN_PACKED_TABLE_SIZE (1u << HUFFMAN_PACKED_BITS)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47: typedef struct HuffmanTablesSegment {",
      "48:   HuffmanCode* start;",
      "51:   HuffmanCode* curr_table;",
      "53:   struct HuffmanTablesSegment* next;",
      "54:   int size;",
      "55: } HuffmanTablesSegment;",
      "58: typedef struct HuffmanTables {",
      "59:   HuffmanTablesSegment root;",
      "61:   HuffmanTablesSegment* curr_segment;",
      "62: } HuffmanTables;",
      "66: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables);",
      "67: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:                           const int code_lengths[], int code_lengths_size);",
      "86: #ifdef __cplusplus",
      "",
      "[Removed Lines]",
      "83: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
      "",
      "[Added Lines]",
      "104: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "90d47113bc875996c3cb3700eb58bb75091b9286",
      "candidate_info": {
        "commit_hash": "90d47113bc875996c3cb3700eb58bb75091b9286",
        "repo": "webmproject/libwebp",
        "commit_url": "https://github.com/webmproject/libwebp/commit/90d47113bc875996c3cb3700eb58bb75091b9286",
        "files": [
          "src/dec/vp8l.c",
          "src/dec/vp8li.h",
          "src/utils/huffman.c",
          "src/utils/huffman.h"
        ],
        "message": "Fix OOB write in BuildHuffmanTable.\n\nFirst, BuildHuffmanTable is called to check if the data is valid.\nIf it is and the table is not big enough, more memory is allocated.\n\nThis will make sure that valid (but unoptimized because of unbalanced\ncodes) streams are still decodable.\n(cherry picked from commit 902bc91)\n\nChange-Id: I3abe4db460dcac62c14a84832284c0b530630af2",
        "before_after_code_files": [
          "src/dec/vp8l.c||src/dec/vp8l.c",
          "src/dec/vp8li.h||src/dec/vp8li.h",
          "src/utils/huffman.c||src/utils/huffman.c",
          "src/utils/huffman.h||src/utils/huffman.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/dec/vp8l.c||src/dec/vp8l.c": [
          "File: src/dec/vp8l.c -> src/dec/vp8l.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "252:   int symbol;",
          "253:   int max_symbol;",
          "254:   int prev_code_len = DEFAULT_CODE_LENGTH;",
          "260:     goto End;",
          "261:   }",
          "",
          "[Removed Lines]",
          "255:   HuffmanCode table[1 << LENGTHS_TABLE_BITS];",
          "257:   if (!VP8LBuildHuffmanTable(table, LENGTHS_TABLE_BITS,",
          "258:                              code_length_code_lengths,",
          "259:                              NUM_CODE_LENGTH_CODES)) {",
          "",
          "[Added Lines]",
          "255:   HuffmanTables tables;",
          "257:   if (!VP8LHuffmanTablesAllocate(1 << LENGTHS_TABLE_BITS, &tables) ||",
          "258:       !VP8LBuildHuffmanTable(&tables, LENGTHS_TABLE_BITS,",
          "259:                              code_length_code_lengths, NUM_CODE_LENGTH_CODES)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:     int code_len;",
          "277:     if (max_symbol-- == 0) break;",
          "278:     VP8LFillBitWindow(br);",
          "280:     VP8LSetBitPos(br, br->bit_pos_ + p->bits);",
          "281:     code_len = p->value;",
          "282:     if (code_len < kCodeLengthLiterals) {",
          "",
          "[Removed Lines]",
          "279:     p = &table[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "[Added Lines]",
          "279:     p = &tables.curr_segment->start[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "299:   ok = 1;",
          "301:  End:",
          "302:   if (!ok) dec->status_ = VP8_STATUS_BITSTREAM_ERROR;",
          "303:   return ok;",
          "304: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:   VP8LHuffmanTablesDeallocate(&tables);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "308: static int ReadHuffmanCode(int alphabet_size, VP8LDecoder* const dec,",
          "310:   int ok = 0;",
          "311:   int size = 0;",
          "312:   VP8LBitReader* const br = &dec->br_;",
          "",
          "[Removed Lines]",
          "309:                            int* const code_lengths, HuffmanCode* const table) {",
          "",
          "[Added Lines]",
          "310:                            int* const code_lengths,",
          "311:                            HuffmanTables* const table) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "361:   VP8LMetadata* const hdr = &dec->hdr_;",
          "362:   uint32_t* huffman_image = NULL;",
          "363:   HTreeGroup* htree_groups = NULL;",
          "366:   int num_htree_groups = 1;",
          "367:   int num_htree_groups_max = 1;",
          "368:   int max_alphabet_size = 0;",
          "",
          "[Removed Lines]",
          "364:   HuffmanCode* huffman_tables = NULL;",
          "365:   HuffmanCode* huffman_table = NULL;",
          "",
          "[Added Lines]",
          "366:   HuffmanTables* huffman_tables = &hdr->huffman_tables_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "371:   int* mapping = NULL;",
          "372:   int ok = 0;",
          "374:   if (allow_recursion && VP8LReadBits(br, 1)) {",
          "376:     const int huffman_precision = VP8LReadBits(br, 3) + 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:   assert(huffman_tables->root.start == NULL);",
          "377:   assert(huffman_tables->curr_segment == NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "431:     }",
          "432:   }",
          "436:   htree_groups = VP8LHtreeGroupsNew(num_htree_groups);",
          "437:   code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,",
          "438:                                       sizeof(*code_lengths));",
          "441:     dec->status_ = VP8_STATUS_OUT_OF_MEMORY;",
          "442:     goto Error;",
          "443:   }",
          "446:   for (i = 0; i < num_htree_groups_max; ++i) {",
          "",
          "[Removed Lines]",
          "434:   huffman_tables = (HuffmanCode*)WebPSafeMalloc(num_htree_groups * table_size,",
          "435:                                                 sizeof(*huffman_tables));",
          "440:   if (htree_groups == NULL || code_lengths == NULL || huffman_tables == NULL) {",
          "445:   huffman_table = huffman_tables;",
          "",
          "[Added Lines]",
          "443:   if (htree_groups == NULL || code_lengths == NULL ||",
          "444:       !VP8LHuffmanTablesAllocate(num_htree_groups * table_size,",
          "445:                                  huffman_tables)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "467:       int max_bits = 0;",
          "468:       for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {",
          "469:         int alphabet_size = kAlphabetSize[j];",
          "471:         if (j == 0 && color_cache_bits > 0) {",
          "472:           alphabet_size += (1 << color_cache_bits);",
          "473:         }",
          "475:         if (size == 0) {",
          "476:           goto Error;",
          "477:         }",
          "478:         if (is_trivial_literal && kLiteralMap[j] == 1) {",
          "480:         }",
          "483:         if (j <= ALPHA) {",
          "484:           int local_max_bits = code_lengths[0];",
          "485:           int k;",
          "",
          "[Removed Lines]",
          "470:         htrees[j] = huffman_table;",
          "474:         size = ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_table);",
          "479:           is_trivial_literal = (huffman_table->bits == 0);",
          "481:         total_size += huffman_table->bits;",
          "482:         huffman_table += size;",
          "",
          "[Added Lines]",
          "477:         size =",
          "478:             ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_tables);",
          "479:         htrees[j] = huffman_tables->curr_segment->curr_table;",
          "484:           is_trivial_literal = (htrees[j]->bits == 0);",
          "486:         total_size += htrees[j]->bits;",
          "487:         huffman_tables->curr_segment->curr_table += size;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "514:   hdr->huffman_image_ = huffman_image;",
          "515:   hdr->num_htree_groups_ = num_htree_groups;",
          "516:   hdr->htree_groups_ = htree_groups;",
          "519:  Error:",
          "520:   WebPSafeFree(code_lengths);",
          "521:   WebPSafeFree(mapping);",
          "522:   if (!ok) {",
          "523:     WebPSafeFree(huffman_image);",
          "525:     VP8LHtreeGroupsFree(htree_groups);",
          "526:   }",
          "527:   return ok;",
          "",
          "[Removed Lines]",
          "517:   hdr->huffman_tables_ = huffman_tables;",
          "524:     WebPSafeFree(huffman_tables);",
          "",
          "[Added Lines]",
          "528:     VP8LHuffmanTablesDeallocate(huffman_tables);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1329:   assert(hdr != NULL);",
          "1331:   WebPSafeFree(hdr->huffman_image_);",
          "1333:   VP8LHtreeGroupsFree(hdr->htree_groups_);",
          "1334:   VP8LColorCacheClear(&hdr->color_cache_);",
          "1335:   VP8LColorCacheClear(&hdr->saved_color_cache_);",
          "",
          "[Removed Lines]",
          "1332:   WebPSafeFree(hdr->huffman_tables_);",
          "",
          "[Added Lines]",
          "1336:   VP8LHuffmanTablesDeallocate(&hdr->huffman_tables_);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1645:   if (dec == NULL) return 0;",
          "1648:   assert(dec->hdr_.htree_groups_ != NULL);",
          "1649:   assert(dec->hdr_.num_htree_groups_ > 0);",
          "",
          "[Removed Lines]",
          "1647:   assert(dec->hdr_.huffman_tables_ != NULL);",
          "",
          "[Added Lines]",
          "1651:   assert(dec->hdr_.huffman_tables_.root.start != NULL);",
          "",
          "---------------"
        ],
        "src/dec/vp8li.h||src/dec/vp8li.h": [
          "File: src/dec/vp8li.h -> src/dec/vp8li.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   uint32_t       *huffman_image_;",
          "52:   int             num_htree_groups_;",
          "53:   HTreeGroup     *htree_groups_;",
          "55: } VP8LMetadata;",
          "57: typedef struct VP8LDecoder VP8LDecoder;",
          "",
          "[Removed Lines]",
          "54:   HuffmanCode    *huffman_tables_;",
          "",
          "[Added Lines]",
          "54:   HuffmanTables   huffman_tables_;",
          "",
          "---------------"
        ],
        "src/utils/huffman.c||src/utils/huffman.c": [
          "File: src/utils/huffman.c -> src/utils/huffman.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   return len - root_bits;",
          "76: }",
          "80:   HuffmanCode* table = root_table;  // next available space in table",
          "81:   int total_size = 1 << root_bits;  // total size root table + 2nd level table",
          "83:   int len;                          // current code length",
          "84:   int symbol;                       // symbol index in original or sorted table",
          "",
          "[Removed Lines]",
          "78: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "79:                           const int code_lengths[], int code_lengths_size) {",
          "82:   int* sorted = NULL;               // symbols sorted by code length",
          "",
          "[Added Lines]",
          "80: static int BuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "81:                              const int code_lengths[], int code_lengths_size,",
          "82:                              uint16_t sorted[]) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   assert(code_lengths_size != 0);",
          "91:   assert(code_lengths != NULL);",
          "93:   assert(root_bits > 0);",
          "",
          "[Removed Lines]",
          "92:   assert(root_table != NULL);",
          "",
          "[Added Lines]",
          "94:   assert((root_table != NULL && sorted != NULL) ||",
          "95:          (root_table == NULL && sorted == NULL));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:     offset[len + 1] = offset[len] + count[len];",
          "115:   }",
          "123:   for (symbol = 0; symbol < code_lengths_size; ++symbol) {",
          "124:     const int symbol_code_length = code_lengths[symbol];",
          "125:     if (code_lengths[symbol] > 0) {",
          "127:     }",
          "128:   }",
          "131:   if (offset[MAX_ALLOWED_CODE_LENGTH] == 1) {",
          "137:     return total_size;",
          "138:   }",
          "",
          "[Removed Lines]",
          "117:   sorted = (int*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));",
          "118:   if (sorted == NULL) {",
          "119:     return 0;",
          "120:   }",
          "126:       sorted[offset[symbol_code_length]++] = symbol;",
          "132:     HuffmanCode code;",
          "133:     code.bits = 0;",
          "134:     code.value = (uint16_t)sorted[0];",
          "135:     ReplicateValue(table, 1, total_size, code);",
          "136:     WebPSafeFree(sorted);",
          "",
          "[Added Lines]",
          "124:       if (sorted != NULL) {",
          "125:         sorted[offset[symbol_code_length]++] = symbol;",
          "126:       } else {",
          "127:         offset[symbol_code_length]++;",
          "128:       }",
          "134:     if (sorted != NULL) {",
          "135:       HuffmanCode code;",
          "136:       code.bits = 0;",
          "137:       code.value = (uint16_t)sorted[0];",
          "138:       ReplicateValue(table, 1, total_size, code);",
          "139:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:       num_nodes += num_open;",
          "154:       num_open -= count[len];",
          "155:       if (num_open < 0) {",
          "157:         return 0;",
          "158:       }",
          "159:       for (; count[len] > 0; --count[len]) {",
          "160:         HuffmanCode code;",
          "161:         code.bits = (uint8_t)len;",
          "",
          "[Removed Lines]",
          "156:         WebPSafeFree(sorted);",
          "",
          "[Added Lines]",
          "161:       if (root_table == NULL) continue;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "172:       num_nodes += num_open;",
          "173:       num_open -= count[len];",
          "174:       if (num_open < 0) {",
          "176:         return 0;",
          "177:       }",
          "178:       for (; count[len] > 0; --count[len]) {",
          "179:         HuffmanCode code;",
          "180:         if ((key & mask) != low) {",
          "182:           table_bits = NextTableBitSize(count, len, root_bits);",
          "183:           table_size = 1 << table_bits;",
          "184:           total_size += table_size;",
          "185:           low = key & mask;",
          "188:         }",
          "192:         key = GetNextKey(key, len);",
          "193:       }",
          "194:     }",
          "197:     if (num_nodes != 2 * offset[MAX_ALLOWED_CODE_LENGTH] - 1) {",
          "199:       return 0;",
          "200:     }",
          "201:   }",
          "204:   return total_size;",
          "205: }",
          "",
          "[Removed Lines]",
          "175:         WebPSafeFree(sorted);",
          "181:           table += table_size;",
          "186:           root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "187:           root_table[low].value = (uint16_t)((table - root_table) - low);",
          "189:         code.bits = (uint8_t)(len - root_bits);",
          "190:         code.value = (uint16_t)sorted[symbol++];",
          "191:         ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "198:       WebPSafeFree(sorted);",
          "203:   WebPSafeFree(sorted);",
          "",
          "[Added Lines]",
          "183:           if (root_table != NULL) table += table_size;",
          "188:           if (root_table != NULL) {",
          "189:             root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:             root_table[low].value = (uint16_t)((table - root_table) - low);",
          "191:           }",
          "192:         }",
          "193:         if (root_table != NULL) {",
          "194:           code.bits = (uint8_t)(len - root_bits);",
          "195:           code.value = (uint16_t)sorted[symbol++];",
          "196:           ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "213: #define MAX_CODE_LENGTHS_SIZE \\",
          "214:   ((1 << MAX_CACHE_BITS) + NUM_LITERAL_CODES + NUM_LENGTH_CODES)",
          "216: #define SORTED_SIZE_CUTOFF 512",
          "217: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "218:                           const int code_lengths[], int code_lengths_size) {",
          "219:   const int total_size =",
          "220:       BuildHuffmanTable(NULL, root_bits, code_lengths, code_lengths_size, NULL);",
          "221:   assert(code_lengths_size <= MAX_CODE_LENGTHS_SIZE);",
          "222:   if (total_size == 0 || root_table == NULL) return total_size;",
          "224:   if (root_table->curr_segment->curr_table + total_size >=",
          "225:       root_table->curr_segment->start + root_table->curr_segment->size) {",
          "229:     const int segment_size = root_table->curr_segment->size;",
          "230:     struct HuffmanTablesSegment* next =",
          "231:         (HuffmanTablesSegment*)WebPSafeMalloc(1, sizeof(*next));",
          "232:     if (next == NULL) return 0;",
          "237:     next->size = total_size > segment_size ? total_size : segment_size;",
          "238:     next->start =",
          "239:         (HuffmanCode*)WebPSafeMalloc(next->size, sizeof(*next->start));",
          "240:     if (next->start == NULL) {",
          "241:       WebPSafeFree(next);",
          "242:       return 0;",
          "243:     }",
          "244:     next->curr_table = next->start;",
          "245:     next->next = NULL;",
          "247:     root_table->curr_segment->next = next;",
          "248:     root_table->curr_segment = next;",
          "249:   }",
          "250:   if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "252:     uint16_t sorted[SORTED_SIZE_CUTOFF];",
          "253:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "254:                       code_lengths, code_lengths_size, sorted);",
          "255:   } else {  // rare case. Use heap allocation.",
          "256:     uint16_t* const sorted =",
          "257:         (uint16_t*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));",
          "258:     if (sorted == NULL) return 0;",
          "259:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "260:                       code_lengths, code_lengths_size, sorted);",
          "261:     WebPSafeFree(sorted);",
          "262:   }",
          "263:   return total_size;",
          "264: }",
          "266: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables) {",
          "268:   HuffmanTablesSegment* const root = &huffman_tables->root;",
          "269:   huffman_tables->curr_segment = root;",
          "271:   root->start = (HuffmanCode*)WebPSafeMalloc(size, sizeof(*root->start));",
          "272:   if (root->start == NULL) return 0;",
          "273:   root->curr_table = root->start;",
          "274:   root->next = NULL;",
          "275:   root->size = size;",
          "276:   return 1;",
          "277: }",
          "279: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables) {",
          "280:   HuffmanTablesSegment *current, *next;",
          "281:   if (huffman_tables == NULL) return;",
          "283:   current = &huffman_tables->root;",
          "284:   next = current->next;",
          "285:   WebPSafeFree(current->start);",
          "286:   current->start = NULL;",
          "287:   current->next = NULL;",
          "288:   current = next;",
          "290:   while (current != NULL) {",
          "291:     next = current->next;",
          "292:     WebPSafeFree(current->start);",
          "293:     WebPSafeFree(current);",
          "294:     current = next;",
          "295:   }",
          "296: }",
          "",
          "---------------"
        ],
        "src/utils/huffman.h||src/utils/huffman.h": [
          "File: src/utils/huffman.h -> src/utils/huffman.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: } HuffmanCode32;",
          "46: #define HUFFMAN_PACKED_BITS 6",
          "47: #define HUFFMAN_PACKED_TABLE_SIZE (1u << HUFFMAN_PACKED_BITS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: typedef struct HuffmanTablesSegment {",
          "48:   HuffmanCode* start;",
          "51:   HuffmanCode* curr_table;",
          "53:   struct HuffmanTablesSegment* next;",
          "54:   int size;",
          "55: } HuffmanTablesSegment;",
          "58: typedef struct HuffmanTables {",
          "59:   HuffmanTablesSegment root;",
          "61:   HuffmanTablesSegment* curr_segment;",
          "62: } HuffmanTables;",
          "66: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables);",
          "67: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:                           const int code_lengths[], int code_lengths_size);",
          "84: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "81: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "",
          "[Added Lines]",
          "104: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0aba549eb6c7e26a02d1f130d3c3f2b95b376a57",
      "candidate_info": {
        "commit_hash": "0aba549eb6c7e26a02d1f130d3c3f2b95b376a57",
        "repo": "webmproject/libwebp",
        "commit_url": "https://github.com/webmproject/libwebp/commit/0aba549eb6c7e26a02d1f130d3c3f2b95b376a57",
        "files": [
          "src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h"
        ],
        "message": "Fix OOB write in BuildHuffmanTable.\n\nFirst, BuildHuffmanTable is called to check if the data is valid.\nIf it is and the table is not big enough, more memory is allocated.\n\nThis will make sure that valid (but unoptimized because of unbalanced\ncodes) streams are still decodable.\n\nBug: chromium:1479274\nChange-Id: I31c36dbf3aa78d35ecf38706b50464fd3d375741\n(cherry picked from commit 902bc9190331343b2017211debcec8d2ab87e17a)\n(cherry picked from commit 2af26267cdfcb63a88e5c74a85927a12d6ca1d76)",
        "before_after_code_files": [
          "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ],
          "candidate": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ]
        }
      },
      "candidate_diff": {
        "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c": [
          "File: src/dec/vp8l_dec.c -> src/dec/vp8l_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:   int symbol;",
          "254:   int max_symbol;",
          "255:   int prev_code_len = DEFAULT_CODE_LENGTH;",
          "261:     goto End;",
          "262:   }",
          "",
          "[Removed Lines]",
          "256:   HuffmanCode table[1 << LENGTHS_TABLE_BITS];",
          "258:   if (!VP8LBuildHuffmanTable(table, LENGTHS_TABLE_BITS,",
          "259:                              code_length_code_lengths,",
          "260:                              NUM_CODE_LENGTH_CODES)) {",
          "",
          "[Added Lines]",
          "256:   HuffmanTables tables;",
          "258:   if (!VP8LHuffmanTablesAllocate(1 << LENGTHS_TABLE_BITS, &tables) ||",
          "259:       !VP8LBuildHuffmanTable(&tables, LENGTHS_TABLE_BITS,",
          "260:                              code_length_code_lengths, NUM_CODE_LENGTH_CODES)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:     int code_len;",
          "278:     if (max_symbol-- == 0) break;",
          "279:     VP8LFillBitWindow(br);",
          "281:     VP8LSetBitPos(br, br->bit_pos_ + p->bits);",
          "282:     code_len = p->value;",
          "283:     if (code_len < kCodeLengthLiterals) {",
          "",
          "[Removed Lines]",
          "280:     p = &table[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "[Added Lines]",
          "280:     p = &tables.curr_segment->start[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "300:   ok = 1;",
          "302:  End:",
          "303:   if (!ok) dec->status_ = VP8_STATUS_BITSTREAM_ERROR;",
          "304:   return ok;",
          "305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:   VP8LHuffmanTablesDeallocate(&tables);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309: static int ReadHuffmanCode(int alphabet_size, VP8LDecoder* const dec,",
          "311:   int ok = 0;",
          "312:   int size = 0;",
          "313:   VP8LBitReader* const br = &dec->br_;",
          "",
          "[Removed Lines]",
          "310:                            int* const code_lengths, HuffmanCode* const table) {",
          "",
          "[Added Lines]",
          "311:                            int* const code_lengths,",
          "312:                            HuffmanTables* const table) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:   VP8LMetadata* const hdr = &dec->hdr_;",
          "363:   uint32_t* huffman_image = NULL;",
          "364:   HTreeGroup* htree_groups = NULL;",
          "367:   int num_htree_groups = 1;",
          "368:   int num_htree_groups_max = 1;",
          "369:   int max_alphabet_size = 0;",
          "",
          "[Removed Lines]",
          "365:   HuffmanCode* huffman_tables = NULL;",
          "366:   HuffmanCode* huffman_table = NULL;",
          "",
          "[Added Lines]",
          "367:   HuffmanTables* huffman_tables = &hdr->huffman_tables_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:   int* mapping = NULL;",
          "373:   int ok = 0;",
          "375:   if (allow_recursion && VP8LReadBits(br, 1)) {",
          "377:     const int huffman_precision = VP8LReadBits(br, 3) + 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:   assert(huffman_tables->root.start == NULL);",
          "378:   assert(huffman_tables->curr_segment == NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "435:   code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,",
          "436:                                       sizeof(*code_lengths));",
          "439:   htree_groups = VP8LHtreeGroupsNew(num_htree_groups);",
          "442:     dec->status_ = VP8_STATUS_OUT_OF_MEMORY;",
          "443:     goto Error;",
          "444:   }",
          "447:   for (i = 0; i < num_htree_groups_max; ++i) {",
          "",
          "[Removed Lines]",
          "437:   huffman_tables = (HuffmanCode*)WebPSafeMalloc(num_htree_groups * table_size,",
          "438:                                                 sizeof(*huffman_tables));",
          "441:   if (htree_groups == NULL || code_lengths == NULL || huffman_tables == NULL) {",
          "446:   huffman_table = huffman_tables;",
          "",
          "[Added Lines]",
          "444:   if (htree_groups == NULL || code_lengths == NULL ||",
          "445:       !VP8LHuffmanTablesAllocate(num_htree_groups * table_size,",
          "446:                                  huffman_tables)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "468:       int max_bits = 0;",
          "469:       for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {",
          "470:         int alphabet_size = kAlphabetSize[j];",
          "472:         if (j == 0 && color_cache_bits > 0) {",
          "473:           alphabet_size += (1 << color_cache_bits);",
          "474:         }",
          "476:         if (size == 0) {",
          "477:           goto Error;",
          "478:         }",
          "479:         if (is_trivial_literal && kLiteralMap[j] == 1) {",
          "481:         }",
          "484:         if (j <= ALPHA) {",
          "485:           int local_max_bits = code_lengths[0];",
          "486:           int k;",
          "",
          "[Removed Lines]",
          "471:         htrees[j] = huffman_table;",
          "475:         size = ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_table);",
          "480:           is_trivial_literal = (huffman_table->bits == 0);",
          "482:         total_size += huffman_table->bits;",
          "483:         huffman_table += size;",
          "",
          "[Added Lines]",
          "478:         size =",
          "479:             ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_tables);",
          "480:         htrees[j] = huffman_tables->curr_segment->curr_table;",
          "485:           is_trivial_literal = (htrees[j]->bits == 0);",
          "487:         total_size += htrees[j]->bits;",
          "488:         huffman_tables->curr_segment->curr_table += size;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "515:   hdr->huffman_image_ = huffman_image;",
          "516:   hdr->num_htree_groups_ = num_htree_groups;",
          "517:   hdr->htree_groups_ = htree_groups;",
          "520:  Error:",
          "521:   WebPSafeFree(code_lengths);",
          "522:   WebPSafeFree(mapping);",
          "523:   if (!ok) {",
          "524:     WebPSafeFree(huffman_image);",
          "526:     VP8LHtreeGroupsFree(htree_groups);",
          "527:   }",
          "528:   return ok;",
          "",
          "[Removed Lines]",
          "518:   hdr->huffman_tables_ = huffman_tables;",
          "525:     WebPSafeFree(huffman_tables);",
          "",
          "[Added Lines]",
          "529:     VP8LHuffmanTablesDeallocate(huffman_tables);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1358:   assert(hdr != NULL);",
          "1360:   WebPSafeFree(hdr->huffman_image_);",
          "1362:   VP8LHtreeGroupsFree(hdr->htree_groups_);",
          "1363:   VP8LColorCacheClear(&hdr->color_cache_);",
          "1364:   VP8LColorCacheClear(&hdr->saved_color_cache_);",
          "",
          "[Removed Lines]",
          "1361:   WebPSafeFree(hdr->huffman_tables_);",
          "",
          "[Added Lines]",
          "1365:   VP8LHuffmanTablesDeallocate(&hdr->huffman_tables_);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1674:   if (dec == NULL) return 0;",
          "1677:   assert(dec->hdr_.htree_groups_ != NULL);",
          "1678:   assert(dec->hdr_.num_htree_groups_ > 0);",
          "",
          "[Removed Lines]",
          "1676:   assert(dec->hdr_.huffman_tables_ != NULL);",
          "",
          "[Added Lines]",
          "1680:   assert(dec->hdr_.huffman_tables_.root.start != NULL);",
          "",
          "---------------"
        ],
        "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h": [
          "File: src/dec/vp8li_dec.h -> src/dec/vp8li_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   uint32_t*       huffman_image_;",
          "52:   int             num_htree_groups_;",
          "53:   HTreeGroup*     htree_groups_;",
          "55: } VP8LMetadata;",
          "57: typedef struct VP8LDecoder VP8LDecoder;",
          "",
          "[Removed Lines]",
          "54:   HuffmanCode*    huffman_tables_;",
          "",
          "[Added Lines]",
          "54:   HuffmanTables   huffman_tables_;",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.c||src/utils/huffman_utils.c": [
          "File: src/utils/huffman_utils.c -> src/utils/huffman_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:       if (num_open < 0) {",
          "178:         return 0;",
          "179:       }",
          "181:       for (; count[len] > 0; --count[len]) {",
          "182:         HuffmanCode code;",
          "183:         if ((key & mask) != low) {",
          "185:           table_bits = NextTableBitSize(count, len, root_bits);",
          "186:           table_size = 1 << table_bits;",
          "187:           total_size += table_size;",
          "188:           low = key & mask;",
          "191:         }",
          "195:         key = GetNextKey(key, len);",
          "196:       }",
          "197:     }",
          "",
          "[Removed Lines]",
          "180:       if (root_table == NULL) continue;",
          "184:           table += table_size;",
          "189:           root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:           root_table[low].value = (uint16_t)((table - root_table) - low);",
          "192:         code.bits = (uint8_t)(len - root_bits);",
          "193:         code.value = (uint16_t)sorted[symbol++];",
          "194:         ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "[Added Lines]",
          "183:           if (root_table != NULL) table += table_size;",
          "188:           if (root_table != NULL) {",
          "189:             root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:             root_table[low].value = (uint16_t)((table - root_table) - low);",
          "191:           }",
          "192:         }",
          "193:         if (root_table != NULL) {",
          "194:           code.bits = (uint8_t)(len - root_bits);",
          "195:           code.value = (uint16_t)sorted[symbol++];",
          "196:           ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:   ((1 << MAX_CACHE_BITS) + NUM_LITERAL_CODES + NUM_LENGTH_CODES)",
          "213: #define SORTED_SIZE_CUTOFF 512",
          "215:                           const int code_lengths[], int code_lengths_size) {",
          "217:   assert(code_lengths_size <= MAX_CODE_LENGTHS_SIZE);",
          "223:     uint16_t sorted[SORTED_SIZE_CUTOFF];",
          "227:     uint16_t* const sorted =",
          "228:         (uint16_t*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));",
          "229:     if (sorted == NULL) return 0;",
          "232:     WebPSafeFree(sorted);",
          "233:   }",
          "234:   return total_size;",
          "235: }",
          "",
          "[Removed Lines]",
          "214: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "216:   int total_size;",
          "218:   if (root_table == NULL) {",
          "219:     total_size = BuildHuffmanTable(NULL, root_bits,",
          "220:                                    code_lengths, code_lengths_size, NULL);",
          "221:   } else if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "224:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "225:                                    code_lengths, code_lengths_size, sorted);",
          "226:   } else {   // rare case. Use heap allocation.",
          "230:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "231:                                    code_lengths, code_lengths_size, sorted);",
          "",
          "[Added Lines]",
          "217: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "219:   const int total_size =",
          "220:       BuildHuffmanTable(NULL, root_bits, code_lengths, code_lengths_size, NULL);",
          "222:   if (total_size == 0 || root_table == NULL) return total_size;",
          "224:   if (root_table->curr_segment->curr_table + total_size >=",
          "225:       root_table->curr_segment->start + root_table->curr_segment->size) {",
          "229:     const int segment_size = root_table->curr_segment->size;",
          "230:     struct HuffmanTablesSegment* next =",
          "231:         (HuffmanTablesSegment*)WebPSafeMalloc(1, sizeof(*next));",
          "232:     if (next == NULL) return 0;",
          "237:     next->size = total_size > segment_size ? total_size : segment_size;",
          "238:     next->start =",
          "239:         (HuffmanCode*)WebPSafeMalloc(next->size, sizeof(*next->start));",
          "240:     if (next->start == NULL) {",
          "241:       WebPSafeFree(next);",
          "242:       return 0;",
          "243:     }",
          "244:     next->curr_table = next->start;",
          "245:     next->next = NULL;",
          "247:     root_table->curr_segment->next = next;",
          "248:     root_table->curr_segment = next;",
          "249:   }",
          "250:   if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "253:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "254:                       code_lengths, code_lengths_size, sorted);",
          "255:   } else {  // rare case. Use heap allocation.",
          "259:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "260:                       code_lengths, code_lengths_size, sorted);",
          "266: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables) {",
          "268:   HuffmanTablesSegment* const root = &huffman_tables->root;",
          "269:   huffman_tables->curr_segment = root;",
          "271:   root->start = (HuffmanCode*)WebPSafeMalloc(size, sizeof(*root->start));",
          "272:   if (root->start == NULL) return 0;",
          "273:   root->curr_table = root->start;",
          "274:   root->next = NULL;",
          "275:   root->size = size;",
          "276:   return 1;",
          "277: }",
          "279: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables) {",
          "280:   HuffmanTablesSegment *current, *next;",
          "281:   if (huffman_tables == NULL) return;",
          "283:   current = &huffman_tables->root;",
          "284:   next = current->next;",
          "285:   WebPSafeFree(current->start);",
          "286:   current->start = NULL;",
          "287:   current->next = NULL;",
          "288:   current = next;",
          "290:   while (current != NULL) {",
          "291:     next = current->next;",
          "292:     WebPSafeFree(current->start);",
          "293:     WebPSafeFree(current);",
          "294:     current = next;",
          "295:   }",
          "296: }",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.h||src/utils/huffman_utils.h": [
          "File: src/utils/huffman_utils.h -> src/utils/huffman_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: } HuffmanCode32;",
          "46: #define HUFFMAN_PACKED_BITS 6",
          "47: #define HUFFMAN_PACKED_TABLE_SIZE (1u << HUFFMAN_PACKED_BITS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: typedef struct HuffmanTablesSegment {",
          "48:   HuffmanCode* start;",
          "51:   HuffmanCode* curr_table;",
          "53:   struct HuffmanTablesSegment* next;",
          "54:   int size;",
          "55: } HuffmanTablesSegment;",
          "58: typedef struct HuffmanTables {",
          "59:   HuffmanTablesSegment root;",
          "61:   HuffmanTablesSegment* curr_segment;",
          "62: } HuffmanTables;",
          "66: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables);",
          "67: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:                           const int code_lengths[], int code_lengths_size);",
          "86: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "83: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "",
          "[Added Lines]",
          "104: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a298d9d127865570bb81710299d7614490d97603",
      "candidate_info": {
        "commit_hash": "a298d9d127865570bb81710299d7614490d97603",
        "repo": "webmproject/libwebp",
        "commit_url": "https://github.com/webmproject/libwebp/commit/a298d9d127865570bb81710299d7614490d97603",
        "files": [
          "src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h"
        ],
        "message": "Fix OOB write in BuildHuffmanTable.\n\nFirst, BuildHuffmanTable is called to check if the data is valid.\nIf it is and the table is not big enough, more memory is allocated.\n\nThis will make sure that valid (but unoptimized because of unbalanced\ncodes) streams are still decodable.\n(cherry picked from commit 902bc91)\n\nChange-Id: I3abe4db460dcac62c14a84832284c0b530630af2",
        "before_after_code_files": [
          "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ],
          "candidate": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ]
        }
      },
      "candidate_diff": {
        "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c": [
          "File: src/dec/vp8l_dec.c -> src/dec/vp8l_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:   int symbol;",
          "254:   int max_symbol;",
          "255:   int prev_code_len = DEFAULT_CODE_LENGTH;",
          "261:     goto End;",
          "262:   }",
          "",
          "[Removed Lines]",
          "256:   HuffmanCode table[1 << LENGTHS_TABLE_BITS];",
          "258:   if (!VP8LBuildHuffmanTable(table, LENGTHS_TABLE_BITS,",
          "259:                              code_length_code_lengths,",
          "260:                              NUM_CODE_LENGTH_CODES)) {",
          "",
          "[Added Lines]",
          "256:   HuffmanTables tables;",
          "258:   if (!VP8LHuffmanTablesAllocate(1 << LENGTHS_TABLE_BITS, &tables) ||",
          "259:       !VP8LBuildHuffmanTable(&tables, LENGTHS_TABLE_BITS,",
          "260:                              code_length_code_lengths, NUM_CODE_LENGTH_CODES)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:     int code_len;",
          "278:     if (max_symbol-- == 0) break;",
          "279:     VP8LFillBitWindow(br);",
          "281:     VP8LSetBitPos(br, br->bit_pos_ + p->bits);",
          "282:     code_len = p->value;",
          "283:     if (code_len < kCodeLengthLiterals) {",
          "",
          "[Removed Lines]",
          "280:     p = &table[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "[Added Lines]",
          "280:     p = &tables.curr_segment->start[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "300:   ok = 1;",
          "302:  End:",
          "303:   if (!ok) dec->status_ = VP8_STATUS_BITSTREAM_ERROR;",
          "304:   return ok;",
          "305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:   VP8LHuffmanTablesDeallocate(&tables);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309: static int ReadHuffmanCode(int alphabet_size, VP8LDecoder* const dec,",
          "311:   int ok = 0;",
          "312:   int size = 0;",
          "313:   VP8LBitReader* const br = &dec->br_;",
          "",
          "[Removed Lines]",
          "310:                            int* const code_lengths, HuffmanCode* const table) {",
          "",
          "[Added Lines]",
          "311:                            int* const code_lengths,",
          "312:                            HuffmanTables* const table) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:   VP8LMetadata* const hdr = &dec->hdr_;",
          "363:   uint32_t* huffman_image = NULL;",
          "364:   HTreeGroup* htree_groups = NULL;",
          "367:   int num_htree_groups = 1;",
          "368:   int num_htree_groups_max = 1;",
          "369:   int max_alphabet_size = 0;",
          "",
          "[Removed Lines]",
          "365:   HuffmanCode* huffman_tables = NULL;",
          "366:   HuffmanCode* huffman_table = NULL;",
          "",
          "[Added Lines]",
          "367:   HuffmanTables* huffman_tables = &hdr->huffman_tables_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:   int* mapping = NULL;",
          "373:   int ok = 0;",
          "375:   if (allow_recursion && VP8LReadBits(br, 1)) {",
          "377:     const int huffman_precision = VP8LReadBits(br, 3) + 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:   assert(huffman_tables->root.start == NULL);",
          "378:   assert(huffman_tables->curr_segment == NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "432:     }",
          "433:   }",
          "437:   htree_groups = VP8LHtreeGroupsNew(num_htree_groups);",
          "438:   code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,",
          "439:                                       sizeof(*code_lengths));",
          "442:     dec->status_ = VP8_STATUS_OUT_OF_MEMORY;",
          "443:     goto Error;",
          "444:   }",
          "447:   for (i = 0; i < num_htree_groups_max; ++i) {",
          "",
          "[Removed Lines]",
          "435:   huffman_tables = (HuffmanCode*)WebPSafeMalloc(num_htree_groups * table_size,",
          "436:                                                 sizeof(*huffman_tables));",
          "441:   if (htree_groups == NULL || code_lengths == NULL || huffman_tables == NULL) {",
          "446:   huffman_table = huffman_tables;",
          "",
          "[Added Lines]",
          "444:   if (htree_groups == NULL || code_lengths == NULL ||",
          "445:       !VP8LHuffmanTablesAllocate(num_htree_groups * table_size,",
          "446:                                  huffman_tables)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "468:       int max_bits = 0;",
          "469:       for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {",
          "470:         int alphabet_size = kAlphabetSize[j];",
          "472:         if (j == 0 && color_cache_bits > 0) {",
          "473:           alphabet_size += (1 << color_cache_bits);",
          "474:         }",
          "476:         if (size == 0) {",
          "477:           goto Error;",
          "478:         }",
          "479:         if (is_trivial_literal && kLiteralMap[j] == 1) {",
          "481:         }",
          "484:         if (j <= ALPHA) {",
          "485:           int local_max_bits = code_lengths[0];",
          "486:           int k;",
          "",
          "[Removed Lines]",
          "471:         htrees[j] = huffman_table;",
          "475:         size = ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_table);",
          "480:           is_trivial_literal = (huffman_table->bits == 0);",
          "482:         total_size += huffman_table->bits;",
          "483:         huffman_table += size;",
          "",
          "[Added Lines]",
          "478:         size =",
          "479:             ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_tables);",
          "480:         htrees[j] = huffman_tables->curr_segment->curr_table;",
          "485:           is_trivial_literal = (htrees[j]->bits == 0);",
          "487:         total_size += htrees[j]->bits;",
          "488:         huffman_tables->curr_segment->curr_table += size;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "515:   hdr->huffman_image_ = huffman_image;",
          "516:   hdr->num_htree_groups_ = num_htree_groups;",
          "517:   hdr->htree_groups_ = htree_groups;",
          "520:  Error:",
          "521:   WebPSafeFree(code_lengths);",
          "522:   WebPSafeFree(mapping);",
          "523:   if (!ok) {",
          "524:     WebPSafeFree(huffman_image);",
          "526:     VP8LHtreeGroupsFree(htree_groups);",
          "527:   }",
          "528:   return ok;",
          "",
          "[Removed Lines]",
          "518:   hdr->huffman_tables_ = huffman_tables;",
          "525:     WebPSafeFree(huffman_tables);",
          "",
          "[Added Lines]",
          "529:     VP8LHuffmanTablesDeallocate(huffman_tables);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1354:   assert(hdr != NULL);",
          "1356:   WebPSafeFree(hdr->huffman_image_);",
          "1358:   VP8LHtreeGroupsFree(hdr->htree_groups_);",
          "1359:   VP8LColorCacheClear(&hdr->color_cache_);",
          "1360:   VP8LColorCacheClear(&hdr->saved_color_cache_);",
          "",
          "[Removed Lines]",
          "1357:   WebPSafeFree(hdr->huffman_tables_);",
          "",
          "[Added Lines]",
          "1361:   VP8LHuffmanTablesDeallocate(&hdr->huffman_tables_);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1671:   if (dec == NULL) return 0;",
          "1674:   assert(dec->hdr_.htree_groups_ != NULL);",
          "1675:   assert(dec->hdr_.num_htree_groups_ > 0);",
          "",
          "[Removed Lines]",
          "1673:   assert(dec->hdr_.huffman_tables_ != NULL);",
          "",
          "[Added Lines]",
          "1677:   assert(dec->hdr_.huffman_tables_.root.start != NULL);",
          "",
          "---------------"
        ],
        "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h": [
          "File: src/dec/vp8li_dec.h -> src/dec/vp8li_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   uint32_t       *huffman_image_;",
          "52:   int             num_htree_groups_;",
          "53:   HTreeGroup     *htree_groups_;",
          "55: } VP8LMetadata;",
          "57: typedef struct VP8LDecoder VP8LDecoder;",
          "",
          "[Removed Lines]",
          "54:   HuffmanCode    *huffman_tables_;",
          "",
          "[Added Lines]",
          "54:   HuffmanTables   huffman_tables_;",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.c||src/utils/huffman_utils.c": [
          "File: src/utils/huffman_utils.c -> src/utils/huffman_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   assert(code_lengths_size != 0);",
          "93:   assert(code_lengths != NULL);",
          "95:   assert(root_bits > 0);",
          "",
          "[Removed Lines]",
          "94:   assert(root_table != NULL);",
          "",
          "[Added Lines]",
          "94:   assert((root_table != NULL && sorted != NULL) ||",
          "95:          (root_table == NULL && sorted == NULL));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   for (symbol = 0; symbol < code_lengths_size; ++symbol) {",
          "121:     const int symbol_code_length = code_lengths[symbol];",
          "122:     if (code_lengths[symbol] > 0) {",
          "124:     }",
          "125:   }",
          "128:   if (offset[MAX_ALLOWED_CODE_LENGTH] == 1) {",
          "133:     return total_size;",
          "134:   }",
          "",
          "[Removed Lines]",
          "123:       sorted[offset[symbol_code_length]++] = symbol;",
          "129:     HuffmanCode code;",
          "130:     code.bits = 0;",
          "131:     code.value = (uint16_t)sorted[0];",
          "132:     ReplicateValue(table, 1, total_size, code);",
          "",
          "[Added Lines]",
          "124:       if (sorted != NULL) {",
          "125:         sorted[offset[symbol_code_length]++] = symbol;",
          "126:       } else {",
          "127:         offset[symbol_code_length]++;",
          "128:       }",
          "134:     if (sorted != NULL) {",
          "135:       HuffmanCode code;",
          "136:       code.bits = 0;",
          "137:       code.value = (uint16_t)sorted[0];",
          "138:       ReplicateValue(table, 1, total_size, code);",
          "139:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:       if (num_open < 0) {",
          "152:         return 0;",
          "153:       }",
          "154:       for (; count[len] > 0; --count[len]) {",
          "155:         HuffmanCode code;",
          "156:         code.bits = (uint8_t)len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:       if (root_table == NULL) continue;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:       for (; count[len] > 0; --count[len]) {",
          "173:         HuffmanCode code;",
          "174:         if ((key & mask) != low) {",
          "176:           table_bits = NextTableBitSize(count, len, root_bits);",
          "177:           table_size = 1 << table_bits;",
          "178:           total_size += table_size;",
          "179:           low = key & mask;",
          "182:         }",
          "186:         key = GetNextKey(key, len);",
          "187:       }",
          "188:     }",
          "",
          "[Removed Lines]",
          "175:           table += table_size;",
          "180:           root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "181:           root_table[low].value = (uint16_t)((table - root_table) - low);",
          "183:         code.bits = (uint8_t)(len - root_bits);",
          "184:         code.value = (uint16_t)sorted[symbol++];",
          "185:         ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "[Added Lines]",
          "183:           if (root_table != NULL) table += table_size;",
          "188:           if (root_table != NULL) {",
          "189:             root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:             root_table[low].value = (uint16_t)((table - root_table) - low);",
          "191:           }",
          "192:         }",
          "193:         if (root_table != NULL) {",
          "194:           code.bits = (uint8_t)(len - root_bits);",
          "195:           code.value = (uint16_t)sorted[symbol++];",
          "196:           ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "202:   ((1 << MAX_CACHE_BITS) + NUM_LITERAL_CODES + NUM_LENGTH_CODES)",
          "204: #define SORTED_SIZE_CUTOFF 512",
          "206:                           const int code_lengths[], int code_lengths_size) {",
          "208:   assert(code_lengths_size <= MAX_CODE_LENGTHS_SIZE);",
          "209:   if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "211:     uint16_t sorted[SORTED_SIZE_CUTOFF];",
          "215:     uint16_t* const sorted =",
          "216:         (uint16_t*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));",
          "217:     if (sorted == NULL) return 0;",
          "220:     WebPSafeFree(sorted);",
          "221:   }",
          "222:   return total_size;",
          "223: }",
          "",
          "[Removed Lines]",
          "205: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "207:   int total_size;",
          "212:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "213:                                    code_lengths, code_lengths_size, sorted);",
          "214:   } else {   // rare case. Use heap allocation.",
          "218:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "219:                                    code_lengths, code_lengths_size, sorted);",
          "",
          "[Added Lines]",
          "217: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "219:   const int total_size =",
          "220:       BuildHuffmanTable(NULL, root_bits, code_lengths, code_lengths_size, NULL);",
          "222:   if (total_size == 0 || root_table == NULL) return total_size;",
          "224:   if (root_table->curr_segment->curr_table + total_size >=",
          "225:       root_table->curr_segment->start + root_table->curr_segment->size) {",
          "229:     const int segment_size = root_table->curr_segment->size;",
          "230:     struct HuffmanTablesSegment* next =",
          "231:         (HuffmanTablesSegment*)WebPSafeMalloc(1, sizeof(*next));",
          "232:     if (next == NULL) return 0;",
          "237:     next->size = total_size > segment_size ? total_size : segment_size;",
          "238:     next->start =",
          "239:         (HuffmanCode*)WebPSafeMalloc(next->size, sizeof(*next->start));",
          "240:     if (next->start == NULL) {",
          "241:       WebPSafeFree(next);",
          "242:       return 0;",
          "243:     }",
          "244:     next->curr_table = next->start;",
          "245:     next->next = NULL;",
          "247:     root_table->curr_segment->next = next;",
          "248:     root_table->curr_segment = next;",
          "249:   }",
          "253:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "254:                       code_lengths, code_lengths_size, sorted);",
          "255:   } else {  // rare case. Use heap allocation.",
          "259:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "260:                       code_lengths, code_lengths_size, sorted);",
          "266: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables) {",
          "268:   HuffmanTablesSegment* const root = &huffman_tables->root;",
          "269:   huffman_tables->curr_segment = root;",
          "271:   root->start = (HuffmanCode*)WebPSafeMalloc(size, sizeof(*root->start));",
          "272:   if (root->start == NULL) return 0;",
          "273:   root->curr_table = root->start;",
          "274:   root->next = NULL;",
          "275:   root->size = size;",
          "276:   return 1;",
          "277: }",
          "279: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables) {",
          "280:   HuffmanTablesSegment *current, *next;",
          "281:   if (huffman_tables == NULL) return;",
          "283:   current = &huffman_tables->root;",
          "284:   next = current->next;",
          "285:   WebPSafeFree(current->start);",
          "286:   current->start = NULL;",
          "287:   current->next = NULL;",
          "288:   current = next;",
          "290:   while (current != NULL) {",
          "291:     next = current->next;",
          "292:     WebPSafeFree(current->start);",
          "293:     WebPSafeFree(current);",
          "294:     current = next;",
          "295:   }",
          "296: }",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.h||src/utils/huffman_utils.h": [
          "File: src/utils/huffman_utils.h -> src/utils/huffman_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: } HuffmanCode32;",
          "46: #define HUFFMAN_PACKED_BITS 6",
          "47: #define HUFFMAN_PACKED_TABLE_SIZE (1u << HUFFMAN_PACKED_BITS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: typedef struct HuffmanTablesSegment {",
          "48:   HuffmanCode* start;",
          "51:   HuffmanCode* curr_table;",
          "53:   struct HuffmanTablesSegment* next;",
          "54:   int size;",
          "55: } HuffmanTablesSegment;",
          "58: typedef struct HuffmanTables {",
          "59:   HuffmanTablesSegment root;",
          "61:   HuffmanTablesSegment* curr_segment;",
          "62: } HuffmanTables;",
          "66: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables);",
          "67: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:                           const int code_lengths[], int code_lengths_size);",
          "84: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "81: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "",
          "[Added Lines]",
          "104: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a36ce6e442b170413d4fb18c5476bc2d2244c004",
      "candidate_info": {
        "commit_hash": "a36ce6e442b170413d4fb18c5476bc2d2244c004",
        "repo": "webmproject/libwebp",
        "commit_url": "https://github.com/webmproject/libwebp/commit/a36ce6e442b170413d4fb18c5476bc2d2244c004",
        "files": [
          "src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h"
        ],
        "message": "[M108-LTS] Fix OOB write in BuildHuffmanTable.\n\nM108 merge issues:\n  dec/vp8l_dec.c:\n    - Conflicting checks before ReadHuffmanCodeLengths() return statement;\n    In 114, an assignment follows the check instead of a return.\n    - ReadHuffmanCodes(): Conflict after the changed huffman_tables check,\n    there's an assignment in 114 instead of the setter call.\n\nFirst, BuildHuffmanTable is called to check if the data is valid.\nIf it is and the table is not big enough, more memory is allocated.\n\nThis will make sure that valid (but unoptimized because of unbalanced\ncodes) streams are still decodable.\n\nBug: chromium:1479274\nChange-Id: I31c36dbf3aa78d35ecf38706b50464fd3d375741\n(cherry picked from commit 902bc9190331343b2017211debcec8d2ab87e17a)",
        "before_after_code_files": [
          "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ],
          "candidate": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ]
        }
      },
      "candidate_diff": {
        "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c": [
          "File: src/dec/vp8l_dec.c -> src/dec/vp8l_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:   int symbol;",
          "254:   int max_symbol;",
          "255:   int prev_code_len = DEFAULT_CODE_LENGTH;",
          "261:     goto End;",
          "262:   }",
          "",
          "[Removed Lines]",
          "256:   HuffmanCode table[1 << LENGTHS_TABLE_BITS];",
          "258:   if (!VP8LBuildHuffmanTable(table, LENGTHS_TABLE_BITS,",
          "259:                              code_length_code_lengths,",
          "260:                              NUM_CODE_LENGTH_CODES)) {",
          "",
          "[Added Lines]",
          "256:   HuffmanTables tables;",
          "258:   if (!VP8LHuffmanTablesAllocate(1 << LENGTHS_TABLE_BITS, &tables) ||",
          "259:       !VP8LBuildHuffmanTable(&tables, LENGTHS_TABLE_BITS,",
          "260:                              code_length_code_lengths, NUM_CODE_LENGTH_CODES)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:     int code_len;",
          "278:     if (max_symbol-- == 0) break;",
          "279:     VP8LFillBitWindow(br);",
          "281:     VP8LSetBitPos(br, br->bit_pos_ + p->bits);",
          "282:     code_len = p->value;",
          "283:     if (code_len < kCodeLengthLiterals) {",
          "",
          "[Removed Lines]",
          "280:     p = &table[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "[Added Lines]",
          "280:     p = &tables.curr_segment->start[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "300:   ok = 1;",
          "302:  End:",
          "303:   if (!ok) dec->status_ = VP8_STATUS_BITSTREAM_ERROR;",
          "304:   return ok;",
          "305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:   VP8LHuffmanTablesDeallocate(&tables);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309: static int ReadHuffmanCode(int alphabet_size, VP8LDecoder* const dec,",
          "311:   int ok = 0;",
          "312:   int size = 0;",
          "313:   VP8LBitReader* const br = &dec->br_;",
          "",
          "[Removed Lines]",
          "310:                            int* const code_lengths, HuffmanCode* const table) {",
          "",
          "[Added Lines]",
          "311:                            int* const code_lengths,",
          "312:                            HuffmanTables* const table) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:   VP8LMetadata* const hdr = &dec->hdr_;",
          "363:   uint32_t* huffman_image = NULL;",
          "364:   HTreeGroup* htree_groups = NULL;",
          "367:   int num_htree_groups = 1;",
          "368:   int num_htree_groups_max = 1;",
          "369:   int max_alphabet_size = 0;",
          "",
          "[Removed Lines]",
          "365:   HuffmanCode* huffman_tables = NULL;",
          "366:   HuffmanCode* huffman_table = NULL;",
          "",
          "[Added Lines]",
          "367:   HuffmanTables* huffman_tables = &hdr->huffman_tables_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:   int* mapping = NULL;",
          "373:   int ok = 0;",
          "375:   if (allow_recursion && VP8LReadBits(br, 1)) {",
          "377:     const int huffman_precision = VP8LReadBits(br, 3) + 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:   assert(huffman_tables->root.start == NULL);",
          "378:   assert(huffman_tables->curr_segment == NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "435:   code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,",
          "436:                                       sizeof(*code_lengths));",
          "439:   htree_groups = VP8LHtreeGroupsNew(num_htree_groups);",
          "442:     dec->status_ = VP8_STATUS_OUT_OF_MEMORY;",
          "443:     goto Error;",
          "444:   }",
          "447:   for (i = 0; i < num_htree_groups_max; ++i) {",
          "",
          "[Removed Lines]",
          "437:   huffman_tables = (HuffmanCode*)WebPSafeMalloc(num_htree_groups * table_size,",
          "438:                                                 sizeof(*huffman_tables));",
          "441:   if (htree_groups == NULL || code_lengths == NULL || huffman_tables == NULL) {",
          "446:   huffman_table = huffman_tables;",
          "",
          "[Added Lines]",
          "444:   if (htree_groups == NULL || code_lengths == NULL ||",
          "445:       !VP8LHuffmanTablesAllocate(num_htree_groups * table_size,",
          "446:                                  huffman_tables)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "468:       int max_bits = 0;",
          "469:       for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {",
          "470:         int alphabet_size = kAlphabetSize[j];",
          "472:         if (j == 0 && color_cache_bits > 0) {",
          "473:           alphabet_size += (1 << color_cache_bits);",
          "474:         }",
          "476:         if (size == 0) {",
          "477:           goto Error;",
          "478:         }",
          "479:         if (is_trivial_literal && kLiteralMap[j] == 1) {",
          "481:         }",
          "484:         if (j <= ALPHA) {",
          "485:           int local_max_bits = code_lengths[0];",
          "486:           int k;",
          "",
          "[Removed Lines]",
          "471:         htrees[j] = huffman_table;",
          "475:         size = ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_table);",
          "480:           is_trivial_literal = (huffman_table->bits == 0);",
          "482:         total_size += huffman_table->bits;",
          "483:         huffman_table += size;",
          "",
          "[Added Lines]",
          "478:         size =",
          "479:             ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_tables);",
          "480:         htrees[j] = huffman_tables->curr_segment->curr_table;",
          "485:           is_trivial_literal = (htrees[j]->bits == 0);",
          "487:         total_size += htrees[j]->bits;",
          "488:         huffman_tables->curr_segment->curr_table += size;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "515:   hdr->huffman_image_ = huffman_image;",
          "516:   hdr->num_htree_groups_ = num_htree_groups;",
          "517:   hdr->htree_groups_ = htree_groups;",
          "520:  Error:",
          "521:   WebPSafeFree(code_lengths);",
          "522:   WebPSafeFree(mapping);",
          "523:   if (!ok) {",
          "524:     WebPSafeFree(huffman_image);",
          "526:     VP8LHtreeGroupsFree(htree_groups);",
          "527:   }",
          "528:   return ok;",
          "",
          "[Removed Lines]",
          "518:   hdr->huffman_tables_ = huffman_tables;",
          "525:     WebPSafeFree(huffman_tables);",
          "",
          "[Added Lines]",
          "529:     VP8LHuffmanTablesDeallocate(huffman_tables);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1358:   assert(hdr != NULL);",
          "1360:   WebPSafeFree(hdr->huffman_image_);",
          "1362:   VP8LHtreeGroupsFree(hdr->htree_groups_);",
          "1363:   VP8LColorCacheClear(&hdr->color_cache_);",
          "1364:   VP8LColorCacheClear(&hdr->saved_color_cache_);",
          "",
          "[Removed Lines]",
          "1361:   WebPSafeFree(hdr->huffman_tables_);",
          "",
          "[Added Lines]",
          "1365:   VP8LHuffmanTablesDeallocate(&hdr->huffman_tables_);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1674:   if (dec == NULL) return 0;",
          "1677:   assert(dec->hdr_.htree_groups_ != NULL);",
          "1678:   assert(dec->hdr_.num_htree_groups_ > 0);",
          "",
          "[Removed Lines]",
          "1676:   assert(dec->hdr_.huffman_tables_ != NULL);",
          "",
          "[Added Lines]",
          "1680:   assert(dec->hdr_.huffman_tables_.root.start != NULL);",
          "",
          "---------------"
        ],
        "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h": [
          "File: src/dec/vp8li_dec.h -> src/dec/vp8li_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   uint32_t*       huffman_image_;",
          "52:   int             num_htree_groups_;",
          "53:   HTreeGroup*     htree_groups_;",
          "55: } VP8LMetadata;",
          "57: typedef struct VP8LDecoder VP8LDecoder;",
          "",
          "[Removed Lines]",
          "54:   HuffmanCode*    huffman_tables_;",
          "",
          "[Added Lines]",
          "54:   HuffmanTables   huffman_tables_;",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.c||src/utils/huffman_utils.c": [
          "File: src/utils/huffman_utils.c -> src/utils/huffman_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:       if (num_open < 0) {",
          "178:         return 0;",
          "179:       }",
          "181:       for (; count[len] > 0; --count[len]) {",
          "182:         HuffmanCode code;",
          "183:         if ((key & mask) != low) {",
          "185:           table_bits = NextTableBitSize(count, len, root_bits);",
          "186:           table_size = 1 << table_bits;",
          "187:           total_size += table_size;",
          "188:           low = key & mask;",
          "191:         }",
          "195:         key = GetNextKey(key, len);",
          "196:       }",
          "197:     }",
          "",
          "[Removed Lines]",
          "180:       if (root_table == NULL) continue;",
          "184:           table += table_size;",
          "189:           root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:           root_table[low].value = (uint16_t)((table - root_table) - low);",
          "192:         code.bits = (uint8_t)(len - root_bits);",
          "193:         code.value = (uint16_t)sorted[symbol++];",
          "194:         ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "[Added Lines]",
          "183:           if (root_table != NULL) table += table_size;",
          "188:           if (root_table != NULL) {",
          "189:             root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:             root_table[low].value = (uint16_t)((table - root_table) - low);",
          "191:           }",
          "192:         }",
          "193:         if (root_table != NULL) {",
          "194:           code.bits = (uint8_t)(len - root_bits);",
          "195:           code.value = (uint16_t)sorted[symbol++];",
          "196:           ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:   ((1 << MAX_CACHE_BITS) + NUM_LITERAL_CODES + NUM_LENGTH_CODES)",
          "213: #define SORTED_SIZE_CUTOFF 512",
          "215:                           const int code_lengths[], int code_lengths_size) {",
          "217:   assert(code_lengths_size <= MAX_CODE_LENGTHS_SIZE);",
          "223:     uint16_t sorted[SORTED_SIZE_CUTOFF];",
          "227:     uint16_t* const sorted =",
          "228:         (uint16_t*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));",
          "229:     if (sorted == NULL) return 0;",
          "232:     WebPSafeFree(sorted);",
          "233:   }",
          "234:   return total_size;",
          "235: }",
          "",
          "[Removed Lines]",
          "214: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "216:   int total_size;",
          "218:   if (root_table == NULL) {",
          "219:     total_size = BuildHuffmanTable(NULL, root_bits,",
          "220:                                    code_lengths, code_lengths_size, NULL);",
          "221:   } else if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "224:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "225:                                    code_lengths, code_lengths_size, sorted);",
          "226:   } else {   // rare case. Use heap allocation.",
          "230:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "231:                                    code_lengths, code_lengths_size, sorted);",
          "",
          "[Added Lines]",
          "217: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "219:   const int total_size =",
          "220:       BuildHuffmanTable(NULL, root_bits, code_lengths, code_lengths_size, NULL);",
          "222:   if (total_size == 0 || root_table == NULL) return total_size;",
          "224:   if (root_table->curr_segment->curr_table + total_size >=",
          "225:       root_table->curr_segment->start + root_table->curr_segment->size) {",
          "229:     const int segment_size = root_table->curr_segment->size;",
          "230:     struct HuffmanTablesSegment* next =",
          "231:         (HuffmanTablesSegment*)WebPSafeMalloc(1, sizeof(*next));",
          "232:     if (next == NULL) return 0;",
          "237:     next->size = total_size > segment_size ? total_size : segment_size;",
          "238:     next->start =",
          "239:         (HuffmanCode*)WebPSafeMalloc(next->size, sizeof(*next->start));",
          "240:     if (next->start == NULL) {",
          "241:       WebPSafeFree(next);",
          "242:       return 0;",
          "243:     }",
          "244:     next->curr_table = next->start;",
          "245:     next->next = NULL;",
          "247:     root_table->curr_segment->next = next;",
          "248:     root_table->curr_segment = next;",
          "249:   }",
          "250:   if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "253:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "254:                       code_lengths, code_lengths_size, sorted);",
          "255:   } else {  // rare case. Use heap allocation.",
          "259:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "260:                       code_lengths, code_lengths_size, sorted);",
          "266: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables) {",
          "268:   HuffmanTablesSegment* const root = &huffman_tables->root;",
          "269:   huffman_tables->curr_segment = root;",
          "271:   root->start = (HuffmanCode*)WebPSafeMalloc(size, sizeof(*root->start));",
          "272:   if (root->start == NULL) return 0;",
          "273:   root->curr_table = root->start;",
          "274:   root->next = NULL;",
          "275:   root->size = size;",
          "276:   return 1;",
          "277: }",
          "279: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables) {",
          "280:   HuffmanTablesSegment *current, *next;",
          "281:   if (huffman_tables == NULL) return;",
          "283:   current = &huffman_tables->root;",
          "284:   next = current->next;",
          "285:   WebPSafeFree(current->start);",
          "286:   current->start = NULL;",
          "287:   current->next = NULL;",
          "288:   current = next;",
          "290:   while (current != NULL) {",
          "291:     next = current->next;",
          "292:     WebPSafeFree(current->start);",
          "293:     WebPSafeFree(current);",
          "294:     current = next;",
          "295:   }",
          "296: }",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.h||src/utils/huffman_utils.h": [
          "File: src/utils/huffman_utils.h -> src/utils/huffman_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: } HuffmanCode32;",
          "46: #define HUFFMAN_PACKED_BITS 6",
          "47: #define HUFFMAN_PACKED_TABLE_SIZE (1u << HUFFMAN_PACKED_BITS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: typedef struct HuffmanTablesSegment {",
          "48:   HuffmanCode* start;",
          "51:   HuffmanCode* curr_table;",
          "53:   struct HuffmanTablesSegment* next;",
          "54:   int size;",
          "55: } HuffmanTablesSegment;",
          "58: typedef struct HuffmanTables {",
          "59:   HuffmanTablesSegment root;",
          "61:   HuffmanTablesSegment* curr_segment;",
          "62: } HuffmanTables;",
          "66: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables);",
          "67: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:                           const int code_lengths[], int code_lengths_size);",
          "86: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "83: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "",
          "[Added Lines]",
          "104: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20ceff7eb3ccb679bd299f3d481309e10cbf2616",
      "candidate_info": {
        "commit_hash": "20ceff7eb3ccb679bd299f3d481309e10cbf2616",
        "repo": "webmproject/libwebp",
        "commit_url": "https://github.com/webmproject/libwebp/commit/20ceff7eb3ccb679bd299f3d481309e10cbf2616",
        "files": [
          "src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h"
        ],
        "message": "Fix OOB write in BuildHuffmanTable.\n\nFirst, BuildHuffmanTable is called to check if the data is valid.\nIf it is and the table is not big enough, more memory is allocated.\n\nThis will make sure that valid (but unoptimized because of unbalanced\ncodes) streams are still decodable.\n\nBug: chromium:1479274\nChange-Id: I31c36dbf3aa78d35ecf38706b50464fd3d375741\n(cherry picked from commit 902bc9190331343b2017211debcec8d2ab87e17a)\n(cherry picked from commit 2af26267cdfcb63a88e5c74a85927a12d6ca1d76)",
        "before_after_code_files": [
          "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
          "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
          "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
          "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ],
          "candidate": [
            "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c",
            "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h",
            "src/utils/huffman_utils.c||src/utils/huffman_utils.c",
            "src/utils/huffman_utils.h||src/utils/huffman_utils.h"
          ]
        }
      },
      "candidate_diff": {
        "src/dec/vp8l_dec.c||src/dec/vp8l_dec.c": [
          "File: src/dec/vp8l_dec.c -> src/dec/vp8l_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:   int symbol;",
          "254:   int max_symbol;",
          "255:   int prev_code_len = DEFAULT_CODE_LENGTH;",
          "261:     goto End;",
          "262:   }",
          "",
          "[Removed Lines]",
          "256:   HuffmanCode table[1 << LENGTHS_TABLE_BITS];",
          "258:   if (!VP8LBuildHuffmanTable(table, LENGTHS_TABLE_BITS,",
          "259:                              code_length_code_lengths,",
          "260:                              NUM_CODE_LENGTH_CODES)) {",
          "",
          "[Added Lines]",
          "256:   HuffmanTables tables;",
          "258:   if (!VP8LHuffmanTablesAllocate(1 << LENGTHS_TABLE_BITS, &tables) ||",
          "259:       !VP8LBuildHuffmanTable(&tables, LENGTHS_TABLE_BITS,",
          "260:                              code_length_code_lengths, NUM_CODE_LENGTH_CODES)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:     int code_len;",
          "278:     if (max_symbol-- == 0) break;",
          "279:     VP8LFillBitWindow(br);",
          "281:     VP8LSetBitPos(br, br->bit_pos_ + p->bits);",
          "282:     code_len = p->value;",
          "283:     if (code_len < kCodeLengthLiterals) {",
          "",
          "[Removed Lines]",
          "280:     p = &table[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "[Added Lines]",
          "280:     p = &tables.curr_segment->start[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "300:   ok = 1;",
          "302:  End:",
          "303:   if (!ok) dec->status_ = VP8_STATUS_BITSTREAM_ERROR;",
          "304:   return ok;",
          "305: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:   VP8LHuffmanTablesDeallocate(&tables);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309: static int ReadHuffmanCode(int alphabet_size, VP8LDecoder* const dec,",
          "311:   int ok = 0;",
          "312:   int size = 0;",
          "313:   VP8LBitReader* const br = &dec->br_;",
          "",
          "[Removed Lines]",
          "310:                            int* const code_lengths, HuffmanCode* const table) {",
          "",
          "[Added Lines]",
          "311:                            int* const code_lengths,",
          "312:                            HuffmanTables* const table) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:   VP8LMetadata* const hdr = &dec->hdr_;",
          "363:   uint32_t* huffman_image = NULL;",
          "364:   HTreeGroup* htree_groups = NULL;",
          "367:   int num_htree_groups = 1;",
          "368:   int num_htree_groups_max = 1;",
          "369:   int max_alphabet_size = 0;",
          "",
          "[Removed Lines]",
          "365:   HuffmanCode* huffman_tables = NULL;",
          "366:   HuffmanCode* huffman_table = NULL;",
          "",
          "[Added Lines]",
          "367:   HuffmanTables* huffman_tables = &hdr->huffman_tables_;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "372:   int* mapping = NULL;",
          "373:   int ok = 0;",
          "375:   if (allow_recursion && VP8LReadBits(br, 1)) {",
          "377:     const int huffman_precision = VP8LReadBits(br, 3) + 2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377:   assert(huffman_tables->root.start == NULL);",
          "378:   assert(huffman_tables->curr_segment == NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "435:   code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,",
          "436:                                       sizeof(*code_lengths));",
          "439:   htree_groups = VP8LHtreeGroupsNew(num_htree_groups);",
          "442:     dec->status_ = VP8_STATUS_OUT_OF_MEMORY;",
          "443:     goto Error;",
          "444:   }",
          "447:   for (i = 0; i < num_htree_groups_max; ++i) {",
          "",
          "[Removed Lines]",
          "437:   huffman_tables = (HuffmanCode*)WebPSafeMalloc(num_htree_groups * table_size,",
          "438:                                                 sizeof(*huffman_tables));",
          "441:   if (htree_groups == NULL || code_lengths == NULL || huffman_tables == NULL) {",
          "446:   huffman_table = huffman_tables;",
          "",
          "[Added Lines]",
          "444:   if (htree_groups == NULL || code_lengths == NULL ||",
          "445:       !VP8LHuffmanTablesAllocate(num_htree_groups * table_size,",
          "446:                                  huffman_tables)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "468:       int max_bits = 0;",
          "469:       for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {",
          "470:         int alphabet_size = kAlphabetSize[j];",
          "472:         if (j == 0 && color_cache_bits > 0) {",
          "473:           alphabet_size += (1 << color_cache_bits);",
          "474:         }",
          "476:         if (size == 0) {",
          "477:           goto Error;",
          "478:         }",
          "479:         if (is_trivial_literal && kLiteralMap[j] == 1) {",
          "481:         }",
          "484:         if (j <= ALPHA) {",
          "485:           int local_max_bits = code_lengths[0];",
          "486:           int k;",
          "",
          "[Removed Lines]",
          "471:         htrees[j] = huffman_table;",
          "475:         size = ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_table);",
          "480:           is_trivial_literal = (huffman_table->bits == 0);",
          "482:         total_size += huffman_table->bits;",
          "483:         huffman_table += size;",
          "",
          "[Added Lines]",
          "478:         size =",
          "479:             ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_tables);",
          "480:         htrees[j] = huffman_tables->curr_segment->curr_table;",
          "485:           is_trivial_literal = (htrees[j]->bits == 0);",
          "487:         total_size += htrees[j]->bits;",
          "488:         huffman_tables->curr_segment->curr_table += size;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "515:   hdr->huffman_image_ = huffman_image;",
          "516:   hdr->num_htree_groups_ = num_htree_groups;",
          "517:   hdr->htree_groups_ = htree_groups;",
          "520:  Error:",
          "521:   WebPSafeFree(code_lengths);",
          "522:   WebPSafeFree(mapping);",
          "523:   if (!ok) {",
          "524:     WebPSafeFree(huffman_image);",
          "526:     VP8LHtreeGroupsFree(htree_groups);",
          "527:   }",
          "528:   return ok;",
          "",
          "[Removed Lines]",
          "518:   hdr->huffman_tables_ = huffman_tables;",
          "525:     WebPSafeFree(huffman_tables);",
          "",
          "[Added Lines]",
          "529:     VP8LHuffmanTablesDeallocate(huffman_tables);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1353:   assert(hdr != NULL);",
          "1355:   WebPSafeFree(hdr->huffman_image_);",
          "1357:   VP8LHtreeGroupsFree(hdr->htree_groups_);",
          "1358:   VP8LColorCacheClear(&hdr->color_cache_);",
          "1359:   VP8LColorCacheClear(&hdr->saved_color_cache_);",
          "",
          "[Removed Lines]",
          "1356:   WebPSafeFree(hdr->huffman_tables_);",
          "",
          "[Added Lines]",
          "1360:   VP8LHuffmanTablesDeallocate(&hdr->huffman_tables_);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1670:   if (dec == NULL) return 0;",
          "1673:   assert(dec->hdr_.htree_groups_ != NULL);",
          "1674:   assert(dec->hdr_.num_htree_groups_ > 0);",
          "",
          "[Removed Lines]",
          "1672:   assert(dec->hdr_.huffman_tables_ != NULL);",
          "",
          "[Added Lines]",
          "1676:   assert(dec->hdr_.huffman_tables_.root.start != NULL);",
          "",
          "---------------"
        ],
        "src/dec/vp8li_dec.h||src/dec/vp8li_dec.h": [
          "File: src/dec/vp8li_dec.h -> src/dec/vp8li_dec.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   uint32_t*       huffman_image_;",
          "52:   int             num_htree_groups_;",
          "53:   HTreeGroup*     htree_groups_;",
          "55: } VP8LMetadata;",
          "57: typedef struct VP8LDecoder VP8LDecoder;",
          "",
          "[Removed Lines]",
          "54:   HuffmanCode*    huffman_tables_;",
          "",
          "[Added Lines]",
          "54:   HuffmanTables   huffman_tables_;",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.c||src/utils/huffman_utils.c": [
          "File: src/utils/huffman_utils.c -> src/utils/huffman_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "177:       if (num_open < 0) {",
          "178:         return 0;",
          "179:       }",
          "181:       for (; count[len] > 0; --count[len]) {",
          "182:         HuffmanCode code;",
          "183:         if ((key & mask) != low) {",
          "185:           table_bits = NextTableBitSize(count, len, root_bits);",
          "186:           table_size = 1 << table_bits;",
          "187:           total_size += table_size;",
          "188:           low = key & mask;",
          "191:         }",
          "195:         key = GetNextKey(key, len);",
          "196:       }",
          "197:     }",
          "",
          "[Removed Lines]",
          "180:       if (root_table == NULL) continue;",
          "184:           table += table_size;",
          "189:           root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:           root_table[low].value = (uint16_t)((table - root_table) - low);",
          "192:         code.bits = (uint8_t)(len - root_bits);",
          "193:         code.value = (uint16_t)sorted[symbol++];",
          "194:         ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "[Added Lines]",
          "183:           if (root_table != NULL) table += table_size;",
          "188:           if (root_table != NULL) {",
          "189:             root_table[low].bits = (uint8_t)(table_bits + root_bits);",
          "190:             root_table[low].value = (uint16_t)((table - root_table) - low);",
          "191:           }",
          "192:         }",
          "193:         if (root_table != NULL) {",
          "194:           code.bits = (uint8_t)(len - root_bits);",
          "195:           code.value = (uint16_t)sorted[symbol++];",
          "196:           ReplicateValue(&table[key >> root_bits], step, table_size, code);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "211:   ((1 << MAX_CACHE_BITS) + NUM_LITERAL_CODES + NUM_LENGTH_CODES)",
          "213: #define SORTED_SIZE_CUTOFF 512",
          "215:                           const int code_lengths[], int code_lengths_size) {",
          "217:   assert(code_lengths_size <= MAX_CODE_LENGTHS_SIZE);",
          "223:     uint16_t sorted[SORTED_SIZE_CUTOFF];",
          "227:     uint16_t* const sorted =",
          "228:         (uint16_t*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));",
          "229:     if (sorted == NULL) return 0;",
          "232:     WebPSafeFree(sorted);",
          "233:   }",
          "234:   return total_size;",
          "235: }",
          "",
          "[Removed Lines]",
          "214: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "216:   int total_size;",
          "218:   if (root_table == NULL) {",
          "219:     total_size = BuildHuffmanTable(NULL, root_bits,",
          "220:                                    code_lengths, code_lengths_size, NULL);",
          "221:   } else if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "224:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "225:                                    code_lengths, code_lengths_size, sorted);",
          "226:   } else {   // rare case. Use heap allocation.",
          "230:     total_size = BuildHuffmanTable(root_table, root_bits,",
          "231:                                    code_lengths, code_lengths_size, sorted);",
          "",
          "[Added Lines]",
          "217: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "219:   const int total_size =",
          "220:       BuildHuffmanTable(NULL, root_bits, code_lengths, code_lengths_size, NULL);",
          "222:   if (total_size == 0 || root_table == NULL) return total_size;",
          "224:   if (root_table->curr_segment->curr_table + total_size >=",
          "225:       root_table->curr_segment->start + root_table->curr_segment->size) {",
          "229:     const int segment_size = root_table->curr_segment->size;",
          "230:     struct HuffmanTablesSegment* next =",
          "231:         (HuffmanTablesSegment*)WebPSafeMalloc(1, sizeof(*next));",
          "232:     if (next == NULL) return 0;",
          "237:     next->size = total_size > segment_size ? total_size : segment_size;",
          "238:     next->start =",
          "239:         (HuffmanCode*)WebPSafeMalloc(next->size, sizeof(*next->start));",
          "240:     if (next->start == NULL) {",
          "241:       WebPSafeFree(next);",
          "242:       return 0;",
          "243:     }",
          "244:     next->curr_table = next->start;",
          "245:     next->next = NULL;",
          "247:     root_table->curr_segment->next = next;",
          "248:     root_table->curr_segment = next;",
          "249:   }",
          "250:   if (code_lengths_size <= SORTED_SIZE_CUTOFF) {",
          "253:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "254:                       code_lengths, code_lengths_size, sorted);",
          "255:   } else {  // rare case. Use heap allocation.",
          "259:     BuildHuffmanTable(root_table->curr_segment->curr_table, root_bits,",
          "260:                       code_lengths, code_lengths_size, sorted);",
          "266: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables) {",
          "268:   HuffmanTablesSegment* const root = &huffman_tables->root;",
          "269:   huffman_tables->curr_segment = root;",
          "271:   root->start = (HuffmanCode*)WebPSafeMalloc(size, sizeof(*root->start));",
          "272:   if (root->start == NULL) return 0;",
          "273:   root->curr_table = root->start;",
          "274:   root->next = NULL;",
          "275:   root->size = size;",
          "276:   return 1;",
          "277: }",
          "279: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables) {",
          "280:   HuffmanTablesSegment *current, *next;",
          "281:   if (huffman_tables == NULL) return;",
          "283:   current = &huffman_tables->root;",
          "284:   next = current->next;",
          "285:   WebPSafeFree(current->start);",
          "286:   current->start = NULL;",
          "287:   current->next = NULL;",
          "288:   current = next;",
          "290:   while (current != NULL) {",
          "291:     next = current->next;",
          "292:     WebPSafeFree(current->start);",
          "293:     WebPSafeFree(current);",
          "294:     current = next;",
          "295:   }",
          "296: }",
          "",
          "---------------"
        ],
        "src/utils/huffman_utils.h||src/utils/huffman_utils.h": [
          "File: src/utils/huffman_utils.h -> src/utils/huffman_utils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: } HuffmanCode32;",
          "46: #define HUFFMAN_PACKED_BITS 6",
          "47: #define HUFFMAN_PACKED_TABLE_SIZE (1u << HUFFMAN_PACKED_BITS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: typedef struct HuffmanTablesSegment {",
          "48:   HuffmanCode* start;",
          "51:   HuffmanCode* curr_table;",
          "53:   struct HuffmanTablesSegment* next;",
          "54:   int size;",
          "55: } HuffmanTablesSegment;",
          "58: typedef struct HuffmanTables {",
          "59:   HuffmanTablesSegment root;",
          "61:   HuffmanTablesSegment* curr_segment;",
          "62: } HuffmanTables;",
          "66: int VP8LHuffmanTablesAllocate(int size, HuffmanTables* huffman_tables);",
          "67: void VP8LHuffmanTablesDeallocate(HuffmanTables* const huffman_tables);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:                           const int code_lengths[], int code_lengths_size);",
          "86: #ifdef __cplusplus",
          "",
          "[Removed Lines]",
          "83: int VP8LBuildHuffmanTable(HuffmanCode* const root_table, int root_bits,",
          "",
          "[Added Lines]",
          "104: int VP8LBuildHuffmanTable(HuffmanTables* const root_table, int root_bits,",
          "",
          "---------------"
        ]
      }
    }
  ]
}