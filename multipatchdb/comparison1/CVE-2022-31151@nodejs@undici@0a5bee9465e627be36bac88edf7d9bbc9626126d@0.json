{
  "cve_id": "CVE-2022-31151",
  "cve_desc": "Authorization headers are cleared on cross-origin redirect. However, cookie headers which are sensitive headers and are official headers found in the spec, remain uncleared. There are active users using cookie headers in undici. This may lead to accidental leakage of cookie to a 3rd-party site or a malicious attacker who can control the redirection target (ie. an open redirector) to leak the cookie to the 3rd party site. This was patched in v5.7.1. By default, this vulnerability is not exploitable. Do not enable redirections, i.e. `maxRedirections: 0` (the default).",
  "repo": "nodejs/undici",
  "patch_hash": "0a5bee9465e627be36bac88edf7d9bbc9626126d",
  "patch_info": {
    "commit_hash": "0a5bee9465e627be36bac88edf7d9bbc9626126d",
    "repo": "nodejs/undici",
    "commit_url": "https://github.com/nodejs/undici/commit/0a5bee9465e627be36bac88edf7d9bbc9626126d",
    "files": [
      "lib/handler/redirect.js",
      "test/redirect-request.js",
      "test/redirect-stream.js",
      "test/utils/redirecting-servers.js"
    ],
    "message": "Merge pull request from GHSA-q768-x9m6-m9qp\n\nSigned-off-by: Matteo Collina <hello@matteocollina.com>",
    "before_after_code_files": [
      "lib/handler/redirect.js||lib/handler/redirect.js",
      "test/redirect-request.js||test/redirect-request.js",
      "test/redirect-stream.js||test/redirect-stream.js",
      "test/utils/redirecting-servers.js||test/utils/redirecting-servers.js"
    ]
  },
  "patch_diff": {
    "lib/handler/redirect.js||lib/handler/redirect.js": [
      "File: lib/handler/redirect.js -> lib/handler/redirect.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "186:   return (",
      "187:     (header.length === 4 && header.toString().toLowerCase() === 'host') ||",
      "188:     (removeContent && header.toString().toLowerCase().indexOf('content-') === 0) ||",
      "190:   )",
      "191: }",
      "",
      "[Removed Lines]",
      "189:     (unknownOrigin && header.length === 13 && header.toString().toLowerCase() === 'authorization')",
      "",
      "[Added Lines]",
      "189:     (unknownOrigin && header.length === 13 && header.toString().toLowerCase() === 'authorization') ||",
      "190:     (unknownOrigin && header.length === 6 && header.toString().toLowerCase() === 'cookie')",
      "",
      "---------------"
    ],
    "test/redirect-request.js||test/redirect-request.js": [
      "File: test/redirect-request.js -> test/redirect-request.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   startRedirectingWithBodyServer,",
      "8:   startRedirectingChainServers,",
      "9:   startRedirectingWithoutLocationServer,",
      "11: } = require('./utils/redirecting-servers')",
      "12: const { createReadable, createReadableStream } = require('./utils/stream')",
      "",
      "[Removed Lines]",
      "10:   startRedirectingWithAuthorization",
      "",
      "[Added Lines]",
      "10:   startRedirectingWithAuthorization,",
      "11:   startRedirectingWithCookie",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "490:   t.equal(body, '')",
      "491: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "494: t.test('removes cookie header on third party origin', async t => {",
      "495:   t.plan(1)",
      "497:   const [server1] = await startRedirectingWithCookie(t, 'a=b')",
      "498:   const { body: bodyStream } = await undici.request(`http://${server1}`, {",
      "499:     maxRedirections: 10,",
      "500:     headers: {",
      "501:       cookie: 'a=b'",
      "502:     }",
      "503:   })",
      "505:   let body = ''",
      "506:   for await (const b of bodyStream) {",
      "507:     body += b",
      "508:   }",
      "510:   t.equal(body, '')",
      "511: })",
      "",
      "---------------"
    ],
    "test/redirect-stream.js||test/redirect-stream.js": [
      "File: test/redirect-stream.js -> test/redirect-stream.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:   startRedirectingWithBodyServer,",
      "8:   startRedirectingChainServers,",
      "9:   startRedirectingWithoutLocationServer,",
      "11: } = require('./utils/redirecting-servers')",
      "12: const { createReadable, createWritable } = require('./utils/stream')",
      "",
      "[Removed Lines]",
      "10:   startRedirectingWithAuthorization",
      "",
      "[Added Lines]",
      "10:   startRedirectingWithAuthorization,",
      "11:   startRedirectingWithCookie",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "402:   t.equal(body.length, 0)",
      "403: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "406: t.test('removes cookie header on third party origin', async t => {",
      "407:   t.plan(1)",
      "409:   const body = []",
      "411:   const [server1] = await startRedirectingWithCookie(t, 'a=b')",
      "412:   await stream(`http://${server1}`, {",
      "413:     maxRedirections: 10,",
      "414:     opaque: body,",
      "415:     headers: {",
      "416:       cookie: 'a=b'",
      "417:     }",
      "418:   }, ({ statusCode, headers, opaque }) => createWritable(opaque))",
      "420:   t.equal(body.length, 0)",
      "421: })",
      "",
      "---------------"
    ],
    "test/utils/redirecting-servers.js||test/utils/redirecting-servers.js": [
      "File: test/utils/redirecting-servers.js -> test/utils/redirecting-servers.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "178:   return [server1, server2]",
      "179: }",
      "181: async function startRedirectingWithRelativePath (t) {",
      "182:   const server = await startServer(t, (req, res) => {",
      "183:     res.setHeader('Connection', 'close')",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "181: async function startRedirectingWithCookie (t, cookie) {",
      "182:   const server1 = await startServer(t, (req, res) => {",
      "183:     if (req.headers.cookie !== cookie) {",
      "184:       res.statusCode = 403",
      "185:       res.setHeader('Connection', 'close')",
      "186:       res.end('')",
      "187:       return",
      "188:     }",
      "190:     res.statusCode = 301",
      "191:     res.setHeader('Connection', 'close')",
      "193:     res.setHeader('Location', `http://${server2}`)",
      "194:     res.end('')",
      "195:   })",
      "197:   const server2 = await startServer(t, (req, res) => {",
      "198:     res.end(req.headers.cookie || '')",
      "199:   })",
      "201:   return [server1, server2]",
      "202: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "206:   startRedirectingWithoutLocationServer,",
      "207:   startRedirectingChainServers,",
      "208:   startRedirectingWithAuthorization,",
      "209:   startRedirectingWithRelativePath",
      "210: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "232:   startRedirectingWithCookie,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f57fe82be0c43afb8f6417d177b4b6f6cc66d5bb",
      "candidate_info": {
        "commit_hash": "f57fe82be0c43afb8f6417d177b4b6f6cc66d5bb",
        "repo": "nodejs/undici",
        "commit_url": "https://github.com/nodejs/undici/commit/f57fe82be0c43afb8f6417d177b4b6f6cc66d5bb",
        "files": [
          "lib/handler/RedirectHandler.js",
          "test/redirect-request.js",
          "test/utils/redirecting-servers.js"
        ],
        "message": "fix(redirect): Ignore query config after redirection (#1724)",
        "before_after_code_files": [
          "lib/handler/RedirectHandler.js||lib/handler/RedirectHandler.js",
          "test/redirect-request.js||test/redirect-request.js",
          "test/utils/redirecting-servers.js||test/utils/redirecting-servers.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/redirect-request.js||test/redirect-request.js",
            "test/utils/redirecting-servers.js||test/utils/redirecting-servers.js"
          ],
          "candidate": [
            "test/redirect-request.js||test/redirect-request.js",
            "test/utils/redirecting-servers.js||test/utils/redirecting-servers.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/handler/RedirectHandler.js||lib/handler/RedirectHandler.js": [
          "File: lib/handler/RedirectHandler.js -> lib/handler/RedirectHandler.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     this.opts.path = path",
          "110:     this.opts.origin = origin",
          "111:     this.opts.maxRedirections = 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:     this.opts.query = null",
          "",
          "---------------"
        ],
        "test/redirect-request.js||test/redirect-request.js": [
          "File: test/redirect-request.js -> test/redirect-request.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   startRedirectingChainServers,",
          "9:   startRedirectingWithoutLocationServer,",
          "10:   startRedirectingWithAuthorization,",
          "12: } = require('./utils/redirecting-servers')",
          "13: const { createReadable, createReadableStream } = require('./utils/stream')",
          "",
          "[Removed Lines]",
          "11:   startRedirectingWithCookie",
          "",
          "[Added Lines]",
          "11:   startRedirectingWithCookie,",
          "12:   startRedirectingWithQueryParams",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:     t.equal(body, 'FINAL')",
          "301:   })",
          "303:   t.test('should follow a redirect chain up to the allowed number of times', async t => {",
          "304:     t.plan(4)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304:   t.test('should ignore query after redirection', async t => {",
          "305:     t.plan(3)",
          "307:     const server = await startRedirectingWithQueryParams(t)",
          "309:     const { statusCode, headers, context: { history } } = await request(server, undefined, `http://${server}/`, {",
          "310:       maxRedirections: 10,",
          "311:       query: { param1: 'first' }",
          "312:     })",
          "314:     t.equal(statusCode, 200)",
          "315:     t.notOk(headers.location)",
          "316:     t.same(history.map(x => x.toString()), [`http://${server}/`, `http://${server}/?param2=second`])",
          "317:   })",
          "",
          "---------------"
        ],
        "test/utils/redirecting-servers.js||test/utils/redirecting-servers.js": [
          "File: test/utils/redirecting-servers.js -> test/utils/redirecting-servers.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:   return server",
          "223: }",
          "225: module.exports = {",
          "226:   startServer,",
          "227:   startRedirectingServer,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225: async function startRedirectingWithQueryParams (t) {",
          "226:   const server = await startServer(t, (req, res) => {",
          "227:     if (req.url === '/?param1=first') {",
          "228:       res.statusCode = 301",
          "229:       res.setHeader('Connection', 'close')",
          "230:       res.setHeader('Location', `http://${server}/?param2=second`)",
          "231:       res.end('REDIRECT')",
          "232:       return",
          "233:     }",
          "235:     res.setHeader('Connection', 'close')",
          "236:     res.end('')",
          "237:   })",
          "239:   return server",
          "240: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230:   startRedirectingChainServers,",
          "231:   startRedirectingWithAuthorization,",
          "232:   startRedirectingWithCookie,",
          "234: }",
          "",
          "[Removed Lines]",
          "233:   startRedirectingWithRelativePath",
          "",
          "[Added Lines]",
          "250:   startRedirectingWithRelativePath,",
          "251:   startRedirectingWithQueryParams",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72ca86a5dbbe078cb8a552a7b7501407c6518fd5",
      "candidate_info": {
        "commit_hash": "72ca86a5dbbe078cb8a552a7b7501407c6518fd5",
        "repo": "nodejs/undici",
        "commit_url": "https://github.com/nodejs/undici/commit/72ca86a5dbbe078cb8a552a7b7501407c6518fd5",
        "files": [
          "package.json",
          "test/agent.js",
          "test/connect-timeout.js",
          "test/fetch/client-fetch.js",
          "test/fetch/jsdom-abortcontroller-1910-1464495619.js",
          "test/fetch/request.js",
          "test/proxy-agent.js",
          "test/redirect-request.js",
          "test/redirect-stream.js",
          "test/tls-session-reuse.js"
        ],
        "message": "test: fix failing tests (#2097)\n\n* test: increase timeout for some redirect- tests\n\n* test: fixes\n\n* test: fixes\n\n* test: fixes\n\n* test: fixes\n\n* test: fixes\n\n* test: fixes\n\n* test: fixes\n\n* test: fixes",
        "before_after_code_files": [
          "test/agent.js||test/agent.js",
          "test/connect-timeout.js||test/connect-timeout.js",
          "test/fetch/client-fetch.js||test/fetch/client-fetch.js",
          "test/fetch/jsdom-abortcontroller-1910-1464495619.js||test/fetch/jsdom-abortcontroller-1910-1464495619.js",
          "test/fetch/request.js||test/fetch/request.js",
          "test/proxy-agent.js||test/proxy-agent.js",
          "test/redirect-request.js||test/redirect-request.js",
          "test/redirect-stream.js||test/redirect-stream.js",
          "test/tls-session-reuse.js||test/tls-session-reuse.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/redirect-request.js||test/redirect-request.js",
            "test/redirect-stream.js||test/redirect-stream.js"
          ],
          "candidate": [
            "test/redirect-request.js||test/redirect-request.js",
            "test/redirect-stream.js||test/redirect-stream.js"
          ]
        }
      },
      "candidate_diff": {
        "test/agent.js||test/agent.js": [
          "File: test/agent.js -> test/agent.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const http = require('http')",
          "5: const { PassThrough } = require('stream')",
          "6: const { kRunning } = require('../lib/core/symbols')",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test, teardown } = require('tap')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "705:   t.equal(agent, undiciFresh.getGlobalDispatcher())",
          "706:   t.end()",
          "707: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "709: teardown(() => process.exit())",
          "",
          "---------------"
        ],
        "test/connect-timeout.js||test/connect-timeout.js": [
          "File: test/connect-timeout.js -> test/connect-timeout.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: test('priotorise socket errors over timeouts', (t) => {",
          "9:   t.plan(1)",
          "10:   const connectTimeout = 1000",
          "13:   client.request({ method: 'GET', path: '/foobar' })",
          "14:     .then(() => t.fail())",
          "",
          "[Removed Lines]",
          "11:   const client = new Pool('http://foobar.bar:1234', { connectTimeout })",
          "",
          "[Added Lines]",
          "11:   const client = new Pool('http://foobar.bar:1234', { connectTimeout: 1 })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:       t.equal(err.code, 'ENOTFOUND')",
          "17:     })",
          "21: })",
          "",
          "[Removed Lines]",
          "20:   sleep(connectTimeout * 2)",
          "",
          "[Added Lines]",
          "20:   sleep(connectTimeout)",
          "",
          "---------------"
        ],
        "test/fetch/client-fetch.js||test/fetch/client-fetch.js": [
          "File: test/fetch/client-fetch.js -> test/fetch/client-fetch.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: 'use strict'",
          "6: const { createServer } = require('http')",
          "7: const { ReadableStream } = require('stream/web')",
          "8: const { Blob } = require('buffer')",
          "",
          "[Removed Lines]",
          "5: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "5: const { test, teardown } = require('tap')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "672:   t.same(lengths, [30, 34, 94, 104, 90])",
          "673:   t.end()",
          "674: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676: teardown(() => process.exit())",
          "",
          "---------------"
        ],
        "test/fetch/jsdom-abortcontroller-1910-1464495619.js||test/fetch/jsdom-abortcontroller-1910-1464495619.js": [
          "File: test/fetch/jsdom-abortcontroller-1910-1464495619.js -> test/fetch/jsdom-abortcontroller-1910-1464495619.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: test('third party AbortControllers', async (t) => {",
          "11:   const server = createServer((_, res) => res.end()).listen(0)",
          "16:   const { AbortController } = new JSDOM().window",
          "19:   await t.resolves(fetch(`http://localhost:${server.address().port}`, {",
          "20:     signal: controller.signal",
          "",
          "[Removed Lines]",
          "13:   t.teardown(server.close.bind(server))",
          "14:   await once(server, 'listening')",
          "17:   const controller = new AbortController()",
          "",
          "[Added Lines]",
          "14:   let controller = new AbortController()",
          "16:   t.teardown(() => {",
          "17:     controller.abort()",
          "18:     controller = null",
          "19:     return server.close()",
          "20:   })",
          "21:   await once(server, 'listening')",
          "",
          "---------------"
        ],
        "test/fetch/request.js||test/fetch/request.js": [
          "File: test/fetch/request.js -> test/fetch/request.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: 'use strict'",
          "6: const {",
          "7:   Request,",
          "8:   Headers,",
          "9:   fetch",
          "10: } = require('../../')",
          "12: const {",
          "13:   Blob: ThirdPartyBlob,",
          "14:   FormData: ThirdPartyFormData",
          "",
          "[Removed Lines]",
          "5: const { test } = require('tap')",
          "11: const { kState } = require('../../lib/fetch/symbols.js')",
          "",
          "[Added Lines]",
          "5: const { test, teardown } = require('tap')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200: test('undefined body', t => {",
          "201:   const req = new Request('http://asd', { body: undefined })",
          "203:   t.end()",
          "204: })",
          "",
          "[Removed Lines]",
          "202:   t.equal(req[kState].body, null)",
          "",
          "[Added Lines]",
          "201:   t.equal(req.body, null)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "298:     } else {",
          "299:       t.pass()",
          "300:     }",
          "302:   ac.abort('gwak')",
          "303: })",
          "",
          "[Removed Lines]",
          "301:   })",
          "",
          "[Added Lines]",
          "300:   }, { once: true })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "346:     } else {",
          "347:       t.pass()",
          "348:     }",
          "350:   ac.abort('gwak')",
          "351: })",
          "",
          "[Removed Lines]",
          "349:   })",
          "",
          "[Added Lines]",
          "348:   }, { once: true })",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "476:   t.same(req2.headers.getSetCookie(), [])",
          "477:   t.end()",
          "478: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479: teardown(() => process.exit())",
          "",
          "---------------"
        ],
        "test/proxy-agent.js||test/proxy-agent.js": [
          "File: test/proxy-agent.js -> test/proxy-agent.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: 'use strict'",
          "4: const { request, fetch, setGlobalDispatcher, getGlobalDispatcher } = require('..')",
          "5: const { InvalidArgumentError } = require('../lib/core/errors')",
          "6: const { nodeMajor } = require('../lib/core/util')",
          "",
          "[Removed Lines]",
          "3: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "3: const { test, teardown } = require('tap')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "692:     server.listen(0, () => resolve(server))",
          "693:   })",
          "694: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696: teardown(() => process.exit())",
          "",
          "---------------"
        ],
        "test/redirect-request.js||test/redirect-request.js": [
          "File: test/redirect-request.js -> test/redirect-request.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:   const request = (server, opts, ...args) => {",
          "23:     const dispatcher = factory(server, opts)",
          "24:     return undici.request(args[0], { ...args[1], dispatcher }, args[2])",
          "25:   }",
          "27:   t.test('should always have a history with the final URL even if no redirections were followed', async t => {",
          "31:     const server = await startRedirectingServer(t)",
          "33:     const { statusCode, headers, body: bodyStream, context: { history } } = await request(server, undefined, `http://${server}/200?key=value`, {",
          "34:       maxRedirections: 10",
          "35:     })",
          "41:     t.equal(statusCode, 200)",
          "42:     t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "28:     t.plan(4)",
          "30:     let body = ''",
          "37:     for await (const b of bodyStream) {",
          "38:       body += b",
          "39:     }",
          "",
          "[Added Lines]",
          "25:       .finally(() => dispatcher.destroy())",
          "35:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   })",
          "47:   t.test('should not follow redirection by default if not using RedirectAgent', async t => {",
          "51:     const server = await startRedirectingServer(t)",
          "53:     const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}`)",
          "58:     t.equal(statusCode, 302)",
          "59:     t.equal(headers.location, `http://${server}/302/1`)",
          "",
          "[Removed Lines]",
          "48:     t.plan(3)",
          "50:     let body = ''",
          "54:     for await (const b of bodyStream) {",
          "55:       body += b",
          "56:     }",
          "",
          "[Added Lines]",
          "47:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:   })",
          "63:   t.test('should follow redirection after a HTTP 300', async t => {",
          "67:     const server = await startRedirectingServer(t)",
          "69:     const { statusCode, headers, body: bodyStream, context: { history } } = await request(server, undefined, `http://${server}/300?key=value`, {",
          "70:       maxRedirections: 10",
          "71:     })",
          "77:     t.equal(statusCode, 200)",
          "78:     t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "64:     t.plan(4)",
          "66:     let body = ''",
          "73:     for await (const b of bodyStream) {",
          "74:       body += b",
          "75:     }",
          "",
          "[Added Lines]",
          "61:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "88:   })",
          "90:   t.test('should follow redirection after a HTTP 300 default', async t => {",
          "94:     const server = await startRedirectingServer(t)",
          "96:     const { statusCode, headers, body: bodyStream, context: { history } } = await request(server, { maxRedirections: 10 }, `http://${server}/300?key=value`)",
          "102:     t.equal(statusCode, 200)",
          "103:     t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "91:     t.plan(4)",
          "93:     let body = ''",
          "98:     for await (const b of bodyStream) {",
          "99:       body += b",
          "100:     }",
          "",
          "[Added Lines]",
          "80:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:   })",
          "115:   t.test('should follow redirection after a HTTP 301', async t => {",
          "119:     const server = await startRedirectingServer(t)",
          "121:     const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}/301`, {",
          "",
          "[Removed Lines]",
          "116:     t.plan(3)",
          "118:     let body = ''",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "124:       maxRedirections: 10",
          "125:     })",
          "131:     t.equal(statusCode, 200)",
          "132:     t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "127:     for await (const b of bodyStream) {",
          "128:       body += b",
          "129:     }",
          "",
          "[Added Lines]",
          "104:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "134:   })",
          "136:   t.test('should follow redirection after a HTTP 302', async t => {",
          "140:     const server = await startRedirectingServer(t)",
          "142:     const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}/302`, {",
          "",
          "[Removed Lines]",
          "137:     t.plan(3)",
          "139:     let body = ''",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "145:       maxRedirections: 10",
          "146:     })",
          "152:     t.equal(statusCode, 200)",
          "153:     t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "148:     for await (const b of bodyStream) {",
          "149:       body += b",
          "150:     }",
          "",
          "[Added Lines]",
          "120:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "155:   })",
          "157:   t.test('should follow redirection after a HTTP 303 changing method to GET', async t => {",
          "161:     const server = await startRedirectingServer(t)",
          "163:     const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}/303`, {",
          "",
          "[Removed Lines]",
          "158:     t.plan(3)",
          "160:     let body = ''",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "166:       maxRedirections: 10",
          "167:     })",
          "173:     t.equal(statusCode, 200)",
          "174:     t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "169:     for await (const b of bodyStream) {",
          "170:       body += b",
          "171:     }",
          "",
          "[Added Lines]",
          "136:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "176:   })",
          "178:   t.test('should remove Host and request body related headers when following HTTP 303 (array)', async t => {",
          "182:     const server = await startRedirectingServer(t)",
          "184:     const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}/303`, {",
          "",
          "[Removed Lines]",
          "179:     t.plan(3)",
          "181:     let body = ''",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "202:       maxRedirections: 10",
          "203:     })",
          "209:     t.equal(statusCode, 200)",
          "210:     t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "205:     for await (const b of bodyStream) {",
          "206:       body += b",
          "207:     }",
          "",
          "[Added Lines]",
          "167:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "212:   })",
          "214:   t.test('should remove Host and request body related headers when following HTTP 303 (object)', async t => {",
          "218:     const server = await startRedirectingServer(t)",
          "220:     const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}/303`, {",
          "",
          "[Removed Lines]",
          "215:     t.plan(3)",
          "217:     let body = ''",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "231:       maxRedirections: 10",
          "232:     })",
          "238:     t.equal(statusCode, 200)",
          "239:     t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "234:     for await (const b of bodyStream) {",
          "235:       body += b",
          "236:     }",
          "",
          "[Added Lines]",
          "191:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "241:   })",
          "243:   t.test('should follow redirection after a HTTP 307', async t => {",
          "247:     const server = await startRedirectingServer(t)",
          "249:     const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}/307`, {",
          "",
          "[Removed Lines]",
          "244:     t.plan(3)",
          "246:     let body = ''",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "251:       maxRedirections: 10",
          "252:     })",
          "258:     t.equal(statusCode, 200)",
          "259:     t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "254:     for await (const b of bodyStream) {",
          "255:       body += b",
          "256:     }",
          "",
          "[Added Lines]",
          "206:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "261:   })",
          "263:   t.test('should follow redirection after a HTTP 308', async t => {",
          "267:     const server = await startRedirectingServer(t)",
          "269:     const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}/308`, {",
          "",
          "[Removed Lines]",
          "264:     t.plan(3)",
          "266:     let body = ''",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "271:       maxRedirections: 10",
          "272:     })",
          "278:     t.equal(statusCode, 200)",
          "279:     t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "274:     for await (const b of bodyStream) {",
          "275:       body += b",
          "276:     }",
          "",
          "[Added Lines]",
          "221:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "281:   })",
          "283:   t.test('should ignore HTTP 3xx response bodies', async t => {",
          "287:     const server = await startRedirectingWithBodyServer(t)",
          "289:     const { statusCode, headers, body: bodyStream, context: { history } } = await request(server, undefined, `http://${server}/`, {",
          "290:       maxRedirections: 10",
          "291:     })",
          "297:     t.equal(statusCode, 200)",
          "298:     t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "284:     t.plan(4)",
          "286:     let body = ''",
          "293:     for await (const b of bodyStream) {",
          "294:       body += b",
          "295:     }",
          "",
          "[Added Lines]",
          "235:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "301:   })",
          "303:   t.test('should ignore query after redirection', async t => {",
          "306:     const server = await startRedirectingWithQueryParams(t)",
          "308:     const { statusCode, headers, context: { history } } = await request(server, undefined, `http://${server}/`, {",
          "",
          "[Removed Lines]",
          "304:     t.plan(3)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "316:   })",
          "318:   t.test('should follow a redirect chain up to the allowed number of times', async t => {",
          "322:     const server = await startRedirectingServer(t)",
          "324:     const { statusCode, headers, body: bodyStream, context: { history } } = await request(server, undefined, `http://${server}/300`, {",
          "325:       maxRedirections: 2",
          "326:     })",
          "332:     t.equal(statusCode, 300)",
          "333:     t.equal(headers.location, `http://${server}/300/3`)",
          "",
          "[Removed Lines]",
          "319:     t.plan(4)",
          "321:     let body = ''",
          "328:     for await (const b of bodyStream) {",
          "329:       body += b",
          "330:     }",
          "",
          "[Added Lines]",
          "263:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "340:     const server = await startRedirectingWithoutLocationServer(t)",
          "342:     for (const code of redirectCodes) {",
          "360:     }",
          "361:   })",
          "363:   t.test('should not allow invalid maxRedirections arguments', async t => {",
          "366:     try {",
          "367:       await request('localhost', undefined, 'http://localhost', {",
          "368:         method: 'GET',",
          "369:         maxRedirections: 'INVALID'",
          "370:       })",
          "373:     } catch (err) {",
          "374:       t.equal(err.message, 'maxRedirections must be a positive number')",
          "375:     }",
          "376:   })",
          "378:   t.test('should not allow invalid maxRedirections arguments default', async t => {",
          "381:     try {",
          "382:       await request('localhost', {",
          "383:         maxRedirections: 'INVALID'",
          "",
          "[Removed Lines]",
          "343:       t.test(`should return the original response after a HTTP ${code}`, async t => {",
          "344:         t.plan(3)",
          "346:         let body = ''",
          "348:         const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}/${code}`, {",
          "349:           maxRedirections: 10",
          "350:         })",
          "352:         for await (const b of bodyStream) {",
          "353:           body += b",
          "354:         }",
          "356:         t.equal(statusCode, code)",
          "357:         t.notOk(headers.location)",
          "358:         t.equal(body.length, 0)",
          "359:       })",
          "364:     t.plan(1)",
          "372:       throw new Error('Did not throw')",
          "379:     t.plan(1)",
          "",
          "[Added Lines]",
          "276:       const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}/${code}`, {",
          "277:         maxRedirections: 10",
          "278:       })",
          "280:       const body = await bodyStream.text()",
          "282:       t.equal(statusCode, code)",
          "283:       t.notOk(headers.location)",
          "284:       t.equal(body.length, 0)",
          "295:       t.fail('Did not throw')",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "385:         method: 'GET'",
          "386:       })",
          "389:     } catch (err) {",
          "390:       t.equal(err.message, 'maxRedirections must be a positive number')",
          "391:     }",
          "392:   })",
          "394:   t.test('should not follow redirects when using ReadableStream request bodies', { skip: nodeMajor < 16 }, async t => {",
          "398:     const server = await startRedirectingServer(t)",
          "400:     const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}/301`, {",
          "",
          "[Removed Lines]",
          "388:       throw new Error('Did not throw')",
          "395:     t.plan(3)",
          "397:     let body = ''",
          "",
          "[Added Lines]",
          "309:       t.fail('Did not throw')",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "403:       maxRedirections: 10",
          "404:     })",
          "410:     t.equal(statusCode, 301)",
          "411:     t.equal(headers.location, `http://${server}/301/2`)",
          "",
          "[Removed Lines]",
          "406:     for await (const b of bodyStream) {",
          "407:       body += b",
          "408:     }",
          "",
          "[Added Lines]",
          "324:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "413:   })",
          "415:   t.test('should not follow redirects when using Readable request bodies', async t => {",
          "419:     const server = await startRedirectingServer(t)",
          "421:     const { statusCode, headers, body: bodyStream } = await request(server, undefined, `http://${server}/301`, {",
          "",
          "[Removed Lines]",
          "416:     t.plan(3)",
          "418:     let body = ''",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "424:       maxRedirections: 10",
          "425:     })",
          "431:     t.equal(statusCode, 301)",
          "432:     t.equal(headers.location, `http://${server}/301/1`)",
          "",
          "[Removed Lines]",
          "427:     for await (const b of bodyStream) {",
          "428:       body += b",
          "429:     }",
          "",
          "[Added Lines]",
          "340:     const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "435: }",
          "437: t.test('should follow redirections when going cross origin', async t => {",
          "440:   const [server1, server2, server3] = await startRedirectingChainServers(t)",
          "443:   const { statusCode, headers, body: bodyStream, context: { history } } = await undici.request(`http://${server1}`, {",
          "444:     method: 'POST',",
          "445:     maxRedirections: 10",
          "446:   })",
          "452:   t.equal(statusCode, 200)",
          "453:   t.notOk(headers.location)",
          "",
          "[Removed Lines]",
          "438:   t.plan(4)",
          "441:   let body = ''",
          "448:   for await (const b of bodyStream) {",
          "449:     body += b",
          "450:   }",
          "",
          "[Added Lines]",
          "356:   const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "477: })",
          "479: t.test('should handle errors (promise)', async t => {",
          "482:   try {",
          "483:     await undici.request('http://localhost:0', { maxRedirections: 10 })",
          "485:   } catch (error) {",
          "486:     t.match(error.code, /EADDRNOTAVAIL|ECONNREFUSED/)",
          "487:   }",
          "488: })",
          "490: t.test('removes authorization header on third party origin', async t => {",
          "493:   const [server1] = await startRedirectingWithAuthorization(t, 'secret')",
          "494:   const { body: bodyStream } = await undici.request(`http://${server1}`, {",
          "495:     maxRedirections: 10,",
          "",
          "[Removed Lines]",
          "480:   t.plan(1)",
          "484:     throw new Error('Did not throw')",
          "491:   t.plan(1)",
          "",
          "[Added Lines]",
          "388:     t.fail('Did not throw')",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "498:     }",
          "499:   })",
          "506:   t.equal(body, '')",
          "507: })",
          "509: t.test('removes cookie header on third party origin', async t => {",
          "512:   const [server1] = await startRedirectingWithCookie(t, 'a=b')",
          "513:   const { body: bodyStream } = await undici.request(`http://${server1}`, {",
          "514:     maxRedirections: 10,",
          "",
          "[Removed Lines]",
          "501:   let body = ''",
          "502:   for await (const b of bodyStream) {",
          "503:     body += b",
          "504:   }",
          "510:   t.plan(1)",
          "",
          "[Added Lines]",
          "403:   const body = await bodyStream.text()",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "517:     }",
          "518:   })",
          "525:   t.equal(body, '')",
          "526: })",
          "",
          "[Removed Lines]",
          "520:   let body = ''",
          "521:   for await (const b of bodyStream) {",
          "522:     body += b",
          "523:   }",
          "",
          "[Added Lines]",
          "417:   const body = await bodyStream.text()",
          "",
          "---------------"
        ],
        "test/redirect-stream.js||test/redirect-stream.js": [
          "File: test/redirect-stream.js -> test/redirect-stream.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "420:   t.equal(body.length, 0)",
          "421: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423: t.teardown(() => process.exit())",
          "",
          "---------------"
        ],
        "test/tls-session-reuse.js||test/tls-session-reuse.js": [
          "File: test/tls-session-reuse.js -> test/tls-session-reuse.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: const { join } = require('path')",
          "5: const https = require('https')",
          "6: const crypto = require('crypto')",
          "8: const { Client, Pool } = require('..')",
          "9: const { kSocket } = require('../lib/core/symbols')",
          "10: const { nodeMajor } = require('../lib/core/util')",
          "",
          "[Removed Lines]",
          "7: const { test } = require('tap')",
          "",
          "[Added Lines]",
          "7: const { test, teardown } = require('tap')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:   t.end()",
          "183: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: teardown(() => process.exit())",
          "",
          "---------------"
        ]
      }
    }
  ]
}