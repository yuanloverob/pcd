{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8e9e9a5f7e425b8f7f2b3d0702c3403fb9b823aa",
      "candidate_info": {
        "commit_hash": "8e9e9a5f7e425b8f7f2b3d0702c3403fb9b823aa",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/8e9e9a5f7e425b8f7f2b3d0702c3403fb9b823aa",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.8dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019080700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190801)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019080900.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev (Build: 20190809)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a713ed3ba684e3e24b3b0eb3280f79792929ad79",
      "candidate_info": {
        "commit_hash": "a713ed3ba684e3e24b3b0eb3280f79792929ad79",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/a713ed3ba684e3e24b3b0eb3280f79792929ad79",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019030100.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190301)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019030700.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.7dev (Build: 20190307)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "12ed3e27165115bb7f842dbf017706e2b7d7c79f",
      "candidate_info": {
        "commit_hash": "12ed3e27165115bb7f842dbf017706e2b7d7c79f",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/12ed3e27165115bb7f842dbf017706e2b7d7c79f",
        "files": [
          "version.php"
        ],
        "message": "MDL-62361 versions: main version bump",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018050800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018050900.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6189fda47ffefba8255dfff16c68d1a8528f3532",
      "candidate_info": {
        "commit_hash": "6189fda47ffefba8255dfff16c68d1a8528f3532",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/6189fda47ffefba8255dfff16c68d1a8528f3532",
        "files": [
          "backup/moodle2/backup_stepslib.php",
          "backup/moodle2/restore_stepslib.php",
          "lang/en/question.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "lib/questionlib.php",
          "question/category.php",
          "question/category_class.php",
          "question/category_form.php",
          "question/engine/tests/helpers.php",
          "question/format.php",
          "question/format/xml/format.php",
          "question/format/xml/tests/xmlformat_test.php",
          "question/tests/backup_test.php",
          "question/tests/behat/question_categories_idnumber.feature",
          "question/tests/generator/lib.php",
          "question/tests/generator_test.php",
          "question/type/ddwtos/tests/questiontype_test.php",
          "question/type/edit_question_form.php",
          "question/type/gapselect/tests/questiontype_test.php",
          "question/type/match/tests/questiontype_test.php",
          "question/type/missingtype/tests/missingtype_test.php",
          "question/type/questiontypebase.php",
          "version.php"
        ],
        "message": "MDL-62708 question: Add idnumbers to question and question category",
        "before_after_code_files": [
          "backup/moodle2/backup_stepslib.php||backup/moodle2/backup_stepslib.php",
          "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php",
          "lang/en/question.php||lang/en/question.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/questionlib.php||lib/questionlib.php",
          "question/category.php||question/category.php",
          "question/category_class.php||question/category_class.php",
          "question/category_form.php||question/category_form.php",
          "question/engine/tests/helpers.php||question/engine/tests/helpers.php",
          "question/format.php||question/format.php",
          "question/format/xml/format.php||question/format/xml/format.php",
          "question/format/xml/tests/xmlformat_test.php||question/format/xml/tests/xmlformat_test.php",
          "question/tests/backup_test.php||question/tests/backup_test.php",
          "question/tests/behat/question_categories_idnumber.feature||question/tests/behat/question_categories_idnumber.feature",
          "question/tests/generator/lib.php||question/tests/generator/lib.php",
          "question/tests/generator_test.php||question/tests/generator_test.php",
          "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php",
          "question/type/edit_question_form.php||question/type/edit_question_form.php",
          "question/type/gapselect/tests/questiontype_test.php||question/type/gapselect/tests/questiontype_test.php",
          "question/type/match/tests/questiontype_test.php||question/type/match/tests/questiontype_test.php",
          "question/type/missingtype/tests/missingtype_test.php||question/type/missingtype/tests/missingtype_test.php",
          "question/type/questiontypebase.php||question/type/questiontypebase.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "backup/moodle2/backup_stepslib.php||backup/moodle2/backup_stepslib.php": [
          "File: backup/moodle2/backup_stepslib.php -> backup/moodle2/backup_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2211:         $qcategory = new backup_nested_element('question_category', array('id'), array(",
          "2212:             'name', 'contextid', 'contextlevel', 'contextinstanceid',",
          "2213:             'info', 'infoformat', 'stamp', 'parent',",
          "2216:         $questions = new backup_nested_element('questions');",
          "",
          "[Removed Lines]",
          "2214:             'sortorder'));",
          "",
          "[Added Lines]",
          "2214:             'sortorder', 'idnumber'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2219:             'parent', 'name', 'questiontext', 'questiontextformat',",
          "2220:             'generalfeedback', 'generalfeedbackformat', 'defaultmark', 'penalty',",
          "2221:             'qtype', 'length', 'stamp', 'version',",
          "2225:         $this->add_plugin_structure('qtype', $question, false);",
          "",
          "[Removed Lines]",
          "2222:             'hidden', 'timecreated', 'timemodified', 'createdby', 'modifiedby'));",
          "",
          "[Added Lines]",
          "2222:             'hidden', 'timecreated', 'timemodified', 'createdby', 'modifiedby', 'idnumber'));",
          "",
          "---------------"
        ],
        "backup/moodle2/restore_stepslib.php||backup/moodle2/restore_stepslib.php": [
          "File: backup/moodle2/restore_stepslib.php -> backup/moodle2/restore_stepslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4434:                 $data->stamp = make_unique_id_code();",
          "4435:             }",
          "4438:             $newitemid = $DB->insert_record('question_categories', $data);",
          "4439:             $this->set_mapping('question_category', $oldid, $newitemid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4438:             if (!empty($data->idnumber) && $DB->record_exists('question_categories',",
          "4439:                     ['idnumber' => $data->idnumber, 'contextid' => $data->contextid])) {",
          "4440:                 unset($data->idnumber);",
          "4441:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4481:         if (!$questionmapping->newitemid) {",
          "4482:             $newitemid = $DB->insert_record('question', $data);",
          "4483:             $this->set_mapping('question', $oldid, $newitemid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4490:             if (!empty($data->idnumber) && $DB->record_exists('question',",
          "4491:                     ['idnumber' => $data->idnumber, 'category' => $data->category])) {",
          "4492:                 unset($data->idnumber);",
          "4493:             }",
          "",
          "---------------"
        ],
        "lang/en/question.php||lang/en/question.php": [
          "File: lang/en/question.php -> lang/en/question.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: $string['changepublishstatuscat'] = '<a href=\"{$a->caturl}\">Category \"{$a->name}\"</a> in course \"{$a->coursename}\" will have it\\'s sharing status changed from <strong>{$a->changefrom} to {$a->changeto}</strong>.';",
          "171: $string['chooseqtypetoadd'] = 'Choose a question type to add';",
          "172: $string['editquestions'] = 'Edit questions';",
          "173: $string['ignorebroken'] = 'Ignore broken links';",
          "174: $string['impossiblechar'] = 'Impossible character {$a} detected as parenthesis character';",
          "175: $string['import'] = 'Import';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: $string['idnumber'] = 'ID number';",
          "174: $string['idnumber_help'] = 'If used, the ID number must be unique within each question category. It provides another way of identifying a question which is sometimes useful, but can usually be left blank.';",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2360:         upgrade_main_savepoint(true, 2018091700.01);",
          "2361:     }",
          "2363:     return true;",
          "2364: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2365:     if ($oldversion < 2018092100.01) {",
          "2366:         $table = new xmldb_table('question');",
          "2367:         $field = new xmldb_field('idnumber', XMLDB_TYPE_CHAR, '100', null, null, null, null, 'modifiedby');",
          "2368:         if (!$dbman->field_exists($table, $field)) {",
          "2369:             $dbman->add_field($table, $field);",
          "2370:         }",
          "2371:         upgrade_main_savepoint(true, 2018092100.01);",
          "2372:     }",
          "2374:     if ($oldversion < 2018092100.02) {",
          "2375:         $table = new xmldb_table('question');",
          "2376:         $index = new xmldb_index('categoryidnumber', XMLDB_INDEX_UNIQUE, array('category, idnumber'));",
          "2377:         if (!$dbman->index_exists($table, $index)) {",
          "2378:             $dbman->add_index($table, $index);",
          "2379:         }",
          "2380:         upgrade_main_savepoint(true, 2018092100.02);",
          "2381:     }",
          "2383:     if ($oldversion < 2018092100.03) {",
          "2384:         $table = new xmldb_table('question_categories');",
          "2385:         $field = new xmldb_field('idnumber', XMLDB_TYPE_CHAR, '100', null, null, null, null, 'sortorder');",
          "2386:         if (!$dbman->field_exists($table, $field)) {",
          "2387:             $dbman->add_field($table, $field);",
          "2388:         }",
          "2389:         upgrade_main_savepoint(true, 2018092100.03);",
          "2390:     }",
          "2392:     if ($oldversion < 2018092100.04) {",
          "2393:         $table = new xmldb_table('question_categories');",
          "2394:         $index = new xmldb_index('contextididnumber', XMLDB_INDEX_UNIQUE, array('contextid, idnumber'));",
          "2395:         if (!$dbman->index_exists($table, $index)) {",
          "2396:             $dbman->add_index($table, $index);",
          "2397:         }",
          "2399:         upgrade_main_savepoint(true, 2018092100.04);",
          "2400:     }",
          "",
          "---------------"
        ],
        "lib/questionlib.php||lib/questionlib.php": [
          "File: lib/questionlib.php -> lib/questionlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:             array('id' => $newcategoryid));",
          "674:     list($questionidcondition, $params) = $DB->get_in_or_equal($questionids);",
          "675:     $questions = $DB->get_records_sql(\"",
          "677:               FROM {question} q",
          "678:               JOIN {question_categories} qc ON q.category = qc.id",
          "679:              WHERE  q.id $questionidcondition\", $params);",
          "",
          "[Removed Lines]",
          "676:             SELECT q.id, q.qtype, qc.contextid",
          "",
          "[Added Lines]",
          "676:             SELECT q.id, q.qtype, qc.contextid, q.idnumber",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "682:             question_bank::get_qtype($question->qtype)->move_files(",
          "683:                     $question->id, $question->contextid, $newcontextid);",
          "684:         }",
          "685:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "686:         if (((string) $question->idnumber !== '') &&",
          "687:                 $DB->record_exists('question', ['idnumber' => $question->idnumber, 'category' => $newcategoryid])) {",
          "688:             $rec = $DB->get_records_select('question', \"category = ? AND idnumber LIKE ?\",",
          "689:                     [$newcategoryid, $question->idnumber . '_%'], 'idnumber DESC', 'id, idnumber', 0, 1);",
          "690:             $unique = 1;",
          "691:             if (count($rec)) {",
          "692:                 $rec = reset($rec);",
          "693:                 $idnumber = $rec->idnumber;",
          "694:                 if (strpos($idnumber, '_') !== false) {",
          "695:                     $unique = substr($idnumber, strpos($idnumber, '_') + 1) + 1;",
          "696:                 }",
          "697:             }",
          "700:             $q = new stdClass();",
          "701:             $q->id = $question->id;",
          "702:             $q->category = $newcategoryid;",
          "703:             $q->idnumber = $question->idnumber . '_' . $unique;",
          "704:             $DB->update_record('question', $q);",
          "705:         }",
          "",
          "---------------"
        ],
        "question/category.php||question/category.php": [
          "File: question/category.php -> question/category.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     $catformdata->info       = $catformdata->info['text'];",
          "119:     if (!$catformdata->id) {//new category",
          "120:         $qcobject->add_category($catformdata->parent, $catformdata->name,",
          "122:     } else {",
          "123:         $qcobject->update_category($catformdata->id, $catformdata->parent,",
          "125:     }",
          "126:     redirect($thispageurl);",
          "127: } else if ((!empty($param->delete) and (!$questionstomove) and confirm_sesskey())) {",
          "",
          "[Removed Lines]",
          "121:                 $catformdata->info, false, $catformdata->infoformat);",
          "124:                 $catformdata->name, $catformdata->info, $catformdata->infoformat);",
          "",
          "[Added Lines]",
          "121:                 $catformdata->info, false, $catformdata->infoformat, $catformdata->idnumber);",
          "124:                 $catformdata->name, $catformdata->info, $catformdata->infoformat, $catformdata->idnumber);",
          "",
          "---------------"
        ],
        "question/category_class.php||question/category_class.php": [
          "File: question/category_class.php -> question/category_class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "408:         global $DB;",
          "409:         if (empty($newcategory)) {",
          "410:             print_error('categorynamecantbeblank', 'question');",
          "",
          "[Removed Lines]",
          "407:     public function add_category($newparent, $newcategory, $newinfo, $return = false, $newinfoformat = FORMAT_HTML) {",
          "",
          "[Added Lines]",
          "407:     public function add_category($newparent, $newcategory, $newinfo, $return = false, $newinfoformat = FORMAT_HTML,",
          "408:             $idnumber = null) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:             }",
          "420:         }",
          "422:         $cat = new stdClass();",
          "423:         $cat->parent = $parentid;",
          "424:         $cat->contextid = $contextid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423:         if (((string) $idnumber !== '') && !empty($contextid)) {",
          "425:             if ($DB->record_exists('question_categories',",
          "426:                     ['idnumber' => $idnumber, 'contextid' => $contextid])) {",
          "427:                 $idnumber = null;",
          "428:             }",
          "429:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "427:         $cat->infoformat = $newinfoformat;",
          "428:         $cat->sortorder = 999;",
          "429:         $cat->stamp = make_unique_id_code();",
          "430:         $categoryid = $DB->insert_record(\"question_categories\", $cat);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439:         if ($idnumber) {",
          "440:             $cat->idnumber = $idnumber;",
          "441:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "451:         global $CFG, $DB;",
          "452:         if (empty($newname)) {",
          "453:             print_error('categorynamecantbeblank', 'question');",
          "",
          "[Removed Lines]",
          "450:     public function update_category($updateid, $newparent, $newname, $newinfo, $newinfoformat = FORMAT_HTML) {",
          "",
          "[Added Lines]",
          "462:     public function update_category($updateid, $newparent, $newname, $newinfo, $newinfoformat = FORMAT_HTML,",
          "463:             $idnumber = null) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "480:             }",
          "481:         }",
          "484:         $cat = new stdClass();",
          "485:         $cat->id = $updateid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "496:         if (((string) $idnumber !== '') && !empty($tocontextid)) {",
          "498:             if ($DB->record_exists('question_categories',",
          "499:                     ['idnumber' => $idnumber, 'contextid' => $tocontextid])) {",
          "500:                 $idnumber = null;",
          "501:             }",
          "502:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "488:         $cat->infoformat = $newinfoformat;",
          "489:         $cat->parent = $parentid;",
          "490:         $cat->contextid = $tocontextid;",
          "491:         if ($newstamprequired) {",
          "492:             $cat->stamp = make_unique_id_code();",
          "493:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "512:         if ($idnumber) {",
          "513:             $cat->idnumber = $idnumber;",
          "514:         }",
          "",
          "---------------"
        ],
        "question/category_form.php||question/category_form.php": [
          "File: question/category_form.php -> question/category_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:         $mform->setDefault('info', '');",
          "64:         $mform->setType('info', PARAM_RAW);",
          "66:         $this->add_action_buttons(false, get_string('addcategory', 'question'));",
          "68:         $mform->addElement('hidden', 'id', 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'question'), 'maxlength=\"100\"  size=\"10\"');",
          "67:         $mform->addHelpButton('idnumber', 'idnumber', 'question');",
          "68:         $mform->setType('idnumber', PARAM_RAW);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         }",
          "82:         parent::set_data($current);",
          "83:     }",
          "84: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     public function validation($data, $files) {",
          "97:         global $DB;",
          "99:         $errors = parent::validation($data, $files);",
          "102:         list($parentid, $contextid) = explode(',', $data['parent']);",
          "103:         if (((string) $data['idnumber'] !== '') && !empty($contextid)) {",
          "104:             $conditions = 'contextid = ? AND idnumber = ?';",
          "105:             $params = [$contextid, $data['idnumber']];",
          "106:             if (!empty($data['id'])) {",
          "107:                 $conditions .= ' AND id <> ?';",
          "108:                 $params[] = $data['id'];",
          "109:             }",
          "110:             if ($DB->record_exists_select('question_categories', $conditions, $params)) {",
          "111:                 $errors['idnumber'] = get_string('idnumbertaken', 'error');",
          "112:             }",
          "113:         }",
          "115:         return $errors;",
          "116:     }",
          "",
          "---------------"
        ],
        "question/engine/tests/helpers.php||question/engine/tests/helpers.php": [
          "File: question/engine/tests/helpers.php -> question/engine/tests/helpers.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:         $q->id = 0;",
          "172:         $q->category = 0;",
          "173:         $q->parent = 0;",
          "174:         $q->questiontextformat = FORMAT_HTML;",
          "175:         $q->generalfeedbackformat = FORMAT_HTML;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:         $q->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:         $qdata->id = 0;",
          "192:         $qdata->category = 0;",
          "193:         $qdata->contextid = 0;",
          "194:         $qdata->parent = 0;",
          "195:         $qdata->questiontextformat = FORMAT_HTML;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:         $qdata->idnumber = null;",
          "",
          "---------------"
        ],
        "question/format.php||question/format.php": [
          "File: question/format.php -> question/format.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:             $question->timecreated = time();",
          "407:             $question->modifiedby = $USER->id;",
          "408:             $question->timemodified = time();",
          "409:             $fileoptions = array(",
          "410:                     'subdirs' => true,",
          "411:                     'maxfiles' => -1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:             if (isset($question->idnumber) && (string) $question->idnumber !== '') {",
          "410:                 if ($DB->record_exists('question', ['idnumber' => $question->idnumber, 'category' => $question->category])) {",
          "412:                     unset($question->idnumber);",
          "413:                 }",
          "414:             }",
          "",
          "---------------"
        ],
        "question/format/xml/format.php||question/format/xml/format.php": [
          "File: question/format/xml/format.php -> question/format/xml/format.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:             $qo->questiontext .= ' <img src=\"@@PLUGINFILE@@/' . $filename . '\" />';",
          "237:         }",
          "240:         $generalfeedback = $this->import_text_with_files($question,",
          "241:                 array('#', 'generalfeedback', 0), $qo->generalfeedback, $this->get_format($qo->questiontextformat));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "239:         $qo->idnumber = $this->getpath($question, ['#', 'idnumber', 0, '#'], null);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1217:         }",
          "1218:         $expout .= \"    <penalty>{$question->penalty}</penalty>\\n\";",
          "1219:         $expout .= \"    <hidden>{$question->hidden}</hidden>\\n\";",
          "1222:         switch($question->qtype) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1222:         $expout .= \"    <idnumber>{$question->idnumber}</idnumber>\\n\";",
          "",
          "---------------"
        ],
        "question/format/xml/tests/xmlformat_test.php||question/format/xml/tests/xmlformat_test.php": [
          "File: question/format/xml/tests/xmlformat_test.php -> question/format/xml/tests/xmlformat_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:         $q = new stdClass();",
          "49:         $q->id = 0;",
          "50:         $q->contextid = 0;",
          "51:         $q->category = 0;",
          "52:         $q->parent = 0;",
          "53:         $q->questiontextformat = FORMAT_HTML;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:         $q->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:         $qdata->length = 0;",
          "343:         $qdata->penalty = 0;",
          "344:         $qdata->hidden = 0;",
          "346:         $exporter = new qformat_xml();",
          "347:         $xml = $exporter->writequestion($qdata);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:         $qdata->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360:     <defaultgrade>0</defaultgrade>",
          "361:     <penalty>0</penalty>",
          "362:     <hidden>0</hidden>",
          "363:   </question>",
          "364: ';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:     <idnumber></idnumber>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "487:         $qdata->length = 1;",
          "488:         $qdata->penalty = 0;",
          "489:         $qdata->hidden = 0;",
          "490:         $qdata->options = new stdClass();",
          "491:         $qdata->options->id = 456;",
          "492:         $qdata->options->questionid = 123;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "493:         $qdata->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "516:     <defaultgrade>1</defaultgrade>",
          "517:     <penalty>0</penalty>",
          "518:     <hidden>0</hidden>",
          "519:     <responseformat>monospaced</responseformat>",
          "520:     <responserequired>0</responserequired>",
          "521:     <responsefieldlines>42</responsefieldlines>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523:     <idnumber></idnumber>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "649:         $qdata->length = 1;",
          "650:         $qdata->penalty = 0.3333333;",
          "651:         $qdata->hidden = 0;",
          "653:         $qdata->options = new stdClass();",
          "654:         $qdata->options->shuffleanswers = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "657:         $qdata->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "709:     <defaultgrade>1</defaultgrade>",
          "710:     <penalty>0.3333333</penalty>",
          "711:     <hidden>0</hidden>",
          "712:     <shuffleanswers>true</shuffleanswers>",
          "713:     <correctfeedback format=\"html\">",
          "714:       <text>Well done.</text>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:     <idnumber></idnumber>",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "880:         $qdata->length = 1;",
          "881:         $qdata->penalty = 0.3333333;",
          "882:         $qdata->hidden = 0;",
          "884:         $qdata->options = new stdClass();",
          "885:         $qdata->options->single = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "890:         $qdata->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "922:     <defaultgrade>2</defaultgrade>",
          "923:     <penalty>0.3333333</penalty>",
          "924:     <hidden>0</hidden>",
          "925:     <single>false</single>",
          "926:     <shuffleanswers>false</shuffleanswers>",
          "927:     <answernumbering>abc</answernumbering>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933:     <idnumber></idnumber>",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1053:         $qdata->length = 1;",
          "1054:         $qdata->penalty = 0.1;",
          "1055:         $qdata->hidden = 0;",
          "1057:         $qdata->options = new stdClass();",
          "1058:         $qdata->options->answers = array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1065:         $qdata->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1083:     <defaultgrade>1</defaultgrade>",
          "1084:     <penalty>0.1</penalty>",
          "1085:     <hidden>0</hidden>",
          "1086:     <answer fraction=\"100\" format=\"plain_text\">",
          "1087:       <text>42</text>",
          "1088:       <feedback format=\"html\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1096:     <idnumber></idnumber>",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1183:         $qdata->length = 1;",
          "1184:         $qdata->penalty = 0.3333333;",
          "1185:         $qdata->hidden = 0;",
          "1187:         $qdata->options = new stdClass();",
          "1188:         $qdata->options->usecase = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1197:         $qdata->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1214:     <defaultgrade>1</defaultgrade>",
          "1215:     <penalty>0.3333333</penalty>",
          "1216:     <hidden>0</hidden>",
          "1217:     <usecase>0</usecase>",
          "1218:     <answer fraction=\"100\" format=\"plain_text\">",
          "1219:       <text>Beta</text>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1229:     <idnumber></idnumber>",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1290:         $this->assert(new question_check_specified_fields_expectation($expectedq), $q);",
          "1291:     }",
          "1293:     public function test_export_truefalse() {",
          "1294:         $qdata = new stdClass();",
          "1295:         $qdata->id = 12;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1306:     public function test_import_truefalse_with_idnumber() {",
          "1307:         $xml = '  <question type=\"truefalse\">",
          "1308:     <name>",
          "1309:       <text>True false question</text>",
          "1310:     </name>",
          "1311:     <questiontext format=\"html\">",
          "1312:       <text>The answer is true.</text>",
          "1313:     </questiontext>",
          "1314:     <generalfeedback>",
          "1315:       <text>General feedback: You should have chosen true.</text>",
          "1316:     </generalfeedback>",
          "1317:     <defaultgrade>1</defaultgrade>",
          "1318:     <penalty>1</penalty>",
          "1319:     <hidden>0</hidden>",
          "1320:     <idnumber>TestIdNum1</idnumber>",
          "1321:     <answer fraction=\"100\">",
          "1322:       <text>true</text>",
          "1323:       <feedback>",
          "1324:         <text>Well done!</text>",
          "1325:       </feedback>",
          "1326:     </answer>",
          "1327:     <answer fraction=\"0\">",
          "1328:       <text>false</text>",
          "1329:       <feedback>",
          "1330:         <text>Doh!</text>",
          "1331:       </feedback>",
          "1332:     </answer>",
          "1333:   </question>';",
          "1334:         $xmldata = xmlize($xml);",
          "1336:         $importer = new qformat_xml();",
          "1337:         $q = $importer->import_truefalse($xmldata['question']);",
          "1339:         $expectedq = new stdClass();",
          "1340:         $expectedq->qtype = 'truefalse';",
          "1341:         $expectedq->name = 'True false question';",
          "1342:         $expectedq->questiontext = 'The answer is true.';",
          "1343:         $expectedq->questiontextformat = FORMAT_HTML;",
          "1344:         $expectedq->generalfeedback = 'General feedback: You should have chosen true.';",
          "1345:         $expectedq->defaultmark = 1;",
          "1346:         $expectedq->length = 1;",
          "1347:         $expectedq->penalty = 1;",
          "1348:         $expectedq->idnumber = 'TestIdNum1';",
          "1350:         $expectedq->feedbacktrue = array('text' => 'Well done!',",
          "1351:                 'format' => FORMAT_HTML);",
          "1352:         $expectedq->feedbackfalse = array('text' => 'Doh!',",
          "1353:                 'format' => FORMAT_HTML);",
          "1354:         $expectedq->correctanswer = true;",
          "1356:         $this->assert(new question_check_specified_fields_expectation($expectedq), $q);",
          "1357:     }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1304:         $qdata->length = 1;",
          "1305:         $qdata->penalty = 1;",
          "1306:         $qdata->hidden = 0;",
          "1308:         $qdata->options = new stdClass();",
          "1309:         $qdata->options->answers = array(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1373:         $qdata->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1330:     <defaultgrade>1</defaultgrade>",
          "1331:     <penalty>1</penalty>",
          "1332:     <hidden>0</hidden>",
          "1333:     <answer fraction=\"100\" format=\"plain_text\">",
          "1334:       <text>true</text>",
          "1335:       <feedback format=\"html\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1400:     <idnumber></idnumber>",
          "1401:     <answer fraction=\"100\" format=\"plain_text\">",
          "1402:       <text>true</text>",
          "1403:       <feedback format=\"html\">",
          "1404:         <text>Well done!</text>",
          "1405:       </feedback>",
          "1406:     </answer>",
          "1407:     <answer fraction=\"0\" format=\"plain_text\">",
          "1408:       <text>false</text>",
          "1409:       <feedback format=\"html\">",
          "1410:         <text>Doh!</text>",
          "1411:       </feedback>",
          "1412:     </answer>",
          "1413:   </question>",
          "1414: ';",
          "1416:         $this->assert_same_xml($expectedxml, $xml);",
          "1417:     }",
          "1419:     public function test_export_truefalse_with_idnumber() {",
          "1420:         $qdata = new stdClass();",
          "1421:         $qdata->id = 12;",
          "1422:         $qdata->contextid = \\context_system::instance()->id;",
          "1423:         $qdata->qtype = 'truefalse';",
          "1424:         $qdata->name = 'True false question';",
          "1425:         $qdata->questiontext = 'The answer is true.';",
          "1426:         $qdata->questiontextformat = FORMAT_HTML;",
          "1427:         $qdata->generalfeedback = 'General feedback: You should have chosen true.';",
          "1428:         $qdata->generalfeedbackformat = FORMAT_HTML;",
          "1429:         $qdata->defaultmark = 1;",
          "1430:         $qdata->length = 1;",
          "1431:         $qdata->penalty = 1;",
          "1432:         $qdata->hidden = 0;",
          "1433:         $qdata->idnumber = 'TestIDNum2';",
          "1435:         $qdata->options = new stdClass();",
          "1436:         $qdata->options->answers = array(",
          "1437:                 1 => new question_answer(1, 'True', 1, 'Well done!', FORMAT_HTML),",
          "1438:                 2 => new question_answer(2, 'False', 0, 'Doh!', FORMAT_HTML),",
          "1439:         );",
          "1440:         $qdata->options->trueanswer = 1;",
          "1441:         $qdata->options->falseanswer = 2;",
          "1443:         $exporter = new qformat_xml();",
          "1444:         $xml = $exporter->writequestion($qdata);",
          "1446:         $expectedxml = '<!-- question: 12  -->",
          "1447:   <question type=\"truefalse\">",
          "1448:     <name>",
          "1449:       <text>True false question</text>",
          "1450:     </name>",
          "1451:     <questiontext format=\"html\">",
          "1452:       <text>The answer is true.</text>",
          "1453:     </questiontext>",
          "1454:     <generalfeedback format=\"html\">",
          "1455:       <text>General feedback: You should have chosen true.</text>",
          "1456:     </generalfeedback>",
          "1457:     <defaultgrade>1</defaultgrade>",
          "1458:     <penalty>1</penalty>",
          "1459:     <hidden>0</hidden>",
          "1460:     <idnumber>TestIDNum2</idnumber>",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1474:     </generalfeedback>",
          "1475:     <penalty>0.3333333</penalty>",
          "1476:     <hidden>0</hidden>",
          "1477:     <hint format=\"html\">",
          "1478:       <text>Hint 1</text>",
          "1479:     </hint>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1605:     <idnumber></idnumber>",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1505:     </generalfeedback>",
          "1506:     <penalty>0.3333333</penalty>",
          "1507:     <hidden>0</hidden>",
          "1508:   </question>",
          "1509: ';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1637:     <idnumber></idnumber>",
          "",
          "---------------"
        ],
        "question/tests/backup_test.php||question/tests/backup_test.php": [
          "File: question/tests/backup_test.php -> question/tests/backup_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:         $qgen = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "116:         $context = context_coursecat::instance($category1->id);",
          "117:         $qcat = $qgen->create_question_category(array('contextid' => $context->id));",
          "122:         $qcontext = context::instance_by_id($qcat->contextid);",
          "",
          "[Removed Lines]",
          "118:         $question1 = $qgen->create_question('shortanswer', null, array('category' => $qcat->id));",
          "119:         $question2 = $qgen->create_question('shortanswer', null, array('category' => $qcat->id));",
          "",
          "[Added Lines]",
          "118:         $question1 = $qgen->create_question('shortanswer', null, array('category' => $qcat->id, 'idnumber' => 'q1'));",
          "119:         $question2 = $qgen->create_question('shortanswer', null, array('category' => $qcat->id, 'idnumber' => 'q2'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:         $this->assertCount(2, $questions);",
          "151:         foreach ($questions as $question) {",
          "152:             $tags = core_tag_tag::get_item_tags('core_question', 'question', $question->id);",
          "",
          "[Removed Lines]",
          "147:         $questions = $DB->get_records('question', array('category' => $qcat->id));",
          "",
          "[Added Lines]",
          "147:         $questions = $DB->get_records('question', array('category' => $qcat->id), 'idnumber');",
          "151:         $qcount = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:                 }",
          "163:                 $this->assertEquals($expected, $tag->taginstancecontextid);",
          "164:             }",
          "165:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:             $this->assertEquals('q' . $qcount, $question->idnumber);",
          "169:             $qcount++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:         }",
          "205:     }",
          "",
          "[Removed Lines]",
          "206: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "question/tests/behat/question_categories_idnumber.feature||question/tests/behat/question_categories_idnumber.feature": [
          "File: question/tests/behat/question_categories_idnumber.feature -> question/tests/behat/question_categories_idnumber.feature",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: @core @core_question",
          "2: Feature: A teacher can put questions with idnumbers in categories with idnumbers in the question bank",
          "3:   In order to organize my questions",
          "4:   As a teacher",
          "5:   I create and edit categories and move questions between them (now with idnumbers)",
          "7:   Background:",
          "8:     Given the following \"users\" exist:",
          "9:       | username | firstname | lastname | email                |",
          "10:       | teacher1 | Teacher   | 1        | teacher1@example.com |",
          "11:     And the following \"courses\" exist:",
          "12:       | fullname | shortname | format |",
          "13:       | Course 1 | C1        | weeks  |",
          "14:     And the following \"course enrolments\" exist:",
          "15:       | user     | course | role           |",
          "16:       | teacher1 | C1     | editingteacher |",
          "17:     And I log in as \"teacher1\"",
          "18:     And I am on \"Course 1\" course homepage",
          "20:   Scenario: A new question category can only be created with a unique idnumber for a context",
          "21:     # Note need to create the top category each time.",
          "22:     When the following \"question categories\" exist:",
          "23:       | contextlevel | reference | questioncategory | name           | idnumber |",
          "24:       | Course       | C1        | Top              | top            |          |",
          "25:       | Course       | C1        | top              | Used category  | c1used   |",
          "26:     And I navigate to \"Question bank > Categories\" in current page administration",
          "27:     And I set the following fields to these values:",
          "28:       | Name            | Sub used category |",
          "29:       | Parent category | Used category     |",
          "30:       | Category info   | Created as a test |",
          "31:       | ID number       | c1used            |",
          "32:     And I press \"Add category\"",
          "33:     # Standard warning.",
          "34:     Then I should see \"This ID number is already in use\"",
          "35:     # Correction to a unique idnumber for the context.",
          "36:     And I set the field \"ID number\" to \"c1unused\"",
          "37:     And I press \"Add category\"",
          "38:     Then I should see \"Sub used category (0)\"",
          "39:     And I should see \"Created as a test\" in the \"Sub used category\" \"list_item\"",
          "41:   Scenario: A question category can be edited and saved without changing the idnumber",
          "42:     When the following \"question categories\" exist:",
          "43:       | contextlevel | reference | questioncategory | name           | idnumber |",
          "44:       | Course       | C1        | Top              | top            |          |",
          "45:       | Course       | C1        | top              | Used category  | c1used   |",
          "46:     And I navigate to \"Question bank > Categories\" in current page administration",
          "47:     And I click on \"Edit\" \"link\" in the \"Used category\" \"list_item\"",
          "48:     And I press \"Save changes\"",
          "49:     Then I should not see \"This ID number is already in use\"",
          "51:   Scenario: A question can only have a unique idnumber within a category",
          "52:     When the following \"question categories\" exist:",
          "53:       | contextlevel | reference | questioncategory | name           | idnumber |",
          "54:       | Course       | C1        | Top              | top            |          |",
          "55:       | Course       | C1        | top              | Used category  | c1used   |",
          "56:     And the following \"questions\" exist:",
          "57:       | questioncategory | qtype | name            | questiontext                  | idnumber |",
          "58:       | Used category    | essay | Test question 1 | Write about whatever you want | q1       |",
          "59:       | Used category    | essay | Test question 2 | Write about whatever you want | q2       |",
          "60:     And I navigate to \"Question bank > Questions\" in current page administration",
          "61:     And I click on \"Edit\" \"link\" in the \"Test question 2\" \"table_row\"",
          "62:     And I set the field \"ID number\" to \"q1\"",
          "63:     And I press \"submitbutton\"",
          "64:     # This is the standard form warning reminding the user that the idnumber needs to be unique for a category.",
          "65:     Then I should see \"This ID number is already in use\"",
          "67:   Scenario: A question can be edited and saved without changing the idnumber",
          "68:     When the following \"question categories\" exist:",
          "69:       | contextlevel | reference | questioncategory | name           | idnumber |",
          "70:       | Course       | C1        | Top              | top            |          |",
          "71:       | Course       | C1        | top              | Used category  | c1used   |",
          "72:     And the following \"questions\" exist:",
          "73:       | questioncategory | qtype | name            | questiontext                  | idnumber |",
          "74:       | Used category    | essay | Test question 1 | Write about whatever you want | q1       |",
          "75:     And I navigate to \"Question bank > Questions\" in current page administration",
          "76:     And I click on \"Edit\" \"link\" in the \"Test question 1\" \"table_row\"",
          "77:     And I press \"Save changes\"",
          "78:     Then I should not see \"This ID number is already in use\"",
          "80:   Scenario: Question idnumber conficts found when saving to a different category.",
          "81:     When the following \"question categories\" exist:",
          "82:       | contextlevel | reference | questioncategory | name       |",
          "83:       | Course       | C1        | Top              | top        |",
          "84:       | Course       | C1        | top              | Category 1 |",
          "85:       | Course       | C1        | top              | Category 2 |",
          "86:     And the following \"questions\" exist:",
          "87:       | questioncategory | qtype | name             | questiontext                  | idnumber |",
          "88:       | Category 1       | essay | Question to edit | Write about whatever you want | q1       |",
          "89:       | Category 2       | essay | Other question   | Write about whatever you want | q2       |",
          "90:     And I navigate to \"Question bank > Questions\" in current page administration",
          "91:     And I click on \"Edit\" \"link\" in the \"Question to edit\" \"table_row\"",
          "92:     And I set the following fields to these values:",
          "93:       | Use this category | 0          |",
          "94:       | ID number         | q2         |",
          "95:       | Save in category  | Category 2 |",
          "96:     And I press \"Save changes\"",
          "97:     Then I should see \"This ID number is already in use\"",
          "99:   @javascript",
          "100:   Scenario: Moving a question between categories can force a change to the idnumber",
          "101:     And the following \"question categories\" exist:",
          "102:       | contextlevel | reference | questioncategory | name           | idnumber |",
          "103:       | Course       | C1        | Top              | top            |          |",
          "104:       | Course       | C1        | top              | Subcategory    | c1sub    |",
          "105:       | Course       | C1        | top              | Used category  | c1used   |",
          "106:     And the following \"questions\" exist:",
          "107:       | questioncategory | qtype | name            | questiontext                  | idnumber |",
          "108:       | Used category    | essay | Test question 1 | Write about whatever you want | q1       |",
          "109:       | Used category    | essay | Test question 2 | Write about whatever you want | q2       |",
          "110:       | Subcategory      | essay | Test question 3 | Write about whatever you want | q3       |",
          "111:     When I navigate to \"Question bank > Questions\" in current page administration",
          "112:     And I click on \"Edit\" \"link\" in the \"Test question 3\" \"table_row\"",
          "113:     # The q1 idnumber is allowed for this question while it is in the Subcategory.",
          "114:     And I set the field \"ID number\" to \"q1\"",
          "115:     And I press \"submitbutton\"",
          "116:     # Javascript is required for the next step.",
          "117:     And I click on \"Test question 3\" \"checkbox\" in the \"Test question 3\" \"table_row\"",
          "118:     And I set the field \"Question category\" to \"Used category\"",
          "119:     And I press \"Move to >>\"",
          "120:     And I click on \"Edit\" \"link\" in the \"Test question 3\" \"table_row\"",
          "121:     # The question just moved into this category needs to have a unique idnumber, so a number is appended.",
          "122:     Then the field \"ID number\" matches value \"q1_1\"",
          "",
          "---------------"
        ],
        "question/tests/generator/lib.php||question/tests/generator/lib.php": [
          "File: question/tests/generator/lib.php -> question/tests/generator/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:             'infoformat' => FORMAT_HTML,",
          "52:             'stamp'      => make_unique_id_code(),",
          "53:             'sortorder'  => 999,",
          "54:         );",
          "56:         $record = $this->datagenerator->combine_defaults_and_record($defaults, $record);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:             'idnumber'   => null",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:         $question->category  = $fromform->category;",
          "88:         $question->qtype     = $qtype;",
          "89:         $question->createdby = 0;",
          "91:         return $this->update_question($question, $which, $overrides);",
          "92:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:         $question->idnumber = null;",
          "",
          "---------------"
        ],
        "question/tests/generator_test.php||question/tests/generator_test.php": [
          "File: question/tests/generator_test.php -> question/tests/generator_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:         $this->assertSame('My category', $cat->name);",
          "52:         $this->assertSame(1, $cat->sortorder);",
          "53:     }",
          "54: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55:     public function test_idnumbers_in_categories_and_questions() {",
          "56:         $this->resetAfterTest();",
          "57:         $generator = $this->getDataGenerator()->get_plugin_generator('core_question');",
          "58:         list($category, $course, $qcat, $questions) = $generator->setup_course_and_questions();",
          "60:         $this->assertNull($qcat->idnumber);",
          "61:         $this->assertNull($questions[0]->idnumber);",
          "62:         $this->assertNull($questions[1]->idnumber);",
          "64:         $qcat1 = $generator->create_question_category(array(",
          "65:                 'name' => 'My category', 'sortorder' => 1, 'idnumber' => 'myqcat'));",
          "66:         $this->assertSame('myqcat', $qcat1->idnumber);",
          "67:         $quest1 = $generator->update_question($questions[0], null, ['idnumber' => 'myquest']);",
          "68:         $this->assertSame('myquest', $quest1->idnumber);",
          "69:         $quest3 = $generator->create_question('shortanswer', null,",
          "70:                 ['name' => 'sa1', 'category' => $qcat1->id, 'idnumber' => 'myquest_3']);",
          "71:         $this->assertSame('myquest_3', $quest3->idnumber);",
          "73:         question_move_questions_to_category([$quest1->id], $qcat1->id);",
          "74:         $this->assertSame('myquest', question_bank::load_question_data($quest1->id)->idnumber);",
          "76:         $quest2 = $generator->update_question($questions[1], null, ['idnumber' => 'myquest']);",
          "77:         question_move_questions_to_category([$quest2->id], $qcat1->id);",
          "78:         $this->assertSame('myquest_4', question_bank::load_question_data($quest2->id)->idnumber);",
          "80:         $quest4 = $generator->create_question('shortanswer', null, ['name' => 'sa1', 'category' => $qcat1->id, 'idnumber' => '0']);",
          "81:         $this->assertSame('0', $quest4->idnumber);",
          "82:     }",
          "",
          "---------------"
        ],
        "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php": [
          "File: question/type/ddwtos/tests/questiontype_test.php -> question/type/ddwtos/tests/questiontype_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         $dd->stamp = make_unique_id_code();",
          "76:         $dd->version = make_unique_id_code();",
          "77:         $dd->hidden = 0;",
          "78:         $dd->timecreated = time();",
          "79:         $dd->timemodified = time();",
          "80:         $dd->createdby = $USER->id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:         $dd->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:         $expected = test_question_maker::make_question('ddwtos');",
          "123:         $expected->stamp = $qdata->stamp;",
          "124:         $expected->version = $qdata->version;",
          "126:         $q = $this->qtype->make_question($qdata);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:         $expected->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "247:         $qdata = new stdClass();",
          "248:         $qdata->id = 123;",
          "249:         $qdata->contextid = \\context_system::instance()->id;",
          "250:         $qdata->qtype = 'ddwtos';",
          "251:         $qdata->name = 'A drag-and-drop question';",
          "252:         $qdata->questiontext = 'Put these in order: [[1]], [[2]], [[3]].';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:         $qdata->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "304:     <defaultgrade>3</defaultgrade>",
          "305:     <penalty>0.3333333</penalty>",
          "306:     <hidden>0</hidden>",
          "307:     <shuffleanswers>1</shuffleanswers>",
          "308:     <correctfeedback format=\"moodle_auto_format\">",
          "309:       <text><![CDATA[<p>Your answer is correct.</p>]]></text>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310:     <idnumber></idnumber>",
          "",
          "---------------"
        ],
        "question/type/edit_question_form.php||question/type/edit_question_form.php": [
          "File: question/type/edit_question_form.php -> question/type/edit_question_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:         $mform->setType('generalfeedback', PARAM_RAW);",
          "199:         $mform->addHelpButton('generalfeedback', 'generalfeedback', 'question');",
          "202:         $this->definition_inner($mform);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201:         $mform->addElement('text', 'idnumber', get_string('idnumber', 'question'), 'maxlength=\"100\"  size=\"10\"');",
          "202:         $mform->addHelpButton('idnumber', 'idnumber', 'question');",
          "203:         $mform->setType('idnumber', PARAM_RAW);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "791:     }",
          "793:     public function validation($fromform, $files) {",
          "794:         $errors = parent::validation($fromform, $files);",
          "795:         if (empty($fromform['makecopy']) && isset($this->question->id)",
          "796:                 && ($this->question->formoptions->canedit ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "798:         global $DB;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "810:             $errors['defaultmark'] = get_string('defaultmarkmustbepositive', 'question');",
          "811:         }",
          "813:         return $errors;",
          "814:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:         if (strpos($fromform['category'], ',') !== false) {",
          "821:             list($category, $categorycontextid) = explode(',', $fromform['category']);",
          "822:         } else {",
          "823:             $category = $fromform['category'];",
          "824:         }",
          "825:         if (isset($fromform['idnumber']) && ((string) $fromform['idnumber'] !== '')) {",
          "826:             if (empty($fromform['usecurrentcat']) && !empty($fromform['categorymoveto'])) {",
          "827:                 $categoryinfo = $fromform['categorymoveto'];",
          "828:             } else {",
          "829:                 $categoryinfo = $fromform['category'];",
          "830:             }",
          "831:             list($categoryid, $notused) = explode(',', $categoryinfo);",
          "832:             $conditions = 'category = ? AND idnumber = ?';",
          "833:             $params = [$categoryid, $fromform['idnumber']];",
          "834:             if (!empty($this->question->id)) {",
          "835:                 $conditions .= ' AND id <> ?';",
          "836:                 $params[] = $this->question->id;",
          "837:             }",
          "838:             if ($DB->record_exists_select('question', $conditions, $params)) {",
          "839:                 $errors['idnumber'] = get_string('idnumbertaken', 'error');",
          "840:             }",
          "841:         }",
          "",
          "---------------"
        ],
        "question/type/gapselect/tests/questiontype_test.php||question/type/gapselect/tests/questiontype_test.php": [
          "File: question/type/gapselect/tests/questiontype_test.php -> question/type/gapselect/tests/questiontype_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         $gapselect->stamp = make_unique_id_code();",
          "80:         $gapselect->version = make_unique_id_code();",
          "81:         $gapselect->hidden = 0;",
          "82:         $gapselect->timecreated = time();",
          "83:         $gapselect->timemodified = time();",
          "84:         $gapselect->createdby = $USER->id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         $gapselect->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:         $qdata = new stdClass();",
          "244:         $qdata->id = 123;",
          "245:         $qdata->contextid = \\context_system::instance()->id;",
          "246:         $qdata->qtype = 'gapselect';",
          "247:         $qdata->name = 'A select missing words question';",
          "248:         $qdata->questiontext = 'Put these in order: [[1]], [[2]], [[3]].';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:         $qdata->idnumber = null;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "294:     <defaultgrade>3</defaultgrade>",
          "295:     <penalty>0.3333333</penalty>",
          "296:     <hidden>0</hidden>",
          "297:     <shuffleanswers>1</shuffleanswers>",
          "298:     <correctfeedback format=\"moodle_auto_format\">",
          "299:       <text><![CDATA[<p>Your answer is correct.</p>]]></text>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:     <idnumber></idnumber>",
          "",
          "---------------"
        ],
        "question/type/match/tests/questiontype_test.php||question/type/match/tests/questiontype_test.php": [
          "File: question/type/match/tests/questiontype_test.php -> question/type/match/tests/questiontype_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         $q->stamp = make_unique_id_code();",
          "69:         $q->version = make_unique_id_code();",
          "70:         $q->hidden = 0;",
          "71:         $q->timecreated = time();",
          "72:         $q->timemodified = time();",
          "73:         $q->createdby = $USER->id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:         $q->idnumber = null;",
          "",
          "---------------"
        ],
        "question/type/missingtype/tests/missingtype_test.php||question/type/missingtype/tests/missingtype_test.php": [
          "File: question/type/missingtype/tests/missingtype_test.php -> question/type/missingtype/tests/missingtype_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:         $questiondata->stamp = make_unique_id_code();",
          "59:         $questiondata->version = make_unique_id_code();",
          "60:         $questiondata->hidden = 0;",
          "61:         $questiondata->timecreated = 0;",
          "62:         $questiondata->timemodified = 0;",
          "63:         $questiondata->createdby = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:         $questiondata->idnumber = null;",
          "",
          "---------------"
        ],
        "question/type/questiontypebase.php||question/type/questiontypebase.php": [
          "File: question/type/questiontypebase.php -> question/type/questiontypebase.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:             $question->defaultmark = $form->defaultmark;",
          "351:         }",
          "354:         if (empty($question->id)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:         if (isset($form->idnumber) && ((string) $form->idnumber !== '')) {",
          "355:             if (strpos($form->category, ',') !== false) {",
          "356:                 list($category, $categorycontextid) = explode(',', $form->category);",
          "357:             } else {",
          "358:                 $category = $form->category;",
          "359:             }",
          "360:             if (!$DB->record_exists('question',",
          "361:                     ['idnumber' => $form->idnumber, 'category' => $category])) {",
          "362:                 $question->idnumber = $form->idnumber;",
          "363:             }",
          "364:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "851:         $question->stamp = $questiondata->stamp;",
          "852:         $question->version = $questiondata->version;",
          "853:         $question->hidden = $questiondata->hidden;",
          "854:         $question->timecreated = $questiondata->timecreated;",
          "855:         $question->timemodified = $questiondata->timemodified;",
          "856:         $question->createdby = $questiondata->createdby;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867:         $question->idnumber = $questiondata->idnumber;",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018092000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018092100.04;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b29cfc582fb2d9b5c9e234bfa11e75de57ee1540",
      "candidate_info": {
        "commit_hash": "b29cfc582fb2d9b5c9e234bfa11e75de57ee1540",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/b29cfc582fb2d9b5c9e234bfa11e75de57ee1540",
        "files": [
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-64996 analytics: Make sure the no_teaching model is trained\n\nDue to the bug, the no_teaching model might have been marked as\nnot-trained in the database. Static predictions models (i.e. those using\na target based on assumptions, not facts) are always considered as\ntrained. If they were marked as not-trained, the prediction scheduled\ntask would skip them and they would produce no predictions.\n\nIdeally, such a fix should be done for all static models. But there is\nno easy way to do it during the upgrade where accessing the analytics\nAPI is not possible. I don't think there are many models out there that\nwould be affected by this so this seems to be good enough solution for\nnow (and the future ability to reset models will cover the rest).",
        "before_after_code_files": [
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2917:         upgrade_main_savepoint(true, 2019031500.01);",
          "2918:     }",
          "2920:     return true;",
          "2921: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2920:     if ($oldversion < 2019032200.01) {",
          "2922:         $DB->set_field('analytics_models', 'trained', 1, ['target' => '\\core\\analytics\\target\\no_teaching']);",
          "2923:         upgrade_main_savepoint(true, 2019032200.01);",
          "2924:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019032200.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019032200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}