{
  "cve_id": "CVE-2022-41711",
  "cve_desc": "Badaso version 2.6.0 allows an unauthenticated remote attacker to execute arbitrary code remotely on the server. This is possible because the application does not properly validate the data uploaded by users.",
  "repo": "uasoft-indonesia/badaso",
  "patch_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
  "patch_info": {
    "commit_hash": "22250eca7c364d991ce9e0a723941eae4889d6f9",
    "repo": "uasoft-indonesia/badaso",
    "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/22250eca7c364d991ce9e0a723941eae4889d6f9",
    "files": [
      "src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue"
    ],
    "message": "Merge pull request #807 from uasoft-indonesia/bugfix/v2/filter-mimeType\n\nBugfix[v2] add filter mimeType",
    "before_after_code_files": [
      "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue",
      "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue",
      "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue",
      "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue"
    ]
  },
  "patch_diff": {
    "src/resources/js/components/BadasoUploadFile.vue||src/resources/js/components/BadasoUploadFile.vue": [
      "File: src/resources/js/components/BadasoUploadFile.vue -> src/resources/js/components/BadasoUploadFile.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "336:           });",
      "337:           return;",
      "338:         }",
      "340:         this.uploadFile(files[0]);",
      "341:       }",
      "342:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "339:         if (!this.availableMimetypes.file.validMime.includes(files[0].type)) {",
      "340:           this.$vs.notify({",
      "341:             title: this.$t(\"alert.danger\"),",
      "342:             text: \"File type not allowed\",",
      "343:             color: \"danger\",",
      "344:           });",
      "345:           return;",
      "346:         }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadFileMultiple.vue||src/resources/js/components/BadasoUploadFileMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadFileMultiple.vue -> src/resources/js/components/BadasoUploadFileMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "367:             });",
      "368:             return;",
      "369:           }",
      "371:           this.uploadFile(file);",
      "372:         }",
      "373:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "370:           if (!this.availableMimetypes.file.validMime.includes(file.type)) {",
      "371:             this.$vs.notify({",
      "372:               title: this.$t(\"alert.danger\"),",
      "373:               text: \"File type not allowed\",",
      "374:               color: \"danger\",",
      "375:             });",
      "376:             return;",
      "377:           }",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImage.vue||src/resources/js/components/BadasoUploadImage.vue": [
      "File: src/resources/js/components/BadasoUploadImage.vue -> src/resources/js/components/BadasoUploadImage.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "380:           });",
      "381:           return;",
      "382:         }",
      "384:         this.uploadImage(files[0]);",
      "385:       }",
      "386:     },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "383:         if (!this.availableMimetypes.image.validMime.includes(files[0].type)){",
      "384:           this.$vs.notify({",
      "385:             title: this.$t(\"alert.danger\"),",
      "386:             text: \"File type not allowed\",",
      "387:             color: \"danger\",",
      "388:           });",
      "389:           return;",
      "390:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "421:     uploadImage(file) {",
      "422:       const files = new FormData();",
      "423:       files.append(\"upload\", file);",
      "425:       files.append(\"working_dir\", this.getActiveFolder);",
      "426:       this.$api.badasoFile",
      "427:         .uploadUsingLfm(files)",
      "",
      "[Removed Lines]",
      "424:       files.append(\"type\", \"image\");",
      "",
      "[Added Lines]",
      "431:       files.append(\"type\", file.type);",
      "",
      "---------------"
    ],
    "src/resources/js/components/BadasoUploadImageMultiple.vue||src/resources/js/components/BadasoUploadImageMultiple.vue": [
      "File: src/resources/js/components/BadasoUploadImageMultiple.vue -> src/resources/js/components/BadasoUploadImageMultiple.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:             });",
      "396:             return;",
      "397:           }",
      "399:           this.uploadImage(file);",
      "400:         }",
      "401:       }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "398:           if (!this.availableMimetypes.image.validMime.includes(file.type)) {",
      "399:             this.$vs.notify({",
      "400:               title: this.$t(\"alert.danger\"),",
      "401:               text: \"File type not allowed\",",
      "402:               color: \"danger\",",
      "403:             });",
      "404:             return;",
      "405:           }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8f989d37038348cfda2e68c93ad1c2a0751cebe4",
      "candidate_info": {
        "commit_hash": "8f989d37038348cfda2e68c93ad1c2a0751cebe4",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/8f989d37038348cfda2e68c93ad1c2a0751cebe4",
        "files": [
          "src/Controllers/BadasoDatabaseController.php",
          "src/Helpers/CallHelperTest.php",
          "src/resources/lang/id/validation.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Controllers/BadasoDatabaseController.php||src/Controllers/BadasoDatabaseController.php",
          "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php",
          "src/resources/lang/id/validation.php||src/resources/lang/id/validation.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Controllers/BadasoDatabaseController.php||src/Controllers/BadasoDatabaseController.php": [
          "File: src/Controllers/BadasoDatabaseController.php -> src/Controllers/BadasoDatabaseController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:                     'required',",
          "47:                     'string',",
          "48:                     function ($attribute, $value, $fail) use ($request) {",
          "59:                         }",
          "63:             ]);",
          "65:             $this->file_name = $this->file_generator->generateBDOMigrationFile($request->table, 'create', $request->rows, $request->relations);",
          "67:             $exitCode = Artisan::call('migrate', [",
          "69:             ]);",
          "71:             switch ($exitCode) {",
          "",
          "[Removed Lines]",
          "49:                     $request_data = $request->rows;",
          "51:                     $mysql_data_type = [",
          "52:                         'tinyint', 'smallint', 'mediumint', 'int', 'integer', 'bigint', 'decimal', 'float', 'double', 'bit', 'char', 'varchar', 'binary', 'varbinary', 'tinyblob', 'blob', 'mediumblob', 'longblob', 'tinytext', 'text', 'mediumtext', 'longtext', 'enum', 'set', 'date', 'time', 'datetime', 'timestamp', 'year', 'geometry', 'point', 'linestring', 'polygon', 'geometrycollection', 'multilinestring', 'multipoint', 'multipolygon', 'json', 'boolean',",
          "53:                     ];",
          "54:                     $cek = [];",
          "55:                     foreach ($request_data as $key => $value) {",
          "56:                         if (! in_array($value['field_type'], $mysql_data_type)) {",
          "57:                             $cek[] = $value['field_type'];",
          "58:                             $fail(__('badaso::validation.database.wrong_type_data'));",
          "60:                     }",
          "61:                 },",
          "62:                 ]",
          "68:                 '--path' => 'database/migrations/badaso/','--force' => true",
          "",
          "[Added Lines]",
          "49:                         $request_data = $request->rows;",
          "51:                         $mysql_data_type = [",
          "52:                             'tinyint', 'smallint', 'mediumint', 'int', 'integer', 'bigint', 'decimal', 'float', 'double', 'bit', 'char', 'varchar', 'binary', 'varbinary', 'tinyblob', 'blob', 'mediumblob', 'longblob', 'tinytext', 'text', 'mediumtext', 'longtext', 'enum', 'set', 'date', 'time', 'datetime', 'timestamp', 'year', 'geometry', 'point', 'linestring', 'polygon', 'geometrycollection', 'multilinestring', 'multipoint', 'multipolygon', 'json', 'boolean',",
          "53:                         ];",
          "54:                         $cek = [];",
          "55:                         foreach ($request_data as $key => $value) {",
          "56:                             if (! in_array($value['field_type'], $mysql_data_type)) {",
          "57:                                 $cek[] = $value['field_type'];",
          "58:                                 $fail(__('badaso::validation.database.wrong_type_data'));",
          "59:                             }",
          "61:                     },",
          "62:                 ],",
          "68:                 '--path' => 'database/migrations/badaso/', '--force' => true,",
          "",
          "---------------"
        ],
        "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php": [
          "File: src/Helpers/CallHelperTest.php -> src/Helpers/CallHelperTest.php"
        ],
        "src/resources/lang/id/validation.php||src/resources/lang/id/validation.php": [
          "File: src/resources/lang/id/validation.php -> src/resources/lang/id/validation.php"
        ]
      }
    },
    {
      "candidate_hash": "57acc844afb6c4f6f4c5bd9b121d7cc43267f27d",
      "candidate_info": {
        "commit_hash": "57acc844afb6c4f6f4c5bd9b121d7cc43267f27d",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/57acc844afb6c4f6f4c5bd9b121d7cc43267f27d",
        "files": [
          "src/Commands/BadasoTestSetup.php",
          "src/Helpers/CallHelperTest.php",
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "Apply fixes from StyleCI",
        "before_after_code_files": [
          "src/Commands/BadasoTestSetup.php||src/Commands/BadasoTestSetup.php",
          "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php",
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Commands/BadasoTestSetup.php||src/Commands/BadasoTestSetup.php": [
          "File: src/Commands/BadasoTestSetup.php -> src/Commands/BadasoTestSetup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: class BadasoTestSetup extends Command",
          "9: {",
          "12:     public static $BADASO_UNIT_TEST_PATHS = [",
          "14:     ];",
          "15:     public static $BADASO_FEATURE_TEST_PATHS = [",
          "17:     ];",
          "",
          "[Removed Lines]",
          "11:     public static $PHPUNIT_XML_PATH = \"phpunit.xml\";",
          "13:         \"./packages/badaso/core/tests/Unit\",",
          "16:         \"./packages/badaso/core/tests/Feature\",",
          "",
          "[Added Lines]",
          "10:     public static $PHPUNIT_XML_PATH = 'phpunit.xml';",
          "12:         './packages/badaso/core/tests/Unit',",
          "15:         './packages/badaso/core/tests/Feature',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:                     foreach ($badaso_test_paths as $_ => $badaso_test_path) {",
          "80:                             $test_suite_features->item($index_test_suite_feature)->appendChild($new_directory);",
          "81:                         }",
          "",
          "[Removed Lines]",
          "76:                         if (!in_array($badaso_test_path, $now_test_paths)) {",
          "77:                             $new_directory = $document->createElement(\"directory\", $badaso_test_path);",
          "78:                             $new_directory->setAttribute(\"suffix\", \"Test.php\");",
          "",
          "[Added Lines]",
          "75:                         if (! in_array($badaso_test_path, $now_test_paths)) {",
          "76:                             $new_directory = $document->createElement('directory', $badaso_test_path);",
          "77:                             $new_directory->setAttribute('suffix', 'Test.php');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:                     foreach ($badaso_test_paths as $_ => $badaso_test_path) {",
          "102:                             $test_suite_features->item($index_test_suite_feature)->appendChild($new_directory);",
          "103:                         }",
          "",
          "[Removed Lines]",
          "98:                         if (!in_array($badaso_test_path, $now_test_paths)) {",
          "99:                             $new_directory = $document->createElement(\"directory\", $badaso_test_path);",
          "100:                             $new_directory->setAttribute(\"suffix\", \"Test.php\");",
          "",
          "[Added Lines]",
          "97:                         if (! in_array($badaso_test_path, $now_test_paths)) {",
          "98:                             $new_directory = $document->createElement('directory', $badaso_test_path);",
          "99:                             $new_directory->setAttribute('suffix', 'Test.php');",
          "",
          "---------------"
        ],
        "src/Helpers/CallHelperTest.php||src/Helpers/CallHelperTest.php": [
          "File: src/Helpers/CallHelperTest.php -> src/Helpers/CallHelperTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: class CallHelperTest",
          "12: {",
          "16:     public static function getTokenUserAdminAuthorize()",
          "17:     {",
          "",
          "[Removed Lines]",
          "13:     static $KEY_TOKEN_ADMIN_AUTHORIZE = \"TOKEN_ADMIN_AUTHORIZE\";",
          "14:     static $ADMINISTRATOR_ROLE_ID = 1;",
          "",
          "[Added Lines]",
          "13:     public static $KEY_TOKEN_ADMIN_AUTHORIZE = 'TOKEN_ADMIN_AUTHORIZE';",
          "14:     public static $ADMINISTRATOR_ROLE_ID = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     public static function getDataCreateOrUpdateUserAdmin()",
          "33:     {",
          "35:         $username = $name;",
          "36:         $email = \"{$name}@test.com\";",
          "37:         $password = Hash::make($name);",
          "",
          "[Removed Lines]",
          "34:         $name = env(\"BADASO_USER_NAME\", \"badaso.test\");",
          "",
          "[Added Lines]",
          "35:         $name = env('BADASO_USER_NAME', 'badaso.test');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:         $user = User::where('email', $data_create_or_update_user_admin['email'])",
          "61:             ->first();",
          "64:             $user = User::create($data_create_or_update_user_admin);",
          "65:         } else {",
          "66:             $user->update($data_create_or_update_user_admin);",
          "67:         }",
          "69:         $user_role = UserRole::where('user_id', $user->id)->first();",
          "71:             $user_role = UserRole::create(['user_id' => $user->id, 'role_id' => self::$ADMINISTRATOR_ROLE_ID]);",
          "72:         }",
          "74:         return $user;",
          "75:     }",
          "78:     public static function handleUserAdminAuthorize(TestCase $test_case)",
          "79:     {",
          "80:         $user = self::getUserAdminRole();",
          "82:             'email' =>  $user->email,",
          "83:             'password' => $user->name,",
          "85:         ]);",
          "86:         $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "63:         if (!isset($user)) {",
          "70:         if (!isset($user_role)) {",
          "81:         $response = $test_case->json('POST', CallHelperTest::getUrlApiV1Prefix(\"/auth/login\"), [",
          "84:             'remember' => false",
          "",
          "[Added Lines]",
          "64:         if (! isset($user)) {",
          "71:         if (! isset($user_role)) {",
          "81:         $response = $test_case->json('POST', CallHelperTest::getUrlApiV1Prefix('/auth/login'), [",
          "84:             'remember' => false,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:     public static function withAuthorizeBearer(TestCase $test_case): TestCase",
          "103:     {",
          "105:     }",
          "108:         Cache::store('file')->set($key, $value);",
          "109:     }",
          "112:         return Cache::store('file')->get($key);",
          "113:     }",
          "116:         Cache::store('file')->clear();",
          "117:     }",
          "118: }",
          "",
          "[Removed Lines]",
          "104:         return $test_case->withHeader(\"Authorization\", self::getTokenUserAdminAuthorizeBearer());",
          "107:     public static function setCache($key, $value){",
          "111:     public static function getCache($key){",
          "115:     public static function clearCache(){",
          "",
          "[Added Lines]",
          "104:         return $test_case->withHeader('Authorization', self::getTokenUserAdminAuthorizeBearer());",
          "107:     public static function setCache($key, $value)",
          "108:     {",
          "112:     public static function getCache($key)",
          "113:     {",
          "117:     public static function clearCache()",
          "118:     {",
          "",
          "---------------"
        ],
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: class BadasoApiCrudManagementTest extends TestCase",
          "14: {",
          "15:     private $KEY_LIST_CREATE_TABLES = 'LIST_CREATE_TABLES';",
          "19:     private $KEY_DATA_ADD_ENTITY = 'KEY_DATA_ADD_ENTITY';",
          "21:     private $MAXIMAL_CREATE_ENTITY = 3;",
          "23:     private function getFields(): array",
          "",
          "[Removed Lines]",
          "16:     private $KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG = \"DATA_TABLE_CRUD_MANAGEMENT_LOG\";",
          "17:     private $KEY_DATA_RESPONSE_ADD_CRUD_MANAGEMENT = \"DATA_RESPONSE_ADD_CRUD_MANAGEMENT\";",
          "18:     private $KEY_DATA_RESPONSE_READ_TABLE_ENTITY = \"KEY_DATA_RESPONSE_READ_TABLE_ENTITY\";",
          "20:     private $TABLE_TEST_PREFIX = \"test_table_\";",
          "",
          "[Added Lines]",
          "16:     private $KEY_DATA_TABLE_CRUD_MANAGEMENT_LOG = 'DATA_TABLE_CRUD_MANAGEMENT_LOG';",
          "17:     private $KEY_DATA_RESPONSE_ADD_CRUD_MANAGEMENT = 'DATA_RESPONSE_ADD_CRUD_MANAGEMENT';",
          "18:     private $KEY_DATA_RESPONSE_READ_TABLE_ENTITY = 'KEY_DATA_RESPONSE_READ_TABLE_ENTITY';",
          "20:     private $TABLE_TEST_PREFIX = 'test_table_';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:                     'schema_type' => 'string',",
          "37:                     'details' => json_encode((object) []),",
          "38:                     'example' => 'email@example.com',",
          "40:                 ],",
          "41:                 [",
          "42:                     'badaso_type' => 'password',",
          "43:                     'schema_type' => 'string',",
          "44:                     'details' => json_encode((object) []),",
          "47:                 ],",
          "48:                 [",
          "49:                     'badaso_type' => 'textarea',",
          "",
          "[Removed Lines]",
          "39:                     'example_update' => 'update.email@example.com'",
          "45:                     'example' => \"password\",",
          "46:                     'example_update' => \"password.update\",",
          "",
          "[Added Lines]",
          "39:                     'example_update' => 'update.email@example.com',",
          "45:                     'example' => 'password',",
          "46:                     'example_update' => 'password.update',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:                         'items' => [",
          "60:                             ['label' => 'example_1', 'value' => 'example_1'],",
          "61:                             ['label' => 'example_2', 'value' => 'example_2'],",
          "63:                     ]),",
          "64:                     'example' => ['example_1'],",
          "65:                     'example_update' => ['example_2'],",
          "",
          "[Removed Lines]",
          "62:                         ]",
          "",
          "[Added Lines]",
          "62:                         ],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "89:                     'badaso_type' => 'time',",
          "90:                     'schema_type' => 'time',",
          "91:                     'details' => json_encode((object) []),",
          "94:                 ],",
          "95:                 [",
          "96:                     'badaso_type' => 'date',",
          "97:                     'schema_type' => 'string',",
          "98:                     'details' => json_encode((object) []),",
          "101:                 ],",
          "102:                 [",
          "103:                     'badaso_type' => 'datetime',",
          "104:                     'schema_type' => 'datetime',",
          "105:                     'details' => json_encode((object) []),",
          "108:                 ],",
          "109:                 [",
          "110:                     'badaso_type' => 'select',",
          "",
          "[Removed Lines]",
          "92:                     'example' => \"2022-01-27T04:37:18.327Z\",",
          "93:                     'example_update' => \"2023-01-27T04:37:18.327Z\",",
          "99:                     'example' => \"2022-01-27T04:37:18.327Z\",",
          "100:                     'example_update' => \"2023-01-27T04:37:18.327Z\",",
          "106:                     'example' => \"2022-01-27T04:37:18.327Z\",",
          "107:                     'example_update' => \"2023-01-27T04:37:18.327Z\",",
          "",
          "[Added Lines]",
          "92:                     'example' => '2022-01-27T04:37:18.327Z',",
          "93:                     'example_update' => '2023-01-27T04:37:18.327Z',",
          "99:                     'example' => '2022-01-27T04:37:18.327Z',",
          "100:                     'example_update' => '2023-01-27T04:37:18.327Z',",
          "106:                     'example' => '2022-01-27T04:37:18.327Z',",
          "107:                     'example_update' => '2023-01-27T04:37:18.327Z',",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:                         'items' => [",
          "114:                             ['label' => 'example_1', 'value' => 'example_1'],",
          "115:                             ['label' => 'example_2', 'value' => 'example_2'],",
          "117:                     ]),",
          "118:                     'example' => 'example_1',",
          "119:                     'example_update' => 'example_2',",
          "",
          "[Removed Lines]",
          "116:                         ]",
          "",
          "[Added Lines]",
          "116:                         ],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "125:                         'items' => [",
          "126:                             ['label' => 'example_1', 'value' => 'example_1'],",
          "127:                             ['label' => 'example_2', 'value' => 'example_2'],",
          "129:                     ]),",
          "130:                     'example' => 'example_1',",
          "131:                     'example_update' => 'example_2',",
          "",
          "[Removed Lines]",
          "128:                         ]",
          "",
          "[Added Lines]",
          "128:                         ],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "155:                     'badaso_type' => 'tags',",
          "156:                     'schema_type' => 'string',",
          "157:                     'details' => json_encode((object) []),",
          "160:                 ],",
          "161:                 [",
          "162:                     'badaso_type' => 'code',",
          "163:                     'schema_type' => 'string',",
          "164:                     'details' => json_encode((object) []),",
          "165:                     'example' => 'code',",
          "167:                 ],",
          "168:                 [",
          "169:                     'badaso_type' => 'hidden',",
          "",
          "[Removed Lines]",
          "158:                     'example' => join(\",\", [\"badaso\", \"test\", \"crud\", \"management\"]),",
          "159:                     'example_update' => join(\",\", [\"badaso\", \"test\", \"crud\", \"management\", \"update\"]),",
          "166:                     'example_update' => 'code.update'",
          "",
          "[Added Lines]",
          "158:                     'example' => join(',', ['badaso', 'test', 'crud', 'management']),",
          "159:                     'example_update' => join(',', ['badaso', 'test', 'crud', 'management', 'update']),",
          "166:                     'example_update' => 'code.update',",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "190:                     'schema_type' => 'string',",
          "191:                     'details' => json_encode((object) []),",
          "192:                     'example' => 'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png',",
          "194:                 ],",
          "195:                 [",
          "196:                     'badaso_type' => 'select_multiple',",
          "",
          "[Removed Lines]",
          "193:                     'example_update' => 'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619581504968_uasoft.png'",
          "",
          "[Added Lines]",
          "193:                     'example_update' => 'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619581504968_uasoft.png',",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "200:                             ['label' => 'example_1', 'value' => 'example_1'],",
          "201:                             ['label' => 'example_2', 'value' => 'example_2'],",
          "202:                             ['label' => 'example_3', 'value' => 'example_3'],",
          "204:                     ]),",
          "205:                     'example' => [",
          "206:                         'example_1',",
          "208:                     ],",
          "209:                     'example_update' => [",
          "210:                         'example_2',",
          "212:                     ],",
          "213:                 ],",
          "214:                 [",
          "",
          "[Removed Lines]",
          "203:                         ]",
          "207:                         'example_2'",
          "211:                         'example_3'",
          "",
          "[Added Lines]",
          "203:                         ],",
          "207:                         'example_2',",
          "211:                         'example_3',",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "252:         $table_names = [];",
          "253:         for ($index = 1; $index <= $max_count_table_generate; $index++) {",
          "254:             $table_name = \"{$this->TABLE_TEST_PREFIX}{$index}\";",
          "256:                 Schema::create($table_name, function (Blueprint $table) use ($index, $table_names) {",
          "257:                     $table->id();",
          "",
          "[Removed Lines]",
          "255:             if (!Schema::hasTable($table_name)) {",
          "",
          "[Added Lines]",
          "255:             if (! Schema::hasTable($table_name)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "262:                                 $table_name_relation = $table_names[0];",
          "263:                                 $table->{$schema_type}($badaso_type)->nullable()->unsigned();",
          "266:                             }",
          "267:                         } else {",
          "268:                             $table->{$schema_type}($badaso_type)->nullable();",
          "",
          "[Removed Lines]",
          "265:                                 $table->foreign($badaso_type)->references(\"id\")->on($table_name_relation)->onDelete('cascade');",
          "",
          "[Added Lines]",
          "265:                                 $table->foreign($badaso_type)->references('id')->on($table_name_relation)->onDelete('cascade');",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "302:     public function testBrowseCrudManagement()",
          "303:     {",
          "304:         $response = CallHelperTest::withAuthorizeBearer($this)",
          "306:         $response->assertSuccessful();",
          "308:         $expect_table = config('badaso-watch-tables');",
          "",
          "[Removed Lines]",
          "305:             ->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/crud\"));",
          "",
          "[Added Lines]",
          "305:             ->json('GET', CallHelperTest::getUrlApiV1Prefix('/crud'));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "333:         $data_table_crud_management_log = [];",
          "334:         $data_response_add_crud_management = [];",
          "335:         foreach ($table_names as $index_table_name => $table_name) {",
          "337:             $rows = [",
          "338:                 [",
          "351:                 ],",
          "352:                 [",
          "365:                 ],",
          "366:                 [",
          "379:                 ],",
          "380:                 [",
          "394:             ];",
          "395:             foreach ($const_fields as $key => ['badaso_type' => $badaso_type, 'schema_type' => $schema_type, 'details' => $details]) {",
          "399:                 $row = [",
          "412:                 ];",
          "414:                 if ($badaso_type == 'relation') {",
          "415:                     $destination_field = $const_fields[rand(0, count($const_fields) - 1)];",
          "418:                     if ($destination_field['badaso_type'] == 'relation') {",
          "420:                     }",
          "422:                     $row['relationType'] = ['belongs_to', 'has_one', 'has_many'][rand(0, 2)];",
          "",
          "[Removed Lines]",
          "339:                     \"field\" => \"id\",",
          "340:                     \"type\" => \"integer\",",
          "341:                     \"displayName\" => \"Id\",",
          "342:                     \"required\" => rand(0, 1),",
          "343:                     \"browse\" => rand(0, 1),",
          "344:                     \"read\" => rand(0, 1),",
          "345:                     \"edit\" => 0,",
          "346:                     \"add\" => 0,",
          "347:                     \"delete\" => rand(0, 1),",
          "348:                     \"details\" => json_encode((object) []),",
          "349:                     \"order\" => 1,",
          "350:                     \"setRelation\" => false",
          "353:                     \"field\" => \"created_at\",",
          "354:                     \"type\" => \"datetime\",",
          "355:                     \"displayName\" => \"Created At\",",
          "356:                     \"required\" => rand(0, 1),",
          "357:                     \"browse\" => rand(0, 1),",
          "358:                     \"read\" => rand(0, 1),",
          "359:                     \"edit\" => 0,",
          "360:                     \"add\" => 0,",
          "361:                     \"delete\" => rand(0, 1),",
          "362:                     \"details\" => json_encode((object) []),",
          "363:                     \"order\" => 1,",
          "364:                     \"setRelation\" => false",
          "367:                     \"field\" => \"updated_at\",",
          "368:                     \"type\" => \"datetime\",",
          "369:                     \"displayName\" => \"Update At\",",
          "370:                     \"required\" => rand(0, 1),",
          "371:                     \"browse\" => rand(0, 1),",
          "372:                     \"read\" => rand(0, 1),",
          "373:                     \"edit\" => 0,",
          "374:                     \"add\" => 0,",
          "375:                     \"delete\" => rand(0, 1),",
          "376:                     \"details\" => json_encode((object) []),",
          "377:                     \"order\" => 1,",
          "378:                     \"setRelation\" => false",
          "381:                     \"field\" => \"deleted_at\",",
          "382:                     \"type\" => \"datetime\",",
          "383:                     \"displayName\" => \"Deleted At\",",
          "384:                     \"required\" => rand(0, 1),",
          "385:                     \"browse\" => rand(0, 1),",
          "386:                     \"read\" => rand(0, 1),",
          "387:                     \"edit\" => 0,",
          "388:                     \"add\" => 0,",
          "389:                     \"delete\" => rand(0, 1),",
          "390:                     \"details\" => json_encode((object) []),",
          "391:                     \"order\" => 1,",
          "392:                     \"setRelation\" => false",
          "393:                 ]",
          "396:                 if ($index_table_name == 0 && $badaso_type == 'relation') continue;",
          "398:                 $field_name = ucwords(str_replace([\"_\"], \" \", $badaso_type));",
          "400:                     \"field\" => $badaso_type,",
          "401:                     \"type\" => $badaso_type,",
          "402:                     \"displayName\" => $field_name,",
          "403:                     \"required\" => rand(0, 1),",
          "404:                     \"browse\" => rand(0, 1),",
          "405:                     \"read\" => rand(0, 1),",
          "406:                     \"edit\" => rand(0, 1),",
          "407:                     \"add\" => rand(0, 1),",
          "408:                     \"delete\" => rand(0, 1),",
          "409:                     \"details\" => $details,",
          "410:                     \"order\" => 1,",
          "411:                     \"setRelation\" => false",
          "419:                         $destination_field['badaso_type'] = \"id\";",
          "",
          "[Added Lines]",
          "339:                     'field' => 'id',",
          "340:                     'type' => 'integer',",
          "341:                     'displayName' => 'Id',",
          "342:                     'required' => rand(0, 1),",
          "343:                     'browse' => rand(0, 1),",
          "344:                     'read' => rand(0, 1),",
          "345:                     'edit' => 0,",
          "346:                     'add' => 0,",
          "347:                     'delete' => rand(0, 1),",
          "348:                     'details' => json_encode((object) []),",
          "349:                     'order' => 1,",
          "350:                     'setRelation' => false,",
          "353:                     'field' => 'created_at',",
          "354:                     'type' => 'datetime',",
          "355:                     'displayName' => 'Created At',",
          "356:                     'required' => rand(0, 1),",
          "357:                     'browse' => rand(0, 1),",
          "358:                     'read' => rand(0, 1),",
          "359:                     'edit' => 0,",
          "360:                     'add' => 0,",
          "361:                     'delete' => rand(0, 1),",
          "362:                     'details' => json_encode((object) []),",
          "363:                     'order' => 1,",
          "364:                     'setRelation' => false,",
          "367:                     'field' => 'updated_at',",
          "368:                     'type' => 'datetime',",
          "369:                     'displayName' => 'Update At',",
          "370:                     'required' => rand(0, 1),",
          "371:                     'browse' => rand(0, 1),",
          "372:                     'read' => rand(0, 1),",
          "373:                     'edit' => 0,",
          "374:                     'add' => 0,",
          "375:                     'delete' => rand(0, 1),",
          "376:                     'details' => json_encode((object) []),",
          "377:                     'order' => 1,",
          "378:                     'setRelation' => false,",
          "381:                     'field' => 'deleted_at',",
          "382:                     'type' => 'datetime',",
          "383:                     'displayName' => 'Deleted At',",
          "384:                     'required' => rand(0, 1),",
          "385:                     'browse' => rand(0, 1),",
          "386:                     'read' => rand(0, 1),",
          "387:                     'edit' => 0,",
          "388:                     'add' => 0,",
          "389:                     'delete' => rand(0, 1),",
          "390:                     'details' => json_encode((object) []),",
          "391:                     'order' => 1,",
          "392:                     'setRelation' => false,",
          "393:                 ],",
          "396:                 if ($index_table_name == 0 && $badaso_type == 'relation') {",
          "397:                     continue;",
          "398:                 }",
          "400:                 $field_name = ucwords(str_replace(['_'], ' ', $badaso_type));",
          "402:                     'field' => $badaso_type,",
          "403:                     'type' => $badaso_type,",
          "404:                     'displayName' => $field_name,",
          "405:                     'required' => rand(0, 1),",
          "406:                     'browse' => rand(0, 1),",
          "407:                     'read' => rand(0, 1),",
          "408:                     'edit' => rand(0, 1),",
          "409:                     'add' => rand(0, 1),",
          "410:                     'delete' => rand(0, 1),",
          "411:                     'details' => $details,",
          "412:                     'order' => 1,",
          "413:                     'setRelation' => false,",
          "420:                         $destination_field['badaso_type'] = 'id';",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "431:             }",
          "432:             $data_table_crud_management_log[$index_table_name]['rows'] = $rows;",
          "435:             $model_data = [];",
          "436:             if (rand(0, 1)) {",
          "440:                 $model_file_name = \"{$model_name}.php\";",
          "441:                 $model_body = <<<PHP",
          "442:                 <?php",
          "",
          "[Removed Lines]",
          "434:             $model = \"\";",
          "438:                 $fillable = join(\",\", $const_fillable);",
          "439:                 $model_name = str_replace([\" \", \"_\"], \"\", ucwords($table_name));",
          "",
          "[Added Lines]",
          "435:             $model = '';",
          "439:                 $fillable = join(',', $const_fillable);",
          "440:                 $model_name = str_replace([' ', '_'], '', ucwords($table_name));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "448:                 }",
          "449:                 PHP;",
          "450:                 $model_path = app_path(\"Models/$model_file_name\");",
          "452:                     file_put_contents($model_path, $model_body);",
          "453:                 }",
          "",
          "[Removed Lines]",
          "451:                 if (!file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "452:                 if (! file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "465:             }",
          "466:             $data_table_crud_management_log[$index_table_name]['model'] = $model_data;",
          "469:             $controller_data = [];",
          "470:             if (rand(0, 1)) {",
          "473:                 $controller_file_name = \"{$controller_name}.php\";",
          "474:                 $controller_body = <<<PHP",
          "475:                 <?php",
          "",
          "[Removed Lines]",
          "468:             $controller = \"\";",
          "472:                 $controller_name = str_replace([\" \", \"_\"], \"\", ucwords($table_name)) . \"Controller\";",
          "",
          "[Added Lines]",
          "469:             $controller = '';",
          "473:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "478:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "479:                 PHP;",
          "480:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "482:                     file_put_contents($controller_path, $controller_body);",
          "483:                 }",
          "",
          "[Removed Lines]",
          "481:                 if (!file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "482:                 if (! file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "495:             }",
          "496:             $data_table_crud_management_log[$index_table_name]['controller'] = $controller_data;",
          "499:             $request_body = [",
          "519:             ];",
          "521:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "498:             $table_label = ucwords(str_replace([\"_\"], \" \", $table_name));",
          "500:                 \"name\" =>  $table_name,",
          "501:                 \"slug\" =>  $table_name,",
          "502:                 \"displayNameSingular\" =>  $table_label,",
          "503:                 \"displayNamePlural\" =>  $table_label,",
          "504:                 \"icon\" =>  \"add\",",
          "505:                 \"modelName\" =>  $model,",
          "506:                 \"policyName\" =>  \"\",",
          "507:                 \"description\" => \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",",
          "508:                 \"generatePermissions\" =>  rand(0, 1),",
          "509:                 \"createSoftDelete\" =>  rand(0, 1),",
          "510:                 \"serverSide\" =>  rand(0, 1),",
          "511:                 \"details\" =>  json_encode((object)[]),",
          "512:                 \"controller\" =>  $controller,",
          "513:                 \"orderColumn\" =>  \"\",",
          "514:                 \"orderDisplayColumn\" =>  \"\",",
          "515:                 \"orderDirection\" =>  \"\",",
          "516:                 \"notification\" =>   array_slice([\"onCreate\", \"onDelete\", \"onUpdate\", \"onRead\"], 0, rand(0, 3)),",
          "517:                 \"isMaintenance\" => rand(0, 1),",
          "518:                 \"rows\" => $rows,",
          "520:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"POST\", CallHelperTest::getUrlApiV1Prefix('/crud/add'), $request_body);",
          "",
          "[Added Lines]",
          "499:             $table_label = ucwords(str_replace(['_'], ' ', $table_name));",
          "501:                 'name' =>  $table_name,",
          "502:                 'slug' =>  $table_name,",
          "503:                 'displayNameSingular' =>  $table_label,",
          "504:                 'displayNamePlural' =>  $table_label,",
          "505:                 'icon' =>  'add',",
          "506:                 'modelName' =>  $model,",
          "507:                 'policyName' =>  '',",
          "508:                 'description' => 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',",
          "509:                 'generatePermissions' =>  rand(0, 1),",
          "510:                 'createSoftDelete' =>  rand(0, 1),",
          "511:                 'serverSide' =>  rand(0, 1),",
          "512:                 'details' =>  json_encode((object) []),",
          "513:                 'controller' =>  $controller,",
          "514:                 'orderColumn' =>  '',",
          "515:                 'orderDisplayColumn' =>  '',",
          "516:                 'orderDirection' =>  '',",
          "517:                 'notification' =>   array_slice(['onCreate', 'onDelete', 'onUpdate', 'onRead'], 0, rand(0, 3)),",
          "518:                 'isMaintenance' => rand(0, 1),",
          "519:                 'rows' => $rows,",
          "521:             $response = CallHelperTest::withAuthorizeBearer($this)->json('POST', CallHelperTest::getUrlApiV1Prefix('/crud/add'), $request_body);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "537:             $request_body = $data_table_crud_management_log['request_body'];",
          "538:             $table = $request_body['name'];",
          "541:                 'table' => $table,",
          "542:             ]);",
          "543:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "540:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix('/crud/read'), [",
          "",
          "[Added Lines]",
          "541:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/crud/read'), [",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "611:                     }",
          "613:                     if (is_array($value)) {",
          "615:                     } else {",
          "616:                         if ('password' == $key) {",
          "617:                             $this->assertTrue(Hash::check($value, $table_row->{$key}));",
          "",
          "[Removed Lines]",
          "614:                         $this->assertSame($table_row->{$key}, join(\",\", $value));",
          "",
          "[Added Lines]",
          "613:                         $this->assertSame($table_row->{$key}, join(',', $value));",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "653:         foreach ($data_add_entities as $table => $data_add_entity) {",
          "654:             foreach ($data_add_entity as $index => $entity) {",
          "655:                 $id = $entity['id'];",
          "657:                     'id' => $id,",
          "658:                 ]);",
          "659:                 $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "656:                 $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/read\"), [",
          "",
          "[Added Lines]",
          "654:                 $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/read\"), [",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "665:     {",
          "666:         $data_add_entities = CallHelperTest::getCache($this->KEY_DATA_ADD_ENTITY);",
          "667:         foreach ($data_add_entities as $table => $data_add_entity) {",
          "669:                 'page' => 1,",
          "671:             ]);",
          "672:             $response->assertSuccessful();",
          "673:         }",
          "",
          "[Removed Lines]",
          "668:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}\"), [",
          "670:                 'limit' => 10",
          "",
          "[Added Lines]",
          "666:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}\"), [",
          "668:                 'limit' => 10,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "677:     {",
          "678:         $data_add_entities = CallHelperTest::getCache($this->KEY_DATA_ADD_ENTITY);",
          "679:         foreach ($data_add_entities as $table => $data_add_entity) {",
          "681:             $response->assertSuccessful();",
          "682:         }",
          "683:     }",
          "",
          "[Removed Lines]",
          "680:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/all\"));",
          "",
          "[Added Lines]",
          "678:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/all\"));",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "689:         foreach ($data_add_entities as $table => $data_add_entity) {",
          "690:             $id = $data_add_entity[0]['id'];",
          "692:                 'slug' => $table,",
          "693:                 'data' => [",
          "694:                     [",
          "695:                         'field' => 'id',",
          "696:                         'value' => $id,",
          "698:                 ],",
          "699:             ]);",
          "700:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "691:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"DELETE\", CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/delete\"), [",
          "697:                     ]",
          "",
          "[Added Lines]",
          "689:             $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/delete\"), [",
          "695:                     ],",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "714:                     $ids[] = $entity['id'];",
          "715:                 }",
          "716:             }",
          "718:                 'slug' => $table,",
          "719:                 'data' => [",
          "720:                     [",
          "721:                         'field' => 'ids',",
          "724:                 ],",
          "725:             ]);",
          "726:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "717:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"DELETE\", CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/delete-multiple\"), [",
          "722:                         'value' => join(\",\", $ids),",
          "723:                     ]",
          "",
          "[Added Lines]",
          "715:             $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/delete-multiple\"), [",
          "720:                         'value' => join(',', $ids),",
          "721:                     ],",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "764:             $table_name = $data_response_add_crud_management['name'];",
          "765:             $rows = $data_response_add_crud_management['dataRows'];",
          "770:             $model_data = [];",
          "771:             if (rand(0, 1)) {",
          "774:                 $model_file_name = \"{$model_name}.php\";",
          "775:                 $model_body = <<<PHP",
          "776:                 <?php",
          "",
          "[Removed Lines]",
          "767:             $table_label = ucwords(str_replace([\"_\"], \" \", $table_name));",
          "769:             $model = \"\";",
          "773:                 $model_name = str_replace([\" \", \"_\"], \"\", ucwords($table_name));",
          "",
          "[Added Lines]",
          "765:             $table_label = ucwords(str_replace(['_'], ' ', $table_name));",
          "767:             $model = '';",
          "771:                 $model_name = str_replace([' ', '_'], '', ucwords($table_name));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "783:                 }",
          "784:                 PHP;",
          "785:                 $model_path = app_path(\"Models/$model_file_name\");",
          "787:                     file_put_contents($model_path, $model_body);",
          "788:                 }",
          "",
          "[Removed Lines]",
          "786:                 if (!file_exists($model_path)) {",
          "",
          "[Added Lines]",
          "784:                 if (! file_exists($model_path)) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "800:             }",
          "801:             $data_table_crud_management_log[$index]['model'] = $model_data;",
          "804:             $controller_data = [];",
          "805:             if (rand(0, 1)) {",
          "808:                 $controller_file_name = \"{$controller_name}.php\";",
          "809:                 $controller_body = <<<PHP",
          "810:                 <?php",
          "",
          "[Removed Lines]",
          "803:             $controller = \"\";",
          "807:                 $controller_name = str_replace([\" \", \"_\"], \"\", ucwords($table_name)) . \"Controller\";",
          "",
          "[Added Lines]",
          "801:             $controller = '';",
          "805:                 $controller_name = str_replace([' ', '_'], '', ucwords($table_name)).'Controller';",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "813:                 class {$controller_name} extends \\Uasoft\\Badaso\\Controllers\\BadasoBaseController {}",
          "814:                 PHP;",
          "815:                 $controller_path = app_path(\"/Http/Controllers/$controller_file_name\");",
          "817:                     file_put_contents($controller_path, $controller_body);",
          "818:                 }",
          "",
          "[Removed Lines]",
          "816:                 if (!file_exists($controller_path)) {",
          "",
          "[Added Lines]",
          "814:                 if (! file_exists($controller_path)) {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "831:             $data_table_crud_management_log[$index]['controller'] = $controller_data;",
          "833:             $request_body = [",
          "852:             ];",
          "854:             foreach ($request_body as $key => $value) {",
          "855:                 $data_response_add_crud_management[$key] = $value;",
          "856:             }",
          "859:             $response->assertSuccessful();",
          "860:         }",
          "",
          "[Removed Lines]",
          "834:                 \"name\" =>  $table_name,",
          "835:                 \"slug\" =>  $table_name,",
          "836:                 \"displayNameSingular\" =>  $table_label . \"(update)\",",
          "837:                 \"displayNamePlural\" =>  $table_label . \"(update)\",",
          "838:                 \"icon\" =>  \"add\",",
          "839:                 \"modelName\" =>  $model,",
          "840:                 \"policyName\" =>  \"\",",
          "841:                 \"description\" => \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. (update)\",",
          "842:                 \"generatePermissions\" =>  rand(0, 1),",
          "843:                 \"createSoftDelete\" =>  rand(0, 1),",
          "844:                 \"serverSide\" =>  rand(0, 1),",
          "845:                 \"details\" =>  json_encode((object)[]),",
          "846:                 \"controller\" =>  $controller,",
          "847:                 \"orderColumn\" =>  \"\",",
          "848:                 \"orderDisplayColumn\" =>  \"\",",
          "849:                 \"orderDirection\" =>  \"\",",
          "850:                 \"notification\" =>   array_slice([\"onCreate\", \"onDelete\", \"onUpdate\", \"onRead\"], 0, rand(0, 0)),",
          "851:                 \"rows\" => $rows,",
          "858:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"PUT\", CallHelperTest::getUrlApiV1Prefix('/crud/edit'), $data_response_add_crud_management);",
          "",
          "[Added Lines]",
          "832:                 'name' =>  $table_name,",
          "833:                 'slug' =>  $table_name,",
          "834:                 'displayNameSingular' =>  $table_label.'(update)',",
          "835:                 'displayNamePlural' =>  $table_label.'(update)',",
          "836:                 'icon' =>  'add',",
          "837:                 'modelName' =>  $model,",
          "838:                 'policyName' =>  '',",
          "839:                 'description' => 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. (update)',",
          "840:                 'generatePermissions' =>  rand(0, 1),",
          "841:                 'createSoftDelete' =>  rand(0, 1),",
          "842:                 'serverSide' =>  rand(0, 1),",
          "843:                 'details' =>  json_encode((object) []),",
          "844:                 'controller' =>  $controller,",
          "845:                 'orderColumn' =>  '',",
          "846:                 'orderDisplayColumn' =>  '',",
          "847:                 'orderDirection' =>  '',",
          "848:                 'notification' =>   array_slice(['onCreate', 'onDelete', 'onUpdate', 'onRead'], 0, rand(0, 0)),",
          "849:                 'rows' => $rows,",
          "856:             $response = CallHelperTest::withAuthorizeBearer($this)->json('PUT', CallHelperTest::getUrlApiV1Prefix('/crud/edit'), $data_response_add_crud_management);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "894:             $request_body = $data_table_crud_management_log['request_body'];",
          "895:             $slug = $request_body['slug'];",
          "898:                 'slug' => $slug,",
          "899:             ]);",
          "900:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "897:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"GET\", CallHelperTest::getUrlApiV1Prefix('/crud/read-by-slug'), [",
          "",
          "[Added Lines]",
          "895:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/crud/read-by-slug'), [",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "908:         $data_types = DataType::whereIn('name', $tables)->get();",
          "909:         foreach ($data_types as $key => $data_type) {",
          "910:             $table_name = $data_type['name'];",
          "913:             $id = $data_type->id;",
          "915:                 'id' => $id,",
          "916:             ]);",
          "917:             $response->assertSuccessful();",
          "920:             $controller_name = \"{$name}Controller.php\";",
          "922:             if (file_exists($controller_path)) {",
          "923:                 unlink($controller_path);",
          "924:             }",
          "927:             $model_name = \"{$name}.php\";",
          "929:             if (file_exists($model_path)) {",
          "930:                 unlink($model_path);",
          "931:             }",
          "",
          "[Removed Lines]",
          "911:             $name = ucwords(str_replace(\"_\", \"\", $table_name));",
          "914:             $response = CallHelperTest::withAuthorizeBearer($this)->json(\"DELETE\", CallHelperTest::getUrlApiV1Prefix('/crud/delete'), [",
          "921:             $controller_path = app_path(\"Http/Controllers/\" . $controller_name);",
          "928:             $model_path = app_path(\"Models/\" . $model_name);",
          "",
          "[Added Lines]",
          "909:             $name = ucwords(str_replace('_', '', $table_name));",
          "912:             $response = CallHelperTest::withAuthorizeBearer($this)->json('DELETE', CallHelperTest::getUrlApiV1Prefix('/crud/delete'), [",
          "919:             $controller_path = app_path('Http/Controllers/'.$controller_name);",
          "926:             $model_path = app_path('Models/'.$model_name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17374cbd6dc50a4c0bfa3c1d6384fdb49a722777",
      "candidate_info": {
        "commit_hash": "17374cbd6dc50a4c0bfa3c1d6384fdb49a722777",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/17374cbd6dc50a4c0bfa3c1d6384fdb49a722777",
        "files": [
          "src/Commands/BadasoTestSetup.php"
        ],
        "message": "update badaso coverage",
        "before_after_code_files": [
          "src/Commands/BadasoTestSetup.php||src/Commands/BadasoTestSetup.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/Commands/BadasoTestSetup.php||src/Commands/BadasoTestSetup.php": [
          "File: src/Commands/BadasoTestSetup.php -> src/Commands/BadasoTestSetup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use DOMDocument;",
          "6: use Illuminate\\Console\\Command;",
          "8: class BadasoTestSetup extends Command",
          "9: {",
          "10:     public static $PHPUNIT_XML_PATH = 'phpunit.xml';",
          "",
          "[Removed Lines]",
          "11:     public static $BADASO_UNIT_TEST_PATHS = [",
          "12:         './vendor/badaso/core/tests/Unit',",
          "13:     ];",
          "14:     public static $BADASO_FEATURE_TEST_PATHS = [",
          "15:         './vendor/badaso/core/tests/Feature',",
          "16:     ];",
          "",
          "[Added Lines]",
          "7: use SimpleXMLElement;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     public function handle()",
          "48:     {",
          "49:         $phpunit_xml_path = base_path(self::$PHPUNIT_XML_PATH);",
          "111:     }",
          "112: }",
          "",
          "[Removed Lines]",
          "50:         $data = file_get_contents($phpunit_xml_path);",
          "52:         $document = new DOMDocument();",
          "53:         $document->loadXML($data);",
          "55:         $test_suite_features = $document",
          "56:             ->getElementsByTagName('testsuite');",
          "58:         foreach ($test_suite_features as $index_test_suite_feature => $test_suite_feature) {",
          "59:             $attribute_name = $test_suite_feature->getAttribute('name');",
          "60:             switch ($attribute_name) {",
          "61:                 case 'Unit':",
          "62:                     $directories = $test_suite_feature->getElementsByTagName('directory');",
          "65:                     $badaso_test_paths = self::$BADASO_UNIT_TEST_PATHS;",
          "68:                     $now_test_paths = [];",
          "69:                     foreach ($directories as $_ => $directory) {",
          "70:                         $now_test_paths[] = $directory->nodeValue;",
          "71:                     }",
          "74:                     foreach ($badaso_test_paths as $_ => $badaso_test_path) {",
          "75:                         if (! in_array($badaso_test_path, $now_test_paths)) {",
          "76:                             $new_directory = $document->createElement('directory', $badaso_test_path);",
          "77:                             $new_directory->setAttribute('suffix', 'Test.php');",
          "79:                             $test_suite_features->item($index_test_suite_feature)->appendChild($new_directory);",
          "80:                         }",
          "81:                     }",
          "82:                     break;",
          "83:                 case 'Feature':",
          "84:                     $directories = $test_suite_feature->getElementsByTagName('directory');",
          "87:                     $badaso_test_paths = self::$BADASO_FEATURE_TEST_PATHS;",
          "90:                     $now_test_paths = [];",
          "91:                     foreach ($directories as $_ => $directory) {",
          "92:                         $now_test_paths[] = $directory->nodeValue;",
          "93:                     }",
          "96:                     foreach ($badaso_test_paths as $_ => $badaso_test_path) {",
          "97:                         if (! in_array($badaso_test_path, $now_test_paths)) {",
          "98:                             $new_directory = $document->createElement('directory', $badaso_test_path);",
          "99:                             $new_directory->setAttribute('suffix', 'Test.php');",
          "101:                             $test_suite_features->item($index_test_suite_feature)->appendChild($new_directory);",
          "102:                         }",
          "103:                     }",
          "105:                     break;",
          "106:             }",
          "107:         }",
          "110:         file_put_contents($phpunit_xml_path, $document->saveHTML());",
          "",
          "[Added Lines]",
          "45:         $phpunit_xml_content = <<<XML",
          "46:         <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "47:         <phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"./vendor/phpunit/phpunit/phpunit.xsd\" bootstrap=\"vendor/autoload.php\" colors=\"true\">",
          "48:             <testsuites>",
          "49:                 <testsuite name=\"Unit\">",
          "50:                     <directory suffix=\"Test.php\">./tests/Unit</directory>",
          "51:                     <directory suffix=\"Test.php\">./packages/badaso/core/tests/Unit</directory>",
          "52:                 </testsuite>",
          "53:                 <testsuite name=\"Feature\">",
          "54:                     <directory suffix=\"Test.php\">./tests/Feature</directory>",
          "55:                     <directory suffix=\"Test.php\">./packages/badaso/core/tests/Feature</directory>",
          "56:                 </testsuite>",
          "57:             </testsuites>",
          "58:             <coverage processUncoveredFiles=\"true\">",
          "59:                 <include>",
          "60:                     <directory suffix=\".php\">./app</directory>",
          "61:                     <directory suffix=\".php\">./packages/badaso/core/src/Commands</directory>",
          "62:                     <directory suffix=\".php\">./packages/badaso/core/src/Controllers</directory>",
          "63:                     <directory suffix=\".php\">./packages/badaso/core/src/ContentManager</directory>",
          "64:                     <directory suffix=\".php\">./packages/badaso/core/src/Events</directory>",
          "65:                     <directory suffix=\".php\">./packages/badaso/core/src/Exceptions</directory>",
          "66:                     <directory suffix=\".php\">./packages/badaso/core/src/Helpers</directory>",
          "67:                     <directory suffix=\".php\">./packages/badaso/core/src/Listeners</directory>",
          "68:                     <directory suffix=\".php\">./packages/badaso/core/src/Mail</directory>",
          "69:                     <directory suffix=\".php\">./packages/badaso/core/src/Middleware</directory>",
          "70:                     <directory suffix=\".php\">./packages/badaso/core/src/Models</directory>",
          "71:                     <directory suffix=\".php\">./packages/badaso/core/src/OrchestratorHandlers</directory>",
          "72:                     <directory suffix=\".php\">./packages/badaso/core/src/Providers</directory>",
          "73:                     <directory suffix=\".php\">./packages/badaso/core/src/Routes</directory>",
          "74:                     <directory suffix=\".php\">./packages/badaso/core/src/Traits</directory>",
          "75:                     <directory suffix=\".php\">./packages/badaso/core/src/Widgets</directory>",
          "76:                     <directory suffix=\".php\">./packages/badaso/core/src/Badaso.php</directory>",
          "77:                 </include>",
          "78:             </coverage>",
          "79:             <php>",
          "80:                 <server name=\"APP_ENV\" value=\"testing\"/>",
          "81:                 <server name=\"BCRYPT_ROUNDS\" value=\"4\"/>",
          "82:                 <server name=\"CACHE_DRIVER\" value=\"array\"/>",
          "83:                 <!-- <server name=\"DB_CONNECTION\" value=\"sqlite\"/> -->",
          "84:                 <!-- <server name=\"DB_DATABASE\" value=\":memory:\"/> -->",
          "85:                 <server name=\"MAIL_MAILER\" value=\"array\"/>",
          "86:                 <server name=\"QUEUE_CONNECTION\" value=\"sync\"/>",
          "87:                 <server name=\"SESSION_DRIVER\" value=\"array\"/>",
          "88:                 <server name=\"TELESCOPE_ENABLED\" value=\"false\"/>",
          "89:             </php>",
          "90:         </phpunit>",
          "91:         XML;",
          "93:         file_put_contents($phpunit_xml_path, $phpunit_xml_content);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfac10c8b3a96b89ca3f7b71015a75b55043252d",
      "candidate_info": {
        "commit_hash": "bfac10c8b3a96b89ca3f7b71015a75b55043252d",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/bfac10c8b3a96b89ca3f7b71015a75b55043252d",
        "files": [
          ".gitignore",
          "package-lock.json",
          "yarn.lock"
        ],
        "message": "remove locking file",
        "before_after_code_files": [
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32da6e6769682cd7cd1949d253ec65cdf8388deb",
      "candidate_info": {
        "commit_hash": "32da6e6769682cd7cd1949d253ec65cdf8388deb",
        "repo": "uasoft-indonesia/badaso",
        "commit_url": "https://github.com/uasoft-indonesia/badaso/commit/32da6e6769682cd7cd1949d253ec65cdf8388deb",
        "files": [
          "phpstan-baseline.neon",
          "src/Helpers/GetData.php",
          "tests/Feature/BadasoApiCrudManagementTest.php"
        ],
        "message": "update crud management",
        "before_after_code_files": [
          "phpstan-baseline.neon||phpstan-baseline.neon",
          "src/Helpers/GetData.php||src/Helpers/GetData.php",
          "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/uasoft-indonesia/badaso/pull/1086"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "phpstan-baseline.neon||phpstan-baseline.neon": [
          "File: phpstan-baseline.neon -> phpstan-baseline.neon",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     - '#Call to static method disk[()]+ on an unknown class Storage.#'",
          "40:     - '#Variable \\$altered_current_fields might not be defined.#'",
          "41:     - '#Variable \\$altered_modified_fields might not be defined.#'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42:     - '#Variable \\$[a-zA-Z0-9-()\\_]+ in isset[()]+ always exists and is not nullable.#'",
          "",
          "---------------"
        ],
        "src/Helpers/GetData.php||src/Helpers/GetData.php": [
          "File: src/Helpers/GetData.php -> src/Helpers/GetData.php"
        ],
        "tests/Feature/BadasoApiCrudManagementTest.php||tests/Feature/BadasoApiCrudManagementTest.php": [
          "File: tests/Feature/BadasoApiCrudManagementTest.php -> tests/Feature/BadasoApiCrudManagementTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:                     'badaso_type' => 'upload_image_multiple',",
          "223:                     'schema_type' => 'string',",
          "224:                     'details' => json_encode((object) []),",
          "229:                     'example_update' => [",
          "230:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619581504968_uasoft.png',",
          "231:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619581504968_uasoft.png',",
          "",
          "[Removed Lines]",
          "225:                     'example' => [",
          "226:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png',",
          "227:                         'https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png',",
          "228:                     ],",
          "",
          "[Added Lines]",
          "225:                     'example' => \"['https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png','https://badaso-web.s3-ap-southeast-1.amazonaws.com/files/shares/1619582634819_badaso.png']\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:             $request_body = $data_table_crud_management_log['request_body'];",
          "535:             $table = $request_body['name'];",
          "538:                 'table' => $table,",
          "539:             ]);",
          "540:             $response->assertSuccessful();",
          "",
          "[Removed Lines]",
          "537:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/crud/read'), [",
          "",
          "[Added Lines]",
          "534:              $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix('/crud/read'), [",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "677:     {",
          "678:         $data_add_entities = CallHelperTest::getCache($this->KEY_DATA_ADD_ENTITY);",
          "679:         foreach ($data_add_entities as $table => $data_add_entity) {",
          "681:             $response->assertSuccessful();",
          "682:         }",
          "683:     }",
          "",
          "[Removed Lines]",
          "680:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/all\"));",
          "",
          "[Added Lines]",
          "679:             $response = CallHelperTest::withAuthorizeBearer($this)->json('GET', CallHelperTest::getUrlApiV1Prefix(\"/entities/{$table}/all\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}