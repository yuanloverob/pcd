{
  "cve_id": "CVE-2014-0086",
  "cve_desc": "The doFilter function in webapp/PushHandlerFilter.java in JBoss RichFaces 4.3.4, 4.3.5, and 5.x allows remote attackers to cause a denial of service (memory consumption and out-of-memory error) via a large number of malformed atmosphere push requests.",
  "repo": "richfaces/richfaces",
  "patch_hash": "807bc411fba070f78c5193cc03d54ab8aa39c36d",
  "patch_info": {
    "commit_hash": "807bc411fba070f78c5193cc03d54ab8aa39c36d",
    "repo": "richfaces/richfaces",
    "commit_url": "https://github.com/richfaces/richfaces/commit/807bc411fba070f78c5193cc03d54ab8aa39c36d",
    "files": [
      "framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java"
    ],
    "message": "RF-13250: postpone Meteor object instantiation",
    "before_after_code_files": [
      "framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java||framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java"
    ]
  },
  "patch_diff": {
    "framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java||framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java": [
      "File: framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java -> framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:             HttpServletResponse httpResp = (HttpServletResponse) response;",
      "80:             if (\"GET\".equals(httpReq.getMethod())) {",
      "83:                 String pushSessionId = httpReq.getParameter(PUSH_SESSION_ID_PARAM);",
      "",
      "[Removed Lines]",
      "81:                 Meteor meteor = Meteor.build(httpReq, SCOPE.REQUEST, Collections.<BroadcastFilter>emptyList(), null);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101:                 httpResp.setContentType(\"text/plain\");",
      "103:                 try {",
      "104:                     Request pushRequest = new RequestImpl(meteor, session);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "102:                 Meteor meteor = Meteor.build(httpReq, SCOPE.REQUEST, Collections.<BroadcastFilter>emptyList(), null);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4115c103f74e7cb0af6d392e22866e52db2bc4e7",
      "candidate_info": {
        "commit_hash": "4115c103f74e7cb0af6d392e22866e52db2bc4e7",
        "repo": "richfaces/richfaces",
        "commit_url": "https://github.com/richfaces/richfaces/commit/4115c103f74e7cb0af6d392e22866e52db2bc4e7",
        "files": [
          "framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java"
        ],
        "message": "RF-13250: applying patch",
        "before_after_code_files": [
          "framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java||framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java||framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java"
          ],
          "candidate": [
            "framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java||framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java"
          ]
        }
      },
      "candidate_diff": {
        "framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java||framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java": [
          "File: framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java -> framework/src/main/java/org/richfaces/servlet/PushHandlerFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:             HttpServletResponse httpResp = (HttpServletResponse) response;",
          "80:             if (\"GET\".equals(httpReq.getMethod())) {",
          "83:                 String pushSessionId = httpReq.getParameter(PUSH_SESSION_ID_PARAM);",
          "85:                 Session session = null;",
          "",
          "[Removed Lines]",
          "81:                 Meteor meteor = Meteor.build(httpReq, SCOPE.REQUEST, Collections.<BroadcastFilter>emptyList(), null);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:                 httpResp.setContentType(\"text/plain\");",
          "103:                 try {",
          "104:                     Request pushRequest = new RequestImpl(meteor, session);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:                 Meteor meteor = Meteor.build(httpReq, SCOPE.REQUEST, Collections.<BroadcastFilter>emptyList(), null);",
          "",
          "---------------"
        ]
      }
    }
  ]
}