{
  "cve_id": "CVE-2021-22095",
  "cve_desc": "In Spring AMQP versions 2.2.0 - 2.2.19 and 2.3.0 - 2.3.11, the Spring AMQP Message object, in its toString() method, will create a new String object from the message body, regardless of its size. This can cause an OOM Error with a large message",
  "repo": "spring-projects/spring-amqp",
  "patch_hash": "bde294d62a8b7f3f1d5a9f50f862c6f0782efb9d",
  "patch_info": {
    "commit_hash": "bde294d62a8b7f3f1d5a9f50f862c6f0782efb9d",
    "repo": "spring-projects/spring-amqp",
    "commit_url": "https://github.com/spring-projects/spring-amqp/commit/bde294d62a8b7f3f1d5a9f50f862c6f0782efb9d",
    "files": [
      "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
      "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java"
    ],
    "message": "Message toString() Improvement\n\nDon't convert large message bodies to a `String` in `toString()`.\n\nSet a limit (50) that can be modified by users.\n\nAvoid possible OOM Errors.\n\n**cherry-pick to 2.3.x, 2.2.x**\n\n# Conflicts:\n#\tspring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
    "before_after_code_files": [
      "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java||spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
      "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java||spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java"
    ]
  },
  "patch_diff": {
    "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java||spring-amqp/src/main/java/org/springframework/amqp/core/Message.java": [
      "File: spring-amqp/src/main/java/org/springframework/amqp/core/Message.java -> spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:  private static final String DEFAULT_ENCODING = Charset.defaultCharset().name();",
      "46:  private static String bodyEncoding = DEFAULT_ENCODING;",
      "48:  private final MessageProperties messageProperties;",
      "50:  private final byte[] body;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:  private static final int DEFAULT_MAX_BODY_LENGTH = 50;",
      "50:  private static int maxBodyLength = DEFAULT_MAX_BODY_LENGTH;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "91:   bodyEncoding = encoding;",
      "92:  }",
      "94:  public byte[] getBody() {",
      "95:   return this.body; //NOSONAR",
      "96:  }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "104:  public static void setMaxBodyLength(int length) {",
      "105:   maxBodyLength = length;",
      "106:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "120:     return \"[serialized object]\";",
      "121:    }",
      "122:    String encoding = encoding(nullProps);",
      "124:      || MessageProperties.CONTENT_TYPE_JSON.equals(contentType)",
      "125:      || MessageProperties.CONTENT_TYPE_JSON_ALT.equals(contentType)",
      "127:     return new String(this.body, encoding);",
      "128:    }",
      "129:   }",
      "",
      "[Removed Lines]",
      "123:    if (MessageProperties.CONTENT_TYPE_TEXT_PLAIN.equals(contentType)",
      "126:      || MessageProperties.CONTENT_TYPE_XML.equals(contentType)) {",
      "",
      "[Added Lines]",
      "137:    if (this.body.length <= maxBodyLength",
      "138:      && (MessageProperties.CONTENT_TYPE_TEXT_PLAIN.equals(contentType)",
      "141:      || MessageProperties.CONTENT_TYPE_XML.equals(contentType))) {",
      "",
      "---------------"
    ],
    "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java||spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java": [
      "File: spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java -> spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: import java.nio.charset.StandardCharsets;",
      "27: import java.util.Collections;",
      "28: import java.util.Date;",
      "30: import org.junit.jupiter.api.Test;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29: import java.util.stream.IntStream;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:   assertThat(listMessage.toString()).contains(\"[serialized object]\");",
      "111:  }",
      "113:  @SuppressWarnings(\"serial\")",
      "114:  public static class Foo implements Serializable {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114:  @Test",
      "115:  void dontToStringLongBody() {",
      "116:   MessageProperties messageProperties = new MessageProperties();",
      "117:   messageProperties.setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN);",
      "118:   StringBuilder builder1 = new StringBuilder();",
      "119:   IntStream.range(0, 50).forEach(i -> builder1.append(\"x\"));",
      "120:   String bodyAsString = builder1.toString();",
      "121:   Message message = new Message(bodyAsString.getBytes(), messageProperties);",
      "122:   assertThat(message.toString()).contains(bodyAsString);",
      "123:   StringBuilder builder2 = new StringBuilder();",
      "124:   IntStream.range(0, 51).forEach(i -> builder2.append(\"x\"));",
      "125:   bodyAsString = builder2.toString();",
      "126:   message = new Message(bodyAsString.getBytes(), messageProperties);",
      "127:   assertThat(message.toString()).contains(\"[51]\");",
      "128:   Message.setMaxBodyLength(100);",
      "129:   assertThat(message.toString()).contains(bodyAsString);",
      "130:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f3a1539da2dddb5f179b53cbb7f46e89a45632e",
      "candidate_info": {
        "commit_hash": "4f3a1539da2dddb5f179b53cbb7f46e89a45632e",
        "repo": "spring-projects/spring-amqp",
        "commit_url": "https://github.com/spring-projects/spring-amqp/commit/4f3a1539da2dddb5f179b53cbb7f46e89a45632e",
        "files": [
          "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
          "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java"
        ],
        "message": "Message toString() Improvement\n\nDon't convert large message bodies to a `String` in `toString()`.\n\nSet a limit (50) that can be modified by users.\n\nAvoid possible OOM Errors.\n\n**cherry-pick to 2.3.x, 2.2.x**",
        "before_after_code_files": [
          "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java||spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
          "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java||spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java||spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
            "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java||spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java"
          ],
          "candidate": [
            "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java||spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
            "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java||spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java"
          ]
        }
      },
      "candidate_diff": {
        "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java||spring-amqp/src/main/java/org/springframework/amqp/core/Message.java": [
          "File: spring-amqp/src/main/java/org/springframework/amqp/core/Message.java -> spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  private static final String DEFAULT_ENCODING = Charset.defaultCharset().name();",
          "46:  private static String bodyEncoding = DEFAULT_ENCODING;",
          "48:  private final MessageProperties messageProperties;",
          "50:  private final byte[] body;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:  private static final int DEFAULT_MAX_BODY_LENGTH = 50;",
          "50:  private static int maxBodyLength = DEFAULT_MAX_BODY_LENGTH;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   bodyEncoding = encoding;",
          "92:  }",
          "94:  public byte[] getBody() {",
          "95:   return this.body; //NOSONAR",
          "96:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:  public static void setMaxBodyLength(int length) {",
          "105:   maxBodyLength = length;",
          "106:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:     return \"[serialized object]\";",
          "117:    }",
          "118:    String encoding = encoding();",
          "120:      || MessageProperties.CONTENT_TYPE_JSON.equals(contentType)",
          "121:      || MessageProperties.CONTENT_TYPE_JSON_ALT.equals(contentType)",
          "123:     return new String(this.body, encoding);",
          "124:    }",
          "125:   }",
          "",
          "[Removed Lines]",
          "119:    if (MessageProperties.CONTENT_TYPE_TEXT_PLAIN.equals(contentType)",
          "122:      || MessageProperties.CONTENT_TYPE_XML.equals(contentType)) {",
          "",
          "[Added Lines]",
          "133:    if (this.body.length <= maxBodyLength",
          "134:      && (MessageProperties.CONTENT_TYPE_TEXT_PLAIN.equals(contentType)",
          "137:      || MessageProperties.CONTENT_TYPE_XML.equals(contentType))) {",
          "",
          "---------------"
        ],
        "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java||spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java": [
          "File: spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java -> spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.nio.charset.StandardCharsets;",
          "27: import java.util.Collections;",
          "28: import java.util.Date;",
          "30: import org.junit.jupiter.api.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import java.util.stream.IntStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:   assertThat(listMessage.toString()).contains(\"[serialized object]\");",
          "111:  }",
          "113:  @SuppressWarnings(\"serial\")",
          "114:  public static class Foo implements Serializable {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:  @Test",
          "115:  void dontToStringLongBody() {",
          "116:   MessageProperties messageProperties = new MessageProperties();",
          "117:   messageProperties.setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN);",
          "118:   StringBuilder builder1 = new StringBuilder();",
          "119:   IntStream.range(0, 50).forEach(i -> builder1.append(\"x\"));",
          "120:   String bodyAsString = builder1.toString();",
          "121:   Message message = new Message(bodyAsString.getBytes(), messageProperties);",
          "122:   assertThat(message.toString()).contains(bodyAsString);",
          "123:   StringBuilder builder2 = new StringBuilder();",
          "124:   IntStream.range(0, 51).forEach(i -> builder2.append(\"x\"));",
          "125:   bodyAsString = builder2.toString();",
          "126:   message = new Message(bodyAsString.getBytes(), messageProperties);",
          "127:   assertThat(message.toString()).contains(\"[51]\");",
          "128:   Message.setMaxBodyLength(100);",
          "129:   assertThat(message.toString()).contains(bodyAsString);",
          "130:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b881b65155a1d7e1fe92a551eb63ef235625a733",
      "candidate_info": {
        "commit_hash": "b881b65155a1d7e1fe92a551eb63ef235625a733",
        "repo": "spring-projects/spring-amqp",
        "commit_url": "https://github.com/spring-projects/spring-amqp/commit/b881b65155a1d7e1fe92a551eb63ef235625a733",
        "files": [
          "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
          "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java"
        ],
        "message": "Message toString() Improvement\n\nDon't convert large message bodies to a `String` in `toString()`.\n\nSet a limit (50) that can be modified by users.\n\nAvoid possible OOM Errors.\n\n**cherry-pick to 2.3.x, 2.2.x**",
        "before_after_code_files": [
          "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java||spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
          "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java||spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java||spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
            "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java||spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java"
          ],
          "candidate": [
            "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java||spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
            "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java||spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java"
          ]
        }
      },
      "candidate_diff": {
        "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java||spring-amqp/src/main/java/org/springframework/amqp/core/Message.java": [
          "File: spring-amqp/src/main/java/org/springframework/amqp/core/Message.java -> spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:  private static final String DEFAULT_ENCODING = Charset.defaultCharset().name();",
          "46:  private static String bodyEncoding = DEFAULT_ENCODING;",
          "48:  private final MessageProperties messageProperties;",
          "50:  private final byte[] body;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:  private static final int DEFAULT_MAX_BODY_LENGTH = 50;",
          "50:  private static int maxBodyLength = DEFAULT_MAX_BODY_LENGTH;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   bodyEncoding = encoding;",
          "92:  }",
          "94:  public byte[] getBody() {",
          "95:   return this.body; //NOSONAR",
          "96:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:  public static void setMaxBodyLength(int length) {",
          "105:   maxBodyLength = length;",
          "106:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:     return \"[serialized object]\";",
          "117:    }",
          "118:    String encoding = encoding();",
          "120:      || MessageProperties.CONTENT_TYPE_JSON.equals(contentType)",
          "121:      || MessageProperties.CONTENT_TYPE_JSON_ALT.equals(contentType)",
          "123:     return new String(this.body, encoding);",
          "124:    }",
          "125:   }",
          "",
          "[Removed Lines]",
          "119:    if (MessageProperties.CONTENT_TYPE_TEXT_PLAIN.equals(contentType)",
          "122:      || MessageProperties.CONTENT_TYPE_XML.equals(contentType)) {",
          "",
          "[Added Lines]",
          "133:    if (this.body.length <= maxBodyLength",
          "134:      && (MessageProperties.CONTENT_TYPE_TEXT_PLAIN.equals(contentType)",
          "137:      || MessageProperties.CONTENT_TYPE_XML.equals(contentType))) {",
          "",
          "---------------"
        ],
        "spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java||spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java": [
          "File: spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java -> spring-amqp/src/test/java/org/springframework/amqp/core/MessageTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import java.nio.charset.StandardCharsets;",
          "27: import java.util.Collections;",
          "28: import java.util.Date;",
          "30: import org.junit.jupiter.api.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import java.util.stream.IntStream;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:   assertThat(listMessage.toString()).contains(\"[serialized object]\");",
          "111:  }",
          "113:  @SuppressWarnings(\"serial\")",
          "114:  public static class Foo implements Serializable {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:  @Test",
          "115:  void dontToStringLongBody() {",
          "116:   MessageProperties messageProperties = new MessageProperties();",
          "117:   messageProperties.setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN);",
          "118:   StringBuilder builder1 = new StringBuilder();",
          "119:   IntStream.range(0, 50).forEach(i -> builder1.append(\"x\"));",
          "120:   String bodyAsString = builder1.toString();",
          "121:   Message message = new Message(bodyAsString.getBytes(), messageProperties);",
          "122:   assertThat(message.toString()).contains(bodyAsString);",
          "123:   StringBuilder builder2 = new StringBuilder();",
          "124:   IntStream.range(0, 51).forEach(i -> builder2.append(\"x\"));",
          "125:   bodyAsString = builder2.toString();",
          "126:   message = new Message(bodyAsString.getBytes(), messageProperties);",
          "127:   assertThat(message.toString()).contains(\"[51]\");",
          "128:   Message.setMaxBodyLength(100);",
          "129:   assertThat(message.toString()).contains(bodyAsString);",
          "130:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}