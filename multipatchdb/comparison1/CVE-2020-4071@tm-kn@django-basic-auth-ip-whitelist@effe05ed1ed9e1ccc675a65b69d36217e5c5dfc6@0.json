{
  "cve_id": "CVE-2020-4071",
  "cve_desc": "In django-basic-auth-ip-whitelist before 0.3.4, a potential timing attack exists on websites where the basic authentication is used or configured, i.e. BASIC_AUTH_LOGIN and BASIC_AUTH_PASSWORD is set. Currently the string comparison between configured credentials and the ones provided by users is performed through a character-by-character string comparison. This enables a possibility that attacker may time the time it takes the server to validate different usernames and password, and use this knowledge to work out the valid credentials. This attack is understood not to be realistic over the Internet. However, it may be achieved from within local networks where the website is hosted, e.g. from inside a data centre where a website's server is located. Sites protected by IP address whitelisting only are unaffected by this vulnerability. This vulnerability has been fixed on version 0.3.4 of django-basic-auth-ip-whitelist. Update to version 0.3.4 as soon as possible and change basic authentication username and password configured on a Django project using this package. A workaround without upgrading to version 0.3.4 is to stop using basic authentication and use the IP whitelisting component only. It can be achieved by not setting BASIC_AUTH_LOGIN and BASIC_AUTH_PASSWORD in Django project settings.",
  "repo": "tm-kn/django-basic-auth-ip-whitelist",
  "patch_hash": "effe05ed1ed9e1ccc675a65b69d36217e5c5dfc6",
  "patch_info": {
    "commit_hash": "effe05ed1ed9e1ccc675a65b69d36217e5c5dfc6",
    "repo": "tm-kn/django-basic-auth-ip-whitelist",
    "commit_url": "https://github.com/tm-kn/django-basic-auth-ip-whitelist/commit/effe05ed1ed9e1ccc675a65b69d36217e5c5dfc6",
    "files": [
      "CHANGELOG.rst",
      "CONTRIBUTORS.txt",
      "baipw/__init__.py",
      "baipw/utils.py"
    ],
    "message": "Fix potential timing attack on basic authentication",
    "before_after_code_files": [
      "baipw/__init__.py||baipw/__init__.py",
      "baipw/utils.py||baipw/utils.py"
    ]
  },
  "patch_diff": {
    "baipw/__init__.py||baipw/__init__.py": [
      "File: baipw/__init__.py -> baipw/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: __version__ = \"0.3.3\"",
      "",
      "[Added Lines]",
      "1: __version__ = \"0.3.4\"",
      "",
      "---------------"
    ],
    "baipw/utils.py||baipw/utils.py": [
      "File: baipw/utils.py -> baipw/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import base64",
      "3: from django.conf import settings",
      "5: from .exceptions import Unauthorized",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: from django.utils.crypto import constant_time_compare",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "57:         raise Unauthorized('\"Basic\" is not an authorization method.')",
      "58:     auth = base64.b64decode(auth.strip()).decode(\"utf-8\")",
      "59:     username, password = auth.split(\":\", 1)",
      "61:         return True",
      "62:     raise Unauthorized(\"Basic authentication credentials are invalid.\")",
      "",
      "[Removed Lines]",
      "60:     if username == configured_username and password == configured_password:",
      "",
      "[Added Lines]",
      "61:     username_valid = constant_time_compare(username, configured_username)",
      "62:     password_valid = constant_time_compare(password, configured_password)",
      "63:     if username_valid & password_valid:",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a208de2c616334002ffec974d078b16327629d9a",
      "candidate_info": {
        "commit_hash": "a208de2c616334002ffec974d078b16327629d9a",
        "repo": "tm-kn/django-basic-auth-ip-whitelist",
        "commit_url": "https://github.com/tm-kn/django-basic-auth-ip-whitelist/commit/a208de2c616334002ffec974d078b16327629d9a",
        "files": [
          "baipw/middleware.py",
          "baipw/response.py",
          "baipw/tests/response.py",
          "baipw/tests/settings.py",
          "baipw/tests/test_integration.py",
          "baipw/tests/test_middleware.py",
          "baipw/tests/test_response.py",
          "baipw/tests/test_utils.py",
          "baipw/utils.py",
          "run_tests.py"
        ],
        "message": "Reformat code with Black",
        "before_after_code_files": [
          "baipw/middleware.py||baipw/middleware.py",
          "baipw/response.py||baipw/response.py",
          "baipw/tests/response.py||baipw/tests/response.py",
          "baipw/tests/settings.py||baipw/tests/settings.py",
          "baipw/tests/test_integration.py||baipw/tests/test_integration.py",
          "baipw/tests/test_middleware.py||baipw/tests/test_middleware.py",
          "baipw/tests/test_response.py||baipw/tests/test_response.py",
          "baipw/tests/test_utils.py||baipw/tests/test_utils.py",
          "baipw/utils.py||baipw/utils.py",
          "run_tests.py||run_tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "baipw/utils.py||baipw/utils.py"
          ],
          "candidate": [
            "baipw/utils.py||baipw/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "baipw/middleware.py||baipw/middleware.py": [
          "File: baipw/middleware.py -> baipw/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     def process_request(self, request):",
          "23:         # If this attribute is set, skip the check.",
          "26:             return self.get_response(request)",
          "30:         # Check if http host is whitelisted.",
          "31:         if self._is_http_host_whitelisted(request):",
          "32:             return",
          "",
          "[Removed Lines]",
          "24:         if getattr(request, '_skip_basic_auth_ip_whitelist_middleware_check',",
          "25:                    False):",
          "28:         setattr(request, '_skip_basic_auth_ip_whitelist_middleware_check',",
          "29:                 True)",
          "",
          "[Added Lines]",
          "24:         if getattr(request, \"_skip_basic_auth_ip_whitelist_middleware_check\", False):",
          "27:         setattr(request, \"_skip_basic_auth_ip_whitelist_middleware_check\", True)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:     @property",
          "46:     def basic_auth_login(self):",
          "49:     @property",
          "50:     def basic_auth_password(self):",
          "53:     def get_response_class(self):",
          "54:         try:",
          "",
          "[Removed Lines]",
          "47:         return getattr(settings, 'BASIC_AUTH_LOGIN', None)",
          "51:         return getattr(settings, 'BASIC_AUTH_PASSWORD', None)",
          "",
          "[Added Lines]",
          "45:         return getattr(settings, \"BASIC_AUTH_LOGIN\", None)",
          "49:         return getattr(settings, \"BASIC_AUTH_PASSWORD\", None)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:             return self.get_response_class()(request=request)",
          "65:     def _get_client_ip(self, request):",
          "69:         func = get_client_ip",
          "70:         if function_path is not None:",
          "71:             func = import_string(function_path)",
          "72:         return func(request)",
          "74:     def _get_whitelisted_networks(self):",
          "76:         # If we get a list, users probably passed a list of strings in",
          "77:         #  the settings, probably from the environment.",
          "78:         if isinstance(networks, str):",
          "80:         # Otherwise assume that the list is iterable.",
          "81:         for network in networks:",
          "82:             network = network.strip()",
          "",
          "[Removed Lines]",
          "66:         function_path = getattr(",
          "67:             settings, 'BASIC_AUTH_GET_CLIENT_IP_FUNCTION', None",
          "68:         )",
          "75:         networks = getattr(settings, 'BASIC_AUTH_WHITELISTED_IP_NETWORKS', [])",
          "79:             networks = networks.split(',')",
          "",
          "[Added Lines]",
          "64:         function_path = getattr(settings, \"BASIC_AUTH_GET_CLIENT_IP_FUNCTION\", None)",
          "71:         networks = getattr(settings, \"BASIC_AUTH_WHITELISTED_IP_NETWORKS\", [])",
          "75:             networks = networks.split(\",\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:             yield ipaddress.ip_network(network)",
          "87:     def _get_whitelisted_http_hosts(self):",
          "89:         # If we get a list, users probably passed a list of strings in",
          "90:         #  the settings, probably from the environment.",
          "91:         if isinstance(http_hosts, str):",
          "93:         # Otherwise assume that the list is iterable.",
          "94:         for http_host in http_hosts:",
          "95:             http_host = http_host.strip()",
          "",
          "[Removed Lines]",
          "88:         http_hosts = getattr(settings, 'BASIC_AUTH_WHITELISTED_HTTP_HOSTS', [])",
          "92:             http_hosts = http_hosts.split(',')",
          "",
          "[Added Lines]",
          "84:         http_hosts = getattr(settings, \"BASIC_AUTH_WHITELISTED_HTTP_HOSTS\", [])",
          "88:             http_hosts = http_hosts.split(\",\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "98:             yield http_host",
          "100:     def _get_whitelisted_paths(self):",
          "102:         # If we get a list, users probably passed a list of strings in",
          "103:         #  the settings, probably from the environment.",
          "104:         if isinstance(paths, str):",
          "106:         # Otherwise assume that the list is iterable.",
          "107:         for path in paths:",
          "108:             path = path.strip()",
          "",
          "[Removed Lines]",
          "101:         paths = getattr(settings, 'BASIC_AUTH_WHITELISTED_PATHS', [])",
          "105:             paths = paths.split(',')",
          "",
          "[Added Lines]",
          "97:         paths = getattr(settings, \"BASIC_AUTH_WHITELISTED_PATHS\", [])",
          "101:             paths = paths.split(\",\")",
          "",
          "---------------"
        ],
        "baipw/response.py||baipw/response.py": [
          "File: baipw/response.py -> baipw/response.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from django.template.loader import render_to_string",
          "5: DEFAULT_AUTH_TEMPLATE = (",
          "7: )",
          "",
          "[Removed Lines]",
          "6:     '<title>Authentication Required</title><h1>Authentication required</h1>'",
          "",
          "[Added Lines]",
          "6:     \"<title>Authentication Required</title><h1>Authentication required</h1>\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:     def __init__(self, content=None, request=None, *args, **kwargs):",
          "12:         self._request = request",
          "13:         self._content = content",
          "16:         super().__init__(self.get_response_content(), *args, **kwargs)",
          "19:     def get_www_authenticate_value(self):",
          "20:         value = \"Basic\"",
          "22:         if realm:",
          "23:             realm = realm.replace('\"', '\\\\\"')",
          "24:             value += ' realm=\"{realm}\"'.format(realm=realm)",
          "",
          "[Removed Lines]",
          "14:         kwargs.setdefault('content_type', 'text/html')",
          "15:         kwargs.setdefault('status', 401)",
          "17:         self['WWW-Authenticate'] = self.get_www_authenticate_value()",
          "21:         realm = getattr(settings, 'BASIC_AUTH_REALM', '')",
          "",
          "[Added Lines]",
          "14:         kwargs.setdefault(\"content_type\", \"text/html\")",
          "15:         kwargs.setdefault(\"status\", 401)",
          "17:         self[\"WWW-Authenticate\"] = self.get_www_authenticate_value()",
          "21:         realm = getattr(settings, \"BASIC_AUTH_REALM\", \"\")",
          "",
          "---------------"
        ],
        "baipw/tests/response.py||baipw/tests/response.py": [
          "File: baipw/tests/response.py -> baipw/tests/response.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: class TestResponse(HttpResponse):",
          "5:     def __init__(self, *args, **kwargs):",
          "",
          "[Removed Lines]",
          "6:         del kwargs['request']",
          "7:         super().__init__('Test message. :P', *args, **kwargs)",
          "",
          "[Added Lines]",
          "6:         del kwargs[\"request\"]",
          "7:         super().__init__(\"Test message. :P\", *args, **kwargs)",
          "",
          "---------------"
        ],
        "baipw/tests/settings.py||baipw/tests/settings.py": [
          "File: baipw/tests/settings.py -> baipw/tests/settings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: SECRET_KEY = get_random_string(50)",
          "10: INSTALLED_APPS = [",
          "16: ]",
          "18: TEMPLATES = [",
          "19:     {",
          "30:             ],",
          "31:         },",
          "32:     },",
          "33: ]",
          "44: if django.VERSION < (1, 9):",
          "45:     # This is to satisfy the django-admin check command.",
          "",
          "[Removed Lines]",
          "11:     'django.contrib.auth',",
          "12:     'django.contrib.contenttypes',",
          "13:     'django.contrib.sessions',",
          "14:     'django.contrib.messages',",
          "15:     'django.contrib.staticfiles',",
          "20:         'BACKEND': 'django.template.backends.django.DjangoTemplates',",
          "21:         'DIRS': [",
          "22:             join(TESTS_PATH, 'templates'),",
          "23:         ],",
          "24:         'APP_DIRS': True,",
          "25:         'OPTIONS': {",
          "26:             'context_processors': [",
          "27:                 'django.template.context_processors.debug',",
          "28:                 'django.template.context_processors.request',",
          "29:                 'django.contrib.auth.context_processors.auth',",
          "35: DATABASES = {",
          "36:     'default': {",
          "37:         'ENGINE': 'django.db.backends.sqlite3',",
          "38:         'NAME': 'db.sqlite3',",
          "39:     }",
          "40: }",
          "42: ROOT_URLCONF = 'baipw.tests.urls'",
          "",
          "[Added Lines]",
          "11:     \"django.contrib.auth\",",
          "12:     \"django.contrib.contenttypes\",",
          "13:     \"django.contrib.sessions\",",
          "14:     \"django.contrib.messages\",",
          "15:     \"django.contrib.staticfiles\",",
          "20:         \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",",
          "21:         \"DIRS\": [join(TESTS_PATH, \"templates\"),],",
          "22:         \"APP_DIRS\": True,",
          "23:         \"OPTIONS\": {",
          "24:             \"context_processors\": [",
          "25:                 \"django.template.context_processors.debug\",",
          "26:                 \"django.template.context_processors.request\",",
          "27:                 \"django.contrib.auth.context_processors.auth\",",
          "33: DATABASES = {\"default\": {\"ENGINE\": \"django.db.backends.sqlite3\", \"NAME\": \"db.sqlite3\",}}",
          "35: ROOT_URLCONF = \"baipw.tests.urls\"",
          "",
          "---------------"
        ],
        "baipw/tests/test_integration.py||baipw/tests/test_integration.py": [
          "File: baipw/tests/test_integration.py -> baipw/tests/test_integration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: SETTINGS = {}",
          "6: if django.VERSION < (1, 10):",
          "15:     ]",
          "16: else:",
          "25:     ]",
          "",
          "[Removed Lines]",
          "7:     SETTINGS['MIDDLEWARE_CLASSES'] = [",
          "8:         'baipw.middleware.BasicAuthIPWhitelistMiddleware',",
          "9:         'django.middleware.security.SecurityMiddleware',",
          "10:         'django.contrib.sessions.middleware.SessionMiddleware',",
          "11:         'django.middleware.common.CommonMiddleware',",
          "12:         'django.middleware.csrf.CsrfViewMiddleware',",
          "13:         'django.contrib.auth.middleware.AuthenticationMiddleware',",
          "14:         'django.middleware.clickjacking.XFrameOptionsMiddleware',",
          "17:     SETTINGS['MIDDLEWARE'] = [",
          "18:         'baipw.middleware.BasicAuthIPWhitelistMiddleware',",
          "19:         'django.middleware.security.SecurityMiddleware',",
          "20:         'django.contrib.sessions.middleware.SessionMiddleware',",
          "21:         'django.middleware.common.CommonMiddleware',",
          "22:         'django.middleware.csrf.CsrfViewMiddleware',",
          "23:         'django.contrib.auth.middleware.AuthenticationMiddleware',",
          "24:         'django.middleware.clickjacking.XFrameOptionsMiddleware',",
          "",
          "[Added Lines]",
          "7:     SETTINGS[\"MIDDLEWARE_CLASSES\"] = [",
          "8:         \"baipw.middleware.BasicAuthIPWhitelistMiddleware\",",
          "9:         \"django.middleware.security.SecurityMiddleware\",",
          "10:         \"django.contrib.sessions.middleware.SessionMiddleware\",",
          "11:         \"django.middleware.common.CommonMiddleware\",",
          "12:         \"django.middleware.csrf.CsrfViewMiddleware\",",
          "13:         \"django.contrib.auth.middleware.AuthenticationMiddleware\",",
          "14:         \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
          "17:     SETTINGS[\"MIDDLEWARE\"] = [",
          "18:         \"baipw.middleware.BasicAuthIPWhitelistMiddleware\",",
          "19:         \"django.middleware.security.SecurityMiddleware\",",
          "20:         \"django.contrib.sessions.middleware.SessionMiddleware\",",
          "21:         \"django.middleware.common.CommonMiddleware\",",
          "22:         \"django.middleware.csrf.CsrfViewMiddleware\",",
          "23:         \"django.contrib.auth.middleware.AuthenticationMiddleware\",",
          "24:         \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:         self.client = test.Client()",
          "33:     def test_basic_auth_not_configured(self):",
          "35:         self.assertEqual(response.status_code, 403)",
          "37:     @test.override_settings(",
          "40:     )",
          "41:     def test_basic_auth_configured(self):",
          "43:         self.assertEqual(response.status_code, 401)",
          "",
          "[Removed Lines]",
          "34:         response = self.client.get('/')",
          "38:         BASIC_AUTH_LOGIN='test',",
          "39:         BASIC_AUTH_PASSWORD='test2',",
          "42:         response = self.client.get('/')",
          "",
          "[Added Lines]",
          "34:         response = self.client.get(\"/\")",
          "38:         BASIC_AUTH_LOGIN=\"test\", BASIC_AUTH_PASSWORD=\"test2\",",
          "41:         response = self.client.get(\"/\")",
          "",
          "---------------"
        ],
        "baipw/tests/test_middleware.py||baipw/tests/test_middleware.py": [
          "File: baipw/tests/test_middleware.py -> baipw/tests/test_middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: class TestMiddleware(TestCase):",
          "13:     def setUp(self):",
          "14:         self.get_response_mock = MagicMock()",
          "20:     def test_no_settings_returns_permission_denied(self):",
          "21:         with self.assertRaises(PermissionDenied):",
          "22:             self.middleware(self.request)",
          "24:     @override_settings(",
          "27:     )",
          "28:     def test_basic_auth_returns_401(self):",
          "29:         response = self.middleware(self.request)",
          "30:         self.assertEqual(response.status_code, 401)",
          "35:     def test_is_basic_auth_configured_if_only_login_set(self):",
          "36:         self.assertFalse(self.middleware._is_basic_auth_configured())",
          "41:     def test_is_basic_auth_configured_if_only_password_set(self):",
          "42:         self.assertFalse(self.middleware._is_basic_auth_configured())",
          "44:     @override_settings(",
          "47:     )",
          "48:     def test_is_basic_auth_configured_if_login_and_password_set(self):",
          "49:         self.assertTrue(self.middleware._is_basic_auth_configured())",
          "",
          "[Removed Lines]",
          "15:         self.middleware = BasicAuthIPWhitelistMiddleware(",
          "16:             self.get_response_mock",
          "17:         )",
          "18:         self.request = RequestFactory().get('/')",
          "25:         BASIC_AUTH_LOGIN='testlogin',",
          "26:         BASIC_AUTH_PASSWORD='testpassword',",
          "32:     @override_settings(",
          "33:         BASIC_AUTH_LOGIN='testlogin',",
          "34:     )",
          "38:     @override_settings(",
          "39:         BASIC_AUTH_PASSWORD='testpassword',",
          "40:     )",
          "45:         BASIC_AUTH_LOGIN='testlogin',",
          "46:         BASIC_AUTH_PASSWORD='testpassword',",
          "",
          "[Added Lines]",
          "15:         self.middleware = BasicAuthIPWhitelistMiddleware(self.get_response_mock)",
          "16:         self.request = RequestFactory().get(\"/\")",
          "23:         BASIC_AUTH_LOGIN=\"testlogin\", BASIC_AUTH_PASSWORD=\"testpassword\",",
          "29:     @override_settings(BASIC_AUTH_LOGIN=\"testlogin\",)",
          "33:     @override_settings(BASIC_AUTH_PASSWORD=\"testpassword\",)",
          "38:         BASIC_AUTH_LOGIN=\"testlogin\", BASIC_AUTH_PASSWORD=\"testpassword\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:     #",
          "59:     @override_settings(",
          "64:     )",
          "65:     def test_whitelisted_networks_when_set(self):",
          "66:         networks = list(self.middleware._get_whitelisted_networks())",
          "67:         self.assertEqual(len(networks), 2)",
          "69:     @override_settings(",
          "74:     )",
          "75:     def test_is_ip_whitelisted(self):",
          "77:         self.assertTrue(self.middleware._is_ip_whitelisted(self.request))",
          "79:         self.assertTrue(self.middleware._is_ip_whitelisted(self.request))",
          "81:     @override_settings(",
          "86:     )",
          "87:     def test_is_ip_whitelisted_invalid_ip(self):",
          "89:         self.assertFalse(self.middleware._is_ip_whitelisted(self.request))",
          "91:         self.assertFalse(self.middleware._is_ip_whitelisted(self.request))",
          "93:     @override_settings(",
          "96:     )",
          "97:     def test_basic_auth_credentials_settings(self):",
          "101:     @override_settings(",
          "107:     )",
          "108:     def test_basic_auth_not_used_if_on_whitelisted_network(self):",
          "110:         self.assertTrue(self.middleware._is_basic_auth_configured())",
          "111:         with mock.patch(",
          "114:         ) as m:",
          "115:             with mock.patch(",
          "118:             ) as ip_check_m:",
          "119:                 self.middleware(self.request)",
          "120:         # Make sure middleware did not try to evaluate basic auth.",
          "",
          "[Removed Lines]",
          "60:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=[",
          "61:             '192.168.0.0/24',",
          "62:             '2001:db00::0/24',",
          "63:         ]",
          "70:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=[",
          "71:             '192.168.0.0/24',",
          "72:             '2001:db00::0/24',",
          "73:         ]",
          "76:         self.request.META['REMOTE_ADDR'] = '192.168.0.25'",
          "78:         self.request.META['REMOTE_ADDR'] = '2001:db00::33'",
          "82:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=[",
          "83:             '192.168.0.0/24',",
          "84:             '2001:db00::0/24',",
          "85:         ]",
          "88:         self.request.META['REMOTE_ADDR'] = '192.168.1.25'",
          "90:         self.request.META['REMOTE_ADDR'] = '2002:eb00::33'",
          "94:         BASIC_AUTH_LOGIN='randomlogin',",
          "95:         BASIC_AUTH_PASSWORD='somepassword',",
          "98:         self.assertEqual(self.middleware.basic_auth_login, 'randomlogin')",
          "99:         self.assertEqual(self.middleware.basic_auth_password, 'somepassword')",
          "102:         BASIC_AUTH_LOGIN='somelogin',",
          "103:         BASIC_AUTH_PASSWORD='somepassword',",
          "104:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=[",
          "105:             '45.21.123.0/24',",
          "106:         ]",
          "109:         self.request.META['REMOTE_ADDR'] = '45.21.123.45'",
          "112:             'baipw.middleware.BasicAuthIPWhitelistMiddleware.'",
          "113:             '_basic_auth_response'",
          "116:                 'baipw.middleware.BasicAuthIPWhitelistMiddleware.'",
          "117:                 '_is_ip_whitelisted'",
          "",
          "[Added Lines]",
          "52:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=[\"192.168.0.0/24\", \"2001:db00::0/24\",]",
          "59:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=[\"192.168.0.0/24\", \"2001:db00::0/24\",]",
          "62:         self.request.META[\"REMOTE_ADDR\"] = \"192.168.0.25\"",
          "64:         self.request.META[\"REMOTE_ADDR\"] = \"2001:db00::33\"",
          "68:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=[\"192.168.0.0/24\", \"2001:db00::0/24\",]",
          "71:         self.request.META[\"REMOTE_ADDR\"] = \"192.168.1.25\"",
          "73:         self.request.META[\"REMOTE_ADDR\"] = \"2002:eb00::33\"",
          "77:         BASIC_AUTH_LOGIN=\"randomlogin\", BASIC_AUTH_PASSWORD=\"somepassword\",",
          "80:         self.assertEqual(self.middleware.basic_auth_login, \"randomlogin\")",
          "81:         self.assertEqual(self.middleware.basic_auth_password, \"somepassword\")",
          "84:         BASIC_AUTH_LOGIN=\"somelogin\",",
          "85:         BASIC_AUTH_PASSWORD=\"somepassword\",",
          "86:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=[\"45.21.123.0/24\",],",
          "89:         self.request.META[\"REMOTE_ADDR\"] = \"45.21.123.45\"",
          "92:             \"baipw.middleware.BasicAuthIPWhitelistMiddleware.\" \"_basic_auth_response\"",
          "95:                 \"baipw.middleware.BasicAuthIPWhitelistMiddleware.\" \"_is_ip_whitelisted\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:         ip_check_m.assert_called_once_with(self.request)",
          "125:     @override_settings(",
          "129:     )",
          "130:     def test_get_custom_get_client_ip(self):",
          "133:                 self.middleware._get_client_ip(self.request)",
          "134:         m.self_assert_called_once_with(self.request)",
          "135:         default_m.assert_not_called()",
          "",
          "[Removed Lines]",
          "126:         BASIC_AUTH_GET_CLIENT_IP_FUNCTION=(",
          "127:             'baipw.tests.utils.custom_get_client_ip'",
          "128:         ),",
          "131:         with mock.patch('baipw.tests.utils.custom_get_client_ip') as m:",
          "132:             with mock.patch('baipw.utils.get_client_ip') as default_m:",
          "",
          "[Added Lines]",
          "104:         BASIC_AUTH_GET_CLIENT_IP_FUNCTION=(\"baipw.tests.utils.custom_get_client_ip\"),",
          "107:         with mock.patch(\"baipw.tests.utils.custom_get_client_ip\") as m:",
          "108:             with mock.patch(\"baipw.utils.get_client_ip\") as default_m:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "141:     # HTTP Host whitelisting tests",
          "142:     #",
          "147:     def test_whitelisted_http_host_setting_when_setting_set(self):",
          "148:         self.assertEqual(",
          "151:         )",
          "156:     def test_whitelisted_http_host_setting_when_setting_set_multiple(self):",
          "157:         self.assertEqual(",
          "158:             set(self.middleware._get_whitelisted_http_hosts()),",
          "160:         )",
          "162:     def test_http_host_whitelist_check_when_settings_empty(self):",
          "167:     @override_settings(",
          "170:     )",
          "171:     def test_http_host_whitelist_passes_check_when_configured_(self):",
          "177:     @override_settings(",
          "180:     )",
          "181:     def test_http_host_whitelist_fails_check_when_configured_(self):",
          "190:     def test_http_host_whitelist_fails_check_with_no_host(self):",
          "191:         with self.assertRaises(PermissionDenied):",
          "192:             self.middleware(self.request)",
          "194:     @override_settings(",
          "197:     )",
          "198:     def test_http_host_whitelist_fails_check_with_wrong_host(self):",
          "200:         with self.assertRaises(PermissionDenied):",
          "201:             self.middleware(self.request)",
          "203:     @override_settings(",
          "209:     )",
          "210:     def test_http_host_whitelist_has_precedence_over_basic_auth(self):",
          "212:         # It does not raise.",
          "213:         self.middleware(self.request)",
          "",
          "[Removed Lines]",
          "144:     @override_settings(",
          "145:         BASIC_AUTH_WHITELISTED_HTTP_HOSTS=['dgg.gg']",
          "146:     )",
          "149:             list(self.middleware._get_whitelisted_http_hosts()),",
          "150:             ['dgg.gg'],",
          "153:     @override_settings(",
          "154:         BASIC_AUTH_WHITELISTED_HTTP_HOSTS=['dgg.gg', 'kernel.org']",
          "155:     )",
          "159:             {'kernel.org', 'dgg.gg'},",
          "163:         self.assertFalse(",
          "164:             self.middleware._is_http_host_whitelisted(self.request)",
          "165:         )",
          "168:         ALLOWED_HOSTS=['kernel.org'],",
          "169:         BASIC_AUTH_WHITELISTED_HTTP_HOSTS=['kernel.org', 'dgg.gg']",
          "172:         self.request.META['HTTP_HOST'] = 'kernel.org'",
          "173:         self.assertTrue(",
          "174:             self.middleware._is_http_host_whitelisted(self.request)",
          "175:         )",
          "178:         ALLOWED_HOSTS=['google.com'],",
          "179:         BASIC_AUTH_WHITELISTED_HTTP_HOSTS=['kernel.org', 'dgg.gg']",
          "182:         self.request.META['HTTP_HOST'] = 'google.com'",
          "183:         self.assertFalse(",
          "184:             self.middleware._is_http_host_whitelisted(self.request)",
          "185:         )",
          "187:     @override_settings(",
          "188:         BASIC_AUTH_WHITELISTED_HTTP_HOSTS=['kernel.org', 'dgg.gg']",
          "189:     )",
          "195:         ALLOWED_HOSTS=['www.example.com'],",
          "196:         BASIC_AUTH_WHITELISTED_HTTP_HOSTS=['kernel.org', 'dgg.gg']",
          "199:         self.request.META['HTTP_HOST'] = 'www.example.com'",
          "204:         BASIC_AUTH_LOGIN='somelogin',",
          "205:         BASIC_AUTH_PASSWORD='somepassword',",
          "206:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=['45.21.123.0/24'],",
          "207:         BASIC_AUTH_WHITELISTED_HTTP_HOSTS=['kernel.org', 'dgg.gg'],",
          "208:         ALLOWED_HOSTS=['dgg.gg'],",
          "211:         self.request.META['HTTP_HOST'] = 'dgg.gg'",
          "",
          "[Added Lines]",
          "120:     @override_settings(BASIC_AUTH_WHITELISTED_HTTP_HOSTS=[\"dgg.gg\"])",
          "123:             list(self.middleware._get_whitelisted_http_hosts()), [\"dgg.gg\"],",
          "126:     @override_settings(BASIC_AUTH_WHITELISTED_HTTP_HOSTS=[\"dgg.gg\", \"kernel.org\"])",
          "130:             {\"kernel.org\", \"dgg.gg\"},",
          "134:         self.assertFalse(self.middleware._is_http_host_whitelisted(self.request))",
          "137:         ALLOWED_HOSTS=[\"kernel.org\"],",
          "138:         BASIC_AUTH_WHITELISTED_HTTP_HOSTS=[\"kernel.org\", \"dgg.gg\"],",
          "141:         self.request.META[\"HTTP_HOST\"] = \"kernel.org\"",
          "142:         self.assertTrue(self.middleware._is_http_host_whitelisted(self.request))",
          "145:         ALLOWED_HOSTS=[\"google.com\"],",
          "146:         BASIC_AUTH_WHITELISTED_HTTP_HOSTS=[\"kernel.org\", \"dgg.gg\"],",
          "149:         self.request.META[\"HTTP_HOST\"] = \"google.com\"",
          "150:         self.assertFalse(self.middleware._is_http_host_whitelisted(self.request))",
          "152:     @override_settings(BASIC_AUTH_WHITELISTED_HTTP_HOSTS=[\"kernel.org\", \"dgg.gg\"])",
          "158:         ALLOWED_HOSTS=[\"www.example.com\"],",
          "159:         BASIC_AUTH_WHITELISTED_HTTP_HOSTS=[\"kernel.org\", \"dgg.gg\"],",
          "162:         self.request.META[\"HTTP_HOST\"] = \"www.example.com\"",
          "167:         BASIC_AUTH_LOGIN=\"somelogin\",",
          "168:         BASIC_AUTH_PASSWORD=\"somepassword\",",
          "169:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=[\"45.21.123.0/24\"],",
          "170:         BASIC_AUTH_WHITELISTED_HTTP_HOSTS=[\"kernel.org\", \"dgg.gg\"],",
          "171:         ALLOWED_HOSTS=[\"dgg.gg\"],",
          "174:         self.request.META[\"HTTP_HOST\"] = \"dgg.gg\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "216:     # Path whitelisting tests",
          "217:     #",
          "222:     def test_whitelisted_path_setting_when_setting_set(self):",
          "223:         self.assertEqual(",
          "226:         )",
          "231:     def test_whitelisted_path_setting_when_setting_set_multiple(self):",
          "232:         self.assertEqual(",
          "235:         )",
          "240:     def test_whitelisted_path_setting_when_multiple_set_as_string(self):",
          "241:         self.assertEqual(",
          "244:         )",
          "249:     def test_path_whitelist_passes_exact_check_when_configured(self):",
          "258:     def test_path_whitelist_passes_child_check_when_configured(self):",
          "267:     def test_path_whitelist_fails_check_when_configured(self):",
          "276:     def test_path_whitelist_fails_check_for_parent_path(self):",
          "277:         with self.assertRaises(PermissionDenied):",
          "278:             self.middleware(self.request)",
          "283:     def test_path_whitelist_fails_check_with_wrong_path(self):",
          "285:         with self.assertRaises(PermissionDenied):",
          "286:             self.middleware(self.request)",
          "288:     @override_settings(",
          "292:     )",
          "293:     def test_path_whitelist_has_precedence_over_basic_auth(self):",
          "295:         try:",
          "296:             self.middleware(self.request)",
          "297:         except Exception:",
          "301:     def test_path_whitelist_check_when_settings_empty(self):",
          "307:     #",
          "308:     # Response class tests",
          "309:     #",
          "311:     def test_get_response_class_when_none_set(self):",
          "318:     def test_get_response_class_when_set(self):",
          "322:     @override_settings(",
          "326:     )",
          "327:     def test_middleware_when_custom_response_set(self):",
          "328:         response = self.middleware(self.request)",
          "329:         self.assertIs(response.__class__, TestResponse)",
          "332:     @override_settings(",
          "335:     )",
          "336:     def test_skip_basic_auth_ip_whitelist_middleware_check_attribute_set(self):",
          "337:         self.assertFalse(",
          "340:         )",
          "341:         self.middleware(self.request)",
          "346:     @override_settings(",
          "349:     )",
          "350:     def test_the_attribute_skips(self):",
          "356:         self.middleware(self.request)",
          "357:         self.get_response_mock.assert_called_once_with(self.request)",
          "359:     @override_settings(",
          "362:     )",
          "363:     def test_authoritzation_header_consumed_with_correct_credentials(self):",
          "365:         self.middleware(self.request)",
          "368:     @override_settings(",
          "371:     )",
          "372:     def test_authoritzation_header_consumed_with_incorrect_credentials(self):",
          "374:         self.middleware(self.request)",
          "377:     @override_settings(",
          "378:         BASIC_AUTH_LOGIN=None,",
          "379:         BASIC_AUTH_PASSWORD=None,",
          "383:     )",
          "384:     def test_authoritzation_header_not_consumed_when_auth_not_configured(self):",
          "387:         self.middleware(self.request)",
          "393:     @override_settings(",
          "396:         BASIC_AUTH_DISABLE_CONSUMING_AUTHORIZATION_HEADER=True,",
          "397:     )",
          "398:     def test_auth_header_not_consumed_with_consumption_disabled(self):",
          "400:         self.middleware(self.request)",
          "403:     @override_settings(",
          "406:         BASIC_AUTH_DISABLE_CONSUMING_AUTHORIZATION_HEADER=False,",
          "407:     )",
          "408:     def test_auth_header_consumed_with_consumption_enabled_explicitly(self):",
          "410:         self.middleware(self.request)",
          "413:     @override_settings(",
          "416:     )",
          "417:     def test_auth_header_consumed_with_consumption_enabled_implicitly(self):",
          "419:         self.middleware(self.request)",
          "",
          "[Removed Lines]",
          "219:     @override_settings(",
          "220:         BASIC_AUTH_WHITELISTED_PATHS=['ham/']",
          "221:     )",
          "224:             list(self.middleware._get_whitelisted_paths()),",
          "225:             ['ham/'],",
          "228:     @override_settings(",
          "229:         BASIC_AUTH_WHITELISTED_PATHS=['ham/', 'eggs/']",
          "230:     )",
          "233:             set(self.middleware._get_whitelisted_paths()),",
          "234:             {'ham/', 'eggs/'},",
          "237:     @override_settings(",
          "238:         BASIC_AUTH_WHITELISTED_PATHS='ham/,eggs/'",
          "239:     )",
          "242:             set(self.middleware._get_whitelisted_paths()),",
          "243:             {'ham/', 'eggs/'},",
          "246:     @override_settings(",
          "247:         BASIC_AUTH_WHITELISTED_PATHS=['ham/', 'eggs/']",
          "248:     )",
          "250:         self.request.path = 'ham/'",
          "251:         self.assertTrue(",
          "252:             self.middleware._is_path_whitelisted(self.request)",
          "253:         )",
          "255:     @override_settings(",
          "256:         BASIC_AUTH_WHITELISTED_PATHS=['ham/', 'eggs/']",
          "257:     )",
          "259:         self.request.path = 'ham/bacon/spam/'",
          "260:         self.assertTrue(",
          "261:             self.middleware._is_path_whitelisted(self.request)",
          "262:         )",
          "264:     @override_settings(",
          "265:         BASIC_AUTH_WHITELISTED_PATHS=['ham/', 'eggs/']",
          "266:     )",
          "268:         self.request.path = 'spam/'",
          "269:         self.assertFalse(",
          "270:             self.middleware._is_path_whitelisted(self.request)",
          "271:         )",
          "273:     @override_settings(",
          "274:         BASIC_AUTH_WHITELISTED_PATHS=['ham/', 'eggs/']",
          "275:     )",
          "280:     @override_settings(",
          "281:         BASIC_AUTH_WHITELISTED_PATHS=['ham/', 'eggs/']",
          "282:     )",
          "284:         self.request.path = 'spam/'",
          "289:         BASIC_AUTH_LOGIN='somelogin',",
          "290:         BASIC_AUTH_PASSWORD='somepassword',",
          "291:         BASIC_AUTH_WHITELISTED_PATHS=['ham/', 'eggs/'],",
          "294:         self.request.path = 'ham/'",
          "298:             self.fail(\"self.middleware() raised an error unexpectedly for a \"",
          "299:                       \"whitelisted path\")",
          "302:         self.request.path = 'spam/'",
          "303:         self.assertFalse(",
          "304:             self.middleware._is_path_whitelisted(self.request)",
          "305:         )",
          "312:         self.assertIs(self.middleware.get_response_class(),",
          "313:                       HttpUnauthorizedResponse)",
          "315:     @override_settings(",
          "316:         BASIC_AUTH_RESPONSE_CLASS='baipw.tests.response.TestResponse'",
          "317:     )",
          "319:         self.assertIs(self.middleware.get_response_class(),",
          "320:                       TestResponse)",
          "323:         BASIC_AUTH_LOGIN='testlogin',",
          "324:         BASIC_AUTH_PASSWORD='testpassword',",
          "325:         BASIC_AUTH_RESPONSE_CLASS='baipw.tests.response.TestResponse'",
          "330:         self.assertEqual(response.content, b'Test message. :P')",
          "333:         BASIC_AUTH_LOGIN='test',",
          "334:         BASIC_AUTH_PASSWORD='test',",
          "338:             hasattr(self.request,",
          "339:                     '_skip_basic_auth_ip_whitelist_middleware_check')",
          "342:         self.assertTrue(",
          "343:             self.request._skip_basic_auth_ip_whitelist_middleware_check",
          "344:         )",
          "347:         BASIC_AUTH_LOGIN='test',",
          "348:         BASIC_AUTH_PASSWORD='test',",
          "351:         setattr(",
          "352:             self.request,",
          "353:             '_skip_basic_auth_ip_whitelist_middleware_check',",
          "354:             True",
          "355:         )",
          "360:         BASIC_AUTH_LOGIN='test',",
          "361:         BASIC_AUTH_PASSWORD='test',",
          "364:         self.request.META['HTTP_AUTHORIZATION'] = 'Basic dGVzdDp0ZXN0'",
          "366:         self.assertNotIn('HTTP_AUTHORIZATION', self.request.META)",
          "369:         BASIC_AUTH_LOGIN='testtest',",
          "370:         BASIC_AUTH_PASSWORD='testtest',",
          "373:         self.request.META['HTTP_AUTHORIZATION'] = 'Basic dGVzdDp0ZXN0'",
          "375:         self.assertNotIn('HTTP_AUTHORIZATION', self.request.META)",
          "380:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=[",
          "381:             '74.150.52.0/24',",
          "382:         ]",
          "385:         self.request.META['HTTP_AUTHORIZATION'] = 'Basic dGVzdDp0ZXN0'",
          "386:         self.request.META['REMOTE_ADDR'] = '74.150.52.64'",
          "388:         self.assertIn('HTTP_AUTHORIZATION', self.request.META)",
          "389:         self.assertEqual(",
          "390:             self.request.META['HTTP_AUTHORIZATION'], 'Basic dGVzdDp0ZXN0'",
          "391:         )",
          "394:         BASIC_AUTH_LOGIN='testtest',",
          "395:         BASIC_AUTH_PASSWORD='testtest',",
          "399:         self.request.META['HTTP_AUTHORIZATION'] = 'Basic dGVzdDp0ZXN0'",
          "401:         self.assertIn('HTTP_AUTHORIZATION', self.request.META)",
          "404:         BASIC_AUTH_LOGIN='testtest',",
          "405:         BASIC_AUTH_PASSWORD='testtest',",
          "409:         self.request.META['HTTP_AUTHORIZATION'] = 'Basic dGVzdDp0ZXN0'",
          "411:         self.assertNotIn('HTTP_AUTHORIZATION', self.request.META)",
          "414:         BASIC_AUTH_LOGIN='testtest',",
          "415:         BASIC_AUTH_PASSWORD='testtest',",
          "418:         self.request.META['HTTP_AUTHORIZATION'] = 'Basic dGVzdDp0ZXN0'",
          "420:         self.assertNotIn('HTTP_AUTHORIZATION', self.request.META)",
          "",
          "[Added Lines]",
          "182:     @override_settings(BASIC_AUTH_WHITELISTED_PATHS=[\"ham/\"])",
          "185:             list(self.middleware._get_whitelisted_paths()), [\"ham/\"],",
          "188:     @override_settings(BASIC_AUTH_WHITELISTED_PATHS=[\"ham/\", \"eggs/\"])",
          "191:             set(self.middleware._get_whitelisted_paths()), {\"ham/\", \"eggs/\"},",
          "194:     @override_settings(BASIC_AUTH_WHITELISTED_PATHS=\"ham/,eggs/\")",
          "197:             set(self.middleware._get_whitelisted_paths()), {\"ham/\", \"eggs/\"},",
          "200:     @override_settings(BASIC_AUTH_WHITELISTED_PATHS=[\"ham/\", \"eggs/\"])",
          "202:         self.request.path = \"ham/\"",
          "203:         self.assertTrue(self.middleware._is_path_whitelisted(self.request))",
          "205:     @override_settings(BASIC_AUTH_WHITELISTED_PATHS=[\"ham/\", \"eggs/\"])",
          "207:         self.request.path = \"ham/bacon/spam/\"",
          "208:         self.assertTrue(self.middleware._is_path_whitelisted(self.request))",
          "210:     @override_settings(BASIC_AUTH_WHITELISTED_PATHS=[\"ham/\", \"eggs/\"])",
          "212:         self.request.path = \"spam/\"",
          "213:         self.assertFalse(self.middleware._is_path_whitelisted(self.request))",
          "215:     @override_settings(BASIC_AUTH_WHITELISTED_PATHS=[\"ham/\", \"eggs/\"])",
          "220:     @override_settings(BASIC_AUTH_WHITELISTED_PATHS=[\"ham/\", \"eggs/\"])",
          "222:         self.request.path = \"spam/\"",
          "227:         BASIC_AUTH_LOGIN=\"somelogin\",",
          "228:         BASIC_AUTH_PASSWORD=\"somepassword\",",
          "229:         BASIC_AUTH_WHITELISTED_PATHS=[\"ham/\", \"eggs/\"],",
          "232:         self.request.path = \"ham/\"",
          "236:             self.fail(",
          "237:                 \"self.middleware() raised an error unexpectedly for a \"",
          "238:                 \"whitelisted path\"",
          "239:             )",
          "242:         self.request.path = \"spam/\"",
          "243:         self.assertFalse(self.middleware._is_path_whitelisted(self.request))",
          "250:         self.assertIs(self.middleware.get_response_class(), HttpUnauthorizedResponse)",
          "252:     @override_settings(BASIC_AUTH_RESPONSE_CLASS=\"baipw.tests.response.TestResponse\")",
          "254:         self.assertIs(self.middleware.get_response_class(), TestResponse)",
          "257:         BASIC_AUTH_LOGIN=\"testlogin\",",
          "258:         BASIC_AUTH_PASSWORD=\"testpassword\",",
          "259:         BASIC_AUTH_RESPONSE_CLASS=\"baipw.tests.response.TestResponse\",",
          "264:         self.assertEqual(response.content, b\"Test message. :P\")",
          "267:         BASIC_AUTH_LOGIN=\"test\", BASIC_AUTH_PASSWORD=\"test\",",
          "271:             hasattr(self.request, \"_skip_basic_auth_ip_whitelist_middleware_check\")",
          "274:         self.assertTrue(self.request._skip_basic_auth_ip_whitelist_middleware_check)",
          "277:         BASIC_AUTH_LOGIN=\"test\", BASIC_AUTH_PASSWORD=\"test\",",
          "280:         setattr(self.request, \"_skip_basic_auth_ip_whitelist_middleware_check\", True)",
          "285:         BASIC_AUTH_LOGIN=\"test\", BASIC_AUTH_PASSWORD=\"test\",",
          "288:         self.request.META[\"HTTP_AUTHORIZATION\"] = \"Basic dGVzdDp0ZXN0\"",
          "290:         self.assertNotIn(\"HTTP_AUTHORIZATION\", self.request.META)",
          "293:         BASIC_AUTH_LOGIN=\"testtest\", BASIC_AUTH_PASSWORD=\"testtest\",",
          "296:         self.request.META[\"HTTP_AUTHORIZATION\"] = \"Basic dGVzdDp0ZXN0\"",
          "298:         self.assertNotIn(\"HTTP_AUTHORIZATION\", self.request.META)",
          "303:         BASIC_AUTH_WHITELISTED_IP_NETWORKS=[\"74.150.52.0/24\",],",
          "306:         self.request.META[\"HTTP_AUTHORIZATION\"] = \"Basic dGVzdDp0ZXN0\"",
          "307:         self.request.META[\"REMOTE_ADDR\"] = \"74.150.52.64\"",
          "309:         self.assertIn(\"HTTP_AUTHORIZATION\", self.request.META)",
          "310:         self.assertEqual(self.request.META[\"HTTP_AUTHORIZATION\"], \"Basic dGVzdDp0ZXN0\")",
          "313:         BASIC_AUTH_LOGIN=\"testtest\",",
          "314:         BASIC_AUTH_PASSWORD=\"testtest\",",
          "318:         self.request.META[\"HTTP_AUTHORIZATION\"] = \"Basic dGVzdDp0ZXN0\"",
          "320:         self.assertIn(\"HTTP_AUTHORIZATION\", self.request.META)",
          "323:         BASIC_AUTH_LOGIN=\"testtest\",",
          "324:         BASIC_AUTH_PASSWORD=\"testtest\",",
          "328:         self.request.META[\"HTTP_AUTHORIZATION\"] = \"Basic dGVzdDp0ZXN0\"",
          "330:         self.assertNotIn(\"HTTP_AUTHORIZATION\", self.request.META)",
          "333:         BASIC_AUTH_LOGIN=\"testtest\", BASIC_AUTH_PASSWORD=\"testtest\",",
          "336:         self.request.META[\"HTTP_AUTHORIZATION\"] = \"Basic dGVzdDp0ZXN0\"",
          "338:         self.assertNotIn(\"HTTP_AUTHORIZATION\", self.request.META)",
          "",
          "---------------"
        ],
        "baipw/tests/test_response.py||baipw/tests/test_response.py": [
          "File: baipw/tests/test_response.py -> baipw/tests/test_response.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: class TestHttpUnauthorizedResponse(TestCase):",
          "7:     def setUp(self):",
          "10:     def test_default_realm(self):",
          "11:         response = HttpUnauthorizedResponse(request=self.request)",
          "17:     def test_custom_realm(self):",
          "18:         response = HttpUnauthorizedResponse(request=self.request)",
          "25:     def test_custom_realm_with_doublequotes(self):",
          "26:         response = HttpUnauthorizedResponse(request=self.request)",
          "30:     def test_default_template(self):",
          "31:         response = HttpUnauthorizedResponse(request=self.request)",
          "38:     def test_custom_template(self):",
          "39:         response = HttpUnauthorizedResponse(request=self.request)",
          "",
          "[Removed Lines]",
          "8:         self.request = RequestFactory().get('/')",
          "12:         self.assertEqual(response['WWW-Authenticate'], 'Basic')",
          "14:     @override_settings(",
          "15:         BASIC_AUTH_REALM='Custom realm'",
          "16:     )",
          "19:         self.assertEqual(response['WWW-Authenticate'],",
          "20:                          'Basic realm=\"Custom realm\"')",
          "22:     @override_settings(",
          "23:         BASIC_AUTH_REALM='\"Custom realm\"'",
          "24:     )",
          "27:         self.assertEqual(response['WWW-Authenticate'],",
          "28:                          'Basic realm=\"\\\\\"Custom realm\\\\\"\"')",
          "32:         self.assertEqual(response.get_response_content(),",
          "33:                          DEFAULT_AUTH_TEMPLATE)",
          "35:     @override_settings(",
          "36:         BASIC_AUTH_RESPONSE_TEMPLATE='test_template.html',",
          "37:     )",
          "40:         self.assertEqual(response.get_response_content().strip(),",
          "41:                          \"This is a test template.\")",
          "42:         self.assertEqual(response['Content-Type'], 'text/html')",
          "",
          "[Added Lines]",
          "8:         self.request = RequestFactory().get(\"/\")",
          "12:         self.assertEqual(response[\"WWW-Authenticate\"], \"Basic\")",
          "14:     @override_settings(BASIC_AUTH_REALM=\"Custom realm\")",
          "17:         self.assertEqual(response[\"WWW-Authenticate\"], 'Basic realm=\"Custom realm\"')",
          "19:     @override_settings(BASIC_AUTH_REALM='\"Custom realm\"')",
          "22:         self.assertEqual(",
          "23:             response[\"WWW-Authenticate\"], 'Basic realm=\"\\\\\"Custom realm\\\\\"\"'",
          "24:         )",
          "28:         self.assertEqual(response.get_response_content(), DEFAULT_AUTH_TEMPLATE)",
          "30:     @override_settings(BASIC_AUTH_RESPONSE_TEMPLATE=\"test_template.html\",)",
          "33:         self.assertEqual(",
          "34:             response.get_response_content().strip(), \"This is a test template.\"",
          "35:         )",
          "36:         self.assertEqual(response[\"Content-Type\"], \"text/html\")",
          "",
          "---------------"
        ],
        "baipw/tests/test_utils.py||baipw/tests/test_utils.py": [
          "File: baipw/tests/test_utils.py -> baipw/tests/test_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: class TestAuthorize(TestCase):",
          "10:     def setUp(self):",
          "13:     def test_authorise_with_no_password(self):",
          "14:         with self.assertRaises(Unauthorized) as e:",
          "16:         self.assertEqual(",
          "17:             str(e.exception),",
          "19:         )",
          "21:     def test_authorise_with_wrong_credentials(self):",
          "26:         )",
          "27:         with self.assertRaises(Unauthorized) as e:",
          "29:         self.assertEqual(",
          "32:         )",
          "34:     def test_authorise_with_correct_credentials(self):",
          "42:         )",
          "44:     def test_authorise_with_invalid_header(self):",
          "46:         with self.assertRaises(Unauthorized) as e:",
          "48:         self.assertEqual(",
          "51:         )",
          "54: class TestGetClientIP(TestCase):",
          "55:     def setUp(self):",
          "58:     def test_get_client_ip_from_remote_addr(self):",
          "64:     def test_get_client_ip_if_no_remote_addr_or_x_forwaded_for(self):",
          "68:         self.assertIsNone(get_client_ip(self.request))",
          "70:     def test_get_client_ip_from_x_forwaded_for(self):",
          "76:     def test_get_client_ip_from_x_forwaded_for_when_multiple_values(self):",
          "80:         # Should use the last IP from the list.",
          "83:     def test_get_client_ip_prioritises_cloudflare_ip(self):",
          "",
          "[Removed Lines]",
          "11:         self.request = RequestFactory().get('/')",
          "15:             authorize(self.request, 'somelogin', 'somepassword')",
          "18:             '\"HTTP_AUTHORIZATION\" is not present in the request object.'",
          "22:         self.request.META['HTTP_AUTHORIZATION'] = 'Basic {}'.format(",
          "23:             base64.b64encode(",
          "24:                 'somelogin:somepassword'.encode('utf-8')",
          "25:             ).decode('utf-8')",
          "28:             authorize(self.request, 'somelogin', 'wrongpassword')",
          "30:             str(e.exception),",
          "31:             'Basic authentication credentials are invalid.'",
          "35:         self.request.META['HTTP_AUTHORIZATION'] = 'Basic {}'.format(",
          "36:             base64.b64encode(",
          "37:                 'somelogin:correctpassword'.encode('utf-8')",
          "38:             ).decode('utf-8')",
          "39:         )",
          "40:         self.assertTrue(",
          "41:             authorize(self.request, 'somelogin', 'correctpassword')",
          "45:         self.request.META['HTTP_AUTHORIZATION'] = 'Basic'",
          "47:             authorize(self.request, 'somelogin', 'wrongpassword')",
          "49:             str(e.exception),",
          "50:             'Invalid format of the authorization header.'",
          "56:         self.request = RequestFactory().get('/')",
          "59:         self.request.META['REMOTE_ADDR'] = '192.168.0.17'",
          "60:         self.assertNotIn('HTTP_X_FORWARDED_FOR', self.request.META)",
          "61:         self.assertIn('REMOTE_ADDR', self.request.META)",
          "62:         self.assertEqual(get_client_ip(self.request), '192.168.0.17')",
          "65:         del self.request.META['REMOTE_ADDR']",
          "66:         self.assertNotIn('HTTP_X_FORWARDED_FOR', self.request.META)",
          "67:         self.assertNotIn('REMOTE_ADDR', self.request.META)",
          "71:         self.request.META['HTTP_X_FORWARDED_FOR'] = '72.123.123.89'",
          "72:         self.assertIn('HTTP_X_FORWARDED_FOR', self.request.META)",
          "73:         self.assertIn('REMOTE_ADDR', self.request.META)",
          "74:         self.assertEqual(get_client_ip(self.request), '72.123.123.89')",
          "77:         self.request.META['HTTP_X_FORWARDED_FOR'] = '72.123.123.89,5.123.2.45'",
          "78:         self.assertIn('HTTP_X_FORWARDED_FOR', self.request.META)",
          "79:         self.assertIn('REMOTE_ADDR', self.request.META)",
          "81:         self.assertEqual(get_client_ip(self.request), '5.123.2.45')",
          "84:         self.request.META['HTTP_CF_CONNECTING_IP'] = '72.123.123.90'",
          "85:         self.request.META['HTTP_X_FORWARDED_FOR'] = '110.123.123.89'",
          "86:         self.assertIn('REMOTE_ADDR', self.request.META)",
          "87:         self.assertEqual(get_client_ip(self.request), '72.123.123.90')",
          "",
          "[Added Lines]",
          "11:         self.request = RequestFactory().get(\"/\")",
          "15:             authorize(self.request, \"somelogin\", \"somepassword\")",
          "18:             '\"HTTP_AUTHORIZATION\" is not present in the request object.',",
          "22:         self.request.META[\"HTTP_AUTHORIZATION\"] = \"Basic {}\".format(",
          "23:             base64.b64encode(\"somelogin:somepassword\".encode(\"utf-8\")).decode(\"utf-8\")",
          "26:             authorize(self.request, \"somelogin\", \"wrongpassword\")",
          "28:             str(e.exception), \"Basic authentication credentials are invalid.\"",
          "32:         self.request.META[\"HTTP_AUTHORIZATION\"] = \"Basic {}\".format(",
          "33:             base64.b64encode(\"somelogin:correctpassword\".encode(\"utf-8\")).decode(",
          "34:                 \"utf-8\"",
          "35:             )",
          "37:         self.assertTrue(authorize(self.request, \"somelogin\", \"correctpassword\"))",
          "40:         self.request.META[\"HTTP_AUTHORIZATION\"] = \"Basic\"",
          "42:             authorize(self.request, \"somelogin\", \"wrongpassword\")",
          "44:             str(e.exception), \"Invalid format of the authorization header.\"",
          "50:         self.request = RequestFactory().get(\"/\")",
          "53:         self.request.META[\"REMOTE_ADDR\"] = \"192.168.0.17\"",
          "54:         self.assertNotIn(\"HTTP_X_FORWARDED_FOR\", self.request.META)",
          "55:         self.assertIn(\"REMOTE_ADDR\", self.request.META)",
          "56:         self.assertEqual(get_client_ip(self.request), \"192.168.0.17\")",
          "59:         del self.request.META[\"REMOTE_ADDR\"]",
          "60:         self.assertNotIn(\"HTTP_X_FORWARDED_FOR\", self.request.META)",
          "61:         self.assertNotIn(\"REMOTE_ADDR\", self.request.META)",
          "65:         self.request.META[\"HTTP_X_FORWARDED_FOR\"] = \"72.123.123.89\"",
          "66:         self.assertIn(\"HTTP_X_FORWARDED_FOR\", self.request.META)",
          "67:         self.assertIn(\"REMOTE_ADDR\", self.request.META)",
          "68:         self.assertEqual(get_client_ip(self.request), \"72.123.123.89\")",
          "71:         self.request.META[\"HTTP_X_FORWARDED_FOR\"] = \"72.123.123.89,5.123.2.45\"",
          "72:         self.assertIn(\"HTTP_X_FORWARDED_FOR\", self.request.META)",
          "73:         self.assertIn(\"REMOTE_ADDR\", self.request.META)",
          "75:         self.assertEqual(get_client_ip(self.request), \"5.123.2.45\")",
          "78:         self.request.META[\"HTTP_CF_CONNECTING_IP\"] = \"72.123.123.90\"",
          "79:         self.request.META[\"HTTP_X_FORWARDED_FOR\"] = \"110.123.123.89\"",
          "80:         self.assertIn(\"REMOTE_ADDR\", self.request.META)",
          "81:         self.assertEqual(get_client_ip(self.request), \"72.123.123.90\")",
          "",
          "---------------"
        ],
        "baipw/utils.py||baipw/utils.py": [
          "File: baipw/utils.py -> baipw/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: def get_client_ip(request):",
          "9:     # IP retrieved from CloudFlare",
          "12:     # Header usually set by proxies",
          "15:     # Header set by the connecting party, usually not the actual client making",
          "16:     # the request, but a web server that the request goes through.",
          "19:     # Prioritise IPs from proxies.",
          "24:     # If no IP address was attached to the address, return nothing.",
          "25:     if final_ip is None:",
          "",
          "[Removed Lines]",
          "10:     cf_connecting_ip = request.META.get('HTTP_CF_CONNECTING_IP')",
          "13:     x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')",
          "17:     remote_addr = request.META.get('REMOTE_ADDR')",
          "20:     final_ip = (",
          "21:         cf_connecting_ip or x_forwarded_for or remote_addr",
          "22:     )",
          "",
          "[Added Lines]",
          "10:     cf_connecting_ip = request.META.get(\"HTTP_CF_CONNECTING_IP\")",
          "13:     x_forwarded_for = request.META.get(\"HTTP_X_FORWARDED_FOR\")",
          "17:     remote_addr = request.META.get(\"REMOTE_ADDR\")",
          "20:     final_ip = cf_connecting_ip or x_forwarded_for or remote_addr",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     # If there is a list of IPs provided, use the last one (should be",
          "29:     # the most recent one). This may not work on Google Cloud.",
          "33: def authorize(request, configured_username, configured_password):",
          "",
          "[Removed Lines]",
          "30:     return final_ip.split(',')[-1].strip()",
          "",
          "[Added Lines]",
          "28:     return final_ip.split(\",\")[-1].strip()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:     \"\"\"",
          "38:     # Use request.META instead of request.headers to make it",
          "39:     # compatible with Django versions below 2.2.",
          "47:     disable_consumption = getattr(",
          "51:     )",
          "52:     if not disable_consumption:",
          "53:         # Delete \"Authorization\" header so other authentication",
          "54:         # mechanisms do not try to use it.",
          "58:     if len(authentication_tuple) != 2:",
          "60:     auth_method = authentication_tuple[0]",
          "61:     auth = authentication_tuple[1]",
          "63:         raise Unauthorized('\"Basic\" is not an authorization method.')",
          "66:     if username == configured_username and password == configured_password:",
          "67:         return True",
          "",
          "[Removed Lines]",
          "40:     if 'HTTP_AUTHORIZATION' not in request.META:",
          "41:         raise Unauthorized(",
          "42:             '\"HTTP_AUTHORIZATION\" is not present in the request object.'",
          "43:         )",
          "45:     authentication = request.META['HTTP_AUTHORIZATION']",
          "48:         settings,",
          "49:         'BASIC_AUTH_DISABLE_CONSUMING_AUTHORIZATION_HEADER',",
          "50:         False,",
          "55:         request.META.pop('HTTP_AUTHORIZATION')",
          "57:     authentication_tuple = authentication.split(' ', 1)",
          "59:         raise Unauthorized('Invalid format of the authorization header.')",
          "62:     if 'basic' != auth_method.lower():",
          "64:     auth = base64.b64decode(auth.strip()).decode('utf-8')",
          "65:     username, password = auth.split(':', 1)",
          "68:     raise Unauthorized('Basic authentication credentials are invalid.')",
          "",
          "[Added Lines]",
          "38:     if \"HTTP_AUTHORIZATION\" not in request.META:",
          "39:         raise Unauthorized('\"HTTP_AUTHORIZATION\" is not present in the request object.')",
          "41:     authentication = request.META[\"HTTP_AUTHORIZATION\"]",
          "44:         settings, \"BASIC_AUTH_DISABLE_CONSUMING_AUTHORIZATION_HEADER\", False,",
          "49:         request.META.pop(\"HTTP_AUTHORIZATION\")",
          "51:     authentication_tuple = authentication.split(\" \", 1)",
          "53:         raise Unauthorized(\"Invalid format of the authorization header.\")",
          "56:     if \"basic\" != auth_method.lower():",
          "58:     auth = base64.b64decode(auth.strip()).decode(\"utf-8\")",
          "59:     username, password = auth.split(\":\", 1)",
          "62:     raise Unauthorized(\"Basic authentication credentials are invalid.\")",
          "",
          "---------------"
        ],
        "run_tests.py||run_tests.py": [
          "File: run_tests.py -> run_tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from django.core.management import execute_from_command_line",
          "13: def runtests():",
          "15:     # Makemigrations does not return proper error",
          "16:     # code on Django < 1.10.",
          "17:     if django.VERSION >= (1, 10):",
          "28:     runtests()",
          "",
          "[Removed Lines]",
          "10: os.environ['DJANGO_SETTINGS_MODULE'] = 'baipw.tests.settings'",
          "14:     execute_from_command_line([sys.argv[0], 'check'])",
          "18:         execute_from_command_line([",
          "19:             sys.argv[0],",
          "20:             'makemigrations',",
          "21:             '--noinput',",
          "22:             '--check',",
          "23:         ])",
          "24:     execute_from_command_line([sys.argv[0], 'test'] + sys.argv[1:])",
          "27: if __name__ == '__main__':",
          "",
          "[Added Lines]",
          "10: os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"baipw.tests.settings\"",
          "14:     execute_from_command_line([sys.argv[0], \"check\"])",
          "18:         execute_from_command_line(",
          "19:             [sys.argv[0], \"makemigrations\", \"--noinput\", \"--check\",]",
          "20:         )",
          "21:     execute_from_command_line([sys.argv[0], \"test\"] + sys.argv[1:])",
          "24: if __name__ == \"__main__\":",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7f09294dd360ca8db70651fb461e020c19b44a3",
      "candidate_info": {
        "commit_hash": "c7f09294dd360ca8db70651fb461e020c19b44a3",
        "repo": "tm-kn/django-basic-auth-ip-whitelist",
        "commit_url": "https://github.com/tm-kn/django-basic-auth-ip-whitelist/commit/c7f09294dd360ca8db70651fb461e020c19b44a3",
        "files": [
          "CHANGELOG.rst",
          "MANIFEST.in",
          "baipw/__init__.py",
          "setup.cfg"
        ],
        "message": "Do not include tests in the package",
        "before_after_code_files": [
          "MANIFEST.in||MANIFEST.in",
          "baipw/__init__.py||baipw/__init__.py",
          "setup.cfg||setup.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "baipw/__init__.py||baipw/__init__.py"
          ],
          "candidate": [
            "baipw/__init__.py||baipw/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "MANIFEST.in||MANIFEST.in": [
          "File: MANIFEST.in -> MANIFEST.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: include LICENSE *.rst",
          "2: graft baipw",
          "3: global-exclude __pycache__",
          "4: global-exclude *.py[co]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: prune baipw/tests",
          "",
          "---------------"
        ],
        "baipw/__init__.py||baipw/__init__.py": [
          "File: baipw/__init__.py -> baipw/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: __version__ = \"0.3.3\"",
          "",
          "---------------"
        ],
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: [metadata]",
          "2: name = django-basic-auth-ip-whitelist",
          "4: description = Hide your Django site behind basic authentication mechanism with IP whitelisting support.",
          "5: long-description = file: README.rst",
          "6: author = Tomasz Knapik",
          "",
          "[Removed Lines]",
          "3: version = 0.3.3",
          "",
          "[Added Lines]",
          "3: version = attr: baipw.__version__",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     Django>=1.8,<4",
          "42: python_requires = >=3.4",
          "44: [bdist_wheel]",
          "45: python-tag = py3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: [options.packages.find]",
          "45: exclude =",
          "46:     baipw.tests*",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02711338e379f47fc2e53901ed9440504c391078",
      "candidate_info": {
        "commit_hash": "02711338e379f47fc2e53901ed9440504c391078",
        "repo": "tm-kn/django-basic-auth-ip-whitelist",
        "commit_url": "https://github.com/tm-kn/django-basic-auth-ip-whitelist/commit/02711338e379f47fc2e53901ed9440504c391078",
        "files": [
          ".github/workflows/test.yml",
          "CHANGELOG.rst",
          "baipw/__init__.py",
          "baipw/response.py",
          "baipw/tests/test_response.py",
          "setup.cfg",
          "tox.ini"
        ],
        "message": "Make default response use \"never cache\" header (#6)",
        "before_after_code_files": [
          "baipw/__init__.py||baipw/__init__.py",
          "baipw/response.py||baipw/response.py",
          "baipw/tests/test_response.py||baipw/tests/test_response.py",
          "setup.cfg||setup.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "baipw/__init__.py||baipw/__init__.py"
          ],
          "candidate": [
            "baipw/__init__.py||baipw/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "baipw/__init__.py||baipw/__init__.py": [
          "File: baipw/__init__.py -> baipw/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: __version__ = \"0.3.4\"",
          "",
          "[Added Lines]",
          "1: __version__ = \"0.4b0\"",
          "",
          "---------------"
        ],
        "baipw/response.py||baipw/response.py": [
          "File: baipw/response.py -> baipw/response.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from django.conf import settings",
          "2: from django.http import HttpResponse",
          "3: from django.template.loader import render_to_string",
          "5: DEFAULT_AUTH_TEMPLATE = (",
          "6:     \"<title>Authentication Required</title><h1>Authentication required</h1>\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: from django.utils.cache import add_never_cache_headers",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:         kwargs.setdefault(\"status\", 401)",
          "16:         super().__init__(self.get_response_content(), *args, **kwargs)",
          "17:         self[\"WWW-Authenticate\"] = self.get_www_authenticate_value()",
          "19:     def get_www_authenticate_value(self):",
          "20:         value = \"Basic\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:         add_never_cache_headers(self)",
          "",
          "---------------"
        ],
        "baipw/tests/test_response.py||baipw/tests/test_response.py": [
          "File: baipw/tests/test_response.py -> baipw/tests/test_response.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from django.test import RequestFactory, TestCase, override_settings",
          "3: from baipw.response import DEFAULT_AUTH_TEMPLATE, HttpUnauthorizedResponse",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import django",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:             response.get_response_content().strip(), \"This is a test template.\"",
          "35:         )",
          "36:         self.assertEqual(response[\"Content-Type\"], \"text/html\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:     def test_never_cache_headers_set(self):",
          "40:         response = HttpUnauthorizedResponse(request=self.request)",
          "41:         cache_control_args = [v.strip() for v in response[\"cache-control\"].split(\",\")]",
          "42:         if django.VERSION >= (3, 0):",
          "43:             self.assertCountEqual(",
          "44:                 cache_control_args,",
          "45:                 [\"max-age=0\", \"no-cache\", \"no-store\", \"must-revalidate\", \"private\"],",
          "46:             )",
          "47:         else:",
          "48:             self.assertCountEqual(",
          "49:                 cache_control_args,",
          "50:                 [\"max-age=0\", \"no-cache\", \"no-store\", \"must-revalidate\"],",
          "51:             )",
          "",
          "---------------"
        ],
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     Framework :: Django :: 2.1",
          "27:     Framework :: Django :: 2.2",
          "28:     Framework :: Django :: 3.0",
          "29: keywords =",
          "30:     django",
          "31:     basic",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:     Framework :: Django :: 3.1",
          "",
          "---------------"
        ]
      }
    }
  ]
}