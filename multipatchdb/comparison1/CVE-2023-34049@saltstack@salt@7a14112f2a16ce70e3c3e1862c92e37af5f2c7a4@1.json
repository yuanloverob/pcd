{
  "cve_id": "CVE-2023-34049",
  "cve_desc": "The Salt-SSH pre-flight option copies the script to the target at a predictable path, which allows an attacker to force Salt-SSH to run their script. If an attacker has access to the target VM and knows the path to the pre-flight script before it runs they can ensure Salt-SSH runs their script with the privileges of the user running Salt-SSH.\u00a0Do not make the copy path on the target predictable and ensure we check return codes of the scp command if the copy fails.",
  "repo": "saltstack/salt",
  "patch_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
  "patch_info": {
    "commit_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "files": [
      "changelog/cve-2023-34049.security.md",
      "salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py"
    ],
    "message": "Fix CVE-2023-34049",
    "before_after_code_files": [
      "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
    ]
  },
  "patch_diff": {
    "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
      "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import logging",
      "12: import multiprocessing",
      "13: import os",
      "14: import queue",
      "15: import re",
      "16: import shlex",
      "17: import subprocess",
      "18: import sys",
      "19: import tarfile",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: import pathlib",
      "18: import shutil",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "467:             if target.get(\"passwd\", False) or self.opts[\"ssh_passwd\"]:",
      "468:                 self._key_deploy_run(host, target, False)",
      "469:             return ret",
      "471:             target = self.targets[host]",
      "472:             # permission denied, attempt to auto deploy ssh key",
      "473:             print(",
      "",
      "[Removed Lines]",
      "470:         if ret[host].get(\"stderr\", \"\").count(\"Permission denied\"):",
      "",
      "[Added Lines]",
      "472:         stderr = ret[host].get(\"stderr\", \"\")",
      "473:         # -failed to upload file- is detecting scp errors",
      "474:         # Errors to ignore when Permission denied is in the stderr. For example",
      "475:         # scp can get a permission denied on the target host, but they where",
      "476:         # able to accurate authenticate against the box",
      "477:         ignore_err = [\"failed to upload file\"]",
      "478:         check_err = [x for x in ignore_err if stderr.count(x)]",
      "479:         if \"Permission denied\" in stderr and not check_err:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1007:         \"\"\"",
      "1008:         Run our pre_flight script before running any ssh commands",
      "1009:         \"\"\"",
      "1016:     def check_thin_dir(self):",
      "1017:         \"\"\"",
      "",
      "[Removed Lines]",
      "1010:         script = os.path.join(tempfile.gettempdir(), self.ssh_pre_file)",
      "1012:         self.shell.send(self.ssh_pre_flight, script)",
      "1014:         return self.execute_script(script, script_args=self.ssh_pre_flight_args)",
      "",
      "[Added Lines]",
      "1019:         with tempfile.NamedTemporaryFile() as temp:",
      "1020:             # ensure we use copyfile to not copy the file attributes",
      "1021:             # we want to ensure we use the perms set by the secure",
      "1022:             # NamedTemporaryFile",
      "1023:             try:",
      "1024:                 shutil.copyfile(self.ssh_pre_flight, temp.name)",
      "1025:             except OSError as err:",
      "1026:                 return (",
      "1027:                     \"\",",
      "1028:                     f\"Could not copy pre flight script {self.ssh_pre_flight} to temporary path\",",
      "1029:                     1,",
      "1030:                 )",
      "1031:             target_script = f\".{pathlib.Path(temp.name).name}\"",
      "1032:             log.trace(f\"Copying the pre flight script {self.ssh_pre_file} to target\")",
      "1033:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
      "1034:             if retcode != 0:",
      "1035:                 # We could not copy the script to the target",
      "1036:                 log.error(",
      "1037:                     f\"Could not copy the pre flight script {self.ssh_pre_file} to target\"",
      "1038:                 )",
      "1039:                 return stdout, stderr, retcode",
      "1041:             log.trace(f\"Executing the pre flight script {self.ssh_pre_file} on target\")",
      "1042:             return self.execute_script(",
      "1043:                 target_script, script_args=self.ssh_pre_flight_args",
      "1044:             )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1388:             return self.shell.exec_cmd(cmd_str)",
      "1390:         # Write the shim to a temporary file in the default temp directory",
      "1394:             shim_tmp_file.write(salt.utils.stringutils.to_bytes(cmd_str))",
      "1396:         # Copy shim to target system, under $HOME/.<randomized name>",
      "1400:         if self.winrm:",
      "1401:             target_shim_file = saltwinshell.get_target_shim_file(self, target_shim_file)",
      "1404:         # Remove our shim file",
      "1405:         try:",
      "",
      "[Removed Lines]",
      "1391:         with tempfile.NamedTemporaryFile(",
      "1392:             mode=\"w+b\", prefix=\"shim_\", delete=False",
      "1393:         ) as shim_tmp_file:",
      "1397:         target_shim_file = \".{}.{}\".format(",
      "1398:             binascii.hexlify(os.urandom(6)).decode(\"ascii\"), extension",
      "1399:         )",
      "1402:         self.shell.send(shim_tmp_file.name, target_shim_file, makedirs=True)",
      "",
      "[Added Lines]",
      "1421:         with tempfile.NamedTemporaryFile(mode=\"w+b\", delete=False) as shim_tmp_file:",
      "1425:         target_shim_file = f\".{pathlib.Path(shim_tmp_file.name).name}\"",
      "1429:         stdout, stderr, retcode = self.shell.send(",
      "1430:             shim_tmp_file.name, target_shim_file, makedirs=True",
      "1431:         )",
      "1432:         if retcode != 0:",
      "1433:             log.error(f\"Could not copy the shim script to target\")",
      "1434:             return stdout, stderr, retcode",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
      "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import re",
      "4: from textwrap import dedent",
      "6: import pytest",
      "",
      "[Removed Lines]",
      "1: import os",
      "3: import tempfile",
      "",
      "[Added Lines]",
      "1: import logging",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: from salt.client import ssh",
      "17: from tests.support.mock import MagicMock, call, patch",
      "20: @pytest.fixture",
      "21: def opts(tmp_path):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: log = logging.getLogger(__name__)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "242:         assert ret == cmd_ret",
      "245: def test_execute_script(opts, target, tmp_path):",
      "246:     \"\"\"",
      "247:     test Single.execute_script()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "247:     \"\"\"",
      "248:     test Single.run_ssh_pre_flight function",
      "249:     \"\"\"",
      "250:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "251:     single = ssh.Single(",
      "252:         opts,",
      "253:         opts[\"argv\"],",
      "254:         \"localhost\",",
      "255:         mods={},",
      "256:         fsclient=None,",
      "257:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "258:         mine=False,",
      "260:     )",
      "262:     cmd_ret = (\"Success\", \"\", 0)",
      "263:     mock_flight = MagicMock(return_value=cmd_ret)",
      "264:     mock_cmd = MagicMock(return_value=cmd_ret)",
      "265:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
      "266:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "267:     patch_exec_cmd = patch(",
      "268:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
      "269:     )",
      "270:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "272:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
      "273:         ret = single.run()",
      "274:         mock_cmd.assert_called()",
      "275:         mock_flight.assert_called()",
      "276:         assert ret == cmd_ret",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "273:         ] == mock_cmd.call_args_list",
      "277:     \"\"\"",
      "278:     test Single.shim_cmd()",
      "279:     \"\"\"",
      "",
      "[Removed Lines]",
      "276: def test_shim_cmd(opts, target):",
      "",
      "[Added Lines]",
      "310: def test_shim_cmd(opts, target, tmp_path):",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "295:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "296:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0))",
      "297:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "300:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "301:         assert ret == exp_ret",
      "302:         assert [",
      "305:         ] == mock_cmd.call_args_list",
      "309:     \"\"\"",
      "311:     \"\"\"",
      "313:     single = ssh.Single(",
      "314:         opts,",
      "315:         opts[\"argv\"],",
      "",
      "[Removed Lines]",
      "299:     with patch_cmd, patch_rand, patch_send:",
      "303:             call(\"/bin/sh '.35d96ccac2ff.py'\"),",
      "304:             call(\"rm '.35d96ccac2ff.py'\"),",
      "308: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "310:     test Single.run_ssh_pre_flight",
      "312:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "332:     tmp_file = tmp_path / \"tmp_file\"",
      "333:     mock_tmp = MagicMock()",
      "334:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "335:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "337:     with patch_cmd, patch_tmp, patch_send:",
      "341:             call(f\"/bin/sh '.{tmp_file.name}'\"),",
      "342:             call(f\"rm '.{tmp_file.name}'\"),",
      "346: def test_shim_cmd_copy_fails(opts, target, caplog):",
      "348:     test Single.shim_cmd() when copying the file fails",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "320:         mine=False,",
      "321:         winrm=False,",
      "322:         tty=True,",
      "324:     )",
      "328:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "332:     )",
      "335:         ret = single.run_ssh_pre_flight()",
      "343: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
      "",
      "[Removed Lines]",
      "326:     exp_ret = (\"Success\", \"\", 0)",
      "327:     mock_cmd = MagicMock(return_value=exp_ret)",
      "329:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=exp_ret)",
      "330:     exp_tmp = os.path.join(",
      "331:         tempfile.gettempdir(), os.path.basename(target[\"ssh_pre_flight\"])",
      "334:     with patch_cmd, patch_send:",
      "336:         assert ret == exp_ret",
      "337:         assert [",
      "338:             call(\"/bin/sh '{}'\".format(exp_tmp)),",
      "339:             call(\"rm '{}'\".format(exp_tmp)),",
      "340:         ] == mock_cmd.call_args_list",
      "",
      "[Added Lines]",
      "363:     ret_cmd = (\"Success\", \"\", 0)",
      "364:     mock_cmd = MagicMock(return_value=ret_cmd)",
      "366:     ret_send = (\"\", \"General error in file copy\", 1)",
      "367:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=ret_send)",
      "368:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "370:     with patch_cmd, patch_rand, patch_send:",
      "371:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "372:         assert ret == ret_send",
      "373:         assert \"Could not copy the shim script to target\" in caplog.text",
      "374:         mock_cmd.assert_not_called()",
      "377: def test_run_ssh_pre_flight_no_connect(opts, target, tmp_path, caplog):",
      "378:     \"\"\"",
      "379:     test Single.run_ssh_pre_flight when you",
      "380:     cannot connect to the target",
      "381:     \"\"\"",
      "382:     pre_flight = tmp_path / \"script.sh\"",
      "383:     pre_flight.write_text(\"\")",
      "384:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "385:     single = ssh.Single(",
      "386:         opts,",
      "387:         opts[\"argv\"],",
      "388:         \"localhost\",",
      "389:         mods={},",
      "390:         fsclient=None,",
      "391:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "392:         mine=False,",
      "393:         winrm=False,",
      "394:         tty=True,",
      "396:     )",
      "397:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "398:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "399:     tmp_file = tmp_path / \"tmp_file\"",
      "400:     mock_tmp = MagicMock()",
      "401:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "402:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "403:     ret_send = (",
      "404:         \"\",",
      "405:         \"ssh: connect to host 192.168.1.186 port 22: No route to host\\nscp: Connection closed\\n\",",
      "406:         255,",
      "407:     )",
      "408:     send_mock = MagicMock(return_value=ret_send)",
      "409:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "411:     with caplog.at_level(logging.TRACE):",
      "412:         with patch_send, patch_exec_cmd, patch_tmp:",
      "413:             ret = single.run_ssh_pre_flight()",
      "414:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
      "415:     assert (",
      "416:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
      "417:         in caplog.text",
      "418:     )",
      "419:     assert ret == ret_send",
      "420:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "421:     target_script = send_mock.call_args_list[0][0][1]",
      "422:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "423:     mock_exec_cmd.assert_not_called()",
      "426: def test_run_ssh_pre_flight_permission_denied(opts, target, tmp_path):",
      "427:     \"\"\"",
      "428:     test Single.run_ssh_pre_flight when you",
      "429:     cannot copy script to the target due to",
      "430:     a permission denied error",
      "431:     \"\"\"",
      "432:     pre_flight = tmp_path / \"script.sh\"",
      "433:     pre_flight.write_text(\"\")",
      "434:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "435:     single = ssh.Single(",
      "436:         opts,",
      "437:         opts[\"argv\"],",
      "438:         \"localhost\",",
      "439:         mods={},",
      "440:         fsclient=None,",
      "441:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "442:         mine=False,",
      "443:         winrm=False,",
      "444:         tty=True,",
      "446:     )",
      "447:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "448:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "449:     tmp_file = tmp_path / \"tmp_file\"",
      "450:     mock_tmp = MagicMock()",
      "451:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "452:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "453:     ret_send = (",
      "454:         \"\",",
      "455:         'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "456:         255,",
      "458:     send_mock = MagicMock(return_value=ret_send)",
      "459:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "461:     with patch_send, patch_exec_cmd, patch_tmp:",
      "463:     assert ret == ret_send",
      "464:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "465:     target_script = send_mock.call_args_list[0][0][1]",
      "466:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "467:     mock_exec_cmd.assert_not_called()",
      "470: def test_run_ssh_pre_flight_connect(opts, target, tmp_path, caplog):",
      "471:     \"\"\"",
      "472:     test Single.run_ssh_pre_flight when you",
      "473:     can connect to the target",
      "474:     \"\"\"",
      "475:     pre_flight = tmp_path / \"script.sh\"",
      "476:     pre_flight.write_text(\"\")",
      "477:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "478:     single = ssh.Single(",
      "479:         opts,",
      "480:         opts[\"argv\"],",
      "481:         \"localhost\",",
      "482:         mods={},",
      "483:         fsclient=None,",
      "484:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "485:         mine=False,",
      "486:         winrm=False,",
      "487:         tty=True,",
      "489:     )",
      "490:     ret_exec_cmd = (\"\", \"\", 1)",
      "491:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "492:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "493:     tmp_file = tmp_path / \"tmp_file\"",
      "494:     mock_tmp = MagicMock()",
      "495:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "496:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "497:     ret_send = (",
      "498:         \"\",",
      "499:         \"\\rroot@192.168.1.187's password: \\n\\rpreflight.sh 0%    0 0.0KB/s   --:-- ETA\\rpreflight.sh 100%   20     2.7KB/s   00:00 \\n\",",
      "500:         0,",
      "501:     )",
      "502:     send_mock = MagicMock(return_value=ret_send)",
      "503:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "505:     with caplog.at_level(logging.TRACE):",
      "506:         with patch_send, patch_exec_cmd, patch_tmp:",
      "507:             ret = single.run_ssh_pre_flight()",
      "509:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
      "510:     assert ret == ret_exec_cmd",
      "511:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "512:     target_script = send_mock.call_args_list[0][0][1]",
      "513:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "514:     mock_exec_cmd.assert_called()",
      "517: def test_run_ssh_pre_flight_shutil_fails(opts, target, tmp_path):",
      "518:     \"\"\"",
      "519:     test Single.run_ssh_pre_flight when cannot",
      "520:     copyfile with shutil",
      "521:     \"\"\"",
      "522:     pre_flight = tmp_path / \"script.sh\"",
      "523:     pre_flight.write_text(\"\")",
      "524:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "525:     single = ssh.Single(",
      "526:         opts,",
      "527:         opts[\"argv\"],",
      "528:         \"localhost\",",
      "529:         mods={},",
      "530:         fsclient=None,",
      "531:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "532:         mine=False,",
      "533:         winrm=False,",
      "534:         tty=True,",
      "536:     )",
      "537:     ret_exec_cmd = (\"\", \"\", 1)",
      "538:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "539:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "540:     tmp_file = tmp_path / \"tmp_file\"",
      "541:     mock_tmp = MagicMock()",
      "542:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "543:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "544:     send_mock = MagicMock()",
      "545:     mock_shutil = MagicMock(side_effect=IOError(\"Permission Denied\"))",
      "546:     patch_shutil = patch(\"shutil.copyfile\", mock_shutil)",
      "547:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "549:     with patch_send, patch_exec_cmd, patch_tmp, patch_shutil:",
      "550:         ret = single.run_ssh_pre_flight()",
      "552:     assert ret == (",
      "553:         \"\",",
      "554:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
      "555:         1,",
      "556:     )",
      "557:     mock_exec_cmd.assert_not_called()",
      "558:     send_mock.assert_not_called()",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "434:     and script successfully runs",
      "435:     \"\"\"",
      "436:     opts[\"ssh_run_pre_flight\"] = True",
      "439:     if test_opts[0] is not None:",
      "440:         target[\"ssh_pre_flight_args\"] = test_opts[0]",
      "",
      "[Removed Lines]",
      "437:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "655:     pre_flight_script = tmp_path / \"script.sh\"",
      "656:     pre_flight_script.write_text(\"\")",
      "657:     target[\"ssh_pre_flight\"] = str(pre_flight_script)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "456:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 0))",
      "457:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "458:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "460:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "462:     with patch_os, patch_cmd, patch_exec_cmd, patch_shell_send:",
      "469: @pytest.mark.slow_test",
      "",
      "[Removed Lines]",
      "459:     patch_shell_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=None)",
      "463:         ret = single.run()",
      "464:         assert mock_exec_cmd.mock_calls[0].args[",
      "465:             0",
      "466:         ] == \"/bin/sh '/tmp/script.sh'{}\".format(expected_args)",
      "",
      "[Added Lines]",
      "679:     patch_shell_send = patch(",
      "680:         \"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0)",
      "681:     )",
      "685:         single.run()",
      "686:         script_args = mock_exec_cmd.mock_calls[0].args[0]",
      "687:         assert re.search(r\"\\/bin\\/sh '.[a-z0-9]+\", script_args)",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
      "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:     with patch(\"salt.roster.get_roster_file\", MagicMock(return_value=roster)):",
      "340:         ssh_obj = client._prep_ssh(**ssh_opts)",
      "341:         assert ssh_obj.opts.get(\"extra_filerefs\", None) == \"salt://foobar\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "344: def test_key_deploy_permission_denied_scp(tmp_path, opts):",
      "345:     \"\"\"",
      "346:     test \"key_deploy\" function when",
      "347:     permission denied authentication error",
      "348:     when attempting to use scp to copy file",
      "349:     to target",
      "350:     \"\"\"",
      "351:     host = \"localhost\"",
      "352:     passwd = \"password\"",
      "353:     usr = \"ssh-usr\"",
      "354:     opts[\"ssh_user\"] = usr",
      "355:     opts[\"tgt\"] = host",
      "357:     ssh_ret = {",
      "358:         host: {",
      "359:             \"stdout\": \"\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\",",
      "360:             \"stderr\": \"Permission denied, please try again.\\nPermission denied, please try again.\\nroot@192.168.1.187: Permission denied (publickey,gssapi-keyex,gssapi-with-micimport pudb; pu.dbassword).\\nscp: Connection closed\\n\",",
      "361:             \"retcode\": 255,",
      "362:         }",
      "363:     }",
      "364:     key_run_ret = {",
      "365:         \"localhost\": {",
      "366:             \"jid\": \"20230922155652279959\",",
      "367:             \"return\": \"test\",",
      "368:             \"retcode\": 0,",
      "369:             \"id\": \"test\",",
      "370:             \"fun\": \"cmd.run\",",
      "371:             \"fun_args\": [\"echo test\"],",
      "372:         }",
      "373:     }",
      "374:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "375:     with patch_roster_file:",
      "376:         client = ssh.SSH(opts)",
      "377:     patch_input = patch(\"builtins.input\", side_effect=[\"y\"])",
      "378:     patch_getpass = patch(\"getpass.getpass\", return_value=[\"password\"])",
      "379:     mock_key_run = MagicMock(return_value=key_run_ret)",
      "380:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "381:     with patch_input, patch_getpass, patch_key_run:",
      "382:         ret = client.key_deploy(host, ssh_ret)",
      "383:     assert mock_key_run.call_args_list[0][0] == (",
      "384:         host,",
      "385:         {\"passwd\": [passwd], \"host\": host, \"user\": usr},",
      "386:         True,",
      "387:     )",
      "388:     assert ret == key_run_ret",
      "389:     assert mock_key_run.call_count == 1",
      "392: def test_key_deploy_permission_denied_file_scp(tmp_path, opts):",
      "393:     \"\"\"",
      "394:     test \"key_deploy\" function when permission denied",
      "395:     due to not having access to copy the file to the target",
      "396:     We do not want to deploy the key, because this is not",
      "397:     an authentication to the target error.",
      "398:     \"\"\"",
      "399:     host = \"localhost\"",
      "400:     passwd = \"password\"",
      "401:     usr = \"ssh-usr\"",
      "402:     opts[\"ssh_user\"] = usr",
      "403:     opts[\"tgt\"] = host",
      "405:     mock_key_run = MagicMock(return_value=False)",
      "406:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "408:     ssh_ret = {",
      "409:         \"localhost\": {",
      "410:             \"stdout\": \"\",",
      "411:             \"stderr\": 'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "412:             \"retcode\": 1,",
      "413:         }",
      "414:     }",
      "415:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "416:     with patch_roster_file:",
      "417:         client = ssh.SSH(opts)",
      "418:     ret = client.key_deploy(host, ssh_ret)",
      "419:     assert ret == ssh_ret",
      "420:     assert mock_key_run.call_count == 0",
      "423: def test_key_deploy_no_permission_denied(tmp_path, opts):",
      "424:     \"\"\"",
      "425:     test \"key_deploy\" function when no permission denied",
      "426:     is returned",
      "427:     \"\"\"",
      "428:     host = \"localhost\"",
      "429:     passwd = \"password\"",
      "430:     usr = \"ssh-usr\"",
      "431:     opts[\"ssh_user\"] = usr",
      "432:     opts[\"tgt\"] = host",
      "434:     mock_key_run = MagicMock(return_value=False)",
      "435:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "436:     ssh_ret = {",
      "437:         \"localhost\": {",
      "438:             \"jid\": \"20230922161937998385\",",
      "439:             \"return\": \"test\",",
      "440:             \"retcode\": 0,",
      "441:             \"id\": \"test\",",
      "442:             \"fun\": \"cmd.run\",",
      "443:             \"fun_args\": [\"echo test\"],",
      "444:         }",
      "445:     }",
      "446:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "447:     with patch_roster_file:",
      "448:         client = ssh.SSH(opts)",
      "449:     ret = client.key_deploy(host, ssh_ret)",
      "450:     assert ret == ssh_ret",
      "451:     assert mock_key_run.call_count == 0",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e46e33ab9d0e8c9d3d64629d13bf9e94ef4484cb",
      "candidate_info": {
        "commit_hash": "e46e33ab9d0e8c9d3d64629d13bf9e94ef4484cb",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/e46e33ab9d0e8c9d3d64629d13bf9e94ef4484cb",
        "files": [
          "tests/pytests/unit/fileclient/test_fileclient.py"
        ],
        "message": "Remove unused variable\n\nAdded while resolving conflicts from merge forward\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/unit/fileclient/test_fileclient.py||tests/pytests/unit/fileclient/test_fileclient.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/fileclient/test_fileclient.py||tests/pytests/unit/fileclient/test_fileclient.py": [
          "File: tests/pytests/unit/fileclient/test_fileclient.py -> tests/pytests/unit/fileclient/test_fileclient.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:             \"request_channel_tries\": 1,",
          "117:         }",
          "118:     )",
          "123:     def mock_dumps(*args):",
          "124:         return b\"meh\"",
          "",
          "[Removed Lines]",
          "119:     master_uri = \"tcp://{master_ip}:{master_port}\".format(",
          "120:         master_ip=\"localhost\", master_port=minion_opts[\"master_port\"]",
          "121:     )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "805a8deb74e35dde23b906ecacccba852a707a73",
      "candidate_info": {
        "commit_hash": "805a8deb74e35dde23b906ecacccba852a707a73",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/805a8deb74e35dde23b906ecacccba852a707a73",
        "files": [
          "tests/pytests/unit/client/ssh/test_single.py"
        ],
        "message": "Fix logs in ssh tests",
        "before_after_code_files": [
          "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
          ],
          "candidate": [
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
          "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "410:     with caplog.at_level(logging.TRACE):",
          "411:         with patch_send, patch_exec_cmd, patch_tmp:",
          "412:             ret = single.run_ssh_pre_flight()",
          "418:     assert ret == ret_send",
          "419:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "420:     target_script = send_mock.call_args_list[0][0][1]",
          "",
          "[Removed Lines]",
          "413:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
          "414:     assert (",
          "415:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
          "416:         in caplog.text",
          "417:     )",
          "",
          "[Added Lines]",
          "413:     assert \"Copying the pre flight script\" in caplog.text",
          "414:     assert \"Could not copy the pre flight script to target\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "505:         with patch_send, patch_exec_cmd, patch_tmp:",
          "506:             ret = single.run_ssh_pre_flight()",
          "509:     assert ret == ret_exec_cmd",
          "510:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "511:     target_script = send_mock.call_args_list[0][0][1]",
          "",
          "[Removed Lines]",
          "508:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
          "",
          "[Added Lines]",
          "505:     assert \"Executing the pre flight script on target\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "551:     assert ret == (",
          "552:         \"\",",
          "554:         1,",
          "555:     )",
          "556:     mock_exec_cmd.assert_not_called()",
          "",
          "[Removed Lines]",
          "553:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
          "",
          "[Added Lines]",
          "550:         \"Could not copy pre flight script to temporary path\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd49164eec4eec14e6a62785888755b0be52af30",
      "candidate_info": {
        "commit_hash": "dd49164eec4eec14e6a62785888755b0be52af30",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/dd49164eec4eec14e6a62785888755b0be52af30",
        "files": [
          "pkg/tests/conftest.py"
        ],
        "message": "Avoid problematic `grub-efi-amd64-signed` package on Ubuntu\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "pkg/tests/conftest.py||pkg/tests/conftest.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/tests/conftest.py||pkg/tests/conftest.py": [
          "File: pkg/tests/conftest.py -> pkg/tests/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:     grains,",
          "50:     shell,",
          "51: ):",
          "52:     if grains[\"os_family\"] == \"Debian\":",
          "53:         ret = shell.run(\"apt\", \"update\")",
          "54:         assert ret.returncode == 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     if grains[\"os\"] == \"Ubuntu\" and grains[\"osarch\"] == \"amd64\":",
          "53:         # The grub-efi-amd64-signed package seems to be a problem",
          "54:         # right now when updating the system",
          "55:         env = os.environ.copy()",
          "56:         env[\"DEBIAN_FRONTEND\"] = \"noninteractive\"",
          "57:         ret = shell.run(",
          "58:             \"apt-mark\",",
          "59:             \"hold\",",
          "60:             \"grub-efi-amd64-signed\",",
          "61:             env=env,",
          "62:         )",
          "63:         assert ret.returncode == 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cf8048421ef253fb0fab5246089ad401567b2cc",
      "candidate_info": {
        "commit_hash": "9cf8048421ef253fb0fab5246089ad401567b2cc",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/9cf8048421ef253fb0fab5246089ad401567b2cc",
        "files": [
          "requirements/darwin.txt",
          "requirements/pytest.txt",
          "requirements/static/ci/common.in",
          "requirements/static/ci/darwin.in",
          "requirements/static/ci/freebsd.in",
          "requirements/static/ci/linux.in",
          "requirements/static/ci/pkgtests-windows.in",
          "requirements/static/ci/py3.10/cloud.txt",
          "requirements/static/ci/py3.10/darwin.txt",
          "requirements/static/ci/py3.10/freebsd.txt",
          "requirements/static/ci/py3.10/lint.txt",
          "requirements/static/ci/py3.10/linux.txt",
          "requirements/static/ci/py3.10/pkgtests-windows.txt",
          "requirements/static/ci/py3.10/windows.txt",
          "requirements/static/ci/py3.7/cloud.txt",
          "requirements/static/ci/py3.7/freebsd.txt",
          "requirements/static/ci/py3.7/lint.txt",
          "requirements/static/ci/py3.7/linux.txt",
          "requirements/static/ci/py3.7/windows.txt",
          "requirements/static/ci/py3.8/cloud.txt",
          "requirements/static/ci/py3.8/freebsd.txt",
          "requirements/static/ci/py3.8/lint.txt",
          "requirements/static/ci/py3.8/linux.txt",
          "requirements/static/ci/py3.8/windows.txt",
          "requirements/static/ci/py3.9/cloud.txt",
          "requirements/static/ci/py3.9/darwin.txt",
          "requirements/static/ci/py3.9/freebsd.txt",
          "requirements/static/ci/py3.9/lint.txt",
          "requirements/static/ci/py3.9/linux.txt",
          "requirements/static/ci/py3.9/windows.txt",
          "requirements/static/ci/windows.in",
          "requirements/static/pkg/freebsd.in",
          "requirements/static/pkg/linux.in",
          "requirements/static/pkg/py3.10/darwin.txt",
          "requirements/static/pkg/py3.10/windows.txt",
          "requirements/static/pkg/py3.7/windows.txt",
          "requirements/static/pkg/py3.8/windows.txt",
          "requirements/static/pkg/py3.9/darwin.txt",
          "requirements/static/pkg/py3.9/windows.txt",
          "requirements/windows.txt"
        ],
        "message": "The 3006.x branch is Python >= 3.7 already. Remove unnecessary `python_version` markers.\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "requirements/static/ci/common.in||requirements/static/ci/common.in",
          "requirements/static/ci/darwin.in||requirements/static/ci/darwin.in",
          "requirements/static/ci/freebsd.in||requirements/static/ci/freebsd.in",
          "requirements/static/ci/linux.in||requirements/static/ci/linux.in",
          "requirements/static/ci/pkgtests-windows.in||requirements/static/ci/pkgtests-windows.in",
          "requirements/static/ci/windows.in||requirements/static/ci/windows.in",
          "requirements/static/pkg/freebsd.in||requirements/static/pkg/freebsd.in",
          "requirements/static/pkg/linux.in||requirements/static/pkg/linux.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "requirements/static/ci/common.in||requirements/static/ci/common.in": [
          "File: requirements/static/ci/common.in -> requirements/static/ci/common.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # to a particular platform, please add it to the corresponding `<platform>.in` file in this directory.",
          "4: azure==4.0.0; sys_platform != 'win32'",
          "5: apache-libcloud>=1.5.0; sys_platform != 'win32'",
          "8: boto>=2.46.0",
          "9: cassandra-driver>=2.0",
          "10: certifi>=2022.12.07",
          "",
          "[Removed Lines]",
          "6: boto3>=1.16.0,<1.17.0; python_version < '3.6'",
          "7: boto3>=1.17.67; python_version >= '3.6'",
          "",
          "[Added Lines]",
          "6: boto3>=1.17.67",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: croniter>=0.3.0,!=0.3.22\"; sys_platform != 'win32'",
          "15: dnspython",
          "16: docker",
          "19: jmespath",
          "20: jsonschema",
          "21: junos-eznc; sys_platform != 'win32' and python_version <= '3.10'",
          "",
          "[Removed Lines]",
          "17: etcd3-py==0.1.6 ; python_version >= '3.6'",
          "18: gitpython>=3.1.30; python_version >= '3.7'",
          "",
          "[Added Lines]",
          "16: etcd3-py==0.1.6",
          "17: gitpython>=3.1.30",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24: keyring==5.7.1",
          "25: kubernetes<4.0",
          "26: libnacl>=1.7.1; sys_platform != 'win32' and sys_platform != 'darwin'",
          "29: # Napalm pulls in pyeapi which does not work on Py3.10",
          "31: paramiko>=2.10.1; sys_platform != 'win32' and sys_platform != 'darwin'",
          "32: passlib[bcrypt]>=1.7.4",
          "33: pynacl>=1.5.0",
          "",
          "[Removed Lines]",
          "27: moto>=1.3.14 ; python_version <= '3.5'",
          "28: moto>=2.0.0 ; python_version >= '3.6'",
          "30: napalm; sys_platform != 'win32' and python_version > '3.6'  and python_version < '3.10'",
          "",
          "[Added Lines]",
          "26: moto>=2.0.0",
          "28: napalm; sys_platform != 'win32' and python_version < '3.10'",
          "",
          "---------------"
        ],
        "requirements/static/ci/darwin.in||requirements/static/ci/darwin.in": [
          "File: requirements/static/ci/darwin.in -> requirements/static/ci/darwin.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # pylxd(or likely ws4py) will cause the test suite to hang at the finish line under runtests.py",
          "4: # pylxd>=2.2.5",
          "5: yamlordereddictloader",
          "7: yamllint",
          "8: mercurial",
          "9: hglib",
          "",
          "[Removed Lines]",
          "6: pygit2>=1.2.0; python_version >= '3.7'",
          "",
          "[Added Lines]",
          "6: pygit2>=1.2.0",
          "",
          "---------------"
        ],
        "requirements/static/ci/freebsd.in||requirements/static/ci/freebsd.in": [
          "File: requirements/static/ci/freebsd.in -> requirements/static/ci/freebsd.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # FreeBSD static CI requirements",
          "3: yamllint",
          "4: mercurial",
          "5: hglib",
          "",
          "[Removed Lines]",
          "2: pygit2==1.8.0; python_version >= '3.7'",
          "",
          "[Added Lines]",
          "2: pygit2==1.8.0",
          "",
          "---------------"
        ],
        "requirements/static/ci/linux.in||requirements/static/ci/linux.in": [
          "File: requirements/static/ci/linux.in -> requirements/static/ci/linux.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: pygit2<1.1.0; python_version <= '3.8'",
          "4: pygit2>=1.4.0; python_version > '3.8'",
          "5: pygit2==1.9.1; python_version >= '3.10'",
          "8: ansible>=4.4.0; python_version < '3.9'",
          "9: ansible>=7.0.0; python_version >= '3.9'",
          "10: twilio",
          "13: yamllint",
          "14: mercurial",
          "15: hglib",
          "",
          "[Removed Lines]",
          "6: pymysql==0.9.3; python_version <= '3.5'",
          "7: pymysql>=1.0.2; python_version > '3.5'",
          "11: python-telegram-bot==12.8; python_version <= '3.5'",
          "12: python-telegram-bot>=13.7; python_version > '3.5'",
          "",
          "[Added Lines]",
          "6: pymysql>=1.0.2",
          "10: python-telegram-bot>=13.7",
          "",
          "---------------"
        ],
        "requirements/static/ci/pkgtests-windows.in||requirements/static/ci/pkgtests-windows.in": [
          "File: requirements/static/ci/pkgtests-windows.in -> requirements/static/ci/pkgtests-windows.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: cherrypy",
          "2: pytest-salt-factories==1.0.0rc17",
          "5: wmi==1.5.1; sys_platform == 'win32'",
          "",
          "[Removed Lines]",
          "3: pythonnet==3.0.1; python_version >= '3.7'",
          "4: pythonnet==2.5.2; python_version < '3.7'",
          "",
          "[Added Lines]",
          "3: pythonnet==3.0.1",
          "",
          "---------------"
        ],
        "requirements/static/ci/windows.in||requirements/static/ci/windows.in": [
          "File: requirements/static/ci/windows.in -> requirements/static/ci/windows.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # This is a compilation of requirements installed on salt-jenkins git.salt state run",
          "2: dmidecode",
          "3: patch",
          "5: sed",
          "6: pywinrm>=0.4.1",
          "7: yamllint",
          "",
          "[Removed Lines]",
          "4: pygit2>=1.2.0; python_version >= '3.7'",
          "",
          "[Added Lines]",
          "4: pygit2>=1.2.0",
          "",
          "---------------"
        ],
        "requirements/static/pkg/freebsd.in||requirements/static/pkg/freebsd.in": [
          "File: requirements/static/pkg/freebsd.in -> requirements/static/pkg/freebsd.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # Any non hard dependencies of Salt for FreeBSD can go here",
          "3: cherrypy",
          "4: cryptography>=41.0.3",
          "6: pycparser>=2.21; python_version >= '3.9'",
          "7: pyopenssl>=23.2.0",
          "8: python-dateutil>=2.8.0",
          "",
          "[Removed Lines]",
          "5: backports.ssl_match_hostname>=3.7.0.1; python_version < '3.7'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "requirements/static/pkg/linux.in||requirements/static/pkg/linux.in": [
          "File: requirements/static/pkg/linux.in -> requirements/static/pkg/linux.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # This file only exists to trigger the right static compiled requirements destination.",
          "2: # Any non hard dependencies of Salt for linux can go here",
          "3: cherrypy",
          "5: pycparser>=2.21; python_version >= '3.9'",
          "6: pyopenssl>=23.2.0",
          "7: python-dateutil>=2.8.0",
          "",
          "[Removed Lines]",
          "4: backports.ssl_match_hostname>=3.7.0.1; python_version < '3.7'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88365fb69e725eb6e050208ecafbdf494d56680f",
      "candidate_info": {
        "commit_hash": "88365fb69e725eb6e050208ecafbdf494d56680f",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/88365fb69e725eb6e050208ecafbdf494d56680f",
        "files": [
          "requirements/static/ci/py3.10/cloud.txt",
          "requirements/static/ci/py3.10/darwin.txt",
          "requirements/static/ci/py3.10/freebsd.txt",
          "requirements/static/ci/py3.10/lint.txt",
          "requirements/static/ci/py3.10/linux.txt",
          "requirements/static/ci/py3.10/pkgtests.txt",
          "requirements/static/ci/py3.10/windows.txt",
          "requirements/static/ci/py3.7/cloud.txt",
          "requirements/static/ci/py3.7/freebsd.txt",
          "requirements/static/ci/py3.7/lint.txt",
          "requirements/static/ci/py3.7/linux.txt",
          "requirements/static/ci/py3.7/windows.txt",
          "requirements/static/ci/py3.8/cloud.txt",
          "requirements/static/ci/py3.8/freebsd.txt",
          "requirements/static/ci/py3.8/lint.txt",
          "requirements/static/ci/py3.8/linux.txt",
          "requirements/static/ci/py3.8/windows.txt",
          "requirements/static/ci/py3.9/cloud.txt",
          "requirements/static/ci/py3.9/darwin.txt",
          "requirements/static/ci/py3.9/freebsd.txt",
          "requirements/static/ci/py3.9/lint.txt",
          "requirements/static/ci/py3.9/linux.txt",
          "requirements/static/ci/py3.9/windows.txt",
          "tests/filename_map.yml",
          "tests/pytests/integration/modules/test_virt.py"
        ],
        "message": "Set `cgroupns` to `host` to fix the libvirt migration tests.\n\nThis needs a newer version of the python docker package.\n\nThe breakage was due to updating the docker container used. - https://github.com/saltstack/salt-ci-containers/pull/42\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/integration/modules/test_virt.py||tests/pytests/integration/modules/test_virt.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/integration/modules/test_virt.py||tests/pytests/integration/modules/test_virt.py": [
          "File: tests/pytests/integration/modules/test_virt.py -> tests/pytests/integration/modules/test_virt.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:             \"extra_hosts\": {",
          "67:                 virt_minion_0_id: \"127.0.0.1\",",
          "68:                 virt_minion_1_id: \"127.0.0.1\",",
          "70:         },",
          "71:         pull_before_start=True,",
          "72:         skip_on_pull_failure=True,",
          "",
          "[Removed Lines]",
          "69:             }",
          "",
          "[Added Lines]",
          "69:             },",
          "70:             \"cgroupns\": \"host\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:             \"extra_hosts\": {",
          "104:                 virt_minion_0_id: \"127.0.0.1\",",
          "105:                 virt_minion_1_id: \"127.0.0.1\",",
          "107:         },",
          "108:         pull_before_start=True,",
          "109:         skip_on_pull_failure=True,",
          "",
          "[Removed Lines]",
          "106:             }",
          "",
          "[Added Lines]",
          "107:             },",
          "108:             \"cgroupns\": \"host\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}