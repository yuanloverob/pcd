{
  "cve_id": "CVE-2022-3029",
  "cve_desc": "In NLnet Labs Routinator 0.9.0 up to and including 0.11.2, due to a mistake in error handling, data in RRDP snapshot and delta files that isn\u2019t correctly base 64 encoded is treated as a fatal error and causes Routinator to exit. Worst case impact of this vulnerability is denial of service for the RPKI data that Routinator provides to routers. This may stop your network from validating route origins based on RPKI data. This vulnerability does not allow an attacker to manipulate RPKI data.",
  "repo": "NLnetLabs/routinator",
  "patch_hash": "c2e2476f28f09ea5ffb22d172d84fb4f8384d496",
  "patch_info": {
    "commit_hash": "c2e2476f28f09ea5ffb22d172d84fb4f8384d496",
    "repo": "NLnetLabs/routinator",
    "commit_url": "https://github.com/NLnetLabs/routinator/pull/781/commits/c2e2476f28f09ea5ffb22d172d84fb4f8384d496",
    "files": [
      "src/collector/rrdp.rs"
    ],
    "message": "Do not exit on malformed RRDP Base 64 data.",
    "before_after_code_files": [
      "src/collector/rrdp.rs||src/collector/rrdp.rs"
    ]
  },
  "patch_diff": {
    "src/collector/rrdp.rs||src/collector/rrdp.rs": [
      "File: src/collector/rrdp.rs -> src/collector/rrdp.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "987:         data: &mut rrdp::ObjectReader,",
      "988:     ) -> Result<(), Self::Err> {",
      "989:         let path = self.repository.tmp_object_path(&uri);",
      "997:             }",
      "1002:     }",
      "1003: }",
      "",
      "[Removed Lines]",
      "990:         let mut data = MaxSizeRead::new(data, self.collector.max_object_size);",
      "991:         if RepositoryObject::create(&path, &mut data).is_err() {",
      "992:             if data.was_triggered() {",
      "993:                 Err(SnapshotError::LargeObject(uri))",
      "994:             }",
      "995:             else {",
      "996:                 Err(SnapshotError::Fatal)",
      "998:         }",
      "999:         else {",
      "1000:             Ok(())",
      "1001:         }",
      "",
      "[Added Lines]",
      "990:         let mut data = MaxSizeRead::new(",
      "991:             data, &uri, self.collector.max_object_size",
      "992:         );",
      "993:         RepositoryObject::create(&path, &mut data).map_err(|io_err| {",
      "994:             match data.take_err() {",
      "995:                 Some(data_err) => data_err.into(),",
      "996:                 None => {",
      "997:                     error!(\"{}\", io_err);",
      "998:                     SnapshotError::Fatal",
      "999:                 }",
      "1001:         })",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1228:         data: &mut rrdp::ObjectReader<'_>",
      "1229:     ) -> Result<(), Self::Err> {",
      "1230:         self.check_hash(&uri, hash)?;",
      "1232:         let path = self.repository.tmp_object_path(&uri);",
      "1239:             }",
      "1241:         if !self.publish.insert(uri.clone()) {",
      "1242:             return Err(DeltaError::ObjectRepeated { uri })",
      "1243:         }",
      "",
      "[Removed Lines]",
      "1231:         let mut data = MaxSizeRead::new(data, self.collector.max_object_size);",
      "1233:         if RepositoryObject::create(&path, &mut data).is_err() {",
      "1234:             if data.was_triggered() {",
      "1235:                 return Err(DeltaError::LargeObject(uri))",
      "1236:             }",
      "1237:             else {",
      "1238:                 return Err(DeltaError::Fatal)",
      "1240:         }",
      "",
      "[Added Lines]",
      "1231:         let mut data = MaxSizeRead::new(",
      "1232:             data, &uri, self.collector.max_object_size",
      "1233:         );",
      "1235:         RepositoryObject::create(&path, &mut data).map_err(|io_err| {",
      "1236:             match data.take_err() {",
      "1237:                 Some(data_err) => data_err.into(),",
      "1238:                 None => {",
      "1239:                     error!(\"{}\", io_err);",
      "1240:                     DeltaError::Fatal",
      "1241:                 }",
      "1243:         })?;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1601:         let start = if etag.starts_with(b\"W/\\\"\") {",
      "1602:             3",
      "1603:         }",
      "1605:             1",
      "1606:         }",
      "1607:         else {",
      "",
      "[Removed Lines]",
      "1604:         else if etag.get(0) == Some(&b'\"') {",
      "",
      "[Added Lines]",
      "1607:         else if etag.first() == Some(&b'\"') {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1950:     }",
      "1953:     pub fn create(",
      "1954:         path: &Path, data: &mut impl io::Read",
      "1956:         if let Some(parent) = path.parent() {",
      "1957:             if let Err(err) = fs::create_dir_all(parent) {",
      "1963:             }",
      "1964:         }",
      "1965:         let mut target = match File::create(&path) {",
      "1966:             Ok(target) => target,",
      "1967:             Err(err) => {",
      "1972:             }",
      "1973:         };",
      "1974:         Self::_create(data, &mut target).map_err(|err| {",
      "1979:         })",
      "1980:     }",
      "",
      "[Removed Lines]",
      "1955:     ) -> Result<(), Failed> {",
      "1958:                 error!(",
      "1959:                     \"Fatal: failed to create directory {}: {}.\",",
      "1960:                     parent.display(), err",
      "1961:                 );",
      "1962:                 return Err(Failed)",
      "1968:                 error!(",
      "1969:                     \"Fatal: failed to open file {}: {}\", path.display(), err",
      "1970:                 );",
      "1971:                 return Err(Failed)",
      "1975:             error!(",
      "1976:                 \"Fatal: failed to write file {}: {}\", path.display(), err",
      "1977:             );",
      "1978:             Failed",
      "",
      "[Added Lines]",
      "1965:     ) -> Result<(), io::Error> {",
      "1968:                 return Err(io::Error::new(",
      "1969:                     io::ErrorKind::Other,",
      "1970:                     format!(",
      "1971:                         \"Fatal: failed to create directory {}: {}.\",",
      "1972:                         parent.display(), err",
      "1973:                     )",
      "1974:                 ))",
      "1980:                 return Err(io::Error::new(",
      "1981:                     io::ErrorKind::Other,",
      "1982:                     format!(",
      "1983:                         \"Fatal: failed to open file {}: {}\",",
      "1984:                         path.display(), err",
      "1985:                     )",
      "1986:                 ))",
      "1990:             io::Error::new(",
      "1991:                 io::ErrorKind::Other,",
      "1992:                 format!(",
      "1993:                     \"Fatal: failed to write file {}: {}\", path.display(), err",
      "1994:                 )",
      "1995:             )",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2111:     reader: R,",
      "2116:     left: Option<u64>,",
      "2120: }",
      "2125:     }",
      "2129:     }",
      "2130: }",
      "2133:     fn read(&mut self, buf: &mut [u8]) -> Result<usize, io::Error> {",
      "2135:         if let Some(left) = self.left {",
      "2136:             let res64 = match u64::try_from(res) {",
      "2137:                 Ok(res) => res,",
      "",
      "[Removed Lines]",
      "2109: struct MaxSizeRead<R> {",
      "2119:     triggered: bool,",
      "2122: impl<R> MaxSizeRead<R> {",
      "2123:     pub fn new(reader: R, max_size: Option<u64>) -> Self {",
      "2124:         MaxSizeRead { reader, left: max_size, triggered: false }",
      "2127:     pub fn was_triggered(&self) -> bool {",
      "2128:         self.triggered",
      "2132: impl<R: io::Read> io::Read for MaxSizeRead<R> {",
      "2134:         let res = self.reader.read(buf)?;",
      "",
      "[Added Lines]",
      "2126: struct MaxSizeRead<'a, R> {",
      "2131:     uri: &'a uri::Rsync,",
      "2139:     err: Option<MaxSizeReadError>,",
      "2142: impl<'a, R> MaxSizeRead<'a, R> {",
      "2143:     pub fn new(reader: R, uri: &'a uri::Rsync, max_size: Option<u64>) -> Self {",
      "2144:         MaxSizeRead { reader, uri, left: max_size, err: None }",
      "2147:     pub fn take_err(&mut self) -> Option<MaxSizeReadError> {",
      "2148:         self.err.take()",
      "2152: impl<'a, R: io::Read> io::Read for MaxSizeRead<'a, R> {",
      "2154:         let res = match self.reader.read(buf) {",
      "2155:             Ok(res) => res,",
      "2156:             Err(err) => {",
      "2157:                 self.err = Some(MaxSizeReadError::Read(err));",
      "2158:                 return Err(io::Error::new(",
      "2159:                     io::ErrorKind::Other, \"reading data failed\",",
      "2160:                 ))",
      "2161:             }",
      "2162:         };",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2141:                     self.left = Some(0);",
      "2143:                     return Err(io::Error::new(",
      "2144:                         io::ErrorKind::Other, \"size limit exceeded\"",
      "2145:                     ))",
      "",
      "[Removed Lines]",
      "2142:                     self.triggered = true;",
      "",
      "[Added Lines]",
      "2170:                     self.err = Some(",
      "2171:                         MaxSizeReadError::LargeObject(self.uri.clone())",
      "2172:                     );",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2147:             };",
      "2148:             if res64 > left {",
      "2149:                 self.left = Some(0);",
      "2151:                 Err(io::Error::new(",
      "2152:                     io::ErrorKind::Other, \"size limit exceeded\")",
      "2153:                 )",
      "",
      "[Removed Lines]",
      "2150:                 self.triggered = true;",
      "",
      "[Added Lines]",
      "2180:                 self.err = Some(",
      "2181:                     MaxSizeReadError::LargeObject(self.uri.clone())",
      "2182:                 );",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2295: #[derive(Debug)]",
      "2296: enum MaxSizeReadError {",
      "2297:     LargeObject(uri::Rsync),",
      "2298:     Read(io::Error),",
      "2299: }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2295:     }",
      "2296: }",
      "2298: impl From<Failed> for SnapshotError {",
      "2299:     fn from(_: Failed) -> Self {",
      "2300:         SnapshotError::Fatal",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2344: impl From<MaxSizeReadError> for SnapshotError {",
      "2345:     fn from(err: MaxSizeReadError) -> Self {",
      "2346:         match err {",
      "2347:             MaxSizeReadError::LargeObject(uri) => {",
      "2348:                 SnapshotError::LargeObject(uri)",
      "2349:             }",
      "2350:             MaxSizeReadError::Read(err) => {",
      "2351:                 SnapshotError::Rrdp(err.into())",
      "2352:             }",
      "2353:         }",
      "2354:     }",
      "2355: }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2390:     }",
      "2391: }",
      "2393: impl From<Failed> for DeltaError {",
      "2394:     fn from(_: Failed) -> Self {",
      "2395:         DeltaError::Fatal",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2452: impl From<MaxSizeReadError> for DeltaError {",
      "2453:     fn from(err: MaxSizeReadError) -> Self {",
      "2454:         match err {",
      "2455:             MaxSizeReadError::LargeObject(uri) => {",
      "2456:                 DeltaError::LargeObject(uri)",
      "2457:             }",
      "2458:             MaxSizeReadError::Read(err) => {",
      "2459:                 DeltaError::Rrdp(err.into())",
      "2460:             }",
      "2461:         }",
      "2462:     }",
      "2463: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "13f5cc6a6b48b6afdbe722638b407c4d8b4fb317",
      "candidate_info": {
        "commit_hash": "13f5cc6a6b48b6afdbe722638b407c4d8b4fb317",
        "repo": "NLnetLabs/routinator",
        "commit_url": "https://github.com/NLnetLabs/routinator/commit/13f5cc6a6b48b6afdbe722638b407c4d8b4fb317",
        "files": [
          ".github/workflows/ci.yml",
          "src/collector/rrdp.rs"
        ],
        "message": "Do not exit on malformed RRDP Base 64 data. (#781)\n\nThis commit fixes an oversight in error handling in the RRDP collector that\ncauses Routinator to exit if it encountered malformed Base 64 in RRDP\nsnapshot and delta files.\n\nIt does this by re-appropriating the existing exception in MaxSizeRead to\nnot exit when data was too large and extending it to all other read errors\nhappening. This is fine because the encoded data is currently collected into\na vec before any of this happens, so reading cannot fail other than from\nmalformed Base 64 data.\n\nThis commit only does the minimal changes to be applied to the 0.11 series.\nBefore applying to the main branch, MaxSizeRead should probably be given a\nbetter name.\n\nThis commit can be tested by using the TAL currently available at\nhttps://routinator.do.nlnetlabs.nl/test/rrdp/ta.tal.\n\nThis issue fixed by this commit has been assigned CVE-2022-3029.",
        "before_after_code_files": [
          "src/collector/rrdp.rs||src/collector/rrdp.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NLnetLabs/routinator/pull/781"
        ],
        "olp_code_files": {
          "patch": [
            "src/collector/rrdp.rs||src/collector/rrdp.rs"
          ],
          "candidate": [
            "src/collector/rrdp.rs||src/collector/rrdp.rs"
          ]
        }
      },
      "candidate_diff": {
        "src/collector/rrdp.rs||src/collector/rrdp.rs": [
          "File: src/collector/rrdp.rs -> src/collector/rrdp.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "987:         data: &mut rrdp::ObjectReader,",
          "988:     ) -> Result<(), Self::Err> {",
          "989:         let path = self.repository.tmp_object_path(&uri);",
          "997:             }",
          "1002:     }",
          "1003: }",
          "",
          "[Removed Lines]",
          "990:         let mut data = MaxSizeRead::new(data, self.collector.max_object_size);",
          "991:         if RepositoryObject::create(&path, &mut data).is_err() {",
          "992:             if data.was_triggered() {",
          "993:                 Err(SnapshotError::LargeObject(uri))",
          "994:             }",
          "995:             else {",
          "996:                 Err(SnapshotError::Fatal)",
          "998:         }",
          "999:         else {",
          "1000:             Ok(())",
          "1001:         }",
          "",
          "[Added Lines]",
          "990:         let mut data = MaxSizeRead::new(",
          "991:             data, &uri, self.collector.max_object_size",
          "992:         );",
          "993:         RepositoryObject::create(&path, &mut data).map_err(|io_err| {",
          "994:             match data.take_err() {",
          "995:                 Some(data_err) => data_err.into(),",
          "996:                 None => {",
          "997:                     error!(\"{}\", io_err);",
          "998:                     SnapshotError::Fatal",
          "999:                 }",
          "1001:         })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1228:         data: &mut rrdp::ObjectReader<'_>",
          "1229:     ) -> Result<(), Self::Err> {",
          "1230:         self.check_hash(&uri, hash)?;",
          "1232:         let path = self.repository.tmp_object_path(&uri);",
          "1239:             }",
          "1241:         if !self.publish.insert(uri.clone()) {",
          "1242:             return Err(DeltaError::ObjectRepeated { uri })",
          "1243:         }",
          "",
          "[Removed Lines]",
          "1231:         let mut data = MaxSizeRead::new(data, self.collector.max_object_size);",
          "1233:         if RepositoryObject::create(&path, &mut data).is_err() {",
          "1234:             if data.was_triggered() {",
          "1235:                 return Err(DeltaError::LargeObject(uri))",
          "1236:             }",
          "1237:             else {",
          "1238:                 return Err(DeltaError::Fatal)",
          "1240:         }",
          "",
          "[Added Lines]",
          "1231:         let mut data = MaxSizeRead::new(",
          "1232:             data, &uri, self.collector.max_object_size",
          "1233:         );",
          "1235:         RepositoryObject::create(&path, &mut data).map_err(|io_err| {",
          "1236:             match data.take_err() {",
          "1237:                 Some(data_err) => data_err.into(),",
          "1238:                 None => {",
          "1239:                     error!(\"{}\", io_err);",
          "1240:                     DeltaError::Fatal",
          "1241:                 }",
          "1243:         })?;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1601:         let start = if etag.starts_with(b\"W/\\\"\") {",
          "1602:             3",
          "1603:         }",
          "1605:             1",
          "1606:         }",
          "1607:         else {",
          "",
          "[Removed Lines]",
          "1604:         else if etag.get(0) == Some(&b'\"') {",
          "",
          "[Added Lines]",
          "1607:         else if etag.first() == Some(&b'\"') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1950:     }",
          "1953:     pub fn create(",
          "1954:         path: &Path, data: &mut impl io::Read",
          "1956:         if let Some(parent) = path.parent() {",
          "1957:             if let Err(err) = fs::create_dir_all(parent) {",
          "1963:             }",
          "1964:         }",
          "1965:         let mut target = match File::create(&path) {",
          "1966:             Ok(target) => target,",
          "1967:             Err(err) => {",
          "1972:             }",
          "1973:         };",
          "1974:         Self::_create(data, &mut target).map_err(|err| {",
          "1979:         })",
          "1980:     }",
          "",
          "[Removed Lines]",
          "1955:     ) -> Result<(), Failed> {",
          "1958:                 error!(",
          "1959:                     \"Fatal: failed to create directory {}: {}.\",",
          "1960:                     parent.display(), err",
          "1961:                 );",
          "1962:                 return Err(Failed)",
          "1968:                 error!(",
          "1969:                     \"Fatal: failed to open file {}: {}\", path.display(), err",
          "1970:                 );",
          "1971:                 return Err(Failed)",
          "1975:             error!(",
          "1976:                 \"Fatal: failed to write file {}: {}\", path.display(), err",
          "1977:             );",
          "1978:             Failed",
          "",
          "[Added Lines]",
          "1965:     ) -> Result<(), io::Error> {",
          "1968:                 return Err(io::Error::new(",
          "1969:                     io::ErrorKind::Other,",
          "1970:                     format!(",
          "1971:                         \"Fatal: failed to create directory {}: {}.\",",
          "1972:                         parent.display(), err",
          "1973:                     )",
          "1974:                 ))",
          "1980:                 return Err(io::Error::new(",
          "1981:                     io::ErrorKind::Other,",
          "1982:                     format!(",
          "1983:                         \"Fatal: failed to open file {}: {}\",",
          "1984:                         path.display(), err",
          "1985:                     )",
          "1986:                 ))",
          "1990:             io::Error::new(",
          "1991:                 io::ErrorKind::Other,",
          "1992:                 format!(",
          "1993:                     \"Fatal: failed to write file {}: {}\", path.display(), err",
          "1994:                 )",
          "1995:             )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2111:     reader: R,",
          "2116:     left: Option<u64>,",
          "2120: }",
          "2125:     }",
          "2129:     }",
          "2130: }",
          "2133:     fn read(&mut self, buf: &mut [u8]) -> Result<usize, io::Error> {",
          "2135:         if let Some(left) = self.left {",
          "2136:             let res64 = match u64::try_from(res) {",
          "2137:                 Ok(res) => res,",
          "",
          "[Removed Lines]",
          "2109: struct MaxSizeRead<R> {",
          "2119:     triggered: bool,",
          "2122: impl<R> MaxSizeRead<R> {",
          "2123:     pub fn new(reader: R, max_size: Option<u64>) -> Self {",
          "2124:         MaxSizeRead { reader, left: max_size, triggered: false }",
          "2127:     pub fn was_triggered(&self) -> bool {",
          "2128:         self.triggered",
          "2132: impl<R: io::Read> io::Read for MaxSizeRead<R> {",
          "2134:         let res = self.reader.read(buf)?;",
          "",
          "[Added Lines]",
          "2126: struct MaxSizeRead<'a, R> {",
          "2131:     uri: &'a uri::Rsync,",
          "2139:     err: Option<MaxSizeReadError>,",
          "2142: impl<'a, R> MaxSizeRead<'a, R> {",
          "2143:     pub fn new(reader: R, uri: &'a uri::Rsync, max_size: Option<u64>) -> Self {",
          "2144:         MaxSizeRead { reader, uri, left: max_size, err: None }",
          "2147:     pub fn take_err(&mut self) -> Option<MaxSizeReadError> {",
          "2148:         self.err.take()",
          "2152: impl<'a, R: io::Read> io::Read for MaxSizeRead<'a, R> {",
          "2154:         let res = match self.reader.read(buf) {",
          "2155:             Ok(res) => res,",
          "2156:             Err(err) => {",
          "2157:                 self.err = Some(MaxSizeReadError::Read(err));",
          "2158:                 return Err(io::Error::new(",
          "2159:                     io::ErrorKind::Other, \"reading data failed\",",
          "2160:                 ))",
          "2161:             }",
          "2162:         };",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2141:                     self.left = Some(0);",
          "2143:                     return Err(io::Error::new(",
          "2144:                         io::ErrorKind::Other, \"size limit exceeded\"",
          "2145:                     ))",
          "",
          "[Removed Lines]",
          "2142:                     self.triggered = true;",
          "",
          "[Added Lines]",
          "2170:                     self.err = Some(",
          "2171:                         MaxSizeReadError::LargeObject(self.uri.clone())",
          "2172:                     );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2147:             };",
          "2148:             if res64 > left {",
          "2149:                 self.left = Some(0);",
          "2151:                 Err(io::Error::new(",
          "2152:                     io::ErrorKind::Other, \"size limit exceeded\")",
          "2153:                 )",
          "",
          "[Removed Lines]",
          "2150:                 self.triggered = true;",
          "",
          "[Added Lines]",
          "2180:                 self.err = Some(",
          "2181:                     MaxSizeReadError::LargeObject(self.uri.clone())",
          "2182:                 );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2295: #[derive(Debug)]",
          "2296: enum MaxSizeReadError {",
          "2297:     LargeObject(uri::Rsync),",
          "2298:     Read(io::Error),",
          "2299: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2295:     }",
          "2296: }",
          "2298: impl From<Failed> for SnapshotError {",
          "2299:     fn from(_: Failed) -> Self {",
          "2300:         SnapshotError::Fatal",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2344: impl From<MaxSizeReadError> for SnapshotError {",
          "2345:     fn from(err: MaxSizeReadError) -> Self {",
          "2346:         match err {",
          "2347:             MaxSizeReadError::LargeObject(uri) => {",
          "2348:                 SnapshotError::LargeObject(uri)",
          "2349:             }",
          "2350:             MaxSizeReadError::Read(err) => {",
          "2351:                 SnapshotError::Rrdp(err.into())",
          "2352:             }",
          "2353:         }",
          "2354:     }",
          "2355: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2390:     }",
          "2391: }",
          "2393: impl From<Failed> for DeltaError {",
          "2394:     fn from(_: Failed) -> Self {",
          "2395:         DeltaError::Fatal",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2452: impl From<MaxSizeReadError> for DeltaError {",
          "2453:     fn from(err: MaxSizeReadError) -> Self {",
          "2454:         match err {",
          "2455:             MaxSizeReadError::LargeObject(uri) => {",
          "2456:                 DeltaError::LargeObject(uri)",
          "2457:             }",
          "2458:             MaxSizeReadError::Read(err) => {",
          "2459:                 DeltaError::Rrdp(err.into())",
          "2460:             }",
          "2461:         }",
          "2462:     }",
          "2463: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}