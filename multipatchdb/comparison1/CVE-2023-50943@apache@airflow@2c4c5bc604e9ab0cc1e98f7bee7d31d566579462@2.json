{
  "cve_id": "CVE-2023-50943",
  "cve_desc": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows a potential attacker to poison the XCom data by bypassing the protection of \"enable_xcom_pickling=False\" configuration setting resulting in poisoned data after XCom deserialization. This vulnerability is considered low since it requires a DAG author to exploit it. Users are recommended to upgrade to version 2.8.1 or later, which fixes this issue.",
  "repo": "apache/airflow",
  "patch_hash": "2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
  "patch_info": {
    "commit_hash": "2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/2c4c5bc604e9ab0cc1e98f7bee7d31d566579462",
    "files": [
      "airflow/models/xcom.py",
      "tests/api_connexion/schemas/test_xcom_schema.py",
      "tests/models/test_xcom.py"
    ],
    "message": "Stop deserializing pickle when enable_xcom_pickling is False (#36255)\n\n* Stop deserializing pickle when enable_xcom_pickling is False\n\n* Fix unit tests\n\n(cherry picked from commit 63e97abec5d56bc62a293c93f5227f364561e51c)",
    "before_after_code_files": [
      "airflow/models/xcom.py||airflow/models/xcom.py",
      "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py",
      "tests/models/test_xcom.py||tests/models/test_xcom.py"
    ]
  },
  "patch_diff": {
    "airflow/models/xcom.py||airflow/models/xcom.py": [
      "File: airflow/models/xcom.py -> airflow/models/xcom.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "685:             except pickle.UnpicklingError:",
      "686:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "687:         else:",
      "693:     @staticmethod",
      "694:     def deserialize_value(result: XCom) -> Any:",
      "",
      "[Removed Lines]",
      "688:             try:",
      "689:                 return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "690:             except (json.JSONDecodeError, UnicodeDecodeError):",
      "691:                 return pickle.loads(result.value)",
      "",
      "[Added Lines]",
      "688:             # Since xcom_pickling is disabled, we should only try to deserialize with JSON",
      "689:             return json.loads(result.value.decode(\"UTF-8\"), cls=XComDecoder, object_hook=object_hook)",
      "",
      "---------------"
    ],
    "tests/api_connexion/schemas/test_xcom_schema.py||tests/api_connexion/schemas/test_xcom_schema.py": [
      "File: tests/api_connexion/schemas/test_xcom_schema.py -> tests/api_connexion/schemas/test_xcom_schema.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: from airflow.models import DagRun, XCom",
      "31: from airflow.utils.dates import parse_execution_date",
      "32: from airflow.utils.session import create_session",
      "34: pytestmark = pytest.mark.db_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: from tests.test_utils.config import conf_vars",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "188:     default_time = \"2016-04-02T21:00:00+00:00\"",
      "189:     default_time_parsed = parse_execution_date(default_time)",
      "191:     def test_serialize(self, create_xcom, session):",
      "192:         create_xcom(",
      "193:             dag_id=\"test_dag\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "192:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "208:             \"map_index\": -1,",
      "209:         }",
      "211:     def test_deserialize(self):",
      "212:         xcom_dump = {",
      "213:             \"key\": \"test_key\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "213:     @conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"})",
      "",
      "---------------"
    ],
    "tests/models/test_xcom.py||tests/models/test_xcom.py": [
      "File: tests/models/test_xcom.py -> tests/models/test_xcom.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "140:             ret_value = XCom.get_value(key=\"xcom_test3\", ti_key=ti_key, session=session)",
      "141:         assert ret_value == {\"key\": \"value\"}",
      "144:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"True\"}):",
      "145:             XCom.set(",
      "146:                 key=\"xcom_test3\",",
      "",
      "[Removed Lines]",
      "143:     def test_xcom_deserialize_with_pickle_to_json_switch(self, task_instance, session):",
      "",
      "[Added Lines]",
      "143:     def test_xcom_deserialize_pickle_when_xcom_pickling_is_disabled(self, task_instance, session):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "151:                 session=session,",
      "152:             )",
      "153:         with conf_vars({(\"core\", \"enable_xcom_pickling\"): \"False\"}):",
      "163:     @conf_vars({(\"core\", \"xcom_enable_pickling\"): \"False\"})",
      "164:     def test_xcom_disable_pickle_type_fail_on_non_json(self, task_instance, session):",
      "",
      "[Removed Lines]",
      "154:             ret_value = XCom.get_one(",
      "155:                 key=\"xcom_test3\",",
      "156:                 dag_id=task_instance.dag_id,",
      "157:                 task_id=task_instance.task_id,",
      "158:                 run_id=task_instance.run_id,",
      "159:                 session=session,",
      "160:             )",
      "161:         assert ret_value == {\"key\": \"value\"}",
      "",
      "[Added Lines]",
      "154:             with pytest.raises(UnicodeDecodeError):",
      "155:                 XCom.get_one(",
      "156:                     key=\"xcom_test3\",",
      "157:                     dag_id=task_instance.dag_id,",
      "158:                     task_id=task_instance.task_id,",
      "159:                     run_id=task_instance.run_id,",
      "160:                     session=session,",
      "161:                 )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5422a3612b03fe66b606e9cbc66480c3c18543a7",
      "candidate_info": {
        "commit_hash": "5422a3612b03fe66b606e9cbc66480c3c18543a7",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/5422a3612b03fe66b606e9cbc66480c3c18543a7",
        "files": [
          "airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "airflow/api_connexion/security.py"
        ],
        "message": "Replace deprecated get_accessible_dag_ids and use get_readable_dags in get_dag_warnings (#36256)\n\n(cherry picked from commit 9406f00c0cab795375973e84702824e685d53e04)",
        "before_after_code_files": [
          "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "airflow/api_connexion/security.py||airflow/api_connexion/security.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/api_connexion/endpoints/dag_warning_endpoint.py||airflow/api_connexion/endpoints/dag_warning_endpoint.py": [
          "File: airflow/api_connexion/endpoints/dag_warning_endpoint.py -> airflow/api_connexion/endpoints/dag_warning_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: from typing import TYPE_CHECKING",
          "22: from sqlalchemy import select",
          "24: from airflow.api_connexion import security",
          "",
          "[Removed Lines]",
          "21: from flask import g",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     DagWarningCollection,",
          "28:     dag_warning_collection_schema,",
          "29: )",
          "30: from airflow.auth.managers.models.resource_details import DagAccessEntity",
          "31: from airflow.models.dagwarning import DagWarning as DagWarningModel",
          "33: from airflow.utils.db import get_query_count",
          "34: from airflow.utils.session import NEW_SESSION, provide_session",
          "",
          "[Removed Lines]",
          "32: from airflow.utils.airflow_flask_app import get_airflow_app",
          "",
          "[Added Lines]",
          "29: from airflow.api_connexion.security import get_readable_dags",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     if dag_id:",
          "62:         query = query.where(DagWarningModel.dag_id == dag_id)",
          "63:     else:",
          "65:         query = query.where(DagWarningModel.dag_id.in_(readable_dags))",
          "66:     if warning_type:",
          "67:         query = query.where(DagWarningModel.warning_type == warning_type)",
          "",
          "[Removed Lines]",
          "64:         readable_dags = get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
          "",
          "[Added Lines]",
          "63:         readable_dags = get_readable_dags()",
          "",
          "---------------"
        ],
        "airflow/api_connexion/security.py||airflow/api_connexion/security.py": [
          "File: airflow/api_connexion/security.py -> airflow/api_connexion/security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:     return requires_access_decorator",
          "",
          "[Removed Lines]",
          "270: def get_readable_dags() -> list[str]:",
          "271:     return get_airflow_app().appbuilder.sm.get_accessible_dag_ids(g.user)",
          "",
          "[Added Lines]",
          "270: def get_readable_dags() -> set[str]:",
          "271:     return get_auth_manager().get_permitted_dag_ids(user=g.user)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b915ed88715cbbf5a8cecb02c210cd529095026f",
      "candidate_info": {
        "commit_hash": "b915ed88715cbbf5a8cecb02c210cd529095026f",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b915ed88715cbbf5a8cecb02c210cd529095026f",
        "files": [
          "airflow/api_connexion/endpoints/dag_source_endpoint.py"
        ],
        "message": "Use `batch_is_authorized_dag` to check if user has permission to read DAGs (#36279)\n\n(cherry picked from commit a7ab64e29b60502ee8b9d5088470113d836283d1)",
        "before_after_code_files": [
          "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py": [
          "File: airflow/api_connexion/endpoints/dag_source_endpoint.py -> airflow/api_connexion/endpoints/dag_source_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: from __future__ import annotations",
          "19: from http import HTTPStatus",
          "22: from flask import Response, current_app, request",
          "23: from itsdangerous import BadSignature, URLSafeSerializer",
          "",
          "[Removed Lines]",
          "20: from typing import TYPE_CHECKING",
          "",
          "[Added Lines]",
          "20: from typing import TYPE_CHECKING, Sequence",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: from airflow.api_connexion import security",
          "26: from airflow.api_connexion.exceptions import NotFound, PermissionDenied",
          "27: from airflow.api_connexion.schemas.dag_source_schema import dag_source_schema",
          "30: from airflow.models.dag import DagModel",
          "31: from airflow.models.dagcode import DagCode",
          "32: from airflow.utils.session import NEW_SESSION, provide_session",
          "34: if TYPE_CHECKING:",
          "35:     from sqlalchemy.orm import Session",
          "38: @security.requires_access_dag(\"GET\", DagAccessEntity.CODE)",
          "39: @provide_session",
          "",
          "[Removed Lines]",
          "28: from airflow.api_connexion.security import get_readable_dags",
          "29: from airflow.auth.managers.models.resource_details import DagAccessEntity",
          "",
          "[Added Lines]",
          "28: from airflow.auth.managers.models.resource_details import DagAccessEntity, DagDetails",
          "32: from airflow.www.extensions.init_auth_manager import get_auth_manager",
          "37:     from airflow.auth.managers.models.batch_apis import IsAuthorizedDagRequest",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:     try:",
          "45:         path = auth_s.loads(file_token)",
          "46:         dag_ids = session.query(DagModel.dag_id).filter(DagModel.fileloc == path).all()",
          "48:         # Check if user has read access to all the DAGs defined in the file",
          "50:             raise PermissionDenied()",
          "51:         dag_source = DagCode.code(path, session=session)",
          "52:     except (BadSignature, FileNotFoundError):",
          "",
          "[Removed Lines]",
          "47:         readable_dags = get_readable_dags()",
          "49:         if any(dag_id[0] not in readable_dags for dag_id in dag_ids):",
          "",
          "[Added Lines]",
          "49:         requests: Sequence[IsAuthorizedDagRequest] = [",
          "50:             {",
          "51:                 \"method\": \"GET\",",
          "52:                 \"details\": DagDetails(id=dag_id[0]),",
          "53:             }",
          "54:             for dag_id in dag_ids",
          "55:         ]",
          "58:         if not get_auth_manager().batch_is_authorized_dag(requests):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cff4394256da40028adbe9fa0300288b582e8245",
      "candidate_info": {
        "commit_hash": "cff4394256da40028adbe9fa0300288b582e8245",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/cff4394256da40028adbe9fa0300288b582e8245",
        "files": [
          ".github/workflows/recheck-old-bug-report.yml",
          ".github/workflows/stale.yml",
          "airflow/auth/managers/fab/security_manager/override.py",
          "airflow/providers/google/cloud/hooks/dataflow.py",
          "generated/provider_dependencies.json",
          "scripts/in_container/run_provider_yaml_files_check.py",
          "scripts/in_container/verify_providers.py"
        ],
        "message": "Bump stalebot to version 9 (#36494)\n\n(cherry picked from commit 13e4905a60011e162f34e86a77acfcb4af874685)",
        "before_after_code_files": [
          "airflow/auth/managers/fab/security_manager/override.py||airflow/auth/managers/fasecurity_manager/override.py",
          "airflow/providers/google/cloud/hooks/dataflow.py||airflow/providers/google/cloud/hooks/dataflow.py",
          "scripts/in_container/run_provider_yaml_files_check.py||scripts/in_container/run_provider_yaml_files_check.py",
          "scripts/in_container/verify_providers.py||scripts/in_container/verify_providers.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/auth/managers/fab/security_manager/override.py||airflow/auth/managers/fasecurity_manager/override.py": [
          "File: airflow/auth/managers/fab/security_manager/override.py -> airflow/auth/managers/fasecurity_manager/override.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2088:             @appbuilder.sm.oauth_user_info_getter",
          "2089:             def my_oauth_user_info(sm, provider, response=None):",
          "2093:                 return {}",
          "2094:         \"\"\"",
          "",
          "[Removed Lines]",
          "2090:                 if provider == 'github':",
          "2091:                     me = sm.oauth_remotes[provider].get('user')",
          "2092:                     return {'username': me.data.get('login')}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "airflow/providers/google/cloud/hooks/dataflow.py||airflow/providers/google/cloud/hooks/dataflow.py": [
          "File: airflow/providers/google/cloud/hooks/dataflow.py -> airflow/providers/google/cloud/hooks/dataflow.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: def process_line_and_extract_dataflow_job_id_callback(",
          "59: ) -> Callable[[str], None]:",
          "60:     \"\"\"Build callback that triggers the specified function.",
          "",
          "[Removed Lines]",
          "58:     on_new_job_id_callback: Callable[[str], None] | None",
          "",
          "[Added Lines]",
          "58:     on_new_job_id_callback: Callable[[str], None] | None,",
          "",
          "---------------"
        ],
        "scripts/in_container/run_provider_yaml_files_check.py||scripts/in_container/run_provider_yaml_files_check.py": [
          "File: scripts/in_container/run_provider_yaml_files_check.py -> scripts/in_container/run_provider_yaml_files_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "314: @run_check(\"Checking completeness of list of {sensors, hooks, operators, triggers}\")",
          "315: def check_correctness_of_list_of_sensors_operators_hook_trigger_modules(",
          "317: ) -> tuple[int, int]:",
          "318:     num_errors = 0",
          "319:     num_modules = 0",
          "",
          "[Removed Lines]",
          "316:     yaml_files: dict[str, dict]",
          "",
          "[Added Lines]",
          "316:     yaml_files: dict[str, dict],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "355: @run_check(\"Checking for duplicates in list of {sensors, hooks, operators, triggers}\")",
          "356: def check_duplicates_in_integrations_names_of_hooks_sensors_operators(",
          "358: ) -> tuple[int, int]:",
          "359:     num_errors = 0",
          "360:     num_integrations = 0",
          "",
          "[Removed Lines]",
          "357:     yaml_files: dict[str, dict]",
          "",
          "[Added Lines]",
          "357:     yaml_files: dict[str, dict],",
          "",
          "---------------"
        ],
        "scripts/in_container/verify_providers.py||scripts/in_container/verify_providers.py": [
          "File: scripts/in_container/verify_providers.py -> scripts/in_container/verify_providers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "580: def check_if_classes_are_properly_named(",
          "582: ) -> tuple[int, int]:",
          "583:     \"\"\"Check if all entities in the dictionary are named properly.",
          "",
          "[Removed Lines]",
          "581:     entity_summary: dict[EntityType, EntityTypeSummary]",
          "",
          "[Added Lines]",
          "581:     entity_summary: dict[EntityType, EntityTypeSummary],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c2d71c43b2d6f1de9efe011223c5fefceb68621",
      "candidate_info": {
        "commit_hash": "2c2d71c43b2d6f1de9efe011223c5fefceb68621",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/2c2d71c43b2d6f1de9efe011223c5fefceb68621",
        "files": [
          "tests/models/test_mappedoperator.py"
        ],
        "message": "Fix tests to adopt changes in Jinja 3.1.3 (#36731)\n\n(cherry picked from commit 8b33e25e502c18f42dd3f76c95fefd78fb3a04a3)",
        "before_after_code_files": [
          "tests/models/test_mappedoperator.py||tests/models/test_mappedoperator.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/models/test_mappedoperator.py||tests/models/test_mappedoperator.py": [
          "File: tests/models/test_mappedoperator.py -> tests/models/test_mappedoperator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from collections import defaultdict",
          "22: from datetime import timedelta",
          "23: from typing import TYPE_CHECKING",
          "25: from unittest.mock import patch",
          "27: import pendulum",
          "",
          "[Removed Lines]",
          "24: from unittest import mock",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "405:     assert t.expand_input.value == {\"params\": [{\"c\": \"x\"}, {\"d\": 1}]}",
          "409:     with set_current_task_instance_session(session=session):",
          "411:         class MyOperator(BaseOperator):",
          "",
          "[Removed Lines]",
          "408: def test_mapped_render_template_fields_validating_operator(dag_maker, session):",
          "",
          "[Added Lines]",
          "407: def test_mapped_render_template_fields_validating_operator(dag_maker, session, tmp_path):",
          "408:     file_template_dir = tmp_path / \"path\" / \"to\"",
          "409:     file_template_dir.mkdir(parents=True, exist_ok=True)",
          "410:     file_template = file_template_dir / \"file.ext\"",
          "411:     file_template.write_text(\"loaded data\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "427:         def execute(self, context):",
          "428:             pass",
          "431:             task1 = BaseOperator(task_id=\"op1\")",
          "432:             output1 = task1.output",
          "433:             mapped = MyOperator.partial(",
          "",
          "[Removed Lines]",
          "430:         with dag_maker(session=session):",
          "",
          "[Added Lines]",
          "434:         with dag_maker(session=session, template_searchpath=tmp_path.__fspath__()):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "455:         mapped_ti.map_index = 0",
          "457:         assert isinstance(mapped_ti.task, MappedOperator)",
          "462:         assert isinstance(mapped_ti.task, MyOperator)",
          "464:         assert mapped_ti.task.partial_template == \"a\", \"Should be templated!\"",
          "",
          "[Removed Lines]",
          "458:         with patch(\"builtins.open\", mock.mock_open(read_data=b\"loaded data\")), patch(",
          "459:             \"os.path.isfile\", return_value=True",
          "460:         ), patch(\"os.path.getmtime\", return_value=0):",
          "461:             mapped.render_template_fields(context=mapped_ti.get_template_context(session=session))",
          "",
          "[Added Lines]",
          "462:         mapped.render_template_fields(context=mapped_ti.get_template_context(session=session))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "468:         assert mapped_ti.task.file_template == \"loaded data\", \"Should be templated!\"",
          "472:     with set_current_task_instance_session(session=session):",
          "474:         class MyOperator(BaseOperator):",
          "",
          "[Removed Lines]",
          "471: def test_mapped_expand_kwargs_render_template_fields_validating_operator(dag_maker, session):",
          "",
          "[Added Lines]",
          "472: def test_mapped_expand_kwargs_render_template_fields_validating_operator(dag_maker, session, tmp_path):",
          "473:     file_template_dir = tmp_path / \"path\" / \"to\"",
          "474:     file_template_dir.mkdir(parents=True, exist_ok=True)",
          "475:     file_template = file_template_dir / \"file.ext\"",
          "476:     file_template.write_text(\"loaded data\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "490:             def execute(self, context):",
          "491:                 pass",
          "494:             mapped = MyOperator.partial(",
          "495:                 task_id=\"a\", partial_template=\"{{ ti.task_id }}\", partial_static=\"{{ ti.task_id }}\"",
          "496:             ).expand_kwargs(",
          "",
          "[Removed Lines]",
          "493:         with dag_maker(session=session):",
          "",
          "[Added Lines]",
          "499:         with dag_maker(session=session, template_searchpath=tmp_path.__fspath__()):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "502:         mapped_ti: TaskInstance = dr.get_task_instance(mapped.task_id, session=session, map_index=0)",
          "504:         assert isinstance(mapped_ti.task, MappedOperator)",
          "509:         assert isinstance(mapped_ti.task, MyOperator)",
          "511:         assert mapped_ti.task.partial_template == \"a\", \"Should be templated!\"",
          "",
          "[Removed Lines]",
          "505:         with patch(\"builtins.open\", mock.mock_open(read_data=b\"loaded data\")), patch(",
          "506:             \"os.path.isfile\", return_value=True",
          "507:         ), patch(\"os.path.getmtime\", return_value=0):",
          "508:             mapped.render_template_fields(context=mapped_ti.get_template_context(session=session))",
          "",
          "[Added Lines]",
          "511:         mapped.render_template_fields(context=mapped_ti.get_template_context(session=session))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f05fe6583d32efab6141be516c71b55d769c1ef",
      "candidate_info": {
        "commit_hash": "4f05fe6583d32efab6141be516c71b55d769c1ef",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/4f05fe6583d32efab6141be516c71b55d769c1ef",
        "files": [
          "airflow/decorators/branch_external_python.py",
          "airflow/decorators/branch_python.py",
          "airflow/decorators/branch_virtualenv.py",
          "airflow/decorators/external_python.py",
          "airflow/decorators/python_virtualenv.py",
          "airflow/decorators/short_circuit.py",
          "airflow/models/abstractoperator.py",
          "tests/decorators/test_branch_virtualenv.py",
          "tests/decorators/test_external_python.py",
          "tests/decorators/test_python_virtualenv.py"
        ],
        "message": "Fix Python-based decorators templating (#36103)\n\nTemplating of Python-based decorators has been broken since\nimplementation. The decorators used template_fields definition\nas defined originally in PythonOperator rather than the ones from\nvirtualenv because template fields were redefined in\n_PythonDecoratedOperator class and they took precedence (MRU).\n\nThis PR add explicit copying of template_fields from the operators\nthat they are decorating.\n\nFixes: #36102\n(cherry picked from commit 3904206b69428525db31ff7813daa0322f7b83e8)",
        "before_after_code_files": [
          "airflow/decorators/branch_external_python.py||airflow/decorators/branch_external_python.py",
          "airflow/decorators/branch_python.py||airflow/decorators/branch_python.py",
          "airflow/decorators/branch_virtualenv.py||airflow/decorators/branch_virtualenv.py",
          "airflow/decorators/external_python.py||airflow/decorators/external_python.py",
          "airflow/decorators/python_virtualenv.py||airflow/decorators/python_virtualenv.py",
          "airflow/decorators/short_circuit.py||airflow/decorators/short_circuit.py",
          "airflow/models/abstractoperator.py||airflow/models/abstractoperator.py",
          "tests/decorators/test_branch_virtualenv.py||tests/decorators/test_branch_virtualenv.py",
          "tests/decorators/test_external_python.py||tests/decorators/test_external_python.py",
          "tests/decorators/test_python_virtualenv.py||tests/decorators/test_python_virtualenv.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/decorators/branch_external_python.py||airflow/decorators/branch_external_python.py": [
          "File: airflow/decorators/branch_external_python.py -> airflow/decorators/branch_external_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: class _BranchExternalPythonDecoratedOperator(_PythonDecoratedOperator, BranchExternalPythonOperator):",
          "30:     \"\"\"Wraps a Python callable and captures args/kwargs when called for execution.\"\"\"",
          "32:     custom_operator_name: str = \"@task.branch_external_python\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     template_fields = BranchExternalPythonOperator.template_fields",
          "",
          "---------------"
        ],
        "airflow/decorators/branch_python.py||airflow/decorators/branch_python.py": [
          "File: airflow/decorators/branch_python.py -> airflow/decorators/branch_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: class _BranchPythonDecoratedOperator(_PythonDecoratedOperator, BranchPythonOperator):",
          "30:     \"\"\"Wraps a Python callable and captures args/kwargs when called for execution.\"\"\"",
          "32:     custom_operator_name: str = \"@task.branch\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     template_fields = BranchPythonOperator.template_fields",
          "",
          "---------------"
        ],
        "airflow/decorators/branch_virtualenv.py||airflow/decorators/branch_virtualenv.py": [
          "File: airflow/decorators/branch_virtualenv.py -> airflow/decorators/branch_virtualenv.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: class _BranchPythonVirtualenvDecoratedOperator(_PythonDecoratedOperator, BranchPythonVirtualenvOperator):",
          "30:     \"\"\"Wraps a Python callable and captures args/kwargs when called for execution.\"\"\"",
          "32:     custom_operator_name: str = \"@task.branch_virtualenv\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     template_fields = BranchPythonVirtualenvOperator.template_fields",
          "",
          "---------------"
        ],
        "airflow/decorators/external_python.py||airflow/decorators/external_python.py": [
          "File: airflow/decorators/external_python.py -> airflow/decorators/external_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: class _PythonExternalDecoratedOperator(_PythonDecoratedOperator, ExternalPythonOperator):",
          "30:     \"\"\"Wraps a Python callable and captures args/kwargs when called for execution.\"\"\"",
          "32:     custom_operator_name: str = \"@task.external_python\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     template_fields = ExternalPythonOperator.template_fields",
          "",
          "---------------"
        ],
        "airflow/decorators/python_virtualenv.py||airflow/decorators/python_virtualenv.py": [
          "File: airflow/decorators/python_virtualenv.py -> airflow/decorators/python_virtualenv.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: class _PythonVirtualenvDecoratedOperator(_PythonDecoratedOperator, PythonVirtualenvOperator):",
          "30:     \"\"\"Wraps a Python callable and captures args/kwargs when called for execution.\"\"\"",
          "32:     custom_operator_name: str = \"@task.virtualenv\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     template_fields = PythonVirtualenvOperator.template_fields",
          "",
          "---------------"
        ],
        "airflow/decorators/short_circuit.py||airflow/decorators/short_circuit.py": [
          "File: airflow/decorators/short_circuit.py -> airflow/decorators/short_circuit.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: class _ShortCircuitDecoratedOperator(_PythonDecoratedOperator, ShortCircuitOperator):",
          "30:     \"\"\"Wraps a Python callable and captures args/kwargs when called for execution.\"\"\"",
          "32:     custom_operator_name: str = \"@task.short_circuit\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     template_fields = ShortCircuitOperator.template_fields",
          "",
          "---------------"
        ],
        "airflow/models/abstractoperator.py||airflow/models/abstractoperator.py": [
          "File: airflow/models/abstractoperator.py -> airflow/models/abstractoperator.py"
        ],
        "tests/decorators/test_branch_virtualenv.py||tests/decorators/test_branch_virtualenv.py": [
          "File: tests/decorators/test_branch_virtualenv.py -> tests/decorators/test_branch_virtualenv.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     # possibilities. So we are increasing the timeout for this test to 3x of the default timeout",
          "32:     @pytest.mark.execution_timeout(180)",
          "33:     @pytest.mark.parametrize(\"branch_task_name\", [\"task_1\", \"task_2\"])",
          "35:         @task",
          "36:         def dummy_f():",
          "37:             pass",
          "",
          "[Removed Lines]",
          "34:     def test_branch_one(self, dag_maker, branch_task_name):",
          "",
          "[Added Lines]",
          "34:     def test_branch_one(self, dag_maker, branch_task_name, tmp_path):",
          "35:         requirements_file = tmp_path / \"requirements.txt\"",
          "36:         requirements_file.write_text(\"funcsigs==0.4\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:         else:",
          "61:             def branch_operator():",
          "62:                 import funcsigs",
          "64:                 print(f\"We successfully imported funcsigs version {funcsigs.__version__}\")",
          "65:                 return \"task_2\"",
          "68:             branchoperator = branch_operator()",
          "69:             df = dummy_f()",
          "70:             task_1 = task_1()",
          "",
          "[Removed Lines]",
          "60:             @task.branch_virtualenv(task_id=\"branching\", requirements=[\"funcsigs\"])",
          "67:         with dag_maker():",
          "",
          "[Added Lines]",
          "63:             @task.branch_virtualenv(task_id=\"branching\", requirements=\"requirements.txt\")",
          "70:         with dag_maker(template_searchpath=tmp_path.as_posix()):",
          "",
          "---------------"
        ],
        "tests/decorators/test_external_python.py||tests/decorators/test_external_python.py": [
          "File: tests/decorators/test_external_python.py -> tests/decorators/test_external_python.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         ret.operator.run(start_date=DEFAULT_DATE, end_date=DEFAULT_DATE)",
          "77:     def test_no_dill_installed_raises_exception_when_use_dill(self, dag_maker, venv_python):",
          "78:         @task.external_python(python=venv_python, use_dill=True)",
          "79:         def f():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     def test_with_templated_python(self, dag_maker, venv_python_with_dill):",
          "78:         # add template that produces empty string when rendered",
          "79:         templated_python_with_dill = venv_python_with_dill.as_posix() + \"{{ '' }}\"",
          "81:         @task.external_python(python=templated_python_with_dill, use_dill=True)",
          "82:         def f():",
          "83:             \"\"\"Import dill to double-check it is installed .\"\"\"",
          "84:             import dill  # noqa: F401",
          "86:         with dag_maker():",
          "87:             ret = f()",
          "89:         ret.operator.run(start_date=DEFAULT_DATE, end_date=DEFAULT_DATE)",
          "",
          "---------------"
        ],
        "tests/decorators/test_python_virtualenv.py||tests/decorators/test_python_virtualenv.py": [
          "File: tests/decorators/test_python_virtualenv.py -> tests/decorators/test_python_virtualenv.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:         ret.operator.run(start_date=DEFAULT_DATE, end_date=DEFAULT_DATE)",
          "106:     def test_unpinned_requirements(self, dag_maker):",
          "107:         @task.virtualenv(",
          "108:             system_site_packages=False,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:     def test_with_requirements_file(self, dag_maker, tmp_path):",
          "107:         requirements_file = tmp_path / \"requirements.txt\"",
          "108:         requirements_file.write_text(\"funcsigs==0.4\\nattrs==23.1.0\")",
          "110:         @task.virtualenv(",
          "111:             system_site_packages=False,",
          "112:             requirements=\"requirements.txt\",",
          "113:             python_version=PYTHON_VERSION,",
          "114:             use_dill=True,",
          "115:         )",
          "116:         def f():",
          "117:             import funcsigs",
          "119:             if funcsigs.__version__ != \"0.4\":",
          "120:                 raise Exception",
          "122:             import attrs",
          "124:             if attrs.__version__ != \"23.1.0\":",
          "125:                 raise Exception",
          "127:         with dag_maker(template_searchpath=tmp_path.as_posix()):",
          "128:             ret = f()",
          "130:         ret.operator.run(start_date=DEFAULT_DATE, end_date=DEFAULT_DATE)",
          "",
          "---------------"
        ]
      }
    }
  ]
}