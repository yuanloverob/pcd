{
  "cve_id": "CVE-2019-16197",
  "cve_desc": "In htdocs/societe/card.php in Dolibarr 10.0.1, the value of the User-Agent HTTP header is copied into the HTML document as plain text between tags, leading to XSS.",
  "repo": "Dolibarr/dolibarr",
  "patch_hash": "c53be23122fc6e7c3c8d65ee8ba979c566380964",
  "patch_info": {
    "commit_hash": "c53be23122fc6e7c3c8d65ee8ba979c566380964",
    "repo": "Dolibarr/dolibarr",
    "commit_url": "https://github.com/Dolibarr/dolibarr/commit/c53be23122fc6e7c3c8d65ee8ba979c566380964",
    "files": [
      "htdocs/core/class/translate.class.php",
      "test/phpunit/SecurityTest.php"
    ],
    "message": "FIX Filtering the HTTP Header \"Accept-Language\".",
    "before_after_code_files": [
      "htdocs/core/class/translate.class.php||htdocs/core/class/translate.class.php",
      "test/phpunit/SecurityTest.php||test/phpunit/SecurityTest.php"
    ]
  },
  "patch_diff": {
    "htdocs/core/class/translate.class.php||htdocs/core/class/translate.class.php": [
      "File: htdocs/core/class/translate.class.php -> htdocs/core/class/translate.class.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "89:   if (empty($srclang) || $srclang == 'auto')",
      "90:   {",
      "91:    $langpref=empty($_SERVER['HTTP_ACCEPT_LANGUAGE'])?'':$_SERVER['HTTP_ACCEPT_LANGUAGE'];",
      "93:    $langpref=str_replace(\"-\", \"_\", $langpref);",
      "94:    $langlist=preg_split(\"/[;,]/\", $langpref);",
      "96:   }",
      "97:   else $codetouse=$srclang;",
      "",
      "[Removed Lines]",
      "92:    $langpref=preg_replace(\"/;([^,]*)/i\", \"\", $langpref);",
      "95:    $codetouse=$langlist[0];",
      "",
      "[Added Lines]",
      "93:    $langpref=preg_replace(\"/;([^,]*)/i\", \"\", $langpref); // Remove the 'q=x.y,' part",
      "96:    $codetouse=preg_replace('/[^_a-zA-Z]/', '', $langlist[0]);",
      "",
      "---------------"
    ],
    "test/phpunit/SecurityTest.php||test/phpunit/SecurityTest.php": [
      "File: test/phpunit/SecurityTest.php -> test/phpunit/SecurityTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "130:      print __METHOD__.\"\\n\";",
      "131:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:     public function testSetLang()",
      "139:     {",
      "140:      global $conf;",
      "141:      $conf=$this->savconf;",
      "143:      $tmplangs = new Translate('', $conf);",
      "145:      $_SERVER['HTTP_ACCEPT_LANGUAGE'] = \"' malicious text with quote\";",
      "146:      $tmplangs->setDefaultLang('auto');",
      "147:      print __METHOD__.' $tmplangs->defaultlang='.$tmplangs->defaultlang.\"\\n\";",
      "148:      $this->assertEquals($tmplangs->defaultlang, 'malicioustextwithquote_MALICIOUSTEXTWITHQUOTE');",
      "149:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0aa156db78f86442314ff004b36141f8c4a6deaa",
      "candidate_info": {
        "commit_hash": "0aa156db78f86442314ff004b36141f8c4a6deaa",
        "repo": "Dolibarr/dolibarr",
        "commit_url": "https://github.com/Dolibarr/dolibarr/commit/0aa156db78f86442314ff004b36141f8c4a6deaa",
        "files": [
          "htdocs/admin/company.php",
          "htdocs/core/class/dolgraph.class.php",
          "htdocs/core/class/translate.class.php",
          "htdocs/core/modules/modAgenda.class.php",
          "htdocs/loan/list.php",
          "htdocs/website/class/websitepage.class.php"
        ],
        "message": "Scrutinizer Auto-Fixes\n\nThis commit consists of patches automatically generated for this project on https://scrutinizer-ci.com",
        "before_after_code_files": [
          "htdocs/admin/company.php||htdocs/admin/company.php",
          "htdocs/core/class/dolgraph.class.php||htdocs/core/class/dolgraph.class.php",
          "htdocs/core/class/translate.class.php||htdocs/core/class/translate.class.php",
          "htdocs/core/modules/modAgenda.class.php||htdocs/core/modules/modAgenda.class.php",
          "htdocs/loan/list.php||htdocs/loan/list.php",
          "htdocs/website/class/websitepage.class.php||htdocs/website/class/websitepage.class.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "htdocs/core/class/translate.class.php||htdocs/core/class/translate.class.php"
          ],
          "candidate": [
            "htdocs/core/class/translate.class.php||htdocs/core/class/translate.class.php"
          ]
        }
      },
      "candidate_diff": {
        "htdocs/admin/company.php||htdocs/admin/company.php": [
          "File: htdocs/admin/company.php -> htdocs/admin/company.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "417: print '<tr class=\"oddeven\"><td class=\"fieldrequired\"><label for=\"name\">'.$langs->trans(\"CompanyName\").'</label></td><td>';",
          "421: print '<tr class=\"oddeven\"><td><label for=\"MAIN_INFO_SOCIETE_ADDRESS\">'.$langs->trans(\"CompanyAddress\").'</label></td><td>';",
          "424: print '<tr class=\"oddeven\"><td><label for=\"MAIN_INFO_SOCIETE_ZIP\">'.$langs->trans(\"CompanyZip\").'</label></td><td>';",
          "427: print '<tr class=\"oddeven\"><td><label for=\"MAIN_INFO_SOCIETE_TOWN\">'.$langs->trans(\"CompanyTown\").'</label></td><td>';",
          "431: print '<tr class=\"oddeven\"><td class=\"fieldrequired\"><label for=\"selectcountry_id\">'.$langs->trans(\"Country\").'</label></td><td class=\"maxwidthonsmartphone\">';",
          "",
          "[Removed Lines]",
          "418: print '<input name=\"nom\" id=\"name\" class=\"minwidth200\" value=\"'. dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_NOM?$conf->global->MAIN_INFO_SOCIETE_NOM: GETPOST(\"nom\", 'nohtml')) . '\"'.(empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) ? '' : ' autofocus=\"autofocus\"').'></td></tr>'.\"\\n\";",
          "422: print '<textarea name=\"MAIN_INFO_SOCIETE_ADDRESS\" id=\"MAIN_INFO_SOCIETE_ADDRESS\" class=\"quatrevingtpercent\" rows=\"'.ROWS_3.'\">'. ($conf->global->MAIN_INFO_SOCIETE_ADDRESS?$conf->global->MAIN_INFO_SOCIETE_ADDRESS:GETPOST(\"MAIN_INFO_SOCIETE_ADDRESS\", 'nohtml')) . '</textarea></td></tr>'.\"\\n\";",
          "425: print '<input class=\"minwidth100\" name=\"MAIN_INFO_SOCIETE_ZIP\" id=\"MAIN_INFO_SOCIETE_ZIP\" value=\"'. dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_ZIP?$conf->global->MAIN_INFO_SOCIETE_ZIP:GETPOST(\"MAIN_INFO_SOCIETE_ZIP\", 'alpha')) . '\"></td></tr>'.\"\\n\";",
          "428: print '<input name=\"MAIN_INFO_SOCIETE_TOWN\" class=\"minwidth100\" id=\"MAIN_INFO_SOCIETE_TOWN\" value=\"'. dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_TOWN?$conf->global->MAIN_INFO_SOCIETE_TOWN:GETPOST(\"MAIN_INFO_SOCIETE_TOWN\", 'nohtml')) . '\"></td></tr>'.\"\\n\";",
          "",
          "[Added Lines]",
          "418: print '<input name=\"nom\" id=\"name\" class=\"minwidth200\" value=\"'.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_NOM ? $conf->global->MAIN_INFO_SOCIETE_NOM : GETPOST(\"nom\", 'nohtml')).'\"'.(empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) ? '' : ' autofocus=\"autofocus\"').'></td></tr>'.\"\\n\";",
          "422: print '<textarea name=\"MAIN_INFO_SOCIETE_ADDRESS\" id=\"MAIN_INFO_SOCIETE_ADDRESS\" class=\"quatrevingtpercent\" rows=\"'.ROWS_3.'\">'.($conf->global->MAIN_INFO_SOCIETE_ADDRESS ? $conf->global->MAIN_INFO_SOCIETE_ADDRESS : GETPOST(\"MAIN_INFO_SOCIETE_ADDRESS\", 'nohtml')).'</textarea></td></tr>'.\"\\n\";",
          "425: print '<input class=\"minwidth100\" name=\"MAIN_INFO_SOCIETE_ZIP\" id=\"MAIN_INFO_SOCIETE_ZIP\" value=\"'.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_ZIP ? $conf->global->MAIN_INFO_SOCIETE_ZIP : GETPOST(\"MAIN_INFO_SOCIETE_ZIP\", 'alpha')).'\"></td></tr>'.\"\\n\";",
          "428: print '<input name=\"MAIN_INFO_SOCIETE_TOWN\" class=\"minwidth100\" id=\"MAIN_INFO_SOCIETE_TOWN\" value=\"'.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_TOWN ? $conf->global->MAIN_INFO_SOCIETE_TOWN : GETPOST(\"MAIN_INFO_SOCIETE_TOWN\", 'nohtml')).'\"></td></tr>'.\"\\n\";",
          "",
          "---------------"
        ],
        "htdocs/core/class/dolgraph.class.php||htdocs/core/class/dolgraph.class.php": [
          "File: htdocs/core/class/dolgraph.class.php -> htdocs/core/class/dolgraph.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "898:    return;",
          "899:   }",
          "903:   if (is_array($this->data) && is_array($this->data[0])) {",
          "905:   }",
          "906:   if ($nblot < 0) dol_syslog('Bad value for property ->data. Must be set by mydolgraph->SetData before calling mydolgrapgh->draw', LOG_WARNING);",
          "913:   while ($i < $nblot) // Loop on each serie",
          "914:   {",
          "921:    {",
          "922:     $legends[$x] = $valarray[0];",
          "924:     $x++;",
          "925:    }",
          "928:    if (isset($this->type[$firstlot]) && $this->type[$firstlot] == 'pie')",
          "929:    {",
          "932:     }",
          "933:    }",
          "934:    else",
          "935:    {",
          "938:     }",
          "939:    }",
          "941:    unset($values);",
          "942:    $i++;",
          "943:   }",
          "949:   {",
          "952:       return;",
          "953:   }",
          "959:   if ($nblot < 0)",
          "960:   {",
          "962:   }",
          "963:   else",
          "964:   {",
          "965:    while ($i < $nblot)",
          "966:    {",
          "968:     $i++;",
          "969:    }",
          "970:   }",
          "974:   if (isset($this->type[$firstlot]) && $this->type[$firstlot] == 'pie')",
          "975:   {",
          "985:    function plotWithOptions_'.$tag.'() {",
          "986:    $.plot($(\"#placeholder_'.$tag.'\"), d0,",
          "987:    {",
          "",
          "[Removed Lines]",
          "901:   $legends=array();",
          "902:   $nblot=0;",
          "904:    $nblot=count($this->data[0])-1;    // -1 to remove legend",
          "907:   $firstlot=0;",
          "911:   $i=$firstlot;",
          "912:   $serie=array();",
          "915:    $values=array(); // Array with horizontal y values (specific values of a serie) for each abscisse x",
          "916:    $serie[$i]=\"var d\".$i.\" = [];\\n\";",
          "919:    $x=0;",
          "920:    foreach($this->data as $valarray) // Loop on each x",
          "923:     $values[$x]  = (is_numeric($valarray[$i+1]) ? $valarray[$i+1] : null);",
          "930:     foreach($values as $x => $y) {",
          "931:      if (isset($y)) $serie[$i].='d'.$i.'.push({\"label\":\"'.dol_escape_js($legends[$x]).'\", \"data\":'.$y.'});'.\"\\n\";",
          "936:     foreach($values as $x => $y) {",
          "937:      if (isset($y)) $serie[$i].='d'.$i.'.push(['.$x.', '.$y.']);'.\"\\n\";",
          "944:   $tag=dol_escape_htmltag(dol_string_unaccent(dol_string_nospecial(basename($file), '_', array('-','.'))));",
          "946:   $this->stringtoshow ='<!-- Build using '.$this->_library.' -->'.\"\\n\";",
          "947:   if (! empty($this->title)) $this->stringtoshow.='<div class=\"center dolgraphtitle'.(empty($this->cssprefix)?'':' dolgraphtitle'.$this->cssprefix).'\">'.$this->title.'</div>';",
          "948:   if (! empty($this->shownographyet))",
          "950:       $this->stringtoshow.='<div style=\"width:'.$this->width.'px;height:'.$this->height.'px;\" class=\"nographyet\"></div>';",
          "951:       $this->stringtoshow.='<div class=\"nographyettext\">'.$langs->trans(\"NotEnoughDataYet\").'</div>';",
          "954:   $this->stringtoshow.='<div id=\"placeholder_'.$tag.'\" style=\"width:'.$this->width.'px;height:'.$this->height.'px;\" class=\"dolgraph'.(empty($this->cssprefix)?'':' dolgraph'.$this->cssprefix).' center\"></div>'.\"\\n\";",
          "956:   $this->stringtoshow.='<script id=\"'.$tag.'\">'.\"\\n\";",
          "957:   $this->stringtoshow.='$(function () {'.\"\\n\";",
          "958:   $i=$firstlot;",
          "961:    $this->stringtoshow.='<!-- No series of data -->';",
          "967:     $this->stringtoshow.=$serie[$i];",
          "971:   $this->stringtoshow.=\"\\n\";",
          "976:    $datacolor=array();",
          "977:    foreach($this->datacolor as $val) $datacolor[]=\"#\".sprintf(\"%02x%02x%02x\", $val[0], $val[1], $val[2]);",
          "979:    $urltemp=''; // TODO Add support for url link into labels",
          "980:    $showlegend=$this->showlegend;",
          "981:    $showpointvalue=$this->showpointvalue;",
          "982:    $showpercent=$this->showpercent;",
          "984:    $this->stringtoshow.= '",
          "",
          "[Added Lines]",
          "901:   $legends = array();",
          "902:   $nblot = 0;",
          "904:    $nblot = count($this->data[0]) - 1; // -1 to remove legend",
          "907:   $firstlot = 0;",
          "911:   $i = $firstlot;",
          "912:   $serie = array();",
          "915:    $values = array(); // Array with horizontal y values (specific values of a serie) for each abscisse x",
          "916:    $serie[$i] = \"var d\".$i.\" = [];\\n\";",
          "919:    $x = 0;",
          "920:    foreach ($this->data as $valarray) // Loop on each x",
          "923:     $values[$x]  = (is_numeric($valarray[$i + 1]) ? $valarray[$i + 1] : null);",
          "930:     foreach ($values as $x => $y) {",
          "931:      if (isset($y)) $serie[$i] .= 'd'.$i.'.push({\"label\":\"'.dol_escape_js($legends[$x]).'\", \"data\":'.$y.'});'.\"\\n\";",
          "936:     foreach ($values as $x => $y) {",
          "937:      if (isset($y)) $serie[$i] .= 'd'.$i.'.push(['.$x.', '.$y.']);'.\"\\n\";",
          "944:   $tag = dol_escape_htmltag(dol_string_unaccent(dol_string_nospecial(basename($file), '_', array('-', '.'))));",
          "946:   $this->stringtoshow = '<!-- Build using '.$this->_library.' -->'.\"\\n\";",
          "947:   if (!empty($this->title)) $this->stringtoshow .= '<div class=\"center dolgraphtitle'.(empty($this->cssprefix) ? '' : ' dolgraphtitle'.$this->cssprefix).'\">'.$this->title.'</div>';",
          "948:   if (!empty($this->shownographyet))",
          "950:       $this->stringtoshow .= '<div style=\"width:'.$this->width.'px;height:'.$this->height.'px;\" class=\"nographyet\"></div>';",
          "951:       $this->stringtoshow .= '<div class=\"nographyettext\">'.$langs->trans(\"NotEnoughDataYet\").'</div>';",
          "954:   $this->stringtoshow .= '<div id=\"placeholder_'.$tag.'\" style=\"width:'.$this->width.'px;height:'.$this->height.'px;\" class=\"dolgraph'.(empty($this->cssprefix) ? '' : ' dolgraph'.$this->cssprefix).' center\"></div>'.\"\\n\";",
          "956:   $this->stringtoshow .= '<script id=\"'.$tag.'\">'.\"\\n\";",
          "957:   $this->stringtoshow .= '$(function () {'.\"\\n\";",
          "958:   $i = $firstlot;",
          "961:    $this->stringtoshow .= '<!-- No series of data -->';",
          "967:     $this->stringtoshow .= $serie[$i];",
          "971:   $this->stringtoshow .= \"\\n\";",
          "976:    $datacolor = array();",
          "977:    foreach ($this->datacolor as $val) $datacolor[] = \"#\".sprintf(\"%02x%02x%02x\", $val[0], $val[1], $val[2]);",
          "979:    $urltemp = ''; // TODO Add support for url link into labels",
          "980:    $showlegend = $this->showlegend;",
          "981:    $showpointvalue = $this->showpointvalue;",
          "982:    $showpercent = $this->showpercent;",
          "984:    $this->stringtoshow .= '",
          "",
          "---------------"
        ],
        "htdocs/core/class/translate.class.php||htdocs/core/class/translate.class.php": [
          "File: htdocs/core/class/translate.class.php -> htdocs/core/class/translate.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: class Translate",
          "31: {",
          "",
          "[Removed Lines]",
          "32:  public $dir;                          // Directories that contains /langs subdirectory",
          "34:  public $defaultlang;                  // Current language for current user",
          "35:  public $charset_output='UTF-8';       // Codage used by \"trans\" method outputs",
          "37:  public $tab_translate=array();        // Array of all translations key=>value",
          "38:  private $_tab_loaded=array();         // Array to store result after loading each language file",
          "40:  public $cache_labels=array();         // Cache for labels return by getLabelFromKey method",
          "41:  public $cache_currencies=array();     // Cache to store currency symbols",
          "42:     private $cache_currencies_all_loaded=false;",
          "",
          "[Added Lines]",
          "32:  public $dir; // Directories that contains /langs subdirectory",
          "34:  public $defaultlang; // Current language for current user",
          "35:  public $charset_output = 'UTF-8'; // Codage used by \"trans\" method outputs",
          "37:  public $tab_translate = array(); // Array of all translations key=>value",
          "38:  private $_tab_loaded = array(); // Array to store result after loading each language file",
          "40:  public $cache_labels = array(); // Cache for labels return by getLabelFromKey method",
          "41:  public $cache_currencies = array(); // Cache to store currency symbols",
          "42:     private $cache_currencies_all_loaded = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:  public function __construct($dir, $conf)",
          "52:  {",
          "56:  }",
          "",
          "[Removed Lines]",
          "53:   if (! empty($conf->file->character_set_client)) $this->charset_output=$conf->file->character_set_client; // If charset output is forced",
          "54:   if ($dir) $this->dir=array($dir);",
          "55:   else $this->dir=$conf->file->dol_document_root;",
          "",
          "[Added Lines]",
          "53:   if (!empty($conf->file->character_set_client)) $this->charset_output = $conf->file->character_set_client; // If charset output is forced",
          "54:   if ($dir) $this->dir = array($dir);",
          "55:   else $this->dir = $conf->file->dol_document_root;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:   {",
          "77:    {",
          "80:     {",
          "82:     }",
          "83:    }",
          "85:   }",
          "89:   if (empty($srclang) || $srclang == 'auto')",
          "90:   {",
          "97:   }",
          "104:   {",
          "113:    }",
          "115:   }",
          "116:   else {      // If it's for a codetouse that is a short code xx",
          "122:   }",
          "126:  }",
          "",
          "[Removed Lines]",
          "72:   if (! empty($conf->global->MAIN_FORCELANGDIR))",
          "74:    $more=array();",
          "75:    $i=0;",
          "76:    foreach($conf->file->dol_document_root as $dir)",
          "78:     $newdir=$dir.$conf->global->MAIN_FORCELANGDIR;    // For example $conf->global->MAIN_FORCELANGDIR is '/mymodule' meaning we search files into '/mymodule/langs/xx_XX'",
          "79:     if (! in_array($newdir, $this->dir))",
          "81:         $more['module_'.$i]=$newdir; $i++;   // We add the forced dir into the array $more. Just after, we add entries into $more to list of lang dir $this->dir.",
          "84:    $this->dir=array_merge($more, $this->dir);    // Forced dir ($more) are before standard dirs ($this->dir)",
          "87:   $this->origlang=$srclang;",
          "92:    $langpref=empty($_SERVER['HTTP_ACCEPT_LANGUAGE'])?'':$_SERVER['HTTP_ACCEPT_LANGUAGE'];",
          "93:    $langpref=preg_replace(\"/;([^,]*)/i\", \"\", $langpref); // Remove the 'q=x.y,' part",
          "94:    $langpref=str_replace(\"-\", \"_\", $langpref);",
          "95:    $langlist=preg_split(\"/[;,]/\", $langpref);",
          "96:    $codetouse=preg_replace('/[^_a-zA-Z]/', '', $langlist[0]);",
          "98:   else $codetouse=$srclang;",
          "101:   $langpart=explode(\"_\", $codetouse);",
          "103:   if (! empty($langpart[1])) // If it's for a codetouse that is a long code xx_YY",
          "106:    $longforshort=array('ar'=>'ar_SA');",
          "107:    $longforshortexcep=array('ar_EG');",
          "108:    if (isset($longforshort[strtolower($langpart[0])]) && ! in_array($codetouse, $longforshortexcep)) $srclang=$longforshort[strtolower($langpart[0])];",
          "109:    elseif (! is_numeric($langpart[1])) {  // Second part YY may be a numeric with some Chrome browser",
          "110:     $srclang=strtolower($langpart[0]).\"_\".strtoupper($langpart[1]);",
          "111:     $longforlong=array('no_nb'=>'nb_NO');",
          "112:     if (isset($longforlong[strtolower($srclang)])) $srclang=$longforlong[strtolower($srclang)];",
          "114:    else $srclang=strtolower($langpart[0]).\"_\".strtoupper($langpart[0]);",
          "118:          $longforshort=array('ar'=>'ar_SA', 'el'=>'el_GR', 'ca'=>'ca_ES', 'en'=>'en_US', 'nb'=>'nb_NO', 'no'=>'nb_NO');",
          "119:    if (isset($longforshort[strtolower($langpart[0])])) $srclang=$longforshort[strtolower($langpart[0])];",
          "120:    elseif (! empty($langpart[0])) $srclang=strtolower($langpart[0]).\"_\".strtoupper($langpart[0]);",
          "121:    else $srclang='en_US';",
          "124:   $this->defaultlang=$srclang;",
          "",
          "[Added Lines]",
          "72:   if (!empty($conf->global->MAIN_FORCELANGDIR))",
          "74:    $more = array();",
          "75:    $i = 0;",
          "76:    foreach ($conf->file->dol_document_root as $dir)",
          "78:     $newdir = $dir.$conf->global->MAIN_FORCELANGDIR; // For example $conf->global->MAIN_FORCELANGDIR is '/mymodule' meaning we search files into '/mymodule/langs/xx_XX'",
          "79:     if (!in_array($newdir, $this->dir))",
          "81:         $more['module_'.$i] = $newdir; $i++; // We add the forced dir into the array $more. Just after, we add entries into $more to list of lang dir $this->dir.",
          "84:    $this->dir = array_merge($more, $this->dir); // Forced dir ($more) are before standard dirs ($this->dir)",
          "87:   $this->origlang = $srclang;",
          "92:    $langpref = empty($_SERVER['HTTP_ACCEPT_LANGUAGE']) ? '' : $_SERVER['HTTP_ACCEPT_LANGUAGE'];",
          "93:    $langpref = preg_replace(\"/;([^,]*)/i\", \"\", $langpref); // Remove the 'q=x.y,' part",
          "94:    $langpref = str_replace(\"-\", \"_\", $langpref);",
          "95:    $langlist = preg_split(\"/[;,]/\", $langpref);",
          "96:    $codetouse = preg_replace('/[^_a-zA-Z]/', '', $langlist[0]);",
          "98:   else $codetouse = $srclang;",
          "101:   $langpart = explode(\"_\", $codetouse);",
          "103:   if (!empty($langpart[1])) // If it's for a codetouse that is a long code xx_YY",
          "106:    $longforshort = array('ar'=>'ar_SA');",
          "107:    $longforshortexcep = array('ar_EG');",
          "108:    if (isset($longforshort[strtolower($langpart[0])]) && !in_array($codetouse, $longforshortexcep)) $srclang = $longforshort[strtolower($langpart[0])];",
          "109:    elseif (!is_numeric($langpart[1])) {  // Second part YY may be a numeric with some Chrome browser",
          "110:     $srclang = strtolower($langpart[0]).\"_\".strtoupper($langpart[1]);",
          "111:     $longforlong = array('no_nb'=>'nb_NO');",
          "112:     if (isset($longforlong[strtolower($srclang)])) $srclang = $longforlong[strtolower($srclang)];",
          "114:    else $srclang = strtolower($langpart[0]).\"_\".strtoupper($langpart[0]);",
          "118:          $longforshort = array('ar'=>'ar_SA', 'el'=>'el_GR', 'ca'=>'ca_ES', 'en'=>'en_US', 'nb'=>'nb_NO', 'no'=>'nb_NO');",
          "119:    if (isset($longforshort[strtolower($langpart[0])])) $srclang = $longforshort[strtolower($langpart[0])];",
          "120:    elseif (!empty($langpart[0])) $srclang = strtolower($langpart[0]).\"_\".strtoupper($langpart[0]);",
          "121:    else $srclang = 'en_US';",
          "124:   $this->defaultlang = $srclang;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:  public function loadLangs($domains)",
          "150:  {",
          "152:      {",
          "153:          $this->load($domain);",
          "154:      }",
          "",
          "[Removed Lines]",
          "151:      foreach($domains as $domain)",
          "",
          "[Added Lines]",
          "151:      foreach ($domains as $domain)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:  public function load($domain, $alt = 0, $stopafterdirection = 0, $forcelangdir = '', $loadfromfileonly = 0)",
          "178:  {",
          "",
          "[Removed Lines]",
          "179:   global $conf,$db;",
          "",
          "[Added Lines]",
          "179:   global $conf, $db;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186:       dol_print_error('', get_class($this).\"::Load ErrorWrongParameters\");",
          "187:       return -1;",
          "188:   }",
          "196:   $newdomain = $domain;",
          "197:   $modulename = '';",
          "201:   if (preg_match('/^([^@]+)@([^@]+)$/i', $domain, $regs))",
          "202:   {",
          "203:    $newdomain = $regs[1];",
          "",
          "[Removed Lines]",
          "189:   if ($this->defaultlang == 'none_NONE') return 0;    // Special language code to not translate keys",
          "193:   if (empty($loadfromfileonly) && count($this->tab_translate) == 0) $this->loadFromDatabase($db);      // No translation was never loaded yet, so we load database.",
          "200:   $regs=array();",
          "",
          "[Added Lines]",
          "189:   if ($this->defaultlang == 'none_NONE') return 0; // Special language code to not translate keys",
          "193:   if (empty($loadfromfileonly) && count($this->tab_translate) == 0) $this->loadFromDatabase($db); // No translation was never loaded yet, so we load database.",
          "200:   $regs = array();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "205:   }",
          "209:   {",
          "211:    return 0;",
          "212:   }",
          "222:   if (empty($langofdir)) // This may occurs when load is called without setting the language and without providing a value for forcelangdir",
          "223:   {",
          "",
          "[Removed Lines]",
          "208:   if (! empty($this->_tab_loaded[$newdomain])) // File already loaded for this domain",
          "214:         $fileread=0;",
          "215:   $langofdir=(empty($forcelangdir)?$this->defaultlang:$forcelangdir);",
          "218:   $langarray=explode('_', $langofdir);",
          "219:   if ($alt < 1 && isset($langarray[1]) && (strtolower($langarray[0]) == strtolower($langarray[1]) || in_array(strtolower($langofdir), array('el_gr')))) $alt=1;",
          "220:   if ($alt < 2 && strtolower($langofdir) == 'en_us') $alt=2;",
          "",
          "[Added Lines]",
          "208:   if (!empty($this->_tab_loaded[$newdomain])) // File already loaded for this domain",
          "214:         $fileread = 0;",
          "215:   $langofdir = (empty($forcelangdir) ? $this->defaultlang : $forcelangdir);",
          "218:   $langarray = explode('_', $langofdir);",
          "219:   if ($alt < 1 && isset($langarray[1]) && (strtolower($langarray[0]) == strtolower($langarray[1]) || in_array(strtolower($langofdir), array('el_gr')))) $alt = 1;",
          "220:   if ($alt < 2 && strtolower($langofdir) == 'en_us') $alt = 2;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "225:    return -1;",
          "226:   }",
          "229:   {",
          "",
          "[Removed Lines]",
          "228:   foreach($this->dir as $searchdir)",
          "231:    $file_lang = $searchdir.($modulename?'/'.$modulename:'').\"/langs/\".$langofdir.\"/\".$newdomain.\".lang\";",
          "232:    $file_lang_osencoded=dol_osencode($file_lang);",
          "234:    $filelangexists=is_file($file_lang_osencoded);",
          "",
          "[Added Lines]",
          "228:   foreach ($this->dir as $searchdir)",
          "231:    $file_lang = $searchdir.($modulename ? '/'.$modulename : '').\"/langs/\".$langofdir.\"/\".$newdomain.\".lang\";",
          "232:    $file_lang_osencoded = dol_osencode($file_lang);",
          "234:    $filelangexists = is_file($file_lang_osencoded);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "239:    if ($filelangexists)",
          "240:    {",
          "248:     {",
          "250:     }",
          "252:     elseif (isset($conf->global->MAIN_OPTIMIZE_SPEED) && ($conf->global->MAIN_OPTIMIZE_SPEED & 0x02))",
          "253:     {",
          "255:     }",
          "257:     if ($usecachekey)",
          "",
          "[Removed Lines]",
          "242:        $found=false;",
          "245:     $usecachekey='';",
          "247:     if (! empty($conf->memcached->enabled) && ! empty($conf->global->MEMCACHED_SERVER))",
          "249:      $usecachekey=$newdomain.'_'.$langofdir.'_'.md5($file_lang);    // Should not contains special chars",
          "254:      $usecachekey=$newdomain;",
          "",
          "[Added Lines]",
          "242:        $found = false;",
          "245:     $usecachekey = '';",
          "247:     if (!empty($conf->memcached->enabled) && !empty($conf->global->MEMCACHED_SERVER))",
          "249:      $usecachekey = $newdomain.'_'.$langofdir.'_'.md5($file_lang); // Should not contains special chars",
          "254:      $usecachekey = $newdomain;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "264:      if (is_array($tmparray) && count($tmparray))",
          "265:      {",
          "271:      }",
          "272:     }",
          "275:     {",
          "276:      if ($fp = @fopen($file_lang, \"rt\"))",
          "277:      {",
          "",
          "[Removed Lines]",
          "262:         require_once DOL_DOCUMENT_ROOT .'/core/lib/memory.lib.php';",
          "263:      $tmparray=dol_getcache($usecachekey);",
          "266:             $this->tab_translate+=$tmparray; // Faster than array_merge($tmparray,$this->tab_translate). Note: If a value already exists into tab_translate, value into tmparaay is not added.",
          "269:       if ($alt == 2) $fileread=1;",
          "270:       $found=true;      // Found in dolibarr PHP cache",
          "274:     if (! $found)",
          "278:       if ($usecachekey) $tabtranslatedomain=array(); // To save lang content in cache",
          "",
          "[Added Lines]",
          "262:         require_once DOL_DOCUMENT_ROOT.'/core/lib/memory.lib.php';",
          "263:      $tmparray = dol_getcache($usecachekey);",
          "266:             $this->tab_translate += $tmparray; // Faster than array_merge($tmparray,$this->tab_translate). Note: If a value already exists into tab_translate, value into tmparaay is not added.",
          "269:       if ($alt == 2) $fileread = 1;",
          "270:       $found = true; // Found in dolibarr PHP cache",
          "274:     if (!$found)",
          "278:       if ($usecachekey) $tabtranslatedomain = array(); // To save lang content in cache",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "316:        }",
          "317:       }",
          "318:       fclose($fp);",
          "323:       if ($usecachekey && count($tabtranslatedomain))",
          "324:       {",
          "326:        if ($ressetcache < 0)",
          "327:        {",
          "329:            dol_syslog($error, LOG_ERR);",
          "330:        }",
          "331:       }",
          "334:      }",
          "335:     }",
          "336:    }",
          "",
          "[Removed Lines]",
          "319:       $fileread=1;",
          "325:        $ressetcache=dol_setcache($usecachekey, $tabtranslatedomain);",
          "328:            $error='Failed to set cache for usecachekey='.$usecachekey.' result='.$ressetcache;",
          "333:       if (empty($conf->global->MAIN_FORCELANGDIR)) break;  // Break loop on each root dir. If a module has forced dir, we do not stop loop.",
          "",
          "[Added Lines]",
          "319:       $fileread = 1;",
          "325:        $ressetcache = dol_setcache($usecachekey, $tabtranslatedomain);",
          "328:            $error = 'Failed to set cache for usecachekey='.$usecachekey.' result='.$ressetcache;",
          "333:       if (empty($conf->global->MAIN_FORCELANGDIR)) break; // Break loop on each root dir. If a module has forced dir, we do not stop loop.",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "341:   {",
          "348:   }",
          "",
          "[Removed Lines]",
          "344:    $langofdir=strtolower($langarray[0]).'_'.strtoupper($langarray[0]);",
          "345:    if ($langofdir == 'el_EL') $langofdir = 'el_GR';                     // main parent for el_CY is not 'el_EL' but 'el_GR'",
          "346:    if ($langofdir == 'ar_AR') $langofdir = 'ar_SA';                     // main parent for ar_EG is not 'ar_AR' but 'ar_SA'",
          "347:    $this->load($domain, $alt+1, $stopafterdirection, $langofdir);",
          "",
          "[Added Lines]",
          "344:    $langofdir = strtolower($langarray[0]).'_'.strtoupper($langarray[0]);",
          "345:    if ($langofdir == 'el_EL') $langofdir = 'el_GR'; // main parent for el_CY is not 'el_EL' but 'el_GR'",
          "346:    if ($langofdir == 'ar_AR') $langofdir = 'ar_SA'; // main parent for ar_EG is not 'ar_AR' but 'ar_SA'",
          "347:    $this->load($domain, $alt + 1, $stopafterdirection, $langofdir);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "352:   {",
          "357:   }",
          "360:   if ($alt == 2)",
          "361:   {",
          "365:   }",
          "369:   if (empty($loadfromfileonly))",
          "370:   {",
          "373:             {",
          "377:                 {",
          "380:                 }",
          "381:             }",
          "382:   }",
          "388:   return 1;",
          "389:  }",
          "",
          "[Removed Lines]",
          "355:    $langofdir='en_US';",
          "356:    $this->load($domain, $alt+1, $stopafterdirection, $langofdir);",
          "362:    if ($fileread) $this->_tab_loaded[$newdomain]=1;        // Set domain file as found so loaded",
          "364:    if (empty($this->_tab_loaded[$newdomain])) $this->_tab_loaded[$newdomain]=2; // Set this file as not found",
          "371:       $overwritekey='MAIN_OVERWRITE_TRANS_'.$this->defaultlang;",
          "372:             if (! empty($conf->global->$overwritekey))    // Overwrite translation with key1:newstring1,key2:newstring2",
          "375:                 $tmparray=explode(',', $conf->global->$overwritekey);",
          "376:                 foreach($tmparray as $tmp)",
          "378:                     $tmparray2=explode(':', $tmp);",
          "379:                     if (! empty($tmparray2[1])) $this->tab_translate[$tmparray2[0]]=$tmparray2[1];",
          "385:   if (! empty($this->tab_translate[\"SeparatorDecimal\"]) && ! empty($this->tab_translate[\"SeparatorThousand\"])",
          "386:   && $this->tab_translate[\"SeparatorDecimal\"] == $this->tab_translate[\"SeparatorThousand\"]) $this->tab_translate[\"SeparatorThousand\"]='';",
          "",
          "[Added Lines]",
          "355:    $langofdir = 'en_US';",
          "356:    $this->load($domain, $alt + 1, $stopafterdirection, $langofdir);",
          "362:    if ($fileread) $this->_tab_loaded[$newdomain] = 1; // Set domain file as found so loaded",
          "364:    if (empty($this->_tab_loaded[$newdomain])) $this->_tab_loaded[$newdomain] = 2; // Set this file as not found",
          "371:       $overwritekey = 'MAIN_OVERWRITE_TRANS_'.$this->defaultlang;",
          "372:             if (!empty($conf->global->$overwritekey))    // Overwrite translation with key1:newstring1,key2:newstring2",
          "375:                 $tmparray = explode(',', $conf->global->$overwritekey);",
          "376:                 foreach ($tmparray as $tmp)",
          "378:                     $tmparray2 = explode(':', $tmp);",
          "379:                     if (!empty($tmparray2[1])) $this->tab_translate[$tmparray2[0]] = $tmparray2[1];",
          "385:   if (!empty($this->tab_translate[\"SeparatorDecimal\"]) && !empty($this->tab_translate[\"SeparatorThousand\"])",
          "386:   && $this->tab_translate[\"SeparatorDecimal\"] == $this->tab_translate[\"SeparatorThousand\"]) $this->tab_translate[\"SeparatorThousand\"] = '';",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "404:  {",
          "405:   global $conf;",
          "414:   $newdomain = $domain;",
          "418:   {",
          "420:    return 0;",
          "421:   }",
          "428:   if (empty($langofdir)) // This may occurs when load is called without setting the language and without providing a value for forcelangdir",
          "429:   {",
          "",
          "[Removed Lines]",
          "407:   $domain='database';",
          "410:   if (empty($db)) return 0;    // Database handler can't be used",
          "417:   if (! empty($this->_tab_loaded[$newdomain])) // File already loaded for this domain 'database'",
          "423:   $this->_tab_loaded[$newdomain] = 1;   // We want to be sure this function is called once only for domain 'database'",
          "425:         $fileread=0;",
          "426:   $langofdir=$this->defaultlang;",
          "",
          "[Added Lines]",
          "407:   $domain = 'database';",
          "410:   if (empty($db)) return 0; // Database handler can't be used",
          "417:   if (!empty($this->_tab_loaded[$newdomain])) // File already loaded for this domain 'database'",
          "423:   $this->_tab_loaded[$newdomain] = 1; // We want to be sure this function is called once only for domain 'database'",
          "425:         $fileread = 0;",
          "426:   $langofdir = $this->defaultlang;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "432:   }",
          "441:   {",
          "443:   }",
          "445:   elseif (isset($conf->global->MAIN_OPTIMIZE_SPEED) && ($conf->global->MAIN_OPTIMIZE_SPEED & 0x02))",
          "446:   {",
          "448:   }",
          "450:   if ($usecachekey)",
          "",
          "[Removed Lines]",
          "435:   $found=false;",
          "438:   $usecachekey='';",
          "440:   if (! empty($conf->memcached->enabled) && ! empty($conf->global->MEMCACHED_SERVER))",
          "442:    $usecachekey=$newdomain.'_'.$langofdir;    // Should not contains special chars",
          "447:    $usecachekey=$newdomain;",
          "",
          "[Added Lines]",
          "435:   $found = false;",
          "438:   $usecachekey = '';",
          "440:   if (!empty($conf->memcached->enabled) && !empty($conf->global->MEMCACHED_SERVER))",
          "442:    $usecachekey = $newdomain.'_'.$langofdir; // Should not contains special chars",
          "447:    $usecachekey = $newdomain;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "457:    if (is_array($tmparray) && count($tmparray))",
          "458:    {",
          "464:    }",
          "465:   }",
          "468:   {",
          "475:       if ($resql)",
          "476:       {",
          "477:           $num = $db->num_rows($resql);",
          "478:           if ($num)",
          "479:           {",
          "482:         $i = 0;",
          "483:         while ($i < $num) // Ex: Need 225ms for all fgets on all lang file for Third party page. Same speed than file_get_contents",
          "484:         {",
          "491:       if (empty($this->tab_translate[$key]))    // If translation was already found, we must not continue, even if MAIN_FORCELANGDIR is set (MAIN_FORCELANGDIR is to replace lang dir, not to overwrite entries)",
          "",
          "[Removed Lines]",
          "455:       require_once DOL_DOCUMENT_ROOT .'/core/lib/memory.lib.php';",
          "456:    $tmparray=dol_getcache($usecachekey);",
          "459:     $this->tab_translate+=$tmparray; // Faster than array_merge($tmparray,$this->tab_translate). Note: If a valuer already exists into tab_translate, value into tmparaay is not added.",
          "462:     $fileread=1;",
          "463:     $found=true;      // Found in dolibarr PHP cache",
          "467:   if (! $found && ! empty($conf->global->MAIN_ENABLE_OVERWRITE_TRANSLATION))",
          "470:             $sql =\"SELECT transkey, transvalue FROM \".MAIN_DB_PREFIX.\"overwrite_trans where lang='\".$db->escape($this->defaultlang).\"' OR lang IS NULL\";",
          "471:             $sql.=\" AND entity IN (0, \".getEntity('overwrite_trans').\")\";",
          "472:             $sql.=$db->order(\"lang\", \"DESC\");",
          "473:       $resql=$db->query($sql);",
          "480:         if ($usecachekey) $tabtranslatedomain=array(); // To save lang content in cache",
          "485:             $obj=$db->fetch_object($resql);",
          "487:             $key=$obj->transkey;",
          "488:          $value=$obj->transvalue;",
          "",
          "[Added Lines]",
          "455:       require_once DOL_DOCUMENT_ROOT.'/core/lib/memory.lib.php';",
          "456:    $tmparray = dol_getcache($usecachekey);",
          "459:     $this->tab_translate += $tmparray; // Faster than array_merge($tmparray,$this->tab_translate). Note: If a valuer already exists into tab_translate, value into tmparaay is not added.",
          "462:     $fileread = 1;",
          "463:     $found = true; // Found in dolibarr PHP cache",
          "467:   if (!$found && !empty($conf->global->MAIN_ENABLE_OVERWRITE_TRANSLATION))",
          "470:             $sql = \"SELECT transkey, transvalue FROM \".MAIN_DB_PREFIX.\"overwrite_trans where lang='\".$db->escape($this->defaultlang).\"' OR lang IS NULL\";",
          "471:             $sql .= \" AND entity IN (0, \".getEntity('overwrite_trans').\")\";",
          "472:             $sql .= $db->order(\"lang\", \"DESC\");",
          "473:       $resql = $db->query($sql);",
          "480:         if ($usecachekey) $tabtranslatedomain = array(); // To save lang content in cache",
          "485:             $obj = $db->fetch_object($resql);",
          "487:             $key = $obj->transkey;",
          "488:          $value = $obj->transvalue;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "494:        $this->tab_translate[$key] = str_replace(array('\\\\n', '\\\\\\\\s'), array(\"\\n\", '\\s'), $value);",
          "497:       }",
          "499:          $i++;",
          "500:         }",
          "506:         if ($usecachekey && count($tabtranslatedomain))",
          "507:         {",
          "509:          if ($ressetcache < 0)",
          "510:          {",
          "512:              dol_syslog($error, LOG_ERR);",
          "513:          }",
          "514:         }",
          "",
          "[Removed Lines]",
          "496:        if ($usecachekey) $tabtranslatedomain[$key]=$value; // To save lang content in cache",
          "502:         $fileread=1;",
          "508:          $ressetcache=dol_setcache($usecachekey, $tabtranslatedomain);",
          "511:              $error='Failed to set cache for usecachekey='.$usecachekey.' result='.$ressetcache;",
          "",
          "[Added Lines]",
          "496:        if ($usecachekey) $tabtranslatedomain[$key] = $value; // To save lang content in cache",
          "502:         $fileread = 1;",
          "508:          $ressetcache = dol_setcache($usecachekey, $tabtranslatedomain);",
          "511:              $error = 'Failed to set cache for usecachekey='.$usecachekey.' result='.$ressetcache;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "520:       }",
          "521:   }",
          "527:   return 1;",
          "528:  }",
          "",
          "[Removed Lines]",
          "523:   if ($fileread) $this->_tab_loaded[$newdomain]=1; // Set domain file as loaded",
          "525:   if (empty($this->_tab_loaded[$newdomain])) $this->_tab_loaded[$newdomain]=2;           // Marque ce cas comme non trouve (no lines found for language)",
          "",
          "[Added Lines]",
          "523:   if ($fileread) $this->_tab_loaded[$newdomain] = 1; // Set domain file as loaded",
          "525:   if (empty($this->_tab_loaded[$newdomain])) $this->_tab_loaded[$newdomain] = 2; // Marque ce cas comme non trouve (no lines found for language)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "544:     {",
          "545:   global $conf, $db;",
          "550:      if (preg_match('/^Civility([0-9A-Z]+)$/i', $key, $reg))",
          "551:         {",
          "553:         }",
          "554:   elseif (preg_match('/^Currency([A-Z][A-Z][A-Z])$/i', $key, $reg))",
          "555:   {",
          "557:   }",
          "558:   elseif (preg_match('/^SendingMethod([0-9A-Z]+)$/i', $key, $reg))",
          "559:   {",
          "561:   }",
          "562:         elseif (preg_match('/^PaymentTypeShort([0-9A-Z]+)$/i', $key, $reg))",
          "563:         {",
          "565:         }",
          "566:         elseif (preg_match('/^OppStatus([0-9A-Z]+)$/i', $key, $reg))",
          "567:         {",
          "569:         }",
          "570:         elseif (preg_match('/^OrderSource([0-9A-Z]+)$/i', $key, $reg))",
          "571:         {",
          "",
          "[Removed Lines]",
          "547:   if (! is_string($key)) return 'ErrorBadValueForParamNotAString'; // Avoid multiple errors with code not using function correctly.",
          "549:   $newstr=$key;",
          "552:             $newstr=$this->getLabelFromKey($db, $reg[1], 'c_civility', 'code', 'label');",
          "556:    $newstr=$this->getLabelFromKey($db, $reg[1], 'c_currencies', 'code_iso', 'label');",
          "560:    $newstr=$this->getLabelFromKey($db, $reg[1], 'c_shipment_mode', 'code', 'libelle');",
          "564:             $newstr=$this->getLabelFromKey($db, $reg[1], 'c_paiement', 'code', 'libelle', '', 1);",
          "568:             $newstr=$this->getLabelFromKey($db, $reg[1], 'c_lead_status', 'code', 'label');",
          "",
          "[Added Lines]",
          "547:   if (!is_string($key)) return 'ErrorBadValueForParamNotAString'; // Avoid multiple errors with code not using function correctly.",
          "549:   $newstr = $key;",
          "552:             $newstr = $this->getLabelFromKey($db, $reg[1], 'c_civility', 'code', 'label');",
          "556:    $newstr = $this->getLabelFromKey($db, $reg[1], 'c_currencies', 'code_iso', 'label');",
          "560:    $newstr = $this->getLabelFromKey($db, $reg[1], 'c_shipment_mode', 'code', 'libelle');",
          "564:             $newstr = $this->getLabelFromKey($db, $reg[1], 'c_paiement', 'code', 'libelle', '', 1);",
          "568:             $newstr = $this->getLabelFromKey($db, $reg[1], 'c_lead_status', 'code', 'label');",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "601:     {",
          "602:         global $conf;",
          "605:   {",
          "611:             {",
          "614:                 {",
          "617:                 }",
          "618:             }",
          "620:             if (strpos($key, 'Format') !== 0)",
          "621:             {",
          "623:             }",
          "636:    return $str;",
          "637:   }",
          "",
          "[Removed Lines]",
          "604:      if (! empty($this->tab_translate[$key])) // Translation is available",
          "606:             $str=$this->tab_translate[$key];",
          "609:             $replacekey='MAIN_REPLACE_TRANS_'.$this->defaultlang;",
          "610:             if (! empty($conf->global->$replacekey))    // Replacement translation variable with string1:newstring1;string2:newstring2",
          "612:                 $tmparray=explode(';', $conf->global->$replacekey);",
          "613:                 foreach($tmparray as $tmp)",
          "615:                     $tmparray2=explode(':', $tmp);",
          "616:                     $str=preg_replace('/'.preg_quote($tmparray2[0]).'/', $tmparray2[1], $str);",
          "622:              $str=sprintf($str, $param1, $param2, $param3, $param4); // Replace %s and %d except for FormatXXX strings.",
          "625:    if ($maxsize) $str=dol_trunc($str, $maxsize);",
          "628:             $str=str_replace(array('<','>','\"',), array('__lt__','__gt__','__quot__'), $str);",
          "631:    $str=htmlentities($str, ENT_COMPAT, $this->charset_output); // Do not convert simple quotes in translation (strings in html are enmbraced by \"). Use dol_escape_htmltag around text in HTML content",
          "634:             $str=str_replace(array('__lt__','__gt__','__quot__'), array('<','>','\"',), $str);",
          "",
          "[Added Lines]",
          "604:      if (!empty($this->tab_translate[$key])) // Translation is available",
          "606:             $str = $this->tab_translate[$key];",
          "609:             $replacekey = 'MAIN_REPLACE_TRANS_'.$this->defaultlang;",
          "610:             if (!empty($conf->global->$replacekey))    // Replacement translation variable with string1:newstring1;string2:newstring2",
          "612:                 $tmparray = explode(';', $conf->global->$replacekey);",
          "613:                 foreach ($tmparray as $tmp)",
          "615:                     $tmparray2 = explode(':', $tmp);",
          "616:                     $str = preg_replace('/'.preg_quote($tmparray2[0]).'/', $tmparray2[1], $str);",
          "622:              $str = sprintf($str, $param1, $param2, $param3, $param4); // Replace %s and %d except for FormatXXX strings.",
          "625:    if ($maxsize) $str = dol_trunc($str, $maxsize);",
          "628:             $str = str_replace(array('<', '>', '\"',), array('__lt__', '__gt__', '__quot__'), $str);",
          "631:    $str = htmlentities($str, ENT_COMPAT, $this->charset_output); // Do not convert simple quotes in translation (strings in html are enmbraced by \"). Use dol_escape_htmltag around text in HTML content",
          "634:             $str = str_replace(array('__lt__', '__gt__', '__quot__'), array('<', '>', '\"',), $str);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "682:  {",
          "683:   global $conf;",
          "686:   {",
          "692:             {",
          "695:                 {",
          "698:                 }",
          "699:             }",
          "702:             {",
          "705:             }",
          "707:             return $str;",
          "",
          "[Removed Lines]",
          "685:   if (! empty($this->tab_translate[$key])) // Translation is available",
          "687:       $str=$this->tab_translate[$key];",
          "690:             $replacekey='MAIN_REPLACE_TRANS_'.$this->defaultlang;",
          "691:             if (! empty($conf->global->$replacekey))    // Replacement translation variable with string1:newstring1;string2:newstring2",
          "693:                 $tmparray=explode(';', $conf->global->$replacekey);",
          "694:                 foreach($tmparray as $tmp)",
          "696:                     $tmparray2=explode(':', $tmp);",
          "697:                     $str=preg_replace('/'.preg_quote($tmparray2[0]).'/', $tmparray2[1], $str);",
          "701:             if (! preg_match('/^Format/', $key))",
          "704:              $str=sprintf($str, $param1, $param2, $param3, $param4, $param5); // Replace %s and %d except for FormatXXX strings.",
          "",
          "[Added Lines]",
          "685:   if (!empty($this->tab_translate[$key])) // Translation is available",
          "687:       $str = $this->tab_translate[$key];",
          "690:             $replacekey = 'MAIN_REPLACE_TRANS_'.$this->defaultlang;",
          "691:             if (!empty($conf->global->$replacekey))    // Replacement translation variable with string1:newstring1;string2:newstring2",
          "693:                 $tmparray = explode(';', $conf->global->$replacekey);",
          "694:                 foreach ($tmparray as $tmp)",
          "696:                     $tmparray2 = explode(':', $tmp);",
          "697:                     $str = preg_replace('/'.preg_quote($tmparray2[0]).'/', $tmparray2[1], $str);",
          "701:             if (!preg_match('/^Format/', $key))",
          "704:              $str = sprintf($str, $param1, $param2, $param3, $param4, $param5); // Replace %s and %d except for FormatXXX strings.",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "752:  public function convToOutputCharset($str, $pagecodefrom = 'UTF-8')",
          "753:  {",
          "756:   return $str;",
          "757:  }",
          "",
          "[Removed Lines]",
          "754:   if ($pagecodefrom == 'ISO-8859-1' && $this->charset_output == 'UTF-8')  $str=utf8_encode($str);",
          "755:   if ($pagecodefrom == 'UTF-8' && $this->charset_output == 'ISO-8859-1') $str=utf8_decode(str_replace('\u20ac', chr(128), $str));",
          "",
          "[Added Lines]",
          "754:   if ($pagecodefrom == 'ISO-8859-1' && $this->charset_output == 'UTF-8')  $str = utf8_encode($str);",
          "755:   if ($pagecodefrom == 'UTF-8' && $this->charset_output == 'ISO-8859-1') $str = utf8_decode(str_replace('\u20ac', chr(128), $str));",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "772:   global $conf;",
          "777:   while ($dir = trim(readdir($handle)))",
          "778:   {",
          "779:    if (preg_match('/^[a-z]+_[A-Z]+/i', $dir))",
          "780:    {",
          "781:     $this->load(\"languages\");",
          "785:     if ($usecode == 2)",
          "786:     {",
          "787:         $langs_available[$dir] = $dir;",
          "788:     }",
          "790:     {",
          "791:         $langs_available[$dir] = $dir.': '.dol_trunc($this->trans('Language_'.$dir), $maxlength);",
          "792:     }",
          "",
          "[Removed Lines]",
          "775:   $handle=opendir($langdir.\"/langs\");",
          "776:   $langs_available=array();",
          "783:     if (! empty($conf->global->MAIN_LANGUAGES_ALLOWED) && ! in_array($dir, explode(',', $conf->global->MAIN_LANGUAGES_ALLOWED)) ) continue;",
          "789:     if ($usecode == 1 || ! empty($conf->global->MAIN_SHOW_LANGUAGE_CODE))",
          "",
          "[Added Lines]",
          "775:   $handle = opendir($langdir.\"/langs\");",
          "776:   $langs_available = array();",
          "783:     if (!empty($conf->global->MAIN_LANGUAGES_ALLOWED) && !in_array($dir, explode(',', $conf->global->MAIN_LANGUAGES_ALLOWED))) continue;",
          "789:     if ($usecode == 1 || !empty($conf->global->MAIN_SHOW_LANGUAGE_CODE))",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "812:     {",
          "816:   {",
          "817:    if (is_readable(dol_osencode($searchdir.\"/langs/\".$this->defaultlang.\"/\".$filename))) return true;",
          "",
          "[Removed Lines]",
          "815:   foreach($this->dir as $searchdir)",
          "",
          "[Added Lines]",
          "815:   foreach ($this->dir as $searchdir)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "844:     {",
          "845:   global $conf;",
          "851:   {",
          "859:    if (file_exists($newdir.'/functions_'.$fonc.'.lib.php'))",
          "860:    {",
          "861:     include_once $newdir.'/functions_'.$fonc.'.lib.php';",
          "863:     break;",
          "864:    }",
          "865:   }",
          "",
          "[Removed Lines]",
          "847:   $newnumber=$number;",
          "849:   $dirsubstitutions=array_merge(array(), $conf->modules_parts['substitutions']);",
          "850:   foreach($dirsubstitutions as $reldir)",
          "852:       $dir=dol_buildpath($reldir, 0);",
          "853:       $newdir=dol_osencode($dir);",
          "856:       if (! is_dir($newdir)) continue; // We must not use dol_is_dir here, function may not be loaded",
          "858:    $fonc='numberwords';",
          "862:     $newnumber=numberwords_getLabelFromNumber($this, $number, $isamount);",
          "",
          "[Added Lines]",
          "847:   $newnumber = $number;",
          "849:   $dirsubstitutions = array_merge(array(), $conf->modules_parts['substitutions']);",
          "850:   foreach ($dirsubstitutions as $reldir)",
          "852:       $dir = dol_buildpath($reldir, 0);",
          "853:       $newdir = dol_osencode($dir);",
          "856:       if (!is_dir($newdir)) continue; // We must not use dol_is_dir here, function may not be loaded",
          "858:    $fonc = 'numberwords';",
          "862:     $newnumber = numberwords_getLabelFromNumber($this, $number, $isamount);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "895:   if ($tmp != $key && $tmp != 'ErrorBadValueForParamNotAString')",
          "896:   {",
          "898:   }",
          "901:   if (isset($this->cache_labels[$tablename][$key])) // Can be defined to 0 or ''",
          "902:   {",
          "904:   }",
          "906:   $sql = \"SELECT \".$fieldlabel.\" as label\";",
          "910:   dol_syslog(get_class($this).'::getLabelFromKey', LOG_DEBUG);",
          "911:   $resql = $db->query($sql);",
          "912:   if ($resql)",
          "913:   {",
          "914:    $obj = $db->fetch_object($resql);",
          "918:    $db->free($resql);",
          "919:    return $this->cache_labels[$tablename][$key];",
          "920:   }",
          "921:   else",
          "922:   {",
          "924:    return -1;",
          "925:   }",
          "926:     }",
          "",
          "[Removed Lines]",
          "894:   $tmp=$this->transnoentitiesnoconv($key);",
          "897:    return $tmp;    // Found in language array",
          "903:    return $this->cache_labels[$tablename][$key];   // Found in cache",
          "907:   $sql.= \" FROM \".MAIN_DB_PREFIX.$tablename;",
          "908:   $sql.= \" WHERE \".$fieldkey.\" = '\".$db->escape($keyforselect?$keyforselect:$key).\"'\";",
          "909:   if ($filteronentity) $sql.= \" AND entity IN (\" . getEntity($tablename). ')';",
          "915:    if ($obj) $this->cache_labels[$tablename][$key]=$obj->label;",
          "916:    else $this->cache_labels[$tablename][$key]=$key;",
          "923:    $this->error=$db->lasterror();",
          "",
          "[Added Lines]",
          "894:   $tmp = $this->transnoentitiesnoconv($key);",
          "897:    return $tmp; // Found in language array",
          "903:    return $this->cache_labels[$tablename][$key]; // Found in cache",
          "907:   $sql .= \" FROM \".MAIN_DB_PREFIX.$tablename;",
          "908:   $sql .= \" WHERE \".$fieldkey.\" = '\".$db->escape($keyforselect ? $keyforselect : $key).\"'\";",
          "909:   if ($filteronentity) $sql .= \" AND entity IN (\".getEntity($tablename).')';",
          "915:    if ($obj) $this->cache_labels[$tablename][$key] = $obj->label;",
          "916:    else $this->cache_labels[$tablename][$key] = $key;",
          "923:    $this->error = $db->lasterror();",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "938:     public function getCurrencyAmount($currency_code, $amount)",
          "939:  {",
          "942:   if (in_array($currency_code, array('USD'))) return $symbol.$amount;",
          "943:   else return $amount.$symbol;",
          "",
          "[Removed Lines]",
          "940:   $symbol=$this->getCurrencySymbol($currency_code);",
          "",
          "[Added Lines]",
          "940:   $symbol = $this->getCurrencySymbol($currency_code);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "954:     public function getCurrencySymbol($currency_code, $forceloadall = 0)",
          "955:     {",
          "958:   if (function_exists(\"mb_convert_encoding\"))",
          "959:   {",
          "963:    {",
          "965:     {",
          "966:      $currency_sign .= mb_convert_encoding(\"&#{$unicode};\", \"UTF-8\", 'HTML-ENTITIES');",
          "967:     }",
          "968:    }",
          "969:   }",
          "972:     }",
          "",
          "[Removed Lines]",
          "956:   $currency_sign = ''; // By default return iso code",
          "960:    $this->loadCacheCurrencies($forceloadall?'':$currency_code);",
          "962:    if (isset($this->cache_currencies[$currency_code]) && ! empty($this->cache_currencies[$currency_code]['unicode']) && is_array($this->cache_currencies[$currency_code]['unicode']))",
          "964:     foreach($this->cache_currencies[$currency_code]['unicode'] as $unicode)",
          "971:   return ($currency_sign?$currency_sign:$currency_code);",
          "",
          "[Added Lines]",
          "956:   $currency_sign = ''; // By default return iso code",
          "960:    $this->loadCacheCurrencies($forceloadall ? '' : $currency_code);",
          "962:    if (isset($this->cache_currencies[$currency_code]) && !empty($this->cache_currencies[$currency_code]['unicode']) && is_array($this->cache_currencies[$currency_code]['unicode']))",
          "964:     foreach ($this->cache_currencies[$currency_code]['unicode'] as $unicode)",
          "971:   return ($currency_sign ? $currency_sign : $currency_code);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "981:  {",
          "982:   global $db;",
          "987:   $sql = \"SELECT code_iso, label, unicode\";",
          "993:   dol_syslog(get_class($this).'::loadCacheCurrencies', LOG_DEBUG);",
          "",
          "[Removed Lines]",
          "984:   if ($this->cache_currencies_all_loaded) return 0;                                           // Cache already loaded for all",
          "985:   if (! empty($currency_code) && isset($this->cache_currencies[$currency_code])) return 0;    // Cache already loaded for the currency",
          "988:   $sql.= \" FROM \".MAIN_DB_PREFIX.\"c_currencies\";",
          "989:   $sql.= \" WHERE active = 1\";",
          "990:   if (! empty($currency_code)) $sql.=\" AND code_iso = '\".$db->escape($currency_code).\"'\";",
          "",
          "[Added Lines]",
          "984:   if ($this->cache_currencies_all_loaded) return 0; // Cache already loaded for all",
          "985:   if (!empty($currency_code) && isset($this->cache_currencies[$currency_code])) return 0; // Cache already loaded for the currency",
          "988:   $sql .= \" FROM \".MAIN_DB_PREFIX.\"c_currencies\";",
          "989:   $sql .= \" WHERE active = 1\";",
          "990:   if (!empty($currency_code)) $sql .= \" AND code_iso = '\".$db->escape($currency_code).\"'\";",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "995:   if ($resql)",
          "996:   {",
          "997:    $this->load(\"dict\");",
          "1001:    $num = $db->num_rows($resql);",
          "1002:    $i = 0;",
          "",
          "[Removed Lines]",
          "998:    $label=array();",
          "999:    if (! empty($currency_code)) foreach($this->cache_currencies as $key => $val) $label[$key]=$val['label']; // Label in already loaded cache",
          "",
          "[Added Lines]",
          "998:    $label = array();",
          "999:    if (!empty($currency_code)) foreach ($this->cache_currencies as $key => $val) $label[$key] = $val['label']; // Label in already loaded cache",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1005:     $obj = $db->fetch_object($resql);",
          "1009:     $this->cache_currencies[$obj->code_iso]['unicode'] = (array) json_decode($obj->unicode, true);",
          "1010:     $label[$obj->code_iso] = $this->cache_currencies[$obj->code_iso]['label'];",
          "1011:     $i++;",
          "1012:    }",
          "",
          "[Removed Lines]",
          "1008:     $this->cache_currencies[$obj->code_iso]['label'] = ($obj->code_iso && $this->trans(\"Currency\".$obj->code_iso)!=\"Currency\".$obj->code_iso?$this->trans(\"Currency\".$obj->code_iso):($obj->label!='-'?$obj->label:''));",
          "1013:    if (empty($currency_code)) $this->cache_currencies_all_loaded=true;",
          "",
          "[Added Lines]",
          "1008:     $this->cache_currencies[$obj->code_iso]['label'] = ($obj->code_iso && $this->trans(\"Currency\".$obj->code_iso) != \"Currency\".$obj->code_iso ? $this->trans(\"Currency\".$obj->code_iso) : ($obj->label != '-' ? $obj->label : ''));",
          "1013:    if (empty($currency_code)) $this->cache_currencies_all_loaded = true;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1038:         $substitutionarray = array();",
          "1041:             $substitutionarray['lang_'.$code] = $label;",
          "1042:             $substitutionarray['__('.$code.')__'] = $label;",
          "1043:         }",
          "",
          "[Removed Lines]",
          "1040:         foreach($this->tab_translate as $code => $label) {",
          "",
          "[Added Lines]",
          "1040:         foreach ($this->tab_translate as $code => $label) {",
          "",
          "---------------"
        ],
        "htdocs/core/modules/modAgenda.class.php||htdocs/core/modules/modAgenda.class.php": [
          "File: htdocs/core/modules/modAgenda.class.php -> htdocs/core/modules/modAgenda.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "33: include_once DOL_DOCUMENT_ROOT .'/core/modules/DolibarrModules.class.php';",
          "",
          "[Added Lines]",
          "33: include_once DOL_DOCUMENT_ROOT.'/core/modules/DolibarrModules.class.php';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:   $this->version = 'dolibarr';",
          "61:   $this->const_name = 'MAIN_MODULE_'.strtoupper($this->name);",
          "65:   $this->dirs = array(\"/agenda/temp\");",
          "",
          "[Removed Lines]",
          "62:   $this->picto='action';",
          "",
          "[Added Lines]",
          "62:   $this->picto = 'action';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:   $this->config_page_url = array(\"agenda_other.php\");",
          "75:   $this->langfiles = array(\"companies\");",
          "79:         $this->module_parts = array();",
          "",
          "[Removed Lines]",
          "71:   $this->hidden = false;   // A condition to hide module",
          "72:   $this->depends = array();  // List of module class names as string that must be enabled if this module is enabled",
          "73:   $this->requiredby = array(); // List of module ids to disable if this one is disabled",
          "74:   $this->conflictwith = array(); // List of module class names as string this module is in conflict with",
          "76:   $this->phpmin = array(5,4);  // Minimum version of PHP required by module",
          "",
          "[Added Lines]",
          "71:   $this->hidden = false; // A condition to hide module",
          "72:   $this->depends = array(); // List of module class names as string that must be enabled if this module is enabled",
          "73:   $this->requiredby = array(); // List of module ids to disable if this one is disabled",
          "74:   $this->conflictwith = array(); // List of module class names as string this module is in conflict with",
          "76:   $this->phpmin = array(5, 4); // Minimum version of PHP required by module",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:   $this->const = array();",
          "90:   $resql = $this->db->query($sqlreadactions);",
          "91:   if ($resql)",
          "92:   {",
          "93:       while ($obj = $this->db->fetch_object($resql))",
          "94:       {",
          "98:           $this->const[] = array('MAIN_AGENDA_ACTIONAUTO_'.$obj->code, \"chaine\", \"1\", '', 0, 'current');",
          "99:       }",
          "",
          "[Removed Lines]",
          "89:   $sqlreadactions=\"SELECT code, label, description FROM \".MAIN_DB_PREFIX.\"c_action_trigger ORDER by rang\";",
          "96:           if (preg_match('/^TASK_/', $obj->code)) continue;      // We don't track such events by default.",
          "",
          "[Added Lines]",
          "89:   $sqlreadactions = \"SELECT code, label, description FROM \".MAIN_DB_PREFIX.\"c_action_trigger ORDER by rang\";",
          "96:           if (preg_match('/^TASK_/', $obj->code)) continue; // We don't track such events by default.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "117:   $this->cronjobs = array(",
          "118:    0=>array('label'=>'SendEmailsReminders', 'jobtype'=>'method', 'class'=>'comm/action/class/actioncomm.class.php', 'objectname'=>'ActionComm', 'method'=>'sendEmailsReminder', 'parameters'=>'', 'comment'=>'SendEMailsReminder', 'frequency'=>10, 'unitfrequency'=>60, 'priority'=>10, 'status'=>1, 'test'=>'$conf->agenda->enabled', 'datestart'=>$datestart),",
          "119:   );",
          "",
          "[Removed Lines]",
          "112:   $this->boxes = array(0=>array('file'=>'box_actions.php','enabledbydefaulton'=>'Home'));",
          "116:   $datestart=dol_now();",
          "",
          "[Added Lines]",
          "112:   $this->boxes = array(0=>array('file'=>'box_actions.php', 'enabledbydefaulton'=>'Home'));",
          "116:   $datestart = dol_now();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:   $this->rights = array();",
          "124:   $this->rights_class = 'agenda';",
          "",
          "[Removed Lines]",
          "125:   $r=0;",
          "",
          "[Added Lines]",
          "125:   $r = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "187:   $this->rights[$r][4] = 'export';",
          "",
          "[Removed Lines]",
          "190:   $this->menu = array();   // List of menus to add",
          "191:   $r=0;",
          "",
          "[Added Lines]",
          "190:   $this->menu = array(); // List of menus to add",
          "191:   $r = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "208:             'fk_menu'=>0,",
          "209:             'type'=>'top',",
          "210:             'titre'=>'TMenuAgenda',",
          "",
          "[Removed Lines]",
          "207:   $this->menu[$r]=array(",
          "",
          "[Added Lines]",
          "207:   $this->menu[$r] = array(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "429:   $r++;",
          "435:    'cac.libelle'=>\"ActionType\",",
          "439:    'p.ref' => 'ProjectRef',",
          "440:   );",
          "443:    'ac.durationp'=>\"Duree\",",
          "444:    'cac.libelle'=>\"List:c_actioncomm:libelle:libelle\",",
          "448:    'p.ref' => 'Text',",
          "449:   );",
          "452:    'cac.libelle'=>\"action\",",
          "456:    'p.ref' => 'project',",
          "457:   );",
          "472:  }",
          "473: }",
          "",
          "[Removed Lines]",
          "427:   $r=0;",
          "430:   $this->export_code[$r]=$this->rights_class.'_'.$r;",
          "431:   $this->export_label[$r]=\"ExportDataset_event1\";",
          "432:   $this->export_permission[$r]=array(array(\"agenda\",\"export\"));",
          "433:   $this->export_fields_array[$r]=array('ac.id'=>\"IdAgenda\",'ac.ref_ext'=>\"ExternalRef\",'ac.datec'=>\"DateCreation\",'ac.datep'=>\"DateActionBegin\",",
          "434:    'ac.datep2'=>\"DateActionEnd\",'ac.label'=>\"Title\",'ac.note'=>\"Note\",'ac.percent'=>\"Percent\",'ac.durationp'=>\"Duration\",",
          "436:    's.rowid'=>\"IdCompany\",'s.nom'=>'CompanyName','s.address'=>'Address','s.zip'=>'Zip','s.town'=>'Town',",
          "437:    'co.code'=>'CountryCode','s.phone'=>'Phone','s.siren'=>'ProfId1','s.siret'=>'ProfId2','s.ape'=>'ProfId3','s.idprof4'=>'ProfId4','s.idprof5'=>'ProfId5','s.idprof6'=>'ProfId6',",
          "438:    's.code_compta'=>'CustomerAccountancyCode','s.code_compta_fournisseur'=>'SupplierAccountancyCode','s.tva_intra'=>'VATIntra',",
          "441:   $this->export_TypeFields_array[$r]=array('ac.ref_ext'=>\"Text\",'ac.datec'=>\"Date\",'ac.datep'=>\"Date\",",
          "442:    'ac.datep2'=>\"Date\",'ac.label'=>\"Text\",'ac.note'=>\"Text\",'ac.percent'=>\"Numeric\",",
          "445:    's.nom'=>'Text','s.address'=>'Text','s.zip'=>'Text','s.town'=>'Text',",
          "446:    'co.code'=>'Text','s.phone'=>'Text','s.siren'=>'Text','s.siret'=>'Text','s.ape'=>'Text','s.idprof4'=>'Text','s.idprof5'=>'Text','s.idprof6'=>'Text',",
          "447:    's.code_compta'=>'Text','s.code_compta_fournisseur'=>'Text','s.tva_intra'=>'Text',",
          "450:   $this->export_entities_array[$r]=array('ac.id'=>\"action\",'ac.ref_ext'=>\"action\",'ac.datec'=>\"action\",'ac.datep'=>\"action\",",
          "451:    'ac.datep2'=>\"action\",'ac.label'=>\"action\",'ac.note'=>\"action\",'ac.percent'=>\"action\",'ac.durationp'=>\"action\",",
          "453:    's.rowid'=>\"company\",'s.nom'=>'company','s.address'=>'company','s.zip'=>'company','s.town'=>'company',",
          "454:    'co.code'=>'company','s.phone'=>'company','s.siren'=>'company','s.siret'=>'company','s.ape'=>'company','s.idprof4'=>'company','s.idprof5'=>'company','s.idprof6'=>'company',",
          "455:    's.code_compta'=>'company','s.code_compta_fournisseur'=>'company','s.tva_intra'=>'company',",
          "459:   $this->export_sql_start[$r]='SELECT DISTINCT ';",
          "460:   $this->export_sql_end[$r]  =' FROM  '.MAIN_DB_PREFIX.'actioncomm as ac';",
          "461:   $this->export_sql_end[$r] .=' LEFT JOIN '.MAIN_DB_PREFIX.'c_actioncomm as cac on ac.fk_action = cac.id';",
          "462:   if (! empty($user) && empty($user->rights->agenda->allactions->read)) $this->export_sql_end[$r] .=' LEFT JOIN '.MAIN_DB_PREFIX.'actioncomm_resources acr on ac.id = acr.fk_actioncomm';",
          "463:   $this->export_sql_end[$r] .=' LEFT JOIN '.MAIN_DB_PREFIX.'socpeople as sp on ac.fk_contact = sp.rowid';",
          "464:   $this->export_sql_end[$r] .=' LEFT JOIN '.MAIN_DB_PREFIX.'societe as s on ac.fk_soc = s.rowid';",
          "465:   if (! empty($user) && empty($user->rights->societe->client->voir)) $this->export_sql_end[$r] .=' LEFT JOIN '.MAIN_DB_PREFIX.'societe_commerciaux as sc ON sc.fk_soc = s.rowid';",
          "466:   $this->export_sql_end[$r] .=' LEFT JOIN '.MAIN_DB_PREFIX.'c_country as co on s.fk_pays = co.rowid';",
          "467:   $this->export_sql_end[$r] .= \" LEFT JOIN \" . MAIN_DB_PREFIX . \"projet as p ON p.rowid = ac.fk_project\";",
          "468:   $this->export_sql_end[$r] .=' WHERE ac.entity IN ('.getEntity('agenda').')';",
          "469:   if (empty($user->rights->societe->client->voir)) $this->export_sql_end[$r] .=' AND (sc.fk_user = '.(empty($user)?0:$user->id).' OR ac.fk_soc IS NULL)';",
          "470:   if (empty($user->rights->agenda->allactions->read)) $this->export_sql_end[$r] .=' AND acr.fk_element = '.(empty($user)?0:$user->id);",
          "471:   $this->export_sql_order[$r] =' ORDER BY ac.datep';",
          "",
          "[Added Lines]",
          "427:   $r = 0;",
          "430:   $this->export_code[$r] = $this->rights_class.'_'.$r;",
          "431:   $this->export_label[$r] = \"ExportDataset_event1\";",
          "432:   $this->export_permission[$r] = array(array(\"agenda\", \"export\"));",
          "433:   $this->export_fields_array[$r] = array('ac.id'=>\"IdAgenda\", 'ac.ref_ext'=>\"ExternalRef\", 'ac.datec'=>\"DateCreation\", 'ac.datep'=>\"DateActionBegin\",",
          "434:    'ac.datep2'=>\"DateActionEnd\", 'ac.label'=>\"Title\", 'ac.note'=>\"Note\", 'ac.percent'=>\"Percent\", 'ac.durationp'=>\"Duration\",",
          "436:    's.rowid'=>\"IdCompany\", 's.nom'=>'CompanyName', 's.address'=>'Address', 's.zip'=>'Zip', 's.town'=>'Town',",
          "437:    'co.code'=>'CountryCode', 's.phone'=>'Phone', 's.siren'=>'ProfId1', 's.siret'=>'ProfId2', 's.ape'=>'ProfId3', 's.idprof4'=>'ProfId4', 's.idprof5'=>'ProfId5', 's.idprof6'=>'ProfId6',",
          "438:    's.code_compta'=>'CustomerAccountancyCode', 's.code_compta_fournisseur'=>'SupplierAccountancyCode', 's.tva_intra'=>'VATIntra',",
          "441:   $this->export_TypeFields_array[$r] = array('ac.ref_ext'=>\"Text\", 'ac.datec'=>\"Date\", 'ac.datep'=>\"Date\",",
          "442:    'ac.datep2'=>\"Date\", 'ac.label'=>\"Text\", 'ac.note'=>\"Text\", 'ac.percent'=>\"Numeric\",",
          "445:    's.nom'=>'Text', 's.address'=>'Text', 's.zip'=>'Text', 's.town'=>'Text',",
          "446:    'co.code'=>'Text', 's.phone'=>'Text', 's.siren'=>'Text', 's.siret'=>'Text', 's.ape'=>'Text', 's.idprof4'=>'Text', 's.idprof5'=>'Text', 's.idprof6'=>'Text',",
          "447:    's.code_compta'=>'Text', 's.code_compta_fournisseur'=>'Text', 's.tva_intra'=>'Text',",
          "450:   $this->export_entities_array[$r] = array('ac.id'=>\"action\", 'ac.ref_ext'=>\"action\", 'ac.datec'=>\"action\", 'ac.datep'=>\"action\",",
          "451:    'ac.datep2'=>\"action\", 'ac.label'=>\"action\", 'ac.note'=>\"action\", 'ac.percent'=>\"action\", 'ac.durationp'=>\"action\",",
          "453:    's.rowid'=>\"company\", 's.nom'=>'company', 's.address'=>'company', 's.zip'=>'company', 's.town'=>'company',",
          "454:    'co.code'=>'company', 's.phone'=>'company', 's.siren'=>'company', 's.siret'=>'company', 's.ape'=>'company', 's.idprof4'=>'company', 's.idprof5'=>'company', 's.idprof6'=>'company',",
          "455:    's.code_compta'=>'company', 's.code_compta_fournisseur'=>'company', 's.tva_intra'=>'company',",
          "459:   $this->export_sql_start[$r] = 'SELECT DISTINCT ';",
          "460:   $this->export_sql_end[$r]  = ' FROM  '.MAIN_DB_PREFIX.'actioncomm as ac';",
          "461:   $this->export_sql_end[$r] .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_actioncomm as cac on ac.fk_action = cac.id';",
          "462:   if (!empty($user) && empty($user->rights->agenda->allactions->read)) $this->export_sql_end[$r] .= ' LEFT JOIN '.MAIN_DB_PREFIX.'actioncomm_resources acr on ac.id = acr.fk_actioncomm';",
          "463:   $this->export_sql_end[$r] .= ' LEFT JOIN '.MAIN_DB_PREFIX.'socpeople as sp on ac.fk_contact = sp.rowid';",
          "464:   $this->export_sql_end[$r] .= ' LEFT JOIN '.MAIN_DB_PREFIX.'societe as s on ac.fk_soc = s.rowid';",
          "465:   if (!empty($user) && empty($user->rights->societe->client->voir)) $this->export_sql_end[$r] .= ' LEFT JOIN '.MAIN_DB_PREFIX.'societe_commerciaux as sc ON sc.fk_soc = s.rowid';",
          "466:   $this->export_sql_end[$r] .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_country as co on s.fk_pays = co.rowid';",
          "467:   $this->export_sql_end[$r] .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"projet as p ON p.rowid = ac.fk_project\";",
          "468:   $this->export_sql_end[$r] .= ' WHERE ac.entity IN ('.getEntity('agenda').')';",
          "469:   if (empty($user->rights->societe->client->voir)) $this->export_sql_end[$r] .= ' AND (sc.fk_user = '.(empty($user) ? 0 : $user->id).' OR ac.fk_soc IS NULL)';",
          "470:   if (empty($user->rights->agenda->allactions->read)) $this->export_sql_end[$r] .= ' AND acr.fk_element = '.(empty($user) ? 0 : $user->id);",
          "471:   $this->export_sql_order[$r] = ' ORDER BY ac.datep';",
          "",
          "---------------"
        ],
        "htdocs/loan/list.php||htdocs/loan/list.php": [
          "File: htdocs/loan/list.php -> htdocs/loan/list.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: require_once DOL_DOCUMENT_ROOT.'/loan/class/loan.class.php';",
          "34: $socid = GETPOST('socid', 'int');",
          "36: $result = restrictedArea($user, 'loan', '', '', '');",
          "39: $sortfield = GETPOST('sortfield', 'alpha');",
          "40: $sortorder = GETPOST('sortorder', 'alpha');",
          "41: $page = GETPOST('page', 'int');",
          "",
          "[Removed Lines]",
          "31: $langs->loadLangs(array(\"loan\",\"compta\",\"banks\",\"bills\"));",
          "35: if ($user->socid) $socid=$user->socid;",
          "38: $limit = GETPOST('limit', 'int')?GETPOST('limit', 'int'):$conf->liste_limit;",
          "",
          "[Added Lines]",
          "31: $langs->loadLangs(array(\"loan\", \"compta\", \"banks\", \"bills\"));",
          "35: if ($user->socid) $socid = $user->socid;",
          "38: $limit = GETPOST('limit', 'int') ?GETPOST('limit', 'int') : $conf->liste_limit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144: {",
          "145:  $i = 0;",
          "156:  if ($user->rights->loan->write)",
          "157:  {",
          "159:  }",
          "161:  print '<form method=\"POST\" id=\"searchFormList\" action=\"'.$_SERVER[\"PHP_SELF\"].'\">'.\"\\n\";",
          "",
          "[Removed Lines]",
          "147:  $param='';",
          "148:  if (! empty($contextpage) && $contextpage != $_SERVER[\"PHP_SELF\"]) $param.='&contextpage='.urlencode($contextpage);",
          "149:  if ($limit > 0 && $limit != $conf->liste_limit) $param.='&limit='.urlencode($limit);",
          "150:  if ($search_ref) $param.=\"&search_ref=\".urlencode($search_ref);",
          "151:  if ($search_label) $param.=\"&search_label=\".urlencode($search_label);",
          "152:  if ($search_amount) $param.=\"&search_amount=\".urlencode($search_amount);",
          "153:  if ($optioncss != '') $param.='&optioncss='.urlencode($optioncss);",
          "155:  $newcardbutton='';",
          "158:         $newcardbutton.= dolGetButtonTitle($langs->trans('NewLoan'), '', 'fa fa-plus-circle', DOL_URL_ROOT.'/loan/card.php?action=create');",
          "",
          "[Added Lines]",
          "147:  $param = '';",
          "148:  if (!empty($contextpage) && $contextpage != $_SERVER[\"PHP_SELF\"]) $param .= '&contextpage='.urlencode($contextpage);",
          "149:  if ($limit > 0 && $limit != $conf->liste_limit) $param .= '&limit='.urlencode($limit);",
          "150:  if ($search_ref) $param .= \"&search_ref=\".urlencode($search_ref);",
          "151:  if ($search_label) $param .= \"&search_label=\".urlencode($search_label);",
          "152:  if ($search_amount) $param .= \"&search_amount=\".urlencode($search_amount);",
          "153:  if ($optioncss != '') $param .= '&optioncss='.urlencode($optioncss);",
          "155:  $newcardbutton = '';",
          "158:         $newcardbutton .= dolGetButtonTitle($langs->trans('NewLoan'), '', 'fa fa-plus-circle', DOL_URL_ROOT.'/loan/card.php?action=create');",
          "",
          "---------------"
        ],
        "htdocs/website/class/websitepage.class.php||htdocs/website/class/websitepage.class.php": [
          "File: htdocs/website/class/websitepage.class.php -> htdocs/website/class/websitepage.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "436:   $object = new self($this->db);",
          "441:   }",
          "444:   if (empty($newref)) {",
          "445:    $langs->load(\"errors\");",
          "447:    return -1;",
          "448:   }",
          "",
          "[Removed Lines]",
          "439:   if (empty($newref) && ! empty($newtitle)) {",
          "440:    $newref=strtolower(dol_sanitizeFileName(preg_replace('/\\s+/', '-', $newtitle), '-', 1));",
          "446:    $this->error=$langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"WEBSITE_TITLE\"));",
          "",
          "[Added Lines]",
          "439:   if (empty($newref) && !empty($newtitle)) {",
          "440:    $newref = strtolower(dol_sanitizeFileName(preg_replace('/\\s+/', '-', $newtitle), '-', 1));",
          "446:    $this->error = $langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"WEBSITE_TITLE\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}