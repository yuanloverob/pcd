{
  "cve_id": "CVE-2022-24897",
  "cve_desc": "APIs to evaluate content with Velocity is a package for APIs to evaluate content with Velocity. Starting with version 2.3 and prior to 12.6.7, 12.10.3, and 13.0, the velocity scripts are not properly sandboxed against using the Java File API to perform read or write operations on the filesystem. Writing an attacking script in Velocity requires the Script rights in XWiki so not all users can use it, and it also requires finding an XWiki API which returns a File. The problem has been patched in versions 12.6.7, 12.10.3, and 13.0. There is no easy workaround for fixing this vulnerability other than upgrading and being careful when giving Script rights.",
  "repo": "xwiki/xwiki-commons",
  "patch_hash": "215951cfb0f808d0bf5b1097c9e7d1e503449ab8",
  "patch_info": {
    "commit_hash": "215951cfb0f808d0bf5b1097c9e7d1e503449ab8",
    "repo": "xwiki/xwiki-commons",
    "commit_url": "https://github.com/xwiki/xwiki-commons/commit/215951cfb0f808d0bf5b1097c9e7d1e503449ab8",
    "files": [
      "xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java",
      "xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java"
    ],
    "message": "XWIKI-5168: Don't allow some methods in velocity introspector (#127)",
    "before_after_code_files": [
      "xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java||xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java",
      "xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java||xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java"
    ]
  },
  "patch_diff": {
    "xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java||xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java": [
      "File: xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java -> xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: package org.xwiki.velocity.introspection;",
      "22: import java.util.HashSet;",
      "23: import java.util.Set;",
      "25: import org.apache.velocity.util.introspection.SecureIntrospectorImpl;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.io.File;",
      "23: import java.util.Arrays;",
      "24: import java.util.HashMap;",
      "26: import java.util.Map;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34: public class SecureIntrospector extends SecureIntrospectorImpl",
      "35: {",
      "",
      "[Removed Lines]",
      "36:     private final Set<String> secureClassMethods = new HashSet<>();",
      "",
      "[Added Lines]",
      "40:     private static final String GETNAME = \"getname\";",
      "41:     private final Map<Class, Set<String>> whitelistedMethods;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "44:     {",
      "45:         super(badClasses, badPackages, log);",
      "73:     }",
      "75:     @Override",
      "76:     public boolean checkObjectExecutePermission(Class clazz, String methodName)",
      "77:     {",
      "82:         }",
      "83:     }",
      "84: }",
      "",
      "[Removed Lines]",
      "47:         this.secureClassMethods.add(\"getname\");",
      "48:         this.secureClassMethods.add(\"getName\");",
      "49:         this.secureClassMethods.add(\"getsimpleName\");",
      "50:         this.secureClassMethods.add(\"getSimpleName\");",
      "52:         this.secureClassMethods.add(\"isarray\");",
      "53:         this.secureClassMethods.add(\"isArray\");",
      "54:         this.secureClassMethods.add(\"isassignablefrom\");",
      "55:         this.secureClassMethods.add(\"isAssignableFrom\");",
      "56:         this.secureClassMethods.add(\"isenum\");",
      "57:         this.secureClassMethods.add(\"isEnum\");",
      "58:         this.secureClassMethods.add(\"isinstance\");",
      "59:         this.secureClassMethods.add(\"isInstance\");",
      "60:         this.secureClassMethods.add(\"isinterface\");",
      "61:         this.secureClassMethods.add(\"isInterface\");",
      "62:         this.secureClassMethods.add(\"islocalClass\");",
      "63:         this.secureClassMethods.add(\"isLocalClass\");",
      "64:         this.secureClassMethods.add(\"ismemberclass\");",
      "65:         this.secureClassMethods.add(\"isMemberClass\");",
      "66:         this.secureClassMethods.add(\"isprimitive\");",
      "67:         this.secureClassMethods.add(\"isPrimitive\");",
      "68:         this.secureClassMethods.add(\"issynthetic\");",
      "69:         this.secureClassMethods.add(\"isSynthetic\");",
      "70:         this.secureClassMethods.add(\"getEnumConstants\");",
      "78:         if (Class.class.isAssignableFrom(clazz) && methodName != null && this.secureClassMethods.contains(methodName)) {",
      "79:             return true;",
      "80:         } else {",
      "81:             return super.checkObjectExecutePermission(clazz, methodName);",
      "",
      "[Added Lines]",
      "52:         this.whitelistedMethods = new HashMap<>();",
      "53:         this.prepareWhitelistClass();",
      "54:         this.prepareWhiteListFile();",
      "55:     }",
      "57:     private void prepareWhitelistClass()",
      "58:     {",
      "59:         Set<String> whitelist = new HashSet<>(Arrays.asList(",
      "60:             GETNAME,",
      "61:             \"getsimpleName\",",
      "62:             \"isarray\",",
      "63:             \"isassignablefrom\",",
      "64:             \"isenum\",",
      "65:             \"isinstance\",",
      "66:             \"isinterface\",",
      "67:             \"islocalclass\",",
      "68:             \"ismemberclass\",",
      "69:             \"isprimitive\",",
      "70:             \"issynthetic\",",
      "71:             \"getenumconstants\"",
      "72:         ));",
      "73:         this.whitelistedMethods.put(Class.class, whitelist);",
      "74:     }",
      "76:     private void prepareWhiteListFile()",
      "77:     {",
      "78:         Set<String> whitelist = new HashSet<>(Arrays.asList(",
      "79:             \"canexecute\",",
      "80:             \"canread\",",
      "81:             \"canwrite\",",
      "82:             \"compareto\",",
      "83:             \"createtempfile\",",
      "84:             \"equals\",",
      "85:             \"getabsolutefile\",",
      "86:             \"getabsolutepath\",",
      "87:             \"getcanonicalfile\",",
      "88:             \"getcanonicalpath\",",
      "89:             \"getfreespace\",",
      "90:             GETNAME,",
      "91:             \"getparent\",",
      "92:             \"getparentfile\",",
      "93:             \"getpath\",",
      "94:             \"gettotalspace\",",
      "95:             \"getusablespace\",",
      "96:             \"hashcode\",",
      "97:             \"isabsolute\",",
      "98:             \"isdirectory\",",
      "99:             \"isfile\",",
      "100:             \"ishidden\",",
      "101:             \"lastmodified\",",
      "102:             \"length\",",
      "103:             \"topath\",",
      "104:             \"tostring\",",
      "105:             \"touri\",",
      "106:             \"tourl\",",
      "107:             \"getclass\"",
      "108:         ));",
      "109:         this.whitelistedMethods.put(File.class, whitelist);",
      "115:         Boolean result = null;",
      "116:         if (methodName != null) {",
      "117:             for (Map.Entry<Class, Set<String>> classSetEntry : this.whitelistedMethods.entrySet()) {",
      "118:                 if (classSetEntry.getKey().isAssignableFrom(clazz)) {",
      "119:                     result = classSetEntry.getValue().contains(methodName.toLowerCase());",
      "120:                     break;",
      "121:                 }",
      "122:             }",
      "123:         }",
      "125:         if (result == null) {",
      "126:             result = super.checkObjectExecutePermission(clazz, methodName);",
      "128:         return result;",
      "",
      "---------------"
    ],
    "xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java||xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java": [
      "File: xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java -> xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: package org.xwiki.velocity.introspection;",
      "22: import java.io.File;",
      "23: import java.util.ArrayList;",
      "25: import org.junit.jupiter.api.Test;",
      "26: import org.mockito.Mock;",
      "27: import org.slf4j.Logger;",
      "29: import static org.junit.jupiter.api.Assertions.assertFalse;",
      "30: import static org.junit.jupiter.api.Assertions.assertTrue;",
      "37: class SecureIntrospectorTest",
      "38: {",
      "39:     @Mock",
      "40:     private Logger logger;",
      "42:     class CustomFile extends File",
      "43:     {",
      "44:         public CustomFile(String s)",
      "45:         {",
      "46:             super(s);",
      "47:         }",
      "48:     }",
      "50:     @Test",
      "51:     void checkObjectExecutePermissionWithClass()",
      "52:     {",
      "53:         SecureIntrospector secureIntrospector = new SecureIntrospector(new String[] {}, new String[] {}, this.logger);",
      "54:         assertTrue(secureIntrospector.checkObjectExecutePermission(Class.class, \"isLocalClass\"));",
      "55:     }",
      "57:     @Test",
      "58:     void checkObjectExecutePermissionWithFile()",
      "59:     {",
      "60:         SecureIntrospector secureIntrospector = new SecureIntrospector(new String[] {}, new String[] {}, this.logger);",
      "61:         assertTrue(secureIntrospector.checkObjectExecutePermission(File.class, \"toString\"));",
      "62:         assertFalse(secureIntrospector.checkObjectExecutePermission(File.class, \"mkdir\"));",
      "64:         assertTrue(secureIntrospector.checkObjectExecutePermission(File.class, \"tostring\"));",
      "65:         assertFalse(secureIntrospector.checkObjectExecutePermission(File.class, \"renameto\"));",
      "66:         assertFalse(secureIntrospector.checkObjectExecutePermission(File.class, \"renameTo\"));",
      "68:         assertTrue(secureIntrospector.checkObjectExecutePermission(CustomFile.class, \"toString\"));",
      "69:         assertFalse(secureIntrospector.checkObjectExecutePermission(CustomFile.class, \"mkdir\"));",
      "70:     }",
      "72:     @Test",
      "73:     void checkObjectExecutePermissionBlacklistedClass()",
      "74:     {",
      "75:         SecureIntrospector secureIntrospector = new SecureIntrospector(",
      "76:             new String[] { \"java.util.ArrayList\" }, new String[] {}, this.logger);",
      "77:         assertTrue(secureIntrospector.checkObjectExecutePermission(File.class, \"toString\"));",
      "78:         assertFalse(secureIntrospector.checkObjectExecutePermission(ArrayList.class, \"toString\"));",
      "79:     }",
      "80: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "955e3b20fb03344fc595517a53cd7e41719fb27c",
      "candidate_info": {
        "commit_hash": "955e3b20fb03344fc595517a53cd7e41719fb27c",
        "repo": "xwiki/xwiki-commons",
        "commit_url": "https://github.com/xwiki/xwiki-commons/commit/955e3b20fb03344fc595517a53cd7e41719fb27c",
        "files": [
          "xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java"
        ],
        "message": "XCOMMONS-1944: The getEnumConstants is not a secure method in regard to velocity's SecureIntrospector",
        "before_after_code_files": [
          "xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java||xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java||xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java"
          ],
          "candidate": [
            "xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java||xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java"
          ]
        }
      },
      "candidate_diff": {
        "xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java||xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java": [
          "File: xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java -> xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:         this.secureClassMethods.add(\"isPrimitive\");",
          "68:         this.secureClassMethods.add(\"issynthetic\");",
          "69:         this.secureClassMethods.add(\"isSynthetic\");",
          "72:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:         this.secureClassMethods.add(\"getEnumConstants\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e7b266d9fdfc9c3c08981ceab845d91acb8b732",
      "candidate_info": {
        "commit_hash": "2e7b266d9fdfc9c3c08981ceab845d91acb8b732",
        "repo": "xwiki/xwiki-commons",
        "commit_url": "https://github.com/xwiki/xwiki-commons/commit/2e7b266d9fdfc9c3c08981ceab845d91acb8b732",
        "files": [
          "xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java"
        ],
        "message": "[Misc] Mockito is not initialized so the @Mock annotation cannot work and thus the logger is always null and since the test is passing it means we don't need a mock for it FTM...",
        "before_after_code_files": [
          "xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java||xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java||xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java"
          ],
          "candidate": [
            "xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java||xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java"
          ]
        }
      },
      "candidate_diff": {
        "xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java||xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java": [
          "File: xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java -> xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.apache.commons.lang3.StringUtils;",
          "28: import org.junit.jupiter.api.Test;",
          "32: import static org.junit.jupiter.api.Assertions.assertFalse;",
          "33: import static org.junit.jupiter.api.Assertions.assertTrue;",
          "",
          "[Removed Lines]",
          "29: import org.mockito.Mock;",
          "30: import org.slf4j.Logger;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: class SecureIntrospectorTest",
          "41: {",
          "45:     class CustomFile extends File",
          "46:     {",
          "47:         public CustomFile(String s)",
          "",
          "[Removed Lines]",
          "42:     @Mock",
          "43:     private Logger logger;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:     @Test",
          "54:     void checkObjectExecutePermissionWithClass()",
          "55:     {",
          "57:         assertTrue(secureIntrospector.checkObjectExecutePermission(Class.class, \"isLocalClass\"));",
          "58:     }",
          "60:     @Test",
          "61:     void checkObjectExecutePermissionWithFile()",
          "62:     {",
          "64:         assertTrue(secureIntrospector.checkObjectExecutePermission(File.class, \"toString\"));",
          "65:         assertFalse(secureIntrospector.checkObjectExecutePermission(File.class, \"mkdir\"));",
          "",
          "[Removed Lines]",
          "56:         SecureIntrospector secureIntrospector = new SecureIntrospector(new String[] {}, new String[] {}, this.logger);",
          "63:         SecureIntrospector secureIntrospector = new SecureIntrospector(new String[] {}, new String[] {}, this.logger);",
          "",
          "[Added Lines]",
          "51:         SecureIntrospector secureIntrospector = new SecureIntrospector(new String[] {}, new String[] {}, null);",
          "58:         SecureIntrospector secureIntrospector = new SecureIntrospector(new String[] {}, new String[] {}, null);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "76:     void checkObjectExecutePermissionBlacklistedClass()",
          "77:     {",
          "78:         SecureIntrospector secureIntrospector = new SecureIntrospector(",
          "80:         assertTrue(secureIntrospector.checkObjectExecutePermission(File.class, \"toString\"));",
          "81:         assertFalse(secureIntrospector.checkObjectExecutePermission(ArrayList.class, \"toString\"));",
          "82:     }",
          "",
          "[Removed Lines]",
          "79:             new String[] { \"java.util.ArrayList\" }, new String[] {}, this.logger);",
          "",
          "[Added Lines]",
          "74:             new String[] { \"java.util.ArrayList\" }, new String[] {}, null);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "84:     @Test",
          "85:     void whiteListMethodAreStoredLowercase()",
          "86:     {",
          "88:         Map<Class, Set<String>> whitelistedMethods = secureIntrospector.getWhitelistedMethods();",
          "90:         for (Map.Entry<Class, Set<String>> classSetEntry : whitelistedMethods.entrySet()) {",
          "",
          "[Removed Lines]",
          "87:         SecureIntrospector secureIntrospector = new SecureIntrospector(new String[] {}, new String[] {}, this.logger);",
          "",
          "[Added Lines]",
          "82:         SecureIntrospector secureIntrospector = new SecureIntrospector(new String[] {}, new String[] {}, null);",
          "",
          "---------------"
        ]
      }
    }
  ]
}