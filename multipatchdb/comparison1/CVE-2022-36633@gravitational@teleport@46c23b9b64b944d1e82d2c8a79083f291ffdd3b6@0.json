{
  "cve_id": "CVE-2022-36633",
  "cve_desc": "Teleport 9.3.6 is vulnerable to Command injection leading to Remote Code Execution. An attacker can craft a malicious ssh agent installation link by URL encoding a bash escape with carriage return line feed. This url encoded payload can be used in place of a token and sent to a user in a social engineering attack. This is fully unauthenticated attack utilizing the trusted teleport server to deliver the payload.",
  "repo": "gravitational/teleport",
  "patch_hash": "46c23b9b64b944d1e82d2c8a79083f291ffdd3b6",
  "patch_info": {
    "commit_hash": "46c23b9b64b944d1e82d2c8a79083f291ffdd3b6",
    "repo": "gravitational/teleport",
    "commit_url": "https://github.com/gravitational/teleport/pull/14726/commits/46c23b9b64b944d1e82d2c8a79083f291ffdd3b6",
    "files": [
      "lib/auth/auth_with_roles.go",
      "lib/web/join_tokens.go",
      "lib/web/join_tokens_test.go",
      "lib/web/scripts/node-join/install.sh"
    ],
    "message": "Validate token for node join script\n\nThe token value is provided via the HTTP request\nand fed into the node join script. This could allow an attacker\nto generate a node-join script with malicious code included.\n\nFix this by validating that tokens are valid and exist in the backend.\n\nAdditionally, we recently added the ability to specify labels via the\nnode-labels query parameter, which is also user-controlled. Since this\nfunctionality was never integrated in the UI, we remove it here and\nwill add an alternative implementation in the future.\n\nAlso use single quotes in script to prevent expansion",
    "before_after_code_files": [
      "lib/auth/auth_with_roles.go||lib/auth/auth_with_roles.go",
      "lib/web/join_tokens.go||lib/web/join_tokens.go",
      "lib/web/join_tokens_test.go||lib/web/join_tokens_test.go",
      "lib/web/scripts/node-join/install.sh||lib/web/scripts/node-join/install.sh"
    ]
  },
  "patch_diff": {
    "lib/auth/auth_with_roles.go||lib/auth/auth_with_roles.go": [
      "File: lib/auth/auth_with_roles.go -> lib/auth/auth_with_roles.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "1532: }",
      "1534: func (a *ServerWithRoles) GetToken(ctx context.Context, token string) (types.ProvisionToken, error) {",
      "1537:  }",
      "1538:  return a.authServer.GetToken(ctx, token)",
      "1539: }",
      "",
      "[Removed Lines]",
      "1535:  if err := a.action(apidefaults.Namespace, types.KindToken, types.VerbRead); err != nil {",
      "1536:   return nil, trace.Wrap(err)",
      "",
      "[Added Lines]",
      "1537:  if isProxy := a.hasBuiltinRole(types.RoleProxy); !isProxy {",
      "1538:   if err := a.action(apidefaults.Namespace, types.KindToken, types.VerbRead); err != nil {",
      "1539:    return nil, trace.Wrap(err)",
      "1540:   }",
      "",
      "---------------"
    ],
    "lib/web/join_tokens.go||lib/web/join_tokens.go": [
      "File: lib/web/join_tokens.go -> lib/web/join_tokens.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:  appName        string",
      "63:  appURI         string",
      "64:  joinMethod     string",
      "66: }",
      "68: func (h *Handler) createTokenHandle(w http.ResponseWriter, r *http.Request, params httprouter.Params, ctx *SessionContext) (interface{}, error) {",
      "",
      "[Removed Lines]",
      "65:  nodeLabels     string",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "150: func (h *Handler) getNodeJoinScriptHandle(w http.ResponseWriter, r *http.Request, params httprouter.Params) (interface{}, error) {",
      "151:  scripts.SetScriptHeaders(w.Header())",
      "161:  settings := scriptSettings{",
      "162:   token:          params.ByName(\"token\"),",
      "163:   appInstallMode: false,",
      "164:   joinMethod:     r.URL.Query().Get(\"method\"),",
      "166:  }",
      "169:  if err != nil {",
      "170:   log.WithError(err).Info(\"Failed to return the node install script.\")",
      "171:   w.Write(scripts.ErrorBashScript)",
      "",
      "[Removed Lines]",
      "152:  queryValues := r.URL.Query()",
      "154:  nodeLabels, err := url.QueryUnescape(queryValues.Get(\"node-labels\"))",
      "155:  if err != nil {",
      "156:   log.WithField(\"query-param\", \"node-labels\").WithError(err).Debug(\"Failed to return the app install script.\")",
      "157:   w.Write(scripts.ErrorBashScript)",
      "158:   return nil, nil",
      "159:  }",
      "165:   nodeLabels:     nodeLabels,",
      "168:  script, err := getJoinScript(settings, h.GetProxyClient())",
      "",
      "[Added Lines]",
      "158:  script, err := getJoinScript(r.Context(), settings, h.GetProxyClient())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "206:   appURI:         uri,",
      "207:  }",
      "210:  if err != nil {",
      "211:   log.WithError(err).Info(\"Failed to return the app install script.\")",
      "212:   w.Write(scripts.ErrorBashScript)",
      "",
      "[Removed Lines]",
      "209:  script, err := getJoinScript(settings, h.GetProxyClient())",
      "",
      "[Added Lines]",
      "199:  script, err := getJoinScript(r.Context(), settings, h.GetProxyClient())",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "239:  }, nil",
      "240: }",
      "249:   decodedToken, err := hex.DecodeString(settings.token)",
      "250:   if err != nil {",
      "251:    return \"\", trace.Wrap(err)",
      "252:   }",
      "254:   if len(decodedToken) != auth.TokenLenBytes {",
      "256:   }",
      "257:  }",
      "",
      "[Removed Lines]",
      "242: func getJoinScript(settings scriptSettings, m nodeAPIGetter) (string, error) {",
      "244:  if settings.joinMethod != string(types.JoinMethodIAM) {",
      "255:    return \"\", trace.BadParameter(\"invalid token length\")",
      "",
      "[Added Lines]",
      "232: func getJoinScript(ctx context.Context, settings scriptSettings, m nodeAPIGetter) (string, error) {",
      "233:  switch types.JoinMethod(settings.joinMethod) {",
      "234:  case types.JoinMethodUnspecified, types.JoinMethodToken:",
      "240:    return \"\", trace.BadParameter(\"invalid token %q\", decodedToken)",
      "243:  case types.JoinMethodIAM:",
      "244:  default:",
      "245:   return \"\", trace.BadParameter(\"join method %q is not supported via script\", settings.joinMethod)",
      "246:  }",
      "250:  _, err := m.GetToken(ctx, settings.token)",
      "251:  if err != nil {",
      "252:   return \"\", trace.BadParameter(\"invalid token\")",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "285:  var buf bytes.Buffer",
      "289:   if errs := validation.IsDNS1035Label(settings.appName); len(errs) > 0 {",
      "291:   }",
      "292:   if !appURIPattern.MatchString(settings.appURI) {",
      "293:    return \"\", trace.BadParameter(\"appURI %q contains invalid characters\", settings.appURI)",
      "",
      "[Removed Lines]",
      "288:  if settings.appInstallMode == true {",
      "290:    return \"\", trace.BadParameter(\"appName %q must be a valid DNS subdomain: https://gravitational.com/teleport/docs/application-access/#application-name\", settings.appName)",
      "",
      "[Added Lines]",
      "284:  if settings.appInstallMode {",
      "286:    return \"\", trace.BadParameter(\"appName %q must be a valid DNS subdomain: https://goteleport.com/docs/application-access/guides/connecting-apps/#application-name\", settings.appName)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "311:   \"appName\":        settings.appName,",
      "312:   \"appURI\":         settings.appURI,",
      "313:   \"joinMethod\":     settings.joinMethod,",
      "315:  })",
      "316:  if err != nil {",
      "317:   return \"\", trace.Wrap(err)",
      "",
      "[Removed Lines]",
      "314:   \"nodeLabels\":     settings.nodeLabels,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "364: }",
      "366: type nodeAPIGetter interface {",
      "375:  GenerateToken(ctx context.Context, req *proto.GenerateTokenRequest) (string, error)",
      "378:  GetClusterCACert(ctx context.Context) (*proto.GetClusterCACertResponse, error)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "372:  GetToken(ctx context.Context, token string) (types.ProvisionToken, error)",
      "",
      "---------------"
    ],
    "lib/web/join_tokens_test.go||lib/web/join_tokens_test.go": [
      "File: lib/web/join_tokens_test.go -> lib/web/join_tokens_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import (",
      "20:  \"context\"",
      "21:  \"testing\"",
      "22:  \"time\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:  \"encoding/hex\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31: )",
      "33: func TestCreateNodeJoinToken(t *testing.T) {",
      "34:  m := &mockedNodeAPIGetter{}",
      "35:  m.mockGenerateToken = func(ctx context.Context, req *proto.GenerateTokenRequest) (string, error) {",
      "36:   return \"some-token-id\", nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:  t.Parallel()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "47: }",
      "49: func TestGenerateIAMTokenName(t *testing.T) {",
      "50:  rule1 := types.TokenRule{",
      "51:   AWSAccount: \"100000000000\",",
      "52:   AWSARN:     \"arn:aws:iam:1\",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:  t.Parallel()",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "84: }",
      "86: func TestSortRules(t *testing.T) {",
      "87:  tt := []struct {",
      "88:   name     string",
      "89:   rules    []*types.TokenRule",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "90:  t.Parallel()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "277:  }",
      "278: }",
      "304:  }",
      "334:  }",
      "339: }",
      "341: func TestGetAppJoinScript(t *testing.T) {",
      "352:  }",
      "355:  badAppName := scriptSettings{",
      "356:   token:          testTokenID,",
      "357:   appInstallMode: true,",
      "",
      "[Removed Lines]",
      "280: func TestGetNodeJoinScript(t *testing.T) {",
      "281:  m := &mockedNodeAPIGetter{}",
      "282:  m.mockGetProxyServers = func() ([]types.Server, error) {",
      "283:   var s types.ServerV2",
      "284:   s.SetPublicAddr(\"test-host:12345678\")",
      "286:   return []types.Server{&s}, nil",
      "287:  }",
      "288:  m.mockGetClusterCACert = func(ctx context.Context) (*proto.GetClusterCACertResponse, error) {",
      "289:   fakeBytes := []byte(fixtures.SigningCertPEM)",
      "290:   return &proto.GetClusterCACertResponse{TLSCA: fakeBytes}, nil",
      "291:  }",
      "293:  nilTokenLength := scriptSettings{",
      "294:   token: \"\",",
      "295:  }",
      "297:  shortTokenLength := scriptSettings{",
      "298:   token: \"f18da1c9f6630a51e8daf121e7451d\",",
      "299:  }",
      "301:  testTokenID := \"f18da1c9f6630a51e8daf121e7451daa\"",
      "302:  validTokenLength := scriptSettings{",
      "303:   token: testTokenID,",
      "307:  script, err := getJoinScript(scriptSettings{}, m)",
      "308:  require.Empty(t, script)",
      "309:  require.True(t, trace.IsBadParameter(err))",
      "312:  script, err = getJoinScript(nilTokenLength, m)",
      "313:  require.Empty(t, script)",
      "314:  require.True(t, trace.IsBadParameter(err))",
      "316:  script, err = getJoinScript(shortTokenLength, m)",
      "317:  require.Empty(t, script)",
      "318:  require.True(t, trace.IsBadParameter(err))",
      "321:  script, err = getJoinScript(validTokenLength, m)",
      "322:  require.NoError(t, err)",
      "324:  require.Contains(t, script, testTokenID)",
      "325:  require.Contains(t, script, \"test-host\")",
      "326:  require.Contains(t, script, \"12345678\")",
      "327:  require.Contains(t, script, \"sha256:\")",
      "328:  require.NotContains(t, script, \"JOIN_METHOD=\\\"iam\\\"\")",
      "331:  iamToken := scriptSettings{",
      "332:   token:      \"token length doesnt matter in this case\",",
      "333:   joinMethod: string(types.JoinMethodIAM),",
      "336:  script, err = getJoinScript(iamToken, m)",
      "337:  require.NoError(t, err)",
      "338:  require.Contains(t, script, \"JOIN_METHOD=\\\"iam\\\"\")",
      "342:  m := &mockedNodeAPIGetter{}",
      "343:  m.mockGetProxyServers = func() ([]types.Server, error) {",
      "344:   var s types.ServerV2",
      "345:   s.SetPublicAddr(\"test-host:12345678\")",
      "347:   return []types.Server{&s}, nil",
      "348:  }",
      "349:  m.mockGetClusterCACert = func(ctx context.Context) (*proto.GetClusterCACertResponse, error) {",
      "350:   fakeBytes := []byte(fixtures.SigningCertPEM)",
      "351:   return &proto.GetClusterCACertResponse{TLSCA: fakeBytes}, nil",
      "354:  testTokenID := \"f18da1c9f6630a51e8daf121e7451daa\"",
      "",
      "[Added Lines]",
      "284: func toHex(s string) string { return hex.EncodeToString([]byte(s)) }",
      "286: func TestGetNodeJoinScript(t *testing.T) {",
      "287:  validToken := \"f18da1c9f6630a51e8daf121e7451daa\"",
      "288:  validIAMToken := \"valid-iam-token\"",
      "290:  m := &mockedNodeAPIGetter{",
      "291:   mockGetProxyServers: func() ([]types.Server, error) {",
      "292:    var s types.ServerV2",
      "293:    s.SetPublicAddr(\"test-host:12345678\")",
      "295:    return []types.Server{&s}, nil",
      "296:   },",
      "297:   mockGetClusterCACert: func(context.Context) (*proto.GetClusterCACertResponse, error) {",
      "298:    fakeBytes := []byte(fixtures.SigningCertPEM)",
      "299:    return &proto.GetClusterCACertResponse{TLSCA: fakeBytes}, nil",
      "300:   },",
      "301:   mockGetToken: func(_ context.Context, token string) (types.ProvisionToken, error) {",
      "302:    if token == validToken || token == validIAMToken {",
      "303:     return &types.ProvisionTokenV2{",
      "304:      Metadata: types.Metadata{",
      "305:       Name: token,",
      "306:      },",
      "307:     }, nil",
      "308:    }",
      "309:    return nil, trace.NotFound(\"token does not exist\")",
      "310:   },",
      "313:  for _, test := range []struct {",
      "314:   desc            string",
      "315:   settings        scriptSettings",
      "316:   errAssert       require.ErrorAssertionFunc",
      "317:   extraAssertions func(script string)",
      "318:  }{",
      "319:   {",
      "320:    desc:      \"zero value\",",
      "321:    settings:  scriptSettings{},",
      "322:    errAssert: require.Error,",
      "323:   },",
      "324:   {",
      "325:    desc:      \"short token length\",",
      "326:    settings:  scriptSettings{token: toHex(\"f18da1c9f6630a51e8daf121e7451d\")},",
      "327:    errAssert: require.Error,",
      "328:   },",
      "329:   {",
      "330:    desc:      \"valid length but does not exist\",",
      "331:    settings:  scriptSettings{token: toHex(\"xxxxxxx9f6630a51e8daf121exxxxxxx\")},",
      "332:    errAssert: require.Error,",
      "333:   },",
      "334:   {",
      "335:    desc:      \"valid\",",
      "336:    settings:  scriptSettings{token: validToken},",
      "337:    errAssert: require.NoError,",
      "338:    extraAssertions: func(script string) {",
      "339:     require.Contains(t, script, validToken)",
      "340:     require.Contains(t, script, \"test-host\")",
      "341:     require.Contains(t, script, \"12345678\")",
      "342:     require.Contains(t, script, \"sha256:\")",
      "343:     require.NotContains(t, script, \"JOIN_METHOD='iam'\")",
      "344:    },",
      "345:   },",
      "346:   {",
      "347:    desc: \"invalid IAM\",",
      "348:    settings: scriptSettings{",
      "349:     token:      toHex(\"invalid-iam-token\"),",
      "350:     joinMethod: string(types.JoinMethodIAM),",
      "351:    },",
      "352:    errAssert: require.Error,",
      "353:   },",
      "354:   {",
      "355:    desc: \"valid iam\",",
      "356:    settings: scriptSettings{",
      "357:     token:      validIAMToken,",
      "358:     joinMethod: string(types.JoinMethodIAM),",
      "359:    },",
      "360:    errAssert: require.NoError,",
      "361:    extraAssertions: func(script string) {",
      "362:     require.Contains(t, script, \"JOIN_METHOD='iam'\")",
      "363:    },",
      "364:   },",
      "365:  } {",
      "366:   t.Run(test.desc, func(t *testing.T) {",
      "367:    script, err := getJoinScript(context.Background(), test.settings, m)",
      "368:    test.errAssert(t, err)",
      "369:    if err != nil {",
      "370:     require.Empty(t, script)",
      "371:    }",
      "373:    if test.extraAssertions != nil {",
      "374:     test.extraAssertions(script)",
      "375:    }",
      "376:   })",
      "381:  testTokenID := \"f18da1c9f6630a51e8daf121e7451daa\"",
      "382:  m := &mockedNodeAPIGetter{",
      "383:   mockGetToken: func(_ context.Context, token string) (types.ProvisionToken, error) {",
      "384:    if token == testTokenID {",
      "385:     return &types.ProvisionTokenV2{",
      "386:      Metadata: types.Metadata{",
      "387:       Name: token,",
      "388:      },",
      "389:     }, nil",
      "390:    }",
      "391:    return nil, trace.NotFound(\"token does not exist\")",
      "392:   },",
      "393:   mockGetProxyServers: func() ([]types.Server, error) {",
      "394:    var s types.ServerV2",
      "395:    s.SetPublicAddr(\"test-host:12345678\")",
      "397:    return []types.Server{&s}, nil",
      "398:   },",
      "399:   mockGetClusterCACert: func(context.Context) (*proto.GetClusterCACertResponse, error) {",
      "400:    fakeBytes := []byte(fixtures.SigningCertPEM)",
      "401:    return &proto.GetClusterCACertResponse{TLSCA: fakeBytes}, nil",
      "402:   },",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "367:  }",
      "371:  require.Empty(t, script)",
      "372:  require.True(t, trace.IsBadParameter(err))",
      "375:  require.Empty(t, script)",
      "376:  require.True(t, trace.IsBadParameter(err))",
      "",
      "[Removed Lines]",
      "370:  script, err := getJoinScript(badAppName, m)",
      "374:  script, err = getJoinScript(badAppURI, m)",
      "",
      "[Added Lines]",
      "419:  script, err := getJoinScript(context.Background(), badAppName, m)",
      "423:  script, err = getJoinScript(context.Background(), badAppURI, m)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "500:  for _, tc := range tests {",
      "501:   tc := tc",
      "502:   t.Run(tc.desc, func(t *testing.T) {",
      "504:    if tc.shouldError {",
      "505:     require.NotNil(t, err)",
      "506:     require.Equal(t, script, \"\")",
      "",
      "[Removed Lines]",
      "503:    script, err = getJoinScript(tc.settings, m)",
      "",
      "[Added Lines]",
      "552:    script, err = getJoinScript(context.Background(), tc.settings, m)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "622:  mockGenerateToken    func(ctx context.Context, req *proto.GenerateTokenRequest) (string, error)",
      "623:  mockGetProxyServers  func() ([]types.Server, error)",
      "624:  mockGetClusterCACert func(ctx context.Context) (*proto.GetClusterCACertResponse, error)",
      "625: }",
      "627: func (m *mockedNodeAPIGetter) GenerateToken(ctx context.Context, req *proto.GenerateTokenRequest) (string, error) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "674:  mockGetToken         func(ctx context.Context, token string) (types.ProvisionToken, error)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "648:  return nil, trace.NotImplemented(\"mockGetClusterCACert not implemented\")",
      "649: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "701: func (m *mockedNodeAPIGetter) GetToken(ctx context.Context, token string) (types.ProvisionToken, error) {",
      "702:  if m.mockGetToken != nil {",
      "703:   return m.mockGetToken(ctx, token)",
      "704:  }",
      "705:  return nil, trace.NotImplemented(\"mockGetToken not implemented\")",
      "706: }",
      "",
      "---------------"
    ],
    "lib/web/scripts/node-join/install.sh||lib/web/scripts/node-join/install.sh": [
      "File: lib/web/scripts/node-join/install.sh -> lib/web/scripts/node-join/install.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "36: # the default value of each variable is a templatable Go value so that it can",
      "37: # optionally be replaced by the server before the script is served up",
      "43: JOIN_METHOD_FLAG=\"\"",
      "44: [ ! -z \"$JOIN_METHOD\" ] && JOIN_METHOD_FLAG=\"--join-method ${JOIN_METHOD}\"",
      "46: # `teleport <service> configure` commands CA_PIN_HASHES can be removed along",
      "47: # with the script passing it in in `join_tokens.go`.",
      "50: ARG_CA_PIN_HASHES=\"\"",
      "58: # usage message",
      "59: # shellcheck disable=SC2086",
      "",
      "[Removed Lines]",
      "38: TELEPORT_VERSION=\"{{.version}}\"",
      "39: TARGET_HOSTNAME=\"{{.hostname}}\"",
      "40: TARGET_PORT=\"{{.port}}\"",
      "41: JOIN_TOKEN=\"{{.token}}\"",
      "42: JOIN_METHOD=\"{{.joinMethod}}\"",
      "45: # When all stanza generators have been updated to use the new",
      "48: CA_PIN_HASHES=\"{{.caPinsOld}}\"",
      "49: CA_PINS=\"{{.caPins}}\"",
      "51: APP_INSTALL_MODE=\"{{.appInstallMode}}\"",
      "52: APP_NAME=\"{{.appName}}\"",
      "53: APP_URI=\"{{.appURI}}\"",
      "54: NODE_LABELS=\"{{.nodeLabels}}\"",
      "55: LABELS_FLAG=\"\"",
      "56: [ ! -z \"$NODE_LABELS\" ] && LABELS_FLAG=\"--labels ${NODE_LABELS}\"",
      "",
      "[Added Lines]",
      "38: TELEPORT_VERSION='{{.version}}'",
      "39: TARGET_HOSTNAME='{{.hostname}}'",
      "40: TARGET_PORT='{{.port}}'",
      "41: JOIN_TOKEN='{{.token}}'",
      "42: JOIN_METHOD='{{.joinMethod}}'",
      "45: # When all stanza generators have been updated to use the new",
      "48: CA_PIN_HASHES='{{.caPinsOld}}'",
      "49: CA_PINS='{{.caPins}}'",
      "51: APP_INSTALL_MODE='{{.appInstallMode}}'",
      "52: APP_NAME='{{.appName}}'",
      "53: APP_URI='{{.appURI}}'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "442:       ${JOIN_METHOD_FLAG} \\",
      "443:       --ca-pin ${CA_PINS} \\",
      "444:       --auth-server ${TARGET_HOSTNAME}:${TARGET_PORT} \\",
      "446:       --output ${TELEPORT_CONFIG_PATH}",
      "447: }",
      "448: # checks whether the given host is running MacOS",
      "",
      "[Removed Lines]",
      "445:       ${LABELS_FLAG} \\",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf6e8af33af894056485483b3ca9be657bc27fff",
      "candidate_info": {
        "commit_hash": "bf6e8af33af894056485483b3ca9be657bc27fff",
        "repo": "gravitational/teleport",
        "commit_url": "https://github.com/gravitational/teleport/commit/bf6e8af33af894056485483b3ca9be657bc27fff",
        "files": [
          "lib/auth/auth_with_roles.go",
          "lib/web/join_tokens.go",
          "lib/web/join_tokens_test.go",
          "lib/web/scripts/node-join/install.sh"
        ],
        "message": "Validate token for node join script (#14726)\n\nThe token value is provided via the HTTP request\nand fed into the node join script. This could allow an attacker\nto generate a node-join script with malicious code included.\n\nFix this by validating that tokens are valid and exist in the backend.\n\nAdditionally, we recently added the ability to specify labels via the\nnode-labels query parameter, which is also user-controlled. Since this\nfunctionality was never integrated in the UI, we remove it here and\nwill add an alternative implementation in the future.\n\nAlso use single quotes in script to prevent expansion",
        "before_after_code_files": [
          "lib/auth/auth_with_roles.go||lib/auth/auth_with_roles.go",
          "lib/web/join_tokens.go||lib/web/join_tokens.go",
          "lib/web/join_tokens_test.go||lib/web/join_tokens_test.go",
          "lib/web/scripts/node-join/install.sh||lib/web/scripts/node-join/install.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/gravitational/teleport/pull/14726"
        ],
        "olp_code_files": {
          "patch": [
            "lib/auth/auth_with_roles.go||lib/auth/auth_with_roles.go",
            "lib/web/join_tokens.go||lib/web/join_tokens.go",
            "lib/web/join_tokens_test.go||lib/web/join_tokens_test.go",
            "lib/web/scripts/node-join/install.sh||lib/web/scripts/node-join/install.sh"
          ],
          "candidate": [
            "lib/auth/auth_with_roles.go||lib/auth/auth_with_roles.go",
            "lib/web/join_tokens.go||lib/web/join_tokens.go",
            "lib/web/join_tokens_test.go||lib/web/join_tokens_test.go",
            "lib/web/scripts/node-join/install.sh||lib/web/scripts/node-join/install.sh"
          ]
        }
      },
      "candidate_diff": {
        "lib/auth/auth_with_roles.go||lib/auth/auth_with_roles.go": [
          "File: lib/auth/auth_with_roles.go -> lib/auth/auth_with_roles.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1532: }",
          "1534: func (a *ServerWithRoles) GetToken(ctx context.Context, token string) (types.ProvisionToken, error) {",
          "1537:  }",
          "1538:  return a.authServer.GetToken(ctx, token)",
          "1539: }",
          "",
          "[Removed Lines]",
          "1535:  if err := a.action(apidefaults.Namespace, types.KindToken, types.VerbRead); err != nil {",
          "1536:   return nil, trace.Wrap(err)",
          "",
          "[Added Lines]",
          "1537:  if isProxy := a.hasBuiltinRole(types.RoleProxy); !isProxy {",
          "1538:   if err := a.action(apidefaults.Namespace, types.KindToken, types.VerbRead); err != nil {",
          "1539:    return nil, trace.Wrap(err)",
          "1540:   }",
          "",
          "---------------"
        ],
        "lib/web/join_tokens.go||lib/web/join_tokens.go": [
          "File: lib/web/join_tokens.go -> lib/web/join_tokens.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  appName        string",
          "63:  appURI         string",
          "64:  joinMethod     string",
          "66: }",
          "68: func (h *Handler) createTokenHandle(w http.ResponseWriter, r *http.Request, params httprouter.Params, ctx *SessionContext) (interface{}, error) {",
          "",
          "[Removed Lines]",
          "65:  nodeLabels     string",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150: func (h *Handler) getNodeJoinScriptHandle(w http.ResponseWriter, r *http.Request, params httprouter.Params) (interface{}, error) {",
          "151:  scripts.SetScriptHeaders(w.Header())",
          "161:  settings := scriptSettings{",
          "162:   token:          params.ByName(\"token\"),",
          "163:   appInstallMode: false,",
          "164:   joinMethod:     r.URL.Query().Get(\"method\"),",
          "166:  }",
          "169:  if err != nil {",
          "170:   log.WithError(err).Info(\"Failed to return the node install script.\")",
          "171:   w.Write(scripts.ErrorBashScript)",
          "",
          "[Removed Lines]",
          "152:  queryValues := r.URL.Query()",
          "154:  nodeLabels, err := url.QueryUnescape(queryValues.Get(\"node-labels\"))",
          "155:  if err != nil {",
          "156:   log.WithField(\"query-param\", \"node-labels\").WithError(err).Debug(\"Failed to return the app install script.\")",
          "157:   w.Write(scripts.ErrorBashScript)",
          "158:   return nil, nil",
          "159:  }",
          "165:   nodeLabels:     nodeLabels,",
          "168:  script, err := getJoinScript(settings, h.GetProxyClient())",
          "",
          "[Added Lines]",
          "158:  script, err := getJoinScript(r.Context(), settings, h.GetProxyClient())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:   appURI:         uri,",
          "207:  }",
          "210:  if err != nil {",
          "211:   log.WithError(err).Info(\"Failed to return the app install script.\")",
          "212:   w.Write(scripts.ErrorBashScript)",
          "",
          "[Removed Lines]",
          "209:  script, err := getJoinScript(settings, h.GetProxyClient())",
          "",
          "[Added Lines]",
          "199:  script, err := getJoinScript(r.Context(), settings, h.GetProxyClient())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "239:  }, nil",
          "240: }",
          "249:   decodedToken, err := hex.DecodeString(settings.token)",
          "250:   if err != nil {",
          "251:    return \"\", trace.Wrap(err)",
          "252:   }",
          "254:   if len(decodedToken) != auth.TokenLenBytes {",
          "256:   }",
          "257:  }",
          "",
          "[Removed Lines]",
          "242: func getJoinScript(settings scriptSettings, m nodeAPIGetter) (string, error) {",
          "244:  if settings.joinMethod != string(types.JoinMethodIAM) {",
          "255:    return \"\", trace.BadParameter(\"invalid token length\")",
          "",
          "[Added Lines]",
          "232: func getJoinScript(ctx context.Context, settings scriptSettings, m nodeAPIGetter) (string, error) {",
          "233:  switch types.JoinMethod(settings.joinMethod) {",
          "234:  case types.JoinMethodUnspecified, types.JoinMethodToken:",
          "240:    return \"\", trace.BadParameter(\"invalid token %q\", decodedToken)",
          "243:  case types.JoinMethodIAM:",
          "244:  default:",
          "245:   return \"\", trace.BadParameter(\"join method %q is not supported via script\", settings.joinMethod)",
          "246:  }",
          "250:  _, err := m.GetToken(ctx, settings.token)",
          "251:  if err != nil {",
          "252:   return \"\", trace.BadParameter(\"invalid token\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "285:  var buf bytes.Buffer",
          "289:   if errs := validation.IsDNS1035Label(settings.appName); len(errs) > 0 {",
          "291:   }",
          "292:   if !appURIPattern.MatchString(settings.appURI) {",
          "293:    return \"\", trace.BadParameter(\"appURI %q contains invalid characters\", settings.appURI)",
          "",
          "[Removed Lines]",
          "288:  if settings.appInstallMode == true {",
          "290:    return \"\", trace.BadParameter(\"appName %q must be a valid DNS subdomain: https://gravitational.com/teleport/docs/application-access/#application-name\", settings.appName)",
          "",
          "[Added Lines]",
          "284:  if settings.appInstallMode {",
          "286:    return \"\", trace.BadParameter(\"appName %q must be a valid DNS subdomain: https://goteleport.com/docs/application-access/guides/connecting-apps/#application-name\", settings.appName)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "311:   \"appName\":        settings.appName,",
          "312:   \"appURI\":         settings.appURI,",
          "313:   \"joinMethod\":     settings.joinMethod,",
          "315:  })",
          "316:  if err != nil {",
          "317:   return \"\", trace.Wrap(err)",
          "",
          "[Removed Lines]",
          "314:   \"nodeLabels\":     settings.nodeLabels,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "364: }",
          "366: type nodeAPIGetter interface {",
          "375:  GenerateToken(ctx context.Context, req *proto.GenerateTokenRequest) (string, error)",
          "378:  GetClusterCACert(ctx context.Context) (*proto.GetClusterCACertResponse, error)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:  GetToken(ctx context.Context, token string) (types.ProvisionToken, error)",
          "",
          "---------------"
        ],
        "lib/web/join_tokens_test.go||lib/web/join_tokens_test.go": [
          "File: lib/web/join_tokens_test.go -> lib/web/join_tokens_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import (",
          "20:  \"context\"",
          "21:  \"testing\"",
          "22:  \"time\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  \"encoding/hex\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: )",
          "33: func TestCreateNodeJoinToken(t *testing.T) {",
          "34:  m := &mockedNodeAPIGetter{}",
          "35:  m.mockGenerateToken = func(ctx context.Context, req *proto.GenerateTokenRequest) (string, error) {",
          "36:   return \"some-token-id\", nil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: }",
          "49: func TestGenerateIAMTokenName(t *testing.T) {",
          "50:  rule1 := types.TokenRule{",
          "51:   AWSAccount: \"100000000000\",",
          "52:   AWSARN:     \"arn:aws:iam:1\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84: }",
          "86: func TestSortRules(t *testing.T) {",
          "87:  tt := []struct {",
          "88:   name     string",
          "89:   rules    []*types.TokenRule",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:  t.Parallel()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "277:  }",
          "278: }",
          "304:  }",
          "334:  }",
          "339: }",
          "341: func TestGetAppJoinScript(t *testing.T) {",
          "352:  }",
          "355:  badAppName := scriptSettings{",
          "356:   token:          testTokenID,",
          "357:   appInstallMode: true,",
          "",
          "[Removed Lines]",
          "280: func TestGetNodeJoinScript(t *testing.T) {",
          "281:  m := &mockedNodeAPIGetter{}",
          "282:  m.mockGetProxyServers = func() ([]types.Server, error) {",
          "283:   var s types.ServerV2",
          "284:   s.SetPublicAddr(\"test-host:12345678\")",
          "286:   return []types.Server{&s}, nil",
          "287:  }",
          "288:  m.mockGetClusterCACert = func(ctx context.Context) (*proto.GetClusterCACertResponse, error) {",
          "289:   fakeBytes := []byte(fixtures.SigningCertPEM)",
          "290:   return &proto.GetClusterCACertResponse{TLSCA: fakeBytes}, nil",
          "291:  }",
          "293:  nilTokenLength := scriptSettings{",
          "294:   token: \"\",",
          "295:  }",
          "297:  shortTokenLength := scriptSettings{",
          "298:   token: \"f18da1c9f6630a51e8daf121e7451d\",",
          "299:  }",
          "301:  testTokenID := \"f18da1c9f6630a51e8daf121e7451daa\"",
          "302:  validTokenLength := scriptSettings{",
          "303:   token: testTokenID,",
          "307:  script, err := getJoinScript(scriptSettings{}, m)",
          "308:  require.Empty(t, script)",
          "309:  require.True(t, trace.IsBadParameter(err))",
          "312:  script, err = getJoinScript(nilTokenLength, m)",
          "313:  require.Empty(t, script)",
          "314:  require.True(t, trace.IsBadParameter(err))",
          "316:  script, err = getJoinScript(shortTokenLength, m)",
          "317:  require.Empty(t, script)",
          "318:  require.True(t, trace.IsBadParameter(err))",
          "321:  script, err = getJoinScript(validTokenLength, m)",
          "322:  require.NoError(t, err)",
          "324:  require.Contains(t, script, testTokenID)",
          "325:  require.Contains(t, script, \"test-host\")",
          "326:  require.Contains(t, script, \"12345678\")",
          "327:  require.Contains(t, script, \"sha256:\")",
          "328:  require.NotContains(t, script, \"JOIN_METHOD=\\\"iam\\\"\")",
          "331:  iamToken := scriptSettings{",
          "332:   token:      \"token length doesnt matter in this case\",",
          "333:   joinMethod: string(types.JoinMethodIAM),",
          "336:  script, err = getJoinScript(iamToken, m)",
          "337:  require.NoError(t, err)",
          "338:  require.Contains(t, script, \"JOIN_METHOD=\\\"iam\\\"\")",
          "342:  m := &mockedNodeAPIGetter{}",
          "343:  m.mockGetProxyServers = func() ([]types.Server, error) {",
          "344:   var s types.ServerV2",
          "345:   s.SetPublicAddr(\"test-host:12345678\")",
          "347:   return []types.Server{&s}, nil",
          "348:  }",
          "349:  m.mockGetClusterCACert = func(ctx context.Context) (*proto.GetClusterCACertResponse, error) {",
          "350:   fakeBytes := []byte(fixtures.SigningCertPEM)",
          "351:   return &proto.GetClusterCACertResponse{TLSCA: fakeBytes}, nil",
          "354:  testTokenID := \"f18da1c9f6630a51e8daf121e7451daa\"",
          "",
          "[Added Lines]",
          "284: func toHex(s string) string { return hex.EncodeToString([]byte(s)) }",
          "286: func TestGetNodeJoinScript(t *testing.T) {",
          "287:  validToken := \"f18da1c9f6630a51e8daf121e7451daa\"",
          "288:  validIAMToken := \"valid-iam-token\"",
          "290:  m := &mockedNodeAPIGetter{",
          "291:   mockGetProxyServers: func() ([]types.Server, error) {",
          "292:    var s types.ServerV2",
          "293:    s.SetPublicAddr(\"test-host:12345678\")",
          "295:    return []types.Server{&s}, nil",
          "296:   },",
          "297:   mockGetClusterCACert: func(context.Context) (*proto.GetClusterCACertResponse, error) {",
          "298:    fakeBytes := []byte(fixtures.SigningCertPEM)",
          "299:    return &proto.GetClusterCACertResponse{TLSCA: fakeBytes}, nil",
          "300:   },",
          "301:   mockGetToken: func(_ context.Context, token string) (types.ProvisionToken, error) {",
          "302:    if token == validToken || token == validIAMToken {",
          "303:     return &types.ProvisionTokenV2{",
          "304:      Metadata: types.Metadata{",
          "305:       Name: token,",
          "306:      },",
          "307:     }, nil",
          "308:    }",
          "309:    return nil, trace.NotFound(\"token does not exist\")",
          "310:   },",
          "313:  for _, test := range []struct {",
          "314:   desc            string",
          "315:   settings        scriptSettings",
          "316:   errAssert       require.ErrorAssertionFunc",
          "317:   extraAssertions func(script string)",
          "318:  }{",
          "319:   {",
          "320:    desc:      \"zero value\",",
          "321:    settings:  scriptSettings{},",
          "322:    errAssert: require.Error,",
          "323:   },",
          "324:   {",
          "325:    desc:      \"short token length\",",
          "326:    settings:  scriptSettings{token: toHex(\"f18da1c9f6630a51e8daf121e7451d\")},",
          "327:    errAssert: require.Error,",
          "328:   },",
          "329:   {",
          "330:    desc:      \"valid length but does not exist\",",
          "331:    settings:  scriptSettings{token: toHex(\"xxxxxxx9f6630a51e8daf121exxxxxxx\")},",
          "332:    errAssert: require.Error,",
          "333:   },",
          "334:   {",
          "335:    desc:      \"valid\",",
          "336:    settings:  scriptSettings{token: validToken},",
          "337:    errAssert: require.NoError,",
          "338:    extraAssertions: func(script string) {",
          "339:     require.Contains(t, script, validToken)",
          "340:     require.Contains(t, script, \"test-host\")",
          "341:     require.Contains(t, script, \"12345678\")",
          "342:     require.Contains(t, script, \"sha256:\")",
          "343:     require.NotContains(t, script, \"JOIN_METHOD='iam'\")",
          "344:    },",
          "345:   },",
          "346:   {",
          "347:    desc: \"invalid IAM\",",
          "348:    settings: scriptSettings{",
          "349:     token:      toHex(\"invalid-iam-token\"),",
          "350:     joinMethod: string(types.JoinMethodIAM),",
          "351:    },",
          "352:    errAssert: require.Error,",
          "353:   },",
          "354:   {",
          "355:    desc: \"valid iam\",",
          "356:    settings: scriptSettings{",
          "357:     token:      validIAMToken,",
          "358:     joinMethod: string(types.JoinMethodIAM),",
          "359:    },",
          "360:    errAssert: require.NoError,",
          "361:    extraAssertions: func(script string) {",
          "362:     require.Contains(t, script, \"JOIN_METHOD='iam'\")",
          "363:    },",
          "364:   },",
          "365:  } {",
          "366:   t.Run(test.desc, func(t *testing.T) {",
          "367:    script, err := getJoinScript(context.Background(), test.settings, m)",
          "368:    test.errAssert(t, err)",
          "369:    if err != nil {",
          "370:     require.Empty(t, script)",
          "371:    }",
          "373:    if test.extraAssertions != nil {",
          "374:     test.extraAssertions(script)",
          "375:    }",
          "376:   })",
          "381:  testTokenID := \"f18da1c9f6630a51e8daf121e7451daa\"",
          "382:  m := &mockedNodeAPIGetter{",
          "383:   mockGetToken: func(_ context.Context, token string) (types.ProvisionToken, error) {",
          "384:    if token == testTokenID {",
          "385:     return &types.ProvisionTokenV2{",
          "386:      Metadata: types.Metadata{",
          "387:       Name: token,",
          "388:      },",
          "389:     }, nil",
          "390:    }",
          "391:    return nil, trace.NotFound(\"token does not exist\")",
          "392:   },",
          "393:   mockGetProxyServers: func() ([]types.Server, error) {",
          "394:    var s types.ServerV2",
          "395:    s.SetPublicAddr(\"test-host:12345678\")",
          "397:    return []types.Server{&s}, nil",
          "398:   },",
          "399:   mockGetClusterCACert: func(context.Context) (*proto.GetClusterCACertResponse, error) {",
          "400:    fakeBytes := []byte(fixtures.SigningCertPEM)",
          "401:    return &proto.GetClusterCACertResponse{TLSCA: fakeBytes}, nil",
          "402:   },",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "367:  }",
          "371:  require.Empty(t, script)",
          "372:  require.True(t, trace.IsBadParameter(err))",
          "375:  require.Empty(t, script)",
          "376:  require.True(t, trace.IsBadParameter(err))",
          "",
          "[Removed Lines]",
          "370:  script, err := getJoinScript(badAppName, m)",
          "374:  script, err = getJoinScript(badAppURI, m)",
          "",
          "[Added Lines]",
          "419:  script, err := getJoinScript(context.Background(), badAppName, m)",
          "423:  script, err = getJoinScript(context.Background(), badAppURI, m)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "500:  for _, tc := range tests {",
          "501:   tc := tc",
          "502:   t.Run(tc.desc, func(t *testing.T) {",
          "504:    if tc.shouldError {",
          "505:     require.NotNil(t, err)",
          "506:     require.Equal(t, script, \"\")",
          "",
          "[Removed Lines]",
          "503:    script, err = getJoinScript(tc.settings, m)",
          "",
          "[Added Lines]",
          "552:    script, err = getJoinScript(context.Background(), tc.settings, m)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "622:  mockGenerateToken    func(ctx context.Context, req *proto.GenerateTokenRequest) (string, error)",
          "623:  mockGetProxyServers  func() ([]types.Server, error)",
          "624:  mockGetClusterCACert func(ctx context.Context) (*proto.GetClusterCACertResponse, error)",
          "625: }",
          "627: func (m *mockedNodeAPIGetter) GenerateToken(ctx context.Context, req *proto.GenerateTokenRequest) (string, error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "674:  mockGetToken         func(ctx context.Context, token string) (types.ProvisionToken, error)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "648:  return nil, trace.NotImplemented(\"mockGetClusterCACert not implemented\")",
          "649: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701: func (m *mockedNodeAPIGetter) GetToken(ctx context.Context, token string) (types.ProvisionToken, error) {",
          "702:  if m.mockGetToken != nil {",
          "703:   return m.mockGetToken(ctx, token)",
          "704:  }",
          "705:  return nil, trace.NotImplemented(\"mockGetToken not implemented\")",
          "706: }",
          "",
          "---------------"
        ],
        "lib/web/scripts/node-join/install.sh||lib/web/scripts/node-join/install.sh": [
          "File: lib/web/scripts/node-join/install.sh -> lib/web/scripts/node-join/install.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: # the default value of each variable is a templatable Go value so that it can",
          "37: # optionally be replaced by the server before the script is served up",
          "43: JOIN_METHOD_FLAG=\"\"",
          "44: [ ! -z \"$JOIN_METHOD\" ] && JOIN_METHOD_FLAG=\"--join-method ${JOIN_METHOD}\"",
          "46: # `teleport <service> configure` commands CA_PIN_HASHES can be removed along",
          "47: # with the script passing it in in `join_tokens.go`.",
          "50: ARG_CA_PIN_HASHES=\"\"",
          "58: # usage message",
          "59: # shellcheck disable=SC2086",
          "",
          "[Removed Lines]",
          "38: TELEPORT_VERSION=\"{{.version}}\"",
          "39: TARGET_HOSTNAME=\"{{.hostname}}\"",
          "40: TARGET_PORT=\"{{.port}}\"",
          "41: JOIN_TOKEN=\"{{.token}}\"",
          "42: JOIN_METHOD=\"{{.joinMethod}}\"",
          "45: # When all stanza generators have been updated to use the new",
          "48: CA_PIN_HASHES=\"{{.caPinsOld}}\"",
          "49: CA_PINS=\"{{.caPins}}\"",
          "51: APP_INSTALL_MODE=\"{{.appInstallMode}}\"",
          "52: APP_NAME=\"{{.appName}}\"",
          "53: APP_URI=\"{{.appURI}}\"",
          "54: NODE_LABELS=\"{{.nodeLabels}}\"",
          "55: LABELS_FLAG=\"\"",
          "56: [ ! -z \"$NODE_LABELS\" ] && LABELS_FLAG=\"--labels ${NODE_LABELS}\"",
          "",
          "[Added Lines]",
          "38: TELEPORT_VERSION='{{.version}}'",
          "39: TARGET_HOSTNAME='{{.hostname}}'",
          "40: TARGET_PORT='{{.port}}'",
          "41: JOIN_TOKEN='{{.token}}'",
          "42: JOIN_METHOD='{{.joinMethod}}'",
          "45: # When all stanza generators have been updated to use the new",
          "48: CA_PIN_HASHES='{{.caPinsOld}}'",
          "49: CA_PINS='{{.caPins}}'",
          "51: APP_INSTALL_MODE='{{.appInstallMode}}'",
          "52: APP_NAME='{{.appName}}'",
          "53: APP_URI='{{.appURI}}'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "442:       ${JOIN_METHOD_FLAG} \\",
          "443:       --ca-pin ${CA_PINS} \\",
          "444:       --auth-server ${TARGET_HOSTNAME}:${TARGET_PORT} \\",
          "446:       --output ${TELEPORT_CONFIG_PATH}",
          "447: }",
          "448: # checks whether the given host is running MacOS",
          "",
          "[Removed Lines]",
          "445:       ${LABELS_FLAG} \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}