{
  "cve_id": "CVE-2021-26291",
  "cve_desc": "Apache Maven will follow repositories that are defined in a dependency\u2019s Project Object Model (pom) which may be surprising to some users, resulting in potential risk if a malicious actor takes over that repository or is able to insert themselves into a position to pretend to be that repository. Maven is changing the default behavior in 3.8.1+ to no longer follow http (non-SSL) repository references by default. More details available in the referenced urls. If you are currently using a repository manager to govern the repositories used by your builds, you are unaffected by the risks present in the legacy behavior, and are unaffected by this vulnerability and change to default behavior. See this link for more information about repository management: https://maven.apache.org/repository-management.html",
  "repo": "apache/maven",
  "patch_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
  "patch_info": {
    "commit_hash": "fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "repo": "apache/maven",
    "commit_url": "https://github.com/apache/maven/commit/fa79cb22e456cc65522b5bab8c4240fe08c5775f",
    "files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ],
    "message": "[MNG-7116] add support for mirrorOf external:http:*",
    "before_after_code_files": [
      "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java"
    ]
  },
  "patch_diff": {
    "maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java||maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java": [
      "File: maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java -> maven-compat/src/main/java/org/apache/maven/repository/DefaultMirrorSelector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "44:     public Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "45:     {",
      "46:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "115:                     result = true;",
      "117:                 }",
      "118:                 else if ( WILDCARD.equals( repo ) )",
      "119:                 {",
      "120:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "127:                 {",
      "128:                     result = true;",
      "130:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "136:         try",
      "137:         {",
      "138:             URL url = new URL( originalRepository.getUrl() );",
      "141:         }",
      "142:         catch ( MalformedURLException e )",
      "143:         {",
      "",
      "[Removed Lines]",
      "139:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "140:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "152:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "153:         }",
      "154:         catch ( MalformedURLException e )",
      "155:         {",
      "157:             return false;",
      "158:         }",
      "159:     }",
      "161:     private static boolean isLocal( String host )",
      "162:     {",
      "163:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "164:     }",
      "172:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "173:     {",
      "174:         try",
      "175:         {",
      "176:             URL url = new URL( originalRepository.getUrl() );",
      "177:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "178:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "179:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "146:         }",
      "147:     }",
      "150:     {",
      "151:         return matchesLayout( RepositoryUtils.getLayout( repository ), mirror.getMirrorOfLayouts() );",
      "152:     }",
      "",
      "[Removed Lines]",
      "149:     static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "[Added Lines]",
      "188:    static boolean matchesLayout( ArtifactRepository repository, Mirror mirror )",
      "",
      "---------------"
    ],
    "maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java||maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java": [
      "File: maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java -> maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "711:     private static final String EXTERNAL_WILDCARD = \"external:*\";",
      "713:     public static Mirror getMirror( ArtifactRepository repository, List<Mirror> mirrors )",
      "714:     {",
      "715:         String repoId = repository.getId();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "713:     private static final String EXTERNAL_HTTP_WILDCARD = \"external:http:*\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "782:                     result = true;",
      "784:                 }",
      "785:                 else if ( WILDCARD.equals( repo ) )",
      "786:                 {",
      "787:                     result = true;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "794:                 else if ( EXTERNAL_HTTP_WILDCARD.equals( repo ) && isExternalHttpRepo( originalRepository ) )",
      "795:                 {",
      "796:                     result = true;",
      "798:                 }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "803:         try",
      "804:         {",
      "805:             URL url = new URL( originalRepository.getUrl() );",
      "808:         }",
      "809:         catch ( MalformedURLException e )",
      "810:         {",
      "",
      "[Removed Lines]",
      "806:             return !( url.getHost().equals( \"localhost\" ) || url.getHost().equals( \"127.0.0.1\" )",
      "807:                             || url.getProtocol().equals( \"file\" ) );",
      "",
      "[Added Lines]",
      "820:             return !( isLocal( url.getHost() ) || url.getProtocol().equals( \"file\" ) );",
      "821:         }",
      "822:         catch ( MalformedURLException e )",
      "823:         {",
      "825:             return false;",
      "826:         }",
      "827:     }",
      "829:     private static boolean isLocal( String host )",
      "830:     {",
      "831:         return \"localhost\".equals( host ) || \"127.0.0.1\".equals( host );",
      "832:     }",
      "840:     static boolean isExternalHttpRepo( ArtifactRepository originalRepository )",
      "841:     {",
      "842:         try",
      "843:         {",
      "844:             URL url = new URL( originalRepository.getUrl() );",
      "845:             return ( \"http\".equalsIgnoreCase( url.getProtocol() ) || \"dav\".equalsIgnoreCase( url.getProtocol() )",
      "846:                 || \"dav:http\".equalsIgnoreCase( url.getProtocol() )",
      "847:                 || \"dav+http\".equalsIgnoreCase( url.getProtocol() ) ) && !isLocal( url.getHost() );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7a8acdd8e66de81b4f7f918905976191837bf147",
      "candidate_info": {
        "commit_hash": "7a8acdd8e66de81b4f7f918905976191837bf147",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/7a8acdd8e66de81b4f7f918905976191837bf147",
        "files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java"
        ],
        "message": "[MNG-7181] Make --version support -q",
        "before_after_code_files": [
          "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java||maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java -> maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         return version.toString();",
          "76:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     public static String showVersionMinimal()",
          "79:     {",
          "80:         Properties properties = getBuildProperties();",
          "81:         String version = reduce( properties.getProperty( BUILD_VERSION_PROPERTY ) );",
          "82:         return ( version != null ? version : \"<version unknown>\" );",
          "83:     }",
          "",
          "---------------"
        ],
        "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java||maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java": [
          "File: maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java -> maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:         if ( cliRequest.commandLine.hasOption( CLIManager.VERSION ) )",
          "435:         {",
          "437:             throw new ExitException( 0 );",
          "438:         }",
          "439:     }",
          "",
          "[Removed Lines]",
          "436:             System.out.println( CLIReportingUtils.showVersion() );",
          "",
          "[Added Lines]",
          "436:             if ( cliRequest.commandLine.hasOption( CLIManager.QUIET ) )",
          "437:             {",
          "438:                 System.out.println( CLIReportingUtils.showVersionMinimal() );",
          "439:             }",
          "440:             else",
          "441:             {",
          "442:                 System.out.println( CLIReportingUtils.showVersion() );",
          "443:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "176b272f30c4fbd62013b4702ab28518c21628ac",
      "candidate_info": {
        "commit_hash": "176b272f30c4fbd62013b4702ab28518c21628ac",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/176b272f30c4fbd62013b4702ab28518c21628ac",
        "files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java"
        ],
        "message": "[MNG-7185] Describe explicit and recommended version for VersionRange.createFromVersionSpec()\n\nThis closes #487",
        "before_after_code_files": [
          "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java||maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java||maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java": [
          "File: maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java -> maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java"
        ]
      }
    },
    {
      "candidate_hash": "2f144dec13b53d619cf2242448fbf6f9d93db583",
      "candidate_info": {
        "commit_hash": "2f144dec13b53d619cf2242448fbf6f9d93db583",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/2f144dec13b53d619cf2242448fbf6f9d93db583",
        "files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java"
        ],
        "message": "[MNG-6819] Fix NullPointerException in StringVisitorModelInterpolator\n\nCloses #301",
        "before_after_code_files": [
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java",
          "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java -> maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:                 String interpolated = ctx.interpolate( value );",
          "373:                 {",
          "374:                     field.set( target, interpolated );",
          "375:                 }",
          "",
          "[Removed Lines]",
          "372:                 if ( !interpolated.equals( value ) )",
          "",
          "[Added Lines]",
          "372:                 if ( interpolated != null && !interpolated.equals( value ) )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "463:                     {",
          "464:                         String interpolated = ctx.interpolate( (String) value );",
          "467:                         {",
          "468:                             try",
          "469:                             {",
          "",
          "[Removed Lines]",
          "466:                         if ( !interpolated.equals( value ) )",
          "",
          "[Added Lines]",
          "466:                         if ( interpolated != null && !interpolated.equals( value ) )",
          "",
          "---------------"
        ],
        "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java||maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java": [
          "File: maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java -> maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringVisitorModelInterpolator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1424:                     {",
          "1425:                         String value = (String) v;",
          "1426:                         String inter = interpolate( value );",
          "1428:                         {",
          "1429:                             entry.setValue( inter );",
          "1430:                         }",
          "",
          "[Removed Lines]",
          "1427:                         if ( value != inter )",
          "",
          "[Added Lines]",
          "1427:                         if ( value != inter && inter != null )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4518b5fe416a552a59e5201b4569a9bc0af3153",
      "candidate_info": {
        "commit_hash": "b4518b5fe416a552a59e5201b4569a9bc0af3153",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/b4518b5fe416a552a59e5201b4569a9bc0af3153",
        "files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java",
          "maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java",
          "maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java"
        ],
        "message": "[MNG-7347] SessionScoped beans should be singletons for a given session (#653)",
        "before_after_code_files": [
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java",
          "maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java",
          "maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java||maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java",
          "maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java||maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:         try",
          "96:         {",
          "",
          "[Removed Lines]",
          "93:         sessionScope.enter( reactorContext.getSessionScopeMemento() );",
          "94:         sessionScope.seed( MavenSession.class, session );",
          "",
          "[Added Lines]",
          "93:         final boolean scoped = session != rootSession;",
          "94:         if ( scoped )",
          "95:         {",
          "96:             sessionScope.enter();",
          "97:             sessionScope.seed( MavenSession.class, session );",
          "98:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:         }",
          "146:         finally",
          "147:         {",
          "150:             session.setCurrentProject( null );",
          "",
          "[Removed Lines]",
          "148:             sessionScope.exit();",
          "",
          "[Added Lines]",
          "152:             if ( scoped )",
          "153:             {",
          "154:                 sessionScope.exit();",
          "155:             }",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:             ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();",
          "108:             ReactorBuildStatus reactorBuildStatus = new ReactorBuildStatus( session.getProjectDependencyGraph() );",
          "109:             reactorContext =",
          "113:             String builderId = session.getRequest().getBuilderId();",
          "114:             Builder builder = builders.get( builderId );",
          "",
          "[Removed Lines]",
          "110:                 new ReactorContext( result, projectIndex, oldContextClassLoader, reactorBuildStatus,",
          "111:                                     sessionScope.memento() );",
          "",
          "[Added Lines]",
          "110:                 new ReactorContext( result, projectIndex, oldContextClassLoader, reactorBuildStatus );",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java||maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java": [
          "File: maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java -> maven-core/src/main/java/org/apache/maven/lifecycle/internal/ReactorContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.apache.maven.execution.MavenExecutionResult;",
          "",
          "[Removed Lines]",
          "23: import org.apache.maven.session.scope.internal.SessionScope;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     private final ReactorBuildStatus reactorBuildStatus;",
          "45:     public ReactorContext( MavenExecutionResult result, ProjectIndex projectIndex,",
          "48:     {",
          "49:         this.result = result;",
          "50:         this.projectIndex = projectIndex;",
          "51:         this.originalContextClassLoader = originalContextClassLoader;",
          "52:         this.reactorBuildStatus = reactorBuildStatus;",
          "54:     }",
          "56:     public ReactorBuildStatus getReactorBuildStatus()",
          "",
          "[Removed Lines]",
          "43:     private final SessionScope.Memento sessionScope;",
          "46:                            ClassLoader originalContextClassLoader, ReactorBuildStatus reactorBuildStatus,",
          "47:                            SessionScope.Memento sessionScope )",
          "53:         this.sessionScope = sessionScope;",
          "",
          "[Added Lines]",
          "43:                            ClassLoader originalContextClassLoader, ReactorBuildStatus reactorBuildStatus )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         return originalContextClassLoader;",
          "74:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "79:     public SessionScope.Memento getSessionScopeMemento()",
          "80:     {",
          "81:         return sessionScope;",
          "82:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java||maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java": [
          "File: maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java -> maven-core/src/main/java/org/apache/maven/session/scope/internal/SessionScope.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import com.google.inject.Key;",
          "28: import com.google.inject.OutOfScopeException;",
          "29: import com.google.inject.Provider;",
          "30: import com.google.inject.Scope;",
          "",
          "[Removed Lines]",
          "22: import java.util.Collections;",
          "23: import java.util.HashMap;",
          "24: import java.util.LinkedList;",
          "25: import java.util.Map;",
          "31: import com.google.inject.util.Providers;",
          "",
          "[Added Lines]",
          "22: import java.util.Collection;",
          "23: import java.util.List;",
          "24: import java.util.concurrent.ConcurrentHashMap;",
          "25: import java.util.concurrent.ConcurrentMap;",
          "26: import java.util.concurrent.CopyOnWriteArrayList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: public class SessionScope",
          "37:     implements Scope",
          "38: {",
          "52:     private static final Provider<Object> SEEDED_KEY_PROVIDER = new Provider<Object>()",
          "53:     {",
          "",
          "[Removed Lines]",
          "42:     public static class Memento",
          "43:     {",
          "44:         final Map<Key<?>, Provider<?>> seeded;",
          "46:         Memento( final Map<Key<?>, Provider<?>> seeded )",
          "47:         {",
          "48:             this.seeded = Collections.unmodifiableMap( new HashMap<>( seeded ) );",
          "49:         }",
          "50:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:     {",
          "76:         {",
          "79:         }",
          "81:     }",
          "87:     {",
          "90:     }",
          "93:     {",
          "96:         {",
          "98:         }",
          "100:     }",
          "102:     public void exit()",
          "103:     {",
          "106:         {",
          "107:             throw new IllegalStateException();",
          "108:         }",
          "123:     }",
          "125:     public <T> void seed( Class<T> clazz, Provider<T> value )",
          "126:     {",
          "128:     }",
          "130:     public <T> void seed( Class<T> clazz, final T value )",
          "131:     {",
          "133:     }",
          "135:     public <T> Provider<T> scope( final Key<T> key, final Provider<T> unscoped )",
          "136:     {",
          "137:         return new Provider<T>()",
          "138:         {",
          "140:             public T get()",
          "141:             {",
          "159:                 {",
          "162:                 }",
          "165:             }",
          "167:     }",
          "169:     @SuppressWarnings( { \"unchecked\" } )",
          "",
          "[Removed Lines]",
          "63:     private static final class ScopeState",
          "65:         private final Map<Key<?>, Provider<?>> seeded = new HashMap<>();",
          "67:         private final Map<Key<?>, Object> provided = new HashMap<>();",
          "68:     }",
          "70:     private final ThreadLocal<LinkedList<ScopeState>> values = new ThreadLocal<>();",
          "72:     public void enter()",
          "73:     {",
          "74:         LinkedList<ScopeState> stack = values.get();",
          "75:         if ( stack == null )",
          "77:             stack = new LinkedList<>();",
          "78:             values.set( stack );",
          "80:         stack.addFirst( new ScopeState() );",
          "86:     public void enter( Memento memento )",
          "88:         enter();",
          "89:         getScopeState().seeded.putAll( memento.seeded );",
          "92:     private ScopeState getScopeState()",
          "94:         LinkedList<ScopeState> stack = values.get();",
          "95:         if ( stack == null || stack.isEmpty() )",
          "97:             throw new IllegalStateException();",
          "99:         return stack.getFirst();",
          "104:         final LinkedList<ScopeState> stack = values.get();",
          "105:         if ( stack == null || stack.isEmpty() )",
          "109:         stack.removeFirst();",
          "110:         if ( stack.isEmpty() )",
          "111:         {",
          "112:             values.remove();",
          "113:         }",
          "114:     }",
          "119:     public Memento memento()",
          "120:     {",
          "121:         LinkedList<ScopeState> stack = values.get();",
          "122:         return new Memento( stack != null ? stack.getFirst().seeded : Collections.<Key<?>, Provider<?>>emptyMap() );",
          "127:         getScopeState().seeded.put( Key.get( clazz ), value );",
          "132:         getScopeState().seeded.put( Key.get( clazz ), Providers.of( value ) );",
          "139:             @SuppressWarnings( \"unchecked\" )",
          "142:                 LinkedList<ScopeState> stack = values.get();",
          "143:                 if ( stack == null || stack.isEmpty() )",
          "144:                 {",
          "145:                     throw new OutOfScopeException( \"Cannot access \" + key + \" outside of a scoping block\" );",
          "146:                 }",
          "148:                 ScopeState state = stack.getFirst();",
          "150:                 Provider<?> seeded = state.seeded.get( key );",
          "152:                 if ( seeded != null )",
          "153:                 {",
          "154:                     return (T) seeded.get();",
          "155:                 }",
          "157:                 T provided = (T) state.provided.get( key );",
          "158:                 if ( provided == null && unscoped != null )",
          "160:                     provided = unscoped.get();",
          "161:                     state.provided.put( key, provided );",
          "164:                 return provided;",
          "166:         };",
          "",
          "[Added Lines]",
          "51:     protected static final class ScopeState",
          "53:         private final ConcurrentMap<Key<?>, CachingProvider<?>> provided = new ConcurrentHashMap<>();",
          "55:         public <T> void seed( Class<T> clazz, Provider<T> value )",
          "56:         {",
          "57:             provided.put( Key.get( clazz ), new CachingProvider<>( value ) );",
          "58:         }",
          "60:         @SuppressWarnings( \"unchecked\" )",
          "61:         public <T> Provider<T> scope( Key<T> key, final Provider<T> unscoped )",
          "62:         {",
          "63:             Provider<?> provider = provided.get( key );",
          "64:             if ( provider == null )",
          "65:             {",
          "66:                 CachingProvider<?> newValue = new CachingProvider<>( unscoped );",
          "67:                 provider = provided.putIfAbsent( key, newValue );",
          "68:                 if ( provider == null )",
          "69:                 {",
          "70:                     provider = newValue;",
          "71:                 }",
          "72:             }",
          "73:             return ( Provider<T> ) provider;",
          "74:         }",
          "76:         public Collection<CachingProvider<?>> providers()",
          "78:             return provided.values();",
          "83:     private final List<ScopeState> values = new CopyOnWriteArrayList<>();",
          "85:     public void enter()",
          "87:         values.add( 0, new ScopeState() );",
          "90:     protected ScopeState getScopeState()",
          "92:         if ( values.isEmpty() )",
          "94:             throw new OutOfScopeException( \"Cannot access session scope outside of a scoping block\" );",
          "96:         return values.get( 0 );",
          "101:         if ( values.isEmpty() )",
          "105:         values.remove( 0 );",
          "110:         getScopeState().seed( clazz, value );",
          "115:         seed( clazz, new Provider<T>()",
          "116:         {",
          "117:             @Override",
          "118:             public T get()",
          "119:             {",
          "120:                 return value;",
          "121:             }",
          "122:         } );",
          "130:             @Override",
          "133:                 return getScopeState().scope( key, unscoped ).get();",
          "134:             }",
          "135:         };",
          "136:     }",
          "142:     protected static class CachingProvider<T> implements Provider<T>",
          "143:     {",
          "144:         private final Provider<T> provider;",
          "145:         private volatile T value;",
          "147:         CachingProvider( Provider<T> provider )",
          "148:         {",
          "149:             this.provider = provider;",
          "150:         }",
          "152:         public T value()",
          "153:         {",
          "154:             return value;",
          "155:         }",
          "157:         @Override",
          "158:         public T get()",
          "159:         {",
          "160:             if ( value == null )",
          "161:             {",
          "162:                 synchronized ( this )",
          "164:                     if ( value == null )",
          "165:                     {",
          "166:                         value = provider.get();",
          "167:                     }",
          "170:             return value;",
          "171:         }",
          "",
          "---------------"
        ],
        "maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java||maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java": [
          "File: maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java -> maven-core/src/test/java/org/apache/maven/session/scope/internal/SessionScopeTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package org.apache.maven.session.scope.internal;",
          "22: import javax.inject.Provider;",
          "24: import com.google.inject.Key;",
          "25: import com.google.inject.OutOfScopeException;",
          "26: import org.apache.maven.model.locator.DefaultModelLocator;",
          "27: import org.apache.maven.model.locator.ModelLocator;",
          "28: import org.apache.maven.plugin.DefaultPluginRealmCache;",
          "29: import org.apache.maven.plugin.PluginRealmCache;",
          "30: import org.junit.Test;",
          "32: import static org.junit.Assert.assertNotNull;",
          "33: import static org.junit.Assert.assertNotSame;",
          "34: import static org.junit.Assert.assertSame;",
          "35: import static org.junit.Assert.fail;",
          "37: public class SessionScopeTest {",
          "39:     @Test",
          "40:     public void testScope() throws Exception",
          "41:     {",
          "42:         SessionScope scope = new SessionScope();",
          "44:         try",
          "45:         {",
          "46:             scope.seed( ModelLocator.class, new DefaultModelLocator() );",
          "47:             fail( \"Expected a \" + OutOfScopeException.class.getName() + \" exception to be thrown\" );",
          "48:         }",
          "49:         catch ( OutOfScopeException e )",
          "50:         {",
          "52:         }",
          "54:         Provider<ModelLocator> pml = scope.scope( Key.get( ModelLocator.class), new DefaultModelLocatorProvider() );",
          "55:         assertNotNull( pml );",
          "56:         try",
          "57:         {",
          "58:             pml.get();",
          "59:             fail( \"Expected a \" + OutOfScopeException.class.getName() + \" exception to be thrown\" );",
          "60:         }",
          "61:         catch ( OutOfScopeException e )",
          "62:         {",
          "64:         }",
          "66:         Provider<PluginRealmCache> pmst = scope.scope( Key.get( PluginRealmCache.class ), new DefaultPluginRealmCacheProvider() );",
          "67:         assertNotNull( pmst );",
          "69:         scope.enter();",
          "71:         final DefaultModelLocator dml1 = new DefaultModelLocator();",
          "72:         scope.seed( ModelLocator.class, dml1 );",
          "74:         assertSame( dml1, pml.get() );",
          "76:         PluginRealmCache mst1 = pmst.get();",
          "77:         assertSame( mst1, pmst.get() );",
          "78:         Provider<PluginRealmCache> pmst1 = scope.scope( Key.get( PluginRealmCache.class ), new DefaultPluginRealmCacheProvider() );",
          "79:         assertNotNull( pmst1 );",
          "80:         assertSame( mst1, pmst1.get() );",
          "82:         scope.enter();",
          "84:         pmst1 = scope.scope( Key.get( PluginRealmCache.class ), new DefaultPluginRealmCacheProvider() );",
          "85:         assertNotNull( pmst1 );",
          "86:         assertNotSame( mst1, pmst1.get() );",
          "88:         scope.exit();",
          "90:         assertSame( mst1, pmst.get() );",
          "92:         scope.exit();",
          "94:         try",
          "95:         {",
          "96:             pmst.get();",
          "97:             fail( \"Expected a \" + OutOfScopeException.class.getName() + \" exception to be thrown\" );",
          "98:         }",
          "99:         catch ( OutOfScopeException e )",
          "100:         {",
          "102:         }",
          "103:         try",
          "104:         {",
          "105:             scope.seed( ModelLocator.class, new DefaultModelLocator() );",
          "106:             fail( \"Expected a \" + OutOfScopeException.class.getName() + \" exception to be thrown\" );",
          "107:         }",
          "108:         catch ( OutOfScopeException e )",
          "109:         {",
          "111:         }",
          "112:     }",
          "114:     private static class DefaultPluginRealmCacheProvider implements com.google.inject.Provider<PluginRealmCache>",
          "115:     {",
          "116:         @Override",
          "117:         public PluginRealmCache get()",
          "118:         {",
          "119:             return new DefaultPluginRealmCache();",
          "120:         }",
          "121:     }",
          "123:     private static class DefaultModelLocatorProvider implements com.google.inject.Provider<ModelLocator>",
          "124:     {",
          "125:         @Override",
          "126:         public ModelLocator get()",
          "127:         {",
          "128:             return new DefaultModelLocator();",
          "129:         }",
          "130:     }",
          "132: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4dc115967a9ac1522fe01d33de1a3279d52a559a",
      "candidate_info": {
        "commit_hash": "4dc115967a9ac1522fe01d33de1a3279d52a559a",
        "repo": "apache/maven",
        "commit_url": "https://github.com/apache/maven/commit/4dc115967a9ac1522fe01d33de1a3279d52a559a",
        "files": [
          "doap_Maven.rdf"
        ],
        "message": "Fix DOAP",
        "before_after_code_files": [
          "doap_Maven.rdf||doap_Maven.rdf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/maven/pull/762"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "doap_Maven.rdf||doap_Maven.rdf": [
          "File: doap_Maven.rdf -> doap_Maven.rdf",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.2/source/apache-maven-3.8.2-src.tar.gz</file-release>",
          "42:       </Version>",
          "43:       <Version>",
          "45:         <created>2021-04-04</created>",
          "46:         <revision>3.8.1</revision>",
          "47:         <file-release>http://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.zip</file-release>",
          "",
          "[Removed Lines]",
          "44:         <name>Latest stable release</name>",
          "",
          "[Added Lines]",
          "44:         <name>Apache Maven 3.8.1</name>",
          "",
          "---------------"
        ]
      }
    }
  ]
}