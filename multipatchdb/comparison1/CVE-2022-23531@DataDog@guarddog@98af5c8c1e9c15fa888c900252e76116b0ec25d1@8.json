{
  "cve_id": "CVE-2022-23531",
  "cve_desc": "GuardDog is a CLI tool to identify malicious PyPI packages. Versions prior to 0.1.5 are vulnerable to Relative Path Traversal when scanning a specially-crafted local PyPI package. Running GuardDog against a specially-crafted package can allow an attacker to write an arbitrary file on the machine where GuardDog is executed due to a path traversal vulnerability when extracting the .tar.gz file of the package being scanned, which exists by design in the tarfile.TarFile.extractall function. This issue is patched in version 0.1.5.",
  "repo": "DataDog/guarddog",
  "patch_hash": "98af5c8c1e9c15fa888c900252e76116b0ec25d1",
  "patch_info": {
    "commit_hash": "98af5c8c1e9c15fa888c900252e76116b0ec25d1",
    "repo": "DataDog/guarddog",
    "commit_url": "https://github.com/DataDog/guarddog/commit/98af5c8c1e9c15fa888c900252e76116b0ec25d1",
    "files": [
      "guarddog/scanners/package_scanner.py",
      "poetry.lock",
      "pyproject.toml",
      "requirements.txt"
    ],
    "message": "Use tarsafe instead of built-in tarfile to extract archives (#89)\n\n* Use tarsafe instead of built-in tarfile to extract archives\n\n* Bump down Semgrep version to 0.112.1\n\nSee also https://github.com/returntocorp/semgrep/issues/6631",
    "before_after_code_files": [
      "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py",
      "poetry.lock||poetry.lock"
    ]
  },
  "patch_diff": {
    "guarddog/scanners/package_scanner.py||guarddog/scanners/package_scanner.py": [
      "File: guarddog/scanners/package_scanner.py -> guarddog/scanners/package_scanner.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import os",
      "3: import shutil",
      "4: import sys",
      "6: import tempfile",
      "7: import requests",
      "",
      "[Removed Lines]",
      "5: import tarfile",
      "",
      "[Added Lines]",
      "5: import tarsafe",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "44:         if os.path.exists(path):",
      "45:             if path.endswith('.tar.gz'):",
      "46:                 with tempfile.TemporaryDirectory() as tmpdirname:",
      "48:                     return self.analyzer.analyze_sourcecode(tmpdirname, rules=rules)",
      "49:             elif os.path.isdir(path):",
      "50:                 return self.analyzer.analyze_sourcecode(path, rules=rules)",
      "",
      "[Removed Lines]",
      "47:                     tarfile.open(path).extractall(tmpdirname)",
      "",
      "[Added Lines]",
      "47:                     tarsafe.open(path).extractall(tmpdirname)",
      "",
      "---------------"
    ],
    "poetry.lock||poetry.lock": [
      "File: poetry.lock -> poetry.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "477: [[package]]",
      "478: name = \"semgrep\"",
      "480: description = \"Lightweight static analysis for many languages. Find bug variants with patterns that look like source code.\"",
      "481: category = \"main\"",
      "482: optional = false",
      "",
      "[Removed Lines]",
      "479: version = \"0.122.0\"",
      "",
      "[Added Lines]",
      "479: version = \"0.112.1\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "496: python-lsp-jsonrpc = \">=1.0.0,<1.1.0\"",
      "497: requests = \">=2.22,<3.0\"",
      "498: \"ruamel.yaml\" = \">=0.16.0,<0.18\"",
      "500: tqdm = \">=4.46,<5.0\"",
      "501: typing-extensions = \">=4.2,<5.0\"",
      "502: urllib3 = \">=1.26,<2.0\"",
      "",
      "[Removed Lines]",
      "499: tomli = \">=2.0.1,<2.1.0\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "526: optional = false",
      "527: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*\"",
      "529: [[package]]",
      "530: name = \"termcolor\"",
      "531: version = \"2.1.1\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "528: [[package]]",
      "529: name = \"tarsafe\"",
      "530: version = \"0.0.4\"",
      "531: description = \"A safe subclass of the TarFile class for interacting with tar files. Can be used as a direct drop-in replacement for safe usage of extractall()\"",
      "532: category = \"main\"",
      "533: optional = false",
      "534: python-versions = \">=3.6\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "618: [metadata]",
      "619: lock-version = \"1.1\"",
      "620: python-versions = \">=3.9, <4\"",
      "623: [metadata.files]",
      "624: attrs = [",
      "",
      "[Removed Lines]",
      "621: content-hash = \"a2ee2a3bf8cdebfd91939977044d2a626e5b54500965da9d66a70c3c9b71ca2c\"",
      "",
      "[Added Lines]",
      "628: content-hash = \"0faf892801caefce1e994f6fdee7254ac4e2e95ad947d7459b75113af80eed74\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "867:     {file = \"ruamel.yaml.clib-0.2.7.tar.gz\", hash = \"sha256:1f08fd5a2bea9c4180db71678e850b995d2a5f4537be0e94557668cf0f5f9497\"},",
      "868: ]",
      "869: semgrep = [",
      "874: ]",
      "875: setuptools = [",
      "876:     {file = \"setuptools-65.6.3-py3-none-any.whl\", hash = \"sha256:57f6f22bde4e042978bcd50176fdb381d7c21a9efa4041202288d3737a0c6a54\"},",
      "",
      "[Removed Lines]",
      "870:     {file = \"semgrep-0.122.0-cp37.cp38.cp39.py37.py38.py39-none-any.whl\", hash = \"sha256:c7002b9aba97deb6677f4cabfa5dcc8faef2808ce6a6f28ecdd70cd8e90b01b5\"},",
      "871:     {file = \"semgrep-0.122.0-cp37.cp38.cp39.py37.py38.py39-none-macosx_10_14_x86_64.whl\", hash = \"sha256:e3fb9956e2bb926cfeff52deafe4cec24d5f1e91fe6d3fc4f81e86ec452b2ad5\"},",
      "872:     {file = \"semgrep-0.122.0-cp37.cp38.cp39.py37.py38.py39-none-macosx_11_0_arm64.whl\", hash = \"sha256:6116391b0c8c87581d9d72113702b6f8c2938d799cdae7d71a845ec89249566c\"},",
      "873:     {file = \"semgrep-0.122.0.tar.gz\", hash = \"sha256:a4c7400eb8bec9fe8df25520d1ffcb5d78b87c73dc654f1c2aec1195789bc611\"},",
      "",
      "[Added Lines]",
      "877:     {file = \"semgrep-0.112.1-cp37.cp38.cp39.py37.py38.py39-none-any.whl\", hash = \"sha256:2a62bc6321d371dadc41df2c68678e87df807ddfa3d1faafb40bd0998abfe503\"},",
      "878:     {file = \"semgrep-0.112.1-cp37.cp38.cp39.py37.py38.py39-none-macosx_10_14_x86_64.whl\", hash = \"sha256:b690a84cbaa6a4670ff6c11a674818b8ad99736e89520a3c47d1542cc45e6d05\"},",
      "879:     {file = \"semgrep-0.112.1-cp37.cp38.cp39.py37.py38.py39-none-macosx_11_0_arm64.whl\", hash = \"sha256:bc2437f12e41ac5e28a303e463098565a3d948c7744f6745bdb0fea341ccdae1\"},",
      "880:     {file = \"semgrep-0.112.1.tar.gz\", hash = \"sha256:2140a0fd16f3ac0a0e330980613ba65fe58faea7808a965e219c4199bab96102\"},",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "880:     {file = \"six-1.16.0-py2.py3-none-any.whl\", hash = \"sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\"},",
      "881:     {file = \"six-1.16.0.tar.gz\", hash = \"sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926\"},",
      "882: ]",
      "883: termcolor = [",
      "884:     {file = \"termcolor-2.1.1-py3-none-any.whl\", hash = \"sha256:fa852e957f97252205e105dd55bbc23b419a70fec0085708fc0515e399f304fd\"},",
      "885:     {file = \"termcolor-2.1.1.tar.gz\", hash = \"sha256:67cee2009adc6449c650f6bcf3bdeed00c8ba53a8cda5362733c53e0a39fb70b\"},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "890: tarsafe = [",
      "891:     {file = \"tarsafe-0.0.4-py3-none-any.whl\", hash = \"sha256:12903a81f2612c09d22117115301ea510944af5caa1e358636e0fc1d0e6134df\"},",
      "892:     {file = \"tarsafe-0.0.4.tar.gz\", hash = \"sha256:a376f4138005298c11c30cb60a5081fa2c09f44384c966106fbaeee3059e9ec5\"},",
      "893: ]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4b192c23ce889a1a0490d98f8acdb7e53a85cb0e",
      "candidate_info": {
        "commit_hash": "4b192c23ce889a1a0490d98f8acdb7e53a85cb0e",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/4b192c23ce889a1a0490d98f8acdb7e53a85cb0e",
        "files": [
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "Bump urllib3 from 1.26.14 to 1.26.15\n\nBumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.14 to 1.26.15.\n- [Release notes](https://github.com/urllib3/urllib3/releases)\n- [Changelog](https://github.com/urllib3/urllib3/blob/main/CHANGES.rst)\n- [Commits](https://github.com/urllib3/urllib3/compare/1.26.14...1.26.15)\n\n---\nupdated-dependencies:\n- dependency-name: urllib3\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1178: [[package]]",
          "1179: name = \"urllib3\"",
          "1181: description = \"HTTP library with thread-safe connection pooling, file post, and more.\"",
          "1182: category = \"main\"",
          "1183: optional = false",
          "1184: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*\"",
          "1185: files = [",
          "1188: ]",
          "1190: [package.extras]",
          "",
          "[Removed Lines]",
          "1180: version = \"1.26.14\"",
          "1186:     {file = \"urllib3-1.26.14-py2.py3-none-any.whl\", hash = \"sha256:75edcdc2f7d85b137124a6c3c9fc3933cdeaa12ecb9a6a959f22797a0feca7e1\"},",
          "1187:     {file = \"urllib3-1.26.14.tar.gz\", hash = \"sha256:076907bf8fd355cde77728471316625a4d2f7e713c125f51953bb5b3eecf4f72\"},",
          "",
          "[Added Lines]",
          "1180: version = \"1.26.15\"",
          "1186:     {file = \"urllib3-1.26.15-py2.py3-none-any.whl\", hash = \"sha256:aa751d169e23c7479ce47a0cb0da579e3ede798f994f5816a74e4f4500dcea42\"},",
          "1187:     {file = \"urllib3-1.26.15.tar.gz\", hash = \"sha256:8a388717b9476f934a21484e8c8e61875ab60644d29b9b39e11e4b9dc1c6b305\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1239: [metadata]",
          "1240: lock-version = \"2.0\"",
          "1241: python-versions = \">=3.10,<4\"",
          "",
          "[Removed Lines]",
          "1242: content-hash = \"842db6bdb9f55265ee857625c44617defcb122cd54e701f0fa3a611752d98583\"",
          "",
          "[Added Lines]",
          "1242: content-hash = \"20bb6e6cee1be1beb6f1134b80ef123b887d9c2e0d2663db327f492db01d48f8\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8de1e29c1391e95e6a92c45488da9d31141ea8e",
      "candidate_info": {
        "commit_hash": "e8de1e29c1391e95e6a92c45488da9d31141ea8e",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/e8de1e29c1391e95e6a92c45488da9d31141ea8e",
        "files": [
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "Bump pytest from 7.3.2 to 7.4.0\n\nBumps [pytest](https://github.com/pytest-dev/pytest) from 7.3.2 to 7.4.0.\n- [Release notes](https://github.com/pytest-dev/pytest/releases)\n- [Changelog](https://github.com/pytest-dev/pytest/blob/main/CHANGELOG.rst)\n- [Commits](https://github.com/pytest-dev/pytest/compare/7.3.2...7.4.0)\n\n---\nupdated-dependencies:\n- dependency-name: pytest\n  dependency-type: direct:development\n  update-type: version-update:semver-minor\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "719: [[package]]",
          "720: name = \"pytest\"",
          "722: description = \"pytest: simple powerful testing with Python\"",
          "723: optional = false",
          "724: python-versions = \">=3.7\"",
          "725: files = [",
          "728: ]",
          "730: [package.dependencies]",
          "",
          "[Removed Lines]",
          "721: version = \"7.3.2\"",
          "726:     {file = \"pytest-7.3.2-py3-none-any.whl\", hash = \"sha256:cdcbd012c9312258922f8cd3f1b62a6580fdced17db6014896053d47cddf9295\"},",
          "727:     {file = \"pytest-7.3.2.tar.gz\", hash = \"sha256:ee990a3cc55ba808b80795a79944756f315c67c12b56abd3ac993a7b8c17030b\"},",
          "",
          "[Added Lines]",
          "721: version = \"7.4.0\"",
          "726:     {file = \"pytest-7.4.0-py3-none-any.whl\", hash = \"sha256:78bf16451a2eb8c7a2ea98e32dc119fd2aa758f1d5d66dbf0a59d69a3969df32\"},",
          "727:     {file = \"pytest-7.4.0.tar.gz\", hash = \"sha256:b4bf8c45bd59934ed84001ad51e11b4ee40d40a1229d2c79f9c592b0a3f6bd8a\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1177: [metadata]",
          "1178: lock-version = \"2.0\"",
          "1179: python-versions = \">=3.10,<4\"",
          "",
          "[Removed Lines]",
          "1180: content-hash = \"45c48e27ac95d8054b67c1ca10229f53c3bc530991d4d701146dcdf28b1b9879\"",
          "",
          "[Added Lines]",
          "1180: content-hash = \"294071b023d3af6c9cb4c3afc57eca4cc2d7debb0e983efcf7d570f4da194eac\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2bde91e1012bc7817d5a122d25e36c799cb77b36",
      "candidate_info": {
        "commit_hash": "2bde91e1012bc7817d5a122d25e36c799cb77b36",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/2bde91e1012bc7817d5a122d25e36c799cb77b36",
        "files": [
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "Fix dependency groups, use newer poetry groups",
        "before_after_code_files": [
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1194: [metadata]",
          "1195: lock-version = \"2.0\"",
          "1196: python-versions = \">=3.10,<4\"",
          "",
          "[Removed Lines]",
          "1197: content-hash = \"95c82708caf8c8fe434b37cb31f5f849529b88d57acc7cecdb781922ff417caf\"",
          "",
          "[Added Lines]",
          "1197: content-hash = \"e44c806c7abba71051cee1223626006bea63f7d363c5f9c9b97215da3d2d1b4c\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f33e11b635be8cd05380e3e48331c7f6b2ea708f",
      "candidate_info": {
        "commit_hash": "f33e11b635be8cd05380e3e48331c7f6b2ea708f",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/f33e11b635be8cd05380e3e48331c7f6b2ea708f",
        "files": [
          "poetry.lock",
          "pyproject.toml"
        ],
        "message": "Bump requests from 2.28.1 to 2.28.2\n\nBumps [requests](https://github.com/psf/requests) from 2.28.1 to 2.28.2.\n- [Release notes](https://github.com/psf/requests/releases)\n- [Changelog](https://github.com/psf/requests/blob/main/HISTORY.md)\n- [Commits](https://github.com/psf/requests/compare/v2.28.1...v2.28.2)\n\n---\nupdated-dependencies:\n- dependency-name: requests\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "poetry.lock||poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "863: [[package]]",
          "864: name = \"requests\"",
          "866: description = \"Python HTTP for Humans.\"",
          "867: category = \"main\"",
          "868: optional = false",
          "869: python-versions = \">=3.7, <4\"",
          "870: files = [",
          "873: ]",
          "875: [package.dependencies]",
          "876: certifi = \">=2017.4.17\"",
          "878: idna = \">=2.5,<4\"",
          "879: urllib3 = \">=1.21.1,<1.27\"",
          "",
          "[Removed Lines]",
          "865: version = \"2.28.1\"",
          "871:     {file = \"requests-2.28.1-py3-none-any.whl\", hash = \"sha256:8fefa2a1a1365bf5520aac41836fbee479da67864514bdb821f31ce07ce65349\"},",
          "872:     {file = \"requests-2.28.1.tar.gz\", hash = \"sha256:7c5599b102feddaa661c826c56ab4fee28bfd17f5abca1ebbe3e7f19d7c97983\"},",
          "877: charset-normalizer = \">=2,<3\"",
          "",
          "[Added Lines]",
          "865: version = \"2.28.2\"",
          "871:     {file = \"requests-2.28.2-py3-none-any.whl\", hash = \"sha256:64299f4909223da747622c030b781c0d7811e359c37124b4bd368fb8c6518baa\"},",
          "872:     {file = \"requests-2.28.2.tar.gz\", hash = \"sha256:98b1b2782e3c6c4904938b84c0eb932721069dfdb9134313beff7c83c2df24bf\"},",
          "877: charset-normalizer = \">=2,<4\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1237: [metadata]",
          "1238: lock-version = \"2.0\"",
          "1239: python-versions = \">=3.10,<4\"",
          "",
          "[Removed Lines]",
          "1240: content-hash = \"fc454bab456c09190ffe9be709f7f882bf826265021a9e8f41a5801d57c18176\"",
          "",
          "[Added Lines]",
          "1240: content-hash = \"d2bd7a63feeb667e7e36b646d97fdbc24929a49e77f27b45c3d1b95b6017a8a6\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "414db843ce73cfbab3a0741c16e1287723478731",
      "candidate_info": {
        "commit_hash": "414db843ce73cfbab3a0741c16e1287723478731",
        "repo": "DataDog/guarddog",
        "commit_url": "https://github.com/DataDog/guarddog/commit/414db843ce73cfbab3a0741c16e1287723478731",
        "files": [
          ".pre-commit-config.yaml",
          "Makefile",
          "README.md",
          "guarddog/__init__.py",
          "guarddog/analyzer/metadata/__init__.py",
          "guarddog/analyzer/metadata/detector.py",
          "guarddog/analyzer/metadata/empty_information.py",
          "guarddog/analyzer/metadata/npm/__init__.py",
          "guarddog/analyzer/metadata/npm/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/npm/release_zero.py",
          "guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/pypi/__init__.py",
          "guarddog/analyzer/metadata/pypi/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/release_zero.py",
          "guarddog/analyzer/metadata/repository_integrity_mismatch.py",
          "guarddog/analyzer/metadata/resources/top_pypi_packages.json",
          "guarddog/analyzer/metadata/typosquatting.py",
          "guarddog/analyzer/sourcecode/__init__.py",
          "guarddog/analyzer/sourcecode/cmd-overwrite.yml",
          "guarddog/analyzer/sourcecode/code-execution.yml",
          "guarddog/analyzer/sourcecode/download-executable.yml",
          "guarddog/analyzer/sourcecode/exec-base64.yml",
          "guarddog/analyzer/sourcecode/exfiltrate-sensitive-data.yml",
          "guarddog/analyzer/sourcecode/npm-exec-base64.yml",
          "guarddog/analyzer/sourcecode/npm-install-script.yml",
          "guarddog/analyzer/sourcecode/npm-serialize-environment.yml",
          "guarddog/analyzer/sourcecode/npm-silent-process-execution.yml",
          "guarddog/analyzer/sourcecode/obfuscation.yml",
          "guarddog/analyzer/sourcecode/shady-links.yml",
          "guarddog/analyzer/sourcecode/silent-process-execution.yml",
          "guarddog/analyzer/sourcecode/steganography.yml",
          "guarddog/cli.py",
          "guarddog/ecosystems.py",
          "guarddog/reporters/sarif.py",
          "guarddog/scanners/__init__.py",
          "guarddog/scanners/scanner.py",
          "guarddog/utils/archives.py",
          "poetry.lock",
          "pyproject.toml",
          "requirements.txt",
          "scripts/generate-rules-docs.py"
        ],
        "message": "Autogenerate 'list-rules' output and autoinject rules docs in README file (#133)",
        "before_after_code_files": [
          "guarddog/__init__.py||guarddog/__init__.py",
          "guarddog/analyzer/metadata/__init__.py||guarddog/analyzer/metadata/__init__.py",
          "guarddog/analyzer/metadata/detector.py||guarddog/analyzer/metadata/detector.py",
          "guarddog/analyzer/metadata/empty_information.py||guarddog/analyzer/metadata/empty_information.py",
          "guarddog/analyzer/metadata/npm/__init__.py||guarddog/analyzer/metadata/npm/__init__.py",
          "guarddog/analyzer/metadata/npm/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/npm/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/npm/release_zero.py||guarddog/analyzer/metadata/npm/release_zero.py",
          "guarddog/analyzer/metadata/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/pypi/__init__.py||guarddog/analyzer/metadata/pypi/__init__.py",
          "guarddog/analyzer/metadata/pypi/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/pypi/potentially_compromised_email_domain.py",
          "guarddog/analyzer/metadata/release_zero.py||guarddog/analyzer/metadata/release_zero.py",
          "guarddog/analyzer/metadata/repository_integrity_mismatch.py||guarddog/analyzer/metadata/repository_integrity_mismatch.py",
          "guarddog/analyzer/metadata/typosquatting.py||guarddog/analyzer/metadata/typosquatting.py",
          "guarddog/analyzer/sourcecode/__init__.py||guarddog/analyzer/sourcecode/__init__.py",
          "guarddog/cli.py||guarddog/cli.py",
          "guarddog/ecosystems.py||guarddog/ecosystems.py",
          "guarddog/reporters/sarif.py||guarddog/reporters/sarif.py",
          "guarddog/scanners/__init__.py||guarddog/scanners/__init__.py",
          "guarddog/scanners/scanner.py||guarddog/scanners/scanner.py",
          "guarddog/utils/archives.py||guarddog/utils/archives.py",
          "poetry.lock||poetry.lock",
          "scripts/generate-rules-docs.py||scripts/generate-rules-docs.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "poetry.lock||poetry.lock"
          ],
          "candidate": [
            "poetry.lock||poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "guarddog/__init__.py||guarddog/__init__.py": [
          "File: guarddog/__init__.py -> guarddog/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from guarddog.scanners.npm_package_scanner import NPMPackageScanner  # NOQA",
          "",
          "[Removed Lines]",
          "1: from guarddog.scanners.pypi_package_scanner import PypiPackageScanner  # NOQA",
          "",
          "[Added Lines]",
          "2: from guarddog.scanners.pypi_package_scanner import PypiPackageScanner  # NOQA",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/__init__.py||guarddog/analyzer/metadata/__init__.py": [
          "File: guarddog/analyzer/metadata/__init__.py -> guarddog/analyzer/metadata/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: def get_metadata_detectors(ecosystem: ECOSYSTEM) -> dict[str, Detector]:",
          "9:         case ECOSYSTEM.PYPI:",
          "10:             return PYPI_METADATA_RULES",
          "11:         case ECOSYSTEM.NPM:",
          "",
          "[Removed Lines]",
          "8:     match(ecosystem):",
          "",
          "[Added Lines]",
          "8:     match (ecosystem):",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/detector.py||guarddog/analyzer/metadata/detector.py": [
          "File: guarddog/analyzer/metadata/detector.py -> guarddog/analyzer/metadata/detector.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: class Detector:",
          "7:     RULE_NAME = \"\"",
          "12:     # returns (ruleMatches, message)",
          "13:     @abstractmethod",
          "14:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "15:                version: Optional[str] = None) -> tuple[bool, Optional[str]]:",
          "16:         pass  # pragma: no cover",
          "",
          "[Removed Lines]",
          "9:     def __init__(self) -> None:",
          "10:         pass",
          "",
          "[Added Lines]",
          "8:     def __init__(self, name: str, description: str) -> None:",
          "9:         self.name = name",
          "10:         self.description = description",
          "18:     def get_name(self) -> str:",
          "19:         return self.name",
          "21:     def get_description(self) -> str:",
          "22:         return self.description",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/empty_information.py||guarddog/analyzer/metadata/empty_information.py": [
          "File: guarddog/analyzer/metadata/empty_information.py -> guarddog/analyzer/metadata/empty_information.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from abc import abstractmethod",
          "6: from typing import Optional",
          "",
          "[Removed Lines]",
          "1: \"\"\" Empty Information Detector",
          "3: Detects if a package contains an empty description",
          "4: \"\"\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:     Such situation might be the marker of a low quality package.\"\"\"",
          "17:     MESSAGE_TEMPLATE = \"This package has an empty description on %s\"",
          "20:     @abstractmethod",
          "21:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "",
          "[Removed Lines]",
          "18:     RULE_NAME = \"empty_information\"",
          "",
          "[Added Lines]",
          "15:     def __init__(self):",
          "16:         super().__init__(",
          "17:             name=\"empty_information\",",
          "18:             description=\"Identify packages with an empty description field\"",
          "19:         )",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/npm/__init__.py||guarddog/analyzer/metadata/npm/__init__.py": [
          "File: guarddog/analyzer/metadata/npm/__init__.py -> guarddog/analyzer/metadata/npm/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     NPMTyposquatDetector",
          "14: ]",
          "",
          "[Removed Lines]",
          "16: for cls in classes:",
          "17:     parent = cls.__base__",
          "18:     NPM_METADATA_RULES[parent.RULE_NAME] = cls()  # type: ignore",
          "",
          "[Added Lines]",
          "16: for detectorClass in classes:",
          "17:     detectorInstance = detectorClass()  # type: ignore",
          "18:     NPM_METADATA_RULES[detectorInstance.get_name()] = detectorInstance",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/npm/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/npm/potentially_compromised_email_domain.py": [
          "File: guarddog/analyzer/metadata/npm/potentially_compromised_email_domain.py -> guarddog/analyzer/metadata/npm/potentially_compromised_email_domain.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: class NPMPotentiallyCompromisedEmailDomainDetector(PotentiallyCompromisedEmailDomainDetector):",
          "16:     def __init__(self):",
          "20:     def get_email_addresses(self, package_info: dict) -> list[str]:",
          "21:         return list(map(lambda x: x[\"email\"], package_info[\"maintainers\"]))",
          "",
          "[Removed Lines]",
          "17:         super().__init__()",
          "18:         self.ecosystem = \"npm\"",
          "",
          "[Added Lines]",
          "16:         super().__init__(\"npm\")",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/npm/release_zero.py||guarddog/analyzer/metadata/npm/release_zero.py": [
          "File: guarddog/analyzer/metadata/npm/release_zero.py -> guarddog/analyzer/metadata/npm/release_zero.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "13:                version: Optional[str] = None) -> tuple[bool, str]:",
          "15:             ReleaseZeroDetector.MESSAGE_TEMPLATE % package_info[\"dist-tags\"][\"latest\"]",
          "",
          "[Removed Lines]",
          "14:         return package_info[\"dist-tags\"][\"latest\"] in [\"0.0.0\", \"0.0\", \"0\"],\\",
          "",
          "[Added Lines]",
          "14:         return package_info[\"dist-tags\"][\"latest\"] in [\"0.0.0\", \"0.0\", \"0\"], \\",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/potentially_compromised_email_domain.py": [
          "File: guarddog/analyzer/metadata/potentially_compromised_email_domain.py -> guarddog/analyzer/metadata/potentially_compromised_email_domain.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from abc import abstractmethod",
          "6: from datetime import datetime",
          "7: from typing import Optional",
          "",
          "[Removed Lines]",
          "1: \"\"\" Compromised Email Detector",
          "3: Detects if a maintainer's email domain might have been compromised.",
          "4: \"\"\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: class PotentiallyCompromisedEmailDomainDetector(Detector):",
          "23:     def _get_domain_creation_date(self, email_domain) -> tuple[Optional[datetime], bool]:",
          "24:         \"\"\"",
          "",
          "[Removed Lines]",
          "15:     \"\"\"This heuristic detects whether the maintainer email address has an outdated domain that anyone could acquire.",
          "16:     This could lead to the package being overtaken by malicious actors.\"\"\"",
          "17:     RULE_NAME = \"potentially_compromised_email_domain\"",
          "19:     def __init__(self):",
          "20:         super().__init__()",
          "21:         self.ecosystem = \"\"",
          "",
          "[Added Lines]",
          "11:     # The name of the rule is dependent on the ecosystem and is provided by the implementing subclasses",
          "12:     def __init__(self, ecosystem: str):",
          "13:         super().__init__(",
          "14:             name=\"potentially_compromised_email_domain\",",
          "15:             description=\"Identify when a package maintainer e-mail domain (and therefore package manager account) \"",
          "16:                         \"might have been compromised\",",
          "17:         )",
          "18:         self.ecosystem = ecosystem",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/pypi/__init__.py||guarddog/analyzer/metadata/pypi/__init__.py": [
          "File: guarddog/analyzer/metadata/pypi/__init__.py -> guarddog/analyzer/metadata/pypi/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:     PypiIntegrityMismatchDetector",
          "16: ]",
          "",
          "[Removed Lines]",
          "18: for cls in classes:",
          "19:     parent = cls.__base__",
          "20:     PYPI_METADATA_RULES[parent.RULE_NAME] = cls()  # type: ignore",
          "",
          "[Added Lines]",
          "18: for detectorClass in classes:",
          "19:     detectorInstance = detectorClass()  # type: ignore",
          "20:     PYPI_METADATA_RULES[detectorInstance.get_name()] = detectorInstance",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/pypi/potentially_compromised_email_domain.py||guarddog/analyzer/metadata/pypi/potentially_compromised_email_domain.py": [
          "File: guarddog/analyzer/metadata/pypi/potentially_compromised_email_domain.py -> guarddog/analyzer/metadata/pypi/potentially_compromised_email_domain.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: class PypiPotentiallyCompromisedEmailDomainDetector(PotentiallyCompromisedEmailDomainDetector):",
          "16:     def __init__(self):",
          "20:     def get_email_addresses(self, package_info: dict) -> list[str]:",
          "21:         author_email = package_info[\"info\"][\"author_email\"]",
          "",
          "[Removed Lines]",
          "17:         super().__init__()",
          "18:         self.ecosystem = \"Pypi\"",
          "",
          "[Added Lines]",
          "17:         super().__init__(\"pypi\")",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/release_zero.py||guarddog/analyzer/metadata/release_zero.py": [
          "File: guarddog/analyzer/metadata/release_zero.py -> guarddog/analyzer/metadata/release_zero.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: from guarddog.analyzer.metadata.detector import Detector",
          "",
          "[Removed Lines]",
          "1: \"\"\" Empty Information Detector",
          "3: Detects when a package has its latest release version to 0.0.0",
          "4: \"\"\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:     \"\"\"This heuristic detects if the latest release of this package is version 0.\"\"\"",
          "12:     MESSAGE_TEMPLATE = \"The package has its latest release version to %s\"",
          "",
          "[Removed Lines]",
          "13:     RULE_NAME = \"release_zero\"",
          "",
          "[Added Lines]",
          "9:     def __init__(self):",
          "10:         super().__init__(",
          "11:             name=\"release_zero\",",
          "12:             description=\"Identify packages with an release version that's 0.0 or 0.0.0\"",
          "13:         )",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/repository_integrity_mismatch.py||guarddog/analyzer/metadata/repository_integrity_mismatch.py": [
          "File: guarddog/analyzer/metadata/repository_integrity_mismatch.py -> guarddog/analyzer/metadata/repository_integrity_mismatch.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from abc import abstractmethod",
          "6: from typing import Optional",
          "",
          "[Removed Lines]",
          "1: \"\"\" Empty Information Detector",
          "3: Detects if a package contains an empty description",
          "4: \"\"\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:     \"\"\"This package contains files that have been tampered with between the source repository and the package CDN\"\"\"",
          "13:     RULE_NAME = \"repository_integrity_mismatch\"",
          "15:     @abstractmethod",
          "16:     def detect(self, package_info, path: Optional[str] = None, name: Optional[str] = None,",
          "17:                version: Optional[str] = None) -> tuple[bool, str]:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:     def __init__(self):",
          "12:         super().__init__(",
          "13:             name=\"repository_integrity_mismatch\",",
          "14:             description=\"Identify packages with a linked GitHub repository where the package has extra unexpected files\"",
          "15:         )",
          "",
          "---------------"
        ],
        "guarddog/analyzer/metadata/typosquatting.py||guarddog/analyzer/metadata/typosquatting.py": [
          "File: guarddog/analyzer/metadata/typosquatting.py -> guarddog/analyzer/metadata/typosquatting.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: class TyposquatDetector(Detector):",
          "16:     MESSAGE_TEMPLATE = \"This package closely ressembles the following package names, and might be a typosquatting \" \\",
          "17:                        \"attempt: %s\"",
          "19:     def __init__(self) -> None:",
          "20:         self.popular_packages = self._get_top_packages()  # Find top PyPI packages",
          "23:     @abc.abstractmethod",
          "24:     def _get_top_packages(self) -> list:",
          "",
          "[Removed Lines]",
          "10:     \"\"\"This heuristic looks for typosquatting attacks.",
          "11:     It detects if a package name is a typosquat of one of the top 1000 packages.",
          "12:     Checks for distance one Levenshtein, one-off character swaps, permutations",
          "13:     around hyphens, and substrings.\"\"\"",
          "15:     RULE_NAME = \"typosquatting\"",
          "21:         super().__init__()  # Call constructor",
          "",
          "[Added Lines]",
          "15:         super().__init__(",
          "16:             name=\"typosquatting\",",
          "17:             description=\"Identify packages that are named closely to an highly popular package\"",
          "18:         )",
          "",
          "---------------"
        ],
        "guarddog/analyzer/sourcecode/__init__.py||guarddog/analyzer/sourcecode/__init__.py": [
          "File: guarddog/analyzer/sourcecode/__init__.py -> guarddog/analyzer/sourcecode/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: )",
          "16: SOURCECODE_RULES = {",
          "21: for file_name in rule_file_names:",
          "22:     with open(os.path.join(current_dir, file_name), \"r\") as fd:",
          "23:         data = yaml.load(fd, Loader=SafeLoader)",
          "24:         for rule in data[\"rules\"]:",
          "25:             for lang in rule[\"languages\"]:",
          "27:                     case \"python\":",
          "29:                     case \"javascript\" | \"typescript\" | \"json\":",
          "",
          "[Removed Lines]",
          "17:     ECOSYSTEM.PYPI: set(),",
          "18:     ECOSYSTEM.NPM: set()",
          "19: }  # type: dict[ECOSYSTEM, set[str]]",
          "26:                 match(lang):",
          "28:                         SOURCECODE_RULES[ECOSYSTEM.PYPI].add(rule[\"id\"])",
          "30:                         SOURCECODE_RULES[ECOSYSTEM.NPM].add(rule[\"id\"])",
          "",
          "[Added Lines]",
          "18:     ECOSYSTEM.PYPI: list(),",
          "19:     ECOSYSTEM.NPM: list()",
          "20: }  # type: dict[ECOSYSTEM, list[dict]]",
          "27:                 match lang:",
          "29:                         SOURCECODE_RULES[ECOSYSTEM.PYPI].append(rule)",
          "31:                         SOURCECODE_RULES[ECOSYSTEM.NPM].append(rule)",
          "",
          "---------------"
        ],
        "guarddog/cli.py||guarddog/cli.py": [
          "File: guarddog/cli.py -> guarddog/cli.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from typing import cast, Optional",
          "10: import click",
          "11: from termcolor import colored",
          "13: from guarddog.analyzer.analyzer import SEMGREP_RULE_NAMES",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: from prettytable import PrettyTable",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142: def _list_rules(ecosystem):",
          "154: @cli.group",
          "",
          "[Removed Lines]",
          "143:     metadata_detectors = get_metadata_detectors(ecosystem)",
          "144:     if len(SOURCECODE_RULES[ecosystem]) > 0:",
          "145:         print(\"Available source code rules:\")",
          "146:         for rule in SOURCECODE_RULES[ecosystem]:",
          "147:             print(f\"\\t{rule}\")",
          "148:     if len(metadata_detectors.keys()) > 0:",
          "149:         print(\"Available metadata detectors:\")",
          "150:         for detector in metadata_detectors.keys():",
          "151:             print(f\"\\t{detector}\")",
          "",
          "[Added Lines]",
          "144:     table = PrettyTable()",
          "145:     table.align = \"l\"",
          "146:     table.field_names = [\"Rule type\", \"Rule name\", \"Description\"]",
          "148:     for rule in SOURCECODE_RULES[ecosystem]:",
          "149:         table.add_row([\"Source code\", rule['id'], rule.get('metadata', {}).get('description')])",
          "151:     metadata_rules = get_metadata_detectors(ecosystem)",
          "152:     for ruleName in metadata_rules:",
          "153:         rule = metadata_rules[ruleName]",
          "154:         table.add_row([\"Package metadata\", rule.get_name(), rule.get_description()])",
          "156:     print(table)",
          "",
          "---------------"
        ],
        "guarddog/ecosystems.py||guarddog/ecosystems.py": [
          "File: guarddog/ecosystems.py -> guarddog/ecosystems.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: class ECOSYSTEM(Enum):",
          "5:     PYPI = \"pypi\"",
          "6:     NPM = \"npm\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: def get_friendly_name(ecosystem: ECOSYSTEM) -> str:",
          "10:     match ecosystem:",
          "11:         case ECOSYSTEM.PYPI:",
          "12:             return \"PyPI\"",
          "13:         case ECOSYSTEM.NPM:",
          "14:             return \"npm\"",
          "15:         case _:",
          "16:             return ecosystem.value",
          "",
          "---------------"
        ],
        "guarddog/reporters/sarif.py||guarddog/reporters/sarif.py": [
          "File: guarddog/reporters/sarif.py -> guarddog/reporters/sarif.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import hashlib",
          "2: import json",
          "4: import os.path",
          "6: from guarddog.analyzer.metadata import get_metadata_detectors",
          "7: from guarddog.ecosystems import ECOSYSTEM",
          "",
          "[Removed Lines]",
          "3: import yaml",
          "",
          "[Added Lines]",
          "5: import yaml",
          "",
          "---------------"
        ],
        "guarddog/scanners/__init__.py||guarddog/scanners/__init__.py": [
          "File: guarddog/scanners/__init__.py -> guarddog/scanners/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from .npm_package_scanner import NPMPackageScanner",
          "4: from .npm_project_scanner import NPMRequirementsScanner",
          "7: from .scanner import Scanner",
          "8: from ..ecosystems import ECOSYSTEM",
          "",
          "[Removed Lines]",
          "1: from .pypi_package_scanner import PypiPackageScanner",
          "2: from .pypi_project_scanner import PypiRequirementsScanner",
          "6: from typing import Optional",
          "",
          "[Added Lines]",
          "1: from typing import Optional",
          "5: from .pypi_package_scanner import PypiPackageScanner",
          "6: from .pypi_project_scanner import PypiRequirementsScanner",
          "",
          "---------------"
        ],
        "guarddog/scanners/scanner.py||guarddog/scanners/scanner.py": [
          "File: guarddog/scanners/scanner.py -> guarddog/scanners/scanner.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import json",
          "3: import os",
          "4: import sys",
          "7: import tempfile",
          "8: from abc import abstractmethod",
          "10: import requests",
          "12: from guarddog.utils.archives import safe_extract",
          "",
          "[Removed Lines]",
          "6: import pathos  # type: ignore",
          "",
          "[Added Lines]",
          "8: import pathos  # type: ignore",
          "",
          "---------------"
        ],
        "guarddog/utils/archives.py||guarddog/utils/archives.py": [
          "File: guarddog/utils/archives.py -> guarddog/utils/archives.py"
        ],
        "poetry.lock||poetry.lock": [
          "File: poetry.lock -> poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "144: [[package]]",
          "145: name = \"exceptiongroup\"",
          "147: description = \"Backport of PEP 654 (exception groups)\"",
          "148: category = \"main\"",
          "149: optional = false",
          "",
          "[Removed Lines]",
          "146: version = \"1.0.4\"",
          "",
          "[Added Lines]",
          "146: version = \"1.1.0\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "179: [[package]]",
          "180: name = \"future\"",
          "182: description = \"Clean single-source support for Python 3 and 2\"",
          "183: category = \"main\"",
          "184: optional = false",
          "",
          "[Removed Lines]",
          "181: version = \"0.18.2\"",
          "",
          "[Added Lines]",
          "181: version = \"0.18.3\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211: [[package]]",
          "212: name = \"iniconfig\"",
          "215: category = \"main\"",
          "216: optional = false",
          "219: [[package]]",
          "220: name = \"jsonschema\"",
          "",
          "[Removed Lines]",
          "213: version = \"1.1.1\"",
          "214: description = \"iniconfig: brain-dead simple config-ini parsing\"",
          "217: python-versions = \"*\"",
          "",
          "[Added Lines]",
          "213: version = \"2.0.0\"",
          "214: description = \"brain-dead simple config-ini parsing\"",
          "217: python-versions = \">=3.7\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "343: [package.extras]",
          "344: dill = [\"dill (>=0.3.6)\"]",
          "346: [[package]]",
          "347: name = \"pycodestyle\"",
          "348: version = \"2.9.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346: [[package]]",
          "347: name = \"prettytable\"",
          "348: version = \"3.6.0\"",
          "349: description = \"A simple Python library for easily displaying tabular data in a visually appealing ASCII table format\"",
          "350: category = \"main\"",
          "351: optional = false",
          "352: python-versions = \">=3.7\"",
          "354: [package.dependencies]",
          "355: wcwidth = \"*\"",
          "357: [package.extras]",
          "358: tests = [\"pytest\", \"pytest-cov\", \"pytest-lazy-fixture\"]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "392: [[package]]",
          "393: name = \"pyrsistent\"",
          "395: description = \"Persistent/Functional/Immutable data structures\"",
          "396: category = \"main\"",
          "397: optional = false",
          "",
          "[Removed Lines]",
          "394: version = \"0.19.2\"",
          "",
          "[Added Lines]",
          "408: version = \"0.19.3\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "400: [[package]]",
          "401: name = \"pytest\"",
          "403: description = \"pytest: simple powerful testing with Python\"",
          "404: category = \"main\"",
          "405: optional = false",
          "",
          "[Removed Lines]",
          "402: version = \"7.2.0\"",
          "",
          "[Added Lines]",
          "416: version = \"7.2.1\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "569: [[package]]",
          "570: name = \"setuptools\"",
          "572: description = \"Easily download, build, install, upgrade, and uninstall Python packages\"",
          "573: category = \"main\"",
          "574: optional = false",
          "575: python-versions = \">=3.7\"",
          "577: [package.extras]",
          "579: testing = [\"build[virtualenv]\", \"filelock (>=3.4.0)\", \"flake8 (<5)\", \"flake8-2020\", \"ini2toml[lite] (>=0.9)\", \"jaraco.envs (>=2.2)\", \"jaraco.path (>=3.2.0)\", \"pip (>=19.1)\", \"pip-run (>=8.8)\", \"pytest (>=6)\", \"pytest-black (>=0.3.7)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=1.3)\", \"pytest-flake8\", \"pytest-mypy (>=0.9.1)\", \"pytest-perf\", \"pytest-timeout\", \"pytest-xdist\", \"tomli-w (>=1.0.0)\", \"virtualenv (>=13.0.0)\", \"wheel\"]",
          "580: testing-integration = [\"build[virtualenv]\", \"filelock (>=3.4.0)\", \"jaraco.envs (>=2.2)\", \"jaraco.path (>=3.2.0)\", \"pytest\", \"pytest-enabler\", \"pytest-xdist\", \"tomli\", \"virtualenv (>=13.0.0)\", \"wheel\"]",
          "",
          "[Removed Lines]",
          "571: version = \"65.6.3\"",
          "578: docs = [\"furo\", \"jaraco.packaging (>=9)\", \"jaraco.tidelift (>=1.4)\", \"pygments-github-lexers (==0.0.5)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5)\", \"sphinx-favicon\", \"sphinx-hoverxref (<2)\", \"sphinx-inline-tabs\", \"sphinx-notfound-page (==0.8.3)\", \"sphinx-reredirects\", \"sphinxcontrib-towncrier\"]",
          "",
          "[Added Lines]",
          "585: version = \"65.7.0\"",
          "592: docs = [\"furo\", \"jaraco.packaging (>=9)\", \"jaraco.tidelift (>=1.4)\", \"pygments-github-lexers (==0.0.5)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5)\", \"sphinx-favicon\", \"sphinx-hoverxref (<2)\", \"sphinx-inline-tabs\", \"sphinx-lint\", \"sphinx-notfound-page (==0.8.3)\", \"sphinx-reredirects\", \"sphinxcontrib-towncrier\"]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "598: [[package]]",
          "599: name = \"termcolor\"",
          "601: description = \"ANSI color formatting for output in terminal\"",
          "602: category = \"main\"",
          "603: optional = false",
          "",
          "[Removed Lines]",
          "600: version = \"2.1.1\"",
          "",
          "[Added Lines]",
          "614: version = \"2.2.0\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "671: [package.dependencies]",
          "672: bracex = \">=2.1.1\"",
          "674: [[package]]",
          "675: name = \"websocket-client\"",
          "676: version = \"1.3.3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "688: [[package]]",
          "689: name = \"wcwidth\"",
          "690: version = \"0.2.6\"",
          "691: description = \"Measures the displayed width of unicode strings in a terminal\"",
          "692: category = \"main\"",
          "693: optional = false",
          "694: python-versions = \"*\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "687: [metadata]",
          "688: lock-version = \"1.1\"",
          "689: python-versions = \">=3.10,<4\"",
          "692: [metadata.files]",
          "693: attrs = [",
          "",
          "[Removed Lines]",
          "690: content-hash = \"c7f45b60abe8b102c46f2b34d7386bfc8951b5fbee2ca5195b07b592a7d788f2\"",
          "",
          "[Added Lines]",
          "712: content-hash = \"1c19fa6114074daced0a469a292843d8d02b6ed69a5a3656142d6e2bd939b848\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "805:     {file = \"docker-6.0.0b1.tar.gz\", hash = \"sha256:a38b57fd6ad112dade98b795dc94a790b347134b140a5d43d7634aa6ad928859\"},",
          "806: ]",
          "807: exceptiongroup = [",
          "810: ]",
          "811: face = [",
          "812:     {file = \"face-20.1.1-py2-none-any.whl\", hash = \"sha256:3790311a7329e4b0d90baee346eecad54b337629576edf3a246683a5f0d24446\"},",
          "",
          "[Removed Lines]",
          "808:     {file = \"exceptiongroup-1.0.4-py3-none-any.whl\", hash = \"sha256:542adf9dea4055530d6e1279602fa5cb11dab2395fa650b8674eaec35fc4a828\"},",
          "809:     {file = \"exceptiongroup-1.0.4.tar.gz\", hash = \"sha256:bd14967b79cd9bdb54d97323216f8fdf533e278df937aa2a90089e7d6e06e5ec\"},",
          "",
          "[Added Lines]",
          "830:     {file = \"exceptiongroup-1.1.0-py3-none-any.whl\", hash = \"sha256:327cbda3da756e2de031a3107b81ab7b3770a602c4d16ca618298c526f4bec1e\"},",
          "831:     {file = \"exceptiongroup-1.1.0.tar.gz\", hash = \"sha256:bcb67d800a4497e1b404c2dd44fca47d3b7a5e5433dbab67f96c1a685cdfdf23\"},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "817:     {file = \"flake8-5.0.4.tar.gz\", hash = \"sha256:6fbe320aad8d6b95cec8b8e47bc933004678dc63095be98528b7bdd2a9f510db\"},",
          "818: ]",
          "819: future = [",
          "821: ]",
          "822: glom = [",
          "823:     {file = \"glom-22.1.0-py2.py3-none-any.whl\", hash = \"sha256:5339da206bf3532e01a83a35aca202960ea885156986d190574b779598e9e772\"},",
          "",
          "[Removed Lines]",
          "820:     {file = \"future-0.18.2.tar.gz\", hash = \"sha256:b1bead90b70cf6ec3f0710ae53a525360fa360d306a86583adc6bf83a4db537d\"},",
          "",
          "[Added Lines]",
          "842:     {file = \"future-0.18.3.tar.gz\", hash = \"sha256:34a17436ed1e96697a86f9de3d15a3b0be01d8bc8de9c1dffd59fb8234ed5307\"},",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "828:     {file = \"idna-3.3.tar.gz\", hash = \"sha256:9d643ff0a55b762d5cdb124b8eaa99c66322e2157b69160bc32796e824360e6d\"},",
          "829: ]",
          "830: iniconfig = [",
          "833: ]",
          "834: jsonschema = [",
          "835:     {file = \"jsonschema-4.9.1-py3-none-any.whl\", hash = \"sha256:8ebad55894c002585271af2d327d99339ef566fb085d9129b69e2623867c4106\"},",
          "",
          "[Removed Lines]",
          "831:     {file = \"iniconfig-1.1.1-py2.py3-none-any.whl\", hash = \"sha256:011e24c64b7f47f6ebd835bb12a743f2fbe9a26d4cecaa7f53bc4f35ee9da8b3\"},",
          "832:     {file = \"iniconfig-1.1.1.tar.gz\", hash = \"sha256:bc3af051d7d14b2ee5ef9969666def0cd1a000e121eaea580d4a313df4b37f32\"},",
          "",
          "[Added Lines]",
          "853:     {file = \"iniconfig-2.0.0-py3-none-any.whl\", hash = \"sha256:b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374\"},",
          "854:     {file = \"iniconfig-2.0.0.tar.gz\", hash = \"sha256:2d91e135bf72d31a410b17c16da610a82cb55f6b0477d1a902134b24a455b8b3\"},",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "891:     {file = \"ppft-1.7.6.6-py3-none-any.whl\", hash = \"sha256:f355d2caeed8bd7c9e4a860c471f31f7e66d1ada2791ab5458ea7dca15a51e41\"},",
          "892:     {file = \"ppft-1.7.6.6.tar.gz\", hash = \"sha256:f933f0404f3e808bc860745acb3b79cd4fe31ea19a20889a645f900415be60f1\"},",
          "893: ]",
          "894: pycodestyle = [",
          "895:     {file = \"pycodestyle-2.9.1-py2.py3-none-any.whl\", hash = \"sha256:d1735fc58b418fd7c5f658d28d943854f8a849b01a5d0a1e6f3f3fdd0166804b\"},",
          "896:     {file = \"pycodestyle-2.9.1.tar.gz\", hash = \"sha256:2c9607871d58c76354b697b42f5d57e1ada7d261c261efac224b664affdc5785\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916: prettytable = [",
          "917:     {file = \"prettytable-3.6.0-py3-none-any.whl\", hash = \"sha256:3b767129491767a3a5108e6f305cbaa650f8020a7db5dfe994a2df7ef7bad0fe\"},",
          "918:     {file = \"prettytable-3.6.0.tar.gz\", hash = \"sha256:2e0026af955b4ea67b22122f310b90eae890738c08cb0458693a49b6221530ac\"},",
          "919: ]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "941:     {file = \"pyparsing-3.0.9.tar.gz\", hash = \"sha256:2b020ecf7d21b687f219b71ecad3631f644a47f01403fa1d1036b0c6416d70fb\"},",
          "942: ]",
          "943: pyrsistent = [",
          "966: ]",
          "967: pytest = [",
          "970: ]",
          "971: python-dateutil = [",
          "972:     {file = \"python-dateutil-2.8.2.tar.gz\", hash = \"sha256:0123cacc1627ae19ddf3c27a5de5bd67ee4586fbdd6440d9748f8abb483d3e86\"},",
          "",
          "[Removed Lines]",
          "944:     {file = \"pyrsistent-0.19.2-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:d6982b5a0237e1b7d876b60265564648a69b14017f3b5f908c5be2de3f9abb7a\"},",
          "945:     {file = \"pyrsistent-0.19.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:187d5730b0507d9285a96fca9716310d572e5464cadd19f22b63a6976254d77a\"},",
          "946:     {file = \"pyrsistent-0.19.2-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:055ab45d5911d7cae397dc418808d8802fb95262751872c841c170b0dbf51eed\"},",
          "947:     {file = \"pyrsistent-0.19.2-cp310-cp310-win32.whl\", hash = \"sha256:456cb30ca8bff00596519f2c53e42c245c09e1a4543945703acd4312949bfd41\"},",
          "948:     {file = \"pyrsistent-0.19.2-cp310-cp310-win_amd64.whl\", hash = \"sha256:b39725209e06759217d1ac5fcdb510e98670af9e37223985f330b611f62e7425\"},",
          "949:     {file = \"pyrsistent-0.19.2-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:2aede922a488861de0ad00c7630a6e2d57e8023e4be72d9d7147a9fcd2d30712\"},",
          "950:     {file = \"pyrsistent-0.19.2-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:879b4c2f4d41585c42df4d7654ddffff1239dc4065bc88b745f0341828b83e78\"},",
          "951:     {file = \"pyrsistent-0.19.2-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c43bec251bbd10e3cb58ced80609c5c1eb238da9ca78b964aea410fb820d00d6\"},",
          "952:     {file = \"pyrsistent-0.19.2-cp37-cp37m-win32.whl\", hash = \"sha256:d690b18ac4b3e3cab73b0b7aa7dbe65978a172ff94970ff98d82f2031f8971c2\"},",
          "953:     {file = \"pyrsistent-0.19.2-cp37-cp37m-win_amd64.whl\", hash = \"sha256:3ba4134a3ff0fc7ad225b6b457d1309f4698108fb6b35532d015dca8f5abed73\"},",
          "954:     {file = \"pyrsistent-0.19.2-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:a178209e2df710e3f142cbd05313ba0c5ebed0a55d78d9945ac7a4e09d923308\"},",
          "955:     {file = \"pyrsistent-0.19.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e371b844cec09d8dc424d940e54bba8f67a03ebea20ff7b7b0d56f526c71d584\"},",
          "956:     {file = \"pyrsistent-0.19.2-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:111156137b2e71f3a9936baf27cb322e8024dac3dc54ec7fb9f0bcf3249e68bb\"},",
          "957:     {file = \"pyrsistent-0.19.2-cp38-cp38-win32.whl\", hash = \"sha256:e5d8f84d81e3729c3b506657dddfe46e8ba9c330bf1858ee33108f8bb2adb38a\"},",
          "958:     {file = \"pyrsistent-0.19.2-cp38-cp38-win_amd64.whl\", hash = \"sha256:9cd3e9978d12b5d99cbdc727a3022da0430ad007dacf33d0bf554b96427f33ab\"},",
          "959:     {file = \"pyrsistent-0.19.2-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:f1258f4e6c42ad0b20f9cfcc3ada5bd6b83374516cd01c0960e3cb75fdca6770\"},",
          "960:     {file = \"pyrsistent-0.19.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:21455e2b16000440e896ab99e8304617151981ed40c29e9507ef1c2e4314ee95\"},",
          "961:     {file = \"pyrsistent-0.19.2-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:bfd880614c6237243ff53a0539f1cb26987a6dc8ac6e66e0c5a40617296a045e\"},",
          "962:     {file = \"pyrsistent-0.19.2-cp39-cp39-win32.whl\", hash = \"sha256:71d332b0320642b3261e9fee47ab9e65872c2bd90260e5d225dabeed93cbd42b\"},",
          "963:     {file = \"pyrsistent-0.19.2-cp39-cp39-win_amd64.whl\", hash = \"sha256:dec3eac7549869365fe263831f576c8457f6c833937c68542d08fde73457d291\"},",
          "964:     {file = \"pyrsistent-0.19.2-py3-none-any.whl\", hash = \"sha256:ea6b79a02a28550c98b6ca9c35b9f492beaa54d7c5c9e9949555893c8a9234d0\"},",
          "965:     {file = \"pyrsistent-0.19.2.tar.gz\", hash = \"sha256:bfa0351be89c9fcbcb8c9879b826f4353be10f58f8a677efab0c017bf7137ec2\"},",
          "968:     {file = \"pytest-7.2.0-py3-none-any.whl\", hash = \"sha256:892f933d339f068883b6fd5a459f03d85bfcb355e4981e146d2c7616c21fef71\"},",
          "969:     {file = \"pytest-7.2.0.tar.gz\", hash = \"sha256:c4014eb40e10f11f355ad4e3c2fb2c6c6d1919c73f3b5a433de4708202cade59\"},",
          "",
          "[Added Lines]",
          "970:     {file = \"pyrsistent-0.19.3-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:20460ac0ea439a3e79caa1dbd560344b64ed75e85d8703943e0b66c2a6150e4a\"},",
          "971:     {file = \"pyrsistent-0.19.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4c18264cb84b5e68e7085a43723f9e4c1fd1d935ab240ce02c0324a8e01ccb64\"},",
          "972:     {file = \"pyrsistent-0.19.3-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4b774f9288dda8d425adb6544e5903f1fb6c273ab3128a355c6b972b7df39dcf\"},",
          "973:     {file = \"pyrsistent-0.19.3-cp310-cp310-win32.whl\", hash = \"sha256:5a474fb80f5e0d6c9394d8db0fc19e90fa540b82ee52dba7d246a7791712f74a\"},",
          "974:     {file = \"pyrsistent-0.19.3-cp310-cp310-win_amd64.whl\", hash = \"sha256:49c32f216c17148695ca0e02a5c521e28a4ee6c5089f97e34fe24163113722da\"},",
          "975:     {file = \"pyrsistent-0.19.3-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:f0774bf48631f3a20471dd7c5989657b639fd2d285b861237ea9e82c36a415a9\"},",
          "976:     {file = \"pyrsistent-0.19.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3ab2204234c0ecd8b9368dbd6a53e83c3d4f3cab10ecaf6d0e772f456c442393\"},",
          "977:     {file = \"pyrsistent-0.19.3-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e42296a09e83028b3476f7073fcb69ffebac0e66dbbfd1bd847d61f74db30f19\"},",
          "978:     {file = \"pyrsistent-0.19.3-cp311-cp311-win32.whl\", hash = \"sha256:64220c429e42a7150f4bfd280f6f4bb2850f95956bde93c6fda1b70507af6ef3\"},",
          "979:     {file = \"pyrsistent-0.19.3-cp311-cp311-win_amd64.whl\", hash = \"sha256:016ad1afadf318eb7911baa24b049909f7f3bb2c5b1ed7b6a8f21db21ea3faa8\"},",
          "980:     {file = \"pyrsistent-0.19.3-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:c4db1bd596fefd66b296a3d5d943c94f4fac5bcd13e99bffe2ba6a759d959a28\"},",
          "981:     {file = \"pyrsistent-0.19.3-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:aeda827381f5e5d65cced3024126529ddc4289d944f75e090572c77ceb19adbf\"},",
          "982:     {file = \"pyrsistent-0.19.3-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:42ac0b2f44607eb92ae88609eda931a4f0dfa03038c44c772e07f43e738bcac9\"},",
          "983:     {file = \"pyrsistent-0.19.3-cp37-cp37m-win32.whl\", hash = \"sha256:e8f2b814a3dc6225964fa03d8582c6e0b6650d68a232df41e3cc1b66a5d2f8d1\"},",
          "984:     {file = \"pyrsistent-0.19.3-cp37-cp37m-win_amd64.whl\", hash = \"sha256:c9bb60a40a0ab9aba40a59f68214eed5a29c6274c83b2cc206a359c4a89fa41b\"},",
          "985:     {file = \"pyrsistent-0.19.3-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:a2471f3f8693101975b1ff85ffd19bb7ca7dd7c38f8a81701f67d6b4f97b87d8\"},",
          "986:     {file = \"pyrsistent-0.19.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:cc5d149f31706762c1f8bda2e8c4f8fead6e80312e3692619a75301d3dbb819a\"},",
          "987:     {file = \"pyrsistent-0.19.3-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:3311cb4237a341aa52ab8448c27e3a9931e2ee09561ad150ba94e4cfd3fc888c\"},",
          "988:     {file = \"pyrsistent-0.19.3-cp38-cp38-win32.whl\", hash = \"sha256:f0e7c4b2f77593871e918be000b96c8107da48444d57005b6a6bc61fb4331b2c\"},",
          "989:     {file = \"pyrsistent-0.19.3-cp38-cp38-win_amd64.whl\", hash = \"sha256:c147257a92374fde8498491f53ffa8f4822cd70c0d85037e09028e478cababb7\"},",
          "990:     {file = \"pyrsistent-0.19.3-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:b735e538f74ec31378f5a1e3886a26d2ca6351106b4dfde376a26fc32a044edc\"},",
          "991:     {file = \"pyrsistent-0.19.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:99abb85579e2165bd8522f0c0138864da97847875ecbd45f3e7e2af569bfc6f2\"},",
          "992:     {file = \"pyrsistent-0.19.3-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:3a8cb235fa6d3fd7aae6a4f1429bbb1fec1577d978098da1252f0489937786f3\"},",
          "993:     {file = \"pyrsistent-0.19.3-cp39-cp39-win32.whl\", hash = \"sha256:c74bed51f9b41c48366a286395c67f4e894374306b197e62810e0fdaf2364da2\"},",
          "994:     {file = \"pyrsistent-0.19.3-cp39-cp39-win_amd64.whl\", hash = \"sha256:878433581fc23e906d947a6814336eee031a00e6defba224234169ae3d3d6a98\"},",
          "995:     {file = \"pyrsistent-0.19.3-py3-none-any.whl\", hash = \"sha256:ccf0d6bd208f8111179f0c26fdf84ed7c3891982f2edaeae7422575f47e66b64\"},",
          "996:     {file = \"pyrsistent-0.19.3.tar.gz\", hash = \"sha256:1a2994773706bbb4995c31a97bc94f1418314923bd1048c6d964837040376440\"},",
          "999:     {file = \"pytest-7.2.1-py3-none-any.whl\", hash = \"sha256:c7c6ca206e93355074ae32f7403e8ea12163b1163c976fee7d4d84027c162be5\"},",
          "1000:     {file = \"pytest-7.2.1.tar.gz\", hash = \"sha256:d45e0952f3727241918b8fd0f376f5ff6b301cc0777c6f9a556935c92d8a7d42\"},",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1095:     {file = \"semgrep-0.112.1.tar.gz\", hash = \"sha256:2140a0fd16f3ac0a0e330980613ba65fe58faea7808a965e219c4199bab96102\"},",
          "1096: ]",
          "1097: setuptools = [",
          "1100: ]",
          "1101: six = [",
          "1102:     {file = \"six-1.16.0-py2.py3-none-any.whl\", hash = \"sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\"},",
          "",
          "[Removed Lines]",
          "1098:     {file = \"setuptools-65.6.3-py3-none-any.whl\", hash = \"sha256:57f6f22bde4e042978bcd50176fdb381d7c21a9efa4041202288d3737a0c6a54\"},",
          "1099:     {file = \"setuptools-65.6.3.tar.gz\", hash = \"sha256:a7620757bf984b58deaf32fc8a4577a9bbc0850cf92c20e1ce41c38c19e5fb75\"},",
          "",
          "[Added Lines]",
          "1129:     {file = \"setuptools-65.7.0-py3-none-any.whl\", hash = \"sha256:8ab4f1dbf2b4a65f7eec5ad0c620e84c34111a68d3349833494b9088212214dd\"},",
          "1130:     {file = \"setuptools-65.7.0.tar.gz\", hash = \"sha256:4d3c92fac8f1118bb77a22181355e29c239cabfe2b9effdaa665c66b711136d7\"},",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1107:     {file = \"tarsafe-0.0.4.tar.gz\", hash = \"sha256:a376f4138005298c11c30cb60a5081fa2c09f44384c966106fbaeee3059e9ec5\"},",
          "1108: ]",
          "1109: termcolor = [",
          "1112: ]",
          "1113: tomli = [",
          "1114:     {file = \"tomli-2.0.1-py3-none-any.whl\", hash = \"sha256:939de3e7a6161af0c887ef91b7d41a53e7c5a1ca976325f429cb46ea9bc30ecc\"},",
          "",
          "[Removed Lines]",
          "1110:     {file = \"termcolor-2.1.1-py3-none-any.whl\", hash = \"sha256:fa852e957f97252205e105dd55bbc23b419a70fec0085708fc0515e399f304fd\"},",
          "1111:     {file = \"termcolor-2.1.1.tar.gz\", hash = \"sha256:67cee2009adc6449c650f6bcf3bdeed00c8ba53a8cda5362733c53e0a39fb70b\"},",
          "",
          "[Added Lines]",
          "1141:     {file = \"termcolor-2.2.0-py3-none-any.whl\", hash = \"sha256:91ddd848e7251200eac969846cbae2dacd7d71c2871e92733289e7e3666f48e7\"},",
          "1142:     {file = \"termcolor-2.2.0.tar.gz\", hash = \"sha256:dfc8ac3f350788f23b2947b3e6cfa5a53b630b612e6cd8965a015a776020b99a\"},",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1182:     {file = \"wcmatch-8.4-py3-none-any.whl\", hash = \"sha256:dc7351e5a7f8bbf4c6828d51ad20c1770113f5f3fd3dfe2a03cfde2a63f03f98\"},",
          "1183:     {file = \"wcmatch-8.4.tar.gz\", hash = \"sha256:ba4fc5558f8946bf1ffc7034b05b814d825d694112499c86035e0e4d398b6a67\"},",
          "1184: ]",
          "1185: websocket-client = [",
          "1186:     {file = \"websocket-client-1.3.3.tar.gz\", hash = \"sha256:d58c5f284d6a9bf8379dab423259fe8f85b70d5fa5d2916d5791a84594b122b1\"},",
          "1187:     {file = \"websocket_client-1.3.3-py3-none-any.whl\", hash = \"sha256:5d55652dc1d0b3c734f044337d929aaf83f4f9138816ec680c1aefefb4dc4877\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1216: wcwidth = [",
          "1217:     {file = \"wcwidth-0.2.6-py2.py3-none-any.whl\", hash = \"sha256:795b138f6875577cd91bba52baf9e445cd5118fd32723b460e30a0af30ea230e\"},",
          "1218:     {file = \"wcwidth-0.2.6.tar.gz\", hash = \"sha256:a5220780a404dbe3353789870978e472cfe477761f06ee55077256e509b156d0\"},",
          "1219: ]",
          "",
          "---------------"
        ],
        "scripts/generate-rules-docs.py||scripts/generate-rules-docs.py": [
          "File: scripts/generate-rules-docs.py -> scripts/generate-rules-docs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import sys",
          "3: import guarddog.analyzer.sourcecode as sourcecode_analyzers",
          "4: from guarddog.ecosystems import ECOSYSTEM, get_friendly_name",
          "5: import guarddog.analyzer.metadata as metadata_analyzers",
          "7: START_MARKER = \"<!-- BEGIN_RULE_LIST -->\\n\"",
          "8: END_MARKER = \"<!-- END_RULE_LIST -->\\n\"",
          "11: def generate_docs() -> str:",
          "12:     output = ''",
          "13:     for ecosystem in ECOSYSTEM:",
          "14:         output += '### ' + get_friendly_name(ecosystem)",
          "15:         output += '\\n\\n'",
          "16:         output += 'Source code heuristics:\\n\\n'",
          "17:         output += '| **Heuristic** | **Description** |\\n'",
          "18:         output += '|:-------------:|:---------------:|\\n'",
          "19:         for rule in sourcecode_analyzers.SOURCECODE_RULES[ecosystem]:",
          "20:             description = rule.get(\"metadata\", {}).get(\"description\")",
          "21:             if description is None:",
          "22:                 description = rule.get('message')",
          "23:             description = description.replace(\"\\n\", \"\")",
          "24:             output += f'| {rule[\"id\"]} | {description} |\\n'",
          "26:         output += '\\nMetadata heuristics:\\n\\n'",
          "27:         output += '| **Heuristic** | **Description** |\\n'",
          "28:         output += '|:-------------:|:---------------:|\\n'",
          "29:         rules = metadata_analyzers.get_metadata_detectors(ecosystem)",
          "30:         for ruleName in rules:",
          "31:             rule = rules[ruleName]",
          "32:             output += f\"| {rule.get_name()} | {rule.get_description()} |\\n\"",
          "34:         output += \"\\n\\n\"",
          "35:     return output",
          "38: def inject_docs(file_name: str, new_docs: str):",
          "39:     with open(file_name, 'r') as f:",
          "40:         contents = \"\".join(f.readlines())",
          "42:     start = end = 0",
          "43:     try:",
          "44:         start = contents.index(START_MARKER)",
          "45:         end = contents.index(END_MARKER)",
          "46:     except ValueError:",
          "47:         sys.stderr.write(f\"Unable to inject docs in {file_name}, missing start or end marker\")",
          "48:         exit(1)",
          "50:     before = contents[0:start]",
          "51:     after = contents[end:]",
          "53:     new_contents = before + START_MARKER + new_docs + after # 'after' already contains the end marker",
          "54:     with open(file_name, 'w') as f:",
          "55:         f.write(new_contents)",
          "56:     print(f'Wrote autogenerated docs to {file_name}')",
          "59: if __name__ == \"__main__\":",
          "60:     if len(sys.argv) < 2:",
          "61:         print(generate_docs())",
          "62:     elif len(sys.argv) == 2:",
          "63:         file = sys.argv[1]",
          "64:         print(f'Generating docs and injecting into {file}')",
          "65:         inject_docs(file, generate_docs())",
          "",
          "---------------"
        ]
      }
    }
  ]
}