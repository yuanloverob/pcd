{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "92bbd9aca1f149904f4bef849151f32272ffc449",
      "candidate_info": {
        "commit_hash": "92bbd9aca1f149904f4bef849151f32272ffc449",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/92bbd9aca1f149904f4bef849151f32272ffc449",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java"
        ],
        "message": "PDFBOX-4892: SonarQube fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881468 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/COSArrayListTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:         annotationsList.add(txtLink);",
          "78:         annotationsList.add(aCircle);",
          "79:         annotationsList.add(txtLink);",
          "82:         tbcAnnotationsList = new ArrayList<PDAnnotation>();",
          "83:         tbcAnnotationsList.add(txtMark);",
          "84:         tbcAnnotationsList.add(txtLink);",
          "85:         tbcAnnotationsList.add(aCircle);",
          "86:         tbcAnnotationsList.add(txtLink);",
          "89:         annotationsArray = new COSArray();",
          "90:         annotationsArray.add(txtMark);",
          "91:         annotationsArray.add(txtLink);",
          "92:         annotationsArray.add(aCircle);",
          "93:         annotationsArray.add(txtLink);",
          "96:         tbcAnnotationsArray = new COSBase[4];",
          "97:         tbcAnnotationsArray[0] = txtMark.getCOSObject();",
          "98:         tbcAnnotationsArray[1] = txtLink.getCOSObject();",
          "99:         tbcAnnotationsArray[2] = aCircle.getCOSObject();",
          "100:         tbcAnnotationsArray[3] = txtLink.getCOSObject();",
          "104:         pdPage = new PDPage();",
          "",
          "[Removed Lines]",
          "80:         assertTrue(annotationsList.size() == 4);",
          "87:         assertTrue(tbcAnnotationsList.size() == 4);",
          "94:         assertTrue(annotationsArray.size() == 4);",
          "101:         assertTrue(tbcAnnotationsArray.length == 4);",
          "",
          "[Added Lines]",
          "80:         assertEquals(4, annotationsList.size());",
          "87:         assertEquals(4, tbcAnnotationsList.size());",
          "94:         assertEquals(4, annotationsArray.size());",
          "101:         assertEquals(4, tbcAnnotationsArray.length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:         COSArrayList<PDAnnotation> cosArrayList = new COSArrayList<PDAnnotation>(annotationsList, annotationsArray);",
          "118:         for (int i = 0; i < cosArrayList.size(); i++) {",
          "120:             assertTrue(\"PDAnnotations cosObject at \" + i + \" shall be equal to index \" + i + \" of COSArray\",",
          "121:                 annotationsArray.get(i).equals(annot.getCOSObject()));",
          "",
          "[Removed Lines]",
          "119:             PDAnnotation annot = (PDAnnotation) cosArrayList.get(i);",
          "",
          "[Added Lines]",
          "119:             PDAnnotation annot = cosArrayList.get(i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:         PDAnnotationSquareCircle aSquare = new PDAnnotationSquareCircle(PDAnnotationSquareCircle.SUB_TYPE_SQUARE);",
          "140:         cosArrayList.add(aSquare);",
          "147:         assertEquals(\"Provided COSArray and underlying COSArray shall be equal\", annotationsArray, cosArrayList.getCOSArray());",
          "148:     }",
          "",
          "[Removed Lines]",
          "142:         assertTrue(\"List size shall be 5\", annotationsList.size() == 5);",
          "143:         assertTrue(\"COSArray size shall be 5\", annotationsArray.size() == 5);",
          "145:         PDAnnotation annot = (PDAnnotation) annotationsList.get(4);",
          "146:         assertTrue(\"Added annotation shall be 4th entry in COSArray\", annotationsArray.indexOf(annot.getCOSObject()) == 4);",
          "",
          "[Added Lines]",
          "142:         assertEquals(\"List size shall be 5\", 5, annotationsList.size());",
          "143:         assertEquals(\"COSArray size shall be 5\", 5, annotationsArray.size());",
          "145:         PDAnnotation annot = annotationsList.get(4);",
          "146:         assertEquals(\"Added annotation shall be 4th entry in COSArray\",",
          "147:                 4, annotationsArray.indexOf(annot.getCOSObject()));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:         PDAnnotation toBeRemoved = cosArrayList.get(positionToRemove);",
          "160:         assertEquals(\"Remove operation shall return the removed object\",toBeRemoved, cosArrayList.remove(positionToRemove));",
          "168:     }",
          "",
          "[Removed Lines]",
          "161:         assertTrue(\"List size shall be 3\", cosArrayList.size() == 3);",
          "162:         assertTrue(\"COSArray size shall be 3\", annotationsArray.size() == 3);",
          "164:         assertTrue(\"PDAnnotation shall no longer exist in List\",",
          "165:             cosArrayList.indexOf(tbcAnnotationsList.get(positionToRemove)) == -1);",
          "166:         assertTrue(\"COSObject shall no longer exist in COSArray\",",
          "167:             annotationsArray.indexOf(tbcAnnotationsArray[positionToRemove]) == -1);",
          "",
          "[Added Lines]",
          "162:         assertEquals(\"List size shall be 3\", 3, cosArrayList.size());",
          "163:         assertEquals(\"COSArray size shall be 3\", 3, annotationsArray.size());",
          "165:         assertEquals(\"PDAnnotation shall no longer exist in List\",",
          "166:                 -1, cosArrayList.indexOf(tbcAnnotationsList.get(positionToRemove)));",
          "167:         assertEquals(\"COSObject shall no longer exist in COSArray\",",
          "168:                 -1, annotationsArray.indexOf(tbcAnnotationsArray[positionToRemove]));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "178:         PDAnnotation toBeRemoved = annotationsList.get(positionToRemove);",
          "180:         assertTrue(\"Remove operation shall return true\",cosArrayList.remove(toBeRemoved));",
          "197:         assertFalse(\"Remove shall not remove any object\",cosArrayList.remove(toBeRemoved));",
          "199:     }",
          "",
          "[Removed Lines]",
          "181:         assertTrue(\"List size shall be 3\", cosArrayList.size() == 3);",
          "182:         assertTrue(\"COSArray size shall be 3\", annotationsArray.size() == 3);",
          "185:         assertTrue(\"List object at 3 is at position 2 in COSArrayList now\",",
          "186:             cosArrayList.get(2).equals(tbcAnnotationsList.get(3)));",
          "187:         assertTrue(\"COSObject of List object at 3 is at position 2 in COSArray now\",",
          "188:             annotationsArray.get(2).equals(tbcAnnotationsList.get(3).getCOSObject()));",
          "189:         assertTrue(\"Array object at 3 is at position 2 in underlying COSArray now\",",
          "190:             annotationsArray.get(2).equals(tbcAnnotationsArray[3]));",
          "192:         assertTrue(\"PDAnnotation shall no longer exist in List\",",
          "193:             cosArrayList.indexOf(tbcAnnotationsList.get(positionToRemove)) == -1);",
          "194:         assertTrue(\"COSObject shall no longer exist in COSArray\",",
          "195:             annotationsArray.indexOf(tbcAnnotationsArray[positionToRemove]) == -1);",
          "",
          "[Added Lines]",
          "182:         assertEquals(\"List size shall be 3\", 3, cosArrayList.size());",
          "183:         assertEquals(\"COSArray size shall be 3\", 3, annotationsArray.size());",
          "186:         assertEquals(\"List object at 3 is at position 2 in COSArrayList now\",",
          "187:                 cosArrayList.get(2), tbcAnnotationsList.get(3));",
          "188:         assertEquals(\"COSObject of List object at 3 is at position 2 in COSArray now\",",
          "189:                 annotationsArray.get(2), tbcAnnotationsList.get(3).getCOSObject());",
          "190:         assertEquals(\"Array object at 3 is at position 2 in underlying COSArray now\",",
          "191:                 annotationsArray.get(2), tbcAnnotationsArray[3]);",
          "193:         assertEquals(\"PDAnnotation shall no longer exist in List\",",
          "194:                 -1, cosArrayList.indexOf(tbcAnnotationsList.get(positionToRemove)));",
          "195:         assertEquals(\"COSObject shall no longer exist in COSArray\",",
          "196:                 -1, annotationsArray.indexOf(tbcAnnotationsArray[positionToRemove]));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "211:         List<PDAnnotation> toBeRemovedInstances = Collections.singletonList(toBeRemoved);",
          "213:         assertTrue(\"Remove operation shall return true\",cosArrayList.removeAll(toBeRemovedInstances));",
          "217:         assertFalse(\"Remove shall not remove any object\",cosArrayList.removeAll(toBeRemovedInstances));",
          "218:     }",
          "",
          "[Removed Lines]",
          "214:         assertTrue(\"List size shall be 3\", cosArrayList.size() == 3);",
          "215:         assertTrue(\"COSArray size shall be 3\", annotationsArray.size() == 3);",
          "",
          "[Added Lines]",
          "214:         assertEquals(\"List size shall be 3\", 3, cosArrayList.size());",
          "215:         assertEquals(\"COSArray size shall be 3\", 3, annotationsArray.size());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "229:         PDAnnotation toBeRemoved = tbcAnnotationsList.get(positionToRemove);",
          "231:         assertTrue(\"Remove operation shall return true\",cosArrayList.remove(toBeRemoved));",
          "235:         assertTrue(\"Remove operation shall return true\",cosArrayList.remove(toBeRemoved));",
          "239:     }",
          "",
          "[Removed Lines]",
          "232:         assertTrue(\"List size shall be 3\", cosArrayList.size() == 3);",
          "233:         assertTrue(\"COSArray size shall be 3\", annotationsArray.size() == 3);",
          "236:         assertTrue(\"List size shall be 2\", cosArrayList.size() == 2);",
          "237:         assertTrue(\"COSArray size shall be 2\", annotationsArray.size() == 2);",
          "",
          "[Added Lines]",
          "232:         assertEquals(\"List size shall be 3\", 3, cosArrayList.size());",
          "233:         assertEquals(\"COSArray size shall be 3\", 3, annotationsArray.size());",
          "236:         assertEquals(\"List size shall be 2\", 2, cosArrayList.size());",
          "237:         assertEquals(\"COSArray size shall be 2\", 2, annotationsArray.size());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "251:         List<PDAnnotation> toBeRemovedInstances = Collections.singletonList(toBeRemoved);",
          "253:         assertTrue(\"Remove operation shall return true\",cosArrayList.removeAll(toBeRemovedInstances));",
          "257:         assertFalse(\"Remove shall not remove any object\",cosArrayList.removeAll(toBeRemovedInstances));",
          "258:     }",
          "",
          "[Removed Lines]",
          "254:         assertTrue(\"List size shall be 2\", cosArrayList.size() == 2);",
          "255:         assertTrue(\"COSArray size shall be 2\", annotationsArray.size() == 2);",
          "",
          "[Added Lines]",
          "253:         assertEquals(\"List size shall be 2\", 2, cosArrayList.size());",
          "254:         assertEquals(\"COSArray size shall be 2\", 2, annotationsArray.size());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "330:         pageAnnots.add(txtMark);",
          "331:         pageAnnots.add(txtMark);",
          "332:         pageAnnots.add(txtLink);",
          "335:         page.setAnnotations(pageAnnots);",
          "",
          "[Removed Lines]",
          "333:         assertTrue(\"There shall be 4 annotations generated\", pageAnnots.size() == 4);",
          "",
          "[Added Lines]",
          "332:         assertEquals(\"There shall be 4 annotations generated\", 4, pageAnnots.size());",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "343:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "348:         PDAnnotation toBeRemoved = annotations.get(0);",
          "349:         annotations.remove(toBeRemoved);",
          "353:         pdf.close();",
          "354:     }",
          "",
          "[Removed Lines]",
          "345:         assertTrue(\"There shall be 4 annotations retrieved\", annotations.size() == 4);",
          "346:         assertTrue(\"The size of the internal COSArray shall be 4\", annotations.getCOSArray().size() == 4);",
          "351:         assertTrue(\"There shall be 3 annotations left\", annotations.size() == 3);",
          "352:         assertTrue(\"The size of the internal COSArray shall be 3\", annotations.getCOSArray().size() == 3);",
          "",
          "[Added Lines]",
          "344:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "345:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "350:         assertEquals(\"There shall be 3 annotations left\", 3, annotations.size());",
          "351:         assertEquals(\"The size of the internal COSArray shall be 3\", 3, annotations.getCOSArray().size());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "369:         pageAnnots.add(txtMark);",
          "370:         pageAnnots.add(txtMark);",
          "371:         pageAnnots.add(txtLink);",
          "374:         page.setAnnotations(pageAnnots);",
          "",
          "[Removed Lines]",
          "372:         assertTrue(\"There shall be 4 annotations generated\", pageAnnots.size() == 4);",
          "",
          "[Added Lines]",
          "372:         assertEquals(\"There shall be 4 annotations generated\", 4, pageAnnots.size());",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "382:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "387:         PDAnnotation toBeRemoved = annotations.get(0);",
          "389:         annotations.remove(toBeRemoved);",
          "393:         pdf.close();",
          "394:     }",
          "",
          "[Removed Lines]",
          "384:         assertTrue(\"There shall be 4 annotations retrieved\", annotations.size() == 4);",
          "385:         assertTrue(\"The size of the internal COSArray shall be 4\", annotations.getCOSArray().size() == 4);",
          "391:         assertTrue(\"There shall be 3 annotations left\", annotations.size() == 3);",
          "392:         assertTrue(\"The size of the internal COSArray shall be 2\", annotations.getCOSArray().size() == 3);",
          "",
          "[Added Lines]",
          "384:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "385:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "391:         assertEquals(\"There shall be 3 annotations left\", 3, annotations.size());",
          "392:         assertEquals(\"The size of the internal COSArray shall be 2\", 3, annotations.getCOSArray().size());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "417:         pageAnnots.add(txtMark);",
          "418:         pageAnnots.add(txtMark);",
          "419:         pageAnnots.add(txtLink);",
          "422:         page.setAnnotations(pageAnnots);",
          "",
          "[Removed Lines]",
          "420:         assertTrue(\"There shall be 4 annotations generated\", pageAnnots.size() == 4);",
          "",
          "[Added Lines]",
          "421:         assertEquals(\"There shall be 4 annotations generated\", 4, pageAnnots.size());",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "430:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "435:         ArrayList<PDAnnotation> toBeRemoved = new ArrayList<PDAnnotation>();",
          "437:         toBeRemoved.add(annotations.get(0));",
          "438:         annotations.removeAll(toBeRemoved);",
          "442:     }",
          "444:     @Test",
          "",
          "[Removed Lines]",
          "432:         assertTrue(\"There shall be 4 annotations retrieved\", annotations.size() == 4);",
          "433:         assertTrue(\"The size of the internal COSArray shall be 4\", annotations.getCOSArray().size() == 4);",
          "440:         assertTrue(\"There shall be 1 annotations left\", annotations.size() == 1);",
          "441:         assertTrue(\"The size of the internal COSArray shall be 1\", annotations.getCOSArray().size() == 1);",
          "",
          "[Added Lines]",
          "433:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "434:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "441:         assertEquals(\"There shall be 1 annotations left\", 1, annotations.size());",
          "442:         assertEquals(\"The size of the internal COSArray shall be 1\", 1, annotations.getCOSArray().size());",
          "444:         pdf.close();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "457:         pageAnnots.add(txtMark);",
          "458:         pageAnnots.add(txtMark);",
          "459:         pageAnnots.add(txtLink);",
          "462:         page.setAnnotations(pageAnnots);",
          "",
          "[Removed Lines]",
          "460:         assertTrue(\"There shall be 4 annotations generated\", pageAnnots.size() == 4);",
          "",
          "[Added Lines]",
          "463:         assertEquals(\"There shall be 4 annotations generated\", 4, pageAnnots.size());",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "470:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "475:         ArrayList<PDAnnotation> toBeRemoved = new ArrayList<PDAnnotation>();",
          "476:         toBeRemoved.add(annotations.get(0));",
          "478:         annotations.removeAll(toBeRemoved);",
          "482:     }",
          "",
          "[Removed Lines]",
          "472:         assertTrue(\"There shall be 4 annotations retrieved\", annotations.size() == 4);",
          "473:         assertTrue(\"The size of the internal COSArray shall be 4\", annotations.getCOSArray().size() == 4);",
          "480:         assertTrue(\"There shall be 1 annotations left\", annotations.size() == 1);",
          "481:         assertTrue(\"The size of the internal COSArray shall be 1\", annotations.getCOSArray().size() == 1);",
          "",
          "[Added Lines]",
          "475:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "476:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "483:         assertEquals(\"There shall be 1 annotations left\", 1, annotations.size());",
          "484:         assertEquals(\"The size of the internal COSArray shall be 1\", 1, annotations.getCOSArray().size());",
          "486:         pdf.close();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "505:         pageAnnots.add(txtMark);",
          "506:         pageAnnots.add(txtMark);",
          "507:         pageAnnots.add(txtLink);",
          "510:         page.setAnnotations(pageAnnots);",
          "",
          "[Removed Lines]",
          "508:         assertTrue(\"There shall be 4 annotations generated\", pageAnnots.size() == 4);",
          "",
          "[Added Lines]",
          "513:         assertEquals(\"There shall be 4 annotations generated\", 4, pageAnnots.size());",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "518:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "523:         ArrayList<PDAnnotation> toBeRetained = new ArrayList<PDAnnotation>();",
          "525:         toBeRetained.add(annotations.get(0));",
          "526:         annotations.retainAll(toBeRetained);",
          "530:     }",
          "",
          "[Removed Lines]",
          "520:         assertTrue(\"There shall be 4 annotations retrieved\", annotations.size() == 4);",
          "521:         assertTrue(\"The size of the internal COSArray shall be 4\", annotations.getCOSArray().size() == 4);",
          "528:         assertTrue(\"There shall be 3 annotations left\", annotations.size() == 3);",
          "529:         assertTrue(\"The size of the internal COSArray shall be 3\", annotations.getCOSArray().size() == 3);",
          "",
          "[Added Lines]",
          "525:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "526:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "533:         assertEquals(\"There shall be 3 annotations left\", 3, annotations.size());",
          "534:         assertEquals(\"The size of the internal COSArray shall be 3\", 3, annotations.getCOSArray().size());",
          "536:         pdf.close();",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "553:         pageAnnots.add(txtMark);",
          "554:         pageAnnots.add(txtMark);",
          "555:         pageAnnots.add(txtLink);",
          "558:         page.setAnnotations(pageAnnots);",
          "",
          "[Removed Lines]",
          "556:         assertTrue(\"There shall be 4 annotations generated\", pageAnnots.size() == 4);",
          "",
          "[Added Lines]",
          "563:         assertEquals(\"There shall be 4 annotations generated\", 4, pageAnnots.size());",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "566:         COSArrayList<PDAnnotation> annotations = (COSArrayList) page.getAnnotations();",
          "571:         ArrayList<PDAnnotation> toBeRetained = new ArrayList<PDAnnotation>();",
          "573:         toBeRetained.add(annotations.get(0));",
          "574:         annotations.retainAll(toBeRetained);",
          "578:     }",
          "579: }",
          "",
          "[Removed Lines]",
          "568:         assertTrue(\"There shall be 4 annotations retrieved\", annotations.size() == 4);",
          "569:         assertTrue(\"The size of the internal COSArray shall be 4\", annotations.getCOSArray().size() == 4);",
          "576:         assertTrue(\"There shall be 3 annotations left\", annotations.size() == 3);",
          "577:         assertTrue(\"The size of the internal COSArray shall be 3\", annotations.getCOSArray().size() == 3);",
          "",
          "[Added Lines]",
          "575:         assertEquals(\"There shall be 4 annotations retrieved\", 4, annotations.size());",
          "576:         assertEquals(\"The size of the internal COSArray shall be 4\", 4, annotations.getCOSArray().size());",
          "583:         assertEquals(\"There shall be 3 annotations left\", 3, annotations.size());",
          "584:         assertEquals(\"The size of the internal COSArray shall be 3\", 3, annotations.getCOSArray().size());",
          "586:         pdf.close();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ddcb273ee51e4d4d1daebc75fff80d9b022854e",
      "candidate_info": {
        "commit_hash": "6ddcb273ee51e4d4d1daebc75fff80d9b022854e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6ddcb273ee51e4d4d1daebc75fff80d9b022854e",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java",
          "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java"
        ],
        "message": "PDFBOX-5057: Sonar fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884820 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java||pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java",
          "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java||pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java||pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java -> pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxDecoderStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:                 optionUncompressed = (options & TIFFExtension.GROUP4OPT_UNCOMPRESSED) != 0;",
          "124:                 break;",
          "125:             default:",
          "127:         }",
          "129:     }",
          "",
          "[Removed Lines]",
          "126:                 throw new AssertionError();",
          "",
          "[Added Lines]",
          "126:                 throw new IllegalArgumentException(\"Illegal parameter: \" + type);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "332:             case TIFFExtension.COMPRESSION_CCITT_T6:",
          "333:                 decodeRowType6();",
          "334:                 break;",
          "335:         }",
          "337:         int index = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335:             default:",
          "336:                 throw new IllegalArgumentException(\"Illegal parameter: \" + type);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java||pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java -> pdfbox/src/main/java/org/apache/pdfbox/filter/CCITTFaxFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.apache.pdfbox.filter;",
          "19: import java.io.IOException;",
          "20: import java.io.InputStream;",
          "21: import java.io.OutputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import java.io.EOFException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:         {",
          "71:             type = TIFFExtension.COMPRESSION_CCITT_T4; // Group 3 1D",
          "72:             byte[] streamData = new byte[20];",
          "74:             encoded = new PushbackInputStream(encoded, streamData.length);",
          "75:             ((PushbackInputStream) encoded).unread(streamData);",
          "76:             if (streamData[0] != 0 || (streamData[1] >> 4 != 1 && streamData[1] != 1))",
          "",
          "[Removed Lines]",
          "73:             encoded.read(streamData);",
          "",
          "[Added Lines]",
          "74:             int bytesRead = encoded.read(streamData);",
          "75:             if (bytesRead != streamData.length)",
          "76:             {",
          "77:                 throw new EOFException(\"Can't read \" + streamData.length + \" bytes\");",
          "78:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:                 type = TIFFExtension.COMPRESSION_CCITT_MODIFIED_HUFFMAN_RLE;",
          "82:                 for (int i = 12; i < 160; i++)",
          "83:                 {",
          "84:                     b = (short) ((b << 1) + ((streamData[(i / 8)] >> (7 - (i % 8))) & 0x01));",
          "",
          "[Removed Lines]",
          "81:                 short b = (short) (((streamData[0] << 8) + streamData[1]) >> 4);",
          "",
          "[Added Lines]",
          "86:                 short b = (short) (((streamData[0] << 8) + (streamData[1] & 0xff)) >> 4);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8cc0f1b51dbfaa9094407169779a9a645fdf522",
      "candidate_info": {
        "commit_hash": "a8cc0f1b51dbfaa9094407169779a9a645fdf522",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a8cc0f1b51dbfaa9094407169779a9a645fdf522",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java"
        ],
        "message": "PDFBOX-5188: call super as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889659 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java||pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java -> pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     @Override",
          "111:     public void flush() throws IOException",
          "112:     {",
          "114:         {",
          "115:             super.flush();",
          "116:         }",
          "",
          "[Removed Lines]",
          "113:         if (buffer != null)",
          "",
          "[Added Lines]",
          "113:         if (buffer == null)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b9b5006e2e907f66ad74b4f65c3614e7510628b",
      "candidate_info": {
        "commit_hash": "8b9b5006e2e907f66ad74b4f65c3614e7510628b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/8b9b5006e2e907f66ad74b4f65c3614e7510628b",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
        ],
        "message": "PDFBOX-4984: add some information about the handling into the source\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882882 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
        ]
      }
    },
    {
      "candidate_hash": "263442810a0f9e72f0a21e38c02e10c132957a8b",
      "candidate_info": {
        "commit_hash": "263442810a0f9e72f0a21e38c02e10c132957a8b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/263442810a0f9e72f0a21e38c02e10c132957a8b",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java"
        ],
        "message": "PDFBOX-4892: avoid memory leak for last writer in collection, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889531 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:     private static ImageWriter getJPEGImageWriter() throws IOException",
          "362:     {",
          "364:         Iterator<ImageWriter> writers = ImageIO.getImageWritersBySuffix(\"jpeg\");",
          "365:         while (writers.hasNext())",
          "366:         {",
          "372:             if (writer == null)",
          "373:             {",
          "374:                 continue;",
          "",
          "[Removed Lines]",
          "363:         ImageWriter writer = null;",
          "367:             if (writer != null)",
          "368:             {",
          "369:                 writer.dispose();",
          "370:             }",
          "371:             writer = writers.next();",
          "",
          "[Added Lines]",
          "366:             ImageWriter writer = writers.next();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:             {",
          "379:                 return writer;",
          "380:             }",
          "381:         }",
          "382:         throw new IOException(\"No ImageWriter found for JPEG format\");",
          "383:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376:             writer.dispose();",
          "",
          "---------------"
        ]
      }
    }
  ]
}