{
  "cve_id": "CVE-2018-8008",
  "cve_desc": "Apache Storm version 1.0.6 and earlier, 1.2.1 and earlier, and version 1.1.2 and earlier expose an arbitrary file write vulnerability, that can be achieved using a specially crafted zip archive (affects other archives as well, bzip2, tar, xz, war, cpio, 7z), that holds path traversal filenames. So when the filename gets concatenated to the target extraction directory, the final path ends up outside of the target folder.",
  "repo": "apache/storm",
  "patch_hash": "efad4cca2d7d461f5f8c08a0d7b51fabeb82d0af",
  "patch_info": {
    "commit_hash": "efad4cca2d7d461f5f8c08a0d7b51fabeb82d0af",
    "repo": "apache/storm",
    "commit_url": "https://github.com/apache/storm/commit/efad4cca2d7d461f5f8c08a0d7b51fabeb82d0a",
    "files": [
      "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
      "storm-core/src/jvm/org/apache/storm/utils/Utils.java"
    ],
    "message": "STORM-3052: Allow for blobs to be unzipped/untarred",
    "before_after_code_files": [
      "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java||storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
      "storm-core/src/jvm/org/apache/storm/utils/Utils.java||storm-core/src/jvm/org/apache/storm/utils/Utils.java"
    ]
  },
  "patch_diff": {
    "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java||storm-core/src/jvm/org/apache/storm/localizer/Localizer.java": [
      "File: storm-core/src/jvm/org/apache/storm/localizer/Localizer.java -> storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "543:           out.close();",
      "544:           in.close();",
      "545:           if (uncompress) {",
      "547:             LOG.debug(\"uncompressed \" + downloadFile + \" to: \" + localFileWithVersion);",
      "548:           }",
      "",
      "[Removed Lines]",
      "546:             Utils.unpack(new File(downloadFile), new File(localFileWithVersion));",
      "",
      "[Added Lines]",
      "546:             Utils.unpack(new File(downloadFile), new File(localFileWithVersion), (boolean)OR(_conf.get(Config.DISABLE_SYMLINKS), false));",
      "",
      "---------------"
    ],
    "storm-core/src/jvm/org/apache/storm/utils/Utils.java||storm-core/src/jvm/org/apache/storm/utils/Utils.java": [
      "File: storm-core/src/jvm/org/apache/storm/utils/Utils.java -> storm-core/src/jvm/org/apache/storm/utils/Utils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "910:         }",
      "911:     }",
      "",
      "[Removed Lines]",
      "864:     public static void unJar(File jarFile, File toDir)",
      "865:             throws IOException {",
      "866:         JarFile jar = new JarFile(jarFile);",
      "867:         try {",
      "868:             Enumeration<JarEntry> entries = jar.entries();",
      "869:             while (entries.hasMoreElements()) {",
      "870:                 final JarEntry entry = entries.nextElement();",
      "871:                 if (!entry.isDirectory()) {",
      "872:                     InputStream in = jar.getInputStream(entry);",
      "873:                     try {",
      "874:                         File file = new File(toDir, entry.getName());",
      "875:                         ensureDirectory(file.getParentFile());",
      "876:                         OutputStream out = new FileOutputStream(file);",
      "877:                         try {",
      "878:                             copyBytes(in, out, 8192);",
      "879:                         } finally {",
      "880:                             out.close();",
      "881:                         }",
      "882:                     } finally {",
      "883:                         in.close();",
      "884:                     }",
      "885:                 }",
      "886:             }",
      "887:         } finally {",
      "888:             jar.close();",
      "889:         }",
      "890:     }",
      "899:     public static void copyBytes(InputStream in, OutputStream out, int buffSize)",
      "900:             throws IOException {",
      "901:         PrintStream ps = out instanceof PrintStream ? (PrintStream)out : null;",
      "902:         byte buf[] = new byte[buffSize];",
      "903:         int bytesRead = in.read(buf);",
      "904:         while (bytesRead >= 0) {",
      "905:             out.write(buf, 0, bytesRead);",
      "906:             if ((ps != null) && ps.checkError()) {",
      "907:                 throw new IOException(\"Unable to write to output stream.\");",
      "908:             }",
      "909:             bytesRead = in.read(buf);",
      "",
      "[Added Lines]",
      "864:     public static void unJar(File jarFile, File toDir) throws IOException {",
      "865:         try (JarFile jar = new JarFile(jarFile)) {",
      "866:             extractZipFile(jar, toDir, null);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "942:         boolean gzipped = inFile.toString().endsWith(\"gz\");",
      "947:         } else {",
      "",
      "[Removed Lines]",
      "935:     public static void unTar(File inFile, File untarDir) throws IOException {",
      "936:         if (!untarDir.mkdirs()) {",
      "937:             if (!untarDir.isDirectory()) {",
      "938:                 throw new IOException(\"Mkdirs failed to create \" + untarDir);",
      "939:             }",
      "940:         }",
      "943:         if (isOnWindows()) {",
      "946:             unTarUsingJava(inFile, untarDir, gzipped);",
      "",
      "[Added Lines]",
      "893:     public static void unTar(File inFile, File untarDir, boolean symlinksDisabled) throws IOException {",
      "894:         ensureDirectory(untarDir);",
      "897:         if (Utils.isOnWindows() || symlinksDisabled) {",
      "900:             unTarUsingJava(inFile, untarDir, gzipped, symlinksDisabled);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "980:     }",
      "982:     private static void unTarUsingJava(File inFile, File untarDir,",
      "984:         InputStream inputStream = null;",
      "985:         try {",
      "986:             if (gzipped) {",
      "",
      "[Removed Lines]",
      "983:                                        boolean gzipped) throws IOException {",
      "",
      "[Added Lines]",
      "937:                                        boolean gzipped, boolean symlinksDisabled) throws IOException {",
      "938:         final String base = untarDir.getCanonicalPath();",
      "939:         LOG.trace(\"java untar {} to {}\", inFile, base);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "991:             }",
      "992:             try (TarArchiveInputStream tis = new TarArchiveInputStream(inputStream)) {",
      "993:                 for (TarArchiveEntry entry = tis.getNextTarEntry(); entry != null; ) {",
      "995:                     entry = tis.getNextTarEntry();",
      "996:                 }",
      "997:             }",
      "",
      "[Removed Lines]",
      "994:                     unpackEntries(tis, entry, untarDir);",
      "",
      "[Added Lines]",
      "950:                     unpackEntries(tis, entry, untarDir, base, symlinksDisabled);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1003:     }",
      "1005:     private static void unpackEntries(TarArchiveInputStream tis,",
      "1007:         if (entry.isDirectory()) {",
      "1013:             for (TarArchiveEntry e : entry.getDirectoryEntries()) {",
      "1015:             }",
      "1017:         }",
      "1023:             }",
      "1024:         }",
      "1032:         }",
      "1035:     }",
      "1037:     public static boolean isOnWindows() {",
      "",
      "[Removed Lines]",
      "1006:                                       TarArchiveEntry entry, File outputDir) throws IOException {",
      "1008:             File subDir = new File(outputDir, entry.getName());",
      "1009:             if (!subDir.mkdirs() && !subDir.isDirectory()) {",
      "1010:                 throw new IOException(\"Mkdirs failed to create tar internal dir \"",
      "1011:                         + outputDir);",
      "1012:             }",
      "1014:                 unpackEntries(tis, e, subDir);",
      "1016:             return;",
      "1018:         File outputFile = new File(outputDir, entry.getName());",
      "1019:         if (!outputFile.getParentFile().exists()) {",
      "1020:             if (!outputFile.getParentFile().mkdirs()) {",
      "1021:                 throw new IOException(\"Mkdirs failed to create tar internal dir \"",
      "1022:                                       + outputDir);",
      "1025:         int count;",
      "1026:         byte data[] = new byte[2048];",
      "1027:         BufferedOutputStream outputStream = new BufferedOutputStream(",
      "1028:                 new FileOutputStream(outputFile));",
      "1030:         while ((count = tis.read(data)) != -1) {",
      "1031:             outputStream.write(data, 0, count);",
      "1033:         outputStream.flush();",
      "1034:         outputStream.close();",
      "",
      "[Added Lines]",
      "962:                                       TarArchiveEntry entry, File outputDir, final String base,",
      "963:                                       boolean symlinksDisabled) throws IOException {",
      "964:         File target = new File(outputDir, entry.getName());",
      "965:         String found = target.getCanonicalPath();",
      "966:         if (!found.startsWith(base)) {",
      "967:             LOG.error(\"Invalid location {} is outside of {}\", found, base);",
      "968:             return;",
      "969:         }",
      "971:             LOG.trace(\"Extracting dir {}\", target);",
      "972:             ensureDirectory(target);",
      "974:                 unpackEntries(tis, e, target, base, symlinksDisabled);",
      "976:         } else if (entry.isSymbolicLink()) {",
      "977:             if (symlinksDisabled) {",
      "978:                 LOG.info(\"Symlinks disabled skipping {}\", target);",
      "979:             } else {",
      "980:                 Path src = target.toPath();",
      "981:                 Path dest = Paths.get(entry.getLinkName());",
      "982:                 LOG.trace(\"Extracting sym link {} to {}\", target, dest);",
      "984:                 Files.createSymbolicLink(src, dest);",
      "985:             }",
      "986:         } else if (entry.isFile()) {",
      "987:             LOG.trace(\"Extracting file {}\", target);",
      "988:             ensureDirectory(target.getParentFile());",
      "989:             try (BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target))) {",
      "990:                 IOUtils.copy(tis, outputStream);",
      "991:             }",
      "992:         } else {",
      "993:             LOG.error(\"{} is not a currently supported tar entry type.\", entry);",
      "996:         Path p = target.toPath();",
      "997:         if (Files.exists(p)) {",
      "998:             try {",
      "1000:                 int mode = entry.getMode();",
      "1001:                 Files.setPosixFilePermissions(p, parsePerms(mode));",
      "1002:             } catch (UnsupportedOperationException e) {",
      "1006:     }",
      "1008:     private static Set<PosixFilePermission> parsePerms(int mode) {",
      "1009:         Set<PosixFilePermission> ret = new HashSet<>();",
      "1010:         if ((mode & 0001) > 0) {",
      "1011:             ret.add(PosixFilePermission.OTHERS_EXECUTE);",
      "1012:         }",
      "1013:         if ((mode & 0002) > 0) {",
      "1014:             ret.add(PosixFilePermission.OTHERS_WRITE);",
      "1015:         }",
      "1016:         if ((mode & 0004) > 0) {",
      "1017:             ret.add(PosixFilePermission.OTHERS_READ);",
      "1018:         }",
      "1019:         if ((mode & 0010) > 0) {",
      "1020:             ret.add(PosixFilePermission.GROUP_EXECUTE);",
      "1021:         }",
      "1022:         if ((mode & 0020) > 0) {",
      "1023:             ret.add(PosixFilePermission.GROUP_WRITE);",
      "1025:         if ((mode & 0040) > 0) {",
      "1026:             ret.add(PosixFilePermission.GROUP_READ);",
      "1027:         }",
      "1028:         if ((mode & 0100) > 0) {",
      "1029:             ret.add(PosixFilePermission.OWNER_EXECUTE);",
      "1030:         }",
      "1031:         if ((mode & 0200) > 0) {",
      "1032:             ret.add(PosixFilePermission.OWNER_WRITE);",
      "1033:         }",
      "1034:         if ((mode & 0400) > 0) {",
      "1035:             ret.add(PosixFilePermission.OWNER_READ);",
      "1036:         }",
      "1037:         return ret;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1045:         return Paths.get(path).isAbsolute();",
      "1046:     }",
      "1049:         String lowerDst = localrsrc.getName().toLowerCase();",
      "1051:             unJar(localrsrc, dst);",
      "1053:             unZip(localrsrc, dst);",
      "1054:         } else if (lowerDst.endsWith(\".tar.gz\") ||",
      "1058:         } else {",
      "1059:             LOG.warn(\"Cannot unpack \" + localrsrc);",
      "1060:             if (!localrsrc.renameTo(dst)) {",
      "",
      "[Removed Lines]",
      "1048:     public static void unpack(File localrsrc, File dst) throws IOException {",
      "1050:         if (lowerDst.endsWith(\".jar\")) {",
      "1052:         } else if (lowerDst.endsWith(\".zip\")) {",
      "1055:                 lowerDst.endsWith(\".tgz\") ||",
      "1056:                 lowerDst.endsWith(\".tar\")) {",
      "1057:             unTar(localrsrc, dst);",
      "",
      "[Added Lines]",
      "1051:     public static void unpack(File localrsrc, File dst, boolean symLinksDisabled) throws IOException {",
      "1053:         if (lowerDst.endsWith(\".jar\") ||",
      "1054:             lowerDst.endsWith(\"_jar\")) {",
      "1056:         } else if (lowerDst.endsWith(\".zip\") ||",
      "1057:             lowerDst.endsWith(\"_zip\")) {",
      "1060:             lowerDst.endsWith(\"_tar_gz\") ||",
      "1061:             lowerDst.endsWith(\".tgz\") ||",
      "1062:             lowerDst.endsWith(\"_tgz\") ||",
      "1063:             lowerDst.endsWith(\".tar\") ||",
      "1064:             lowerDst.endsWith(\"_tar\")) {",
      "1065:             unTar(localrsrc, dst, symLinksDisabled);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1067:         }",
      "1068:     }",
      "1070:     public static boolean canUserReadBlob(ReadableBlobMeta meta, String user) {",
      "1071:         SettableBlobMeta settable = meta.get_settable();",
      "1072:         for (AccessControl acl : settable.get_acl()) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1078:     private static void extractZipFile(ZipFile zipFile, File toDir, String prefix) throws IOException {",
      "1079:         ensureDirectory(toDir);",
      "1080:         final String base = toDir.getCanonicalPath();",
      "1082:         Enumeration<? extends ZipEntry> entries = zipFile.entries();",
      "1083:         while (entries.hasMoreElements()) {",
      "1084:             ZipEntry entry = entries.nextElement();",
      "1085:             if (!entry.isDirectory()) {",
      "1086:                 if (prefix != null && !entry.getName().startsWith(prefix)) {",
      "1088:                     continue;",
      "1089:                 }",
      "1090:                 File file = new File(toDir, entry.getName());",
      "1091:                 String found = file.getCanonicalPath();",
      "1092:                 if (!found.startsWith(base)) {",
      "1093:                     LOG.error(\"Invalid location {} is outside of {}\", found, base);",
      "1094:                     continue;",
      "1095:                 }",
      "1097:                 try (InputStream in = zipFile.getInputStream(entry)) {",
      "1098:                     ensureDirectory(file.getParentFile());",
      "1099:                     try (OutputStream out = new FileOutputStream(file)) {",
      "1100:                         IOUtils.copy(in, out);",
      "1101:                     }",
      "1102:                 }",
      "1103:             }",
      "1104:         }",
      "1105:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1440:     }",
      "",
      "[Removed Lines]",
      "1404:     public static void unZip(File inFile, File unzipDir) throws IOException {",
      "1405:         Enumeration<? extends ZipEntry> entries;",
      "1406:         ZipFile zipFile = new ZipFile(inFile);",
      "1408:         try {",
      "1409:             entries = zipFile.entries();",
      "1410:             while (entries.hasMoreElements()) {",
      "1411:                 ZipEntry entry = entries.nextElement();",
      "1412:                 if (!entry.isDirectory()) {",
      "1413:                     InputStream in = zipFile.getInputStream(entry);",
      "1414:                     try {",
      "1415:                         File file = new File(unzipDir, entry.getName());",
      "1416:                         if (!file.getParentFile().mkdirs()) {",
      "1417:                             if (!file.getParentFile().isDirectory()) {",
      "1418:                                 throw new IOException(\"Mkdirs failed to create \" +",
      "1419:                                                       file.getParentFile().toString());",
      "1420:                             }",
      "1421:                         }",
      "1422:                         OutputStream out = new FileOutputStream(file);",
      "1423:                         try {",
      "1424:                             byte[] buffer = new byte[8192];",
      "1425:                             int i;",
      "1426:                             while ((i = in.read(buffer)) != -1) {",
      "1427:                                 out.write(buffer, 0, i);",
      "1428:                             }",
      "1429:                         } finally {",
      "1430:                             out.close();",
      "1431:                         }",
      "1432:                     } finally {",
      "1433:                         in.close();",
      "1434:                     }",
      "1435:                 }",
      "1436:             }",
      "1437:         } finally {",
      "1438:             zipFile.close();",
      "1439:         }",
      "",
      "[Added Lines]",
      "1441:     public static void unZip(File inFile, File toDir) throws IOException {",
      "1442:         try (ZipFile zipFile = new ZipFile(inFile)) {",
      "1443:             extractZipFile(zipFile, toDir, null);        }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1910:     public static void extractDirFromJar(String jarpath, String dir, File destdir) {",
      "1911:         _instance.extractDirFromJarImpl(jarpath, dir, destdir);",
      "1912:     }",
      "1914:     public void extractDirFromJarImpl(String jarpath, String dir, File destdir) {",
      "1915:         try (JarFile jarFile = new JarFile(jarpath)) {",
      "1928:         } catch (IOException e) {",
      "1929:             LOG.info(\"Could not extract {} from {}\", dir, jarpath);",
      "1930:         }",
      "",
      "[Removed Lines]",
      "1916:             Enumeration<JarEntry> jarEnums = jarFile.entries();",
      "1917:             while (jarEnums.hasMoreElements()) {",
      "1918:                 JarEntry entry = jarEnums.nextElement();",
      "1919:                 if (!entry.isDirectory() && entry.getName().startsWith(dir)) {",
      "1920:                     File aFile = new File(destdir, entry.getName());",
      "1921:                     aFile.getParentFile().mkdirs();",
      "1922:                     try (FileOutputStream out = new FileOutputStream(aFile);",
      "1923:                          InputStream in = jarFile.getInputStream(entry)) {",
      "1924:                         IOUtils.copy(in, out);",
      "1925:                     }",
      "1926:                 }",
      "1927:             }",
      "",
      "[Added Lines]",
      "1920:             extractZipFile(jarFile, destdir, dir);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0fc6b522487c061f89e8cdacf09f722d3f20589a",
      "candidate_info": {
        "commit_hash": "0fc6b522487c061f89e8cdacf09f722d3f20589a",
        "repo": "apache/storm",
        "commit_url": "https://github.com/apache/storm/commit/0fc6b522487c061f89e8cdacf09f722d3f20589",
        "files": [
          "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
          "storm-core/src/jvm/org/apache/storm/utils/Utils.java"
        ],
        "message": "STORM-3052: Allow for blobs to be unzipped/untarred",
        "before_after_code_files": [
          "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java||storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
          "storm-core/src/jvm/org/apache/storm/utils/Utils.java||storm-core/src/jvm/org/apache/storm/utils/Utils.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java||storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
            "storm-core/src/jvm/org/apache/storm/utils/Utils.java||storm-core/src/jvm/org/apache/storm/utils/Utils.java"
          ],
          "candidate": [
            "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java||storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
            "storm-core/src/jvm/org/apache/storm/utils/Utils.java||storm-core/src/jvm/org/apache/storm/utils/Utils.java"
          ]
        }
      },
      "candidate_diff": {
        "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java||storm-core/src/jvm/org/apache/storm/localizer/Localizer.java": [
          "File: storm-core/src/jvm/org/apache/storm/localizer/Localizer.java -> storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:           out.close();",
          "544:           in.close();",
          "545:           if (uncompress) {",
          "547:             LOG.debug(\"uncompressed \" + downloadFile + \" to: \" + localFileWithVersion);",
          "548:           }",
          "",
          "[Removed Lines]",
          "546:             Utils.unpack(new File(downloadFile), new File(localFileWithVersion));",
          "",
          "[Added Lines]",
          "546:             Utils.unpack(new File(downloadFile), new File(localFileWithVersion), (boolean)OR(_conf.get(Config.DISABLE_SYMLINKS), false));",
          "",
          "---------------"
        ],
        "storm-core/src/jvm/org/apache/storm/utils/Utils.java||storm-core/src/jvm/org/apache/storm/utils/Utils.java": [
          "File: storm-core/src/jvm/org/apache/storm/utils/Utils.java -> storm-core/src/jvm/org/apache/storm/utils/Utils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "908:         }",
          "909:     }",
          "",
          "[Removed Lines]",
          "862:     public static void unJar(File jarFile, File toDir)",
          "863:             throws IOException {",
          "864:         JarFile jar = new JarFile(jarFile);",
          "865:         try {",
          "866:             Enumeration<JarEntry> entries = jar.entries();",
          "867:             while (entries.hasMoreElements()) {",
          "868:                 final JarEntry entry = entries.nextElement();",
          "869:                 if (!entry.isDirectory()) {",
          "870:                     InputStream in = jar.getInputStream(entry);",
          "871:                     try {",
          "872:                         File file = new File(toDir, entry.getName());",
          "873:                         ensureDirectory(file.getParentFile());",
          "874:                         OutputStream out = new FileOutputStream(file);",
          "875:                         try {",
          "876:                             copyBytes(in, out, 8192);",
          "877:                         } finally {",
          "878:                             out.close();",
          "879:                         }",
          "880:                     } finally {",
          "881:                         in.close();",
          "882:                     }",
          "883:                 }",
          "884:             }",
          "885:         } finally {",
          "886:             jar.close();",
          "887:         }",
          "888:     }",
          "897:     public static void copyBytes(InputStream in, OutputStream out, int buffSize)",
          "898:             throws IOException {",
          "899:         PrintStream ps = out instanceof PrintStream ? (PrintStream)out : null;",
          "900:         byte buf[] = new byte[buffSize];",
          "901:         int bytesRead = in.read(buf);",
          "902:         while (bytesRead >= 0) {",
          "903:             out.write(buf, 0, bytesRead);",
          "904:             if ((ps != null) && ps.checkError()) {",
          "905:                 throw new IOException(\"Unable to write to output stream.\");",
          "906:             }",
          "907:             bytesRead = in.read(buf);",
          "",
          "[Added Lines]",
          "862:     public static void unJar(File jarFile, File toDir) throws IOException {",
          "863:         try (JarFile jar = new JarFile(jarFile)) {",
          "864:             extractZipFile(jar, toDir, null);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "940:         boolean gzipped = inFile.toString().endsWith(\"gz\");",
          "945:         } else {",
          "",
          "[Removed Lines]",
          "933:     public static void unTar(File inFile, File untarDir) throws IOException {",
          "934:         if (!untarDir.mkdirs()) {",
          "935:             if (!untarDir.isDirectory()) {",
          "936:                 throw new IOException(\"Mkdirs failed to create \" + untarDir);",
          "937:             }",
          "938:         }",
          "941:         if (isOnWindows()) {",
          "944:             unTarUsingJava(inFile, untarDir, gzipped);",
          "",
          "[Added Lines]",
          "891:     public static void unTar(File inFile, File untarDir, boolean symlinksDisabled) throws IOException {",
          "892:         ensureDirectory(untarDir);",
          "895:         if (Utils.isOnWindows() || symlinksDisabled) {",
          "898:             unTarUsingJava(inFile, untarDir, gzipped, symlinksDisabled);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "978:     }",
          "980:     private static void unTarUsingJava(File inFile, File untarDir,",
          "982:         InputStream inputStream = null;",
          "983:         try {",
          "984:             if (gzipped) {",
          "",
          "[Removed Lines]",
          "981:                                        boolean gzipped) throws IOException {",
          "",
          "[Added Lines]",
          "935:                                        boolean gzipped, boolean symlinksDisabled) throws IOException {",
          "936:         final String base = untarDir.getCanonicalPath();",
          "937:         LOG.trace(\"java untar {} to {}\", inFile, base);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "989:             }",
          "990:             try (TarArchiveInputStream tis = new TarArchiveInputStream(inputStream)) {",
          "991:                 for (TarArchiveEntry entry = tis.getNextTarEntry(); entry != null; ) {",
          "993:                     entry = tis.getNextTarEntry();",
          "994:                 }",
          "995:             }",
          "",
          "[Removed Lines]",
          "992:                     unpackEntries(tis, entry, untarDir);",
          "",
          "[Added Lines]",
          "948:                     unpackEntries(tis, entry, untarDir, base, symlinksDisabled);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1001:     }",
          "1003:     private static void unpackEntries(TarArchiveInputStream tis,",
          "1005:         if (entry.isDirectory()) {",
          "1011:             for (TarArchiveEntry e : entry.getDirectoryEntries()) {",
          "1013:             }",
          "1015:         }",
          "1021:             }",
          "1022:         }",
          "1030:         }",
          "1033:     }",
          "1035:     public static boolean isOnWindows() {",
          "",
          "[Removed Lines]",
          "1004:                                       TarArchiveEntry entry, File outputDir) throws IOException {",
          "1006:             File subDir = new File(outputDir, entry.getName());",
          "1007:             if (!subDir.mkdirs() && !subDir.isDirectory()) {",
          "1008:                 throw new IOException(\"Mkdirs failed to create tar internal dir \"",
          "1009:                         + outputDir);",
          "1010:             }",
          "1012:                 unpackEntries(tis, e, subDir);",
          "1014:             return;",
          "1016:         File outputFile = new File(outputDir, entry.getName());",
          "1017:         if (!outputFile.getParentFile().exists()) {",
          "1018:             if (!outputFile.getParentFile().mkdirs()) {",
          "1019:                 throw new IOException(\"Mkdirs failed to create tar internal dir \"",
          "1020:                                       + outputDir);",
          "1023:         int count;",
          "1024:         byte data[] = new byte[2048];",
          "1025:         BufferedOutputStream outputStream = new BufferedOutputStream(",
          "1026:                 new FileOutputStream(outputFile));",
          "1028:         while ((count = tis.read(data)) != -1) {",
          "1029:             outputStream.write(data, 0, count);",
          "1031:         outputStream.flush();",
          "1032:         outputStream.close();",
          "",
          "[Added Lines]",
          "960:                                       TarArchiveEntry entry, File outputDir, final String base,",
          "961:                                       boolean symlinksDisabled) throws IOException {",
          "962:         File target = new File(outputDir, entry.getName());",
          "963:         String found = target.getCanonicalPath();",
          "964:         if (!found.startsWith(base)) {",
          "965:             LOG.error(\"Invalid location {} is outside of {}\", found, base);",
          "966:             return;",
          "967:         }",
          "969:             LOG.trace(\"Extracting dir {}\", target);",
          "970:             ensureDirectory(target);",
          "972:                 unpackEntries(tis, e, target, base, symlinksDisabled);",
          "974:         } else if (entry.isSymbolicLink()) {",
          "975:             if (symlinksDisabled) {",
          "976:                 LOG.info(\"Symlinks disabled skipping {}\", target);",
          "977:             } else {",
          "978:                 Path src = target.toPath();",
          "979:                 Path dest = Paths.get(entry.getLinkName());",
          "980:                 LOG.trace(\"Extracting sym link {} to {}\", target, dest);",
          "982:                 Files.createSymbolicLink(src, dest);",
          "983:             }",
          "984:         } else if (entry.isFile()) {",
          "985:             LOG.trace(\"Extracting file {}\", target);",
          "986:             ensureDirectory(target.getParentFile());",
          "987:             try (BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target))) {",
          "988:                 IOUtils.copy(tis, outputStream);",
          "989:             }",
          "990:         } else {",
          "991:             LOG.error(\"{} is not a currently supported tar entry type.\", entry);",
          "994:         Path p = target.toPath();",
          "995:         if (Files.exists(p)) {",
          "996:             try {",
          "998:                 int mode = entry.getMode();",
          "999:                 Files.setPosixFilePermissions(p, parsePerms(mode));",
          "1000:             } catch (UnsupportedOperationException e) {",
          "1004:     }",
          "1006:     private static Set<PosixFilePermission> parsePerms(int mode) {",
          "1007:         Set<PosixFilePermission> ret = new HashSet<>();",
          "1008:         if ((mode & 0001) > 0) {",
          "1009:             ret.add(PosixFilePermission.OTHERS_EXECUTE);",
          "1010:         }",
          "1011:         if ((mode & 0002) > 0) {",
          "1012:             ret.add(PosixFilePermission.OTHERS_WRITE);",
          "1013:         }",
          "1014:         if ((mode & 0004) > 0) {",
          "1015:             ret.add(PosixFilePermission.OTHERS_READ);",
          "1016:         }",
          "1017:         if ((mode & 0010) > 0) {",
          "1018:             ret.add(PosixFilePermission.GROUP_EXECUTE);",
          "1020:         if ((mode & 0020) > 0) {",
          "1021:             ret.add(PosixFilePermission.GROUP_WRITE);",
          "1022:         }",
          "1023:         if ((mode & 0040) > 0) {",
          "1024:             ret.add(PosixFilePermission.GROUP_READ);",
          "1025:         }",
          "1026:         if ((mode & 0100) > 0) {",
          "1027:             ret.add(PosixFilePermission.OWNER_EXECUTE);",
          "1028:         }",
          "1029:         if ((mode & 0200) > 0) {",
          "1030:             ret.add(PosixFilePermission.OWNER_WRITE);",
          "1031:         }",
          "1032:         if ((mode & 0400) > 0) {",
          "1033:             ret.add(PosixFilePermission.OWNER_READ);",
          "1034:         }",
          "1035:         return ret;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1043:         return Paths.get(path).isAbsolute();",
          "1044:     }",
          "1047:         String lowerDst = localrsrc.getName().toLowerCase();",
          "1049:             unJar(localrsrc, dst);",
          "1051:             unZip(localrsrc, dst);",
          "1052:         } else if (lowerDst.endsWith(\".tar.gz\") ||",
          "1056:         } else {",
          "1057:             LOG.warn(\"Cannot unpack \" + localrsrc);",
          "1058:             if (!localrsrc.renameTo(dst)) {",
          "",
          "[Removed Lines]",
          "1046:     public static void unpack(File localrsrc, File dst) throws IOException {",
          "1048:         if (lowerDst.endsWith(\".jar\")) {",
          "1050:         } else if (lowerDst.endsWith(\".zip\")) {",
          "1053:                 lowerDst.endsWith(\".tgz\") ||",
          "1054:                 lowerDst.endsWith(\".tar\")) {",
          "1055:             unTar(localrsrc, dst);",
          "",
          "[Added Lines]",
          "1049:     public static void unpack(File localrsrc, File dst, boolean symLinksDisabled) throws IOException {",
          "1051:         if (lowerDst.endsWith(\".jar\") ||",
          "1052:             lowerDst.endsWith(\"_jar\")) {",
          "1054:         } else if (lowerDst.endsWith(\".zip\") ||",
          "1055:             lowerDst.endsWith(\"_zip\")) {",
          "1058:             lowerDst.endsWith(\"_tar_gz\") ||",
          "1059:             lowerDst.endsWith(\".tgz\") ||",
          "1060:             lowerDst.endsWith(\"_tgz\") ||",
          "1061:             lowerDst.endsWith(\".tar\") ||",
          "1062:             lowerDst.endsWith(\"_tar\")) {",
          "1063:             unTar(localrsrc, dst, symLinksDisabled);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1065:         }",
          "1066:     }",
          "1068:     public static boolean canUserReadBlob(ReadableBlobMeta meta, String user) {",
          "1069:         SettableBlobMeta settable = meta.get_settable();",
          "1070:         for (AccessControl acl : settable.get_acl()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1076:     private static void extractZipFile(ZipFile zipFile, File toDir, String prefix) throws IOException {",
          "1077:         ensureDirectory(toDir);",
          "1078:         final String base = toDir.getCanonicalPath();",
          "1080:         Enumeration<? extends ZipEntry> entries = zipFile.entries();",
          "1081:         while (entries.hasMoreElements()) {",
          "1082:             ZipEntry entry = entries.nextElement();",
          "1083:             if (!entry.isDirectory()) {",
          "1084:                 if (prefix != null && !entry.getName().startsWith(prefix)) {",
          "1086:                     continue;",
          "1087:                 }",
          "1088:                 File file = new File(toDir, entry.getName());",
          "1089:                 String found = file.getCanonicalPath();",
          "1090:                 if (!found.startsWith(base)) {",
          "1091:                     LOG.error(\"Invalid location {} is outside of {}\", found, base);",
          "1092:                     continue;",
          "1093:                 }",
          "1095:                 try (InputStream in = zipFile.getInputStream(entry)) {",
          "1096:                     ensureDirectory(file.getParentFile());",
          "1097:                     try (OutputStream out = new FileOutputStream(file)) {",
          "1098:                         IOUtils.copy(in, out);",
          "1099:                     }",
          "1100:                 }",
          "1101:             }",
          "1102:         }",
          "1103:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1416:     }",
          "",
          "[Removed Lines]",
          "1380:     public static void unZip(File inFile, File unzipDir) throws IOException {",
          "1381:         Enumeration<? extends ZipEntry> entries;",
          "1382:         ZipFile zipFile = new ZipFile(inFile);",
          "1384:         try {",
          "1385:             entries = zipFile.entries();",
          "1386:             while (entries.hasMoreElements()) {",
          "1387:                 ZipEntry entry = entries.nextElement();",
          "1388:                 if (!entry.isDirectory()) {",
          "1389:                     InputStream in = zipFile.getInputStream(entry);",
          "1390:                     try {",
          "1391:                         File file = new File(unzipDir, entry.getName());",
          "1392:                         if (!file.getParentFile().mkdirs()) {",
          "1393:                             if (!file.getParentFile().isDirectory()) {",
          "1394:                                 throw new IOException(\"Mkdirs failed to create \" +",
          "1395:                                                       file.getParentFile().toString());",
          "1396:                             }",
          "1397:                         }",
          "1398:                         OutputStream out = new FileOutputStream(file);",
          "1399:                         try {",
          "1400:                             byte[] buffer = new byte[8192];",
          "1401:                             int i;",
          "1402:                             while ((i = in.read(buffer)) != -1) {",
          "1403:                                 out.write(buffer, 0, i);",
          "1404:                             }",
          "1405:                         } finally {",
          "1406:                             out.close();",
          "1407:                         }",
          "1408:                     } finally {",
          "1409:                         in.close();",
          "1410:                     }",
          "1411:                 }",
          "1412:             }",
          "1413:         } finally {",
          "1414:             zipFile.close();",
          "1415:         }",
          "",
          "[Added Lines]",
          "1417:     public static void unZip(File inFile, File toDir) throws IOException {",
          "1418:         try (ZipFile zipFile = new ZipFile(inFile)) {",
          "1419:             extractZipFile(zipFile, toDir, null);        }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1882:     public static void extractDirFromJar(String jarpath, String dir, File destdir) {",
          "1883:         _instance.extractDirFromJarImpl(jarpath, dir, destdir);",
          "1884:     }",
          "1886:     public void extractDirFromJarImpl(String jarpath, String dir, File destdir) {",
          "1887:         try (JarFile jarFile = new JarFile(jarpath)) {",
          "1900:         } catch (IOException e) {",
          "1901:             LOG.info(\"Could not extract {} from {}\", dir, jarpath);",
          "1902:         }",
          "",
          "[Removed Lines]",
          "1888:             Enumeration<JarEntry> jarEnums = jarFile.entries();",
          "1889:             while (jarEnums.hasMoreElements()) {",
          "1890:                 JarEntry entry = jarEnums.nextElement();",
          "1891:                 if (!entry.isDirectory() && entry.getName().startsWith(dir)) {",
          "1892:                     File aFile = new File(destdir, entry.getName());",
          "1893:                     aFile.getParentFile().mkdirs();",
          "1894:                     try (FileOutputStream out = new FileOutputStream(aFile);",
          "1895:                          InputStream in = jarFile.getInputStream(entry)) {",
          "1896:                         IOUtils.copy(in, out);",
          "1897:                     }",
          "1898:                 }",
          "1899:             }",
          "",
          "[Added Lines]",
          "1892:             extractZipFile(jarFile, destdir, dir);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f61e5daf299d6c37c7ad65744d02556c94a16a4b",
      "candidate_info": {
        "commit_hash": "f61e5daf299d6c37c7ad65744d02556c94a16a4b",
        "repo": "apache/storm",
        "commit_url": "https://github.com/apache/storm/commit/f61e5daf299d6c37c7ad65744d02556c94a16a4",
        "files": [
          "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
          "storm-core/src/jvm/org/apache/storm/utils/Utils.java"
        ],
        "message": "STORM-3052: Allow for blobs to be unzipped/untarred",
        "before_after_code_files": [
          "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java||storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
          "storm-core/src/jvm/org/apache/storm/utils/Utils.java||storm-core/src/jvm/org/apache/storm/utils/Utils.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java||storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
            "storm-core/src/jvm/org/apache/storm/utils/Utils.java||storm-core/src/jvm/org/apache/storm/utils/Utils.java"
          ],
          "candidate": [
            "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java||storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
            "storm-core/src/jvm/org/apache/storm/utils/Utils.java||storm-core/src/jvm/org/apache/storm/utils/Utils.java"
          ]
        }
      },
      "candidate_diff": {
        "storm-core/src/jvm/org/apache/storm/localizer/Localizer.java||storm-core/src/jvm/org/apache/storm/localizer/Localizer.java": [
          "File: storm-core/src/jvm/org/apache/storm/localizer/Localizer.java -> storm-core/src/jvm/org/apache/storm/localizer/Localizer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:           out.close();",
          "544:           in.close();",
          "545:           if (uncompress) {",
          "547:             LOG.debug(\"uncompressed \" + downloadFile + \" to: \" + localFileWithVersion);",
          "548:           }",
          "",
          "[Removed Lines]",
          "546:             Utils.unpack(new File(downloadFile), new File(localFileWithVersion));",
          "",
          "[Added Lines]",
          "546:             Utils.unpack(new File(downloadFile), new File(localFileWithVersion), (boolean)OR(_conf.get(Config.DISABLE_SYMLINKS), false));",
          "",
          "---------------"
        ],
        "storm-core/src/jvm/org/apache/storm/utils/Utils.java||storm-core/src/jvm/org/apache/storm/utils/Utils.java": [
          "File: storm-core/src/jvm/org/apache/storm/utils/Utils.java -> storm-core/src/jvm/org/apache/storm/utils/Utils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "910:         }",
          "911:     }",
          "",
          "[Removed Lines]",
          "864:     public static void unJar(File jarFile, File toDir)",
          "865:             throws IOException {",
          "866:         JarFile jar = new JarFile(jarFile);",
          "867:         try {",
          "868:             Enumeration<JarEntry> entries = jar.entries();",
          "869:             while (entries.hasMoreElements()) {",
          "870:                 final JarEntry entry = entries.nextElement();",
          "871:                 if (!entry.isDirectory()) {",
          "872:                     InputStream in = jar.getInputStream(entry);",
          "873:                     try {",
          "874:                         File file = new File(toDir, entry.getName());",
          "875:                         ensureDirectory(file.getParentFile());",
          "876:                         OutputStream out = new FileOutputStream(file);",
          "877:                         try {",
          "878:                             copyBytes(in, out, 8192);",
          "879:                         } finally {",
          "880:                             out.close();",
          "881:                         }",
          "882:                     } finally {",
          "883:                         in.close();",
          "884:                     }",
          "885:                 }",
          "886:             }",
          "887:         } finally {",
          "888:             jar.close();",
          "889:         }",
          "890:     }",
          "899:     public static void copyBytes(InputStream in, OutputStream out, int buffSize)",
          "900:             throws IOException {",
          "901:         PrintStream ps = out instanceof PrintStream ? (PrintStream)out : null;",
          "902:         byte buf[] = new byte[buffSize];",
          "903:         int bytesRead = in.read(buf);",
          "904:         while (bytesRead >= 0) {",
          "905:             out.write(buf, 0, bytesRead);",
          "906:             if ((ps != null) && ps.checkError()) {",
          "907:                 throw new IOException(\"Unable to write to output stream.\");",
          "908:             }",
          "909:             bytesRead = in.read(buf);",
          "",
          "[Added Lines]",
          "864:     public static void unJar(File jarFile, File toDir) throws IOException {",
          "865:         try (JarFile jar = new JarFile(jarFile)) {",
          "866:             extractZipFile(jar, toDir, null);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "942:         boolean gzipped = inFile.toString().endsWith(\"gz\");",
          "947:         } else {",
          "",
          "[Removed Lines]",
          "935:     public static void unTar(File inFile, File untarDir) throws IOException {",
          "936:         if (!untarDir.mkdirs()) {",
          "937:             if (!untarDir.isDirectory()) {",
          "938:                 throw new IOException(\"Mkdirs failed to create \" + untarDir);",
          "939:             }",
          "940:         }",
          "943:         if (isOnWindows()) {",
          "946:             unTarUsingJava(inFile, untarDir, gzipped);",
          "",
          "[Added Lines]",
          "893:     public static void unTar(File inFile, File untarDir, boolean symlinksDisabled) throws IOException {",
          "894:         ensureDirectory(untarDir);",
          "897:         if (Utils.isOnWindows() || symlinksDisabled) {",
          "900:             unTarUsingJava(inFile, untarDir, gzipped, symlinksDisabled);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "980:     }",
          "982:     private static void unTarUsingJava(File inFile, File untarDir,",
          "984:         InputStream inputStream = null;",
          "985:         try {",
          "986:             if (gzipped) {",
          "",
          "[Removed Lines]",
          "983:                                        boolean gzipped) throws IOException {",
          "",
          "[Added Lines]",
          "937:                                        boolean gzipped, boolean symlinksDisabled) throws IOException {",
          "938:         final String base = untarDir.getCanonicalPath();",
          "939:         LOG.trace(\"java untar {} to {}\", inFile, base);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "991:             }",
          "992:             try (TarArchiveInputStream tis = new TarArchiveInputStream(inputStream)) {",
          "993:                 for (TarArchiveEntry entry = tis.getNextTarEntry(); entry != null; ) {",
          "995:                     entry = tis.getNextTarEntry();",
          "996:                 }",
          "997:             }",
          "",
          "[Removed Lines]",
          "994:                     unpackEntries(tis, entry, untarDir);",
          "",
          "[Added Lines]",
          "950:                     unpackEntries(tis, entry, untarDir, base, symlinksDisabled);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1003:     }",
          "1005:     private static void unpackEntries(TarArchiveInputStream tis,",
          "1007:         if (entry.isDirectory()) {",
          "1013:             for (TarArchiveEntry e : entry.getDirectoryEntries()) {",
          "1015:             }",
          "1017:         }",
          "1023:             }",
          "1024:         }",
          "1032:         }",
          "1035:     }",
          "1037:     public static boolean isOnWindows() {",
          "",
          "[Removed Lines]",
          "1006:                                       TarArchiveEntry entry, File outputDir) throws IOException {",
          "1008:             File subDir = new File(outputDir, entry.getName());",
          "1009:             if (!subDir.mkdirs() && !subDir.isDirectory()) {",
          "1010:                 throw new IOException(\"Mkdirs failed to create tar internal dir \"",
          "1011:                         + outputDir);",
          "1012:             }",
          "1014:                 unpackEntries(tis, e, subDir);",
          "1016:             return;",
          "1018:         File outputFile = new File(outputDir, entry.getName());",
          "1019:         if (!outputFile.getParentFile().exists()) {",
          "1020:             if (!outputFile.getParentFile().mkdirs()) {",
          "1021:                 throw new IOException(\"Mkdirs failed to create tar internal dir \"",
          "1022:                                       + outputDir);",
          "1025:         int count;",
          "1026:         byte data[] = new byte[2048];",
          "1027:         BufferedOutputStream outputStream = new BufferedOutputStream(",
          "1028:                 new FileOutputStream(outputFile));",
          "1030:         while ((count = tis.read(data)) != -1) {",
          "1031:             outputStream.write(data, 0, count);",
          "1033:         outputStream.flush();",
          "1034:         outputStream.close();",
          "",
          "[Added Lines]",
          "962:                                       TarArchiveEntry entry, File outputDir, final String base,",
          "963:                                       boolean symlinksDisabled) throws IOException {",
          "964:         File target = new File(outputDir, entry.getName());",
          "965:         String found = target.getCanonicalPath();",
          "966:         if (!found.startsWith(base)) {",
          "967:             LOG.error(\"Invalid location {} is outside of {}\", found, base);",
          "968:             return;",
          "969:         }",
          "971:             LOG.trace(\"Extracting dir {}\", target);",
          "972:             ensureDirectory(target);",
          "974:                 unpackEntries(tis, e, target, base, symlinksDisabled);",
          "976:         } else if (entry.isSymbolicLink()) {",
          "977:             if (symlinksDisabled) {",
          "978:                 LOG.info(\"Symlinks disabled skipping {}\", target);",
          "979:             } else {",
          "980:                 Path src = target.toPath();",
          "981:                 Path dest = Paths.get(entry.getLinkName());",
          "982:                 LOG.trace(\"Extracting sym link {} to {}\", target, dest);",
          "984:                 Files.createSymbolicLink(src, dest);",
          "985:             }",
          "986:         } else if (entry.isFile()) {",
          "987:             LOG.trace(\"Extracting file {}\", target);",
          "988:             ensureDirectory(target.getParentFile());",
          "989:             try (BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target))) {",
          "990:                 IOUtils.copy(tis, outputStream);",
          "991:             }",
          "992:         } else {",
          "993:             LOG.error(\"{} is not a currently supported tar entry type.\", entry);",
          "996:         Path p = target.toPath();",
          "997:         if (Files.exists(p)) {",
          "998:             try {",
          "1000:                 int mode = entry.getMode();",
          "1001:                 Files.setPosixFilePermissions(p, parsePerms(mode));",
          "1002:             } catch (UnsupportedOperationException e) {",
          "1006:     }",
          "1008:     private static Set<PosixFilePermission> parsePerms(int mode) {",
          "1009:         Set<PosixFilePermission> ret = new HashSet<>();",
          "1010:         if ((mode & 0001) > 0) {",
          "1011:             ret.add(PosixFilePermission.OTHERS_EXECUTE);",
          "1012:         }",
          "1013:         if ((mode & 0002) > 0) {",
          "1014:             ret.add(PosixFilePermission.OTHERS_WRITE);",
          "1015:         }",
          "1016:         if ((mode & 0004) > 0) {",
          "1017:             ret.add(PosixFilePermission.OTHERS_READ);",
          "1018:         }",
          "1019:         if ((mode & 0010) > 0) {",
          "1020:             ret.add(PosixFilePermission.GROUP_EXECUTE);",
          "1022:         if ((mode & 0020) > 0) {",
          "1023:             ret.add(PosixFilePermission.GROUP_WRITE);",
          "1024:         }",
          "1025:         if ((mode & 0040) > 0) {",
          "1026:             ret.add(PosixFilePermission.GROUP_READ);",
          "1027:         }",
          "1028:         if ((mode & 0100) > 0) {",
          "1029:             ret.add(PosixFilePermission.OWNER_EXECUTE);",
          "1030:         }",
          "1031:         if ((mode & 0200) > 0) {",
          "1032:             ret.add(PosixFilePermission.OWNER_WRITE);",
          "1033:         }",
          "1034:         if ((mode & 0400) > 0) {",
          "1035:             ret.add(PosixFilePermission.OWNER_READ);",
          "1036:         }",
          "1037:         return ret;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1045:         return Paths.get(path).isAbsolute();",
          "1046:     }",
          "1049:         String lowerDst = localrsrc.getName().toLowerCase();",
          "1051:             unJar(localrsrc, dst);",
          "1053:             unZip(localrsrc, dst);",
          "1054:         } else if (lowerDst.endsWith(\".tar.gz\") ||",
          "1058:         } else {",
          "1059:             LOG.warn(\"Cannot unpack \" + localrsrc);",
          "1060:             if (!localrsrc.renameTo(dst)) {",
          "",
          "[Removed Lines]",
          "1048:     public static void unpack(File localrsrc, File dst) throws IOException {",
          "1050:         if (lowerDst.endsWith(\".jar\")) {",
          "1052:         } else if (lowerDst.endsWith(\".zip\")) {",
          "1055:                 lowerDst.endsWith(\".tgz\") ||",
          "1056:                 lowerDst.endsWith(\".tar\")) {",
          "1057:             unTar(localrsrc, dst);",
          "",
          "[Added Lines]",
          "1051:     public static void unpack(File localrsrc, File dst, boolean symLinksDisabled) throws IOException {",
          "1053:         if (lowerDst.endsWith(\".jar\") ||",
          "1054:             lowerDst.endsWith(\"_jar\")) {",
          "1056:         } else if (lowerDst.endsWith(\".zip\") ||",
          "1057:             lowerDst.endsWith(\"_zip\")) {",
          "1060:             lowerDst.endsWith(\"_tar_gz\") ||",
          "1061:             lowerDst.endsWith(\".tgz\") ||",
          "1062:             lowerDst.endsWith(\"_tgz\") ||",
          "1063:             lowerDst.endsWith(\".tar\") ||",
          "1064:             lowerDst.endsWith(\"_tar\")) {",
          "1065:             unTar(localrsrc, dst, symLinksDisabled);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1067:         }",
          "1068:     }",
          "1070:     public static boolean canUserReadBlob(ReadableBlobMeta meta, String user) {",
          "1071:         SettableBlobMeta settable = meta.get_settable();",
          "1072:         for (AccessControl acl : settable.get_acl()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:     private static void extractZipFile(ZipFile zipFile, File toDir, String prefix) throws IOException {",
          "1079:         ensureDirectory(toDir);",
          "1080:         final String base = toDir.getCanonicalPath();",
          "1082:         Enumeration<? extends ZipEntry> entries = zipFile.entries();",
          "1083:         while (entries.hasMoreElements()) {",
          "1084:             ZipEntry entry = entries.nextElement();",
          "1085:             if (!entry.isDirectory()) {",
          "1086:                 if (prefix != null && !entry.getName().startsWith(prefix)) {",
          "1088:                     continue;",
          "1089:                 }",
          "1090:                 File file = new File(toDir, entry.getName());",
          "1091:                 String found = file.getCanonicalPath();",
          "1092:                 if (!found.startsWith(base)) {",
          "1093:                     LOG.error(\"Invalid location {} is outside of {}\", found, base);",
          "1094:                     continue;",
          "1095:                 }",
          "1097:                 try (InputStream in = zipFile.getInputStream(entry)) {",
          "1098:                     ensureDirectory(file.getParentFile());",
          "1099:                     try (OutputStream out = new FileOutputStream(file)) {",
          "1100:                         IOUtils.copy(in, out);",
          "1101:                     }",
          "1102:                 }",
          "1103:             }",
          "1104:         }",
          "1105:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1439:     }",
          "",
          "[Removed Lines]",
          "1403:     public static void unZip(File inFile, File unzipDir) throws IOException {",
          "1404:         Enumeration<? extends ZipEntry> entries;",
          "1405:         ZipFile zipFile = new ZipFile(inFile);",
          "1407:         try {",
          "1408:             entries = zipFile.entries();",
          "1409:             while (entries.hasMoreElements()) {",
          "1410:                 ZipEntry entry = entries.nextElement();",
          "1411:                 if (!entry.isDirectory()) {",
          "1412:                     InputStream in = zipFile.getInputStream(entry);",
          "1413:                     try {",
          "1414:                         File file = new File(unzipDir, entry.getName());",
          "1415:                         if (!file.getParentFile().mkdirs()) {",
          "1416:                             if (!file.getParentFile().isDirectory()) {",
          "1417:                                 throw new IOException(\"Mkdirs failed to create \" +",
          "1418:                                                       file.getParentFile().toString());",
          "1419:                             }",
          "1420:                         }",
          "1421:                         OutputStream out = new FileOutputStream(file);",
          "1422:                         try {",
          "1423:                             byte[] buffer = new byte[8192];",
          "1424:                             int i;",
          "1425:                             while ((i = in.read(buffer)) != -1) {",
          "1426:                                 out.write(buffer, 0, i);",
          "1427:                             }",
          "1428:                         } finally {",
          "1429:                             out.close();",
          "1430:                         }",
          "1431:                     } finally {",
          "1432:                         in.close();",
          "1433:                     }",
          "1434:                 }",
          "1435:             }",
          "1436:         } finally {",
          "1437:             zipFile.close();",
          "1438:         }",
          "",
          "[Added Lines]",
          "1440:     public static void unZip(File inFile, File toDir) throws IOException {",
          "1441:         try (ZipFile zipFile = new ZipFile(inFile)) {",
          "1442:             extractZipFile(zipFile, toDir, null);        }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1905:     public static void extractDirFromJar(String jarpath, String dir, File destdir) {",
          "1906:         _instance.extractDirFromJarImpl(jarpath, dir, destdir);",
          "1907:     }",
          "1909:     public void extractDirFromJarImpl(String jarpath, String dir, File destdir) {",
          "1910:         try (JarFile jarFile = new JarFile(jarpath)) {",
          "1923:         } catch (IOException e) {",
          "1924:             LOG.info(\"Could not extract {} from {}\", dir, jarpath);",
          "1925:         }",
          "",
          "[Removed Lines]",
          "1911:             Enumeration<JarEntry> jarEnums = jarFile.entries();",
          "1912:             while (jarEnums.hasMoreElements()) {",
          "1913:                 JarEntry entry = jarEnums.nextElement();",
          "1914:                 if (!entry.isDirectory() && entry.getName().startsWith(dir)) {",
          "1915:                     File aFile = new File(destdir, entry.getName());",
          "1916:                     aFile.getParentFile().mkdirs();",
          "1917:                     try (FileOutputStream out = new FileOutputStream(aFile);",
          "1918:                          InputStream in = jarFile.getInputStream(entry)) {",
          "1919:                         IOUtils.copy(in, out);",
          "1920:                     }",
          "1921:                 }",
          "1922:             }",
          "",
          "[Added Lines]",
          "1915:             extractZipFile(jarFile, destdir, dir);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1117a37b01a1058897a34e11ff5156e465efb692",
      "candidate_info": {
        "commit_hash": "1117a37b01a1058897a34e11ff5156e465efb692",
        "repo": "apache/storm",
        "commit_url": "https://github.com/apache/storm/commit/1117a37b01a1058897a34e11ff5156e465efb692",
        "files": [
          "storm-server/src/main/java/org/apache/storm/localizer/LocalizedResource.java",
          "storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java"
        ],
        "message": "STORM-3052: Allow for untar/unzip to work on older versions",
        "before_after_code_files": [
          "storm-server/src/main/java/org/apache/storm/localizer/LocalizedResource.java||storm-server/src/main/java/org/apache/storm/localizer/LocalizedResource.java",
          "storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java||storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "storm-server/src/main/java/org/apache/storm/localizer/LocalizedResource.java||storm-server/src/main/java/org/apache/storm/localizer/LocalizedResource.java": [
          "File: storm-server/src/main/java/org/apache/storm/localizer/LocalizedResource.java -> storm-server/src/main/java/org/apache/storm/localizer/LocalizedResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     private final IAdvancedFSOps fsOps;",
          "87:     private final String user;",
          "88:     private final Map<String, Object> conf;",
          "90:     private long size = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:     private final boolean symLinksDisabled;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:         Path base = getLocalUserFileCacheDir(localBaseDir, user);",
          "96:         this.baseDir = uncompressed ? getCacheDirForArchives(base) : getCacheDirForFiles(base);",
          "97:         this.conf = conf;",
          "98:         this.user = user;",
          "99:         this.fsOps = fsOps;",
          "100:         versionFilePath = constructVersionFileName(baseDir, key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:         this.symLinksDisabled = (boolean)conf.getOrDefault(Config.DISABLE_SYMLINKS, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "273:             }",
          "274:         }",
          "275:         if (uncompressed) {",
          "277:             LOG.debug(\"Uncompressed {} to: {}\", downloadFile, finalLocation);",
          "278:         }",
          "279:         setBlobPermissions(conf, user, finalLocation);",
          "",
          "[Removed Lines]",
          "276:             ServerUtils.unpack(downloadFile.toFile(), finalLocation.toFile());",
          "",
          "[Added Lines]",
          "278:             ServerUtils.unpack(downloadFile.toFile(), finalLocation.toFile(), symLinksDisabled);",
          "",
          "---------------"
        ],
        "storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java||storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java": [
          "File: storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java -> storm-server/src/main/java/org/apache/storm/utils/ServerUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import java.io.RandomAccessFile;",
          "33: import java.nio.file.FileSystems;",
          "34: import java.nio.file.Files;",
          "35: import java.nio.file.Paths;",
          "36: import java.util.ArrayList;",
          "37: import java.util.Arrays;",
          "38: import java.util.Collections;",
          "39: import java.util.Enumeration;",
          "40: import java.util.HashMap;",
          "41: import java.util.List;",
          "42: import java.util.Map;",
          "43: import java.util.jar.JarEntry;",
          "44: import java.util.jar.JarFile;",
          "45: import java.util.zip.GZIPInputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import java.nio.file.LinkOption;",
          "36: import java.nio.file.Path;",
          "38: import java.nio.file.attribute.PosixFilePermission;",
          "44: import java.util.HashSet;",
          "47: import java.util.Set;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:         }",
          "428:     }",
          "",
          "[Removed Lines]",
          "381:     public static void unJar(File jarFile, File toDir)",
          "382:         throws IOException {",
          "383:         JarFile jar = new JarFile(jarFile);",
          "384:         try {",
          "385:             Enumeration<JarEntry> entries = jar.entries();",
          "386:             while (entries.hasMoreElements()) {",
          "387:                 final JarEntry entry = entries.nextElement();",
          "388:                 if (!entry.isDirectory()) {",
          "389:                     InputStream in = jar.getInputStream(entry);",
          "390:                     try {",
          "391:                         File file = new File(toDir, entry.getName());",
          "392:                         ensureDirectory(file.getParentFile());",
          "393:                         OutputStream out = new FileOutputStream(file);",
          "394:                         try {",
          "395:                             copyBytes(in, out, 8192);",
          "396:                         } finally {",
          "397:                             out.close();",
          "398:                         }",
          "399:                     } finally {",
          "400:                         in.close();",
          "401:                     }",
          "402:                 }",
          "403:             }",
          "404:         } finally {",
          "405:             jar.close();",
          "406:         }",
          "407:     }",
          "416:     public static void copyBytes(InputStream in, OutputStream out, int buffSize)",
          "417:         throws IOException {",
          "418:         PrintStream ps = out instanceof PrintStream ? (PrintStream) out : null;",
          "419:         byte buf[] = new byte[buffSize];",
          "420:         int bytesRead = in.read(buf);",
          "421:         while (bytesRead >= 0) {",
          "422:             out.write(buf, 0, bytesRead);",
          "423:             if ((ps != null) && ps.checkError()) {",
          "424:                 throw new IOException(\"Unable to write to output stream.\");",
          "425:             }",
          "426:             bytesRead = in.read(buf);",
          "",
          "[Added Lines]",
          "386:     public static void unJar(File jarFile, File toDir) throws IOException {",
          "387:         try (JarFile jar = new JarFile(jarFile)) {",
          "388:             extractZipFile(jar, toDir, null);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "458:         boolean gzipped = inFile.toString().endsWith(\"gz\");",
          "463:         } else {",
          "",
          "[Removed Lines]",
          "451:     public static void unTar(File inFile, File untarDir) throws IOException {",
          "452:         if (!untarDir.mkdirs()) {",
          "453:             if (!untarDir.isDirectory()) {",
          "454:                 throw new IOException(\"Mkdirs failed to create \" + untarDir);",
          "455:             }",
          "456:         }",
          "459:         if (Utils.isOnWindows()) {",
          "462:             unTarUsingJava(inFile, untarDir, gzipped);",
          "",
          "[Added Lines]",
          "414:     public static void unTar(File inFile, File untarDir, boolean symlinksDisabled) throws IOException {",
          "415:         ensureDirectory(untarDir);",
          "418:         if (Utils.isOnWindows() || symlinksDisabled) {",
          "421:             unTarUsingJava(inFile, untarDir, gzipped, symlinksDisabled);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "496:     }",
          "498:     private static void unTarUsingJava(File inFile, File untarDir,",
          "500:         InputStream inputStream = null;",
          "501:         try {",
          "502:             if (gzipped) {",
          "",
          "[Removed Lines]",
          "499:                                        boolean gzipped) throws IOException {",
          "",
          "[Added Lines]",
          "458:                                        boolean gzipped, boolean symlinksDisabled) throws IOException {",
          "459:         final String base = untarDir.getCanonicalPath();",
          "460:         LOG.trace(\"java untar {} to {}\", inFile, base);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "507:             }",
          "508:             try (TarArchiveInputStream tis = new TarArchiveInputStream(inputStream)) {",
          "509:                 for (TarArchiveEntry entry = tis.getNextTarEntry(); entry != null; ) {",
          "511:                     entry = tis.getNextTarEntry();",
          "512:                 }",
          "513:             }",
          "",
          "[Removed Lines]",
          "510:                     unpackEntries(tis, entry, untarDir);",
          "",
          "[Added Lines]",
          "471:                     unpackEntries(tis, entry, untarDir, base, symlinksDisabled);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "519:     }",
          "521:     private static void unpackEntries(TarArchiveInputStream tis,",
          "523:         if (entry.isDirectory()) {",
          "529:             for (TarArchiveEntry e : entry.getDirectoryEntries()) {",
          "531:             }",
          "533:         }",
          "539:             }",
          "540:         }",
          "548:         }",
          "551:     }",
          "554:         String lowerDst = localrsrc.getName().toLowerCase();",
          "556:             unJar(localrsrc, dst);",
          "558:             unZip(localrsrc, dst);",
          "559:         } else if (lowerDst.endsWith(\".tar.gz\") ||",
          "563:         } else {",
          "564:             LOG.warn(\"Cannot unpack \" + localrsrc);",
          "565:             if (!localrsrc.renameTo(dst)) {",
          "",
          "[Removed Lines]",
          "522:                                       TarArchiveEntry entry, File outputDir) throws IOException {",
          "524:             File subDir = new File(outputDir, entry.getName());",
          "525:             if (!subDir.mkdirs() && !subDir.isDirectory()) {",
          "526:                 throw new IOException(\"Mkdirs failed to create tar internal dir \"",
          "527:                                       + outputDir);",
          "528:             }",
          "530:                 unpackEntries(tis, e, subDir);",
          "532:             return;",
          "534:         File outputFile = new File(outputDir, entry.getName());",
          "535:         if (!outputFile.getParentFile().exists()) {",
          "536:             if (!outputFile.getParentFile().mkdirs()) {",
          "537:                 throw new IOException(\"Mkdirs failed to create tar internal dir \"",
          "538:                                       + outputDir);",
          "541:         int count;",
          "542:         byte data[] = new byte[2048];",
          "543:         BufferedOutputStream outputStream = new BufferedOutputStream(",
          "544:             new FileOutputStream(outputFile));",
          "546:         while ((count = tis.read(data)) != -1) {",
          "547:             outputStream.write(data, 0, count);",
          "549:         outputStream.flush();",
          "550:         outputStream.close();",
          "553:     public static void unpack(File localrsrc, File dst) throws IOException {",
          "555:         if (lowerDst.endsWith(\".jar\")) {",
          "557:         } else if (lowerDst.endsWith(\".zip\")) {",
          "560:                    lowerDst.endsWith(\".tgz\") ||",
          "561:                    lowerDst.endsWith(\".tar\")) {",
          "562:             unTar(localrsrc, dst);",
          "",
          "[Added Lines]",
          "483:                                       TarArchiveEntry entry, File outputDir, final String base,",
          "484:                                       boolean symlinksDisabled) throws IOException {",
          "485:         File target = new File(outputDir, entry.getName());",
          "486:         String found = target.getCanonicalPath();",
          "487:         if (!found.startsWith(base)) {",
          "488:             LOG.error(\"Invalid location {} is outside of {}\", found, base);",
          "489:             return;",
          "490:         }",
          "492:             LOG.trace(\"Extracting dir {}\", target);",
          "493:             ensureDirectory(target);",
          "495:                 unpackEntries(tis, e, target, base, symlinksDisabled);",
          "497:         } else if (entry.isSymbolicLink()) {",
          "498:             if (symlinksDisabled) {",
          "499:                 LOG.info(\"Symlinks disabled skipping {}\", target);",
          "500:             } else {",
          "501:                 Path src = target.toPath();",
          "502:                 Path dest = Paths.get(entry.getLinkName());",
          "503:                 LOG.trace(\"Extracting sym link {} to {}\", target, dest);",
          "505:                 Files.createSymbolicLink(src, dest);",
          "506:             }",
          "507:         } else if (entry.isFile()) {",
          "508:             LOG.trace(\"Extracting file {}\", target);",
          "509:             ensureDirectory(target.getParentFile());",
          "510:             try (BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target))) {",
          "511:                 IOUtils.copy(tis, outputStream);",
          "512:             }",
          "513:         } else {",
          "514:             LOG.error(\"{} is not a currently supported tar entry type.\", entry);",
          "517:         Path p = target.toPath();",
          "518:         if (Files.exists(p)) {",
          "519:             try {",
          "521:                 int mode = entry.getMode();",
          "522:                 Files.setPosixFilePermissions(p, parsePerms(mode));",
          "523:             } catch (UnsupportedOperationException e) {",
          "527:     }",
          "529:     private static Set<PosixFilePermission> parsePerms(int mode) {",
          "530:         Set<PosixFilePermission> ret = new HashSet<>();",
          "531:         if ((mode & 0001) > 0) {",
          "532:             ret.add(PosixFilePermission.OTHERS_EXECUTE);",
          "533:         }",
          "534:         if ((mode & 0002) > 0) {",
          "535:             ret.add(PosixFilePermission.OTHERS_WRITE);",
          "536:         }",
          "537:         if ((mode & 0004) > 0) {",
          "538:             ret.add(PosixFilePermission.OTHERS_READ);",
          "539:         }",
          "540:         if ((mode & 0010) > 0) {",
          "541:             ret.add(PosixFilePermission.GROUP_EXECUTE);",
          "543:         if ((mode & 0020) > 0) {",
          "544:             ret.add(PosixFilePermission.GROUP_WRITE);",
          "545:         }",
          "546:         if ((mode & 0040) > 0) {",
          "547:             ret.add(PosixFilePermission.GROUP_READ);",
          "548:         }",
          "549:         if ((mode & 0100) > 0) {",
          "550:             ret.add(PosixFilePermission.OWNER_EXECUTE);",
          "551:         }",
          "552:         if ((mode & 0200) > 0) {",
          "553:             ret.add(PosixFilePermission.OWNER_WRITE);",
          "554:         }",
          "555:         if ((mode & 0400) > 0) {",
          "556:             ret.add(PosixFilePermission.OWNER_READ);",
          "557:         }",
          "558:         return ret;",
          "561:     public static void unpack(File localrsrc, File dst, boolean symLinksDisabled) throws IOException {",
          "563:         if (lowerDst.endsWith(\".jar\") ||",
          "564:             lowerDst.endsWith(\"_jar\")) {",
          "566:         } else if (lowerDst.endsWith(\".zip\") ||",
          "567:             lowerDst.endsWith(\"_zip\")) {",
          "570:             lowerDst.endsWith(\"_tar_gz\") ||",
          "571:             lowerDst.endsWith(\".tgz\") ||",
          "572:             lowerDst.endsWith(\"_tgz\") ||",
          "573:             lowerDst.endsWith(\".tar\") ||",
          "574:             lowerDst.endsWith(\"_tar\")) {",
          "575:             unTar(localrsrc, dst, symLinksDisabled);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "572:         }",
          "573:     }",
          "617:         }",
          "618:     }",
          "",
          "[Removed Lines]",
          "582:     public static void unZip(File inFile, File unzipDir) throws IOException {",
          "583:         Enumeration<? extends ZipEntry> entries;",
          "584:         ZipFile zipFile = new ZipFile(inFile);",
          "586:         try {",
          "587:             entries = zipFile.entries();",
          "588:             while (entries.hasMoreElements()) {",
          "589:                 ZipEntry entry = entries.nextElement();",
          "590:                 if (!entry.isDirectory()) {",
          "591:                     InputStream in = zipFile.getInputStream(entry);",
          "592:                     try {",
          "593:                         File file = new File(unzipDir, entry.getName());",
          "594:                         if (!file.getParentFile().mkdirs()) {",
          "595:                             if (!file.getParentFile().isDirectory()) {",
          "596:                                 throw new IOException(\"Mkdirs failed to create \" +",
          "597:                                                       file.getParentFile().toString());",
          "598:                             }",
          "599:                         }",
          "600:                         OutputStream out = new FileOutputStream(file);",
          "601:                         try {",
          "602:                             byte[] buffer = new byte[8192];",
          "603:                             int i;",
          "604:                             while ((i = in.read(buffer)) != -1) {",
          "605:                                 out.write(buffer, 0, i);",
          "606:                             }",
          "607:                         } finally {",
          "608:                             out.close();",
          "609:                         }",
          "610:                     } finally {",
          "611:                         in.close();",
          "612:                     }",
          "613:                 }",
          "614:             }",
          "615:         } finally {",
          "616:             zipFile.close();",
          "",
          "[Added Lines]",
          "588:     private static void extractZipFile(ZipFile zipFile, File toDir, String prefix) throws IOException {",
          "589:         ensureDirectory(toDir);",
          "590:         final String base = toDir.getCanonicalPath();",
          "592:         Enumeration<? extends ZipEntry> entries = zipFile.entries();",
          "593:         while (entries.hasMoreElements()) {",
          "594:             ZipEntry entry = entries.nextElement();",
          "595:             if (!entry.isDirectory()) {",
          "596:                 if (prefix != null && !entry.getName().startsWith(prefix)) {",
          "598:                     continue;",
          "599:                 }",
          "600:                 File file = new File(toDir, entry.getName());",
          "601:                 String found = file.getCanonicalPath();",
          "602:                 if (!found.startsWith(base)) {",
          "603:                     LOG.error(\"Invalid location {} is outside of {}\", found, base);",
          "604:                     continue;",
          "605:                 }",
          "607:                 try (InputStream in = zipFile.getInputStream(entry)) {",
          "608:                     ensureDirectory(file.getParentFile());",
          "609:                     try (OutputStream out = new FileOutputStream(file)) {",
          "610:                         IOUtils.copy(in, out);",
          "611:                     }",
          "612:                 }",
          "613:             }",
          "614:         }",
          "615:     }",
          "624:     public static void unZip(File inFile, File toDir) throws IOException {",
          "625:         try (ZipFile zipFile = new ZipFile(inFile)) {",
          "626:             extractZipFile(zipFile, toDir, null);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "742:     public void extractDirFromJarImpl(String jarpath, String dir, File destdir) {",
          "743:         try (JarFile jarFile = new JarFile(jarpath)) {",
          "756:         } catch (IOException e) {",
          "757:             LOG.info(\"Could not extract {} from {}\", dir, jarpath);",
          "758:         }",
          "",
          "[Removed Lines]",
          "744:             Enumeration<JarEntry> jarEnums = jarFile.entries();",
          "745:             while (jarEnums.hasMoreElements()) {",
          "746:                 JarEntry entry = jarEnums.nextElement();",
          "747:                 if (!entry.isDirectory() && entry.getName().startsWith(dir)) {",
          "748:                     File aFile = new File(destdir, entry.getName());",
          "749:                     aFile.getParentFile().mkdirs();",
          "750:                     try (FileOutputStream out = new FileOutputStream(aFile);",
          "751:                          InputStream in = jarFile.getInputStream(entry)) {",
          "752:                         IOUtils.copy(in, out);",
          "753:                     }",
          "754:                 }",
          "755:             }",
          "",
          "[Added Lines]",
          "754:             extractZipFile(jarFile, destdir, dir);",
          "",
          "---------------"
        ]
      }
    }
  ]
}