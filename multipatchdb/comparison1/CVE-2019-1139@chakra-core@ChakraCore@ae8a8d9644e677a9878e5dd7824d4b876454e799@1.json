{
  "cve_id": "CVE-2019-1139",
  "cve_desc": "",
  "repo": "chakra-core/ChakraCore",
  "patch_hash": "ae8a8d9644e677a9878e5dd7824d4b876454e799",
  "patch_info": {
    "commit_hash": "ae8a8d9644e677a9878e5dd7824d4b876454e799",
    "repo": "chakra-core/ChakraCore",
    "commit_url": "https://github.com/chakra-core/ChakraCore/commit/ae8a8d9644e677a9878e5dd7824d4b876454e799",
    "files": [
      "lib/Backend/GlobOpt.cpp",
      "lib/Backend/GlobOptFields.cpp"
    ],
    "message": "[CVE-2019-1139] Chakra JIT Type Confusion\n\narray.slice converts the native array to var array which was not captured during the optimization.\nDue to that the native array type is forced to var array which leads to the type confusion.\nFixed this by killing the object type for the slice (as well as concat)",
    "before_after_code_files": [
      "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
      "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp"
    ]
  },
  "patch_diff": {
    "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
      "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "13470:                     case IR::HelperArray_Splice:",
      "13471:                     case IR::HelperArray_Unshift:",
      "13472:                     case IR::HelperArray_Concat:",
      "13473:                         kills.SetKillsArrayHeadSegments();",
      "13474:                         kills.SetKillsArrayHeadSegmentLengths();",
      "13475:                         break;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13473:                     case IR::HelperArray_Slice:",
      "",
      "---------------"
    ],
    "lib/Backend/GlobOptFields.cpp||lib/Backend/GlobOptFields.cpp": [
      "File: lib/Backend/GlobOptFields.cpp -> lib/Backend/GlobOptFields.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "518:                 }",
      "519:                 break;",
      "521:             case IR::JnHelperMethod::HelperRegExp_Exec:",
      "522:             case IR::JnHelperMethod::HelperRegExp_ExecResultNotUsed:",
      "523:             case IR::JnHelperMethod::HelperRegExp_ExecResultUsed:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "521:             case IR::JnHelperMethod::HelperArray_Slice:",
      "522:             case IR::JnHelperMethod::HelperArray_Concat:",
      "523:                 if (inGlobOpt && this->objectTypeSyms)",
      "524:                 {",
      "525:                     if (this->currentBlock->globOptData.maybeWrittenTypeSyms == nullptr)",
      "526:                     {",
      "527:                         this->currentBlock->globOptData.maybeWrittenTypeSyms = JitAnew(this->alloc, BVSparse<JitArenaAllocator>, this->alloc);",
      "528:                     }",
      "529:                     this->currentBlock->globOptData.maybeWrittenTypeSyms->Or(this->objectTypeSyms);",
      "530:                 }",
      "531:                 break;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "797ddb02faf3dcca03023db3f0666bb12ebdd960",
      "candidate_info": {
        "commit_hash": "797ddb02faf3dcca03023db3f0666bb12ebdd960",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/797ddb02faf3dcca03023db3f0666bb12ebdd960",
        "files": [
          "lib/Jsrt/JsrtDebuggerObject.cpp",
          "test/Debugger/exceptionWhileFetchingProp.js",
          "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline",
          "test/Debugger/rlexe.xml"
        ],
        "message": "Handling exception while GetJSONObject in script debugger.\n\nDuring GetChildren phase when we try to build JSON object we might throw exception. That skipped calling .Detach on the AutoPtr - which leads to release\nthe debugger property again.\nFixed that by catching and discarding the exception.",
        "before_after_code_files": [
          "lib/Jsrt/JsrtDebuggerObject.cpp||lib/Jsrt/JsrtDebuggerObject.cpp",
          "test/Debugger/exceptionWhileFetchingProp.js||test/Debugger/exceptionWhileFetchingProp.js",
          "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline||test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/Jsrt/JsrtDebuggerObject.cpp||lib/Jsrt/JsrtDebuggerObject.cpp": [
          "File: lib/Jsrt/JsrtDebuggerObject.cpp -> lib/Jsrt/JsrtDebuggerObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:                 if (resolvedObjectDisplay != nullptr)",
          "86:                 {",
          "87:                     JsrtDebuggerObjectBase* debuggerObject = JsrtDebuggerObjectProperty::Make(this->GetDebuggerObjectsManager(), objectDisplayWeakRef);",
          "91:                     {",
          "93:                     }",
          "95:                     {",
          "97:                     }",
          "98:                     objectDisplayWeakRef->ReleaseStrongReference();",
          "99:                     objectDisplayWeakRef.Detach();",
          "",
          "[Removed Lines]",
          "88:                     Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "89:                     Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "90:                     if (resolvedObjectDisplay->IsFake())",
          "92:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)debuggerOnlyPropertiesArray, Js::JavascriptNumber::ToVar(debuggerOnlyPropertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "94:                     else",
          "96:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)propertiesArray, Js::JavascriptNumber::ToVar(propertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "",
          "[Added Lines]",
          "88:                     try",
          "90:                         Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "91:                         Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "92:                         if (resolvedObjectDisplay->IsFake())",
          "93:                         {",
          "94:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)debuggerOnlyPropertiesArray, Js::JavascriptNumber::ToVar(debuggerOnlyPropertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "95:                         }",
          "96:                         else",
          "97:                         {",
          "98:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)propertiesArray, Js::JavascriptNumber::ToVar(propertiesArrayCount++, scriptContext), marshaledObj, scriptContext);",
          "99:                         }",
          "101:                     catch (const Js::JavascriptException& err)",
          "103:                         err.GetAndClear();   // discard exception object",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:                     {",
          "416:                         AutoPtr<WeakArenaReference<Js::IDiagObjectModelDisplay>> objectDisplayWeakRef(resolvedObject.GetObjectDisplay());",
          "417:                         JsrtDebuggerObjectBase* debuggerObject = JsrtDebuggerObjectScope::Make(debuggerObjectsManager, objectDisplayWeakRef, scopesCount);",
          "423:                         objectDisplayWeakRef.Detach();",
          "424:                     }",
          "425:                 }",
          "",
          "[Removed Lines]",
          "418:                         Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "419:                         Assert(object != nullptr);",
          "420:                         Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "421:                         Js::JavascriptOperators::OP_SetElementI((Js::Var)scopesArray, Js::JavascriptNumber::ToVar(scopesCount, scriptContext), marshaledObj, scriptContext);",
          "422:                         scopesCount++;",
          "",
          "[Added Lines]",
          "425:                         try",
          "426:                         {",
          "427:                             Js::DynamicObject* object = debuggerObject->GetJSONObject(resolvedObject.scriptContext, /* forceSetValueProp */ false);",
          "428:                             Assert(object != nullptr);",
          "429:                             Js::Var marshaledObj = Js::CrossSite::MarshalVar(scriptContext, object);",
          "430:                             Js::JavascriptOperators::OP_SetElementI((Js::Var)scopesArray, Js::JavascriptNumber::ToVar(scopesCount, scriptContext), marshaledObj, scriptContext);",
          "431:                             scopesCount++;",
          "432:                         }",
          "433:                         catch (const Js::JavascriptException& err)",
          "434:                         {",
          "435:                             err.GetAndClear();   // discard exception object",
          "436:                         }",
          "",
          "---------------"
        ],
        "test/Debugger/exceptionWhileFetchingProp.js||test/Debugger/exceptionWhileFetchingProp.js": [
          "File: test/Debugger/exceptionWhileFetchingProp.js -> test/Debugger/exceptionWhileFetchingProp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: var p = new Proxy({x:10}, {",
          "7:     getOwnPropertyDescriptor: function (oTarget, sKey) {",
          "8:         throw new Error('');",
          "9:         return { configurable: true, enumerable: true, value: 5 };",
          "10:     }",
          "11:   });",
          "13:   function f() {",
          "15:   }",
          "16:   f();",
          "17:   print('Pass');",
          "",
          "---------------"
        ],
        "test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline||test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline": [
          "File: test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline -> test/Debugger/exceptionWhileFetchingProp.js.dbg.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: [",
          "2:   {",
          "3:     \"evaluate\": {",
          "4:       \"p\": {",
          "5:         \"#__proto__\": \"Object {...}\",",
          "6:         \"[Proxy]\": \"Proxy {...}\"",
          "7:       }",
          "8:     }",
          "9:   }",
          "10: ]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c70af488e435ebd552f3da0547dee39dc8437a64",
      "candidate_info": {
        "commit_hash": "c70af488e435ebd552f3da0547dee39dc8437a64",
        "repo": "chakra-core/ChakraCore",
        "commit_url": "https://github.com/chakra-core/ChakraCore/commit/c70af488e435ebd552f3da0547dee39dc8437a64",
        "files": [
          "lib/Backend/BackwardPass.cpp",
          "lib/Backend/BackwardPass.h",
          "lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptArrays.cpp"
        ],
        "message": "[CVE-2019-1195] Chakra Type Confusion RCE",
        "before_after_code_files": [
          "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp",
          "lib/Backend/BackwardPass.h||lib/Backend/BackwardPass.h",
          "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp",
          "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h",
          "lib/Backend/GlobOptArrays.cpp||lib/Backend/GlobOptArrays.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/chakra-core/ChakraCore/pull/6243"
        ],
        "olp_code_files": {
          "patch": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp"
          ],
          "candidate": [
            "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Backend/BackwardPass.cpp||lib/Backend/BackwardPass.cpp": [
          "File: lib/Backend/BackwardPass.cpp -> lib/Backend/BackwardPass.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: BackwardPass::BackwardPass(Func * func, GlobOpt * globOpt, Js::Phase tag)",
          "11:     : func(func), globOpt(globOpt), tag(tag), currentPrePassLoop(nullptr), tempAlloc(nullptr),",
          "12:     preOpBailOutInstrToProcess(nullptr),",
          "14:     isCollectionPass(false), currentRegion(nullptr),",
          "15:     collectionPassSubPhase(CollectionPassSubPhase::None),",
          "16:     isLoopPrepass(false)",
          "",
          "[Removed Lines]",
          "13:     considerSymAsRealUseInNoImplicitCallUses(nullptr),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:     candidateSymsRequiredToBeInt = &localCandidateSymsRequiredToBeInt;",
          "413:     BVSparse<JitArenaAllocator> localCandidateSymsRequiredToBeLossyInt(tempAlloc);",
          "414:     candidateSymsRequiredToBeLossyInt = &localCandidateSymsRequiredToBeLossyInt;",
          "415:     intOverflowCurrentlyMattersInRange = true;",
          "417:     FloatSymEquivalenceMap localFloatSymEquivalenceMap(tempAlloc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "414:     BVSparse<JitArenaAllocator> localConsiderSymsAsRealUsesInNoImplicitCallUses(tempAlloc);",
          "415:     considerSymsAsRealUsesInNoImplicitCallUses = &localConsiderSymsAsRealUsesInNoImplicitCallUses;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3755:         block->loop->regAlloc.liveOnBackEdgeSyms = block->upwardExposedUses->CopyNew(this->func->m_alloc);",
          "3756:     }",
          "3760: #if DBG_DUMP",
          "3761:     TraceBlockUses(block, false);",
          "",
          "[Removed Lines]",
          "3758:     Assert(!considerSymAsRealUseInNoImplicitCallUses);",
          "",
          "[Added Lines]",
          "3759:     Assert(considerSymsAsRealUsesInNoImplicitCallUses->IsEmpty());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4228:             {",
          "4229:                 IR::RegOpnd *const regSrc = src->AsRegOpnd();",
          "4230:                 sym = regSrc->m_sym;",
          "4232:                 {",
          "4234:                     ProcessStackSymUse(sym->AsStackSym(), true);",
          "4235:                 }",
          "4236:                 if(regSrc->IsArrayRegOpnd())",
          "",
          "[Removed Lines]",
          "4231:                 if(considerSymAsRealUseInNoImplicitCallUses && considerSymAsRealUseInNoImplicitCallUses == sym)",
          "4233:                     considerSymAsRealUseInNoImplicitCallUses = nullptr;",
          "",
          "[Added Lines]",
          "4232:                 if(considerSymsAsRealUsesInNoImplicitCallUses->TestAndClear(sym->m_id))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4652:             IR::Opnd *const use =",
          "4653:                 FindNoImplicitCallUse(",
          "4654:                     instr,",
          "",
          "[Removed Lines]",
          "4651:             Assert(!considerSymAsRealUseInNoImplicitCallUses);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4659:                     });",
          "4660:             if(use)",
          "4661:             {",
          "4663:             }",
          "4664:         }",
          "4665:     }",
          "",
          "[Removed Lines]",
          "4662:                 considerSymAsRealUseInNoImplicitCallUses = arrayRegOpnd->HeadSegmentLengthSym();",
          "",
          "[Added Lines]",
          "4661:                 considerSymsAsRealUsesInNoImplicitCallUses->Set(arrayRegOpnd->HeadSegmentLengthSym()->m_id);",
          "",
          "---------------"
        ],
        "lib/Backend/BackwardPass.h||lib/Backend/BackwardPass.h": [
          "File: lib/Backend/BackwardPass.h -> lib/Backend/BackwardPass.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:     BVSparse<JitArenaAllocator> * intOverflowDoesNotMatterInRangeBySymId;",
          "192:     BVSparse<JitArenaAllocator> * candidateSymsRequiredToBeInt;",
          "193:     BVSparse<JitArenaAllocator> * candidateSymsRequiredToBeLossyInt;",
          "195:     bool intOverflowCurrentlyMattersInRange;",
          "196:     bool isCollectionPass;",
          "197:     enum class CollectionPassSubPhase",
          "",
          "[Removed Lines]",
          "194:     StackSym * considerSymAsRealUseInNoImplicitCallUses;",
          "",
          "[Added Lines]",
          "194:     BVSparse<JitArenaAllocator> * considerSymsAsRealUsesInNoImplicitCallUses;",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.cpp||lib/Backend/GlobOpt.cpp": [
          "File: lib/Backend/GlobOpt.cpp -> lib/Backend/GlobOpt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "13149:     arraySrcOpt.Optimize();",
          "13150: }",
          "13152: void",
          "13153: GlobOpt::CaptureNoImplicitCallUses(",
          "13154:     IR::Opnd *opnd,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13152: void",
          "13153: GlobOpt::ProcessNoImplicitCallArrayUses(IR::RegOpnd * baseOpnd, IR::ArrayRegOpnd * baseArrayOpnd, IR::Instr * instr, bool isLikelyJsArray, bool useNoMissingValues)",
          "13154: {",
          "13155:     if (isLikelyJsArray)",
          "13156:     {",
          "13165:         this->CaptureNoImplicitCallUses(baseOpnd, isLikelyJsArray);",
          "13166:     }",
          "13167:     else if (baseArrayOpnd && baseArrayOpnd->HeadSegmentLengthSym())",
          "13168:     {",
          "13172:         IR::RegOpnd *const headSegmentLengthOpnd =",
          "13173:             IR::RegOpnd::New(",
          "13174:                 baseArrayOpnd->HeadSegmentLengthSym(),",
          "13175:                 baseArrayOpnd->HeadSegmentLengthSym()->GetType(),",
          "13176:                 instr->m_func);",
          "13178:         const IR::AutoReuseOpnd autoReuseHeadSegmentLengthOpnd(headSegmentLengthOpnd, instr->m_func);",
          "13179:         this->CaptureNoImplicitCallUses(headSegmentLengthOpnd, false);",
          "13180:     }",
          "13181: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17038:     }",
          "17039: #endif",
          "17041:     RemoveMemOpSrcInstr(memopInstr, emitData->stElemInstr, emitData->block);",
          "17042:     if (!isMemset)",
          "17043:     {",
          "17044:         RemoveMemOpSrcInstr(memopInstr, ((MemCopyEmitData*)emitData)->ldElemInstr, emitData->block);",
          "17045:     }",
          "17046: }",
          "17048: bool",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17072:     Assert(noImplicitCallUsesToInsert->Count() == 0);",
          "17073:     bool isLikelyJsArray;",
          "17074:     if (emitData->stElemInstr->GetDst()->IsIndirOpnd())",
          "17075:     {",
          "17076:         baseOpnd = emitData->stElemInstr->GetDst()->AsIndirOpnd()->GetBaseOpnd();",
          "17077:         isLikelyJsArray = baseOpnd->GetValueType().IsLikelyArrayOrObjectWithArray();",
          "17078:         ProcessNoImplicitCallArrayUses(baseOpnd, baseOpnd->IsArrayRegOpnd() ? baseOpnd->AsArrayRegOpnd() : nullptr, emitData->stElemInstr, isLikelyJsArray, true);",
          "17079:     }",
          "17083:         if (((MemCopyEmitData*)emitData)->ldElemInstr->GetSrc1()->IsIndirOpnd())",
          "17084:         {",
          "17085:             baseOpnd = ((MemCopyEmitData*)emitData)->ldElemInstr->GetSrc1()->AsIndirOpnd()->GetBaseOpnd();",
          "17086:             isLikelyJsArray = baseOpnd->GetValueType().IsLikelyArrayOrObjectWithArray();",
          "17087:             ProcessNoImplicitCallArrayUses(baseOpnd, baseOpnd->IsArrayRegOpnd() ? baseOpnd->AsArrayRegOpnd() : nullptr, emitData->stElemInstr, isLikelyJsArray, true);",
          "17088:         }",
          "17091:     InsertNoImplicitCallUses(memopInstr);",
          "17092:     noImplicitCallUsesToInsert->Clear();",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOpt.h||lib/Backend/GlobOpt.h": [
          "File: lib/Backend/GlobOpt.h -> lib/Backend/GlobOpt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "721: private:",
          "722:     void                    CaptureNoImplicitCallUses(IR::Opnd *opnd, const bool usesNoMissingValuesInfo, IR::Instr *const includeCurrentInstr = nullptr);",
          "723:     void                    InsertNoImplicitCallUses(IR::Instr *const instr);",
          "724:     void                    PrepareLoopArrayCheckHoist();",
          "726: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "724:     void                    ProcessNoImplicitCallArrayUses(IR::RegOpnd * baseOpnd, IR::ArrayRegOpnd * baseArrayOpnd, IR::Instr * instr, bool isLikelyJsArray, bool useNoMissingValues);",
          "",
          "---------------"
        ],
        "lib/Backend/GlobOptArrays.cpp||lib/Backend/GlobOptArrays.cpp": [
          "File: lib/Backend/GlobOptArrays.cpp -> lib/Backend/GlobOptArrays.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1929:         baseArrayOpnd = nullptr;",
          "1930:     }",
          "1959:     const auto OnEliminated = [&](const Js::Phase phase, const char *const eliminatedLoad)",
          "1960:     {",
          "",
          "[Removed Lines]",
          "1932:     if (isLikelyJsArray)",
          "1933:     {",
          "1942:         globOpt->CaptureNoImplicitCallUses(baseOpnd, isLoad || isStore || instr->m_opcode == Js::OpCode::IsIn);",
          "1943:     }",
          "1944:     else if (baseArrayOpnd && baseArrayOpnd->HeadSegmentLengthSym())",
          "1945:     {",
          "1949:         IR::RegOpnd *const headSegmentLengthOpnd =",
          "1950:             IR::RegOpnd::New(",
          "1951:                 baseArrayOpnd->HeadSegmentLengthSym(),",
          "1952:                 baseArrayOpnd->HeadSegmentLengthSym()->GetType(),",
          "1953:                 instr->m_func);",
          "1955:         const IR::AutoReuseOpnd autoReuseHeadSegmentLengthOpnd(headSegmentLengthOpnd, instr->m_func);",
          "1956:         globOpt->CaptureNoImplicitCallUses(headSegmentLengthOpnd, false);",
          "1957:     }",
          "",
          "[Added Lines]",
          "1932:     globOpt->ProcessNoImplicitCallArrayUses(baseOpnd, baseArrayOpnd, instr, isLikelyJsArray, isLoad || isStore || instr->m_opcode == Js::OpCode::IsIn);",
          "",
          "---------------"
        ]
      }
    }
  ]
}