{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7a3f75f873954900ebd3321bfa67f17110d94889",
      "candidate_info": {
        "commit_hash": "7a3f75f873954900ebd3321bfa67f17110d94889",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/7a3f75f873954900ebd3321bfa67f17110d94889",
        "files": [
          "README.md",
          "package.json",
          "packages/table/src/table.js",
          "styles/table.scss"
        ],
        "message": "fix",
        "before_after_code_files": [
          "packages/table/src/table.js||packages/table/src/table.js",
          "styles/table.scss||styles/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:     })",
          "780:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "790:       if (!(this.rowId || rowOpts.keyField) && (this.checkboxOpts.reserve || this.checkboxOpts.checkRowKeys || this.radioOpts.reserve || this.radioOpts.checkRowKey || this.expandOpts.expandRowKeys || this.treeOpts.expandRowKeys)) {",
          "791:         warnLog('vxe.error.reqProp', ['row-config.keyField'])",
          "792:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:       if (this.rowId) {",
          "782:         warnLog('vxe.error.delProp', ['row-id', 'row-config.keyField'])",
          "783:       }",
          "784:       if (this.rowKey) {",
          "785:         warnLog('vxe.error.delProp', ['row-key', 'row-config.useKey'])",
          "786:       }",
          "787:       if (this.columnKey) {",
          "788:         warnLog('vxe.error.delProp', ['column-id', 'column-config.useKey'])",
          "789:       }",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "937:   }",
          "954:   .vxe-tree--line-wrapper {",
          "955:     position: relative;",
          "956:     display: block;",
          "",
          "[Removed Lines]",
          "940:   &.is--tree-line {",
          "941:     .vxe-body--row {",
          "942:       &:first-child {",
          "943:         .vxe-tree--line {",
          "944:           border-width: 0 0 1px 0;",
          "945:         }",
          "946:       }",
          "947:     }",
          "948:     .vxe-body--row {",
          "949:       .vxe-body--column {",
          "950:         background-image: none;",
          "951:       }",
          "952:     }",
          "953:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0d8e3ad2a732cdc8851a102fe15cb4905507eed",
      "candidate_info": {
        "commit_hash": "a0d8e3ad2a732cdc8851a102fe15cb4905507eed",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/a0d8e3ad2a732cdc8851a102fe15cb4905507eed",
        "files": [
          "package.json",
          "packages/edit/src/mixin.js",
          "packages/export/src/mixin.js",
          "packages/table/src/body.js",
          "packages/table/src/cell.js",
          "packages/table/src/columnInfo.js",
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "packages/table/src/util.js",
          "packages/toolbar/src/toolbar.js",
          "packages/v-x-e-table/src/commands.js",
          "packages/v-x-e-table/src/conf.js",
          "packages/v-x-e-table/src/formats.js",
          "packages/v-x-e-table/src/menus.js",
          "packages/validator/src/mixin.js",
          "styles/table.scss",
          "styles/tooltip.scss",
          "types/all.d.ts",
          "types/table.d.ts",
          "types/v-x-e-table/formats.d.ts",
          "types/v-x-e-table/index.d.ts",
          "types/v-x-e-table/setup.d.ts"
        ],
        "message": "\u4f18\u5316\u6811\u6e32\u67d3",
        "before_after_code_files": [
          "packages/edit/src/mixin.js||packages/edit/src/mixin.js",
          "packages/export/src/mixin.js||packages/export/src/mixin.js",
          "packages/table/src/body.js||packages/table/src/body.js",
          "packages/table/src/cell.js||packages/table/src/cell.js",
          "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "packages/table/src/util.js||packages/table/src/util.js",
          "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js",
          "packages/v-x-e-table/src/commands.js||packages/v-x-e-table/src/commands.js",
          "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js",
          "packages/v-x-e-table/src/formats.js||packages/v-x-e-table/src/formats.js",
          "packages/v-x-e-table/src/menus.js||packages/v-x-e-table/src/menus.js",
          "packages/validator/src/mixin.js||packages/validator/src/mixin.js",
          "styles/table.scss||styles/table.scss",
          "styles/tooltip.scss||styles/tooltip.scss",
          "types/all.d.ts||types/all.d.ts",
          "types/table.d.ts||types/table.d.ts",
          "types/v-x-e-table/formats.d.ts||types/v-x-e-table/formats.d.ts",
          "types/v-x-e-table/index.d.ts||types/v-x-e-table/index.d.ts",
          "types/v-x-e-table/setup.d.ts||types/v-x-e-table/setup.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ],
          "candidate": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ]
        }
      },
      "candidate_diff": {
        "packages/edit/src/mixin.js||packages/edit/src/mixin.js": [
          "File: packages/edit/src/mixin.js -> packages/edit/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: function insertTreeRow (_vm, newRecords, isAppend) {",
          "9:   const { tableFullTreeData, afterFullData, fullDataRowIdData, fullAllDataRowIdData, treeOpts } = _vm",
          "11:   const funcName = isAppend ? 'push' : 'unshift'",
          "12:   newRecords.forEach(item => {",
          "13:     const parentRowId = item[parentField]",
          "14:     const rowid = getRowid(_vm, item)",
          "16:     if (matchObj) {",
          "17:       const { item: parentRow } = matchObj",
          "18:       const parentRest = fullAllDataRowIdData[getRowid(_vm, parentRow)]",
          "19:       const parentLevel = parentRest ? parentRest.level : 0",
          "21:       if (!XEUtils.isArray(parentChilds)) {",
          "23:       }",
          "24:       parentChilds[funcName](item)",
          "25:       const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, $index: -1, items: parentChilds, parent, level: parentLevel + 1 }",
          "",
          "[Removed Lines]",
          "10:   const { rowField, parentField, children, mapChildren } = treeOpts",
          "15:     const matchObj = parentRowId ? XEUtils.findTree(tableFullTreeData, item => parentRowId === item[rowField], { children: mapChildren }) : null",
          "20:       let parentChilds = parentRow[children]",
          "22:         parentChilds = parentRow[children] = []",
          "",
          "[Added Lines]",
          "10:   const { rowField, parentField, mapChildrenField } = treeOpts",
          "11:   const childrenField = treeOpts.children || treeOpts.childrenField",
          "16:     const matchObj = parentRowId ? XEUtils.findTree(tableFullTreeData, item => parentRowId === item[rowField], { children: mapChildrenField }) : null",
          "21:       let parentChilds = parentRow[childrenField]",
          "23:         parentChilds = parentRow[childrenField] = []",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     _insertAt (records, row) {",
          "62:       const { tableFullTreeData, mergeList, afterFullData, editStore, tableFullData, treeConfig, fullDataRowIdData, fullAllDataRowIdData, treeOpts } = this",
          "64:       if (!XEUtils.isArray(records)) {",
          "65:         records = [records]",
          "66:       }",
          "",
          "[Removed Lines]",
          "63:       const { transform, rowField, mapChildren } = treeOpts",
          "",
          "[Added Lines]",
          "64:       const { transform, rowField, mapChildrenField } = treeOpts",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:         } else {",
          "101:           if (treeConfig && transform) {",
          "103:             if (matchObj) {",
          "104:               const { parent: parentRow } = matchObj",
          "105:               const parentChilds = matchObj.items",
          "",
          "[Removed Lines]",
          "102:             const matchObj = XEUtils.findTree(tableFullTreeData, item => row[rowField] === item[rowField], { children: mapChildren })",
          "",
          "[Added Lines]",
          "103:             const matchObj = XEUtils.findTree(tableFullTreeData, item => row[rowField] === item[rowField], { children: mapChildrenField })",
          "",
          "---------------"
        ],
        "packages/export/src/mixin.js||packages/export/src/mixin.js": [
          "File: packages/export/src/mixin.js -> packages/export/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: function hasTreeChildren ($xetable, row) {",
          "40:   const treeOpts = $xetable.treeOpts",
          "42: }",
          "44: function getSeq ($xetable, row, $rowIndex, column, $columnIndex) {",
          "",
          "[Removed Lines]",
          "41:   return row[treeOpts.children] && row[treeOpts.children].length > 0",
          "",
          "[Added Lines]",
          "41:   const childrenField = treeOpts.children || treeOpts.childrenField",
          "42:   return row[childrenField] && row[childrenField].length > 0",
          "",
          "---------------"
        ],
        "packages/table/src/body.js||packages/table/src/body.js": [
          "File: packages/table/src/body.js -> packages/table/src/body.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   if (slots && slots.line) {",
          "31:     return $xetable.callSlot(slots.line, params, h)",
          "32:   }",
          "34:     return [",
          "35:       h('div', {",
          "36:         class: 'vxe-tree--line-wrapper'",
          "",
          "[Removed Lines]",
          "33:   if (treeConfig && treeNode && treeOpts.line) {",
          "",
          "[Added Lines]",
          "33:   if (treeConfig && treeNode && (treeOpts.showLine || treeOpts.line)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:     fullAllDataRowIdData,",
          "313:     rowOpts",
          "314:   } = $xetable",
          "315:   const rows = []",
          "316:   tableData.forEach((row, $rowIndex) => {",
          "317:     const trOn = {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:   const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "350:       isNewRow = $xetable.isInsertByRow(row)",
          "351:     }",
          "352:     if (treeConfig && !scrollYLoad && !treeOpts.transform && treeExpandeds.length) {",
          "354:       isExpandTree = rowChildren && rowChildren.length && treeExpandeds.indexOf(row) > -1",
          "355:     }",
          "356:     rows.push(",
          "",
          "[Removed Lines]",
          "353:       rowChildren = row[treeOpts.children]",
          "",
          "[Added Lines]",
          "354:       rowChildren = row[childrenField]",
          "",
          "---------------"
        ],
        "packages/table/src/cell.js||packages/table/src/cell.js": [
          "File: packages/table/src/cell.js -> packages/table/src/cell.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:     const { treeOpts, treeExpandeds, treeLazyLoadeds } = $table",
          "208:     const { row, column, level } = params",
          "209:     const { slots } = column",
          "212:     let hasLazyChilds = false",
          "213:     let isAceived = false",
          "214:     let isLazyLoaded = false",
          "",
          "[Removed Lines]",
          "210:     const { children, hasChild, indent, lazy, trigger, iconLoaded, showIcon, iconOpen, iconClose } = treeOpts",
          "211:     const rowChilds = row[children]",
          "",
          "[Added Lines]",
          "210:     const { indent, lazy, trigger, iconLoaded, showIcon, iconOpen, iconClose } = treeOpts",
          "211:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "212:     const hasChildField = treeOpts.hasChild || treeOpts.hasChildField",
          "213:     const rowChilds = row[childrenField]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:       isAceived = $table.findRowIndexOf(treeExpandeds, row) > -1",
          "221:       if (lazy) {",
          "222:         isLazyLoaded = $table.findRowIndexOf(treeLazyLoadeds, row) > -1",
          "224:       }",
          "225:     }",
          "226:     if (!trigger || trigger === 'default') {",
          "",
          "[Removed Lines]",
          "223:         hasLazyChilds = row[hasChild]",
          "",
          "[Added Lines]",
          "225:         hasLazyChilds = row[hasChildField]",
          "",
          "---------------"
        ],
        "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js": [
          "File: packages/table/src/columnInfo.js -> packages/table/src/columnInfo.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:         warnLog('vxe.error.errConflicts', ['column.cell-render', 'column.edit-render'])",
          "29:       }",
          "30:       if (_vm.type === 'expand') {",
          "32:           errLog('vxe.error.errConflicts', ['tree-config.line', 'column.type=expand'])",
          "33:         }",
          "34:       }",
          "",
          "[Removed Lines]",
          "31:         if ($xetable.treeConfig && $xetable.treeOpts.line) {",
          "",
          "[Added Lines]",
          "31:         if ($xetable.treeConfig && ($xetable.treeOpts.showLine || $xetable.treeOpts.line)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:       if (formatter) {",
          "42:         if (XEUtils.isString(formatter)) {",
          "43:           const gFormatOpts = formats.get(formatter) || XEUtils[formatter]",
          "45:             errLog('vxe.error.notFormats', [formatter])",
          "46:           }",
          "47:         } else if (XEUtils.isArray(formatter)) {",
          "48:           const gFormatOpts = formats.get(formatter[0]) || XEUtils[formatter[0]]",
          "50:             errLog('vxe.error.notFormats', [formatter[0]])",
          "51:           }",
          "52:         }",
          "",
          "[Removed Lines]",
          "44:           if (!gFormatOpts || !XEUtils.isFunction(gFormatOpts.formatMethod)) {",
          "49:           if (!gFormatOpts || !XEUtils.isFunction(gFormatOpts.formatMethod)) {",
          "",
          "[Added Lines]",
          "44:           if (!gFormatOpts || !XEUtils.isFunction(gFormatOpts.cellFormatMethod)) {",
          "49:           if (!gFormatOpts || !XEUtils.isFunction(gFormatOpts.cellFormatMethod)) {",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:   loadTableData (datas) {",
          "359:     const { keepSource, treeConfig, treeOpts, editStore, scrollYStore, scrollXStore, lastScrollLeft, lastScrollTop, scrollYLoad: oldScrollYLoad, sXOpts, sYOpts } = this",
          "360:     let treeData = []",
          "361:     let fullData = datas ? datas.slice(0) : []",
          "362:     if (treeConfig) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:           if (!treeOpts.parentField) {",
          "370:             errLog('vxe.error.reqProp', ['table.tree-config.parentField'])",
          "371:           }",
          "374:           }",
          "377:           }",
          "380:           }",
          "381:           fullData.forEach(row => {",
          "384:             }",
          "385:           })",
          "386:         }",
          "387:         treeData = XEUtils.toArrayTree(fullData, {",
          "388:           key: treeOpts.rowField,",
          "389:           parentKey: treeOpts.parentField,",
          "392:         })",
          "393:         fullData = treeData.slice(0)",
          "394:       } else {",
          "",
          "[Removed Lines]",
          "372:           if (!treeOpts.children) {",
          "373:             errLog('vxe.error.reqProp', ['tree-config.children'])",
          "375:           if (!treeOpts.mapChildren) {",
          "376:             errLog('vxe.error.reqProp', ['tree-config.mapChildren'])",
          "378:           if (treeOpts.children === treeOpts.mapChildren) {",
          "379:             errLog('vxe.error.errConflicts', ['tree-config.children', 'tree-config.mapChildren'])",
          "382:             if (row[treeOpts.children] && row[treeOpts.children].length) {",
          "383:               warnLog('vxe.error.errConflicts', ['tree-config.transform', `row.${treeOpts.children}`])",
          "390:           children: treeOpts.children,",
          "391:           mapChildren: treeOpts.mapChildren",
          "",
          "[Added Lines]",
          "373:           if (!childrenField) {",
          "374:             errLog('vxe.error.reqProp', ['tree-config.childrenField'])",
          "376:           if (!treeOpts.mapChildrenField) {",
          "377:             errLog('vxe.error.reqProp', ['tree-config.mapChildrenField'])",
          "379:           if (childrenField === treeOpts.mapChildrenField) {",
          "380:             errLog('vxe.error.errConflicts', ['tree-config.childrenField', 'tree-config.mapChildrenField'])",
          "383:             if (row[childrenField] && row[childrenField].length) {",
          "384:               warnLog('vxe.error.errConflicts', ['tree-config.transform', `row.${childrenField}`])",
          "391:           children: childrenField,",
          "392:           mapChildren: treeOpts.mapChildrenField",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "592:   cacheRowMap (source) {",
          "593:     const { treeConfig, treeOpts, tableFullData, fullDataRowMap, fullAllDataRowMap, tableFullTreeData } = this",
          "594:     let { fullDataRowIdData, fullAllDataRowIdData } = this",
          "595:     const rowkey = getRowkey(this)",
          "596:     const isLazy = treeConfig && treeOpts.lazy",
          "597:     const handleCache = (row, index, items, path, parent, nodes) => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "597:     const hasChildField = treeOpts.hasChild || treeOpts.hasChildField",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "602:         rowid = getRowUniqueId()",
          "603:         XEUtils.set(row, rowkey, rowid)",
          "604:       }",
          "607:       }",
          "608:       const rest = { row, rowid, seq, index: treeConfig && parent ? -1 : index, _index: -1, $index: -1, items, parent, level }",
          "609:       if (source) {",
          "",
          "[Removed Lines]",
          "605:       if (isLazy && row[treeOpts.hasChild] && XEUtils.isUndefined(row[treeOpts.children])) {",
          "606:         row[treeOpts.children] = null",
          "",
          "[Added Lines]",
          "608:       if (isLazy && row[hasChildField] && XEUtils.isUndefined(row[childrenField])) {",
          "609:         row[childrenField] = null",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "651:   },",
          "652:   loadTreeChildren (row, childRecords) {",
          "653:     const { keepSource, tableSourceData, treeOpts, fullDataRowIdData, fullDataRowMap, fullAllDataRowMap, fullAllDataRowIdData } = this",
          "655:     const rest = fullAllDataRowIdData[getRowid(this, row)]",
          "656:     const parentLevel = rest ? rest.level : 0",
          "657:     return this.createData(childRecords).then((rows) => {",
          "",
          "[Removed Lines]",
          "654:     const { transform, children, mapChildren } = treeOpts",
          "",
          "[Added Lines]",
          "657:     const { transform, mapChildrenField } = treeOpts",
          "658:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "659:         const rowid = getRowid(this, row)",
          "660:         const matchObj = XEUtils.findTree(tableSourceData, (item) => rowid === getRowid(this, item), treeOpts)",
          "661:         if (matchObj) {",
          "663:         }",
          "664:       }",
          "665:       XEUtils.eachTree(rows, (childRow, index, items, path, parent, nodes) => {",
          "",
          "[Removed Lines]",
          "662:           matchObj.item[children] = XEUtils.clone(rows, true)",
          "",
          "[Added Lines]",
          "666:           matchObj.item[childrenField] = XEUtils.clone(rows, true)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "670:         fullAllDataRowIdData[rowid] = rest",
          "671:         fullAllDataRowMap.set(childRow, rest)",
          "672:       }, treeOpts)",
          "674:       if (transform) {",
          "676:       }",
          "677:       this.updateAfterDataIndex()",
          "678:       return rows",
          "",
          "[Removed Lines]",
          "673:       row[children] = rows",
          "675:         row[mapChildren] = rows",
          "",
          "[Added Lines]",
          "677:       row[childrenField] = rows",
          "679:         row[mapChildrenField] = rows",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "931:   defineField (records) {",
          "932:     const { radioOpts, checkboxOpts, treeConfig, treeOpts, expandOpts } = this",
          "933:     const rowkey = getRowkey(this)",
          "934:     if (!XEUtils.isArray(records)) {",
          "935:       records = [records || {}]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "937:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "956:           XEUtils.set(record, key, null)",
          "957:         }",
          "958:       })",
          "961:       }",
          "963:       if (eqEmptyValue(XEUtils.get(record, rowkey))) {",
          "",
          "[Removed Lines]",
          "959:       if (treeConfig && treeOpts.lazy && XEUtils.isUndefined(record[treeOpts.children])) {",
          "960:         record[treeOpts.children] = null",
          "",
          "[Added Lines]",
          "964:       if (treeConfig && treeOpts.lazy && XEUtils.isUndefined(record[childrenField])) {",
          "965:         record[childrenField] = null",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1157:   getCheckboxRecords (isFull) {",
          "1158:     const { tableFullData, afterFullData, treeConfig, treeOpts, checkboxOpts, tableFullTreeData, afterTreeFullData } = this",
          "1160:     const { checkField } = checkboxOpts",
          "1161:     const currTableData = isFull ? (transform ? tableFullTreeData : tableFullData) : (transform ? afterTreeFullData : afterFullData)",
          "1162:     let rowList = []",
          "1163:     if (checkField) {",
          "1164:       if (treeConfig) {",
          "1166:       } else {",
          "1167:         rowList = currTableData.filter(row => XEUtils.get(row, checkField))",
          "1168:       }",
          "1169:     } else {",
          "1170:       const { selectCheckboxRows } = this",
          "1171:       if (treeConfig) {",
          "1173:       } else {",
          "1174:         rowList = currTableData.filter(row => this.findRowIndexOf(selectCheckboxRows, row) > -1)",
          "1175:       }",
          "",
          "[Removed Lines]",
          "1159:     const { transform, children, mapChildren } = treeOpts",
          "1165:         rowList = XEUtils.filterTree(currTableData, row => XEUtils.get(row, checkField), { children: transform ? mapChildren : children })",
          "1172:         rowList = XEUtils.filterTree(currTableData, row => this.findRowIndexOf(selectCheckboxRows, row) > -1, { children: transform ? mapChildren : children })",
          "",
          "[Added Lines]",
          "1164:     const { transform, mapChildrenField } = treeOpts",
          "1166:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "1171:         rowList = XEUtils.filterTree(currTableData, row => XEUtils.get(row, checkField), { children: transform ? mapChildrenField : childrenField })",
          "1178:         rowList = XEUtils.filterTree(currTableData, row => this.findRowIndexOf(selectCheckboxRows, row) > -1, { children: transform ? mapChildrenField : childrenField })",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1190:           expandMaps.set(row, 1)",
          "1191:           fullData.push(row)",
          "1192:         }",
          "1194:       this.afterFullData = fullData",
          "1195:       this.updateScrollYStatus(fullData)",
          "1196:       return fullData",
          "",
          "[Removed Lines]",
          "1193:       }, { children: treeOpts.mapChildren })",
          "",
          "[Added Lines]",
          "1199:       }, { children: treeOpts.mapChildrenField })",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1315:   updateAfterDataIndex () {",
          "1316:     const { treeConfig, afterFullData, fullDataRowIdData, fullAllDataRowIdData, afterTreeFullData, treeOpts } = this",
          "1317:     if (treeConfig) {",
          "1318:       XEUtils.eachTree(afterTreeFullData, (row, index, items, path) => {",
          "1319:         const rowid = getRowid(this, row)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1323:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1327:           fullAllDataRowIdData[rowid] = rest",
          "1328:           fullDataRowIdData[rowid] = rest",
          "1329:         }",
          "1331:     } else {",
          "1332:       afterFullData.forEach((row, index) => {",
          "1333:         const rowid = getRowid(this, row)",
          "",
          "[Removed Lines]",
          "1330:       }, { children: treeOpts.transform ? treeOpts.mapChildren : treeOpts.children })",
          "",
          "[Added Lines]",
          "1337:       }, { children: treeOpts.transform ? treeOpts.mapChildrenField : childrenField })",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4143:   reloadTreeExpand (row) {",
          "4144:     const { treeOpts, treeLazyLoadeds } = this",
          "4147:       this.clearTreeExpandLoaded(row).then(() => {",
          "4148:         return this.handleAsyncTreeExpandChilds(row)",
          "4149:       }).then(() => {",
          "",
          "[Removed Lines]",
          "4145:     const { transform, lazy, hasChild } = treeOpts",
          "4146:     if (lazy && row[hasChild] && treeLazyLoadeds.indexOf(row) === -1) {",
          "",
          "[Added Lines]",
          "4152:     const { transform, lazy } = treeOpts",
          "4153:     const hasChildField = treeOpts.hasChild || treeOpts.hasChildField",
          "4154:     if (lazy && row[hasChildField] && treeLazyLoadeds.indexOf(row) === -1) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4253:   setAllTreeExpand (expanded) {",
          "4254:     const { tableFullData, treeOpts } = this",
          "4256:     const expandeds = []",
          "4257:     XEUtils.eachTree(tableFullData, row => {",
          "4259:       if (lazy || (rowChildren && rowChildren.length)) {",
          "4260:         expandeds.push(row)",
          "4261:       }",
          "",
          "[Removed Lines]",
          "4255:     const { lazy, children } = treeOpts",
          "4258:       const rowChildren = row[children]",
          "",
          "[Added Lines]",
          "4263:     const { lazy } = treeOpts",
          "4264:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "4267:       const rowChildren = row[childrenField]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4271:   handleBaseTreeExpand (rows, expanded) {",
          "4272:     const { fullAllDataRowMap, tableFullData, treeExpandeds, treeOpts, treeLazyLoadeds, treeNodeColumn } = this",
          "4274:     const result = []",
          "4275:     const columnIndex = this.getColumnIndex(treeNodeColumn)",
          "4276:     const $columnIndex = this.getVMColumnIndex(treeNodeColumn)",
          "",
          "[Removed Lines]",
          "4273:     const { reserve, lazy, hasChild, children, accordion, toggleMethod } = treeOpts",
          "",
          "[Added Lines]",
          "4282:     const { reserve, lazy, accordion, toggleMethod } = treeOpts",
          "4283:     const childrenField = treeOpts.children || treeOpts.childrenField",
          "4284:     const hasChildField = treeOpts.hasChild || treeOpts.hasChildField",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4287:       validRows.forEach(row => {",
          "4288:         if (treeExpandeds.indexOf(row) === -1) {",
          "4289:           const rest = fullAllDataRowMap.get(row)",
          "4292:           if (isLoad) {",
          "4293:             result.push(this.handleAsyncTreeExpandChilds(row))",
          "4294:           } else {",
          "4296:               treeExpandeds.push(row)",
          "4297:             }",
          "4298:           }",
          "",
          "[Removed Lines]",
          "4290:           const isLoad = lazy && row[hasChild] && !rest.treeLoaded && treeLazyLoadeds.indexOf(row) === -1",
          "4295:             if (row[children] && row[children].length) {",
          "",
          "[Added Lines]",
          "4301:           const isLoad = lazy && row[(hasChildField)] && !rest.treeLoaded && treeLazyLoadeds.indexOf(row) === -1",
          "4306:             if (row[childrenField] && row[childrenField].length) {",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4865:       const formatParams = { cellValue, row, rowIndex: this.getRowIndex(row), column, columnIndex: this.getColumnIndex(column) }",
          "4866:       if (XEUtils.isString(formatter)) {",
          "4867:         const gFormatOpts = formats.get(formatter)",
          "4869:       } else if (XEUtils.isArray(formatter)) {",
          "4870:         const gFormatOpts = formats.get(formatter[0])",
          "4872:       } else {",
          "4873:         cellLabel = formatter(formatParams)",
          "4874:       }",
          "",
          "[Removed Lines]",
          "4868:         cellLabel = gFormatOpts && gFormatOpts.formatMethod ? gFormatOpts.formatMethod(formatParams) : ''",
          "4871:         cellLabel = gFormatOpts && gFormatOpts.formatMethod ? gFormatOpts.formatMethod(formatParams, ...formatter.slice(1)) : ''",
          "",
          "[Added Lines]",
          "4879:         cellLabel = gFormatOpts && gFormatOpts.cellFormatMethod ? gFormatOpts.cellFormatMethod(formatParams) : ''",
          "4882:         cellLabel = gFormatOpts && gFormatOpts.cellFormatMethod ? gFormatOpts.cellFormatMethod(formatParams, ...formatter.slice(1)) : ''",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "775:       if (this.editConfig && editOpts.showStatus && !this.keepSource) {",
          "776:         warnLog('vxe.error.reqProp', ['keep-source'])",
          "777:       }",
          "779:         warnLog('vxe.error.reqProp', ['row-config.useKey | show-overflow'])",
          "780:       }",
          "781:       if (this.showFooter && !this.footerMethod) {",
          "",
          "[Removed Lines]",
          "778:       if (treeConfig && treeOpts.line && (!(this.rowKey || rowOpts.useKey) || !showOverflow)) {",
          "",
          "[Added Lines]",
          "778:       if (treeConfig && (treeOpts.showLine || treeOpts.line) && (!(this.rowKey || rowOpts.useKey) || !showOverflow)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "832:           return",
          "833:         }",
          "834:       }",
          "835:       if (this.mouseOpts.area && this.mouseOpts.selected) {",
          "836:         warnLog('vxe.error.errConflicts', ['mouse-config.area', 'mouse-config.selected'])",
          "837:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835:       if (this.treeConfig && treeOpts.children) {",
          "836:         warnLog('vxe.error.delProp', ['tree-config.children', 'tree-config.childrenField'])",
          "837:       }",
          "838:       if (this.treeConfig && treeOpts.line) {",
          "839:         warnLog('vxe.error.delProp', ['tree-config.line', 'tree-config.showLine'])",
          "840:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "876:       if (this.emptyRender && !XEUtils.isObject(this.emptyRender)) {",
          "877:         warnLog('vxe.error.errProp', [`table.empty-render=${this.emptyRender}`, 'table.empty-render={}'])",
          "878:       }",
          "882:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885:       if (this.editConfig && this.editOpts.activeMethod) {",
          "886:         warnLog('vxe.error.delProp', ['table.edit-config.activeMethod', 'table.edit-config.beforeEditMethod'])",
          "887:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1033:         'is--header': showHeader,",
          "1034:         'is--footer': showFooter,",
          "1035:         'is--group': isGroup,",
          "1037:         'is--fixed-left': leftList.length,",
          "1038:         'is--fixed-right': rightList.length,",
          "1039:         'is--animat': !!this.animat,",
          "",
          "[Removed Lines]",
          "1036:         'is--tree-line': treeConfig && treeOpts.line,",
          "",
          "[Added Lines]",
          "1042:         'is--tree-line': treeConfig && (treeOpts.showLine || treeOpts.line),",
          "",
          "---------------"
        ],
        "packages/table/src/util.js||packages/table/src/util.js": [
          "File: packages/table/src/util.js -> packages/table/src/util.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:     return count",
          "158:   }",
          "159:   const { $table } = params",
          "161:   if ($table.isTreeExpandByRow(prevRow)) {",
          "162:     for (let index = 0; index < rowChildren.length; index++) {",
          "163:       count += countTreeExpand(rowChildren[index], params)",
          "",
          "[Removed Lines]",
          "160:   const rowChildren = prevRow[$table.treeOpts.children]",
          "",
          "[Added Lines]",
          "160:   const { treeOpts } = $table",
          "161:   const childrenField = treeOpts.children || treeOpts.childrenField",
          "162:   const rowChildren = prevRow[childrenField]",
          "",
          "---------------"
        ],
        "packages/toolbar/src/toolbar.js||packages/toolbar/src/toolbar.js": [
          "File: packages/toolbar/src/toolbar.js -> packages/toolbar/src/toolbar.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:     }",
          "353:   },",
          "354:   created () {",
          "356:     this.$nextTick(() => {",
          "357:       const $xetable = this.fintTable()",
          "358:       const queryMethod = refreshOpts.queryMethod || refreshOpts.query",
          "",
          "[Removed Lines]",
          "355:     const { refresh, refreshOpts } = this",
          "",
          "[Added Lines]",
          "355:     const { refresh, refreshOpts, customOpts } = this",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "363:         $xetable.connect(this)",
          "364:       }",
          "365:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "366:         if (this.buttons) {",
          "367:           this.buttons.forEach(item => {",
          "368:             const { buttonRender } = item",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:         if (customOpts.isFooter) {",
          "367:           warnLog('vxe.error.notValidators', ['custom.isFooter', 'custom.showFooter'])",
          "368:         }",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/commands.js||packages/v-x-e-table/src/commands.js": [
          "File: packages/v-x-e-table/src/commands.js -> packages/v-x-e-table/src/commands.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   add (name, render) {",
          "21:     const conf = this.store[name]",
          "27:       }",
          "28:     }",
          "",
          "[Removed Lines]",
          "23:     if (XEUtils.isFunction(render)) {",
          "25:       render = {",
          "26:         commandMethod: render",
          "",
          "[Added Lines]",
          "23:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "24:       if (XEUtils.isFunction(render)) {",
          "25:         warnLog('vxe.error.delProp', ['callback', 'commandMethod'])",
          "26:         render = {",
          "27:           commandMethod: render",
          "28:         }",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js": [
          "File: packages/v-x-e-table/src/conf.js -> packages/v-x-e-table/src/conf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     treeConfig: {",
          "77:       rowField: 'id',",
          "78:       parentField: 'parentId',",
          "82:       indent: 20,",
          "83:       showIcon: true",
          "84:     },",
          "",
          "[Removed Lines]",
          "79:       children: 'children',",
          "80:       hasChild: 'hasChild',",
          "81:       mapChildren: '_X_ROW_CHILD',",
          "",
          "[Added Lines]",
          "79:       childrenField: 'children',",
          "80:       hasChildField: 'hasChild',",
          "81:       mapChildrenField: '_X_ROW_CHILD',",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/formats.js||packages/v-x-e-table/src/formats.js": [
          "File: packages/v-x-e-table/src/formats.js -> packages/v-x-e-table/src/formats.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   add (name, render) {",
          "21:     const conf = this.store[name]",
          "27:       }",
          "28:     }",
          "",
          "[Removed Lines]",
          "23:     if (XEUtils.isFunction(render)) {",
          "25:       render = {",
          "26:         formatMethod: render",
          "",
          "[Added Lines]",
          "23:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "24:       if (XEUtils.isFunction(render)) {",
          "25:         warnLog('vxe.error.delProp', ['callback', 'cellFormatMethod'])",
          "26:         render = {",
          "27:           cellFormatMethod: render",
          "28:         }",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/menus.js||packages/v-x-e-table/src/menus.js": [
          "File: packages/v-x-e-table/src/menus.js -> packages/v-x-e-table/src/menus.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:   add (name, render) {",
          "21:     const conf = this.store[name]",
          "27:       }",
          "28:     }",
          "",
          "[Removed Lines]",
          "23:     if (XEUtils.isFunction(render)) {",
          "25:       render = {",
          "26:         menuMethod: render",
          "",
          "[Added Lines]",
          "23:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "24:       if (XEUtils.isFunction(render)) {",
          "25:         warnLog('vxe.error.delProp', ['callback', 'menuMethod'])",
          "26:         render = {",
          "27:           menuMethod: render",
          "28:         }",
          "",
          "---------------"
        ],
        "packages/validator/src/mixin.js||packages/validator/src/mixin.js": [
          "File: packages/validator/src/mixin.js -> packages/validator/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     _fullValidate (rows, cb) {",
          "68:       return this.beginValidate(rows, cb, true)",
          "69:     },",
          "73:     _validate (rows, cb) {",
          "74:       return this.beginValidate(rows, cb)",
          "75:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "69:         if (XEUtils.isFunction(cb)) {",
          "70:           warnLog('vxe.error.notValidators', ['fullValidate(rows, callback)', 'fullValidate(rows)'])",
          "71:         }",
          "72:       }",
          "79:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "80:         if (XEUtils.isFunction(cb)) {",
          "81:           warnLog('vxe.error.notValidators', ['validate(rows, callback)', 'validate(rows)'])",
          "82:         }",
          "83:       }",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "1300:   }",
          "1301: }",
          "1304: .vxe-table--footer-wrapper {",
          "1305:   color: $vxe-table-footer-font-color;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1303: .vxe-table--tooltip-wrapper {",
          "1304:   &.vxe-table--valid-error {",
          "1305:     background-color: #f56c6c;",
          "1306:     color: #fff;",
          "1307:   }",
          "1308: }",
          "",
          "---------------"
        ],
        "styles/tooltip.scss||styles/tooltip.scss": [
          "File: styles/tooltip.scss -> styles/tooltip.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     }",
          "126:   }",
          "127: }",
          "",
          "[Removed Lines]",
          "130: .vxe-table--tooltip-wrapper {",
          "131:   &.vxe-table--valid-error {",
          "132:     background-color: #f56c6c;",
          "133:     color: #fff;",
          "134:   }",
          "135: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "types/all.d.ts||types/all.d.ts": [
          "File: types/all.d.ts -> types/all.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import Vue from 'vue'",
          "3: import { ModalController } from './modal'",
          "8: export interface VXETableClipboard {",
          "9:   text: string;",
          "",
          "[Removed Lines]",
          "4: import { VXETableSetupOptions, VXETableCore, VxeGlobalTranslate, VxeGlobalI18n } from './v-x-e-table'",
          "6: export function install(app: typeof Vue, options?: VXETableSetupOptions): void;",
          "",
          "[Added Lines]",
          "4: import { VXETableConfigOptions, VXETableCore, VxeGlobalTranslate, VxeGlobalI18n } from './v-x-e-table'",
          "6: export function install(app: typeof Vue, options?: VXETableConfigOptions): void;",
          "",
          "---------------"
        ],
        "types/table.d.ts||types/table.d.ts": [
          "File: types/table.d.ts -> types/table.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1392: export interface TableTreeConfig {",
          "1394:   indent?: number;",
          "1396:   expandAll?: boolean;",
          "1397:   expandRowKeys?: string[] | number[];",
          "1398:   accordion?: boolean;",
          "1399:   trigger?: 'default' | 'cell' | 'row' | '';",
          "1400:   lazy?: boolean;",
          "1402:   loadMethod?(params: { row: RowInfo }): Promise<any[]>;",
          "1403:   toggleMethod?(params: { expanded: boolean, row: RowInfo, column: ColumnInfo, columnIndex: number, $columnIndex: number }): boolean;",
          "1404:   showIcon?: boolean;",
          "1405:   iconOpen?: string;",
          "1406:   iconClose?: string;",
          "1407:   iconLoaded?: string;",
          "1408: }",
          "1409: export type TreeConfig = TableTreeConfig",
          "1411: export interface TreeOpts {",
          "1413:   indent: number;",
          "1414:   line?: boolean;",
          "1415:   expandAll?: boolean;",
          "",
          "[Removed Lines]",
          "1393:   children?: string;",
          "1395:   line?: boolean;",
          "1401:   hasChild?: string;",
          "1412:   children: string;",
          "",
          "[Added Lines]",
          "1393:   childrenField?: string;",
          "1395:   showLine?: boolean;",
          "1401:   hasChildField?: string;",
          "1412:   line?: boolean;",
          "1417:   hasChild: string;",
          "1422:   children?: string",
          "1427:   childrenField: string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1418:   trigger?: 'default' | 'cell' | 'row' | '';",
          "1419:   lazy?: boolean;",
          "1420:   hasChild: string;",
          "1421:   loadMethod?(params: { row: RowInfo }): Promise<any[]>;",
          "1422:   toggleMethod?(params: { expanded: boolean, row: RowInfo, column: ColumnInfo, columnIndex: number, $columnIndex: number }): boolean;",
          "1423:   showIcon: boolean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1436:   hasChildField: string;",
          "",
          "---------------"
        ],
        "types/v-x-e-table/formats.d.ts||types/v-x-e-table/formats.d.ts": [
          "File: types/v-x-e-table/formats.d.ts -> types/v-x-e-table/formats.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: export namespace VxeGlobalFormatsHandles {",
          "6:   export interface FormatsOptions {",
          "8:   }",
          "9:   export interface FormatMethodParams {",
          "10:     cellValue: any",
          "",
          "[Removed Lines]",
          "7:     formatMethod?: (params: FormatMethodParams, ...args: any[]) => string | number",
          "",
          "[Added Lines]",
          "7:     cellFormatMethod?: (params: FormatMethodParams, ...args: any[]) => string | number",
          "",
          "---------------"
        ],
        "types/v-x-e-table/index.d.ts||types/v-x-e-table/index.d.ts": [
          "File: types/v-x-e-table/index.d.ts -> types/v-x-e-table/index.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { VxeGlobalFormats } from './formats'",
          "10: import { VxeGlobalMenus } from './menus'",
          "11: import { VxeGlobalValidators } from './validators'",
          "",
          "[Removed Lines]",
          "12: import { VxeGlobalSetup } from './setup'",
          "",
          "[Added Lines]",
          "12: import { VxeGlobalConfigMethod } from './setup'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: export type VxeGlobalTranslate = (key: string, args?: any) => string;",
          "18: export type VxeGlobalUse = (plugin: VXETablePluginObject, ...options: any[]) => VXETableCore;",
          "21: export const interceptor: VxeGlobalInterceptor",
          "22: export const renderer: VxeGlobalRenderer",
          "23: export const commands: VxeGlobalCommands",
          "",
          "[Removed Lines]",
          "20: export const setup: VxeGlobalSetup",
          "",
          "[Added Lines]",
          "20: export const setup: VxeGlobalConfigMethod",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "56:   setup: VxeGlobalSetup;",
          "",
          "[Added Lines]",
          "56:   setup: VxeGlobalConfigMethod;",
          "",
          "---------------"
        ],
        "types/v-x-e-table/setup.d.ts||types/v-x-e-table/setup.d.ts": [
          "File: types/v-x-e-table/setup.d.ts -> types/v-x-e-table/setup.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:   [key: string]: any;",
          "6: }",
          "9:   size?: SizeType;",
          "10:   zIndex?: number;",
          "11:   version?: number;",
          "",
          "[Removed Lines]",
          "8: export interface VXETableSetupOptions {",
          "",
          "[Added Lines]",
          "8: export interface VXETableConfigOptions {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   [key: string]: any;",
          "40: }",
          "",
          "[Removed Lines]",
          "42: export interface VXETableGlobalConfig extends VXETableSetupOptions {",
          "43:   size: SizeType;",
          "44:   zIndex: number;",
          "45:   version: number;",
          "46:   emptyCell: string;",
          "47:   icon: {",
          "48:     [key: string]: string;",
          "49:   };",
          "50:   table: any;",
          "51:   grid: any;",
          "52:   export: {",
          "53:     types: {",
          "54:       [key: string]: 0 | 1 | 2;",
          "55:     }",
          "56:     [key: string]: any;",
          "57:   };",
          "58:   tooltip: DefaultOptions;",
          "59:   pager: any;",
          "60:   form: DefaultOptions;",
          "61:   input: DefaultOptions;",
          "62:   textarea: DefaultOptions;",
          "63:   select: DefaultOptions;",
          "64:   toolbar: any;",
          "65:   button: DefaultOptions;",
          "66:   radio: DefaultOptions;",
          "67:   checkbox: DefaultOptions;",
          "68:   switch: DefaultOptions;",
          "69:   modal: DefaultOptions;",
          "70:   list: DefaultOptions;",
          "71:   i18n(key: string, args?: any): string;",
          "72: }",
          "74: export type VxeGlobalSetup = (options?: VXETableSetupOptions) => VXETableGlobalConfig;",
          "",
          "[Added Lines]",
          "42: export type VxeGlobalConfigMethod = (options?: VXETableConfigOptions) => Required<VXETableConfigOptions>",
          "47: export type VXETableSetupOptions = VXETableConfigOptions",
          "51: export type VxeGlobalSetup = VxeGlobalConfigMethod;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64973bd7c90a63c7bc07d6588d6145a8e110bf7e",
      "candidate_info": {
        "commit_hash": "64973bd7c90a63c7bc07d6588d6145a8e110bf7e",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/64973bd7c90a63c7bc07d6588d6145a8e110bf7e",
        "files": [
          "package.json",
          "packages/table/src/methods.ts",
          "packages/table/src/table.ts"
        ],
        "message": "releases 3.10.14",
        "before_after_code_files": [
          "packages/table/src/methods.ts||packages/table/src/methods.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2415:           let colWidth = column.renderAutoWidth - paddingSize",
          "2416:           XEUtils.arrayEach(cellElList, (itemEl) => {",
          "2417:             const cellEl = itemEl as HTMLElement",
          "2419:             let titleWidth = 0",
          "2420:             if (`${thElem.tagName}`.toLowerCase() === 'th') {",
          "2421:               XEUtils.arrayEach(cellEl.children, (btnEl) => {",
          "2422:                 titleWidth += (btnEl as HTMLElement).offsetWidth + 1",
          "2423:               })",
          "2424:             } else {",
          "2426:               if (labelEl) {",
          "2427:                 titleWidth = labelEl.offsetWidth",
          "2428:               }",
          "",
          "[Removed Lines]",
          "2418:             const thElem = cellEl.parentNode as HTMLElement",
          "2425:               const labelEl = cellEl.firstChild as HTMLElement",
          "",
          "[Added Lines]",
          "2418:             const thElem = cellEl.parentElement as HTMLElement",
          "2425:               const labelEl = cellEl.firstElementChild as HTMLElement",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1249:           }, [",
          "1250:             h('div', {",
          "1251:               ref: 'refScrollYSpaceElem',",
          "1253:             })",
          "1254:           ])",
          "1255:         ])",
          "",
          "[Removed Lines]",
          "1252:               class: 'vxe-table--scroll-x-space'",
          "",
          "[Added Lines]",
          "1252:               class: 'vxe-table--scroll-y-space'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1572c82126bba1c0038481524dec9c19aae07a95",
      "candidate_info": {
        "commit_hash": "1572c82126bba1c0038481524dec9c19aae07a95",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/1572c82126bba1c0038481524dec9c19aae07a95",
        "files": [
          "helper/vetur/attributes.json",
          "helper/vetur/tags.json",
          "package.json",
          "packages/table/src/methods.js"
        ],
        "message": "fix #2104",
        "before_after_code_files": [
          "packages/table/src/methods.js||packages/table/src/methods.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "592:   cacheRowMap (source) {",
          "595:     const rowkey = getRowkey(this)",
          "596:     const isLazy = treeConfig && treeOpts.lazy",
          "597:     const handleCache = (row, index, items, path, parent, nodes) => {",
          "",
          "[Removed Lines]",
          "593:     const { treeConfig, treeOpts, tableFullData, fullDataRowMap, fullAllDataRowMap, tableFullTreeData } = this",
          "594:     let { fullDataRowIdData, fullAllDataRowIdData } = this",
          "",
          "[Added Lines]",
          "593:     const { treeConfig, treeOpts, tableFullData, fullDataRowMap, fullAllDataRowMap, tableFullTreeData, tableSourceData } = this",
          "594:     let { fullDataRowIdData, fullAllDataRowIdData, sourceDataRowIdData } = this",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "618:       fullDataRowMap.clear()",
          "619:     }",
          "620:     fullAllDataRowIdData = this.fullAllDataRowIdData = {}",
          "621:     fullAllDataRowMap.clear()",
          "622:     if (treeConfig) {",
          "623:       XEUtils.eachTree(tableFullTreeData, handleCache, treeOpts)",
          "624:     } else {",
          "625:       tableFullData.forEach(handleCache)",
          "626:     }",
          "627:   },",
          "628:   loadTreeChildren (row, childRecords) {",
          "629:     const { keepSource, tableSourceData, treeOpts, fullDataRowIdData, fullDataRowMap, fullAllDataRowMap, fullAllDataRowIdData } = this",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "621:     sourceDataRowIdData = this.sourceDataRowIdData = {}",
          "629:     const handleSourceRow = (row) => {",
          "630:       let rowid = getRowid(this, row)",
          "631:       if (eqEmptyValue(rowid)) {",
          "632:         rowid = getRowUniqueId()",
          "633:         XEUtils.set(row, rowkey, rowid)",
          "634:       }",
          "635:       sourceDataRowIdData[rowid] = {",
          "636:         row,",
          "637:         rowid",
          "638:       }",
          "639:     }",
          "641:     if (treeConfig && !treeOpts.transform) {",
          "642:       XEUtils.eachTree(tableSourceData, handleSourceRow, treeOpts)",
          "643:     } else {",
          "644:       tableSourceData.forEach(handleSourceRow)",
          "645:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1461:   showColumn (fieldOrColumn) {",
          "1462:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1464:       column.visible = true",
          "1465:       return this.handleCustom()",
          "1466:     }",
          "",
          "[Removed Lines]",
          "1463:     if (column & !column.visible) {",
          "",
          "[Added Lines]",
          "1482:     if (column && column.visible) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b5f124e1f173cfad78ae84720902743ad273f03",
      "candidate_info": {
        "commit_hash": "8b5f124e1f173cfad78ae84720902743ad273f03",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/8b5f124e1f173cfad78ae84720902743ad273f03",
        "files": [
          "package.json",
          "packages/table/render/index.ts",
          "packages/table/src/body.ts",
          "packages/table/src/props.ts",
          "packages/table/src/table.ts",
          "packages/ui/index.ts",
          "styles/components/table.scss"
        ],
        "message": "\u91cd\u6784v3\u7248\u672c",
        "before_after_code_files": [
          "packages/table/render/index.ts||packages/table/render/index.ts",
          "packages/table/src/body.ts||packages/table/src/body.ts",
          "packages/table/src/props.ts||packages/table/src/props.ts",
          "packages/table/src/table.ts||packages/table/src/table.ts",
          "packages/ui/index.ts||packages/ui/index.ts",
          "styles/components/table.scss||styles/components/table.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/render/index.ts||packages/table/render/index.ts": [
          "File: packages/table/render/index.ts -> packages/table/render/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "649:     tableFilterDefaultMethod: handleFilterMethod",
          "650:   },",
          "651:   VxeTextarea: {",
          "653:   },",
          "654:   VxeButton: {",
          "655:     renderTableDefault: buttonCellRender",
          "",
          "[Removed Lines]",
          "652:     tableAutoFocus: 'VxeTextarea'",
          "",
          "[Added Lines]",
          "652:     tableAutoFocus: 'textarea',",
          "653:     renderTableEdit: defaultEditRender",
          "",
          "---------------"
        ],
        "packages/table/src/body.ts||packages/table/src/body.ts": [
          "File: packages/table/src/body.ts -> packages/table/src/body.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:         'col--tree-node': treeNode,",
          "281:         'col--edit': isEdit,",
          "282:         'col--ellipsis': hasEllipsis,",
          "283:         'fixed--hidden': fixedHiddenColumn,",
          "284:         'col--dirty': isDirty,",
          "285:         'col--active': editConfig && isEdit && (actived.row === row && (actived.column === column || editOpts.mode === 'row')),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:         'col--height': !!rowOpts.height,",
          "",
          "---------------"
        ],
        "packages/table/src/props.ts||packages/table/src/props.ts": [
          "File: packages/table/src/props.ts -> packages/table/src/props.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { VxeUI } from '../../ui'",
          "3: const { getConfig } = VxeUI",
          "5: export default {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { PropType } from 'vue'",
          "4: import type { VxeTablePropTypes } from '../../../types'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:   height: [Number, String],",
          "15:   maxHeight: [Number, String],",
          "29:   loading: Boolean,",
          "47:   highlightCell: Boolean,",
          "",
          "[Removed Lines]",
          "13:   minHeight: { type: [Number, String], default: () => getConfig().table.minHeight },",
          "17:   resizable: { type: Boolean, default: () => getConfig().table.resizable },",
          "19:   stripe: { type: Boolean, default: () => getConfig().table.stripe },",
          "21:   border: { type: [Boolean, String], default: () => getConfig().table.border },",
          "23:   round: { type: Boolean, default: () => getConfig().table.round },",
          "25:   size: { type: String, default: () => getConfig().table.size || getConfig().size },",
          "27:   fit: { type: Boolean, default: () => getConfig().table.fit },",
          "31:   align: { type: String, default: () => getConfig().table.align },",
          "33:   headerAlign: { type: String, default: () => getConfig().table.headerAlign },",
          "35:   footerAlign: { type: String, default: () => getConfig().table.footerAlign },",
          "37:   showHeader: { type: Boolean, default: () => getConfig().table.showHeader },",
          "39:   highlightCurrentRow: { type: Boolean, default: () => getConfig().table.highlightCurrentRow },",
          "41:   highlightHoverRow: { type: Boolean, default: () => getConfig().table.highlightHoverRow },",
          "43:   highlightCurrentColumn: { type: Boolean, default: () => getConfig().table.highlightCurrentColumn },",
          "45:   highlightHoverColumn: { type: Boolean, default: () => getConfig().table.highlightHoverColumn },",
          "",
          "[Added Lines]",
          "16:   minHeight: {",
          "17:     type: [Number, String],",
          "18:     default: () => getConfig().table.minHeight",
          "19:   },",
          "23:   resizable: {",
          "24:     type: Boolean,",
          "25:     default: () => getConfig().table.resizable",
          "26:   },",
          "28:   stripe: {",
          "29:     type: Boolean,",
          "30:     default: () => getConfig().table.stripe",
          "31:   },",
          "33:   border: {",
          "34:     type: [Boolean, String],",
          "35:     default: () => getConfig().table.border",
          "36:   },",
          "38:   padding: {",
          "39:     type: Boolean as PropType<VxeTablePropTypes.Padding>,",
          "40:     default: () => getConfig().table.padding",
          "41:   },",
          "43:   round: {",
          "44:     type: Boolean,",
          "45:     default: () => getConfig().table.round",
          "46:   },",
          "48:   size: {",
          "49:     type: String,",
          "50:     default: () => getConfig().table.size || getConfig().size",
          "51:   },",
          "53:   fit: {",
          "54:     type: Boolean,",
          "55:     default: () => getConfig().table.fit",
          "56:   },",
          "60:   align: {",
          "61:     type: String,",
          "62:     default: () => getConfig().table.align",
          "63:   },",
          "65:   headerAlign: {",
          "66:     type: String,",
          "67:     default: () => getConfig().table.headerAlign",
          "68:   },",
          "70:   footerAlign: {",
          "71:     type: String,",
          "72:     default: () => getConfig().table.footerAlign",
          "73:   },",
          "75:   showHeader: {",
          "76:     type: Boolean,",
          "77:     default: () => getConfig().table.showHeader",
          "78:   },",
          "80:   highlightCurrentRow: {",
          "81:     type: Boolean,",
          "82:     default: () => getConfig().table.highlightCurrentRow",
          "83:   },",
          "85:   highlightHoverRow: {",
          "86:     type: Boolean,",
          "87:     default: () => getConfig().table.highlightHoverRow",
          "88:   },",
          "90:   highlightCurrentColumn: {",
          "91:     type: Boolean,",
          "92:     default: () => getConfig().table.highlightCurrentColumn",
          "93:   },",
          "95:   highlightHoverColumn: {",
          "96:     type: Boolean,",
          "97:     default: () => getConfig().table.highlightHoverColumn",
          "98:   },",
          "",
          "---------------"
        ],
        "packages/table/src/table.ts||packages/table/src/table.ts": [
          "File: packages/table/src/table.ts -> packages/table/src/table.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1076:         'is--fixed-left': leftList.length,",
          "1077:         'is--fixed-right': rightList.length,",
          "1078:         'is--animat': !!this.animat,",
          "1079:         'is--round': this.round,",
          "1080:         'is--stripe': !treeConfig && stripe,",
          "1081:         'is--loading': currLoading,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1079:         'is--padding': this.padding,",
          "",
          "---------------"
        ],
        "packages/ui/index.ts||packages/ui/index.ts": [
          "File: packages/ui/index.ts -> packages/ui/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     animat: true,",
          "18:     delayHover: 250,",
          "19:     autoResize: true,",
          "20:     minHeight: 144,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:     padding: true,",
          "",
          "---------------"
        ],
        "styles/components/table.scss||styles/components/table.scss": [
          "File: styles/components/table.scss -> styles/components/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:     }",
          "131:   }",
          "132: }",
          "134: .vxe-table--checkbox-range,",
          "135: .vxe-table--cell-main-area,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: .vxe-body--column {",
          "134:   &.col--height {",
          "135:     & > .vxe-cell {",
          "136:       height: 100%;",
          "137:       & > .vxe-textarea,",
          "138:       & > .vxe-default-textarea {",
          "139:         height: 100%;",
          "140:       }",
          "141:     }",
          "142:   }",
          "143:   .vxe-cell--label {",
          "144:     &.is--textarea {",
          "145:       white-space: pre-line;",
          "146:     }",
          "147:   }",
          "148: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:   .vxe-cell--edit-icon,",
          "462:   .vxe-cell-title-prefix-icon,",
          "463:   .vxe-cell-title-suffix-icon {",
          "465:   }",
          "466:   .vxe-cell-title-prefix-icon,",
          "467:   .vxe-cell-title-suffix-icon {",
          "",
          "[Removed Lines]",
          "464:     padding-right: 0.2em;",
          "",
          "[Added Lines]",
          "480:     padding: 0.2em;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "678:       }",
          "679:     }",
          "680:   }",
          "681:   .vxe-header--column,",
          "682:   .vxe-body--column,",
          "683:   .vxe-footer--column {",
          "684:     position: relative;",
          "685:     line-height: var(--vxe-ui-table-row-line-height);",
          "686:     text-align: left;",
          "690:     &.col--current {",
          "691:       background-color: var(--vxe-ui-table-column-current-background-color);",
          "",
          "[Removed Lines]",
          "687:     &:not(.col--ellipsis) {",
          "688:       padding: var(--vxe-ui-table-column-padding-default);",
          "689:     }",
          "",
          "[Added Lines]",
          "697:   &.is--padding {",
          "698:     .vxe-body--column {",
          "699:       &:not(.col--ellipsis) {",
          "700:         padding: var(--vxe-ui-table-column-padding-default);",
          "701:       }",
          "702:     }",
          "703:   }",
          "704:   .vxe-header--column,",
          "705:   .vxe-footer--column {",
          "706:     &:not(.col--ellipsis) {",
          "707:       padding: var(--vxe-ui-table-column-padding-default);",
          "708:     }",
          "709:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "883:       }",
          "884:     }",
          "885:   }",
          "886:   .vxe-cell {",
          "887:     white-space: pre-line;",
          "888:     word-break: break-all;",
          "891:   }",
          "",
          "[Removed Lines]",
          "889:     padding-left: var(--vxe-ui-table-cell-padding-left);",
          "890:     padding-right: var(--vxe-ui-table-cell-padding-right);",
          "",
          "[Added Lines]",
          "934:   &.is--padding {",
          "935:     .vxe-cell {",
          "936:       padding-left: var(--vxe-ui-table-cell-padding-left);",
          "937:       padding-right: var(--vxe-ui-table-cell-padding-right);",
          "938:     }",
          "939:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1158:           text-overflow: ellipsis;",
          "1159:           white-space: nowrap;",
          "1160:         }",
          "1161:       }",
          "1164:       }",
          "1165:     }",
          "1166:   }",
          "",
          "[Removed Lines]",
          "1162:       & > .vxe-cell {",
          "1163:         max-height: var(--vxe-ui-table-row-height-default);",
          "",
          "[Added Lines]",
          "1214:         &.col--height {",
          "1215:           & > .vxe-cell {",
          "1216:             overflow: auto;",
          "1217:           }",
          "1218:         }",
          "1220:       &:not(.col--height) {",
          "1221:         & > .vxe-cell {",
          "1222:           max-height: var(--vxe-ui-table-row-height-default);",
          "1223:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1170:     .vxe-footer--column {",
          "1171:       &.col--ellipsis {",
          "1172:         @extend %MediumColumnHeight;",
          "1175:         }",
          "1176:       }",
          "1177:     }",
          "",
          "[Removed Lines]",
          "1173:         & > .vxe-cell {",
          "1174:           max-height: var(--vxe-ui-table-row-height-medium);",
          "",
          "[Added Lines]",
          "1233:         &:not(.col--height) {",
          "1234:           & > .vxe-cell {",
          "1235:             max-height: var(--vxe-ui-table-row-height-medium);",
          "1236:           }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1188:     .vxe-footer--column {",
          "1189:       &.col--ellipsis {",
          "1190:         @extend %SmallColumnHeight;",
          "1193:         }",
          "1194:       }",
          "1195:     }",
          "",
          "[Removed Lines]",
          "1191:         & > .vxe-cell {",
          "1192:           max-height: var(--vxe-ui-table-row-height-small);",
          "",
          "[Added Lines]",
          "1253:         &:not(.col--height) {",
          "1254:           & > .vxe-cell {",
          "1255:             max-height: var(--vxe-ui-table-row-height-small);",
          "1256:           }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1206:     .vxe-footer--column {",
          "1207:       &.col--ellipsis {",
          "1208:         @extend %MiniColumnHeight;",
          "1211:         }",
          "1212:       }",
          "1213:     }",
          "",
          "[Removed Lines]",
          "1209:         & > .vxe-cell {",
          "1210:           max-height: var(--vxe-ui-table-row-height-mini);",
          "",
          "[Added Lines]",
          "1273:         &:not(.col--height) {",
          "1274:           & > .vxe-cell {",
          "1275:             max-height: var(--vxe-ui-table-row-height-mini);",
          "1276:           }",
          "",
          "---------------"
        ]
      }
    }
  ]
}