{
  "cve_id": "CVE-2018-25023",
  "cve_desc": "An issue was discovered in the smallvec crate before 0.6.13 for Rust. It can create an uninitialized value of any type, including a reference type.",
  "repo": "servo/rust-smallvec",
  "patch_hash": "e64afc8c473d43e375ab42bd33db2d0d4ac4e41b",
  "patch_info": {
    "commit_hash": "e64afc8c473d43e375ab42bd33db2d0d4ac4e41b",
    "repo": "servo/rust-smallvec",
    "commit_url": "https://github.com/servo/rust-smallvec/commit/e64afc8c473d43e375ab42bd33db2d0d4ac4e41b",
    "files": [
      "Cargo.toml",
      "lib.rs"
    ],
    "message": "Use MaybeUninit for storage of inline items.\n\nThis is a backport of #162 to the smallvec 0.6 branch. To avoid bumping the\nminimum Rust version, the `maybe-uninit` crate is used in place of\n`std::mem::MaybeUninit`.  To avoid breaking changes, the `Array::ptr` and\n`ptr_mut` methods are retained but are no longer used, and the API to\n`from_buf_and_len_unchecked` is unchanged.",
    "before_after_code_files": [
      "lib.rs||lib.rs"
    ]
  },
  "patch_diff": {
    "lib.rs||lib.rs": [
      "File: lib.rs -> lib.rs",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: #[cfg(feature = \"serde\")]",
      "46: extern crate serde;",
      "48: #[cfg(not(feature = \"std\"))]",
      "49: mod std {",
      "50:     pub use core::*;",
      "51: }",
      "53: use std::borrow::{Borrow, BorrowMut};",
      "54: use std::cmp;",
      "55: use std::fmt;",
      "56: use std::hash::{Hash, Hasher};",
      "57: use std::iter::{IntoIterator, FromIterator, repeat};",
      "58: use std::mem;",
      "60: use std::ops;",
      "61: use std::ptr;",
      "62: use std::slice;",
      "",
      "[Removed Lines]",
      "59: use std::mem::ManuallyDrop;",
      "",
      "[Added Lines]",
      "48: extern crate maybe_uninit;",
      "55: use maybe_uninit::MaybeUninit;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "276: #[cfg(feature = \"union\")]",
      "277: union SmallVecData<A: Array> {",
      "279:     heap: (*mut A::Item, usize),",
      "280: }",
      "282: #[cfg(feature = \"union\")]",
      "283: impl<A: Array> SmallVecData<A> {",
      "284:     #[inline]",
      "287:     }",
      "288:     #[inline]",
      "291:     }",
      "292:     #[inline]",
      "295:     }",
      "296:     #[inline]",
      "298:     #[inline]",
      "299:     unsafe fn heap(&self) -> (*mut A::Item, usize) {",
      "300:         self.heap",
      "",
      "[Removed Lines]",
      "278:     inline: ManuallyDrop<A>,",
      "285:     unsafe fn inline(&self) -> &A {",
      "286:         &self.inline",
      "289:     unsafe fn inline_mut(&mut self) -> &mut A {",
      "290:         &mut self.inline",
      "293:     fn from_inline(inline: A) -> SmallVecData<A> {",
      "294:         SmallVecData { inline: ManuallyDrop::new(inline) }",
      "297:     unsafe fn into_inline(self) -> A { ManuallyDrop::into_inner(self.inline) }",
      "",
      "[Added Lines]",
      "281:     inline: MaybeUninit<A>,",
      "288:     unsafe fn inline(&self) -> *const A::Item {",
      "289:         self.inline.as_ptr() as *const A::Item",
      "292:     unsafe fn inline_mut(&mut self) -> *mut A::Item {",
      "293:         self.inline.as_mut_ptr() as *mut A::Item",
      "296:     fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {",
      "297:         SmallVecData { inline }",
      "300:     unsafe fn into_inline(self) -> MaybeUninit<A> {",
      "301:         self.inline",
      "302:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "312: #[cfg(not(feature = \"union\"))]",
      "313: enum SmallVecData<A: Array> {",
      "315:     Heap((*mut A::Item, usize)),",
      "316: }",
      "318: #[cfg(not(feature = \"union\"))]",
      "319: impl<A: Array> SmallVecData<A> {",
      "320:     #[inline]",
      "322:         match *self {",
      "324:             _ => debug_unreachable!(),",
      "325:         }",
      "326:     }",
      "327:     #[inline]",
      "329:         match *self {",
      "331:             _ => debug_unreachable!(),",
      "332:         }",
      "333:     }",
      "334:     #[inline]",
      "337:     }",
      "338:     #[inline]",
      "340:         match self {",
      "342:             _ => debug_unreachable!(),",
      "343:         }",
      "344:     }",
      "",
      "[Removed Lines]",
      "314:     Inline(ManuallyDrop<A>),",
      "321:     unsafe fn inline(&self) -> &A {",
      "323:             SmallVecData::Inline(ref a) => a,",
      "328:     unsafe fn inline_mut(&mut self) -> &mut A {",
      "330:             SmallVecData::Inline(ref mut a) => a,",
      "335:     fn from_inline(inline: A) -> SmallVecData<A> {",
      "336:         SmallVecData::Inline(ManuallyDrop::new(inline))",
      "339:     unsafe fn into_inline(self) -> A {",
      "341:             SmallVecData::Inline(a) => ManuallyDrop::into_inner(a),",
      "",
      "[Added Lines]",
      "319:     Inline(MaybeUninit<A>),",
      "326:     unsafe fn inline(&self) -> *const A::Item {",
      "328:             SmallVecData::Inline(ref a) => a.as_ptr() as *const A::Item,",
      "333:     unsafe fn inline_mut(&mut self) -> *mut A::Item {",
      "335:             SmallVecData::Inline(ref mut a) => a.as_mut_ptr() as *mut A::Item,",
      "340:     fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {",
      "341:         SmallVecData::Inline(inline)",
      "344:     unsafe fn into_inline(self) -> MaybeUninit<A> {",
      "346:             SmallVecData::Inline(a) => a,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "404:     #[inline]",
      "405:     pub fn new() -> SmallVec<A> {",
      "411:         }",
      "412:     }",
      "",
      "[Removed Lines]",
      "406:         unsafe {",
      "407:             SmallVec {",
      "408:                 capacity: 0,",
      "409:                 data: SmallVecData::from_inline(mem::uninitialized()),",
      "410:             }",
      "",
      "[Added Lines]",
      "413:         assert!(",
      "414:             mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()",
      "415:                 && mem::align_of::<A>() >= mem::align_of::<A::Item>()",
      "416:         );",
      "417:         SmallVec {",
      "418:             capacity: 0,",
      "419:             data: SmallVecData::from_inline(MaybeUninit::uninit()),",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "447:     pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {",
      "448:         if vec.capacity() <= A::size() {",
      "449:             unsafe {",
      "451:                 let len = vec.len();",
      "452:                 vec.set_len(0);",
      "455:                 SmallVec {",
      "456:                     capacity: len,",
      "",
      "[Removed Lines]",
      "450:                 let mut data = SmallVecData::<A>::from_inline(mem::uninitialized());",
      "453:                 ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut().ptr_mut(), len);",
      "",
      "[Added Lines]",
      "459:                 let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());",
      "462:                 ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "483:     pub fn from_buf(buf: A) -> SmallVec<A> {",
      "484:         SmallVec {",
      "485:             capacity: A::size(),",
      "487:         }",
      "488:     }",
      "",
      "[Removed Lines]",
      "486:             data: SmallVecData::from_inline(buf),",
      "",
      "[Added Lines]",
      "495:             data: SmallVecData::from_inline(MaybeUninit::new(buf)),",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "523:     pub unsafe fn from_buf_and_len_unchecked(buf: A, len: usize) -> SmallVec<A> {",
      "524:         SmallVec {",
      "525:             capacity: len,",
      "527:         }",
      "528:     }",
      "",
      "[Removed Lines]",
      "526:             data: SmallVecData::from_inline(buf),",
      "",
      "[Added Lines]",
      "535:             data: SmallVecData::from_inline(MaybeUninit::new(buf)),",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "571:                 let (ptr, len) = self.data.heap();",
      "572:                 (ptr, len, self.capacity)",
      "573:             } else {",
      "575:             }",
      "576:         }",
      "577:     }",
      "",
      "[Removed Lines]",
      "574:                 (self.data.inline().ptr(), self.capacity, A::size())",
      "",
      "[Added Lines]",
      "583:                 (self.data.inline(), self.capacity, A::size())",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "584:                 let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();",
      "585:                 (ptr, len_ptr, self.capacity)",
      "586:             } else {",
      "588:             }",
      "589:         }",
      "590:     }",
      "",
      "[Removed Lines]",
      "587:                 (self.data.inline_mut().ptr_mut(), &mut self.capacity, A::size())",
      "",
      "[Added Lines]",
      "596:                 (self.data.inline_mut(), &mut self.capacity, A::size())",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "651:                 if unspilled {",
      "652:                     return;",
      "653:                 }",
      "656:                 self.capacity = len;",
      "657:             } else if new_cap != cap {",
      "658:                 let mut vec = Vec::with_capacity(new_cap);",
      "",
      "[Removed Lines]",
      "654:                 self.data = SmallVecData::from_inline(mem::uninitialized());",
      "655:                 ptr::copy_nonoverlapping(ptr, self.data.inline_mut().ptr_mut(), len);",
      "",
      "[Added Lines]",
      "663:                 self.data = SmallVecData::from_inline(MaybeUninit::uninit());",
      "664:                 ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "717:         if self.inline_size() >= len {",
      "718:             unsafe {",
      "719:                 let (ptr, len) = self.data.heap();",
      "722:                 deallocate(ptr, self.capacity);",
      "723:                 self.capacity = len;",
      "724:             }",
      "",
      "[Removed Lines]",
      "720:                 self.data = SmallVecData::from_inline(mem::uninitialized());",
      "721:                 ptr::copy_nonoverlapping(ptr, self.data.inline_mut().ptr_mut(), len);",
      "",
      "[Added Lines]",
      "729:                 self.data = SmallVecData::from_inline(MaybeUninit::uninit());",
      "730:                 ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "883:             unsafe {",
      "884:                 let data = ptr::read(&self.data);",
      "885:                 mem::forget(self);",
      "887:             }",
      "888:         }",
      "889:     }",
      "",
      "[Removed Lines]",
      "886:                 Ok(data.into_inline())",
      "",
      "[Added Lines]",
      "895:                 Ok(data.into_inline().assume_init())",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "1041:             SmallVec {",
      "1042:                 capacity: len,",
      "1043:                 data: SmallVecData::from_inline(unsafe {",
      "1046:                     data",
      "1047:                 })",
      "1048:             }",
      "",
      "[Removed Lines]",
      "1044:                     let mut data: A = mem::uninitialized();",
      "1045:                     ptr::copy_nonoverlapping(slice.as_ptr(), data.ptr_mut(), len);",
      "",
      "[Added Lines]",
      "1053:                     let mut data: MaybeUninit<A> = MaybeUninit::uninit();",
      "1054:                     ptr::copy_nonoverlapping(",
      "1055:                         slice.as_ptr(),",
      "1056:                         data.as_mut_ptr() as *mut A::Item,",
      "1057:                         len,",
      "1058:                     );",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1587:             unsafe impl<T> Array for [T; $size] {",
      "1588:                 type Item = T;",
      "1589:                 fn size() -> usize { $size }",
      "1592:             }",
      "1593:         )+",
      "1594:     }",
      "",
      "[Removed Lines]",
      "1590:                 fn ptr(&self) -> *const T { self.as_ptr() }",
      "1591:                 fn ptr_mut(&mut self) -> *mut T { self.as_mut_ptr() }",
      "",
      "[Added Lines]",
      "1603:                 fn ptr(&self) -> *const T { unimplemented!() }",
      "1604:                 fn ptr_mut(&mut self) -> *mut T { unimplemented!() }",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "1889:         assert_eq!(&v.iter().map(|v| *v).collect::<Vec<_>>(), &[0, 5, 6, 1, 2, 3]);",
      "1890:     }",
      "1893:     #[test]",
      "1895:     fn test_insert_many_panic() {",
      "",
      "[Removed Lines]",
      "1892:     #[cfg(feature = \"std\")]",
      "",
      "[Added Lines]",
      "1905:     #[cfg(all(feature = \"std\", not(miri)))] // Miri currently does not support unwinding",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "26ea2caa43eabe5e3fe43b2ef4f3c60c757745c9",
      "candidate_info": {
        "commit_hash": "26ea2caa43eabe5e3fe43b2ef4f3c60c757745c9",
        "repo": "servo/rust-smallvec",
        "commit_url": "https://github.com/servo/rust-smallvec/commit/26ea2caa43eabe5e3fe43b2ef4f3c60c757745c9",
        "files": [
          ".travis.yml",
          "scripts/run_miri.sh"
        ],
        "message": "Run miri in CI",
        "before_after_code_files": [
          "scripts/run_miri.sh||scripts/run_miri.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/servo/rust-smallvec/pull/180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scripts/run_miri.sh||scripts/run_miri.sh": [
          "File: scripts/run_miri.sh -> scripts/run_miri.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/bash",
          "3: set -ex",
          "5: # Clean out our target dir, which may have artifacts compiled by a version of",
          "6: # rust different from the one we're about to download.",
          "7: cargo clean",
          "9: # Install and run the latest version of nightly where miri built successfully.",
          "10: # Taken from: https://github.com/rust-lang/miri#running-miri-on-ci",
          "12: MIRI_NIGHTLY=nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)",
          "13: echo \"Installing latest nightly with Miri: $MIRI_NIGHTLY\"",
          "14: rustup default \"$MIRI_NIGHTLY\"",
          "16: rustup component add miri",
          "17: cargo miri setup",
          "19: cargo miri test --verbose -- -- -Zunstable-options --exclude-should-panic",
          "20: cargo miri test --verbose --features union -- -- -Zunstable-options --exclude-should-panic",
          "21: cargo miri test --verbose --all-features -- -- -Zunstable-options --exclude-should-panic",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58d5416fab7cae3d1f87f89a0afd91ffa1ccb7ee",
      "candidate_info": {
        "commit_hash": "58d5416fab7cae3d1f87f89a0afd91ffa1ccb7ee",
        "repo": "servo/rust-smallvec",
        "commit_url": "https://github.com/servo/rust-smallvec/commit/58d5416fab7cae3d1f87f89a0afd91ffa1ccb7ee",
        "files": [
          "lib.rs"
        ],
        "message": "Add a test for #139.\n\nWorks now on trunk.\n\nCloses #139",
        "before_after_code_files": [
          "lib.rs||lib.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/servo/rust-smallvec/pull/180"
        ],
        "olp_code_files": {
          "patch": [
            "lib.rs||lib.rs"
          ],
          "candidate": [
            "lib.rs||lib.rs"
          ]
        }
      },
      "candidate_diff": {
        "lib.rs||lib.rs": [
          "File: lib.rs -> lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2351:         assert_eq!(v[..], ['a']);",
          "2352:     }",
          "2354:     #[test]",
          "2355:     fn grow_spilled_same_size() {",
          "2356:         let mut v: SmallVec<[u8; 2]> = SmallVec::new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2355:     #[test]",
          "2356:     fn uninhabited() {",
          "2357:         enum Void {}",
          "2358:         let _sv = SmallVec::<[Void; 8]>::new();",
          "2359:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6bfa840b87fc9ea305572f94884e27c83f7bf5a",
      "candidate_info": {
        "commit_hash": "d6bfa840b87fc9ea305572f94884e27c83f7bf5a",
        "repo": "servo/rust-smallvec",
        "commit_url": "https://github.com/servo/rust-smallvec/commit/d6bfa840b87fc9ea305572f94884e27c83f7bf5a",
        "files": [
          "lib.rs"
        ],
        "message": "Update union code to use ManuallyDrop\n\nA Rust breaking change to the untagged_unions feature, means that no\nunion fields may have destructors, so we need use ManuallyDrop also\naround the inline union field.",
        "before_after_code_files": [
          "lib.rs||lib.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib.rs||lib.rs"
          ],
          "candidate": [
            "lib.rs||lib.rs"
          ]
        }
      },
      "candidate_diff": {
        "lib.rs||lib.rs": [
          "File: lib.rs -> lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: use std::hash::{Hash, Hasher};",
          "61: use std::iter::{IntoIterator, FromIterator, repeat};",
          "62: use std::mem;",
          "64: use std::mem::ManuallyDrop;",
          "65: use std::ops;",
          "66: use std::ptr;",
          "",
          "[Removed Lines]",
          "63: #[cfg(not(feature = \"union\"))]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268: }",
          "270: #[cfg(feature = \"union\")]",
          "272: union SmallVecData<A: Array> {",
          "274:     heap: (*mut A::Item, usize),",
          "275: }",
          "",
          "[Removed Lines]",
          "271: #[allow(unions_with_drop_fields)]",
          "273:     inline: A,",
          "",
          "[Added Lines]",
          "271:     inline: ManuallyDrop<A>,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "286:     }",
          "287:     #[inline]",
          "288:     fn from_inline(inline: A) -> SmallVecData<A> {",
          "290:     }",
          "291:     #[inline]",
          "293:     #[inline]",
          "294:     unsafe fn heap(&self) -> (*mut A::Item, usize) {",
          "295:         self.heap",
          "",
          "[Removed Lines]",
          "289:         SmallVecData { inline }",
          "292:     unsafe fn into_inline(self) -> A { self.inline }",
          "",
          "[Added Lines]",
          "287:         SmallVecData { inline: ManuallyDrop::new(inline) }",
          "290:     unsafe fn into_inline(self) -> A { ManuallyDrop::into_inner(self.inline) }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a83ccecf515b5273e4dd0306c1b9f6dcb7daf963",
      "candidate_info": {
        "commit_hash": "a83ccecf515b5273e4dd0306c1b9f6dcb7daf963",
        "repo": "servo/rust-smallvec",
        "commit_url": "https://github.com/servo/rust-smallvec/commit/a83ccecf515b5273e4dd0306c1b9f6dcb7daf963",
        "files": [
          "lib.rs"
        ],
        "message": "Use MaybeUninit for storage of inline items.\n\nThis includes two breaking changes, in addition to the fact that it will\nrequire a MSRV bump:\n\n1. The functions on the `Array` trait `ptr` and `ptr_mut` have been\n   removed. Because these took a `&self`/`&mut self` argument, there's\n   no way for us to call them when we only have a `MaybeUninit<A>`. Now,\n   we just use the memory of the object directly.\n\n   This limits the flexibility of custom implementations of `Array`,\n   (they can no longer return pointers to values other than themselves)\n   but I imagine this is very rare and was probably broken somehow to\n   begin with. Anybody who does this will get a compile error.\n\n2. `from_buf_and_len_unchecked` now takes a MaybeUninit<A>, so that\n   callers have the option of only partially initializing the array.",
        "before_after_code_files": [
          "lib.rs||lib.rs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib.rs||lib.rs"
          ],
          "candidate": [
            "lib.rs||lib.rs"
          ]
        }
      },
      "candidate_diff": {
        "lib.rs||lib.rs": [
          "File: lib.rs -> lib.rs",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: #[cfg(feature = \"serde\")]",
          "64: use std::marker::PhantomData;",
          "65: use std::mem;",
          "67: use std::ops;",
          "68: use std::ptr;",
          "69: use std::slice;",
          "",
          "[Removed Lines]",
          "66: use std::mem::ManuallyDrop;",
          "",
          "[Added Lines]",
          "66: use std::mem::MaybeUninit;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281: #[cfg(feature = \"union\")]",
          "282: union SmallVecData<A: Array> {",
          "284:     heap: (*mut A::Item, usize),",
          "285: }",
          "287: #[cfg(feature = \"union\")]",
          "288: impl<A: Array> SmallVecData<A> {",
          "289:     #[inline]",
          "292:     }",
          "293:     #[inline]",
          "296:     }",
          "297:     #[inline]",
          "302:     }",
          "303:     #[inline]",
          "306:     }",
          "307:     #[inline]",
          "308:     unsafe fn heap(&self) -> (*mut A::Item, usize) {",
          "",
          "[Removed Lines]",
          "283:     inline: ManuallyDrop<A>,",
          "290:     unsafe fn inline(&self) -> &A {",
          "291:         &self.inline",
          "294:     unsafe fn inline_mut(&mut self) -> &mut A {",
          "295:         &mut self.inline",
          "298:     fn from_inline(inline: A) -> SmallVecData<A> {",
          "299:         SmallVecData {",
          "300:             inline: ManuallyDrop::new(inline),",
          "301:         }",
          "304:     unsafe fn into_inline(self) -> A {",
          "305:         ManuallyDrop::into_inner(self.inline)",
          "",
          "[Added Lines]",
          "283:     inline: MaybeUninit<A>,",
          "290:     unsafe fn inline(&self) -> *const A::Item {",
          "291:         self.inline.as_ptr() as *const A::Item",
          "294:     unsafe fn inline_mut(&mut self) -> *mut A::Item {",
          "295:         self.inline.as_mut_ptr() as *mut A::Item",
          "298:     fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {",
          "299:         SmallVecData { inline }",
          "302:     unsafe fn into_inline(self) -> MaybeUninit<A> {",
          "303:         self.inline",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "321: #[cfg(not(feature = \"union\"))]",
          "322: enum SmallVecData<A: Array> {",
          "324:     Heap((*mut A::Item, usize)),",
          "325: }",
          "327: #[cfg(not(feature = \"union\"))]",
          "328: impl<A: Array> SmallVecData<A> {",
          "329:     #[inline]",
          "331:         match *self {",
          "333:             _ => debug_unreachable!(),",
          "334:         }",
          "335:     }",
          "336:     #[inline]",
          "338:         match *self {",
          "340:             _ => debug_unreachable!(),",
          "341:         }",
          "342:     }",
          "343:     #[inline]",
          "346:     }",
          "347:     #[inline]",
          "349:         match self {",
          "351:             _ => debug_unreachable!(),",
          "352:         }",
          "353:     }",
          "",
          "[Removed Lines]",
          "323:     Inline(ManuallyDrop<A>),",
          "330:     unsafe fn inline(&self) -> &A {",
          "332:             SmallVecData::Inline(ref a) => a,",
          "337:     unsafe fn inline_mut(&mut self) -> &mut A {",
          "339:             SmallVecData::Inline(ref mut a) => a,",
          "344:     fn from_inline(inline: A) -> SmallVecData<A> {",
          "345:         SmallVecData::Inline(ManuallyDrop::new(inline))",
          "348:     unsafe fn into_inline(self) -> A {",
          "350:             SmallVecData::Inline(a) => ManuallyDrop::into_inner(a),",
          "",
          "[Added Lines]",
          "321:     Inline(MaybeUninit<A>),",
          "328:     unsafe fn inline(&self) -> *const A::Item {",
          "330:             SmallVecData::Inline(ref a) => a.as_ptr() as *const A::Item,",
          "335:     unsafe fn inline_mut(&mut self) -> *mut A::Item {",
          "337:             SmallVecData::Inline(ref mut a) => a.as_mut_ptr() as *mut A::Item,",
          "342:     fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {",
          "343:         SmallVecData::Inline(inline)",
          "346:     unsafe fn into_inline(self) -> MaybeUninit<A> {",
          "348:             SmallVecData::Inline(a) => a,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "413:     #[inline]",
          "414:     pub fn new() -> SmallVec<A> {",
          "420:         }",
          "421:     }",
          "",
          "[Removed Lines]",
          "415:         unsafe {",
          "416:             SmallVec {",
          "417:                 capacity: 0,",
          "418:                 data: SmallVecData::from_inline(mem::uninitialized()),",
          "419:             }",
          "",
          "[Added Lines]",
          "415:         assert!(",
          "416:             mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()",
          "417:                 && mem::align_of::<A>() >= mem::align_of::<A::Item>()",
          "418:         );",
          "419:         SmallVec {",
          "420:             capacity: 0,",
          "421:             data: SmallVecData::from_inline(MaybeUninit::uninit()),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "456:     pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {",
          "457:         if vec.capacity() <= A::size() {",
          "458:             unsafe {",
          "460:                 let len = vec.len();",
          "461:                 vec.set_len(0);",
          "464:                 SmallVec {",
          "465:                     capacity: len,",
          "",
          "[Removed Lines]",
          "459:                 let mut data = SmallVecData::<A>::from_inline(mem::uninitialized());",
          "462:                 ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut().ptr_mut(), len);",
          "",
          "[Added Lines]",
          "461:                 let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());",
          "464:                 ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "492:     pub fn from_buf(buf: A) -> SmallVec<A> {",
          "493:         SmallVec {",
          "494:             capacity: A::size(),",
          "496:         }",
          "497:     }",
          "",
          "[Removed Lines]",
          "495:             data: SmallVecData::from_inline(buf),",
          "",
          "[Added Lines]",
          "497:             data: SmallVecData::from_inline(MaybeUninit::new(buf)),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "511:     #[inline]",
          "512:     pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {",
          "513:         assert!(len <= A::size());",
          "515:     }",
          "",
          "[Removed Lines]",
          "514:         unsafe { SmallVec::from_buf_and_len_unchecked(buf, len) }",
          "",
          "[Added Lines]",
          "516:         unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "531:     #[inline]",
          "533:         SmallVec {",
          "534:             capacity: len,",
          "535:             data: SmallVecData::from_inline(buf),",
          "",
          "[Removed Lines]",
          "532:     pub unsafe fn from_buf_and_len_unchecked(buf: A, len: usize) -> SmallVec<A> {",
          "",
          "[Added Lines]",
          "535:     pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "579:                 let (ptr, len) = self.data.heap();",
          "580:                 (ptr, len, self.capacity)",
          "581:             } else {",
          "583:             }",
          "584:         }",
          "585:     }",
          "",
          "[Removed Lines]",
          "582:                 (self.data.inline().ptr(), self.capacity, A::size())",
          "",
          "[Added Lines]",
          "585:                 (self.data.inline(), self.capacity, A::size())",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "592:                 let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();",
          "593:                 (ptr, len_ptr, self.capacity)",
          "594:             } else {",
          "600:             }",
          "601:         }",
          "602:     }",
          "",
          "[Removed Lines]",
          "595:                 (",
          "596:                     self.data.inline_mut().ptr_mut(),",
          "597:                     &mut self.capacity,",
          "598:                     A::size(),",
          "599:                 )",
          "",
          "[Added Lines]",
          "598:                 (self.data.inline_mut(), &mut self.capacity, A::size())",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "663:                 if unspilled {",
          "664:                     return;",
          "665:                 }",
          "668:                 self.capacity = len;",
          "669:             } else if new_cap != cap {",
          "670:                 let mut vec = Vec::with_capacity(new_cap);",
          "",
          "[Removed Lines]",
          "666:                 self.data = SmallVecData::from_inline(mem::uninitialized());",
          "667:                 ptr::copy_nonoverlapping(ptr, self.data.inline_mut().ptr_mut(), len);",
          "",
          "[Added Lines]",
          "665:                 self.data = SmallVecData::from_inline(MaybeUninit::uninit());",
          "666:                 ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "730:         if self.inline_size() >= len {",
          "731:             unsafe {",
          "732:                 let (ptr, len) = self.data.heap();",
          "735:                 deallocate(ptr, self.capacity);",
          "736:                 self.capacity = len;",
          "737:             }",
          "",
          "[Removed Lines]",
          "733:                 self.data = SmallVecData::from_inline(mem::uninitialized());",
          "734:                 ptr::copy_nonoverlapping(ptr, self.data.inline_mut().ptr_mut(), len);",
          "",
          "[Added Lines]",
          "732:                 self.data = SmallVecData::from_inline(MaybeUninit::uninit());",
          "733:                 ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "900:             unsafe {",
          "901:                 let data = ptr::read(&self.data);",
          "902:                 mem::forget(self);",
          "904:             }",
          "905:         }",
          "906:     }",
          "",
          "[Removed Lines]",
          "903:                 Ok(data.into_inline())",
          "",
          "[Added Lines]",
          "902:                 Ok(data.into_inline().assume_init())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1062:             SmallVec {",
          "1063:                 capacity: len,",
          "1064:                 data: SmallVecData::from_inline(unsafe {",
          "1067:                     data",
          "1068:                 }),",
          "1069:             }",
          "",
          "[Removed Lines]",
          "1065:                     let mut data: A = mem::uninitialized();",
          "1066:                     ptr::copy_nonoverlapping(slice.as_ptr(), data.ptr_mut(), len);",
          "",
          "[Added Lines]",
          "1064:                     let mut data: MaybeUninit<A> = MaybeUninit::uninit();",
          "1065:                     ptr::copy_nonoverlapping(",
          "1066:                         slice.as_ptr(),",
          "1067:                         data.as_mut_ptr() as *mut A::Item,",
          "1068:                         len,",
          "1069:                     );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1603:     type Item;",
          "1605:     fn size() -> usize;",
          "1610: }",
          "",
          "[Removed Lines]",
          "1607:     fn ptr(&self) -> *const Self::Item;",
          "1609:     fn ptr_mut(&mut self) -> *mut Self::Item;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1650:             unsafe impl<T> Array for [T; $size] {",
          "1651:                 type Item = T;",
          "1652:                 fn size() -> usize { $size }",
          "1655:             }",
          "1656:         )+",
          "1657:     }",
          "",
          "[Removed Lines]",
          "1653:                 fn ptr(&self) -> *const T { self.as_ptr() }",
          "1654:                 fn ptr_mut(&mut self) -> *mut T { self.as_mut_ptr() }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1985:         );",
          "1986:     }",
          "1989:     #[test]",
          "1991:     fn test_insert_many_panic() {",
          "",
          "[Removed Lines]",
          "1988:     #[cfg(feature = \"std\")]",
          "",
          "[Added Lines]",
          "1985:     #[cfg(all(feature = \"std\", not(miri)))] // Miri currently does not support unwinding",
          "",
          "---------------"
        ]
      }
    }
  ]
}