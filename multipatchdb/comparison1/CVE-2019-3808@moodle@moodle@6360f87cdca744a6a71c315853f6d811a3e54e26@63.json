{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "208950cff04f87e16eb008cd395c2222ec6934a7",
      "candidate_info": {
        "commit_hash": "208950cff04f87e16eb008cd395c2222ec6934a7",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/208950cff04f87e16eb008cd395c2222ec6934a7",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.6dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '36';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018110700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev+ (Build: 20181107)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018111000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev+ (Build: 20181110)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46014b8343078085f96088bdebb7fa64db2eeb9e",
      "candidate_info": {
        "commit_hash": "46014b8343078085f96088bdebb7fa64db2eeb9e",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/46014b8343078085f96088bdebb7fa64db2eeb9e",
        "files": [
          "admin/settings/subsystems.php",
          "lang/en/admin.php",
          "lib/db/upgrade.php",
          "message/externallib.php",
          "message/lib.php",
          "version.php"
        ],
        "message": "MDL-64093 core: added new 'messagingdefaultpressenter' setting",
        "before_after_code_files": [
          "admin/settings/subsystems.php||admin/settings/subsystems.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "message/externallib.php||message/externallib.php",
          "message/lib.php||message/lib.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/subsystems.php||admin/settings/subsystems.php": [
          "File: admin/settings/subsystems.php -> admin/settings/subsystems.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:         0)",
          "22:     );",
          "24:     $options = array(",
          "25:         DAYSECS => new lang_string('secondstotime86400'),",
          "26:         WEEKSECS => new lang_string('secondstotime604800'),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     $optionalsubsystems->add(new admin_setting_configcheckbox('messagingdefaultpressenter',",
          "25:         new lang_string('messagingdefaultpressenter', 'admin'),",
          "26:         new lang_string('configmessagingdefaultpressenter', 'admin'),",
          "27:         1)",
          "28:     );",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "279: $string['configmaxevents'] = 'Events to Lookahead';",
          "280: $string['configmessaging'] = 'If enabled, users can send messages to other users on the site.';",
          "281: $string['configmessagingallowemailoverride'] = 'Allow users to have email message notifications sent to an email address other than the email address in their profile';",
          "282: $string['configmessagingdeletereadnotificationsdelay'] = 'Read notifications can be deleted to save space. How long after a notification is read can it be deleted?';",
          "283: $string['configmessagingdeleteallnotificationsdelay'] = 'Read and unread notifications can be deleted to save space. How long after a notification is created can it be deleted?';",
          "284: $string['configmessagingallusers'] = 'If enabled, users can view the list of all users on the site when selecting someone to message, and their message preferences include the option to accept messages from anyone on the site. If disabled, users can only view the list of users in their courses, and they have just two options in message preferences - to accept messages from their contacts only, or their contacts and anyone in their courses.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282: $string['configmessagingdefaultpressenter'] = 'Whether \\'Use enter to send\\' is enabled by default in users\\' messaging settings.';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "772: $string['messaging'] = 'Enable messaging system';",
          "773: $string['messagingallowemailoverride'] = 'Notification email override';",
          "774: $string['messagingallusers'] = 'Allow site-wide messaging';",
          "775: $string['messagingdeletereadnotificationsdelay'] = 'Delete read notifications';",
          "776: $string['messagingdeleteallnotificationsdelay'] = 'Delete all notifications';",
          "777: $string['minpassworddigits'] = 'Digits';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "776: $string['messagingdefaultpressenter'] = 'Use enter to send enabled by default';",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2719:         upgrade_main_savepoint(true, 2019011801.03);",
          "2720:     }",
          "2722:     return true;",
          "2723: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2722:     if ($oldversion < 2019020100.01) {",
          "2724:         set_config('messagingdefaultpressenter', false);",
          "2727:         upgrade_main_savepoint(true, 2019020100.01);",
          "2728:     }",
          "",
          "---------------"
        ],
        "message/externallib.php||message/externallib.php": [
          "File: message/externallib.php -> message/externallib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4162:     public static function get_user_message_preferences($userid = 0) {",
          "4165:         $params = self::validate_parameters(",
          "4166:             self::get_user_message_preferences_parameters(),",
          "",
          "[Removed Lines]",
          "4163:         global $PAGE;",
          "",
          "[Added Lines]",
          "4163:         global $CFG, $PAGE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4190:         $renderer = $PAGE->get_renderer('core_message');",
          "4192:         $result = array(",
          "4193:             'warnings' => array(),",
          "4194:             'preferences' => $notificationlistoutput->export_for_template($renderer),",
          "4195:             'blocknoncontacts' => \\core_message\\api::get_user_privacy_messaging_preference($user->id),",
          "4197:         );",
          "4198:         return $result;",
          "4199:     }",
          "",
          "[Removed Lines]",
          "4196:             'entertosend' => get_user_preferences('message_entertosend', false, $user)",
          "",
          "[Added Lines]",
          "4192:         $entertosend = get_user_preferences('message_entertosend', $CFG->messagingdefaultpressenter, $user);",
          "4198:             'entertosend' => $entertosend",
          "",
          "---------------"
        ],
        "message/lib.php||message/lib.php": [
          "File: message/lib.php -> message/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "855:     }",
          "860:     return $renderer->render_from_template('core_message/message_drawer', [",
          "861:         'contactrequestcount' => $requestcount,",
          "",
          "[Removed Lines]",
          "858:     $entertosend = get_user_preferences('message_entertosend', false, $USER);",
          "",
          "[Added Lines]",
          "858:     $entertosend = get_user_preferences('message_entertosend', $CFG->messagingdefaultpressenter, $USER);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019020800.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019020800.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f690999ec5a0c559ae60c31a35a134e60978dd1",
      "candidate_info": {
        "commit_hash": "9f690999ec5a0c559ae60c31a35a134e60978dd1",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/9f690999ec5a0c559ae60c31a35a134e60978dd1",
        "files": [
          "analytics/classes/analysis.php",
          "analytics/classes/dataset_manager.php",
          "analytics/classes/local/analyser/base.php",
          "analytics/classes/local/analysis/result.php",
          "analytics/classes/local/analysis/result_array.php",
          "analytics/classes/local/analysis/result_file.php",
          "analytics/classes/local/time_splitting/base.php",
          "analytics/classes/local/time_splitting/upcoming_periodic.php",
          "analytics/classes/model.php",
          "analytics/tests/dataset_manager_test.php",
          "analytics/tests/fixtures/test_analysis.php",
          "analytics/tests/fixtures/test_indicator_null.php",
          "analytics/tests/fixtures/test_site_users_analyser.php",
          "analytics/tests/manager_test.php",
          "analytics/tests/model_test.php",
          "analytics/tests/prediction_test.php",
          "analytics/tests/privacy_test.php",
          "analytics/upgrade.txt",
          "lib/classes/analytics/analyser/courses.php",
          "lib/classes/analytics/analyser/site_courses.php",
          "lib/classes/analytics/analyser/student_enrolments.php",
          "lib/classes/analytics/analyser/users.php",
          "lib/classes/analytics/target/no_teaching.php",
          "lib/db/install.xml",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "MDL-64783 analytics: Performance improvements and internal refactoring\n\nThe base classes analyser and time-splitting method had too many\nreponsibilities. A new analysis class has been created.",
        "before_after_code_files": [
          "analytics/classes/analysis.php||analytics/classes/analysis.php",
          "analytics/classes/dataset_manager.php||analytics/classes/dataset_manager.php",
          "analytics/classes/local/analyser/base.php||analytics/classes/local/analyser/base.php",
          "analytics/classes/local/analysis/result.php||analytics/classes/local/analysis/result.php",
          "analytics/classes/local/analysis/result_array.php||analytics/classes/local/analysis/result_array.php",
          "analytics/classes/local/analysis/result_file.php||analytics/classes/local/analysis/result_file.php",
          "analytics/classes/local/time_splitting/base.php||analytics/classes/local/time_splitting/base.php",
          "analytics/classes/local/time_splitting/upcoming_periodic.php||analytics/classes/local/time_splitting/upcoming_periodic.php",
          "analytics/classes/model.php||analytics/classes/model.php",
          "analytics/tests/dataset_manager_test.php||analytics/tests/dataset_manager_test.php",
          "analytics/tests/fixtures/test_analyser.php||analytics/tests/fixtures/test_analysis.php",
          "analytics/tests/fixtures/test_indicator_null.php||analytics/tests/fixtures/test_indicator_null.php",
          "analytics/tests/fixtures/test_site_users_analyser.php||analytics/tests/fixtures/test_site_users_analyser.php",
          "analytics/tests/manager_test.php||analytics/tests/manager_test.php",
          "analytics/tests/model_test.php||analytics/tests/model_test.php",
          "analytics/tests/prediction_test.php||analytics/tests/prediction_test.php",
          "analytics/tests/privacy_test.php||analytics/tests/privacy_test.php",
          "lib/classes/analytics/analyser/courses.php||lib/classes/analytics/analyser/courses.php",
          "lib/classes/analytics/analyser/site_courses.php||lib/classes/analytics/analyser/site_courses.php",
          "lib/classes/analytics/analyser/student_enrolments.php||lib/classes/analytics/analyser/student_enrolments.php",
          "lib/classes/analytics/analyser/users.php||lib/classes/analytics/analyser/users.php",
          "lib/classes/analytics/target/no_teaching.php||lib/classes/analytics/target/no_teaching.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "analytics/classes/analysis.php||analytics/classes/analysis.php": [
          "File: analytics/classes/analysis.php -> analytics/classes/analysis.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_analytics;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "36: class analysis {",
          "41:     private $analyser;",
          "46:     private $includetarget;",
          "51:     private $result;",
          "56:     private $lock;",
          "65:     public function __construct(\\core_analytics\\local\\analyser\\base $analyser, bool $includetarget,",
          "66:             \\core_analytics\\local\\analysis\\result $result) {",
          "67:         $this->analyser = $analyser;",
          "68:         $this->includetarget = $includetarget;",
          "69:         $this->result = $result;",
          "70:     }",
          "77:     public function run() {",
          "79:         $options = $this->analyser->get_options();",
          "82:         $modeltimelimit = intval(get_config('analytics', 'modeltimelimit'));",
          "84:         $filesbytimesplitting = array();",
          "86:         list($analysables, $processedanalysables) = $this->get_sorted_analysables();",
          "88:         $inittime = time();",
          "89:         foreach ($analysables as $key => $analysable) {",
          "91:             $analysableresults = $this->process_analysable($analysable);",
          "92:             if ($analysableresults) {",
          "93:                 $success = $this->result->add_analysable_results($analysableresults);",
          "94:                 if (!$success) {",
          "95:                     $errors = array();",
          "96:                     foreach ($analysableresults as $timesplittingid => $result) {",
          "97:                         $str = '';",
          "98:                         if (count($analysableresults) > 1) {",
          "99:                             $str .= $timesplittingid . ': ';",
          "100:                         }",
          "101:                         $str .= $result->message;",
          "102:                         $errors[] = $str;",
          "103:                     }",
          "105:                     $a = new \\stdClass();",
          "106:                     $a->analysableid = $analysable->get_name();",
          "107:                     $a->errors = implode(', ', $errors);",
          "108:                     $this->analyser->add_log(get_string('analysablenotused', 'analytics', $a));",
          "109:                 }",
          "110:             }",
          "113:             $this->update_analysable_analysed_time($processedanalysables, $analysable->get_id());",
          "116:             if (!$options['evaluation']) {",
          "117:                 $timespent = time() - $inittime;",
          "118:                 if ($modeltimelimit <= $timespent) {",
          "119:                     break;",
          "120:                 }",
          "121:             }",
          "123:             unset($analysables[$key]);",
          "124:         }",
          "126:         return true;",
          "127:     }",
          "138:     protected function get_sorted_analysables(): array {",
          "140:         $analysables = $this->analyser->get_analysables();",
          "143:         $processedanalysables = $this->get_processed_analysables();",
          "147:         $unseen = array_diff_key($analysables, $processedanalysables);",
          "151:         $seen = array_intersect_key($processedanalysables, $analysables);",
          "152:         array_walk($seen, function(&$value, $analysableid) use ($analysables) {",
          "154:             $value = $analysables[$analysableid];",
          "155:         });",
          "157:         return array($unseen + $seen, $processedanalysables);",
          "158:     }",
          "165:     protected function get_processed_analysables(): array {",
          "166:         global $DB;",
          "168:         $params = array('modelid' => $this->analyser->get_modelid());",
          "169:         $params['action'] = ($this->includetarget) ? 'training' : 'prediction';",
          "170:         $select = 'modelid = :modelid and action = :action';",
          "173:         return $DB->get_records_select('analytics_used_analysables', $select,",
          "174:             $params, 'timeanalysed DESC', 'analysableid, modelid, action, timeanalysed, id AS primarykey');",
          "175:     }",
          "186:     public function process_analysable(\\core_analytics\\analysable $analysable): array {",
          "188:         $options = $this->analyser->get_options();",
          "191:         $files = array();",
          "192:         $message = null;",
          "196:         $target = call_user_func(array($this->analyser->get_target(), 'instance'));",
          "200:         $isvalidresult = $target->is_valid_analysable($analysable, $this->includetarget);",
          "201:         if ($isvalidresult !== true) {",
          "202:             $a = new \\stdClass();",
          "203:             $a->analysableid = $analysable->get_name();",
          "204:             $a->result = $isvalidresult;",
          "205:             $this->analyser->add_log(get_string('analysablenotvalidfortarget', 'analytics', $a));",
          "206:             return array();",
          "207:         }",
          "210:         $results = array();",
          "211:         foreach ($this->analyser->get_timesplittings() as $timesplitting) {",
          "213:             $cachedresult = $this->result->retrieve_cached_result($timesplitting, $analysable);",
          "214:             if ($cachedresult) {",
          "215:                 $result = new \\stdClass();",
          "216:                 $result->result = $previousanalysis;",
          "217:                 $results[$timesplitting->get_id()] = $result;",
          "218:                 continue;",
          "219:             }",
          "221:             $results[$timesplitting->get_id()] = $this->process_time_splitting($timesplitting, $analysable, $target);",
          "222:         }",
          "224:         return $results;",
          "225:     }",
          "235:     protected function process_time_splitting(\\core_analytics\\local\\time_splitting\\base $timesplitting,",
          "236:             \\core_analytics\\analysable $analysable, \\core_analytics\\local\\target\\base $target): \\stdClass {",
          "238:         $options = $this->analyser->get_options();",
          "240:         $result = new \\stdClass();",
          "242:         if (!$timesplitting->is_valid_analysable($analysable)) {",
          "243:             $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "244:             $result->message = get_string('invalidanalysablefortimesplitting', 'analytics',",
          "245:                 $timesplitting->get_name());",
          "246:             return $result;",
          "247:         }",
          "248:         $timesplitting->set_analysable($analysable);",
          "250:         if (CLI_SCRIPT && !PHPUNIT_TEST) {",
          "251:             mtrace('Analysing id \"' . $analysable->get_id() . '\" with \"' . $timesplitting->get_name() .",
          "252:                 '\" time splitting method...');",
          "253:         }",
          "257:         list($sampleids, $samplesdata) = $this->analyser->get_all_samples($analysable);",
          "259:         if (count($sampleids) === 0) {",
          "260:             $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "261:             $result->message = get_string('nodata', 'analytics');",
          "262:             return $result;",
          "263:         }",
          "265:         if ($this->includetarget) {",
          "267:             $ranges = $timesplitting->get_training_ranges();",
          "268:         } else {",
          "270:             $ranges = $timesplitting->get_most_recent_prediction_range();",
          "271:         }",
          "274:         if ($options['evaluation'] === false) {",
          "276:             if (empty($ranges)) {",
          "277:                 $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "278:                 $result->message = get_string('noranges', 'analytics');",
          "279:                 return $result;",
          "280:             }",
          "283:             if (!$target::based_on_assumptions()) {",
          "285:                 $this->filter_out_train_samples($sampleids, $timesplitting);",
          "286:             }",
          "288:             if (count($sampleids) === 0) {",
          "289:                 $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "290:                 $result->message = get_string('nonewdata', 'analytics');",
          "291:                 return $result;",
          "292:             }",
          "295:             if (!$this->includetarget) {",
          "297:                 $this->filter_out_prediction_samples_and_ranges($sampleids, $ranges, $timesplitting);",
          "298:             }",
          "300:             if (count($sampleids) === 0) {",
          "301:                 $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "302:                 $result->message = get_string('nonewdata', 'analytics');",
          "303:                 return $result;",
          "304:             }",
          "306:             if (count($ranges) === 0) {",
          "307:                 $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "308:                 $result->message = get_string('nonewranges', 'analytics');",
          "309:                 return $result;",
          "310:             }",
          "311:         }",
          "314:         if (!$this->init_analysable_analysis($timesplitting->get_id(), $analysable->get_id())) {",
          "316:             $result->status = \\core_analytics\\model::NO_DATASET;",
          "317:             $result->message = get_string('analysisinprogress', 'analytics');",
          "318:             return $result;",
          "319:         }",
          "322:         try {",
          "323:             $target->add_sample_data($samplesdata);",
          "324:             $target->filter_out_invalid_samples($sampleids, $analysable, $this->includetarget);",
          "325:         } catch (\\Throwable $e) {",
          "326:             $this->finish_analysable_analysis();",
          "327:             throw $e;",
          "328:         }",
          "330:         if (!$sampleids) {",
          "331:             $result->status = \\core_analytics\\model::NO_DATASET;",
          "332:             $result->message = get_string('novalidsamples', 'analytics');",
          "333:             $this->finish_analysable_analysis();",
          "334:             return $result;",
          "335:         }",
          "337:         try {",
          "338:             $indicators = $this->analyser->get_indicators();",
          "339:             foreach ($indicators as $key => $indicator) {",
          "342:                 $indicators[$key]->add_sample_data($samplesdata);",
          "343:             }",
          "347:             $data = $this->calculate($timesplitting, $sampleids, $ranges, $target);",
          "348:         } catch (\\Throwable $e) {",
          "349:             $this->finish_analysable_analysis();",
          "350:             throw $e;",
          "351:         }",
          "353:         if (!$data) {",
          "354:             $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "355:             $result->message = get_string('novaliddata', 'analytics');",
          "356:             $this->finish_analysable_analysis();",
          "357:             return $result;",
          "358:         }",
          "360:         try {",
          "362:             if ($options['evaluation'] === false) {",
          "365:                 if ($this->includetarget) {",
          "366:                     $this->save_train_samples($sampleids, $timesplitting);",
          "367:                 } else {",
          "368:                     $this->save_prediction_samples($sampleids, $ranges, $timesplitting);",
          "369:                 }",
          "370:             }",
          "373:             $formattedresult = $this->result->format_result($data, $target, $timesplitting, $analysable,",
          "374:                 $this->analyser->get_modelid(), $this->includetarget, $options);",
          "376:         } catch (\\Throwable $e) {",
          "377:             $this->finish_analysable_analysis();",
          "378:             throw $e;",
          "379:         }",
          "381:         if (!$formattedresult) {",
          "382:             $this->finish_analysable_analysis();",
          "383:             throw new \\moodle_exception('errorcannotwritedataset', 'analytics');",
          "384:         }",
          "386:         $result->status = \\core_analytics\\model::OK;",
          "387:         $result->message = get_string('successfullyanalysed', 'analytics');",
          "388:         $result->result = $formattedresult;",
          "391:         $this->finish_analysable_analysis();",
          "393:         return $result;",
          "394:     }",
          "405:     public function calculate(\\core_analytics\\local\\time_splitting\\base $timesplitting, array &$sampleids,",
          "406:             array $ranges, \\core_analytics\\local\\target\\base $target): ?array {",
          "408:         $calculatedtarget = null;",
          "409:         if ($this->includetarget) {",
          "412:             $calculatedtarget = $target->calculate($sampleids, $timesplitting->get_analysable());",
          "415:             $sampleids = array_filter($sampleids, function($sampleid) use ($calculatedtarget) {",
          "416:                 if (is_null($calculatedtarget[$sampleid])) {",
          "417:                     return false;",
          "418:                 }",
          "419:                 return true;",
          "420:             });",
          "421:         }",
          "424:         if (empty($sampleids)) {",
          "425:             return false;",
          "426:         }",
          "428:         $dataset = $this->calculate_indicators($timesplitting, $sampleids, $ranges);",
          "430:         if (empty($dataset)) {",
          "431:             return false;",
          "432:         }",
          "435:         $this->fill_dataset($timesplitting, $dataset, $calculatedtarget);",
          "437:         $this->add_context_metadata($timesplitting, $dataset, $target);",
          "439:         if (!PHPUNIT_TEST && CLI_SCRIPT) {",
          "440:             echo PHP_EOL;",
          "441:         }",
          "443:         return $dataset;",
          "444:     }",
          "454:     protected function calculate_indicators(\\core_analytics\\local\\time_splitting\\base $timesplitting, array $sampleids,",
          "455:             array $ranges): array {",
          "456:         global $DB;",
          "458:         $options = $this->analyser->get_options();",
          "460:         $dataset = array();",
          "463:         $existingcalculations = array();",
          "464:         if ($timesplitting->cache_indicator_calculations()) {",
          "465:             foreach ($ranges as $rangeindex => $range) {",
          "467:                 $existingcalculations[$rangeindex] = \\core_analytics\\manager::get_indicator_calculations(",
          "468:                     $timesplitting->get_analysable(), $range['start'], $range['end'], $this->analyser->get_samples_origin());",
          "469:             }",
          "470:         }",
          "473:         $notnulls = array();",
          "476:         $newcalculations = array();",
          "477:         foreach ($this->analyser->get_indicators() as $indicator) {",
          "480:             $indicator->fill_per_analysable_caches($timesplitting->get_analysable());",
          "483:             foreach ($ranges as $rangeindex => $range) {",
          "486:                 $rangeindicator = clone $indicator;",
          "488:                 $prevcalculations = array();",
          "489:                 if (!empty($existingcalculations[$rangeindex][$rangeindicator->get_id()])) {",
          "490:                     $prevcalculations = $existingcalculations[$rangeindex][$rangeindicator->get_id()];",
          "491:                 }",
          "494:                 list($samplesfeatures, $newindicatorcalculations, $indicatornotnulls) = $rangeindicator->calculate($sampleids,",
          "495:                     $this->analyser->get_samples_origin(), $range['start'], $range['end'], $prevcalculations);",
          "498:                 foreach ($samplesfeatures as $analysersampleid => $features) {",
          "500:                     $uniquesampleid = $timesplitting->append_rangeindex($analysersampleid, $rangeindex);",
          "502:                     if (!isset($notnulls[$uniquesampleid]) && !empty($indicatornotnulls[$analysersampleid])) {",
          "503:                         $notnulls[$uniquesampleid] = $uniquesampleid;",
          "504:                     }",
          "507:                     if (!isset($dataset[$uniquesampleid])) {",
          "508:                         $dataset[$uniquesampleid] = array();",
          "509:                     }",
          "512:                     $dataset[$uniquesampleid] = array_merge($dataset[$uniquesampleid], $features);",
          "513:                 }",
          "515:                 if (!$options['evaluation'] && $timesplitting->cache_indicator_calculations()) {",
          "516:                     $timecreated = time();",
          "517:                     foreach ($newindicatorcalculations as $sampleid => $calculatedvalue) {",
          "520:                         $indcalc = new \\stdClass();",
          "521:                         $indcalc->contextid = $timesplitting->get_analysable()->get_context()->id;",
          "522:                         $indcalc->starttime = $range['start'];",
          "523:                         $indcalc->endtime = $range['end'];",
          "524:                         $indcalc->sampleid = $sampleid;",
          "525:                         $indcalc->sampleorigin = $this->analyser->get_samples_origin();",
          "526:                         $indcalc->indicator = $rangeindicator->get_id();",
          "527:                         $indcalc->value = $calculatedvalue;",
          "528:                         $indcalc->timecreated = $timecreated;",
          "529:                         $newcalculations[] = $indcalc;",
          "530:                     }",
          "531:                 }",
          "532:             }",
          "534:             if (!$options['evaluation'] && $timesplitting->cache_indicator_calculations()) {",
          "535:                 $batchsize = self::get_insert_batch_size();",
          "536:                 if (count($newcalculations) > $batchsize) {",
          "541:                     $remaining = array_splice($newcalculations, $batchsize);",
          "544:                     $DB->insert_records('analytics_indicator_calc', $newcalculations);",
          "545:                     $newcalculations = $remaining;",
          "546:                 }",
          "547:             }",
          "548:         }",
          "550:         if (!$options['evaluation'] && $timesplitting->cache_indicator_calculations() && $newcalculations) {",
          "552:             $DB->insert_records('analytics_indicator_calc', $newcalculations);",
          "553:         }",
          "559:         $nulls = array_diff_key($dataset, $notnulls);",
          "560:         foreach ($nulls as $uniqueid => $ignoredvalues) {",
          "561:             unset($dataset[$uniqueid]);",
          "562:         }",
          "564:         return $dataset;",
          "565:     }",
          "577:     protected function fill_dataset(\\core_analytics\\local\\time_splitting\\base $timesplitting,",
          "578:             array &$dataset, ?array $calculatedtarget = null) {",
          "580:         $nranges = count($timesplitting->get_distinct_ranges());",
          "582:         foreach ($dataset as $uniquesampleid => $unmodified) {",
          "584:             list($analysersampleid, $rangeindex) = $timesplitting->infer_sample_info($uniquesampleid);",
          "587:             if ($nranges > 1) {",
          "590:                 $timeindicators = array_fill(0, $nranges, 0);",
          "592:                 $timeindicators[$rangeindex] = 1;",
          "594:                 $dataset[$uniquesampleid] = array_merge($timeindicators, $dataset[$uniquesampleid]);",
          "595:             }",
          "597:             if ($calculatedtarget) {",
          "599:                 $dataset[$uniquesampleid][] = $calculatedtarget[$analysersampleid];",
          "601:             } else {",
          "604:                 array_unshift($dataset[$uniquesampleid], $uniquesampleid);",
          "605:             }",
          "606:         }",
          "607:     }",
          "616:     protected function update_analysable_analysed_time(array $processedanalysables, int $analysableid) {",
          "617:         global $DB;",
          "619:         if (!empty($processedanalysables[$analysableid])) {",
          "620:             $obj = $processedanalysables[$analysableid];",
          "622:             $obj->id = $obj->primarykey;",
          "623:             unset($obj->primarykey);",
          "625:             $obj->timeanalysed = time();",
          "626:             $DB->update_record('analytics_used_analysables', $obj);",
          "628:         } else {",
          "630:             $obj = new \\stdClass();",
          "631:             $obj->modelid = $this->analyser->get_modelid();",
          "632:             $obj->action = ($this->includetarget) ? 'training' : 'prediction';",
          "633:             $obj->analysableid = $analysableid;",
          "634:             $obj->timeanalysed = time();",
          "636:             $DB->insert_record('analytics_used_analysables', $obj);",
          "637:         }",
          "638:     }",
          "659:     protected function add_context_metadata(\\core_analytics\\local\\time_splitting\\base $timesplitting, array &$dataset,",
          "660:             \\core_analytics\\local\\target\\base $target) {",
          "661:         $headers = $this->get_headers($timesplitting, $target);",
          "664:         array_unshift($dataset, $headers);",
          "665:     }",
          "674:     public function get_headers(\\core_analytics\\local\\time_splitting\\base $timesplitting,",
          "675:             \\core_analytics\\local\\target\\base $target): array {",
          "677:         $headers = array();",
          "679:         if (!$this->includetarget) {",
          "681:             $headers[] = 'sampleid';",
          "682:         }",
          "686:         $ranges = $timesplitting->get_distinct_ranges();",
          "687:         if (count($ranges) > 1) {",
          "688:             foreach ($ranges as $rangeindex) {",
          "689:                 $headers[] = 'range/' . $rangeindex;",
          "690:             }",
          "691:         }",
          "694:         foreach ($this->analyser->get_indicators() as $indicator) {",
          "695:             $headers = array_merge($headers, $indicator::get_feature_headers());",
          "696:         }",
          "699:         if ($this->includetarget) {",
          "700:             $headers[] = $target->get_id();",
          "701:         }",
          "703:         return $headers;",
          "704:     }",
          "713:     protected function filter_out_train_samples(array &$sampleids, \\core_analytics\\local\\time_splitting\\base $timesplitting) {",
          "714:         global $DB;",
          "716:         $params = array('modelid' => $this->analyser->get_modelid(), 'analysableid' => $timesplitting->get_analysable()->get_id(),",
          "717:             'timesplitting' => $timesplitting->get_id());",
          "719:         $trainingsamples = $DB->get_records('analytics_train_samples', $params);",
          "722:         foreach ($trainingsamples as $trainingfile) {",
          "724:             $usedsamples = json_decode($trainingfile->sampleids, true);",
          "726:             if (!empty($usedsamples)) {",
          "728:                 $sampleids = array_diff_key($sampleids, $usedsamples);",
          "729:             }",
          "730:         }",
          "731:     }",
          "741:     protected function filter_out_prediction_samples_and_ranges(array &$sampleids, array &$ranges,",
          "742:             \\core_analytics\\local\\time_splitting\\base $timesplitting) {",
          "743:         global $DB;",
          "745:         if (count($ranges) > 1) {",
          "746:             throw new \\coding_exception('$ranges argument should only contain one range');",
          "747:         }",
          "749:         $rangeindex = key($ranges);",
          "751:         $params = array('modelid' => $this->analyser->get_modelid(), 'analysableid' => $timesplitting->get_analysable()->get_id(),",
          "752:             'timesplitting' => $timesplitting->get_id(), 'rangeindex' => $rangeindex);",
          "753:         $predictedrange = $DB->get_record('analytics_predict_samples', $params);",
          "755:         if (!$predictedrange) {",
          "757:             return;",
          "758:         }",
          "760:         $predictedrange->sampleids = json_decode($predictedrange->sampleids, true);",
          "761:         $missingsamples = array_diff_key($sampleids, $predictedrange->sampleids);",
          "762:         if (count($missingsamples) === 0) {",
          "764:             unset($ranges[$rangeindex]);",
          "765:             return;",
          "766:         }",
          "769:         $sampleids = $missingsamples;",
          "770:     }",
          "779:     protected function save_train_samples(array $sampleids, \\core_analytics\\local\\time_splitting\\base $timesplitting) {",
          "780:         global $DB;",
          "782:         $trainingsamples = new \\stdClass();",
          "783:         $trainingsamples->modelid = $this->analyser->get_modelid();",
          "784:         $trainingsamples->analysableid = $timesplitting->get_analysable()->get_id();",
          "785:         $trainingsamples->timesplitting = $timesplitting->get_id();",
          "787:         $trainingsamples->sampleids = json_encode($sampleids);",
          "788:         $trainingsamples->timecreated = time();",
          "790:         $DB->insert_record('analytics_train_samples', $trainingsamples);",
          "791:     }",
          "801:     protected function save_prediction_samples(array $sampleids, array $ranges,",
          "802:             \\core_analytics\\local\\time_splitting\\base $timesplitting) {",
          "803:         global $DB;",
          "805:         if (count($ranges) > 1) {",
          "806:             throw new \\coding_exception('$ranges argument should only contain one range');",
          "807:         }",
          "809:         $rangeindex = key($ranges);",
          "811:         $params = array('modelid' => $this->analyser->get_modelid(), 'analysableid' => $timesplitting->get_analysable()->get_id(),",
          "812:             'timesplitting' => $timesplitting->get_id(), 'rangeindex' => $rangeindex);",
          "813:         if ($predictionrange = $DB->get_record('analytics_predict_samples', $params)) {",
          "815:             $prevsamples = json_decode($predictionrange->sampleids, true);",
          "816:             $predictionrange->sampleids = json_encode($prevsamples + $sampleids);",
          "817:             $predictionrange->timemodified = time();",
          "818:             $DB->update_record('analytics_predict_samples', $predictionrange);",
          "819:         } else {",
          "820:             $predictionrange = (object)$params;",
          "821:             $predictionrange->sampleids = json_encode($sampleids);",
          "822:             $predictionrange->timecreated = time();",
          "823:             $predictionrange->timemodified = $predictionrange->timecreated;",
          "824:             $DB->insert_record('analytics_predict_samples', $predictionrange);",
          "825:         }",
          "826:     }",
          "835:     private function init_analysable_analysis(string $timesplittingid, int $analysableid) {",
          "839:         $lockkey = 'modelid:' . $this->analyser->get_modelid() . '-analysableid:' . $analysableid .",
          "840:             '-timesplitting:' . self::clean_time_splitting_id($timesplittingid);",
          "843:         $lockfactory = \\core\\lock\\lock_config::get_lock_factory('core_analytics');",
          "847:         if (!$this->lock = $lockfactory->get_lock($lockkey, 10)) {",
          "848:             return false;",
          "849:         }",
          "850:         return true;",
          "851:     }",
          "860:     public static function clean_time_splitting_id($timesplittingid) {",
          "861:         $timesplittingid = str_replace('\\\\', '-', $timesplittingid);",
          "862:         return clean_param($timesplittingid, PARAM_ALPHANUMEXT);",
          "863:     }",
          "870:     private function finish_analysable_analysis() {",
          "871:         $this->lock->release();",
          "872:     }",
          "882:     private static function get_insert_batch_size(): int {",
          "883:         global $DB;",
          "886:         if (empty($DB->dboptions['bulkinsertsize'])) {",
          "887:             return 1000;",
          "888:         }",
          "890:         $bulkinsert = $DB->dboptions['bulkinsertsize'];",
          "891:         if ($bulkinsert < 1000) {",
          "892:             return $bulkinsert;",
          "893:         }",
          "895:         while ($bulkinsert > 1000) {",
          "896:             $bulkinsert = round($bulkinsert / 2, 0);",
          "897:         }",
          "899:         return (int)$bulkinsert;",
          "900:     }",
          "901: }",
          "",
          "---------------"
        ],
        "analytics/classes/dataset_manager.php||analytics/classes/dataset_manager.php": [
          "File: analytics/classes/dataset_manager.php -> analytics/classes/dataset_manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:         $this->modelid = $modelid;",
          "110:         $this->analysableid = $analysableid;",
          "111:         $this->timesplittingid = $timesplittingid;",
          "113:         $this->filearea = $filearea;",
          "137:     }",
          "",
          "[Removed Lines]",
          "112:         $this->evaluation = $evaluation;",
          "114:     }",
          "121:     public function init_process() {",
          "125:         $lockkey = 'modelid:' . $this->modelid . '-analysableid:' . $this->analysableid .",
          "126:             '-timesplitting:' . self::clean_time_splitting_id($this->timesplittingid);",
          "129:         $lockfactory = \\core\\lock\\lock_config::get_lock_factory('core_analytics');",
          "133:         if (!$this->lock = $lockfactory->get_lock($lockkey, 10)) {",
          "134:             return false;",
          "135:         }",
          "136:         return true;",
          "",
          "[Added Lines]",
          "113:         $this->evaluation = $evaluation;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:             'filearea' => $this->filearea,",
          "153:             'itemid' => $this->modelid,",
          "154:             'contextid' => \\context_system::instance()->id,",
          "156:             'filename' => self::get_filename($this->evaluation)",
          "157:         ];",
          "",
          "[Removed Lines]",
          "155:             'filepath' => '/analysable/' . $this->analysableid . '/' . self::clean_time_splitting_id($this->timesplittingid) . '/',",
          "",
          "[Added Lines]",
          "132:             'filepath' => '/analysable/' . $this->analysableid . '/' .",
          "133:                 \\core_analytics\\analysis::clean_time_splitting_id($this->timesplittingid) . '/',",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:         $filepath = make_request_directory() . DIRECTORY_SEPARATOR . $filerecord['filename'];",
          "168:         $fh = fopen($filepath, 'w+');",
          "169:         if (!$fh) {",
          "172:         }",
          "173:         foreach ($data as $line) {",
          "174:             fputcsv($fh, $line);",
          "",
          "[Removed Lines]",
          "170:             $this->close_process();",
          "171:             throw new \\moodle_exception('errorcannotwritedataset', 'analytics', '', $filepath);",
          "",
          "[Added Lines]",
          "148:             return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:         return $fs->create_file_from_pathname($filerecord, $filepath);",
          "179:     }",
          "",
          "[Removed Lines]",
          "186:     public function close_process() {",
          "187:         $this->lock->release();",
          "188:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "200:     public static function get_previous_evaluation_file($modelid, $timesplittingid) {",
          "201:         $fs = get_file_storage();",
          "203:         return $fs->get_file(\\context_system::instance()->id, 'analytics', self::LABELLED_FILEAREA, $modelid,",
          "205:     }",
          "",
          "[Removed Lines]",
          "204:             '/timesplitting/' . self::clean_time_splitting_id($timesplittingid) . '/', self::EVALUATION_FILENAME);",
          "",
          "[Added Lines]",
          "171:         $filepath = '/timesplitting/' . \\core_analytics\\analysis::clean_time_splitting_id($timesplittingid) . '/';",
          "173:             $filepath, self::EVALUATION_FILENAME);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "233:         $filesbytimesplitting = array();",
          "234:         foreach ($timesplittingids as $timesplittingid) {",
          "237:             $files = $fs->get_directory_files(\\context_system::instance()->id, 'analytics', $filearea, $modelid, $filepath);",
          "238:             foreach ($files as $file) {",
          "",
          "[Removed Lines]",
          "236:             $filepath = '/timesplitting/' . self::clean_time_splitting_id($timesplittingid) . '/';",
          "",
          "[Added Lines]",
          "205:             $filepath = '/timesplitting/' . \\core_analytics\\analysis::clean_time_splitting_id($timesplittingid) . '/';",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "292:         $filearea = self::LABELLED_FILEAREA;",
          "293:         $filename = self::get_filename(true);",
          "295:         return $fs->get_file(\\context_system::instance()->id, 'analytics', $filearea, $modelid, $filepath, $filename);",
          "296:     }",
          "",
          "[Removed Lines]",
          "294:         $filepath = '/analysable/' . $analysableid . '/' . self::clean_time_splitting_id($timesplittingid) . '/';",
          "",
          "[Added Lines]",
          "263:         $filepath = '/analysable/' . $analysableid . '/' .",
          "264:             \\core_analytics\\analysis::clean_time_splitting_id($timesplittingid) . '/';",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "372:             'filearea' => $filearea,",
          "373:             'itemid' => $modelid,",
          "374:             'contextid' => \\context_system::instance()->id,",
          "376:             'filename' => self::get_filename($evaluation)",
          "377:         ];",
          "",
          "[Removed Lines]",
          "375:             'filepath' => '/timesplitting/' . self::clean_time_splitting_id($timesplittingid) . '/',",
          "",
          "[Added Lines]",
          "345:             'filepath' => '/timesplitting/' . \\core_analytics\\analysis::clean_time_splitting_id($timesplittingid) . '/',",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "393:         $fs = get_file_storage();",
          "395:         $contextid = \\context_system::instance()->id;",
          "398:         $files = $fs->get_directory_files($contextid, 'analytics', self::LABELLED_FILEAREA, $modelid,",
          "399:             $filepath, true, false);",
          "",
          "[Removed Lines]",
          "396:         $filepath = '/timesplitting/' . self::clean_time_splitting_id($timesplittingid) . '/';",
          "",
          "[Added Lines]",
          "366:         $filepath = '/timesplitting/' . \\core_analytics\\analysis::clean_time_splitting_id($timesplittingid) . '/';",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "467:         return $fs->delete_area_files(\\context_system::instance()->id, 'analytics', false, $modelid);",
          "468:     }",
          "",
          "[Removed Lines]",
          "476:     protected static function clean_time_splitting_id($timesplittingid) {",
          "477:         $timesplittingid = str_replace('\\\\', '-', $timesplittingid);",
          "478:         return clean_param($timesplittingid, PARAM_ALPHANUMEXT);",
          "479:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "analytics/classes/local/analyser/base.php||analytics/classes/local/analyser/base.php": [
          "File: analytics/classes/local/analyser/base.php -> analytics/classes/local/analyser/base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     protected $target;",
          "",
          "[Removed Lines]",
          "55:     protected $analysabletarget;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "131:     abstract protected function get_all_samples(\\core_analytics\\analysable $analysable);",
          "",
          "[Added Lines]",
          "124:     abstract public function get_all_samples(\\core_analytics\\analysable $analysable);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     abstract public function sample_description($sampleid, $contextid, $sampledata);",
          "241:     }",
          "",
          "[Removed Lines]",
          "182:     public function get_analysable_data($includetarget) {",
          "183:         global $DB;",
          "186:         $modeltimelimit = intval(get_config('analytics', 'modeltimelimit'));",
          "188:         $filesbytimesplitting = array();",
          "190:         list($analysables, $processedanalysables) = $this->get_sorted_analysables($includetarget);",
          "192:         $inittime = time();",
          "193:         foreach ($analysables as $key => $analysable) {",
          "195:             $files = $this->process_analysable($analysable, $includetarget);",
          "198:             foreach ($files as $timesplittingid => $file) {",
          "199:                 $filesbytimesplitting[$timesplittingid][] = $file;",
          "200:             }",
          "202:             $this->update_analysable_analysed_time($processedanalysables, $analysable->get_id(), $includetarget);",
          "205:             if (!$this->options['evaluation']) {",
          "206:                 $timespent = time() - $inittime;",
          "207:                 if ($modeltimelimit <= $timespent) {",
          "208:                     break;",
          "209:                 }",
          "210:             }",
          "212:             unset($analysables[$key]);",
          "213:         }",
          "215:         if ($this->options['evaluation'] === false) {",
          "219:             $pendingfiles = \\core_analytics\\dataset_manager::get_pending_files($this->modelid, $includetarget,",
          "220:                 array_keys($filesbytimesplitting));",
          "221:             foreach ($pendingfiles as $timesplittingid => $files) {",
          "222:                 foreach ($files as $file) {",
          "223:                     $filesbytimesplitting[$timesplittingid][] = $file;",
          "224:                 }",
          "225:             }",
          "226:         }",
          "229:         $timesplittingfiles = $this->merge_analysable_files($filesbytimesplitting, $includetarget);",
          "231:         if (!empty($pendingfiles)) {",
          "233:             foreach ($pendingfiles as $timesplittingid => $files) {",
          "234:                 foreach ($files as $file) {",
          "235:                     $file->delete();",
          "236:                 }",
          "237:             }",
          "238:         }",
          "240:         return $timesplittingfiles;",
          "",
          "[Added Lines]",
          "173:     public function get_modelid(): int {",
          "174:         return $this->modelid;",
          "175:     }",
          "181:     public function get_options(): array {",
          "182:         return $this->options;",
          "183:     }",
          "190:     public function get_target(): \\core_analytics\\local\\target\\base {",
          "191:         return $this->target;",
          "192:     }",
          "199:     public function get_timesplittings(): array {",
          "200:         return $this->timesplittings;",
          "201:     }",
          "208:     public function get_indicators(): array {",
          "209:         return $this->indicators;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "257:     public function get_labelled_data() {",
          "259:     }",
          "266:     public function get_unlabelled_data() {",
          "268:     }",
          "",
          "[Removed Lines]",
          "258:         return $this->get_analysable_data(true);",
          "267:         return $this->get_analysable_data(false);",
          "",
          "[Added Lines]",
          "228:         $result = new \\core_analytics\\local\\analysis\\result_file($this->get_modelid(), true, $this->get_options());",
          "229:         $analysis = new \\core_analytics\\analysis($this, true, $result);",
          "230:         $analysis->run();",
          "231:         return $result->get();",
          "241:         $result = new \\core_analytics\\local\\analysis\\result_file($this->get_modelid(), false, $this->get_options());",
          "242:         $analysis = new \\core_analytics\\analysis($this, false, $result);",
          "243:         $analysis->run();",
          "244:         return $result->get();",
          "245:     }",
          "251:     public function get_static_data() {",
          "253:         $result = new \\core_analytics\\local\\analysis\\result_array($this->get_modelid(), false, $this->get_options());",
          "254:         $analysis = new \\core_analytics\\analysis($this, false, $result);",
          "255:         $analysis->run();",
          "256:         return $result->get();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "284:         }",
          "285:     }",
          "",
          "[Removed Lines]",
          "294:     protected function merge_analysable_files($filesbytimesplitting, $includetarget) {",
          "296:         $timesplittingfiles = array();",
          "297:         foreach ($filesbytimesplitting as $timesplittingid => $files) {",
          "299:             if ($this->options['evaluation'] === true) {",
          "301:                 \\core_analytics\\dataset_manager::delete_previous_evaluation_file($this->modelid, $timesplittingid);",
          "302:             }",
          "305:             if ($includetarget) {",
          "306:                 $filearea = \\core_analytics\\dataset_manager::LABELLED_FILEAREA;",
          "307:             } else {",
          "308:                 $filearea = \\core_analytics\\dataset_manager::UNLABELLED_FILEAREA;",
          "309:             }",
          "310:             $timesplittingfiles[$timesplittingid] = \\core_analytics\\dataset_manager::merge_datasets($files,",
          "311:                 $this->modelid, $timesplittingid, $filearea, $this->options['evaluation']);",
          "312:         }",
          "314:         return $timesplittingfiles;",
          "315:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "338:         return $missingrequired;",
          "339:     }",
          "",
          "[Removed Lines]",
          "351:     public function process_analysable($analysable, $includetarget) {",
          "354:         $files = array();",
          "355:         $message = null;",
          "359:         $this->analysabletarget = call_user_func(array($this->target, 'instance'));",
          "363:         $result = $this->analysabletarget->is_valid_analysable($analysable, $includetarget);",
          "364:         if ($result !== true) {",
          "365:             $a = new \\stdClass();",
          "366:             $a->analysableid = $analysable->get_name();",
          "367:             $a->result = $result;",
          "368:             $this->add_log(get_string('analysablenotvalidfortarget', 'analytics', $a));",
          "369:             return array();",
          "370:         }",
          "373:         $results = array();",
          "374:         foreach ($this->timesplittings as $timesplitting) {",
          "380:             if (!empty($this->options['evaluation']) && !empty($this->options['reuseprevanalysed'])) {",
          "382:                 $previousanalysis = \\core_analytics\\dataset_manager::get_evaluation_analysable_file($this->modelid,",
          "383:                     $analysable->get_id(), $timesplitting->get_id());",
          "385:                 $boundary = time() - WEEKSECS;",
          "386:                 if ($previousanalysis && $previousanalysis->get_timecreated() > $boundary) {",
          "390:                     $files[$timesplitting->get_id()] = $previousanalysis;",
          "391:                     continue;",
          "392:                 }",
          "393:             }",
          "395:             $result = $this->process_time_splitting($timesplitting, $analysable, $includetarget);",
          "397:             if (!empty($result->file)) {",
          "398:                 $files[$timesplitting->get_id()] = $result->file;",
          "399:             }",
          "400:             $results[] = $result;",
          "401:         }",
          "403:         if (empty($files)) {",
          "404:             $errors = array();",
          "405:             foreach ($results as $timesplittingid => $result) {",
          "406:                 $errors[] = $timesplittingid . ': ' . $result->message;",
          "407:             }",
          "409:             $a = new \\stdClass();",
          "410:             $a->analysableid = $analysable->get_name();",
          "411:             $a->errors = implode(', ', $errors);",
          "412:             $this->add_log(get_string('analysablenotused', 'analytics', $a));",
          "413:         }",
          "415:         return $files;",
          "416:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "494:     public static function one_sample_per_analysable() {",
          "495:         return false;",
          "496:     }",
          "897: }",
          "",
          "[Removed Lines]",
          "506:     protected function process_time_splitting($timesplitting, $analysable, $includetarget = false) {",
          "508:         $result = new \\stdClass();",
          "510:         if (!$timesplitting->is_valid_analysable($analysable)) {",
          "511:             $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "512:             $result->message = get_string('invalidanalysablefortimesplitting', 'analytics',",
          "513:                 $timesplitting->get_name());",
          "514:             return $result;",
          "515:         }",
          "516:         $timesplitting->set_analysable($analysable);",
          "518:         if (CLI_SCRIPT && !PHPUNIT_TEST) {",
          "519:             mtrace('Analysing id \"' . $analysable->get_id() . '\" with \"' . $timesplitting->get_name() .",
          "520:                 '\" time splitting method...');",
          "521:         }",
          "525:         list($sampleids, $samplesdata) = $this->get_all_samples($analysable);",
          "527:         if (count($sampleids) === 0) {",
          "528:             $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "529:             $result->message = get_string('nodata', 'analytics');",
          "530:             return $result;",
          "531:         }",
          "533:         if ($includetarget) {",
          "535:             $ranges = $timesplitting->get_training_ranges();",
          "536:         } else {",
          "538:             $ranges = $timesplitting->get_most_recent_prediction_range();",
          "539:         }",
          "542:         if ($this->options['evaluation'] === false) {",
          "544:             if (empty($ranges)) {",
          "545:                 $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "546:                 $result->message = get_string('noranges', 'analytics');",
          "547:                 return $result;",
          "548:             }",
          "551:             $this->filter_out_train_samples($sampleids, $timesplitting);",
          "553:             if (count($sampleids) === 0) {",
          "554:                 $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "555:                 $result->message = get_string('nonewdata', 'analytics');",
          "556:                 return $result;",
          "557:             }",
          "560:             if (!$includetarget) {",
          "562:                 $this->filter_out_prediction_samples_and_ranges($sampleids, $ranges, $timesplitting);",
          "563:             }",
          "565:             if (count($sampleids) === 0) {",
          "566:                 $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "567:                 $result->message = get_string('nonewdata', 'analytics');",
          "568:                 return $result;",
          "569:             }",
          "571:             if (count($ranges) === 0) {",
          "572:                 $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "573:                 $result->message = get_string('nonewranges', 'analytics');",
          "574:                 return $result;",
          "575:             }",
          "576:         }",
          "578:         if (!empty($includetarget)) {",
          "579:             $filearea = \\core_analytics\\dataset_manager::LABELLED_FILEAREA;",
          "580:         } else {",
          "581:             $filearea = \\core_analytics\\dataset_manager::UNLABELLED_FILEAREA;",
          "582:         }",
          "583:         $dataset = new \\core_analytics\\dataset_manager($this->modelid, $analysable->get_id(), $timesplitting->get_id(),",
          "584:             $filearea, $this->options['evaluation']);",
          "587:         if (!$dataset->init_process()) {",
          "589:             $result->status = \\core_analytics\\model::NO_DATASET;",
          "590:             $result->message = get_string('analysisinprogress', 'analytics');",
          "591:             return $result;",
          "592:         }",
          "594:         try {",
          "596:             $this->analysabletarget->add_sample_data($samplesdata);",
          "597:             $this->analysabletarget->filter_out_invalid_samples($sampleids, $analysable, $includetarget);",
          "598:         } catch (\\Throwable $e) {",
          "599:             $dataset->close_process();",
          "600:             throw $e;",
          "601:         }",
          "603:         if (!$sampleids) {",
          "604:             $result->status = \\core_analytics\\model::NO_DATASET;",
          "605:             $result->message = get_string('novalidsamples', 'analytics');",
          "606:             $dataset->close_process();",
          "607:             return $result;",
          "608:         }",
          "610:         try {",
          "611:             foreach ($this->indicators as $key => $indicator) {",
          "614:                 $this->indicators[$key]->add_sample_data($samplesdata);",
          "615:             }",
          "619:             if ($includetarget) {",
          "620:                 $data = $timesplitting->calculate($sampleids, $this->get_samples_origin(), $this->indicators, $ranges,",
          "621:                     $this->analysabletarget);",
          "622:             } else {",
          "623:                 $data = $timesplitting->calculate($sampleids, $this->get_samples_origin(), $this->indicators, $ranges);",
          "624:             }",
          "625:         } catch (\\Throwable $e) {",
          "626:             $dataset->close_process();",
          "627:             throw $e;",
          "628:         }",
          "630:         if (!$data) {",
          "631:             $result->status = \\core_analytics\\model::ANALYSABLE_REJECTED_TIME_SPLITTING_METHOD;",
          "632:             $result->message = get_string('novaliddata', 'analytics');",
          "633:             $dataset->close_process();",
          "634:             return $result;",
          "635:         }",
          "637:         try {",
          "639:             $this->add_model_metadata($data);",
          "642:             $file = $dataset->store($data);",
          "643:         } catch (\\Throwable $e) {",
          "644:             $dataset->close_process();",
          "645:             throw $e;",
          "646:         }",
          "649:         $dataset->close_process();",
          "652:         if ($this->options['evaluation'] === false) {",
          "655:             if ($includetarget) {",
          "656:                 $this->save_train_samples($sampleids, $timesplitting, $file);",
          "657:             } else {",
          "658:                 $this->save_prediction_samples($sampleids, $ranges, $timesplitting);",
          "659:             }",
          "660:         }",
          "662:         $result->status = \\core_analytics\\model::OK;",
          "663:         $result->message = get_string('successfullyanalysed', 'analytics');",
          "664:         $result->file = $file;",
          "665:         return $result;",
          "666:     }",
          "674:     protected function filter_out_train_samples(&$sampleids, $timesplitting) {",
          "675:         global $DB;",
          "677:         $params = array('modelid' => $this->modelid, 'analysableid' => $timesplitting->get_analysable()->get_id(),",
          "678:             'timesplitting' => $timesplitting->get_id());",
          "680:         $trainingsamples = $DB->get_records('analytics_train_samples', $params);",
          "683:         foreach ($trainingsamples as $trainingfile) {",
          "685:             $usedsamples = json_decode($trainingfile->sampleids, true);",
          "687:             if (!empty($usedsamples)) {",
          "689:                 $sampleids = array_diff_key($sampleids, $usedsamples);",
          "690:             }",
          "691:         }",
          "692:     }",
          "701:     protected function filter_out_prediction_samples_and_ranges(&$sampleids, &$ranges, $timesplitting) {",
          "702:         global $DB;",
          "704:         if (count($ranges) > 1) {",
          "705:             throw new \\coding_exception('$ranges argument should only contain one range');",
          "706:         }",
          "708:         $rangeindex = key($ranges);",
          "710:         $params = array('modelid' => $this->modelid, 'analysableid' => $timesplitting->get_analysable()->get_id(),",
          "711:             'timesplitting' => $timesplitting->get_id(), 'rangeindex' => $rangeindex);",
          "712:         $predictedrange = $DB->get_record('analytics_predict_samples', $params);",
          "714:         if (!$predictedrange) {",
          "716:             return;",
          "717:         }",
          "719:         $predictedrange->sampleids = json_decode($predictedrange->sampleids, true);",
          "720:         $missingsamples = array_diff_key($sampleids, $predictedrange->sampleids);",
          "721:         if (count($missingsamples) === 0) {",
          "723:             unset($ranges[$rangeindex]);",
          "724:             return;",
          "725:         }",
          "728:         $sampleids = $missingsamples;",
          "729:     }",
          "739:     protected function save_train_samples($sampleids, $timesplitting, $file) {",
          "740:         global $DB;",
          "742:         $trainingsamples = new \\stdClass();",
          "743:         $trainingsamples->modelid = $this->modelid;",
          "744:         $trainingsamples->analysableid = $timesplitting->get_analysable()->get_id();",
          "745:         $trainingsamples->timesplitting = $timesplitting->get_id();",
          "746:         $trainingsamples->fileid = $file->get_id();",
          "748:         $trainingsamples->sampleids = json_encode($sampleids);",
          "749:         $trainingsamples->timecreated = time();",
          "751:         $DB->insert_record('analytics_train_samples', $trainingsamples);",
          "752:     }",
          "762:     protected function save_prediction_samples($sampleids, $ranges, $timesplitting) {",
          "763:         global $DB;",
          "765:         if (count($ranges) > 1) {",
          "766:             throw new \\coding_exception('$ranges argument should only contain one range');",
          "767:         }",
          "769:         $rangeindex = key($ranges);",
          "771:         $params = array('modelid' => $this->modelid, 'analysableid' => $timesplitting->get_analysable()->get_id(),",
          "772:             'timesplitting' => $timesplitting->get_id(), 'rangeindex' => $rangeindex);",
          "773:         if ($predictionrange = $DB->get_record('analytics_predict_samples', $params)) {",
          "775:             $prevsamples = json_decode($predictionrange->sampleids, true);",
          "776:             $predictionrange->sampleids = json_encode($prevsamples + $sampleids);",
          "777:             $predictionrange->timemodified = time();",
          "778:             $DB->update_record('analytics_predict_samples', $predictionrange);",
          "779:         } else {",
          "780:             $predictionrange = (object)$params;",
          "781:             $predictionrange->sampleids = json_encode($sampleids);",
          "782:             $predictionrange->timecreated = time();",
          "783:             $predictionrange->timemodified = $predictionrange->timecreated;",
          "784:             $DB->insert_record('analytics_predict_samples', $predictionrange);",
          "785:         }",
          "786:     }",
          "794:     protected function add_model_metadata(&$data) {",
          "795:         global $CFG;",
          "797:         $metadata = array(",
          "798:             'moodleversion' => $CFG->version,",
          "799:             'targetcolumn' => $this->analysabletarget->get_id()",
          "800:         );",
          "801:         if ($this->analysabletarget->is_linear()) {",
          "802:             $metadata['targettype'] = 'linear';",
          "803:             $metadata['targetmin'] = $this->analysabletarget::get_min_value();",
          "804:             $metadata['targetmax'] = $this->analysabletarget::get_max_value();",
          "805:         } else {",
          "806:             $metadata['targettype'] = 'discrete';",
          "807:             $metadata['targetclasses'] = json_encode($this->analysabletarget::get_classes());",
          "808:         }",
          "810:         foreach ($metadata as $varname => $value) {",
          "811:             $data[0][] = $varname;",
          "812:             $data[1][] = $value;",
          "813:         }",
          "814:     }",
          "826:     protected function get_sorted_analysables($includetarget) {",
          "828:         $analysables = $this->get_analysables();",
          "831:         $processedanalysables = $this->get_processed_analysables($includetarget);",
          "835:         $unseen = array_diff_key($analysables, $processedanalysables);",
          "839:         $seen = array_intersect_key($processedanalysables, $analysables);",
          "840:         array_walk($seen, function(&$value, $analysableid) use ($analysables) {",
          "842:             $value = $analysables[$analysableid];",
          "843:         });",
          "845:         return array($unseen + $seen, $processedanalysables);",
          "846:     }",
          "854:     protected function get_processed_analysables($includetarget) {",
          "855:         global $DB;",
          "857:         $params = array('modelid' => $this->modelid);",
          "858:         $params['action'] = ($includetarget) ? 'training' : 'prediction';",
          "859:         $select = 'modelid = :modelid and action = :action';",
          "862:         return $DB->get_records_select('analytics_used_analysables', $select,",
          "863:             $params, 'timeanalysed DESC', 'analysableid, modelid, action, timeanalysed, id AS primarykey');",
          "864:     }",
          "874:     protected function update_analysable_analysed_time($processedanalysables, $analysableid, $includetarget) {",
          "875:         global $DB;",
          "877:         if (!empty($processedanalysables[$analysableid])) {",
          "878:             $obj = $processedanalysables[$analysableid];",
          "880:             $obj->id = $obj->primarykey;",
          "881:             unset($obj->primarykey);",
          "883:             $obj->timeanalysed = time();",
          "884:             $DB->update_record('analytics_used_analysables', $obj);",
          "886:         } else {",
          "888:             $obj = new \\stdClass();",
          "889:             $obj->modelid = $this->modelid;",
          "890:             $obj->action = ($includetarget) ? 'training' : 'prediction';",
          "891:             $obj->analysableid = $analysableid;",
          "892:             $obj->timeanalysed = time();",
          "894:             $DB->insert_record('analytics_used_analysables', $obj);",
          "895:         }",
          "896:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "analytics/classes/local/analysis/result.php||analytics/classes/local/analysis/result.php": [
          "File: analytics/classes/local/analysis/result.php -> analytics/classes/local/analysis/result.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_analytics\\local\\analysis;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "36: class result {",
          "41:     protected $modelid;",
          "46:     protected $includetarget;",
          "51:     protected $options;",
          "59:     public function __construct(int $modelid, bool $includetarget, array $options) {",
          "60:         $this->modelid = $modelid;",
          "61:         $this->includetarget = $includetarget;",
          "62:         $this->options = $options;",
          "63:     }",
          "72:     public function retrieve_cached_result(\\core_analytics\\local\\time_splitting\\base $timesplitting,",
          "73:         \\core_analytics\\analysable $analysable) {",
          "74:         return false;",
          "75:     }",
          "76: }",
          "",
          "---------------"
        ],
        "analytics/classes/local/analysis/result_array.php||analytics/classes/local/analysis/result_array.php": [
          "File: analytics/classes/local/analysis/result_array.php -> analytics/classes/local/analysis/result_array.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_analytics\\local\\analysis;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "36: class result_array extends result {",
          "42:     private $resultsbytimesplitting = [];",
          "49:     public function add_analysable_results(array $results): bool {",
          "51:         $any = false;",
          "54:         foreach ($results as $timesplittingid => $result) {",
          "55:             if (!empty($result->result)) {",
          "56:                 if (empty($this->resultsbytimesplitting[$timesplittingid])) {",
          "57:                     $this->resultsbytimesplitting[$timesplittingid] = [];",
          "58:                 }",
          "59:                 $this->resultsbytimesplitting[$timesplittingid] += $result->result;",
          "60:                 $any = true;",
          "61:             }",
          "62:         }",
          "63:         if (empty($any)) {",
          "64:             return false;",
          "65:         }",
          "66:         return true;",
          "67:     }",
          "81:     public function format_result(array $data, \\core_analytics\\local\\target\\base $target,",
          "82:             \\core_analytics\\local\\time_splitting\\base $timesplitting, \\core_analytics\\analysable $analysable,",
          "83:             int $modelid, bool $includetarget, array $options) {",
          "84:         return $data;",
          "85:     }",
          "91:     public function get(): array {",
          "94:         $timesplittingresults = array();",
          "95:         foreach ($this->resultsbytimesplitting as $timesplittingid => $results) {",
          "96:             if (empty($timesplittingresults[$timesplittingid])) {",
          "97:                 $timesplittingresults[$timesplittingid] = [];",
          "98:             }",
          "99:             $timesplittingresults[$timesplittingid] += $results;",
          "100:         }",
          "102:         return $timesplittingresults;",
          "103:     }",
          "104: }",
          "",
          "---------------"
        ],
        "analytics/classes/local/analysis/result_file.php||analytics/classes/local/analysis/result_file.php": [
          "File: analytics/classes/local/analysis/result_file.php -> analytics/classes/local/analysis/result_file.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_analytics\\local\\analysis;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "36: class result_file extends result {",
          "42:     private $filesbytimesplitting = [];",
          "49:     public function add_analysable_results(array $results): bool {",
          "51:         $any = false;",
          "54:         foreach ($results as $timesplittingid => $result) {",
          "55:             if (!empty($result->result)) {",
          "56:                 $this->filesbytimesplitting[$timesplittingid][] = $result->result;",
          "57:                 $any = true;",
          "58:             }",
          "59:         }",
          "61:         if (empty($any)) {",
          "62:             return false;",
          "63:         }",
          "64:         return true;",
          "65:     }",
          "74:     public function retrieve_cached_result(\\core_analytics\\local\\time_splitting\\base $timesplitting,",
          "75:         \\core_analytics\\analysable $analysable) {",
          "81:         if (!empty($options['evaluation']) && !empty($options['reuseprevanalysed'])) {",
          "83:             $previousanalysis = \\core_analytics\\dataset_manager::get_evaluation_analysable_file($this->analyser->get_modelid(),",
          "84:                 $analysable->get_id(), $timesplitting->get_id());",
          "86:             $boundary = time() - WEEKSECS;",
          "87:             if ($previousanalysis && $previousanalysis->get_timecreated() > $boundary) {",
          "89:                 return $previousanalysis;",
          "90:             }",
          "91:         }",
          "93:         return false;",
          "94:     }",
          "108:     public function format_result(array $data, \\core_analytics\\local\\target\\base $target,",
          "109:             \\core_analytics\\local\\time_splitting\\base $timesplitting, \\core_analytics\\analysable $analysable,",
          "110:             int $modelid, bool $includetarget, array $options) {",
          "112:         if (!empty($includetarget)) {",
          "113:             $filearea = \\core_analytics\\dataset_manager::LABELLED_FILEAREA;",
          "114:         } else {",
          "115:             $filearea = \\core_analytics\\dataset_manager::UNLABELLED_FILEAREA;",
          "116:         }",
          "117:         $dataset = new \\core_analytics\\dataset_manager($modelid, $analysable->get_id(),",
          "118:             $timesplitting->get_id(), $filearea, $options['evaluation']);",
          "121:         $this->add_model_metadata($data, $timesplitting, $target);",
          "124:         if (!$result = $dataset->store($data)) {",
          "125:             return false;",
          "126:         }",
          "128:         return $result;",
          "129:     }",
          "135:     public function get(): array {",
          "137:         if ($this->options['evaluation'] === false) {",
          "141:             $pendingfiles = \\core_analytics\\dataset_manager::get_pending_files($this->modelid, $this->includetarget,",
          "142:                 array_keys($this->filesbytimesplitting));",
          "143:             foreach ($pendingfiles as $timesplittingid => $files) {",
          "144:                 foreach ($files as $file) {",
          "145:                     $this->filesbytimesplitting[$timesplittingid][] = $file;",
          "146:                 }",
          "147:             }",
          "148:         }",
          "151:         $timesplittingfiles = array();",
          "152:         foreach ($this->filesbytimesplitting as $timesplittingid => $files) {",
          "154:             if ($this->options['evaluation'] === true) {",
          "156:                 \\core_analytics\\dataset_manager::delete_previous_evaluation_file($this->modelid, $timesplittingid);",
          "157:             }",
          "160:             if ($this->includetarget) {",
          "161:                 $filearea = \\core_analytics\\dataset_manager::LABELLED_FILEAREA;",
          "162:             } else {",
          "163:                 $filearea = \\core_analytics\\dataset_manager::UNLABELLED_FILEAREA;",
          "164:             }",
          "165:             $timesplittingfiles[$timesplittingid] = \\core_analytics\\dataset_manager::merge_datasets($files,",
          "166:                 $this->modelid, $timesplittingid, $filearea, $this->options['evaluation']);",
          "167:         }",
          "169:         if (!empty($pendingfiles)) {",
          "171:             foreach ($pendingfiles as $timesplittingid => $files) {",
          "172:                 foreach ($files as $file) {",
          "173:                     $file->delete();",
          "174:                 }",
          "175:             }",
          "176:         }",
          "178:         return $timesplittingfiles;",
          "179:     }",
          "200:     private function add_model_metadata(array &$data, \\core_analytics\\local\\time_splitting\\base $timesplitting,",
          "201:             \\core_analytics\\local\\target\\base $target) {",
          "202:         global $CFG;",
          "206:         $metadata = array(",
          "207:             'timesplitting' => $timesplitting->get_id(),",
          "208:             'nfeatures' => count(current($data)) - 1,",
          "209:             'moodleversion' => $CFG->version,",
          "210:             'targetcolumn' => $target->get_id()",
          "211:         );",
          "212:         if ($target->is_linear()) {",
          "213:             $metadata['targettype'] = 'linear';",
          "214:             $metadata['targetmin'] = $target::get_min_value();",
          "215:             $metadata['targetmax'] = $target::get_max_value();",
          "216:         } else {",
          "217:             $metadata['targettype'] = 'discrete';",
          "218:             $metadata['targetclasses'] = json_encode($target::get_classes());",
          "219:         }",
          "222:         $metadatacolumns = [];",
          "223:         $metadatavalues = [];",
          "224:         foreach ($metadata as $key => $value) {",
          "225:             $metadatacolumns[] = $key;",
          "226:             $metadatavalues[] = $value;",
          "227:         }",
          "230:         array_unshift($data, $metadatacolumns, $metadatavalues);",
          "231:     }",
          "232: }",
          "",
          "---------------"
        ],
        "analytics/classes/local/time_splitting/base.php||analytics/classes/local/time_splitting/base.php": [
          "File: analytics/classes/local/time_splitting/base.php -> analytics/classes/local/time_splitting/base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     protected $analysable;",
          "69:     protected $ranges = [];",
          "",
          "[Removed Lines]",
          "59:     protected $sampleids;",
          "64:     protected $samplesorigin;",
          "74:     protected static $indicators = [];",
          "79:     protected $evaluation = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         return '\\\\' . get_class($this);",
          "110:     }",
          "",
          "[Removed Lines]",
          "117:     public function is_evaluating() {",
          "118:         return $this->evaluation;",
          "119:     }",
          "126:     public function set_evaluating($evaluation) {",
          "127:         $this->evaluation = (bool)$evaluation;",
          "128:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "185:         return false;",
          "186:     }",
          "",
          "[Removed Lines]",
          "198:     public function calculate(&$sampleids, $samplesorigin, $indicators, $ranges, $target = false) {",
          "200:         $calculatedtarget = false;",
          "201:         if ($target) {",
          "204:             $calculatedtarget = $target->calculate($sampleids, $this->analysable);",
          "207:             $sampleids = array_filter($sampleids, function($sampleid) use ($calculatedtarget) {",
          "208:                 if (is_null($calculatedtarget[$sampleid])) {",
          "209:                     return false;",
          "210:                 }",
          "211:                 return true;",
          "212:             });",
          "213:         }",
          "216:         if (empty($sampleids)) {",
          "217:             return false;",
          "218:         }",
          "220:         $dataset = $this->calculate_indicators($sampleids, $samplesorigin, $indicators, $ranges);",
          "222:         if (empty($dataset)) {",
          "223:             return false;",
          "224:         }",
          "227:         $this->fill_dataset($dataset, $calculatedtarget);",
          "229:         $this->add_metadata($dataset, $indicators, $target);",
          "231:         if (!PHPUNIT_TEST && CLI_SCRIPT) {",
          "232:             echo PHP_EOL;",
          "233:         }",
          "235:         return $dataset;",
          "236:     }",
          "247:     protected function calculate_indicators($sampleids, $samplesorigin, $indicators, $ranges) {",
          "248:         global $DB;",
          "250:         $dataset = array();",
          "253:         $existingcalculations = array();",
          "254:         foreach ($ranges as $rangeindex => $range) {",
          "256:             $existingcalculations[$rangeindex] = \\core_analytics\\manager::get_indicator_calculations($this->analysable,",
          "257:                 $range['start'], $range['end'], $samplesorigin);",
          "258:         }",
          "261:         $notnulls = array();",
          "264:         $newcalculations = array();",
          "265:         foreach ($indicators as $indicator) {",
          "268:             $indicator->fill_per_analysable_caches($this->analysable);",
          "271:             foreach ($ranges as $rangeindex => $range) {",
          "274:                 $rangeindicator = clone $indicator;",
          "276:                 $prevcalculations = array();",
          "277:                 if (!empty($existingcalculations[$rangeindex][$rangeindicator->get_id()])) {",
          "278:                     $prevcalculations = $existingcalculations[$rangeindex][$rangeindicator->get_id()];",
          "279:                 }",
          "282:                 list($samplesfeatures, $newindicatorcalculations, $indicatornotnulls) = $rangeindicator->calculate($sampleids,",
          "283:                     $samplesorigin, $range['start'], $range['end'], $prevcalculations);",
          "286:                 foreach ($samplesfeatures as $analysersampleid => $features) {",
          "288:                     $uniquesampleid = $this->append_rangeindex($analysersampleid, $rangeindex);",
          "290:                     if (!isset($notnulls[$uniquesampleid]) && !empty($indicatornotnulls[$analysersampleid])) {",
          "291:                         $notnulls[$uniquesampleid] = $uniquesampleid;",
          "292:                     }",
          "295:                     if (!isset($dataset[$uniquesampleid])) {",
          "296:                         $dataset[$uniquesampleid] = array();",
          "297:                     }",
          "300:                     $dataset[$uniquesampleid] = array_merge($dataset[$uniquesampleid], $features);",
          "301:                 }",
          "303:                 if (!$this->is_evaluating()) {",
          "304:                     $timecreated = time();",
          "305:                     foreach ($newindicatorcalculations as $sampleid => $calculatedvalue) {",
          "308:                         $indcalc = new \\stdClass();",
          "309:                         $indcalc->contextid = $this->analysable->get_context()->id;",
          "310:                         $indcalc->starttime = $range['start'];",
          "311:                         $indcalc->endtime = $range['end'];",
          "312:                         $indcalc->sampleid = $sampleid;",
          "313:                         $indcalc->sampleorigin = $samplesorigin;",
          "314:                         $indcalc->indicator = $rangeindicator->get_id();",
          "315:                         $indcalc->value = $calculatedvalue;",
          "316:                         $indcalc->timecreated = $timecreated;",
          "317:                         $newcalculations[] = $indcalc;",
          "318:                     }",
          "319:                 }",
          "320:             }",
          "322:             if (!$this->is_evaluating()) {",
          "323:                 $batchsize = self::get_insert_batch_size();",
          "324:                 if (count($newcalculations) > $batchsize) {",
          "329:                     $remaining = array_splice($newcalculations, $batchsize);",
          "332:                     $DB->insert_records('analytics_indicator_calc', $newcalculations);",
          "333:                     $newcalculations = $remaining;",
          "334:                 }",
          "335:             }",
          "336:         }",
          "338:         if (!$this->is_evaluating() && $newcalculations) {",
          "340:             $DB->insert_records('analytics_indicator_calc', $newcalculations);",
          "341:         }",
          "347:         $nulls = array_diff_key($dataset, $notnulls);",
          "348:         foreach ($nulls as $uniqueid => $ignoredvalues) {",
          "349:             unset($dataset[$uniqueid]);",
          "350:         }",
          "352:         return $dataset;",
          "353:     }",
          "364:     protected function fill_dataset(&$dataset, $calculatedtarget = false) {",
          "366:         $nranges = count($this->get_distinct_ranges());",
          "368:         foreach ($dataset as $uniquesampleid => $unmodified) {",
          "370:             list($analysersampleid, $rangeindex) = $this->infer_sample_info($uniquesampleid);",
          "373:             if ($nranges > 1) {",
          "376:                 $timeindicators = array_fill(0, $nranges, 0);",
          "378:                 $timeindicators[$rangeindex] = 1;",
          "380:                 $dataset[$uniquesampleid] = array_merge($timeindicators, $dataset[$uniquesampleid]);",
          "381:             }",
          "383:             if ($calculatedtarget) {",
          "385:                 $dataset[$uniquesampleid][] = $calculatedtarget[$analysersampleid];",
          "387:             } else {",
          "390:                 array_unshift($dataset[$uniquesampleid], $uniquesampleid);",
          "391:             }",
          "392:         }",
          "393:     }",
          "414:     protected function add_metadata(&$dataset, $indicators, $target = false) {",
          "416:         $metadata = array(",
          "417:             'timesplitting' => $this->get_id(),",
          "420:             'nfeatures' => count(current($dataset)) - 1",
          "421:         );",
          "424:         $metadatacolumns = [];",
          "425:         $metadatavalues = [];",
          "426:         foreach ($metadata as $key => $value) {",
          "427:             $metadatacolumns[] = $key;",
          "428:             $metadatavalues[] = $value;",
          "429:         }",
          "431:         $headers = $this->get_headers($indicators, $target);",
          "434:         array_unshift($dataset, $metadatacolumns, $metadatavalues, $headers);",
          "435:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "549:     }",
          "587:     }",
          "",
          "[Removed Lines]",
          "558:     protected function get_headers($indicators, $target = false) {",
          "560:         $headers = array();",
          "562:         if (!$target) {",
          "564:             $headers[] = 'sampleid';",
          "565:         }",
          "569:         $ranges = $this->get_distinct_ranges();",
          "570:         if (count($ranges) > 1) {",
          "571:             foreach ($ranges as $rangeindex) {",
          "572:                 $headers[] = 'range/' . $rangeindex;",
          "573:             }",
          "574:         }",
          "577:         foreach ($indicators as $indicator) {",
          "578:             $headers = array_merge($headers, $indicator::get_feature_headers());",
          "579:         }",
          "582:         if ($target) {",
          "583:             $headers[] = $target->get_id();",
          "584:         }",
          "586:         return $headers;",
          "",
          "[Added Lines]",
          "267:     public function cache_indicator_calculations(): bool {",
          "268:         return true;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "601:             }",
          "602:         }",
          "603:     }",
          "632: }",
          "",
          "[Removed Lines]",
          "613:     private static function get_insert_batch_size() {",
          "614:         global $DB;",
          "617:         if (empty($DB->dboptions['bulkinsertsize'])) {",
          "618:             return 1000;",
          "619:         }",
          "621:         $bulkinsert = $DB->dboptions['bulkinsertsize'];",
          "622:         if ($bulkinsert < 1000) {",
          "623:             return $bulkinsert;",
          "624:         }",
          "626:         while ($bulkinsert > 1000) {",
          "627:             $bulkinsert = round($bulkinsert / 2, 0);",
          "628:         }",
          "630:         return (int)$bulkinsert;",
          "631:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "analytics/classes/local/time_splitting/upcoming_periodic.php||analytics/classes/local/time_splitting/upcoming_periodic.php": [
          "File: analytics/classes/local/time_splitting/upcoming_periodic.php -> analytics/classes/local/time_splitting/upcoming_periodic.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:             'time' => $start",
          "52:         ];",
          "53:     }",
          "54: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     public function cache_indicator_calculations(): bool {",
          "60:         return false;",
          "61:     }",
          "",
          "---------------"
        ],
        "analytics/classes/model.php||analytics/classes/model.php": [
          "File: analytics/classes/model.php -> analytics/classes/model.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:             }",
          "307:         }",
          "315:         $classname = $target->get_analyser_class();",
          "316:         if (!class_exists($classname)) {",
          "317:             throw new \\coding_exception($classname . ' class does not exists');",
          "",
          "[Removed Lines]",
          "309:         if (!empty($options['evaluation'])) {",
          "310:             foreach ($timesplittings as $timesplitting) {",
          "311:                 $timesplitting->set_evaluating(true);",
          "312:             }",
          "313:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "541:             $this->get_analyser()->add_log(get_string('noevaluationbasedassumptions', 'analytics'));",
          "542:             $result = new \\stdClass();",
          "543:             $result->status = self::NO_DATASET;",
          "545:         }",
          "547:         $options['evaluation'] = true;",
          "",
          "[Removed Lines]",
          "544:             return array($this->get_time_splitting()->get_id() => $result);",
          "",
          "[Added Lines]",
          "538:             return array($result);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "737:         $outputdir = $this->get_output_dir(array('execution'));",
          "740:         if (!$this->is_static()) {",
          "775:             if ($this->get_target()->is_linear()) {",
          "776:                 $predictorresult = $predictor->estimate($this->get_unique_id(), $samplesfile, $outputdir);",
          "777:             } else {",
          "778:                 $predictorresult = $predictor->classify($this->get_unique_id(), $samplesfile, $outputdir);",
          "779:             }",
          "780:             $result->status = $predictorresult->status;",
          "781:             $result->info = $predictorresult->info;",
          "782:             $result->predictions = $this->format_predictor_predictions($predictorresult);",
          "783:         }",
          "785:         if ($result->status !== self::OK) {",
          "",
          "[Removed Lines]",
          "741:             $predictor = $this->get_predictions_processor();",
          "742:         }",
          "744:         $samplesdata = $this->get_analyser()->get_unlabelled_data();",
          "747:         if (empty($samplesdata) || empty($samplesdata[$this->model->timesplitting])) {",
          "749:             $result = new \\stdClass();",
          "750:             $result->status = self::NO_DATASET;",
          "751:             $result->info = $this->get_analyser()->get_logs();",
          "752:             return $result;",
          "753:         }",
          "754:         $samplesfile = $samplesdata[$this->model->timesplitting];",
          "757:         $params = array('modelid' => $this->model->id, 'action' => 'predicted', 'fileid' => $samplesfile->get_id());",
          "758:         if ($predicted = $DB->get_record('analytics_used_files', $params)) {",
          "759:             throw new \\moodle_exception('erroralreadypredict', 'analytics', '', $samplesfile->get_id());",
          "760:         }",
          "762:         $indicatorcalculations = \\core_analytics\\dataset_manager::get_structured_data($samplesfile);",
          "765:         $result = new \\stdClass();",
          "767:         if ($this->is_static()) {",
          "769:             $result->status = self::OK;",
          "770:             $result->info = [];",
          "771:             $result->predictions = $this->get_static_predictions($indicatorcalculations);",
          "773:         } else {",
          "",
          "[Added Lines]",
          "737:             $predictor = $this->get_predictions_processor();",
          "739:             $samplesdata = $this->get_analyser()->get_unlabelled_data();",
          "742:             if (empty($samplesdata) || empty($samplesdata[$this->model->timesplitting])) {",
          "744:                 $result = new \\stdClass();",
          "745:                 $result->status = self::NO_DATASET;",
          "746:                 $result->info = $this->get_analyser()->get_logs();",
          "747:                 return $result;",
          "748:             }",
          "749:             $samplesfile = $samplesdata[$this->model->timesplitting];",
          "752:             $params = array('modelid' => $this->model->id, 'action' => 'predicted', 'fileid' => $samplesfile->get_id());",
          "753:             if ($predicted = $DB->get_record('analytics_used_files', $params)) {",
          "754:                 throw new \\moodle_exception('erroralreadypredict', 'analytics', '', $samplesfile->get_id());",
          "755:             }",
          "757:             $indicatorcalculations = \\core_analytics\\dataset_manager::get_structured_data($samplesfile);",
          "767:             $result = new \\stdClass();",
          "772:         } else {",
          "775:             $indicatorcalculations = $this->get_analyser()->get_static_data();",
          "777:             if (empty($indicatorcalculations) || empty($indicatorcalculations[$this->model->timesplitting])) {",
          "779:                 $result = new \\stdClass();",
          "780:                 $result->status = self::NO_DATASET;",
          "781:                 $result->info = $this->get_analyser()->get_logs();",
          "782:                 return $result;",
          "783:             }",
          "787:             $indicatorcalculations = $indicatorcalculations[$this->model->timesplitting];",
          "790:             $result = new \\stdClass();",
          "791:             $result->status = self::OK;",
          "792:             $result->info = [];",
          "793:             $result->predictions = $this->get_static_predictions($indicatorcalculations);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "795:             $this->trigger_insights($samplecontexts, $predictionrecords);",
          "796:         }",
          "800:         return $result;",
          "801:     }",
          "",
          "[Removed Lines]",
          "798:         $this->flag_file_as_used($samplesfile, 'predicted');",
          "",
          "[Added Lines]",
          "809:         if (!$this->is_static()) {",
          "810:             $this->flag_file_as_used($samplesfile, 'predicted');",
          "811:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "947:     protected function get_static_predictions(&$indicatorcalculations) {",
          "950:         $analysables = array();",
          "952:         $sampleids = array();",
          "954:         foreach ($indicatorcalculations as $uniquesampleid => $indicators) {",
          "955:             list($sampleid, $rangeindex) = $this->get_time_splitting()->infer_sample_info($uniquesampleid);",
          "957:             $analysable = $this->get_analyser()->get_sample_analysable($sampleid);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "962:         $headers = array_shift($indicatorcalculations);",
          "965:         array_shift($headers);",
          "975:             unset($indicators[0]);",
          "976:             $indicators = array_combine($headers, $indicators);",
          "977:             $indicatorcalculations[$uniquesampleid] = $indicators;",
          "",
          "---------------"
        ],
        "analytics/tests/dataset_manager_test.php||analytics/tests/dataset_manager_test.php": [
          "File: analytics/tests/dataset_manager_test.php -> analytics/tests/dataset_manager_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     public function test_create_dataset() {",
          "58:         $dataset1 = new \\core_analytics\\dataset_manager(1, 1, 'whatever', \\core_analytics\\dataset_manager::LABELLED_FILEAREA, false);",
          "60:         $dataset1data = array_merge($this->sharedtoprows, array(array('yeah', 'yeah', 'yeah')));",
          "61:         $f1 = $dataset1->store($dataset1data);",
          "64:         $f1contents = $f1->get_content();",
          "65:         $this->assertContains('yeah', $f1contents);",
          "",
          "[Removed Lines]",
          "59:         $dataset1->init_process();",
          "62:         $dataset1->close_process();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     public function test_merge_datasets() {",
          "78:         $dataset1 = new \\core_analytics\\dataset_manager(1, 1, 'whatever', \\core_analytics\\dataset_manager::LABELLED_FILEAREA, false);",
          "80:         $dataset1data = array_merge($this->sharedtoprows, array(array('yeah', 'yeah', 'yeah')));",
          "81:         $f1 = $dataset1->store($dataset1data);",
          "84:         $dataset2 = new \\core_analytics\\dataset_manager(1, 2, 'whatever', \\core_analytics\\dataset_manager::LABELLED_FILEAREA, false);",
          "86:         $dataset2data = array_merge($this->sharedtoprows, array(array('no', 'no', 'no')));",
          "87:         $f2 = $dataset2->store($dataset2data);",
          "90:         $files = array($f1, $f2);",
          "91:         $merged = \\core_analytics\\dataset_manager::merge_datasets($files, 1, 'whatever',",
          "",
          "[Removed Lines]",
          "79:         $dataset1->init_process();",
          "82:         $dataset1->close_process();",
          "85:         $dataset2->init_process();",
          "88:         $dataset2->close_process();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:         $analysabledataset = new \\core_analytics\\dataset_manager($fakemodelid, 1, 'whatever',",
          "125:             \\core_analytics\\dataset_manager::LABELLED_FILEAREA, false);",
          "127:         $analysabledatasetdata = array_merge($this->sharedtoprows, array(array('yeah', 'yeah', 'yeah')));",
          "128:         $file = $analysabledataset->store($analysabledatasetdata);",
          "132:         $evaluationdataset = \\core_analytics\\dataset_manager::merge_datasets(array($file), $fakemodelid,",
          "",
          "[Removed Lines]",
          "126:         $analysabledataset->init_process();",
          "129:         $analysabledataset->close_process();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "analytics/tests/fixtures/test_analyser.php||analytics/tests/fixtures/test_analysis.php": [
          "File: analytics/tests/fixtures/test_analyser.php -> analytics/tests/fixtures/test_analysis.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     }",
          "48: }",
          "",
          "[Removed Lines]",
          "34: class test_analyser extends \\core\\analytics\\analyser\\courses {",
          "43:     public function process_analysable($analysable, $includetarget) {",
          "45:         usleep(1100000);",
          "46:         return parent::process_analysable($analysable, $includetarget);",
          "",
          "[Added Lines]",
          "34: class test_analysis extends \\core_analytics\\analysis {",
          "42:     public function process_analysable(\\core_analytics\\analysable $analysable): array {",
          "44:         usleep(550000);",
          "45:         return parent::process_analysable($analysable);",
          "",
          "---------------"
        ],
        "analytics/tests/fixtures/test_indicator_null.php||analytics/tests/fixtures/test_indicator_null.php": [
          "File: analytics/tests/fixtures/test_indicator_null.php -> analytics/tests/fixtures/test_indicator_null.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "34: class test_indicator_null extends \\core_analytics\\local\\indicator\\binary {",
          "45:     public static function get_name() : \\lang_string {",
          "47:         return new \\lang_string('allowstealthmodules');",
          "48:     }",
          "59:     protected function calculate_sample($sampleid, $samplesorigin, $starttime, $endtime) {",
          "60:         return null;",
          "61:     }",
          "62: }",
          "",
          "---------------"
        ],
        "analytics/tests/fixtures/test_site_users_analyser.php||analytics/tests/fixtures/test_site_users_analyser.php": [
          "File: analytics/tests/fixtures/test_site_users_analyser.php -> analytics/tests/fixtures/test_site_users_analyser.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:         global $DB;",
          "83:         $users = $DB->get_records('user');",
          "",
          "[Removed Lines]",
          "80:     protected function get_all_samples(\\core_analytics\\analysable $site) {",
          "",
          "[Added Lines]",
          "80:     public function get_all_samples(\\core_analytics\\analysable $site) {",
          "",
          "---------------"
        ],
        "analytics/tests/manager_test.php||analytics/tests/manager_test.php": [
          "File: analytics/tests/manager_test.php -> analytics/tests/manager_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:         $noteaching = \\core_analytics\\manager::get_target('\\core\\analytics\\target\\no_teaching');",
          "350:         $dropout = \\core_analytics\\manager::get_target('\\core\\analytics\\target\\course_dropout');",
          "352:         $this->assertTrue(\\core_analytics\\model::exists($noteaching));",
          "353:         $this->assertTrue(\\core_analytics\\model::exists($dropout));",
          "355:         foreach (\\core_analytics\\manager::get_all_models() as $model) {",
          "356:             $model->delete();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:         $upcomingactivities = \\core_analytics\\manager::get_target('\\core_user\\analytics\\target\\upcoming_activities_due');",
          "355:         $this->assertTrue(\\core_analytics\\model::exists($upcomingactivities));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359:         $this->assertFalse(\\core_analytics\\model::exists($noteaching));",
          "360:         $this->assertFalse(\\core_analytics\\model::exists($dropout));",
          "362:         $updated = \\core_analytics\\manager::update_default_models_for_component('moodle');",
          "365:         $this->assertTrue(array_pop($updated) instanceof \\core_analytics\\model);",
          "366:         $this->assertTrue(array_pop($updated) instanceof \\core_analytics\\model);",
          "367:         $this->assertTrue(\\core_analytics\\model::exists($noteaching));",
          "368:         $this->assertTrue(\\core_analytics\\model::exists($dropout));",
          "370:         $repeated = \\core_analytics\\manager::update_default_models_for_component('moodle');",
          "",
          "[Removed Lines]",
          "364:         $this->assertEquals(2, count($updated));",
          "",
          "[Added Lines]",
          "363:         $this->assertFalse(\\core_analytics\\model::exists($upcomingactivities));",
          "367:         $this->assertEquals(3, count($updated));",
          "368:         $this->assertTrue(array_pop($updated) instanceof \\core_analytics\\model);",
          "373:         $this->assertTrue(\\core_analytics\\model::exists($upcomingactivities));",
          "",
          "---------------"
        ],
        "analytics/tests/model_test.php||analytics/tests/model_test.php": [
          "File: analytics/tests/model_test.php -> analytics/tests/model_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: require_once(__DIR__ . '/fixtures/test_target_shortname.php');",
          "31: require_once(__DIR__ . '/fixtures/test_static_target_shortname.php');",
          "32: require_once(__DIR__ . '/fixtures/test_target_course_level_shortname.php');",
          "",
          "[Removed Lines]",
          "33: require_once(__DIR__ . '/fixtures/test_analyser.php');",
          "",
          "[Added Lines]",
          "33: require_once(__DIR__ . '/fixtures/test_analysis.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:         $this->resetAfterTest(true);",
          "297:         $courses = array();",
          "298:         for ($i = 0; $i < 5; $i++) {",
          "",
          "[Removed Lines]",
          "295:         set_config('modeltimelimit', 2, 'analytics');",
          "",
          "[Added Lines]",
          "295:         set_config('modeltimelimit', 1, 'analytics');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "302:         }",
          "304:         $target = new test_target_course_level_shortname();",
          "310:         $params = array('modelid' => 1, 'action' => 'prediction');",
          "311:         $this->assertLessThanOrEqual(2, $DB->count_records('analytics_used_analysables', $params));",
          "314:         $this->assertLessThanOrEqual(4, $DB->count_records('analytics_used_analysables', $params));",
          "319:         $analysedelems = $DB->get_records('analytics_used_analysables', $params, 'timeanalysed ASC');",
          "",
          "[Removed Lines]",
          "305:         $analyser = new test_analyser(1, $target, [], [], []);",
          "309:         $analyser->get_analysable_data(false);",
          "313:         $analyser->get_analysable_data(false);",
          "",
          "[Added Lines]",
          "305:         $analyser = new \\core\\analytics\\analyser\\courses(1, $target, [], [], []);",
          "307:         $result = new \\core_analytics\\local\\analysis\\result_array(1, false, []);",
          "308:         $analysis = new test_analysis($analyser, false, $result);",
          "312:         $analysis->run();",
          "316:         $analysis->run();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "326:             $last = $courses[$analysed->analysableid];",
          "327:         }",
          "330:         $this->assertGreaterThanOrEqual(5, $DB->count_records('analytics_used_analysables', $params));",
          "333:         $this->getDataGenerator()->create_course();",
          "335:         $this->assertGreaterThanOrEqual(6, $DB->count_records('analytics_used_analysables', $params));",
          "339:         $params = array('modelid' => 1, 'action' => 'training');",
          "340:         $this->assertLessThanOrEqual(2, $DB->count_records('analytics_used_analysables', $params));",
          "341:     }",
          "",
          "[Removed Lines]",
          "329:         $analyser->get_analysable_data(false);",
          "334:         $analyser->get_analysable_data(false);",
          "338:         $analyser->get_analysable_data(true);",
          "",
          "[Added Lines]",
          "332:         $analysis->run();",
          "337:         $analysis->run();",
          "341:         $result = new \\core_analytics\\local\\analysis\\result_array(1, false, []);",
          "342:         $analysis = new test_analysis($analyser, false, $result);",
          "343:         $analysis->run();",
          "",
          "---------------"
        ],
        "analytics/tests/prediction_test.php||analytics/tests/prediction_test.php": [
          "File: analytics/tests/prediction_test.php -> analytics/tests/prediction_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: global $CFG;",
          "28: require_once(__DIR__ . '/fixtures/test_indicator_max.php');",
          "29: require_once(__DIR__ . '/fixtures/test_indicator_min.php');",
          "30: require_once(__DIR__ . '/fixtures/test_indicator_fullname.php');",
          "31: require_once(__DIR__ . '/fixtures/test_indicator_random.php');",
          "32: require_once(__DIR__ . '/fixtures/test_target_shortname.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: require_once(__DIR__ . '/fixtures/test_indicator_null.php');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:         $predictedranges = $DB->get_records('analytics_predict_samples', array('modelid' => $model->get_id()));",
          "88:         $this->assertCount(2, $predictedranges);",
          "92:         $this->assertEquals(2, $DB->count_records('analytics_predictions',",
          "93:             array('modelid' => $model->get_id())));",
          "96:         $model->predict();",
          "97:         $predictedranges = $DB->get_records('analytics_predict_samples', array('modelid' => $model->get_id()));",
          "98:         $this->assertCount(2, $predictedranges);",
          "101:         $this->assertEquals(2, $DB->count_records('analytics_predictions',",
          "102:             array('modelid' => $model->get_id())));",
          "103:     }",
          "",
          "[Removed Lines]",
          "89:         $this->assertEquals(1, $DB->count_records('analytics_used_files',",
          "90:             array('modelid' => $model->get_id(), 'action' => 'predicted')));",
          "99:         $this->assertEquals(1, $DB->count_records('analytics_used_files',",
          "100:             array('modelid' => $model->get_id(), 'action' => 'predicted')));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "553:     public function test_not_null_samples() {",
          "554:         $this->resetAfterTest(true);",
          "558:         $timesplitting->set_analysable(new \\core_analytics\\site());",
          "560:         $ranges = array(",
          "",
          "[Removed Lines]",
          "556:         $classname = '\\core\\analytics\\time_splitting\\quarters';",
          "557:         $timesplitting = \\core_analytics\\manager::get_time_splitting($classname);",
          "",
          "[Added Lines]",
          "553:         $timesplitting = \\core_analytics\\manager::get_time_splitting('\\core\\analytics\\time_splitting\\quarters');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "563:         );",
          "564:         $samples = array(123 => 123, 321 => 321);",
          "575:         $params = array(",
          "576:             $samples,",
          "579:             $ranges",
          "580:         );",
          "582:         $this->assertArrayHasKey('123-0', $dataset);",
          "583:         $this->assertArrayHasKey('123-1', $dataset);",
          "584:         $this->assertArrayHasKey('321-0', $dataset);",
          "585:         $this->assertArrayHasKey('321-1', $dataset);",
          "588:         $params = array(",
          "589:             $samples,",
          "592:             $ranges",
          "593:         );",
          "595:         $this->assertArrayNotHasKey('123-0', $dataset);",
          "596:         $this->assertArrayNotHasKey('123-1', $dataset);",
          "597:         $this->assertArrayNotHasKey('321-0', $dataset);",
          "",
          "[Removed Lines]",
          "566:         $indicator1 = $this->getMockBuilder('test_indicator_max')",
          "567:             ->setMethods(['calculate_sample'])",
          "568:             ->getMock();",
          "569:         $indicator1->method('calculate_sample')",
          "570:             ->willReturn(null);",
          "572:         $indicator2 = \\core_analytics\\manager::get_indicator('test_indicator_min');",
          "577:             'whatever',",
          "578:             array($indicator1, $indicator2),",
          "581:         $dataset = phpunit_util::call_internal_method($timesplitting, 'calculate_indicators', $params, $classname);",
          "590:             'whatever',",
          "591:             array($indicator1),",
          "594:         $dataset = phpunit_util::call_internal_method($timesplitting, 'calculate_indicators', $params, $classname);",
          "",
          "[Added Lines]",
          "562:         $target = \\core_analytics\\manager::get_target('test_target_shortname');",
          "563:         $indicators = array('test_indicator_null', 'test_indicator_min');",
          "564:         foreach ($indicators as $key => $indicator) {",
          "565:             $indicators[$key] = \\core_analytics\\manager::get_indicator($indicator);",
          "566:         }",
          "567:         $model = \\core_analytics\\model::create($target, $indicators, '\\core\\analytics\\time_splitting\\no_splitting');",
          "569:         $analyser = $model->get_analyser();",
          "570:         $result = new \\core_analytics\\local\\analysis\\result_array($model->get_id(), false, $analyser->get_options());",
          "571:         $analysis = new \\core_analytics\\analysis($analyser, false, $result);",
          "575:             $timesplitting,",
          "579:         $dataset = phpunit_util::call_internal_method($analysis, 'calculate_indicators', $params,",
          "580:             '\\core_analytics\\analysis');",
          "587:         $indicators = array('test_indicator_null');",
          "588:         foreach ($indicators as $key => $indicator) {",
          "589:             $indicators[$key] = \\core_analytics\\manager::get_indicator($indicator);",
          "590:         }",
          "591:         $model = \\core_analytics\\model::create($target, $indicators, '\\core\\analytics\\time_splitting\\no_splitting');",
          "593:         $analyser = $model->get_analyser();",
          "594:         $result = new \\core_analytics\\local\\analysis\\result_array($model->get_id(), false, $analyser->get_options());",
          "595:         $analysis = new \\core_analytics\\analysis($analyser, false, $result);",
          "599:             $timesplitting,",
          "603:         $dataset = phpunit_util::call_internal_method($analysis, 'calculate_indicators', $params,",
          "604:             '\\core_analytics\\analysis');",
          "",
          "---------------"
        ],
        "analytics/tests/privacy_test.php||analytics/tests/privacy_test.php": [
          "File: analytics/tests/privacy_test.php -> analytics/tests/privacy_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: require_once(__DIR__ . '/fixtures/test_indicator_min.php');",
          "35: require_once(__DIR__ . '/fixtures/test_target_site_users.php');",
          "36: require_once(__DIR__ . '/fixtures/test_target_course_users.php');",
          "",
          "[Removed Lines]",
          "37: require_once(__DIR__ . '/fixtures/test_analyser.php');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/classes/analytics/analyser/courses.php||lib/classes/analytics/analyser/courses.php": [
          "File: lib/classes/analytics/analyser/courses.php -> lib/classes/analytics/analyser/courses.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         $context = \\context_course::instance($course->get_id());",
          "",
          "[Removed Lines]",
          "91:     protected function get_all_samples(\\core_analytics\\analysable $course) {",
          "",
          "[Added Lines]",
          "91:     public function get_all_samples(\\core_analytics\\analysable $course) {",
          "",
          "---------------"
        ],
        "lib/classes/analytics/analyser/site_courses.php||lib/classes/analytics/analyser/site_courses.php": [
          "File: lib/classes/analytics/analyser/site_courses.php -> lib/classes/analytics/analyser/site_courses.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:         global $DB;",
          "",
          "[Removed Lines]",
          "82:     protected function get_all_samples(\\core_analytics\\analysable $site) {",
          "",
          "[Added Lines]",
          "82:     public function get_all_samples(\\core_analytics\\analysable $site) {",
          "",
          "---------------"
        ],
        "lib/classes/analytics/analyser/student_enrolments.php||lib/classes/analytics/analyser/student_enrolments.php": [
          "File: lib/classes/analytics/analyser/student_enrolments.php -> lib/classes/analytics/analyser/student_enrolments.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         $enrolments = enrol_get_course_users($course->get_id());",
          "",
          "[Removed Lines]",
          "114:     protected function get_all_samples(\\core_analytics\\analysable $course) {",
          "",
          "[Added Lines]",
          "114:     public function get_all_samples(\\core_analytics\\analysable $course) {",
          "",
          "---------------"
        ],
        "lib/classes/analytics/analyser/users.php||lib/classes/analytics/analyser/users.php": [
          "File: lib/classes/analytics/analyser/users.php -> lib/classes/analytics/analyser/users.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:         $context = \\context_user::instance($user->get_id());",
          "",
          "[Removed Lines]",
          "122:     protected function get_all_samples(\\core_analytics\\analysable $user) {",
          "",
          "[Added Lines]",
          "122:     public function get_all_samples(\\core_analytics\\analysable $user) {",
          "",
          "---------------"
        ],
        "lib/classes/analytics/target/no_teaching.php||lib/classes/analytics/target/no_teaching.php": [
          "File: lib/classes/analytics/target/no_teaching.php -> lib/classes/analytics/target/no_teaching.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:         $now = time();",
          "153:         if (!$course->startdate || (!empty($course->enddate) && $course->enddate < $now) ||",
          "155:             return false;",
          "156:         }",
          "157:         return true;",
          "",
          "[Removed Lines]",
          "154:                 $course->startdate - WEEKSECS > $now) {",
          "",
          "[Added Lines]",
          "155:                 $course->startdate - WEEKSECS > $now || $course->startdate + WEEKSECS < $now) {",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2934:         upgrade_main_savepoint(true, 2019040200.01);",
          "2935:     }",
          "2937:     return true;",
          "2938: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2937:     if ($oldversion < 2019040600.02) {",
          "2940:         $table = new xmldb_table('analytics_train_samples');",
          "2941:         $key = new xmldb_key('fileid', XMLDB_KEY_FOREIGN, ['fileid'], 'files', ['id']);",
          "2944:         $dbman->drop_key($table, $key);",
          "2947:         $table = new xmldb_table('analytics_train_samples');",
          "2948:         $field = new xmldb_field('fileid');",
          "2951:         if ($dbman->field_exists($table, $field)) {",
          "2952:             $dbman->drop_field($table, $field);",
          "2953:         }",
          "2956:         upgrade_main_savepoint(true, 2019040600.02);",
          "2957:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019040600.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019040600.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5beb388516acbce2116f19e6d5e0a783226d2eaa",
      "candidate_info": {
        "commit_hash": "5beb388516acbce2116f19e6d5e0a783226d2eaa",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/5beb388516acbce2116f19e6d5e0a783226d2eaa",
        "files": [
          "admin/settings/appearance.php",
          "config-dist.php",
          "lang/en/admin.php",
          "lib/upgrade.txt",
          "version.php"
        ],
        "message": "MDL-66367 core: added new cachetemplates setting",
        "before_after_code_files": [
          "admin/settings/appearance.php||admin/settings/appearance.php",
          "config-dist.php||config-dist.php",
          "lang/en/admin.php||lang/en/admin.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/appearance.php||admin/settings/appearance.php": [
          "File: admin/settings/appearance.php -> admin/settings/appearance.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:     $temp->add(new admin_setting_configtextarea('additionalhtmlfooter', new lang_string('additionalhtmlfooter', 'admin'), new lang_string('additionalhtmlfooter_desc', 'admin'), '', PARAM_RAW));",
          "276:     $ADMIN->add('appearance', $temp);",
          "278: } // end of speedup",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278:     $setting = new admin_setting_configcheckbox('cachetemplates', new lang_string('cachetemplates', 'admin'),",
          "279:         new lang_string('cachetemplates_help', 'admin'), 1);",
          "280:     $temp = new admin_settingpage('templates', new lang_string('templates', 'admin'));",
          "281:     $temp->add($setting);",
          "282:     $ADMIN->add('appearance', $temp);",
          "",
          "---------------"
        ],
        "config-dist.php||config-dist.php": [
          "File: config-dist.php -> config-dist.php"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "104: $string['bookmarkthispage'] = 'Bookmark this page';",
          "105: $string['cachejs'] = 'Cache Javascript';",
          "106: $string['cachejs_help'] = 'Javascript caching and compression greatly improves page loading performance. it is strongly recommended for production sites. Developers will probably want to disable this feature.';",
          "107: $string['calendarexportsalt'] = 'Calendar export salt';",
          "108: $string['calendarsettings'] = 'Calendar';",
          "109: $string['calendartype'] = 'Calendar type';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107: $string['cachetemplates'] = 'Cache Templates';",
          "108: $string['cachetemplates_help'] = 'Template caching will improve page loading performance and is strongly recommended for production sites. Developers will probably want to disable this feature.';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1264: $string['tasktagcron'] = 'Background processing for tags';",
          "1265: $string['tasktempfilecleanup'] = 'Delete stale temp files';",
          "1266: $string['tempdatafoldercleanup'] = 'Clean up temporary data files older than';",
          "1267: $string['testoutgoingmailconf'] = 'Test outgoing mail configuration';",
          "1268: $string['testoutgoingmaildetail'] = 'Note: Before testing, please save your configuration.<br />{$a}';",
          "1269: $string['testoutgoingmailconf_message'] = 'This is a test message to confirm that you have successfully configured your site\\'s outgoing mail.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1269: $string['templates'] = 'Templates';",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019083000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019090100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85e62192f22b879475184b4b25646cb96dd3b1b8",
      "candidate_info": {
        "commit_hash": "85e62192f22b879475184b4b25646cb96dd3b1b8",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/85e62192f22b879475184b4b25646cb96dd3b1b8",
        "files": [
          "course/format/lib.php",
          "lib/db/upgrade.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-60972-master_delete_section_files' of https://github.com/awagner/moodle",
        "before_after_code_files": [
          "course/format/lib.php||course/format/lib.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "course/format/lib.php||course/format/lib.php": [
          "File: course/format/lib.php -> course/format/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1111:         $DB->delete_records('course_sections', array('id' => $section->id));",
          "1112:         rebuild_course_cache($course->id, true);",
          "1115:         if ($decreasenumsections) {",
          "1116:             $this->update_course_format_options(array('numsections' => $course->numsections - 1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1115:         $context = \\context_course::instance($course->id);",
          "1116:         $fs = get_file_storage();",
          "1117:         $fs->delete_area_files($context->id, 'course', 'section', $section->id);",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2656:         upgrade_main_savepoint(true, 2019011801.00);",
          "2657:     }",
          "2659:     return true;",
          "2660: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2659:     if ($oldversion < 2019011801.01) {",
          "2662:         $sql = \"SELECT DISTINCT f.itemid as sectionid, f.contextid",
          "2663:                   FROM {files} f",
          "2664:              LEFT JOIN {course_sections} s ON f.itemid = s.id",
          "2665:                  WHERE f.component = :component AND f.filearea = :filearea AND s.id IS NULL \";",
          "2667:         $params = [",
          "2668:             'component' => 'course',",
          "2669:             'filearea' => 'section'",
          "2670:         ];",
          "2672:         $stalefiles = $DB->get_recordset_sql($sql, $params);",
          "2674:         $fs = get_file_storage();",
          "2675:         foreach ($stalefiles as $stalefile) {",
          "2676:             $fs->delete_area_files($stalefile->contextid, 'course', 'section', $stalefile->sectionid);",
          "2677:         }",
          "2678:         $stalefiles->close();",
          "2680:         upgrade_main_savepoint(true, 2019011801.01);",
          "2681:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019011801.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019011801.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}