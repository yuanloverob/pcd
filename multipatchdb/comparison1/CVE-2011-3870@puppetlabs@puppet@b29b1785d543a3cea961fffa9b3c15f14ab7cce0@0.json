{
  "cve_id": "CVE-2011-3870",
  "cve_desc": "Puppet 2.7.x before 2.7.5, 2.6.x before 2.6.11, and 0.25.x allows local users to modify the permissions of arbitrary files via a symlink attack on the SSH authorized_keys file.",
  "repo": "puppetlabs/puppet",
  "patch_hash": "b29b1785d543a3cea961fffa9b3c15f14ab7cce0",
  "patch_info": {
    "commit_hash": "b29b1785d543a3cea961fffa9b3c15f14ab7cce0",
    "repo": "puppetlabs/puppet",
    "commit_url": "https://github.com/puppetlabs/puppet/commit/b29b1785d543a3cea961fffa9b3c15f14ab7cce0",
    "files": [
      "lib/puppet/provider/ssh_authorized_key/parsed.rb",
      "spec/unit/provider/ssh_authorized_key/parsed_spec.rb"
    ],
    "message": "Drop privileges before creating and chmodding SSH keys.\n\nPreviously, potentially abusable chown and chmod calls were performed as\nroot.  This tries to moves as much as possible into code which is run\nafter privileges have been dropped.\n\nHuge thanks to Ricky Zhou <ricky@fedoraproject.org> for discovering this and\nsupplying the security fix.  Awesome work.\n\nFixes CVE-2011-3870\n\nSigned-off-by: Daniel Pittman <daniel@puppetlabs.com>",
    "before_after_code_files": [
      "lib/puppet/provider/ssh_authorized_key/parsed.rb||lib/puppet/provider/ssh_authorized_key/parsed.rb",
      "spec/unit/provider/ssh_authorized_key/parsed_spec.rb||spec/unit/provider/ssh_authorized_key/parsed_spec.rb"
    ]
  },
  "patch_diff": {
    "lib/puppet/provider/ssh_authorized_key/parsed.rb||lib/puppet/provider/ssh_authorized_key/parsed.rb": [
      "File: lib/puppet/provider/ssh_authorized_key/parsed.rb -> lib/puppet/provider/ssh_authorized_key/parsed.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:   def flush",
      "51:     raise Puppet::Error, \"Cannot write SSH authorized keys without user\"    unless @resource.should(:user)",
      "52:     raise Puppet::Error, \"User '#{@resource.should(:user)}' does not exist\" unless uid = Puppet::Util.uid(@resource.should(:user))",
      "59:     # ParsedFile usually calls backup_target much later in the flush process,",
      "60:     # but our SUID makes that fail to open filebucket files for writing.",
      "61:     # Fortunately, there's already logic to make sure it only ever happens once,",
      "62:     # so calling it here supresses the later attempt by our superclass's flush method.",
      "63:     self.class.backup_target(target)",
      "68:   end",
      "70:   # parse sshv2 option strings, wich is a comma separated list of",
      "",
      "[Removed Lines]",
      "53:     unless File.exist?(dir = File.dirname(target))",
      "54:       Puppet.debug \"Creating #{dir}\"",
      "55:       Dir.mkdir(dir, dir_perm)",
      "56:       File.chown(uid, nil, dir)",
      "57:     end",
      "65:     Puppet::Util::SUIDManager.asuser(@resource.should(:user)) { super }",
      "66:     File.chown(uid, nil, target)",
      "67:     File.chmod(file_perm, target)",
      "",
      "[Added Lines]",
      "59:     Puppet::Util::SUIDManager.asuser(@resource.should(:user)) do",
      "60:         unless File.exist?(dir = File.dirname(target))",
      "61:           Puppet.debug \"Creating #{dir}\"",
      "62:           Dir.mkdir(dir, dir_perm)",
      "63:         end",
      "65:         super",
      "67:         File.chmod(file_perm, target)",
      "68:     end",
      "",
      "---------------"
    ],
    "spec/unit/provider/ssh_authorized_key/parsed_spec.rb||spec/unit/provider/ssh_authorized_key/parsed_spec.rb": [
      "File: spec/unit/provider/ssh_authorized_key/parsed_spec.rb -> spec/unit/provider/ssh_authorized_key/parsed_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "110:         @provider.flush",
      "111:       end",
      "114:         uid = Puppet::Util.uid(\"random_bob\")",
      "116:         @provider.flush",
      "117:       end",
      "120:         uid = Puppet::Util.uid(\"random_bob\")",
      "122:         @provider.flush",
      "123:       end",
      "",
      "[Removed Lines]",
      "113:       it \"should chown the directory to the user\" do",
      "115:         File.expects(:chown).with(uid, nil, \"/tmp/.ssh_dir\")",
      "119:       it \"should chown the key file to the user\" do",
      "121:         File.expects(:chown).with(uid, nil, \"/tmp/.ssh_dir/place_to_put_authorized_keys\")",
      "",
      "[Added Lines]",
      "113:       it \"should absolutely not chown the directory to the user\" do",
      "115:         File.expects(:chown).never",
      "119:       it \"should absolutely not chown the key file to the user\" do",
      "121:         File.expects(:chown).never",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "153:         @provider.flush",
      "154:       end",
      "157:         File.stubs(:exist?).with(@dir).returns false",
      "158:         Dir.stubs(:mkdir).with(@dir,0700)",
      "159:         uid = Puppet::Util.uid(\"nobody\")",
      "161:         @provider.flush",
      "162:       end",
      "",
      "[Removed Lines]",
      "156:       it \"should chown the directory to the user if it creates it\" do",
      "160:         File.expects(:chown).with(uid, nil, @dir)",
      "",
      "[Added Lines]",
      "156:       it \"should absolutely not chown the directory to the user if it creates it\" do",
      "160:         File.expects(:chown).never",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "168:         @provider.flush",
      "169:       end",
      "172:         uid = Puppet::Util.uid(\"nobody\")",
      "174:         @provider.flush",
      "175:       end",
      "",
      "[Removed Lines]",
      "171:       it \"should chown the key file to the user\" do",
      "173:         File.expects(:chown).with(uid, nil, File.expand_path(\"~nobody/.ssh/authorized_keys\"))",
      "",
      "[Added Lines]",
      "171:       it \"should absolutely not chown the key file to the user\" do",
      "173:         File.expects(:chown).never",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1e5fbb2968a6967221ffabeab9512d799f0ba6a7",
      "candidate_info": {
        "commit_hash": "1e5fbb2968a6967221ffabeab9512d799f0ba6a7",
        "repo": "puppetlabs/puppet",
        "commit_url": "https://github.com/puppetlabs/puppet/commit/1e5fbb2968a6967221ffabeab9512d799f0ba6a7",
        "files": [
          "lib/puppet/provider/ssh_authorized_key/parsed.rb"
        ],
        "message": "Drop privileges before creating and chmodding SSH keys.\n\nPreviously, potentially abusable chown and chmod calls were performed as\nroot.  This tries to moves as much as possible into code which is run\nafter privileges have been dropped.\n\nHuge thanks to Ricky Zhou <ricky@fedoraproject.org> for discovering this and\nsupplying the security fix.  Awesome work.\n\nFixes CVE-2011-3870\n\nSigned-off-by: Daniel Pittman <daniel@puppetlabs.com>",
        "before_after_code_files": [
          "lib/puppet/provider/ssh_authorized_key/parsed.rb||lib/puppet/provider/ssh_authorized_key/parsed.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/puppet/provider/ssh_authorized_key/parsed.rb||lib/puppet/provider/ssh_authorized_key/parsed.rb"
          ],
          "candidate": [
            "lib/puppet/provider/ssh_authorized_key/parsed.rb||lib/puppet/provider/ssh_authorized_key/parsed.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/puppet/provider/ssh_authorized_key/parsed.rb||lib/puppet/provider/ssh_authorized_key/parsed.rb": [
          "File: lib/puppet/provider/ssh_authorized_key/parsed.rb -> lib/puppet/provider/ssh_authorized_key/parsed.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     end",
          "64:     def flush",
          "67:         unless File.exist?(dir = File.dirname(target))",
          "71:         end",
          "74:         File.chmod(file_perm, target)",
          "75:     end",
          "77:     # parse sshv2 option strings, wich is a comma separated list of",
          "",
          "[Removed Lines]",
          "65:         raise Puppet::Error, \"Cannot write SSH authorized keys without user\" unless user",
          "66:         raise Puppet::Error, \"User '#{user}' does not exist\"                 unless uid = Puppet::Util.uid(user)",
          "68:             Puppet.debug \"Creating #{dir}\"",
          "69:             Dir.mkdir(dir, dir_perm)",
          "70:             File.chown(uid, nil, dir)",
          "72:         Puppet::Util::SUIDManager.asuser(user) { super }",
          "73:         File.chown(uid, nil, target)",
          "",
          "[Added Lines]",
          "65:       raise Puppet::Error, \"Cannot write SSH authorized keys without user\" unless user",
          "66:       raise Puppet::Error, \"User '#{user}' does not exist\"                 unless uid = Puppet::Util.uid(user)",
          "67:       Puppet::Util::SUIDManager.asuser(@resource.should(:user)) do",
          "69:           Puppet.debug \"Creating #{dir}\"",
          "70:           Dir.mkdir(dir, dir_perm)",
          "73:         super",
          "76:       end",
          "",
          "---------------"
        ]
      }
    }
  ]
}