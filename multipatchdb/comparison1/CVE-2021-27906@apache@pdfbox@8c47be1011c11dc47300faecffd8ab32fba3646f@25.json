{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4da3b267ab73a543df5fc89b6269f4ede02f674c",
      "candidate_info": {
        "commit_hash": "4da3b267ab73a543df5fc89b6269f4ede02f674c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/4da3b267ab73a543df5fc89b6269f4ede02f674c",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/TTFTable.java"
        ],
        "message": "PDFBOX-5056: fix double-checked locking (in TrueTypeFont.getTable()), as suggested by Mike Kaplinskiy\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884863 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/TTFTable.java||fontbox/src/main/java/org/apache/fontbox/ttf/TTFTable.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/ttf/TTFTable.java||fontbox/src/main/java/org/apache/fontbox/ttf/TTFTable.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/ttf/TTFTable.java -> fontbox/src/main/java/org/apache/fontbox/ttf/TTFTable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "36:     protected boolean initialized;",
          "",
          "[Added Lines]",
          "36:     protected volatile boolean initialized;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17ce50eaa143ad9ba4ad4fc11d5eb579b6135f2e",
      "candidate_info": {
        "commit_hash": "17ce50eaa143ad9ba4ad4fc11d5eb579b6135f2e",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/17ce50eaa143ad9ba4ad4fc11d5eb579b6135f2e",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java"
        ],
        "message": "PDFBOX-4892: avoid possible later UnsupportedOperationException in readRaster() due to non null loop ending without raster capability\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887991 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java||pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java||pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java -> pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:     protected static ImageReader findImageReader(String formatName, String errorCause) throws MissingImageReaderException",
          "150:     {",
          "151:         Iterator<ImageReader> readers = ImageIO.getImageReadersByFormatName(formatName);",
          "153:         while (readers.hasNext())",
          "154:         {",
          "155:             reader = readers.next();",
          "156:             if (reader != null && reader.canReadRaster())",
          "157:             {",
          "159:             }",
          "160:         }",
          "166:     }",
          "",
          "[Removed Lines]",
          "152:         ImageReader reader = null;",
          "158:                 break;",
          "161:         if (reader == null)",
          "162:         {",
          "163:             throw new MissingImageReaderException(\"Cannot read \" + formatName + \" image: \" + errorCause);",
          "164:         }",
          "165:         return reader;",
          "",
          "[Added Lines]",
          "152:         ImageReader reader;",
          "158:                 return reader;",
          "161:         throw new MissingImageReaderException(\"Cannot read \" + formatName + \" image: \" + errorCause);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6aed84e5919eaa25dc83b1a2138cc9f634b9ea6a",
      "candidate_info": {
        "commit_hash": "6aed84e5919eaa25dc83b1a2138cc9f634b9ea6a",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/6aed84e5919eaa25dc83b1a2138cc9f634b9ea6a",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java",
          "debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/Type3Font.java"
        ],
        "message": "PDFBOX-5155: show full encodingname output\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889502 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java||debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java",
          "debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/Type3Font.java||debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/Type3Font.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java||debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java -> debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/SimpleFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     private String getEncodingName(PDSimpleFont font)",
          "99:     {",
          "101:     }",
          "103:     @Override",
          "",
          "[Removed Lines]",
          "100:         return font.getEncoding().getClass().getSimpleName();",
          "",
          "[Added Lines]",
          "100:         return font.getEncoding().getClass().getSimpleName() + \" / \" +  font.getEncoding().getEncodingName();",
          "",
          "---------------"
        ],
        "debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/Type3Font.java||debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/Type3Font.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/Type3Font.java -> debugger/src/main/java/org/apache/pdfbox/debugger/fontencodingpane/Type3Font.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:         }",
          "194:     }",
          "197:     {",
          "199:     }",
          "201:     @Override",
          "",
          "[Removed Lines]",
          "196:     private String getEncodingName(PDSimpleFont font)",
          "198:         return font.getEncoding().getClass().getSimpleName();",
          "",
          "[Added Lines]",
          "196:     private String getEncodingName(PDType3Font font)",
          "198:         return font.getEncoding().getClass().getSimpleName() + \" / \" +  font.getEncoding().getEncodingName();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3069a87404f42654f2248f1fc4a0084f029c7493",
      "candidate_info": {
        "commit_hash": "3069a87404f42654f2248f1fc4a0084f029c7493",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/3069a87404f42654f2248f1fc4a0084f029c7493",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java"
        ],
        "message": "PDFBOX-5224: optimize reading of 1bit images, by Gunnar Brand; closes #122\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891007 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/SampledImageReader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:         final float[] decode = getDecodeArray(pdImage);",
          "386:         BufferedImage bim = null;",
          "387:         WritableRaster raster;",
          "390:         DecodeOptions options = new DecodeOptions(currentSubsampling);",
          "391:         options.setSourceRegion(clipped);",
          "",
          "[Removed Lines]",
          "388:         byte[] output;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "432:             {",
          "433:                 raster = Raster.createBandedRaster(DataBuffer.TYPE_BYTE, width, height, 1, new Point(0, 0));",
          "434:             }",
          "458:             int idx = 0;",
          "459:             for (int y = 0; y < starty + scanHeight; y++)",
          "460:             {",
          "468:                 {",
          "472:                     {",
          "480:                         {",
          "482:                         }",
          "484:                     }",
          "485:                 }",
          "487:                 {",
          "488:                     LOG.warn(\"premature EOF, image will be incomplete\");",
          "489:                     break;",
          "",
          "[Removed Lines]",
          "435:             output = ((DataBufferByte) raster.getDataBuffer()).getData();",
          "436:             final boolean isIndexed = colorSpace instanceof PDIndexed;",
          "438:             int rowLen = inputWidth / 8;",
          "439:             if (inputWidth % 8 > 0)",
          "440:             {",
          "441:                 rowLen++;",
          "442:             }",
          "445:             byte value0;",
          "446:             byte value1;",
          "447:             if (isIndexed || decode[0] < decode[1])",
          "448:             {",
          "449:                 value0 = 0;",
          "450:                 value1 = (byte) 255;",
          "451:             }",
          "452:             else",
          "453:             {",
          "454:                 value0 = (byte) 255;",
          "455:                 value1 = 0;",
          "456:             }",
          "457:             byte[] buff = new byte[rowLen];",
          "461:                 int x = 0;",
          "462:                 int readLen = (int) IOUtils.populateBuffer(iis, buff);",
          "463:                 if (y < starty || y % currentSubsampling > 0)",
          "464:                 {",
          "465:                     continue;",
          "466:                 }",
          "467:                 for (int r = 0; r < rowLen && r < readLen; r++)",
          "469:                     int value = buff[r];",
          "470:                     int mask = 128;",
          "471:                     for (int i = 0; i < 8; i++)",
          "473:                         if (x >= startx + scanWidth)",
          "474:                         {",
          "475:                             break;",
          "476:                         }",
          "477:                         int bit = value & mask;",
          "478:                         mask >>= 1;",
          "479:                         if (x >= startx && x % currentSubsampling == 0)",
          "481:                             output[idx++] = bit == 0 ? value0 : value1;",
          "483:                         x++;",
          "486:                 if (readLen != rowLen)",
          "",
          "[Added Lines]",
          "435:             final byte[] output = ((DataBufferByte) raster.getDataBuffer()).getData();",
          "440:             final boolean nosubsampling = currentSubsampling == 1;",
          "441:             final int stride = (inputWidth + 7) / 8;",
          "442:             final int invert = colorSpace instanceof PDIndexed || decode[0] < decode[1] ? 0 : -1;",
          "443:             final int endX = startx + scanWidth;",
          "444:             final byte[] buff = new byte[stride];",
          "447:                 int read = (int) IOUtils.populateBuffer(iis, buff);",
          "448:                 if (y >= starty && y % currentSubsampling == 0)",
          "450:                     for (int x = startx, r = x / 8; r < stride && r < read; r++)",
          "452:                         int value = (buff[r] ^ invert) << (24 + (x & 7));",
          "453:                         for (int count = Math.min(8 - (x & 7), endX - x); count > 0; x++, count--)",
          "455:                             if (nosubsampling || x % currentSubsampling == 0)",
          "456:                             {",
          "457:                                 if (value < 0)",
          "458:                                 {",
          "459:                                     output[idx] = (byte) 255;",
          "460:                                 }",
          "461:                                 idx++;",
          "462:                             }",
          "463:                             value <<= 1;",
          "467:                 if (read != stride)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30fa743b19012f4e0a324c3db86d72c5368c1c58",
      "candidate_info": {
        "commit_hash": "30fa743b19012f4e0a324c3db86d72c5368c1c58",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/30fa743b19012f4e0a324c3db86d72c5368c1c58",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/text/TextPosition.java"
        ],
        "message": "PDFBOX-4892: remove redurant variable + simplify method, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889535 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/text/TextPosition.java||pdfbox/src/main/java/org/apache/pdfbox/text/TextPosition.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/text/TextPosition.java||pdfbox/src/main/java/org/apache/pdfbox/text/TextPosition.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/text/TextPosition.java -> pdfbox/src/main/java/org/apache/pdfbox/text/TextPosition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:         this.endX = endX;",
          "92:         this.endY = endY;",
          "97:         this.maxHeight = maxHeight;",
          "98:         this.pageHeight = pageHeight;",
          "",
          "[Removed Lines]",
          "94:         int rotationAngle = pageRotation;",
          "95:         this.rotation = rotationAngle;",
          "",
          "[Added Lines]",
          "94:         this.rotation = pageRotation;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:         this.fontSize = fontSize;",
          "107:         this.fontSizePt = fontSizeInPt;",
          "111:         {",
          "113:         }",
          "114:         else",
          "115:         {",
          "117:         }",
          "118:     }",
          "",
          "[Removed Lines]",
          "109:         x = getXRot(rotationAngle);",
          "110:         if (rotationAngle == 0 || rotationAngle == 180)",
          "112:             y = this.pageHeight - getYLowerLeftRot(rotationAngle);",
          "116:             y = this.pageWidth - getYLowerLeftRot(rotationAngle);",
          "",
          "[Added Lines]",
          "108:         x = getXRot(rotation);",
          "109:         if (rotation == 0 || rotation == 180)",
          "111:             y = this.pageHeight - getYLowerLeftRot(rotation);",
          "115:             y = this.pageWidth - getYLowerLeftRot(rotation);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "668:     private void insertDiacritic(int i, TextPosition diacritic)",
          "669:     {",
          "670:         StringBuilder sb = new StringBuilder();",
          "673:         float[] widths2 = new float[widths.length + 1];",
          "674:         System.arraycopy(widths, 0, widths2, 0, i);",
          "",
          "[Removed Lines]",
          "671:         sb.append(unicode.substring(0, i));",
          "",
          "[Added Lines]",
          "670:         sb.append(unicode, 0, i);",
          "",
          "---------------"
        ]
      }
    }
  ]
}