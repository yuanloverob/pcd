{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7471e92601e45c727bf591135c7bc7faeb8725cf",
      "candidate_info": {
        "commit_hash": "7471e92601e45c727bf591135c7bc7faeb8725cf",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/7471e92601e45c727bf591135c7bc7faeb8725cf",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7.2+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052002.14;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20191031)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052002.15;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.2+ (Build: 20191105)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2085e8603aff933269d8fcb8a5f8f6fcbd4537a4",
      "candidate_info": {
        "commit_hash": "2085e8603aff933269d8fcb8a5f8f6fcbd4537a4",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/2085e8603aff933269d8fcb8a5f8f6fcbd4537a4",
        "files": [
          "admin/settings/plugins.php",
          "course/classes/search/course.php",
          "course/classes/search/customfield.php",
          "course/tests/search_test.php",
          "lang/en/admin.php",
          "lang/en/deprecated.txt",
          "lang/en/search.php",
          "lib/classes/task/clean_up_deleted_search_area_task.php",
          "lib/db/upgrade.php",
          "search/classes/base.php",
          "search/classes/manager.php",
          "search/classes/output/form/search.php",
          "search/engine/solr/tests/engine_test.php",
          "search/index.php",
          "search/tests/base_test.php",
          "search/tests/fixtures/testable_core_search.php",
          "search/tests/manager_test.php",
          "search/upgrade.txt",
          "version.php"
        ],
        "message": "MDL-62869 search: implement searching for all courses",
        "before_after_code_files": [
          "admin/settings/plugins.php||admin/settings/plugins.php",
          "course/classes/search/mycourse.php||course/classes/search/course.php",
          "course/classes/search/customfield.php||course/classes/search/customfield.php",
          "course/tests/search_test.php||course/tests/search_test.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lang/en/search.php||lang/en/search.php",
          "lib/classes/task/clean_up_deleted_search_area_task.php||lib/classes/task/clean_up_deleted_search_area_task.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "search/classes/base.php||search/classes/base.php",
          "search/classes/manager.php||search/classes/manager.php",
          "search/classes/output/form/search.php||search/classes/output/form/search.php",
          "search/engine/solr/tests/engine_test.php||search/engine/solr/tests/engine_test.php",
          "search/index.php||search/index.php",
          "search/tests/base_test.php||search/tests/base_test.php",
          "search/tests/fixtures/testable_core_search.php||search/tests/fixtures/testable_core_search.php",
          "search/tests/manager_test.php||search/tests/manager_test.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/plugins.php||admin/settings/plugins.php": [
          "File: admin/settings/plugins.php -> admin/settings/plugins.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "576:     $temp->add(new admin_setting_configduration('searchindextime',",
          "577:             new lang_string('searchindextime', 'admin'), new lang_string('searchindextime_desc', 'admin'),",
          "578:             600));",
          "579:     $options = [",
          "580:         0 => new lang_string('searchallavailablecourses_off', 'admin'),",
          "581:         1 => new lang_string('searchallavailablecourses_on', 'admin')",
          "582:     ];",
          "583:     $temp->add(new admin_setting_configselect('searchallavailablecourses',",
          "584:             new lang_string('searchallavailablecourses', 'admin'),",
          "586:             0, $options));",
          "589:     $temp->add(new admin_setting_heading('searchdisplay', new lang_string('searchdisplay', 'admin'), ''));",
          "",
          "[Removed Lines]",
          "585:             new lang_string('searchallavailablecourses_desc', 'admin'),",
          "",
          "[Added Lines]",
          "579:     $temp->add(new admin_setting_heading('searchcoursesheading', new lang_string('searchablecourses', 'admin'), ''));",
          "586:             new lang_string('searchallavailablecoursesdesc', 'admin'),",
          "588:     $temp->add(new admin_setting_configcheckbox('searchincludeallcourses',",
          "589:         new lang_string('searchincludeallcourses', 'admin'), new lang_string('searchincludeallcourses_desc', 'admin'),",
          "590:         0));",
          "",
          "---------------"
        ],
        "course/classes/search/mycourse.php||course/classes/search/course.php": [
          "File: course/classes/search/mycourse.php -> course/classes/search/course.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "35: class mycourse extends \\core_search\\base {",
          "",
          "[Added Lines]",
          "35: class course extends \\core_search\\base {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:         if (!$course) {",
          "113:             return \\core_search\\manager::ACCESS_DELETED;",
          "114:         }",
          "116:             return \\core_search\\manager::ACCESS_GRANTED;",
          "117:         }",
          "118:         return \\core_search\\manager::ACCESS_DENIED;",
          "119:     }",
          "",
          "[Removed Lines]",
          "115:         if (can_access_course($course)) {",
          "",
          "[Added Lines]",
          "116:         $coursecontext = \\context_course::instance($course->id);",
          "118:         if ($course->visible || has_capability('moodle/course:viewhiddencourses', $coursecontext)) {",
          "",
          "---------------"
        ],
        "course/classes/search/customfield.php||course/classes/search/customfield.php": [
          "File: course/classes/search/customfield.php -> course/classes/search/customfield.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:         if (!$course) {",
          "136:             return \\core_search\\manager::ACCESS_DELETED;",
          "137:         }",
          "139:             return \\core_search\\manager::ACCESS_GRANTED;",
          "140:         }",
          "141:         return \\core_search\\manager::ACCESS_DENIED;",
          "",
          "[Removed Lines]",
          "138:         if (can_access_course($course)) {",
          "",
          "[Added Lines]",
          "138:         $coursecontext = \\context_course::instance($course->id);",
          "139:         if ($course->visible || has_capability('moodle/course:viewhiddencourses', $coursecontext)) {",
          "",
          "---------------"
        ],
        "course/tests/search_test.php||course/tests/search_test.php": [
          "File: course/tests/search_test.php -> course/tests/search_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "44:     protected $mycoursesareaid = null;",
          "",
          "[Added Lines]",
          "44:     protected $coursesareaid = null;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:         $this->resetAfterTest(true);",
          "58:         set_config('enableglobalsearch', true);",
          "61:         $this->sectionareaid = \\core_search\\manager::generate_areaid('core_course', 'section');",
          "62:         $this->customfieldareaid = \\core_search\\manager::generate_areaid('core_course', 'customfield');",
          "",
          "[Removed Lines]",
          "60:         $this->mycoursesareaid = \\core_search\\manager::generate_areaid('core_course', 'mycourse');",
          "",
          "[Added Lines]",
          "60:         $this->coursesareaid = \\core_search\\manager::generate_areaid('core_course', 'course');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:     }",
          "79:         $user1 = self::getDataGenerator()->create_user();",
          "80:         $user2 = self::getDataGenerator()->create_user();",
          "",
          "[Removed Lines]",
          "73:     public function test_mycourses_indexing() {",
          "76:         $searcharea = \\core_search\\manager::get_search_area($this->mycoursesareaid);",
          "77:         $this->assertInstanceOf('\\core_course\\search\\mycourse', $searcharea);",
          "",
          "[Added Lines]",
          "73:     public function test_courses_indexing() {",
          "76:         $searcharea = \\core_search\\manager::get_search_area($this->coursesareaid);",
          "77:         $this->assertInstanceOf('\\core_course\\search\\course', $searcharea);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:         global $DB, $USER, $SITE;",
          "122:         $generator = $this->getDataGenerator();",
          "",
          "[Removed Lines]",
          "116:     public function test_mycourses_indexing_contexts() {",
          "119:         $searcharea = \\core_search\\manager::get_search_area($this->mycoursesareaid);",
          "",
          "[Added Lines]",
          "116:     public function test_courses_indexing_contexts() {",
          "119:         $searcharea = \\core_search\\manager::get_search_area($this->coursesareaid);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "203:         $user = self::getDataGenerator()->create_user();",
          "204:         $course = self::getDataGenerator()->create_course();",
          "",
          "[Removed Lines]",
          "197:     public function test_mycourses_document() {",
          "200:         $searcharea = \\core_search\\manager::get_search_area($this->mycoursesareaid);",
          "201:         $this->assertInstanceOf('\\core_course\\search\\mycourse', $searcharea);",
          "",
          "[Added Lines]",
          "197:     public function test_courses_document() {",
          "200:         $searcharea = \\core_search\\manager::get_search_area($this->coursesareaid);",
          "201:         $this->assertInstanceOf('\\core_course\\search\\course', $searcharea);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "207:         $doc = $searcharea->get_document($course);",
          "208:         $this->assertInstanceOf('\\core_search\\document', $doc);",
          "209:         $this->assertEquals($course->id, $doc->get('itemid'));",
          "211:         $this->assertEquals($course->id, $doc->get('courseid'));",
          "212:         $this->assertFalse($doc->is_set('userid'));",
          "213:         $this->assertEquals(\\core_search\\manager::NO_OWNER_ID, $doc->get('owneruserid'));",
          "",
          "[Removed Lines]",
          "210:         $this->assertEquals($this->mycoursesareaid . '-' . $course->id, $doc->get('id'));",
          "",
          "[Added Lines]",
          "210:         $this->assertEquals($this->coursesareaid . '-' . $course->id, $doc->get('id'));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "232:         $user1 = self::getDataGenerator()->create_user();",
          "233:         $user2 = self::getDataGenerator()->create_user();",
          "",
          "[Removed Lines]",
          "227:     public function test_mycourses_access() {",
          "230:         $searcharea = \\core_search\\manager::get_search_area($this->mycoursesareaid);",
          "",
          "[Added Lines]",
          "227:     public function test_courses_access() {",
          "228:         $this->resetAfterTest();",
          "231:         $searcharea = \\core_search\\manager::get_search_area($this->coursesareaid);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "244:         $this->setUser($user1);",
          "245:         $this->assertEquals(\\core_search\\manager::ACCESS_GRANTED, $searcharea->check_access($course1->id));",
          "246:         $this->assertEquals(\\core_search\\manager::ACCESS_GRANTED, $searcharea->check_access($course2->id));",
          "248:         $this->assertEquals(\\core_search\\manager::ACCESS_DELETED, $searcharea->check_access(-123));",
          "250:         $this->setUser($user2);",
          "251:         $this->assertEquals(\\core_search\\manager::ACCESS_GRANTED, $searcharea->check_access($course1->id));",
          "252:         $this->assertEquals(\\core_search\\manager::ACCESS_DENIED, $searcharea->check_access($course2->id));",
          "254:     }",
          "",
          "[Removed Lines]",
          "247:         $this->assertEquals(\\core_search\\manager::ACCESS_DENIED, $searcharea->check_access($course3->id));",
          "253:         $this->assertEquals(\\core_search\\manager::ACCESS_DENIED, $searcharea->check_access($course3->id));",
          "",
          "[Added Lines]",
          "248:         $this->assertEquals(\\core_search\\manager::ACCESS_GRANTED, $searcharea->check_access($course3->id));",
          "254:         $this->assertEquals(\\core_search\\manager::ACCESS_GRANTED, $searcharea->check_access($course3->id));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "538:     }",
          "546:         $document = $this->getMockBuilder('\\core_search\\document')",
          "547:             ->disableOriginalConstructor()",
          "",
          "[Removed Lines]",
          "543:     public function test_get_doc_icon_for_mycourse_area() {",
          "544:         $searcharea = \\core_search\\manager::get_search_area($this->mycoursesareaid);",
          "",
          "[Added Lines]",
          "544:     public function test_customfield_access() {",
          "545:         $this->resetAfterTest();",
          "548:         $searcharea = \\core_search\\manager::get_search_area($this->customfieldareaid);",
          "550:         $user1 = self::getDataGenerator()->create_user();",
          "551:         $user2 = self::getDataGenerator()->create_user();",
          "553:         $course1 = self::getDataGenerator()->create_course();",
          "554:         $course2 = self::getDataGenerator()->create_course(array('visible' => 0));",
          "555:         $course3 = self::getDataGenerator()->create_course();",
          "557:         $this->getDataGenerator()->enrol_user($user1->id, $course1->id, 'teacher');",
          "558:         $this->getDataGenerator()->enrol_user($user2->id, $course1->id, 'student');",
          "559:         $this->getDataGenerator()->enrol_user($user1->id, $course2->id, 'teacher');",
          "560:         $this->getDataGenerator()->enrol_user($user2->id, $course2->id, 'student');",
          "562:         $this->setUser($user1);",
          "563:         $this->assertEquals(\\core_search\\manager::ACCESS_GRANTED, $searcharea->check_access($course1->id));",
          "564:         $this->assertEquals(\\core_search\\manager::ACCESS_GRANTED, $searcharea->check_access($course2->id));",
          "565:         $this->assertEquals(\\core_search\\manager::ACCESS_GRANTED, $searcharea->check_access($course3->id));",
          "566:         $this->assertEquals(\\core_search\\manager::ACCESS_DELETED, $searcharea->check_access(-123));",
          "568:         $this->setUser($user2);",
          "569:         $this->assertEquals(\\core_search\\manager::ACCESS_GRANTED, $searcharea->check_access($course1->id));",
          "570:         $this->assertEquals(\\core_search\\manager::ACCESS_DENIED, $searcharea->check_access($course2->id));",
          "571:         $this->assertEquals(\\core_search\\manager::ACCESS_GRANTED, $searcharea->check_access($course3->id));",
          "572:     }",
          "577:     public function test_get_doc_icon_for_course_area() {",
          "578:         $searcharea = \\core_search\\manager::get_search_area($this->coursesareaid);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "575:     public function test_get_category_names() {",
          "577:         $sectionsearcharea = \\core_search\\manager::get_search_area($this->sectionareaid);",
          "579:         $this->assertEquals(['core-courses'], $coursessearcharea->get_category_names());",
          "",
          "[Removed Lines]",
          "576:         $coursessearcharea = \\core_search\\manager::get_search_area($this->mycoursesareaid);",
          "",
          "[Added Lines]",
          "610:         $coursessearcharea = \\core_search\\manager::get_search_area($this->coursesareaid);",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1055: $string['savechanges'] = 'Save changes';",
          "1056: $string['scssinvalid'] = 'SCSS code is not valid, fails with: {$a}';",
          "1057: $string['search'] = 'Search';",
          "1058: $string['searchallavailablecourses'] = 'Searchable courses';",
          "1059: $string['searchallavailablecourses_off'] = 'Search within enrolled courses only';",
          "1060: $string['searchallavailablecourses_on'] = 'Search within all courses the user can access';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1058: $string['searchablecourses'] = 'Searchable courses';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1066: $string['searchhideallcategory_desc'] = 'If checked, the category with all results will be hidden on the search result screen.';",
          "1067: $string['searchdefaultcategory'] = 'Default search category';",
          "1068: $string['searchdefaultcategory_desc'] = 'Results from the selected search area category will be displayed by default.';",
          "1069: $string['searchalldeleted'] = 'All indexed contents have been deleted';",
          "1070: $string['searchareaenabled'] = 'Search area enabled';",
          "1071: $string['searchareadisabled'] = 'Search area disabled';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1070: $string['searchallavailablecoursesdesc'] = 'If set to search within enrolled courses only, course information (name and summary) and course content will only be searched in courses which the user is enrolled in. Otherwise, course information and course content will be searched in all courses which the user can access, such as courses with guest access enabled.';",
          "1071: $string['searchincludeallcourses'] = 'Include all visible courses';",
          "1072: $string['searchincludeallcourses_desc'] = 'If enabled, search results will include course information (name and summary) of courses which are visible to the user, even if they don\\'t have access to the course content.';",
          "",
          "---------------"
        ],
        "lang/en/search.php||lang/en/search.php": [
          "File: lang/en/search.php -> lang/en/search.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: $string['ittook'] = 'It took';",
          "87: $string['matchingfile'] = 'Matched from file <span class=\"filename\">{$a}</span>';",
          "88: $string['matchingfiles'] = 'Matched from files:';",
          "89: $string['next'] = 'Next';",
          "90: $string['noindexmessage'] = 'Admin: There appears to be no search index. Please';",
          "91: $string['noresults'] = 'No results';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: $string['mycoursesonly'] = 'My courses only';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: $string['search:message_received'] = 'Messages - received';",
          "114: $string['search:message_sent'] = 'Messages - sent';",
          "115: $string['search:mycourse'] = 'My courses';",
          "116: $string['search:section'] = 'Course sections';",
          "117: $string['search:user'] = 'Users';",
          "118: $string['searcharea'] = 'Search area';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117: $string['search:course'] = 'Courses';",
          "",
          "---------------"
        ],
        "lib/classes/task/clean_up_deleted_search_area_task.php||lib/classes/task/clean_up_deleted_search_area_task.php": [
          "File: lib/classes/task/clean_up_deleted_search_area_task.php -> lib/classes/task/clean_up_deleted_search_area_task.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\task;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "39: class clean_up_deleted_search_area_task extends adhoc_task {",
          "44:     public function execute() {",
          "45:         $areaid = $this->get_custom_data();",
          "47:         try {",
          "48:             \\core_search\\manager::clean_up_non_existing_area($areaid);",
          "49:         } catch (\\core_search\\engine_exception $e) {",
          "50:             mtrace('Search is not configured. Skip deleting index for search area ' . $areaid);",
          "51:         }",
          "52:     }",
          "53: }",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2736:         upgrade_main_savepoint(true, 2019021500.02);",
          "2737:     }",
          "2739:     return true;",
          "2740: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2739:     if ($oldversion < 2019022500.00) {",
          "2741:         $record = new \\stdClass();",
          "2742:         $record->classname = '\\core\\task\\clean_up_deleted_search_area_task';",
          "2743:         $record->component = 'core';",
          "2746:         $nextruntime = time() - 1;",
          "2747:         $record->nextruntime = $nextruntime;",
          "2748:         $record->customdata = json_encode('core_course-mycourse');",
          "2750:         $DB->insert_record('task_adhoc', $record);",
          "2753:         upgrade_main_savepoint(true, 2019022500.00);",
          "2754:     }",
          "",
          "---------------"
        ],
        "search/classes/base.php||search/classes/base.php": [
          "File: search/classes/base.php -> search/classes/base.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:         list($componentname, $varname) = $this->get_config_var_name();",
          "177:         $config = [];",
          "180:         foreach ($settingnames as $name) {",
          "181:             $config[$varname . $name] = get_config($componentname, $varname . $name);",
          "182:         }",
          "",
          "[Removed Lines]",
          "178:         $settingnames = array('_enabled', '_indexingstart', '_indexingend', '_lastindexrun',",
          "179:                 '_docsignored', '_docsprocessed', '_recordsprocessed', '_partial');",
          "",
          "[Added Lines]",
          "178:         $settingnames = self::get_settingnames();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:         return $config;",
          "189:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     public static function get_settingnames() {",
          "196:         return array('_enabled', '_indexingstart', '_indexingend', '_lastindexrun',",
          "197:             '_docsignored', '_docsprocessed', '_recordsprocessed', '_partial');",
          "198:     }",
          "",
          "---------------"
        ],
        "search/classes/manager.php||search/classes/manager.php": [
          "File: search/classes/manager.php -> search/classes/manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "585:         return explode('-', $areaid);",
          "586:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594:     public static function parse_areaid($areaid) {",
          "595:         $parts = self::extract_areaid_parts($areaid);",
          "597:         if (empty($parts[1])) {",
          "598:             throw new \\coding_exception('Trying to parse invalid search area id ' . $areaid);",
          "599:         }",
          "601:         $component = $parts[0];",
          "602:         $area = $parts[1];",
          "604:         if (strpos($component, 'core') === 0) {",
          "605:             $plugin = 'core_search';",
          "606:             $configprefix = str_replace('-', '_', $areaid);",
          "607:         } else {",
          "608:             $plugin = $component;",
          "609:             $configprefix = 'search_' . $area;",
          "610:         }",
          "612:         return [$plugin, $configprefix];",
          "613:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "660:         }",
          "662:         if (is_siteadmin()) {",
          "675:         } else {",
          "679:         }",
          "681:         if (empty($limitcourseids) || in_array(SITEID, $limitcourseids)) {",
          "683:         }",
          "686:         $coursecontextids = [];",
          "687:         $modulecms = [];",
          "690:             if (!empty($limitcourseids) && !in_array($course->id, $limitcourseids)) {",
          "692:                 continue;",
          "693:             }",
          "695:             $coursecontext = \\context_course::instance($course->id);",
          "697:             $hasgrouprestrictions = false;",
          "702:             if (!empty($areasbylevel[CONTEXT_COURSE]) &&",
          "703:                     (!$limitcontextids || in_array($coursecontext->id, $limitcontextids))) {",
          "",
          "[Removed Lines]",
          "664:             if ($limitcourseids) {",
          "665:                 list ($coursesql, $courseparams) = $DB->get_in_or_equal($limitcourseids);",
          "666:                 $coursesql = 'id ' . $coursesql;",
          "667:             } else {",
          "668:                 $coursesql = '';",
          "669:                 $courseparams = [];",
          "670:             }",
          "672:             $courses = $DB->get_records_select('course', $coursesql, $courseparams, '',",
          "673:                     'id, category, sortorder, shortname, fullname, idnumber, startdate, visible, ' .",
          "674:                     'groupmode, groupmodeforce, cacherev');",
          "677:             $courses = enrol_get_my_courses(array('id', 'cacherev'), 'id', 0, [],",
          "678:                     (bool)get_config('core', 'searchallavailablecourses'));",
          "682:             $courses[SITEID] = get_course(SITEID);",
          "689:         foreach ($courses as $course) {",
          "696:             $coursecontextids[] = $coursecontext->id;",
          "700:             $modinfo = get_fast_modinfo($course);",
          "",
          "[Added Lines]",
          "690:             $allcourses = $this->get_all_courses($limitcourseids);",
          "692:             $allcourses = $mycourses = $this->get_my_courses((bool)get_config('core', 'searchallavailablecourses'));",
          "694:             if (self::include_all_courses()) {",
          "695:                 $allcourses = $this->get_all_courses($limitcourseids);",
          "696:             }",
          "700:             $allcourses[SITEID] = get_course(SITEID);",
          "701:             if (isset($mycourses)) {",
          "702:                 $mycourses[SITEID] = get_course(SITEID);",
          "703:             }",
          "710:         foreach ($allcourses as $course) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "709:                 }",
          "710:             }",
          "712:             if (!empty($areasbylevel[CONTEXT_MODULE])) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "730:             if (isset($mycourses) && !key_exists($course->id, $mycourses)) {",
          "731:                 continue;",
          "732:             }",
          "734:             $coursecontextids[] = $coursecontext->id;",
          "737:             $modinfo = get_fast_modinfo($course);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "962:             }",
          "963:         }",
          "970:         $limitcontextids = false;",
          "971:         if (!empty($formdata->contextids)) {",
          "",
          "[Removed Lines]",
          "965:         $limitcourseids = false;",
          "966:         if (!empty($formdata->courseids)) {",
          "967:             $limitcourseids = $formdata->courseids;",
          "968:         }",
          "",
          "[Added Lines]",
          "992:         $limitcourseids = $this->build_limitcourseids($formdata);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "993:         return $docs;",
          "994:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1027:     protected function build_limitcourseids(\\stdClass $formdata) {",
          "1028:         $limitcourseids = false;",
          "1030:         if (!empty($formdata->mycoursesonly)) {",
          "1031:             $limitcourseids = array_keys($this->get_my_courses(false));",
          "1032:         }",
          "1034:         if (!empty($formdata->courseids)) {",
          "1035:             if (empty($limitcourseids)) {",
          "1036:                 $limitcourseids = $formdata->courseids;",
          "1037:             } else {",
          "1038:                 $limitcourseids = array_intersect($limitcourseids, $formdata->courseids);",
          "1039:             }",
          "1040:         }",
          "1042:         return $limitcourseids;",
          "1043:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1673:         return $default;",
          "1674:     }",
          "1675: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1731:     protected function get_all_courses($limitcourseids) {",
          "1732:         global $DB;",
          "1734:         if ($limitcourseids) {",
          "1735:             list ($coursesql, $courseparams) = $DB->get_in_or_equal($limitcourseids);",
          "1736:             $coursesql = 'id ' . $coursesql;",
          "1737:         } else {",
          "1738:             $coursesql = '';",
          "1739:             $courseparams = [];",
          "1740:         }",
          "1743:         return $DB->get_records_select('course', $coursesql, $courseparams, '',",
          "1744:             'id, category, sortorder, shortname, fullname, idnumber, startdate, visible, ' .",
          "1745:             'groupmode, groupmodeforce, cacherev');",
          "1746:     }",
          "1754:     protected function get_my_courses($allaccessible) {",
          "1755:         return enrol_get_my_courses(array('id', 'cacherev'), 'id', 0, [], $allaccessible);",
          "1756:     }",
          "1763:     public static function include_all_courses() {",
          "1764:         return !empty(get_config('core', 'searchincludeallcourses'));",
          "1765:     }",
          "1775:     public static function clean_up_non_existing_area($areaid) {",
          "1776:         global $DB;",
          "1778:         if (!empty(self::get_search_area($areaid))) {",
          "1779:             throw new \\coding_exception(\"Area $areaid exists. Please use appropriate search area class to manipulate the data.\");",
          "1780:         }",
          "1782:         $parts = self::parse_areaid($areaid);",
          "1784:         $plugin = $parts[0];",
          "1785:         $configprefix = $parts[1];",
          "1787:         foreach (base::get_settingnames() as $settingname) {",
          "1788:             $name = $configprefix. $settingname;",
          "1789:             $DB->delete_records('config_plugins', ['name' => $name, 'plugin' => $plugin]);",
          "1790:         }",
          "1792:         $engine = self::instance()->get_engine();",
          "1793:         $engine->delete($areaid);",
          "1794:     }",
          "",
          "---------------"
        ],
        "search/classes/output/form/search.php||search/classes/output/form/search.php": [
          "File: search/classes/output/form/search.php -> search/classes/output/form/search.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: namespace core_search\\output\\form;",
          "27: defined('MOODLE_INTERNAL') || die;",
          "29: require_once($CFG->libdir . '/formslib.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: use core_search\\manager;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:         );",
          "106:         $mform->addElement('autocomplete', 'areaids', get_string('searcharea', 'search'), $areanames, $options);",
          "108:         $options = array(",
          "109:             'multiple' => true,",
          "111:             'noselectionstring' => get_string('allcourses', 'search'),",
          "112:         );",
          "113:         $mform->addElement('course', 'courseids', get_string('courses', 'core'), $options);",
          "114:         $mform->setType('courseids', PARAM_INT);",
          "118:         if ($search->get_engine()->supports_users() && isloggedin()) {",
          "",
          "[Removed Lines]",
          "110:             'limittoenrolled' => !is_siteadmin(),",
          "",
          "[Added Lines]",
          "110:         if (is_siteadmin()) {",
          "111:             $limittoenrolled = false;",
          "112:         } else {",
          "113:             $limittoenrolled = !manager::include_all_courses();",
          "114:         }",
          "118:             'limittoenrolled' => $limittoenrolled,",
          "124:         if (manager::include_all_courses() || !empty(get_config('core', 'searchallavailablecourses'))) {",
          "125:             $mform->addElement('checkbox', 'mycoursesonly', get_string('mycoursesonly', 'search'));",
          "126:             $mform->setType('mycoursesonly', PARAM_INT);",
          "127:         }",
          "",
          "---------------"
        ],
        "search/engine/solr/tests/engine_test.php||search/engine/solr/tests/engine_test.php": [
          "File: search/engine/solr/tests/engine_test.php -> search/engine/solr/tests/engine_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "821:         unset($querydata->courseids);",
          "825:         $results = $this->search->search($querydata);",
          "826:         $this->assert_result_titles(['Course 1'], $results);",
          "",
          "[Removed Lines]",
          "824:         $querydata->areaids = ['core_course-mycourse'];",
          "",
          "[Added Lines]",
          "824:         $querydata->areaids = ['core_course-course'];",
          "",
          "---------------"
        ],
        "search/index.php||search/index.php": [
          "File: search/index.php -> search/index.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: $title = optional_param('title', '', PARAM_NOTAGS);",
          "30: $contextid = optional_param('context', 0, PARAM_INT);",
          "31: $cat = optional_param('cat', '', PARAM_NOTAGS);",
          "33: if (\\core_search\\manager::is_search_area_categories_enabled()) {",
          "34:     $cat = \\core_search\\manager::get_search_area_category_by_name($cat);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: $mycoursesonly = optional_param('mycoursesonly', 0, PARAM_INT);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:     $data->timeend = optional_param('timeend', 0, PARAM_INT);",
          "115:     $data->context = $contextid;",
          "117:     $mform->set_data($data);",
          "118: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:     $data->mycoursesonly = $mycoursesonly;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:     }",
          "153:     $urlparams['timestart'] = $data->timestart;",
          "154:     $urlparams['timeend'] = $data->timeend;",
          "155: }",
          "157: if ($cat instanceof \\core_search\\area_category) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:     $urlparams['mycoursesonly'] = isset($data->mycoursesonly) ? $data->mycoursesonly : 0;",
          "",
          "---------------"
        ],
        "search/tests/base_test.php||search/tests/base_test.php": [
          "File: search/tests/base_test.php -> search/tests/base_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:         $expected = ['core-other'];",
          "170:         $this->assertEquals($expected, $stub->get_category_names());",
          "171:     }",
          "172: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "176:     public function test_get_settingnames() {",
          "177:         $expected = array('_enabled', '_indexingstart', '_indexingend', '_lastindexrun',",
          "178:             '_docsignored', '_docsprocessed', '_recordsprocessed', '_partial');",
          "179:         $this->assertEquals($expected, \\core_search\\base::get_settingnames());",
          "180:     }",
          "",
          "---------------"
        ],
        "search/tests/fixtures/testable_core_search.php||search/tests/fixtures/testable_core_search.php": [
          "File: search/tests/fixtures/testable_core_search.php -> search/tests/fixtures/testable_core_search.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     public static function fake_current_time($faketime = 0.0) {",
          "119:         static::$phpunitfaketime = $faketime;",
          "120:     }",
          "121: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     public function build_limitcourseids(\\stdClass $formdata) {",
          "130:         $limitcourseids = parent::build_limitcourseids($formdata);",
          "132:         return $limitcourseids;",
          "133:     }",
          "",
          "---------------"
        ],
        "search/tests/manager_test.php||search/tests/manager_test.php": [
          "File: search/tests/manager_test.php -> search/tests/manager_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: class search_manager_testcase extends advanced_testcase {",
          "41:     protected $forumpostareaid = null;",
          "44:     public function setUp() {",
          "45:         $this->forumpostareaid = \\core_search\\manager::generate_areaid('mod_forum', 'post');",
          "47:     }",
          "49:     protected function tearDown() {",
          "",
          "[Removed Lines]",
          "42:     protected $mycoursesareaid = null;",
          "46:         $this->mycoursesareaid = \\core_search\\manager::generate_areaid('core_course', 'mycourse');",
          "",
          "[Added Lines]",
          "54:     protected $coursesareaid = null;",
          "58:         $this->coursesareaid = \\core_search\\manager::generate_areaid('core_course', 'course');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "461:         $this->assertNotFalse(strpos($log, \"area: Users\\n  Skipping\"));",
          "465:         $this->assertNotFalse(strpos($log, \"area: Page\\n  No documents\"));",
          "",
          "[Removed Lines]",
          "462:         $this->assertNotFalse(strpos($log, \"area: My courses\\n  Skipping\"));",
          "",
          "[Added Lines]",
          "474:         $this->assertNotFalse(strpos($log, \"area: Courses\\n  Skipping\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "475:         $this->assertNotFalse(strpos($log, \"area: Forum - posts\\n  Processed 3 \"));",
          "481:         $this->assertNotFalse(strpos($log, \"area: Page\\n  Processed 1 \"));",
          "",
          "[Removed Lines]",
          "478:         $this->assertNotFalse(strpos($log, \"area: My courses\\n  Processed 1 \"));",
          "",
          "[Added Lines]",
          "490:         $this->assertNotFalse(strpos($log, \"area: Courses\\n  Processed 1 \"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "531:         $course1ctx = context_course::instance($course1->id);",
          "532:         $course2 = $this->getDataGenerator()->create_course();",
          "533:         $course2ctx = context_course::instance($course2->id);",
          "534:         $teacher = $this->getDataGenerator()->create_user();",
          "535:         $teacherctx = context_user::instance($teacher->id);",
          "536:         $student = $this->getDataGenerator()->create_user();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "546:         $course3 = $this->getDataGenerator()->create_course();",
          "547:         $course3ctx = context_course::instance($course3->id);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "548:         $context1 = context_module::instance($forum1->cmid);",
          "549:         $context2 = context_module::instance($forum2->cmid);",
          "550:         $context3 = context_module::instance($forum3->cmid);",
          "552:         $search = testable_core_search::instance();",
          "553:         $mockareaid = \\core_search\\manager::generate_areaid('core_mocksearch', 'mock_search_area');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "565:         $forum4 = $this->getDataGenerator()->create_module('forum', array('course' => $course3->id));",
          "566:         $context4 = context_module::instance($forum4->cmid);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "563:         $this->setUser($noaccess);",
          "564:         $contexts = $search->get_areas_user_accesses()->usercontexts;",
          "565:         $this->assertEquals(array($frontpageforumcontext->id => $frontpageforumcontext->id), $contexts[$this->forumpostareaid]);",
          "567:         $mockctxs = array($noaccessctx->id => $noaccessctx->id, $frontpagectx->id => $frontpagectx->id);",
          "568:         $this->assertEquals($mockctxs, $contexts[$mockareaid]);",
          "",
          "[Removed Lines]",
          "566:         $this->assertEquals(array($sitectx->id => $sitectx->id), $contexts[$this->mycoursesareaid]);",
          "",
          "[Added Lines]",
          "582:         $this->assertEquals(array($sitectx->id => $sitectx->id), $contexts[$this->coursesareaid]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "573:             $context2->id => $context2->id);",
          "574:         $this->assertEquals($frontpageandcourse1, $contexts[$this->forumpostareaid]);",
          "575:         $this->assertEquals(array($sitectx->id => $sitectx->id, $course1ctx->id => $course1ctx->id),",
          "577:         $mockctxs = array($teacherctx->id => $teacherctx->id,",
          "578:                 $frontpagectx->id => $frontpagectx->id, $course1ctx->id => $course1ctx->id);",
          "579:         $this->assertEquals($mockctxs, $contexts[$mockareaid]);",
          "",
          "[Removed Lines]",
          "576:             $contexts[$this->mycoursesareaid]);",
          "",
          "[Added Lines]",
          "592:             $contexts[$this->coursesareaid]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "582:         $contexts = $search->get_areas_user_accesses()->usercontexts;",
          "583:         $this->assertEquals($frontpageandcourse1, $contexts[$this->forumpostareaid]);",
          "584:         $this->assertEquals(array($sitectx->id => $sitectx->id, $course1ctx->id => $course1ctx->id),",
          "586:         $mockctxs = array($studentctx->id => $studentctx->id,",
          "587:                 $frontpagectx->id => $frontpagectx->id, $course1ctx->id => $course1ctx->id);",
          "588:         $this->assertEquals($mockctxs, $contexts[$mockareaid]);",
          "",
          "[Removed Lines]",
          "585:             $contexts[$this->mycoursesareaid]);",
          "",
          "[Added Lines]",
          "601:             $contexts[$this->coursesareaid]);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "601:             $context2->id => $context2->id, $context3->id => $context3->id);",
          "602:         $this->assertEquals($allcontexts, $contexts[$this->forumpostareaid]);",
          "603:         $this->assertEquals(array($sitectx->id => $sitectx->id, $course1ctx->id => $course1ctx->id,",
          "606:         $contexts = $search->get_areas_user_accesses(array($course1->id, $course2->id))->usercontexts;",
          "607:         $allcontexts = array($context1->id => $context1->id, $context2->id => $context2->id, $context3->id => $context3->id);",
          "608:         $this->assertEquals($allcontexts, $contexts[$this->forumpostareaid]);",
          "609:         $this->assertEquals(array($course1ctx->id => $course1ctx->id,",
          "612:         $contexts = $search->get_areas_user_accesses(array($course2->id))->usercontexts;",
          "613:         $allcontexts = array($context3->id => $context3->id);",
          "614:         $this->assertEquals($allcontexts, $contexts[$this->forumpostareaid]);",
          "617:         $contexts = $search->get_areas_user_accesses(array($course1->id))->usercontexts;",
          "618:         $allcontexts = array($context1->id => $context1->id, $context2->id => $context2->id);",
          "619:         $this->assertEquals($allcontexts, $contexts[$this->forumpostareaid]);",
          "623:         $contexts = $search->get_areas_user_accesses(false,",
          "",
          "[Removed Lines]",
          "604:             $course2ctx->id => $course2ctx->id), $contexts[$this->mycoursesareaid]);",
          "610:             $course2ctx->id => $course2ctx->id), $contexts[$this->mycoursesareaid]);",
          "615:         $this->assertEquals(array($course2ctx->id => $course2ctx->id), $contexts[$this->mycoursesareaid]);",
          "620:         $this->assertEquals(array($course1ctx->id => $course1ctx->id), $contexts[$this->mycoursesareaid]);",
          "",
          "[Added Lines]",
          "620:             $course2ctx->id => $course2ctx->id), $contexts[$this->coursesareaid]);",
          "626:             $course2ctx->id => $course2ctx->id), $contexts[$this->coursesareaid]);",
          "631:         $this->assertEquals(array($course2ctx->id => $course2ctx->id), $contexts[$this->coursesareaid]);",
          "636:         $this->assertEquals(array($course1ctx->id => $course1ctx->id), $contexts[$this->coursesareaid]);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "625:         $this->assertEquals([$frontpageforumcontext->id => $frontpageforumcontext->id],",
          "626:                 $contexts[$this->forumpostareaid]);",
          "627:         $this->assertEquals([$course2ctx->id => $course2ctx->id],",
          "631:         $contexts = $search->get_areas_user_accesses([$course1->id, $course2->id],",
          "632:                 [$frontpageforumcontext->id, $course2ctx->id])->usercontexts;",
          "633:         $this->assertArrayNotHasKey($this->forumpostareaid, $contexts);",
          "634:         $this->assertEquals([$course2ctx->id => $course2ctx->id],",
          "638:         $contexts = $search->get_areas_user_accesses([$course1->id], [$context1->id])->usercontexts;",
          "639:         $this->assertEquals([$context1->id => $context1->id], $contexts[$this->forumpostareaid]);",
          "643:         $this->setAdminUser();",
          "644:         $contexts = $search->get_areas_user_accesses([$course1->id], [$context1->id])->usercontexts;",
          "645:         $this->assertEquals([$context1->id => $context1->id], $contexts[$this->forumpostareaid]);",
          "647:     }",
          "",
          "[Removed Lines]",
          "628:                 $contexts[$this->mycoursesareaid]);",
          "635:                 $contexts[$this->mycoursesareaid]);",
          "640:         $this->assertArrayNotHasKey($this->mycoursesareaid, $contexts);",
          "646:         $this->assertArrayNotHasKey($this->mycoursesareaid, $contexts);",
          "",
          "[Added Lines]",
          "644:                 $contexts[$this->coursesareaid]);",
          "651:                 $contexts[$this->coursesareaid]);",
          "656:         $this->assertArrayNotHasKey($this->coursesareaid, $contexts);",
          "659:         set_config('searchincludeallcourses', 1);",
          "660:         $contexts = $search->get_areas_user_accesses()->usercontexts;",
          "661:         $expected = [",
          "662:             $sitectx->id => $sitectx->id,",
          "663:             $course1ctx->id => $course1ctx->id,",
          "664:             $course2ctx->id => $course2ctx->id,",
          "665:             $course3ctx->id => $course3ctx->id",
          "666:         ];",
          "668:         $this->assertEquals($expected, $contexts[$this->coursesareaid]);",
          "670:         $this->assertFalse(key_exists($context4->id, $contexts[$this->forumpostareaid]));",
          "676:         $this->assertArrayNotHasKey($this->coursesareaid, $contexts);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1289:         $testcategory = \\core_search\\manager::get_search_area_category_by_name('test_random_name');",
          "1290:         $this->assertEquals('core-course-content', $testcategory->get_name());",
          "1291:     }",
          "1292: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1326:     public function test_include_all_courses_enabled() {",
          "1327:         $this->resetAfterTest();",
          "1328:         $this->assertFalse(\\core_search\\manager::include_all_courses());",
          "1329:         set_config('searchincludeallcourses', 1);",
          "1330:         $this->assertTrue(\\core_search\\manager::include_all_courses());",
          "1331:     }",
          "1336:     public function test_build_limitcourseids() {",
          "1337:         global $USER;",
          "1339:         $this->resetAfterTest();",
          "1340:         $this->setAdminUser();",
          "1342:         $course1 = $this->getDataGenerator()->create_course();",
          "1343:         $course2 = $this->getDataGenerator()->create_course();",
          "1344:         $course3 = $this->getDataGenerator()->create_course();",
          "1345:         $course4 = $this->getDataGenerator()->create_course();",
          "1347:         $this->getDataGenerator()->enrol_user($USER->id, $course1->id);",
          "1348:         $this->getDataGenerator()->enrol_user($USER->id, $course3->id);",
          "1350:         $search = testable_core_search::instance();",
          "1352:         $formdata = new stdClass();",
          "1353:         $formdata->courseids = [];",
          "1354:         $formdata->mycoursesonly = false;",
          "1355:         $limitcourseids = $search->build_limitcourseids($formdata);",
          "1356:         $this->assertEquals(false, $limitcourseids);",
          "1358:         $formdata->courseids = [];",
          "1359:         $formdata->mycoursesonly = true;",
          "1360:         $limitcourseids = $search->build_limitcourseids($formdata);",
          "1361:         $this->assertEquals([$course1->id, $course3->id], $limitcourseids);",
          "1363:         $formdata->courseids = [$course1->id, $course2->id, $course4->id];",
          "1364:         $formdata->mycoursesonly = false;",
          "1365:         $limitcourseids = $search->build_limitcourseids($formdata);",
          "1366:         $this->assertEquals([$course1->id, $course2->id, $course4->id], $limitcourseids);",
          "1368:         $formdata->courseids = [$course1->id, $course2->id, $course4->id];",
          "1369:         $formdata->mycoursesonly = true;",
          "1370:         $limitcourseids = $search->build_limitcourseids($formdata);",
          "1371:         $this->assertEquals([$course1->id], $limitcourseids);",
          "1372:     }",
          "1379:     public function parse_search_area_id_data_provider() {",
          "1380:         return [",
          "1381:             ['mod_book-chapter', ['mod_book', 'search_chapter']],",
          "1382:             ['mod_customcert-activity', ['mod_customcert', 'search_activity']],",
          "1383:             ['core_course-mycourse', ['core_search', 'core_course_mycourse']],",
          "1384:         ];",
          "1385:     }",
          "1394:     public function test_parse_search_area_id($areaid, $expected) {",
          "1395:         $this->assertEquals($expected, \\core_search\\manager::parse_areaid($areaid));",
          "1396:     }",
          "1401:     public function test_parse_invalid_search_area_id() {",
          "1402:         $this->expectException('coding_exception');",
          "1403:         $this->expectExceptionMessage('Trying to parse invalid search area id invalid_area');",
          "1404:         \\core_search\\manager::parse_areaid('invalid_area');",
          "1405:     }",
          "1410:     public function test_cleaning_up_existing_search_area() {",
          "1411:         $expectedmessage = \"Area mod_assign-activity exists. Please use appropriate search area class to manipulate the data.\";",
          "1413:         $this->expectException('coding_exception');",
          "1414:         $this->expectExceptionMessage($expectedmessage);",
          "1416:         \\core_search\\manager::clean_up_non_existing_area('mod_assign-activity');",
          "1417:     }",
          "1422:     public function test_clean_up_non_existing_search_area() {",
          "1423:         global $DB;",
          "1425:         $this->resetAfterTest();",
          "1427:         $areaid = 'core_course-mycourse';",
          "1428:         $plugin = 'core_search';",
          "1431:         foreach (\\core_search\\base::get_settingnames() as $settingname) {",
          "1432:             $record = new stdClass();",
          "1433:             $record->plugin = $plugin;",
          "1434:             $record->name = 'core_course_mycourse'. $settingname;",
          "1435:             $record->value = 'test';",
          "1437:             $DB->insert_record('config_plugins', $record);",
          "1438:             $this->assertTrue($DB->record_exists('config_plugins', ['plugin' => $plugin, 'name' => $record->name]));",
          "1439:         }",
          "1442:         \\core_search\\manager::clean_up_non_existing_area($areaid);",
          "1445:         foreach (\\core_search\\base::get_settingnames() as $settingname) {",
          "1446:             $plugin = 'core_search';",
          "1447:             $name = 'core_course_mycourse'. $settingname;",
          "1448:             $this->assertFalse($DB->record_exists('config_plugins', ['plugin' => $plugin, 'name' => $name]));",
          "1449:         }",
          "1450:     }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019030100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019030100.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85e21dd3008c64e490c2fb9cdd5e7a6e62343b2c",
      "candidate_info": {
        "commit_hash": "85e21dd3008c64e490c2fb9cdd5e7a6e62343b2c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/85e21dd3008c64e490c2fb9cdd5e7a6e62343b2c",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7.3+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052003.05;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.3+ (Build: 20191205)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052003.06;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.3+ (Build: 20191212)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50a1d9372f496568dc09d34b55b6c39be8e481fc",
      "candidate_info": {
        "commit_hash": "50a1d9372f496568dc09d34b55b6c39be8e481fc",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/50a1d9372f496568dc09d34b55b6c39be8e481fc",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.8dev+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '38';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019102200.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev+ (Build: 20191022)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019102500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.8dev+ (Build: 20191025)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0225ad42eab9f20ac4348dd85ccde8fdbfc206fb",
      "candidate_info": {
        "commit_hash": "0225ad42eab9f20ac4348dd85ccde8fdbfc206fb",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/0225ad42eab9f20ac4348dd85ccde8fdbfc206fb",
        "files": [
          "version.php"
        ],
        "message": "on-demand release 3.6beta+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '36';                       // This version's branch.",
          "39: $maturity = MATURITY_BETA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018112000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6beta (Build: 20181118)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018112000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6beta+ (Build: 20181120)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    }
  ]
}