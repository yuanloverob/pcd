{
  "cve_id": "CVE-2024-25142",
  "cve_desc": "Use of Web Browser Cache Containing Sensitive Information vulnerability in Apache Airflow.\u00a0\n\nAirflow did not return \"Cache-Control\" header for dynamic content, which in case of some browsers could result in potentially storing sensitive data in local cache of the browser.\n\nThis issue affects Apache Airflow: before 2.9.2.\n\nUsers are recommended to upgrade to version 2.9.2, which fixes the issue.\n\n",
  "repo": "apache/airflow",
  "patch_hash": "94eb647de692a4d9555b02dce85974da5d4c04e3",
  "patch_info": {
    "commit_hash": "94eb647de692a4d9555b02dce85974da5d4c04e3",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/94eb647de692a4d9555b02dce85974da5d4c04e3",
    "files": [
      "airflow/www/app.py",
      "airflow/www/extensions/init_security.py"
    ],
    "message": "Add Cache-Control \"no-store\" to all dynamically generated content (#39550)\n\nThis one prevents accidental storing of dynamic content containing\npotentially sensitive data in cache. The way we implemented it, we\ncheck if the response already contains \"Cache-Control\" - if it does\nthen it means that this is a static content with default cache\ncontrol set by SEND_FILE_MAX_AGE_DEFAULT setting (43200 by default).",
    "before_after_code_files": [
      "airflow/www/app.py||airflow/www/app.py",
      "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py"
    ]
  },
  "patch_diff": {
    "airflow/www/app.py||airflow/www/app.py": [
      "File: airflow/www/app.py -> airflow/www/app.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "44: from airflow.www.extensions.init_robots import init_robots",
      "45: from airflow.www.extensions.init_security import (",
      "46:     init_api_experimental_auth,",
      "47:     init_check_user_active,",
      "48:     init_xframe_protection,",
      "49: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "47:     init_cache_control,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "181:         init_jinja_globals(flask_app)",
      "182:         init_xframe_protection(flask_app)",
      "183:         init_airflow_session_interface(flask_app)",
      "184:         init_check_user_active(flask_app)",
      "185:     return flask_app",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "184:         init_cache_control(flask_app)",
      "",
      "---------------"
    ],
    "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py": [
      "File: airflow/www/extensions/init_security.py -> airflow/www/extensions/init_security.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "66:         raise AirflowException(err)",
      "69: def init_check_user_active(app):",
      "70:     @app.before_request",
      "71:     def check_user_active():",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69: def init_cache_control(app):",
      "70:     def apply_cache_control(response):",
      "71:         if \"Cache-Control\" not in response.headers:",
      "72:             response.headers[\"Cache-Control\"] = \"no-store\"",
      "73:         return response",
      "75:     app.after_request(apply_cache_control)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0920ae90eafbdb8c09f6ef7e2f0a1a520fee1e08",
      "candidate_info": {
        "commit_hash": "0920ae90eafbdb8c09f6ef7e2f0a1a520fee1e08",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/0920ae90eafbdb8c09f6ef7e2f0a1a520fee1e08",
        "files": [
          "airflow/www/app.py",
          "airflow/www/extensions/init_security.py"
        ],
        "message": "Add Cache-Control \"no-store\" to all dynamically generated content (#39550)\n\nThis one prevents accidental storing of dynamic content containing\npotentially sensitive data in cache. The way we implemented it, we\ncheck if the response already contains \"Cache-Control\" - if it does\nthen it means that this is a static content with default cache\ncontrol set by SEND_FILE_MAX_AGE_DEFAULT setting (43200 by default).\n\n(cherry picked from commit 94eb647de692a4d9555b02dce85974da5d4c04e3)",
        "before_after_code_files": [
          "airflow/www/app.py||airflow/www/app.py",
          "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "airflow/www/app.py||airflow/www/app.py",
            "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py"
          ],
          "candidate": [
            "airflow/www/app.py||airflow/www/app.py",
            "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py"
          ]
        }
      },
      "candidate_diff": {
        "airflow/www/app.py||airflow/www/app.py": [
          "File: airflow/www/app.py -> airflow/www/app.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: from airflow.www.extensions.init_robots import init_robots",
          "45: from airflow.www.extensions.init_security import (",
          "46:     init_api_experimental_auth,",
          "47:     init_check_user_active,",
          "48:     init_xframe_protection,",
          "49: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:     init_cache_control,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:         init_jinja_globals(flask_app)",
          "181:         init_xframe_protection(flask_app)",
          "182:         init_airflow_session_interface(flask_app)",
          "183:         init_check_user_active(flask_app)",
          "184:     return flask_app",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:         init_cache_control(flask_app)",
          "",
          "---------------"
        ],
        "airflow/www/extensions/init_security.py||airflow/www/extensions/init_security.py": [
          "File: airflow/www/extensions/init_security.py -> airflow/www/extensions/init_security.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         raise AirflowException(err)",
          "69: def init_check_user_active(app):",
          "70:     @app.before_request",
          "71:     def check_user_active():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: def init_cache_control(app):",
          "70:     def apply_cache_control(response):",
          "71:         if \"Cache-Control\" not in response.headers:",
          "72:             response.headers[\"Cache-Control\"] = \"no-store\"",
          "73:         return response",
          "75:     app.after_request(apply_cache_control)",
          "",
          "---------------"
        ]
      }
    }
  ]
}