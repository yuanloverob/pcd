{
  "cve_id": "CVE-2024-43803",
  "cve_desc": "The Bare Metal Operator (BMO) implements a Kubernetes API for managing bare metal hosts in Metal3. The `BareMetalHost` (BMH) CRD allows the `userData`, `metaData`, and `networkData` for the provisioned host to be specified as links to Kubernetes Secrets. There are fields for both the `Name` and `Namespace` of the Secret, meaning that versions of the baremetal-operator prior to 0.8.0, 0.6.2, and 0.5.2 will read a `Secret` from any namespace. A user with access to create or edit a `BareMetalHost` can thus exfiltrate a `Secret` from another namespace by using it as e.g. the `userData` for provisioning some host (note that this need not be a real host, it could be a VM somewhere).\n\nBMO will only read a key with the name `value` (or `userData`, `metaData`, or `networkData`), so that limits the exposure somewhat. `value` is probably a pretty common key though. Secrets used by _other_ `BareMetalHost`s in different namespaces are always vulnerable. It is probably relatively unusual for anyone other than cluster administrators to have RBAC access to create/edit a `BareMetalHost`. This vulnerability is only meaningful, if the cluster has users other than administrators and users' privileges are limited to their respective namespaces.\n\nThe patch prevents BMO from accepting links to Secrets from other namespaces as BMH input. Any BMH configuration is only read from the same namespace only. The problem is patched in BMO releases v0.7.0, v0.6.2 and v0.5.2 and users should upgrade to those versions. Prior upgrading, duplicate the BMC Secrets to the namespace where the corresponding BMH is. After upgrade, remove the old Secrets. As a workaround, an operator can configure BMO RBAC to be namespace scoped for Secrets, instead of cluster scoped, to prevent BMO from accessing Secrets from other namespaces.",
  "repo": "metal3-io/baremetal-operator",
  "patch_hash": "c2b5a557641bc273367635124047d6c958aa15f7",
  "patch_info": {
    "commit_hash": "c2b5a557641bc273367635124047d6c958aa15f7",
    "repo": "metal3-io/baremetal-operator",
    "commit_url": "https://github.com/metal3-io/baremetal-operator/commit/c2b5a557641bc273367635124047d6c958aa15f7",
    "files": [
      "controllers/metal3.io/baremetalhost_controller_test.go",
      "controllers/metal3.io/host_config_data.go",
      "controllers/metal3.io/host_config_data_test.go"
    ],
    "message": "Merge pull request #1929 from Nordix/tuomo/ghsa-pqfh-xh7w-7h3p\n\n\ud83d\udc1b Disallow fetching secrets from namespaces different from the host's one",
    "before_after_code_files": [
      "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
      "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
      "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
    ]
  },
  "patch_diff": {
    "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go": [
      "File: controllers/metal3.io/baremetalhost_controller_test.go -> controllers/metal3.io/baremetalhost_controller_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: )",
      "39: func newSecret(name string, data map[string]string) *corev1.Secret {",
      "40:  secretData := make(map[string][]byte)",
      "41:  for k, v := range data {",
      "42:   secretData[k] = []byte(base64.StdEncoding.EncodeToString([]byte(v)))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40:  return newSecretInNamespace(name, namespace, data)",
      "41: }",
      "43: func newSecretInNamespace(name, namespace string, data map[string]string) *corev1.Secret {",
      "",
      "---------------"
    ],
    "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go": [
      "File: controllers/metal3.io/host_config_data.go -> controllers/metal3.io/host_config_data.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:  \"github.com/go-logr/logr\"",
      "5:  metal3api \"github.com/metal3-io/baremetal-operator/apis/metal3.io/v1alpha1\"",
      "6:  \"github.com/metal3-io/baremetal-operator/pkg/secretutils\"",
      "7:  corev1 \"k8s.io/api/core/v1\"",
      "8:  \"k8s.io/apimachinery/pkg/types\"",
      "9: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7:  \"github.com/pkg/errors\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "22: func (hcd *hostConfigData) getSecretData(name, namespace, dataKey string) (string, error) {",
      "23:  key := types.NamespacedName{",
      "24:   Name:      name,",
      "25:   Namespace: namespace,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:  if namespace != hcd.host.Namespace {",
      "25:   return \"\", errors.Errorf(\"%s secret must be in same namespace as host %s/%s\", dataKey, hcd.host.Namespace, hcd.host.Name)",
      "26:  }",
      "",
      "---------------"
    ],
    "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go": [
      "File: controllers/metal3.io/host_config_data_test.go -> controllers/metal3.io/host_config_data_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "323:    ExpectedNetworkData: \"\",",
      "324:    ErrNetworkData:      true,",
      "325:   },",
      "326:  }",
      "328:  for _, tc := range testCases {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "326:   {",
      "327:    Scenario: \"user-data secret in different namespace\",",
      "328:    Host: newHost(\"host-user-data\",",
      "329:     &metal3api.BareMetalHostSpec{",
      "330:      BMC: metal3api.BMCDetails{",
      "331:       Address:         \"ipmi://192.168.122.1:6233\",",
      "332:       CredentialsName: defaultSecretName,",
      "333:      },",
      "334:      UserData: &corev1.SecretReference{",
      "335:       Name:      \"user-data\",",
      "336:       Namespace: \"other-namespace\",",
      "337:      },",
      "338:     }),",
      "339:    UserDataSecret: newSecretInNamespace(\"user-data\", \"other-namespace\", map[string]string{\"userData\": \"somedata\"}),",
      "340:    ErrUserData:    true,",
      "341:   },",
      "342:   {",
      "343:    Scenario: \"meta-data secret in different namespace\",",
      "344:    Host: newHost(\"host-user-data\",",
      "345:     &metal3api.BareMetalHostSpec{",
      "346:      BMC: metal3api.BMCDetails{",
      "347:       Address:         \"ipmi://192.168.122.1:6233\",",
      "348:       CredentialsName: defaultSecretName,",
      "349:      },",
      "350:      MetaData: &corev1.SecretReference{",
      "351:       Name:      \"meta-data\",",
      "352:       Namespace: \"other-namespace\",",
      "353:      },",
      "354:     }),",
      "355:    NetworkDataSecret: newSecretInNamespace(\"meta-data\", \"other-namespace\", map[string]string{\"metaData\": \"key: value\"}),",
      "356:    ErrMetaData:       true,",
      "357:   },",
      "358:   {",
      "359:    Scenario: \"network-data secret in different namespace\",",
      "360:    Host: newHost(\"host-user-data\",",
      "361:     &metal3api.BareMetalHostSpec{",
      "362:      BMC: metal3api.BMCDetails{",
      "363:       Address:         \"ipmi://192.168.122.1:6233\",",
      "364:       CredentialsName: defaultSecretName,",
      "365:      },",
      "366:      NetworkData: &corev1.SecretReference{",
      "367:       Name:      \"net-data\",",
      "368:       Namespace: \"other-namespace\",",
      "369:      },",
      "370:     }),",
      "371:    NetworkDataSecret: newSecretInNamespace(\"net-data\", \"other-namespace\", map[string]string{\"networkData\": \"key: value\"}),",
      "372:    ErrNetworkData:    true,",
      "373:   },",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "378:    }",
      "380:    if actualMetaData != tc.ExpectedMetaData {",
      "382:    }",
      "383:   })",
      "384:  }",
      "",
      "[Removed Lines]",
      "381:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", actualMetaData, tc.ExpectedMetaData))",
      "",
      "[Added Lines]",
      "429:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", tc.ExpectedMetaData, actualMetaData))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cbeaa365e86c1d6a741339840b329be5512702cf",
      "candidate_info": {
        "commit_hash": "cbeaa365e86c1d6a741339840b329be5512702cf",
        "repo": "metal3-io/baremetal-operator",
        "commit_url": "https://github.com/metal3-io/baremetal-operator/commit/cbeaa365e86c1d6a741339840b329be5512702cf",
        "files": [
          "controllers/metal3.io/baremetalhost_controller_test.go",
          "controllers/metal3.io/host_config_data.go",
          "controllers/metal3.io/host_config_data_test.go"
        ],
        "message": "Disallow fetching secrets from namespaces different from the host's one\n\nThe BareMetalHost CRD allows the UserData, MetaData, and NetworkData for\nthe provisioned host to be specified as links to k8s Secrets. There are\nfields for both the Name and Namespace of the Secret, meaning that the\nbaremetal-operator will read a Secret from any namespace. If a Secret\ncontains the key \"value\" (or \"userData\", \"metaData\", or \"networkData\"),\nits corresponding value can be exfiltrated by a user provisioning a Host\npointing to that Secret, then retrieving that data from the provisioned\nhost.\n\nAuthored-by: Zane Bitter <zbitter@redhat.com>\nCo-Authored-By: Dmitry Tantsur <dtantsur@protonmail.com>\n\nSigned-off-by: Tuomo Tanskanen <tuomo.tanskanen@est.tech>",
        "before_after_code_files": [
          "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
          "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
          "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
            "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
            "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
          ],
          "candidate": [
            "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
            "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
            "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
          ]
        }
      },
      "candidate_diff": {
        "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go": [
          "File: controllers/metal3.io/baremetalhost_controller_test.go -> controllers/metal3.io/baremetalhost_controller_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: )",
          "43: func newSecret(name string, data map[string]string) *corev1.Secret {",
          "44:  secretData := make(map[string][]byte)",
          "45:  for k, v := range data {",
          "46:   secretData[k] = []byte(base64.StdEncoding.EncodeToString([]byte(v)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:  return newSecretInNamespace(name, namespace, data)",
          "45: }",
          "47: func newSecretInNamespace(name, namespace string, data map[string]string) *corev1.Secret {",
          "",
          "---------------"
        ],
        "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go": [
          "File: controllers/metal3.io/host_config_data.go -> controllers/metal3.io/host_config_data.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"github.com/go-logr/logr\"",
          "8:  metal3api \"github.com/metal3-io/baremetal-operator/apis/metal3.io/v1alpha1\"",
          "9:  \"github.com/metal3-io/baremetal-operator/pkg/secretutils\"",
          "10: )",
          "",
          "[Removed Lines]",
          "5:  corev1 \"k8s.io/api/core/v1\"",
          "6:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "[Added Lines]",
          "7:  \"github.com/pkg/errors\"",
          "8:  corev1 \"k8s.io/api/core/v1\"",
          "9:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: func (hcd *hostConfigData) getSecretData(name, namespace, dataKey string) (string, error) {",
          "24:  key := types.NamespacedName{",
          "25:   Name:      name,",
          "26:   Namespace: namespace,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:  if namespace != hcd.host.Namespace {",
          "25:   return \"\", errors.Errorf(\"%s secret must be in same namespace as host %s/%s\", dataKey, hcd.host.Namespace, hcd.host.Name)",
          "26:  }",
          "",
          "---------------"
        ],
        "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go": [
          "File: controllers/metal3.io/host_config_data_test.go -> controllers/metal3.io/host_config_data_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:    ExpectedNetworkData: \"\",",
          "325:    ErrNetworkData:      true,",
          "326:   },",
          "327:  }",
          "329:  for _, tc := range testCases {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327:   {",
          "328:    Scenario: \"user-data secret in different namespace\",",
          "329:    Host: newHost(\"host-user-data\",",
          "330:     &metal3api.BareMetalHostSpec{",
          "331:      BMC: metal3api.BMCDetails{",
          "332:       Address:         \"ipmi://192.168.122.1:6233\",",
          "333:       CredentialsName: defaultSecretName,",
          "334:      },",
          "335:      UserData: &corev1.SecretReference{",
          "336:       Name:      \"user-data\",",
          "337:       Namespace: \"other-namespace\",",
          "338:      },",
          "339:     }),",
          "340:    UserDataSecret: newSecretInNamespace(\"user-data\", \"other-namespace\", map[string]string{\"userData\": \"somedata\"}),",
          "341:    ErrUserData:    true,",
          "342:   },",
          "343:   {",
          "344:    Scenario: \"meta-data secret in different namespace\",",
          "345:    Host: newHost(\"host-user-data\",",
          "346:     &metal3api.BareMetalHostSpec{",
          "347:      BMC: metal3api.BMCDetails{",
          "348:       Address:         \"ipmi://192.168.122.1:6233\",",
          "349:       CredentialsName: defaultSecretName,",
          "350:      },",
          "351:      MetaData: &corev1.SecretReference{",
          "352:       Name:      \"meta-data\",",
          "353:       Namespace: \"other-namespace\",",
          "354:      },",
          "355:     }),",
          "356:    NetworkDataSecret: newSecretInNamespace(\"meta-data\", \"other-namespace\", map[string]string{\"metaData\": \"key: value\"}),",
          "357:    ErrMetaData:       true,",
          "358:   },",
          "359:   {",
          "360:    Scenario: \"network-data secret in different namespace\",",
          "361:    Host: newHost(\"host-user-data\",",
          "362:     &metal3api.BareMetalHostSpec{",
          "363:      BMC: metal3api.BMCDetails{",
          "364:       Address:         \"ipmi://192.168.122.1:6233\",",
          "365:       CredentialsName: defaultSecretName,",
          "366:      },",
          "367:      NetworkData: &corev1.SecretReference{",
          "368:       Name:      \"net-data\",",
          "369:       Namespace: \"other-namespace\",",
          "370:      },",
          "371:     }),",
          "372:    NetworkDataSecret: newSecretInNamespace(\"net-data\", \"other-namespace\", map[string]string{\"networkData\": \"key: value\"}),",
          "373:    ErrNetworkData:    true,",
          "374:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:    }",
          "381:    if actualMetaData != tc.ExpectedMetaData {",
          "383:    }",
          "384:   })",
          "385:  }",
          "",
          "[Removed Lines]",
          "382:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", actualMetaData, tc.ExpectedMetaData))",
          "",
          "[Added Lines]",
          "430:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", tc.ExpectedMetaData, actualMetaData))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b541a1d100e83a943d8ae50092149ad90f388b1",
      "candidate_info": {
        "commit_hash": "6b541a1d100e83a943d8ae50092149ad90f388b1",
        "repo": "metal3-io/baremetal-operator",
        "commit_url": "https://github.com/metal3-io/baremetal-operator/commit/6b541a1d100e83a943d8ae50092149ad90f388b1",
        "files": [
          "controllers/metal3.io/baremetalhost_controller_test.go",
          "controllers/metal3.io/host_config_data.go",
          "controllers/metal3.io/host_config_data_test.go"
        ],
        "message": "Disallow fetching secrets from namespaces different from the host's one\n\nThe BareMetalHost CRD allows the UserData, MetaData, and NetworkData for\nthe provisioned host to be specified as links to k8s Secrets. There are\nfields for both the Name and Namespace of the Secret, meaning that the\nbaremetal-operator will read a Secret from any namespace. If a Secret\ncontains the key \"value\" (or \"userData\", \"metaData\", or \"networkData\"),\nits corresponding value can be exfiltrated by a user provisioning a Host\npointing to that Secret, then retrieving that data from the provisioned\nhost.\n\nAuthored-by: Zane Bitter <zbitter@redhat.com>\nCo-Authored-By: Dmitry Tantsur <dtantsur@protonmail.com>\n\nSigned-off-by: Tuomo Tanskanen <tuomo.tanskanen@est.tech>",
        "before_after_code_files": [
          "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
          "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
          "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
            "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
            "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
          ],
          "candidate": [
            "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
            "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
            "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
          ]
        }
      },
      "candidate_diff": {
        "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go": [
          "File: controllers/metal3.io/baremetalhost_controller_test.go -> controllers/metal3.io/baremetalhost_controller_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: )",
          "39: func newSecret(name string, data map[string]string) *corev1.Secret {",
          "40:  secretData := make(map[string][]byte)",
          "41:  for k, v := range data {",
          "42:   secretData[k] = []byte(base64.StdEncoding.EncodeToString([]byte(v)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:  return newSecretInNamespace(name, namespace, data)",
          "41: }",
          "43: func newSecretInNamespace(name, namespace string, data map[string]string) *corev1.Secret {",
          "",
          "---------------"
        ],
        "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go": [
          "File: controllers/metal3.io/host_config_data.go -> controllers/metal3.io/host_config_data.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"github.com/go-logr/logr\"",
          "5:  metal3api \"github.com/metal3-io/baremetal-operator/apis/metal3.io/v1alpha1\"",
          "6:  \"github.com/metal3-io/baremetal-operator/pkg/secretutils\"",
          "7:  corev1 \"k8s.io/api/core/v1\"",
          "8:  \"k8s.io/apimachinery/pkg/types\"",
          "9: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"github.com/pkg/errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: func (hcd *hostConfigData) getSecretData(name, namespace, dataKey string) (string, error) {",
          "23:  key := types.NamespacedName{",
          "24:   Name:      name,",
          "25:   Namespace: namespace,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:  if namespace != hcd.host.Namespace {",
          "25:   return \"\", errors.Errorf(\"%s secret must be in same namespace as host %s/%s\", dataKey, hcd.host.Namespace, hcd.host.Name)",
          "26:  }",
          "",
          "---------------"
        ],
        "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go": [
          "File: controllers/metal3.io/host_config_data_test.go -> controllers/metal3.io/host_config_data_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:    ExpectedNetworkData: \"\",",
          "324:    ErrNetworkData:      true,",
          "325:   },",
          "326:  }",
          "328:  for _, tc := range testCases {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:   {",
          "327:    Scenario: \"user-data secret in different namespace\",",
          "328:    Host: newHost(\"host-user-data\",",
          "329:     &metal3api.BareMetalHostSpec{",
          "330:      BMC: metal3api.BMCDetails{",
          "331:       Address:         \"ipmi://192.168.122.1:6233\",",
          "332:       CredentialsName: defaultSecretName,",
          "333:      },",
          "334:      UserData: &corev1.SecretReference{",
          "335:       Name:      \"user-data\",",
          "336:       Namespace: \"other-namespace\",",
          "337:      },",
          "338:     }),",
          "339:    UserDataSecret: newSecretInNamespace(\"user-data\", \"other-namespace\", map[string]string{\"userData\": \"somedata\"}),",
          "340:    ErrUserData:    true,",
          "341:   },",
          "342:   {",
          "343:    Scenario: \"meta-data secret in different namespace\",",
          "344:    Host: newHost(\"host-user-data\",",
          "345:     &metal3api.BareMetalHostSpec{",
          "346:      BMC: metal3api.BMCDetails{",
          "347:       Address:         \"ipmi://192.168.122.1:6233\",",
          "348:       CredentialsName: defaultSecretName,",
          "349:      },",
          "350:      MetaData: &corev1.SecretReference{",
          "351:       Name:      \"meta-data\",",
          "352:       Namespace: \"other-namespace\",",
          "353:      },",
          "354:     }),",
          "355:    NetworkDataSecret: newSecretInNamespace(\"meta-data\", \"other-namespace\", map[string]string{\"metaData\": \"key: value\"}),",
          "356:    ErrMetaData:       true,",
          "357:   },",
          "358:   {",
          "359:    Scenario: \"network-data secret in different namespace\",",
          "360:    Host: newHost(\"host-user-data\",",
          "361:     &metal3api.BareMetalHostSpec{",
          "362:      BMC: metal3api.BMCDetails{",
          "363:       Address:         \"ipmi://192.168.122.1:6233\",",
          "364:       CredentialsName: defaultSecretName,",
          "365:      },",
          "366:      NetworkData: &corev1.SecretReference{",
          "367:       Name:      \"net-data\",",
          "368:       Namespace: \"other-namespace\",",
          "369:      },",
          "370:     }),",
          "371:    NetworkDataSecret: newSecretInNamespace(\"net-data\", \"other-namespace\", map[string]string{\"networkData\": \"key: value\"}),",
          "372:    ErrNetworkData:    true,",
          "373:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:    }",
          "380:    if actualMetaData != tc.ExpectedMetaData {",
          "382:    }",
          "383:   })",
          "384:  }",
          "",
          "[Removed Lines]",
          "381:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", actualMetaData, tc.ExpectedMetaData))",
          "",
          "[Added Lines]",
          "429:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", tc.ExpectedMetaData, actualMetaData))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c902595cb9dfdea3af5f7a1a95848e471f74ae03",
      "candidate_info": {
        "commit_hash": "c902595cb9dfdea3af5f7a1a95848e471f74ae03",
        "repo": "metal3-io/baremetal-operator",
        "commit_url": "https://github.com/metal3-io/baremetal-operator/commit/c902595cb9dfdea3af5f7a1a95848e471f74ae03",
        "files": [
          "controllers/metal3.io/baremetalhost_controller_test.go",
          "controllers/metal3.io/host_config_data.go",
          "controllers/metal3.io/host_config_data_test.go"
        ],
        "message": "Disallow fetching secrets from namespaces different from the host's one\n\nThe BareMetalHost CRD allows the UserData, MetaData, and NetworkData for\nthe provisioned host to be specified as links to k8s Secrets. There are\nfields for both the Name and Namespace of the Secret, meaning that the\nbaremetal-operator will read a Secret from any namespace. If a Secret\ncontains the key \"value\" (or \"userData\", \"metaData\", or \"networkData\"),\nits corresponding value can be exfiltrated by a user provisioning a Host\npointing to that Secret, then retrieving that data from the provisioned\nhost.\n\nAuthored-by: Zane Bitter <zbitter@redhat.com>\nCo-Authored-By: Dmitry Tantsur <dtantsur@protonmail.com>\n\nSigned-off-by: Tuomo Tanskanen <tuomo.tanskanen@est.tech>",
        "before_after_code_files": [
          "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
          "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
          "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
            "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
            "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
          ],
          "candidate": [
            "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go",
            "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go",
            "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go"
          ]
        }
      },
      "candidate_diff": {
        "controllers/metal3.io/baremetalhost_controller_test.go||controllers/metal3.io/baremetalhost_controller_test.go": [
          "File: controllers/metal3.io/baremetalhost_controller_test.go -> controllers/metal3.io/baremetalhost_controller_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: )",
          "43: func newSecret(name string, data map[string]string) *corev1.Secret {",
          "44:  secretData := make(map[string][]byte)",
          "45:  for k, v := range data {",
          "46:   secretData[k] = []byte(base64.StdEncoding.EncodeToString([]byte(v)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:  return newSecretInNamespace(name, namespace, data)",
          "45: }",
          "47: func newSecretInNamespace(name, namespace string, data map[string]string) *corev1.Secret {",
          "",
          "---------------"
        ],
        "controllers/metal3.io/host_config_data.go||controllers/metal3.io/host_config_data.go": [
          "File: controllers/metal3.io/host_config_data.go -> controllers/metal3.io/host_config_data.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"github.com/go-logr/logr\"",
          "8:  metal3api \"github.com/metal3-io/baremetal-operator/apis/metal3.io/v1alpha1\"",
          "9:  \"github.com/metal3-io/baremetal-operator/pkg/secretutils\"",
          "10: )",
          "",
          "[Removed Lines]",
          "5:  corev1 \"k8s.io/api/core/v1\"",
          "6:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "[Added Lines]",
          "7:  \"github.com/pkg/errors\"",
          "8:  corev1 \"k8s.io/api/core/v1\"",
          "9:  \"k8s.io/apimachinery/pkg/types\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: func (hcd *hostConfigData) getSecretData(name, namespace, dataKey string) (string, error) {",
          "24:  key := types.NamespacedName{",
          "25:   Name:      name,",
          "26:   Namespace: namespace,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:  if namespace != hcd.host.Namespace {",
          "25:   return \"\", errors.Errorf(\"%s secret must be in same namespace as host %s/%s\", dataKey, hcd.host.Namespace, hcd.host.Name)",
          "26:  }",
          "",
          "---------------"
        ],
        "controllers/metal3.io/host_config_data_test.go||controllers/metal3.io/host_config_data_test.go": [
          "File: controllers/metal3.io/host_config_data_test.go -> controllers/metal3.io/host_config_data_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "324:    ExpectedNetworkData: \"\",",
          "325:    ErrNetworkData:      true,",
          "326:   },",
          "327:  }",
          "329:  for _, tc := range testCases {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327:   {",
          "328:    Scenario: \"user-data secret in different namespace\",",
          "329:    Host: newHost(\"host-user-data\",",
          "330:     &metal3api.BareMetalHostSpec{",
          "331:      BMC: metal3api.BMCDetails{",
          "332:       Address:         \"ipmi://192.168.122.1:6233\",",
          "333:       CredentialsName: defaultSecretName,",
          "334:      },",
          "335:      UserData: &corev1.SecretReference{",
          "336:       Name:      \"user-data\",",
          "337:       Namespace: \"other-namespace\",",
          "338:      },",
          "339:     }),",
          "340:    UserDataSecret: newSecretInNamespace(\"user-data\", \"other-namespace\", map[string]string{\"userData\": \"somedata\"}),",
          "341:    ErrUserData:    true,",
          "342:   },",
          "343:   {",
          "344:    Scenario: \"meta-data secret in different namespace\",",
          "345:    Host: newHost(\"host-user-data\",",
          "346:     &metal3api.BareMetalHostSpec{",
          "347:      BMC: metal3api.BMCDetails{",
          "348:       Address:         \"ipmi://192.168.122.1:6233\",",
          "349:       CredentialsName: defaultSecretName,",
          "350:      },",
          "351:      MetaData: &corev1.SecretReference{",
          "352:       Name:      \"meta-data\",",
          "353:       Namespace: \"other-namespace\",",
          "354:      },",
          "355:     }),",
          "356:    NetworkDataSecret: newSecretInNamespace(\"meta-data\", \"other-namespace\", map[string]string{\"metaData\": \"key: value\"}),",
          "357:    ErrMetaData:       true,",
          "358:   },",
          "359:   {",
          "360:    Scenario: \"network-data secret in different namespace\",",
          "361:    Host: newHost(\"host-user-data\",",
          "362:     &metal3api.BareMetalHostSpec{",
          "363:      BMC: metal3api.BMCDetails{",
          "364:       Address:         \"ipmi://192.168.122.1:6233\",",
          "365:       CredentialsName: defaultSecretName,",
          "366:      },",
          "367:      NetworkData: &corev1.SecretReference{",
          "368:       Name:      \"net-data\",",
          "369:       Namespace: \"other-namespace\",",
          "370:      },",
          "371:     }),",
          "372:    NetworkDataSecret: newSecretInNamespace(\"net-data\", \"other-namespace\", map[string]string{\"networkData\": \"key: value\"}),",
          "373:    ErrNetworkData:    true,",
          "374:   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:    }",
          "381:    if actualMetaData != tc.ExpectedMetaData {",
          "383:    }",
          "384:   })",
          "385:  }",
          "",
          "[Removed Lines]",
          "382:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", actualMetaData, tc.ExpectedMetaData))",
          "",
          "[Added Lines]",
          "430:     t.Fatal(fmt.Errorf(\"Failed to assert MetaData. Expected '%s' got '%s'\", tc.ExpectedMetaData, actualMetaData))",
          "",
          "---------------"
        ]
      }
    }
  ]
}