{
  "cve_id": "CVE-2023-50944",
  "cve_desc": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows an authenticated user to access the source code of a DAG to which they don't have access.\u00a0This vulnerability is considered low since it requires an authenticated user to exploit it. Users are recommended to upgrade to version 2.8.1, which fixes this issue.",
  "repo": "apache/airflow",
  "patch_hash": "8d76538d6e105947272b000581c6fabec20146b1",
  "patch_info": {
    "commit_hash": "8d76538d6e105947272b000581c6fabec20146b1",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/8d76538d6e105947272b000581c6fabec20146b1",
    "files": [
      "airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "airflow/models/dagcode.py",
      "tests/api_connexion/endpoints/test_dag_source_endpoint.py"
    ],
    "message": "Check DAG read permission before accessing DAG code (#36257)\n\n(cherry picked from commit 30ea37e0d247ce54c2d25b115e807fdb0074d795)",
    "before_after_code_files": [
      "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "airflow/models/dagcode.py||airflow/models/dagcode.py",
      "tests/api_connexion/endpoints/test_dag_source_endpoint.py||tests/api_connexion/endpoints/test_dag_source_endpoint.py"
    ]
  },
  "patch_diff": {
    "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py": [
      "File: airflow/api_connexion/endpoints/dag_source_endpoint.py -> airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: from __future__ import annotations",
      "19: from http import HTTPStatus",
      "21: from flask import Response, current_app, request",
      "22: from itsdangerous import BadSignature, URLSafeSerializer",
      "24: from airflow.api_connexion import security",
      "26: from airflow.api_connexion.schemas.dag_source_schema import dag_source_schema",
      "27: from airflow.auth.managers.models.resource_details import DagAccessEntity",
      "28: from airflow.models.dagcode import DagCode",
      "31: @security.requires_access_dag(\"GET\", DagAccessEntity.CODE)",
      "33:     \"\"\"Get source code using file token.\"\"\"",
      "34:     secret_key = current_app.config[\"SECRET_KEY\"]",
      "35:     auth_s = URLSafeSerializer(secret_key)",
      "36:     try:",
      "37:         path = auth_s.loads(file_token)",
      "39:     except (BadSignature, FileNotFoundError):",
      "40:         raise NotFound(\"Dag source not found\")",
      "",
      "[Removed Lines]",
      "25: from airflow.api_connexion.exceptions import NotFound",
      "32: def get_dag_source(*, file_token: str) -> Response:",
      "38:         dag_source = DagCode.code(path)",
      "",
      "[Added Lines]",
      "20: from typing import TYPE_CHECKING",
      "26: from airflow.api_connexion.exceptions import NotFound, PermissionDenied",
      "28: from airflow.api_connexion.security import get_readable_dags",
      "30: from airflow.models.dag import DagModel",
      "32: from airflow.utils.session import NEW_SESSION, provide_session",
      "34: if TYPE_CHECKING:",
      "35:     from sqlalchemy.orm import Session",
      "39: @provide_session",
      "40: def get_dag_source(*, file_token: str, session: Session = NEW_SESSION) -> Response:",
      "46:         dag_ids = session.query(DagModel.dag_id).filter(DagModel.fileloc == path).all()",
      "47:         readable_dags = get_readable_dags()",
      "48:         # Check if user has read access to all the DAGs defined in the file",
      "49:         if any(dag_id[0] not in readable_dags for dag_id in dag_ids):",
      "50:             raise PermissionDenied()",
      "51:         dag_source = DagCode.code(path, session=session)",
      "",
      "---------------"
    ],
    "airflow/models/dagcode.py||airflow/models/dagcode.py": [
      "File: airflow/models/dagcode.py -> airflow/models/dagcode.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:         return cls.code(fileloc)",
      "179:     @classmethod",
      "181:         \"\"\"Return source code for this DagCode object.",
      "183:         :return: source code as string",
      "184:         \"\"\"",
      "187:     @staticmethod",
      "188:     def _get_code_from_file(fileloc):",
      "",
      "[Removed Lines]",
      "180:     def code(cls, fileloc) -> str:",
      "185:         return cls._get_code_from_db(fileloc)",
      "",
      "[Added Lines]",
      "180:     @provide_session",
      "181:     def code(cls, fileloc, session: Session = NEW_SESSION) -> str:",
      "186:         return cls._get_code_from_db(fileloc, session)",
      "",
      "---------------"
    ],
    "tests/api_connexion/endpoints/test_dag_source_endpoint.py||tests/api_connexion/endpoints/test_dag_source_endpoint.py": [
      "File: tests/api_connexion/endpoints/test_dag_source_endpoint.py -> tests/api_connexion/endpoints/test_dag_source_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))",
      "36: EXAMPLE_DAG_FILE = os.path.join(\"airflow\", \"example_dags\", \"example_bash_operator.py\")",
      "39: @pytest.fixture(scope=\"module\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: EXAMPLE_DAG_ID = \"example_bash_operator\"",
      "38: TEST_DAG_ID = \"latest_only\"",
      "39: NOT_READABLE_DAG_ID = \"latest_only_with_trigger\"",
      "40: TEST_MULTIPLE_DAGS_ID = \"dataset_produces_1\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "45:         role_name=\"Test\",",
      "46:         permissions=[(permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_CODE)],  # type: ignore",
      "47:     )",
      "48:     create_user(app, username=\"test_no_permissions\", role_name=\"TestNoPermissions\")  # type: ignore",
      "50:     yield app",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "53:         TEST_DAG_ID,",
      "54:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "55:     )",
      "56:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "57:         EXAMPLE_DAG_ID,",
      "58:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "59:     )",
      "60:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "61:         TEST_MULTIPLE_DAGS_ID,",
      "62:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "63:     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "80:     def test_should_respond_200_text(self, url_safe_serializer):",
      "81:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "82:         dagbag.sync_to_db()",
      "87:         response = self.client.get(",
      "88:             url, headers={\"Accept\": \"text/plain\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "89:         )",
      "",
      "[Removed Lines]",
      "83:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "84:         dag_docstring = self._get_dag_file_docstring(first_dag.fileloc)",
      "86:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "99:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "100:         dag_docstring = self._get_dag_file_docstring(test_dag.fileloc)",
      "102:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "95:     def test_should_respond_200_json(self, url_safe_serializer):",
      "96:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "97:         dagbag.sync_to_db()",
      "102:         response = self.client.get(",
      "103:             url, headers={\"Accept\": \"application/json\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "104:         )",
      "",
      "[Removed Lines]",
      "98:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "99:         dag_docstring = self._get_dag_file_docstring(first_dag.fileloc)",
      "101:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "114:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "115:         dag_docstring = self._get_dag_file_docstring(test_dag.fileloc)",
      "117:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "110:     def test_should_respond_406(self, url_safe_serializer):",
      "111:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "112:         dagbag.sync_to_db()",
      "116:         response = self.client.get(",
      "117:             url, headers={\"Accept\": \"image/webp\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "118:         )",
      "",
      "[Removed Lines]",
      "113:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "115:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "129:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "131:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "151:             environ_overrides={\"REMOTE_USER\": \"test_no_permissions\"},",
      "152:         )",
      "153:         assert response.status_code == 403",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "171:     def test_should_respond_403_not_readable(self, url_safe_serializer):",
      "172:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "173:         dagbag.sync_to_db()",
      "174:         dag: DAG = dagbag.dags[NOT_READABLE_DAG_ID]",
      "176:         response = self.client.get(",
      "177:             f\"/api/v1/dagSources/{url_safe_serializer.dumps(dag.fileloc)}\",",
      "178:             headers={\"Accept\": \"text/plain\"},",
      "179:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "180:         )",
      "181:         read_dag = self.client.get(",
      "182:             f\"/api/v1/dags/{NOT_READABLE_DAG_ID}\",",
      "183:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "184:         )",
      "185:         assert response.status_code == 403",
      "186:         assert read_dag.status_code == 403",
      "188:     def test_should_respond_403_some_dags_not_readable_in_the_file(self, url_safe_serializer):",
      "189:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "190:         dagbag.sync_to_db()",
      "191:         dag: DAG = dagbag.dags[TEST_MULTIPLE_DAGS_ID]",
      "193:         response = self.client.get(",
      "194:             f\"/api/v1/dagSources/{url_safe_serializer.dumps(dag.fileloc)}\",",
      "195:             headers={\"Accept\": \"text/plain\"},",
      "196:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "197:         )",
      "199:         read_dag = self.client.get(",
      "200:             f\"/api/v1/dags/{TEST_MULTIPLE_DAGS_ID}\",",
      "201:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "202:         )",
      "203:         assert response.status_code == 403",
      "204:         assert read_dag.status_code == 200",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de1f0230921246f0a85055a4ea988914b11d7bf6",
      "candidate_info": {
        "commit_hash": "de1f0230921246f0a85055a4ea988914b11d7bf6",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/de1f0230921246f0a85055a4ea988914b11d7bf6",
        "files": [
          "airflow/www/fab_security/manager.py"
        ],
        "message": "Add back FAB constant in legacy security manager (#36719)\n\n(cherry picked from commit acdbd577ab305718fbc05377c03f16c113b5ca26)",
        "before_after_code_files": [
          "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/fab_security/manager.py||airflow/www/fab_security/manager.py": [
          "File: airflow/www/fab_security/manager.py -> airflow/www/fab_security/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: log = logging.getLogger(__name__)",
          "28: __lazy_imports = {",
          "29:     \"AUTH_DB\": \"flask_appbuilder.const\",",
          "30:     \"AUTH_LDAP\": \"flask_appbuilder.const\",",
          "31:     \"LOGMSG_WAR_SEC_LOGIN_FAILED\": \"flask_appbuilder.const\",",
          "32: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:     \"AUTH_OID\": \"flask_appbuilder.const\",",
          "32:     \"AUTH_REMOTE_USER\": \"flask_appbuilder.const\",",
          "33:     \"AUTH_OAUTH\": \"flask_appbuilder.const\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1180255fccfef46db485adfd7afdb5a5ae63f00b",
      "candidate_info": {
        "commit_hash": "1180255fccfef46db485adfd7afdb5a5ae63f00b",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/1180255fccfef46db485adfd7afdb5a5ae63f00b",
        "files": [
          "airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx"
        ],
        "message": "enable mark task as failed/success always (#36254)\n\n(cherry picked from commit 20d547ecd886087cd89bcdf0015ce71dd0a12cef)",
        "before_after_code_files": [
          "airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx||airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx||airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx": [
          "File: airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx -> airflow/www/static/js/dag/details/taskInstance/taskActions/MarkInstanceAs.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:           </Flex>",
          "297:         </MenuButton>",
          "298:         <MenuList>",
          "303:             <SimpleStatus state=\"failed\" mr={2} />",
          "304:             failed",
          "305:           </MenuItem>",
          "310:             <SimpleStatus state=\"success\" mr={2} />",
          "311:             success",
          "312:           </MenuItem>",
          "",
          "[Removed Lines]",
          "299:           <MenuItem",
          "300:             onClick={markAsFailed}",
          "301:             isDisabled={!isMappedSummary && currentState === \"failed\"}",
          "302:           >",
          "306:           <MenuItem",
          "307:             onClick={markAsSuccess}",
          "308:             isDisabled={!isMappedSummary && currentState === \"success\"}",
          "309:           >",
          "",
          "[Added Lines]",
          "299:           <MenuItem onClick={markAsFailed}>",
          "303:           <MenuItem onClick={markAsSuccess}>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a161e6eb6e7f7ba8bfa57c80a83b83800d72e1ee",
      "candidate_info": {
        "commit_hash": "a161e6eb6e7f7ba8bfa57c80a83b83800d72e1ee",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/a161e6eb6e7f7ba8bfa57c80a83b83800d72e1ee",
        "files": [
          ".github/workflows/ci.yml",
          "Dockerfile",
          "Dockerfile.ci",
          "scripts/docker/install_os_dependencies.sh"
        ],
        "message": "Add zlib1g-dev package to Airflow images (#36493)\n\nSeems that when mysql repository is used to install mysql client,\nit induces libxml compilation for Python 3.8 and 3.9 and this\nlibrary requires devel version of zlib that is missing in the image.\n\nThis PR adds the devel version as dev apt dependency.\n\n(cherry picked from commit 2bc34ffcb5e830544e024e085f36481a33852f49)",
        "before_after_code_files": [
          "Dockerfile.ci||Dockerfile.ci",
          "scripts/docker/install_os_dependencies.sh||scripts/docker/install_os_dependencies.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Dockerfile.ci||Dockerfile.ci": [
          "File: Dockerfile.ci -> Dockerfile.ci",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: freetds-bin freetds-dev git gosu graphviz graphviz-dev krb5-user ldap-utils libffi-dev libgeos-dev \\",
          "59: libkrb5-dev libldap2-dev libleveldb1d libleveldb-dev libsasl2-2 libsasl2-dev libsasl2-modules \\",
          "60: libssl-dev libxmlsec1 libxmlsec1-dev locales lsb-release openssh-client pkgconf sasl2-bin \\",
          "62:         export DEV_APT_DEPS",
          "63:     fi",
          "64: }",
          "",
          "[Removed Lines]",
          "61: software-properties-common sqlite3 sudo unixodbc unixodbc-dev\"",
          "",
          "[Added Lines]",
          "61: software-properties-common sqlite3 sudo unixodbc unixodbc-dev zlib1g-dev\"",
          "",
          "---------------"
        ],
        "scripts/docker/install_os_dependencies.sh||scripts/docker/install_os_dependencies.sh": [
          "File: scripts/docker/install_os_dependencies.sh -> scripts/docker/install_os_dependencies.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: freetds-bin freetds-dev git gosu graphviz graphviz-dev krb5-user ldap-utils libffi-dev libgeos-dev \\",
          "41: libkrb5-dev libldap2-dev libleveldb1d libleveldb-dev libsasl2-2 libsasl2-dev libsasl2-modules \\",
          "42: libssl-dev libxmlsec1 libxmlsec1-dev locales lsb-release openssh-client pkgconf sasl2-bin \\",
          "44:         export DEV_APT_DEPS",
          "45:     fi",
          "46: }",
          "",
          "[Removed Lines]",
          "43: software-properties-common sqlite3 sudo unixodbc unixodbc-dev\"",
          "",
          "[Added Lines]",
          "43: software-properties-common sqlite3 sudo unixodbc unixodbc-dev zlib1g-dev\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8eb2caad8e4567cf90656c3189f80f7c56a217d5",
      "candidate_info": {
        "commit_hash": "8eb2caad8e4567cf90656c3189f80f7c56a217d5",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/8eb2caad8e4567cf90656c3189f80f7c56a217d5",
        "files": [
          "tests/test_utils/www.py",
          "tests/www/views/conftest.py",
          "tests/www/views/test_anonymous_as_admin_role.py"
        ],
        "message": "Add unit test for AUTH_ROLE_PUBLIC=Admin (#36787)\n\nSigned-off-by: BobDu <i@bobdu.cc>\n(cherry picked from commit a87953e8382e2e5d0af98368e896fe78af04da27)",
        "before_after_code_files": [
          "tests/test_utils/www.py||tests/test_utils/www.py",
          "tests/www/views/conftest.py||tests/www/views/conftest.py",
          "tests/www/views/test_anonymous_as_admin_role.py||tests/www/views/test_anonymous_as_admin_role.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/test_utils/www.py||tests/test_utils/www.py": [
          "File: tests/test_utils/www.py -> tests/test_utils/www.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:     return client",
          "42: def check_content_in_response(text, resp, resp_code=200):",
          "43:     resp_html = resp.data.decode(\"utf-8\")",
          "44:     assert resp_code == resp.status_code",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: def client_without_login_as_admin(app):",
          "43:     # Anonymous users as Admin if set AUTH_ROLE_PUBLIC=Admin",
          "44:     app.config[\"AUTH_ROLE_PUBLIC\"] = \"Admin\"",
          "45:     client = app.test_client()",
          "46:     return client",
          "",
          "---------------"
        ],
        "tests/www/views/conftest.py||tests/www/views/conftest.py": [
          "File: tests/www/views/conftest.py -> tests/www/views/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: from tests.test_utils.api_connexion_utils import delete_user",
          "31: from tests.test_utils.config import conf_vars",
          "32: from tests.test_utils.decorators import dont_initialize_flask_app_submodules",
          "36: @pytest.fixture(autouse=True, scope=\"module\")",
          "",
          "[Removed Lines]",
          "33: from tests.test_utils.www import client_with_login, client_without_login",
          "",
          "[Added Lines]",
          "33: from tests.test_utils.www import client_with_login, client_without_login, client_without_login_as_admin",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:     return client_without_login(app)",
          "133: class _TemplateWithContext(NamedTuple):",
          "134:     template: jinja2.environment.Template",
          "135:     context: dict[str, Any]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133: @pytest.fixture()",
          "134: def anonymous_client_as_admin(app):",
          "135:     return client_without_login_as_admin(app)",
          "",
          "---------------"
        ],
        "tests/www/views/test_anonymous_as_admin_role.py||tests/www/views/test_anonymous_as_admin_role.py": [
          "File: tests/www/views/test_anonymous_as_admin_role.py -> tests/www/views/test_anonymous_as_admin_role.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # Licensed to the Apache Software Foundation (ASF) under one",
          "3: # or more contributor license agreements.  See the NOTICE file",
          "4: # distributed with this work for additional information",
          "5: # regarding copyright ownership.  The ASF licenses this file",
          "6: # to you under the Apache License, Version 2.0 (the",
          "7: # \"License\"); you may not use this file except in compliance",
          "8: # with the License.  You may obtain a copy of the License at",
          "9: #",
          "10: #   http://www.apache.org/licenses/LICENSE-2.0",
          "11: #",
          "12: # Unless required by applicable law or agreed to in writing,",
          "13: # software distributed under the License is distributed on an",
          "14: # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
          "15: # KIND, either express or implied.  See the License for the",
          "16: # specific language governing permissions and limitations",
          "17: # under the License.",
          "18: from __future__ import annotations",
          "20: import pytest",
          "22: from airflow.models import Pool",
          "23: from airflow.utils.session import create_session",
          "24: from tests.test_utils.www import check_content_in_response",
          "26: pytestmark = pytest.mark.db_test",
          "28: POOL = {",
          "29:     \"pool\": \"test-pool\",",
          "30:     \"slots\": 777,",
          "31:     \"description\": \"test-pool-description\",",
          "32:     \"include_deferred\": False,",
          "33: }",
          "36: @pytest.fixture(autouse=True)",
          "37: def clear_pools():",
          "38:     with create_session() as session:",
          "39:         session.query(Pool).delete()",
          "42: @pytest.fixture()",
          "43: def pool_factory(session):",
          "44:     def factory(**values):",
          "45:         pool = Pool(**{**POOL, **values})  # Passed in values override defaults.",
          "46:         session.add(pool)",
          "47:         session.commit()",
          "48:         return pool",
          "50:     return factory",
          "53: def test_delete_pool_anonymous_user_no_role(anonymous_client, pool_factory):",
          "54:     pool = pool_factory()",
          "55:     resp = anonymous_client.post(f\"pool/delete/{pool.id}\")",
          "56:     assert 302 == resp.status_code",
          "57:     assert \"/login/\" == resp.headers[\"Location\"]",
          "60: def test_delete_pool_anonymous_user_as_admin(anonymous_client_as_admin, pool_factory):",
          "61:     pool = pool_factory()",
          "62:     resp = anonymous_client_as_admin.post(f\"pool/delete/{pool.id}\", follow_redirects=True)",
          "63:     check_content_in_response(\"Deleted Row\", resp)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5dad650b526374365681d72613a73475cdecf127",
      "candidate_info": {
        "commit_hash": "5dad650b526374365681d72613a73475cdecf127",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/5dad650b526374365681d72613a73475cdecf127",
        "files": [
          "airflow/auth/managers/base_auth_manager.py",
          "tests/api_connexion/endpoints/test_dag_run_endpoint.py"
        ],
        "message": "Bugfix: Webserver returns 500 for POST requests to api/dag/*/dagrun from anonymous user (#36275)\n\n* airflow#36110 -  bugfix\n\n* return type fixed\n\n* airflow#36110 -  bugfix\n\n* airflow#36110 -  fixes\n\n* airflow#36110 -  fixes\n\n* airflow#36110 -  adding test\n\n* airflow#36110 -  adding test\n\n* Fix unit test\n\n* Don't call get_id twice\n\n* Update app configuration after initialization\n\n---------\n\nCo-authored-by: hussein-awala <hussein@awala.fr>\nCo-authored-by: Tzu-ping Chung <uranusjr@gmail.com>\n(cherry picked from commit 71bc871d35cd3b562a49ce8f209098e2e24c1ef8)",
        "before_after_code_files": [
          "airflow/auth/managers/base_auth_manager.py||airflow/auth/managers/base_auth_manager.py",
          "tests/api_connexion/endpoints/test_dag_run_endpoint.py||tests/api_connexion/endpoints/test_dag_run_endpoint.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/auth/managers/base_auth_manager.py||airflow/auth/managers/base_auth_manager.py": [
          "File: airflow/auth/managers/base_auth_manager.py -> airflow/auth/managers/base_auth_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     def get_user(self) -> BaseUser | None:",
          "100:         \"\"\"Return the user associated to the user in session.\"\"\"",
          "103:         \"\"\"Return the user ID associated to the user in session.\"\"\"",
          "104:         user = self.get_user()",
          "105:         if not user:",
          "106:             self.log.error(\"Calling 'get_user_id()' but the user is not signed in.\")",
          "107:             raise AirflowException(\"The user must be signed in.\")",
          "110:     def init(self) -> None:",
          "111:         \"\"\"",
          "",
          "[Removed Lines]",
          "102:     def get_user_id(self) -> str:",
          "108:         return str(user.get_id())",
          "",
          "[Added Lines]",
          "102:     def get_user_id(self) -> str | None:",
          "108:         if user_id := user.get_id():",
          "109:             return str(user_id)",
          "110:         return None",
          "",
          "---------------"
        ],
        "tests/api_connexion/endpoints/test_dag_run_endpoint.py||tests/api_connexion/endpoints/test_dag_run_endpoint.py": [
          "File: tests/api_connexion/endpoints/test_dag_run_endpoint.py -> tests/api_connexion/endpoints/test_dag_run_endpoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1861:             environ_overrides={\"REMOTE_USER\": \"test\"},",
          "1862:         )",
          "1863:         assert response.status_code == 404",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1865:     @conf_vars(",
          "1866:         {",
          "1867:             (\"api\", \"auth_backends\"): \"airflow.api.auth.backend.default\",",
          "1868:         }",
          "1869:     )",
          "1870:     def test_should_respond_200_with_anonymous_user(self, dag_maker, session):",
          "1871:         from airflow.www import app as application",
          "1873:         app = application.create_app(testing=True)",
          "1874:         app.config[\"AUTH_ROLE_PUBLIC\"] = \"Admin\"",
          "1875:         dag_runs = self._create_test_dag_run(DagRunState.SUCCESS)",
          "1876:         session.add_all(dag_runs)",
          "1877:         session.commit()",
          "1878:         created_dr = dag_runs[0]",
          "1879:         response = app.test_client().patch(",
          "1880:             f\"api/v1/dags/{created_dr.dag_id}/dagRuns/TEST_DAG_RUN_ID_1/setNote\",",
          "1881:             json={\"note\": \"I am setting a note with anonymous user\"},",
          "1882:         )",
          "1883:         assert response.status_code == 200",
          "",
          "---------------"
        ]
      }
    }
  ]
}