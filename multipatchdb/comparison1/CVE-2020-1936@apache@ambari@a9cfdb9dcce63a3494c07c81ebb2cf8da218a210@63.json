{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6fd7ce1a7e580b604b0c6e486e181bf2374b2ac1",
      "candidate_info": {
        "commit_hash": "6fd7ce1a7e580b604b0c6e486e181bf2374b2ac1",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6fd7ce1a7e580b604b0c6e486e181bf2374b2ac1",
        "files": [
          "ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py",
          "ambari-server/src/test/python/stacks/2.1/STORM/test_service_check.py",
          "ambari-server/src/test/python/stacks/2.3/STORM/test_service_check.py"
        ],
        "message": "AMBARI-25343. Storm Service Check fails during Rolling Upgrade due to\u2026 (#3058)\n\n* AMBARI-25343. Storm Service Check fails during Rolling Upgrade due to Nimbus leader selection (dlysnichenko)\n\n* AMBARI-25343. Storm Service Check fails during Rolling Upgrade due to Nimbus leader selection - fix import (dlysnichenko)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py||ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py",
          "ambari-server/src/test/python/stacks/2.1/STORM/test_service_check.py||ambari-server/src/test/python/stacks/2.1/STORM/test_service_check.py",
          "ambari-server/src/test/python/stacks/2.3/STORM/test_service_check.py||ambari-server/src/test/python/stacks/2.3/STORM/test_service_check.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py||ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py": [
          "File: ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py -> ambari-server/src/main/resources/common-services/STORM/0.9.1/package/scripts/service_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         storm_client_jaas_file = format(\"{conf_dir}/client_jaas.conf\")",
          "76:         cmd = format(\"{kinit_cmd}{cmd} -c java.security.auth.login.config={storm_client_jaas_file}\")",
          "78:     Execute(cmd,",
          "79:             logoutput=True,",
          "80:             path=params.storm_bin_dir,",
          "84:     Execute(format(\"storm kill WordCount{unique}\"),",
          "85:             path=params.storm_bin_dir,",
          "86:             user=params.storm_user",
          "89: if __name__ == \"__main__\":",
          "90:   ServiceCheck().execute()",
          "",
          "[Removed Lines]",
          "81:             user=params.storm_user",
          "82:     )",
          "87:     )",
          "",
          "[Added Lines]",
          "78:     try_count = 1",
          "79:     if params.nimbus_hosts and len(params.nimbus_hosts) > 1:",
          "80:       try_count = 3",
          "81:       print(\"Nimbus HA is enabled. The check may be retried up to %d times in order to wait for the Nimbus leader selection\" % try_count)",
          "85:             user=params.storm_user,",
          "86:             try_sleep=30,",
          "87:             tries=try_count",
          "88:             )",
          "93:             )",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/stacks/2.1/STORM/test_service_check.py||ambari-server/src/test/python/stacks/2.1/STORM/test_service_check.py": [
          "File: ambari-server/src/test/python/stacks/2.1/STORM/test_service_check.py -> ambari-server/src/test/python/stacks/2.1/STORM/test_service_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:     self.assertResourceCalled('Execute', 'storm jar /tmp/wordCount.jar storm.starter.WordCountTopology WordCount -c nimbus.host=c6402.ambari.apache.org',",
          "45:       logoutput = True,",
          "46:       path = ['/usr/bin'],",
          "47:       user = 'storm'",
          "48:     )",
          "49:     self.assertResourceCalled('Execute', 'storm kill WordCount',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:       tries = 1,",
          "48:       try_sleep = 30,",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/stacks/2.3/STORM/test_service_check.py||ambari-server/src/test/python/stacks/2.3/STORM/test_service_check.py": [
          "File: ambari-server/src/test/python/stacks/2.3/STORM/test_service_check.py -> ambari-server/src/test/python/stacks/2.3/STORM/test_service_check.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     self.assertResourceCalled('Execute', 'storm jar /tmp/wordCount.jar storm.starter.WordCountTopology WordCount',",
          "44:       logoutput = True,",
          "45:       path = ['/usr/hdp/current/storm-client/bin'],",
          "46:       user = 'storm'",
          "47:     )",
          "48:     self.assertResourceCalled('Execute', 'storm kill WordCount',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:       tries = 3,",
          "47:       try_sleep = 30,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da4e607a48033ab1f359b3ace302fcf29d823e38",
      "candidate_info": {
        "commit_hash": "da4e607a48033ab1f359b3ace302fcf29d823e38",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/da4e607a48033ab1f359b3ace302fcf29d823e38",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "ambari-agent/src/main/python/ambari_agent/PythonExecutor.py"
        ],
        "message": "Revert \"AMBARI-24270. Agent Status Command Are Randomly Failing With Empty stderr (aonishuk) (#1728)\"\n\nThis reverts commit 219a23623349bc3715f6c667369477bd32ef1b0b.",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py||ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "ambari-agent/src/main/python/ambari_agent/PythonExecutor.py||ambari-agent/src/main/python/ambari_agent/PythonExecutor.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py||ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py -> ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:     if status == LiveStatus.DEAD_STATUS:",
          "137:       stderr = component_status_result['stderr']",
          "138:       if not \"ComponentIsNotRunning\" in stderr and not \"ClientComponentHasNoStatus\" in stderr:",
          "141:     result = {",
          "142:       'serviceName': service_name,",
          "",
          "[Removed Lines]",
          "139:         logger.info(\"Status command for {0} failed ({1}) :\\n{2}\".format(component_name, component_status_result, stderr))",
          "",
          "[Added Lines]",
          "139:         logger.info(\"Status command for {0} failed:\\n{1}\".format(component_name, stderr))",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py": [
          "File: ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py -> ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:     try:",
          "328:       command = self.generate_command(command_header)",
          "330:       script_type = command['commandParams']['script_type']",
          "331:       script = command['commandParams']['script']",
          "332:       timeout = int(command['commandParams']['command_timeout'])",
          "",
          "[Removed Lines]",
          "329:       logger.info(\"Generated command\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:         command_name = command['roleCommand']",
          "341:       else:",
          "342:         task_id = 'status'",
          "346:       if forced_command_name is not None:  # If not supplied as an argument",
          "347:         command_name = forced_command_name",
          "",
          "[Removed Lines]",
          "344:       logger.info(\"[{0}]\".format(task_id))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "425:         if log_out_files:",
          "426:           script_params.append(\"-o\")",
          "434:         ret = python_executor.run_file(py_file, script_params,",
          "435:                                tmpoutfile, tmperrfile, timeout,",
          "436:                                tmpstrucoutfile, self.map_task_to_process,",
          "437:                                task_id, override_output_files, backup_log_files = backup_log_files,",
          "438:                                handle = handle, log_info_on_failure=log_info_on_failure)",
          "440:         # Next run_file() invocations should always append to current output",
          "441:         override_output_files = False",
          "442:         if ret['exitcode'] != 0:",
          "",
          "[Removed Lines]",
          "428:         logger.info(\"[{0}] python_executor.run_file({1})\".format(task_id, (py_file, script_params,",
          "429:                                tmpoutfile, tmperrfile, timeout,",
          "430:                                tmpstrucoutfile, self.map_task_to_process,",
          "431:                                task_id, override_output_files, backup_log_files,",
          "432:                                handle, log_info_on_failure)))",
          "439:         logger.info(\"[{0}] python_executor.run_file() returned {1}\", task_id, ret)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "448:       # if canceled and not background command",
          "449:       if handle is None:",
          "451:         cancel_reason = self.command_canceled_reason(task_id)",
          "452:         if cancel_reason is not None:",
          "453:           ret['stdout'] += cancel_reason",
          "",
          "[Removed Lines]",
          "450:         logger.info(\"[{0}] canceled\", task_id)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "523:      Exit code 0 means that component is running and any other exit code means that",
          "524:      component is not running",
          "525:     \"\"\"",
          "527:     override_output_files=True # by default, we override status command output",
          "528:     if logger.level == logging.DEBUG:",
          "529:       override_output_files = False",
          "",
          "[Removed Lines]",
          "526:     logger.info(\"Requesting component status {0}\".format(command_header))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "531:     res = self.runCommand(command_header, self.status_commands_stdout,",
          "532:                           self.status_commands_stderr, self.COMMAND_NAME_STATUS,",
          "533:                           override_output_files=override_output_files, is_status_command=True)",
          "536:     return res",
          "538:   def resolve_script_path(self, base_dir, script):",
          "",
          "[Removed Lines]",
          "535:     logger.info(\"requestComponentStatus return={0}\".format(res))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/PythonExecutor.py||ambari-agent/src/main/python/ambari_agent/PythonExecutor.py": [
          "File: ambari-agent/src/main/python/ambari_agent/PythonExecutor.py -> ambari-agent/src/main/python/ambari_agent/PythonExecutor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   used as a singleton for a concurrent execution of python scripts",
          "45:   \"\"\"",
          "46:   NO_ERROR = \"none\"",
          "49:   def __init__(self, tmpDir, config):",
          "50:     self.grep = Grep()",
          "",
          "[Removed Lines]",
          "47:   i = 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     recreated or appended.",
          "95:     The structured out file, however, is preserved during multiple invocations that use the same file.",
          "96:     \"\"\"",
          "99:     pythonCommand = self.python_command(script, script_params)",
          "102:     if handle is None:",
          "103:       tmpout, tmperr = self.open_subprocess32_files(tmpoutfile, tmperrfile, override_output_files, backup_log_files)",
          "105:       process = self.launch_python_subprocess32(pythonCommand, tmpout, tmperr)",
          "107:       # map task_id to pid",
          "108:       callback(task_id, process.pid)",
          "109:       logger.debug(\"Launching watchdog thread\")",
          "",
          "[Removed Lines]",
          "97:     PythonExecutor.i += 1",
          "100:     logger.info(\"[%d] Running command %s\", PythonExecutor.i, pprint.pformat(pythonCommand))",
          "106:       logger.info(\"[%d] Started process with pid = %s\", PythonExecutor.i, process.pid)",
          "",
          "[Added Lines]",
          "97:     if logger.isEnabledFor(logging.DEBUG):",
          "98:       logger.debug(\"Running command %s\", pprint.pformat(pythonCommand))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:       thread.start()",
          "114:       # Waiting for the process to be either finished or killed",
          "115:       process.communicate()",
          "117:       self.event.set()",
          "118:       thread.join()",
          "119:       result = self.prepare_process_result(process.returncode, tmpoutfile, tmperrfile, tmpstructedoutfile, timeout=timeout)",
          "",
          "[Removed Lines]",
          "116:       logger.info(\"[{0}] Process communicated {1}\", PythonExecutor.i, (process.returncode, tmpoutfile, tmperrfile, tmpstructedoutfile, timeout))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:       if log_info_on_failure and result['exitcode']:",
          "122:         self.on_failure(pythonCommand, result)",
          "125:       return result",
          "126:     else:",
          "128:       holder = Holder(pythonCommand, tmpoutfile, tmperrfile, tmpstructedoutfile, handle)",
          "130:       background = BackgroundThread(holder, self)",
          "",
          "[Removed Lines]",
          "124:       logger.info(\"[{0}] PE.run_file() returned {1}\", PythonExecutor.i, result)",
          "127:       logger.info(\"[{0}] has handle\", PythonExecutor.i)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:       for k, v in command_env.iteritems():",
          "183:         command_env[k] = str(v)",
          "186:     return subprocess32.Popen(command,",
          "187:       stdout=tmpout,",
          "188:       stderr=tmperr, close_fds=close_fds, env=command_env, preexec_fn=self.preexec_fn)",
          "",
          "[Removed Lines]",
          "185:     logger.info(\"[{0}] launch_python_subprocess32 {1}\".format(PythonExecutor.i, (command, tmpout, tmperr, close_fds, self.preexec_fn)))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fbcf42a1a2b630fc4c69c8a50f1c8ae1a50e1f5",
      "candidate_info": {
        "commit_hash": "4fbcf42a1a2b630fc4c69c8a50f1c8ae1a50e1f5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/4fbcf42a1a2b630fc4c69c8a50f1c8ae1a50e1f5",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java"
        ],
        "message": "AMBARI-25433. Adding VDF fails with paywalled repos/urls (aonishuk)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.io.InputStream;",
          "25: import java.net.HttpURLConnection;",
          "26: import java.net.URL;",
          "27: import java.security.KeyStore;",
          "28: import java.util.Collections;",
          "29: import java.util.HashMap;",
          "30: import java.util.List;",
          "31: import java.util.Map;",
          "33: import javax.net.ssl.HttpsURLConnection;",
          "34: import javax.net.ssl.SSLContext;",
          "35: import javax.net.ssl.SSLSocketFactory;",
          "36: import javax.net.ssl.TrustManagerFactory;",
          "38: import org.apache.ambari.server.configuration.ComponentSSLConfiguration;",
          "39: import org.apache.ambari.server.controller.utilities.StreamProvider;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import java.net.URLConnection;",
          "28: import java.security.KeyManagementException;",
          "30: import java.security.NoSuchAlgorithmException;",
          "31: import java.security.SecureRandom;",
          "32: import java.security.cert.X509Certificate;",
          "38: import javax.net.ssl.HostnameVerifier;",
          "41: import javax.net.ssl.SSLSession;",
          "43: import javax.net.ssl.TrustManager;",
          "45: import javax.net.ssl.X509TrustManager;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:     return cookies + \"; \" + newCookie;",
          "289:   }",
          "295:   protected HttpURLConnection getConnection(URL url) throws IOException {",
          "297:   }",
          "",
          "[Removed Lines]",
          "296:     return (HttpURLConnection) url.openConnection();",
          "",
          "[Added Lines]",
          "300:   public static class TrustAllHostnameVerifier implements HostnameVerifier",
          "301:   {",
          "302:     public boolean verify(String hostname, SSLSession session) { return true; }",
          "303:   }",
          "305:   public static class TrustAllManager implements X509TrustManager",
          "306:   {",
          "307:     public X509Certificate[] getAcceptedIssuers()",
          "308:     {",
          "309:       return new X509Certificate[0];",
          "310:     }",
          "311:     public void checkClientTrusted(X509Certificate[] certs, String authType) {}",
          "312:     public void checkServerTrusted(X509Certificate[] certs, String authType) {}",
          "313:   }",
          "319:     URLConnection connection = url.openConnection();",
          "321:     if (!setupTruststoreForHttps) {",
          "322:       HttpsURLConnection httpsConnection = (HttpsURLConnection) connection;",
          "325:       TrustManager[] trustAllCerts = new TrustManager[] {",
          "326:           new TrustAllManager()",
          "327:       };",
          "330:       HostnameVerifier hostnameVerifier = new TrustAllHostnameVerifier();",
          "332:       try {",
          "333:         SSLContext sc = SSLContext.getInstance(\"SSL\");",
          "334:         sc.init(null, trustAllCerts, new SecureRandom());",
          "335:         httpsConnection.setSSLSocketFactory(sc.getSocketFactory());",
          "336:         httpsConnection.setHostnameVerifier(hostnameVerifier);",
          "337:       } catch (NoSuchAlgorithmException | KeyManagementException e) {",
          "338:         throw new IllegalStateException(\"Cannot create unverified ssl context.\", e);",
          "339:       }",
          "340:     }",
          "342:     return (HttpURLConnection) connection;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90947893a7c686c5a1feb6feb3e23c4406603355",
      "candidate_info": {
        "commit_hash": "90947893a7c686c5a1feb6feb3e23c4406603355",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/90947893a7c686c5a1feb6feb3e23c4406603355",
        "files": [
          "ambari-web/app/controllers/installer.js"
        ],
        "message": "AMBARI-24684. Wrong repo urls on UI for HDP-3.0.1.0 Default Version Definition",
        "before_after_code_files": [
          "ambari-web/app/controllers/installer.js||ambari-web/app/controllers/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/installer.js||ambari-web/app/controllers/installer.js": [
          "File: ambari-web/app/controllers/installer.js -> ambari-web/app/controllers/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:         supportedOS.isSelected = false;",
          "721:         existedOS.push(supportedOS);",
          "722:       } else {",
          "744:           });",
          "746:       }",
          "747:     });",
          "",
          "[Removed Lines]",
          "723:         if (stack_default) { // only overwrite if it is stack default, otherwise use url from /version_definition",
          "724:           existedMap[supportedOS.OperatingSystems.os_type].repositories.forEach(function (repo) {",
          "725:             supportedOS.repositories.forEach(function (supportedRepo) {",
          "726:               if (supportedRepo.Repositories.repo_id == repo.Repositories.repo_id) {",
          "727:                 repo.Repositories.base_url = supportedRepo.Repositories.base_url;",
          "728:                 repo.Repositories.default_base_url = supportedRepo.Repositories.default_base_url;",
          "729:                 repo.Repositories.latest_base_url = supportedRepo.Repositories.latest_base_url;",
          "730:                 repo.Repositories.components = supportedRepo.Repositories.components;",
          "731:                 repo.Repositories.distribution = supportedRepo.Repositories.distribution;",
          "732:               }",
          "733:             });",
          "734:           });",
          "735:         }",
          "736:         else{",
          "737:           existedMap[supportedOS.OperatingSystems.os_type].repositories.forEach(function (repo) {",
          "738:             supportedOS.repositories.forEach(function (supportedRepo) {",
          "739:               if (supportedRepo.Repositories.repo_id == repo.Repositories.repo_id) {",
          "740:                 repo.Repositories.components = supportedRepo.Repositories.components;",
          "741:                 repo.Repositories.distribution = supportedRepo.Repositories.distribution;",
          "742:               }",
          "743:             });",
          "745:         }",
          "",
          "[Added Lines]",
          "723:         existedMap[supportedOS.OperatingSystems.os_type].repositories.forEach(function (repo) {",
          "724:           supportedOS.repositories.forEach(function (supportedRepo) {",
          "725:             if (supportedRepo.Repositories.repo_id == repo.Repositories.repo_id) {",
          "726:               repo.Repositories.components = supportedRepo.Repositories.components;",
          "727:               repo.Repositories.distribution = supportedRepo.Repositories.distribution;",
          "728:             }",
          "730:         });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b3611f44cbc179d68ed1867829cf331bbbfa795",
      "candidate_info": {
        "commit_hash": "4b3611f44cbc179d68ed1867829cf331bbbfa795",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/4b3611f44cbc179d68ed1867829cf331bbbfa795",
        "files": [
          "ambari-web/app/controllers/wizard/step3_controller.js"
        ],
        "message": "AMBARI-24310 UI sends host check request for custom jdk with invalid hosts. (ababiichuk)",
        "before_after_code_files": [
          "ambari-web/app/controllers/wizard/step3_controller.js||ambari-web/app/controllers/wizard/step3_controller.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/wizard/step3_controller.js||ambari-web/app/controllers/wizard/step3_controller.js": [
          "File: ambari-web/app/controllers/wizard/step3_controller.js -> ambari-web/app/controllers/wizard/step3_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "725:   },",
          "727:   doCheckJDK: function () {",
          "731:     App.ajax.send({",
          "732:       name: 'wizard.step3.jdk_check',",
          "733:       sender: this,",
          "",
          "[Removed Lines]",
          "728:     var hostsNames = (!this.get('content.installOptions.manualInstall')) ? this.get('bootHosts').filterProperty('bootStatus', 'REGISTERED').getEach('name').join(\",\") : this.get('bootHosts').getEach('name').join(\",\");",
          "729:     var javaHome = this.get('javaHome');",
          "730:     var jdkLocation = this.get('jdkLocation');",
          "",
          "[Added Lines]",
          "728:     const hostsNames = this.get('bootHosts').filterProperty('bootStatus', 'REGISTERED').getEach('name').join(','),",
          "729:       javaHome = this.get('javaHome'),",
          "730:       jdkLocation = this.get('jdkLocation');",
          "",
          "---------------"
        ]
      }
    }
  ]
}