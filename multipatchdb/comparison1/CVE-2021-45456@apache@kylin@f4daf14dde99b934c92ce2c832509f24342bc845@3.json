{
  "cve_id": "CVE-2021-45456",
  "cve_desc": "Apache kylin checks the legitimacy of the project before executing some commands with the project name passed in by the user. There is a mismatch between what is being checked and what is being used as the shell command argument in DiagnosisService. This may cause an illegal project name to pass the check and perform the following steps, resulting in a command injection vulnerability. This issue affects Apache Kylin 4.0.0.",
  "repo": "apache/kylin",
  "patch_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
  "patch_info": {
    "commit_hash": "f4daf14dde99b934c92ce2c832509f24342bc845",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/f4daf14dde99b934c92ce2c832509f24342bc845",
    "files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "server/src/main/webapp/WEB-INF/web.xml"
    ],
    "message": "test fix",
    "before_after_code_files": [
      "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java"
    ]
  },
  "patch_diff": {
    "core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3403:     public String getKerberosPrincipal() {",
      "3404:         return getOptional(\"kylin.kerberos.principal\");",
      "3405:     }",
      "3406: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3407:     public String getEncryptCipherIvSpec() {",
      "3408:         return getOptional(\"kylin.security.encrypt.cipher.ivSpec\", \"AAAAAAAAAAAAAAAA\");",
      "3409:     }",
      "",
      "---------------"
    ],
    "core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java||core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java": [
      "File: core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java -> core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: import java.security.NoSuchAlgorithmException;",
      "27: import org.apache.commons.codec.binary.Base64;",
      "29: import javax.crypto.Cipher;",
      "30: import javax.crypto.NoSuchPaddingException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: import org.apache.kylin.common.KylinConfig;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42:             InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, UnsupportedEncodingException {",
      "43:         Cipher cipher = Cipher.getInstance(\"AES/CFB/PKCS5Padding\");",
      "44:         final SecretKeySpec secretKey = new SecretKeySpec(key, \"AES\");",
      "46:         cipher.init(cipherMode, secretKey, ivSpec);",
      "47:         return cipher;",
      "48:     }",
      "",
      "[Removed Lines]",
      "45:         IvParameterSpec ivSpec = new IvParameterSpec(\"AAAAAAAAAAAAAAAA\".getBytes(\"UTF-8\"));",
      "",
      "[Added Lines]",
      "46:         IvParameterSpec ivSpec = new IvParameterSpec(KylinConfig.getInstanceFromEnv().getEncryptCipherIvSpec().getBytes(\"UTF-8\"));",
      "",
      "---------------"
    ],
    "core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java||core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java": [
      "File: core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java -> core-common/src/test/java/org/apache/kylin/common/util/EncryptUtilTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: package org.apache.kylin.common.util;",
      "21: import org.junit.Assert;",
      "22: import org.junit.Test;",
      "26:     @Test",
      "27:     public void testAESEncrypt(){",
      "",
      "[Removed Lines]",
      "24: public class EncryptUtilTest {",
      "",
      "[Added Lines]",
      "21: import org.junit.After;",
      "23: import org.junit.Before;",
      "26: public class EncryptUtilTest extends LocalFileMetadataTestCase {",
      "27:     @Before",
      "28:     public void setUp() throws Exception {",
      "29:         this.createTestMetadata();",
      "30:     }",
      "32:     @After",
      "33:     public void after() throws Exception {",
      "34:         this.cleanupTestMetadata();",
      "35:     }",
      "",
      "---------------"
    ],
    "server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java||server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java": [
      "File: server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java -> server-base/src/main/java/org/apache/kylin/rest/service/DiagnosisService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     public String dumpProjectDiagnosisInfo(String project, File exportPath) throws IOException {",
      "88:         Message msg = MsgPicker.getMsg();",
      "89:         ProjectInstance projectInstance =",
      "90:                 ProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
      "92:         if (null == projectInstance) {",
      "93:             throw new BadRequestException(",
      "95:         }",
      "96:         aclEvaluate.checkProjectOperationPermission(projectInstance);",
      "98:         runDiagnosisCLI(args);",
      "99:         return getDiagnosisPackageName(exportPath);",
      "100:     }",
      "",
      "[Removed Lines]",
      "91:                         .getProject(ValidateUtil.convertStringToBeAlphanumericUnderscore(project));",
      "94:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), project));",
      "97:         String[] args = { project, exportPath.getAbsolutePath() };",
      "",
      "[Added Lines]",
      "89:         String projectName = ValidateUtil.convertStringToBeAlphanumericUnderscore(project);",
      "92:                         .getProject(projectName);",
      "95:                     String.format(Locale.ROOT, msg.getDIAG_PROJECT_NOT_FOUND(), projectName));",
      "98:         String[] args = { projectName, exportPath.getAbsolutePath() };",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "273fae822e4ce7e7c7434c4d1fccadb5bb9db719",
      "candidate_info": {
        "commit_hash": "273fae822e4ce7e7c7434c4d1fccadb5bb9db719",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/273fae822e4ce7e7c7434c4d1fccadb5bb9db719",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/QueryContext.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "query/src/main/codegen/javacc/org/apache/kylin/query/util/CommentParser.jj",
          "query/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "query/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java",
          "query/src/main/java/org/apache/kylin/query/util/QueryModelPriorities.java",
          "query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "query/src/test/java/org/apache/kylin/query/util/DefaultQueryTransformerTest.java",
          "query/src/test/java/org/apache/kylin/query/util/QueryModelPrioritiesTest.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java"
        ],
        "message": "KYLIN-5166 Use SQL hint to specify the cube that the user wants to query",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/QueryContext.java||core-common/src/main/java/org/apache/kylin/common/QueryContext.java",
          "core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java||core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "query/src/main/codegen/javacc/org/apache/kylin/query/util/CommentParser.jj||query/src/main/codegen/javacc/org/apache/kylin/query/util/CommentParser.jj",
          "query/src/main/java/org/apache/kylin/query/routing/Candidate.java||query/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "query/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java||query/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java",
          "query/src/main/java/org/apache/kylin/query/util/QueryModelPriorities.java||query/src/main/java/org/apache/kylin/query/util/QueryModelPriorities.java",
          "query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java||query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "query/src/test/java/org/apache/kylin/query/util/DefaultQueryTransformerTest.java||query/src/test/java/org/apache/kylin/query/util/DefaultQueryTransformerTest.java",
          "query/src/test/java/org/apache/kylin/query/util/QueryModelPrioritiesTest.java||query/src/test/java/org/apache/kylin/query/util/QueryModelPrioritiesTest.java",
          "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java||server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/QueryContext.java||core-common/src/main/java/org/apache/kylin/common/QueryContext.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/QueryContext.java -> core-common/src/main/java/org/apache/kylin/common/QueryContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     private List<QueryStopListener> stopListeners = Lists.newCopyOnWriteArrayList();",
          "78:     private List<RPCStatistics> rpcStatisticsList = Lists.newCopyOnWriteArrayList();",
          "79:     private Map<Integer, CubeSegmentStatisticsResult> cubeSegmentStatisticsResultMap = Maps.newConcurrentMap();",
          "81:     private Object olapRel;",
          "82:     private Object resultType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     private String[] cubePriorities = new String[0];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:         return stopReason;",
          "285:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "288:     public String[] getCubePriorities() {",
          "289:         return cubePriorities;",
          "290:     }",
          "292:     public void setCubePriorities(String[] cubePriorities) {",
          "293:         this.cubePriorities = cubePriorities;",
          "294:     }",
          "",
          "---------------"
        ],
        "core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java||core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java": [
          "File: core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java -> core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     public List<CapabilityInfluence> influences = Lists.newArrayListWithCapacity(1);",
          "53:     public static interface CapabilityInfluence {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     public void setCost(int cost) {",
          "54:         this.cost = cost;",
          "55:     }",
          "",
          "---------------"
        ],
        "query/src/main/codegen/javacc/org/apache/kylin/query/util/CommentParser.jj||query/src/main/codegen/javacc/org/apache/kylin/query/util/CommentParser.jj": [
          "File: query/src/main/codegen/javacc/org/apache/kylin/query/util/CommentParser.jj -> query/src/main/codegen/javacc/org/apache/kylin/query/util/CommentParser.jj",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: <DEFAULT>",
          "66: SKIP : {",
          "69: }",
          "71: < DEFAULT >",
          "",
          "[Removed Lines]",
          "67:     \"/*\" : WITHINCOMMENT",
          "68:     | <\"--\" (~[\"\\n\",\"\\r\"])*>",
          "",
          "[Added Lines]",
          "67:     <\"--\" (~[\"\\n\",\"\\r\"])*>",
          "68: }",
          "70: <DEFAULT>",
          "71: SKIP :",
          "72: {",
          "73:     \"/**/\"",
          "74:     | <\"/*\" ~[\"+\"]> : WITHINCOMMENT",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77: | < DOUBLE_QUOTE: \"\\\"\" >",
          "78: | < DOUBLE_QUOTE_STRING: <DOUBLE_QUOTE> ( (~[\"\\\"\"]) | (\"\\\"\\\"\"))* <DOUBLE_QUOTE> >",
          "79: | < ANY : (~[\" \", \",\", \"\\t\", \"\\n\", \"\\r\", \"/\", \"-\" ])+ >",
          "80: }",
          "82: <WITHINCOMMENT>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: | < HINT_BEG: \"/*+\" >",
          "87: | < COMMENT_END: \"*/\" >",
          "88: | < HINT: <HINT_BEG> (~[\"\\n\", \"\\r\", \"*\", \"/\"])* <COMMENT_END> >",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:     | innerString = DoubleQuoteString()",
          "129:     | innerString = RemainToken()",
          "130:     | innerString = Any()",
          "131:     )",
          "132:     {",
          "133:         return innerString + nextString;",
          "134:     }",
          "135: }",
          "137: String RemainToken() :",
          "138: {}",
          "139: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:     | innerString = Hint()",
          "147: String Hint():",
          "148: {}",
          "149: {",
          "150:     <HINT>",
          "151:     {",
          "152:         logger.trace(\"meet token <HINT>\");",
          "153:         return getToken(0).image;",
          "154:     }",
          "155: }",
          "",
          "---------------"
        ],
        "query/src/main/java/org/apache/kylin/query/routing/Candidate.java||query/src/main/java/org/apache/kylin/query/routing/Candidate.java": [
          "File: query/src/main/java/org/apache/kylin/query/routing/Candidate.java -> query/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.Collections;",
          "22: import java.util.Map;",
          "24: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "25: import org.apache.kylin.metadata.realization.IRealization;",
          "26: import org.apache.kylin.metadata.realization.RealizationType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.Comparator;",
          "23: import java.util.HashMap;",
          "26: import org.apache.kylin.common.QueryContextFacade;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import com.google.common.collect.Maps;",
          "33:     static Map<RealizationType, Integer> DEFAULT_PRIORITIES = Maps.newHashMap();",
          "34:     static Map<RealizationType, Integer> PRIORITIES = DEFAULT_PRIORITIES;",
          "",
          "[Removed Lines]",
          "31: public class Candidate implements Comparable<Candidate> {",
          "",
          "[Added Lines]",
          "34: public class Candidate {",
          "35:     public static final CandidateComparator COMPARATOR = new CandidateComparator();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:         DEFAULT_PRIORITIES.put(RealizationType.CUBE, 1);",
          "39:     }",
          "42:     public static void setPriorities(Map<RealizationType, Integer> priorities) {",
          "43:         PRIORITIES = Collections.unmodifiableMap(priorities);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:     Candidate() {",
          "47:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:     }",
          "84:     @Override",
          "102:     }",
          "103: }",
          "",
          "[Removed Lines]",
          "85:     public int compareTo(Candidate o) {",
          "86:         int comp = this.priority - o.priority;",
          "87:         if (comp != 0) {",
          "88:             return comp;",
          "89:         }",
          "91:         comp = this.capability.cost - o.capability.cost;",
          "92:         if (comp != 0) {",
          "93:             return comp;",
          "94:         }",
          "96:         return 0;",
          "97:     }",
          "99:     @Override",
          "100:     public String toString() {",
          "101:         return realization.toString();",
          "",
          "[Added Lines]",
          "93:     public String toString() {",
          "94:         return realization.toString();",
          "95:     }",
          "97:     public static class CandidateComparator implements Comparator<Candidate> {",
          "99:         @Override",
          "100:         public int compare(Candidate c1, Candidate c2) {",
          "101:             IRealization real1 = c1.getRealization();",
          "102:             IRealization real2 = c2.getRealization();",
          "104:             if (QueryContextFacade.current().getCubePriorities().length > 0) {",
          "106:                 Map<String, Integer> priorities = new HashMap<>();",
          "107:                 for (int i = 0; i < QueryContextFacade.current().getCubePriorities().length; i++) {",
          "108:                     priorities.put(QueryContextFacade.current().getCubePriorities()[i], i);",
          "109:                 }",
          "111:                 int comp = priorities.getOrDefault(real1.getName(), Integer.MAX_VALUE)",
          "112:                         - priorities.getOrDefault(real2.getName(), Integer.MAX_VALUE);",
          "113:                 if (comp != 0) {",
          "114:                     return comp;",
          "115:                 }",
          "116:             }",
          "118:             int comp = real1.getCost() - real2.getCost();",
          "119:             if (comp != 0) {",
          "120:                 return comp;",
          "121:             }",
          "123:             comp = Double.compare(c1.capability.cost, c2.capability.cost);",
          "124:             if (comp != 0) {",
          "125:                 return comp;",
          "126:             }",
          "128:             return 0;",
          "129:         }",
          "",
          "---------------"
        ],
        "query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java": [
          "File: query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java -> query/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.util.Set;",
          "27: import org.apache.commons.lang3.StringUtils;",
          "28: import org.apache.kylin.common.debug.BackdoorToggles;",
          "29: import org.apache.kylin.common.util.StringUtil;",
          "30: import org.apache.kylin.metadata.model.FunctionDesc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.kylin.common.QueryContextFacade;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:             forceHitCubeNameSet = new HashSet<String>(Arrays.asList(forceHitCubeNames));",
          "63:         }",
          "65:         List<Candidate> candidates = Lists.newArrayList();",
          "66:         for (IRealization real : realizations) {",
          "67:             if (!forceHitCubeNameSet.isEmpty()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:         if (QueryContextFacade.current().getCubePriorities().length != 0) {",
          "67:             forceHitCubeNameSet = new HashSet<String>(Arrays.asList(QueryContextFacade.current().getCubePriorities()));",
          "68:         }",
          "",
          "---------------"
        ],
        "query/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java||query/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java": [
          "File: query/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java -> query/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing.rules;",
          "22: import java.util.List;",
          "24: import org.apache.kylin.query.routing.Candidate;",
          "",
          "[Removed Lines]",
          "21: import java.util.Collections;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         }",
          "40:         logger.info(sb.toString());",
          "43:     }",
          "44: }",
          "",
          "[Removed Lines]",
          "42:         Collections.sort(candidates);",
          "",
          "[Added Lines]",
          "41:         candidates.sort(Candidate.COMPARATOR);",
          "",
          "---------------"
        ],
        "query/src/main/java/org/apache/kylin/query/util/QueryModelPriorities.java||query/src/main/java/org/apache/kylin/query/util/QueryModelPriorities.java": [
          "File: query/src/main/java/org/apache/kylin/query/util/QueryModelPriorities.java -> query/src/main/java/org/apache/kylin/query/util/QueryModelPriorities.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.util;",
          "21: import java.util.Locale;",
          "22: import java.util.regex.Matcher;",
          "23: import java.util.regex.Pattern;",
          "25: public class QueryModelPriorities {",
          "26:     private QueryModelPriorities() {",
          "27:     }",
          "29:     private static final Pattern MODEL_PRIORITY_PATTERN = Pattern.compile(\"SELECT\\\\W+/\\\\*\\\\+\\\\W*(.+)\\\\*/\");",
          "30:     private static final String MODEL_PRIOPITY_INDEX = \"model_priority(\";",
          "32:     private static String getHint(String sql) {",
          "33:         Matcher matcher = MODEL_PRIORITY_PATTERN.matcher(sql.toUpperCase(Locale.ROOT));",
          "34:         if (matcher.find()) {",
          "35:             return matcher.group(1).trim();",
          "36:         } else {",
          "37:             return \"\";",
          "38:         }",
          "39:     }",
          "41:     public static String[] getCubePrioritiesFromComment(String sql) {",
          "42:         String hint = getHint(sql).toLowerCase(Locale.ROOT);",
          "43:         if (hint.isEmpty() || hint.indexOf(MODEL_PRIOPITY_INDEX) != 0) {",
          "44:             return new String[0];",
          "45:         }",
          "47:         String[] modelHints = hint.replace(MODEL_PRIOPITY_INDEX, \"\").replace(\")\", \"\").split(\",\");",
          "48:         for (int i = 0; i < modelHints.length; i++) {",
          "49:             modelHints[i] = modelHints[i].trim();",
          "50:         }",
          "51:         return modelHints;",
          "52:     }",
          "53: }",
          "",
          "---------------"
        ],
        "query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java||query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java": [
          "File: query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java -> query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import org.apache.kylin.common.KylinConfig;",
          "22: import org.apache.kylin.common.QueryContext;",
          "23: import org.apache.kylin.common.QueryContextFacade;",
          "24: import org.apache.kylin.metadata.model.ColumnDesc;",
          "25: import org.apache.kylin.metadata.model.DataModelDesc;",
          "26: import org.apache.kylin.metadata.model.MeasureDesc;",
          "27: import org.apache.kylin.metadata.model.TblColRef;",
          "28: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "29: import org.apache.kylin.metadata.realization.IRealization;",
          "30: import org.apache.kylin.metadata.realization.RealizationType;",
          "31: import org.apache.kylin.metadata.realization.SQLDigest;",
          "32: import org.junit.Test;",
          "34: import java.util.Arrays;",
          "35: import java.util.List;",
          "36: import java.util.Set;",
          "38: public class CandidateSortTest {",
          "39:     @Test",
          "40:     public void testCubeHintCandidateSort() {",
          "41:         QueryContext queryContext = QueryContextFacade.current();",
          "42:         {",
          "43:             queryContext.setCubePriorities(new String[]{});",
          "44:             Candidate cube1 = mockCandidate(\"cube0001\", \"cubeA\", 1, 1);",
          "45:             Candidate cube2 = mockCandidate(\"cube0002\", \"cubeB\", 2, 2);",
          "46:             sort(cube1, cube2).assertFirst(cube1);",
          "47:         }",
          "49:         {",
          "50:             queryContext.setCubePriorities(new String[]{\"cubeb\"});",
          "51:             Candidate cube1 = mockCandidate(\"cube0001\", \"cubeA\", 1, 1);",
          "52:             Candidate cube2 = mockCandidate(\"cube0002\", \"cubeB\", 2, 2);",
          "53:             sort(cube1, cube2).assertFirst(cube2);",
          "54:         }",
          "56:         {",
          "57:             queryContext.setCubePriorities(new String[]{\"cubeb\", \"cubea\"});",
          "58:             Candidate cube1 = mockCandidate(\"cube0001\", \"cubeA\", 1, 1);",
          "59:             Candidate cube2 = mockCandidate(\"cube0002\", \"cubeB\", 2, 2);",
          "60:             sort(cube1, cube2).assertFirst(cube2);",
          "61:         }",
          "63:         {",
          "64:             queryContext.setCubePriorities(new String[]{\"cubec\", \"cubea\"});",
          "65:             Candidate cube1 = mockCandidate(\"cube0001\", \"cubeA\", 1, 1);",
          "66:             Candidate cube2 = mockCandidate(\"cube0002\", \"cubeB\", 2, 2);",
          "67:             Candidate cube3 = mockCandidate(\"cube0003\", \"cubeC\", 4, 4);",
          "68:             sort(cube1, cube2, cube3).assertFirst(cube3);",
          "69:         }",
          "70:     }",
          "72:     @Test",
          "73:     public void testSort() {",
          "74:         {",
          "75:             Candidate cube1 = mockCandidate(\"cube0001\", \"cubeA\", 1, 1);",
          "76:             Candidate cube2 = mockCandidate(\"cube0002\", \"cubeB\", 2, 2);",
          "77:             sort(cube1, cube2).assertFirst(cube1);",
          "78:         }",
          "80:         {",
          "81:             Candidate cube1 = mockCandidate(\"cube0001\", \"cubeA\", 2, 1);",
          "82:             Candidate cube2 = mockCandidate(\"cube0002\", \"cubeB\", 2, 2);",
          "83:             sort(cube1, cube2).assertFirst(cube1);",
          "84:         }",
          "86:         {",
          "87:             Candidate cube1 = mockCandidate(\"cube0001\", \"cubeA\", 2, 2);",
          "88:             Candidate cube2 = mockCandidate(\"cube0002\", \"cubeB\", 2, 2);",
          "89:             sort(cube1, cube2).assertFirst(cube1);",
          "90:         }",
          "92:         {",
          "93:             Candidate cube1 = mockCandidate(\"cube0001\", \"cubeA\", 1, 1);",
          "94:             Candidate cube2 = mockCandidate(\"cube0002\", \"cubeB\", 2, 2);",
          "95:             Candidate cube3 = mockCandidate(\"cube0003\", \"cubeC\", 4, 4);",
          "96:             sort(cube1, cube2, cube3).assertFirst(cube1);",
          "97:         }",
          "98:     }",
          "100:     private interface SortedCandidate {",
          "102:         void assertFirst(Candidate candidate);",
          "103:     }",
          "105:     private SortedCandidate sort(Candidate... candidates) {",
          "106:         return candidate -> {",
          "107:             Arrays.sort(candidates, Candidate.COMPARATOR);",
          "108:         };",
          "109:     }",
          "111:     private Candidate mockCandidate(String cubeId, String cubeName, int cubeCost, int candidateCost) {",
          "112:         Candidate candidate = new Candidate();",
          "113:         candidate.realization = mockRealization(cubeId, cubeName, cubeCost);",
          "114:         CapabilityResult cap = new CapabilityResult();",
          "115:         cap.setCost(candidateCost);",
          "116:         candidate.setCapability(cap);",
          "117:         return candidate;",
          "118:     }",
          "120:     private IRealization mockRealization(String cubeId, String cubeName, int cost) {",
          "121:         return new IRealization() {",
          "122:             @Override",
          "123:             public CapabilityResult isCapable(SQLDigest digest) {",
          "124:                 return null;",
          "125:             }",
          "127:             @Override",
          "128:             public RealizationType getType() {",
          "129:                 return null;",
          "130:             }",
          "132:             @Override",
          "133:             public KylinConfig getConfig() {",
          "134:                 return null;",
          "135:             }",
          "137:             @Override",
          "138:             public DataModelDesc getModel() {",
          "139:                 DataModelDesc model = new DataModelDesc();",
          "140:                 model.setName(\"modelName\");",
          "141:                 model.setUuid(\"model001\");",
          "142:                 return model;",
          "143:             }",
          "145:             @Override",
          "146:             public Set<TblColRef> getAllColumns() {",
          "147:                 return null;",
          "148:             }",
          "150:             @Override",
          "151:             public Set<ColumnDesc> getAllColumnDescs() {",
          "152:                 return null;",
          "153:             }",
          "155:             @Override",
          "156:             public List<TblColRef> getAllDimensions() {",
          "157:                 return null;",
          "158:             }",
          "160:             @Override",
          "161:             public List<MeasureDesc> getMeasures() {",
          "162:                 return null;",
          "163:             }",
          "165:             @Override",
          "166:             public boolean isReady() {",
          "167:                 return true;",
          "168:             }",
          "170:             @Override",
          "171:             public String getName() {",
          "172:                 return cubeName;",
          "173:             }",
          "175:             @Override",
          "176:             public String getCanonicalName() {",
          "177:                 return null;",
          "178:             }",
          "180:             @Override",
          "181:             public long getDateRangeStart() {",
          "182:                 return 0;",
          "183:             }",
          "185:             @Override",
          "186:             public long getDateRangeEnd() {",
          "187:                 return 0;",
          "188:             }",
          "190:             @Override",
          "191:             public boolean supportsLimitPushDown() {",
          "192:                 return false;",
          "193:             }",
          "195:             @Override",
          "196:             public int getCost() {",
          "197:                 return cost;",
          "198:             }",
          "200:             @Override",
          "201:             public int getStorageType() {",
          "202:                 return 0;",
          "203:             }",
          "204:         };",
          "205:     }",
          "206: }",
          "",
          "---------------"
        ],
        "query/src/test/java/org/apache/kylin/query/util/DefaultQueryTransformerTest.java||query/src/test/java/org/apache/kylin/query/util/DefaultQueryTransformerTest.java": [
          "File: query/src/test/java/org/apache/kylin/query/util/DefaultQueryTransformerTest.java -> query/src/test/java/org/apache/kylin/query/util/DefaultQueryTransformerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.util;",
          "21: import static org.junit.Assert.assertFalse;",
          "22: import static org.junit.Assert.assertTrue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.junit.Assert.assertEquals;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:         assertTrue(\"SELECT CURRENT_TIMESTAMP(0)\".equalsIgnoreCase(correctSql));",
          "112:     }",
          "113: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:     @Test",
          "116:     public void testReserveHintQuery() throws Exception {",
          "117:         String originalSQL = \"select /**/ /*+*//*+ some hint */ --test comment will remove\\n\" +",
          "118:                 \" \\\"--won't remove in quote, /*test*/\\\", /* will remove multi line comment*/ { fn count(*) } from tbl\";",
          "119:         String transformedSQL = new CommentParser(originalSQL).Input();",
          "121:         String expectedSQL = \"select  /*+*//*+ some hint */ \\n \\\"--won't remove in quote, /*test*/\\\",  { fn count(*) } from tbl\";",
          "122:         assertEquals(expectedSQL, transformedSQL);",
          "123:     }",
          "",
          "---------------"
        ],
        "query/src/test/java/org/apache/kylin/query/util/QueryModelPrioritiesTest.java||query/src/test/java/org/apache/kylin/query/util/QueryModelPrioritiesTest.java": [
          "File: query/src/test/java/org/apache/kylin/query/util/QueryModelPrioritiesTest.java -> query/src/test/java/org/apache/kylin/query/util/QueryModelPrioritiesTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.util;",
          "21: import org.junit.Test;",
          "23: import static org.junit.Assert.assertEquals;",
          "25: public class QueryModelPrioritiesTest {",
          "26:     @Test",
          "27:     public void testGetPriorities() {",
          "28:         assertEquals(\"\", getModelHints(\"select MODEL_PRIORITY(model1)\"));",
          "29:         assertEquals(\"\", getModelHints(\"select MODEL_PRIORITY(model1)   */\"));",
          "30:         assertEquals(\"\", getModelHints(\"select /*+ MODEL_PRIORITY()\"));",
          "31:         assertEquals(\"\", getModelHints(\"select /*+ MODEL_PRIORITY111(model1)\"));",
          "32:         assertEquals(\"\", getModelHints(\"select /* MODEL_PRIORITY(model1)\"));",
          "33:         assertEquals(\"model1\", getModelHints(\"select /*+ MODEL_PRIORITY(model1) */\"));",
          "34:         assertEquals(\"model1,model2\", getModelHints(\"select /*+ MODEL_PRIORITY(model1, model2)   */\"));",
          "35:         assertEquals(\"model1,model2,model3\", getModelHints(\"select /*+ MODEL_PRIORITY(model1, model2,     model3)*/\"));",
          "36:         assertEquals(\"model1\", getModelHints(\"select   /*+   MODEL_PRIORITY(model1)  */ a from tbl\"));",
          "37:         assertEquals(\"model1,model2\", getModelHints(\"select a from table inner join (select /*+ MODEL_PRIORITY(model1, model2) */b from table)\"));",
          "38:     }",
          "40:     private String getModelHints(String sql) {",
          "41:         return String.join(\",\", QueryModelPriorities.getCubePrioritiesFromComment(sql));",
          "42:     }",
          "43: }",
          "",
          "---------------"
        ],
        "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java||server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java -> server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: import org.apache.kylin.query.relnode.OLAPContext;",
          "103: import org.apache.kylin.query.util.PushDownUtil;",
          "104: import org.apache.kylin.query.util.QueryInfoCollector;",
          "105: import org.apache.kylin.query.util.QueryUtil;",
          "106: import org.apache.kylin.query.util.TempStatementUtil;",
          "107: import org.apache.kylin.rest.constant.Constant;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: import org.apache.kylin.query.util.QueryModelPriorities;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:             logger.info(\"Using project: \" + project);",
          "455:             logger.info(\"The original query:  \" + sql);",
          "457:             sql = QueryUtil.removeCommentInSql(sql);",
          "459:             Pair<Boolean, String> result = TempStatementUtil.handleTempStatement(sql, kylinConfig);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "458:             QueryContextFacade.current().setCubePriorities(QueryModelPriorities.getCubePrioritiesFromComment(sql));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7623eb811389449560fb7e0c295bbf69ee40e08",
      "candidate_info": {
        "commit_hash": "a7623eb811389449560fb7e0c295bbf69ee40e08",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/a7623eb811389449560fb7e0c295bbf69ee40e08",
        "files": [
          "docker/README-standalone.md",
          "docker/dockerfile/standalone/Dockerfile",
          "docker/dockerfile/standalone/build_standalone_image.sh"
        ],
        "message": "KYLIN-5051, create and test docker image for kylin 4.0",
        "before_after_code_files": [
          "docker/dockerfile/standalone/build_standalone_image.sh||docker/dockerfile/standalone/build_standalone_image.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "docker/dockerfile/standalone/build_standalone_image.sh||docker/dockerfile/standalone/build_standalone_image.sh": [
          "File: docker/dockerfile/standalone/build_standalone_image.sh -> docker/dockerfile/standalone/build_standalone_image.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: cd ${DIR}",
          "22: echo \"build image in dir \"${DIR}",
          "25: echo \"start build Hadoop docker image\"",
          "",
          "[Removed Lines]",
          "26: docker build -f Dockerfile_hadoop -t hadoop2.7-all-in-one-for-kylin4-beta .",
          "27: docker build -f Dockerfile -t apachekylin/apache-kylin-standalone:4.0.0-beta .",
          "",
          "[Added Lines]",
          "25: docker build -f Dockerfile_hadoop -t hadoop2.7-all-in-one-for-kylin4 .",
          "26: docker build -f Dockerfile -t apachekylin/apache-kylin-standalone:4.0.0 .",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cae7ce5ff0b32f0ff402e1e37419a82afeb12120",
      "candidate_info": {
        "commit_hash": "cae7ce5ff0b32f0ff402e1e37419a82afeb12120",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/cae7ce5ff0b32f0ff402e1e37419a82afeb12120",
        "files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
          "core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java",
          "core-job/src/main/java/org/apache/kylin/job/util/JobRestClient.java",
          "tool/src/main/java/org/apache/kylin/tool/job/CubeBuildingCLIV2.java"
        ],
        "message": "KYLIN-4613 add build cubev2 and JobRestClient\n\n(cherry picked from commit fe04ca8d3be6c50742246663d6fd6767a568bcf8)",
        "before_after_code_files": [
          "core-common/src/main/java/org/apache/kylin/common/KylinConfig.java||core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
          "core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java||core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java",
          "core-job/src/main/java/org/apache/kylin/job/util/JobRestClient.java||core-job/src/main/java/org/apache/kylin/job/util/JobRestClient.java",
          "tool/src/main/java/org/apache/kylin/tool/job/CubeBuildingCLIV2.java||tool/src/main/java/org/apache/kylin/tool/job/CubeBuildingCLIV2.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core-common/src/main/java/org/apache/kylin/common/KylinConfig.java||core-common/src/main/java/org/apache/kylin/common/KylinConfig.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/KylinConfig.java -> core-common/src/main/java/org/apache/kylin/common/KylinConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:         }",
          "134:     }",
          "137:         synchronized (KylinConfig.class) {",
          "138:             KylinConfig config = THREAD_ENV_INSTANCE.get();",
          "139:             if (config != null) {",
          "",
          "[Removed Lines]",
          "136:     public static KylinConfig getInstanceFromEnv() {",
          "",
          "[Added Lines]",
          "136:     public static KylinConfig getInstanceFromEnv(boolean allowConfigFileNoExist) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:                     buildDefaultOrderedProperties();",
          "149:                     config = new KylinConfig();",
          "151:                     VersionUtil.loadKylinVersion();",
          "152:                     logger.info(\"Initialized a new KylinConfig from getInstanceFromEnv : \"",
          "153:                             + System.identityHashCode(config));",
          "",
          "[Removed Lines]",
          "150:                     config.reloadKylinConfig(buildSiteProperties());",
          "",
          "[Added Lines]",
          "150:                     try {",
          "151:                         config.reloadKylinConfig(buildSiteProperties());",
          "152:                     } catch (KylinConfigCannotInitException e) {",
          "153:                         logger.info(\"Kylin Config Can not Init Exception\");",
          "154:                         if (!allowConfigFileNoExist) {",
          "155:                             throw e;",
          "156:                         }",
          "157:                     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:         }",
          "161:     }",
          "164:     public static void destroyInstance() {",
          "165:         synchronized (KylinConfig.class) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:     public static KylinConfig getInstanceFromEnv() {",
          "172:         return getInstanceFromEnv(false);",
          "173:     }",
          "",
          "---------------"
        ],
        "core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java||core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java": [
          "File: core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java -> core-common/src/main/java/org/apache/kylin/common/restclient/RestClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: public class RestClient {",
          "63:     private static final Logger logger = LoggerFactory.getLogger(RestClient.class);",
          "65:     private static final String APPLICATION_JSON = \"application/json\";",
          "68:     private static final String WITH_URL = \" with url \";",
          "70:     protected static Pattern fullRestPattern = Pattern.compile(\"(?:([^:]+)[:]([^@]+)[@])?([^:]+)(?:[:](\\\\d+))?\");",
          "",
          "[Removed Lines]",
          "64:     private static final String UTF_8 = \"UTF-8\";",
          "66:     private static final String INVALID_RESPONSE = \"Invalid response \";",
          "67:     private static final String CUBES = \"/cubes/\";",
          "",
          "[Added Lines]",
          "64:     protected static final String UTF_8 = \"UTF-8\";",
          "66:     protected static final String INVALID_RESPONSE = \"Invalid response \";",
          "67:     protected static final String CUBES = \"/cubes/\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:         HttpConnectionParams.setConnectionTimeout(httpParams, httpConnectionTimeoutMs);",
          "144:         final PoolingClientConnectionManager cm = new PoolingClientConnectionManager();",
          "146:         cm.setDefaultMaxPerRoute(config.getRestClientDefaultMaxPerRoute());",
          "147:         cm.setMaxTotal(config.getRestClientMaxTotal());",
          "",
          "[Removed Lines]",
          "145:         KylinConfig config = KylinConfig.getInstanceFromEnv();",
          "",
          "[Added Lines]",
          "145:         KylinConfig config = KylinConfig.getInstanceFromEnv(true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "434:         return post;",
          "435:     }",
          "438:         HttpPut put = new HttpPut(url);",
          "439:         addHttpHeaders(put);",
          "440:         return put;",
          "441:     }",
          "444:         HttpGet get = new HttpGet(url);",
          "445:         addHttpHeaders(get);",
          "446:         return get;",
          "",
          "[Removed Lines]",
          "437:     private HttpPut newPut(String url) {",
          "443:     private HttpGet newGet(String url) {",
          "",
          "[Added Lines]",
          "437:     protected HttpPut newPut(String url) {",
          "443:     protected HttpGet newGet(String url) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "467:         }",
          "468:     }",
          "471:         StringBuffer result = new StringBuffer();",
          "472:         try (BufferedReader rd = new BufferedReader(",
          "473:                 new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))) {",
          "",
          "[Removed Lines]",
          "470:     private String getContent(HttpResponse response) throws IOException {",
          "",
          "[Added Lines]",
          "470:     protected String getContent(HttpResponse response) throws IOException {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "480:         return result.toString();",
          "481:     }",
          "484:         try {",
          "485:             if (response != null)",
          "486:                 EntityUtils.consume(response.getEntity());",
          "",
          "[Removed Lines]",
          "483:     private void cleanup(HttpRequestBase request, HttpResponse response) {",
          "",
          "[Added Lines]",
          "483:     protected void cleanup(HttpRequestBase request, HttpResponse response) {",
          "",
          "---------------"
        ],
        "core-job/src/main/java/org/apache/kylin/job/util/JobRestClient.java||core-job/src/main/java/org/apache/kylin/job/util/JobRestClient.java": [
          "File: core-job/src/main/java/org/apache/kylin/job/util/JobRestClient.java -> core-job/src/main/java/org/apache/kylin/job/util/JobRestClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.job.util;",
          "21: import com.fasterxml.jackson.databind.DeserializationFeature;",
          "22: import com.fasterxml.jackson.databind.ObjectMapper;",
          "23: import org.apache.http.HttpResponse;",
          "24: import org.apache.http.client.methods.HttpGet;",
          "25: import org.apache.http.client.methods.HttpPut;",
          "26: import org.apache.http.entity.StringEntity;",
          "27: import org.apache.kylin.common.restclient.RestClient;",
          "28: import org.apache.kylin.cube.model.CubeBuildTypeEnum;",
          "29: import org.apache.kylin.job.JobInstance;",
          "31: import java.io.IOException;",
          "32: import java.util.HashMap;",
          "34: public class JobRestClient extends RestClient {",
          "35:     private static final String JOBS = \"/jobs/\";",
          "37:     public JobRestClient(String host, int port, String userName, String password) {",
          "38:         this(host, port, userName, password, null, null);",
          "39:     }",
          "41:     public JobRestClient(String host, int port, String userName, String password, Integer httpConnectionTimeoutMs, Integer httpSocketTimeoutMs) {",
          "42:         super(host, port, userName, password, httpConnectionTimeoutMs, httpSocketTimeoutMs);",
          "43:     }",
          "45:     public JobInstance buildCubeV2(String cubeName, long startTime, long endTime, CubeBuildTypeEnum buildType) throws IOException {",
          "46:         String url = baseUrl + CUBES + cubeName + \"/build\";",
          "47:         HttpPut put = newPut(url);",
          "48:         HttpResponse response = null;",
          "49:         try {",
          "50:             HashMap<String, String> paraMap = new HashMap<String, String>();",
          "51:             paraMap.put(\"startTime\", startTime + \"\");",
          "52:             paraMap.put(\"endTime\", endTime + \"\");",
          "53:             paraMap.put(\"buildType\", buildType.toString());",
          "54:             String jsonMsg = new ObjectMapper().writeValueAsString(paraMap);",
          "55:             put.setEntity(new StringEntity(jsonMsg, UTF_8));",
          "56:             response = client.execute(put);",
          "57:             String result = getContent(response);",
          "58:             if (response.getStatusLine().getStatusCode() != 200) {",
          "59:                 throw new IOException(INVALID_RESPONSE + response.getStatusLine().getStatusCode()",
          "60:                         + result + \" with build cube url \" + url + \"\\n\" + jsonMsg);",
          "61:             } else {",
          "62:                 return json2JobInstance(result);",
          "63:             }",
          "64:         } finally {",
          "65:             cleanup(put, response);",
          "66:         }",
          "67:     }",
          "69:     protected JobInstance json2JobInstance(String json) throws IOException {",
          "70:         ObjectMapper mapper = new ObjectMapper();",
          "71:         mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);",
          "72:         JobInstance jobInstance = mapper.readValue(json, JobInstance.class);",
          "73:         return jobInstance;",
          "74:     }",
          "76:     public JobInstance getJobStatus(String jobId) throws IOException {",
          "77:         String url = baseUrl + JOBS + jobId;",
          "78:         HttpGet get = newGet(url);",
          "79:         HttpResponse response = null;",
          "80:         try {",
          "81:             response = client.execute(get);",
          "82:             String result = getContent(response);",
          "83:             if (response.getStatusLine().getStatusCode() != 200) {",
          "84:                 throw new IOException(INVALID_RESPONSE + response.getStatusLine().getStatusCode()",
          "85:                         + result + \" with get job status \" + jobId);",
          "86:             } else {",
          "87:                 return json2JobInstance(result);",
          "88:             }",
          "89:         } finally {",
          "90:             cleanup(get, response);",
          "91:         }",
          "92:     }",
          "94:     public String JobInstance2JsonString(JobInstance jobInstance) throws IOException {",
          "95:         ObjectMapper mapper = new ObjectMapper();",
          "96:         String jsonString = mapper.writeValueAsString(jobInstance);",
          "97:         return jsonString;",
          "98:     }",
          "100:     public JobInstance resumeJob(String jobId) throws IOException {",
          "101:         String url = baseUrl + JOBS + jobId + \"/resume\";",
          "102:         HttpPut put = newPut(url);",
          "103:         HttpResponse response = null;",
          "104:         try {",
          "105:             response = client.execute(put);",
          "106:             String result = getContent(response);",
          "107:             if (response.getStatusLine().getStatusCode() != 200) {",
          "108:                 throw new IOException(INVALID_RESPONSE + response.getStatusLine().getStatusCode()",
          "109:                         + result + \" with resume job \" + jobId);",
          "110:             } else {",
          "111:                 return json2JobInstance(result);",
          "112:             }",
          "113:         } finally {",
          "114:             cleanup(put, response);",
          "115:         }",
          "116:     }",
          "118:     public void discardJob(String jobId) throws IOException {",
          "119:         String url = baseUrl + JOBS + jobId + \"/cancel\";",
          "120:         HttpPut put = newPut(url);",
          "121:         HttpResponse response = null;",
          "122:         try {",
          "123:             response = client.execute(put);",
          "124:             String result = getContent(response);",
          "125:             if (response.getStatusLine().getStatusCode() != 200) {",
          "126:                 throw new IOException(INVALID_RESPONSE + response.getStatusLine().getStatusCode()",
          "127:                         + result + \" with discard job \" + jobId);",
          "128:             }",
          "129:         } finally {",
          "130:             cleanup(put, response);",
          "131:         }",
          "132:     }",
          "133: }",
          "",
          "---------------"
        ],
        "tool/src/main/java/org/apache/kylin/tool/job/CubeBuildingCLIV2.java||tool/src/main/java/org/apache/kylin/tool/job/CubeBuildingCLIV2.java": [
          "File: tool/src/main/java/org/apache/kylin/tool/job/CubeBuildingCLIV2.java -> tool/src/main/java/org/apache/kylin/tool/job/CubeBuildingCLIV2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.tool.job;",
          "21: import com.google.common.base.Strings;",
          "22: import org.apache.commons.cli.Option;",
          "23: import org.apache.commons.cli.OptionBuilder;",
          "24: import org.apache.commons.cli.Options;",
          "25: import org.apache.kylin.common.util.AbstractApplication;",
          "26: import org.apache.kylin.common.util.OptionsHelper;",
          "27: import org.apache.kylin.cube.model.CubeBuildTypeEnum;",
          "28: import org.apache.kylin.job.JobInstance;",
          "29: import org.apache.kylin.job.constant.JobStatusEnum;",
          "30: import org.apache.kylin.job.util.JobRestClient;",
          "31: import org.slf4j.Logger;",
          "32: import org.slf4j.LoggerFactory;",
          "34: import java.io.IOException;",
          "36: public class CubeBuildingCLIV2 extends AbstractApplication {",
          "38:     private static final Logger logger = LoggerFactory.getLogger(CubeBuildingCLIV2.class);",
          "40:     private static final Option OPTION_CUBE = OptionBuilder.withArgName(\"cube\").hasArg().isRequired(true)",
          "41:             .withDescription(\"Specify for which cube to build\").create(\"cube\");",
          "42:     private static final Option OPTION_BUILD_TYPE = OptionBuilder.withArgName(\"buildType\").hasArg().isRequired(false)",
          "43:             .withDescription(\"Specify for the build type\").create(\"buildType\");",
          "44:     private static final Option OPTION_TIME_START = OptionBuilder.withArgName(\"startTime\").hasArg().isRequired(false)",
          "45:             .withDescription(\"Specify the start time of the segment\").create(\"startTime\");",
          "46:     private static final Option OPTION_TIME_END = OptionBuilder.withArgName(\"endTime\").hasArg().isRequired(true)",
          "47:             .withDescription(\"Specify the end time of the segment\").create(\"endTime\");",
          "48:     private static final Option OPTION_HOST = OptionBuilder.withArgName(\"host\").hasArg().isRequired(true)",
          "49:             .withDescription(\"Specify the kylin server host\").create(\"host\");",
          "50:     private static final Option OPTION_PORT = OptionBuilder.withArgName(\"port\").hasArg().isRequired(true)",
          "51:             .withDescription(\"Specify the kylin server port\").create(\"port\");",
          "52:     private static final Option OPTION_USER_NAME = OptionBuilder.withArgName(\"userName\").hasArg().isRequired(true)",
          "53:             .withDescription(\"Specify the kylin server user name\").create(\"userName\");",
          "54:     private static final Option OPTION_PASSWORD= OptionBuilder.withArgName(\"password\").hasArg().isRequired(true)",
          "55:             .withDescription(\"Specify the kylin server password\").create(\"password\");",
          "56:     private static final Option OPTION_WAITING_FOR_END = OptionBuilder.withArgName(\"waitingForEnd\").hasArg().isRequired(false)",
          "57:             .withDescription(\"Specify whether waiting for end\").create(\"waitingForEnd\");",
          "58:     private static final Option OPTION_RETRY_NUMBER = OptionBuilder.withArgName(\"retryNumber\").hasArg().isRequired(false)",
          "59:             .withDescription(\"Specify retry number when execute failed\").create(\"retryNumber\");",
          "60:     private static final Option OPTION_DISCARD_ERROR_JOB = OptionBuilder.withArgName(\"discardErrorJob\").hasArg().isRequired(false)",
          "61:             .withDescription(\"Specify discard job when execute failed\").create(\"discardErrorJob\");",
          "63:     private final Options options;",
          "65:     public CubeBuildingCLIV2() {",
          "66:         options = new Options();",
          "67:         options.addOption(OPTION_CUBE);",
          "68:         options.addOption(OPTION_BUILD_TYPE);",
          "69:         options.addOption(OPTION_TIME_START);",
          "70:         options.addOption(OPTION_TIME_END);",
          "71:         options.addOption(OPTION_HOST);",
          "72:         options.addOption(OPTION_PORT);",
          "73:         options.addOption(OPTION_USER_NAME);",
          "74:         options.addOption(OPTION_PASSWORD);",
          "75:         options.addOption(OPTION_WAITING_FOR_END);",
          "76:         options.addOption(OPTION_RETRY_NUMBER);",
          "77:         options.addOption(OPTION_DISCARD_ERROR_JOB);",
          "78:     }",
          "80:     protected Options getOptions() {",
          "81:         return options;",
          "82:     }",
          "84:     protected void execute(OptionsHelper optionsHelper) throws IOException {",
          "85:         String cubeName = optionsHelper.getOptionValue(OPTION_CUBE);",
          "86:         String buildType = optionsHelper.getOptionValue(OPTION_BUILD_TYPE);",
          "87:         if (Strings.isNullOrEmpty(buildType)) {",
          "88:             buildType = \"BUILD\";",
          "89:         }",
          "90:         Long startTime = 0L;",
          "91:         if (!Strings.isNullOrEmpty(optionsHelper.getOptionValue(OPTION_TIME_START))) {",
          "92:             startTime = Long.parseLong(optionsHelper.getOptionValue(OPTION_TIME_START));",
          "93:         }",
          "94:         Long endTime = Long.parseLong(optionsHelper.getOptionValue(OPTION_TIME_END));",
          "95:         String host = optionsHelper.getOptionValue(OPTION_HOST);",
          "96:         Integer port = Integer.parseInt(optionsHelper.getOptionValue(OPTION_PORT));",
          "98:         String userName = optionsHelper.getOptionValue(OPTION_USER_NAME);",
          "99:         String password = optionsHelper.getOptionValue(OPTION_PASSWORD);",
          "101:         Boolean waitingForEnd = true;",
          "102:         if (!Strings.isNullOrEmpty(optionsHelper.getOptionValue(OPTION_WAITING_FOR_END))) {",
          "103:             waitingForEnd = Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_WAITING_FOR_END));",
          "104:         }",
          "105:         JobRestClient client = new JobRestClient(host, port, userName, password);",
          "106:         System.out.println(\"start building cube.\");",
          "107:         JobInstance jobInstance = submitJob(client, cubeName, startTime, endTime, buildType);",
          "108:         if (waitingForEnd) {",
          "109:             int retryNumber = 0;",
          "110:             if (!Strings.isNullOrEmpty(optionsHelper.getOptionValue(OPTION_RETRY_NUMBER))) {",
          "111:                 retryNumber = Integer.parseInt(optionsHelper.getOptionValue(OPTION_RETRY_NUMBER));",
          "112:             }",
          "113:             while (!jobInstance.getStatus().isComplete()) {",
          "114:                 try {",
          "115:                     Thread.sleep(30000);",
          "116:                 } catch (InterruptedException e) {",
          "117:                     System.err.println(\"Thread interrupted, exit\");",
          "118:                     System.exit(-1);",
          "119:                 }",
          "120:                 jobInstance = client.getJobStatus(jobInstance.getId());",
          "121:                 System.out.println(\"job \" + jobInstance.getId() + \" get status : \" + jobInstance.getStatus());",
          "122:                 if (jobInstance.getStatus().equals(JobStatusEnum.ERROR) && retryNumber > 0) {",
          "123:                     System.out.println(\"retry count is \" + retryNumber);",
          "124:                     retryNumber--;",
          "125:                     jobInstance = client.resumeJob(jobInstance.getId());",
          "126:                 }",
          "127:             }",
          "128:             if (!jobInstance.getStatus().equals(JobStatusEnum.FINISHED)) {",
          "129:                 boolean discardErrorJob = false;",
          "130:                 if (!Strings.isNullOrEmpty(optionsHelper.getOptionValue(OPTION_DISCARD_ERROR_JOB))) {",
          "131:                     discardErrorJob = Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_DISCARD_ERROR_JOB));",
          "132:                 }",
          "133:                 if (discardErrorJob) {",
          "134:                     client.discardJob(jobInstance.getId());",
          "135:                 }",
          "136:                 System.exit(-1);",
          "137:             }",
          "139:         }",
          "140:     }",
          "142:     private JobInstance submitJob(JobRestClient client, String cubeName, long startDate, long endDate, String buildType) throws IOException {",
          "143:         CubeBuildTypeEnum buildTypeEnum = CubeBuildTypeEnum.valueOf(buildType);",
          "144:         JobInstance jobInstance = client.buildCubeV2(cubeName, startDate, endDate, buildTypeEnum);",
          "145:         System.out.println(\"building cube job:\");",
          "146:         System.out.println(client.JobInstance2JsonString(jobInstance));",
          "147:         return jobInstance;",
          "148:     }",
          "151:     public static void main(String[] args) {",
          "152:         CubeBuildingCLIV2 cli = new CubeBuildingCLIV2();",
          "153:         try {",
          "154:             cli.execute(args);",
          "155:             System.exit(0);",
          "156:         } catch (Exception e) {",
          "157:             logger.error(\"error running cube building\", e);",
          "158:             System.exit(-1);",
          "159:         }",
          "160:     }",
          "161: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "329affee0c84044389a674314897816c26208676",
      "candidate_info": {
        "commit_hash": "329affee0c84044389a674314897816c26208676",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/329affee0c84044389a674314897816c26208676",
        "files": [
          "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java"
        ],
        "message": "KYLIN-4603 listjobs check cache null\n\n(cherry picked from commit 5fd125e320e783eff7358fc1b8b2204fde4afdbc)",
        "before_after_code_files": [
          "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java||server-base/src/main/java/org/apache/kylin/rest/service/JobService.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java||server-base/src/main/java/org/apache/kylin/rest/service/JobService.java": [
          "File: server-base/src/main/java/org/apache/kylin/rest/service/JobService.java -> server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1263:                                 try {",
          "1264:                                     ExecutableOutputPO executableOutputPO = allExecutableOutputPO",
          "1265:                                             .get(executable.getId());",
          "1266:                                     ExecutableState state = ExecutableState.valueOf(executableOutputPO.getStatus());",
          "1267:                                     return statusList.contains(state);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1266:                                     if (executableOutputPO == null) {",
          "1267:                                         return false;",
          "1268:                                     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "95888c867c40a58866a99ae3738a5d0e58eb3b30",
      "candidate_info": {
        "commit_hash": "95888c867c40a58866a99ae3738a5d0e58eb3b30",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/95888c867c40a58866a99ae3738a5d0e58eb3b30",
        "files": [
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java"
        ],
        "message": "KYLIN-4903 cache parent datasource to accelerate next layer's cuboid building (#1722)",
        "before_after_code_files": [
          "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/1893",
          "https://github.com/apache/kylin/pull/2018",
          "https://github.com/apache/kylin/pull/2125",
          "https://github.com/apache/kylin/pull/2033",
          "https://github.com/apache/kylin/pull/2112",
          "https://github.com/apache/kylin/pull/2115",
          "https://github.com/apache/kylin/pull/1865",
          "https://github.com/apache/kylin/pull/1913",
          "https://github.com/apache/kylin/pull/2135"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java||kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java": [
          "File: kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java -> kylin-spark-project/kylin-spark-engine/src/main/scala/org/apache/kylin/engine/spark/job/CubeBuildJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:             Preconditions.checkState(!toBuildCuboids.isEmpty(), \"To be built cuboids is empty.\");",
          "330:             Dataset<Row> parentDS = info.getParentDS();",
          "337:             if (info.getLayoutId() == ParentSourceChooser.FLAT_TABLE_FLAG()) {",
          "",
          "[Removed Lines]",
          "332:             if (toBuildCuboids.size() > 1) {",
          "333:                 buildLayoutWithUpdate.cacheAndRegister(info.getLayoutId(), parentDS);",
          "334:             }",
          "",
          "[Added Lines]",
          "332:             buildLayoutWithUpdate.cacheAndRegister(info.getLayoutId(), parentDS);",
          "",
          "---------------"
        ]
      }
    }
  ]
}