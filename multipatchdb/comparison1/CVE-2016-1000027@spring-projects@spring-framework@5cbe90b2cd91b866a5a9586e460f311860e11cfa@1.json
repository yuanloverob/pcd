{
  "cve_id": "CVE-2016-1000027",
  "cve_desc": "Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that untrusted data is not an intended use case. The product's behavior will not be changed because some users rely on deserialization of trusted data.",
  "repo": "spring-projects/spring-framework",
  "patch_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
  "patch_info": {
    "commit_hash": "5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "repo": "spring-projects/spring-framework",
    "commit_url": "https://github.com/spring-projects/spring-framework/commit/5cbe90b2cd91b866a5a9586e460f311860e11cfa",
    "files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ],
    "message": "Explicit note on Java deserialization",
    "before_after_code_files": [
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java",
      "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "patch_diff": {
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java"
    ],
    "spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java||spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java": [
      "File: spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java -> spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fe76f4084af96f119d13c047b5ba356b0de07623",
      "candidate_info": {
        "commit_hash": "fe76f4084af96f119d13c047b5ba356b0de07623",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/fe76f4084af96f119d13c047b5ba356b0de07623",
        "files": [
          "spring-web/src/main/java/org/springframework/web/method/annotation/RequestHeaderMapMethodArgumentResolver.java"
        ],
        "message": "RequestHeaderMapMethodArgumentResolver defensively checks for non-existing header values\n\nIssue: SPR-14091\n(cherry picked from commit 8f6ede5)",
        "before_after_code_files": [
          "spring-web/src/main/java/org/springframework/web/method/annotation/RequestHeaderMapMethodArgumentResolver.java||spring-web/src/main/java/org/springframework/web/method/annotation/RequestHeaderMapMethodArgumentResolver.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-web/src/main/java/org/springframework/web/method/annotation/RequestHeaderMapMethodArgumentResolver.java||spring-web/src/main/java/org/springframework/web/method/annotation/RequestHeaderMapMethodArgumentResolver.java": [
          "File: spring-web/src/main/java/org/springframework/web/method/annotation/RequestHeaderMapMethodArgumentResolver.java -> spring-web/src/main/java/org/springframework/web/method/annotation/RequestHeaderMapMethodArgumentResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: public class RequestHeaderMapMethodArgumentResolver implements HandlerMethodArgumentResolver {",
          "48:  public boolean supportsParameter(MethodParameter parameter) {",
          "51:  }",
          "53:  public Object resolveArgument(",
          "",
          "[Removed Lines]",
          "49:   return parameter.hasParameterAnnotation(RequestHeader.class)",
          "50:     && Map.class.isAssignableFrom(parameter.getParameterType());",
          "",
          "[Added Lines]",
          "49:   return (parameter.hasParameterAnnotation(RequestHeader.class) &&",
          "50:     Map.class.isAssignableFrom(parameter.getParameterType()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:    }",
          "68:    for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext();) {",
          "69:     String headerName = iterator.next();",
          "72:     }",
          "73:    }",
          "74:    return result;",
          "",
          "[Removed Lines]",
          "70:     for (String headerValue : webRequest.getHeaderValues(headerName)) {",
          "71:      result.add(headerName, headerValue);",
          "",
          "[Added Lines]",
          "69:     String[] headerValues = webRequest.getHeaderValues(headerName);",
          "70:     if (headerValues != null) {",
          "71:      for (String headerValue : headerValues) {",
          "72:       result.add(headerName, headerValue);",
          "73:      }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:    for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext();) {",
          "79:     String headerName = iterator.next();",
          "80:     String headerValue = webRequest.getHeader(headerName);",
          "82:    }",
          "83:    return result;",
          "84:   }",
          "85:  }",
          "86: }",
          "",
          "[Removed Lines]",
          "81:     result.put(headerName, headerValue);",
          "",
          "[Added Lines]",
          "83:     if (headerValue != null) {",
          "84:      result.put(headerName, headerValue);",
          "85:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6924f00f8c3739f42907a4feba595b3029f92150",
      "candidate_info": {
        "commit_hash": "6924f00f8c3739f42907a4feba595b3029f92150",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/6924f00f8c3739f42907a4feba595b3029f92150",
        "files": [
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcher.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/JsonPathRequestMatchers.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/response/DefaultResponseCreator.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/response/MockRestResponseCreators.java",
          "spring-test/src/main/java/org/springframework/mock/http/MockHttpInputMessage.java",
          "spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpRequest.java",
          "spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpResponse.java"
        ],
        "message": "Polishing",
        "before_after_code_files": [
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcher.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcher.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/JsonPathRequestMatchers.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/match/JsonPathRequestMatchers.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/response/DefaultResponseCreator.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/response/DefaultResponseCreator.java",
          "spring-test-mvc/src/main/java/org/springframework/test/web/client/response/MockRestResponseCreators.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/response/MockRestResponseCreators.java",
          "spring-test/src/main/java/org/springframework/mock/http/MockHttpInputMessage.java||spring-test/src/main/java/org/springframework/mock/http/MockHttpInputMessage.java",
          "spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpRequest.java||spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpRequest.java",
          "spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpResponse.java||spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpResponse.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-test-mvc/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java": [
          "File: spring-test-mvc/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java -> spring-test-mvc/src/main/java/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import org.springframework.test.web.servlet.MockMvc;",
          "34: import org.springframework.test.web.servlet.MvcResult;",
          "35: import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.springframework.util.Assert;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  public MockMvcClientHttpRequestFactory(MockMvc mockMvc) {",
          "49:   this.mockMvc = mockMvc;",
          "50:  }",
          "52:  public ClientHttpRequest createRequest(final URI uri, final HttpMethod httpMethod) throws IOException {",
          "53:   return new MockClientHttpRequest(httpMethod, uri) {",
          "55:    @Override",
          "56:    public ClientHttpResponse executeInternal() throws IOException {",
          "57:     try {",
          "58:      MockHttpServletRequestBuilder requestBuilder = request(httpMethod, uri.toString());",
          "59:      requestBuilder.content(getBodyAsBytes());",
          "60:      requestBuilder.headers(getHeaders());",
          "62:      MvcResult mvcResult = MockMvcClientHttpRequestFactory.this.mockMvc.perform(requestBuilder).andReturn();",
          "64:      MockHttpServletResponse servletResponse = mvcResult.getResponse();",
          "65:      HttpStatus status = HttpStatus.valueOf(servletResponse.getStatus());",
          "66:      byte[] body = servletResponse.getContentAsByteArray();",
          "67:      HttpHeaders headers = getResponseHeaders(servletResponse);",
          "69:      MockClientHttpResponse clientResponse = new MockClientHttpResponse(body, status);",
          "70:      clientResponse.getHeaders().putAll(headers);",
          "72:      return clientResponse;",
          "73:     }",
          "74:     catch (Exception ex) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   Assert.notNull(mockMvc, \"MockMvc must not be null\");",
          "",
          "---------------"
        ],
        "spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcher.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcher.java": [
          "File: spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcher.java -> spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcher.java"
        ],
        "spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java": [
          "File: spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java -> spring-test-mvc/src/main/java/org/springframework/test/web/client/RequestMatcherClientHttpRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:  }",
          "59:  public ClientHttpResponse executeInternal() throws IOException {",
          "61:   if (this.requestMatchers.isEmpty()) {",
          "62:    throw new AssertionError(\"No request expectations to execute\");",
          "63:   }",
          "65:   if (this.responseCreator == null) {",
          "68:   }",
          "70:   for (RequestMatcher requestMatcher : this.requestMatchers) {",
          "71:    requestMatcher.match(this);",
          "72:   }",
          "74:   setResponse(this.responseCreator.createResponse(this));",
          "76:   return super.executeInternal();",
          "77:  }",
          "",
          "[Removed Lines]",
          "66:    throw new AssertionError(\"No ResponseCreator was set up. Add it after request expectations, \"",
          "67:      + \"e.g. MockRestServiceServer.expect(requestTo(\\\"/foo\\\")).andRespond(withSuccess())\");",
          "",
          "[Added Lines]",
          "65:    throw new AssertionError(\"No ResponseCreator was set up. Add it after request expectations, \" +",
          "66:      \"e.g. MockRestServiceServer.expect(requestTo(\\\"/foo\\\")).andRespond(withSuccess())\");",
          "",
          "---------------"
        ],
        "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java": [
          "File: spring-test-mvc/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java -> spring-test-mvc/src/main/java/org/springframework/test/web/client/match/ContentRequestMatchers.java"
        ],
        "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/JsonPathRequestMatchers.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/match/JsonPathRequestMatchers.java": [
          "File: spring-test-mvc/src/main/java/org/springframework/test/web/client/match/JsonPathRequestMatchers.java -> spring-test-mvc/src/main/java/org/springframework/test/web/client/match/JsonPathRequestMatchers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:     MockClientHttpRequest mockRequest = (MockClientHttpRequest) request;",
          "124:     matchInternal(mockRequest);",
          "125:    }",
          "128:    }",
          "129:   }",
          "131:   protected abstract void matchInternal(MockClientHttpRequest request) throws IOException, ParseException;",
          "133:  }",
          "134: }",
          "",
          "[Removed Lines]",
          "126:    catch (ParseException e) {",
          "127:     throw new AssertionError(\"Failed to parse JSON request content: \" + e.getMessage());",
          "",
          "[Added Lines]",
          "125:    catch (ParseException ex) {",
          "126:     throw new AssertionError(\"Failed to parse JSON request content: \" + ex.getMessage());",
          "",
          "---------------"
        ],
        "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java": [
          "File: spring-test-mvc/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java -> spring-test-mvc/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: public abstract class MockRestRequestMatchers {",
          "",
          "[Removed Lines]",
          "54:  private MockRestRequestMatchers() {",
          "55:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:  private static void assertHeaderValueCount(final String name, HttpHeaders headers, int expectedCount) {",
          "157:   List<String> actualValues = headers.get(name);",
          "158:   AssertionErrors.assertTrue(\"Expected header <\" + name + \">\", actualValues != null);",
          "161:  }",
          "",
          "[Removed Lines]",
          "159:   AssertionErrors.assertTrue(\"Expected header <\" + name + \"> to have at least <\" + expectedCount",
          "160:     + \"> values but found \" + actualValues, expectedCount <= actualValues.size());",
          "",
          "[Added Lines]",
          "148:   AssertionErrors.assertTrue(\"Expected header <\" + name + \"> to have at least <\" + expectedCount +",
          "149:     \"> values but found \" + actualValues, expectedCount <= actualValues.size());",
          "",
          "---------------"
        ],
        "spring-test-mvc/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java": [
          "File: spring-test-mvc/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java -> spring-test-mvc/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java"
        ],
        "spring-test-mvc/src/main/java/org/springframework/test/web/client/response/DefaultResponseCreator.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/response/DefaultResponseCreator.java": [
          "File: spring-test-mvc/src/main/java/org/springframework/test/web/client/response/DefaultResponseCreator.java -> spring-test-mvc/src/main/java/org/springframework/test/web/client/response/DefaultResponseCreator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: public class DefaultResponseCreator implements ResponseCreator {",
          "41:  private byte[] content;",
          "43:  private Resource contentResource;",
          "45:  private final HttpHeaders headers = new HttpHeaders();",
          "54:  protected DefaultResponseCreator(HttpStatus statusCode) {",
          "56:   this.statusCode = statusCode;",
          "57:  }",
          "",
          "[Removed Lines]",
          "47:  private HttpStatus statusCode;",
          "55:   Assert.notNull(statusCode);",
          "59:  public ClientHttpResponse createResponse(ClientHttpRequest request) throws IOException {",
          "60:   MockClientHttpResponse response;",
          "61:   if (this.contentResource != null ){",
          "62:    InputStream stream = this.contentResource.getInputStream();",
          "63:    response = new MockClientHttpResponse(stream, this.statusCode);",
          "64:   }",
          "65:   else {",
          "66:    response = new MockClientHttpResponse(this.content, this.statusCode);",
          "67:   }",
          "68:   response.getHeaders().putAll(this.headers);",
          "69:   return response;",
          "70:  }",
          "",
          "[Added Lines]",
          "42:  private HttpStatus statusCode;",
          "56:   Assert.notNull(statusCode, \"HttpStatus must not be null\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   try {",
          "77:    this.content = content.getBytes(\"UTF-8\");",
          "78:   }",
          "82:   }",
          "83:   return this;",
          "84:  }",
          "",
          "[Removed Lines]",
          "79:   catch (UnsupportedEncodingException e) {",
          "81:    throw new IllegalStateException(e);",
          "",
          "[Added Lines]",
          "68:   catch (UnsupportedEncodingException ex) {",
          "70:    throw new IllegalStateException(ex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:   return this;",
          "130:  }",
          "132: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:  public ClientHttpResponse createResponse(ClientHttpRequest request) throws IOException {",
          "123:   MockClientHttpResponse response;",
          "124:   if (this.contentResource != null) {",
          "125:    InputStream stream = this.contentResource.getInputStream();",
          "126:    response = new MockClientHttpResponse(stream, this.statusCode);",
          "127:   }",
          "128:   else {",
          "129:    response = new MockClientHttpResponse(this.content, this.statusCode);",
          "130:   }",
          "131:   response.getHeaders().putAll(this.headers);",
          "132:   return response;",
          "133:  }",
          "",
          "---------------"
        ],
        "spring-test-mvc/src/main/java/org/springframework/test/web/client/response/MockRestResponseCreators.java||spring-test-mvc/src/main/java/org/springframework/test/web/client/response/MockRestResponseCreators.java": [
          "File: spring-test-mvc/src/main/java/org/springframework/test/web/client/response/MockRestResponseCreators.java -> spring-test-mvc/src/main/java/org/springframework/test/web/client/response/MockRestResponseCreators.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: public abstract class MockRestResponseCreators {",
          "",
          "[Removed Lines]",
          "37:  private MockRestResponseCreators() {",
          "38:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "spring-test/src/main/java/org/springframework/mock/http/MockHttpInputMessage.java||spring-test/src/main/java/org/springframework/mock/http/MockHttpInputMessage.java": [
          "File: spring-test/src/main/java/org/springframework/mock/http/MockHttpInputMessage.java -> spring-test/src/main/java/org/springframework/mock/http/MockHttpInputMessage.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  public MockHttpInputMessage(byte[] contents) {",
          "41:  }",
          "43:  public MockHttpInputMessage(InputStream body) {",
          "45:   this.body = body;",
          "46:  }",
          "48:  public HttpHeaders getHeaders() {",
          "49:   return this.headers;",
          "50:  }",
          "",
          "[Removed Lines]",
          "40:   this.body = (contents != null) ? new ByteArrayInputStream(contents) : null;",
          "44:   Assert.notNull(body, \"'body' must not be null\");",
          "",
          "[Added Lines]",
          "41:   this.body = (contents != null ? new ByteArrayInputStream(contents) : null);",
          "45:   Assert.notNull(body, \"InputStream must not be null\");",
          "",
          "---------------"
        ],
        "spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpRequest.java||spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpRequest.java": [
          "File: spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpRequest.java -> spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpRequest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: public class MockClientHttpRequest extends MockHttpOutputMessage implements ClientHttpRequest {",
          "38:  private HttpMethod httpMethod;",
          "42:  private ClientHttpResponse clientHttpResponse;",
          "",
          "[Removed Lines]",
          "36:  private URI uri;",
          "40:  private boolean executed = false;",
          "",
          "[Added Lines]",
          "38:  private URI uri;",
          "42:  private boolean executed = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   this.uri = uri;",
          "57:  }",
          "65:  }",
          "67:  public HttpMethod getMethod() {",
          "68:   return this.httpMethod;",
          "69:  }",
          "73:  }",
          "75:  public void setResponse(ClientHttpResponse clientHttpResponse) {",
          "",
          "[Removed Lines]",
          "59:  public URI getURI() {",
          "60:   return this.uri;",
          "61:  }",
          "63:  public void setURI(URI uri) {",
          "64:   this.uri = uri;",
          "71:  public void setMethod(HttpMethod httpMethod) {",
          "72:   this.httpMethod = httpMethod;",
          "",
          "[Added Lines]",
          "60:  public void setMethod(HttpMethod httpMethod) {",
          "61:   this.httpMethod = httpMethod;",
          "68:  public void setURI(URI uri) {",
          "69:   this.uri = uri;",
          "70:  }",
          "72:  public URI getURI() {",
          "73:   return this.uri;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:    sb.append(\" \").append(this.uri);",
          "112:   }",
          "113:   if (!getHeaders().isEmpty()) {",
          "115:   }",
          "116:   if (sb.length() == 0) {",
          "117:    sb.append(\"Not yet initialized\");",
          "",
          "[Removed Lines]",
          "114:    sb.append(\", headers : \").append(getHeaders());",
          "",
          "[Added Lines]",
          "115:    sb.append(\", headers: \").append(getHeaders());",
          "",
          "---------------"
        ],
        "spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpResponse.java||spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpResponse.java": [
          "File: spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpResponse.java -> spring-test/src/main/java/org/springframework/mock/http/client/MockClientHttpResponse.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  public MockClientHttpResponse(byte[] body, HttpStatus statusCode) {",
          "41:   super(body);",
          "43:   this.status = statusCode;",
          "44:  }",
          "",
          "[Removed Lines]",
          "42:   Assert.notNull(statusCode, \"statisCode is required\");",
          "",
          "[Added Lines]",
          "43:   Assert.notNull(statusCode, \"HttpStatus is required\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:  public MockClientHttpResponse(InputStream body, HttpStatus statusCode) {",
          "50:   super(body);",
          "52:   this.status = statusCode;",
          "53:  }",
          "55:  public HttpStatus getStatusCode() throws IOException {",
          "56:   return this.status;",
          "57:  }",
          "",
          "[Removed Lines]",
          "51:   Assert.notNull(statusCode, \"statisCode is required\");",
          "",
          "[Added Lines]",
          "52:   Assert.notNull(statusCode, \"HttpStatus is required\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf39078fbbf3678f1bc6341bcf0d14c08eff8e0d",
      "candidate_info": {
        "commit_hash": "cf39078fbbf3678f1bc6341bcf0d14c08eff8e0d",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/cf39078fbbf3678f1bc6341bcf0d14c08eff8e0d",
        "files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java",
          "spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.2.xsd",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParserTests.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportExtensionTests.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java",
          "spring-webmvc/src/test/resources/org/springframework/web/servlet/config/mvc-config-path-matching-mappings.xml",
          "spring-webmvc/src/test/resources/org/springframework/web/servlet/config/mvc-config-path-matching.xml"
        ],
        "message": "Backport MVC Java config path-related config options\n\nIssue: SPR-14186",
        "before_after_code_files": [
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java",
          "spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.2.xsd||spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.2.xsd",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParserTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParserTests.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportExtensionTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportExtensionTests.java",
          "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:    handlerMappingDef.getPropertyValues().add(\"removeSemicolonContent\", !enableMatrixVariables);",
          "164:   }",
          "166:   RuntimeBeanReference conversionService = getConversionService(element, source, parserContext);",
          "167:   RuntimeBeanReference validator = getValidator(element, source, parserContext);",
          "168:   RuntimeBeanReference messageCodesResolver = getMessageCodesResolver(element);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:   configurePathMatchingProperties(handlerMappingDef, element, parserContext);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:   return contentNegotiationManagerRef;",
          "310:  }",
          "312:  private Properties getDefaultMediaTypes() {",
          "313:   Properties props = new Properties();",
          "314:   if (romePresent) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "314:  private void configurePathMatchingProperties(RootBeanDefinition handlerMappingDef, Element element,",
          "315:    ParserContext parserContext) {",
          "317:   Element pathMatchingElement = DomUtils.getChildElementByTagName(element, \"path-matching\");",
          "318:   if (pathMatchingElement != null) {",
          "319:    Object source = parserContext.extractSource(element);",
          "320:    if (pathMatchingElement.hasAttribute(\"suffix-pattern\")) {",
          "321:     Boolean useSuffixPatternMatch = Boolean.valueOf(pathMatchingElement.getAttribute(\"suffix-pattern\"));",
          "322:     handlerMappingDef.getPropertyValues().add(\"useSuffixPatternMatch\", useSuffixPatternMatch);",
          "323:    }",
          "324:    if (pathMatchingElement.hasAttribute(\"trailing-slash\")) {",
          "325:     Boolean useTrailingSlashMatch = Boolean.valueOf(pathMatchingElement.getAttribute(\"trailing-slash\"));",
          "326:     handlerMappingDef.getPropertyValues().add(\"useTrailingSlashMatch\", useTrailingSlashMatch);",
          "327:    }",
          "328:    if (pathMatchingElement.hasAttribute(\"registered-suffixes-only\")) {",
          "329:     Boolean useRegisteredSuffixPatternMatch = Boolean.valueOf(pathMatchingElement.getAttribute(\"registered-suffixes-only\"));",
          "330:     handlerMappingDef.getPropertyValues().add(\"useRegisteredSuffixPatternMatch\", useRegisteredSuffixPatternMatch);",
          "331:    }",
          "332:    RuntimeBeanReference pathHelperRef = null;",
          "333:    if (pathMatchingElement.hasAttribute(\"path-helper\")) {",
          "334:     pathHelperRef = new RuntimeBeanReference(pathMatchingElement.getAttribute(\"path-helper\"));",
          "335:    }",
          "336:    pathHelperRef = MvcNamespaceUtils.registerUrlPathHelper(pathHelperRef, parserContext, source);",
          "337:    handlerMappingDef.getPropertyValues().add(\"urlPathHelper\", pathHelperRef);",
          "339:    RuntimeBeanReference pathMatcherRef = null;",
          "340:    if (pathMatchingElement.hasAttribute(\"path-matcher\")) {",
          "341:     pathMatcherRef = new RuntimeBeanReference(pathMatchingElement.getAttribute(\"path-matcher\"));",
          "342:    }",
          "343:    pathMatcherRef = MvcNamespaceUtils.registerPathMatcher(pathMatcherRef, parserContext, source);",
          "344:    handlerMappingDef.getPropertyValues().add(\"pathMatcher\", pathMatcherRef);",
          "345:   }",
          "346:  }",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package org.springframework.web.servlet.config;",
          "19: import org.springframework.beans.factory.config.BeanDefinition;",
          "20: import org.springframework.beans.factory.parsing.BeanComponentDefinition;",
          "21: import org.springframework.beans.factory.support.RootBeanDefinition;",
          "22: import org.springframework.beans.factory.xml.ParserContext;",
          "23: import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;",
          "24: import org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter;",
          "25: import org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import org.springframework.beans.factory.config.RuntimeBeanReference;",
          "24: import org.springframework.util.AntPathMatcher;",
          "25: import org.springframework.util.PathMatcher;",
          "29: import org.springframework.web.util.UrlPathHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:  private static final String HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME =",
          "42:    HttpRequestHandlerAdapter.class.getName();",
          "44:  public static void registerDefaultComponents(ParserContext parserContext, Object source) {",
          "45:   registerBeanNameUrlHandlerMapping(parserContext, source);",
          "46:   registerHttpRequestHandlerAdapter(parserContext, source);",
          "47:   registerSimpleControllerHandlerAdapter(parserContext, source);",
          "48:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:  private static final String URL_PATH_HELPER_BEAN_NAME = \"mvcUrlPathHelper\";",
          "50:  private static final String PATH_MATCHER_BEAN_NAME = \"mvcPathMatcher\";",
          "66:  public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef,",
          "67:    ParserContext parserContext, Object source) {",
          "69:   if (urlPathHelperRef != null) {",
          "70:    if (parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {",
          "71:     parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME);",
          "72:    }",
          "73:    parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME);",
          "74:   }",
          "75:   else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)",
          "76:     && !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {",
          "77:    RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class);",
          "78:    urlPathHelperDef.setSource(source);",
          "79:    urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);",
          "80:    parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef);",
          "81:    parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME));",
          "82:   }",
          "83:   return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME);",
          "84:  }",
          "92:  public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef,",
          "93:    ParserContext parserContext, Object source) {",
          "95:   if (pathMatcherRef != null) {",
          "96:    if (parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {",
          "97:     parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME);",
          "98:    }",
          "99:    parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME);",
          "100:   }",
          "101:   else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)",
          "102:     && !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {",
          "103:    RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class);",
          "104:    pathMatcherDef.setSource(source);",
          "105:    pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);",
          "106:    parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef);",
          "107:    parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME));",
          "108:   }",
          "109:   return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME);",
          "110:  }",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import org.w3c.dom.Element;",
          "24: import org.springframework.beans.factory.config.BeanDefinition;",
          "25: import org.springframework.beans.factory.parsing.BeanComponentDefinition;",
          "26: import org.springframework.beans.factory.support.ManagedList;",
          "27: import org.springframework.beans.factory.support.ManagedMap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.springframework.beans.factory.config.RuntimeBeanReference;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   }",
          "63:   urlMap.put(resourceRequestPath, resourceHandlerName);",
          "65:   RootBeanDefinition handlerMappingDef = new RootBeanDefinition(SimpleUrlHandlerMapping.class);",
          "66:   handlerMappingDef.setSource(source);",
          "67:   handlerMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);",
          "68:   handlerMappingDef.getPropertyValues().add(\"urlMap\", urlMap);",
          "70:   String order = element.getAttribute(\"order\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:   RuntimeBeanReference pathMatcherRef = MvcNamespaceUtils.registerPathMatcher(null, parserContext, source);",
          "67:   RuntimeBeanReference pathHelperRef = MvcNamespaceUtils.registerUrlPathHelper(null, parserContext, source);",
          "73:   handlerMappingDef.getPropertyValues().add(\"pathMatcher\", pathMatcherRef);",
          "74:   handlerMappingDef.getPropertyValues().add(\"urlPathHelper\", pathHelperRef);",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:    RootBeanDefinition handlerMappingDef = new RootBeanDefinition(SimpleUrlHandlerMapping.class);",
          "77:    handlerMappingDef.setSource(source);",
          "78:    handlerMappingDef.getPropertyValues().add(\"order\", \"1\");",
          "79:    handlerMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);",
          "80:    parserContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME, handlerMappingDef);",
          "81:    parserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef, HANDLER_MAPPING_BEAN_NAME));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:    handlerMappingDef.getPropertyValues().add(\"pathMatcher\",",
          "80:      MvcNamespaceUtils.registerPathMatcher(null, parserContext, source));",
          "81:    handlerMappingDef.getPropertyValues().add(\"urlPathHelper\",",
          "82:      MvcNamespaceUtils.registerUrlPathHelper(null, parserContext, source));",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   this.configurers.configureAsyncSupport(configurer);",
          "68:  }",
          "70:  @Override",
          "71:  protected void addViewControllers(ViewControllerRegistry registry) {",
          "72:   this.configurers.addViewControllers(registry);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:  @Override",
          "71:  public void configurePathMatch(PathMatchConfigurer configurer) {",
          "72:   this.configurers.configurePathMatch(configurer);",
          "73:  }",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.springframework.web.servlet.config.annotation;",
          "19: import org.springframework.util.PathMatcher;",
          "20: import org.springframework.web.util.UrlPathHelper;",
          "38: public class PathMatchConfigurer {",
          "40:  private Boolean suffixPatternMatch;",
          "42:  private Boolean trailingSlashMatch;",
          "44:  private Boolean registeredSuffixPatternMatch;",
          "46:  private UrlPathHelper urlPathHelper;",
          "48:  private PathMatcher pathMatcher;",
          "57:  public PathMatchConfigurer setUseSuffixPatternMatch(Boolean suffixPatternMatch) {",
          "58:   this.suffixPatternMatch = suffixPatternMatch;",
          "59:   return this;",
          "60:  }",
          "67:  public PathMatchConfigurer setUseTrailingSlashMatch(Boolean trailingSlashMatch) {",
          "68:   this.trailingSlashMatch = trailingSlashMatch;",
          "69:   return this;",
          "70:  }",
          "81:  public PathMatchConfigurer setUseRegisteredSuffixPatternMatch(",
          "82:    Boolean registeredSuffixPatternMatch) {",
          "84:   this.registeredSuffixPatternMatch = registeredSuffixPatternMatch;",
          "85:   return this;",
          "86:  }",
          "94:  public PathMatchConfigurer setUrlPathHelper(UrlPathHelper urlPathHelper) {",
          "95:   this.urlPathHelper = urlPathHelper;",
          "96:   return this;",
          "97:  }",
          "104:  public PathMatchConfigurer setPathMatcher(PathMatcher pathMatcher) {",
          "105:   this.pathMatcher = pathMatcher;",
          "106:   return this;",
          "107:  }",
          "109:  public Boolean isUseSuffixPatternMatch() {",
          "110:   return this.suffixPatternMatch;",
          "111:  }",
          "113:  public Boolean isUseTrailingSlashMatch() {",
          "114:   return this.trailingSlashMatch;",
          "115:  }",
          "117:  public Boolean isUseRegisteredSuffixPatternMatch() {",
          "118:   return this.registeredSuffixPatternMatch;",
          "119:  }",
          "121:  public UrlPathHelper getUrlPathHelper() {",
          "122:   return this.urlPathHelper;",
          "123:  }",
          "125:  public PathMatcher getPathMatcher() {",
          "126:   return this.pathMatcher;",
          "127:  }",
          "129: }",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: import org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter;",
          "48: import org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;",
          "49: import org.springframework.http.converter.xml.SourceHttpMessageConverter;",
          "50: import org.springframework.util.ClassUtils;",
          "51: import org.springframework.validation.Errors;",
          "52: import org.springframework.validation.MessageCodesResolver;",
          "53: import org.springframework.validation.Validator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: import org.springframework.util.AntPathMatcher;",
          "52: import org.springframework.util.PathMatcher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75: import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;",
          "76: import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;",
          "77: import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: import org.springframework.web.util.UrlPathHelper;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:  private ContentNegotiationManager contentNegotiationManager;",
          "166:  private List<HttpMessageConverter<?>> messageConverters;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:  private PathMatchConfigurer pathMatchConfigurer;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:   handlerMapping.setOrder(0);",
          "192:   handlerMapping.setInterceptors(getInterceptors());",
          "193:   handlerMapping.setContentNegotiationManager(mvcContentNegotiationManager());",
          "194:   return handlerMapping;",
          "195:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:   PathMatchConfigurer configurer = getPathMatchConfigurer();",
          "201:   if (configurer.isUseSuffixPatternMatch() != null) {",
          "202:    handlerMapping.setUseSuffixPatternMatch(configurer.isUseSuffixPatternMatch());",
          "203:   }",
          "204:   if (configurer.isUseRegisteredSuffixPatternMatch() != null) {",
          "205:    handlerMapping.setUseRegisteredSuffixPatternMatch(configurer.isUseRegisteredSuffixPatternMatch());",
          "206:   }",
          "207:   if (configurer.isUseTrailingSlashMatch() != null) {",
          "208:    handlerMapping.setUseTrailingSlashMatch(configurer.isUseTrailingSlashMatch());",
          "209:   }",
          "210:   if (configurer.getPathMatcher() != null) {",
          "211:    handlerMapping.setPathMatcher(configurer.getPathMatcher());",
          "212:   }",
          "213:   if (configurer.getUrlPathHelper() != null) {",
          "214:    handlerMapping.setUrlPathHelper(configurer.getUrlPathHelper());",
          "215:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "259:  protected void configureContentNegotiation(ContentNegotiationConfigurer configurer) {",
          "260:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:  protected PathMatchConfigurer getPathMatchConfigurer() {",
          "291:   if (this.pathMatchConfigurer == null) {",
          "292:    this.pathMatchConfigurer = new PathMatchConfigurer();",
          "293:    configurePathMatch(this.pathMatchConfigurer);",
          "294:   }",
          "295:   return this.pathMatchConfigurer;",
          "296:  }",
          "303:  public void configurePathMatch(PathMatchConfigurer configurer) {",
          "304:  }",
          "313:  @Bean",
          "314:  public PathMatcher mvcPathMatcher() {",
          "315:   if (getPathMatchConfigurer().getPathMatcher() != null) {",
          "316:    return getPathMatchConfigurer().getPathMatcher();",
          "317:   }",
          "318:   else {",
          "319:    return new AntPathMatcher();",
          "320:   }",
          "321:  }",
          "330:  @Bean",
          "331:  public UrlPathHelper mvcUrlPathHelper() {",
          "332:   if (getPathMatchConfigurer().getUrlPathHelper() != null) {",
          "333:    return getPathMatchConfigurer().getUrlPathHelper();",
          "334:   }",
          "335:   else {",
          "336:    return new UrlPathHelper();",
          "337:   }",
          "338:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "272:   AbstractHandlerMapping handlerMapping = registry.getHandlerMapping();",
          "273:   handlerMapping = (handlerMapping != null ? handlerMapping : new EmptyHandlerMapping());",
          "274:   handlerMapping.setInterceptors(getInterceptors());",
          "275:   return handlerMapping;",
          "276:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:   handlerMapping.setPathMatcher(mvcPathMatcher());",
          "354:   handlerMapping.setUrlPathHelper(mvcUrlPathHelper());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "305:   addResourceHandlers(registry);",
          "307:   AbstractHandlerMapping handlerMapping = registry.getHandlerMapping();",
          "309:   return handlerMapping;",
          "310:  }",
          "",
          "[Removed Lines]",
          "308:   handlerMapping = (handlerMapping != null ? handlerMapping : new EmptyHandlerMapping());",
          "",
          "[Added Lines]",
          "388:   if (handlerMapping != null) {",
          "389:    handlerMapping.setPathMatcher(mvcPathMatcher());",
          "390:    handlerMapping.setUrlPathHelper(mvcUrlPathHelper());",
          "391:   }",
          "392:   else {",
          "393:    handlerMapping = new EmptyHandlerMapping();",
          "394:   }",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:  void configureAsyncSupport(AsyncSupportConfigurer configurer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:  void configurePathMatch(PathMatchConfigurer configurer);",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  public void configureAsyncSupport(AsyncSupportConfigurer configurer) {",
          "72:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:  public void configurePathMatch(PathMatchConfigurer configurer) {",
          "79:  }",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java||spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   }",
          "62:  }",
          "64:  public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {",
          "65:   for (WebMvcConfigurer delegate : this.delegates) {",
          "66:    delegate.configureMessageConverters(converters);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:  public void configurePathMatch(PathMatchConfigurer configurer) {",
          "65:   for (WebMvcConfigurer delegate : this.delegates) {",
          "66:    delegate.configurePathMatch(configurer);",
          "67:   }",
          "68:  }",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.2.xsd||spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.2.xsd": [
          "File: spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.2.xsd -> spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.2.xsd",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   </xsd:annotation>",
          "22:   <xsd:complexType>",
          "23:    <xsd:all minOccurs=\"0\">",
          "24:     <xsd:element name=\"message-converters\" minOccurs=\"0\">",
          "25:      <xsd:annotation>",
          "26:       <xsd:documentation><![CDATA[",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     <xsd:element name=\"path-matching\" minOccurs=\"0\">",
          "25:      <xsd:annotation>",
          "26:       <xsd:documentation><![CDATA[",
          "27:  Configures the path matching part of the Spring MVC Controller programming model.",
          "28:  Like annotation-driven, code-based alternatives are also documented in EnableWebMvc javadoc.",
          "29:       ]]></xsd:documentation>",
          "30:      </xsd:annotation>",
          "31:      <xsd:complexType>",
          "32:       <xsd:attribute name=\"suffix-pattern\" type=\"xsd:boolean\">",
          "33:        <xsd:annotation>",
          "34:         <xsd:documentation><![CDATA[",
          "35:  Whether to use suffix pattern match (\".*\") when matching patterns to requests. If enabled",
          "36:  a method mapped to \"/users\" also matches to \"/users.*\".",
          "37:  The default value is true.",
          "38:         ]]></xsd:documentation>",
          "39:        </xsd:annotation>",
          "40:       </xsd:attribute>",
          "41:       <xsd:attribute name=\"trailing-slash\" type=\"xsd:boolean\">",
          "42:        <xsd:annotation>",
          "43:         <xsd:documentation><![CDATA[",
          "44:  Whether to match to URLs irrespective of the presence of a trailing slash.",
          "45:  If enabled a method mapped to \"/users\" also matches to \"/users/\".",
          "46:  The default value is true.",
          "47:           ]]></xsd:documentation>",
          "48:        </xsd:annotation>",
          "49:       </xsd:attribute>",
          "50:       <xsd:attribute name=\"registered-suffixes-only\" type=\"xsd:boolean\">",
          "51:        <xsd:annotation>",
          "52:         <xsd:documentation><![CDATA[",
          "53:  Whether suffix pattern matching should work only against path extensions",
          "54:  explicitly registered when you configure content negotiation.",
          "55:  This is generally recommended to reduce ambiguity and to",
          "56:  avoid issues such as when a \".\" appears in the path for other reasons.",
          "57:  The default value is false.",
          "58:         ]]></xsd:documentation>",
          "59:        </xsd:annotation>",
          "60:       </xsd:attribute>",
          "61:       <xsd:attribute name=\"path-helper\" type=\"xsd:string\">",
          "62:        <xsd:annotation>",
          "63:         <xsd:documentation><![CDATA[",
          "64:  The bean name of the UrlPathHelper to use for resolution of lookup paths.",
          "65:  Use this to override the default UrlPathHelper with a custom subclass, or to share common UrlPathHelper settings across",
          "66:  multiple HandlerMappings and MethodNameResolvers.",
          "67:         ]]></xsd:documentation>",
          "68:        </xsd:annotation>",
          "69:       </xsd:attribute>",
          "70:       <xsd:attribute name=\"path-matcher\" type=\"xsd:string\">",
          "71:        <xsd:annotation>",
          "72:         <xsd:documentation><![CDATA[",
          "73:  The bean name of the PathMatcher implementation to use for matching URL paths against registered URL patterns.",
          "74:  Default is AntPathMatcher.",
          "75:         ]]></xsd:documentation>",
          "76:        </xsd:annotation>",
          "77:       </xsd:attribute>",
          "78:      </xsd:complexType>",
          "79:     </xsd:element>",
          "",
          "---------------"
        ],
        "spring-webmvc/src/test/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParserTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParserTests.java": [
          "File: spring-webmvc/src/test/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParserTests.java -> spring-webmvc/src/test/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParserTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: package org.springframework.web.servlet.config;",
          "18: import static org.junit.Assert.assertEquals;",
          "19: import static org.junit.Assert.assertNotNull;",
          "20: import static org.junit.Assert.assertTrue;",
          "22: import java.util.List;",
          "24: import org.junit.Before;",
          "25: import org.junit.Test;",
          "26: import org.springframework.beans.DirectFieldAccessor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import static org.junit.Assert.assertFalse;",
          "21: import static org.junit.Assert.assertThat;",
          "26: import org.hamcrest.Matchers;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import org.springframework.http.converter.HttpMessageConverter;",
          "31: import org.springframework.http.converter.ResourceHttpMessageConverter;",
          "32: import org.springframework.http.converter.StringHttpMessageConverter;",
          "33: import org.springframework.validation.MessageCodesResolver;",
          "34: import org.springframework.web.bind.support.ConfigurableWebBindingInitializer;",
          "35: import org.springframework.web.bind.support.WebArgumentResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import org.springframework.util.AntPathMatcher;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42: import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;",
          "43: import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;",
          "44: import org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver;",
          "45: import org.springframework.web.servlet.mvc.method.annotation.ServletWebArgumentResolverAdapter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;",
          "51: import org.springframework.web.util.UrlPathHelper;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:   assertEquals(false, new DirectFieldAccessor(adapter).getPropertyValue(\"ignoreDefaultModelOnRedirect\"));",
          "71:  }",
          "73:  @Test",
          "74:  public void testMessageConverters() {",
          "75:   loadBeanDefinitions(\"mvc-config-message-converters.xml\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:  @Test",
          "80:  public void testPathMatchingConfiguration() {",
          "81:   loadBeanDefinitions(\"mvc-config-path-matching.xml\");",
          "82:   RequestMappingHandlerMapping hm = this.appContext.getBean(RequestMappingHandlerMapping.class);",
          "83:   assertNotNull(hm);",
          "84:   assertTrue(hm.useSuffixPatternMatch());",
          "85:   assertFalse(hm.useTrailingSlashMatch());",
          "86:   assertTrue(hm.useRegisteredSuffixPatternMatch());",
          "87:   assertThat(hm.getUrlPathHelper(), Matchers.instanceOf(TestPathHelper.class));",
          "88:   assertThat(hm.getPathMatcher(), Matchers.instanceOf(TestPathMatcher.class));",
          "89:   List<String> fileExtensions = hm.getContentNegotiationManager().getAllFileExtensions();",
          "90:   assertThat(fileExtensions, Matchers.contains(\"xml\"));",
          "91:   assertThat(fileExtensions, Matchers.hasSize(1));",
          "92:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198:  }",
          "200: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: class TestPathMatcher extends AntPathMatcher { }",
          "225: class TestPathHelper extends UrlPathHelper { }",
          "",
          "---------------"
        ],
        "spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java": [
          "File: spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java -> spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.lang.annotation.RetentionPolicy;",
          "21: import java.lang.reflect.Method;",
          "22: import java.util.Arrays;",
          "23: import java.util.Date;",
          "24: import java.util.List;",
          "25: import java.util.Locale;",
          "27: import javax.servlet.RequestDispatcher;",
          "28: import javax.validation.constraints.NotNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.Comparator;",
          "27: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: import org.springframework.mock.web.test.MockServletContext;",
          "48: import org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;",
          "49: import org.springframework.stereotype.Controller;",
          "50: import org.springframework.validation.BindingResult;",
          "51: import org.springframework.validation.Errors;",
          "52: import org.springframework.validation.Validator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import org.springframework.util.PathMatcher;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79: import org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler;",
          "80: import org.springframework.web.servlet.resource.ResourceHttpRequestHandler;",
          "81: import org.springframework.web.servlet.theme.ThemeChangeInterceptor;",
          "83: import static org.junit.Assert.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85: import org.springframework.web.util.UrlPathHelper;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90: public class MvcNamespaceTests {",
          "92:  private GenericWebApplicationContext appContext;",
          "94:  private TestController handler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:  private static final String VIEWCONTROLLER_BEAN_NAME =",
          "97:    \"org.springframework.web.servlet.config.viewControllerHandlerMapping\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235:  @Test",
          "236:  public void testResources() throws Exception {",
          "239:   HttpRequestHandlerAdapter adapter = appContext.getBean(HttpRequestHandlerAdapter.class);",
          "240:   assertNotNull(adapter);",
          "",
          "[Removed Lines]",
          "237:   loadBeanDefinitions(\"mvc-config-resources.xml\", 5);",
          "",
          "[Added Lines]",
          "245:   loadBeanDefinitions(\"mvc-config-resources.xml\", 7);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "268:  @Test",
          "269:  public void testResourcesWithOptionalAttributes() throws Exception {",
          "272:   SimpleUrlHandlerMapping mapping = appContext.getBean(SimpleUrlHandlerMapping.class);",
          "273:   assertNotNull(mapping);",
          "",
          "[Removed Lines]",
          "270:   loadBeanDefinitions(\"mvc-config-resources-optional-attrs.xml\", 5);",
          "",
          "[Added Lines]",
          "278:   loadBeanDefinitions(\"mvc-config-resources-optional-attrs.xml\", 7);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "350:  @Test",
          "351:  public void testViewControllers() throws Exception {",
          "354:   RequestMappingHandlerMapping mapping = appContext.getBean(RequestMappingHandlerMapping.class);",
          "355:   assertNotNull(mapping);",
          "",
          "[Removed Lines]",
          "352:   loadBeanDefinitions(\"mvc-config-view-controllers.xml\", 15);",
          "",
          "[Added Lines]",
          "360:   loadBeanDefinitions(\"mvc-config-view-controllers.xml\", 17);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "410:  @Test",
          "411:  public void testViewControllersOnWebSphere() throws Exception {",
          "414:   SimpleUrlHandlerMapping mapping2 = appContext.getBean(SimpleUrlHandlerMapping.class);",
          "415:   SimpleControllerHandlerAdapter adapter = appContext.getBean(SimpleControllerHandlerAdapter.class);",
          "",
          "[Removed Lines]",
          "412:   loadBeanDefinitions(\"mvc-config-view-controllers.xml\", 15);",
          "",
          "[Added Lines]",
          "420:   loadBeanDefinitions(\"mvc-config-view-controllers.xml\", 17);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "454:  @Test",
          "455:  public void testViewControllersDefaultConfig() {",
          "458:   BeanNameUrlHandlerMapping beanNameMapping = appContext.getBean(BeanNameUrlHandlerMapping.class);",
          "459:   assertNotNull(beanNameMapping);",
          "",
          "[Removed Lines]",
          "456:   loadBeanDefinitions(\"mvc-config-view-controllers-minimal.xml\", 4);",
          "",
          "[Added Lines]",
          "464:   loadBeanDefinitions(\"mvc-config-view-controllers-minimal.xml\", 6);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "492:   assertEquals(1, deferredResultInterceptors.length);",
          "493:  }",
          "496:  private void loadBeanDefinitions(String fileName, int expectedBeanCount) {",
          "497:   XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(appContext);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503:  @Test",
          "504:  public void testPathMatchingHandlerMappings() throws Exception {",
          "505:   loadBeanDefinitions(\"mvc-config-path-matching-mappings.xml\", 19);",
          "507:   RequestMappingHandlerMapping requestMapping = appContext.getBean(RequestMappingHandlerMapping.class);",
          "508:   assertNotNull(requestMapping);",
          "509:   assertEquals(TestPathHelper.class, requestMapping.getUrlPathHelper().getClass());",
          "510:   assertEquals(TestPathMatcher.class, requestMapping.getPathMatcher().getClass());",
          "512:   SimpleUrlHandlerMapping viewController = appContext.getBean(VIEWCONTROLLER_BEAN_NAME, SimpleUrlHandlerMapping.class);",
          "513:   assertNotNull(viewController);",
          "514:   assertEquals(TestPathHelper.class, viewController.getUrlPathHelper().getClass());",
          "515:   assertEquals(TestPathMatcher.class, viewController.getPathMatcher().getClass());",
          "517:   for (SimpleUrlHandlerMapping handlerMapping : appContext.getBeansOfType(SimpleUrlHandlerMapping.class).values()) {",
          "518:    assertNotNull(handlerMapping);",
          "519:    assertEquals(TestPathHelper.class, handlerMapping.getUrlPathHelper().getClass());",
          "520:    assertEquals(TestPathMatcher.class, handlerMapping.getPathMatcher().getClass());",
          "521:   }",
          "522:  }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "565:  public static class TestDeferredResultProcessingInterceptor extends DeferredResultProcessingInterceptorAdapter { }",
          "567: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "596:  public static class TestPathMatcher implements PathMatcher {",
          "598:   @Override",
          "599:   public boolean isPattern(String path) {",
          "600:    return false;",
          "601:   }",
          "603:   @Override",
          "604:   public boolean match(String pattern, String path) {",
          "605:    return path.matches(pattern);",
          "606:   }",
          "608:   @Override",
          "609:   public boolean matchStart(String pattern, String path) {",
          "610:    return false;",
          "611:   }",
          "613:   @Override",
          "614:   public String extractPathWithinPattern(String pattern, String path) {",
          "615:    return null;",
          "616:   }",
          "618:   @Override",
          "619:   public Map<String, String> extractUriTemplateVariables(String pattern, String path) {",
          "620:    return null;",
          "621:   }",
          "623:   @Override",
          "624:   public Comparator<String> getPatternComparator(String path) {",
          "625:    return null;",
          "626:   }",
          "628:   @Override",
          "629:   public String combine(String pattern1, String pattern2) {",
          "630:    return null;",
          "631:   }",
          "632:  }",
          "634:  public static class TestPathHelper extends UrlPathHelper {",
          "635:  }",
          "",
          "---------------"
        ],
        "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java": [
          "File: spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java -> spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.springframework.format.support.FormattingConversionService;",
          "31: import org.springframework.http.converter.HttpMessageConverter;",
          "32: import org.springframework.http.converter.StringHttpMessageConverter;",
          "33: import org.springframework.validation.DefaultMessageCodesResolver;",
          "34: import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;",
          "35: import org.springframework.web.bind.support.ConfigurableWebBindingInitializer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.springframework.util.PathMatcher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver;",
          "41: import org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver;",
          "42: import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;",
          "43: import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;",
          "45: import static org.junit.Assert.*;",
          "46: import static org.mockito.BDDMockito.*;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;",
          "46: import org.springframework.web.util.UrlPathHelper;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "178:   assertEquals(\"Only one custom converter is expected\", 1, composite.getExceptionResolvers().size());",
          "179:  }",
          "181: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:  @Test",
          "185:  public void configurePathMatch() throws Exception {",
          "186:   final PathMatcher pathMatcher = mock(PathMatcher.class);",
          "187:   final UrlPathHelper pathHelper = mock(UrlPathHelper.class);",
          "189:   List<WebMvcConfigurer> configurers = new ArrayList<WebMvcConfigurer>();",
          "190:   configurers.add(new WebMvcConfigurerAdapter() {",
          "191:    @Override",
          "192:    public void configurePathMatch(PathMatchConfigurer configurer) {",
          "193:     configurer.setUseRegisteredSuffixPatternMatch(true)",
          "194:       .setUseTrailingSlashMatch(false)",
          "195:       .setUrlPathHelper(pathHelper)",
          "196:       .setPathMatcher(pathMatcher);",
          "197:    }",
          "198:   });",
          "199:   delegatingConfig.setConfigurers(configurers);",
          "201:   RequestMappingHandlerMapping handlerMapping = delegatingConfig.requestMappingHandlerMapping();",
          "202:   assertNotNull(handlerMapping);",
          "203:   assertTrue(handlerMapping.useRegisteredSuffixPatternMatch());",
          "204:   assertTrue(handlerMapping.useSuffixPatternMatch());",
          "205:   assertFalse(handlerMapping.useTrailingSlashMatch());",
          "206:   assertSame(pathHelper, handlerMapping.getUrlPathHelper());",
          "207:   assertSame(pathMatcher, handlerMapping.getPathMatcher());",
          "208:  }",
          "",
          "---------------"
        ],
        "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportExtensionTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportExtensionTests.java": [
          "File: spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportExtensionTests.java -> spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportExtensionTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.springframework.mock.web.test.MockServletContext;",
          "36: import org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;",
          "37: import org.springframework.stereotype.Controller;",
          "38: import org.springframework.validation.BeanPropertyBindingResult;",
          "39: import org.springframework.validation.DefaultMessageCodesResolver;",
          "40: import org.springframework.validation.Errors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.springframework.util.AntPathMatcher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;",
          "63: import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;",
          "64: import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66: import org.springframework.web.util.UrlPathHelper;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   RequestMappingHandlerMapping rmHandlerMapping = webConfig.requestMappingHandlerMapping();",
          "93:   rmHandlerMapping.setApplicationContext(webAppContext);",
          "94:   rmHandlerMapping.afterPropertiesSet();",
          "95:   HandlerExecutionChain chain = rmHandlerMapping.getHandler(new MockHttpServletRequest(\"GET\", \"/\"));",
          "96:   assertNotNull(chain.getInterceptors());",
          "97:   assertEquals(2, chain.getInterceptors().length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:   assertEquals(TestPathHelper.class, rmHandlerMapping.getUrlPathHelper().getClass());",
          "99:   assertEquals(TestPathMatcher.class, rmHandlerMapping.getPathMatcher().getClass());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:   handlerMapping.setApplicationContext(webAppContext);",
          "103:   assertNotNull(handlerMapping);",
          "104:   assertEquals(1, handlerMapping.getOrder());",
          "105:   HandlerExecutionChain handler = handlerMapping.getHandler(new MockHttpServletRequest(\"GET\", \"/path\"));",
          "106:   assertNotNull(handler.getHandler());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:   assertEquals(TestPathHelper.class, handlerMapping.getUrlPathHelper().getClass());",
          "112:   assertEquals(TestPathMatcher.class, handlerMapping.getPathMatcher().getClass());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:   handlerMapping.setApplicationContext(webAppContext);",
          "110:   assertNotNull(handlerMapping);",
          "111:   assertEquals(Integer.MAX_VALUE-1, handlerMapping.getOrder());",
          "112:   handler = handlerMapping.getHandler(new MockHttpServletRequest(\"GET\", \"/resources/foo.gif\"));",
          "113:   assertNotNull(handler.getHandler());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:   assertEquals(TestPathHelper.class, handlerMapping.getUrlPathHelper().getClass());",
          "121:   assertEquals(TestPathMatcher.class, handlerMapping.getPathMatcher().getClass());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "280:    registry.addInterceptor(new LocaleChangeInterceptor());",
          "281:   }",
          "283:   @SuppressWarnings(\"serial\")",
          "284:   @Override",
          "285:   public MessageCodesResolver getMessageCodesResolver() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:   @Override",
          "294:   public void configurePathMatch(PathMatchConfigurer configurer) {",
          "295:    configurer.setPathMatcher(new TestPathMatcher());",
          "296:    configurer.setUrlPathHelper(new TestPathHelper());",
          "297:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "309:  }",
          "311: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "327:  private class TestPathHelper extends UrlPathHelper {}",
          "329:  private class TestPathMatcher extends AntPathMatcher {}",
          "",
          "---------------"
        ],
        "spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java||spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java": [
          "File: spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java -> spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.junit.Before;",
          "29: import org.junit.Test;",
          "30: import org.springframework.core.convert.ConversionService;",
          "31: import org.springframework.format.support.FormattingConversionService;",
          "32: import org.springframework.http.converter.HttpMessageConverter;",
          "33: import org.springframework.mock.web.test.MockHttpServletRequest;",
          "34: import org.springframework.mock.web.test.MockServletContext;",
          "35: import org.springframework.stereotype.Controller;",
          "36: import org.springframework.validation.Validator;",
          "37: import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;",
          "38: import org.springframework.web.bind.annotation.RequestMapping;",
          "39: import org.springframework.web.bind.support.ConfigurableWebBindingInitializer;",
          "40: import org.springframework.web.context.support.StaticWebApplicationContext;",
          "41: import org.springframework.web.servlet.HandlerExceptionResolver;",
          "42: import org.springframework.web.servlet.HandlerExecutionChain;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import org.springframework.context.ApplicationContext;",
          "32: import org.springframework.context.annotation.Bean;",
          "33: import org.springframework.context.annotation.Configuration;",
          "40: import org.springframework.util.AntPathMatcher;",
          "41: import org.springframework.util.PathMatcher;",
          "46: import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;",
          "50: import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;",
          "51: import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.springframework.web.util.UrlPathHelper;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:   assertNotNull(eher.getApplicationContext());",
          "164:  }",
          "167:  @Controller",
          "168:  private static class TestController {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:  @Test",
          "175:  public void defaultPathMatchConfiguration() throws Exception {",
          "176:   AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();",
          "177:   context.setServletContext(new MockServletContext());",
          "178:   context.register(WebConfig.class);",
          "179:   context.refresh();",
          "181:   UrlPathHelper urlPathHelper = context.getBean(UrlPathHelper.class);",
          "182:   PathMatcher pathMatcher = context.getBean(PathMatcher.class);",
          "184:   assertNotNull(urlPathHelper);",
          "185:   assertNotNull(pathMatcher);",
          "186:   assertEquals(AntPathMatcher.class, pathMatcher.getClass());",
          "187:  }",
          "190:  @EnableWebMvc",
          "191:  @Configuration",
          "192:  @SuppressWarnings(\"unused\")",
          "193:  static class WebConfig {",
          "195:   @Bean",
          "196:   public TestController testController() {",
          "197:    return new TestController();",
          "198:   }",
          "199:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2eb5e1c1c0b9cbfd3602bac1f00b5bc8a9c28e8",
      "candidate_info": {
        "commit_hash": "c2eb5e1c1c0b9cbfd3602bac1f00b5bc8a9c28e8",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/c2eb5e1c1c0b9cbfd3602bac1f00b5bc8a9c28e8",
        "files": [
          "spring-context/src/main/java/org/springframework/scripting/bsh/BshScriptFactory.java",
          "spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptFactory.java"
        ],
        "message": "Bsh/GroovyScriptFactory reset script cache in case of compilation error\n\nIssue: SPR-14007\n(cherry picked from commit 05ab769)",
        "before_after_code_files": [
          "spring-context/src/main/java/org/springframework/scripting/bsh/BshScriptFactory.java||spring-context/src/main/java/org/springframework/scripting/bsh/BshScriptFactory.java",
          "spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptFactory.java||spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-context/src/main/java/org/springframework/scripting/bsh/BshScriptFactory.java||spring-context/src/main/java/org/springframework/scripting/bsh/BshScriptFactory.java": [
          "File: spring-context/src/main/java/org/springframework/scripting/bsh/BshScriptFactory.java -> spring-context/src/main/java/org/springframework/scripting/bsh/BshScriptFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  public Object getScriptedObject(ScriptSource scriptSource, Class<?>... actualInterfaces)",
          "115:    throws IOException, ScriptCompilationException {",
          "120:    synchronized (this.scriptClassMonitor) {",
          "121:     boolean requiresScriptEvaluation = (this.wasModifiedForTypeCheck && this.scriptClass == null);",
          "122:     this.wasModifiedForTypeCheck = false;",
          "",
          "[Removed Lines]",
          "117:   try {",
          "118:    Class<?> clazz;",
          "",
          "[Added Lines]",
          "117:   Class<?> clazz;",
          "119:   try {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:     }",
          "141:     clazz = this.scriptClass;",
          "142:    }",
          "153:    }",
          "156:     return BshScriptUtils.createBshObject(",
          "157:       scriptSource.getScriptAsString(), actualInterfaces, this.beanClassLoader);",
          "158:    }",
          "162:   }",
          "163:  }",
          "165:  public Class<?> getScriptedObjectType(ScriptSource scriptSource)",
          "166:    throws IOException, ScriptCompilationException {",
          "170:     if (scriptSource.isModified()) {",
          "172:      this.wasModifiedForTypeCheck = true;",
          "",
          "[Removed Lines]",
          "144:    if (clazz != null) {",
          "146:     try {",
          "147:      return clazz.newInstance();",
          "148:     }",
          "149:     catch (Throwable ex) {",
          "150:      throw new ScriptCompilationException(",
          "151:        scriptSource, \"Could not instantiate script class: \" + clazz.getName(), ex);",
          "152:     }",
          "154:    else {",
          "159:   }",
          "160:   catch (EvalError ex) {",
          "161:    throw new ScriptCompilationException(scriptSource, ex);",
          "168:   try {",
          "169:    synchronized (this.scriptClassMonitor) {",
          "",
          "[Added Lines]",
          "143:   }",
          "144:   catch (EvalError ex) {",
          "145:    this.scriptClass = null;",
          "146:    throw new ScriptCompilationException(scriptSource, ex);",
          "147:   }",
          "149:   if (clazz != null) {",
          "151:    try {",
          "152:     return clazz.newInstance();",
          "153:    }",
          "154:    catch (Throwable ex) {",
          "155:     throw new ScriptCompilationException(",
          "156:       scriptSource, \"Could not instantiate script class: \" + clazz.getName(), ex);",
          "158:   }",
          "159:   else {",
          "161:    try {",
          "165:    catch (EvalError ex) {",
          "166:     throw new ScriptCompilationException(scriptSource, ex);",
          "167:    }",
          "174:   synchronized (this.scriptClassMonitor) {",
          "175:    try {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:     }",
          "175:     return this.scriptClass;",
          "176:    }",
          "180:   }",
          "181:  }",
          "",
          "[Removed Lines]",
          "177:   }",
          "178:   catch (EvalError ex) {",
          "179:    throw new ScriptCompilationException(scriptSource, ex);",
          "",
          "[Added Lines]",
          "183:    catch (EvalError ex) {",
          "184:     this.scriptClass = null;",
          "185:     throw new ScriptCompilationException(scriptSource, ex);",
          "186:    }",
          "",
          "---------------"
        ],
        "spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptFactory.java||spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptFactory.java": [
          "File: spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptFactory.java -> spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:  public Object getScriptedObject(ScriptSource scriptSource, Class<?>... actualInterfaces)",
          "151:    throws IOException, ScriptCompilationException {",
          "157:     this.wasModifiedForTypeCheck = false;",
          "159:     if (this.cachedResult != null) {",
          "",
          "[Removed Lines]",
          "153:   try {",
          "154:    Class<?> scriptClassToExecute;",
          "156:    synchronized (this.scriptClassMonitor) {",
          "",
          "[Added Lines]",
          "153:   synchronized (this.scriptClassMonitor) {",
          "154:    try {",
          "155:     Class<?> scriptClassToExecute;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:      }",
          "179:     }",
          "180:     scriptClassToExecute = this.scriptClass;",
          "188:   }",
          "189:  }",
          "191:  public Class<?> getScriptedObjectType(ScriptSource scriptSource)",
          "192:    throws IOException, ScriptCompilationException {",
          "196:     if (this.scriptClass == null || scriptSource.isModified()) {",
          "198:      this.wasModifiedForTypeCheck = true;",
          "",
          "[Removed Lines]",
          "181:    }",
          "184:    return executeScript(scriptSource, scriptClassToExecute);",
          "185:   }",
          "186:   catch (CompilationFailedException ex) {",
          "187:    throw new ScriptCompilationException(scriptSource, ex);",
          "194:   try {",
          "195:    synchronized (this.scriptClassMonitor) {",
          "",
          "[Added Lines]",
          "182:     return executeScript(scriptSource, scriptClassToExecute);",
          "183:    }",
          "184:    catch (CompilationFailedException ex) {",
          "185:     this.scriptClass = null;",
          "186:     this.scriptResultClass = null;",
          "187:     throw new ScriptCompilationException(scriptSource, ex);",
          "188:    }",
          "195:   synchronized (this.scriptClassMonitor) {",
          "196:    try {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "211:     }",
          "212:     return this.scriptResultClass;",
          "213:    }",
          "217:   }",
          "218:  }",
          "",
          "[Removed Lines]",
          "214:   }",
          "215:   catch (CompilationFailedException ex) {",
          "216:    throw new ScriptCompilationException(scriptSource, ex);",
          "",
          "[Added Lines]",
          "215:    catch (CompilationFailedException ex) {",
          "216:     this.scriptClass = null;",
          "217:     this.scriptResultClass = null;",
          "218:     this.cachedResult = null;",
          "219:     throw new ScriptCompilationException(scriptSource, ex);",
          "220:    }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52f21bdf54284df7ff5745246389a589a80efbff",
      "candidate_info": {
        "commit_hash": "52f21bdf54284df7ff5745246389a589a80efbff",
        "repo": "spring-projects/spring-framework",
        "commit_url": "https://github.com/spring-projects/spring-framework/commit/52f21bdf54284df7ff5745246389a589a80efbff",
        "files": [
          "spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java",
          "spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java",
          "spring-context/src/main/java/org/springframework/scripting/config/ScriptBeanDefinitionParser.java",
          "spring-context/src/main/java/org/springframework/scripting/config/ScriptingDefaultsParser.java",
          "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHolder.java",
          "spring-jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.java"
        ],
        "message": "Polishing (cherry picked from commit 22ca7ac)",
        "before_after_code_files": [
          "spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java||spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java",
          "spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java||spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java",
          "spring-context/src/main/java/org/springframework/scripting/config/ScriptBeanDefinitionParser.java||spring-context/src/main/java/org/springframework/scripting/config/ScriptBeanDefinitionParser.java",
          "spring-context/src/main/java/org/springframework/scripting/config/ScriptingDefaultsParser.java||spring-context/src/main/java/org/springframework/scripting/config/ScriptingDefaultsParser.java",
          "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHolder.java||spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHolder.java",
          "spring-jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java||spring-jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java||spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java",
          "spring-webmvc/src/main/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.java||spring-webmvc/src/main/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/arun1607/spring-framework/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java||spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java": [
          "File: spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java -> spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:  public void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue) {",
          "513:   if (autowiredValue != null) {",
          "516:    this.resolvableDependencies.put(dependencyType, autowiredValue);",
          "517:   }",
          "518:  }",
          "",
          "[Removed Lines]",
          "512:   Assert.notNull(dependencyType, \"Type must not be null\");",
          "514:    Assert.isTrue((autowiredValue instanceof ObjectFactory || dependencyType.isInstance(autowiredValue)),",
          "515:      \"Value [\" + autowiredValue + \"] does not implement specified type [\" + dependencyType.getName() + \"]\");",
          "",
          "[Added Lines]",
          "512:   Assert.notNull(dependencyType, \"Dependency type must not be null\");",
          "514:    if (!(autowiredValue instanceof ObjectFactory || dependencyType.isInstance(autowiredValue))) {",
          "515:     throw new IllegalArgumentException(\"Value [\" + autowiredValue +",
          "516:       \"] does not implement specified dependency type [\" + dependencyType.getName() + \"]\");",
          "517:    }",
          "",
          "---------------"
        ],
        "spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java||spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java": [
          "File: spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java -> spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:   The plan:",
          "120:   2 If seconds match move on, otherwise find the next match:",
          "121:   2.1 If next match is in the next minute then roll forwards",
          "",
          "[Removed Lines]",
          "118:   1 Round up to the next whole second",
          "",
          "[Added Lines]",
          "119:   1 Start with whole second (rounding up if necessary)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   4 If hour matches move on, otherwise find the next match",
          "128:   4.1 If next match is in the next day then roll forwards,",
          "129:   4.2 Reset the minutes and seconds and go to 2",
          "134:   Calendar calendar = new GregorianCalendar();",
          "",
          "[Removed Lines]",
          "131:   ...",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "410:  @Override",
          "411:  public String toString() {",
          "413:  }",
          "415: }",
          "",
          "[Removed Lines]",
          "412:   return (getClass().getSimpleName() + \": \" + this.expression);",
          "",
          "[Added Lines]",
          "411:   return getClass().getSimpleName() + \": \" + this.expression;",
          "",
          "---------------"
        ],
        "spring-context/src/main/java/org/springframework/scripting/config/ScriptBeanDefinitionParser.java||spring-context/src/main/java/org/springframework/scripting/config/ScriptBeanDefinitionParser.java": [
          "File: spring-context/src/main/java/org/springframework/scripting/config/ScriptBeanDefinitionParser.java -> spring-context/src/main/java/org/springframework/scripting/config/ScriptBeanDefinitionParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:   String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE);",
          "173:   if (StringUtils.hasText(refreshCheckDelay)) {",
          "175:   }",
          "178:   String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE);",
          "179:   if (StringUtils.hasText(proxyTargetClass)) {",
          "182:   }",
          "",
          "[Removed Lines]",
          "174:    bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay));",
          "180:    Boolean flag = new Boolean(proxyTargetClass);",
          "181:    bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag);",
          "",
          "[Added Lines]",
          "174:    bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, Long.valueOf(refreshCheckDelay));",
          "180:    bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, Boolean.valueOf(proxyTargetClass));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:  private String resolveScriptSource(Element element, XmlReaderContext readerContext) {",
          "215:   boolean hasScriptSource = element.hasAttribute(SCRIPT_SOURCE_ATTRIBUTE);",
          "217:   if (hasScriptSource && !elements.isEmpty()) {",
          "218:    readerContext.error(\"Only one of 'script-source' and 'inline-script' should be specified.\", element);",
          "219:    return null;",
          "",
          "[Removed Lines]",
          "216:   List elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT);",
          "",
          "[Added Lines]",
          "215:   List<Element> elements = DomUtils.getChildElementsByTagName(element, INLINE_SCRIPT_ELEMENT);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "222:    return element.getAttribute(SCRIPT_SOURCE_ATTRIBUTE);",
          "223:   }",
          "224:   else if (!elements.isEmpty()) {",
          "226:    return \"inline:\" + DomUtils.getTextValue(inlineElement);",
          "227:   }",
          "228:   else {",
          "",
          "[Removed Lines]",
          "225:    Element inlineElement = (Element) elements.get(0);",
          "",
          "[Added Lines]",
          "224:    Element inlineElement = elements.get(0);",
          "",
          "---------------"
        ],
        "spring-context/src/main/java/org/springframework/scripting/config/ScriptingDefaultsParser.java||spring-context/src/main/java/org/springframework/scripting/config/ScriptingDefaultsParser.java": [
          "File: spring-context/src/main/java/org/springframework/scripting/config/ScriptingDefaultsParser.java -> spring-context/src/main/java/org/springframework/scripting/config/ScriptingDefaultsParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     LangNamespaceUtils.registerScriptFactoryPostProcessorIfNecessary(parserContext.getRegistry());",
          "41:   String refreshCheckDelay = element.getAttribute(REFRESH_CHECK_DELAY_ATTRIBUTE);",
          "42:   if (StringUtils.hasText(refreshCheckDelay)) {",
          "44:   }",
          "45:   String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE);",
          "46:   if (StringUtils.hasText(proxyTargetClass)) {",
          "",
          "[Removed Lines]",
          "43:    bd.getPropertyValues().add(\"defaultRefreshCheckDelay\", new Long(refreshCheckDelay));",
          "",
          "[Added Lines]",
          "43:    bd.getPropertyValues().add(\"defaultRefreshCheckDelay\", Long.valueOf(refreshCheckDelay));",
          "",
          "---------------"
        ],
        "spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHolder.java||spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHolder.java": [
          "File: spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHolder.java -> spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHolder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:  public boolean supportsSavepoints() throws SQLException {",
          "163:   if (this.savepointsSupported == null) {",
          "165:   }",
          "167:  }",
          "",
          "[Removed Lines]",
          "164:    this.savepointsSupported = new Boolean(getConnection().getMetaData().supportsSavepoints());",
          "166:   return this.savepointsSupported.booleanValue();",
          "",
          "[Added Lines]",
          "164:    this.savepointsSupported = getConnection().getMetaData().supportsSavepoints();",
          "166:   return this.savepointsSupported;",
          "",
          "---------------"
        ],
        "spring-jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java||spring-jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java": [
          "File: spring-jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java -> spring-jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:   String prefetch = containerEle.getAttribute(PREFETCH_ATTRIBUTE);",
          "97:   if (StringUtils.hasText(prefetch)) {",
          "99:   }",
          "101:   String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);",
          "",
          "[Removed Lines]",
          "98:    configDef.getPropertyValues().add(\"prefetchSize\", new Integer(prefetch));",
          "",
          "[Added Lines]",
          "98:    configDef.getPropertyValues().add(\"prefetchSize\", Integer.valueOf(prefetch));",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java||spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleMappingExceptionResolver.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:  public void setStatusCodes(Properties statusCodes) {",
          "109:   for (Enumeration<?> enumeration = statusCodes.propertyNames(); enumeration.hasMoreElements();) {",
          "110:    String viewName = (String) enumeration.nextElement();",
          "112:    this.statusCodes.put(viewName, statusCode);",
          "113:   }",
          "114:  }",
          "",
          "[Removed Lines]",
          "111:    Integer statusCode = new Integer(statusCodes.getProperty(viewName));",
          "",
          "[Added Lines]",
          "112:    Integer statusCode = Integer.valueOf(statusCodes.getProperty(viewName));",
          "",
          "---------------"
        ],
        "spring-webmvc/src/main/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.java||spring-webmvc/src/main/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.java": [
          "File: spring-webmvc/src/main/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.java -> spring-webmvc/src/main/java/org/springframework/web/servlet/view/jasperreports/AbstractJasperReportsView.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:       \"'reportDataKey' for main report is required when specifying a value for 'subReportDataKeys'\");",
          "313:    }",
          "314:    this.subReports = new HashMap<String, JasperReport>(this.subReportUrls.size());",
          "316:     String key = (String) urls.nextElement();",
          "317:     String path = this.subReportUrls.getProperty(key);",
          "318:     Resource resource = getApplicationContext().getResource(path);",
          "",
          "[Removed Lines]",
          "315:    for (Enumeration urls = this.subReportUrls.propertyNames(); urls.hasMoreElements();) {",
          "",
          "[Added Lines]",
          "315:    for (Enumeration<?> urls = this.subReportUrls.propertyNames(); urls.hasMoreElements();) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:    else if (str.length() > 0 && Character.isDigit(str.charAt(0))) {",
          "385:     try {",
          "387:     }",
          "388:     catch (NumberFormatException ex) {",
          "",
          "[Removed Lines]",
          "386:      return new Integer(str);",
          "",
          "[Added Lines]",
          "386:      return Integer.valueOf(str);",
          "",
          "---------------"
        ]
      }
    }
  ]
}