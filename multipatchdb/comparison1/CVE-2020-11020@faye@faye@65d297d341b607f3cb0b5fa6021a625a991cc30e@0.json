{
  "cve_id": "CVE-2020-11020",
  "cve_desc": "Faye (NPM, RubyGem) versions greater than 0.5.0 and before 1.0.4, 1.1.3 and 1.2.5, has the potential for authentication bypass in the extension system. The vulnerability allows any client to bypass checks put in place by server-side extensions, by appending extra segments to the message channel. It is patched in versions 1.0.4, 1.1.3 and 1.2.5.",
  "repo": "faye/faye",
  "patch_hash": "65d297d341b607f3cb0b5fa6021a625a991cc30e",
  "patch_info": {
    "commit_hash": "65d297d341b607f3cb0b5fa6021a625a991cc30e",
    "repo": "faye/faye",
    "commit_url": "https://github.com/faye/faye/commit/65d297d341b607f3cb0b5fa6021a625a991cc30e",
    "files": [
      "lib/faye/protocol/server.rb",
      "spec/javascript/server/extensions_spec.js",
      "spec/ruby/server/extensions_spec.rb",
      "src/protocol/server.js"
    ],
    "message": "Strict meta channel recognition in server\n\nThis addresses a security vulnerability affecting user-added extensions\nthat implement access control for channels. These extensions typically\nwork by checking incoming messages whose channel is `/meta/subscribe`\nand then performing some authentication routine before allowing the\nmessage through.\n\nHowever, the Server parses channels in a way that means any channel\nnamespaced under `/meta/subscribe` will also work as a subscription\nrequest. For example if the client sends a message to the channel\n`/meta/subscribe/x`, that will bypass most authentication extensions but\nwill still be interpreted by the server as a subscription request, and\nthe client will be subscribed to the requested channel. The client has\nthus bypassed the user's access control policy.\n\nHere we prevent this by using a strict equality check; only messages\nwhose channel is exactly `/meta/subscribe` will be interpreted as\nsubscription requests. The same pattern is applied to all other meta\nchannels.",
    "before_after_code_files": [
      "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb",
      "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js",
      "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb",
      "src/protocol/server.js||src/protocol/server.js"
    ]
  },
  "patch_diff": {
    "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb": [
      "File: lib/faye/protocol/server.rb -> lib/faye/protocol/server.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:     include Logging",
      "7:     include Extensible",
      "11:     attr_reader :engine",
      "13:     def initialize(options = {})",
      "",
      "[Removed Lines]",
      "9:     META_METHODS = %w[handshake connect disconnect subscribe unsubscribe]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "107:     end",
      "109:     def handle_meta(message, local, &callback)",
      "113:         response = make_response(message)",
      "114:         response['error'] = Faye::Error.channel_forbidden(message['channel'])",
      "115:         response['successful'] = false",
      "",
      "[Removed Lines]",
      "110:       method = Channel.parse(message['channel'])[1]",
      "112:       unless META_METHODS.include?(method)",
      "",
      "[Added Lines]",
      "108:       method = method_for(message)",
      "110:       unless method",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "123:       end",
      "124:     end",
      "126:     def advize(response, connection_type)",
      "127:       return unless [Channel::HANDSHAKE, Channel::CONNECT].include?(response['channel'])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "124:     def method_for(message)",
      "125:       case message['channel']",
      "126:       when Channel::HANDSHAKE   then :handshake",
      "127:       when Channel::CONNECT     then :connect",
      "128:       when Channel::SUBSCRIBE   then :subscribe",
      "129:       when Channel::UNSUBSCRIBE then :unsubscribe",
      "130:       when Channel::DISCONNECT  then :disconnect",
      "131:       end",
      "132:     end",
      "",
      "---------------"
    ],
    "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js": [
      "File: spec/javascript/server/extensions_spec.js -> spec/javascript/server/extensions_spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "36:     }})",
      "37:   }})",
      "39:   describe(\"with an outgoing extension installed\", function() { with(this) {",
      "40:     before(function() { with(this) {",
      "41:       var extension = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39:   describe(\"with subscription auth installed\", function() { with(this) {",
      "40:     before(function() { with(this) {",
      "41:       var extension = {",
      "42:         incoming: function(message, callback) {",
      "43:           if (message.channel === \"/meta/subscribe\" && !message.auth) {",
      "44:             message.error = \"Invalid auth\"",
      "45:           }",
      "46:           callback(message)",
      "47:         }",
      "48:       }",
      "49:       server.addExtension(extension)",
      "50:     }})",
      "52:     it(\"does not subscribe using the intended channel\", function() { with(this) {",
      "53:       var message = {",
      "54:         channel: \"/meta/subscribe\",",
      "55:         clientId: \"fakeclientid\",",
      "56:         subscription: \"/foo\"",
      "57:       }",
      "58:       stub(engine, \"clientExists\").yields([true])",
      "59:       expect(engine, \"subscribe\").exactly(0)",
      "60:       server.process(message, false, function() {})",
      "61:     }})",
      "63:     it(\"does not subscribe using an extended channel\", function() { with(this) {",
      "64:       var message = {",
      "65:         channel: \"/meta/subscribe/x\",",
      "66:         clientId: \"fakeclientid\",",
      "67:         subscription: \"/foo\"",
      "68:       }",
      "69:       stub(engine, \"clientExists\").yields([true])",
      "70:       expect(engine, \"subscribe\").exactly(0)",
      "71:       server.process(message, false, function() {})",
      "72:     }})",
      "73:   }})",
      "",
      "---------------"
    ],
    "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb": [
      "File: spec/ruby/server/extensions_spec.rb -> spec/ruby/server/extensions_spec.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:     end",
      "41:   end",
      "43:   describe \"with an outgoing extension installed\" do",
      "44:     before do",
      "45:       extension = Class.new do",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43:   describe \"with subscription auth installed\" do",
      "44:     before do",
      "45:       extension = Class.new do",
      "46:         def incoming(message, callback)",
      "47:           if message[\"channel\"] == \"/meta/subscribe\" and !message[\"auth\"]",
      "48:             message[\"error\"] = \"Invalid auth\"",
      "49:           end",
      "50:           callback.call(message)",
      "51:         end",
      "52:       end",
      "53:       server.add_extension(extension.new)",
      "54:     end",
      "56:     it \"does not subscribe using the intended channel\" do",
      "57:       message = {",
      "58:         \"channel\" => \"/meta/subscribe\",",
      "59:         \"clientId\" => \"fakeclientid\",",
      "60:         \"subscription\" => \"/foo\"",
      "61:       }",
      "62:       engine.stub(:client_exists).and_yield(true)",
      "63:       engine.should_not_receive(:subscribe)",
      "64:       server.process(message, false) {}",
      "65:     end",
      "67:     it \"does not subscribe using an extended channel\" do",
      "68:       message = {",
      "69:         \"channel\" => \"/meta/subscribe/x\",",
      "70:         \"clientId\" => \"fakeclientid\",",
      "71:         \"subscription\" => \"/foo\"",
      "72:       }",
      "73:       engine.stub(:client_exists).and_yield(true)",
      "74:       engine.should_not_receive(:subscribe)",
      "75:       server.process(message, false) {}",
      "76:     end",
      "77:   end",
      "",
      "---------------"
    ],
    "src/protocol/server.js||src/protocol/server.js": [
      "File: src/protocol/server.js -> src/protocol/server.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "13:     Socket     = require('./socket');",
      "15: var Server = Class({ className: 'Server',",
      "18:   initialize: function(options) {",
      "19:     this._options  = options || {};",
      "20:     var engineOpts = this._options.engine || {};",
      "",
      "[Removed Lines]",
      "16:   META_METHODS: ['handshake', 'connect', 'disconnect', 'subscribe', 'unsubscribe'],",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120:   },",
      "122:   _handleMeta: function(message, local, callback, context) {",
      "124:         response;",
      "127:       response = this._makeResponse(message);",
      "128:       response.error = Error.channelForbidden(message.channel);",
      "129:       response.successful = false;",
      "",
      "[Removed Lines]",
      "123:     var method = Channel.parse(message.channel)[1],",
      "126:     if (array.indexOf(this.META_METHODS, method) < 0) {",
      "",
      "[Added Lines]",
      "121:     var method = this._methodFor(message),",
      "124:     if (method === null) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "137:     }, this);",
      "138:   },",
      "140:   _advize: function(response, connectionType) {",
      "141:     if (array.indexOf([Channel.HANDSHAKE, Channel.CONNECT], response.channel) < 0)",
      "142:       return;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:   _methodFor: function(message) {",
      "139:     var channel = message.channel;",
      "141:     if (channel === Channel.HANDSHAKE)   return 'handshake';",
      "142:     if (channel === Channel.CONNECT)     return 'connect';",
      "143:     if (channel === Channel.SUBSCRIBE)   return 'subscribe';",
      "144:     if (channel === Channel.UNSUBSCRIBE) return 'unsubscribe';",
      "145:     if (channel === Channel.DISCONNECT)  return 'disconnect';",
      "147:     return null;",
      "148:   },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4f57f3e03d984a78a12730fb6485415e87e0348c",
      "candidate_info": {
        "commit_hash": "4f57f3e03d984a78a12730fb6485415e87e0348c",
        "repo": "faye/faye",
        "commit_url": "https://github.com/faye/faye/commit/4f57f3e03d984a78a12730fb6485415e87e0348c",
        "files": [
          "javascript/protocol/server.js",
          "lib/faye/protocol/server.rb",
          "spec/javascript/server/extensions_spec.js",
          "spec/ruby/server/extensions_spec.rb"
        ],
        "message": "Strict meta channel recognition in server\n\nThis addresses a security vulnerability affecting user-added extensions\nthat implement access control for channels. These extensions typically\nwork by checking incoming messages whose channel is `/meta/subscribe`\nand then performing some authentication routine before allowing the\nmessage through.\n\nHowever, the Server parses channels in a way that means any channel\nnamespaced under `/meta/subscribe` will also work as a subscription\nrequest. For example if the client sends a message to the channel\n`/meta/subscribe/x`, that will bypass most authentication extensions but\nwill still be interpreted by the server as a subscription request, and\nthe client will be subscribed to the requested channel. The client has\nthus bypassed the user's access control policy.\n\nHere we prevent this by using a strict equality check; only messages\nwhose channel is exactly `/meta/subscribe` will be interpreted as\nsubscription requests. The same pattern is applied to all other meta\nchannels.",
        "before_after_code_files": [
          "javascript/protocol/server.js||javascript/protocol/server.js",
          "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb",
          "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js",
          "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb",
            "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js",
            "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb"
          ],
          "candidate": [
            "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb",
            "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js",
            "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb"
          ]
        }
      },
      "candidate_diff": {
        "javascript/protocol/server.js||javascript/protocol/server.js": [
          "File: javascript/protocol/server.js -> javascript/protocol/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: Faye.Server = Faye.Class({",
          "4:   initialize: function(options) {",
          "5:     this._options  = options || {};",
          "6:     var engineOpts = this._options.engine || {};",
          "",
          "[Removed Lines]",
          "2:   META_METHODS: ['handshake', 'connect', 'disconnect', 'subscribe', 'unsubscribe'],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   },",
          "106:   _handleMeta: function(message, local, callback, context) {",
          "108:         clientId = message.clientId,",
          "109:         response;",
          "112:       response = this._makeResponse(message);",
          "113:       response.error = Faye.Error.channelForbidden(message.channel);",
          "114:       response.successful = false;",
          "",
          "[Removed Lines]",
          "107:     var method   = Faye.Channel.parse(message.channel)[1],",
          "111:     if (Faye.indexOf(this.META_METHODS, method) < 0) {",
          "",
          "[Added Lines]",
          "105:     var method   = this._methodFor(message),",
          "109:     if (method === null) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:     }, this);",
          "123:   },",
          "125:   _advize: function(response, connectionType) {",
          "126:     if (Faye.indexOf([Faye.Channel.HANDSHAKE, Faye.Channel.CONNECT], response.channel) < 0)",
          "127:       return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:   _methodFor: function(message) {",
          "124:     var channel = message.channel;",
          "126:     if (channel === Faye.Channel.HANDSHAKE)   return 'handshake';",
          "127:     if (channel === Faye.Channel.CONNECT)     return 'connect';",
          "128:     if (channel === Faye.Channel.SUBSCRIBE)   return 'subscribe';",
          "129:     if (channel === Faye.Channel.UNSUBSCRIBE) return 'unsubscribe';",
          "130:     if (channel === Faye.Channel.DISCONNECT)  return 'disconnect';",
          "132:     return null;",
          "133:   },",
          "",
          "---------------"
        ],
        "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb": [
          "File: lib/faye/protocol/server.rb -> lib/faye/protocol/server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     include Logging",
          "7:     include Extensible",
          "11:     attr_reader :engine",
          "13:     def initialize(options = {})",
          "",
          "[Removed Lines]",
          "9:     META_METHODS = %w[handshake connect disconnect subscribe unsubscribe]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:     end",
          "106:     def handle_meta(message, local, &callback)",
          "108:       client_id = message['clientId']",
          "111:         response = make_response(message)",
          "112:         response['error'] = Faye::Error.channel_forbidden(message['channel'])",
          "113:         response['successful'] = false",
          "",
          "[Removed Lines]",
          "107:       method    = Channel.parse(message['channel'])[1]",
          "110:       unless META_METHODS.include?(method)",
          "",
          "[Added Lines]",
          "105:       method    = method_for(message)",
          "108:       unless method",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:       end",
          "122:     end",
          "124:     def advize(response, connection_type)",
          "125:       return unless [Channel::HANDSHAKE, Channel::CONNECT].include?(response['channel'])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:     def method_for(message)",
          "123:       case message['channel']",
          "124:       when Channel::HANDSHAKE   then :handshake",
          "125:       when Channel::CONNECT     then :connect",
          "126:       when Channel::SUBSCRIBE   then :subscribe",
          "127:       when Channel::UNSUBSCRIBE then :unsubscribe",
          "128:       when Channel::DISCONNECT  then :disconnect",
          "129:       end",
          "130:     end",
          "",
          "---------------"
        ],
        "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js": [
          "File: spec/javascript/server/extensions_spec.js -> spec/javascript/server/extensions_spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     }})",
          "32:   }})",
          "34:   describe(\"with an outgoing extension installed\", function() { with(this) {",
          "35:     before(function() { with(this) {",
          "36:       var extension = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:   describe(\"with subscription auth installed\", function() { with(this) {",
          "35:     before(function() { with(this) {",
          "36:       var extension = {",
          "37:         incoming: function(message, callback) {",
          "38:           if (message.channel === \"/meta/subscribe\" && !message.auth) {",
          "39:             message.error = \"Invalid auth\"",
          "40:           }",
          "41:           callback(message)",
          "42:         }",
          "43:       }",
          "44:       server.addExtension(extension)",
          "45:     }})",
          "47:     it(\"does not subscribe using the intended channel\", function() { with(this) {",
          "48:       var message = {",
          "49:         channel: \"/meta/subscribe\",",
          "50:         clientId: \"fakeclientid\",",
          "51:         subscription: \"/foo\"",
          "52:       }",
          "53:       stub(engine, \"clientExists\").yields([true])",
          "54:       expect(engine, \"subscribe\").exactly(0)",
          "55:       server.process(message, false, function() {})",
          "56:     }})",
          "58:     it(\"does not subscribe using an extended channel\", function() { with(this) {",
          "59:       var message = {",
          "60:         channel: \"/meta/subscribe/x\",",
          "61:         clientId: \"fakeclientid\",",
          "62:         subscription: \"/foo\"",
          "63:       }",
          "64:       stub(engine, \"clientExists\").yields([true])",
          "65:       expect(engine, \"subscribe\").exactly(0)",
          "66:       server.process(message, false, function() {})",
          "67:     }})",
          "68:   }})",
          "",
          "---------------"
        ],
        "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb": [
          "File: spec/ruby/server/extensions_spec.rb -> spec/ruby/server/extensions_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     end",
          "41:   end",
          "43:   describe \"with an outgoing extension installed\" do",
          "44:     before do",
          "45:       extension = Class.new do",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   describe \"with subscription auth installed\" do",
          "44:     before do",
          "45:       extension = Class.new do",
          "46:         def incoming(message, callback)",
          "47:           if message[\"channel\"] == \"/meta/subscribe\" and !message[\"auth\"]",
          "48:             message[\"error\"] = \"Invalid auth\"",
          "49:           end",
          "50:           callback.call(message)",
          "51:         end",
          "52:       end",
          "53:       server.add_extension(extension.new)",
          "54:     end",
          "56:     it \"does not subscribe using the intended channel\" do",
          "57:       message = {",
          "58:         \"channel\" => \"/meta/subscribe\",",
          "59:         \"clientId\" => \"fakeclientid\",",
          "60:         \"subscription\" => \"/foo\"",
          "61:       }",
          "62:       engine.stub(:client_exists).and_yield(true)",
          "63:       engine.should_not_receive(:subscribe)",
          "64:       server.process(message, false) {}",
          "65:     end",
          "67:     it \"does not subscribe using an extended channel\" do",
          "68:       message = {",
          "69:         \"channel\" => \"/meta/subscribe/x\",",
          "70:         \"clientId\" => \"fakeclientid\",",
          "71:         \"subscription\" => \"/foo\"",
          "72:       }",
          "73:       engine.stub(:client_exists).and_yield(true)",
          "74:       engine.should_not_receive(:subscribe)",
          "75:       server.process(message, false) {}",
          "76:     end",
          "77:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e293c742c49ae63455093c479c9406838688783",
      "candidate_info": {
        "commit_hash": "4e293c742c49ae63455093c479c9406838688783",
        "repo": "faye/faye",
        "commit_url": "https://github.com/faye/faye/commit/4e293c742c49ae63455093c479c9406838688783",
        "files": [
          "lib/faye/protocol/server.rb",
          "spec/javascript/server/extensions_spec.js",
          "spec/ruby/server/extensions_spec.rb",
          "src/protocol/server.js"
        ],
        "message": "Strict meta channel recognition in server\n\nThis addresses a security vulnerability affecting user-added extensions\nthat implement access control for channels. These extensions typically\nwork by checking incoming messages whose channel is `/meta/subscribe`\nand then performing some authentication routine before allowing the\nmessage through.\n\nHowever, the Server parses channels in a way that means any channel\nnamespaced under `/meta/subscribe` will also work as a subscription\nrequest. For example if the client sends a message to the channel\n`/meta/subscribe/x`, that will bypass most authentication extensions but\nwill still be interpreted by the server as a subscription request, and\nthe client will be subscribed to the requested channel. The client has\nthus bypassed the user's access control policy.\n\nHere we prevent this by using a strict equality check; only messages\nwhose channel is exactly `/meta/subscribe` will be interpreted as\nsubscription requests. The same pattern is applied to all other meta\nchannels.",
        "before_after_code_files": [
          "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb",
          "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js",
          "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb",
          "src/protocol/server.js||src/protocol/server.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb",
            "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js",
            "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb",
            "src/protocol/server.js||src/protocol/server.js"
          ],
          "candidate": [
            "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb",
            "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js",
            "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb",
            "src/protocol/server.js||src/protocol/server.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb": [
          "File: lib/faye/protocol/server.rb -> lib/faye/protocol/server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     include Logging",
          "7:     include Extensible",
          "11:     attr_reader :engine",
          "13:     def initialize(options = {})",
          "",
          "[Removed Lines]",
          "9:     META_METHODS = %w[handshake connect disconnect subscribe unsubscribe]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:     end",
          "109:     def handle_meta(message, local, &callback)",
          "113:         response = make_response(message)",
          "114:         response['error'] = Faye::Error.channel_forbidden(message['channel'])",
          "115:         response['successful'] = false",
          "",
          "[Removed Lines]",
          "110:       method = Channel.parse(message['channel'])[1]",
          "112:       unless META_METHODS.include?(method)",
          "",
          "[Added Lines]",
          "108:       method = method_for(message)",
          "110:       unless method",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:       end",
          "124:     end",
          "126:     def advize(response, connection_type)",
          "127:       return unless [Channel::HANDSHAKE, Channel::CONNECT].include?(response['channel'])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     def method_for(message)",
          "125:       case message['channel']",
          "126:       when Channel::HANDSHAKE   then :handshake",
          "127:       when Channel::CONNECT     then :connect",
          "128:       when Channel::SUBSCRIBE   then :subscribe",
          "129:       when Channel::UNSUBSCRIBE then :unsubscribe",
          "130:       when Channel::DISCONNECT  then :disconnect",
          "131:       end",
          "132:     end",
          "",
          "---------------"
        ],
        "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js": [
          "File: spec/javascript/server/extensions_spec.js -> spec/javascript/server/extensions_spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     }})",
          "37:   }})",
          "39:   describe(\"with an outgoing extension installed\", function() { with(this) {",
          "40:     before(function() { with(this) {",
          "41:       var extension = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   describe(\"with subscription auth installed\", function() { with(this) {",
          "40:     before(function() { with(this) {",
          "41:       var extension = {",
          "42:         incoming: function(message, callback) {",
          "43:           if (message.channel === \"/meta/subscribe\" && !message.auth) {",
          "44:             message.error = \"Invalid auth\"",
          "45:           }",
          "46:           callback(message)",
          "47:         }",
          "48:       }",
          "49:       server.addExtension(extension)",
          "50:     }})",
          "52:     it(\"does not subscribe using the intended channel\", function() { with(this) {",
          "53:       var message = {",
          "54:         channel: \"/meta/subscribe\",",
          "55:         clientId: \"fakeclientid\",",
          "56:         subscription: \"/foo\"",
          "57:       }",
          "58:       stub(engine, \"clientExists\").yields([true])",
          "59:       expect(engine, \"subscribe\").exactly(0)",
          "60:       server.process(message, false, function() {})",
          "61:     }})",
          "63:     it(\"does not subscribe using an extended channel\", function() { with(this) {",
          "64:       var message = {",
          "65:         channel: \"/meta/subscribe/x\",",
          "66:         clientId: \"fakeclientid\",",
          "67:         subscription: \"/foo\"",
          "68:       }",
          "69:       stub(engine, \"clientExists\").yields([true])",
          "70:       expect(engine, \"subscribe\").exactly(0)",
          "71:       server.process(message, false, function() {})",
          "72:     }})",
          "73:   }})",
          "",
          "---------------"
        ],
        "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb": [
          "File: spec/ruby/server/extensions_spec.rb -> spec/ruby/server/extensions_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     end",
          "41:   end",
          "43:   describe \"with an outgoing extension installed\" do",
          "44:     before do",
          "45:       extension = Class.new do",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   describe \"with subscription auth installed\" do",
          "44:     before do",
          "45:       extension = Class.new do",
          "46:         def incoming(message, callback)",
          "47:           if message[\"channel\"] == \"/meta/subscribe\" and !message[\"auth\"]",
          "48:             message[\"error\"] = \"Invalid auth\"",
          "49:           end",
          "50:           callback.call(message)",
          "51:         end",
          "52:       end",
          "53:       server.add_extension(extension.new)",
          "54:     end",
          "56:     it \"does not subscribe using the intended channel\" do",
          "57:       message = {",
          "58:         \"channel\" => \"/meta/subscribe\",",
          "59:         \"clientId\" => \"fakeclientid\",",
          "60:         \"subscription\" => \"/foo\"",
          "61:       }",
          "62:       engine.stub(:client_exists).and_yield(true)",
          "63:       engine.should_not_receive(:subscribe)",
          "64:       server.process(message, false) {}",
          "65:     end",
          "67:     it \"does not subscribe using an extended channel\" do",
          "68:       message = {",
          "69:         \"channel\" => \"/meta/subscribe/x\",",
          "70:         \"clientId\" => \"fakeclientid\",",
          "71:         \"subscription\" => \"/foo\"",
          "72:       }",
          "73:       engine.stub(:client_exists).and_yield(true)",
          "74:       engine.should_not_receive(:subscribe)",
          "75:       server.process(message, false) {}",
          "76:     end",
          "77:   end",
          "",
          "---------------"
        ],
        "src/protocol/server.js||src/protocol/server.js": [
          "File: src/protocol/server.js -> src/protocol/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     Socket     = require('./socket');",
          "15: var Server = Class({ className: 'Server',",
          "18:   initialize: function(options) {",
          "19:     this._options  = options || {};",
          "20:     var engineOpts = this._options.engine || {};",
          "",
          "[Removed Lines]",
          "16:   META_METHODS: ['handshake', 'connect', 'disconnect', 'subscribe', 'unsubscribe'],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   },",
          "122:   _handleMeta: function(message, local, callback, context) {",
          "124:         response;",
          "127:       response = this._makeResponse(message);",
          "128:       response.error = Error.channelForbidden(message.channel);",
          "129:       response.successful = false;",
          "",
          "[Removed Lines]",
          "123:     var method = Channel.parse(message.channel)[1],",
          "126:     if (array.indexOf(this.META_METHODS, method) < 0) {",
          "",
          "[Added Lines]",
          "121:     var method = this._methodFor(message),",
          "124:     if (method === null) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:     }, this);",
          "138:   },",
          "140:   _advize: function(response, connectionType) {",
          "141:     if (array.indexOf([Channel.HANDSHAKE, Channel.CONNECT], response.channel) < 0)",
          "142:       return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:   _methodFor: function(message) {",
          "139:     var channel = message.channel;",
          "141:     if (channel === Channel.HANDSHAKE)   return 'handshake';",
          "142:     if (channel === Channel.CONNECT)     return 'connect';",
          "143:     if (channel === Channel.SUBSCRIBE)   return 'subscribe';",
          "144:     if (channel === Channel.UNSUBSCRIBE) return 'unsubscribe';",
          "145:     if (channel === Channel.DISCONNECT)  return 'disconnect';",
          "147:     return null;",
          "148:   },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e22055d314f3dfb4e087cccedd40b21c91788a8",
      "candidate_info": {
        "commit_hash": "3e22055d314f3dfb4e087cccedd40b21c91788a8",
        "repo": "faye/faye",
        "commit_url": "https://github.com/faye/faye/commit/3e22055d314f3dfb4e087cccedd40b21c91788a8",
        "files": [
          "javascript/protocol/server.js",
          "lib/faye/protocol/server.rb",
          "spec/javascript/server/extensions_spec.js",
          "spec/ruby/server/extensions_spec.rb"
        ],
        "message": "Strict meta channel recognition in server\n\nThis addresses a security vulnerability affecting user-added extensions\nthat implement access control for channels. These extensions typically\nwork by checking incoming messages whose channel is `/meta/subscribe`\nand then performing some authentication routine before allowing the\nmessage through.\n\nHowever, the Server parses channels in a way that means any channel\nnamespaced under `/meta/subscribe` will also work as a subscription\nrequest. For example if the client sends a message to the channel\n`/meta/subscribe/x`, that will bypass most authentication extensions but\nwill still be interpreted by the server as a subscription request, and\nthe client will be subscribed to the requested channel. The client has\nthus bypassed the user's access control policy.\n\nHere we prevent this by using a strict equality check; only messages\nwhose channel is exactly `/meta/subscribe` will be interpreted as\nsubscription requests. The same pattern is applied to all other meta\nchannels.",
        "before_after_code_files": [
          "javascript/protocol/server.js||javascript/protocol/server.js",
          "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb",
          "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js",
          "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb",
            "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js",
            "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb"
          ],
          "candidate": [
            "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb",
            "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js",
            "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb"
          ]
        }
      },
      "candidate_diff": {
        "javascript/protocol/server.js||javascript/protocol/server.js": [
          "File: javascript/protocol/server.js -> javascript/protocol/server.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: Faye.Server = Faye.Class({",
          "4:   initialize: function(options) {",
          "5:     this._options  = options || {};",
          "6:     var engineOpts = this._options.engine || {};",
          "",
          "[Removed Lines]",
          "2:   META_METHODS: ['handshake', 'connect', 'disconnect', 'subscribe', 'unsubscribe'],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:   },",
          "105:   _handleMeta: function(message, local, callback, context) {",
          "107:         response;",
          "110:       response = this._makeResponse(message);",
          "111:       response.error = Faye.Error.channelForbidden(message.channel);",
          "112:       response.successful = false;",
          "",
          "[Removed Lines]",
          "106:     var method = Faye.Channel.parse(message.channel)[1],",
          "109:     if (Faye.indexOf(this.META_METHODS, method) < 0) {",
          "",
          "[Added Lines]",
          "104:     var method = this._methodFor(message),",
          "107:     if (method === null) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:     }, this);",
          "121:   },",
          "123:   _advize: function(response, connectionType) {",
          "124:     if (Faye.indexOf([Faye.Channel.HANDSHAKE, Faye.Channel.CONNECT], response.channel) < 0)",
          "125:       return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:   _methodFor: function(message) {",
          "122:     var channel = message.channel;",
          "124:     if (channel === Faye.Channel.HANDSHAKE)   return 'handshake';",
          "125:     if (channel === Faye.Channel.CONNECT)     return 'connect';",
          "126:     if (channel === Faye.Channel.SUBSCRIBE)   return 'subscribe';",
          "127:     if (channel === Faye.Channel.UNSUBSCRIBE) return 'unsubscribe';",
          "128:     if (channel === Faye.Channel.DISCONNECT)  return 'disconnect';",
          "130:     return null;",
          "131:   },",
          "",
          "---------------"
        ],
        "lib/faye/protocol/server.rb||lib/faye/protocol/server.rb": [
          "File: lib/faye/protocol/server.rb -> lib/faye/protocol/server.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     include Logging",
          "7:     include Extensible",
          "11:     attr_reader :engine",
          "13:     def initialize(options = {})",
          "",
          "[Removed Lines]",
          "9:     META_METHODS = %w[handshake connect disconnect subscribe unsubscribe]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     end",
          "105:     def handle_meta(message, local, &callback)",
          "109:         response = make_response(message)",
          "110:         response['error'] = Faye::Error.channel_forbidden(message['channel'])",
          "111:         response['successful'] = false",
          "",
          "[Removed Lines]",
          "106:       method = Channel.parse(message['channel'])[1]",
          "108:       unless META_METHODS.include?(method)",
          "",
          "[Added Lines]",
          "104:       method = method_for(message)",
          "106:       unless method",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:       end",
          "120:     end",
          "122:     def advize(response, connection_type)",
          "123:       return unless [Channel::HANDSHAKE, Channel::CONNECT].include?(response['channel'])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:     def method_for(message)",
          "121:       case message['channel']",
          "122:       when Channel::HANDSHAKE   then :handshake",
          "123:       when Channel::CONNECT     then :connect",
          "124:       when Channel::SUBSCRIBE   then :subscribe",
          "125:       when Channel::UNSUBSCRIBE then :unsubscribe",
          "126:       when Channel::DISCONNECT  then :disconnect",
          "127:       end",
          "128:     end",
          "",
          "---------------"
        ],
        "spec/javascript/server/extensions_spec.js||spec/javascript/server/extensions_spec.js": [
          "File: spec/javascript/server/extensions_spec.js -> spec/javascript/server/extensions_spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     }})",
          "32:   }})",
          "34:   describe(\"with an outgoing extension installed\", function() { with(this) {",
          "35:     before(function() { with(this) {",
          "36:       var extension = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:   describe(\"with subscription auth installed\", function() { with(this) {",
          "35:     before(function() { with(this) {",
          "36:       var extension = {",
          "37:         incoming: function(message, callback) {",
          "38:           if (message.channel === \"/meta/subscribe\" && !message.auth) {",
          "39:             message.error = \"Invalid auth\"",
          "40:           }",
          "41:           callback(message)",
          "42:         }",
          "43:       }",
          "44:       server.addExtension(extension)",
          "45:     }})",
          "47:     it(\"does not subscribe using the intended channel\", function() { with(this) {",
          "48:       var message = {",
          "49:         channel: \"/meta/subscribe\",",
          "50:         clientId: \"fakeclientid\",",
          "51:         subscription: \"/foo\"",
          "52:       }",
          "53:       stub(engine, \"clientExists\").yields([true])",
          "54:       expect(engine, \"subscribe\").exactly(0)",
          "55:       server.process(message, false, function() {})",
          "56:     }})",
          "58:     it(\"does not subscribe using an extended channel\", function() { with(this) {",
          "59:       var message = {",
          "60:         channel: \"/meta/subscribe/x\",",
          "61:         clientId: \"fakeclientid\",",
          "62:         subscription: \"/foo\"",
          "63:       }",
          "64:       stub(engine, \"clientExists\").yields([true])",
          "65:       expect(engine, \"subscribe\").exactly(0)",
          "66:       server.process(message, false, function() {})",
          "67:     }})",
          "68:   }})",
          "",
          "---------------"
        ],
        "spec/ruby/server/extensions_spec.rb||spec/ruby/server/extensions_spec.rb": [
          "File: spec/ruby/server/extensions_spec.rb -> spec/ruby/server/extensions_spec.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     end",
          "41:   end",
          "43:   describe \"with an outgoing extension installed\" do",
          "44:     before do",
          "45:       extension = Class.new do",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:   describe \"with subscription auth installed\" do",
          "44:     before do",
          "45:       extension = Class.new do",
          "46:         def incoming(message, callback)",
          "47:           if message[\"channel\"] == \"/meta/subscribe\" and !message[\"auth\"]",
          "48:             message[\"error\"] = \"Invalid auth\"",
          "49:           end",
          "50:           callback.call(message)",
          "51:         end",
          "52:       end",
          "53:       server.add_extension(extension.new)",
          "54:     end",
          "56:     it \"does not subscribe using the intended channel\" do",
          "57:       message = {",
          "58:         \"channel\" => \"/meta/subscribe\",",
          "59:         \"clientId\" => \"fakeclientid\",",
          "60:         \"subscription\" => \"/foo\"",
          "61:       }",
          "62:       engine.stub(:client_exists).and_yield(true)",
          "63:       engine.should_not_receive(:subscribe)",
          "64:       server.process(message, false) {}",
          "65:     end",
          "67:     it \"does not subscribe using an extended channel\" do",
          "68:       message = {",
          "69:         \"channel\" => \"/meta/subscribe/x\",",
          "70:         \"clientId\" => \"fakeclientid\",",
          "71:         \"subscription\" => \"/foo\"",
          "72:       }",
          "73:       engine.stub(:client_exists).and_yield(true)",
          "74:       engine.should_not_receive(:subscribe)",
          "75:       server.process(message, false) {}",
          "76:     end",
          "77:   end",
          "",
          "---------------"
        ]
      }
    }
  ]
}