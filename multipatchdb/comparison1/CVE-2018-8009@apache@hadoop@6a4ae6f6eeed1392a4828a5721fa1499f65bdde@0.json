{
  "cve_id": "CVE-2018-8009",
  "cve_desc": "Apache Hadoop 3.1.0, 3.0.0-alpha to 3.0.2, 2.9.0 to 2.9.1, 2.8.0 to 2.8.4, 2.0.0-alpha to 2.7.6, 0.23.0 to 0.23.11 is exploitable via the zip slip vulnerability in places that accept a zip file.",
  "repo": "apache/hadoop",
  "patch_hash": "6a4ae6f6eeed1392a4828a5721fa1499f65bdde4",
  "patch_info": {
    "commit_hash": "6a4ae6f6eeed1392a4828a5721fa1499f65bdde4",
    "repo": "apache/hadoop",
    "commit_url": "https://github.com/apache/hadoop/commit/6a4ae6f6eeed1392a4828a5721fa1499f65bdde",
    "files": [
      "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
    ],
    "message": "Additional check when unpacking archives. Contributed by Wilfred Spiegelenburg.\n\n(cherry picked from commit 65e55097da2bb3f2fbdf9ba1946da25fe58bec98)",
    "before_after_code_files": [
      "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
    ]
  },
  "patch_diff": {
    "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java": [
      "File: hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java -> hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "109:       throws IOException {",
      "110:     try (JarFile jar = new JarFile(jarFile)) {",
      "111:       int numOfFailedLastModifiedSet = 0;",
      "112:       Enumeration<JarEntry> entries = jar.entries();",
      "113:       while (entries.hasMoreElements()) {",
      "114:         final JarEntry entry = entries.nextElement();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "112:       String targetDirPath = toDir.getCanonicalPath() + File.separator;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:           try (InputStream in = jar.getInputStream(entry)) {",
      "118:             File file = new File(toDir, entry.getName());",
      "119:             ensureDirectory(file.getParentFile());",
      "120:             try (OutputStream out = new FileOutputStream(file)) {",
      "121:               IOUtils.copyBytes(in, out, BUFFER_SIZE);",
      "122:             }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:             if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
      "122:               throw new IOException(\"expanding \" + entry.getName()",
      "123:                   + \" would create file outside of \" + toDir);",
      "124:             }",
      "",
      "---------------"
    ],
    "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java": [
      "File: hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java -> hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: import static org.junit.Assert.assertEquals;",
      "21: import static org.junit.Assert.assertFalse;",
      "22: import static org.junit.Assert.assertTrue;",
      "23: import static org.mockito.Mockito.spy;",
      "24: import static org.mockito.Mockito.when;",
      "26: import java.io.File;",
      "27: import java.io.FileOutputStream;",
      "28: import java.io.IOException;",
      "29: import java.util.jar.JarOutputStream;",
      "30: import java.util.regex.Pattern;",
      "31: import java.util.zip.ZipEntry;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: import static org.junit.Assert.fail;",
      "30: import java.nio.charset.StandardCharsets;",
      "31: import java.util.jar.JarEntry;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "165:     runJar.run(args);",
      "167:   }",
      "168: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:   @Test",
      "173:   public void testUnJar2() throws IOException {",
      "175:     File jarFile = new File(TEST_ROOT_DIR, TEST_JAR_NAME);",
      "176:     JarOutputStream jstream =",
      "177:         new JarOutputStream(new FileOutputStream(jarFile));",
      "178:     JarEntry je = new JarEntry(\"META-INF/MANIFEST.MF\");",
      "179:     byte[] data = \"Manifest-Version: 1.0\\nCreated-By: 1.8.0_1 (Manual)\"",
      "180:         .getBytes(StandardCharsets.UTF_8);",
      "181:     je.setSize(data.length);",
      "182:     jstream.putNextEntry(je);",
      "183:     jstream.write(data);",
      "184:     jstream.closeEntry();",
      "185:     je = new JarEntry(\"../outside.path\");",
      "186:     data = \"any data here\".getBytes(StandardCharsets.UTF_8);",
      "187:     je.setSize(data.length);",
      "188:     jstream.putNextEntry(je);",
      "189:     jstream.write(data);",
      "190:     jstream.closeEntry();",
      "191:     jstream.close();",
      "193:     File unjarDir = getUnjarDir(\"unjar-path\");",
      "196:     try {",
      "197:       RunJar.unJar(jarFile, unjarDir);",
      "198:       fail(\"unJar should throw IOException.\");",
      "199:     } catch (IOException e) {",
      "200:       GenericTestUtils.assertExceptionContains(",
      "201:           \"would create file outside of\", e);",
      "202:     }",
      "203:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "65e55097da2bb3f2fbdf9ba1946da25fe58bec98",
      "candidate_info": {
        "commit_hash": "65e55097da2bb3f2fbdf9ba1946da25fe58bec98",
        "repo": "apache/hadoop",
        "commit_url": "https://github.com/apache/hadoop/commit/65e55097da2bb3f2fbdf9ba1946da25fe58bec9",
        "files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
        ],
        "message": "Additional check when unpacking archives. Contributed by Wilfred Spiegelenburg.",
        "before_after_code_files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
          ],
          "candidate": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
          ]
        }
      },
      "candidate_diff": {
        "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java": [
          "File: hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java -> hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:       throws IOException {",
          "110:     try (JarFile jar = new JarFile(jarFile)) {",
          "111:       int numOfFailedLastModifiedSet = 0;",
          "112:       Enumeration<JarEntry> entries = jar.entries();",
          "113:       while (entries.hasMoreElements()) {",
          "114:         final JarEntry entry = entries.nextElement();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:       String targetDirPath = toDir.getCanonicalPath() + File.separator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:           try (InputStream in = jar.getInputStream(entry)) {",
          "118:             File file = new File(toDir, entry.getName());",
          "119:             ensureDirectory(file.getParentFile());",
          "120:             try (OutputStream out = new FileOutputStream(file)) {",
          "121:               IOUtils.copyBytes(in, out, BUFFER_SIZE);",
          "122:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:             if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
          "122:               throw new IOException(\"expanding \" + entry.getName()",
          "123:                   + \" would create file outside of \" + toDir);",
          "124:             }",
          "",
          "---------------"
        ],
        "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java": [
          "File: hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java -> hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import static org.junit.Assert.assertEquals;",
          "21: import static org.junit.Assert.assertFalse;",
          "22: import static org.junit.Assert.assertTrue;",
          "23: import static org.mockito.Mockito.spy;",
          "24: import static org.mockito.Mockito.when;",
          "26: import java.io.File;",
          "27: import java.io.FileOutputStream;",
          "28: import java.io.IOException;",
          "29: import java.util.jar.JarOutputStream;",
          "30: import java.util.regex.Pattern;",
          "31: import java.util.zip.ZipEntry;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import static org.junit.Assert.fail;",
          "30: import java.nio.charset.StandardCharsets;",
          "31: import java.util.jar.JarEntry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     runJar.run(args);",
          "167:   }",
          "168: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:   @Test",
          "173:   public void testUnJar2() throws IOException {",
          "175:     File jarFile = new File(TEST_ROOT_DIR, TEST_JAR_NAME);",
          "176:     JarOutputStream jstream =",
          "177:         new JarOutputStream(new FileOutputStream(jarFile));",
          "178:     JarEntry je = new JarEntry(\"META-INF/MANIFEST.MF\");",
          "179:     byte[] data = \"Manifest-Version: 1.0\\nCreated-By: 1.8.0_1 (Manual)\"",
          "180:         .getBytes(StandardCharsets.UTF_8);",
          "181:     je.setSize(data.length);",
          "182:     jstream.putNextEntry(je);",
          "183:     jstream.write(data);",
          "184:     jstream.closeEntry();",
          "185:     je = new JarEntry(\"../outside.path\");",
          "186:     data = \"any data here\".getBytes(StandardCharsets.UTF_8);",
          "187:     je.setSize(data.length);",
          "188:     jstream.putNextEntry(je);",
          "189:     jstream.write(data);",
          "190:     jstream.closeEntry();",
          "191:     jstream.close();",
          "193:     File unjarDir = getUnjarDir(\"unjar-path\");",
          "196:     try {",
          "197:       RunJar.unJar(jarFile, unjarDir);",
          "198:       fail(\"unJar should throw IOException.\");",
          "199:     } catch (IOException e) {",
          "200:       GenericTestUtils.assertExceptionContains(",
          "201:           \"would create file outside of\", e);",
          "202:     }",
          "203:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d7d192e4799b51931e55217e02baec14d49607b",
      "candidate_info": {
        "commit_hash": "6d7d192e4799b51931e55217e02baec14d49607b",
        "repo": "apache/hadoop",
        "commit_url": "https://github.com/apache/hadoop/commit/6d7d192e4799b51931e55217e02baec14d49607b",
        "files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
        ],
        "message": "Additional check when unpacking archives. Contributed by Wilfred Spiegelenburg.\n\n(cherry picked from commit 65e55097da2bb3f2fbdf9ba1946da25fe58bec98)",
        "before_after_code_files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_cherry_pick": 1,
        "olp_code_files": {
          "patch": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
          ],
          "candidate": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
          ]
        }
      },
      "candidate_diff": {
        "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java": [
          "File: hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java -> hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:       throws IOException {",
          "110:     try (JarFile jar = new JarFile(jarFile)) {",
          "111:       int numOfFailedLastModifiedSet = 0;",
          "112:       Enumeration<JarEntry> entries = jar.entries();",
          "113:       while (entries.hasMoreElements()) {",
          "114:         final JarEntry entry = entries.nextElement();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:       String targetDirPath = toDir.getCanonicalPath() + File.separator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:           try (InputStream in = jar.getInputStream(entry)) {",
          "118:             File file = new File(toDir, entry.getName());",
          "119:             ensureDirectory(file.getParentFile());",
          "120:             try (OutputStream out = new FileOutputStream(file)) {",
          "121:               IOUtils.copyBytes(in, out, BUFFER_SIZE);",
          "122:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:             if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
          "122:               throw new IOException(\"expanding \" + entry.getName()",
          "123:                   + \" would create file outside of \" + toDir);",
          "124:             }",
          "",
          "---------------"
        ],
        "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java": [
          "File: hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java -> hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import static org.junit.Assert.assertEquals;",
          "21: import static org.junit.Assert.assertFalse;",
          "22: import static org.junit.Assert.assertTrue;",
          "23: import static org.mockito.Mockito.spy;",
          "24: import static org.mockito.Mockito.when;",
          "26: import java.io.File;",
          "27: import java.io.FileOutputStream;",
          "28: import java.io.IOException;",
          "29: import java.util.jar.JarOutputStream;",
          "30: import java.util.regex.Pattern;",
          "31: import java.util.zip.ZipEntry;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import static org.junit.Assert.fail;",
          "30: import java.nio.charset.StandardCharsets;",
          "31: import java.util.jar.JarEntry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     runJar.run(args);",
          "167:   }",
          "168: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:   @Test",
          "173:   public void testUnJar2() throws IOException {",
          "175:     File jarFile = new File(TEST_ROOT_DIR, TEST_JAR_NAME);",
          "176:     JarOutputStream jstream =",
          "177:         new JarOutputStream(new FileOutputStream(jarFile));",
          "178:     JarEntry je = new JarEntry(\"META-INF/MANIFEST.MF\");",
          "179:     byte[] data = \"Manifest-Version: 1.0\\nCreated-By: 1.8.0_1 (Manual)\"",
          "180:         .getBytes(StandardCharsets.UTF_8);",
          "181:     je.setSize(data.length);",
          "182:     jstream.putNextEntry(je);",
          "183:     jstream.write(data);",
          "184:     jstream.closeEntry();",
          "185:     je = new JarEntry(\"../outside.path\");",
          "186:     data = \"any data here\".getBytes(StandardCharsets.UTF_8);",
          "187:     je.setSize(data.length);",
          "188:     jstream.putNextEntry(je);",
          "189:     jstream.write(data);",
          "190:     jstream.closeEntry();",
          "191:     jstream.close();",
          "193:     File unjarDir = getUnjarDir(\"unjar-path\");",
          "196:     try {",
          "197:       RunJar.unJar(jarFile, unjarDir);",
          "198:       fail(\"unJar should throw IOException.\");",
          "199:     } catch (IOException e) {",
          "200:       GenericTestUtils.assertExceptionContains(",
          "201:           \"would create file outside of\", e);",
          "202:     }",
          "203:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3236a9680709de7a95ffbc11b20e1bdc95a8605",
      "candidate_info": {
        "commit_hash": "e3236a9680709de7a95ffbc11b20e1bdc95a8605",
        "repo": "apache/hadoop",
        "commit_url": "https://github.com/apache/hadoop/commit/e3236a9680709de7a95ffbc11b20e1bdc95a8605",
        "files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
        ],
        "message": "Additional check when unpacking archives. Contributed by Wilfred Spiegelenburg.",
        "before_after_code_files": [
          "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
          ],
          "candidate": [
            "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
            "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java"
          ]
        }
      },
      "candidate_diff": {
        "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java||hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java": [
          "File: hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java -> hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:       throws IOException {",
          "118:     try (JarInputStream jar = new JarInputStream(inputStream)) {",
          "119:       int numOfFailedLastModifiedSet = 0;",
          "120:       for (JarEntry entry = jar.getNextJarEntry();",
          "121:            entry != null;",
          "122:            entry = jar.getNextJarEntry()) {",
          "123:         if (!entry.isDirectory() &&",
          "124:             unpackRegex.matcher(entry.getName()).matches()) {",
          "125:           File file = new File(toDir, entry.getName());",
          "126:           ensureDirectory(file.getParentFile());",
          "127:           try (OutputStream out = new FileOutputStream(file)) {",
          "128:             IOUtils.copyBytes(jar, out, BUFFER_SIZE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:       String targetDirPath = toDir.getCanonicalPath() + File.separator;",
          "127:           if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
          "128:             throw new IOException(\"expanding \" + entry.getName()",
          "129:                 + \" would create file outside of \" + toDir);",
          "130:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:       throws IOException {",
          "183:     try (JarFile jar = new JarFile(jarFile)) {",
          "184:       int numOfFailedLastModifiedSet = 0;",
          "185:       Enumeration<JarEntry> entries = jar.entries();",
          "186:       while (entries.hasMoreElements()) {",
          "187:         final JarEntry entry = entries.nextElement();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:       String targetDirPath = toDir.getCanonicalPath() + File.separator;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:             unpackRegex.matcher(entry.getName()).matches()) {",
          "190:           try (InputStream in = jar.getInputStream(entry)) {",
          "191:             File file = new File(toDir, entry.getName());",
          "192:             ensureDirectory(file.getParentFile());",
          "193:             try (OutputStream out = new FileOutputStream(file)) {",
          "194:               IOUtils.copyBytes(in, out, BUFFER_SIZE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:             if (!file.getCanonicalPath().startsWith(targetDirPath)) {",
          "199:               throw new IOException(\"expanding \" + entry.getName()",
          "200:                   + \" would create file outside of \" + toDir);",
          "201:             }",
          "",
          "---------------"
        ],
        "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java||hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java": [
          "File: hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java -> hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestRunJar.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.junit.Assert.assertEquals;",
          "22: import static org.junit.Assert.assertFalse;",
          "23: import static org.junit.Assert.assertTrue;",
          "24: import static org.mockito.Matchers.any;",
          "25: import static org.mockito.Mockito.spy;",
          "26: import static org.mockito.Mockito.times;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import static org.junit.Assert.fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import java.io.FileOutputStream;",
          "33: import java.io.IOException;",
          "34: import java.io.InputStream;",
          "35: import java.util.Random;",
          "36: import java.util.jar.JarEntry;",
          "37: import java.util.jar.JarOutputStream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256:     verify(runJar, times(0)).unJar(any(File.class), any(File.class));",
          "257:   }",
          "258: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:   @Test",
          "262:   public void testUnJar2() throws IOException {",
          "264:     File jarFile = new File(TEST_ROOT_DIR, TEST_JAR_NAME);",
          "265:     JarOutputStream jstream =",
          "266:         new JarOutputStream(new FileOutputStream(jarFile));",
          "267:     JarEntry je = new JarEntry(\"META-INF/MANIFEST.MF\");",
          "268:     byte[] data = \"Manifest-Version: 1.0\\nCreated-By: 1.8.0_1 (Manual)\"",
          "269:         .getBytes(StandardCharsets.UTF_8);",
          "270:     je.setSize(data.length);",
          "271:     jstream.putNextEntry(je);",
          "272:     jstream.write(data);",
          "273:     jstream.closeEntry();",
          "274:     je = new JarEntry(\"../outside.path\");",
          "275:     data = \"any data here\".getBytes(StandardCharsets.UTF_8);",
          "276:     je.setSize(data.length);",
          "277:     jstream.putNextEntry(je);",
          "278:     jstream.write(data);",
          "279:     jstream.closeEntry();",
          "280:     jstream.close();",
          "282:     File unjarDir = getUnjarDir(\"unjar-path\");",
          "285:     try {",
          "286:       RunJar.unJar(jarFile, unjarDir, MATCH_ANY);",
          "287:       fail(\"unJar should throw IOException.\");",
          "288:     } catch (IOException e) {",
          "289:       GenericTestUtils.assertExceptionContains(",
          "290:           \"would create file outside of\", e);",
          "291:     }",
          "292:     try {",
          "293:       RunJar.unJar(new FileInputStream(jarFile), unjarDir, MATCH_ANY);",
          "294:       fail(\"unJar should throw IOException.\");",
          "295:     } catch (IOException e) {",
          "296:       GenericTestUtils.assertExceptionContains(",
          "297:           \"would create file outside of\", e);",
          "298:     }",
          "299:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}