{
  "cve_id": "CVE-2017-1000248",
  "cve_desc": "Redis-store <=v1.3.0 allows unsafe objects to be loaded from redis",
  "repo": "redis-store/redis-store",
  "patch_hash": "e0c1398d54a9661c8c70267c3a925ba6b192142e",
  "patch_info": {
    "commit_hash": "e0c1398d54a9661c8c70267c3a925ba6b192142e",
    "repo": "redis-store/redis-store",
    "commit_url": "https://github.com/redis-store/redis-store/commit/e0c1398d54a9661c8c70267c3a925ba6b192142e",
    "files": [
      "lib/redis-store.rb",
      "lib/redis/store.rb",
      "lib/redis/store/factory.rb",
      "lib/redis/store/namespace.rb",
      "lib/redis/store/serialization.rb",
      "test/redis/store/factory_test.rb",
      "test/redis/store/namespace_test.rb",
      "test/redis/store/serialization_test.rb"
    ],
    "message": "Replace marshalling with pluggable serializers\n\nThis is in response to a vulnerability warning we received on Friday,\nAugust 11th, 2017. While most users will not be affected by this\nchange, we recommend that developers of new applications use a different\nserializer other than `Marshal`. This, along with the removal of the\n`:marshalling` option, will enforce \"sane defaults\" in terms of securely\nserializing/de-serializing data.\n\n- Add `:serializer` option and deprecate `:marshalling`. Although you\n  will still be able to enable/disable serialization with Marshal using\n  `:marshalling` in the 1.x series, this will be removed by 2.0.\n\n- Rename `Redis::Store::Marshalling` to `Redis::Store::Serialization` to\n  reflect its new purpose.\n\nFixes #289",
    "before_after_code_files": [
      "lib/redis-store.rb||lib/redis-store.rb",
      "lib/redis/store.rb||lib/redis/store.rb",
      "lib/redis/store/factory.rb||lib/redis/store/factory.rb",
      "lib/redis/store/namespace.rb||lib/redis/store/namespace.rb",
      "lib/redis/store/marshalling.rb||lib/redis/store/serialization.rb",
      "test/redis/store/factory_test.rb||test/redis/store/factory_test.rb",
      "test/redis/store/namespace_test.rb||test/redis/store/namespace_test.rb",
      "test/redis/store/marshalling_test.rb||test/redis/store/serialization_test.rb"
    ]
  },
  "patch_diff": {
    "lib/redis-store.rb||lib/redis-store.rb": [
      "File: lib/redis-store.rb -> lib/redis-store.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: require 'redis/store'",
      "",
      "[Removed Lines]",
      "1: require 'redis'",
      "3: require 'redis/store/factory'",
      "4: require 'redis/distributed_store'",
      "5: require 'redis/store/namespace'",
      "6: require 'redis/store/marshalling'",
      "7: require 'redis/store/version'",
      "8: require 'redis/store/redis_version'",
      "10: class Redis",
      "11:   class Store < self",
      "12:   end",
      "13: end",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "lib/redis/store.rb||lib/redis/store.rb": [
      "File: lib/redis/store.rb -> lib/redis/store.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: require 'redis/store/ttl'",
      "2: require 'redis/store/interface'",
      "3: require 'redis/store/redis_version'",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: require 'redis'",
      "2: require 'redis/store/factory'",
      "3: require 'redis/distributed_store'",
      "4: require 'redis/store/namespace'",
      "5: require 'redis/store/serialization'",
      "6: require 'redis/store/version'",
      "7: require 'redis/store/redis_version'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "9:     def initialize(options = { })",
      "10:       super",
      "11:       _extend_marshalling options",
      "12:       _extend_namespace   options",
      "13:     end",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "19:       unless options[:marshalling].nil?",
      "20:         puts %(",
      "21:           DEPRECATED: You are passing the :marshalling option, which has been",
      "22:           replaced with `serializer: Marshal` to support pluggable serialization",
      "23:           backends. To disable serialization (much like disabling marshalling),",
      "24:           pass `serializer: nil` in your configuration.",
      "26:           The :marshalling option will be removed for redis-store 2.0.",
      "27:         )",
      "28:       end",
      "30:       @serializer = options.key?(:serializer) ? options[:serializer] : Marshal",
      "32:       unless options[:marshalling].nil?",
      "33:         @serializer = options[:marshalling] ? Marshal : nil",
      "34:       end",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "24:     private",
      "25:       def _extend_marshalling(options)",
      "28:       end",
      "30:       def _extend_namespace(options)",
      "",
      "[Removed Lines]",
      "26:         @marshalling = !(options[:marshalling] === false) # HACK - TODO delegate to Factory",
      "27:         extend Marshalling if @marshalling",
      "",
      "[Added Lines]",
      "51:         extend Serialization unless @serializer.nil?",
      "",
      "---------------"
    ],
    "lib/redis/store/factory.rb||lib/redis/store/factory.rb": [
      "File: lib/redis/store/factory.rb -> lib/redis/store/factory.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "50:         if options.key?(:key_prefix) && !options.key?(:namespace)",
      "51:           options[:namespace] = options.delete(:key_prefix) # RailsSessionStore",
      "52:         end",
      "54:         options",
      "55:       end",
      "",
      "[Removed Lines]",
      "53:         options[:raw] = !options[:marshalling]",
      "",
      "[Added Lines]",
      "53:         options[:raw] = case",
      "54:                         when options.key?(:serializer)",
      "55:                           options[:serializer].nil?",
      "56:                         when options.key?(:marshalling)",
      "57:                           !options[:marshalling]",
      "58:                         else",
      "59:                           false",
      "60:                         end",
      "",
      "---------------"
    ],
    "lib/redis/store/namespace.rb||lib/redis/store/namespace.rb": [
      "File: lib/redis/store/namespace.rb -> lib/redis/store/namespace.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:       def mget(*keys)",
      "47:         options = (keys.pop if keys.last.is_a? Hash) || {}",
      "48:         if keys.any?",
      "51:             super(*keys.map {|key| interpolate(key) }, options)",
      "52:           else",
      "53:             super(*keys.map {|key| interpolate(key) })",
      "",
      "[Removed Lines]",
      "49:           # Marshalling gets extended before Namespace does, so we need to pass options further",
      "50:           if singleton_class.ancestors.include? Marshalling",
      "",
      "[Added Lines]",
      "49:           # Serialization gets extended before Namespace does, so we need to pass options further",
      "50:           if singleton_class.ancestors.include? Serialization",
      "",
      "---------------"
    ],
    "lib/redis/store/marshalling.rb||lib/redis/store/serialization.rb": [
      "File: lib/redis/store/marshalling.rb -> lib/redis/store/serialization.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: class Redis",
      "2:   class Store < self",
      "4:       def set(key, value, options = nil)",
      "5:         _marshal(value, options) { |v| super encode(key), encode(v), options }",
      "6:       end",
      "",
      "[Removed Lines]",
      "3:     module Marshalling",
      "",
      "[Added Lines]",
      "3:     module Serialization",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "37:       private",
      "38:         def _marshal(val, options)",
      "40:         end",
      "42:         def _unmarshal(val, options)",
      "44:         end",
      "46:         def marshal?(options)",
      "",
      "[Removed Lines]",
      "39:           yield marshal?(options) ? Marshal.dump(val) : val",
      "43:           unmarshal?(val, options) ? Marshal.load(val) : val",
      "",
      "[Added Lines]",
      "39:           yield marshal?(options) ? @serializer.dump(val) : val",
      "43:           unmarshal?(val, options) ? @serializer.load(val) : val",
      "",
      "---------------"
    ],
    "test/redis/store/factory_test.rb||test/redis/store/factory_test.rb": [
      "File: test/redis/store/factory_test.rb -> test/redis/store/factory_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: require 'test_helper'",
      "3: describe \"Redis::Store::Factory\" do",
      "4:   describe \".create\" do",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: require 'json'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "51:         assert_nil(store.instance_variable_get(:@client).password)",
      "52:       end",
      "57:         store.instance_variable_get(:@options)[:raw].must_equal(true)",
      "58:       end",
      "60:       it \"should instantiate a Redis::DistributedStore store\" do",
      "61:         store = Redis::Store::Factory.create(",
      "62:           {:host => \"localhost\", :port => 6379},",
      "",
      "[Removed Lines]",
      "54:       it \"allows/disable marshalling\" do",
      "55:         store = Redis::Store::Factory.create :marshalling => false",
      "56:         store.instance_variable_get(:@marshalling).must_equal(false)",
      "",
      "[Added Lines]",
      "55:       it \"disables serialization\" do",
      "56:         store = Redis::Store::Factory.create :serializer => nil",
      "57:         store.instance_variable_get(:@serializer).must_be_nil",
      "61:       it \"configures pluggable serialization backend\" do",
      "62:         store = Redis::Store::Factory.create :serializer => JSON",
      "63:         store.instance_variable_get(:@serializer).must_equal(JSON)",
      "64:         store.instance_variable_get(:@options)[:raw].must_equal(false)",
      "65:       end",
      "67:       describe 'with stdout disabled' do",
      "68:         before do",
      "69:           @original_stderr = $stderr",
      "70:           @original_stdout = $stdout",
      "72:           $stderr = Tempfile.new('stderr')",
      "73:           $stdout = Tempfile.new('stdout')",
      "74:         end",
      "76:         it \"disables marshalling and provides deprecation warning\" do",
      "77:           store = Redis::Store::Factory.create :marshalling => false",
      "78:           store.instance_variable_get(:@serializer).must_be_nil",
      "79:           store.instance_variable_get(:@options)[:raw].must_equal(true)",
      "80:         end",
      "82:         it \"enables marshalling but provides warning to use :serializer instead\" do",
      "83:           store = Redis::Store::Factory.create :marshalling => true",
      "84:           store.instance_variable_get(:@serializer).must_equal(Marshal)",
      "85:           store.instance_variable_get(:@options)[:raw].must_equal(false)",
      "86:         end",
      "88:         after do",
      "89:           $stderr = @original_stderr",
      "90:           $stdout = @original_stdout",
      "91:         end",
      "92:       end",
      "",
      "---------------"
    ],
    "test/redis/store/namespace_test.rb||test/redis/store/namespace_test.rb": [
      "File: test/redis/store/namespace_test.rb -> test/redis/store/namespace_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: describe \"Redis::Store::Namespace\" do",
      "4:   def setup",
      "5:     @namespace = \"theplaylist\"",
      "7:     @client = @store.instance_variable_get(:@client)",
      "8:     @rabbit = \"bunny\"",
      "9:     @default_store = Redis::Store.new",
      "",
      "[Removed Lines]",
      "6:     @store  = Redis::Store.new :namespace => @namespace, :marshalling => false # TODO remove mashalling option",
      "",
      "[Added Lines]",
      "6:     @store  = Redis::Store.new :namespace => @namespace, :serializer => nil",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "90:   end",
      "92:   describe 'method calls' do",
      "94:     let(:client){store.instance_variable_get(:@client)}",
      "96:     it \"should namespace get\" do",
      "",
      "[Removed Lines]",
      "93:     let(:store){Redis::Store.new :namespace => @namespace, :marshalling => false}",
      "",
      "[Added Lines]",
      "93:     let(:store){Redis::Store.new :namespace => @namespace, :serializer => nil}",
      "",
      "---------------"
    ],
    "test/redis/store/marshalling_test.rb||test/redis/store/serialization_test.rb": [
      "File: test/redis/store/marshalling_test.rb -> test/redis/store/serialization_test.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: require 'test_helper'",
      "4:   def setup",
      "6:     @rabbit = OpenStruct.new :name => \"bunny\"",
      "7:     @white_rabbit = OpenStruct.new :color => \"white\"",
      "8:     @store.set \"rabbit\", @rabbit",
      "",
      "[Removed Lines]",
      "3: describe \"Redis::Marshalling\" do",
      "5:     @store = Redis::Store.new :marshalling => true",
      "",
      "[Added Lines]",
      "3: describe \"Redis::Serialization\" do",
      "5:     @store = Redis::Store.new serializer: Marshal",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "65f8c6c3979db16ec546f765bc8f3b48a2bd908d",
      "candidate_info": {
        "commit_hash": "65f8c6c3979db16ec546f765bc8f3b48a2bd908d",
        "repo": "redis-store/redis-store",
        "commit_url": "https://github.com/redis-store/redis-store/commit/65f8c6c3979db16ec546f765bc8f3b48a2bd908d",
        "files": [
          ".rubocop.yml",
          ".travis.yml",
          "lib/redis/distributed_store.rb",
          "lib/redis/store.rb",
          "lib/redis/store/factory.rb",
          "lib/redis/store/namespace.rb",
          "lib/redis/store/redis_version.rb",
          "redis-store.gemspec",
          "test/redis/distributed_store_test.rb",
          "test/redis/store/factory_test.rb",
          "test/redis/store/namespace_test.rb",
          "test/redis/store/redis_version_test.rb",
          "test/redis/store/serialization_test.rb",
          "test/redis/store/ttl_test.rb",
          "test/test_helper.rb"
        ],
        "message": "Run rubocop autocorrect on all files",
        "before_after_code_files": [
          "lib/redis/distributed_store.rb||lib/redis/distributed_store.rb",
          "lib/redis/store.rb||lib/redis/store.rb",
          "lib/redis/store/factory.rb||lib/redis/store/factory.rb",
          "lib/redis/store/namespace.rb||lib/redis/store/namespace.rb",
          "lib/redis/store/redis_version.rb||lib/redis/store/redis_version.rb",
          "redis-store.gemspec||redis-store.gemspec",
          "test/redis/distributed_store_test.rb||test/redis/distributed_store_test.rb",
          "test/redis/store/factory_test.rb||test/redis/store/factory_test.rb",
          "test/redis/store/namespace_test.rb||test/redis/store/namespace_test.rb",
          "test/redis/store/redis_version_test.rb||test/redis/store/redis_version_test.rb",
          "test/redis/store/serialization_test.rb||test/redis/store/serialization_test.rb",
          "test/redis/store/ttl_test.rb||test/redis/store/ttl_test.rb",
          "test/test_helper.rb||test/test_helper.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/redis/store.rb||lib/redis/store.rb",
            "lib/redis/store/factory.rb||lib/redis/store/factory.rb",
            "lib/redis/store/namespace.rb||lib/redis/store/namespace.rb",
            "test/redis/store/factory_test.rb||test/redis/store/factory_test.rb",
            "test/redis/store/namespace_test.rb||test/redis/store/namespace_test.rb",
            "test/redis/store/marshalling_test.rb||test/redis/store/serialization_test.rb"
          ],
          "candidate": [
            "lib/redis/store.rb||lib/redis/store.rb",
            "lib/redis/store/factory.rb||lib/redis/store/factory.rb",
            "lib/redis/store/namespace.rb||lib/redis/store/namespace.rb",
            "test/redis/store/factory_test.rb||test/redis/store/factory_test.rb",
            "test/redis/store/namespace_test.rb||test/redis/store/namespace_test.rb",
            "test/redis/store/serialization_test.rb||test/redis/store/serialization_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/redis/distributed_store.rb||lib/redis/distributed_store.rb": [
          "File: lib/redis/distributed_store.rb -> lib/redis/distributed_store.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:     @@timeout = 5",
          "6:     attr_reader :ring",
          "9:       _extend_namespace options",
          "10:       @ring = options[:ring] || Redis::HashRing.new([], options[:replicas] || Redis::HashRing::POINTS_PER_SERVER)",
          "",
          "[Removed Lines]",
          "8:     def initialize(addresses, options = { })",
          "",
          "[Added Lines]",
          "8:     def initialize(addresses, options = {})",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19:     end",
          "21:     def reconnect",
          "23:     end",
          "25:     def set(key, value, options = nil)",
          "",
          "[Removed Lines]",
          "22:       nodes.each {|node| node.reconnect }",
          "",
          "[Added Lines]",
          "22:       nodes.each { |node| node.reconnect }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:       end",
          "59:       def _merge_options(address, options)",
          "62:           :namespace => options[:namespace]",
          "64:       end",
          "65:   end",
          "66: end",
          "",
          "[Removed Lines]",
          "60:         address.merge({",
          "61:           :timeout => options[:timeout] || @@timeout,",
          "63:         })",
          "",
          "[Added Lines]",
          "60:         address.merge(",
          "61:           :timeout => options[:timeout] || @@timeout,",
          "63:         )",
          "",
          "---------------"
        ],
        "lib/redis/store.rb||lib/redis/store.rb": [
          "File: lib/redis/store.rb -> lib/redis/store.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   class Store < self",
          "14:     include Ttl, Interface, RedisVersion",
          "17:       super",
          "19:       unless options[:marshalling].nil?",
          "",
          "[Removed Lines]",
          "16:     def initialize(options = { })",
          "",
          "[Added Lines]",
          "16:     def initialize(options = {})",
          "",
          "---------------"
        ],
        "lib/redis/store/factory.rb||lib/redis/store/factory.rb": [
          "File: lib/redis/store/factory.rb -> lib/redis/store/factory.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         if host_options?(options)",
          "42:           options",
          "43:         else",
          "45:         end",
          "46:       end",
          "",
          "[Removed Lines]",
          "44:           nil",
          "",
          "[Added Lines]",
          "43:           nil",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:                           !options[:marshalling]",
          "58:                         else",
          "59:                           false",
          "61:         options",
          "62:       end",
          "64:       def self.host_options?(options)",
          "66:       end",
          "68:       def self.extract_host_options_from_uri(uri)",
          "",
          "[Removed Lines]",
          "60:                         end",
          "65:         options.keys.any? {|n| [:host, :db, :port, :path].include?(n) }",
          "",
          "[Added Lines]",
          "59:         end",
          "64:         options.keys.any? { |n| [:host, :db, :port, :path].include?(n) }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:           options = { :path => uri.path }",
          "72:         else",
          "73:           _, db, namespace = if uri.path",
          "77:           options = {",
          "78:             :host     => uri.hostname,",
          "79:             :port     => uri.port || DEFAULT_PORT,",
          "81:           }",
          "83:           options[:db]        = db.to_i   if db",
          "",
          "[Removed Lines]",
          "74:                                uri.path.split(/\\//)",
          "75:                              end",
          "80:             :password => uri.password.nil? ? nil : CGI::unescape(uri.password.to_s)",
          "",
          "[Added Lines]",
          "73:             uri.path.split(/\\//)",
          "74:           end",
          "79:             :password => uri.password.nil? ? nil : CGI.unescape(uri.password.to_s)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:       private",
          "105:           end",
          "106:         end",
          "108:     end",
          "109:   end",
          "110: end",
          "",
          "[Removed Lines]",
          "98:       def extract_addresses_and_options(*options)",
          "99:         options.flatten.compact.each do |token|",
          "100:           resolved = self.class.resolve(token)",
          "101:           if resolved",
          "102:             @addresses << resolved",
          "103:           else",
          "104:             @options.merge!(self.class.normalize_key_names(token))",
          "107:       end",
          "",
          "[Added Lines]",
          "97:         def extract_addresses_and_options(*options)",
          "98:           options.flatten.compact.each do |token|",
          "99:             resolved = self.class.resolve(token)",
          "100:             if resolved",
          "101:               @addresses << resolved",
          "102:             else",
          "103:               @options.merge!(self.class.normalize_key_names(token))",
          "104:             end",
          "",
          "---------------"
        ],
        "lib/redis/store/namespace.rb||lib/redis/store/namespace.rb": [
          "File: lib/redis/store/namespace.rb -> lib/redis/store/namespace.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:       end",
          "38:       def keys(pattern = \"*\")",
          "40:       end",
          "42:       def del(*keys)",
          "44:       end",
          "46:       def watch(*keys)",
          "48:       end",
          "50:       def mget(*keys, &blk)",
          "",
          "[Removed Lines]",
          "39:         namespace(pattern) { |p| super(p).map{|key| strip_namespace(key) } }",
          "43:         super(*keys.map {|key| interpolate(key) }) if keys.any?",
          "47:         super(*keys.map {|key| interpolate(key) }) if keys.any?",
          "",
          "[Added Lines]",
          "39:         namespace(pattern) { |p| super(p).map { |key| strip_namespace(key) } }",
          "43:         super(*keys.map { |key| interpolate(key) }) if keys.any?",
          "47:         super(*keys.map { |key| interpolate(key) }) if keys.any?",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:         if keys.any?",
          "53:           # Serialization gets extended before Namespace does, so we need to pass options further",
          "54:           if singleton_class.ancestors.include? Serialization",
          "56:           else",
          "58:           end",
          "59:         end",
          "60:       end",
          "62:       def expire(key, ttl)",
          "64:       end",
          "66:       def to_s",
          "",
          "[Removed Lines]",
          "55:             super(*keys.map {|key| interpolate(key) }, options, &blk)",
          "57:             super(*keys.map {|key| interpolate(key) }, &blk)",
          "63:          namespace(key) { |k| super(k, ttl) }",
          "",
          "[Added Lines]",
          "55:             super(*keys.map { |key| interpolate(key) }, options, &blk)",
          "57:             super(*keys.map { |key| interpolate(key) }, &blk)",
          "63:         namespace(key) { |k| super(k, ttl) }",
          "",
          "---------------"
        ],
        "lib/redis/store/redis_version.rb||lib/redis/store/redis_version.rb": [
          "File: lib/redis/store/redis_version.rb -> lib/redis/store/redis_version.rb"
        ],
        "redis-store.gemspec||redis-store.gemspec": [
          "File: redis-store.gemspec -> redis-store.gemspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   s.files         = `git ls-files`.split(\"\\n\")",
          "17:   s.test_files    = `git ls-files -- {test,spec,features}/*`.split(\"\\n\")",
          "19:   s.require_paths = [\"lib\"]",
          "20:   s.license       = 'MIT'",
          "",
          "[Removed Lines]",
          "18:   s.executables   = `git ls-files -- bin/*`.split(\"\\n\").map{ |f| File.basename(f) }",
          "",
          "[Added Lines]",
          "19:   s.executables   = `git ls-files -- bin/*`.split(\"\\n\").map { |f| File.basename(f) }",
          "",
          "---------------"
        ],
        "test/redis/distributed_store_test.rb||test/redis/distributed_store_test.rb": [
          "File: test/redis/distributed_store_test.rb -> test/redis/distributed_store_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: describe \"Redis::DistributedStore\" do",
          "4:   def setup",
          "5:     @dmr = Redis::DistributedStore.new [",
          "8:     ]",
          "9:     @rabbit = OpenStruct.new :name => \"bunny\"",
          "10:     @white_rabbit = OpenStruct.new :color => \"white\"",
          "",
          "[Removed Lines]",
          "6:       {:host => \"localhost\", :port => \"6380\", :db => 0},",
          "7:       {:host => \"localhost\", :port => \"6381\", :db => 0}",
          "",
          "[Added Lines]",
          "6:       { :host => \"localhost\", :port => \"6380\", :db => 0 },",
          "7:       { :host => \"localhost\", :port => \"6381\", :db => 0 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:   it \"passes through ring replica options\" do",
          "69:     dmr = Redis::DistributedStore.new [",
          "72:                                 ], replicas: 1024",
          "73:     dmr.ring.replicas.must_equal 1024",
          "74:   end",
          "",
          "[Removed Lines]",
          "70:                                     {:host => \"localhost\", :port => \"6380\", :db => 0},",
          "71:                                     {:host => \"localhost\", :port => \"6381\", :db => 0}",
          "",
          "[Added Lines]",
          "70:                                     { :host => \"localhost\", :port => \"6380\", :db => 0 },",
          "71:                                     { :host => \"localhost\", :port => \"6381\", :db => 0 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:   it \"uses a custom ring object\" do",
          "77:     my_ring = Redis::HashRing.new",
          "78:     dmr = Redis::DistributedStore.new [",
          "81:                                       ], ring: my_ring",
          "82:     dmr.ring.must_equal my_ring",
          "83:     dmr.ring.nodes.length.must_equal 2",
          "",
          "[Removed Lines]",
          "79:                                           {:host => \"localhost\", :port => \"6380\", :db => 0},",
          "80:                                           {:host => \"localhost\", :port => \"6381\", :db => 0}",
          "",
          "[Added Lines]",
          "79:                                           { :host => \"localhost\", :port => \"6380\", :db => 0 },",
          "80:                                           { :host => \"localhost\", :port => \"6381\", :db => 0 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:   describe \"namespace\" do",
          "101:     it \"uses namespaced key\" do",
          "102:       @dmr = Redis::DistributedStore.new [",
          "105:       ], :namespace => \"theplaylist\"",
          "107:       @dmr.expects(:node_for).with(\"theplaylist:rabbit\").returns(@dmr.nodes.first)",
          "",
          "[Removed Lines]",
          "103:         {:host => \"localhost\", :port => \"6380\", :db => 0},",
          "104:         {:host => \"localhost\", :port => \"6381\", :db => 0}",
          "",
          "[Added Lines]",
          "103:         { :host => \"localhost\", :port => \"6380\", :db => 0 },",
          "104:         { :host => \"localhost\", :port => \"6381\", :db => 0 }",
          "",
          "---------------"
        ],
        "test/redis/store/factory_test.rb||test/redis/store/factory_test.rb": [
          "File: test/redis/store/factory_test.rb -> test/redis/store/factory_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:       it \"should instantiate a Redis::DistributedStore store\" do",
          "100:         store = Redis::Store::Factory.create(",
          "103:         )",
          "104:         store.must_be_kind_of(Redis::DistributedStore)",
          "106:           \"Redis Client connected to localhost:6379 against DB 0\",",
          "107:           \"Redis Client connected to localhost:6380 against DB 0\",",
          "108:         ])",
          "",
          "[Removed Lines]",
          "101:           {:host => \"localhost\", :port => 6379},",
          "102:           {:host => \"localhost\", :port => 6380}",
          "105:         store.nodes.map {|node| node.to_s }.must_equal([",
          "",
          "[Added Lines]",
          "101:           { :host => \"localhost\", :port => 6379 },",
          "102:           { :host => \"localhost\", :port => 6380 }",
          "105:         store.nodes.map { |node| node.to_s }.must_equal([",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:       it \"instantiates Redis::DistributedStore\" do",
          "175:         store = Redis::Store::Factory.create \"redis://127.0.0.1:6379\", \"redis://127.0.0.1:6380\"",
          "176:         store.must_be_kind_of(Redis::DistributedStore)",
          "178:           \"Redis Client connected to 127.0.0.1:6379 against DB 0\",",
          "179:           \"Redis Client connected to 127.0.0.1:6380 against DB 0\",",
          "180:         ])",
          "181:       end",
          "182:     end",
          "185:       it 'instantiates Redis::Store and merges options' do",
          "186:         store = Redis::Store::Factory.create(",
          "188:           { :namespace => 'theplaylist' }",
          "189:         )",
          "190:       end",
          "193:         store = Redis::Store::Factory.create(",
          "196:           { :namespace => 'theplaylist' }",
          "197:         )",
          "199:           \"Redis Client connected to 127.0.0.1:6379 against DB 0 with namespace theplaylist\",",
          "200:           \"Redis Client connected to 127.0.0.1:6380 against DB 0 with namespace theplaylist\"",
          "201:         ])",
          "202:       end",
          "203:     end",
          "208:         store.to_s.must_equal(\"Redis Client connected to 127.0.0.1:6379 against DB 0 with namespace theplaylist\")",
          "209:       end",
          "214:           \"Redis Client connected to 127.0.0.1:6379 against DB 0 with namespace theplaylist\",",
          "215:           \"Redis Client connected to 127.0.0.1:6380 against DB 0 with namespace theplaylist\",",
          "216:         ])",
          "217:       end",
          "219:       it 'instantiates Redis::Store and sets namespace from String' do",
          "221:         store.to_s.must_equal(\"Redis Client connected to 127.0.0.1:6379 against DB 0 with namespace theplaylist\")",
          "222:       end",
          "223:     end",
          "",
          "[Removed Lines]",
          "177:         store.nodes.map {|node| node.to_s }.must_equal([",
          "184:     describe 'when given host Hash and options Hash' do",
          "187:           { :host => '127.0.0.1', :port => '6379' },",
          "192:       it 'instantiates Redis::DistributedStore and merges options' do",
          "194:           { :host => '127.0.0.1', :port => '6379' },",
          "195:           { :host => '127.0.0.1', :port => '6380' },",
          "198:         store.nodes.map {|node| node.to_s }.must_equal([",
          "205:     describe 'when given host String and options Hash' do",
          "206:       it 'instantiates Redis::Store and merges options' do",
          "207:         store = Redis::Store::Factory.create \"redis://127.0.0.1\", { :namespace => 'theplaylist' }",
          "211:       it 'instantiates Redis::DistributedStore and merges options' do",
          "212:         store = Redis::Store::Factory.create \"redis://127.0.0.1:6379\", \"redis://127.0.0.1:6380\", { :namespace => 'theplaylist' }",
          "213:         store.nodes.map {|node| node.to_s }.must_equal([",
          "220:         store = Redis::Store::Factory.create \"redis://127.0.0.1:6379/0/theplaylist\", { :expire_after => 5 }",
          "",
          "[Added Lines]",
          "177:         store.nodes.map { |node| node.to_s }.must_equal([",
          "184:     describe 'when given host Hash and options Hash' do",
          "187:           { :host => '127.0.0.1', :port => '6379' },",
          "192:       it 'instantiates Redis::DistributedStore and merges options' do",
          "194:           { :host => '127.0.0.1', :port => '6379' },",
          "195:           { :host => '127.0.0.1', :port => '6380' },",
          "198:         store.nodes.map { |node| node.to_s }.must_equal([",
          "205:     describe 'when given host String and options Hash' do",
          "206:       it 'instantiates Redis::Store and merges options' do",
          "207:         store = Redis::Store::Factory.create \"redis://127.0.0.1\", :namespace => 'theplaylist'",
          "211:       it 'instantiates Redis::DistributedStore and merges options' do",
          "212:         store = Redis::Store::Factory.create \"redis://127.0.0.1:6379\", \"redis://127.0.0.1:6380\", :namespace => 'theplaylist'",
          "213:         store.nodes.map { |node| node.to_s }.must_equal([",
          "220:         store = Redis::Store::Factory.create \"redis://127.0.0.1:6379/0/theplaylist\", :expire_after => 5",
          "",
          "---------------"
        ],
        "test/redis/store/namespace_test.rb||test/redis/store/namespace_test.rb": [
          "File: test/redis/store/namespace_test.rb -> test/redis/store/namespace_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   end",
          "92:   describe 'method calls' do",
          "96:     it \"should namespace get\" do",
          "99:     end",
          "101:     it \"should namespace set\" do",
          "104:     end",
          "106:     it \"should namespace setnx\" do",
          "109:     end",
          "111:     it \"should namespace del with single key\" do",
          "114:     end",
          "116:     it \"should namespace del with multiple keys\" do",
          "119:     end",
          "121:     it \"should namespace keys\" do",
          "124:     end",
          "126:     it \"should namespace exists\" do",
          "129:     end",
          "131:     it \"should namespace incrby\" do",
          "134:     end",
          "136:     it \"should namespace decrby\" do",
          "139:     end",
          "141:     it \"should namespace mget\" do",
          "",
          "[Removed Lines]",
          "93:     let(:store){Redis::Store.new :namespace => @namespace, :serializer => nil}",
          "94:     let(:client){store.instance_variable_get(:@client)}",
          "97:        client.expects(:call).with([:get, \"#{@namespace}:rabbit\"]).once",
          "98:        store.get(\"rabbit\")",
          "102:        client.expects(:call).with([:set, \"#{@namespace}:rabbit\", @rabbit])",
          "103:        store.set \"rabbit\", @rabbit",
          "107:        client.expects(:call).with([:setnx, \"#{@namespace}:rabbit\", @rabbit])",
          "108:        store.setnx \"rabbit\", @rabbit",
          "112:        client.expects(:call).with([:del, \"#{@namespace}:rabbit\"])",
          "113:        store.del \"rabbit\"",
          "117:        client.expects(:call).with([:del, \"#{@namespace}:rabbit\", \"#{@namespace}:white_rabbit\"])",
          "118:        store.del \"rabbit\", \"white_rabbit\"",
          "122:        store.set \"rabbit\", @rabbit",
          "123:        store.keys(\"rabb*\").must_equal [ \"rabbit\" ]",
          "127:        client.expects(:call).with([:exists, \"#{@namespace}:rabbit\"])",
          "128:        store.exists \"rabbit\"",
          "132:        client.expects(:call).with([:incrby, \"#{@namespace}:counter\", 1])",
          "133:        store.incrby \"counter\", 1",
          "137:        client.expects(:call).with([:decrby, \"#{@namespace}:counter\", 1])",
          "138:        store.decrby \"counter\", 1",
          "",
          "[Added Lines]",
          "93:     let(:store) { Redis::Store.new :namespace => @namespace, :serializer => nil }",
          "94:     let(:client) { store.instance_variable_get(:@client) }",
          "97:       client.expects(:call).with([:get, \"#{@namespace}:rabbit\"]).once",
          "98:       store.get(\"rabbit\")",
          "102:       client.expects(:call).with([:set, \"#{@namespace}:rabbit\", @rabbit])",
          "103:       store.set \"rabbit\", @rabbit",
          "107:       client.expects(:call).with([:setnx, \"#{@namespace}:rabbit\", @rabbit])",
          "108:       store.setnx \"rabbit\", @rabbit",
          "112:       client.expects(:call).with([:del, \"#{@namespace}:rabbit\"])",
          "113:       store.del \"rabbit\"",
          "117:       client.expects(:call).with([:del, \"#{@namespace}:rabbit\", \"#{@namespace}:white_rabbit\"])",
          "118:       store.del \"rabbit\", \"white_rabbit\"",
          "122:       store.set \"rabbit\", @rabbit",
          "123:       store.keys(\"rabb*\").must_equal [ \"rabbit\" ]",
          "127:       client.expects(:call).with([:exists, \"#{@namespace}:rabbit\"])",
          "128:       store.exists \"rabbit\"",
          "132:       client.expects(:call).with([:incrby, \"#{@namespace}:counter\", 1])",
          "133:       store.incrby \"counter\", 1",
          "137:       client.expects(:call).with([:decrby, \"#{@namespace}:counter\", 1])",
          "138:       store.decrby \"counter\", 1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:     end",
          "156:     it \"should namespace expire\" do",
          "159:     end",
          "161:     it \"should namespace ttl\" do",
          "164:     end",
          "166:     it \"should namespace watch\" do",
          "168:       store.watch(\"rabbit\")",
          "169:     end",
          "171:     it \"wraps flushdb with appropriate KEYS * calls\" do",
          "172:       client.expects(:call).with([:flushdb]).never",
          "175:       store.flushdb",
          "176:     end",
          "",
          "[Removed Lines]",
          "157:        client.expects(:call).with([:expire, \"#{@namespace}:rabbit\", 60]).once",
          "158:        store.expire(\"rabbit\",60)",
          "162:        client.expects(:call).with([:ttl, \"#{@namespace}:rabbit\"]).once",
          "163:        store.ttl(\"rabbit\")",
          "167:       client.expects(:call).with([:watch,\"#{@namespace}:rabbit\"]).once",
          "173:       client.expects(:call).with([:keys,\"#{@namespace}:*\"]).once.returns([\"rabbit\"])",
          "174:       client.expects(:call).with([:del,\"#{@namespace}:rabbit\"]).once",
          "",
          "[Added Lines]",
          "157:       client.expects(:call).with([:expire, \"#{@namespace}:rabbit\", 60]).once",
          "158:       store.expire(\"rabbit\", 60)",
          "162:       client.expects(:call).with([:ttl, \"#{@namespace}:rabbit\"]).once",
          "163:       store.ttl(\"rabbit\")",
          "167:       client.expects(:call).with([:watch, \"#{@namespace}:rabbit\"]).once",
          "173:       client.expects(:call).with([:keys, \"#{@namespace}:*\"]).once.returns([\"rabbit\"])",
          "174:       client.expects(:call).with([:del, \"#{@namespace}:rabbit\"]).once",
          "",
          "---------------"
        ],
        "test/redis/store/redis_version_test.rb||test/redis/store/redis_version_test.rb": [
          "File: test/redis/store/redis_version_test.rb -> test/redis/store/redis_version_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: describe \"Redis::RedisVersion\" do",
          "4:   def setup",
          "6:   end",
          "8:   def teardown",
          "",
          "[Removed Lines]",
          "5:     @store  = Redis::Store.new",
          "",
          "[Added Lines]",
          "5:     @store = Redis::Store.new",
          "",
          "---------------"
        ],
        "test/redis/store/serialization_test.rb||test/redis/store/serialization_test.rb": [
          "File: test/redis/store/serialization_test.rb -> test/redis/store/serialization_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   it \"marshals setex (over a distributed store)\" do",
          "83:     @store = Redis::DistributedStore.new [",
          "86:     ]",
          "87:     @store.setex \"rabbit\", 50, @white_rabbit",
          "88:     @store.get(\"rabbit\").must_equal(@white_rabbit)",
          "",
          "[Removed Lines]",
          "84:       {:host => \"localhost\", :port => \"6380\", :db => 0},",
          "85:       {:host => \"localhost\", :port => \"6381\", :db => 0}",
          "",
          "[Added Lines]",
          "84:       { :host => \"localhost\", :port => \"6380\", :db => 0 },",
          "85:       { :host => \"localhost\", :port => \"6381\", :db => 0 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   it \"doesn't marshal setex if raw option is true (over a distributed store)\" do",
          "92:     @store = Redis::DistributedStore.new [",
          "95:     ]",
          "96:     @store.setex \"rabbit\", 50, @white_rabbit, :raw => true",
          "97:     @store.get(\"rabbit\", :raw => true).must_equal(%(#<OpenStruct color=\"white\">))",
          "",
          "[Removed Lines]",
          "93:       {:host => \"localhost\", :port => \"6380\", :db => 0},",
          "94:       {:host => \"localhost\", :port => \"6381\", :db => 0}",
          "",
          "[Added Lines]",
          "93:       { :host => \"localhost\", :port => \"6380\", :db => 0 },",
          "94:       { :host => \"localhost\", :port => \"6381\", :db => 0 }",
          "",
          "---------------"
        ],
        "test/redis/store/ttl_test.rb||test/redis/store/ttl_test.rb": [
          "File: test/redis/store/ttl_test.rb -> test/redis/store/ttl_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     describe 'with nx and ex option' do",
          "82:       it 'must call super with key and value and options' do",
          "84:         redis.set(key, mock_value, set_options)",
          "85:         redis.has_set?(key, mock_value, set_options).must_equal true",
          "86:       end",
          "",
          "[Removed Lines]",
          "83:         set_options = {nx: true, ex: 3600}",
          "",
          "[Added Lines]",
          "82:         set_options = { nx: true, ex: 3600 }",
          "",
          "---------------"
        ],
        "test/test_helper.rb||test/test_helper.rb": [
          "File: test/test_helper.rb -> test/test_helper.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     $VERBOSE = nil",
          "17:     result = yield",
          "18:     $VERBOSE = original_verbosity",
          "20:   end",
          "21: end",
          "",
          "[Removed Lines]",
          "19:     return result",
          "",
          "[Added Lines]",
          "19:     result",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33b02b83db21550b067a37e72adb35cb06d4be28",
      "candidate_info": {
        "commit_hash": "33b02b83db21550b067a37e72adb35cb06d4be28",
        "repo": "redis-store/redis-store",
        "commit_url": "https://github.com/redis-store/redis-store/commit/33b02b83db21550b067a37e72adb35cb06d4be28",
        "files": [
          "lib/redis/store/factory.rb",
          "test/redis/store/factory_test.rb"
        ],
        "message": "Add escape function for passwords",
        "before_after_code_files": [
          "lib/redis/store/factory.rb||lib/redis/store/factory.rb",
          "test/redis/store/factory_test.rb||test/redis/store/factory_test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/redis/store/factory.rb||lib/redis/store/factory.rb",
            "test/redis/store/factory_test.rb||test/redis/store/factory_test.rb"
          ],
          "candidate": [
            "lib/redis/store/factory.rb||lib/redis/store/factory.rb",
            "test/redis/store/factory_test.rb||test/redis/store/factory_test.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/redis/store/factory.rb||lib/redis/store/factory.rb": [
          "File: lib/redis/store/factory.rb -> lib/redis/store/factory.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         options = {",
          "72:           :host     => uri.hostname,",
          "73:           :port     => uri.port || DEFAULT_PORT,",
          "75:         }",
          "77:         options[:db]        = db.to_i   if db",
          "",
          "[Removed Lines]",
          "74:           :password => uri.password",
          "",
          "[Added Lines]",
          "74:           :password => uri.password.nil? ? nil : CGI::unescape(uri.password.to_s)",
          "",
          "---------------"
        ],
        "test/redis/store/factory_test.rb||test/redis/store/factory_test.rb": [
          "File: test/redis/store/factory_test.rb -> test/redis/store/factory_test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         store.instance_variable_get(:@client).password.must_equal(\"secret\")",
          "42:       end",
          "44:       it \"allows/disable marshalling\" do",
          "45:         store = Redis::Store::Factory.create :marshalling => false",
          "46:         store.instance_variable_get(:@marshalling).must_equal(false)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:       it 'uses empty password' do",
          "45:         store = Redis::Store::Factory.create :password => ''",
          "46:         store.instance_variable_get(:@client).password.must_equal('')",
          "47:       end",
          "49:       it 'uses nil password' do",
          "50:         store = Redis::Store::Factory.create :password => nil",
          "51:         assert_nil(store.instance_variable_get(:@client).password)",
          "52:       end",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:         store.instance_variable_get(:@client).password.must_equal(\"secret\")",
          "87:       end",
          "89:       it \"correctly uses specified ipv6 host\" do",
          "90:         store = Redis::Store::Factory.create \"redis://[::1]:6380\"",
          "91:         store.to_s.must_equal(\"Redis Client connected to [::1]:6380 against DB 0\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:       it 'uses specified password with special characters' do",
          "100:         store = Redis::Store::Factory.create 'redis://:pwd%40123@127.0.0.1:6379/0/theplaylist'",
          "101:         store.instance_variable_get(:@client).password.must_equal('pwd@123')",
          "102:       end",
          "104:       it 'uses empty password' do",
          "105:         store = Redis::Store::Factory.create 'redis://:@127.0.0.1:6379/0/theplaylist'",
          "106:         store.instance_variable_get(:@client).password.must_equal('')",
          "107:       end",
          "109:       it 'uses nil password' do",
          "110:         store = Redis::Store::Factory.create 'redis://127.0.0.1:6379/0/theplaylist'",
          "111:         assert_nil(store.instance_variable_get(:@client).password)",
          "112:       end",
          "",
          "---------------"
        ]
      }
    }
  ]
}