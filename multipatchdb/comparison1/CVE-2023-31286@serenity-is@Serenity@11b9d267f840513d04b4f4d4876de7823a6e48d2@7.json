{
  "cve_id": "CVE-2023-31286",
  "cve_desc": "An issue was discovered in Serenity Serene (and StartSharp) before 6.7.0. When a password reset request occurs, the server response leaks the existence of users. If one tries to reset a password of a non-existent user, an error message indicates that this user does not exist.",
  "repo": "serenity-is/Serenity",
  "patch_hash": "11b9d267f840513d04b4f4d4876de7823a6e48d2",
  "patch_info": {
    "commit_hash": "11b9d267f840513d04b4f4d4876de7823a6e48d2",
    "repo": "serenity-is/Serenity",
    "commit_url": "https://github.com/serenity-is/Serenity/commit/11b9d267f840513d04b4f4d4876de7823a6e48d2",
    "files": [
      "CHANGELOG.md",
      "build/Package.Build.props"
    ],
    "message": ":up: 6.7.0",
    "before_after_code_files": [
      "build/Package.Build.props||build/Package.Build.props"
    ]
  },
  "patch_diff": {
    "build/Package.Build.props||build/Package.Build.props": [
      "File: build/Package.Build.props -> build/Package.Build.props",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: <Project>",
      "2:   <PropertyGroup>",
      "4:   </PropertyGroup>",
      "5: </Project>",
      "",
      "[Removed Lines]",
      "3:     <Version>6.6.6</Version>",
      "",
      "[Added Lines]",
      "3:     <Version>6.7.0</Version>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ac2be79eea2804bdca48cf1ec974e2a83424d1a",
      "candidate_info": {
        "commit_hash": "6ac2be79eea2804bdca48cf1ec974e2a83424d1a",
        "repo": "serenity-is/Serenity",
        "commit_url": "https://github.com/serenity-is/Serenity/commit/6ac2be79eea2804bdca48cf1ec974e2a83424d1a",
        "files": [
          "CHANGELOG.md",
          "build/Package.Build.props"
        ],
        "message": ":up: 6.8.0",
        "before_after_code_files": [
          "build/Package.Build.props||build/Package.Build.props"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "build/Package.Build.props||build/Package.Build.props"
          ],
          "candidate": [
            "build/Package.Build.props||build/Package.Build.props"
          ]
        }
      },
      "candidate_diff": {
        "build/Package.Build.props||build/Package.Build.props": [
          "File: build/Package.Build.props -> build/Package.Build.props",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project>",
          "2:   <PropertyGroup>",
          "4:   </PropertyGroup>",
          "5: </Project>",
          "",
          "[Removed Lines]",
          "3:     <Version>6.7.6</Version>",
          "",
          "[Added Lines]",
          "3:     <Version>6.8.0</Version>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a370f4d5bf7ccd18f74d4a537c9f564c8a912ff",
      "candidate_info": {
        "commit_hash": "8a370f4d5bf7ccd18f74d4a537c9f564c8a912ff",
        "repo": "serenity-is/Serenity",
        "commit_url": "https://github.com/serenity-is/Serenity/commit/8a370f4d5bf7ccd18f74d4a537c9f564c8a912ff",
        "files": [
          "CHANGELOG.md",
          "build/Package.Build.props"
        ],
        "message": ":up: 6.3.2",
        "before_after_code_files": [
          "build/Package.Build.props||build/Package.Build.props"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "build/Package.Build.props||build/Package.Build.props"
          ],
          "candidate": [
            "build/Package.Build.props||build/Package.Build.props"
          ]
        }
      },
      "candidate_diff": {
        "build/Package.Build.props||build/Package.Build.props": [
          "File: build/Package.Build.props -> build/Package.Build.props",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project>",
          "2:   <PropertyGroup>",
          "4:   </PropertyGroup>",
          "5: </Project>",
          "",
          "[Removed Lines]",
          "3:     <Version>6.3.1</Version>",
          "",
          "[Added Lines]",
          "3:     <Version>6.3.2</Version>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "524195abf4051b349afca2c0bfb8dc04680bc240",
      "candidate_info": {
        "commit_hash": "524195abf4051b349afca2c0bfb8dc04680bc240",
        "repo": "serenity-is/Serenity",
        "commit_url": "https://github.com/serenity-is/Serenity/commit/524195abf4051b349afca2c0bfb8dc04680bc240",
        "files": [
          "CHANGELOG.md",
          "build/Package.Build.props",
          "src/Serenity.Net.Core/ComponentModel/Upload/DefaultFilenameFormatSanitizer.cs",
          "src/Serenity.Net.Core/ComponentModel/Upload/IFilenameFormatSanitizer.cs",
          "src/Serenity.Net.Core/ComponentModel/Upload/ISanitizeFilenamePlaceholder.cs",
          "src/Serenity.Net.Core/Helpers/StringHelper.cs",
          "src/Serenity.Net.Services/Upload/UploadFormatting.cs",
          "src/Serenity.Net.Web/Upload/FileUploadBehavior.cs",
          "src/Serenity.Net.Web/Upload/MultipleFileUploadBehavior.cs",
          "src/Serenity.Net.Web/Upload/UploadServiceCollectionExtensions.cs",
          "tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.TestRows.cs",
          "tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.cs"
        ],
        "message": "renamed ISanitizeFilenamePlaceholder to IFilenameFormatSanitizer and made it possible to inject it via DI",
        "before_after_code_files": [
          "build/Package.Build.props||build/Package.Build.props",
          "src/Serenity.Net.Core/ComponentModel/Upload/DefaultFilenameFormatSanitizer.cs||src/Serenity.Net.Core/ComponentModel/Upload/DefaultFilenameFormatSanitizer.cs",
          "src/Serenity.Net.Core/ComponentModel/Upload/IFilenameFormatSanitizer.cs||src/Serenity.Net.Core/ComponentModel/Upload/IFilenameFormatSanitizer.cs",
          "src/Serenity.Net.Core/ComponentModel/Upload/ISanitizeFilenamePlaceholder.cs||src/Serenity.Net.Core/ComponentModel/Upload/ISanitizeFilenamePlaceholder.cs",
          "src/Serenity.Net.Core/Helpers/StringHelper.cs||src/Serenity.Net.Core/Helpers/StringHelper.cs",
          "src/Serenity.Net.Services/Upload/UploadFormatting.cs||src/Serenity.Net.Services/Upload/UploadFormatting.cs",
          "src/Serenity.Net.Web/Upload/FileUploadBehavior.cs||src/Serenity.Net.Web/Upload/FileUploadBehavior.cs",
          "src/Serenity.Net.Web/Upload/MultipleFileUploadBehavior.cs||src/Serenity.Net.Web/Upload/MultipleFileUploadBehavior.cs",
          "src/Serenity.Net.Web/Upload/UploadServiceCollectionExtensions.cs||src/Serenity.Net.Web/Upload/UploadServiceCollectionExtensions.cs",
          "tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.TestRows.cs||tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.TestRows.cs",
          "tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.cs||tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "build/Package.Build.props||build/Package.Build.props"
          ],
          "candidate": [
            "build/Package.Build.props||build/Package.Build.props"
          ]
        }
      },
      "candidate_diff": {
        "build/Package.Build.props||build/Package.Build.props": [
          "File: build/Package.Build.props -> build/Package.Build.props",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project>",
          "2:   <PropertyGroup>",
          "4:   </PropertyGroup>",
          "5: </Project>",
          "",
          "[Removed Lines]",
          "3:     <Version>6.4.0</Version>",
          "",
          "[Added Lines]",
          "3:     <Version>6.4.1</Version>",
          "",
          "---------------"
        ],
        "src/Serenity.Net.Core/ComponentModel/Upload/DefaultFilenameFormatSanitizer.cs||src/Serenity.Net.Core/ComponentModel/Upload/DefaultFilenameFormatSanitizer.cs": [
          "File: src/Serenity.Net.Core/ComponentModel/Upload/DefaultFilenameFormatSanitizer.cs -> src/Serenity.Net.Core/ComponentModel/Upload/DefaultFilenameFormatSanitizer.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \ufeffnamespace Serenity.ComponentModel;",
          "6: public class DefaultFilenameFormatSanitizer : IFilenameFormatSanitizer",
          "7: {",
          "11:     public static readonly IFilenameFormatSanitizer Instance = new DefaultFilenameFormatSanitizer();",
          "22:     public virtual string SanitizePlaceholder(string _, string value)",
          "23:     {",
          "24:         value = StringHelper.SanitizeFilename((value ?? \"\").Replace('\\\\', '/'));",
          "25:         value = value.Replace(\"..\", \"_\", StringComparison.Ordinal);",
          "26:         if (string.IsNullOrWhiteSpace(value))",
          "27:             value = \"_\";",
          "28:         while (value.EndsWith(\".\", StringComparison.Ordinal))",
          "29:             value = value[..^1] + \"_\";",
          "30:         return value;",
          "31:     }",
          "40:     public virtual string SanitizeResult(string result)",
          "41:     {",
          "42:         if (string.IsNullOrEmpty(result))",
          "43:             return result;",
          "45:         result = result.Replace('\\\\', '/');",
          "47:         while (result.IndexOf(\"//\", StringComparison.Ordinal) >= 0)",
          "48:             result = result.Replace(\"//\", \"/_/\", StringComparison.Ordinal);",
          "50:         return result;",
          "51:     }",
          "52: }",
          "",
          "---------------"
        ],
        "src/Serenity.Net.Core/ComponentModel/Upload/IFilenameFormatSanitizer.cs||src/Serenity.Net.Core/ComponentModel/Upload/IFilenameFormatSanitizer.cs": [
          "File: src/Serenity.Net.Core/ComponentModel/Upload/IFilenameFormatSanitizer.cs -> src/Serenity.Net.Core/ComponentModel/Upload/IFilenameFormatSanitizer.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \ufeffnamespace Serenity.ComponentModel;",
          "10: public interface IFilenameFormatSanitizer",
          "11: {",
          "17:     string SanitizePlaceholder(string key, string value);",
          "25:     string SanitizeResult(string result);",
          "26: }",
          "",
          "---------------"
        ],
        "src/Serenity.Net.Core/ComponentModel/Upload/ISanitizeFilenamePlaceholder.cs||src/Serenity.Net.Core/ComponentModel/Upload/ISanitizeFilenamePlaceholder.cs": [
          "File: src/Serenity.Net.Core/ComponentModel/Upload/ISanitizeFilenamePlaceholder.cs -> src/Serenity.Net.Core/ComponentModel/Upload/ISanitizeFilenamePlaceholder.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/Serenity.Net.Core/Helpers/StringHelper.cs||src/Serenity.Net.Core/Helpers/StringHelper.cs": [
          "File: src/Serenity.Net.Core/Helpers/StringHelper.cs -> src/Serenity.Net.Core/Helpers/StringHelper.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \ufeffusing System.Collections;",
          "3: namespace Serenity",
          "4: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: using System.IO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:         }",
          "309:         {",
          "319:         }",
          "",
          "[Removed Lines]",
          "308:         public static string SanitizeFilename(string s)",
          "310:             if (s == null)",
          "311:                 throw new ArgumentNullException(\"s\");",
          "313:             s = RemoveDiacritics(s);",
          "314:             s = s.Replace(\"/\", \"_\");",
          "315:             s = s.Replace(\":\", \"_\");",
          "316:             s = s.Replace(\"&\", \"_\");",
          "317:             s = s.Replace(\"\u0131\", \"i\");",
          "318:             return s.TrimToEmpty();",
          "",
          "[Added Lines]",
          "306:         public static readonly Regex InvalidFilenameCharsRegex =",
          "307:             new ($\"[{Regex.Escape(new string(Path.GetInvalidFileNameChars()))}]\",",
          "308:                 RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.CultureInvariant);",
          "318:         public static string SanitizeFilename(string filename,",
          "319:             string replacement = \"_\", bool removeDiacritics = true)",
          "320:         {",
          "321:             if (filename == null)",
          "322:                 throw new ArgumentNullException(nameof(filename));",
          "324:             if (removeDiacritics)",
          "325:             {",
          "326:                 RemoveDiacritics(filename);",
          "327:                 filename = filename.Replace(\"\u0131\", \"i\");",
          "328:             }",
          "330:             filename = InvalidFilenameCharsRegex.Replace(filename, replacement);",
          "332:             return filename.TrimToEmpty();",
          "333:         }",
          "338:         public static readonly Regex InvalidPathCharsRegex =",
          "339:             new($\"[{Regex.Escape(new string(Path.GetInvalidPathChars()))}]\",",
          "340:                 RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.CultureInvariant);",
          "350:         public static string SanitizeFilePath(string filename,",
          "351:             string replacement = \"_\", bool removeDiacritics = true)",
          "353:             if (filename == null)",
          "354:                 throw new ArgumentNullException(nameof(filename));",
          "356:             if (removeDiacritics)",
          "357:             {",
          "358:                 RemoveDiacritics(filename);",
          "359:                 filename = filename.Replace(\"\u0131\", \"i\");",
          "360:             }",
          "362:             filename = InvalidPathCharsRegex.Replace(filename, replacement);",
          "364:             return filename.TrimToEmpty();",
          "",
          "---------------"
        ],
        "src/Serenity.Net.Services/Upload/UploadFormatting.cs||src/Serenity.Net.Services/Upload/UploadFormatting.cs": [
          "File: src/Serenity.Net.Services/Upload/UploadFormatting.cs -> src/Serenity.Net.Services/Upload/UploadFormatting.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:             return value + \" \" + suffix;",
          "89:         }",
          "113:     }",
          "114: }",
          "",
          "[Removed Lines]",
          "99:         public static string SanitizePlaceholder(string value)",
          "100:         {",
          "101:             value = StringHelper.SanitizeFilename(value ?? \"\");",
          "102:             value = value.Replace('\\\\', '_')",
          "103:                 .Replace(\"..\", \"_\", StringComparison.Ordinal);",
          "105:             if (string.IsNullOrWhiteSpace(value))",
          "106:                 value = \"_\";",
          "108:             while (value.EndsWith(\".\", StringComparison.Ordinal))",
          "109:                 value = value[..^1] + \"_\";",
          "111:             return value;",
          "112:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/Serenity.Net.Web/Upload/FileUploadBehavior.cs||src/Serenity.Net.Web/Upload/FileUploadBehavior.cs": [
          "File: src/Serenity.Net.Web/Upload/FileUploadBehavior.cs -> src/Serenity.Net.Web/Upload/FileUploadBehavior.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \ufeffusing Serenity.Web;",
          "2: using System.IO;",
          "3: using System;",
          "5: namespace Serenity.Services",
          "6: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: using Serenity.ComponentModel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:         private const string SplittedFormat = \"{1:00000}/{0:00000000}_{2}\";",
          "19:         private readonly IUploadValidator uploadValidator;",
          "20:         private readonly IImageProcessor imageProcessor;",
          "22:         private StringField originalNameField;",
          "23:         private Dictionary<string, Field> replaceFields;",
          "",
          "[Removed Lines]",
          "21:         private readonly IUploadStorage storage;",
          "",
          "[Added Lines]",
          "22:         private readonly IUploadStorage storage;",
          "23:         private readonly IFilenameFormatSanitizer formatSanitizer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "32:         public FileUploadBehavior(IUploadValidator uploadValidator, IImageProcessor imageProcessor,",
          "34:         {",
          "35:             this.uploadValidator = uploadValidator ?? throw new ArgumentNullException(nameof(uploadValidator));",
          "36:             this.imageProcessor = imageProcessor ?? throw new ArgumentNullException(nameof(imageProcessor));",
          "38:         }",
          "",
          "[Removed Lines]",
          "33:             IUploadStorage storage)",
          "37:             this.storage = storage ?? throw new ArgumentNullException(nameof(storage));",
          "",
          "[Added Lines]",
          "36:             IUploadStorage storage,",
          "37:             IFilenameFormatSanitizer formatSanitizer = null)",
          "41:             this.storage = storage ?? throw new ArgumentNullException(nameof(storage));",
          "42:             this.formatSanitizer = formatSanitizer ?? DefaultFilenameFormatSanitizer.Instance;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:             return replaceFields;",
          "133:         }",
          "136:             Dictionary<string, Field> replaceFields,",
          "137:             ISaveRequestHandler handler,",
          "139:         {",
          "140:             if (replaceFields == null)",
          "143:             var row = handler.Row;",
          "",
          "[Removed Lines]",
          "135:         internal static string ProcessReplaceFields(string s,",
          "138:             ISanitizeFilenamePlaceholder sanitizePlaceholder)",
          "141:                 return s;",
          "",
          "[Added Lines]",
          "139:         internal static string ProcessReplaceFields(string s,",
          "142:             IFilenameFormatSanitizer formatSanitizer)",
          "144:             var result = s;",
          "147:                 return result;",
          "149:             if (formatSanitizer is null)",
          "150:                 throw new ArgumentNullException(nameof(formatSanitizer));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "169:             foreach (var p in replaceFields)",
          "170:             {",
          "171:                 var val = p.Value.AsObject(row);",
          "174:                 var colon = p.Key.IndexOf(\":\", StringComparison.Ordinal);",
          "175:                 if (colon >= 0)",
          "177:                 else",
          "186:             }",
          "192:         }",
          "",
          "[Removed Lines]",
          "172:                 string str;",
          "176:                     str = string.Format(CultureInfo.InvariantCulture, string.Concat(\"{0:\", p.Key.AsSpan(colon + 1, p.Key.Length - colon - 2), \"}\"), val);",
          "178:                     str = Convert.ToString(val ?? \"\", CultureInfo.InvariantCulture);",
          "180:                 if (sanitizePlaceholder != null)",
          "181:                     str = sanitizePlaceholder.Sanitize(p.Key, str);",
          "182:                 else",
          "183:                     str = UploadFormatting.SanitizePlaceholder(str);",
          "185:                 s = s.Replace(p.Key, str, StringComparison.Ordinal);",
          "188:             while (s.IndexOf(\"//\", StringComparison.Ordinal) > 0)",
          "189:                 s = s.Replace(\"//\", \"/_/\", StringComparison.Ordinal);",
          "191:             return s;",
          "",
          "[Added Lines]",
          "181:                 string value;",
          "185:                     value = string.Format(CultureInfo.InvariantCulture, string.Concat(\"{0:\", p.Key.AsSpan(colon + 1, p.Key.Length - colon - 2), \"}\"), val);",
          "187:                     value = Convert.ToString(val ?? \"\", CultureInfo.InvariantCulture);",
          "189:                 value = formatSanitizer.SanitizePlaceholder(p.Key, value);",
          "191:                 result = result.Replace(p.Key, value, StringComparison.Ordinal);",
          "194:             result = formatSanitizer.SanitizeResult(result);",
          "196:             return result;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "302:             var copyResult = storage.CopyTemporaryFile(new CopyTemporaryFileOptions",
          "303:             {",
          "304:                 Format = fileNameFormat,",
          "307:                 TemporaryFile = newFilename,",
          "308:                 EntityId = idField.AsObject(handler.Row),",
          "309:                 FilesToDelete = filesToDelete,",
          "",
          "[Removed Lines]",
          "305:                 PostFormat = s => ProcessReplaceFields(s, replaceFields, handler,",
          "306:                     editorAttr as ISanitizeFilenamePlaceholder),",
          "",
          "[Added Lines]",
          "310:                 PostFormat = s => ProcessReplaceFields(s, replaceFields, handler,",
          "311:                     editorAttr as IFilenameFormatSanitizer ?? formatSanitizer),",
          "",
          "---------------"
        ],
        "src/Serenity.Net.Web/Upload/MultipleFileUploadBehavior.cs||src/Serenity.Net.Web/Upload/MultipleFileUploadBehavior.cs": [
          "File: src/Serenity.Net.Web/Upload/MultipleFileUploadBehavior.cs -> src/Serenity.Net.Web/Upload/MultipleFileUploadBehavior.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:         private string fileNameFormat;",
          "16:         private const string SplittedFormat = \"{1:00000}/{0:00000000}_{2}\";",
          "17:         private Dictionary<string, Field> replaceFields;",
          "18:         private readonly IUploadValidator uploadValidator;",
          "19:         private readonly IImageProcessor imageProcessor;",
          "20:         private readonly IUploadStorage storage;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:         private readonly IFilenameFormatSanitizer formatSanitizer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         public MultipleFileUploadBehavior(IUploadValidator uploadValidator, IImageProcessor imageProcessor,",
          "31:         {",
          "32:             this.uploadValidator = uploadValidator ?? throw new ArgumentNullException(nameof(uploadValidator));",
          "33:             this.imageProcessor = imageProcessor ?? throw new ArgumentNullException(nameof(imageProcessor));",
          "34:             this.storage = storage ?? throw new ArgumentNullException(nameof(storage));",
          "35:         }",
          "",
          "[Removed Lines]",
          "30:             IUploadStorage storage)",
          "",
          "[Added Lines]",
          "32:             IUploadStorage storage,",
          "33:             IFilenameFormatSanitizer formatSanitizer = null)",
          "38:             this.formatSanitizer = formatSanitizer ?? DefaultFilenameFormatSanitizer.Instance;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:                 {",
          "192:                     Format = fileNameFormat,",
          "193:                     PostFormat = s => FileUploadBehavior.ProcessReplaceFields(s, replaceFields, handler,",
          "195:                     TemporaryFile = filename,",
          "196:                     EntityId = idField.AsObject(handler.Row),",
          "197:                     FilesToDelete = filesToDelete,",
          "",
          "[Removed Lines]",
          "194:                         editorAttr as ISanitizeFilenamePlaceholder),",
          "",
          "[Added Lines]",
          "198:                         editorAttr as IFilenameFormatSanitizer ?? formatSanitizer),",
          "",
          "---------------"
        ],
        "src/Serenity.Net.Web/Upload/UploadServiceCollectionExtensions.cs||src/Serenity.Net.Web/Upload/UploadServiceCollectionExtensions.cs": [
          "File: src/Serenity.Net.Web/Upload/UploadServiceCollectionExtensions.cs -> src/Serenity.Net.Web/Upload/UploadServiceCollectionExtensions.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:                 throw new ArgumentNullException(nameof(collection));",
          "24:             collection.AddOptions();",
          "25:             collection.TryAddSingleton<IUploadStorage, DefaultUploadStorage>();",
          "26:             collection.TryAddSingleton<IUploadValidator, DefaultUploadValidator>();",
          "27:             collection.TryAddSingleton<IImageProcessor, DefaultImageProcessor>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:             collection.TryAddSingleton<IFilenameFormatSanitizer, DefaultFilenameFormatSanitizer>();",
          "",
          "---------------"
        ],
        "tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.TestRows.cs||tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.TestRows.cs": [
          "File: tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.TestRows.cs -> tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.TestRows.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:             set => fields.ImageUploadEditorCopyToHistory[this] = value;",
          "130:         }",
          "132:         public class RowFields : RowFieldsBase",
          "133:         {",
          "134:             public Int32Field Id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:         public string Empty",
          "133:         {",
          "134:             get => fields.Empty[this];",
          "135:             set => fields.Empty[this] = value;",
          "136:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:             public StringField ImageUploadEditorOriginalNameIntegerField;",
          "145:             public StringField ImageUploadEditorOriginalNameNoField;",
          "146:             public StringField ImageUploadEditorCopyToHistory;",
          "147:         }",
          "148:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:             public StringField Empty;",
          "",
          "---------------"
        ],
        "tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.cs||tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.cs": [
          "File: tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.cs -> tests/Serenity.Net.Web.Tests/UploadBehaviors/FileUploadBehaviorTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: using SixLabors.ImageSharp.Formats;",
          "4: using SixLabors.ImageSharp.Formats.Png;",
          "5: using SixLabors.ImageSharp.PixelFormats;",
          "6: using MockFileData = System.IO.Abstractions.TestingHelpers.MockFileData;",
          "8: namespace Serenity.Tests.Web;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: using System.Text.RegularExpressions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1091:         Assert.Equal(\"a-test-\\\\_\\\\.jpg\", processResult);",
          "1092:     }",
          "1095:     {",
          "1096:         isUpdate ??= foreignFieldQueryResults == null;",
          "",
          "[Removed Lines]",
          "1094:     private string TestProcessReplaceFields(string fileNameFormat, IDictionary<string, object> foreignFieldQueryResults = null, TestIIdRow  row = null, bool? isUpdate = null)",
          "",
          "[Added Lines]",
          "1095:     private class IgnoreSlashEmptySanitizer : IFilenameFormatSanitizer",
          "1096:     {",
          "1097:         public string SanitizePlaceholder(string key, string value)",
          "1098:         {",
          "1099:             value = StringHelper.SanitizeFilePath((value ?? \"\").Replace('\\\\', '/'));",
          "1100:             value = value.Replace(\"..\", \"_\", StringComparison.Ordinal);",
          "1101:             return value;",
          "1102:         }",
          "1104:         public string SanitizeResult(string result)",
          "1105:         {",
          "1106:             if (string.IsNullOrEmpty(result))",
          "1107:                 return result;",
          "1109:             result = result.Replace('\\\\', '/');",
          "1111:             while (result.Contains(\"//\"))",
          "1112:                 result = result.Replace(\"//\", \"/\", StringComparison.Ordinal);",
          "1114:             return result;",
          "1115:         }",
          "1116:     }",
          "1118:     [Fact]",
          "1119:     public void ProcessReplaceFields_Uses_Registered_IgnoreSlashSanitizer()",
          "1120:     {",
          "1121:         var processResult = TestProcessReplaceFields(\"x/|Name|/|Empty|/y\", row: new TestIIdRow",
          "1122:         {",
          "1123:             Name = \"a/b/c/d\"",
          "1124:         }, sanitizer: new IgnoreSlashEmptySanitizer());",
          "1126:         Assert.Equal(\"x/a/b/c/d/y.jpg\", processResult);",
          "1127:     }",
          "1129:     private string TestProcessReplaceFields(string fileNameFormat, IDictionary<string, object> foreignFieldQueryResults = null, TestIIdRow  row = null, bool? isUpdate = null,",
          "1130:         IFilenameFormatSanitizer sanitizer = null)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1100:             Id = isUpdate.Value ? 1234: null",
          "1101:         };",
          "1158:     }",
          "1160:     private static byte[] CreateImage(int width, int height, IImageFormat format = null, Configuration configuration = null, Rgba32? color = null)",
          "",
          "[Removed Lines]",
          "1103:         row.StringFieldImageUploadEditor ??= \"temporary/new.jpg\";",
          "1105:         row.GetFields().StringFieldImageUploadEditor.GetAttribute<ImageUploadEditorAttribute>()",
          "1106:             .FilenameFormat = fileNameFormat;",
          "1108:         var mockUploadStorage = (MockUploadStorage)MockUploadStorage.Create();",
          "1109:         var mockFileSystem = (MockFileSystem)mockUploadStorage.MockFileSystem;",
          "1111:         var sut = new FileUploadBehavior(new MockUploadValidator(), new MockImageProcessor(), mockUploadStorage)",
          "1112:         {",
          "1113:             Target = TestIIdRow.Fields.StringFieldImageUploadEditor",
          "1114:         };",
          "1116:         mockFileSystem.AddFile(row.StringFieldImageUploadEditor, new MockFileData(CreateImage(1000, 1000)));",
          "1118:         sut.ActivateFor(row);",
          "1120:         var dbConnection = new MockDbConnection();",
          "1121:         dbConnection.OnExecuteReader(command =>",
          "1122:         {",
          "1123:             var selectFields = MockDbDataReader.ParseSelectFieldAliases(command.CommandText).ToList();",
          "1124:             var retRow = new TestIIdRow();",
          "1126:             foreach (var field in selectFields)",
          "1127:             {",
          "1128:                 object value = field + \"_value\";",
          "1130:                 if (foreignFieldQueryResults?.TryGetValue(field, out var dictValue) == true)",
          "1131:                     value = dictValue;",
          "1133:                 retRow[field] = value;",
          "1134:             }",
          "1136:             return new MockDbDataReader(command.CommandText, retRow);",
          "1137:         });",
          "1139:         var uow = new MockUnitOfWork(dbConnection);",
          "1140:         var requestHandler = new MockSaveHandler<TestIIdRow>",
          "1141:         {",
          "1142:             IsCreate = !isUpdate.Value,",
          "1143:             IsUpdate = isUpdate.Value,",
          "1144:             Old = isUpdate.Value ? new TestIIdRow { Id = 1234 } : null,",
          "1145:             Row = row,",
          "1146:             UnitOfWork = uow,",
          "1147:             Connection = uow.Connection",
          "1148:         };",
          "1150:         sut.OnBeforeSave(requestHandler);",
          "1151:         if (!isUpdate.Value)",
          "1152:             row.Id = 1234;",
          "1153:         sut.OnAfterSave(requestHandler);",
          "1154:         uow.Commit();",
          "1156:         var file = Assert.Single(mockFileSystem.AllFiles);",
          "1157:         return file[mockFileSystem.Path.GetPathRoot(file).Length..]; // remove drive letter",
          "",
          "[Added Lines]",
          "1139:         row.StringFieldImageUploadEditor ??= \"temporary/new.jpg\";",
          "1141:         var attr = row.GetFields().StringFieldImageUploadEditor.GetAttribute<ImageUploadEditorAttribute>();",
          "1142:         var oldFormat = attr.FilenameFormat;",
          "1143:         try",
          "1144:         {",
          "1145:             attr.FilenameFormat = fileNameFormat;",
          "1147:             var mockUploadStorage = (MockUploadStorage)MockUploadStorage.Create();",
          "1148:             var mockFileSystem = (MockFileSystem)mockUploadStorage.MockFileSystem;",
          "1150:             var sut = new FileUploadBehavior(new MockUploadValidator(), new MockImageProcessor(), mockUploadStorage,",
          "1151:                 formatSanitizer: sanitizer)",
          "1152:             {",
          "1153:                 Target = TestIIdRow.Fields.StringFieldImageUploadEditor",
          "1154:             };",
          "1156:             mockFileSystem.AddFile(row.StringFieldImageUploadEditor, new MockFileData(CreateImage(1000, 1000)));",
          "1158:             sut.ActivateFor(row);",
          "1160:             var dbConnection = new MockDbConnection();",
          "1161:             dbConnection.OnExecuteReader(command =>",
          "1162:             {",
          "1163:                 var selectFields = MockDbDataReader.ParseSelectFieldAliases(command.CommandText).ToList();",
          "1164:                 var retRow = new TestIIdRow();",
          "1166:                 foreach (var field in selectFields)",
          "1167:                 {",
          "1168:                     object value = field + \"_value\";",
          "1170:                     if (foreignFieldQueryResults?.TryGetValue(field, out var dictValue) == true)",
          "1171:                         value = dictValue;",
          "1173:                     retRow[field] = value;",
          "1174:                 }",
          "1176:                 return new MockDbDataReader(command.CommandText, retRow);",
          "1177:             });",
          "1179:             var uow = new MockUnitOfWork(dbConnection);",
          "1180:             var requestHandler = new MockSaveHandler<TestIIdRow>",
          "1181:             {",
          "1182:                 IsCreate = !isUpdate.Value,",
          "1183:                 IsUpdate = isUpdate.Value,",
          "1184:                 Old = isUpdate.Value ? new TestIIdRow { Id = 1234 } : null,",
          "1185:                 Row = row,",
          "1186:                 UnitOfWork = uow,",
          "1187:                 Connection = uow.Connection",
          "1188:             };",
          "1190:             sut.OnBeforeSave(requestHandler);",
          "1191:             if (!isUpdate.Value)",
          "1192:                 row.Id = 1234;",
          "1193:             sut.OnAfterSave(requestHandler);",
          "1194:             uow.Commit();",
          "1196:             var file = Assert.Single(mockFileSystem.AllFiles);",
          "1197:             return file[mockFileSystem.Path.GetPathRoot(file).Length..].Replace('\\\\', '/'); // remove drive letter",
          "1198:         }",
          "1199:         finally",
          "1200:         {",
          "1201:             attr.FilenameFormat = oldFormat;",
          "1202:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5420ecb448ed5ecd040af0894e13fed2ab0d5c15",
      "candidate_info": {
        "commit_hash": "5420ecb448ed5ecd040af0894e13fed2ab0d5c15",
        "repo": "serenity-is/Serenity",
        "commit_url": "https://github.com/serenity-is/Serenity/commit/5420ecb448ed5ecd040af0894e13fed2ab0d5c15",
        "files": [
          "CHANGELOG.md",
          "build/Package.Build.props",
          "build/_build.cake"
        ],
        "message": ":up: 6.9.4",
        "before_after_code_files": [
          "build/Package.Build.props||build/Package.Build.props",
          "build/_build.cake||build/_build.cake"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "build/Package.Build.props||build/Package.Build.props"
          ],
          "candidate": [
            "build/Package.Build.props||build/Package.Build.props"
          ]
        }
      },
      "candidate_diff": {
        "build/Package.Build.props||build/Package.Build.props": [
          "File: build/Package.Build.props -> build/Package.Build.props",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project>",
          "2:   <PropertyGroup>",
          "4:   </PropertyGroup>",
          "5: </Project>",
          "",
          "[Removed Lines]",
          "3:     <Version>6.9.3</Version>",
          "",
          "[Added Lines]",
          "3:     <Version>6.9.4</Version>",
          "",
          "---------------"
        ],
        "build/_build.cake||build/_build.cake": [
          "File: build/_build.cake -> build/_build.cake",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:     .IsDependentOn(\"Restore\")",
          "148:     .Does(context =>",
          "149: {",
          "157:     writeHeader(\"Building Serenity.Net.sln\");",
          "158:     MSBuild(System.IO.Path.Combine(src, \"Serenity.Net.sln\"), s => {",
          "159:         s.SetConfiguration(configuration);",
          "",
          "[Removed Lines]",
          "151:     StartProcess(\"powershell\", new ProcessSettings",
          "152:     {",
          "153:         Arguments = @\"npx tsc -p ..\\..\\Serenity.Net.CodeGenerator\\Resource\\tsconfig.json\",",
          "154:         WorkingDirectory = System.IO.Path.Combine(root, \"packages\", \"corelib\")",
          "155:     });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f26e809aed53c775eddfc078a7c168f5ff832f80",
      "candidate_info": {
        "commit_hash": "f26e809aed53c775eddfc078a7c168f5ff832f80",
        "repo": "serenity-is/Serenity",
        "commit_url": "https://github.com/serenity-is/Serenity/commit/f26e809aed53c775eddfc078a7c168f5ff832f80",
        "files": [
          "CHANGELOG.md",
          "build/Package.Build.props",
          "pnpm-lock.yaml",
          "src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.js",
          "src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.min.js",
          "src/Serenity.Scripts/corelib/package.json"
        ],
        "message": ":up: 6.4.7",
        "before_after_code_files": [
          "build/Package.Build.props||build/Package.Build.props",
          "src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.js||src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.js",
          "src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.min.js||src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.min.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "build/Package.Build.props||build/Package.Build.props"
          ],
          "candidate": [
            "build/Package.Build.props||build/Package.Build.props"
          ]
        }
      },
      "candidate_diff": {
        "build/Package.Build.props||build/Package.Build.props": [
          "File: build/Package.Build.props -> build/Package.Build.props",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project>",
          "2:   <PropertyGroup>",
          "4:   </PropertyGroup>",
          "5: </Project>",
          "",
          "[Removed Lines]",
          "3:     <Version>6.4.6</Version>",
          "",
          "[Added Lines]",
          "3:     <Version>6.4.7</Version>",
          "",
          "---------------"
        ],
        "src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.js||src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.js": [
          "File: src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.js -> src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:       var _a, _b, _c, _d, _e;",
          "156:       var item = ctx.item;",
          "157:       if (!item.__groupTotals && item.totals)",
          "159:       return (_e = (_d = (_b = (_a = ctx.column) == null ? void 0 : _a.groupTotalsFormatter) == null ? void 0 : _b.call(_a, item, ctx.column)) != null ? _d : (_c = grid == null ? void 0 : grid.groupTotalsFormatter) == null ? void 0 : _c.call(grid, item, ctx.column)) != null ? _e : \"\";",
          "160:     }",
          "161:     init(grid) {",
          "",
          "[Removed Lines]",
          "158:         ctx.item = ctx.item.totals;",
          "",
          "[Added Lines]",
          "158:         item = item.totals;",
          "",
          "---------------"
        ],
        "src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.min.js||src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.min.js": [
          "File: src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.min.js -> src/Serenity.Assets/wwwroot/Scripts/SlickGrid/slick.groupitemmetadataprovider.min.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [\"Data\", \"Editors\", \"Formatters\", \"Plugins\"].forEach(ns => Slick._[ns] && (Slick[ns] = Object.assign(Slick[ns] || {}, Slick._[ns])) && delete Slick._[ns]); Object.assign(Slick, Slick._); delete Slick._; Slick.Data = Slick.Data || {}; Slick.Data.GroupItemMetadataProvider = Slick.GroupItemMetadataProvider;",
          "",
          "[Removed Lines]",
          "1: var Slick=Slick||{};Slick._=(()=>{var c=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var v=Object.prototype.hasOwnProperty;var G=(p,t)=>{for(var e in t)c(p,e,{get:t[e],enumerable:!0})},T=(p,t,e,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let o of F(t))!v.call(p,o)&&o!==e&&c(p,o,{get:()=>t[o],enumerable:!(s=y(t,o))||s.enumerable});return p};var D=p=>T(c({},\"__esModule\",{value:!0}),p);var k={};G(k,{GroupItemMetadataProvider:()=>d});var{convertCompatFormatter:f,Group:h}=Slick;var u=class{constructor(t){this.handleGridClick=(t,e)=>{var r,l,n,i,g,m,C;let s=(r=e==null?void 0:e.grid)!=null?r:this.grid;if(s){var o=s.getDataItem(e.row);if(!(!o||!(o instanceof h)||!this.options.toggleCssClass||!t.target.classList.contains(this.options.toggleCssClass))){t.stopImmediatePropagation(),t.preventDefault();var a=s.getRenderedRange();(n=(l=s.getData()).setRefreshHints)==null||n.call(l,{ignoreDiffsBefore:a.top,ignoreDiffsAfter:a.bottom+1}),o.collapsed?(g=(i=s.getData()).expandGroup)==null||g.call(i,o.groupingKey):(C=(m=s.getData()).collapseGroup)==null||C.call(m,o.groupingKey)}}};this.handleGridKeyDown=(t,e)=>{var l,n,i,g,m,C,b;if(!this.options.enableExpandCollapse||t.key!==\" \"&&t.key!==\"-\"&&t.key!==\"+\")return;let s=(l=e==null?void 0:e.grid)!=null?l:this.grid;if(s){var o=s.getActiveCell();if(o){var a=s.getDataItem(o.row);if(!(!a||!(a instanceof h))&&(t.stopImmediatePropagation(),t.preventDefault(),!(t.key==\"+\"&&!a.collapsed||t.key==\"-\"&&a.collapsed))){var r=s.getRenderedRange();(i=(n=s.getData()).setRefreshHints)==null||i.call(n,{ignoreDiffsBefore:r.top,ignoreDiffsAfter:r.bottom+1}),a.collapsed?(m=(g=s.getData()).expandGroup)==null||m.call(g,a.groupingKey):(b=(C=s.getData()).collapseGroup)==null||b.call(C,a.groupingKey)}}}};this.groupCellPosition=()=>{var r,l,n,i;let t={cell:0,colspan:\"*\"};if(!this.options.groupRowTotals||!this.grid)return t;for(var e=this.grid.getColumns(),s,o=0;o<e.length;o++)if(s=e[o],!((l=(r=this.options).hasSummaryType)!=null&&l.call(r,e[o]))){t.cell=o;break}t.colspan=0;for(var o=t.cell+1;o<e.length;o++){var a=e[o];if(!((i=(n=this.options).hasSummaryType)!=null&&i.call(n,a))&&!!(s!=null&&s.frozen)==!!(a!=null&&a.frozen))t.colspan++;else break}return t.colspan=Math.max(1,t.colspan),t};this.getGroupRowMetadata=t=>{let e=this.options,s=this.groupCellPosition(),o={selectable:!1,focusable:e.groupFocusable,cssClasses:e.groupCssClass+\" \"+e.groupLevelPrefix+(t==null?void 0:t.level),columns:{[s.cell]:{colspan:s.colspan,cssClasses:e.groupCellCssClass,format:e.groupFormat,editor:null}}};return e.groupRowTotals&&(o.format=e.totalsFormat),o};this.getTotalsRowMetadata=t=>{var s;let e=this.options;return{selectable:!1,focusable:e.totalsFocusable,cssClasses:e.totalsCssClass+\" \"+e.groupLevelPrefix+((s=t==null?void 0:t.group)==null?void 0:s.level),format:e.totalsFormat,editor:null}};var e,s,o,a;this.options=Object.assign({},u.defaults,t),(s=(e=this.options).groupFormat)!=null||(e.groupFormat=t!=null&&t.groupFormatter?f(t.groupFormatter):r=>u.defaultGroupFormat(r,this.options)),(a=(o=this.options).totalsFormat)!=null||(o.totalsFormat=t!=null&&t.totalsFormatter?f(t.totalsFormatter):r=>u.defaultTotalsFormat(r,this.grid))}static defaultGroupFormat(t,e){e!=null||(e=u.defaults);let s=t.item;if(!e.enableExpandCollapse)return s==null?void 0:s.title;let o=s.level*e.groupIndentation;return`<span class=\"${t.escape(e.toggleCssClass+\" \"+(s.collapsed?e.toggleCollapsedCssClass:e.toggleExpandedCssClass))}\" style=\"margin-left: ${o}px\">",
          "2: <span class=\"${t.escape(e.groupTitleCssClass)}\" level=\"${t.escape(s.level)}\">${s.title}</span>`}static defaultTotalsFormat(t,e){var o,a,r,l,n;var s=t.item;return!s.__groupTotals&&s.totals&&(t.item=t.item.totals),(n=(l=(a=(o=t.column)==null?void 0:o.groupTotalsFormatter)==null?void 0:a.call(o,s,t.column))!=null?l:(r=e==null?void 0:e.groupTotalsFormatter)==null?void 0:r.call(e,s,t.column))!=null?n:\"\"}init(t){this.grid=t,t.onClick.subscribe(this.handleGridClick),t.onKeyDown.subscribe(this.handleGridKeyDown)}destroy(){var t,e;this.grid&&((t=this.grid.onClick)==null||t.unsubscribe(this.handleGridClick),(e=this.grid.onKeyDown)==null||e.unsubscribe(this.handleGridKeyDown))}getOptions(){return this.options}setOptions(t){Object.assign(this.options,t)}},d=u;d.defaults={enableExpandCollapse:!0,groupCellCssClass:\"slick-group-cell\",groupCssClass:\"slick-group\",groupFocusable:!0,groupIndentation:15,groupLevelPrefix:\"slick-group-level-\",groupTitleCssClass:\"slick-group-title\",hasSummaryType:t=>t.summaryType&&t.summaryType!=-1,totalsCssClass:\"slick-group-totals\",toggleCssClass:\"slick-group-toggle\",toggleCollapsedCssClass:\"collapsed\",toggleExpandedCssClass:\"expanded\",totalsFocusable:!1};return D(k);})();",
          "",
          "[Added Lines]",
          "1: var Slick=Slick||{};Slick._=(()=>{var c=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var v=Object.prototype.hasOwnProperty;var G=(p,t)=>{for(var e in t)c(p,e,{get:t[e],enumerable:!0})},T=(p,t,e,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let o of F(t))!v.call(p,o)&&o!==e&&c(p,o,{get:()=>t[o],enumerable:!(s=y(t,o))||s.enumerable});return p};var D=p=>T(c({},\"__esModule\",{value:!0}),p);var k={};G(k,{GroupItemMetadataProvider:()=>d});var{convertCompatFormatter:f,Group:h}=Slick;var u=class{constructor(t){this.handleGridClick=(t,e)=>{var r,l,n,i,g,C,m;let s=(r=e==null?void 0:e.grid)!=null?r:this.grid;if(s){var o=s.getDataItem(e.row);if(!(!o||!(o instanceof h)||!this.options.toggleCssClass||!t.target.classList.contains(this.options.toggleCssClass))){t.stopImmediatePropagation(),t.preventDefault();var a=s.getRenderedRange();(n=(l=s.getData()).setRefreshHints)==null||n.call(l,{ignoreDiffsBefore:a.top,ignoreDiffsAfter:a.bottom+1}),o.collapsed?(g=(i=s.getData()).expandGroup)==null||g.call(i,o.groupingKey):(m=(C=s.getData()).collapseGroup)==null||m.call(C,o.groupingKey)}}};this.handleGridKeyDown=(t,e)=>{var l,n,i,g,C,m,b;if(!this.options.enableExpandCollapse||t.key!==\" \"&&t.key!==\"-\"&&t.key!==\"+\")return;let s=(l=e==null?void 0:e.grid)!=null?l:this.grid;if(s){var o=s.getActiveCell();if(o){var a=s.getDataItem(o.row);if(!(!a||!(a instanceof h))&&(t.stopImmediatePropagation(),t.preventDefault(),!(t.key==\"+\"&&!a.collapsed||t.key==\"-\"&&a.collapsed))){var r=s.getRenderedRange();(i=(n=s.getData()).setRefreshHints)==null||i.call(n,{ignoreDiffsBefore:r.top,ignoreDiffsAfter:r.bottom+1}),a.collapsed?(C=(g=s.getData()).expandGroup)==null||C.call(g,a.groupingKey):(b=(m=s.getData()).collapseGroup)==null||b.call(m,a.groupingKey)}}}};this.groupCellPosition=()=>{var r,l,n,i;let t={cell:0,colspan:\"*\"};if(!this.options.groupRowTotals||!this.grid)return t;for(var e=this.grid.getColumns(),s,o=0;o<e.length;o++)if(s=e[o],!((l=(r=this.options).hasSummaryType)!=null&&l.call(r,e[o]))){t.cell=o;break}t.colspan=0;for(var o=t.cell+1;o<e.length;o++){var a=e[o];if(!((i=(n=this.options).hasSummaryType)!=null&&i.call(n,a))&&!!(s!=null&&s.frozen)==!!(a!=null&&a.frozen))t.colspan++;else break}return t.colspan=Math.max(1,t.colspan),t};this.getGroupRowMetadata=t=>{let e=this.options,s=this.groupCellPosition(),o={selectable:!1,focusable:e.groupFocusable,cssClasses:e.groupCssClass+\" \"+e.groupLevelPrefix+(t==null?void 0:t.level),columns:{[s.cell]:{colspan:s.colspan,cssClasses:e.groupCellCssClass,format:e.groupFormat,editor:null}}};return e.groupRowTotals&&(o.format=e.totalsFormat),o};this.getTotalsRowMetadata=t=>{var s;let e=this.options;return{selectable:!1,focusable:e.totalsFocusable,cssClasses:e.totalsCssClass+\" \"+e.groupLevelPrefix+((s=t==null?void 0:t.group)==null?void 0:s.level),format:e.totalsFormat,editor:null}};var e,s,o,a;this.options=Object.assign({},u.defaults,t),(s=(e=this.options).groupFormat)!=null||(e.groupFormat=t!=null&&t.groupFormatter?f(t.groupFormatter):r=>u.defaultGroupFormat(r,this.options)),(a=(o=this.options).totalsFormat)!=null||(o.totalsFormat=t!=null&&t.totalsFormatter?f(t.totalsFormatter):r=>u.defaultTotalsFormat(r,this.grid))}static defaultGroupFormat(t,e){e!=null||(e=u.defaults);let s=t.item;if(!e.enableExpandCollapse)return s==null?void 0:s.title;let o=s.level*e.groupIndentation;return`<span class=\"${t.escape(e.toggleCssClass+\" \"+(s.collapsed?e.toggleCollapsedCssClass:e.toggleExpandedCssClass))}\" style=\"margin-left: ${o}px\">",
          "2: <span class=\"${t.escape(e.groupTitleCssClass)}\" level=\"${t.escape(s.level)}\">${s.title}</span>`}static defaultTotalsFormat(t,e){var o,a,r,l,n;var s=t.item;return!s.__groupTotals&&s.totals&&(s=s.totals),(n=(l=(a=(o=t.column)==null?void 0:o.groupTotalsFormatter)==null?void 0:a.call(o,s,t.column))!=null?l:(r=e==null?void 0:e.groupTotalsFormatter)==null?void 0:r.call(e,s,t.column))!=null?n:\"\"}init(t){this.grid=t,t.onClick.subscribe(this.handleGridClick),t.onKeyDown.subscribe(this.handleGridKeyDown)}destroy(){var t,e;this.grid&&((t=this.grid.onClick)==null||t.unsubscribe(this.handleGridClick),(e=this.grid.onKeyDown)==null||e.unsubscribe(this.handleGridKeyDown))}getOptions(){return this.options}setOptions(t){Object.assign(this.options,t)}},d=u;d.defaults={enableExpandCollapse:!0,groupCellCssClass:\"slick-group-cell\",groupCssClass:\"slick-group\",groupFocusable:!0,groupIndentation:15,groupLevelPrefix:\"slick-group-level-\",groupTitleCssClass:\"slick-group-title\",hasSummaryType:t=>t.summaryType&&t.summaryType!=-1,totalsCssClass:\"slick-group-totals\",toggleCssClass:\"slick-group-toggle\",toggleCollapsedCssClass:\"collapsed\",toggleExpandedCssClass:\"expanded\",totalsFocusable:!1};return D(k);})();",
          "",
          "---------------"
        ]
      }
    }
  ]
}