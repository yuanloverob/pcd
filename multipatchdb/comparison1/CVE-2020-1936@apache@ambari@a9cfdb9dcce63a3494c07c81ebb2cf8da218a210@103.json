{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b2c404dec0165d6693976a46dacde79e4cff5b2f",
      "candidate_info": {
        "commit_hash": "b2c404dec0165d6693976a46dacde79e4cff5b2f",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/b2c404dec0165d6693976a46dacde79e4cff5b2f",
        "files": [
          "ambari-web/app/mixins/main/dashboard/widgets/editable.js",
          "ambari-web/app/mixins/main/dashboard/widgets/editable_with_limit.js",
          "ambari-web/app/mixins/main/dashboard/widgets/single_numeric_threshold.js",
          "ambari-web/app/views/common/modal_popups/edit_dashboard_widget_popup.js"
        ],
        "message": "AMBARI-25481. Customize Widget Threshold validation issue",
        "before_after_code_files": [
          "ambari-web/app/mixins/main/dashboard/widgets/editable.js||ambari-web/app/mixins/main/dashboard/widgets/editable.js",
          "ambari-web/app/mixins/main/dashboard/widgets/editable_with_limit.js||ambari-web/app/mixins/main/dashboard/widgets/editable_with_limit.js",
          "ambari-web/app/mixins/main/dashboard/widgets/single_numeric_threshold.js||ambari-web/app/mixins/main/dashboard/widgets/single_numeric_threshold.js",
          "ambari-web/app/views/common/modal_popups/edit_dashboard_widget_popup.js||ambari-web/app/views/common/modal_popups/edit_dashboard_widget_popup.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mixins/main/dashboard/widgets/editable.js||ambari-web/app/mixins/main/dashboard/widgets/editable.js": [
          "File: ambari-web/app/mixins/main/dashboard/widgets/editable.js -> ambari-web/app/mixins/main/dashboard/widgets/editable.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:       sliderHandlersManager: App.EditDashboardWidgetPopup.DoubleHandlers.create({",
          "29:         maxValue: 'infinity',",
          "32:       }),",
          "34:       sliderDisabled: true,",
          "",
          "[Removed Lines]",
          "30:         thresholdMin: this.get('thresholdMin'),",
          "31:         thresholdMax: this.get('thresholdMax')",
          "",
          "[Added Lines]",
          "30:         thresholdMin: Number(this.get('thresholdMin')),",
          "31:         thresholdMax: Number(this.get('thresholdMax'))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     });",
          "40:   }",
          "",
          "[Removed Lines]",
          "42: });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-web/app/mixins/main/dashboard/widgets/editable_with_limit.js||ambari-web/app/mixins/main/dashboard/widgets/editable_with_limit.js": [
          "File: ambari-web/app/mixins/main/dashboard/widgets/editable_with_limit.js -> ambari-web/app/mixins/main/dashboard/widgets/editable_with_limit.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:       sliderHandlersManager: App.EditDashboardWidgetPopup.DoubleHandlers.create({",
          "33:         maxValue: parseFloat(this.get('maxValue')),",
          "36:       })",
          "38:     });",
          "",
          "[Removed Lines]",
          "34:         thresholdMin: this.get('thresholdMin'),",
          "35:         thresholdMax: this.get('thresholdMax')",
          "",
          "[Added Lines]",
          "34:         thresholdMin: Number(this.get('thresholdMin')),",
          "35:         thresholdMax: Number(this.get('thresholdMax'))",
          "",
          "---------------"
        ],
        "ambari-web/app/mixins/main/dashboard/widgets/single_numeric_threshold.js||ambari-web/app/mixins/main/dashboard/widgets/single_numeric_threshold.js": [
          "File: ambari-web/app/mixins/main/dashboard/widgets/single_numeric_threshold.js -> ambari-web/app/mixins/main/dashboard/widgets/single_numeric_threshold.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:       widgetView: this,",
          "31:       sliderHandlersManager: App.EditDashboardWidgetPopup.SingleHandler.create({",
          "33:         maxValue: parseFloat(this.get('maxValue'))",
          "34:       }),",
          "",
          "[Removed Lines]",
          "32:         thresholdMin: this.get('thresholdMin'),",
          "",
          "[Added Lines]",
          "32:         thresholdMin: Number(this.get('thresholdMin')),",
          "",
          "---------------"
        ],
        "ambari-web/app/views/common/modal_popups/edit_dashboard_widget_popup.js||ambari-web/app/views/common/modal_popups/edit_dashboard_widget_popup.js": [
          "File: ambari-web/app/views/common/modal_popups/edit_dashboard_widget_popup.js -> ambari-web/app/views/common/modal_popups/edit_dashboard_widget_popup.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:   thresholdMinErrorMessage: function () {",
          "164:     if (!isValidFloat(thresholdMin) || thresholdMin > maxValue || thresholdMin < minValue) {",
          "165:       return Em.I18n.t('dashboard.widgets.error.invalid').format(minValue, maxValue);",
          "166:     }",
          "",
          "[Removed Lines]",
          "160:     var thresholdMin = this.get('thresholdMin');",
          "161:     var thresholdMax = this.get('thresholdMax');",
          "162:     var maxValue = this.get('maxValue');",
          "163:     var minValue = this.get('minValue');",
          "",
          "[Added Lines]",
          "160:     var thresholdMin = Number(this.get('thresholdMin'));",
          "161:     var thresholdMax = Number(this.get('thresholdMax'));",
          "162:     var maxValue = Number(this.get('maxValue'));",
          "163:     var minValue = Number(this.get('minValue'));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "433:   SingleHandler,",
          "434:   DoubleHandlers,",
          "435:   EditDashboardWidgetPopupBody",
          "",
          "[Removed Lines]",
          "436: });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9bbb95355202a329f920887a3dcdeec6dbd3837d",
      "candidate_info": {
        "commit_hash": "9bbb95355202a329f920887a3dcdeec6dbd3837d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9bbb95355202a329f920887a3dcdeec6dbd3837d",
        "files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ],
        "message": "AMBARI-24979 Redirect Hive Pre-upgrade log to a logfile",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:     derby_jars = glob.glob(source_dir + \"/hive2/lib/*derby-*.jar\")",
          "112:     if len(derby_jars) == 1:",
          "113:       classpath = derby_jars[0] + \":\" + classpath",
          "115:     Execute(cmd, user = params.hive_user)",
          "117: if __name__ == \"__main__\":",
          "",
          "[Removed Lines]",
          "114:     cmd = format(\"{java64_home}/bin/java -Djavax.security.auth.useSubjectCredsOnly=false -cp {classpath} org.apache.hadoop.hive.upgrade.acid.PreUpgradeTool -execute\")",
          "",
          "[Added Lines]",
          "114:     cmd = format(\"{java64_home}/bin/java -Djavax.security.auth.useSubjectCredsOnly=false -cp {classpath} org.apache.hadoop.hive.upgrade.acid.PreUpgradeTool -execute &> {hive_log_dir}/pre_upgrade_{target_version}.log\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc38509bd65db2cf8a71fa17167466221ace6768",
      "candidate_info": {
        "commit_hash": "cc38509bd65db2cf8a71fa17167466221ace6768",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/cc38509bd65db2cf8a71fa17167466221ace6768",
        "files": [
          "ambari-server/src/main/python/ambari_server/setupSso.py",
          "ambari-server/src/test/python/TestSetupSso.py"
        ],
        "message": "AMBARI-24390. Filter services eligible for Ambari Single Sign-on Configuration if Kerberos is required but not enabled (amagyar) (#1944) (#1948)",
        "before_after_code_files": [
          "ambari-server/src/main/python/ambari_server/setupSso.py||ambari-server/src/main/python/ambari_server/setupSso.py",
          "ambari-server/src/test/python/TestSetupSso.py||ambari-server/src/test/python/TestSetupSso.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/python/ambari_server/setupSso.py||ambari-server/src/main/python/ambari_server/setupSso.py": [
          "File: ambari-server/src/main/python/ambari_server/setupSso.py -> ambari-server/src/main/python/ambari_server/setupSso.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "53: WILDCARD_FOR_ALL_SERVICES = \"*\"",
          "54: SERVICE_NAME_AMBARI = 'AMBARI'",
          "57: SSO_CONFIG_API_ENTRYPOINT = 'services/AMBARI/components/AMBARI_SERVER/configurations/sso-configuration'",
          "",
          "[Removed Lines]",
          "56: FETCH_SERVICES_FOR_SSO_ENTRYPOINT = \"clusters/%s/services?ServiceInfo/sso_integration_supported=true\"",
          "",
          "[Added Lines]",
          "56: FETCH_SERVICES_FOR_SSO_ENTRYPOINT = \"clusters/%s/services?ServiceInfo/sso_integration_supported=true&fields=ServiceInfo/*\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:   properties[AMBARI_SSO_AUTH_ENABLED] = 'true' if enabled else 'false'",
          "138: def get_eligible_services(properties, admin_login, admin_password, cluster_name):",
          "139:   print_info_msg(\"Fetching SSO enabled services\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: def eligible(service_info):",
          "138:   return service_info['sso_integration_supported'] \\",
          "139:          and (not service_info['sso_integration_requires_kerberos'] or service_info['kerberos_enabled'])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "146:   services = []",
          "148:   if json_data and 'items' in json_data:",
          "154:     if len(services) > 0:",
          "155:       print_info_msg('Found SSO enabled services: %s' % ', '.join(services))",
          "",
          "[Removed Lines]",
          "149:     items = json_data['items']",
          "150:     if len(items) > 0:",
          "151:       for item in items:",
          "152:         services.append(item['ServiceInfo']['service_name'])",
          "",
          "[Added Lines]",
          "152:     services = [item['ServiceInfo']['service_name'] for item in json_data['items'] if eligible(item['ServiceInfo'])]",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestSetupSso.py||ambari-server/src/test/python/TestSetupSso.py": [
          "File: ambari-server/src/test/python/TestSetupSso.py -> ambari-server/src/test/python/TestSetupSso.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "518:                   \"href\": \"http://c7401:8080/api/v1/clusters/cluster1/services/HDFS\",",
          "519:                   \"ServiceInfo\": {",
          "520:                       \"cluster_name\": \"cluster1\",",
          "522:                   }",
          "523:               },",
          "524:               {",
          "525:                   \"href\": \"http://c7401:8080/api/v1/clusters/cluster1/services/ZOOKEPER\",",
          "526:                   \"ServiceInfo\": {",
          "527:                       \"cluster_name\": \"cluster1\",",
          "529:                   }",
          "530:               }",
          "531:             ]",
          "",
          "[Removed Lines]",
          "521:                       \"service_name\": \"HDFS\"",
          "528:                       \"service_name\": \"ZOOKEPER\"",
          "",
          "[Added Lines]",
          "521:                       \"service_name\": \"HDFS\",",
          "522:                       \"sso_integration_supported\": true,",
          "523:                       \"sso_integration_requires_kerberos\": false,",
          "524:                       \"kerberos_enabled\": false",
          "531:                       \"service_name\": \"ZOOKEPER\",",
          "532:                       \"sso_integration_supported\": true,",
          "533:                       \"sso_integration_requires_kerberos\": false,",
          "534:                       \"kerberos_enabled\": false",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "538:           \"href\": \"http://c7401:8080/api/v1/clusters/cluster1/services/HDFS\",",
          "539:           \"ServiceInfo\": {",
          "540:             \"cluster_name\": \"cluster1\",",
          "542:           }",
          "543:         },",
          "544:         {",
          "545:           \"href\": \"http://c7401:8080/api/v1/clusters/cluster1/services/ZOOKEPER\",",
          "546:           \"ServiceInfo\": {",
          "547:             \"cluster_name\": \"cluster1\",",
          "549:           }",
          "550:         }",
          "551:       ]",
          "",
          "[Removed Lines]",
          "541:             \"service_name\": \"HDFS\"",
          "548:             \"service_name\": \"ZOOKEPER\"",
          "",
          "[Added Lines]",
          "547:             \"service_name\": \"HDFS\",",
          "548:             \"sso_integration_supported\": True,",
          "549:             \"sso_integration_requires_kerberos\": False,",
          "550:             \"kerberos_enabled\": False",
          "557:             \"service_name\": \"ZOOKEPER\",",
          "558:             \"sso_integration_supported\": True,",
          "559:             \"sso_integration_requires_kerberos\": False,",
          "560:             \"kerberos_enabled\": False",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be87ee58c3bbd4f315d65836dc5d996211ba3463",
      "candidate_info": {
        "commit_hash": "be87ee58c3bbd4f315d65836dc5d996211ba3463",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/be87ee58c3bbd4f315d65836dc5d996211ba3463",
        "files": [
          "ambari-web/app/controllers/main/service/item.js",
          "ambari-web/test/controllers/main/service/item_test.js"
        ],
        "message": "[AMBARI-24577] Services should display the Stop button if any of their components are started.",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/service/item.js||ambari-web/app/controllers/main/service/item.js",
          "ambari-web/test/controllers/main/service/item_test.js||ambari-web/test/controllers/main/service/item_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/service/item.js||ambari-web/app/controllers/main/service/item.js": [
          "File: ambari-web/app/controllers/main/service/item.js -> ambari-web/app/controllers/main/service/item.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:     return App.MasterComponent.find().toArray().concat(App.SlaveComponent.find().toArray()).filterProperty('service.serviceName', this.get('content.serviceName'));",
          "1177:   }.property('content.serviceName'),",
          "1181:   isStopDisabled: function () {",
          "1182:     if(this.get('isPending')) return true;",
          "1183:     if (App.get('isHaEnabled') && this.get('content.serviceName') == 'HDFS' && this.get('content.hostComponents').filterProperty('componentName', 'NAMENODE').someProperty('workStatus', App.HostComponentStatus.started)) {",
          "1184:       return false;",
          "1185:     }",
          "",
          "[Removed Lines]",
          "1179:   isStartDisabled: Em.computed.or('isPending', 'content.isStarted'),",
          "",
          "[Added Lines]",
          "1179:   isStartDisabled: function () {",
          "1180:     let allComponentsStarted = true;",
          "1181:     if (this.get('isPending')) return true;",
          "1182:     this.get('nonClientServiceComponents').forEach(function (component) {",
          "1183:       if (component.get('installedCount') > 0)",
          "1184:         allComponentsStarted = false;",
          "1185:     });",
          "1186:     return allComponentsStarted && this.get('content.isStarted');",
          "1187:   }.property('content.isStarted', 'isPending'),",
          "1191:     let allComponentsStopped = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1189:     if (this.get('content.serviceName') == 'PXF' && App.HostComponent.find().filterProperty('componentName', 'PXF').someProperty('workStatus', App.HostComponentStatus.started)) {",
          "1190:       return false;",
          "1191:     }",
          "1193:   }.property('content.isStarted','isPending', 'App.isHaEnabled'),",
          "1195:   isSmokeTestDisabled: function () {",
          "",
          "[Removed Lines]",
          "1192:     return !this.get('content.isStarted');",
          "",
          "[Added Lines]",
          "1204:     this.get('nonClientServiceComponents').forEach(function (component) {",
          "1205:       if (component.get('startedCount') > 0)",
          "1206:         allComponentsStopped = false;",
          "1207:     });",
          "1209:     return allComponentsStopped && !this.get('content.isStarted');",
          "",
          "---------------"
        ],
        "ambari-web/test/controllers/main/service/item_test.js||ambari-web/test/controllers/main/service/item_test.js": [
          "File: ambari-web/test/controllers/main/service/item_test.js -> ambari-web/test/controllers/main/service/item_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: describe('App.MainServiceItemController', function () {",
          "60:   describe('#setStartStopState', function () {",
          "61:     var tests = [",
          "62:       {",
          "",
          "[Removed Lines]",
          "56:   App.TestAliases.testAsComputedOr(App.MainServiceItemController.create({",
          "57:     content: Em.Object.create({serviceName: 'S1'})",
          "58:   }), 'isStartDisabled', ['isPending', 'content.isStarted']);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "891:   });",
          "894:   describe(\"#isStopDisabled\", function () {",
          "895:     var tests = [",
          "896:       {",
          "897:         content: {",
          "898:           isStarted: false",
          "899:         },",
          "900:         isPending: true,",
          "901:         disabled: true,",
          "902:         m: \"disabled because of pending\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "890:   describe(\"#isStartDisabled\", function () {",
          "891:     var tests = [",
          "892:       {",
          "893:         content: {",
          "894:           isStarted: true",
          "895:         },",
          "896:         nonClientServiceComponents: [",
          "897:           Em.Object.create({",
          "898:             installedCount: 0",
          "899:           })",
          "900:         ],",
          "901:         isPending: false,",
          "902:         disabled: true,",
          "903:         m: \"disabled since service state is started and no component is stopped\"",
          "904:       },",
          "905:       {",
          "906:         content: {",
          "907:           isStarted: true",
          "908:         },",
          "909:         nonClientServiceComponents: [",
          "910:           Em.Object.create({",
          "911:             installedCount: 0",
          "912:           }),",
          "913:           Em.Object.create({",
          "914:             installedCount: 2",
          "915:           })",
          "916:         ],",
          "917:         isPending: false,",
          "918:         disabled: false,",
          "919:         m: \"enabled although service state is started, 2 components are stopped\"",
          "920:       },",
          "921:       {",
          "922:         content: {",
          "923:           isStarted: false",
          "924:         },",
          "925:         nonClientServiceComponents: [",
          "926:           Em.Object.create({",
          "927:             installedCount: 0",
          "928:           }),",
          "929:           Em.Object.create({",
          "930:             installedCount: 0",
          "931:           })",
          "932:         ],",
          "933:         isPending: false,",
          "934:         disabled: false,",
          "935:         m: \"enabled although all components are stopped service state is not started\"",
          "936:       },",
          "937:       {",
          "938:         content: {",
          "939:           isStarted: true",
          "940:         },",
          "941:         nonClientServiceComponents: [",
          "942:           Em.Object.create({",
          "943:             installedCount: 0",
          "944:           })",
          "945:         ],",
          "946:         isPending: true,",
          "947:         disabled: true,",
          "948:         m: \"disabled since state is pending.\"",
          "949:       },",
          "950:     ];",
          "951:     tests.forEach(function (test) {",
          "952:       it(test.m, function () {",
          "953:         var mainServiceItemController = App.MainServiceItemController.create({content: test.content, isPending: test.isPending, nonClientServiceComponents: test.nonClientServiceComponents});",
          "954:         expect(mainServiceItemController.get('isStartDisabled')).to.equal(test.disabled);",
          "955:       });",
          "956:     });",
          "957:   });",
          "965:         nonClientServiceComponents: [",
          "966:           Em.Object.create({",
          "967:             startedCount: 0",
          "968:           })",
          "969:         ],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "905:         content: {",
          "906:           isStarted: true",
          "907:         },",
          "908:         isPending: false,",
          "909:         disabled: false,",
          "911:       },",
          "912:       {",
          "913:         content: {",
          "914:           isStarted: false",
          "915:         },",
          "916:         isPending: false,",
          "917:         disabled: true,",
          "919:       }",
          "920:     ];",
          "921:     tests.forEach(function (test) {",
          "922:       it(test.m, function () {",
          "924:         expect(mainServiceItemController.get('isStopDisabled')).to.equal(test.disabled);",
          "925:       });",
          "926:     });",
          "",
          "[Removed Lines]",
          "910:         m: \"enabled because healthStatus is green and pending is false\"",
          "918:         m: \"disabled because healthStatus is not green\"",
          "923:         var mainServiceItemController = App.MainServiceItemController.create({content: test.content, isPending: test.isPending});",
          "",
          "[Added Lines]",
          "978:         nonClientServiceComponents: [",
          "979:           Em.Object.create({",
          "980:             startedCount: 0",
          "981:           })",
          "982:         ],",
          "983:         isPending: false,",
          "984:         disabled: false,",
          "985:         m: \"enabled because healthStatus is green although no components are started\"",
          "986:       },",
          "987:       {",
          "988:         content: {",
          "989:           isStarted: false",
          "990:         },",
          "991:         nonClientServiceComponents: [",
          "992:           Em.Object.create({",
          "993:             startedCount: 1",
          "994:           })",
          "995:         ],",
          "998:         m: \"enabled because atleast 1 component is started.\"",
          "1004:         nonClientServiceComponents: [",
          "1005:           Em.Object.create({",
          "1006:             startedCount: 0",
          "1007:           })",
          "1008:         ],",
          "1011:         m: \"disabled because healthStatus is not green and no started components\"",
          "1016:         var mainServiceItemController = App.MainServiceItemController.create({content: test.content, isPending: test.isPending, nonClientServiceComponents: test.nonClientServiceComponents});",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d4dec96387b863dfae1aaa8724db8c4f350d73f",
      "candidate_info": {
        "commit_hash": "9d4dec96387b863dfae1aaa8724db8c4f350d73f",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9d4dec96387b863dfae1aaa8724db8c4f350d73f",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java"
        ],
        "message": "AMBARI-25444. Deploy fails with 401:Unauthorized on HDP-GPL; whereas url is actually accessible with credentials supplied by Releng team (aonishuk)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RepositoryResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:         setResourceProperty(resource, REPOSITORY_REPO_NAME_PROPERTY_ID, response.getRepoName(), requestedIds);",
          "180:         setResourceProperty(resource, REPOSITORY_DISTRIBUTION_PROPERTY_ID, response.getDistribution(), requestedIds);",
          "181:         setResourceProperty(resource, REPOSITORY_COMPONENTS_PROPERTY_ID, response.getComponents(), requestedIds);",
          "183:         setResourceProperty(resource, REPOSITORY_OS_TYPE_PROPERTY_ID, response.getOsType(), requestedIds);",
          "184:         setResourceProperty(resource, REPOSITORY_REPO_ID_PROPERTY_ID, response.getRepoId(), requestedIds);",
          "185:         setResourceProperty(resource, REPOSITORY_MIRRORS_LIST_PROPERTY_ID, response.getMirrorsList(), requestedIds);",
          "187:         setResourceProperty(resource, REPOSITORY_UNIQUE_PROPERTY_ID, response.isUnique(), requestedIds);",
          "188:         setResourceProperty(resource, REPOSITORY_TAGS_PROPERTY_ID, response.getTags(), requestedIds);",
          "189:         setResourceProperty(resource, REPOSITORY_APPLICABLE_SERVICES_PROPERTY_ID, response.getApplicableServices(), requestedIds);",
          "",
          "[Removed Lines]",
          "182:         setResourceProperty(resource, REPOSITORY_BASE_URL_PROPERTY_ID, URLCredentialsHider.hideCredentials(response.getBaseUrl()), requestedIds);",
          "186:         setResourceProperty(resource, REPOSITORY_DEFAULT_BASE_URL_PROPERTY_ID, URLCredentialsHider.hideCredentials(response.getDefaultBaseUrl()), requestedIds);",
          "",
          "[Added Lines]",
          "182:         setResourceProperty(resource, REPOSITORY_BASE_URL_PROPERTY_ID, response.getBaseUrl(), requestedIds);",
          "186:         setResourceProperty(resource, REPOSITORY_DEFAULT_BASE_URL_PROPERTY_ID, response.getDefaultBaseUrl(), requestedIds);",
          "",
          "---------------"
        ]
      }
    }
  ]
}