{
  "cve_id": "CVE-2020-8552",
  "cve_desc": "The Kubernetes API server component in versions prior to 1.15.9, 1.16.0-1.16.6, and 1.17.0-1.17.2 has been found to be vulnerable to a denial of service attack via successful API requests.",
  "repo": "kubernetes/kubernetes",
  "patch_hash": "5978856c4c7f10737a11c9540fe60b8475beecbb",
  "patch_info": {
    "commit_hash": "5978856c4c7f10737a11c9540fe60b8475beecbb",
    "repo": "kubernetes/kubernetes",
    "commit_url": "https://github.com/kubernetes/kubernetes/commit/5978856c4c7f10737a11c9540fe60b8475beecbb",
    "files": [
      "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/BUILD",
      "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go",
      "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go",
      "staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go"
    ],
    "message": "Merge pull request #87669 from logicalhan/client-label\n\nremove client label from apiserver request count metric since it is unbounded",
    "before_after_code_files": [
      "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go",
      "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go",
      "staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go||staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go"
    ]
  },
  "patch_diff": {
    "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go": [
      "File: staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go -> staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  \"k8s.io/apimachinery/pkg/apis/meta/v1/validation\"",
      "33:  \"k8s.io/apimachinery/pkg/types\"",
      "35:  utilsets \"k8s.io/apimachinery/pkg/util/sets\"",
      "36:  \"k8s.io/apiserver/pkg/endpoints/request\"",
      "37:  \"k8s.io/apiserver/pkg/features\"",
      "",
      "[Removed Lines]",
      "34:  utilnet \"k8s.io/apimachinery/pkg/util/net\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:  requestCounter = compbasemetrics.NewCounterVec(",
      "66:   &compbasemetrics.CounterOpts{",
      "67:    Name:           \"apiserver_request_total\",",
      "69:    StabilityLevel: compbasemetrics.ALPHA,",
      "70:   },",
      "76:  )",
      "77:  longRunningRequestGauge = compbasemetrics.NewGaugeVec(",
      "78:   &compbasemetrics.GaugeOpts{",
      "",
      "[Removed Lines]",
      "68:    Help:           \"Counter of apiserver requests broken out for each verb, dry run value, group, version, resource, scope, component, client, and HTTP response contentType and code.\",",
      "75:   []string{\"verb\", \"dry_run\", \"group\", \"version\", \"resource\", \"subresource\", \"scope\", \"component\", \"client\", \"contentType\", \"code\"},",
      "",
      "[Added Lines]",
      "67:    Help:           \"Counter of apiserver requests broken out for each verb, dry run value, group, version, resource, scope, component, and HTTP response contentType and code.\",",
      "74:   []string{\"verb\", \"dry_run\", \"group\", \"version\", \"resource\", \"subresource\", \"scope\", \"component\", \"contentType\", \"code\"},",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "256: func MonitorRequest(req *http.Request, verb, group, version, resource, subresource, scope, component, contentType string, httpCode, respSize int, elapsed time.Duration) {",
      "257:  reportedVerb := cleanVerb(verb, req)",
      "258:  dryRun := cleanDryRun(req.URL)",
      "260:  elapsedSeconds := elapsed.Seconds()",
      "262:  requestLatencies.WithLabelValues(reportedVerb, dryRun, group, version, resource, subresource, scope, component).Observe(elapsedSeconds)",
      "264:  if verb == \"GET\" || verb == \"LIST\" {",
      "",
      "[Removed Lines]",
      "259:  client := cleanUserAgent(utilnet.GetHTTPClient(req))",
      "261:  requestCounter.WithLabelValues(reportedVerb, dryRun, group, version, resource, subresource, scope, component, client, contentType, codeToString(httpCode)).Inc()",
      "",
      "[Added Lines]",
      "259:  requestCounter.WithLabelValues(reportedVerb, dryRun, group, version, resource, subresource, scope, component, contentType, codeToString(httpCode)).Inc()",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "376:  return strings.Join(utilsets.NewString(dryRun...).List(), \",\")",
      "377: }",
      "393: type ResponseWriterDelegator struct {",
      "394:  http.ResponseWriter",
      "",
      "[Removed Lines]",
      "379: func cleanUserAgent(ua string) string {",
      "381:  if strings.HasPrefix(ua, \"Mozilla/\") {",
      "382:   return \"Browser\"",
      "383:  }",
      "385:  if kubectlExeRegexp.MatchString(ua) {",
      "387:   ua = kubectlExeRegexp.ReplaceAllString(ua, \"$1\")",
      "388:  }",
      "389:  return ua",
      "390: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go": [
      "File: staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go -> staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go||staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go": [
      "File: staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go -> staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "254:  }",
      "256:  expected := strings.NewReader(`",
      "258:         # TYPE apiserver_request_total counter",
      "262: `)",
      "263:  if err := testutil.GatherAndCompare(legacyregistry.DefaultGatherer, expected, \"apiserver_request_total\"); err != nil {",
      "264:   t.Error(err)",
      "",
      "[Removed Lines]",
      "257:         # HELP apiserver_request_total [ALPHA] Counter of apiserver requests broken out for each verb, dry run value, group, version, resource, scope, component, client, and HTTP response contentType and code.",
      "259:         apiserver_request_total{client=\"unknown\",code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/healthz\",verb=\"GET\",version=\"\"} 1",
      "260:         apiserver_request_total{client=\"unknown\",code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/livez\",verb=\"GET\",version=\"\"} 1",
      "261:         apiserver_request_total{client=\"unknown\",code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/readyz\",verb=\"GET\",version=\"\"} 1",
      "",
      "[Added Lines]",
      "257:         # HELP apiserver_request_total [ALPHA] Counter of apiserver requests broken out for each verb, dry run value, group, version, resource, scope, component, and HTTP response contentType and code.",
      "259:         apiserver_request_total{code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/healthz\",verb=\"GET\",version=\"\"} 1",
      "260:         apiserver_request_total{code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/livez\",verb=\"GET\",version=\"\"} 1",
      "261:         apiserver_request_total{code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/readyz\",verb=\"GET\",version=\"\"} 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cc3190968b1f14ddf4067abef849fc41bd6068dc",
      "candidate_info": {
        "commit_hash": "cc3190968b1f14ddf4067abef849fc41bd6068dc",
        "repo": "kubernetes/kubernetes",
        "commit_url": "https://github.com/kubernetes/kubernetes/commit/cc3190968b1f14ddf4067abef849fc41bd6068dc",
        "files": [
          "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/BUILD",
          "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go",
          "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go"
        ],
        "message": "remove client label from apiserver request count metric since it is unbounded\n\nChange-Id: I3a9eacebc9d9dc9ed6347260d9378cdcb5743431",
        "before_after_code_files": [
          "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go",
          "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/kubernetes/kubernetes/pull/87669"
        ],
        "olp_code_files": {
          "patch": [
            "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go",
            "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go"
          ],
          "candidate": [
            "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go",
            "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go"
          ]
        }
      },
      "candidate_diff": {
        "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go": [
          "File: staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go -> staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  \"k8s.io/apimachinery/pkg/apis/meta/v1/validation\"",
          "33:  \"k8s.io/apimachinery/pkg/types\"",
          "35:  utilsets \"k8s.io/apimachinery/pkg/util/sets\"",
          "36:  \"k8s.io/apiserver/pkg/endpoints/request\"",
          "37:  \"k8s.io/apiserver/pkg/features\"",
          "",
          "[Removed Lines]",
          "34:  utilnet \"k8s.io/apimachinery/pkg/util/net\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:  requestCounter = compbasemetrics.NewCounterVec(",
          "66:   &compbasemetrics.CounterOpts{",
          "67:    Name:           \"apiserver_request_total\",",
          "69:    StabilityLevel: compbasemetrics.ALPHA,",
          "70:   },",
          "76:  )",
          "77:  longRunningRequestGauge = compbasemetrics.NewGaugeVec(",
          "78:   &compbasemetrics.GaugeOpts{",
          "",
          "[Removed Lines]",
          "68:    Help:           \"Counter of apiserver requests broken out for each verb, dry run value, group, version, resource, scope, component, client, and HTTP response contentType and code.\",",
          "75:   []string{\"verb\", \"dry_run\", \"group\", \"version\", \"resource\", \"subresource\", \"scope\", \"component\", \"client\", \"contentType\", \"code\"},",
          "",
          "[Added Lines]",
          "67:    Help:           \"Counter of apiserver requests broken out for each verb, dry run value, group, version, resource, scope, component, and HTTP response contentType and code.\",",
          "74:   []string{\"verb\", \"dry_run\", \"group\", \"version\", \"resource\", \"subresource\", \"scope\", \"component\", \"contentType\", \"code\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "256: func MonitorRequest(req *http.Request, verb, group, version, resource, subresource, scope, component, contentType string, httpCode, respSize int, elapsed time.Duration) {",
          "257:  reportedVerb := cleanVerb(verb, req)",
          "258:  dryRun := cleanDryRun(req.URL)",
          "260:  elapsedSeconds := elapsed.Seconds()",
          "262:  requestLatencies.WithLabelValues(reportedVerb, dryRun, group, version, resource, subresource, scope, component).Observe(elapsedSeconds)",
          "264:  if verb == \"GET\" || verb == \"LIST\" {",
          "",
          "[Removed Lines]",
          "259:  client := cleanUserAgent(utilnet.GetHTTPClient(req))",
          "261:  requestCounter.WithLabelValues(reportedVerb, dryRun, group, version, resource, subresource, scope, component, client, contentType, codeToString(httpCode)).Inc()",
          "",
          "[Added Lines]",
          "259:  requestCounter.WithLabelValues(reportedVerb, dryRun, group, version, resource, subresource, scope, component, contentType, codeToString(httpCode)).Inc()",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "376:  return strings.Join(utilsets.NewString(dryRun...).List(), \",\")",
          "377: }",
          "393: type ResponseWriterDelegator struct {",
          "394:  http.ResponseWriter",
          "",
          "[Removed Lines]",
          "379: func cleanUserAgent(ua string) string {",
          "381:  if strings.HasPrefix(ua, \"Mozilla/\") {",
          "382:   return \"Browser\"",
          "383:  }",
          "385:  if kubectlExeRegexp.MatchString(ua) {",
          "387:   ua = kubectlExeRegexp.ReplaceAllString(ua, \"$1\")",
          "388:  }",
          "389:  return ua",
          "390: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go": [
          "File: staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go -> staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "75cf4d79f2c52a122d786812eaaed8557e928552",
      "candidate_info": {
        "commit_hash": "75cf4d79f2c52a122d786812eaaed8557e928552",
        "repo": "kubernetes/kubernetes",
        "commit_url": "https://github.com/kubernetes/kubernetes/commit/75cf4d79f2c52a122d786812eaaed8557e928552",
        "files": [
          "staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go"
        ],
        "message": "remove client label from healthz metric test\n\nChange-Id: I4082ff771e5912c68e2811cab07c4d488ab014ac",
        "before_after_code_files": [
          "staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go||staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/kubernetes/kubernetes/pull/87669"
        ],
        "olp_code_files": {
          "patch": [
            "staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go||staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go"
          ],
          "candidate": [
            "staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go||staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go"
          ]
        }
      },
      "candidate_diff": {
        "staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go||staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go": [
          "File: staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go -> staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:  }",
          "256:  expected := strings.NewReader(`",
          "258:         # TYPE apiserver_request_total counter",
          "262: `)",
          "263:  if err := testutil.GatherAndCompare(legacyregistry.DefaultGatherer, expected, \"apiserver_request_total\"); err != nil {",
          "264:   t.Error(err)",
          "",
          "[Removed Lines]",
          "257:         # HELP apiserver_request_total [ALPHA] Counter of apiserver requests broken out for each verb, dry run value, group, version, resource, scope, component, client, and HTTP response contentType and code.",
          "259:         apiserver_request_total{client=\"unknown\",code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/healthz\",verb=\"GET\",version=\"\"} 1",
          "260:         apiserver_request_total{client=\"unknown\",code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/livez\",verb=\"GET\",version=\"\"} 1",
          "261:         apiserver_request_total{client=\"unknown\",code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/readyz\",verb=\"GET\",version=\"\"} 1",
          "",
          "[Added Lines]",
          "257:         # HELP apiserver_request_total [ALPHA] Counter of apiserver requests broken out for each verb, dry run value, group, version, resource, scope, component, and HTTP response contentType and code.",
          "259:         apiserver_request_total{code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/healthz\",verb=\"GET\",version=\"\"} 1",
          "260:         apiserver_request_total{code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/livez\",verb=\"GET\",version=\"\"} 1",
          "261:         apiserver_request_total{code=\"200\",component=\"\",contentType=\"text/plain; charset=utf-8\",dry_run=\"\",group=\"\",resource=\"\",scope=\"\",subresource=\"/readyz\",verb=\"GET\",version=\"\"} 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0a127889608b28ea2f3d84d6a95be2a38383015",
      "candidate_info": {
        "commit_hash": "f0a127889608b28ea2f3d84d6a95be2a38383015",
        "repo": "kubernetes/kubernetes",
        "commit_url": "https://github.com/kubernetes/kubernetes/commit/f0a127889608b28ea2f3d84d6a95be2a38383015",
        "files": [
          "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/BUILD",
          "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go"
        ],
        "message": "blank out value for unbounded client label\n\nChange-Id: If179557706cbecab0cf16417c8cf2c5536b02559",
        "before_after_code_files": [
          "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go"
          ],
          "candidate": [
            "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go"
          ]
        }
      },
      "candidate_diff": {
        "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go": [
          "File: staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go -> staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  \"k8s.io/apimachinery/pkg/apis/meta/v1/validation\"",
          "31:  \"k8s.io/apimachinery/pkg/types\"",
          "33:  utilsets \"k8s.io/apimachinery/pkg/util/sets\"",
          "34:  \"k8s.io/apiserver/pkg/endpoints/request\"",
          "35:  \"k8s.io/apiserver/pkg/features\"",
          "",
          "[Removed Lines]",
          "32:  utilnet \"k8s.io/apimachinery/pkg/util/net\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248: func MonitorRequest(req *http.Request, verb, group, version, resource, subresource, scope, component, contentType string, httpCode, respSize int, elapsed time.Duration) {",
          "249:  reportedVerb := cleanVerb(verb, req)",
          "250:  dryRun := cleanDryRun(req.URL)",
          "252:  elapsedMicroseconds := float64(elapsed / time.Microsecond)",
          "253:  elapsedSeconds := elapsed.Seconds()",
          "254:  requestCounter.WithLabelValues(reportedVerb, dryRun, group, version, resource, subresource, scope, component, client, contentType, codeToString(httpCode)).Inc()",
          "",
          "[Removed Lines]",
          "251:  client := cleanUserAgent(utilnet.GetHTTPClient(req))",
          "",
          "[Added Lines]",
          "251:  client := \"\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27c1711acd4c3702787c303e7a7afcfd0a305348",
      "candidate_info": {
        "commit_hash": "27c1711acd4c3702787c303e7a7afcfd0a305348",
        "repo": "kubernetes/kubernetes",
        "commit_url": "https://github.com/kubernetes/kubernetes/commit/27c1711acd4c3702787c303e7a7afcfd0a305348",
        "files": [
          "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/BUILD",
          "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go"
        ],
        "message": "blank out value for unbounded client label\n\nChange-Id: If179557706cbecab0cf16417c8cf2c5536b02559",
        "before_after_code_files": [
          "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go"
          ],
          "candidate": [
            "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go"
          ]
        }
      },
      "candidate_diff": {
        "staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go||staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go": [
          "File: staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go -> staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  \"k8s.io/apimachinery/pkg/apis/meta/v1/validation\"",
          "34:  \"k8s.io/apimachinery/pkg/types\"",
          "36:  utilsets \"k8s.io/apimachinery/pkg/util/sets\"",
          "37:  \"k8s.io/apiserver/pkg/endpoints/request\"",
          "38:  \"k8s.io/apiserver/pkg/features\"",
          "",
          "[Removed Lines]",
          "35:  utilnet \"k8s.io/apimachinery/pkg/util/net\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298: func MonitorRequest(req *http.Request, verb, group, version, resource, subresource, scope, component, contentType string, httpCode, respSize int, elapsed time.Duration) {",
          "299:  reportedVerb := cleanVerb(verb, req)",
          "300:  dryRun := cleanDryRun(req.URL)",
          "302:  elapsedMicroseconds := float64(elapsed / time.Microsecond)",
          "303:  elapsedSeconds := elapsed.Seconds()",
          "304:  requestCounter.WithLabelValues(reportedVerb, dryRun, group, version, resource, subresource, scope, component, client, contentType, codeToString(httpCode)).Inc()",
          "",
          "[Removed Lines]",
          "301:  client := cleanUserAgent(utilnet.GetHTTPClient(req))",
          "",
          "[Added Lines]",
          "301:  client := \"\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}