{
  "cve_id": "CVE-2024-12678",
  "cve_desc": "Nomad Community and Nomad Enterprise (\"Nomad\") allocations are vulnerable to privilege escalation within a namespace through unredacted workload identity tokens. This vulnerability, identified as CVE-2024-12678, is fixed in Nomad Community Edition 1.9.4 and Nomad Enterprise 1.9.4, 1.8.8, and 1.7.16.",
  "repo": "hashicorp/nomad",
  "patch_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
  "patch_info": {
    "commit_hash": "359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "repo": "hashicorp/nomad",
    "commit_url": "https://github.com/hashicorp/nomad/commit/359a71861ef044cb5d749a36ff0e44b172c8f1a6",
    "files": [
      ".changelog/24683.txt",
      "command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go",
      "nomad/structs/structs.go"
    ],
    "message": "Backport of sec: fix alloc workload identity namespace permission into release/1.9.x (#24685)\n\nCo-authored-by: Deniz Onur Duzgun <59659739+dduzgun-security@users.noreply.github.com>",
    "before_after_code_files": [
      "command/agent/node_endpoint.go||command/agent/node_endpoint.go",
      "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go",
      "nomad/structs/structs.go||nomad/structs/structs.go"
    ]
  },
  "patch_diff": {
    "command/agent/node_endpoint.go||command/agent/node_endpoint.go": [
      "File: command/agent/node_endpoint.go -> command/agent/node_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "105:   out.Allocs = make([]*structs.Allocation, 0)",
      "106:  }",
      "107:  for _, alloc := range out.Allocs {",
      "108:   alloc.SetEventDisplayMessages()",
      "109:  }",
      "110:  return out.Allocs, nil",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "108:   alloc = alloc.Sanitize()",
      "",
      "---------------"
    ],
    "nomad/alloc_endpoint.go||nomad/alloc_endpoint.go": [
      "File: nomad/alloc_endpoint.go -> nomad/alloc_endpoint.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "172:    }",
      "176:    if out != nil {",
      "178:     if !aclObj.AllowClientOp() && !allowNsOp(aclObj, out.Namespace) {",
      "179:      return structs.NewErrUnknownAllocation(args.AllocID)",
      "",
      "[Removed Lines]",
      "175:    reply.Alloc = out",
      "",
      "[Added Lines]",
      "176:     out = out.Sanitize()",
      "177:     reply.Alloc = out",
      "",
      "---------------"
    ],
    "nomad/structs/structs.go||nomad/structs/structs.go": [
      "File: nomad/structs/structs.go -> nomad/structs/structs.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "11199:  return a.ID",
      "11200: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11205: func (a *Allocation) Sanitize() *Allocation {",
      "11206:  if a == nil {",
      "11207:   return nil",
      "11208:  }",
      "11210:  if a.SignedIdentities == nil {",
      "11211:   return a",
      "11212:  }",
      "11214:  clean := a.Copy()",
      "11215:  clean.SignedIdentities = nil",
      "11216:  return clean",
      "11217: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e5e26c8eb34c40263d1557f7e6f948c92fc57ca8",
      "candidate_info": {
        "commit_hash": "e5e26c8eb34c40263d1557f7e6f948c92fc57ca8",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/e5e26c8eb34c40263d1557f7e6f948c92fc57ca8",
        "files": [
          "e2e/docker/docker_test.go",
          "e2e/docker/input/docker_config.hcl",
          "e2e/docker/input/registry-auths.hcl",
          "e2e/docker_registry/registry-auths.hcl",
          "e2e/podman/podman_test.go",
          "e2e/terraform/etc/nomad.d/client-linux.hcl"
        ],
        "message": "backport of commit a22e56390e38efc3c25fe185d01d8df6cc6b40fc (#24235)\n\nCo-authored-by: Piotr Kazmierczak <470696+pkazmierczak@users.noreply.github.com>",
        "before_after_code_files": [
          "e2e/docker/docker_test.go||e2e/docker/docker_test.go",
          "e2e/docker/input/docker_config.hcl||e2e/docker/input/docker_config.hcl",
          "e2e/docker/input/registry-auths.hcl||e2e/docker/input/registry-auths.hcl",
          "e2e/podman/input/registry-auths.hcl||e2e/docker_registry/registry-auths.hcl",
          "e2e/podman/podman_test.go||e2e/podman/podman_test.go",
          "e2e/terraform/etc/nomad.d/client-linux.hcl||e2e/terraform/etc/nomad.d/client-linux.hcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "e2e/docker/docker_test.go||e2e/docker/docker_test.go": [
          "File: e2e/docker/docker_test.go -> e2e/docker/docker_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  _, sedCleanup := jobs3.Submit(t,",
          "61:   jobs3.Var(\"registry_address\", address),",
          "62:   jobs3.Var(\"user\", \"root\"),",
          "63:   jobs3.Var(\"helper_dir\", \"/usr/local/bin\"),",
          "",
          "[Removed Lines]",
          "60:   \"./input/registry-auths.hcl\",",
          "",
          "[Added Lines]",
          "60:   \"../docker_registry/registry-auths.hcl\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   jobs3.Timeout(20*time.Second),",
          "68:  )",
          "69:  t.Cleanup(sedCleanup)",
          "70: }",
          "72: func testRedis(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:  _, dockerConfCleanup := jobs3.Submit(t,",
          "72:   \"../docker_registry/registry-auths.hcl\",",
          "73:   jobs3.Var(\"registry_address\", address),",
          "74:   jobs3.Var(\"user\", \"root\"),",
          "75:   jobs3.Var(\"docker_conf_dir\", \"/etc/docker\"),",
          "76:   jobs3.WaitComplete(\"create-conf\"),",
          "77:   jobs3.Timeout(20*time.Second),",
          "78:  )",
          "79:  t.Cleanup(dockerConfCleanup)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78: }",
          "80: func testAuthBasic(t *testing.T) {",
          "82:  regAddr, regPort := findService(t, \"registry\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:  t.Skip(\"test disabled until we have a local docker registry setup with tf\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93: }",
          "95: func testAuthFileStatic(t *testing.T) {",
          "97:  regAddr, regPort := findService(t, \"registry\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:  t.Skip(\"test disabled until we have a local docker registry setup with tf\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "108: }",
          "110: func testAuthHelper(t *testing.T) {",
          "112:  regAddr, regPort := findService(t, \"registry\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:  t.Skip(\"test disabled until we have a local docker registry setup with tf\")",
          "",
          "---------------"
        ],
        "e2e/docker/input/docker_config.hcl||e2e/docker/input/docker_config.hcl": [
          "File: e2e/docker/input/docker_config.hcl -> e2e/docker/input/docker_config.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Copyright (c) HashiCorp, Inc.",
          "2: # SPDX-License-Identifier: BUSL-1.1",
          "4: variable \"registry_address\" {",
          "5:   type        = string",
          "6:   description = \"The HTTP address of the local registry\"",
          "7: }",
          "9: variable \"docker_conf_dir\" {",
          "10:   type        = string",
          "11:   description = \"The directory in which daemon.json will be written.\"",
          "12:   default     = \"/tmp\"",
          "13: }",
          "15: variable \"user\" {",
          "16:   type        = string",
          "17:   description = \"The user to create files as. Should be root in e2e.\"",
          "18:   # no default because dealing with root files is annoying locally",
          "19:   # try -var=user=$USER for local development",
          "20: }",
          "22: job \"configure-docker\" {",
          "23:   type = \"sysbatch\"",
          "25:   constraint {",
          "26:     attribute = \"${attr.kernel.name}\"",
          "27:     value     = \"linux\"",
          "28:   }",
          "30:   group \"create-conf\" {",
          "31:     task \"create-daemon-file\" {",
          "32:       driver = \"pledge\"",
          "33:       user   = \"${var.user}\"",
          "35:       config {",
          "36:         command  = \"cp\"",
          "37:         args     = [\"${NOMAD_TASK_DIR}/daemon.json\", \"${var.docker_conf_dir}/daemon.json\"]",
          "38:         promises = \"stdio rpath wpath cpath\"",
          "39:         unveil   = [\"r:${NOMAD_TASK_DIR}/daemon.json\", \"rwc:${var.docker_conf_dir}\"]",
          "40:       }",
          "42:       template {",
          "43:         destination = \"local/daemon.json\"",
          "44:         perms       = \"644\"",
          "45:         data        = <<EOH",
          "46: {",
          "47:    \"insecure-registries\": [",
          "48:       \"${var.registry_address}\"",
          "49:    ]",
          "50: }",
          "51: EOH",
          "52:       }",
          "53:       resources {",
          "54:         cpu    = 100",
          "55:         memory = 32",
          "56:       }",
          "57:     }",
          "59:     task \"restart-docker\" {",
          "60:       driver = \"raw_exec\" # TODO: see if this could be done with pledge?",
          "62:       config {",
          "63:         command = \"service\"",
          "64:         args    = [\"docker\", \"restart\"]",
          "65:       }",
          "66:       resources {",
          "67:         cpu    = 100",
          "68:         memory = 32",
          "69:       }",
          "70:     }",
          "71:   }",
          "72: }",
          "",
          "---------------"
        ],
        "e2e/docker/input/registry-auths.hcl||e2e/docker/input/registry-auths.hcl": [
          "File: e2e/docker/input/registry-auths.hcl -> e2e/docker/input/registry-auths.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "e2e/podman/input/registry-auths.hcl||e2e/docker_registry/registry-auths.hcl": [
          "File: e2e/podman/input/registry-auths.hcl -> e2e/docker_registry/registry-auths.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:   default     = \"/tmp\"",
          "25: }",
          "27: variable \"user\" {",
          "28:   type        = string",
          "29:   description = \"The user to create files as. Should be root in e2e.\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: variable \"docker_conf_dir\" {",
          "28:   type        = string",
          "29:   description = \"The directory in which daemon.json will be written.\"",
          "30:   default     = \"/tmp\"",
          "31: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: password=\"auth_helper_pass\"",
          "73: case \"${value}\" in",
          "79:     echo \"{\\\"Username\\\": \\\"$username\\\", \\\"Secret\\\": \\\"$password\\\"}\"",
          "80:     exit 0",
          "81:     ;;",
          "82: esac",
          "83: EOH",
          "84:       }",
          "",
          "[Removed Lines]",
          "74:   docker.io/*)",
          "75:     echo \"must use local registry\"",
          "76:     exit 3",
          "77:     ;;",
          "",
          "[Added Lines]",
          "80:   ${var.registry_address}*)",
          "85:     echo \"must use local registry\"",
          "86:     exit 3",
          "87:     ;;",
          "",
          "---------------"
        ],
        "e2e/podman/podman_test.go||e2e/podman/podman_test.go": [
          "File: e2e/podman/podman_test.go -> e2e/podman/podman_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:  _, sedCleanup := jobs3.Submit(t,",
          "57:   jobs3.Var(\"registry_address\", address),",
          "58:   jobs3.Var(\"user\", \"root\"),",
          "59:   jobs3.Var(\"helper_dir\", \"/usr/local/bin\"),",
          "",
          "[Removed Lines]",
          "56:   \"./input/registry-auths.hcl\",",
          "",
          "[Added Lines]",
          "56:   \"../docker_registry/registry-auths.hcl\",",
          "",
          "---------------"
        ],
        "e2e/terraform/etc/nomad.d/client-linux.hcl||e2e/terraform/etc/nomad.d/client-linux.hcl": [
          "File: e2e/terraform/etc/nomad.d/client-linux.hcl -> e2e/terraform/etc/nomad.d/client-linux.hcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:     volumes {",
          "44:       enabled = true",
          "45:     }",
          "50:   }",
          "51: }",
          "",
          "[Removed Lines]",
          "46:     auth {",
          "47:       helper = \"test.sh\"",
          "48:       config = \"/etc/auth.json\"",
          "49:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fcc596967ccf5b91a5f58cde0290f24ec9eabe9",
      "candidate_info": {
        "commit_hash": "6fcc596967ccf5b91a5f58cde0290f24ec9eabe9",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/6fcc596967ccf5b91a5f58cde0290f24ec9eabe9",
        "files": [
          ".changelog/24244.txt",
          "drivers/docker/driver.go"
        ],
        "message": "backport of commit b539b54c9e4cde0f0eeade749a14e7c98388186c (#24245)\n\nCo-authored-by: Seth Hoenig <shoenig@duck.com>",
        "before_after_code_files": [
          "drivers/docker/driver.go||drivers/docker/driver.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/docker/driver.go||drivers/docker/driver.go": [
          "File: drivers/docker/driver.go -> drivers/docker/driver.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1836:  if err != nil {",
          "1837:   return nil, fmt.Errorf(\"failed to attach to exec: %v\", err)",
          "1838:  }",
          "1841:  go func() {",
          "1842:   if !opts.Tty {",
          "",
          "[Removed Lines]",
          "1839:  defer resp.Close()",
          "",
          "[Added Lines]",
          "1839:  defer func() {",
          "1840:   opts.Stdin.Close() // close stdin",
          "1841:   resp.CloseWrite()  // close hijacked write connection",
          "1842:   resp.Close()       // close read connection",
          "1843:  }()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "155811e5db518095f946d4d026f3c9f8d4e9d7b4",
      "candidate_info": {
        "commit_hash": "155811e5db518095f946d4d026f3c9f8d4e9d7b4",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/155811e5db518095f946d4d026f3c9f8d4e9d7b4",
        "files": [
          ".changelog/24542.txt",
          "ui/app/adapters/volume.js",
          "ui/app/controllers/csi/volumes/volume.js",
          "ui/app/helpers/lazy-click.js",
          "ui/app/templates/csi/plugins/index.hbs",
          "ui/app/templates/csi/volumes/index.hbs",
          "ui/mirage/config.js",
          "ui/tests/unit/adapters/volume-test.js"
        ],
        "message": "backport of commit 76e39b1c1ebe4663093da4e5735ac694d639e3a0 (#24569)\n\nCo-authored-by: Phil Renaud <phil.renaud@hashicorp.com>",
        "before_after_code_files": [
          "ui/app/adapters/volume.js||ui/app/adapters/volume.js",
          "ui/app/controllers/csi/volumes/volume.js||ui/app/controllers/csi/volumes/volume.js",
          "ui/app/helpers/lazy-click.js||ui/app/helpers/lazy-click.js",
          "ui/app/templates/csi/plugins/index.hbs||ui/app/templates/csi/plugins/index.hbs",
          "ui/app/templates/csi/volumes/index.hbs||ui/app/templates/csi/volumes/index.hbs",
          "ui/mirage/config.js||ui/mirage/config.js",
          "ui/tests/unit/adapters/volume-test.js||ui/tests/unit/adapters/volume-test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/app/adapters/volume.js||ui/app/adapters/volume.js": [
          "File: ui/app/adapters/volume.js -> ui/app/adapters/volume.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: @classic",
          "10: export default class VolumeAdapter extends WatchableNamespaceIDs {",
          "11:   queryParamsToAttrs = {",
          "12:     type: 'type',",
          "13:     plugin_id: 'plugin.id',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:   urlForFindRecord() {",
          "15:     let url = super.urlForFindRecord(...arguments);",
          "16:     return url.replace('csi%2F', 'csi/');",
          "17:   }",
          "",
          "---------------"
        ],
        "ui/app/controllers/csi/volumes/volume.js||ui/app/controllers/csi/volumes/volume.js": [
          "File: ui/app/controllers/csi/volumes/volume.js -> ui/app/controllers/csi/volumes/volume.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   get breadcrumbs() {",
          "27:     const volume = this.volume;",
          "28:     return [",
          "29:       {",
          "30:         label: 'Volumes',",
          "37:       },",
          "38:       {",
          "39:         label: volume.name,",
          "",
          "[Removed Lines]",
          "31:         args: [",
          "32:           'csi.volumes',",
          "33:           qpBuilder({",
          "34:             volumeNamespace: volume.get('namespace.name') || 'default',",
          "35:           }),",
          "36:         ],",
          "",
          "[Added Lines]",
          "28:     if (!volume) {",
          "29:       return [];",
          "30:     }",
          "34:         args: ['csi.volumes'],",
          "",
          "---------------"
        ],
        "ui/app/helpers/lazy-click.js||ui/app/helpers/lazy-click.js": [
          "File: ui/app/helpers/lazy-click.js -> ui/app/helpers/lazy-click.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: export function lazyClick([onClick, event]) {",
          "18:     onClick(event);",
          "19:   }",
          "20: }",
          "",
          "[Removed Lines]",
          "17:   if (!['a', 'button'].includes(event?.target.tagName.toLowerCase())) {",
          "",
          "[Added Lines]",
          "17:   if (!['a', 'button'].includes(event?.target?.tagName.toLowerCase())) {",
          "",
          "---------------"
        ],
        "ui/app/templates/csi/plugins/index.hbs||ui/app/templates/csi/plugins/index.hbs": [
          "File: ui/app/templates/csi/plugins/index.hbs -> ui/app/templates/csi/plugins/index.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:           </t.head>",
          "39:           <t.body @key=\"model.id\" as |row|>",
          "40:             <tr class=\"is-interactive\" data-test-plugin-row {{on \"click\" (action \"gotoPlugin\" row.model)}}>",
          "42:                 <LinkTo @route=\"csi.plugins.plugin\" @model={{row.model.plainId}} class=\"is-primary\">{{row.model.plainId}}</LinkTo>",
          "43:               </td>",
          "44:               <td data-test-plugin-controller-health>",
          "",
          "[Removed Lines]",
          "41:               <td data-test-plugin-id>",
          "",
          "[Added Lines]",
          "41:               <td data-test-plugin-id",
          "42:                 {{keyboard-shortcut",
          "43:                   enumerated=true",
          "44:                   action=(action \"gotoPlugin\" row.model)",
          "45:                 }}",
          "46:               >",
          "",
          "---------------"
        ],
        "ui/app/templates/csi/volumes/index.hbs||ui/app/templates/csi/volumes/index.hbs": [
          "File: ui/app/templates/csi/volumes/index.hbs -> ui/app/templates/csi/volumes/index.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:             {{on \"click\" (action \"gotoVolume\" row.model)}}",
          "78:           >",
          "79:             <td data-test-volume-name",
          "81:                 enumerated=true",
          "82:                 action=(action \"gotoVolume\" row.model)",
          "83:               }}",
          "",
          "[Removed Lines]",
          "80:               {{keyboard-shortcut",
          "",
          "[Added Lines]",
          "80:               {{keyboard-shortcut",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:       {{/if}}",
          "181:     </div>",
          "182:   {{/if}}",
          "",
          "[Removed Lines]",
          "183: </section>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/mirage/config.js||ui/mirage/config.js": [
          "File: ui/mirage/config.js -> ui/mirage/config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "667:   );",
          "669:   this.get(",
          "671:     withBlockingSupport(function ({ csiVolumes }, { params, queryParams }) {",
          "677:       const volume = csiVolumes.all().models.find((volume) => {",
          "678:         const volumeIsDefault =",
          "679:           !volume.namespaceId || volume.namespaceId === 'default';",
          "",
          "[Removed Lines]",
          "670:     '/volume/:id',",
          "672:       if (!params.id.startsWith('csi/')) {",
          "673:         return new Response(404, {}, null);",
          "674:       }",
          "676:       const id = params.id.replace(/^csi\\//, '');",
          "",
          "[Added Lines]",
          "670:     '/volume/csi/:id',",
          "672:       const { id } = params;",
          "",
          "---------------"
        ],
        "ui/tests/unit/adapters/volume-test.js||ui/tests/unit/adapters/volume-test.js": [
          "File: ui/tests/unit/adapters/volume-test.js -> ui/tests/unit/adapters/volume-test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     await settled();",
          "89:     assert.deepEqual(pretender.handledRequests.mapBy('url'), [",
          "93:     ]);",
          "94:   });",
          "",
          "[Removed Lines]",
          "90:       `/v1/volume/${encodeURIComponent(",
          "91:         volumeName",
          "92:       )}?namespace=${volumeNamespace}`,",
          "",
          "[Added Lines]",
          "90:       `/v1/volume/${volumeName}?namespace=${volumeNamespace}`,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d778a311f2b733192f1348e368afebeb216649e1",
      "candidate_info": {
        "commit_hash": "d778a311f2b733192f1348e368afebeb216649e1",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/d778a311f2b733192f1348e368afebeb216649e1",
        "files": [
          ".changelog/24655.txt",
          "command/operator_autopilot_health.go",
          "command/operator_autopilot_health_test.go"
        ],
        "message": "cli: Ensure JSON flag is respected in autopilot health command (#24656)\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "command/operator_autopilot_health.go||command/operator_autopilot_health.go",
          "command/operator_autopilot_health_test.go||command/operator_autopilot_health_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "command/operator_autopilot_health.go||command/operator_autopilot_health.go": [
          "File: command/operator_autopilot_health.go -> command/operator_autopilot_health.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:    return 1",
          "60:   }",
          "61:   c.Ui.Output(string(bytes))",
          "62:  }",
          "66:  return 0",
          "67: }",
          "",
          "[Removed Lines]",
          "64:  c.Ui.Output(formatAutopilotState(state))",
          "",
          "[Added Lines]",
          "62:  } else {",
          "63:   c.Ui.Output(formatAutopilotState(state))",
          "",
          "---------------"
        ],
        "command/operator_autopilot_health_test.go||command/operator_autopilot_health_test.go": [
          "File: command/operator_autopilot_health_test.go -> command/operator_autopilot_health_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: package command",
          "6: import (",
          "7:  \"testing\"",
          "9:  \"github.com/hashicorp/nomad/ci\"",
          "10:  \"github.com/mitchellh/cli\"",
          "11:  \"github.com/shoenig/test/must\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"encoding/json\"",
          "10:  \"github.com/hashicorp/nomad/api\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:  out := ui.OutputWriter.String()",
          "32:  must.StrContains(t, out, \"Healthy\")",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: func TestOperatorAutopilotStateCommand_JSON(t *testing.T) {",
          "38:  ci.Parallel(t)",
          "39:  s, _, addr := testServer(t, false, nil)",
          "40:  defer s.Shutdown()",
          "42:  ui := cli.NewMockUi()",
          "43:  c := &OperatorAutopilotHealthCommand{Meta: Meta{Ui: ui}}",
          "44:  args := []string{\"-address=\" + addr, \"-json\"}",
          "46:  code := c.Run(args)",
          "47:  must.Eq(t, 0, code, must.Sprintf(\"got error for exit code: %v\", ui.ErrorWriter.String()))",
          "52:  operatorHealthyReply := api.OperatorHealthReply{}",
          "54:  must.NoError(t, json.Unmarshal(ui.OutputWriter.Bytes(), &operatorHealthyReply))",
          "55:  must.True(t, operatorHealthyReply.Healthy)",
          "56: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c646af65ccb5aea4a6735d6da5ac6907e13517f8",
      "candidate_info": {
        "commit_hash": "c646af65ccb5aea4a6735d6da5ac6907e13517f8",
        "repo": "hashicorp/nomad",
        "commit_url": "https://github.com/hashicorp/nomad/commit/c646af65ccb5aea4a6735d6da5ac6907e13517f8",
        "files": [
          ".changelog/24781.txt",
          "client/serviceregistration/checks/client.go",
          "client/serviceregistration/checks/client_test.go",
          "client/serviceregistration/checks/result.go",
          "client/serviceregistration/checks/result_test.go",
          "nomad/structs/check_test.go",
          "nomad/structs/checks.go",
          "nomad/structs/services.go",
          "website/content/docs/job-specification/check.mdx"
        ],
        "message": "services: Support TLS Skip Verify within Nomad service checks (#24863)\n\nbackport of commit 689f935\n\nCo-authored-by: James Rasell <jrasell@users.noreply.github.com>",
        "before_after_code_files": [
          "client/serviceregistration/checks/client.go||client/serviceregistration/checks/client.go",
          "client/serviceregistration/checks/client_test.go||client/serviceregistration/checks/client_test.go",
          "client/serviceregistration/checks/result.go||client/serviceregistration/checks/result.go",
          "client/serviceregistration/checks/result_test.go||client/serviceregistration/checks/result_test.go",
          "nomad/structs/check_test.go||nomad/structs/check_test.go",
          "nomad/structs/checks.go||nomad/structs/checks.go",
          "nomad/structs/services.go||nomad/structs/services.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/hashicorp/nomad/pull/25471"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/serviceregistration/checks/client.go||client/serviceregistration/checks/client.go": [
          "File: client/serviceregistration/checks/client.go -> client/serviceregistration/checks/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"bytes\"",
          "8:  \"context\"",
          "9:  \"fmt\"",
          "10:  \"io\"",
          "11:  \"net\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"crypto/tls\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:  request.Body = io.NopCloser(strings.NewReader(q.Body))",
          "190:  request = request.WithContext(ctx)",
          "192:  result, err := c.httpClient.Do(request)",
          "193:  if err != nil {",
          "194:   qr.Output = fmt.Sprintf(\"nomad: %s\", err.Error())",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:  if q.TLSSkipVerify {",
          "198:   trans := cleanhttp.DefaultPooledTransport()",
          "199:   trans.TLSClientConfig = &tls.Config{InsecureSkipVerify: q.TLSSkipVerify}",
          "200:   c.httpClient.Transport = trans",
          "201:  }",
          "",
          "---------------"
        ],
        "client/serviceregistration/checks/client_test.go||client/serviceregistration/checks/client_test.go": [
          "File: client/serviceregistration/checks/client_test.go -> client/serviceregistration/checks/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "390:  }",
          "391: }",
          "393: func TestChecker_Do_TCP(t *testing.T) {",
          "394:  ci.Parallel(t)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393: func TestChecker_Do_HTTPS_TLS(t *testing.T) {",
          "394:  ci.Parallel(t)",
          "396:  ts := httptest.NewTLSServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {",
          "397:   switch r.URL.Path {",
          "398:   default:",
          "399:    w.WriteHeader(http.StatusOK)",
          "400:    _, _ = io.WriteString(w, \"200 ok\")",
          "401:   }",
          "402:  }))",
          "403:  defer ts.Close()",
          "406:  addr, port := splitURL(ts.URL)",
          "409:  now := time.Date(2022, 1, 2, 3, 4, 5, 6, time.UTC)",
          "410:  clock := libtimetest.NewClockMock(t).NowMock.Return(now)",
          "412:  testCases := []struct {",
          "413:   name                 string",
          "414:   inputTLSSkipVerify   bool",
          "415:   expectedStatusCode   int",
          "416:   expectedResultOutput string",
          "417:  }{",
          "418:   {",
          "419:    name:                 \"tls skip verify true\",",
          "420:    inputTLSSkipVerify:   true,",
          "421:    expectedStatusCode:   http.StatusOK,",
          "422:    expectedResultOutput: \"nomad: http ok\",",
          "423:   },",
          "424:   {",
          "425:    name:                 \"tls skip verify false\",",
          "426:    inputTLSSkipVerify:   false,",
          "427:    expectedStatusCode:   0,",
          "428:    expectedResultOutput: \"tls: failed to verify certificate: x509\",",
          "429:   },",
          "430:  }",
          "432:  for _, tc := range testCases {",
          "434:   queryContext := &QueryContext{",
          "435:    ID:               \"abc123\",",
          "436:    CustomAddress:    addr,",
          "437:    ServicePortLabel: port,",
          "438:    Networks:         nil,",
          "439:    NetworkStatus:    mock.NewNetworkStatus(addr),",
          "440:    Ports:            nil,",
          "441:    Group:            \"group\",",
          "442:    Task:             \"task\",",
          "443:    Service:          \"service\",",
          "444:    Check:            \"check\",",
          "445:   }",
          "447:   queryImpl := &Query{",
          "448:    Mode:          structs.Healthiness,",
          "449:    Type:          \"http\",",
          "450:    Timeout:       1 * time.Second,",
          "451:    AddressMode:   \"auto\",",
          "452:    PortLabel:     port,",
          "453:    Protocol:      \"https\",",
          "454:    Path:          \"/\",",
          "455:    Method:        http.MethodGet,",
          "456:    TLSSkipVerify: tc.inputTLSSkipVerify,",
          "457:   }",
          "459:   t.Run(tc.name, func(t *testing.T) {",
          "461:    c := New(testlog.HCLogger(t))",
          "462:    c.(*checker).clock = clock",
          "464:    result := c.Do(context.Background(), queryContext, queryImpl)",
          "466:    must.Eq(t, tc.expectedStatusCode, result.StatusCode)",
          "467:    must.StrContains(t, result.Output, tc.expectedResultOutput)",
          "468:   })",
          "469:  }",
          "470: }",
          "",
          "---------------"
        ],
        "client/serviceregistration/checks/result.go||client/serviceregistration/checks/result.go": [
          "File: client/serviceregistration/checks/result.go -> client/serviceregistration/checks/result.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   protocol = \"http\"",
          "19:  }",
          "20:  return &Query{",
          "31:  }",
          "32: }",
          "",
          "[Removed Lines]",
          "21:   Mode:        structs.GetCheckMode(c),",
          "22:   Type:        c.Type,",
          "23:   Timeout:     c.Timeout,",
          "24:   AddressMode: c.AddressMode,",
          "25:   PortLabel:   c.PortLabel,",
          "26:   Protocol:    protocol,",
          "27:   Path:        c.Path,",
          "28:   Method:      c.Method,",
          "29:   Headers:     maps.Clone(c.Header),",
          "30:   Body:        c.Body,",
          "",
          "[Added Lines]",
          "21:   Mode:          structs.GetCheckMode(c),",
          "22:   Type:          c.Type,",
          "23:   Timeout:       c.Timeout,",
          "24:   AddressMode:   c.AddressMode,",
          "25:   PortLabel:     c.PortLabel,",
          "26:   Protocol:      protocol,",
          "27:   Path:          c.Path,",
          "28:   Method:        c.Method,",
          "29:   Headers:       maps.Clone(c.Header),",
          "30:   Body:          c.Body,",
          "31:   TLSSkipVerify: c.TLSSkipVerify,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:  AddressMode string // host, driver, or alloc",
          "43:  PortLabel   string // label or value",
          "50: }",
          "",
          "[Removed Lines]",
          "45:  Protocol string      // http checks only (http or https)",
          "46:  Path     string      // http checks only",
          "47:  Method   string      // http checks only",
          "48:  Headers  http.Header // http checks only",
          "49:  Body     string      // http checks only",
          "",
          "[Added Lines]",
          "46:  Protocol      string      // http checks only (http or https)",
          "47:  Path          string      // http checks only",
          "48:  Method        string      // http checks only",
          "49:  Headers       http.Header // http checks only",
          "50:  Body          string      // http checks only",
          "51:  TLSSkipVerify bool        // http checks only, https protocol",
          "",
          "---------------"
        ],
        "client/serviceregistration/checks/result_test.go||client/serviceregistration/checks/result_test.go": [
          "File: client/serviceregistration/checks/result_test.go -> client/serviceregistration/checks/result_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: func TestChecks_GetCheckQuery(t *testing.T) {",
          "15:  cases := []struct {",
          "22:  }{",
          "23:   {",
          "30:   },",
          "31:   {",
          "38:   },",
          "39:   {",
          "46:   },",
          "47:   {",
          "54:   },",
          "55:   {",
          "62:   },",
          "63:   {",
          "70:   },",
          "71:  }",
          "73:  for _, tc := range cases {",
          "74:   t.Run(tc.name, func(t *testing.T) {",
          "75:    serviceCheck := &structs.ServiceCheck{",
          "85:    }",
          "86:    query := GetCheckQuery(serviceCheck)",
          "87:    must.Eq(t, tc.expMode, query.Mode)",
          "88:    must.Eq(t, tc.expProtocol, query.Protocol)",
          "89:   })",
          "90:  }",
          "91: }",
          "",
          "[Removed Lines]",
          "16:   name        string",
          "17:   cType       string",
          "18:   protocol    string",
          "19:   onUpdate    string",
          "20:   expMode     structs.CheckMode",
          "21:   expProtocol string",
          "24:    name:        \"http check and http set\",",
          "25:    cType:       \"http\",",
          "26:    protocol:    \"http\",",
          "27:    onUpdate:    \"checks\",",
          "28:    expMode:     structs.Healthiness,",
          "29:    expProtocol: \"http\",",
          "32:    name:        \"http check and https set\",",
          "33:    cType:       \"http\",",
          "34:    protocol:    \"https\",",
          "35:    onUpdate:    \"checks\",",
          "36:    expMode:     structs.Healthiness,",
          "37:    expProtocol: \"https\",",
          "40:    name:        \"http check and protocol unset\",",
          "41:    cType:       \"http\",",
          "42:    protocol:    \"\",",
          "43:    onUpdate:    \"checks\",",
          "44:    expMode:     structs.Healthiness,",
          "45:    expProtocol: \"http\", // inherit default",
          "48:    name:        \"tcp check and protocol unset\",",
          "49:    cType:       \"tcp\",",
          "50:    protocol:    \"\",",
          "51:    onUpdate:    \"checks\",",
          "52:    expMode:     structs.Healthiness,",
          "53:    expProtocol: \"\",",
          "56:    name:        \"http check and http set\",",
          "57:    cType:       \"http\",",
          "58:    protocol:    \"http\",",
          "59:    onUpdate:    \"checks\",",
          "60:    expMode:     structs.Healthiness,",
          "61:    expProtocol: \"http\",",
          "64:    name:        \"on-update ignore\",",
          "65:    cType:       \"http\",",
          "66:    protocol:    \"http\",",
          "67:    onUpdate:    structs.OnUpdateIgnore,",
          "68:    expMode:     structs.Readiness,",
          "69:    expProtocol: \"http\",",
          "76:     Type:        tc.cType,",
          "77:     Path:        \"/\",",
          "78:     Protocol:    tc.protocol,",
          "79:     PortLabel:   \"web\",",
          "80:     AddressMode: \"host\",",
          "81:     Interval:    10 * time.Second,",
          "82:     Timeout:     2 * time.Second,",
          "83:     Method:      \"GET\",",
          "84:     OnUpdate:    tc.onUpdate,",
          "",
          "[Added Lines]",
          "16:   name               string",
          "17:   cType              string",
          "18:   protocol           string",
          "19:   onUpdate           string",
          "20:   expMode            structs.CheckMode",
          "21:   expProtocol        string",
          "22:   inputTLSSkipVerify bool",
          "25:    name:               \"http check and http set\",",
          "26:    cType:              \"http\",",
          "27:    protocol:           \"http\",",
          "28:    onUpdate:           \"checks\",",
          "29:    expMode:            structs.Healthiness,",
          "30:    expProtocol:        \"http\",",
          "31:    inputTLSSkipVerify: false,",
          "34:    name:               \"http check and https set\",",
          "35:    cType:              \"http\",",
          "36:    protocol:           \"https\",",
          "37:    onUpdate:           \"checks\",",
          "38:    expMode:            structs.Healthiness,",
          "39:    expProtocol:        \"https\",",
          "40:    inputTLSSkipVerify: false,",
          "43:    name:               \"http check and protocol unset\",",
          "44:    cType:              \"http\",",
          "45:    protocol:           \"\",",
          "46:    onUpdate:           \"checks\",",
          "47:    expMode:            structs.Healthiness,",
          "48:    expProtocol:        \"http\", // inherit default",
          "49:    inputTLSSkipVerify: false,",
          "52:    name:               \"tcp check and protocol unset\",",
          "53:    cType:              \"tcp\",",
          "54:    protocol:           \"\",",
          "55:    onUpdate:           \"checks\",",
          "56:    expMode:            structs.Healthiness,",
          "57:    expProtocol:        \"\",",
          "58:    inputTLSSkipVerify: false,",
          "61:    name:               \"http check and http set\",",
          "62:    cType:              \"http\",",
          "63:    protocol:           \"http\",",
          "64:    onUpdate:           \"checks\",",
          "65:    expMode:            structs.Healthiness,",
          "66:    expProtocol:        \"http\",",
          "67:    inputTLSSkipVerify: false,",
          "70:    name:               \"on-update ignore\",",
          "71:    cType:              \"http\",",
          "72:    protocol:           \"http\",",
          "73:    onUpdate:           structs.OnUpdateIgnore,",
          "74:    expMode:            structs.Readiness,",
          "75:    expProtocol:        \"http\",",
          "76:    inputTLSSkipVerify: false,",
          "77:   },",
          "78:   {",
          "79:    name:               \"tls-skip-verify\",",
          "80:    cType:              \"http\",",
          "81:    protocol:           \"https\",",
          "82:    onUpdate:           structs.OnUpdateIgnore,",
          "83:    expMode:            structs.Readiness,",
          "84:    expProtocol:        \"https\",",
          "85:    inputTLSSkipVerify: true,",
          "92:     Type:          tc.cType,",
          "93:     Path:          \"/\",",
          "94:     Protocol:      tc.protocol,",
          "95:     PortLabel:     \"web\",",
          "96:     AddressMode:   \"host\",",
          "97:     Interval:      10 * time.Second,",
          "98:     Timeout:       2 * time.Second,",
          "99:     Method:        \"GET\",",
          "100:     OnUpdate:      tc.onUpdate,",
          "101:     TLSSkipVerify: tc.inputTLSSkipVerify,",
          "106:    must.Eq(t, tc.inputTLSSkipVerify, query.TLSSkipVerify)",
          "",
          "---------------"
        ],
        "nomad/structs/check_test.go||nomad/structs/check_test.go": [
          "File: nomad/structs/check_test.go -> nomad/structs/check_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  ci.Parallel(t)",
          "17:  orig := ServiceCheck{",
          "29:  }",
          "31:  different := func(a, b ServiceCheck) bool {",
          "",
          "[Removed Lines]",
          "18:   Name:        \"c1\",",
          "19:   Type:        \"http\",",
          "20:   Path:        \"/health\",",
          "21:   Protocol:    \"https\",",
          "22:   PortLabel:   \"web\",",
          "23:   AddressMode: \"host\",",
          "24:   Interval:    1 * time.Minute,",
          "25:   Timeout:     10 * time.Second,",
          "26:   Method:      \"GET\",",
          "27:   TaskName:    \"t1\",",
          "28:   OnUpdate:    OnUpdateIgnore,",
          "",
          "[Added Lines]",
          "18:   Name:          \"c1\",",
          "19:   Type:          \"http\",",
          "20:   Path:          \"/health\",",
          "21:   Protocol:      \"https\",",
          "22:   PortLabel:     \"web\",",
          "23:   AddressMode:   \"host\",",
          "24:   Interval:      1 * time.Minute,",
          "25:   Timeout:       10 * time.Second,",
          "26:   Method:        \"GET\",",
          "27:   TaskName:      \"t1\",",
          "28:   OnUpdate:      OnUpdateIgnore,",
          "29:   TLSSkipVerify: false,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   c.OnUpdate = \"checks\"",
          "105:   must.True(t, different(orig, c))",
          "106:  })",
          "107: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:  t.Run(\"different TLS skip verify\", func(t *testing.T) {",
          "110:   c := orig",
          "111:   c.TLSSkipVerify = true",
          "112:   must.True(t, different(orig, c))",
          "113:  })",
          "",
          "---------------"
        ],
        "nomad/structs/checks.go||nomad/structs/checks.go": [
          "File: nomad/structs/checks.go -> nomad/structs/checks.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import (",
          "7:  \"crypto/md5\"",
          "8:  \"fmt\"",
          "9: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  \"strconv\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  hashString(sum, c.Protocol)",
          "91:  hashString(sum, c.Path)",
          "92:  hashString(sum, c.Method)",
          "93:  h := sum.Sum(nil)",
          "94:  return CheckID(fmt.Sprintf(\"%x\", h))",
          "95: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:  hashString(sum, strconv.FormatBool(c.TLSSkipVerify))",
          "",
          "---------------"
        ],
        "nomad/structs/services.go||nomad/structs/services.go": [
          "File: nomad/structs/services.go -> nomad/structs/services.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "403:   return errors.New(\"tls_server_name may only be set for Consul service checks\")",
          "404:  }",
          "411:  return nil",
          "412: }",
          "",
          "[Removed Lines]",
          "407:  if sc.TLSSkipVerify {",
          "408:   return errors.New(\"tls_skip_verify may only be set for Consul service checks\")",
          "409:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}