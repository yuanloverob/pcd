{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c36a83f283aca77dbeb91e3faed13ee38fb9321",
      "candidate_info": {
        "commit_hash": "3c36a83f283aca77dbeb91e3faed13ee38fb9321",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/3c36a83f283aca77dbeb91e3faed13ee38fb9321",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertDefinitionsUIUpdateListener.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinition.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java"
        ],
        "message": "AMBARI-24234. Alerts Are Running For Components Which Are Not Install\u2026 (#1663) (#1672)\n\n* AMBARI-24234. Alerts Are Running For Components Which Are Not Installed (amagyar)\n\n* AMBARI-24234. Alerts Are Running For Components Which Are Not Installed (amagyar)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertDefinitionsUIUpdateListener.java||ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertDefinitionsUIUpdateListener.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java||ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java||ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinition.java||ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinition.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java||ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertDefinitionsUIUpdateListener.java||ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertDefinitionsUIUpdateListener.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertDefinitionsUIUpdateListener.java -> ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertDefinitionsUIUpdateListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.Collections;",
          "24: import java.util.Map;",
          "27: import javax.inject.Provider;",
          "",
          "[Removed Lines]",
          "25: import java.util.Set;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:   private void handleSingleDefinitionChange(AlertDefinitionEventType eventType, AlertDefinition alertDefinition) throws AmbariException {",
          "139:     LOG.info(\"{} alert definition '{}'\", eventType, alertDefinition);",
          "142:       alertDefinitionsHolder.provideAlertDefinitionAgentUpdateEvent(eventType, alertDefinition.getClusterId(),",
          "143:           Collections.singletonMap(alertDefinition.getDefinitionId(), alertDefinition), hostName);",
          "144:     }",
          "145:     if (alertDefinition.getName().equals(AMBARI_STALE_ALERT_NAME)) {",
          "147:         alertDefinitionsHolder.provideStaleAlertDefinitionUpdateEvent(eventType, alertDefinition.getClusterId(),",
          "148:             alertHelper.getWaitFactorMultiplier(alertDefinition), host.getHostName());",
          "149:       }",
          "",
          "[Removed Lines]",
          "140:     Set<String> hosts = helper.get().invalidateHosts(alertDefinition);",
          "141:     for (String hostName : hosts) {",
          "146:       for (Host host : clusters.get().getCluster(alertDefinition.getClusterId()).getHosts()) {",
          "",
          "[Added Lines]",
          "139:     Cluster cluster = clusters.get().getCluster(alertDefinition.getClusterId());",
          "140:     helper.get().invalidateHosts(alertDefinition); // do we need to invalidate, what's the purpose of this?",
          "141:     for (String hostName : alertDefinition.matchingHosts(clusters.get())) {",
          "146:       for (Host host : cluster.getHosts()) {",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java||ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java -> ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.state;",
          "21: import java.util.Collection;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static java.util.stream.Collectors.toSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:   Collection<Host> getHosts();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:   default Set<String> getHostNames() { return getHosts().stream().map(Host::getHostName).collect(toSet()); }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java||ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java -> ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "190:   Map<String, Host> getHostsForCluster(String clusterName)",
          "191:       throws AmbariException;",
          "",
          "[Added Lines]",
          "189:   Map<String, Host> getHostsForCluster(String clusterName);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinition.java||ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinition.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinition.java -> ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinition.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.state.alert;",
          "20: import java.util.HashSet;",
          "21: import java.util.List;",
          "23: import org.apache.ambari.server.state.Alert;",
          "24: import org.apache.ambari.server.state.AlertState;",
          "25: import org.apache.commons.lang.StringUtils;",
          "27: import com.fasterxml.jackson.annotation.JsonInclude;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import static java.util.Collections.emptySet;",
          "21: import static org.apache.ambari.server.controller.RootComponent.AMBARI_AGENT;",
          "22: import static org.apache.ambari.server.controller.RootService.AMBARI;",
          "26: import java.util.Set;",
          "28: import org.apache.ambari.server.AmbariException;",
          "31: import org.apache.ambari.server.state.Cluster;",
          "32: import org.apache.ambari.server.state.Clusters;",
          "33: import org.apache.ambari.server.state.ServiceComponentHost;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:   public String toString() {",
          "420:     return name;",
          "421:   }",
          "422: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "438:   public Set<String> matchingHosts(Clusters clusters) throws AmbariException {",
          "439:     Cluster cluster = clusters.getCluster(clusterId);",
          "440:     if (source.getType() == SourceType.AGGREGATE) {",
          "441:       return emptySet();",
          "442:     }",
          "443:     if (AMBARI.name().equals(serviceName)) {",
          "444:       return AMBARI_AGENT.name().equals(componentName) ? cluster.getHostNames() : emptySet();",
          "445:     }",
          "446:     Set<String> matchingHosts = new HashSet<>();",
          "447:     for (String host : cluster.getHostNames()) {",
          "448:       for (ServiceComponentHost component : cluster.getServiceComponentHosts(host)) {",
          "449:         if (belongsTo(component)) {",
          "450:           matchingHosts.add(host);",
          "451:         }",
          "452:       }",
          "453:     }",
          "454:     return matchingHosts;",
          "455:   }",
          "457:   private boolean belongsTo(ServiceComponentHost component) {",
          "458:     return component.getServiceName().equals(serviceName) && component.getServiceComponentName().equals(componentName);",
          "459:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java||ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java -> ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "361:       return Collections.emptySet();",
          "362:     }",
          "365:     String clusterName = cluster.getClusterName();",
          "366:     Set<String> affectedHosts = new HashSet<>();",
          "377:     String ambariServiceName = RootService.AMBARI.name();",
          "378:     String agentComponentName = RootComponent.AMBARI_AGENT.name();",
          "",
          "[Removed Lines]",
          "364:     Map<String, Host> hosts = null;",
          "368:     try {",
          "369:       hosts = m_clusters.get().getHostsForCluster(clusterName);",
          "370:     } catch (AmbariException ambariException) {",
          "371:       LOG.error(\"Unable to lookup hosts for cluster named {}\", clusterName,",
          "372:           ambariException);",
          "374:       return affectedHosts;",
          "375:     }",
          "",
          "[Added Lines]",
          "365:     Map<String, Host> hosts = m_clusters.get().getHostsForCluster(clusterName);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2247:   @Override",
          "2248:   public Collection<Host> getHosts() {",
          "2261:   }",
          "2263:   private ClusterHealthReport getClusterHealthReport(",
          "",
          "[Removed Lines]",
          "2249:     Map<String, Host> hosts;",
          "2251:     try {",
          "2255:       hosts =  clusters.getHostsForCluster(clusterName);",
          "2256:     } catch (AmbariException e) {",
          "2258:       throw new RuntimeException(\"Unable to get hosts for cluster: \" + clusterName, e);",
          "2259:     }",
          "2260:     return hosts == null ? Collections.emptyList() : hosts.values();",
          "",
          "[Added Lines]",
          "2249:     return clusters.getHostsForCluster(clusterName).values();",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "706:   }",
          "708:   @Override",
          "712:     Map<String, Host> hosts = new HashMap<>();",
          "713:     for (Host h : getClusterHostsMap().get(clusterName)) {",
          "714:       hosts.put(h.getHostName(), h);",
          "",
          "[Removed Lines]",
          "709:   public Map<String, Host> getHostsForCluster(String clusterName)",
          "710:       throws AmbariException {",
          "",
          "[Added Lines]",
          "709:   public Map<String, Host> getHostsForCluster(String clusterName) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce57c775c5891e0e95496cf05d6441011d41f40a",
      "candidate_info": {
        "commit_hash": "ce57c775c5891e0e95496cf05d6441011d41f40a",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ce57c775c5891e0e95496cf05d6441011d41f40a",
        "files": [
          "ambari-common/src/main/python/ambari_commons/os_linux.py",
          "ambari-common/src/main/python/ambari_commons/os_utils.py",
          "ambari-common/src/main/python/ambari_commons/os_windows.py",
          "ambari-server/src/main/python/ambari_server/dbConfiguration_linux.py"
        ],
        "message": "AMBARI-25465 Postgresql service naming convention changed on SUSE 12 SP2 (#3174) (aszil\u00e1rd via dgrinenko)",
        "before_after_code_files": [
          "ambari-common/src/main/python/ambari_commons/os_linux.py||ambari-common/src/main/python/ambari_commons/os_linux.py",
          "ambari-common/src/main/python/ambari_commons/os_utils.py||ambari-common/src/main/python/ambari_commons/os_utils.py",
          "ambari-common/src/main/python/ambari_commons/os_windows.py||ambari-common/src/main/python/ambari_commons/os_windows.py",
          "ambari-server/src/main/python/ambari_server/dbConfiguration_linux.py||ambari-server/src/main/python/ambari_server/dbConfiguration_linux.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-common/src/main/python/ambari_commons/os_linux.py||ambari-common/src/main/python/ambari_commons/os_linux.py": [
          "File: ambari-common/src/main/python/ambari_commons/os_linux.py -> ambari-common/src/main/python/ambari_commons/os_linux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: def os_getpass(prompt):",
          "86:   return getpass.unix_getpass(prompt)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: def os_is_service_exist(serviceName):",
          "89:   if os.path.exists('/run/systemd/system/'):",
          "90:     return os.popen('systemctl list-units --full -all | grep \"%s.service\"' % serviceName).read().strip() != ''",
          "92:   status = os.system(\"service %s status >/dev/null 2>&1\" % serviceName)",
          "93:   return status != 256",
          "",
          "---------------"
        ],
        "ambari-common/src/main/python/ambari_commons/os_utils.py||ambari-common/src/main/python/ambari_commons/os_utils.py": [
          "File: ambari-common/src/main/python/ambari_commons/os_utils.py -> ambari-common/src/main/python/ambari_commons/os_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: if OSCheck.is_windows_family():",
          "35:   from ambari_commons.os_windows import os_change_owner, os_getpass, os_is_root, os_run_os_command, \\",
          "37: else:",
          "38:   # MacOS not supported",
          "39:   from ambari_commons.os_linux import os_change_owner, os_getpass, os_is_root, os_run_os_command, \\",
          "41:   pass",
          "43: from ambari_commons.exceptions import FatalException",
          "",
          "[Removed Lines]",
          "36:     os_set_open_files_limit, os_set_file_permissions",
          "40:     os_set_open_files_limit, os_set_file_permissions",
          "",
          "[Added Lines]",
          "36:     os_set_open_files_limit, os_set_file_permissions, os_is_service_exist",
          "40:     os_set_open_files_limit, os_set_file_permissions, os_is_service_exist",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131: def get_password(prompt):",
          "132:   return os_getpass(prompt)",
          "134: def find_in_path(file):",
          "135:   full_path = _search_file(file, os.environ[\"PATH\"], os.pathsep)",
          "136:   if full_path is None:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: def is_service_exist(serviceName):",
          "135:   return os_is_service_exist(serviceName)",
          "",
          "---------------"
        ],
        "ambari-common/src/main/python/ambari_commons/os_windows.py||ambari-common/src/main/python/ambari_commons/os_windows.py": [
          "File: ambari-common/src/main/python/ambari_commons/os_windows.py -> ambari-common/src/main/python/ambari_commons/os_windows.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:   return 0",
          "474: #need this for redirecting output form python process to file",
          "475: class SyncStreamWriter(object):",
          "476:   def __init__(self, stream, hMutexWrite):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "474: def os_is_service_exist(serviceName):",
          "475:   try:",
          "476:     win32serviceutil.QueryServiceStatus(serviceName)",
          "477:   except:",
          "478:     # \"Windows service NOT installed\"",
          "479:     return False",
          "480:   else:",
          "481:     # \"Windows service installed\"",
          "482:     return True",
          "",
          "---------------"
        ],
        "ambari-server/src/main/python/ambari_server/dbConfiguration_linux.py||ambari-server/src/main/python/ambari_server/dbConfiguration_linux.py": [
          "File: ambari-server/src/main/python/ambari_server/dbConfiguration_linux.py -> ambari-server/src/main/python/ambari_server/dbConfiguration_linux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: from ambari_commons import OSCheck, OSConst",
          "32: from ambari_commons.logging_utils import get_silent, get_verbose, print_error_msg, print_info_msg, print_warning_msg",
          "33: from ambari_commons.exceptions import NonFatalException, FatalException",
          "35: from ambari_server.dbConfiguration import DBMSConfig, USERNAME_PATTERN, SETUP_DB_CONNECT_ATTEMPTS, \\",
          "36:     SETUP_DB_CONNECT_TIMEOUT, STORAGE_TYPE_LOCAL, DEFAULT_USERNAME, DEFAULT_PASSWORD",
          "37: from ambari_server.serverConfiguration import encrypt_password, store_password_file, \\",
          "",
          "[Removed Lines]",
          "34: from ambari_commons.os_utils import copy_files, find_in_path, is_root, remove_file, run_os_command",
          "",
          "[Added Lines]",
          "34: from ambari_commons.os_utils import copy_files, find_in_path, is_root, remove_file, run_os_command, is_service_exist",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:     PG_HBA_RELOAD_CMD = AMBARI_SUDO_BINARY + \" %s reload %s\" % (SERVICE_CMD, PG_SERVICE_NAME)",
          "386:   else:",
          "387:     SERVICE_CMD = \"/usr/bin/env service\"",
          "389:     if os.path.isfile(\"/usr/bin/postgresql-setup\"):",
          "390:         PG_INITDB_CMD = \"/usr/bin/postgresql-setup initdb\"",
          "391:     else:",
          "394:     PG_START_CMD = AMBARI_SUDO_BINARY + \" %s %s start\" % (SERVICE_CMD, PG_SERVICE_NAME)",
          "395:     PG_RESTART_CMD = AMBARI_SUDO_BINARY + \" %s %s restart\" % (SERVICE_CMD, PG_SERVICE_NAME)",
          "",
          "[Removed Lines]",
          "388:     PG_ST_CMD = \"%s %s status\" % (SERVICE_CMD, PG_SERVICE_NAME)",
          "392:         PG_INITDB_CMD = \"%s %s initdb\" % (SERVICE_CMD, PG_SERVICE_NAME)",
          "",
          "[Added Lines]",
          "391:       PG_INITDB_CMD = \"%s %s initdb\" % (SERVICE_CMD, PG_SERVICE_NAME)",
          "393:       if OSCheck.is_suse_family() and not is_service_exist(PG_SERVICE_NAME):",
          "394:         versioned_script_paths = glob.glob(\"/usr/pgsql-*/bin/postgresql*-setup\")",
          "395:         if versioned_script_paths:",
          "396:           versioned_script_path_tps = map(lambda path: (re.search(r'pgsql-([0-9]+\\.?[0-9]*)', path).group(1), path), versioned_script_paths)",
          "397:           versioned_script_path_tps.sort(key = lambda t: float(t[0]), reverse = True)",
          "398:           for versioned_script_path_tp in versioned_script_path_tps:",
          "399:             pgsql_service_file_name = \"postgresql-%s\" % versioned_script_path_tp[0]",
          "400:             if is_service_exist(pgsql_service_file_name):",
          "401:               PG_SERVICE_NAME = pgsql_service_file_name",
          "402:               PG_INITDB_CMD = \"%s initdb\" % versioned_script_path_tp[1]",
          "403:               PG_HBA_DIR = \"/var/lib/pgsql/%s/data\" % versioned_script_path_tp[0]",
          "404:               break",
          "406:     PG_ST_CMD = \"%s %s status\" % (SERVICE_CMD, PG_SERVICE_NAME)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "434:     if self.persistence_type == STORAGE_TYPE_LOCAL:",
          "435:       PGConfig.PG_STATUS_RUNNING = get_postgre_running_status()",
          "438:       PGConfig.PG_HBA_CONF_FILE = os.path.join(PGConfig.PG_HBA_DIR, \"pg_hba.conf\")",
          "439:       PGConfig.PG_HBA_CONF_FILE_BACKUP = os.path.join(PGConfig.PG_HBA_DIR, \"pg_hba_bak.conf.old\")",
          "",
          "[Removed Lines]",
          "436:       PGConfig.PG_HBA_DIR = get_postgre_hba_dir(OS_FAMILY)",
          "",
          "[Added Lines]",
          "450:       if not PGConfig.PG_HBA_DIR:",
          "451:         PGConfig.PG_HBA_DIR = get_postgre_hba_dir(OS_FAMILY)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a46ad89a577e2bd1f46388c00f42ca660d033fd",
      "candidate_info": {
        "commit_hash": "0a46ad89a577e2bd1f46388c00f42ca660d033fd",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0a46ad89a577e2bd1f46388c00f42ca660d033fd",
        "files": [
          "ambari-web/app/mappers/configs/themes_mapper.js",
          "ambari-web/app/mappers/stack_service_mapper.js",
          "ambari-web/app/utils/helper.js",
          "ambari-web/test/mappers/stack_service_mapper_test.js"
        ],
        "message": "[AMBARI-25305] Ambari UI gets into corrupt state after installing a cluster (#3010)\n\n* AMBARI-24597. Popup shown when Ambari started on a different port other than 8080 (akovalenko)\n\n* AMBARI-25249 Ambari UI quicklinks\n\n* AMBARI-25305. Ambari UI gets into corrupt state after installing a cluster",
        "before_after_code_files": [
          "ambari-web/app/mappers/configs/themes_mapper.js||ambari-web/app/mappers/configs/themes_mapper.js",
          "ambari-web/app/mappers/stack_service_mapper.js||ambari-web/app/mappers/stack_service_mapper.js",
          "ambari-web/app/utils/helper.js||ambari-web/app/utils/helper.js",
          "ambari-web/test/mappers/stack_service_mapper_test.js||ambari-web/test/mappers/stack_service_mapper_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mappers/configs/themes_mapper.js||ambari-web/app/mappers/configs/themes_mapper.js": [
          "File: ambari-web/app/mappers/configs/themes_mapper.js -> ambari-web/app/mappers/configs/themes_mapper.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     this.get('subSectionModel').find().clear();",
          "75:     this.get('subSectionTabModel').find().clear();",
          "76:     this.get('themeConditionModel').find().clear();",
          "77:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     App.clearModels([this.get('tabModel')]);",
          "78:     App.resetDsStoreTypeMap(this.get('tabModel'));",
          "",
          "---------------"
        ],
        "ambari-web/app/mappers/stack_service_mapper.js||ambari-web/app/mappers/stack_service_mapper.js": [
          "File: ambari-web/app/mappers/stack_service_mapper.js -> ambari-web/app/mappers/stack_service_mapper.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   mapStackServices: function(json) {",
          "79:     App.set('isStackServicesLoaded',false);",
          "81:     App.resetDsStoreTypeMap(App.StackServiceComponent);",
          "82:     App.resetDsStoreTypeMap(App.StackService);",
          "83:     this.map(json);",
          "",
          "[Removed Lines]",
          "80:     this.clearStackModels();",
          "",
          "[Added Lines]",
          "80:     App.clearModels([this.get('model'), this.get('component_model')]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:     }, this);",
          "128:     App.store.safeLoadMany(this.get('component_model'), stackServiceComponents);",
          "129:     App.store.safeLoadMany(model, result);",
          "146:   }",
          "147: });",
          "",
          "[Removed Lines]",
          "130:   },",
          "135:   clearStackModels: function () {",
          "136:     var models = [App.StackServiceComponent, App.StackService];",
          "137:     models.forEach(function (model) {",
          "138:       var records = App.get('store').findAll(model).filterProperty('id');",
          "139:       records.forEach(function (rec) {",
          "140:         Ember.run(this, function () {",
          "141:           rec.deleteRecord();",
          "142:           App.store.fastCommit();",
          "143:         });",
          "144:       }, this);",
          "145:     }, this);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-web/app/utils/helper.js||ambari-web/app/utils/helper.js": [
          "File: ambari-web/app/utils/helper.js -> ambari-web/app/utils/helper.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1058:   }",
          "1059: };",
          "1061: App.logger = function() {",
          "1063:   var timers = {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1065: App.clearModels = function (models) {",
          "1066:   models.forEach(function (model) {",
          "1067:     var records = App.get('store').findAll(model).filterProperty('id');",
          "1068:     records.forEach(function (rec) {",
          "1069:       Ember.run(this, function () {",
          "1070:         rec.deleteRecord();",
          "1071:         App.store.fastCommit();",
          "1072:       });",
          "1073:     }, this);",
          "1074:   }, this);",
          "1075: };",
          "",
          "---------------"
        ],
        "ambari-web/test/mappers/stack_service_mapper_test.js||ambari-web/test/mappers/stack_service_mapper_test.js": [
          "File: ambari-web/test/mappers/stack_service_mapper_test.js -> ambari-web/test/mappers/stack_service_mapper_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:       };",
          "230:     beforeEach(function () {",
          "232:     });",
          "234:     it('should sort and map data about services with their components', function () {",
          "",
          "[Removed Lines]",
          "231:       App.stackServiceMapper.clearStackModels();",
          "",
          "[Added Lines]",
          "231:       App.clearModels([App.StackService, App.StackServiceComponent]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cabc78f4731012373c34bc329d038316dabc149",
      "candidate_info": {
        "commit_hash": "3cabc78f4731012373c34bc329d038316dabc149",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/3cabc78f4731012373c34bc329d038316dabc149",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/log-message/log-message.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.ts"
        ],
        "message": "[AMBARI-24441] [Log Search UI] The graphs are not always resized on window resize event. (#2052)\n\n(cherry picked from commit cb262c13177a8b854508acd475c278c3b6be61f1)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/log-message/log-message.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/log-message/log-message.component.ts",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/classes/components/graph/graph.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import * as d3sc from 'd3-scale-chromatic';",
          "24: import {Observable} from 'rxjs/Observable';",
          "25: import 'rxjs/add/observable/fromEvent';",
          "27: import {",
          "28: GraphPositionOptions, GraphMarginOptions, GraphTooltipInfo, LegendItem, GraphEventData, GraphEmittedEvent",
          "29: } from '@app/classes/graph';",
          "",
          "[Removed Lines]",
          "26: import 'rxjs/add/operator/throttleTime';",
          "",
          "[Added Lines]",
          "26: import 'rxjs/add/operator/debounceTime';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   width: number;",
          "54:   @Input()",
          "57:   @Input()",
          "60:   @Input()",
          "61:   colors: HomogeneousObject<string> = {};",
          "",
          "[Removed Lines]",
          "55:   height: number = 150;",
          "58:   tickPadding: number = 10;",
          "",
          "[Added Lines]",
          "55:   height = 150;",
          "58:   tickPadding = 10;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:   @Input()",
          "77:   @Input()",
          "84:   @Input()",
          "91:   @Input()",
          "98:   @Input()",
          "105:   @Input()",
          "",
          "[Removed Lines]",
          "71:   isTimeGraph: boolean = false;",
          "78:   reverseXRange: boolean = false;",
          "85:   reverseYRange: boolean = false;",
          "92:   allowFractionalXTicks: boolean = true;",
          "99:   allowFractionalYTicks: boolean = true;",
          "106:   skipZeroValuesInTooltip: boolean = true;",
          "",
          "[Added Lines]",
          "71:   isTimeGraph = false;",
          "78:   reverseXRange = false;",
          "85:   reverseYRange = false;",
          "92:   allowFractionalXTicks = true;",
          "99:   allowFractionalYTicks = true;",
          "106:   skipZeroValuesInTooltip = true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:   @Input()",
          "",
          "[Removed Lines]",
          "114:   emitFormattedXTick: boolean = false;",
          "",
          "[Added Lines]",
          "114:   emitFormattedXTick = false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:   @Input()",
          "124:   @Output()",
          "125:   xTickContextMenu: EventEmitter<GraphEmittedEvent<MouseEvent>> = new EventEmitter();",
          "",
          "[Removed Lines]",
          "122:   emitFormattedYTick: boolean = false;",
          "",
          "[Added Lines]",
          "122:   emitFormattedYTick = false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "135:   })",
          "136:   tooltipRef: ElementRef;",
          "142:   protected utils: UtilsService;",
          "",
          "[Removed Lines]",
          "138:   private readonly xAxisClassName: string = 'axis-x';",
          "140:   private readonly yAxisClassName: string = 'axis-y';",
          "",
          "[Added Lines]",
          "138:   private readonly xAxisClassName = 'axis-x';",
          "140:   private readonly yAxisClassName = 'axis-y';",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "184:   protected subscriptions: Subscription[] = [];",
          "",
          "[Removed Lines]",
          "182:   private tooltipOnTheLeft: boolean = false;",
          "",
          "[Added Lines]",
          "182:   private tooltipOnTheLeft = false;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "197:   ngOnInit() {",
          "198:     this.subscriptions.push(",
          "200:     );",
          "201:     this.setLegendItems();",
          "202:   }",
          "",
          "[Removed Lines]",
          "199:       Observable.fromEvent(window, 'resize').throttleTime(100).subscribe(this.onWindowResize)",
          "",
          "[Added Lines]",
          "199:       Observable.fromEvent(window, 'resize').debounceTime(100).subscribe(this.onWindowResize)",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/log-message/log-message.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/log-message/log-message.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/log-message/log-message.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/log-message/log-message.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "17: import {Component, Input, AfterViewInit, ElementRef, ViewChild, OnChanges, SimpleChanges, HostListener, ChangeDetectorRef} from '@angular/core';",
          "",
          "[Added Lines]",
          "17: import {",
          "18:   Component,",
          "19:   Input,",
          "20:   AfterViewInit,",
          "21:   ElementRef,",
          "22:   ViewChild,",
          "23:   OnChanges,",
          "24:   OnInit,",
          "25:   OnDestroy,",
          "26:   SimpleChanges,",
          "27:   HostListener,",
          "28:   ChangeDetectorRef",
          "29: } from '@angular/core';",
          "30: import {Observable} from 'rxjs/Observable';",
          "31: import {Subscription} from 'rxjs/Subscription';",
          "32: import 'rxjs/add/operator/debounceTime';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:   templateUrl: './log-message.component.html',",
          "27:   styleUrls: ['./log-message.component.less']",
          "28: })",
          "",
          "[Removed Lines]",
          "29: export class LogMessageComponent implements AfterViewInit, OnChanges {",
          "",
          "[Added Lines]",
          "44: export class LogMessageComponent implements AfterViewInit, OnChanges, OnInit, OnDestroy {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:   @Input()",
          "",
          "[Removed Lines]",
          "43:   isOpen: boolean = false;",
          "",
          "[Added Lines]",
          "58:   isOpen = false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "64:   private addCaret: boolean = false;",
          "",
          "[Added Lines]",
          "79:   private addCaret = false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "79:     return this.multiLineTestRegexp.test(this.message);",
          "80:   }",
          "",
          "[Removed Lines]",
          "82:   constructor(private cdRef:ChangeDetectorRef) {}",
          "",
          "[Added Lines]",
          "101:   protected subscriptions: Subscription[] = [];",
          "103:   constructor(private cdRef: ChangeDetectorRef) {}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "93:     }",
          "94:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:   ngOnInit() {",
          "118:     this.subscriptions.push(",
          "119:       Observable.fromEvent(window, 'resize').debounceTime(100).subscribe(this.onWindowResize)",
          "120:     );",
          "121:   }",
          "123:   ngOnDestroy() {",
          "124:     this.subscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());",
          "125:   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "109:   onWindowResize = (): void => {",
          "110:     this.checkAddCaret();",
          "117:   checkAddCaret = (): void =>  {",
          "119:     this.addCaret = this.isMultiLineMessage || (el.scrollHeight > el.clientHeight) || (el.scrollWidth > el.clientWidth);",
          "120:     this.cdRef.detectChanges();",
          "121:   };",
          "",
          "[Removed Lines]",
          "108:   @HostListener('window:resize', ['$event'])",
          "111:   };",
          "118:     let el = this.content.nativeElement;",
          "",
          "[Added Lines]",
          "141:   }",
          "148:     const el = this.content.nativeElement;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "129:     ev.preventDefault();",
          "130:     this.toggleOpen();",
          "131:   }",
          "",
          "[Removed Lines]",
          "128:   onCaretClick(ev:MouseEvent) {",
          "",
          "[Added Lines]",
          "158:   onCaretClick(ev: MouseEvent) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "138:     this.isOpen = !this.isOpen;",
          "139:   }",
          "",
          "[Removed Lines]",
          "137:   toggleOpen():void {",
          "",
          "[Added Lines]",
          "167:   toggleOpen(): void {",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.ts||ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.ts -> ambari-logsearch/ambari-logsearch-web/src/app/components/logs-container/logs-container.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import {FormGroup} from '@angular/forms';",
          "21: import {Observable} from 'rxjs/Observable';",
          "22: import 'rxjs/add/operator/debounceTime';",
          "26: import {LogsContainerService} from '@app/services/logs-container.service';",
          "27: import {ServiceLogsHistogramDataService} from '@app/services/storage/service-logs-histogram-data.service';",
          "28: import {AuditLogsGraphDataService} from '@app/services/storage/audit-logs-graph-data.service';",
          "",
          "[Removed Lines]",
          "23: import 'rxjs/add/operator/skipWhile';",
          "24: import 'rxjs/add/operator/skip';",
          "25: import 'rxjs/add/operator/throttleTime';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: })",
          "51: export class LogsContainerComponent implements OnInit, OnDestroy {",
          "55:   tabs: Observable<LogTypeTab[]> = this.tabsStorage.getAll().map((tabs: LogTypeTab[]) => {",
          "56:     return tabs.map((tab: LogTypeTab) => {",
          "",
          "[Removed Lines]",
          "53:   private isFilterPanelFixedPostioned: boolean = false;",
          "",
          "[Added Lines]",
          "50:   private isFilterPanelFixedPostioned = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "161:     this.subscriptions.push(",
          "163:     );",
          "165:   }",
          "",
          "[Removed Lines]",
          "162:       Observable.fromEvent(window, 'scroll').subscribe(this.setFixedPositionValue)",
          "",
          "[Added Lines]",
          "159:       Observable.fromEvent(window, 'scroll').debounceTime(10).subscribe(this.setFixedPositionValue)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fe784d6ebabbcfb236e0613219395a9cd123d3b",
      "candidate_info": {
        "commit_hash": "8fe784d6ebabbcfb236e0613219395a9cd123d3b",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8fe784d6ebabbcfb236e0613219395a9cd123d3b",
        "files": [
          "ambari-web/app/utils/configs/move_namenode_config_initializer.js"
        ],
        "message": "AMBARI-25199. Ambari does not update \"dfs.namenode.lifeline.rpc-address\" during Namenode move operation (amagyar) (#2876) (#2878)",
        "before_after_code_files": [
          "ambari-web/app/utils/configs/move_namenode_config_initializer.js||ambari-web/app/utils/configs/move_namenode_config_initializer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/utils/configs/move_namenode_config_initializer.js||ambari-web/app/utils/configs/move_namenode_config_initializer.js": [
          "File: ambari-web/app/utils/configs/move_namenode_config_initializer.js -> ambari-web/app/utils/configs/move_namenode_config_initializer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     'dfs.namenode.https-address.{{namespaceId}}.{{suffix}}': App.MoveComponentConfigInitializerClass.getTargetHostConfig(50470),",
          "33:     'dfs.namenode.rpc-address.{{namespaceId}}.{{suffix}}': App.MoveComponentConfigInitializerClass.getTargetHostConfig(8020),",
          "34:     'dfs.namenode.servicerpc-address.{{namespaceId}}.{{suffix}}': App.MoveComponentConfigInitializerClass.getTargetHostConfig(8021),",
          "35:   },",
          "37:   uniqueInitializers: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:     'dfs.namenode.lifeline.rpc-address.{{namespaceId}}.{{suffix}}': App.MoveComponentConfigInitializerClass.getTargetHostConfig(8050)",
          "",
          "---------------"
        ]
      }
    }
  ]
}