{
  "cve_id": "CVE-2023-34049",
  "cve_desc": "The Salt-SSH pre-flight option copies the script to the target at a predictable path, which allows an attacker to force Salt-SSH to run their script. If an attacker has access to the target VM and knows the path to the pre-flight script before it runs they can ensure Salt-SSH runs their script with the privileges of the user running Salt-SSH.\u00a0Do not make the copy path on the target predictable and ensure we check return codes of the scp command if the copy fails.",
  "repo": "saltstack/salt",
  "patch_hash": "286d55eb5a6e6bf9428405bdf5632b419bdf8444",
  "patch_info": {
    "commit_hash": "286d55eb5a6e6bf9428405bdf5632b419bdf8444",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/286d55eb5a6e6bf9428405bdf5632b419bdf8444",
    "files": [
      "tests/integration/ssh/test_pre_flight.py",
      "tests/pytests/integration/ssh/test_pre_flight.py"
    ],
    "message": "Add pytest integration pre_flight integration tests for CVE-2023-34049",
    "before_after_code_files": [
      "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py",
      "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py"
    ]
  },
  "patch_diff": {
    "tests/integration/ssh/test_pre_flight.py||tests/integration/ssh/test_pre_flight.py": [
      "File: tests/integration/ssh/test_pre_flight.py -> tests/integration/ssh/test_pre_flight.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/pytests/integration/ssh/test_pre_flight.py||tests/pytests/integration/ssh/test_pre_flight.py": [
      "File: tests/pytests/integration/ssh/test_pre_flight.py -> tests/pytests/integration/ssh/test_pre_flight.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \"\"\"",
      "2: Test for ssh_pre_flight roster option",
      "3: \"\"\"",
      "5: import grp",
      "6: import os",
      "7: import pathlib",
      "8: import pwd",
      "9: import shutil",
      "10: import subprocess",
      "12: import pytest",
      "13: import yaml",
      "14: from saltfactories.utils import random_string",
      "16: import salt.utils.files",
      "19: def _custom_roster(roster_file, roster_data):",
      "20:     with salt.utils.files.fopen(roster_file, \"r\") as fp:",
      "21:         data = salt.utils.yaml.safe_load(fp)",
      "22:     for key, item in roster_data.items():",
      "23:         data[\"localhost\"][key] = item",
      "24:     with salt.utils.files.fopen(roster_file, \"w\") as fp:",
      "25:         yaml.safe_dump(data, fp)",
      "28: @pytest.fixture",
      "29: def _create_roster(salt_ssh_roster_file, tmp_path):",
      "30:     ret = {}",
      "31:     ret[\"roster\"] = salt_ssh_roster_file",
      "32:     ret[\"data\"] = {\"ssh_pre_flight\": str(tmp_path / \"ssh_pre_flight.sh\")}",
      "33:     ret[\"test_script\"] = str(tmp_path / \"test-pre-flight-script-worked.txt\")",
      "34:     ret[\"thin_dir\"] = tmp_path / \"thin_dir\"",
      "36:     with salt.utils.files.fopen(salt_ssh_roster_file, \"r\") as fp:",
      "37:         data = salt.utils.yaml.safe_load(fp)",
      "38:     pre_flight_script = ret[\"data\"][\"ssh_pre_flight\"]",
      "39:     data[\"localhost\"][\"ssh_pre_flight\"] = pre_flight_script",
      "40:     data[\"localhost\"][\"thin_dir\"] = str(ret[\"thin_dir\"])",
      "41:     with salt.utils.files.fopen(salt_ssh_roster_file, \"w\") as fp:",
      "42:         yaml.safe_dump(data, fp)",
      "44:     with salt.utils.files.fopen(pre_flight_script, \"w\") as fp:",
      "45:         fp.write(\"touch {}\".format(ret[\"test_script\"]))",
      "47:     yield ret",
      "48:     if ret[\"thin_dir\"].exists():",
      "49:         shutil.rmtree(ret[\"thin_dir\"])",
      "52: @pytest.mark.slow_test",
      "53: def test_ssh_pre_flight(salt_ssh_cli, caplog, _create_roster):",
      "54:     \"\"\"",
      "55:     test ssh when ssh_pre_flight is set",
      "56:     ensure the script runs successfully",
      "57:     \"\"\"",
      "58:     ret = salt_ssh_cli.run(\"test.ping\")",
      "59:     assert ret.returncode == 0",
      "61:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "64: @pytest.mark.slow_test",
      "65: def test_ssh_run_pre_flight(salt_ssh_cli, _create_roster):",
      "66:     \"\"\"",
      "67:     test ssh when --pre-flight is passed to salt-ssh",
      "68:     to ensure the script runs successfully",
      "69:     \"\"\"",
      "70:     # make sure we previously ran a command so the thin dir exists",
      "71:     ret = salt_ssh_cli.run(\"test.ping\")",
      "72:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "74:     # Now remeove the script to ensure pre_flight doesn't run",
      "75:     # without --pre-flight",
      "76:     pathlib.Path(_create_roster[\"test_script\"]).unlink()",
      "78:     assert salt_ssh_cli.run(\"test.ping\").returncode == 0",
      "79:     assert not pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "81:     # Now ensure",
      "82:     ret = salt_ssh_cli.run(",
      "83:         \"test.ping\",",
      "84:         \"--pre-flight\",",
      "85:     )",
      "86:     assert ret.returncode == 0",
      "87:     assert pathlib.Path(_create_roster[\"test_script\"]).exists()",
      "90: @pytest.mark.slow_test",
      "91: def test_ssh_run_pre_flight_args(salt_ssh_cli, _create_roster):",
      "92:     \"\"\"",
      "93:     test ssh when --pre-flight is passed to salt-ssh",
      "94:     to ensure the script runs successfully passing some args",
      "95:     \"\"\"",
      "96:     _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight_args\": \"foobar test\"})",
      "97:     # Create pre_flight script that accepts args",
      "98:     test_script = _create_roster[\"test_script\"]",
      "99:     test_script_1 = pathlib.Path(test_script + \"-foobar\")",
      "100:     test_script_2 = pathlib.Path(test_script + \"-test\")",
      "101:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
      "102:         fp.write(",
      "103:             f\"\"\"",
      "104:         touch {str(test_script)}-$1",
      "105:         touch {str(test_script)}-$2",
      "106:         \"\"\"",
      "107:         )",
      "108:     ret = salt_ssh_cli.run(\"test.ping\")",
      "109:     assert ret.returncode == 0",
      "110:     assert test_script_1.exists()",
      "111:     assert test_script_2.exists()",
      "112:     pathlib.Path(test_script_1).unlink()",
      "113:     pathlib.Path(test_script_2).unlink()",
      "115:     ret = salt_ssh_cli.run(\"test.ping\")",
      "116:     assert ret.returncode == 0",
      "117:     assert not test_script_1.exists()",
      "118:     assert not test_script_2.exists()",
      "120:     ret = salt_ssh_cli.run(",
      "121:         \"test.ping\",",
      "122:         \"--pre-flight\",",
      "123:     )",
      "124:     assert ret.returncode == 0",
      "125:     assert test_script_1.exists()",
      "126:     assert test_script_2.exists()",
      "129: @pytest.mark.slow_test",
      "130: def test_ssh_run_pre_flight_args_prevent_injection(",
      "131:     salt_ssh_cli, _create_roster, tmp_path",
      "132: ):",
      "133:     \"\"\"",
      "134:     test ssh when --pre-flight is passed to salt-ssh",
      "135:     and evil arguments are used in order to produce shell injection",
      "136:     \"\"\"",
      "137:     injected_file = tmp_path / \"injection\"",
      "138:     _custom_roster(",
      "139:         salt_ssh_cli.roster_file,",
      "140:         {\"ssh_pre_flight_args\": f\"foobar; echo injected > {str(injected_file)}\"},",
      "141:     )",
      "142:     # Create pre_flight script that accepts args",
      "143:     test_script = _create_roster[\"test_script\"]",
      "144:     test_script_1 = pathlib.Path(test_script + \"-echo\")",
      "145:     test_script_2 = pathlib.Path(test_script + \"-foobar;\")",
      "146:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp:",
      "147:         fp.write(",
      "148:             f\"\"\"",
      "149:         touch {str(test_script)}-$1",
      "150:         touch {str(test_script)}-$2",
      "151:         \"\"\"",
      "152:         )",
      "154:     # make sure we previously ran a command so the thin dir exists",
      "155:     ret = salt_ssh_cli.run(\"test.ping\")",
      "156:     assert ret.returncode == 0",
      "157:     assert test_script_1.exists()",
      "158:     assert test_script_2.exists()",
      "159:     test_script_1.unlink()",
      "160:     test_script_2.unlink()",
      "161:     assert not injected_file.is_file()",
      "163:     ret = salt_ssh_cli.run(",
      "164:         \"test.ping\",",
      "165:         \"--pre-flight\",",
      "166:     )",
      "167:     assert ret.returncode == 0",
      "169:     assert test_script_1.exists()",
      "170:     assert test_script_2.exists()",
      "171:     assert not pathlib.Path(",
      "172:         injected_file",
      "173:     ).is_file(), \"File injection suceeded. This shouldn't happend\"",
      "176: @pytest.mark.flaky(max_runs=4)",
      "177: @pytest.mark.slow_test",
      "178: def test_ssh_run_pre_flight_failure(salt_ssh_cli, _create_roster):",
      "179:     \"\"\"",
      "180:     test ssh_pre_flight when there is a failure",
      "181:     in the script.",
      "182:     \"\"\"",
      "183:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
      "184:         fp_.write(\"exit 2\")",
      "186:     ret = salt_ssh_cli.run(",
      "187:         \"test.ping\",",
      "188:         \"--pre-flight\",",
      "189:     )",
      "190:     assert ret.data[\"retcode\"] == 2",
      "193: @pytest.fixture",
      "194: def account():",
      "195:     username = random_string(\"test-account-\", uppercase=False)",
      "196:     with pytest.helpers.create_account(username=username) as account:",
      "197:         yield account",
      "200: @pytest.mark.slow_test",
      "201: def test_ssh_pre_flight_script(salt_ssh_cli, caplog, _create_roster, tmp_path, account):",
      "202:     \"\"\"",
      "203:     Test to ensure user cannot create and run a script",
      "204:     with the expected pre_flight script path on target.",
      "205:     \"\"\"",
      "206:     try:",
      "207:         script = pathlib.Path.home() / \"hacked\"",
      "208:         tmp_preflight = pathlib.Path(\"/tmp\", \"ssh_pre_flight.sh\")",
      "209:         tmp_preflight.write_text(f\"touch {script}\")",
      "210:         os.chown(tmp_preflight, account.info.uid, account.info.gid)",
      "211:         ret = salt_ssh_cli.run(\"test.ping\")",
      "212:         assert not script.is_file()",
      "213:         assert ret.returncode == 0",
      "214:         assert ret.stdout == '{\\n\"localhost\": true\\n}\\n'",
      "215:     finally:",
      "216:         for _file in [script, tmp_preflight]:",
      "217:             if _file.is_file():",
      "218:                 _file.unlink()",
      "221: def demote(user_uid, user_gid):",
      "222:     def result():",
      "223:         # os.setgid does not remove group membership, so we remove them here so they are REALLY non-root",
      "224:         os.setgroups([])",
      "225:         os.setgid(user_gid)",
      "226:         os.setuid(user_uid)",
      "228:     return result",
      "231: @pytest.mark.slow_test",
      "232: def test_ssh_pre_flight_perms(salt_ssh_cli, caplog, _create_roster, account):",
      "233:     \"\"\"",
      "234:     Test to ensure standard user cannot run pre flight script",
      "235:     on target when user sets wrong permissions (777) on",
      "236:     ssh_pre_flight script.",
      "237:     \"\"\"",
      "238:     try:",
      "239:         script = pathlib.Path(\"/tmp\", \"itworked\")",
      "240:         preflight = pathlib.Path(\"/ssh_pre_flight.sh\")",
      "241:         preflight.write_text(f\"touch {str(script)}\")",
      "242:         tmp_preflight = pathlib.Path(\"/tmp\", preflight.name)",
      "244:         _custom_roster(salt_ssh_cli.roster_file, {\"ssh_pre_flight\": str(preflight)})",
      "245:         preflight.chmod(0o0777)",
      "246:         run_script = pathlib.Path(\"/run_script\")",
      "247:         run_script.write_text(",
      "248:             f\"\"\"",
      "249:         x=1",
      "250:         while [ $x -le 200000 ]; do",
      "251:             SCRIPT=`bash {str(tmp_preflight)} 2> /dev/null; echo $?`",
      "252:             if [ ${{SCRIPT}} == 0 ]; then",
      "253:                 break",
      "254:             fi",
      "255:             x=$(( $x + 1 ))",
      "256:         done",
      "257:         \"\"\"",
      "258:         )",
      "259:         run_script.chmod(0o0777)",
      "260:         # pylint: disable=W1509",
      "261:         ret = subprocess.Popen(",
      "262:             [\"sh\", f\"{run_script}\"],",
      "263:             preexec_fn=demote(account.info.uid, account.info.gid),",
      "264:             stdout=None,",
      "265:             stderr=None,",
      "266:             stdin=None,",
      "267:             universal_newlines=True,",
      "268:         )",
      "269:         # pylint: enable=W1509",
      "270:         ret = salt_ssh_cli.run(\"test.ping\")",
      "271:         assert ret.returncode == 0",
      "273:         # Lets make sure a different user other than root",
      "274:         # Didn't run the script",
      "275:         assert os.stat(script).st_uid != account.info.uid",
      "276:         assert script.is_file()",
      "277:     finally:",
      "278:         for _file in [script, preflight, tmp_preflight, run_script]:",
      "279:             if _file.is_file():",
      "280:                 _file.unlink()",
      "283: @pytest.mark.slow_test",
      "284: def test_ssh_run_pre_flight_target_file_perms(salt_ssh_cli, _create_roster, tmp_path):",
      "285:     \"\"\"",
      "286:     test ssh_pre_flight to ensure the target pre flight script",
      "287:     has the correct perms",
      "288:     \"\"\"",
      "289:     perms_file = tmp_path / \"perms\"",
      "290:     with salt.utils.files.fopen(_create_roster[\"data\"][\"ssh_pre_flight\"], \"w\") as fp_:",
      "291:         fp_.write(",
      "292:             f\"\"\"",
      "293:         SCRIPT_NAME=$0",
      "294:         stat -L -c \"%a %G %U\" $SCRIPT_NAME > {perms_file}",
      "295:         \"\"\"",
      "296:         )",
      "298:     ret = salt_ssh_cli.run(",
      "299:         \"test.ping\",",
      "300:         \"--pre-flight\",",
      "301:     )",
      "302:     assert ret.returncode == 0",
      "303:     with salt.utils.files.fopen(perms_file) as fp:",
      "304:         data = fp.read()",
      "305:     assert data.split()[0] == \"600\"",
      "306:     uid = os.getuid()",
      "307:     gid = os.getgid()",
      "308:     assert data.split()[1] == grp.getgrgid(gid).gr_name",
      "309:     assert data.split()[2] == pwd.getpwuid(uid).pw_name",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c7fbbd42ec6e02d31dd5b46e54cb4d7cb9adb9a5",
      "candidate_info": {
        "commit_hash": "c7fbbd42ec6e02d31dd5b46e54cb4d7cb9adb9a5",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/c7fbbd42ec6e02d31dd5b46e54cb4d7cb9adb9a5",
        "files": [
          "tests/pytests/unit/modules/test_msteams.py",
          "tests/pytests/unit/states/test_file.py"
        ],
        "message": "The correct method is `assert_called_once_with` not `called_once_with`\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/unit/modules/test_msteams.py||tests/pytests/unit/modules/test_msteams.py",
          "tests/pytests/unit/states/test_file.py||tests/pytests/unit/states/test_file.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/modules/test_msteams.py||tests/pytests/unit/modules/test_msteams.py": [
          "File: tests/pytests/unit/modules/test_msteams.py -> tests/pytests/unit/modules/test_msteams.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     with patch(\"salt.utils.http.query\", http_mock):",
          "25:         ret = msteams.post_card(\"test\")",
          "26:         assert ret",
          "28:             method=\"POST\",",
          "29:             header_dict={\"Content-Type\": \"application/json\"},",
          "30:             data='{\"text\": \"test\", \"title\": Null, \"themeColor\": Null}',",
          "",
          "[Removed Lines]",
          "27:         assert http_mock.called_once_with(",
          "",
          "[Added Lines]",
          "27:         assert http_mock.assert_called_once_with(",
          "",
          "---------------"
        ],
        "tests/pytests/unit/states/test_file.py||tests/pytests/unit/states/test_file.py": [
          "File: tests/pytests/unit/states/test_file.py -> tests/pytests/unit/states/test_file.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:             \"name\": \"/tmp/test\",",
          "88:             \"result\": False,",
          "89:         }",
          "91:             prefix=\"does_not_exist/\"",
          "92:         )",
          "",
          "[Removed Lines]",
          "90:         assert salt_dunder[\"cp.list_master_dirs\"].called_once_with(",
          "",
          "[Added Lines]",
          "90:         assert salt_dunder[\"cp.list_master_dirs\"].assert_called_once_with(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "963f1ce6691870e7e7076e53b75c990ed17b519e",
      "candidate_info": {
        "commit_hash": "963f1ce6691870e7e7076e53b75c990ed17b519e",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/963f1ce6691870e7e7076e53b75c990ed17b519e",
        "files": [
          "tests/pytests/unit/modules/test_aptpkg.py",
          "tests/pytests/unit/modules/test_linux_sysctl.py",
          "tests/pytests/unit/modules/test_win_ip.py",
          "tests/pytests/unit/test_master.py",
          "tests/pytests/unit/utils/event/test_event.py",
          "tests/unit/modules/test_nilrt_ip.py",
          "tests/unit/netapi/rest_tornado/test_saltnado.py"
        ],
        "message": "Fix mock calls\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/unit/modules/test_aptpkg.py||tests/pytests/unit/modules/test_aptpkg.py",
          "tests/pytests/unit/modules/test_linux_sysctl.py||tests/pytests/unit/modules/test_linux_sysctl.py",
          "tests/pytests/unit/modules/test_win_ip.py||tests/pytests/unit/modules/test_win_ip.py",
          "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py",
          "tests/pytests/unit/utils/event/test_event.py||tests/pytests/unit/utils/event/test_event.py",
          "tests/unit/modules/test_nilrt_ip.py||tests/unit/modules/test_nilrt_ip.py",
          "tests/unit/netapi/rest_tornado/test_saltnado.py||tests/unit/netapi/rest_tornado/test_saltnado.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/modules/test_aptpkg.py||tests/pytests/unit/modules/test_aptpkg.py": [
          "File: tests/pytests/unit/modules/test_aptpkg.py -> tests/pytests/unit/modules/test_aptpkg.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1298:     ]",
          "1300:     cmd_mock = MagicMock(side_effect=cmd_side_effect)",
          "1302:         call(",
          "1303:             [\"dpkg\", \"-l\", \"python\"],",
          "1306:             output_loglevel=\"quiet\",",
          "1307:             python_shell=True,",
          "1308:             username=\"Darth Vader\",",
          "1309:         ),",
          "1313:     with patch.dict(",
          "1314:         aptpkg.__salt__,",
          "",
          "[Removed Lines]",
          "1301:     cmd_call = (",
          "1304:             env={},",
          "1305:             ignore_retcode=False,",
          "1310:     )",
          "1311:     expected_calls = [cmd_call * 5]",
          "",
          "[Added Lines]",
          "1301:     cmd_call = [",
          "1306:             env={},",
          "1307:             ignore_retcode=False,",
          "1310:     ]",
          "1311:     expected_calls = cmd_call * 5",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1329:             # We should attempt to call the cmd 5 times",
          "1330:             assert cmd_mock.call_count == 5",
          "1334: def test_services_need_restart_checkrestart_missing():",
          "",
          "[Removed Lines]",
          "1331:             cmd_mock.has_calls(expected_calls)",
          "",
          "[Added Lines]",
          "1331:             cmd_mock.assert_has_calls(expected_calls)",
          "",
          "---------------"
        ],
        "tests/pytests/unit/modules/test_linux_sysctl.py||tests/pytests/unit/modules/test_linux_sysctl.py": [
          "File: tests/pytests/unit/modules/test_linux_sysctl.py -> tests/pytests/unit/modules/test_linux_sysctl.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:         ):",
          "216:             with pytest.raises(CommandExecutionError):",
          "217:                 linux_sysctl.persist(\"net.ipv4.ip_forward\", 42, config=None)",
          "221: def test_persist_no_conf_success():",
          "",
          "[Removed Lines]",
          "218:     fopen_mock.called_once()",
          "",
          "[Added Lines]",
          "218:     fopen_mock.assert_called_once()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:     \"\"\"",
          "354:     config = str(tmp_path / \"existing_sysctl_with_spaces.conf\")",
          "355:     value = \"|/usr/share/kdump-tools/dump-core %p %s %t %e\"",
          "357:     with fopen(config, \"w\", encoding=\"utf-8\") as config_file:",
          "358:         config_file.write(config_file_content)",
          "359:     mock_run = MagicMock(return_value=value)",
          "",
          "[Removed Lines]",
          "356:     config_file_content = \"kernel.core_pattern = {}\\n\".format(value)",
          "",
          "[Added Lines]",
          "356:     config_file_content = f\"kernel.core_pattern = {value}\\n\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383:     \"\"\"",
          "384:     config = str(tmp_path / \"existing_sysctl_with_spaces.conf\")",
          "385:     value = \"|/usr/share/kdump-tools/dump-core %p %s %t %e\"",
          "387:     with fopen(config, \"w\", encoding=\"utf-8\") as config_file:",
          "388:         config_file.write(config_file_content)",
          "389:     mock_run = MagicMock(return_value=\"\")",
          "",
          "[Removed Lines]",
          "386:     config_file_content = \"kernel.core_pattern = {}\\n\".format(value)",
          "",
          "[Added Lines]",
          "386:     config_file_content = f\"kernel.core_pattern = {value}\\n\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "451:     assert os.path.isfile(config)",
          "452:     with fopen(config, encoding=\"utf-8\") as config_file:",
          "453:         written = config_file.read()",
          "457: def test_persist_value_with_spaces_new_file(tmp_path):",
          "",
          "[Removed Lines]",
          "454:     assert written == \"kernel.core_pattern = {}\\n\".format(value)",
          "",
          "[Added Lines]",
          "454:     assert written == f\"kernel.core_pattern = {value}\\n\"",
          "",
          "---------------"
        ],
        "tests/pytests/unit/modules/test_win_ip.py||tests/pytests/unit/modules/test_win_ip.py": [
          "File: tests/pytests/unit/modules/test_win_ip.py -> tests/pytests/unit/modules/test_win_ip.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:     ):",
          "152:         assert win_ip.enable(\"Ethernet\")",
          "155:         [",
          "156:             \"netsh\",",
          "157:             \"interface\",",
          "",
          "[Removed Lines]",
          "154:     mock_cmd.called_once_with(",
          "",
          "[Added Lines]",
          "154:     mock_cmd.assert_called_once_with(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:     ):",
          "181:         assert win_ip.disable(\"Ethernet\")",
          "184:         [",
          "185:             \"netsh\",",
          "186:             \"interface\",",
          "",
          "[Removed Lines]",
          "183:     mock_cmd.called_once_with(",
          "",
          "[Added Lines]",
          "183:     mock_cmd.assert_called_once_with(",
          "",
          "---------------"
        ],
        "tests/pytests/unit/test_master.py||tests/pytests/unit/test_master.py": [
          "File: tests/pytests/unit/test_master.py -> tests/pytests/unit/test_master.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:         end = time.time()",
          "61:         # Interval is equal to timeout so the _do_update method will be called",
          "62:         # one time.",
          "64:         # Timeout is 1 second",
          "65:         duration = end - start",
          "66:         if duration > 2 and salt.utils.platform.spawning_platform():",
          "",
          "[Removed Lines]",
          "63:         update.called_once()",
          "",
          "[Added Lines]",
          "63:         update.assert_called_once()",
          "",
          "---------------"
        ],
        "tests/pytests/unit/utils/event/test_event.py||tests/pytests/unit/utils/event/test_event.py": [
          "File: tests/pytests/unit/utils/event/test_event.py -> tests/pytests/unit/utils/event/test_event.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: def _assert_got_event(evt, data, msg=None, expected_failure=False):",
          "39:     assert evt is not None, msg",
          "40:     for key in data:",
          "42:         assertMsg = \"{0}: Key {1} value mismatch, {2} != {3}\"",
          "43:         assertMsg = assertMsg.format(msg, key, data[key], evt[key])",
          "44:         if not expected_failure:",
          "",
          "[Removed Lines]",
          "41:         assert key in evt, \"{}: Key {} missing\".format(msg, key)",
          "",
          "[Added Lines]",
          "41:         assert key in evt, f\"{msg}: Key {key} missing\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:         :10",
          "60:     ]",
          "61:     with salt.utils.event.MinionEvent(opts, listen=False) as me:",
          "66: def test_minion_event_tcp_ipc_mode():",
          "",
          "[Removed Lines]",
          "62:         assert me.puburi == str(sock_dir / \"minion_event_{}_pub.ipc\".format(id_hash))",
          "63:         assert me.pulluri == str(sock_dir / \"minion_event_{}_pull.ipc\".format(id_hash))",
          "",
          "[Added Lines]",
          "62:         assert me.puburi == str(sock_dir / f\"minion_event_{id_hash}_pub.ipc\")",
          "63:         assert me.pulluri == str(sock_dir / f\"minion_event_{id_hash}_pull.ipc\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73: def test_minion_event_no_id(sock_dir):",
          "74:     with salt.utils.event.MinionEvent(dict(sock_dir=str(sock_dir)), listen=False) as me:",
          "75:         id_hash = hashlib.sha256(salt.utils.stringutils.to_bytes(\"\")).hexdigest()[:10]",
          "80: @pytest.mark.slow_test",
          "",
          "[Removed Lines]",
          "76:         assert me.puburi == str(sock_dir / \"minion_event_{}_pub.ipc\".format(id_hash))",
          "77:         assert me.pulluri == str(sock_dir / \"minion_event_{}_pull.ipc\".format(id_hash))",
          "",
          "[Added Lines]",
          "76:         assert me.puburi == str(sock_dir / f\"minion_event_{id_hash}_pub.ipc\")",
          "77:         assert me.pulluri == str(sock_dir / f\"minion_event_{id_hash}_pull.ipc\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "256:     with eventpublisher_process(str(sock_dir)):",
          "257:         with salt.utils.event.MasterEvent(str(sock_dir), listen=True) as me:",
          "258:             for i in range(500):",
          "260:                 evt = me.get_event(tag=\"testevents\")",
          "264: @pytest.mark.slow_test",
          "",
          "[Removed Lines]",
          "259:                 me.fire_event({\"data\": \"{}\".format(i)}, \"testevents\")",
          "261:                 _assert_got_event(evt, {\"data\": \"{}\".format(i)}, \"Event {}\".format(i))",
          "",
          "[Added Lines]",
          "259:                 me.fire_event({\"data\": f\"{i}\"}, \"testevents\")",
          "261:                 _assert_got_event(evt, {\"data\": f\"{i}\"}, f\"Event {i}\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "268:         with salt.utils.event.MasterEvent(str(sock_dir), listen=True) as me:",
          "269:             # Must not exceed zmq HWM",
          "270:             for i in range(500):",
          "272:             for i in range(500):",
          "273:                 evt = me.get_event(tag=\"testevents\")",
          "277: # Test the fire_master function. As it wraps the underlying fire_event,",
          "",
          "[Removed Lines]",
          "271:                 me.fire_event({\"data\": \"{}\".format(i)}, \"testevents\")",
          "274:                 _assert_got_event(evt, {\"data\": \"{}\".format(i)}, \"Event {}\".format(i))",
          "",
          "[Added Lines]",
          "271:                 me.fire_event({\"data\": f\"{i}\"}, \"testevents\")",
          "274:                 _assert_got_event(evt, {\"data\": f\"{i}\"}, f\"Event {i}\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "300:     event = SaltEvent(node=None)",
          "301:     with patch.object(event, \"pusher\") as mock_pusher:",
          "302:         with patch.object(",
          "304:         ) as mock_log_debug:",
          "305:             mock_pusher.connect.side_effect = (",
          "306:                 salt.ext.tornado.iostream.StreamClosedError",
          "",
          "[Removed Lines]",
          "303:             salt.utils.event.log, \"debug\", auto_spec=True",
          "",
          "[Added Lines]",
          "303:             salt.utils.event.log, \"debug\", autospec=True",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "317:     event = SaltEvent(node=None)",
          "318:     with patch.object(event, \"pusher\") as mock_pusher:",
          "319:         with patch.object(",
          "321:         ) as mock_log_debug:",
          "322:             with patch.object(",
          "324:             ) as mock_log_error:",
          "325:                 mock_pusher.connect.side_effect = error",
          "326:                 event.connect_pull()",
          "",
          "[Removed Lines]",
          "320:             salt.utils.event.log, \"debug\", auto_spec=True",
          "323:                 salt.utils.event.log, \"error\", auto_spec=True",
          "",
          "[Added Lines]",
          "320:             salt.utils.event.log, \"debug\", autospec=True",
          "323:                 salt.utils.event.log, \"error\", autospec=True",
          "",
          "---------------"
        ],
        "tests/unit/modules/test_nilrt_ip.py||tests/unit/modules/test_nilrt_ip.py": [
          "File: tests/unit/modules/test_nilrt_ip.py -> tests/unit/modules/test_nilrt_ip.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:                 \"salt.modules.nilrt_ip._change_dhcp_config\", return_value=True",
          "29:             ) as change_dhcp_config_mock:",
          "30:                 assert nilrt_ip._change_state(\"test_interface\", \"down\")",
          "33:     def test_change_state_up_state(self):",
          "34:         \"\"\"",
          "",
          "[Removed Lines]",
          "31:                 assert change_dhcp_config_mock.called_with(\"test_interface\", False)",
          "",
          "[Added Lines]",
          "31:                 change_dhcp_config_mock.assert_called_with(\"test_interface\", False)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:                 \"salt.modules.nilrt_ip._change_dhcp_config\", return_value=True",
          "43:             ) as change_dhcp_config_mock:",
          "44:                 assert nilrt_ip._change_state(\"test_interface\", \"up\")",
          "47:     def test_set_static_all_with_dns(self):",
          "48:         \"\"\"",
          "",
          "[Removed Lines]",
          "45:                 assert change_dhcp_config_mock.called_with(\"test_interface\")",
          "",
          "[Added Lines]",
          "45:                 change_dhcp_config_mock.assert_called_with(\"test_interface\")",
          "",
          "---------------"
        ],
        "tests/unit/netapi/rest_tornado/test_saltnado.py||tests/unit/netapi/rest_tornado/test_saltnado.py": [
          "File: tests/unit/netapi/rest_tornado/test_saltnado.py -> tests/unit/netapi/rest_tornado/test_saltnado.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "647:         with patch.object(",
          "648:             self.handler.application.event_listener,",
          "649:             \"get_event\",",
          "651:             side_effect=fancy_get_event,",
          "652:         ), patch.dict(",
          "653:             self.handler.application.opts,",
          "",
          "[Removed Lines]",
          "650:             autospec=True,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698:         with patch.object(",
          "699:             self.handler.application.event_listener,",
          "700:             \"get_event\",",
          "702:             side_effect=fancy_get_event,",
          "703:         ), patch.object(",
          "704:             self.handler,",
          "",
          "[Removed Lines]",
          "701:             autospec=True,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "729:                 {",
          "730:                     \"tag\": \"fnord\",",
          "731:                     \"data\": {",
          "734:                     },",
          "735:                 }",
          "736:             )",
          "",
          "[Removed Lines]",
          "732:                         \"return\": \"return from fnord {}\".format(i),",
          "733:                         \"id\": \"fnord {}\".format(i),",
          "",
          "[Added Lines]",
          "730:                         \"return\": f\"return from fnord {i}\",",
          "731:                         \"id\": f\"fnord {i}\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "760:         with patch.object(",
          "761:             self.handler.application.event_listener,",
          "762:             \"get_event\",",
          "764:             side_effect=fancy_get_event,",
          "765:         ), patch.object(",
          "766:             self.handler,",
          "",
          "[Removed Lines]",
          "763:             autospec=True,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "794:                 {",
          "795:                     \"tag\": \"fnord\",",
          "796:                     \"data\": {",
          "799:                     },",
          "800:                 }",
          "801:             )",
          "",
          "[Removed Lines]",
          "797:                         \"return\": \"return from fnord {}\".format(i),",
          "798:                         \"id\": \"fnord {}\".format(i),",
          "",
          "[Added Lines]",
          "794:                         \"return\": f\"return from fnord {i}\",",
          "795:                         \"id\": f\"fnord {i}\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "820:         with patch.object(",
          "821:             self.handler.application.event_listener,",
          "822:             \"get_event\",",
          "824:             side_effect=fancy_get_event,",
          "825:         ), patch.dict(",
          "826:             self.handler.application.opts,",
          "",
          "[Removed Lines]",
          "823:             autospec=True,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "843:         completed_events = [salt.ext.tornado.gen.Future() for _ in range(10)]",
          "844:         events_by_id = {}",
          "845:         for i, event in enumerate(completed_events):",
          "847:             events_by_id[id_] = event",
          "848:             event.set_result(",
          "849:                 {",
          "850:                     \"tag\": \"fnord\",",
          "852:                 }",
          "853:             )",
          "854:         expected_result = {",
          "",
          "[Removed Lines]",
          "846:             id_ = \"fnord {}\".format(i)",
          "851:                     \"data\": {\"return\": \"return from {}\".format(id_), \"id\": id_},",
          "",
          "[Added Lines]",
          "842:             id_ = f\"fnord {i}\"",
          "847:                     \"data\": {\"return\": f\"return from {id_}\", \"id\": id_},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "878:         with patch.object(",
          "879:             self.handler.application.event_listener,",
          "880:             \"get_event\",",
          "882:             side_effect=fancy_get_event,",
          "883:         ), patch.dict(",
          "884:             self.handler.application.opts,",
          "",
          "[Removed Lines]",
          "881:             autospec=True,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "904:         events_by_id = {}",
          "905:         # Setup some real-enough looking return data",
          "906:         for i, event in enumerate(completed_events):",
          "908:             events_by_id[id_] = event",
          "909:             event.set_result(",
          "910:                 {",
          "911:                     \"tag\": \"fnord\",",
          "913:                 }",
          "914:             )",
          "915:         # Hard coded instead of dynamic to avoid potentially writing a test",
          "",
          "[Removed Lines]",
          "907:             id_ = \"fnord {}\".format(i)",
          "912:                     \"data\": {\"return\": \"return from {}\".format(id_), \"id\": id_},",
          "",
          "[Added Lines]",
          "902:             id_ = f\"fnord {i}\"",
          "907:                     \"data\": {\"return\": f\"return from {id_}\", \"id\": id_},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "971:         with patch.object(",
          "972:             self.handler.application.event_listener,",
          "973:             \"get_event\",",
          "975:             side_effect=fancy_get_event,",
          "976:         ), patch.object(",
          "977:             self.handler,",
          "",
          "[Removed Lines]",
          "974:             autospec=True,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d295e24f4354d62a6c53b9f6f99696b987eb15a1",
      "candidate_info": {
        "commit_hash": "d295e24f4354d62a6c53b9f6f99696b987eb15a1",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/d295e24f4354d62a6c53b9f6f99696b987eb15a1",
        "files": [
          "tests/pytests/unit/states/test_file.py"
        ],
        "message": "Switch to the correct fixture usage\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/unit/states/test_file.py||tests/pytests/unit/states/test_file.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/states/test_file.py||tests/pytests/unit/states/test_file.py": [
          "File: tests/pytests/unit/states/test_file.py -> tests/pytests/unit/states/test_file.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: from tests.support.mock import MagicMock, call, create_autospec, patch",
          "13:         file: {",
          "14:             \"__opts__\": {\"test\": False},",
          "15:             \"__env__\": \"base\",",
          "16:         }",
          "17:     }",
          "23: def fake_remove():",
          "24:     fake_remove_mod = create_autospec(filemod.remove)",
          "25:     with patch.dict(file.__salt__, {\"file.remove\": fake_remove_mod}):",
          "",
          "[Removed Lines]",
          "10: @pytest.fixture(autouse=True)",
          "11: def setup_loader(request):",
          "12:     setup_loader_modules = {",
          "18:     with pytest.helpers.loader_mock(request, setup_loader_modules) as loader_mock:",
          "19:         yield loader_mock",
          "22: @pytest.fixture()",
          "",
          "[Added Lines]",
          "10: @pytest.fixture",
          "11: def configure_loader_modules(minion_opts):",
          "12:     return {",
          "20: @pytest.fixture",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be3d892fc94e04fabbd4ffd4618346f3cfdbb795",
      "candidate_info": {
        "commit_hash": "be3d892fc94e04fabbd4ffd4618346f3cfdbb795",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/be3d892fc94e04fabbd4ffd4618346f3cfdbb795",
        "files": [
          "requirements/static/ci/common.in",
          "requirements/static/ci/py3.10/cloud.txt",
          "requirements/static/ci/py3.10/darwin.txt",
          "requirements/static/ci/py3.10/freebsd.txt",
          "requirements/static/ci/py3.10/lint.txt",
          "requirements/static/ci/py3.10/linux.txt",
          "requirements/static/ci/py3.10/windows.txt",
          "requirements/static/ci/py3.7/cloud.txt",
          "requirements/static/ci/py3.7/freebsd.txt",
          "requirements/static/ci/py3.7/lint.txt",
          "requirements/static/ci/py3.7/linux.txt",
          "requirements/static/ci/py3.7/windows.txt",
          "requirements/static/ci/py3.8/cloud.txt",
          "requirements/static/ci/py3.8/freebsd.txt",
          "requirements/static/ci/py3.8/lint.txt",
          "requirements/static/ci/py3.8/linux.txt",
          "requirements/static/ci/py3.8/windows.txt",
          "requirements/static/ci/py3.9/cloud.txt",
          "requirements/static/ci/py3.9/darwin.txt",
          "requirements/static/ci/py3.9/freebsd.txt",
          "requirements/static/ci/py3.9/lint.txt",
          "requirements/static/ci/py3.9/linux.txt",
          "requirements/static/ci/py3.9/windows.txt"
        ],
        "message": "Remove `docker` from `requirements/static/ci/common.in`\n\nIt was wrongly added whew resolving conflicts while merging forward\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "requirements/static/ci/common.in||requirements/static/ci/common.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "requirements/static/ci/common.in||requirements/static/ci/common.in": [
          "File: requirements/static/ci/common.in -> requirements/static/ci/common.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: clustershell",
          "15: croniter>=0.3.0,!=0.3.22\"; sys_platform != 'win32'",
          "16: dnspython",
          "18: etcd3-py==0.1.6",
          "19: gitpython>=3.1.37",
          "20: jmespath",
          "",
          "[Removed Lines]",
          "17: docker",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f7142cbc97afc64cd87b9311efa473b5c250fffe",
      "candidate_info": {
        "commit_hash": "f7142cbc97afc64cd87b9311efa473b5c250fffe",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/f7142cbc97afc64cd87b9311efa473b5c250fffe",
        "files": [
          "tests/pytests/functional/channel/test_server.py"
        ],
        "message": "Try a few times before raising the error\n\nSigned-off-by: Pedro Algarvio <palgarvio@vmware.com>",
        "before_after_code_files": [
          "tests/pytests/functional/channel/test_server.py||tests/pytests/functional/channel/test_server.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/saltstack/salt/pull/65482"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/pytests/functional/channel/test_server.py||tests/pytests/functional/channel/test_server.py": [
          "File: tests/pytests/functional/channel/test_server.py -> tests/pytests/functional/channel/test_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     req_server_channel.post_fork(handle_payload, io_loop=io_loop)",
          "167:     if master_config[\"transport\"] == \"zeromq\":",
          "174:     pub_channel = salt.channel.client.AsyncPubChannel.factory(minion_config)",
          "175:     received = []",
          "",
          "[Removed Lines]",
          "168:         p = Path(str(master_config[\"sock_dir\"])) / \"workers.ipc\"",
          "169:         mode = os.lstat(p).st_mode",
          "170:         assert bool(os.lstat(p).st_mode & stat.S_IRUSR)",
          "171:         assert not bool(os.lstat(p).st_mode & stat.S_IRGRP)",
          "172:         assert not bool(os.lstat(p).st_mode & stat.S_IROTH)",
          "",
          "[Added Lines]",
          "168:         time.sleep(1)",
          "169:         attempts = 5",
          "170:         while True:",
          "171:             try:",
          "172:                 p = Path(str(master_config[\"sock_dir\"])) / \"workers.ipc\"",
          "173:                 mode = os.lstat(p).st_mode",
          "174:                 assert bool(os.lstat(p).st_mode & stat.S_IRUSR)",
          "175:                 assert not bool(os.lstat(p).st_mode & stat.S_IRGRP)",
          "176:                 assert not bool(os.lstat(p).st_mode & stat.S_IROTH)",
          "177:                 break",
          "178:             except FileNotFoundError as exc:",
          "179:                 if not attempts:",
          "180:                     raise exc from None",
          "181:                 attempts -= 1",
          "182:                 time.sleep(2.5)",
          "",
          "---------------"
        ]
      }
    }
  ]
}