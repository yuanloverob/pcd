{
  "cve_id": "CVE-2024-6221",
  "cve_desc": "A vulnerability in corydolphin/flask-cors version 4.0.1 allows the `Access-Control-Allow-Private-Network` CORS header to be set to true by default. This behavior can expose private network resources to unauthorized external access, leading to significant security risks such as data breaches, unauthorized access to sensitive information, and potential network intrusions.",
  "repo": "corydolphin/flask-cors",
  "patch_hash": "c8514760cf03fcce16d77f6db7007aad429c4548",
  "patch_info": {
    "commit_hash": "c8514760cf03fcce16d77f6db7007aad429c4548",
    "repo": "corydolphin/flask-cors",
    "commit_url": "https://github.com/corydolphin/flask-cors/commit/c8514760cf03fcce16d77f6db7007aad429c4548",
    "files": [
      "docs/configuration.rst",
      "flask_cors/core.py",
      "flask_cors/version.py",
      "tests/decorator/test_private_network_headers.py"
    ],
    "message": "V5: Breaking: Change default to disable private network access (#368)",
    "before_after_code_files": [
      "flask_cors/core.py||flask_cors/core.py",
      "flask_cors/version.py||flask_cors/version.py",
      "tests/decorator/test_private_network_headers.py||tests/decorator/test_private_network_headers.py"
    ]
  },
  "patch_diff": {
    "flask_cors/core.py||flask_cors/core.py": [
      "File: flask_cors/core.py -> flask_cors/core.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "57:                        resources=r'/*',",
      "58:                        intercept_exceptions=True,",
      "59:                        always_send=True,",
      "63: def parse_resources(resources):",
      "",
      "[Removed Lines]",
      "60:                        allow_private_network=True)",
      "",
      "[Added Lines]",
      "60:                        allow_private_network=False)",
      "",
      "---------------"
    ],
    "flask_cors/version.py||flask_cors/version.py": [
      "File: flask_cors/version.py -> flask_cors/version.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: __version__ = '4.0.2'",
      "",
      "[Added Lines]",
      "1: __version__ = '5.0.0'",
      "",
      "---------------"
    ],
    "tests/decorator/test_private_network_headers.py||tests/decorator/test_private_network_headers.py": [
      "File: tests/decorator/test_private_network_headers.py -> tests/decorator/test_private_network_headers.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:         \"\"\" The default behavior should be to allow private network access.",
      "38:         \"\"\"",
      "39:         resp = self.get('/test_default', origin='www.example.com', headers={ACL_REQUEST_HEADER_PRIVATE_NETWORK:'true'})",
      "42:         resp = self.get('/test_default')",
      "43:         self.assertFalse(ACL_RESPONSE_PRIVATE_NETWORK in resp.headers)",
      "",
      "[Removed Lines]",
      "40:         self.assertTrue(ACL_RESPONSE_PRIVATE_NETWORK in resp.headers)",
      "",
      "[Added Lines]",
      "40:         self.assertFalse(resp.headers.get('ACL_RESPONSE_PRIVATE_NETWORK'))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a46ba56118cb73782b8162d6de064179f089c7af",
      "candidate_info": {
        "commit_hash": "a46ba56118cb73782b8162d6de064179f089c7af",
        "repo": "corydolphin/flask-cors",
        "commit_url": "https://github.com/corydolphin/flask-cors/commit/a46ba56118cb73782b8162d6de064179f089c7af",
        "files": [
          "examples/app_based_example.py",
          "examples/blueprints_based_example.py",
          "examples/view_based_example.py",
          "flask_cors/version.py",
          "tests/__init__.py",
          "tests/base_test.py",
          "tests/core/__init__.py",
          "tests/core/helper_tests.py",
          "tests/core/test_override_headers.py",
          "tests/decorator/__init__.py",
          "tests/decorator/test_allow_headers.py",
          "tests/decorator/test_credentials.py",
          "tests/decorator/test_duplicate_headers.py",
          "tests/decorator/test_exception_interception.py",
          "tests/decorator/test_expose_headers.py",
          "tests/decorator/test_max_age.py",
          "tests/decorator/test_methods.py",
          "tests/decorator/test_options.py",
          "tests/decorator/test_origins.py",
          "tests/decorator/test_private_network_headers.py",
          "tests/decorator/test_vary_header.py",
          "tests/decorator/test_w3.py",
          "tests/extension/__init__.py",
          "tests/extension/test_app_extension.py"
        ],
        "message": "Ruff: reformat",
        "before_after_code_files": [
          "examples/app_based_example.py||examples/app_based_example.py",
          "examples/blueprints_based_example.py||examples/blueprints_based_example.py",
          "examples/view_based_example.py||examples/view_based_example.py",
          "flask_cors/version.py||flask_cors/version.py",
          "tests/__init__.py||tests/__init__.py",
          "tests/base_test.py||tests/base_test.py",
          "tests/core/__init__.py||tests/core/__init__.py",
          "tests/core/helper_tests.py||tests/core/helper_tests.py",
          "tests/core/test_override_headers.py||tests/core/test_override_headers.py",
          "tests/decorator/__init__.py||tests/decorator/__init__.py",
          "tests/decorator/test_allow_headers.py||tests/decorator/test_allow_headers.py",
          "tests/decorator/test_credentials.py||tests/decorator/test_credentials.py",
          "tests/decorator/test_duplicate_headers.py||tests/decorator/test_duplicate_headers.py",
          "tests/decorator/test_exception_interception.py||tests/decorator/test_exception_interception.py",
          "tests/decorator/test_expose_headers.py||tests/decorator/test_expose_headers.py",
          "tests/decorator/test_max_age.py||tests/decorator/test_max_age.py",
          "tests/decorator/test_methods.py||tests/decorator/test_methods.py",
          "tests/decorator/test_options.py||tests/decorator/test_options.py",
          "tests/decorator/test_origins.py||tests/decorator/test_origins.py",
          "tests/decorator/test_private_network_headers.py||tests/decorator/test_private_network_headers.py",
          "tests/decorator/test_vary_header.py||tests/decorator/test_vary_header.py",
          "tests/decorator/test_w3.py||tests/decorator/test_w3.py",
          "tests/extension/__init__.py||tests/extension/__init__.py",
          "tests/extension/test_app_extension.py||tests/extension/test_app_extension.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "flask_cors/version.py||flask_cors/version.py",
            "tests/decorator/test_private_network_headers.py||tests/decorator/test_private_network_headers.py"
          ],
          "candidate": [
            "flask_cors/version.py||flask_cors/version.py",
            "tests/decorator/test_private_network_headers.py||tests/decorator/test_private_network_headers.py"
          ]
        }
      },
      "candidate_diff": {
        "examples/app_based_example.py||examples/app_based_example.py": [
          "File: examples/app_based_example.py -> examples/app_based_example.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license:   MIT/X11, see LICENSE for more details.",
          "9: \"\"\"",
          "11: import logging",
          "12: try:",
          "13:     from flask_cors import CORS  # The typical way to import flask-cors",
          "14: except ImportError:",
          "15:     # Path hack allows examples to be run without installation.",
          "16:     import os",
          "17:     parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",
          "18:     os.sys.path.insert(0, parentdir)",
          "20:     from flask_cors import CORS",
          "24: logging.basicConfig(level=logging.INFO)",
          "26: # To enable logging for flask-cors,",
          "29: # One of the simplest configurations. Exposes all resources matching /api/* to",
          "30: # CORS and allows the Content-Type header, which is necessary to POST JSON",
          "31: # cross origin.",
          "35: @app.route(\"/\")",
          "36: def helloWorld():",
          "37:     \"\"\"",
          "40:     \"\"\"",
          "42: <html>",
          "43:     <h1>Hello CORS!</h1>",
          "44:     <h3> End to end editable example with jquery! </h3>",
          "",
          "[Removed Lines]",
          "10: from flask import Flask, jsonify",
          "23: app = Flask('FlaskCorsAppBasedExample')",
          "27: logging.getLogger('flask_cors').level = logging.DEBUG",
          "32: CORS(app, resources=r'/api/*')",
          "38:         Since the path '/' does not match the regular expression r'/api/*',",
          "39:         this route does not have CORS headers set.",
          "41:     return '''",
          "",
          "[Added Lines]",
          "13: from flask import Flask, jsonify",
          "27: app = Flask(\"FlaskCorsAppBasedExample\")",
          "31: logging.getLogger(\"flask_cors\").level = logging.DEBUG",
          "36: CORS(app, resources=r\"/api/*\")",
          "42:     Since the path '/' does not match the regular expression r'/api/*',",
          "43:     this route does not have CORS headers set.",
          "45:     return \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     <script src=\"//static.jsbin.com/js/embed.min.js?3.35.12\"></script>",
          "48: </html>",
          "51: @app.route(\"/api/v1/users/\")",
          "52: def list_users():",
          "",
          "[Removed Lines]",
          "49: '''",
          "",
          "[Added Lines]",
          "53: \"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:     return jsonify(user=\"joe\")",
          "76: def create_user():",
          "77:     \"\"\"",
          "78:         Since the path matches the regular expression r'/api/*', this resource",
          "",
          "[Removed Lines]",
          "75: @app.route(\"/api/v1/users/create\", methods=['POST'])",
          "",
          "[Added Lines]",
          "80: @app.route(\"/api/v1/users/create\", methods=[\"POST\"])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:     \"\"\"",
          "141:     raise Exception(\"example\")",
          "143: @app.errorhandler(500)",
          "144: def server_error(e):",
          "146:     return \"An internal error occurred\", 500",
          "",
          "[Removed Lines]",
          "145:     logging.exception('An error occurred during a request. %s', e)",
          "",
          "[Added Lines]",
          "152:     logging.exception(\"An error occurred during a request. %s\", e)",
          "",
          "---------------"
        ],
        "examples/blueprints_based_example.py||examples/blueprints_based_example.py": [
          "File: examples/blueprints_based_example.py -> examples/blueprints_based_example.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license:   MIT/X11, see LICENSE for more details.",
          "9: \"\"\"",
          "11: import logging",
          "12: try:",
          "13:     from flask_cors import CORS  # The typical way to import flask-cors",
          "14: except ImportError:",
          "15:     # Path hack allows examples to be run without installation.",
          "16:     import os",
          "17:     parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",
          "18:     os.sys.path.insert(0, parentdir)",
          "20:     from flask_cors import CORS",
          "27: @api_v1.route(\"/api/v1/users/\")",
          "28: def list_users():",
          "30:         Since the path matches the regular expression r'/api/*', this resource",
          "31:         automatically has CORS headers set. The expected result is as follows:",
          "",
          "[Removed Lines]",
          "10: from flask import Flask, jsonify, Blueprint",
          "23: api_v1 = Blueprint('API_v1', __name__)",
          "25: CORS(api_v1) # enable CORS on the API_v1 blue print",
          "29:     '''",
          "",
          "[Added Lines]",
          "13: from flask import Blueprint, Flask, jsonify",
          "27: api_v1 = Blueprint(\"API_v1\", __name__)",
          "29: CORS(api_v1)  # enable CORS on the API_v1 blue print",
          "34:     \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:             \"success\": true",
          "45:         }",
          "48:     return jsonify(user=\"joe\")",
          "52: def create_user():",
          "54:         Since the path matches the regular expression r'/api/*', this resource",
          "55:         automatically has CORS headers set.",
          "",
          "[Removed Lines]",
          "47:     '''",
          "51: @api_v1.route(\"/api/v1/users/create\", methods=['POST'])",
          "53:     '''",
          "",
          "[Added Lines]",
          "52:     \"\"\"",
          "56: @api_v1.route(\"/api/v1/users/create\", methods=[\"POST\"])",
          "58:     \"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:           \"success\": true",
          "89:         }",
          "92:     return jsonify(success=True)",
          "96: @public_routes.route(\"/\")",
          "97: def helloWorld():",
          "103: <a href=\"http://www.w3.org/TR/cors/\">W3</a> Or, checkout my documentation",
          "107: logging.basicConfig(level=logging.INFO)",
          "109: app.register_blueprint(api_v1)",
          "110: app.register_blueprint(public_routes)",
          "",
          "[Removed Lines]",
          "91:     '''",
          "94: public_routes = Blueprint('public', __name__)",
          "98:     '''",
          "99:         Since the path '/' does not match the regular expression r'/api/*',",
          "100:         this route does not have CORS headers set.",
          "101:     '''",
          "102:     return '''<h1>Hello CORS!</h1> Read about my spec at the",
          "104: on <a href=\"https://github.com/corydolphin/flask-cors\">Github</a>'''",
          "108: app = Flask('FlaskCorsBlueprintBasedExample')",
          "",
          "[Added Lines]",
          "96:     \"\"\"",
          "100: public_routes = Blueprint(\"public\", __name__)",
          "105:     \"\"\"",
          "106:     Since the path '/' does not match the regular expression r'/api/*',",
          "107:     this route does not have CORS headers set.",
          "108:     \"\"\"",
          "109:     return \"\"\"<h1>Hello CORS!</h1> Read about my spec at the",
          "111: on <a href=\"https://github.com/corydolphin/flask-cors\">Github</a>\"\"\"",
          "115: app = Flask(\"FlaskCorsBlueprintBasedExample\")",
          "",
          "---------------"
        ],
        "examples/view_based_example.py||examples/view_based_example.py": [
          "File: examples/view_based_example.py -> examples/view_based_example.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license:   MIT/X11, see LICENSE for more details.",
          "9: \"\"\"",
          "11: import logging",
          "12: try:",
          "13:     # The typical way to import flask-cors",
          "14:     from flask_cors import cross_origin",
          "15: except ImportError:",
          "16:     # Path hack allows examples to be run without installation.",
          "17:     import os",
          "18:     parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",
          "19:     os.sys.path.insert(0, parentdir)",
          "21:     from flask_cors import cross_origin",
          "25: logging.basicConfig(level=logging.INFO)",
          "28: @cross_origin()",
          "29: def helloWorld():",
          "31:         This view has CORS enabled for all domains, representing the simplest",
          "32:         configuration of view-based decoration. The expected result is as",
          "33:         follows:",
          "",
          "[Removed Lines]",
          "10: from flask import Flask, jsonify",
          "24: app = Flask('FlaskCorsViewBasedExample')",
          "27: @app.route(\"/\", methods=['GET'])",
          "30:     '''",
          "",
          "[Added Lines]",
          "13: from flask import Flask, jsonify",
          "28: app = Flask(\"FlaskCorsViewBasedExample\")",
          "32: @app.route(\"/\", methods=[\"GET\"])",
          "35:     \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:         <a href=\"http://www.w3.org/TR/cors/\">W3</a> Or, checkout my documentation",
          "47:         on <a href=\"https://github.com/corydolphin/flask-cors\">Github</a>",
          "51: <a href=\"http://www.w3.org/TR/cors/\">W3</a> Or, checkout my documentation",
          "57: def cross_origin_json_post():",
          "59:         This view has CORS enabled for all domains, and allows browsers",
          "60:         to send the Content-Type header, allowing cross domain AJAX POST",
          "61:         requests.",
          "",
          "[Removed Lines]",
          "49:     '''",
          "50:     return '''<h1>Hello CORS!</h1> Read about my spec at the",
          "52: on <a href=\"https://github.com/corydolphin/flask-cors\">Github</a>'''",
          "55: @app.route(\"/api/v1/users/create\", methods=['GET', 'POST'])",
          "56: @cross_origin(allow_headers=['Content-Type'])",
          "58:     '''",
          "",
          "[Added Lines]",
          "54:     \"\"\"",
          "55:     return \"\"\"<h1>Hello CORS!</h1> Read about my spec at the",
          "57: on <a href=\"https://github.com/corydolphin/flask-cors\">Github</a>\"\"\"",
          "60: @app.route(\"/api/v1/users/create\", methods=[\"GET\", \"POST\"])",
          "61: @cross_origin(allow_headers=[\"Content-Type\"])",
          "63:     \"\"\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:           \"success\": true",
          "95:         }",
          "99:     return jsonify(success=True)",
          "101: if __name__ == \"__main__\":",
          "102:     app.run(debug=True)",
          "",
          "[Removed Lines]",
          "97:     '''",
          "",
          "[Added Lines]",
          "102:     \"\"\"",
          "",
          "---------------"
        ],
        "flask_cors/version.py||flask_cors/version.py": [
          "File: flask_cors/version.py -> flask_cors/version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: __version__ = '5.0.0'",
          "",
          "[Added Lines]",
          "1: __version__ = \"5.0.0\"",
          "",
          "---------------"
        ],
        "tests/__init__.py||tests/__init__.py": [
          "File: tests/__init__.py -> tests/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "",
          "---------------"
        ],
        "tests/base_test.py||tests/base_test.py": [
          "File: tests/base_test.py -> tests/base_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "12: import unittest",
          "14: from flask_cors import *",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "11: from flask import Flask",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:         Source:",
          "23:         http://erikzaadi.com/2012/09/13/inheritance-within-python-unit-tests/",
          "24:         \"\"\"",
          "28:     def iter_verbs(self, c):",
          "34:             yield getattr(c, verb)",
          "37:         for verb in verbs:",
          "38:             yield self._request(verb.lower(), path, **kwargs)",
          "40:     def _request(self, verb, *args, **kwargs):",
          "43:         if _origin:",
          "44:             headers.update(Origin=_origin)",
          "",
          "[Removed Lines]",
          "25:         doc = self.id()[self.id().rfind('.')+1:]",
          "26:         return \"{}.{}\".format(self.__class__.__name__, doc)",
          "29:         ''' A simple helper method to iterate through a range of",
          "30:             HTTP Verbs and return the test_client bound instance,",
          "31:             keeping writing our tests as DRY as possible.",
          "32:         '''",
          "33:         for verb in ['get', 'head', 'options']:",
          "36:     def iter_responses(self, path, verbs=['get', 'head', 'options'], **kwargs):",
          "41:         _origin = kwargs.pop('origin', None)",
          "42:         headers = kwargs.pop('headers', {})",
          "",
          "[Added Lines]",
          "24:         doc = self.id()[self.id().rfind(\".\") + 1 :]",
          "25:         return f\"{self.__class__.__name__}.{doc}\"",
          "28:         \"\"\"A simple helper method to iterate through a range of",
          "29:         HTTP Verbs and return the test_client bound instance,",
          "30:         keeping writing our tests as DRY as possible.",
          "31:         \"\"\"",
          "32:         for verb in [\"get\", \"head\", \"options\"]:",
          "35:     def iter_responses(self, path, verbs=[\"get\", \"head\", \"options\"], **kwargs):",
          "40:         _origin = kwargs.pop(\"origin\", None)",
          "41:         headers = kwargs.pop(\"headers\", {})",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:             return getattr(c, verb)(*args, headers=headers, **kwargs)",
          "49:     def get(self, *args, **kwargs):",
          "52:     def head(self, *args, **kwargs):",
          "55:     def post(self, *args, **kwargs):",
          "58:     def options(self, *args, **kwargs):",
          "61:     def put(self, *args, **kwargs):",
          "64:     def patch(self, *args, **kwargs):",
          "67:     def delete(self, *args, **kwargs):",
          "73:         if cors_request_headers:",
          "75:         if json:",
          "82:     def assertHasACLOrigin(self, resp, origin=None):",
          "83:         if origin is None:",
          "",
          "[Removed Lines]",
          "50:         return self._request('get', *args, **kwargs)",
          "53:         return self._request('head', *args, **kwargs)",
          "56:         return self._request('post', *args, **kwargs)",
          "59:         return self._request('options', *args, **kwargs)",
          "62:         return self._request('put', *args, **kwargs)",
          "65:         return self._request('patch', *args, **kwargs)",
          "68:         return self._request('delete', *args, **kwargs)",
          "70:     def preflight(self, path, method='GET', cors_request_headers=None, json=True, **kwargs):",
          "71:         kwargs['headers'] = kwargs.get('headers', {})",
          "74:             kwargs['headers'].update({'Access-Control-Request-Headers': ', '.join(cors_request_headers)})",
          "76:             kwargs['headers'].update({'Content-Type':'application/json'})",
          "78:         kwargs['headers'].update({'Access-Control-Request-Method': method})",
          "80:         return self.options(path,**kwargs)",
          "",
          "[Added Lines]",
          "49:         return self._request(\"get\", *args, **kwargs)",
          "52:         return self._request(\"head\", *args, **kwargs)",
          "55:         return self._request(\"post\", *args, **kwargs)",
          "58:         return self._request(\"options\", *args, **kwargs)",
          "61:         return self._request(\"put\", *args, **kwargs)",
          "64:         return self._request(\"patch\", *args, **kwargs)",
          "67:         return self._request(\"delete\", *args, **kwargs)",
          "69:     def preflight(self, path, method=\"GET\", cors_request_headers=None, json=True, **kwargs):",
          "70:         kwargs[\"headers\"] = kwargs.get(\"headers\", {})",
          "73:             kwargs[\"headers\"].update({\"Access-Control-Request-Headers\": \", \".join(cors_request_headers)})",
          "75:             kwargs[\"headers\"].update({\"Content-Type\": \"application/json\"})",
          "77:         kwargs[\"headers\"].update({\"Access-Control-Request-Method\": method})",
          "79:         return self.options(path, **kwargs)",
          "",
          "---------------"
        ],
        "tests/core/__init__.py||tests/core/__init__.py": [
          "File: tests/core/__init__.py -> tests/core/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     Tests for the shared flask.ext.cores.core",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "",
          "[Added Lines]",
          "2: Tests for the shared flask.ext.cores.core",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "",
          "---------------"
        ],
        "tests/core/helper_tests.py||tests/core/helper_tests.py": [
          "File: tests/core/helper_tests.py -> tests/core/helper_tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "12: \"\"\"",
          "14: import unittest",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     Tests for helper and utility methods",
          "4:     TODO: move integration tests (e.g. all that test a full request cycle)",
          "5:     into smaller, broken-up unit tests to simplify testing.",
          "6:     ~~~~",
          "7:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "8:     origin resource sharing (CORS) using a simple decorator.",
          "10:     :copyright: (c) 2016 by Cory Dolphin.",
          "11:     :license: MIT, see LICENSE for more details.",
          "",
          "[Added Lines]",
          "2: Tests for helper and utility methods",
          "3: TODO: move integration tests (e.g. all that test a full request cycle)",
          "4: into smaller, broken-up unit tests to simplify testing.",
          "5: ~~~~",
          "6: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "7: origin resource sharing (CORS) using a simple decorator.",
          "9: :copyright: (c) 2016 by Cory Dolphin.",
          "10: :license: MIT, see LICENSE for more details.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: class InternalsTestCase(unittest.TestCase):",
          "20:     def test_try_match(self):",
          "24:     def test_flexible_str_str(self):",
          "27:     def test_flexible_str_set(self):",
          "31:     def test_serialize_options(self):",
          "32:         try:",
          "33:             serialize_options({",
          "38:             })",
          "39:             self.assertFalse(True, \"A Value Error should have been raised.\")",
          "40:         except ValueError:",
          "41:             pass",
          "43:     def test_get_allow_headers_empty(self):",
          "47:         self.assertEqual(get_allow_headers(options, None), None)",
          "49:     def test_get_allow_headers_matching(self):",
          "58:     def test_get_allow_headers_matching_none(self):",
          "68:     def test_parse_resources_sorted(self):",
          "69:         resources = parse_resources({",
          "77:         })",
          "84:     def test_probably_regex(self):",
          "85:         self.assertTrue(probably_regex(\"http://*.example.com\"))",
          "",
          "[Removed Lines]",
          "21:         self.assertFalse(try_match('www.com/foo', 'www.com/fo'))",
          "22:         self.assertTrue(try_match('www.com/foo', 'www.com/fo*'))",
          "25:         self.assertEqual(flexible_str('Bar, Foo, Qux'), 'Bar, Foo, Qux')",
          "28:         self.assertEqual(flexible_str({'Foo', 'Bar', 'Qux'}),",
          "29:                           'Bar, Foo, Qux')",
          "34:                 'origins': r'*',",
          "35:                 'allow_headers': True,",
          "36:                 'supports_credentials': True,",
          "37:                 'send_wildcard': True",
          "44:         options = serialize_options({'allow_headers': r'*'})",
          "46:         self.assertEqual(get_allow_headers(options, ''), None)",
          "50:         options = serialize_options({'allow_headers': r'*'})",
          "52:         self.assertEqual(get_allow_headers(options, 'X-FOO'), 'X-FOO')",
          "53:         self.assertEqual(",
          "54:             get_allow_headers(options, 'X-Foo, X-Bar'),",
          "55:             'X-Bar, X-Foo'",
          "56:         )",
          "59:         options = serialize_options({'allow_headers': r'X-FLASK-.*'})",
          "61:         self.assertEqual(get_allow_headers(options, 'X-FLASK-CORS'),",
          "62:                           'X-FLASK-CORS')",
          "63:         self.assertEqual(",
          "64:             get_allow_headers(options, 'X-NOT-FLASK-CORS'),",
          "65:             ''",
          "66:         )",
          "70:             '/foo': {'origins': 'http://foo.com'},",
          "71:             re.compile(r'/.*'): {",
          "72:                 'origins': 'http://some-domain.com'",
          "73:             },",
          "74:             re.compile(r'/api/v1/.*'): {",
          "75:                 'origins': 'http://specific-domain.com'",
          "76:             }",
          "79:         self.assertEqual(",
          "80:             [r[0] for r in resources],",
          "81:             [re.compile(r'/api/v1/.*'), '/foo', re.compile(r'/.*')]",
          "82:         )",
          "",
          "[Added Lines]",
          "20:         self.assertFalse(try_match(\"www.com/foo\", \"www.com/fo\"))",
          "21:         self.assertTrue(try_match(\"www.com/foo\", \"www.com/fo*\"))",
          "24:         self.assertEqual(flexible_str(\"Bar, Foo, Qux\"), \"Bar, Foo, Qux\")",
          "27:         self.assertEqual(flexible_str({\"Foo\", \"Bar\", \"Qux\"}), \"Bar, Foo, Qux\")",
          "32:                 \"origins\": r\"*\",",
          "33:                 \"allow_headers\": True,",
          "34:                 \"supports_credentials\": True,",
          "35:                 \"send_wildcard\": True,",
          "42:         options = serialize_options({\"allow_headers\": r\"*\"})",
          "44:         self.assertEqual(get_allow_headers(options, \"\"), None)",
          "48:         options = serialize_options({\"allow_headers\": r\"*\"})",
          "50:         self.assertEqual(get_allow_headers(options, \"X-FOO\"), \"X-FOO\")",
          "51:         self.assertEqual(get_allow_headers(options, \"X-Foo, X-Bar\"), \"X-Bar, X-Foo\")",
          "54:         options = serialize_options({\"allow_headers\": r\"X-FLASK-.*\"})",
          "56:         self.assertEqual(get_allow_headers(options, \"X-FLASK-CORS\"), \"X-FLASK-CORS\")",
          "57:         self.assertEqual(get_allow_headers(options, \"X-NOT-FLASK-CORS\"), \"\")",
          "61:             \"/foo\": {\"origins\": \"http://foo.com\"},",
          "62:             re.compile(r\"/.*\"): {\"origins\": \"http://some-domain.com\"},",
          "63:             re.compile(r\"/api/v1/.*\"): {\"origins\": \"http://specific-domain.com\"},",
          "66:         self.assertEqual([r[0] for r in resources], [re.compile(r\"/api/v1/.*\"), \"/foo\", re.compile(r\"/.*\")])",
          "",
          "---------------"
        ],
        "tests/core/test_override_headers.py||tests/core/test_override_headers.py": [
          "File: tests/core/test_override_headers.py -> tests/core/test_override_headers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "7: \"\"\"",
          "10: from flask import Flask, Response",
          "12: from flask_cors import *",
          "13: from flask_cors.core import *",
          "15: class ResponseHeadersOverrideTestCaseIntegration(FlaskCorsTestCase):",
          "16:     def setUp(self):",
          "17:         self.app = Flask(__name__)",
          "18:         CORS(self.app)",
          "21:         def index():",
          "22:             response = Response(headers={\"custom\": \"dictionary\"})",
          "25:     def test_override_headers(self):",
          "30:             self.assertTrue(ACL_ORIGIN in resp.headers)",
          "32: if __name__ == \"__main__\":",
          "33:     unittest.main()",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "6:     Flask-Cors tests module",
          "9: from ..base_test import FlaskCorsTestCase",
          "20:         @self.app.route('/')",
          "23:             return 'Welcome'",
          "26:         '''",
          "27:             Ensure we work even if response.headers is set to something other than a MultiDict.",
          "28:         '''",
          "29:         for resp in self.iter_responses('/'):",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "5: Flask-Cors tests module",
          "13: from ..base_test import FlaskCorsTestCase",
          "21:         @self.app.route(\"/\")",
          "24:             return \"Welcome\"",
          "27:         \"\"\"",
          "28:         Ensure we work even if response.headers is set to something other than a MultiDict.",
          "29:         \"\"\"",
          "30:         for resp in self.iter_responses(\"/\"):",
          "",
          "---------------"
        ],
        "tests/decorator/__init__.py||tests/decorator/__init__.py": [
          "File: tests/decorator/__init__.py -> tests/decorator/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     Tests particular to flask_cors.cross_origin",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "",
          "[Added Lines]",
          "2: Tests particular to flask_cors.cross_origin",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "",
          "---------------"
        ],
        "tests/decorator/test_allow_headers.py||tests/decorator/test_allow_headers.py": [
          "File: tests/decorator/test_allow_headers.py -> tests/decorator/test_allow_headers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "7: \"\"\"",
          "10: from flask import Flask",
          "12: from flask_cors import *",
          "13: from flask_cors.core import *",
          "15: class AllowHeadersTestCaseIntegration(FlaskCorsTestCase):",
          "16:     def setUp(self):",
          "17:         self.app = Flask(__name__)",
          "20:         @cross_origin()",
          "21:         def test_default():",
          "27:         def test_allow_headers():",
          "32:         def test_allow_headers_regex():",
          "35:     def test_default(self):",
          "40:     def test_allow_headers_no_request_headers(self):",
          "42:         No ACL_REQUEST_HEADERS sent, ACL_ALLOW_HEADERS should be empty",
          "45:         self.assertEqual(resp.headers.get(ACL_ALLOW_HEADERS), None)",
          "47:     def test_allow_headers_with_request_headers(self):",
          "61:     def test_allow_headers_with_request_headers_case_insensitive(self):",
          "73:     def test_allow_headers_with_unmatched_request_headers(self):",
          "81:         self.assertEqual(resp.headers.get(ACL_ALLOW_HEADERS), None)",
          "90:     def test_allow_headers_regex(self):",
          "103:         self.assertEqual(resp.headers.get(ACL_ALLOW_HEADERS), None)",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "6:     Flask-Cors tests module",
          "9: from ..base_test import FlaskCorsTestCase",
          "19:         @self.app.route('/test_default')",
          "22:             return 'Welcome!'",
          "24:         @self.app.route('/test_allow_headers')",
          "25:         @cross_origin(allow_headers=['X-Example-Header-B',",
          "26:                                      'X-Example-Header-A'])",
          "28:             return 'Welcome!'",
          "30:         @self.app.route('/test_allow_headers_regex')",
          "31:         @cross_origin(allow_headers=[r'X-COMPANY-.*'])",
          "33:             return 'Welcome!'",
          "36:         for resp in self.iter_responses('/test_default'):",
          "37:             self.assertTrue(resp.headers.get(ACL_ALLOW_HEADERS) is None,",
          "38:                             \"Default should have no allowed headers\")",
          "41:         '''",
          "43:         '''",
          "44:         resp = self.preflight('/test_allow_headers', origin='www.example.com')",
          "48:         '''",
          "49:             If there is an Access-Control-Request-Method header in the request",
          "50:             and Access-Control-Request-Method is allowed for cross origin",
          "51:             requests and request method is OPTIONS, and every element in the",
          "52:             Access-Control-Request-Headers is an allowed header, the",
          "53:             Access-Control-Allow-Headers header should be echoed back.",
          "54:         '''",
          "55:         resp = self.preflight('/test_allow_headers',",
          "56:                               origin='www.example.com',",
          "57:                               cors_request_headers=['X-Example-Header-A'])",
          "58:         self.assertEqual(resp.headers.get(ACL_ALLOW_HEADERS),",
          "59:                          'X-Example-Header-A')",
          "62:         '''",
          "63:             HTTP headers are case insensitive. We should respect that",
          "64:             and match regardless of case, returning the casing sent by",
          "65:             the client",
          "66:         '''",
          "67:         resp = self.preflight('/test_allow_headers',",
          "68:                               origin='www.example.com',",
          "69:                               cors_request_headers=['X-Example-header-a'])",
          "70:         self.assertEqual(resp.headers.get(ACL_ALLOW_HEADERS),",
          "71:                          'X-Example-header-a')",
          "74:         '''",
          "75:             If every element in the Access-Control-Request-Headers is not an",
          "76:             allowed header, then the matching headers should be returned.",
          "77:         '''",
          "78:         resp = self.preflight('/test_allow_headers',",
          "79:                               origin='www.example.com',",
          "80:                               cors_request_headers=['X-Not-Found-Header'])",
          "83:         resp = self.preflight('/test_allow_headers',",
          "84:                               origin='www.example.com',",
          "85:                               cors_request_headers=['X-Example-Header-A',",
          "86:                                                     'X-Not-Found-Header'])",
          "87:         self.assertEqual(resp.headers.get(ACL_ALLOW_HEADERS),",
          "88:                          'X-Example-Header-A')",
          "91:         '''",
          "92:             If every element in the Access-Control-Request-Headers is not an",
          "93:             allowed header, then the matching headers should be returned.",
          "94:         '''",
          "95:         resp = self.preflight('/test_allow_headers_regex',",
          "96:                               origin='www.example.com',",
          "97:                               cors_request_headers=['X-COMPANY-FOO'])",
          "98:         self.assertEqual(resp.headers.get(ACL_ALLOW_HEADERS), 'X-COMPANY-FOO')",
          "100:         resp = self.preflight('/test_allow_headers_regex',",
          "101:                               origin='www.example.com',",
          "102:                               cors_request_headers=['X-Not-Found-Header'])",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "5: Flask-Cors tests module",
          "13: from ..base_test import FlaskCorsTestCase",
          "20:         @self.app.route(\"/test_default\")",
          "23:             return \"Welcome!\"",
          "25:         @self.app.route(\"/test_allow_headers\")",
          "26:         @cross_origin(allow_headers=[\"X-Example-Header-B\", \"X-Example-Header-A\"])",
          "28:             return \"Welcome!\"",
          "30:         @self.app.route(\"/test_allow_headers_regex\")",
          "31:         @cross_origin(allow_headers=[r\"X-COMPANY-.*\"])",
          "33:             return \"Welcome!\"",
          "36:         for resp in self.iter_responses(\"/test_default\"):",
          "37:             self.assertTrue(resp.headers.get(ACL_ALLOW_HEADERS) is None, \"Default should have no allowed headers\")",
          "40:         \"\"\"",
          "42:         \"\"\"",
          "43:         resp = self.preflight(\"/test_allow_headers\", origin=\"www.example.com\")",
          "47:         \"\"\"",
          "48:         If there is an Access-Control-Request-Method header in the request",
          "49:         and Access-Control-Request-Method is allowed for cross origin",
          "50:         requests and request method is OPTIONS, and every element in the",
          "51:         Access-Control-Request-Headers is an allowed header, the",
          "52:         Access-Control-Allow-Headers header should be echoed back.",
          "53:         \"\"\"",
          "54:         resp = self.preflight(",
          "55:             \"/test_allow_headers\", origin=\"www.example.com\", cors_request_headers=[\"X-Example-Header-A\"]",
          "56:         )",
          "57:         self.assertEqual(resp.headers.get(ACL_ALLOW_HEADERS), \"X-Example-Header-A\")",
          "60:         \"\"\"",
          "61:         HTTP headers are case insensitive. We should respect that",
          "62:         and match regardless of case, returning the casing sent by",
          "63:         the client",
          "64:         \"\"\"",
          "65:         resp = self.preflight(",
          "66:             \"/test_allow_headers\", origin=\"www.example.com\", cors_request_headers=[\"X-Example-header-a\"]",
          "67:         )",
          "68:         self.assertEqual(resp.headers.get(ACL_ALLOW_HEADERS), \"X-Example-header-a\")",
          "71:         \"\"\"",
          "72:         If every element in the Access-Control-Request-Headers is not an",
          "73:         allowed header, then the matching headers should be returned.",
          "74:         \"\"\"",
          "75:         resp = self.preflight(",
          "76:             \"/test_allow_headers\", origin=\"www.example.com\", cors_request_headers=[\"X-Not-Found-Header\"]",
          "77:         )",
          "80:         resp = self.preflight(",
          "81:             \"/test_allow_headers\",",
          "82:             origin=\"www.example.com\",",
          "83:             cors_request_headers=[\"X-Example-Header-A\", \"X-Not-Found-Header\"],",
          "84:         )",
          "85:         self.assertEqual(resp.headers.get(ACL_ALLOW_HEADERS), \"X-Example-Header-A\")",
          "88:         \"\"\"",
          "89:         If every element in the Access-Control-Request-Headers is not an",
          "90:         allowed header, then the matching headers should be returned.",
          "91:         \"\"\"",
          "92:         resp = self.preflight(",
          "93:             \"/test_allow_headers_regex\", origin=\"www.example.com\", cors_request_headers=[\"X-COMPANY-FOO\"]",
          "94:         )",
          "95:         self.assertEqual(resp.headers.get(ACL_ALLOW_HEADERS), \"X-COMPANY-FOO\")",
          "97:         resp = self.preflight(",
          "98:             \"/test_allow_headers_regex\", origin=\"www.example.com\", cors_request_headers=[\"X-Not-Found-Header\"]",
          "99:         )",
          "",
          "---------------"
        ],
        "tests/decorator/test_credentials.py||tests/decorator/test_credentials.py": [
          "File: tests/decorator/test_credentials.py -> tests/decorator/test_credentials.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "13: from flask import Flask",
          "15: from flask_cors import *",
          "16: from flask_cors.core import *",
          "19: class SupportsCredentialsCase(FlaskCorsTestCase):",
          "20:     def setUp(self):",
          "21:         self.app = Flask(__name__)",
          "24:         @cross_origin(supports_credentials=True)",
          "25:         def test_credentials_supported():",
          "29:         @cross_origin(supports_credentials=False)",
          "30:         def test_credentials_unsupported():",
          "34:         @cross_origin()",
          "35:         def test_default():",
          "38:     def test_credentials_supported(self):",
          "45:     def test_default(self):",
          "49:         self.assertFalse(ACL_CREDENTIALS in resp.headers)",
          "52:         self.assertFalse(ACL_CREDENTIALS in resp.headers)",
          "54:     def test_credentials_unsupported(self):",
          "58:         self.assertFalse(ACL_CREDENTIALS in resp.headers)",
          "61:         self.assertFalse(ACL_CREDENTIALS in resp.headers)",
          "63: if __name__ == \"__main__\":",
          "64:     unittest.main()",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "12: from ..base_test import FlaskCorsTestCase",
          "23:         @self.app.route('/test_credentials_supported')",
          "26:             return 'Credentials!'",
          "28:         @self.app.route('/test_credentials_unsupported')",
          "31:             return 'Credentials!'",
          "33:         @self.app.route('/test_default')",
          "36:             return 'Open!'",
          "39:         ''' The specified route should return the",
          "40:             Access-Control-Allow-Credentials header.",
          "41:         '''",
          "42:         resp = self.get('/test_credentials_supported', origin='www.example.com')",
          "43:         self.assertEqual(resp.headers.get(ACL_CREDENTIALS), 'true')",
          "46:         ''' The default behavior should be to disallow credentials.",
          "47:         '''",
          "48:         resp = self.get('/test_default', origin='www.example.com')",
          "51:         resp = self.get('/test_default')",
          "55:         ''' The default behavior should be to disallow credentials.",
          "56:         '''",
          "57:         resp = self.get('/test_credentials_unsupported', origin='www.example.com')",
          "60:         resp = self.get('/test_credentials_unsupported')",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "16: from ..base_test import FlaskCorsTestCase",
          "23:         @self.app.route(\"/test_credentials_supported\")",
          "26:             return \"Credentials!\"",
          "28:         @self.app.route(\"/test_credentials_unsupported\")",
          "31:             return \"Credentials!\"",
          "33:         @self.app.route(\"/test_default\")",
          "36:             return \"Open!\"",
          "39:         \"\"\"The specified route should return the",
          "40:         Access-Control-Allow-Credentials header.",
          "41:         \"\"\"",
          "42:         resp = self.get(\"/test_credentials_supported\", origin=\"www.example.com\")",
          "43:         self.assertEqual(resp.headers.get(ACL_CREDENTIALS), \"true\")",
          "46:         \"\"\"The default behavior should be to disallow credentials.\"\"\"",
          "47:         resp = self.get(\"/test_default\", origin=\"www.example.com\")",
          "50:         resp = self.get(\"/test_default\")",
          "54:         \"\"\"The default behavior should be to disallow credentials.\"\"\"",
          "55:         resp = self.get(\"/test_credentials_unsupported\", origin=\"www.example.com\")",
          "58:         resp = self.get(\"/test_credentials_unsupported\")",
          "",
          "---------------"
        ],
        "tests/decorator/test_duplicate_headers.py||tests/decorator/test_duplicate_headers.py": [
          "File: tests/decorator/test_duplicate_headers.py -> tests/decorator/test_duplicate_headers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "7: \"\"\"",
          "10: from flask import Flask, Response",
          "12: from flask_cors import *",
          "13: from flask_cors.core import *",
          "16: class AllowsMultipleHeaderEntries(FlaskCorsTestCase):",
          "17:     def setUp(self):",
          "18:         self.app = Flask(__name__)",
          "21:         @cross_origin()",
          "22:         def test_multiple_set_cookie_headers():",
          "23:             resp = Response(\"Foo bar baz\")",
          "26:             return resp",
          "28:     def test_multiple_set_cookie_headers(self):",
          "32: if __name__ == \"__main__\":",
          "33:     unittest.main()",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "6:     Flask-Cors tests module",
          "9: from ..base_test import FlaskCorsTestCase",
          "20:         @self.app.route('/test_multiple_set_cookie_headers')",
          "24:             resp.headers.add('set-cookie', 'foo')",
          "25:             resp.headers.add('set-cookie', 'bar')",
          "29:         resp = self.get('/test_multiple_set_cookie_headers')",
          "30:         self.assertEqual(len(resp.headers.getlist('set-cookie')), 2)",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "5: Flask-Cors tests module",
          "13: from ..base_test import FlaskCorsTestCase",
          "20:         @self.app.route(\"/test_multiple_set_cookie_headers\")",
          "24:             resp.headers.add(\"set-cookie\", \"foo\")",
          "25:             resp.headers.add(\"set-cookie\", \"bar\")",
          "29:         resp = self.get(\"/test_multiple_set_cookie_headers\")",
          "30:         self.assertEqual(len(resp.headers.getlist(\"set-cookie\")), 2)",
          "",
          "---------------"
        ],
        "tests/decorator/test_exception_interception.py||tests/decorator/test_exception_interception.py": [
          "File: tests/decorator/test_exception_interception.py -> tests/decorator/test_exception_interception.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "11: import unittest",
          "13: import flask",
          "16: from flask import Flask, abort",
          "17: from flask_cors import *",
          "18: from flask_cors.core import *",
          "21: def add_routes(app):",
          "24:     def test_acl_abort_404():",
          "25:         abort(404)",
          "29:     def test_acl_abort_500():",
          "30:         abort(500)",
          "33:     def test_acl_uncaught_exception_500():",
          "34:         raise Exception(\"This could've been any exception\")",
          "37:     def test_no_acl_uncaught_exception_500():",
          "38:         raise Exception(\"This could've been any exception\")",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "14: from packaging import version",
          "15: from ..base_test import FlaskCorsTestCase",
          "22:     @app.route('/test_no_acl_abort_404')",
          "23:     @app.route('/test_acl_abort_404')",
          "27:     @app.route('/test_no_acl_abort_500')",
          "28:     @app.route('/test_acl_abort_500')",
          "32:     @app.route('/test_acl_uncaught_exception_500')",
          "36:     @app.route('/test_no_acl_uncaught_exception_500')",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "15: from packaging import version",
          "20: from ..base_test import FlaskCorsTestCase",
          "24:     @app.route(\"/test_no_acl_abort_404\")",
          "25:     @app.route(\"/test_acl_abort_404\")",
          "29:     @app.route(\"/test_no_acl_abort_500\")",
          "30:     @app.route(\"/test_acl_abort_500\")",
          "34:     @app.route(\"/test_acl_uncaught_exception_500\")",
          "38:     @app.route(\"/test_no_acl_uncaught_exception_500\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: class ExceptionInterceptionDefaultTestCase(FlaskCorsTestCase):",
          "42:     def setUp(self):",
          "43:         self.app = Flask(__name__)",
          "47:         add_routes(self.app)",
          "49:     def test_acl_abort_404(self):",
          "57:         self.assertEqual(resp.status_code, 404)",
          "58:         self.assertTrue(ACL_ORIGIN in resp.headers)",
          "60:     def test_no_acl_abort_404(self):",
          "67:         self.assertEqual(resp.status_code, 404)",
          "68:         self.assertFalse(ACL_ORIGIN in resp.headers)",
          "70:     def test_acl_abort_500(self):",
          "77:         self.assertEqual(resp.status_code, 500)",
          "78:         self.assertTrue(ACL_ORIGIN in resp.headers)",
          "80:     def test_no_acl_abort_500(self):",
          "87:         self.assertEqual(resp.status_code, 500)",
          "88:         self.assertFalse(ACL_ORIGIN in resp.headers)",
          "90:     def test_acl_uncaught_exception_500(self):",
          "100:         self.assertEqual(resp.status_code, 500)",
          "101:         self.assertTrue(ACL_ORIGIN in resp.headers)",
          "103:     def test_no_acl_uncaught_exception_500(self):",
          "113:         self.assertEqual(resp.status_code, 500)",
          "114:         self.assertFalse(ACL_ORIGIN in resp.headers)",
          "116:     def test_acl_exception_with_error_handler(self):",
          "122:         return_string = \"Simple error handler\"",
          "124:         @self.app.errorhandler(404)",
          "125:         @self.app.errorhandler(500)",
          "126:         def catch_all_handler(error):",
          "131:             return return_string, 200",
          "144:         def get_with_origins(path):",
          "147:         for resp in map(get_with_origins, acl_paths):",
          "148:             self.assertEqual(resp.status_code, 200)",
          "",
          "[Removed Lines]",
          "44:         CORS(self.app, resources={",
          "45:             r'/test_acl*': {},",
          "46:         })",
          "50:         '''",
          "51:             HTTP Responses generated by calling abort are handled identically",
          "52:             to normal responses, and should be wrapped by CORS headers if thep",
          "53:             path matches. This path matches.",
          "55:         '''",
          "56:         resp = self.get('/test_acl_abort_404', origin='www.example.com')",
          "61:         '''",
          "62:             HTTP Responses generated by calling abort are handled identically",
          "63:             to normal responses, and should be wrapped by CORS headers if thep",
          "64:             path matches. This path does not match.",
          "65:         '''",
          "66:         resp = self.get('/test_no_acl_abort_404', origin='www.example.com')",
          "71:         '''",
          "72:             HTTP Responses generated by calling abort are handled identically",
          "73:             to normal responses, and should be wrapped by CORS headers if thep",
          "74:             path matches. This path matches",
          "75:         '''",
          "76:         resp = self.get('/test_acl_abort_500', origin='www.example.com')",
          "81:         '''",
          "82:             HTTP Responses generated by calling abort are handled identically",
          "83:             to normal responses, and should be wrapped by CORS headers if thep",
          "84:             path matches. This path matches",
          "85:         '''",
          "86:         resp = self.get('/test_no_acl_abort_500', origin='www.example.com')",
          "91:         '''",
          "92:             Uncaught exceptions will trigger Flask's internal exception",
          "93:             handler, and should have ACL headers only if intercept_exceptions",
          "94:             is set to True and if the request URL matches the resources pattern",
          "96:             This url matches.",
          "97:         '''",
          "99:         resp = self.get('/test_acl_uncaught_exception_500', origin='www.example.com')",
          "104:         '''",
          "105:             Uncaught exceptions will trigger Flask's internal exception",
          "106:             handler, and should have ACL headers only if intercept_exceptions",
          "107:             is set to True and if the request URL matches the resources pattern.",
          "109:             This url does not match.",
          "110:         '''",
          "112:         resp = self.get('/test_no_acl_uncaught_exception_500', origin='www.example.com')",
          "117:         '''",
          "118:             If a 500 handler is setup by the user, responses should have",
          "119:             CORS matching rules applied, regardless of whether or not",
          "120:             intercept_exceptions is enabled.",
          "121:         '''",
          "127:             '''",
          "128:                 This error handler catches 404s and 500s and returns",
          "129:                 status 200 no matter what. It is not a good handler.",
          "130:             '''",
          "133:         acl_paths = [",
          "134:             '/test_acl_abort_404',",
          "135:             '/test_acl_abort_500',",
          "136:             'test_acl_uncaught_exception_500'",
          "137:         ]",
          "138:         no_acl_paths = [",
          "139:             '/test_no_acl_abort_404',",
          "140:             '/test_no_acl_abort_500',",
          "141:             'test_no_acl_uncaught_exception_500'",
          "142:         ]",
          "145:             return self.get(path, origin='www.example.com')",
          "",
          "[Added Lines]",
          "46:         CORS(",
          "47:             self.app,",
          "48:             resources={",
          "49:                 r\"/test_acl*\": {},",
          "50:             },",
          "51:         )",
          "55:         \"\"\"",
          "56:         HTTP Responses generated by calling abort are handled identically",
          "57:         to normal responses, and should be wrapped by CORS headers if thep",
          "58:         path matches. This path matches.",
          "60:         \"\"\"",
          "61:         resp = self.get(\"/test_acl_abort_404\", origin=\"www.example.com\")",
          "66:         \"\"\"",
          "67:         HTTP Responses generated by calling abort are handled identically",
          "68:         to normal responses, and should be wrapped by CORS headers if thep",
          "69:         path matches. This path does not match.",
          "70:         \"\"\"",
          "71:         resp = self.get(\"/test_no_acl_abort_404\", origin=\"www.example.com\")",
          "76:         \"\"\"",
          "77:         HTTP Responses generated by calling abort are handled identically",
          "78:         to normal responses, and should be wrapped by CORS headers if thep",
          "79:         path matches. This path matches",
          "80:         \"\"\"",
          "81:         resp = self.get(\"/test_acl_abort_500\", origin=\"www.example.com\")",
          "86:         \"\"\"",
          "87:         HTTP Responses generated by calling abort are handled identically",
          "88:         to normal responses, and should be wrapped by CORS headers if thep",
          "89:         path matches. This path matches",
          "90:         \"\"\"",
          "91:         resp = self.get(\"/test_no_acl_abort_500\", origin=\"www.example.com\")",
          "96:         \"\"\"",
          "97:         Uncaught exceptions will trigger Flask's internal exception",
          "98:         handler, and should have ACL headers only if intercept_exceptions",
          "99:         is set to True and if the request URL matches the resources pattern",
          "101:         This url matches.",
          "102:         \"\"\"",
          "104:         resp = self.get(\"/test_acl_uncaught_exception_500\", origin=\"www.example.com\")",
          "109:         \"\"\"",
          "110:         Uncaught exceptions will trigger Flask's internal exception",
          "111:         handler, and should have ACL headers only if intercept_exceptions",
          "112:         is set to True and if the request URL matches the resources pattern.",
          "114:         This url does not match.",
          "115:         \"\"\"",
          "117:         resp = self.get(\"/test_no_acl_uncaught_exception_500\", origin=\"www.example.com\")",
          "122:         \"\"\"",
          "123:         If a 500 handler is setup by the user, responses should have",
          "124:         CORS matching rules applied, regardless of whether or not",
          "125:         intercept_exceptions is enabled.",
          "126:         \"\"\"",
          "132:             \"\"\"",
          "133:             This error handler catches 404s and 500s and returns",
          "134:             status 200 no matter what. It is not a good handler.",
          "135:             \"\"\"",
          "138:         acl_paths = [\"/test_acl_abort_404\", \"/test_acl_abort_500\", \"test_acl_uncaught_exception_500\"]",
          "139:         no_acl_paths = [\"/test_no_acl_abort_404\", \"/test_no_acl_abort_500\", \"test_no_acl_uncaught_exception_500\"]",
          "142:             return self.get(path, origin=\"www.example.com\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156: class NoExceptionInterceptionTestCase(ExceptionInterceptionDefaultTestCase):",
          "158:     def setUp(self):",
          "159:         self.app = Flask(__name__)",
          "165:         add_routes(self.app)",
          "167:     def test_acl_exception_with_error_handler(self):",
          "173:         return_string = \"Simple error handler\"",
          "175:         @self.app.errorhandler(404)",
          "176:         @self.app.errorhandler(500)",
          "177:         def catch_all_handler(error):",
          "182:             return return_string, 200",
          "184:         acl_paths = [",
          "187:         ]",
          "188:         no_acl_paths = [",
          "193:         ]",
          "194:         def get_with_origins(path):",
          "197:         for resp in map(get_with_origins, acl_paths):",
          "198:             self.assertEqual(resp.status_code, 200)",
          "",
          "[Removed Lines]",
          "160:         CORS(self.app,",
          "161:              intercept_exceptions=False,",
          "162:              resources={",
          "163:                  r'/test_acl*': {},",
          "164:              })",
          "168:         '''",
          "169:             If a 500 handler is setup by the user, responses should have",
          "170:             CORS matching rules applied, regardless of whether or not",
          "171:             intercept_exceptions is enabled.",
          "172:         '''",
          "178:             '''",
          "179:                 This error handler catches 404s and 500s and returns",
          "180:                 status 200 no matter what. It is not a good handler.",
          "181:             '''",
          "185:             '/test_acl_abort_404',",
          "186:             '/test_acl_abort_500',",
          "189:             '/test_no_acl_abort_404',",
          "190:             '/test_no_acl_abort_500',",
          "191:             'test_no_acl_uncaught_exception_500'",
          "192:             'test_acl_uncaught_exception_500'",
          "195:             return self.get(path, origin='www.example.com')",
          "",
          "[Added Lines]",
          "156:         CORS(",
          "157:             self.app,",
          "158:             intercept_exceptions=False,",
          "159:             resources={",
          "160:                 r\"/test_acl*\": {},",
          "161:             },",
          "162:         )",
          "166:         \"\"\"",
          "167:         If a 500 handler is setup by the user, responses should have",
          "168:         CORS matching rules applied, regardless of whether or not",
          "169:         intercept_exceptions is enabled.",
          "170:         \"\"\"",
          "176:             \"\"\"",
          "177:             This error handler catches 404s and 500s and returns",
          "178:             status 200 no matter what. It is not a good handler.",
          "179:             \"\"\"",
          "183:             \"/test_acl_abort_404\",",
          "184:             \"/test_acl_abort_500\",",
          "187:             \"/test_no_acl_abort_404\",",
          "188:             \"/test_no_acl_abort_500\",",
          "189:             \"test_no_acl_uncaught_exception_500test_acl_uncaught_exception_500\",",
          "193:             return self.get(path, origin=\"www.example.com\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:             self.assertEqual(resp.status_code, 200)",
          "203:             self.assertFalse(ACL_ORIGIN in resp.headers)",
          "208:     def test_acl_uncaught_exception_500(self):",
          "215:         self.assertEqual(resp.status_code, 500)",
          "216:         self.assertFalse(ACL_ORIGIN in resp.headers)",
          "218: if __name__ == \"__main__\":",
          "219:     unittest.main()",
          "",
          "[Removed Lines]",
          "205:     @unittest.skipIf(version.parse(flask.__version__) >= version.parse(\"1.1\"),",
          "206:                      \"Flask 1.1 changed interception behavior, so after request handlers are always run. \"",
          "207:                      \"This obviates the need for our hacky interception\")",
          "209:         '''",
          "210:             Uncaught exceptions will trigger Flask's internal exception",
          "211:             handler, and should have ACL headers only if intercept_exceptions",
          "212:             is set to True. In this case it is not.",
          "213:         '''",
          "214:         resp = self.get('/test_acl_uncaught_exception_500', origin='www.example.com')",
          "",
          "[Added Lines]",
          "203:     @unittest.skipIf(",
          "204:         version.parse(flask.__version__) >= version.parse(\"1.1\"),",
          "205:         \"Flask 1.1 changed interception behavior, so after request handlers are always run. \"",
          "206:         \"This obviates the need for our hacky interception\",",
          "207:     )",
          "209:         \"\"\"",
          "210:         Uncaught exceptions will trigger Flask's internal exception",
          "211:         handler, and should have ACL headers only if intercept_exceptions",
          "212:         is set to True. In this case it is not.",
          "213:         \"\"\"",
          "214:         resp = self.get(\"/test_acl_uncaught_exception_500\", origin=\"www.example.com\")",
          "",
          "---------------"
        ],
        "tests/decorator/test_expose_headers.py||tests/decorator/test_expose_headers.py": [
          "File: tests/decorator/test_expose_headers.py -> tests/decorator/test_expose_headers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "7: \"\"\"",
          "10: from flask import Flask",
          "12: from flask_cors import *",
          "13: from flask_cors.core import *",
          "16: class ExposeHeadersTestCase(FlaskCorsTestCase):",
          "17:     def setUp(self):",
          "18:         self.app = Flask(__name__)",
          "21:         @cross_origin()",
          "22:         def test_default():",
          "26:         @cross_origin(expose_headers=[\"X-My-Custom-Header\", \"X-Another-Custom-Header\"])",
          "27:         def test_override():",
          "30:     def test_default(self):",
          "35:     def test_override(self):",
          "43: if __name__ == \"__main__\":",
          "44:     unittest.main()",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "6:     Flask-Cors tests module",
          "9: from ..base_test import FlaskCorsTestCase",
          "20:         @self.app.route('/test_default')",
          "23:             return 'Welcome!'",
          "25:         @self.app.route('/test_override')",
          "28:             return 'Welcome!'",
          "31:         for resp in self.iter_responses('/test_default', origin='www.example.com'):",
          "32:             self.assertTrue(resp.headers.get(ACL_EXPOSE_HEADERS) is None,",
          "33:                             \"No Access-Control-Expose-Headers by default\")",
          "36:         ''' The specified headers should be returned in the ACL_EXPOSE_HEADERS",
          "37:             and correctly serialized if it is a list.",
          "38:         '''",
          "39:         for resp in self.iter_responses('/test_override', origin='www.example.com'):",
          "40:             self.assertEqual(resp.headers.get(ACL_EXPOSE_HEADERS),",
          "41:                              'X-Another-Custom-Header, X-My-Custom-Header')",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "5: Flask-Cors tests module",
          "13: from ..base_test import FlaskCorsTestCase",
          "20:         @self.app.route(\"/test_default\")",
          "23:             return \"Welcome!\"",
          "25:         @self.app.route(\"/test_override\")",
          "28:             return \"Welcome!\"",
          "31:         for resp in self.iter_responses(\"/test_default\", origin=\"www.example.com\"):",
          "32:             self.assertTrue(resp.headers.get(ACL_EXPOSE_HEADERS) is None, \"No Access-Control-Expose-Headers by default\")",
          "35:         \"\"\"The specified headers should be returned in the ACL_EXPOSE_HEADERS",
          "36:         and correctly serialized if it is a list.",
          "37:         \"\"\"",
          "38:         for resp in self.iter_responses(\"/test_override\", origin=\"www.example.com\"):",
          "39:             self.assertEqual(resp.headers.get(ACL_EXPOSE_HEADERS), \"X-Another-Custom-Header, X-My-Custom-Header\")",
          "",
          "---------------"
        ],
        "tests/decorator/test_max_age.py||tests/decorator/test_max_age.py": [
          "File: tests/decorator/test_max_age.py -> tests/decorator/test_max_age.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "11: from datetime import timedelta",
          "13: from flask import Flask",
          "15: from flask_cors import *",
          "16: from flask_cors.core import *",
          "19: class MaxAgeTestCase(FlaskCorsTestCase):",
          "20:     def setUp(self):",
          "21:         self.app = Flask(__name__)",
          "24:         @cross_origin()",
          "25:         def defaults():",
          "29:         @cross_origin(max_age=600)",
          "30:         def test_string():",
          "34:         @cross_origin(max_age=timedelta(minutes=10))",
          "35:         def test_time_delta():",
          "38:     def test_defaults(self):",
          "42:             self.assertFalse(ACL_MAX_AGE in resp.headers)",
          "44:     def test_string(self):",
          "51:     def test_time_delta(self):",
          "59: if __name__ == \"__main__\":",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "12: from ..base_test import FlaskCorsTestCase",
          "23:         @self.app.route('/defaults')",
          "26:             return 'Should only return headers on OPTIONS'",
          "28:         @self.app.route('/test_string')",
          "31:             return 'Open!'",
          "33:         @self.app.route('/test_time_delta')",
          "36:             return 'Open!'",
          "39:         ''' By default, no max-age headers should be returned",
          "40:         '''",
          "41:         for resp in self.iter_responses('/defaults', origin='www.example.com'):",
          "45:         ''' If the methods parameter is defined, always return the allowed",
          "46:             methods defined by the user.",
          "47:         '''",
          "48:         resp = self.preflight('/test_string', origin='www.example.com')",
          "49:         self.assertEqual(resp.headers.get(ACL_MAX_AGE), '600')",
          "52:         ''' If the methods parameter is defined, always return the allowed",
          "53:             methods defined by the user.",
          "54:         '''",
          "55:         resp = self.preflight('/test_time_delta', origin='www.example.com')",
          "56:         self.assertEqual(resp.headers.get(ACL_MAX_AGE), '600')",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "18: from ..base_test import FlaskCorsTestCase",
          "25:         @self.app.route(\"/defaults\")",
          "28:             return \"Should only return headers on OPTIONS\"",
          "30:         @self.app.route(\"/test_string\")",
          "33:             return \"Open!\"",
          "35:         @self.app.route(\"/test_time_delta\")",
          "38:             return \"Open!\"",
          "41:         \"\"\"By default, no max-age headers should be returned\"\"\"",
          "42:         for resp in self.iter_responses(\"/defaults\", origin=\"www.example.com\"):",
          "46:         \"\"\"If the methods parameter is defined, always return the allowed",
          "47:         methods defined by the user.",
          "48:         \"\"\"",
          "49:         resp = self.preflight(\"/test_string\", origin=\"www.example.com\")",
          "50:         self.assertEqual(resp.headers.get(ACL_MAX_AGE), \"600\")",
          "53:         \"\"\"If the methods parameter is defined, always return the allowed",
          "54:         methods defined by the user.",
          "55:         \"\"\"",
          "56:         resp = self.preflight(\"/test_time_delta\", origin=\"www.example.com\")",
          "57:         self.assertEqual(resp.headers.get(ACL_MAX_AGE), \"600\")",
          "",
          "---------------"
        ],
        "tests/decorator/test_methods.py||tests/decorator/test_methods.py": [
          "File: tests/decorator/test_methods.py -> tests/decorator/test_methods.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "13: from flask import Flask",
          "15: from flask_cors import *",
          "16: from flask_cors.core import *",
          "19: class MethodsCase(FlaskCorsTestCase):",
          "20:     def setUp(self):",
          "21:         self.app = Flask(__name__)",
          "24:         @cross_origin()",
          "25:         def defaults():",
          "30:         def test_get():",
          "33:     def test_defaults(self):",
          "41:         for method in ALL_METHODS:",
          "42:             self.assertTrue(method in res.headers.get(ACL_METHODS))",
          "44:     def test_methods_defined(self):",
          "55:         self.assertFalse(ACL_METHODS in res.headers)",
          "58:         self.assertFalse(ACL_METHODS in res.headers)",
          "60: if __name__ == \"__main__\":",
          "61:     unittest.main()",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "12: from ..base_test import FlaskCorsTestCase",
          "23:         @self.app.route('/defaults')",
          "26:             return 'Should only return headers on pre-flight OPTIONS request'",
          "28:         @self.app.route('/test_methods_defined')",
          "29:         @cross_origin(methods=['POST'])",
          "31:             return 'Only allow POST'",
          "34:         ''' Access-Control-Allow-Methods headers should only be returned",
          "35:             if the client makes an OPTIONS request.",
          "36:         '''",
          "38:         self.assertFalse(ACL_METHODS in self.get('/defaults', origin='www.example.com').headers)",
          "39:         self.assertFalse(ACL_METHODS in self.head('/defaults', origin='www.example.com').headers)",
          "40:         res = self.preflight('/defaults', 'POST', origin='www.example.com')",
          "45:         ''' If the methods parameter is defined, it should override the default",
          "46:             methods defined by the user.",
          "47:         '''",
          "48:         self.assertFalse(ACL_METHODS in self.get('/test_methods_defined').headers)",
          "49:         self.assertFalse(ACL_METHODS in self.head('/test_methods_defined').headers)",
          "51:         res = self.preflight('/test_methods_defined', 'POST', origin='www.example.com')",
          "52:         self.assertTrue('POST' in res.headers.get(ACL_METHODS))",
          "54:         res = self.preflight('/test_methods_defined', 'PUT', origin='www.example.com')",
          "57:         res = self.get('/test_methods_defined', origin='www.example.com')",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "16: from ..base_test import FlaskCorsTestCase",
          "23:         @self.app.route(\"/defaults\")",
          "26:             return \"Should only return headers on pre-flight OPTIONS request\"",
          "28:         @self.app.route(\"/test_methods_defined\")",
          "29:         @cross_origin(methods=[\"POST\"])",
          "31:             return \"Only allow POST\"",
          "34:         \"\"\"Access-Control-Allow-Methods headers should only be returned",
          "35:         if the client makes an OPTIONS request.",
          "36:         \"\"\"",
          "38:         self.assertFalse(ACL_METHODS in self.get(\"/defaults\", origin=\"www.example.com\").headers)",
          "39:         self.assertFalse(ACL_METHODS in self.head(\"/defaults\", origin=\"www.example.com\").headers)",
          "40:         res = self.preflight(\"/defaults\", \"POST\", origin=\"www.example.com\")",
          "45:         \"\"\"If the methods parameter is defined, it should override the default",
          "46:         methods defined by the user.",
          "47:         \"\"\"",
          "48:         self.assertFalse(ACL_METHODS in self.get(\"/test_methods_defined\").headers)",
          "49:         self.assertFalse(ACL_METHODS in self.head(\"/test_methods_defined\").headers)",
          "51:         res = self.preflight(\"/test_methods_defined\", \"POST\", origin=\"www.example.com\")",
          "52:         self.assertTrue(\"POST\" in res.headers.get(ACL_METHODS))",
          "54:         res = self.preflight(\"/test_methods_defined\", \"PUT\", origin=\"www.example.com\")",
          "57:         res = self.get(\"/test_methods_defined\", origin=\"www.example.com\")",
          "",
          "---------------"
        ],
        "tests/decorator/test_options.py||tests/decorator/test_options.py": [
          "File: tests/decorator/test_options.py -> tests/decorator/test_options.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "13: from flask import Flask",
          "15: from flask_cors import *",
          "16: from flask_cors.core import *",
          "19: class OptionsTestCase(FlaskCorsTestCase):",
          "20:     def setUp(self):",
          "21:         self.app = Flask(__name__)",
          "24:         @cross_origin()",
          "25:         def test_default():",
          "29:         @cross_origin(automatic_options=False)",
          "30:         def test_no_options_and_not_auto():",
          "34:         @cross_origin(automatic_options=False)",
          "35:         def test_options_and_not_auto():",
          "38:     def test_defaults(self):",
          "44:         self.assertEqual(resp.status_code, 200)",
          "45:         self.assertTrue(ACL_ORIGIN in resp.headers)",
          "48:         self.assertEqual(resp.status_code, 200)",
          "49:         self.assertTrue(ACL_ORIGIN in resp.headers)",
          "51:     def test_no_options_and_not_auto(self):",
          "58:         self.assertEqual(resp.status_code, 200)",
          "59:         self.assertFalse(ACL_ORIGIN in resp.headers)",
          "62:         self.assertEqual(resp.status_code, 200)",
          "63:         self.assertFalse(ACL_ORIGIN in resp.headers)",
          "65:     def test_options_and_not_auto(self):",
          "71:         self.assertEqual(resp.status_code, 200)",
          "72:         self.assertTrue(ACL_ORIGIN in resp.headers)",
          "76:         self.assertEqual(resp.status_code, 200)",
          "77:         self.assertTrue(ACL_ORIGIN in resp.headers)",
          "80: if __name__ == \"__main__\":",
          "81:     unittest.main()",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "12: from ..base_test import FlaskCorsTestCase",
          "23:         @self.app.route('/test_default')",
          "26:             return 'Welcome!'",
          "28:         @self.app.route('/test_no_options_and_not_auto')",
          "31:             return 'Welcome!'",
          "33:         @self.app.route('/test_options_and_not_auto', methods=['OPTIONS'])",
          "36:             return 'Welcome!'",
          "39:         '''",
          "40:             The default behavior should automatically provide OPTIONS",
          "41:             and return CORS headers.",
          "42:         '''",
          "43:         resp = self.options('/test_default', origin='http://foo.bar.com')",
          "47:         resp = self.options('/test_default', origin='http://foo.bar.com')",
          "52:         '''",
          "53:             If automatic_options is False, and the view func does not provide",
          "54:             OPTIONS, then Flask's default handling will occur, and no CORS",
          "55:             headers will be returned.",
          "56:         '''",
          "57:         resp = self.options('/test_no_options_and_not_auto')",
          "61:         resp = self.options('/test_no_options_and_not_auto', origin='http://foo.bar.com')",
          "66:         '''",
          "67:             If OPTIONS is in methods, and automatic_options is False,",
          "68:             the view function must return a response.",
          "69:         '''",
          "70:         resp = self.options('/test_options_and_not_auto', origin='http://foo.bar.com')",
          "73:         self.assertEqual(resp.data.decode(\"utf-8\"), u\"Welcome!\")",
          "75:         resp = self.options('/test_options_and_not_auto', origin='http://foo.bar.com')",
          "78:         self.assertEqual(resp.data.decode(\"utf-8\"), u\"Welcome!\")",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "16: from ..base_test import FlaskCorsTestCase",
          "23:         @self.app.route(\"/test_default\")",
          "26:             return \"Welcome!\"",
          "28:         @self.app.route(\"/test_no_options_and_not_auto\")",
          "31:             return \"Welcome!\"",
          "33:         @self.app.route(\"/test_options_and_not_auto\", methods=[\"OPTIONS\"])",
          "36:             return \"Welcome!\"",
          "39:         \"\"\"",
          "40:         The default behavior should automatically provide OPTIONS",
          "41:         and return CORS headers.",
          "42:         \"\"\"",
          "43:         resp = self.options(\"/test_default\", origin=\"http://foo.bar.com\")",
          "47:         resp = self.options(\"/test_default\", origin=\"http://foo.bar.com\")",
          "52:         \"\"\"",
          "53:         If automatic_options is False, and the view func does not provide",
          "54:         OPTIONS, then Flask's default handling will occur, and no CORS",
          "55:         headers will be returned.",
          "56:         \"\"\"",
          "57:         resp = self.options(\"/test_no_options_and_not_auto\")",
          "61:         resp = self.options(\"/test_no_options_and_not_auto\", origin=\"http://foo.bar.com\")",
          "66:         \"\"\"",
          "67:         If OPTIONS is in methods, and automatic_options is False,",
          "68:         the view function must return a response.",
          "69:         \"\"\"",
          "70:         resp = self.options(\"/test_options_and_not_auto\", origin=\"http://foo.bar.com\")",
          "73:         self.assertEqual(resp.data.decode(\"utf-8\"), \"Welcome!\")",
          "75:         resp = self.options(\"/test_options_and_not_auto\", origin=\"http://foo.bar.com\")",
          "78:         self.assertEqual(resp.data.decode(\"utf-8\"), \"Welcome!\")",
          "",
          "---------------"
        ],
        "tests/decorator/test_origins.py||tests/decorator/test_origins.py": [
          "File: tests/decorator/test_origins.py -> tests/decorator/test_origins.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "14: import re",
          "15: from flask_cors import *",
          "16: from flask_cors.core import *",
          "20: class OriginsTestCase(FlaskCorsTestCase):",
          "21:     def setUp(self):",
          "22:         self.app = Flask(__name__)",
          "25:         @cross_origin()",
          "26:         def wildcard():",
          "30:         @cross_origin(always_send=True)",
          "31:         def test_always_send():",
          "35:         @cross_origin(always_send=True, send_wildcard=False)",
          "36:         def test_always_send_no_wildcard():",
          "40:         @cross_origin(send_wildcard=True)",
          "41:         def test_send_wildcard_with_origin():",
          "45:         @cross_origin(origins=[\"http://foo.com\", \"http://bar.com\"])",
          "46:         def test_list():",
          "50:         @cross_origin(origins=\"http://foo.com\")",
          "51:         def test_string():",
          "55:         @cross_origin(origins={\"http://foo.com\", \"http://bar.com\"})",
          "56:         def test_set():",
          "60:         @cross_origin(origins=r\"http?://\\w*\\.?example\\.com:?\\d*/?.*\")",
          "61:         def test_subdomain_regex():",
          "65:         @cross_origin(origins=re.compile(r\"http?://\\w*\\.?example\\.com:?\\d*/?.*\"))",
          "66:         def test_compiled_subdomain_regex():",
          "70:         @cross_origin(origins=[r\".*.example.com\", r\".*.otherexample.com\"])",
          "71:         def test_regex_list():",
          "75:         @cross_origin(origins=[\"http://example.com\", r\".*.otherexample.com\"])",
          "76:         def test_regex_mixed_list():",
          "80:         @cross_origin(origins=\"https?://example.com\")",
          "81:         def test_multiple_protocols():",
          "84:     def test_defaults_no_origin(self):",
          "91:     def test_defaults_with_origin(self):",
          "96:             self.assertEqual(resp.status_code, 200)",
          "99:     def test_always_send_no_wildcard(self):",
          "105:             self.assertEqual(resp.status_code, 200)",
          "108:     def test_always_send_no_wildcard_origins(self):",
          "110:             self.assertEqual(resp.status_code, 200)",
          "114:     def test_send_wildcard_with_origin(self):",
          "119:             self.assertEqual(resp.status_code, 200)",
          "122:     def test_list_serialized(self):",
          "129:     def test_string_serialized(self):",
          "136:     def test_set_serialized(self):",
          "142:         allowed = resp.headers.get(ACL_ORIGIN)",
          "143:         # Order is not guaranteed",
          "146:     def test_not_matching_origins(self):",
          "148:             self.assertFalse(ACL_ORIGIN in resp.headers)",
          "150:     def test_subdomain_regex(self):",
          "151:         for sub in letters:",
          "152:             domain = \"http://%s.example.com\" % sub",
          "155:                 self.assertEqual(domain, resp.headers.get(ACL_ORIGIN))",
          "157:     def test_compiled_subdomain_regex(self):",
          "158:         for sub in letters:",
          "159:             domain = \"http://%s.example.com\" % sub",
          "162:                 self.assertEqual(domain, resp.headers.get(ACL_ORIGIN))",
          "164:     def test_regex_list(self):",
          "166:             for sub in letters:",
          "170:                     self.assertEqual(domain, resp.headers.get(ACL_ORIGIN))",
          "172:     def test_regex_mixed_list(self):",
          "187:         for sub in letters:",
          "188:             domain = \"http://%s.otherexample.com\" % sub",
          "191:                 self.assertEqual(domain, resp.headers.get(ACL_ORIGIN))",
          "196:     def test_multiple_protocols(self):",
          "197:         import logging",
          "203: if __name__ == \"__main__\":",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "12: from ..base_test import FlaskCorsTestCase",
          "13: from flask import Flask",
          "18: letters = 'abcdefghijklmnopqrstuvwxyz'  # string.letters is not PY3 compatible",
          "24:         @self.app.route('/')",
          "27:             return 'Welcome!'",
          "29:         @self.app.route('/test_always_send')",
          "32:             return 'Welcome!'",
          "34:         @self.app.route('/test_always_send_no_wildcard')",
          "37:             return 'Welcome!'",
          "39:         @self.app.route('/test_send_wildcard_with_origin')",
          "42:             return 'Welcome!'",
          "44:         @self.app.route('/test_list')",
          "47:             return 'Welcome!'",
          "49:         @self.app.route('/test_string')",
          "52:             return 'Welcome!'",
          "54:         @self.app.route('/test_set')",
          "57:             return 'Welcome!'",
          "59:         @self.app.route('/test_subdomain_regex')",
          "62:             return ''",
          "64:         @self.app.route('/test_compiled_subdomain_regex')",
          "67:             return ''",
          "69:         @self.app.route('/test_regex_list')",
          "72:             return ''",
          "74:         @self.app.route('/test_regex_mixed_list')",
          "77:             return ''",
          "79:         @self.app.route('/test_multiple_protocols')",
          "82:             return ''",
          "85:         ''' If there is no Origin header in the request, the",
          "86:             Access-Control-Allow-Origin header should be '*' by default.",
          "87:         '''",
          "88:         for resp in self.iter_responses('/'):",
          "89:             self.assertEqual(resp.headers.get(ACL_ORIGIN), '*')",
          "92:         ''' If there is an Origin header in the request, the",
          "93:             Access-Control-Allow-Origin header should be included.",
          "94:         '''",
          "95:         for resp in self.iter_responses('/', origin='http://example.com'):",
          "97:             self.assertEqual(resp.headers.get(ACL_ORIGIN), 'http://example.com')",
          "100:         '''",
          "101:             If send_wildcard=False, but the there is '*' in the",
          "102:             allowed origins, we should send it anyways.",
          "103:         '''",
          "104:         for resp in self.iter_responses('/'):",
          "106:             self.assertEqual(resp.headers.get(ACL_ORIGIN), '*')",
          "109:         for resp in self.iter_responses('/'):",
          "111:             self.assertEqual(resp.headers.get(ACL_ORIGIN), '*')",
          "115:         ''' If there is an Origin header in the request, the",
          "116:             Access-Control-Allow-Origin header should be included.",
          "117:         '''",
          "118:         for resp in self.iter_responses('/test_send_wildcard_with_origin', origin='http://example.com'):",
          "120:             self.assertEqual(resp.headers.get(ACL_ORIGIN), '*')",
          "123:         ''' If there is an Origin header in the request, the",
          "124:             Access-Control-Allow-Origin header should be echoed.",
          "125:         '''",
          "126:         resp = self.get('/test_list', origin='http://bar.com')",
          "127:         self.assertEqual(resp.headers.get(ACL_ORIGIN),'http://bar.com')",
          "130:         ''' If there is an Origin header in the request,",
          "131:             the Access-Control-Allow-Origin header should be echoed back.",
          "132:         '''",
          "133:         resp = self.get('/test_string', origin='http://foo.com')",
          "134:         self.assertEqual(resp.headers.get(ACL_ORIGIN), 'http://foo.com')",
          "137:         ''' If there is an Origin header in the request,",
          "138:             the Access-Control-Allow-Origin header should be echoed back.",
          "139:         '''",
          "140:         resp = self.get('/test_set', origin='http://bar.com')",
          "144:         self.assertEqual(allowed, 'http://bar.com')",
          "147:         for resp in self.iter_responses('/test_list',origin=\"http://bazz.com\"):",
          "153:             for resp in self.iter_responses('/test_subdomain_regex',",
          "154:                                             headers={'origin': domain}):",
          "160:             for resp in self.iter_responses('/test_compiled_subdomain_regex',",
          "161:                                             headers={'origin': domain}):",
          "165:         for parent in 'example.com', 'otherexample.com':",
          "167:                 domain = \"http://{}.{}.com\".format(sub, parent)",
          "168:                 for resp in self.iter_responses('/test_regex_list',",
          "169:                                                 headers={'origin': domain}):",
          "173:         '''",
          "174:             Tests  the corner case occurs when the send_always setting is True",
          "175:             and no Origin header in the request, it is not possible to match",
          "176:             the regular expression(s) to determine the correct",
          "177:             Access-Control-Allow-Origin header to be returned. Instead, the",
          "178:             list of origins is serialized, and any strings which seem like",
          "179:             regular expressions (e.g. are not a '*' and contain either '*'",
          "180:             or '?') will be skipped.",
          "182:             Thus, the list of returned Access-Control-Allow-Origin header",
          "183:             is guaranteed to be 'null', the origin or \"*\", as per the w3",
          "184:             http://www.w3.org/TR/cors/#access-control-allow-origin-response-header",
          "186:         '''",
          "189:             for resp in self.iter_responses('/test_regex_mixed_list',",
          "190:                                             origin=domain):",
          "193:         self.assertEqual(\"http://example.com\",",
          "194:             self.get('/test_regex_mixed_list', origin='http://example.com').headers.get(ACL_ORIGIN))",
          "198:         logging.getLogger('flask_cors').level = logging.DEBUG",
          "199:         resp = self.get('test_multiple_protocols', origin='https://example.com')",
          "200:         self.assertEqual('https://example.com', resp.headers.get(ACL_ORIGIN))",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "13: from flask import Flask",
          "18: from ..base_test import FlaskCorsTestCase",
          "20: letters = \"abcdefghijklmnopqrstuvwxyz\"  # string.letters is not PY3 compatible",
          "27:         @self.app.route(\"/\")",
          "30:             return \"Welcome!\"",
          "32:         @self.app.route(\"/test_always_send\")",
          "35:             return \"Welcome!\"",
          "37:         @self.app.route(\"/test_always_send_no_wildcard\")",
          "40:             return \"Welcome!\"",
          "42:         @self.app.route(\"/test_send_wildcard_with_origin\")",
          "45:             return \"Welcome!\"",
          "47:         @self.app.route(\"/test_list\")",
          "50:             return \"Welcome!\"",
          "52:         @self.app.route(\"/test_string\")",
          "55:             return \"Welcome!\"",
          "57:         @self.app.route(\"/test_set\")",
          "60:             return \"Welcome!\"",
          "62:         @self.app.route(\"/test_subdomain_regex\")",
          "65:             return \"\"",
          "67:         @self.app.route(\"/test_compiled_subdomain_regex\")",
          "70:             return \"\"",
          "72:         @self.app.route(\"/test_regex_list\")",
          "75:             return \"\"",
          "77:         @self.app.route(\"/test_regex_mixed_list\")",
          "80:             return \"\"",
          "82:         @self.app.route(\"/test_multiple_protocols\")",
          "85:             return \"\"",
          "88:         \"\"\"If there is no Origin header in the request, the",
          "89:         Access-Control-Allow-Origin header should be '*' by default.",
          "90:         \"\"\"",
          "91:         for resp in self.iter_responses(\"/\"):",
          "92:             self.assertEqual(resp.headers.get(ACL_ORIGIN), \"*\")",
          "95:         \"\"\"If there is an Origin header in the request, the",
          "96:         Access-Control-Allow-Origin header should be included.",
          "97:         \"\"\"",
          "98:         for resp in self.iter_responses(\"/\", origin=\"http://example.com\"):",
          "100:             self.assertEqual(resp.headers.get(ACL_ORIGIN), \"http://example.com\")",
          "103:         \"\"\"",
          "104:         If send_wildcard=False, but the there is '*' in the",
          "105:         allowed origins, we should send it anyways.",
          "106:         \"\"\"",
          "107:         for resp in self.iter_responses(\"/\"):",
          "109:             self.assertEqual(resp.headers.get(ACL_ORIGIN), \"*\")",
          "112:         for resp in self.iter_responses(\"/\"):",
          "114:             self.assertEqual(resp.headers.get(ACL_ORIGIN), \"*\")",
          "117:         \"\"\"If there is an Origin header in the request, the",
          "118:         Access-Control-Allow-Origin header should be included.",
          "119:         \"\"\"",
          "120:         for resp in self.iter_responses(\"/test_send_wildcard_with_origin\", origin=\"http://example.com\"):",
          "122:             self.assertEqual(resp.headers.get(ACL_ORIGIN), \"*\")",
          "125:         \"\"\"If there is an Origin header in the request, the",
          "126:         Access-Control-Allow-Origin header should be echoed.",
          "127:         \"\"\"",
          "128:         resp = self.get(\"/test_list\", origin=\"http://bar.com\")",
          "129:         self.assertEqual(resp.headers.get(ACL_ORIGIN), \"http://bar.com\")",
          "132:         \"\"\"If there is an Origin header in the request,",
          "133:         the Access-Control-Allow-Origin header should be echoed back.",
          "134:         \"\"\"",
          "135:         resp = self.get(\"/test_string\", origin=\"http://foo.com\")",
          "136:         self.assertEqual(resp.headers.get(ACL_ORIGIN), \"http://foo.com\")",
          "139:         \"\"\"If there is an Origin header in the request,",
          "140:         the Access-Control-Allow-Origin header should be echoed back.",
          "141:         \"\"\"",
          "142:         resp = self.get(\"/test_set\", origin=\"http://bar.com\")",
          "146:         self.assertEqual(allowed, \"http://bar.com\")",
          "149:         for resp in self.iter_responses(\"/test_list\", origin=\"http://bazz.com\"):",
          "155:             for resp in self.iter_responses(\"/test_subdomain_regex\", headers={\"origin\": domain}):",
          "161:             for resp in self.iter_responses(\"/test_compiled_subdomain_regex\", headers={\"origin\": domain}):",
          "165:         for parent in \"example.com\", \"otherexample.com\":",
          "167:                 domain = f\"http://{sub}.{parent}.com\"",
          "168:                 for resp in self.iter_responses(\"/test_regex_list\", headers={\"origin\": domain}):",
          "172:         \"\"\"",
          "173:         Tests  the corner case occurs when the send_always setting is True",
          "174:         and no Origin header in the request, it is not possible to match",
          "175:         the regular expression(s) to determine the correct",
          "176:         Access-Control-Allow-Origin header to be returned. Instead, the",
          "177:         list of origins is serialized, and any strings which seem like",
          "178:         regular expressions (e.g. are not a '*' and contain either '*'",
          "179:         or '?') will be skipped.",
          "181:         Thus, the list of returned Access-Control-Allow-Origin header",
          "182:         is guaranteed to be 'null', the origin or \"*\", as per the w3",
          "183:         http://www.w3.org/TR/cors/#access-control-allow-origin-response-header",
          "185:         \"\"\"",
          "188:             for resp in self.iter_responses(\"/test_regex_mixed_list\", origin=domain):",
          "191:         self.assertEqual(",
          "192:             \"http://example.com\",",
          "193:             self.get(\"/test_regex_mixed_list\", origin=\"http://example.com\").headers.get(ACL_ORIGIN),",
          "194:         )",
          "199:         logging.getLogger(\"flask_cors\").level = logging.DEBUG",
          "200:         resp = self.get(\"test_multiple_protocols\", origin=\"https://example.com\")",
          "201:         self.assertEqual(\"https://example.com\", resp.headers.get(ACL_ORIGIN))",
          "",
          "---------------"
        ],
        "tests/decorator/test_private_network_headers.py||tests/decorator/test_private_network_headers.py": [
          "File: tests/decorator/test_private_network_headers.py -> tests/decorator/test_private_network_headers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from flask import Flask",
          "6: from flask_cors import *",
          "7: from flask_cors.core import *",
          "10: class SupportsCredentialsCase(FlaskCorsTestCase):",
          "11:     def setUp(self):",
          "12:         self.app = Flask(__name__)",
          "15:         @cross_origin(allow_private_network=True)",
          "16:         def test_private_network_supported():",
          "20:         @cross_origin(allow_private_network=False)",
          "21:         def test_credentials_unsupported():",
          "25:         @cross_origin()",
          "26:         def test_default():",
          "29:     def test_credentials_supported(self):",
          "32:         \"\"\"",
          "36:     def test_default(self):",
          "43:         self.assertFalse(ACL_RESPONSE_PRIVATE_NETWORK in resp.headers)",
          "45:     def test_credentials_unsupported(self):",
          "48:         self.assertFalse(ACL_RESPONSE_PRIVATE_NETWORK in resp.headers)",
          "54: if __name__ == \"__main__\":",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3: from ..base_test import FlaskCorsTestCase",
          "14:         @self.app.route('/test_allow_private_network_access_supported')",
          "17:             return 'Private network!'",
          "19:         @self.app.route('/test_allow_private_network_access_unsupported')",
          "22:             return 'Private network!'",
          "24:         @self.app.route('/test_default')",
          "27:             return 'Open!'",
          "30:         \"\"\" The specified route should return the",
          "31:             Access-Control-Allow-Credentials header.",
          "33:         resp = self.get('/test_allow_private_network_access_supported', origin='www.example.com', headers={ACL_REQUEST_HEADER_PRIVATE_NETWORK:'true'})",
          "34:         self.assertEqual(resp.headers.get(ACL_RESPONSE_PRIVATE_NETWORK), 'true')",
          "37:         \"\"\" The default behavior should be to allow private network access.",
          "38:         \"\"\"",
          "39:         resp = self.get('/test_default', origin='www.example.com', headers={ACL_REQUEST_HEADER_PRIVATE_NETWORK:'true'})",
          "40:         self.assertFalse(resp.headers.get('ACL_RESPONSE_PRIVATE_NETWORK'))",
          "42:         resp = self.get('/test_default')",
          "46:         \"\"\" If private network access is disabled, the header should never be sent.\"\"\"",
          "47:         resp = self.get('/test_allow_private_network_access_unsupported', origin='www.example.com')",
          "50:         resp = self.get('/test_allow_private_network_access_unsupported', origin='www.example.com', headers={ACL_REQUEST_HEADER_PRIVATE_NETWORK:'true'})",
          "51:         self.assertEqual(resp.headers.get(ACL_RESPONSE_PRIVATE_NETWORK), 'false')",
          "",
          "[Added Lines]",
          "6: from ..base_test import FlaskCorsTestCase",
          "13:         @self.app.route(\"/test_allow_private_network_access_supported\")",
          "16:             return \"Private network!\"",
          "18:         @self.app.route(\"/test_allow_private_network_access_unsupported\")",
          "21:             return \"Private network!\"",
          "23:         @self.app.route(\"/test_default\")",
          "26:             return \"Open!\"",
          "29:         \"\"\"The specified route should return the",
          "30:         Access-Control-Allow-Credentials header.",
          "32:         resp = self.get(",
          "33:             \"/test_allow_private_network_access_supported\",",
          "34:             origin=\"www.example.com\",",
          "35:             headers={ACL_REQUEST_HEADER_PRIVATE_NETWORK: \"true\"},",
          "36:         )",
          "37:         self.assertEqual(resp.headers.get(ACL_RESPONSE_PRIVATE_NETWORK), \"true\")",
          "40:         \"\"\"The default behavior should be to allow private network access.\"\"\"",
          "41:         resp = self.get(\"/test_default\", origin=\"www.example.com\", headers={ACL_REQUEST_HEADER_PRIVATE_NETWORK: \"true\"})",
          "42:         self.assertFalse(resp.headers.get(\"ACL_RESPONSE_PRIVATE_NETWORK\"))",
          "44:         resp = self.get(\"/test_default\")",
          "48:         \"\"\"If private network access is disabled, the header should never be sent.\"\"\"",
          "49:         resp = self.get(\"/test_allow_private_network_access_unsupported\", origin=\"www.example.com\")",
          "52:         resp = self.get(",
          "53:             \"/test_allow_private_network_access_unsupported\",",
          "54:             origin=\"www.example.com\",",
          "55:             headers={ACL_REQUEST_HEADER_PRIVATE_NETWORK: \"true\"},",
          "56:         )",
          "57:         self.assertEqual(resp.headers.get(ACL_RESPONSE_PRIVATE_NETWORK), \"false\")",
          "",
          "---------------"
        ],
        "tests/decorator/test_vary_header.py||tests/decorator/test_vary_header.py": [
          "File: tests/decorator/test_vary_header.py -> tests/decorator/test_vary_header.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "13: from flask import Flask, Response",
          "15: from flask_cors import *",
          "16: from flask_cors.core import *",
          "19: class VaryHeaderTestCase(FlaskCorsTestCase):",
          "20:     def setUp(self):",
          "21:         self.app = Flask(__name__)",
          "24:         @cross_origin()",
          "25:         def wildcard():",
          "30:         def test_consistent():",
          "34:         @cross_origin(origins=[\"http://foo.com\", \"http://bar.com\"])",
          "35:         def test_vary():",
          "39:         @cross_origin(origins=[\"http://foo.com\", \"http://bar.com\"])",
          "40:         def test_existing_vary_headers():",
          "44:     def test_default(self):",
          "52:     def test_consistent_origin(self):",
          "60:     def test_varying_origin(self):",
          "73:             self.assertHasACLOrigin(resp)",
          "76:     def test_consistent_origin_concat(self):",
          "86: if __name__ == \"__main__\":",
          "87:     unittest.main()",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "12: from ..base_test import FlaskCorsTestCase",
          "23:         @self.app.route('/')",
          "26:             return 'Welcome!'",
          "28:         @self.app.route('/test_consistent_origin')",
          "29:         @cross_origin(origins='http://foo.com')",
          "31:             return 'Welcome!'",
          "33:         @self.app.route('/test_vary')",
          "36:             return 'Welcome!'",
          "38:         @self.app.route('/test_existing_vary_headers')",
          "41:             return Response('', status=200,",
          "42:                             headers={'Vary': 'Accept-Encoding'})",
          "45:         '''",
          "46:             By default, allow all domains, which means the Vary:Origin header",
          "47:             should be set.",
          "48:         '''",
          "49:         for resp in self.iter_responses('/', origin=\"http://foo.com\"):",
          "50:             self.assertTrue('Vary' in resp.headers)",
          "53:         '''",
          "54:             If the Access-Control-Allow-Origin header will change dynamically,",
          "55:             the Vary:Origin header should be set.",
          "56:         '''",
          "57:         for resp in self.iter_responses('/test_consistent_origin', origin=\"http://foo.com\"):",
          "58:             self.assertFalse('Vary' in resp.headers)",
          "61:         ''' Resources that wish to enable themselves to be shared with",
          "62:             multiple Origins but do not respond uniformly with \"*\" must",
          "63:             in practice generate the Access-Control-Allow-Origin header",
          "64:             dynamically in response to every request they wish to allow.",
          "66:             As a consequence, authors of such resources should send a Vary:",
          "67:             Origin HTTP header or provide other appropriate control directives",
          "68:             to prevent caching of such responses, which may be inaccurate if",
          "69:             re-used across-origins.",
          "70:         '''",
          "71:         example_origin = 'http://foo.com'",
          "72:         for resp in self.iter_responses('/test_vary', origin=example_origin):",
          "74:             self.assertEqual(resp.headers.get('Vary'), 'Origin')",
          "77:         '''",
          "78:             If Flask-Cors adds a Vary header and there is already a Vary",
          "79:             header set, the headers should be combined and comma-separated.",
          "80:         '''",
          "82:         resp = self.get('/test_existing_vary_headers', origin=\"http://foo.com\")",
          "83:         self.assertEqual(set(resp.headers.getlist('Vary')),",
          "84:                          {'Origin', 'Accept-Encoding'})",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "16: from ..base_test import FlaskCorsTestCase",
          "23:         @self.app.route(\"/\")",
          "26:             return \"Welcome!\"",
          "28:         @self.app.route(\"/test_consistent_origin\")",
          "29:         @cross_origin(origins=\"http://foo.com\")",
          "31:             return \"Welcome!\"",
          "33:         @self.app.route(\"/test_vary\")",
          "36:             return \"Welcome!\"",
          "38:         @self.app.route(\"/test_existing_vary_headers\")",
          "41:             return Response(\"\", status=200, headers={\"Vary\": \"Accept-Encoding\"})",
          "44:         \"\"\"",
          "45:         By default, allow all domains, which means the Vary:Origin header",
          "46:         should be set.",
          "47:         \"\"\"",
          "48:         for resp in self.iter_responses(\"/\", origin=\"http://foo.com\"):",
          "49:             self.assertTrue(\"Vary\" in resp.headers)",
          "52:         \"\"\"",
          "53:         If the Access-Control-Allow-Origin header will change dynamically,",
          "54:         the Vary:Origin header should be set.",
          "55:         \"\"\"",
          "56:         for resp in self.iter_responses(\"/test_consistent_origin\", origin=\"http://foo.com\"):",
          "57:             self.assertFalse(\"Vary\" in resp.headers)",
          "60:         \"\"\"Resources that wish to enable themselves to be shared with",
          "61:         multiple Origins but do not respond uniformly with \"*\" must",
          "62:         in practice generate the Access-Control-Allow-Origin header",
          "63:         dynamically in response to every request they wish to allow.",
          "65:         As a consequence, authors of such resources should send a Vary:",
          "66:         Origin HTTP header or provide other appropriate control directives",
          "67:         to prevent caching of such responses, which may be inaccurate if",
          "68:         re-used across-origins.",
          "69:         \"\"\"",
          "70:         example_origin = \"http://foo.com\"",
          "71:         for resp in self.iter_responses(\"/test_vary\", origin=example_origin):",
          "73:             self.assertEqual(resp.headers.get(\"Vary\"), \"Origin\")",
          "76:         \"\"\"",
          "77:         If Flask-Cors adds a Vary header and there is already a Vary",
          "78:         header set, the headers should be combined and comma-separated.",
          "79:         \"\"\"",
          "81:         resp = self.get(\"/test_existing_vary_headers\", origin=\"http://foo.com\")",
          "82:         self.assertEqual(set(resp.headers.getlist(\"Vary\")), {\"Origin\", \"Accept-Encoding\"})",
          "",
          "---------------"
        ],
        "tests/decorator/test_w3.py||tests/decorator/test_w3.py": [
          "File: tests/decorator/test_w3.py -> tests/decorator/test_w3.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "13: from flask import Flask",
          "14: from flask_cors import *",
          "15: from flask_cors.core import *",
          "18: class OriginsW3TestCase(FlaskCorsTestCase):",
          "19:     def setUp(self):",
          "20:         self.app = Flask(__name__)",
          "24:         def allowOrigins():",
          "34:         @cross_origin(send_wildcard=False, always_send=False)",
          "35:         def noWildcard():",
          "41:     def test_wildcard_origin_header(self):",
          "53:     def test_wildcard_no_origin_header(self):",
          "58:             self.assertTrue(ACL_ORIGIN not in resp.headers)",
          "60:     def test_wildcard_default_origins(self):",
          "67:             self.assertEqual(resp.headers.get(ACL_ORIGIN), example_origin)",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "12: from ..base_test import FlaskCorsTestCase",
          "22:         @self.app.route('/')",
          "23:         @cross_origin(origins='*', send_wildcard=False, always_send=False)",
          "25:             ''' This sets up flask-cors to echo the request's `Origin` header,",
          "26:                 only if it is actually set. This behavior is most similar to",
          "27:                 the actual W3 specification, http://www.w3.org/TR/cors/ but",
          "28:                 is not the default because it is more common to use the",
          "29:                 wildcard configuration in order to support CDN caching.",
          "30:             '''",
          "31:             return 'Welcome!'",
          "33:         @self.app.route('/default-origins')",
          "36:             ''' With the default origins configuration, send_wildcard should",
          "37:                 still be respected.",
          "38:             '''",
          "39:             return 'Welcome!'",
          "42:         ''' If there is an Origin header in the request, the",
          "43:             Access-Control-Allow-Origin header should be echoed back.",
          "44:         '''",
          "45:         example_origin = 'http://example.com'",
          "46:         headers = {'Origin': example_origin}",
          "47:         for resp in self.iter_responses('/', headers=headers):",
          "48:             self.assertEqual(",
          "49:                 resp.headers.get(ACL_ORIGIN),",
          "50:                 example_origin",
          "51:             )",
          "54:         ''' If there is no Origin header in the request, the",
          "55:             Access-Control-Allow-Origin header should not be included.",
          "56:         '''",
          "57:         for resp in self.iter_responses('/'):",
          "61:         ''' If there is an Origin header in the request, the",
          "62:             Access-Control-Allow-Origin header should be echoed back.",
          "63:         '''",
          "64:         example_origin = 'http://example.com'",
          "65:         headers = {'Origin': example_origin}",
          "66:         for resp in self.iter_responses('/default-origins', headers=headers):",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "16: from ..base_test import FlaskCorsTestCase",
          "23:         @self.app.route(\"/\")",
          "24:         @cross_origin(origins=\"*\", send_wildcard=False, always_send=False)",
          "26:             \"\"\"This sets up flask-cors to echo the request's `Origin` header,",
          "27:             only if it is actually set. This behavior is most similar to",
          "28:             the actual W3 specification, http://www.w3.org/TR/cors/ but",
          "29:             is not the default because it is more common to use the",
          "30:             wildcard configuration in order to support CDN caching.",
          "31:             \"\"\"",
          "32:             return \"Welcome!\"",
          "34:         @self.app.route(\"/default-origins\")",
          "37:             \"\"\"With the default origins configuration, send_wildcard should",
          "38:             still be respected.",
          "39:             \"\"\"",
          "40:             return \"Welcome!\"",
          "43:         \"\"\"If there is an Origin header in the request, the",
          "44:         Access-Control-Allow-Origin header should be echoed back.",
          "45:         \"\"\"",
          "46:         example_origin = \"http://example.com\"",
          "47:         headers = {\"Origin\": example_origin}",
          "48:         for resp in self.iter_responses(\"/\", headers=headers):",
          "49:             self.assertEqual(resp.headers.get(ACL_ORIGIN), example_origin)",
          "52:         \"\"\"If there is no Origin header in the request, the",
          "53:         Access-Control-Allow-Origin header should not be included.",
          "54:         \"\"\"",
          "55:         for resp in self.iter_responses(\"/\"):",
          "59:         \"\"\"If there is an Origin header in the request, the",
          "60:         Access-Control-Allow-Origin header should be echoed back.",
          "61:         \"\"\"",
          "62:         example_origin = \"http://example.com\"",
          "63:         headers = {\"Origin\": example_origin}",
          "64:         for resp in self.iter_responses(\"/default-origins\", headers=headers):",
          "",
          "---------------"
        ],
        "tests/extension/__init__.py||tests/extension/__init__.py": [
          "File: tests/extension/__init__.py -> tests/extension/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     Tests particular to flask_cors.CORS",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "",
          "[Added Lines]",
          "2: Tests particular to flask_cors.CORS",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "",
          "---------------"
        ],
        "tests/extension/test_app_extension.py||tests/extension/test_app_extension.py": [
          "File: tests/extension/test_app_extension.py -> tests/extension/test_app_extension.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: \"\"\"",
          "10: \"\"\"",
          "12: import re",
          "14: from flask import Flask, jsonify",
          "16: from flask_cors import *",
          "17: from flask_cors.core import *",
          "21: class AppExtensionRegexp(FlaskCorsTestCase):",
          "22:     def setUp(self):",
          "23:         self.app = Flask(__name__)",
          "32:             },",
          "49:         def wildcard():",
          "53:         def send_wildcard_with_origin():",
          "57:         def test_list():",
          "61:         def test_string():",
          "65:         def test_set():",
          "68:     def test_defaults_no_origin(self):",
          "75:     def test_defaults_with_origin(self):",
          "80:             self.assertEqual(resp.status_code, 200)",
          "83:     def test_send_wildcard_with_origin(self):",
          "88:             self.assertEqual(resp.status_code, 200)",
          "91:     def test_list_serialized(self):",
          "98:     def test_string_serialized(self):",
          "105:     def test_set_serialized(self):",
          "111:         allowed = resp.headers.get(ACL_ORIGIN)",
          "112:         # Order is not guaranteed",
          "115:     def test_not_matching_origins(self):",
          "117:             self.assertFalse(ACL_ORIGIN in resp.headers)",
          "119:     def test_subdomain_regex(self):",
          "120:         for sub in letters:",
          "121:             domain = \"http://%s.example.com\" % sub",
          "124:                 self.assertEqual(domain, resp.headers.get(ACL_ORIGIN))",
          "126:     def test_compiled_subdomain_regex(self):",
          "127:         for sub in [1, 100, 200]:",
          "128:             domain = \"http://example%s.com\" % sub",
          "131:                 self.assertEqual(domain, resp.headers.get(ACL_ORIGIN))",
          "134:             self.assertEqual(None, resp.headers.get(ACL_ORIGIN))",
          "136:     def test_regex_list(self):",
          "138:             for sub in letters:",
          "142:                     self.assertEqual(domain, resp.headers.get(ACL_ORIGIN))",
          "144:     def test_regex_mixed_list(self):",
          "159:         for sub in letters:",
          "160:             domain = \"http://%s.otherexample.com\" % sub",
          "163:                 self.assertEqual(domain, resp.headers.get(ACL_ORIGIN))",
          "169: class AppExtensionList(FlaskCorsTestCase):",
          "170:     def setUp(self):",
          "171:         self.app = Flask(__name__)",
          "176:         def unexposed():",
          "180:         def exposed1():",
          "184:         def exposed2():",
          "187:     def test_exposed(self):",
          "189:             self.assertEqual(resp.status_code, 200)",
          "192:     def test_other_exposed(self):",
          "194:             self.assertEqual(resp.status_code, 200)",
          "197:     def test_unexposed(self):",
          "199:             self.assertEqual(resp.status_code, 200)",
          "200:             self.assertFalse(ACL_ORIGIN in resp.headers)",
          "",
          "[Removed Lines]",
          "1: # -*- coding: utf-8 -*-",
          "3:     test",
          "4:     ~~~~",
          "5:     Flask-CORS is a simple extension to Flask allowing you to support cross",
          "6:     origin resource sharing (CORS) using a simple decorator.",
          "8:     :copyright: (c) 2016 by Cory Dolphin.",
          "9:     :license: MIT, see LICENSE for more details.",
          "13: from ..base_test import FlaskCorsTestCase",
          "19: letters = 'abcdefghijklmnopqrstuvwxyz'  # string.letters is not PY3 compatible",
          "24:         CORS(self.app, resources={",
          "25:             r'/test_list': {'origins': [\"http://foo.com\", \"http://bar.com\"]},",
          "26:             r'/test_string': {'origins': 'http://foo.com'},",
          "27:             r'/test_set': {",
          "28:                 'origins': {\"http://foo.com\", \"http://bar.com\"}",
          "29:             },",
          "30:             r'/test_subdomain_regex': {",
          "31:                 'origins': r\"http?://\\w*\\.?example\\.com:?\\d*/?.*\"",
          "33:             r'/test_regex_list': {",
          "34:                 'origins': [r\".*.example.com\", r\".*.otherexample.com\"]",
          "35:             },",
          "36:             r'/test_regex_mixed_list': {",
          "37:                 'origins': [\"http://example.com\", r\".*.otherexample.com\"]",
          "38:             },",
          "39:             r'/test_send_wildcard_with_origin' : {",
          "40:                 'send_wildcard':True",
          "41:             },",
          "42:             re.compile(r'/test_compiled_subdomain_\\w*'): {",
          "43:                 'origins': re.compile(r\"http://example\\d+.com\")",
          "44:             },",
          "45:             r'/test_defaults':{}",
          "46:         })",
          "48:         @self.app.route('/test_defaults')",
          "50:             return 'Welcome!'",
          "52:         @self.app.route('/test_send_wildcard_with_origin')",
          "54:             return 'Welcome!'",
          "56:         @self.app.route('/test_list')",
          "58:             return 'Welcome!'",
          "60:         @self.app.route('/test_string')",
          "62:             return 'Welcome!'",
          "64:         @self.app.route('/test_set')",
          "66:             return 'Welcome!'",
          "69:         ''' If there is no Origin header in the request,",
          "70:             by default the '*' should be sent",
          "71:         '''",
          "72:         for resp in self.iter_responses('/test_defaults'):",
          "73:             self.assertEqual(resp.headers.get(ACL_ORIGIN), '*')",
          "76:         ''' If there is an Origin header in the request, the",
          "77:             Access-Control-Allow-Origin header should be included.",
          "78:         '''",
          "79:         for resp in self.iter_responses('/test_defaults', origin='http://example.com'):",
          "81:             self.assertEqual(resp.headers.get(ACL_ORIGIN), 'http://example.com')",
          "84:         ''' If there is an Origin header in the request, the",
          "85:             Access-Control-Allow-Origin header should be included.",
          "86:         '''",
          "87:         for resp in self.iter_responses('/test_send_wildcard_with_origin', origin='http://example.com'):",
          "89:             self.assertEqual(resp.headers.get(ACL_ORIGIN), '*')",
          "92:         ''' If there is an Origin header in the request, the",
          "93:             Access-Control-Allow-Origin header should be echoed.",
          "94:         '''",
          "95:         resp = self.get('/test_list', origin='http://bar.com')",
          "96:         self.assertEqual(resp.headers.get(ACL_ORIGIN),'http://bar.com')",
          "99:         ''' If there is an Origin header in the request,",
          "100:             the Access-Control-Allow-Origin header should be echoed back.",
          "101:         '''",
          "102:         resp = self.get('/test_string', origin='http://foo.com')",
          "103:         self.assertEqual(resp.headers.get(ACL_ORIGIN), 'http://foo.com')",
          "106:         ''' If there is an Origin header in the request,",
          "107:             the Access-Control-Allow-Origin header should be echoed back.",
          "108:         '''",
          "109:         resp = self.get('/test_set', origin='http://bar.com')",
          "113:         self.assertEqual(allowed, 'http://bar.com')",
          "116:         for resp in self.iter_responses('/test_list',origin=\"http://bazz.com\"):",
          "122:             for resp in self.iter_responses('/test_subdomain_regex',",
          "123:                                             headers={'origin': domain}):",
          "129:             for resp in self.iter_responses('/test_compiled_subdomain_regex',",
          "130:                                             headers={'origin': domain}):",
          "132:         for resp in self.iter_responses('/test_compiled_subdomain_regex',",
          "133:                                         headers={'origin': \"http://examplea.com\"}):",
          "137:         for parent in 'example.com', 'otherexample.com':",
          "139:                 domain = \"http://{}.{}.com\".format(sub, parent)",
          "140:                 for resp in self.iter_responses('/test_regex_list',",
          "141:                                                 headers={'origin': domain}):",
          "145:         '''",
          "146:             Tests  the corner case occurs when the send_always setting is True",
          "147:             and no Origin header in the request, it is not possible to match",
          "148:             the regular expression(s) to determine the correct",
          "149:             Access-Control-Allow-Origin header to be returned. Instead, the",
          "150:             list of origins is serialized, and any strings which seem like",
          "151:             regular expressions (e.g. are not a '*' and contain either '*'",
          "152:             or '?') will be skipped.",
          "154:             Thus, the list of returned Access-Control-Allow-Origin header",
          "155:             is guaranteed to be 'null', the origin or \"*\", as per the w3",
          "156:             http://www.w3.org/TR/cors/#access-control-allow-origin-response-header",
          "158:         '''",
          "161:             for resp in self.iter_responses('/test_regex_mixed_list',",
          "162:                                             origin=domain):",
          "165:         self.assertEqual(\"http://example.com\",",
          "166:             self.get('/test_regex_mixed_list', origin='http://example.com').headers.get(ACL_ORIGIN))",
          "172:         CORS(self.app, resources=[r'/test_exposed', r'/test_other_exposed'],",
          "173:              origins=['http://foo.com', 'http://bar.com'])",
          "175:         @self.app.route('/test_unexposed')",
          "177:             return 'Not exposed over CORS!'",
          "179:         @self.app.route('/test_exposed')",
          "181:             return 'Welcome!'",
          "183:         @self.app.route('/test_other_exposed')",
          "185:             return 'Welcome!'",
          "188:         for resp in self.iter_responses('/test_exposed', origin='http://foo.com'):",
          "190:             self.assertEqual(resp.headers.get(ACL_ORIGIN),'http://foo.com')",
          "193:         for resp in self.iter_responses('/test_other_exposed', origin='http://bar.com'):",
          "195:             self.assertEqual(resp.headers.get(ACL_ORIGIN), 'http://bar.com')",
          "198:         for resp in self.iter_responses('/test_unexposed', origin='http://foo.com'):",
          "",
          "[Added Lines]",
          "2: test",
          "3: ~~~~",
          "4: Flask-CORS is a simple extension to Flask allowing you to support cross",
          "5: origin resource sharing (CORS) using a simple decorator.",
          "7: :copyright: (c) 2016 by Cory Dolphin.",
          "8: :license: MIT, see LICENSE for more details.",
          "18: from ..base_test import FlaskCorsTestCase",
          "20: letters = \"abcdefghijklmnopqrstuvwxyz\"  # string.letters is not PY3 compatible",
          "26:         CORS(",
          "27:             self.app,",
          "28:             resources={",
          "29:                 r\"/test_list\": {\"origins\": [\"http://foo.com\", \"http://bar.com\"]},",
          "30:                 r\"/test_string\": {\"origins\": \"http://foo.com\"},",
          "31:                 r\"/test_set\": {\"origins\": {\"http://foo.com\", \"http://bar.com\"}},",
          "32:                 r\"/test_subdomain_regex\": {\"origins\": r\"http?://\\w*\\.?example\\.com:?\\d*/?.*\"},",
          "33:                 r\"/test_regex_list\": {\"origins\": [r\".*.example.com\", r\".*.otherexample.com\"]},",
          "34:                 r\"/test_regex_mixed_list\": {\"origins\": [\"http://example.com\", r\".*.otherexample.com\"]},",
          "35:                 r\"/test_send_wildcard_with_origin\": {\"send_wildcard\": True},",
          "36:                 re.compile(r\"/test_compiled_subdomain_\\w*\"): {\"origins\": re.compile(r\"http://example\\d+.com\")},",
          "37:                 r\"/test_defaults\": {},",
          "39:         )",
          "41:         @self.app.route(\"/test_defaults\")",
          "43:             return \"Welcome!\"",
          "45:         @self.app.route(\"/test_send_wildcard_with_origin\")",
          "47:             return \"Welcome!\"",
          "49:         @self.app.route(\"/test_list\")",
          "51:             return \"Welcome!\"",
          "53:         @self.app.route(\"/test_string\")",
          "55:             return \"Welcome!\"",
          "57:         @self.app.route(\"/test_set\")",
          "59:             return \"Welcome!\"",
          "62:         \"\"\"If there is no Origin header in the request,",
          "63:         by default the '*' should be sent",
          "64:         \"\"\"",
          "65:         for resp in self.iter_responses(\"/test_defaults\"):",
          "66:             self.assertEqual(resp.headers.get(ACL_ORIGIN), \"*\")",
          "69:         \"\"\"If there is an Origin header in the request, the",
          "70:         Access-Control-Allow-Origin header should be included.",
          "71:         \"\"\"",
          "72:         for resp in self.iter_responses(\"/test_defaults\", origin=\"http://example.com\"):",
          "74:             self.assertEqual(resp.headers.get(ACL_ORIGIN), \"http://example.com\")",
          "77:         \"\"\"If there is an Origin header in the request, the",
          "78:         Access-Control-Allow-Origin header should be included.",
          "79:         \"\"\"",
          "80:         for resp in self.iter_responses(\"/test_send_wildcard_with_origin\", origin=\"http://example.com\"):",
          "82:             self.assertEqual(resp.headers.get(ACL_ORIGIN), \"*\")",
          "85:         \"\"\"If there is an Origin header in the request, the",
          "86:         Access-Control-Allow-Origin header should be echoed.",
          "87:         \"\"\"",
          "88:         resp = self.get(\"/test_list\", origin=\"http://bar.com\")",
          "89:         self.assertEqual(resp.headers.get(ACL_ORIGIN), \"http://bar.com\")",
          "92:         \"\"\"If there is an Origin header in the request,",
          "93:         the Access-Control-Allow-Origin header should be echoed back.",
          "94:         \"\"\"",
          "95:         resp = self.get(\"/test_string\", origin=\"http://foo.com\")",
          "96:         self.assertEqual(resp.headers.get(ACL_ORIGIN), \"http://foo.com\")",
          "99:         \"\"\"If there is an Origin header in the request,",
          "100:         the Access-Control-Allow-Origin header should be echoed back.",
          "101:         \"\"\"",
          "102:         resp = self.get(\"/test_set\", origin=\"http://bar.com\")",
          "106:         self.assertEqual(allowed, \"http://bar.com\")",
          "109:         for resp in self.iter_responses(\"/test_list\", origin=\"http://bazz.com\"):",
          "115:             for resp in self.iter_responses(\"/test_subdomain_regex\", headers={\"origin\": domain}):",
          "121:             for resp in self.iter_responses(\"/test_compiled_subdomain_regex\", headers={\"origin\": domain}):",
          "123:         for resp in self.iter_responses(\"/test_compiled_subdomain_regex\", headers={\"origin\": \"http://examplea.com\"}):",
          "127:         for parent in \"example.com\", \"otherexample.com\":",
          "129:                 domain = f\"http://{sub}.{parent}.com\"",
          "130:                 for resp in self.iter_responses(\"/test_regex_list\", headers={\"origin\": domain}):",
          "134:         \"\"\"",
          "135:         Tests  the corner case occurs when the send_always setting is True",
          "136:         and no Origin header in the request, it is not possible to match",
          "137:         the regular expression(s) to determine the correct",
          "138:         Access-Control-Allow-Origin header to be returned. Instead, the",
          "139:         list of origins is serialized, and any strings which seem like",
          "140:         regular expressions (e.g. are not a '*' and contain either '*'",
          "141:         or '?') will be skipped.",
          "143:         Thus, the list of returned Access-Control-Allow-Origin header",
          "144:         is guaranteed to be 'null', the origin or \"*\", as per the w3",
          "145:         http://www.w3.org/TR/cors/#access-control-allow-origin-response-header",
          "147:         \"\"\"",
          "150:             for resp in self.iter_responses(\"/test_regex_mixed_list\", origin=domain):",
          "153:         self.assertEqual(",
          "154:             \"http://example.com\",",
          "155:             self.get(\"/test_regex_mixed_list\", origin=\"http://example.com\").headers.get(ACL_ORIGIN),",
          "156:         )",
          "162:         CORS(",
          "163:             self.app, resources=[r\"/test_exposed\", r\"/test_other_exposed\"], origins=[\"http://foo.com\", \"http://bar.com\"]",
          "164:         )",
          "166:         @self.app.route(\"/test_unexposed\")",
          "168:             return \"Not exposed over CORS!\"",
          "170:         @self.app.route(\"/test_exposed\")",
          "172:             return \"Welcome!\"",
          "174:         @self.app.route(\"/test_other_exposed\")",
          "176:             return \"Welcome!\"",
          "179:         for resp in self.iter_responses(\"/test_exposed\", origin=\"http://foo.com\"):",
          "181:             self.assertEqual(resp.headers.get(ACL_ORIGIN), \"http://foo.com\")",
          "184:         for resp in self.iter_responses(\"/test_other_exposed\", origin=\"http://bar.com\"):",
          "186:             self.assertEqual(resp.headers.get(ACL_ORIGIN), \"http://bar.com\")",
          "189:         for resp in self.iter_responses(\"/test_unexposed\", origin=\"http://foo.com\"):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203: class AppExtensionString(FlaskCorsTestCase):",
          "204:     def setUp(self):",
          "205:         self.app = Flask(__name__)",
          "212:         def exposed1():",
          "213:             return jsonify(success=True)",
          "216:         def exposed2():",
          "217:             return jsonify(success=True)",
          "221:         def overridden():",
          "222:             return jsonify(special=True)",
          "225:         def index():",
          "229:         def foo_txt():",
          "232:     def test_exposed(self):",
          "235:                 self.assertEqual(resp.status_code, 200)",
          "240:                 self.assertEqual(resp.status_code, 200)",
          "241:                 self.assertFalse(ACL_ORIGIN in resp.headers)",
          "242:                 self.assertFalse(ACL_EXPOSE_HEADERS in resp.headers)",
          "244:     def test_unexposed(self):",
          "246:             self.assertEqual(resp.status_code, 200)",
          "247:             self.assertFalse(ACL_ORIGIN in resp.headers)",
          "248:             self.assertFalse(ACL_EXPOSE_HEADERS in resp.headers)",
          "250:     def test_override(self):",
          "252:             self.assertEqual(resp.status_code, 200)",
          "255:             self.assertFalse(ACL_EXPOSE_HEADERS in resp.headers)",
          "258:             self.assertEqual(resp.status_code, 200)",
          "259:             self.assertFalse(ACL_ORIGIN in resp.headers)",
          "260:             self.assertFalse(ACL_EXPOSE_HEADERS in resp.headers)",
          "",
          "[Removed Lines]",
          "206:         CORS(self.app, resources=r'/api/*',",
          "207:              allow_headers='Content-Type',",
          "208:              expose_headers='X-Total-Count',",
          "209:              origins='http://bar.com')",
          "211:         @self.app.route('/api/v1/foo')",
          "215:         @self.app.route('/api/v1/bar')",
          "219:         @self.app.route('/api/v1/special')",
          "220:         @cross_origin(origins='http://foo.com')",
          "224:         @self.app.route('/')",
          "226:             return 'Welcome'",
          "228:         @self.app.route('/foo.txt')",
          "230:             return 'Welcome'",
          "233:         for path in '/api/v1/foo', '/api/v1/bar':",
          "234:             for resp in self.iter_responses(path, origin='http://bar.com'):",
          "236:                 self.assertEqual(resp.headers.get(ACL_ORIGIN), 'http://bar.com')",
          "237:                 self.assertEqual(resp.headers.get(ACL_EXPOSE_HEADERS),",
          "238:                                  'X-Total-Count')",
          "239:             for resp in self.iter_responses(path, origin='http://foo.com'):",
          "245:         for resp in self.iter_responses('/', origin='http://bar.com'):",
          "251:         for resp in self.iter_responses('/api/v1/special', origin='http://foo.com'):",
          "253:             self.assertEqual(resp.headers.get(ACL_ORIGIN), 'http://foo.com')",
          "257:         for resp in self.iter_responses('/api/v1/special', origin='http://bar.com'):",
          "",
          "[Added Lines]",
          "197:         CORS(",
          "198:             self.app,",
          "199:             resources=r\"/api/*\",",
          "200:             allow_headers=\"Content-Type\",",
          "201:             expose_headers=\"X-Total-Count\",",
          "202:             origins=\"http://bar.com\",",
          "203:         )",
          "205:         @self.app.route(\"/api/v1/foo\")",
          "209:         @self.app.route(\"/api/v1/bar\")",
          "213:         @self.app.route(\"/api/v1/special\")",
          "214:         @cross_origin(origins=\"http://foo.com\")",
          "218:         @self.app.route(\"/\")",
          "220:             return \"Welcome\"",
          "222:         @self.app.route(\"/foo.txt\")",
          "224:             return \"Welcome\"",
          "227:         for path in \"/api/v1/foo\", \"/api/v1/bar\":",
          "228:             for resp in self.iter_responses(path, origin=\"http://bar.com\"):",
          "230:                 self.assertEqual(resp.headers.get(ACL_ORIGIN), \"http://bar.com\")",
          "231:                 self.assertEqual(resp.headers.get(ACL_EXPOSE_HEADERS), \"X-Total-Count\")",
          "232:             for resp in self.iter_responses(path, origin=\"http://foo.com\"):",
          "238:         for resp in self.iter_responses(\"/\", origin=\"http://bar.com\"):",
          "244:         for resp in self.iter_responses(\"/api/v1/special\", origin=\"http://foo.com\"):",
          "246:             self.assertEqual(resp.headers.get(ACL_ORIGIN), \"http://foo.com\")",
          "250:         for resp in self.iter_responses(\"/api/v1/special\", origin=\"http://bar.com\"):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "273: class AppExtensionDefault(FlaskCorsTestCase):",
          "274:     def test_default(self):",
          "279:         self.app = Flask(__name__)",
          "280:         CORS(self.app)",
          "283:         def index():",
          "287:             self.assertEqual(resp.status_code, 200)",
          "288:             self.assertTrue(ACL_ORIGIN in resp.headers)",
          "",
          "[Removed Lines]",
          "275:         '''",
          "276:             By default match all.",
          "277:         '''",
          "282:         @self.app.route('/')",
          "284:             return 'Welcome'",
          "286:         for resp in self.iter_responses('/', origin='http://foo.com'):",
          "",
          "[Added Lines]",
          "268:         \"\"\"",
          "269:         By default match all.",
          "270:         \"\"\"",
          "275:         @self.app.route(\"/\")",
          "277:             return \"Welcome\"",
          "279:         for resp in self.iter_responses(\"/\", origin=\"http://foo.com\"):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "291: class AppExtensionExampleApp(FlaskCorsTestCase):",
          "292:     def setUp(self):",
          "293:         self.app = Flask(__name__)",
          "299:         def index():",
          "303:         def test_wildcard():",
          "307:         def test_exact_match():",
          "310:     def test_index(self):",
          "315:             self.assertFalse(ACL_ORIGIN in resp.headers)",
          "317:     def test_wildcard(self):",
          "324:                 self.assertTrue(ACL_ORIGIN in resp.headers)",
          "325:                 self.assertEqual(origin, resp.headers.get(ACL_ORIGIN))",
          "327:     def test_exact_match(self):",
          "334:                 self.assertTrue(ACL_ORIGIN in resp.headers)",
          "335:                 self.assertEqual(origin, resp.headers.get(ACL_ORIGIN))",
          "338: class AppExtensionCompiledRegexp(FlaskCorsTestCase):",
          "339:     def test_compiled_regex(self):",
          "344:         import re",
          "345:         self.app = Flask(__name__)",
          "349:         def index():",
          "353:         def example():",
          "357:             self.assertFalse(ACL_ORIGIN in resp.headers)",
          "360:             self.assertTrue(ACL_ORIGIN in resp.headers)",
          "363: class AppExtensionBadRegexp(FlaskCorsTestCase):",
          "364:     def test_value_error(self):",
          "370:         self.app = Flask(__name__)",
          "371:         CORS(self.app, resources=\"}\")",
          "374:         def index():",
          "378:             self.assertEqual(resp.status_code, 200)",
          "",
          "[Removed Lines]",
          "294:         CORS(self.app, resources={",
          "295:             r'/api/*': {'origins': ['http://blah.com', 'http://foo.bar']}",
          "296:         })",
          "298:         @self.app.route('/')",
          "300:             return ''",
          "302:         @self.app.route('/api/foo')",
          "304:             return ''",
          "306:         @self.app.route('/api/')",
          "308:             return ''",
          "311:         '''",
          "312:             If regex does not match, do not set CORS",
          "313:         '''",
          "314:         for resp in self.iter_responses('/', origin='http://foo.bar'):",
          "318:         '''",
          "319:             Match anything matching the path /api/* with an origin",
          "320:             of 'http://blah.com' or 'http://foo.bar'",
          "321:         '''",
          "322:         for origin in ['http://foo.bar', 'http://blah.com']:",
          "323:             for resp in self.iter_responses('/api/foo', origin=origin):",
          "328:         '''",
          "329:             Match anything matching the path /api/* with an origin",
          "330:             of 'http://blah.com' or 'http://foo.bar'",
          "331:         '''",
          "332:         for origin in ['http://foo.bar', 'http://blah.com']:",
          "333:             for resp in self.iter_responses('/api/', origin=origin):",
          "340:         '''",
          "341:             Ensure we do not error if the user specifies an bad regular",
          "342:             expression.",
          "343:         '''",
          "346:         CORS(self.app, resources=re.compile('/api/.*'))",
          "348:         @self.app.route('/')",
          "350:             return 'Welcome'",
          "352:         @self.app.route('/api/v1')",
          "354:             return 'Welcome'",
          "356:         for resp in self.iter_responses('/'):",
          "359:         for resp in self.iter_responses('/api/v1', origin='http://foo.com'):",
          "365:         '''",
          "366:             Ensure we do not error if the user specifies an bad regular",
          "367:             expression.",
          "368:         '''",
          "373:         @self.app.route('/')",
          "375:             return 'Welcome'",
          "377:         for resp in self.iter_responses('/'):",
          "",
          "[Added Lines]",
          "287:         CORS(self.app, resources={r\"/api/*\": {\"origins\": [\"http://blah.com\", \"http://foo.bar\"]}})",
          "289:         @self.app.route(\"/\")",
          "291:             return \"\"",
          "293:         @self.app.route(\"/api/foo\")",
          "295:             return \"\"",
          "297:         @self.app.route(\"/api/\")",
          "299:             return \"\"",
          "302:         \"\"\"",
          "303:         If regex does not match, do not set CORS",
          "304:         \"\"\"",
          "305:         for resp in self.iter_responses(\"/\", origin=\"http://foo.bar\"):",
          "309:         \"\"\"",
          "310:         Match anything matching the path /api/* with an origin",
          "311:         of 'http://blah.com' or 'http://foo.bar'",
          "312:         \"\"\"",
          "313:         for origin in [\"http://foo.bar\", \"http://blah.com\"]:",
          "314:             for resp in self.iter_responses(\"/api/foo\", origin=origin):",
          "319:         \"\"\"",
          "320:         Match anything matching the path /api/* with an origin",
          "321:         of 'http://blah.com' or 'http://foo.bar'",
          "322:         \"\"\"",
          "323:         for origin in [\"http://foo.bar\", \"http://blah.com\"]:",
          "324:             for resp in self.iter_responses(\"/api/\", origin=origin):",
          "331:         \"\"\"",
          "332:         Ensure we do not error if the user specifies an bad regular",
          "333:         expression.",
          "334:         \"\"\"",
          "338:         CORS(self.app, resources=re.compile(\"/api/.*\"))",
          "340:         @self.app.route(\"/\")",
          "342:             return \"Welcome\"",
          "344:         @self.app.route(\"/api/v1\")",
          "346:             return \"Welcome\"",
          "348:         for resp in self.iter_responses(\"/\"):",
          "351:         for resp in self.iter_responses(\"/api/v1\", origin=\"http://foo.com\"):",
          "357:         \"\"\"",
          "358:         Ensure we do not error if the user specifies an bad regular",
          "359:         expression.",
          "360:         \"\"\"",
          "365:         @self.app.route(\"/\")",
          "367:             return \"Welcome\"",
          "369:         for resp in self.iter_responses(\"/\"):",
          "",
          "---------------"
        ]
      }
    }
  ]
}