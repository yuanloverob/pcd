{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "542475f62c1a77997fe38dcc7f5d404891b198e3",
      "candidate_info": {
        "commit_hash": "542475f62c1a77997fe38dcc7f5d404891b198e3",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/542475f62c1a77997fe38dcc7f5d404891b198e3",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java"
        ],
        "message": "AMBARI-24513. Using current timestamp as created_time in case there is no value in users table in this column upon upgrading to 2.7 (#2131)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:         PreparedStatement pstmt = dbAccessor.getConnection().prepareStatement(\"SELECT \" + USERS_USER_ID_COLUMN + \", \" + USERS_CREATE_TIME_COLUMN + \" FROM \" + USERS_TABLE + \" WHERE \" + temporaryColumnName + \" IS NULL ORDER BY \" + USERS_USER_ID_COLUMN);",
          "623:         ResultSet rs = pstmt.executeQuery()) {",
          "624:       while (rs.next()) {",
          "626:       }",
          "627:     }",
          "628:     return currentUserCreateTimes;",
          "",
          "[Removed Lines]",
          "625:         currentUserCreateTimes.put(rs.getInt(1), rs.getTimestamp(2));",
          "",
          "[Added Lines]",
          "625:         currentUserCreateTimes.put(rs.getInt(1), rs.getTimestamp(2) == null ? new Timestamp(System.currentTimeMillis()) : rs.getTimestamp(2));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "658:     final ResultSet resultSetMock = niceMock(ResultSet.class);",
          "659:     expect(preparedStatementMock.executeQuery()).andReturn(resultSetMock);",
          "660:     expect(resultSetMock.next()).andReturn(Boolean.TRUE).once();",
          "663:     replay(connectionMock, preparedStatementMock, resultSetMock);",
          "665:     expect(dbAccessor.updateTable(eq(USERS_TABLE), eq(temporaryColumnName), eq(1l), anyString())).andReturn(anyInt());",
          "",
          "[Removed Lines]",
          "661:     expect(resultSetMock.getInt(1)).andReturn(1);",
          "662:     expect(resultSetMock.getTimestamp(2)).andReturn(new Timestamp(1l));",
          "",
          "[Added Lines]",
          "661:     expect(resultSetMock.getInt(1)).andReturn(1).anyTimes();",
          "662:     expect(resultSetMock.getTimestamp(2)).andReturn(new Timestamp(1l)).anyTimes();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f26d9840e3f62e56de7e0787d664c22ba251b8a9",
      "candidate_info": {
        "commit_hash": "f26d9840e3f62e56de7e0787d664c22ba251b8a9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f26d9840e3f62e56de7e0787d664c22ba251b8a9",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py"
        ],
        "message": "AMBARI-24477. ambair-agent floods data directory with files created for status commands (aonishuk)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py": [
          "File: ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py -> ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "535:       try:",
          "536:         os.unlink(status_commands_stdout)",
          "537:         os.unlink(status_commands_stderr)",
          "538:       except OSError:",
          "539:         pass # Ignore failure",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538:         os.unlink(status_structured_out)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a00a76dd33343d54f8e2f9e504f5cea80e48c0d1",
      "candidate_info": {
        "commit_hash": "a00a76dd33343d54f8e2f9e504f5cea80e48c0d1",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a00a76dd33343d54f8e2f9e504f5cea80e48c0d1",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "ambari-server/src/main/resources/index.html"
        ],
        "message": "AMBARI-25390. Disable indexing in /resources endpoint and sub-directories (aonishuk)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "ambari-server/src/main/resources/index.html||ambari-server/src/main/resources/index.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:       File resourcesDirectory = new File(configs.getResourceDirPath());",
          "512:       ServletHolder resources = new ServletHolder(DefaultServlet.class);",
          "513:       resources.setInitParameter(\"resourceBase\", resourcesDirectory.getParent());",
          "514:       root.addServlet(resources, \"/resources/*\");",
          "515:       resources.setInitOrder(5);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514:       resources.setInitParameter(\"dirAllowed\", \"false\");",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/index.html||ambari-server/src/main/resources/index.html": [
          "File: ambari-server/src/main/resources/index.html -> ambari-server/src/main/resources/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db7b17937328b6aa1f860efb4b01539a31913639",
      "candidate_info": {
        "commit_hash": "db7b17937328b6aa1f860efb4b01539a31913639",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/db7b17937328b6aa1f860efb4b01539a31913639",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultStatus.java",
          "ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/JsonSerializerTest.java"
        ],
        "message": "AMBARI-25280 - Improper error handling when managing Ambari users (#2978)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultStatus.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultStatus.java",
          "ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java||ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/JsonSerializerTest.java||ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/JsonSerializerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultStatus.java||ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultStatus.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultStatus.java -> ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultStatus.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   public ResultStatus(STATUS status, Exception e) {",
          "133:     m_status = status;",
          "135:   }",
          "",
          "[Removed Lines]",
          "134:     m_msg = e.toString();",
          "",
          "[Added Lines]",
          "134:     m_msg = e.getMessage();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java||ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java -> ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:     ReadHandler handler = new ReadHandler();",
          "175:     Result result = handler.handleRequest(request);",
          "176:     assertEquals(ResultStatus.STATUS.SERVER_ERROR, result.getStatus().getStatus());",
          "178:     verify(request, resource, query, predicate);",
          "179:   }",
          "",
          "[Removed Lines]",
          "177:     assertEquals(systemException.toString(), result.getStatus().getMessage());",
          "",
          "[Added Lines]",
          "177:     assertEquals(systemException.getMessage(), result.getStatus().getMessage());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/JsonSerializerTest.java||ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/JsonSerializerTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/JsonSerializerTest.java -> ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/JsonSerializerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:         \"      \\\"error\\\" : {\\n\" +",
          "236:         \"        \\\"key\\\" : \\\"key2\\\",\\n\" +",
          "237:         \"        \\\"code\\\" : 403,\\n\" +",
          "240:         \"      }\\n\" +",
          "241:         \"    }\\n\" +",
          "242:         \"  ]\\n\" +",
          "",
          "[Removed Lines]",
          "238:         \"        \\\"message\\\" : \\\"org.apache.ambari.server.security.authorization.AuthorizationException:\"+",
          "239:                               \" The authenticated user is not authorized to perform the requested operation\\\"\\n\" +",
          "",
          "[Added Lines]",
          "238:         \"        \\\"message\\\" : \\\"The authenticated user is not authorized to perform the requested operation\\\"\\n\" +",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9fb4764c1d265a535174903fe9fe9dcda9b32ddc",
      "candidate_info": {
        "commit_hash": "9fb4764c1d265a535174903fe9fe9dcda9b32ddc",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/9fb4764c1d265a535174903fe9fe9dcda9b32ddc",
        "files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ],
        "message": "AMBARI-24276 include derby jars for Hive convert table step (ashutosh)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/pre_upgrade.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import os",
          "22: import shutil",
          "23: import traceback",
          "26: # Ambari Commons & Resource Management Imports",
          "27: from resource_management.core.exceptions import Fail",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import glob",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:       Execute(hive_kinit_cmd, user = params.hive_user)",
          "102:     classpath = format(\"{source_dir}/hive2/lib/*:{source_dir}/hadoop/*:{source_dir}/hadoop/lib/*:{source_dir}/hadoop-mapreduce/*:{source_dir}/hadoop-mapreduce/lib/*:{source_dir}/hadoop-hdfs/*:{source_dir}/hadoop-hdfs/lib/*:{source_dir}/hadoop/etc/hadoop/:{target_dir}/hive/lib/hive-pre-upgrade.jar:{source_dir}/hive/conf/conf.server\")",
          "103:     cmd = format(\"{java64_home}/bin/java -Djavax.security.auth.useSubjectCredsOnly=false -cp {classpath} org.apache.hadoop.hive.upgrade.acid.PreUpgradeTool -execute\")",
          "104:     Execute(cmd, user = params.hive_user)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:     # hack to avoid derby cp issue we want derby-10.10.2.0.jar to appear first in cp, if its available, note other derby jars are derbyclient-10.11.1.1.jar  derbynet-10.11.1.1.jar",
          "104:     derby_jars = glob.glob(source_dir+\"/hive2/lib/*derby-*.jar\")",
          "105:     if len(derby_jars) == 1:",
          "106:       classpath = derby_jars[0] + \":\" + classpath",
          "",
          "---------------"
        ]
      }
    }
  ]
}