{
  "cve_id": "CVE-2023-34049",
  "cve_desc": "The Salt-SSH pre-flight option copies the script to the target at a predictable path, which allows an attacker to force Salt-SSH to run their script. If an attacker has access to the target VM and knows the path to the pre-flight script before it runs they can ensure Salt-SSH runs their script with the privileges of the user running Salt-SSH.\u00a0Do not make the copy path on the target predictable and ensure we check return codes of the scp command if the copy fails.",
  "repo": "saltstack/salt",
  "patch_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
  "patch_info": {
    "commit_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "files": [
      "changelog/cve-2023-34049.security.md",
      "salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py"
    ],
    "message": "Fix CVE-2023-34049",
    "before_after_code_files": [
      "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
    ]
  },
  "patch_diff": {
    "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
      "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import logging",
      "12: import multiprocessing",
      "13: import os",
      "14: import queue",
      "15: import re",
      "16: import shlex",
      "17: import subprocess",
      "18: import sys",
      "19: import tarfile",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: import pathlib",
      "18: import shutil",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "467:             if target.get(\"passwd\", False) or self.opts[\"ssh_passwd\"]:",
      "468:                 self._key_deploy_run(host, target, False)",
      "469:             return ret",
      "471:             target = self.targets[host]",
      "472:             # permission denied, attempt to auto deploy ssh key",
      "473:             print(",
      "",
      "[Removed Lines]",
      "470:         if ret[host].get(\"stderr\", \"\").count(\"Permission denied\"):",
      "",
      "[Added Lines]",
      "472:         stderr = ret[host].get(\"stderr\", \"\")",
      "473:         # -failed to upload file- is detecting scp errors",
      "474:         # Errors to ignore when Permission denied is in the stderr. For example",
      "475:         # scp can get a permission denied on the target host, but they where",
      "476:         # able to accurate authenticate against the box",
      "477:         ignore_err = [\"failed to upload file\"]",
      "478:         check_err = [x for x in ignore_err if stderr.count(x)]",
      "479:         if \"Permission denied\" in stderr and not check_err:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1007:         \"\"\"",
      "1008:         Run our pre_flight script before running any ssh commands",
      "1009:         \"\"\"",
      "1016:     def check_thin_dir(self):",
      "1017:         \"\"\"",
      "",
      "[Removed Lines]",
      "1010:         script = os.path.join(tempfile.gettempdir(), self.ssh_pre_file)",
      "1012:         self.shell.send(self.ssh_pre_flight, script)",
      "1014:         return self.execute_script(script, script_args=self.ssh_pre_flight_args)",
      "",
      "[Added Lines]",
      "1019:         with tempfile.NamedTemporaryFile() as temp:",
      "1020:             # ensure we use copyfile to not copy the file attributes",
      "1021:             # we want to ensure we use the perms set by the secure",
      "1022:             # NamedTemporaryFile",
      "1023:             try:",
      "1024:                 shutil.copyfile(self.ssh_pre_flight, temp.name)",
      "1025:             except OSError as err:",
      "1026:                 return (",
      "1027:                     \"\",",
      "1028:                     f\"Could not copy pre flight script {self.ssh_pre_flight} to temporary path\",",
      "1029:                     1,",
      "1030:                 )",
      "1031:             target_script = f\".{pathlib.Path(temp.name).name}\"",
      "1032:             log.trace(f\"Copying the pre flight script {self.ssh_pre_file} to target\")",
      "1033:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
      "1034:             if retcode != 0:",
      "1035:                 # We could not copy the script to the target",
      "1036:                 log.error(",
      "1037:                     f\"Could not copy the pre flight script {self.ssh_pre_file} to target\"",
      "1038:                 )",
      "1039:                 return stdout, stderr, retcode",
      "1041:             log.trace(f\"Executing the pre flight script {self.ssh_pre_file} on target\")",
      "1042:             return self.execute_script(",
      "1043:                 target_script, script_args=self.ssh_pre_flight_args",
      "1044:             )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1388:             return self.shell.exec_cmd(cmd_str)",
      "1390:         # Write the shim to a temporary file in the default temp directory",
      "1394:             shim_tmp_file.write(salt.utils.stringutils.to_bytes(cmd_str))",
      "1396:         # Copy shim to target system, under $HOME/.<randomized name>",
      "1400:         if self.winrm:",
      "1401:             target_shim_file = saltwinshell.get_target_shim_file(self, target_shim_file)",
      "1404:         # Remove our shim file",
      "1405:         try:",
      "",
      "[Removed Lines]",
      "1391:         with tempfile.NamedTemporaryFile(",
      "1392:             mode=\"w+b\", prefix=\"shim_\", delete=False",
      "1393:         ) as shim_tmp_file:",
      "1397:         target_shim_file = \".{}.{}\".format(",
      "1398:             binascii.hexlify(os.urandom(6)).decode(\"ascii\"), extension",
      "1399:         )",
      "1402:         self.shell.send(shim_tmp_file.name, target_shim_file, makedirs=True)",
      "",
      "[Added Lines]",
      "1421:         with tempfile.NamedTemporaryFile(mode=\"w+b\", delete=False) as shim_tmp_file:",
      "1425:         target_shim_file = f\".{pathlib.Path(shim_tmp_file.name).name}\"",
      "1429:         stdout, stderr, retcode = self.shell.send(",
      "1430:             shim_tmp_file.name, target_shim_file, makedirs=True",
      "1431:         )",
      "1432:         if retcode != 0:",
      "1433:             log.error(f\"Could not copy the shim script to target\")",
      "1434:             return stdout, stderr, retcode",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
      "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import re",
      "4: from textwrap import dedent",
      "6: import pytest",
      "",
      "[Removed Lines]",
      "1: import os",
      "3: import tempfile",
      "",
      "[Added Lines]",
      "1: import logging",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: from salt.client import ssh",
      "17: from tests.support.mock import MagicMock, call, patch",
      "20: @pytest.fixture",
      "21: def opts(tmp_path):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: log = logging.getLogger(__name__)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "242:         assert ret == cmd_ret",
      "245: def test_execute_script(opts, target, tmp_path):",
      "246:     \"\"\"",
      "247:     test Single.execute_script()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "247:     \"\"\"",
      "248:     test Single.run_ssh_pre_flight function",
      "249:     \"\"\"",
      "250:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "251:     single = ssh.Single(",
      "252:         opts,",
      "253:         opts[\"argv\"],",
      "254:         \"localhost\",",
      "255:         mods={},",
      "256:         fsclient=None,",
      "257:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "258:         mine=False,",
      "260:     )",
      "262:     cmd_ret = (\"Success\", \"\", 0)",
      "263:     mock_flight = MagicMock(return_value=cmd_ret)",
      "264:     mock_cmd = MagicMock(return_value=cmd_ret)",
      "265:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
      "266:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "267:     patch_exec_cmd = patch(",
      "268:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
      "269:     )",
      "270:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "272:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
      "273:         ret = single.run()",
      "274:         mock_cmd.assert_called()",
      "275:         mock_flight.assert_called()",
      "276:         assert ret == cmd_ret",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "273:         ] == mock_cmd.call_args_list",
      "277:     \"\"\"",
      "278:     test Single.shim_cmd()",
      "279:     \"\"\"",
      "",
      "[Removed Lines]",
      "276: def test_shim_cmd(opts, target):",
      "",
      "[Added Lines]",
      "310: def test_shim_cmd(opts, target, tmp_path):",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "295:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "296:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0))",
      "297:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "300:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "301:         assert ret == exp_ret",
      "302:         assert [",
      "305:         ] == mock_cmd.call_args_list",
      "309:     \"\"\"",
      "311:     \"\"\"",
      "313:     single = ssh.Single(",
      "314:         opts,",
      "315:         opts[\"argv\"],",
      "",
      "[Removed Lines]",
      "299:     with patch_cmd, patch_rand, patch_send:",
      "303:             call(\"/bin/sh '.35d96ccac2ff.py'\"),",
      "304:             call(\"rm '.35d96ccac2ff.py'\"),",
      "308: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "310:     test Single.run_ssh_pre_flight",
      "312:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "332:     tmp_file = tmp_path / \"tmp_file\"",
      "333:     mock_tmp = MagicMock()",
      "334:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "335:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "337:     with patch_cmd, patch_tmp, patch_send:",
      "341:             call(f\"/bin/sh '.{tmp_file.name}'\"),",
      "342:             call(f\"rm '.{tmp_file.name}'\"),",
      "346: def test_shim_cmd_copy_fails(opts, target, caplog):",
      "348:     test Single.shim_cmd() when copying the file fails",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "320:         mine=False,",
      "321:         winrm=False,",
      "322:         tty=True,",
      "324:     )",
      "328:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "332:     )",
      "335:         ret = single.run_ssh_pre_flight()",
      "343: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
      "",
      "[Removed Lines]",
      "326:     exp_ret = (\"Success\", \"\", 0)",
      "327:     mock_cmd = MagicMock(return_value=exp_ret)",
      "329:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=exp_ret)",
      "330:     exp_tmp = os.path.join(",
      "331:         tempfile.gettempdir(), os.path.basename(target[\"ssh_pre_flight\"])",
      "334:     with patch_cmd, patch_send:",
      "336:         assert ret == exp_ret",
      "337:         assert [",
      "338:             call(\"/bin/sh '{}'\".format(exp_tmp)),",
      "339:             call(\"rm '{}'\".format(exp_tmp)),",
      "340:         ] == mock_cmd.call_args_list",
      "",
      "[Added Lines]",
      "363:     ret_cmd = (\"Success\", \"\", 0)",
      "364:     mock_cmd = MagicMock(return_value=ret_cmd)",
      "366:     ret_send = (\"\", \"General error in file copy\", 1)",
      "367:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=ret_send)",
      "368:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "370:     with patch_cmd, patch_rand, patch_send:",
      "371:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "372:         assert ret == ret_send",
      "373:         assert \"Could not copy the shim script to target\" in caplog.text",
      "374:         mock_cmd.assert_not_called()",
      "377: def test_run_ssh_pre_flight_no_connect(opts, target, tmp_path, caplog):",
      "378:     \"\"\"",
      "379:     test Single.run_ssh_pre_flight when you",
      "380:     cannot connect to the target",
      "381:     \"\"\"",
      "382:     pre_flight = tmp_path / \"script.sh\"",
      "383:     pre_flight.write_text(\"\")",
      "384:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "385:     single = ssh.Single(",
      "386:         opts,",
      "387:         opts[\"argv\"],",
      "388:         \"localhost\",",
      "389:         mods={},",
      "390:         fsclient=None,",
      "391:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "392:         mine=False,",
      "393:         winrm=False,",
      "394:         tty=True,",
      "396:     )",
      "397:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "398:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "399:     tmp_file = tmp_path / \"tmp_file\"",
      "400:     mock_tmp = MagicMock()",
      "401:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "402:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "403:     ret_send = (",
      "404:         \"\",",
      "405:         \"ssh: connect to host 192.168.1.186 port 22: No route to host\\nscp: Connection closed\\n\",",
      "406:         255,",
      "407:     )",
      "408:     send_mock = MagicMock(return_value=ret_send)",
      "409:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "411:     with caplog.at_level(logging.TRACE):",
      "412:         with patch_send, patch_exec_cmd, patch_tmp:",
      "413:             ret = single.run_ssh_pre_flight()",
      "414:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
      "415:     assert (",
      "416:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
      "417:         in caplog.text",
      "418:     )",
      "419:     assert ret == ret_send",
      "420:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "421:     target_script = send_mock.call_args_list[0][0][1]",
      "422:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "423:     mock_exec_cmd.assert_not_called()",
      "426: def test_run_ssh_pre_flight_permission_denied(opts, target, tmp_path):",
      "427:     \"\"\"",
      "428:     test Single.run_ssh_pre_flight when you",
      "429:     cannot copy script to the target due to",
      "430:     a permission denied error",
      "431:     \"\"\"",
      "432:     pre_flight = tmp_path / \"script.sh\"",
      "433:     pre_flight.write_text(\"\")",
      "434:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "435:     single = ssh.Single(",
      "436:         opts,",
      "437:         opts[\"argv\"],",
      "438:         \"localhost\",",
      "439:         mods={},",
      "440:         fsclient=None,",
      "441:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "442:         mine=False,",
      "443:         winrm=False,",
      "444:         tty=True,",
      "446:     )",
      "447:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "448:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "449:     tmp_file = tmp_path / \"tmp_file\"",
      "450:     mock_tmp = MagicMock()",
      "451:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "452:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "453:     ret_send = (",
      "454:         \"\",",
      "455:         'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "456:         255,",
      "458:     send_mock = MagicMock(return_value=ret_send)",
      "459:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "461:     with patch_send, patch_exec_cmd, patch_tmp:",
      "463:     assert ret == ret_send",
      "464:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "465:     target_script = send_mock.call_args_list[0][0][1]",
      "466:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "467:     mock_exec_cmd.assert_not_called()",
      "470: def test_run_ssh_pre_flight_connect(opts, target, tmp_path, caplog):",
      "471:     \"\"\"",
      "472:     test Single.run_ssh_pre_flight when you",
      "473:     can connect to the target",
      "474:     \"\"\"",
      "475:     pre_flight = tmp_path / \"script.sh\"",
      "476:     pre_flight.write_text(\"\")",
      "477:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "478:     single = ssh.Single(",
      "479:         opts,",
      "480:         opts[\"argv\"],",
      "481:         \"localhost\",",
      "482:         mods={},",
      "483:         fsclient=None,",
      "484:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "485:         mine=False,",
      "486:         winrm=False,",
      "487:         tty=True,",
      "489:     )",
      "490:     ret_exec_cmd = (\"\", \"\", 1)",
      "491:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "492:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "493:     tmp_file = tmp_path / \"tmp_file\"",
      "494:     mock_tmp = MagicMock()",
      "495:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "496:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "497:     ret_send = (",
      "498:         \"\",",
      "499:         \"\\rroot@192.168.1.187's password: \\n\\rpreflight.sh 0%    0 0.0KB/s   --:-- ETA\\rpreflight.sh 100%   20     2.7KB/s   00:00 \\n\",",
      "500:         0,",
      "501:     )",
      "502:     send_mock = MagicMock(return_value=ret_send)",
      "503:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "505:     with caplog.at_level(logging.TRACE):",
      "506:         with patch_send, patch_exec_cmd, patch_tmp:",
      "507:             ret = single.run_ssh_pre_flight()",
      "509:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
      "510:     assert ret == ret_exec_cmd",
      "511:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "512:     target_script = send_mock.call_args_list[0][0][1]",
      "513:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "514:     mock_exec_cmd.assert_called()",
      "517: def test_run_ssh_pre_flight_shutil_fails(opts, target, tmp_path):",
      "518:     \"\"\"",
      "519:     test Single.run_ssh_pre_flight when cannot",
      "520:     copyfile with shutil",
      "521:     \"\"\"",
      "522:     pre_flight = tmp_path / \"script.sh\"",
      "523:     pre_flight.write_text(\"\")",
      "524:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "525:     single = ssh.Single(",
      "526:         opts,",
      "527:         opts[\"argv\"],",
      "528:         \"localhost\",",
      "529:         mods={},",
      "530:         fsclient=None,",
      "531:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "532:         mine=False,",
      "533:         winrm=False,",
      "534:         tty=True,",
      "536:     )",
      "537:     ret_exec_cmd = (\"\", \"\", 1)",
      "538:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "539:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "540:     tmp_file = tmp_path / \"tmp_file\"",
      "541:     mock_tmp = MagicMock()",
      "542:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "543:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "544:     send_mock = MagicMock()",
      "545:     mock_shutil = MagicMock(side_effect=IOError(\"Permission Denied\"))",
      "546:     patch_shutil = patch(\"shutil.copyfile\", mock_shutil)",
      "547:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "549:     with patch_send, patch_exec_cmd, patch_tmp, patch_shutil:",
      "550:         ret = single.run_ssh_pre_flight()",
      "552:     assert ret == (",
      "553:         \"\",",
      "554:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
      "555:         1,",
      "556:     )",
      "557:     mock_exec_cmd.assert_not_called()",
      "558:     send_mock.assert_not_called()",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "434:     and script successfully runs",
      "435:     \"\"\"",
      "436:     opts[\"ssh_run_pre_flight\"] = True",
      "439:     if test_opts[0] is not None:",
      "440:         target[\"ssh_pre_flight_args\"] = test_opts[0]",
      "",
      "[Removed Lines]",
      "437:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "655:     pre_flight_script = tmp_path / \"script.sh\"",
      "656:     pre_flight_script.write_text(\"\")",
      "657:     target[\"ssh_pre_flight\"] = str(pre_flight_script)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "456:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 0))",
      "457:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "458:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "460:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "462:     with patch_os, patch_cmd, patch_exec_cmd, patch_shell_send:",
      "469: @pytest.mark.slow_test",
      "",
      "[Removed Lines]",
      "459:     patch_shell_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=None)",
      "463:         ret = single.run()",
      "464:         assert mock_exec_cmd.mock_calls[0].args[",
      "465:             0",
      "466:         ] == \"/bin/sh '/tmp/script.sh'{}\".format(expected_args)",
      "",
      "[Added Lines]",
      "679:     patch_shell_send = patch(",
      "680:         \"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0)",
      "681:     )",
      "685:         single.run()",
      "686:         script_args = mock_exec_cmd.mock_calls[0].args[0]",
      "687:         assert re.search(r\"\\/bin\\/sh '.[a-z0-9]+\", script_args)",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
      "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:     with patch(\"salt.roster.get_roster_file\", MagicMock(return_value=roster)):",
      "340:         ssh_obj = client._prep_ssh(**ssh_opts)",
      "341:         assert ssh_obj.opts.get(\"extra_filerefs\", None) == \"salt://foobar\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "344: def test_key_deploy_permission_denied_scp(tmp_path, opts):",
      "345:     \"\"\"",
      "346:     test \"key_deploy\" function when",
      "347:     permission denied authentication error",
      "348:     when attempting to use scp to copy file",
      "349:     to target",
      "350:     \"\"\"",
      "351:     host = \"localhost\"",
      "352:     passwd = \"password\"",
      "353:     usr = \"ssh-usr\"",
      "354:     opts[\"ssh_user\"] = usr",
      "355:     opts[\"tgt\"] = host",
      "357:     ssh_ret = {",
      "358:         host: {",
      "359:             \"stdout\": \"\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\",",
      "360:             \"stderr\": \"Permission denied, please try again.\\nPermission denied, please try again.\\nroot@192.168.1.187: Permission denied (publickey,gssapi-keyex,gssapi-with-micimport pudb; pu.dbassword).\\nscp: Connection closed\\n\",",
      "361:             \"retcode\": 255,",
      "362:         }",
      "363:     }",
      "364:     key_run_ret = {",
      "365:         \"localhost\": {",
      "366:             \"jid\": \"20230922155652279959\",",
      "367:             \"return\": \"test\",",
      "368:             \"retcode\": 0,",
      "369:             \"id\": \"test\",",
      "370:             \"fun\": \"cmd.run\",",
      "371:             \"fun_args\": [\"echo test\"],",
      "372:         }",
      "373:     }",
      "374:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "375:     with patch_roster_file:",
      "376:         client = ssh.SSH(opts)",
      "377:     patch_input = patch(\"builtins.input\", side_effect=[\"y\"])",
      "378:     patch_getpass = patch(\"getpass.getpass\", return_value=[\"password\"])",
      "379:     mock_key_run = MagicMock(return_value=key_run_ret)",
      "380:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "381:     with patch_input, patch_getpass, patch_key_run:",
      "382:         ret = client.key_deploy(host, ssh_ret)",
      "383:     assert mock_key_run.call_args_list[0][0] == (",
      "384:         host,",
      "385:         {\"passwd\": [passwd], \"host\": host, \"user\": usr},",
      "386:         True,",
      "387:     )",
      "388:     assert ret == key_run_ret",
      "389:     assert mock_key_run.call_count == 1",
      "392: def test_key_deploy_permission_denied_file_scp(tmp_path, opts):",
      "393:     \"\"\"",
      "394:     test \"key_deploy\" function when permission denied",
      "395:     due to not having access to copy the file to the target",
      "396:     We do not want to deploy the key, because this is not",
      "397:     an authentication to the target error.",
      "398:     \"\"\"",
      "399:     host = \"localhost\"",
      "400:     passwd = \"password\"",
      "401:     usr = \"ssh-usr\"",
      "402:     opts[\"ssh_user\"] = usr",
      "403:     opts[\"tgt\"] = host",
      "405:     mock_key_run = MagicMock(return_value=False)",
      "406:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "408:     ssh_ret = {",
      "409:         \"localhost\": {",
      "410:             \"stdout\": \"\",",
      "411:             \"stderr\": 'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "412:             \"retcode\": 1,",
      "413:         }",
      "414:     }",
      "415:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "416:     with patch_roster_file:",
      "417:         client = ssh.SSH(opts)",
      "418:     ret = client.key_deploy(host, ssh_ret)",
      "419:     assert ret == ssh_ret",
      "420:     assert mock_key_run.call_count == 0",
      "423: def test_key_deploy_no_permission_denied(tmp_path, opts):",
      "424:     \"\"\"",
      "425:     test \"key_deploy\" function when no permission denied",
      "426:     is returned",
      "427:     \"\"\"",
      "428:     host = \"localhost\"",
      "429:     passwd = \"password\"",
      "430:     usr = \"ssh-usr\"",
      "431:     opts[\"ssh_user\"] = usr",
      "432:     opts[\"tgt\"] = host",
      "434:     mock_key_run = MagicMock(return_value=False)",
      "435:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "436:     ssh_ret = {",
      "437:         \"localhost\": {",
      "438:             \"jid\": \"20230922161937998385\",",
      "439:             \"return\": \"test\",",
      "440:             \"retcode\": 0,",
      "441:             \"id\": \"test\",",
      "442:             \"fun\": \"cmd.run\",",
      "443:             \"fun_args\": [\"echo test\"],",
      "444:         }",
      "445:     }",
      "446:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "447:     with patch_roster_file:",
      "448:         client = ssh.SSH(opts)",
      "449:     ret = client.key_deploy(host, ssh_ret)",
      "450:     assert ret == ssh_ret",
      "451:     assert mock_key_run.call_count == 0",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a81e0152ac0ba80614b5fa76ad6d14a8f20a8fae",
      "candidate_info": {
        "commit_hash": "a81e0152ac0ba80614b5fa76ad6d14a8f20a8fae",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/a81e0152ac0ba80614b5fa76ad6d14a8f20a8fae",
        "files": [
          "tests/pytests/unit/client/ssh/test_single.py"
        ],
        "message": "fixed failing tests",
        "before_after_code_files": [
          "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
          ],
          "candidate": [
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
          "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import salt.utils.platform",
          "13: import salt.utils.thin",
          "14: import salt.utils.yaml",
          "15: from salt.client import ssh",
          "16: from tests.support.mock import MagicMock, call, patch",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import salt.client.ssh.shell as shell",
          "16: import importlib",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     ]",
          "28:     return master_opts",
          "31: @pytest.fixture",
          "32: def target():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: @pytest.fixture()",
          "33: def mock_bin_paths():",
          "34:     with patch(\"salt.utils.path.which\") as mock_which:",
          "35:         mock_which.side_effect = lambda x: {",
          "36:             \"ssh-keygen\": \"ssh-keygen\",",
          "37:             \"ssh\": \"ssh\",",
          "38:             \"scp\": \"scp\",",
          "39:         }.get(x, None)",
          "40:         importlib.reload(shell)",
          "41:         yield",
          "42:     importlib.reload(shell)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     }",
          "49:     \"\"\"Sanity check for ssh.Single options\"\"\"",
          "51:     single = ssh.Single(",
          "",
          "[Removed Lines]",
          "48: def test_single_opts(opts, target):",
          "",
          "[Added Lines]",
          "61: def test_single_opts(opts, target, mock_bin_paths):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "370:         mock_cmd.assert_not_called()",
          "374:     \"\"\"",
          "375:     test Single.run_ssh_pre_flight when you",
          "376:     cannot connect to the target",
          "",
          "[Removed Lines]",
          "373: def test_run_ssh_pre_flight_no_connect(opts, target, tmp_path, caplog):",
          "",
          "[Added Lines]",
          "386: def test_run_ssh_pre_flight_no_connect(opts, target, tmp_path, caplog, mock_bin_paths):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "464:     mock_exec_cmd.assert_not_called()",
          "468:     \"\"\"",
          "469:     test Single.run_ssh_pre_flight when you",
          "470:     can connect to the target",
          "",
          "[Removed Lines]",
          "467: def test_run_ssh_pre_flight_connect(opts, target, tmp_path, caplog):",
          "",
          "[Added Lines]",
          "480: def test_run_ssh_pre_flight_connect(opts, target, tmp_path, caplog, mock_bin_paths):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df6e1ee1b3b135e4b17617964c15fd6fc7139998",
      "candidate_info": {
        "commit_hash": "df6e1ee1b3b135e4b17617964c15fd6fc7139998",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/df6e1ee1b3b135e4b17617964c15fd6fc7139998",
        "files": [
          "tests/pytests/unit/client/ssh/test_single.py",
          "tests/pytests/unit/client/ssh/test_ssh.py"
        ],
        "message": "Fix CVE-2023-34049",
        "before_after_code_files": [
          "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
          "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
            "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
          ],
          "candidate": [
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
            "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
          "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import re",
          "4: from textwrap import dedent",
          "6: import pytest",
          "",
          "[Removed Lines]",
          "1: import os",
          "3: import tempfile",
          "",
          "[Added Lines]",
          "1: import logging",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: from salt.client import ssh",
          "17: from tests.support.mock import MagicMock, call, patch",
          "20: @pytest.fixture",
          "21: def opts(tmp_path):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: log = logging.getLogger(__name__)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:         assert ret == cmd_ret",
          "245: def test_execute_script(opts, target, tmp_path):",
          "246:     \"\"\"",
          "247:     test Single.execute_script()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: def test_run_ssh_pre_flight(opts, target, tmp_path):",
          "247:     \"\"\"",
          "248:     test Single.run_ssh_pre_flight function",
          "249:     \"\"\"",
          "250:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "251:     single = ssh.Single(",
          "252:         opts,",
          "253:         opts[\"argv\"],",
          "254:         \"localhost\",",
          "255:         mods={},",
          "256:         fsclient=None,",
          "257:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "258:         mine=False,",
          "260:     )",
          "262:     cmd_ret = (\"Success\", \"\", 0)",
          "263:     mock_flight = MagicMock(return_value=cmd_ret)",
          "264:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "265:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "266:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "267:     patch_exec_cmd = patch(",
          "268:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
          "269:     )",
          "270:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "272:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
          "273:         ret = single.run()",
          "274:         mock_cmd.assert_called()",
          "275:         mock_flight.assert_called()",
          "276:         assert ret == cmd_ret",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "273:         ] == mock_cmd.call_args_list",
          "277:     \"\"\"",
          "278:     test Single.shim_cmd()",
          "279:     \"\"\"",
          "",
          "[Removed Lines]",
          "276: def test_shim_cmd(opts, target):",
          "",
          "[Added Lines]",
          "310: def test_shim_cmd(opts, target, tmp_path):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "295:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "296:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0))",
          "297:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
          "300:         ret = single.shim_cmd(cmd_str=\"echo test\")",
          "301:         assert ret == exp_ret",
          "302:         assert [",
          "305:         ] == mock_cmd.call_args_list",
          "309:     \"\"\"",
          "311:     \"\"\"",
          "313:     single = ssh.Single(",
          "314:         opts,",
          "315:         opts[\"argv\"],",
          "",
          "[Removed Lines]",
          "299:     with patch_cmd, patch_rand, patch_send:",
          "303:             call(\"/bin/sh '.35d96ccac2ff.py'\"),",
          "304:             call(\"rm '.35d96ccac2ff.py'\"),",
          "308: def test_run_ssh_pre_flight(opts, target, tmp_path):",
          "310:     test Single.run_ssh_pre_flight",
          "312:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "",
          "[Added Lines]",
          "332:     tmp_file = tmp_path / \"tmp_file\"",
          "333:     mock_tmp = MagicMock()",
          "334:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "335:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "337:     with patch_cmd, patch_tmp, patch_send:",
          "341:             call(f\"/bin/sh '.{tmp_file.name}'\"),",
          "342:             call(f\"rm '.{tmp_file.name}'\"),",
          "346: def test_shim_cmd_copy_fails(opts, target, caplog):",
          "348:     test Single.shim_cmd() when copying the file fails",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "320:         mine=False,",
          "321:         winrm=False,",
          "322:         tty=True,",
          "324:     )",
          "328:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "332:     )",
          "335:         ret = single.run_ssh_pre_flight()",
          "343: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
          "",
          "[Removed Lines]",
          "326:     exp_ret = (\"Success\", \"\", 0)",
          "327:     mock_cmd = MagicMock(return_value=exp_ret)",
          "329:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=exp_ret)",
          "330:     exp_tmp = os.path.join(",
          "331:         tempfile.gettempdir(), os.path.basename(target[\"ssh_pre_flight\"])",
          "334:     with patch_cmd, patch_send:",
          "336:         assert ret == exp_ret",
          "337:         assert [",
          "338:             call(\"/bin/sh '{}'\".format(exp_tmp)),",
          "339:             call(\"rm '{}'\".format(exp_tmp)),",
          "340:         ] == mock_cmd.call_args_list",
          "",
          "[Added Lines]",
          "363:     ret_cmd = (\"Success\", \"\", 0)",
          "364:     mock_cmd = MagicMock(return_value=ret_cmd)",
          "366:     ret_send = (\"\", \"General error in file copy\", 1)",
          "367:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=ret_send)",
          "368:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
          "370:     with patch_cmd, patch_rand, patch_send:",
          "371:         ret = single.shim_cmd(cmd_str=\"echo test\")",
          "372:         assert ret == ret_send",
          "373:         assert \"Could not copy the shim script to target\" in caplog.text",
          "374:         mock_cmd.assert_not_called()",
          "377: def test_run_ssh_pre_flight_no_connect(opts, target, tmp_path, caplog):",
          "378:     \"\"\"",
          "379:     test Single.run_ssh_pre_flight when you",
          "380:     cannot connect to the target",
          "381:     \"\"\"",
          "382:     pre_flight = tmp_path / \"script.sh\"",
          "383:     pre_flight.write_text(\"\")",
          "384:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "385:     single = ssh.Single(",
          "386:         opts,",
          "387:         opts[\"argv\"],",
          "388:         \"localhost\",",
          "389:         mods={},",
          "390:         fsclient=None,",
          "391:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "392:         mine=False,",
          "393:         winrm=False,",
          "394:         tty=True,",
          "396:     )",
          "397:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
          "398:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "399:     tmp_file = tmp_path / \"tmp_file\"",
          "400:     mock_tmp = MagicMock()",
          "401:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "402:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "403:     ret_send = (",
          "404:         \"\",",
          "405:         \"ssh: connect to host 192.168.1.186 port 22: No route to host\\nscp: Connection closed\\n\",",
          "406:         255,",
          "407:     )",
          "408:     send_mock = MagicMock(return_value=ret_send)",
          "409:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "411:     with caplog.at_level(logging.TRACE):",
          "412:         with patch_send, patch_exec_cmd, patch_tmp:",
          "413:             ret = single.run_ssh_pre_flight()",
          "414:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
          "415:     assert (",
          "416:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
          "417:         in caplog.text",
          "418:     )",
          "419:     assert ret == ret_send",
          "420:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "421:     target_script = send_mock.call_args_list[0][0][1]",
          "422:     assert re.search(r\".[a-z0-9]+\", target_script)",
          "423:     mock_exec_cmd.assert_not_called()",
          "426: def test_run_ssh_pre_flight_permission_denied(opts, target, tmp_path):",
          "427:     \"\"\"",
          "428:     test Single.run_ssh_pre_flight when you",
          "429:     cannot copy script to the target due to",
          "430:     a permission denied error",
          "431:     \"\"\"",
          "432:     pre_flight = tmp_path / \"script.sh\"",
          "433:     pre_flight.write_text(\"\")",
          "434:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "435:     single = ssh.Single(",
          "436:         opts,",
          "437:         opts[\"argv\"],",
          "438:         \"localhost\",",
          "439:         mods={},",
          "440:         fsclient=None,",
          "441:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "442:         mine=False,",
          "443:         winrm=False,",
          "444:         tty=True,",
          "446:     )",
          "447:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
          "448:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "449:     tmp_file = tmp_path / \"tmp_file\"",
          "450:     mock_tmp = MagicMock()",
          "451:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "452:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "453:     ret_send = (",
          "454:         \"\",",
          "455:         'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
          "456:         255,",
          "458:     send_mock = MagicMock(return_value=ret_send)",
          "459:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "461:     with patch_send, patch_exec_cmd, patch_tmp:",
          "463:     assert ret == ret_send",
          "464:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "465:     target_script = send_mock.call_args_list[0][0][1]",
          "466:     assert re.search(r\".[a-z0-9]+\", target_script)",
          "467:     mock_exec_cmd.assert_not_called()",
          "470: def test_run_ssh_pre_flight_connect(opts, target, tmp_path, caplog):",
          "471:     \"\"\"",
          "472:     test Single.run_ssh_pre_flight when you",
          "473:     can connect to the target",
          "474:     \"\"\"",
          "475:     pre_flight = tmp_path / \"script.sh\"",
          "476:     pre_flight.write_text(\"\")",
          "477:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "478:     single = ssh.Single(",
          "479:         opts,",
          "480:         opts[\"argv\"],",
          "481:         \"localhost\",",
          "482:         mods={},",
          "483:         fsclient=None,",
          "484:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "485:         mine=False,",
          "486:         winrm=False,",
          "487:         tty=True,",
          "489:     )",
          "490:     ret_exec_cmd = (\"\", \"\", 1)",
          "491:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
          "492:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "493:     tmp_file = tmp_path / \"tmp_file\"",
          "494:     mock_tmp = MagicMock()",
          "495:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "496:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "497:     ret_send = (",
          "498:         \"\",",
          "499:         \"\\rroot@192.168.1.187's password: \\n\\rpreflight.sh 0%    0 0.0KB/s   --:-- ETA\\rpreflight.sh 100%   20     2.7KB/s   00:00 \\n\",",
          "500:         0,",
          "501:     )",
          "502:     send_mock = MagicMock(return_value=ret_send)",
          "503:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "505:     with caplog.at_level(logging.TRACE):",
          "506:         with patch_send, patch_exec_cmd, patch_tmp:",
          "507:             ret = single.run_ssh_pre_flight()",
          "509:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
          "510:     assert ret == ret_exec_cmd",
          "511:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "512:     target_script = send_mock.call_args_list[0][0][1]",
          "513:     assert re.search(r\".[a-z0-9]+\", target_script)",
          "514:     mock_exec_cmd.assert_called()",
          "517: def test_run_ssh_pre_flight_shutil_fails(opts, target, tmp_path):",
          "518:     \"\"\"",
          "519:     test Single.run_ssh_pre_flight when cannot",
          "520:     copyfile with shutil",
          "521:     \"\"\"",
          "522:     pre_flight = tmp_path / \"script.sh\"",
          "523:     pre_flight.write_text(\"\")",
          "524:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "525:     single = ssh.Single(",
          "526:         opts,",
          "527:         opts[\"argv\"],",
          "528:         \"localhost\",",
          "529:         mods={},",
          "530:         fsclient=None,",
          "531:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "532:         mine=False,",
          "533:         winrm=False,",
          "534:         tty=True,",
          "536:     )",
          "537:     ret_exec_cmd = (\"\", \"\", 1)",
          "538:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
          "539:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "540:     tmp_file = tmp_path / \"tmp_file\"",
          "541:     mock_tmp = MagicMock()",
          "542:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "543:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "544:     send_mock = MagicMock()",
          "545:     mock_shutil = MagicMock(side_effect=IOError(\"Permission Denied\"))",
          "546:     patch_shutil = patch(\"shutil.copyfile\", mock_shutil)",
          "547:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "549:     with patch_send, patch_exec_cmd, patch_tmp, patch_shutil:",
          "550:         ret = single.run_ssh_pre_flight()",
          "552:     assert ret == (",
          "553:         \"\",",
          "554:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
          "555:         1,",
          "556:     )",
          "557:     mock_exec_cmd.assert_not_called()",
          "558:     send_mock.assert_not_called()",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "434:     and script successfully runs",
          "435:     \"\"\"",
          "436:     opts[\"ssh_run_pre_flight\"] = True",
          "439:     if test_opts[0] is not None:",
          "440:         target[\"ssh_pre_flight_args\"] = test_opts[0]",
          "",
          "[Removed Lines]",
          "437:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "",
          "[Added Lines]",
          "655:     pre_flight_script = tmp_path / \"script.sh\"",
          "656:     pre_flight_script.write_text(\"\")",
          "657:     target[\"ssh_pre_flight\"] = str(pre_flight_script)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "456:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 0))",
          "457:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "458:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "460:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "462:     with patch_os, patch_cmd, patch_exec_cmd, patch_shell_send:",
          "469: @pytest.mark.slow_test",
          "",
          "[Removed Lines]",
          "459:     patch_shell_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=None)",
          "463:         ret = single.run()",
          "464:         assert mock_exec_cmd.mock_calls[0].args[",
          "465:             0",
          "466:         ] == \"/bin/sh '/tmp/script.sh'{}\".format(expected_args)",
          "",
          "[Added Lines]",
          "679:     patch_shell_send = patch(",
          "680:         \"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0)",
          "681:     )",
          "685:         single.run()",
          "686:         script_args = mock_exec_cmd.mock_calls[0].args[0]",
          "687:         assert re.search(r\"\\/bin\\/sh '.[a-z0-9]+\", script_args)",
          "",
          "---------------"
        ],
        "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
          "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:     with patch(\"salt.roster.get_roster_file\", MagicMock(return_value=roster)):",
          "340:         ssh_obj = client._prep_ssh(**ssh_opts)",
          "341:         assert ssh_obj.opts.get(\"extra_filerefs\", None) == \"salt://foobar\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344: def test_key_deploy_permission_denied_scp(tmp_path, opts):",
          "345:     \"\"\"",
          "346:     test \"key_deploy\" function when",
          "347:     permission denied authentication error",
          "348:     when attempting to use scp to copy file",
          "349:     to target",
          "350:     \"\"\"",
          "351:     host = \"localhost\"",
          "352:     passwd = \"password\"",
          "353:     usr = \"ssh-usr\"",
          "354:     opts[\"ssh_user\"] = usr",
          "355:     opts[\"tgt\"] = host",
          "357:     ssh_ret = {",
          "358:         host: {",
          "359:             \"stdout\": \"\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\",",
          "360:             \"stderr\": \"Permission denied, please try again.\\nPermission denied, please try again.\\nroot@192.168.1.187: Permission denied (publickey,gssapi-keyex,gssapi-with-micimport pudb; pu.dbassword).\\nscp: Connection closed\\n\",",
          "361:             \"retcode\": 255,",
          "362:         }",
          "363:     }",
          "364:     key_run_ret = {",
          "365:         \"localhost\": {",
          "366:             \"jid\": \"20230922155652279959\",",
          "367:             \"return\": \"test\",",
          "368:             \"retcode\": 0,",
          "369:             \"id\": \"test\",",
          "370:             \"fun\": \"cmd.run\",",
          "371:             \"fun_args\": [\"echo test\"],",
          "372:         }",
          "373:     }",
          "374:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "375:     with patch_roster_file:",
          "376:         client = ssh.SSH(opts)",
          "377:     patch_input = patch(\"builtins.input\", side_effect=[\"y\"])",
          "378:     patch_getpass = patch(\"getpass.getpass\", return_value=[\"password\"])",
          "379:     mock_key_run = MagicMock(return_value=key_run_ret)",
          "380:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
          "381:     with patch_input, patch_getpass, patch_key_run:",
          "382:         ret = client.key_deploy(host, ssh_ret)",
          "383:     assert mock_key_run.call_args_list[0][0] == (",
          "384:         host,",
          "385:         {\"passwd\": [passwd], \"host\": host, \"user\": usr},",
          "386:         True,",
          "387:     )",
          "388:     assert ret == key_run_ret",
          "389:     assert mock_key_run.call_count == 1",
          "392: def test_key_deploy_permission_denied_file_scp(tmp_path, opts):",
          "393:     \"\"\"",
          "394:     test \"key_deploy\" function when permission denied",
          "395:     due to not having access to copy the file to the target",
          "396:     We do not want to deploy the key, because this is not",
          "397:     an authentication to the target error.",
          "398:     \"\"\"",
          "399:     host = \"localhost\"",
          "400:     passwd = \"password\"",
          "401:     usr = \"ssh-usr\"",
          "402:     opts[\"ssh_user\"] = usr",
          "403:     opts[\"tgt\"] = host",
          "405:     mock_key_run = MagicMock(return_value=False)",
          "406:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
          "408:     ssh_ret = {",
          "409:         \"localhost\": {",
          "410:             \"stdout\": \"\",",
          "411:             \"stderr\": 'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
          "412:             \"retcode\": 1,",
          "413:         }",
          "414:     }",
          "415:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "416:     with patch_roster_file:",
          "417:         client = ssh.SSH(opts)",
          "418:     ret = client.key_deploy(host, ssh_ret)",
          "419:     assert ret == ssh_ret",
          "420:     assert mock_key_run.call_count == 0",
          "423: def test_key_deploy_no_permission_denied(tmp_path, opts):",
          "424:     \"\"\"",
          "425:     test \"key_deploy\" function when no permission denied",
          "426:     is returned",
          "427:     \"\"\"",
          "428:     host = \"localhost\"",
          "429:     passwd = \"password\"",
          "430:     usr = \"ssh-usr\"",
          "431:     opts[\"ssh_user\"] = usr",
          "432:     opts[\"tgt\"] = host",
          "434:     mock_key_run = MagicMock(return_value=False)",
          "435:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
          "436:     ssh_ret = {",
          "437:         \"localhost\": {",
          "438:             \"jid\": \"20230922161937998385\",",
          "439:             \"return\": \"test\",",
          "440:             \"retcode\": 0,",
          "441:             \"id\": \"test\",",
          "442:             \"fun\": \"cmd.run\",",
          "443:             \"fun_args\": [\"echo test\"],",
          "444:         }",
          "445:     }",
          "446:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "447:     with patch_roster_file:",
          "448:         client = ssh.SSH(opts)",
          "449:     ret = client.key_deploy(host, ssh_ret)",
          "450:     assert ret == ssh_ret",
          "451:     assert mock_key_run.call_count == 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b4fdff8d1f8384dbb423d05702dedec452af5d2",
      "candidate_info": {
        "commit_hash": "7b4fdff8d1f8384dbb423d05702dedec452af5d2",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/7b4fdff8d1f8384dbb423d05702dedec452af5d2",
        "files": [
          "tests/pytests/unit/client/ssh/test_single.py",
          "tests/pytests/unit/client/ssh/test_ssh.py"
        ],
        "message": "Fix CVE-2023-34049",
        "before_after_code_files": [
          "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
          "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
            "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
          ],
          "candidate": [
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
            "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
          "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import logging",
          "2: import re",
          "3: from textwrap import dedent",
          "5: import pytest",
          "6: import salt.client.ssh.client",
          "7: import salt.config",
          "8: import salt.roster",
          "9: import salt.utils.files",
          "10: import salt.utils.path",
          "11: import salt.utils.platform",
          "12: import salt.utils.thin",
          "13: import salt.utils.yaml",
          "14: from salt.client import ssh",
          "15: from tests.support.mock import MagicMock, call, patch",
          "17: log = logging.getLogger(__name__)",
          "20: @pytest.fixture",
          "21: def opts(tmp_path):",
          "22:     return {",
          "23:         \"argv\": [",
          "24:             \"ssh.set_auth_key\",",
          "25:             \"root\",",
          "26:             \"hobn+amNAXSBTiOXEqlBjGB...rsa root@master\",",
          "27:         ],",
          "28:         \"__role\": \"master\",",
          "29:         \"cachedir\": str(tmp_path),",
          "30:         \"extension_modules\": str(tmp_path / \"extmods\"),",
          "31:     }",
          "34: @pytest.fixture",
          "35: def target():",
          "36:     return {",
          "37:         \"passwd\": \"abc123\",",
          "38:         \"ssh_options\": None,",
          "39:         \"sudo\": False,",
          "40:         \"identities_only\": False,",
          "41:         \"host\": \"login1\",",
          "42:         \"user\": \"root\",",
          "43:         \"timeout\": 65,",
          "44:         \"remote_port_forwards\": None,",
          "45:         \"sudo_user\": \"\",",
          "46:         \"port\": \"22\",",
          "47:         \"priv\": \"/etc/salt/pki/master/ssh/salt-ssh.rsa\",",
          "48:     }",
          "51: def test_single_opts(opts, target):",
          "52:     \"\"\"Sanity check for ssh.Single options\"\"\"",
          "54:     single = ssh.Single(",
          "55:         opts,",
          "56:         opts[\"argv\"],",
          "57:         \"localhost\",",
          "58:         mods={},",
          "59:         fsclient=None,",
          "60:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "61:         mine=False,",
          "63:     )",
          "65:     assert single.shell._ssh_opts() == \"\"",
          "66:     expected_cmd = (",
          "67:         \"ssh login1 \"",
          "68:         \"-o KbdInteractiveAuthentication=no -o \"",
          "69:         \"PasswordAuthentication=yes -o ConnectTimeout=65 -o Port=22 \"",
          "70:         \"-o IdentityFile=/etc/salt/pki/master/ssh/salt-ssh.rsa \"",
          "71:         \"-o User=root  date +%s\"",
          "72:     )",
          "73:     assert single.shell._cmd_str(\"date +%s\") == expected_cmd",
          "76: def test_run_with_pre_flight(opts, target, tmp_path):",
          "77:     \"\"\"",
          "78:     test Single.run() when ssh_pre_flight is set",
          "79:     and script successfully runs",
          "80:     \"\"\"",
          "81:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "82:     single = ssh.Single(",
          "83:         opts,",
          "84:         opts[\"argv\"],",
          "85:         \"localhost\",",
          "86:         mods={},",
          "87:         fsclient=None,",
          "88:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "89:         mine=False,",
          "91:     )",
          "93:     cmd_ret = (\"Success\", \"\", 0)",
          "94:     mock_flight = MagicMock(return_value=cmd_ret)",
          "95:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "96:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "97:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "98:     patch_exec_cmd = patch(",
          "99:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
          "100:     )",
          "101:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "103:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
          "104:         ret = single.run()",
          "105:         mock_cmd.assert_called()",
          "106:         mock_flight.assert_called()",
          "107:         assert ret == cmd_ret",
          "110: def test_run_with_pre_flight_with_args(opts, target, tmp_path):",
          "111:     \"\"\"",
          "112:     test Single.run() when ssh_pre_flight is set",
          "113:     and script successfully runs",
          "114:     \"\"\"",
          "115:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "116:     target[\"ssh_pre_flight_args\"] = \"foobar\"",
          "117:     single = ssh.Single(",
          "118:         opts,",
          "119:         opts[\"argv\"],",
          "120:         \"localhost\",",
          "121:         mods={},",
          "122:         fsclient=None,",
          "123:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "124:         mine=False,",
          "126:     )",
          "128:     cmd_ret = (\"Success\", \"foobar\", 0)",
          "129:     mock_flight = MagicMock(return_value=cmd_ret)",
          "130:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "131:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "132:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "133:     patch_exec_cmd = patch(",
          "134:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
          "135:     )",
          "136:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "138:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
          "139:         ret = single.run()",
          "140:         mock_cmd.assert_called()",
          "141:         mock_flight.assert_called()",
          "142:         assert ret == cmd_ret",
          "145: def test_run_with_pre_flight_stderr(opts, target, tmp_path):",
          "146:     \"\"\"",
          "147:     test Single.run() when ssh_pre_flight is set",
          "148:     and script errors when run",
          "149:     \"\"\"",
          "150:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "151:     single = ssh.Single(",
          "152:         opts,",
          "153:         opts[\"argv\"],",
          "154:         \"localhost\",",
          "155:         mods={},",
          "156:         fsclient=None,",
          "157:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "158:         mine=False,",
          "160:     )",
          "162:     cmd_ret = (\"\", \"Error running script\", 1)",
          "163:     mock_flight = MagicMock(return_value=cmd_ret)",
          "164:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "165:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "166:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "167:     patch_exec_cmd = patch(",
          "168:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
          "169:     )",
          "170:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "172:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
          "173:         ret = single.run()",
          "174:         mock_cmd.assert_not_called()",
          "175:         mock_flight.assert_called()",
          "176:         assert ret == cmd_ret",
          "179: def test_run_with_pre_flight_script_doesnot_exist(opts, target, tmp_path):",
          "180:     \"\"\"",
          "181:     test Single.run() when ssh_pre_flight is set",
          "182:     and the script does not exist",
          "183:     \"\"\"",
          "184:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "185:     single = ssh.Single(",
          "186:         opts,",
          "187:         opts[\"argv\"],",
          "188:         \"localhost\",",
          "189:         mods={},",
          "190:         fsclient=None,",
          "191:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "192:         mine=False,",
          "194:     )",
          "196:     cmd_ret = (\"Success\", \"\", 0)",
          "197:     mock_flight = MagicMock(return_value=cmd_ret)",
          "198:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "199:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "200:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "201:     patch_exec_cmd = patch(",
          "202:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
          "203:     )",
          "204:     patch_os = patch(\"os.path.exists\", side_effect=[False])",
          "206:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
          "207:         ret = single.run()",
          "208:         mock_cmd.assert_called()",
          "209:         mock_flight.assert_not_called()",
          "210:         assert ret == cmd_ret",
          "213: def test_run_with_pre_flight_thin_dir_exists(opts, target, tmp_path):",
          "214:     \"\"\"",
          "215:     test Single.run() when ssh_pre_flight is set",
          "216:     and thin_dir already exists",
          "217:     \"\"\"",
          "218:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "219:     single = ssh.Single(",
          "220:         opts,",
          "221:         opts[\"argv\"],",
          "222:         \"localhost\",",
          "223:         mods={},",
          "224:         fsclient=None,",
          "225:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "226:         mine=False,",
          "228:     )",
          "230:     cmd_ret = (\"\", \"\", 0)",
          "231:     mock_flight = MagicMock(return_value=cmd_ret)",
          "232:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "233:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "234:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "235:     patch_cmd_block = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "236:     patch_os = patch(\"os.path.exists\", return_value=True)",
          "238:     with patch_os, patch_flight, patch_cmd, patch_cmd_block:",
          "239:         ret = single.run()",
          "240:         mock_cmd.assert_called()",
          "241:         mock_flight.assert_not_called()",
          "242:         assert ret == cmd_ret",
          "245: def test_run_ssh_pre_flight(opts, target, tmp_path):",
          "246:     \"\"\"",
          "247:     test Single.run_ssh_pre_flight function",
          "248:     \"\"\"",
          "249:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
          "250:     single = ssh.Single(",
          "251:         opts,",
          "252:         opts[\"argv\"],",
          "253:         \"localhost\",",
          "254:         mods={},",
          "255:         fsclient=None,",
          "256:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "257:         mine=False,",
          "259:     )",
          "261:     cmd_ret = (\"Success\", \"\", 0)",
          "262:     mock_flight = MagicMock(return_value=cmd_ret)",
          "263:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "264:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
          "265:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "266:     patch_exec_cmd = patch(",
          "267:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
          "268:     )",
          "269:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "271:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
          "272:         ret = single.run()",
          "273:         mock_cmd.assert_called()",
          "274:         mock_flight.assert_called()",
          "275:         assert ret == cmd_ret",
          "278: def test_execute_script(opts, target, tmp_path):",
          "279:     \"\"\"",
          "280:     test Single.execute_script()",
          "281:     \"\"\"",
          "282:     single = ssh.Single(",
          "283:         opts,",
          "284:         opts[\"argv\"],",
          "285:         \"localhost\",",
          "286:         mods={},",
          "287:         fsclient=None,",
          "288:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "289:         mine=False,",
          "290:         winrm=False,",
          "292:     )",
          "294:     exp_ret = (\"Success\", \"\", 0)",
          "295:     mock_cmd = MagicMock(return_value=exp_ret)",
          "296:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "297:     script = str(tmp_path / \"script.sh\")",
          "299:     with patch_cmd:",
          "300:         ret = single.execute_script(script=script)",
          "301:         assert ret == exp_ret",
          "302:         assert mock_cmd.call_count == 2",
          "303:         assert [",
          "304:             call(\"/bin/sh '{}'\".format(script)),",
          "305:             call(\"rm '{}'\".format(script)),",
          "306:         ] == mock_cmd.call_args_list",
          "309: def test_shim_cmd(opts, target, tmp_path):",
          "310:     \"\"\"",
          "311:     test Single.shim_cmd()",
          "312:     \"\"\"",
          "313:     single = ssh.Single(",
          "314:         opts,",
          "315:         opts[\"argv\"],",
          "316:         \"localhost\",",
          "317:         mods={},",
          "318:         fsclient=None,",
          "319:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "320:         mine=False,",
          "321:         winrm=False,",
          "322:         tty=True,",
          "324:     )",
          "326:     exp_ret = (\"Success\", \"\", 0)",
          "327:     mock_cmd = MagicMock(return_value=exp_ret)",
          "328:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "329:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0))",
          "330:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
          "331:     tmp_file = tmp_path / \"tmp_file\"",
          "332:     mock_tmp = MagicMock()",
          "333:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "334:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "336:     with patch_cmd, patch_tmp, patch_send:",
          "337:         ret = single.shim_cmd(cmd_str=\"echo test\")",
          "338:         assert ret == exp_ret",
          "339:         assert [",
          "340:             call(f\"/bin/sh '.{tmp_file.name}'\"),",
          "341:             call(f\"rm '.{tmp_file.name}'\"),",
          "342:         ] == mock_cmd.call_args_list",
          "345: def test_shim_cmd_copy_fails(opts, target, caplog):",
          "346:     \"\"\"",
          "347:     test Single.shim_cmd() when copying the file fails",
          "348:     \"\"\"",
          "349:     single = ssh.Single(",
          "350:         opts,",
          "351:         opts[\"argv\"],",
          "352:         \"localhost\",",
          "353:         mods={},",
          "354:         fsclient=None,",
          "355:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "356:         mine=False,",
          "357:         winrm=False,",
          "358:         tty=True,",
          "360:     )",
          "362:     ret_cmd = (\"Success\", \"\", 0)",
          "363:     mock_cmd = MagicMock(return_value=ret_cmd)",
          "364:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
          "365:     ret_send = (\"\", \"General error in file copy\", 1)",
          "366:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=ret_send)",
          "367:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
          "369:     with patch_cmd, patch_rand, patch_send:",
          "370:         ret = single.shim_cmd(cmd_str=\"echo test\")",
          "371:         assert ret == ret_send",
          "372:         assert \"Could not copy the shim script to target\" in caplog.text",
          "373:         mock_cmd.assert_not_called()",
          "376: def test_run_ssh_pre_flight_no_connect(opts, target, tmp_path, caplog):",
          "377:     \"\"\"",
          "378:     test Single.run_ssh_pre_flight when you",
          "379:     cannot connect to the target",
          "380:     \"\"\"",
          "381:     pre_flight = tmp_path / \"script.sh\"",
          "382:     pre_flight.write_text(\"\")",
          "383:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "384:     single = ssh.Single(",
          "385:         opts,",
          "386:         opts[\"argv\"],",
          "387:         \"localhost\",",
          "388:         mods={},",
          "389:         fsclient=None,",
          "390:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "391:         mine=False,",
          "392:         winrm=False,",
          "393:         tty=True,",
          "395:     )",
          "396:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
          "397:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "398:     tmp_file = tmp_path / \"tmp_file\"",
          "399:     mock_tmp = MagicMock()",
          "400:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "401:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "402:     ret_send = (",
          "403:         \"\",",
          "404:         \"ssh: connect to host 192.168.1.186 port 22: No route to host\\nscp: Connection closed\\n\",",
          "405:         255,",
          "406:     )",
          "407:     send_mock = MagicMock(return_value=ret_send)",
          "408:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "410:     with caplog.at_level(logging.TRACE):",
          "411:         with patch_send, patch_exec_cmd, patch_tmp:",
          "412:             ret = single.run_ssh_pre_flight()",
          "413:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
          "414:     assert (",
          "415:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
          "416:         in caplog.text",
          "417:     )",
          "418:     assert ret == ret_send",
          "419:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "420:     target_script = send_mock.call_args_list[0][0][1]",
          "421:     assert re.search(r\".[a-z0-9]+\", target_script)",
          "422:     mock_exec_cmd.assert_not_called()",
          "425: def test_run_ssh_pre_flight_permission_denied(opts, target, tmp_path):",
          "426:     \"\"\"",
          "427:     test Single.run_ssh_pre_flight when you",
          "428:     cannot copy script to the target due to",
          "429:     a permission denied error",
          "430:     \"\"\"",
          "431:     pre_flight = tmp_path / \"script.sh\"",
          "432:     pre_flight.write_text(\"\")",
          "433:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "434:     single = ssh.Single(",
          "435:         opts,",
          "436:         opts[\"argv\"],",
          "437:         \"localhost\",",
          "438:         mods={},",
          "439:         fsclient=None,",
          "440:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "441:         mine=False,",
          "442:         winrm=False,",
          "443:         tty=True,",
          "445:     )",
          "446:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
          "447:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "448:     tmp_file = tmp_path / \"tmp_file\"",
          "449:     mock_tmp = MagicMock()",
          "450:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "451:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "452:     ret_send = (",
          "453:         \"\",",
          "454:         'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
          "455:         255,",
          "456:     )",
          "457:     send_mock = MagicMock(return_value=ret_send)",
          "458:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "460:     with patch_send, patch_exec_cmd, patch_tmp:",
          "461:         ret = single.run_ssh_pre_flight()",
          "462:     assert ret == ret_send",
          "463:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "464:     target_script = send_mock.call_args_list[0][0][1]",
          "465:     assert re.search(r\".[a-z0-9]+\", target_script)",
          "466:     mock_exec_cmd.assert_not_called()",
          "469: def test_run_ssh_pre_flight_connect(opts, target, tmp_path, caplog):",
          "470:     \"\"\"",
          "471:     test Single.run_ssh_pre_flight when you",
          "472:     can connect to the target",
          "473:     \"\"\"",
          "474:     pre_flight = tmp_path / \"script.sh\"",
          "475:     pre_flight.write_text(\"\")",
          "476:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "477:     single = ssh.Single(",
          "478:         opts,",
          "479:         opts[\"argv\"],",
          "480:         \"localhost\",",
          "481:         mods={},",
          "482:         fsclient=None,",
          "483:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "484:         mine=False,",
          "485:         winrm=False,",
          "486:         tty=True,",
          "488:     )",
          "489:     ret_exec_cmd = (\"\", \"\", 1)",
          "490:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
          "491:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "492:     tmp_file = tmp_path / \"tmp_file\"",
          "493:     mock_tmp = MagicMock()",
          "494:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "495:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "496:     ret_send = (",
          "497:         \"\",",
          "498:         \"\\rroot@192.168.1.187's password: \\n\\rpreflight.sh 0%    0 0.0KB/s   --:-- ETA\\rpreflight.sh 100%   20     2.7KB/s   00:00 \\n\",",
          "499:         0,",
          "500:     )",
          "501:     send_mock = MagicMock(return_value=ret_send)",
          "502:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "504:     with caplog.at_level(logging.TRACE):",
          "505:         with patch_send, patch_exec_cmd, patch_tmp:",
          "506:             ret = single.run_ssh_pre_flight()",
          "508:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
          "509:     assert ret == ret_exec_cmd",
          "510:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "511:     target_script = send_mock.call_args_list[0][0][1]",
          "512:     assert re.search(r\".[a-z0-9]+\", target_script)",
          "513:     mock_exec_cmd.assert_called()",
          "516: def test_run_ssh_pre_flight_shutil_fails(opts, target, tmp_path):",
          "517:     \"\"\"",
          "518:     test Single.run_ssh_pre_flight when cannot",
          "519:     copyfile with shutil",
          "520:     \"\"\"",
          "521:     pre_flight = tmp_path / \"script.sh\"",
          "522:     pre_flight.write_text(\"\")",
          "523:     target[\"ssh_pre_flight\"] = str(pre_flight)",
          "524:     single = ssh.Single(",
          "525:         opts,",
          "526:         opts[\"argv\"],",
          "527:         \"localhost\",",
          "528:         mods={},",
          "529:         fsclient=None,",
          "530:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "531:         mine=False,",
          "532:         winrm=False,",
          "533:         tty=True,",
          "535:     )",
          "536:     ret_exec_cmd = (\"\", \"\", 1)",
          "537:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
          "538:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "539:     tmp_file = tmp_path / \"tmp_file\"",
          "540:     mock_tmp = MagicMock()",
          "541:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
          "542:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
          "543:     send_mock = MagicMock()",
          "544:     mock_shutil = MagicMock(side_effect=IOError(\"Permission Denied\"))",
          "545:     patch_shutil = patch(\"shutil.copyfile\", mock_shutil)",
          "546:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
          "548:     with patch_send, patch_exec_cmd, patch_tmp, patch_shutil:",
          "549:         ret = single.run_ssh_pre_flight()",
          "551:     assert ret == (",
          "552:         \"\",",
          "553:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
          "554:         1,",
          "555:     )",
          "556:     mock_exec_cmd.assert_not_called()",
          "557:     send_mock.assert_not_called()",
          "560: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
          "561: @pytest.mark.slow_test",
          "562: def test_cmd_run_set_path(opts, target):",
          "563:     \"\"\"",
          "564:     test when set_path is set",
          "565:     \"\"\"",
          "566:     target[\"set_path\"] = \"$PATH:/tmp/path/\"",
          "567:     single = ssh.Single(",
          "568:         opts,",
          "569:         opts[\"argv\"],",
          "570:         \"localhost\",",
          "571:         mods={},",
          "572:         fsclient=None,",
          "573:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "574:         mine=False,",
          "576:     )",
          "578:     ret = single._cmd_str()",
          "579:     assert re.search(\"\\\\\" + target[\"set_path\"], ret)",
          "582: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
          "583: @pytest.mark.slow_test",
          "584: def test_cmd_run_not_set_path(opts, target):",
          "585:     \"\"\"",
          "586:     test when set_path is not set",
          "587:     \"\"\"",
          "588:     single = ssh.Single(",
          "589:         opts,",
          "590:         opts[\"argv\"],",
          "591:         \"localhost\",",
          "592:         mods={},",
          "593:         fsclient=None,",
          "594:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "595:         mine=False,",
          "597:     )",
          "599:     ret = single._cmd_str()",
          "600:     assert re.search('SET_PATH=\"\"', ret)",
          "603: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
          "604: @pytest.mark.slow_test",
          "605: def test_cmd_block_python_version_error(opts, target):",
          "606:     single = ssh.Single(",
          "607:         opts,",
          "608:         opts[\"argv\"],",
          "609:         \"localhost\",",
          "610:         mods={},",
          "611:         fsclient=None,",
          "612:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "613:         mine=False,",
          "614:         winrm=False,",
          "616:     )",
          "617:     mock_shim = MagicMock(",
          "618:         return_value=((\"\", \"ERROR: Unable to locate appropriate python command\\n\", 10))",
          "619:     )",
          "620:     patch_shim = patch(\"salt.client.ssh.Single.shim_cmd\", mock_shim)",
          "621:     with patch_shim:",
          "622:         ret = single.cmd_block()",
          "623:         assert \"ERROR: Python version error. Recommendation(s) follow:\" in ret[0]",
          "626: def _check_skip(grains):",
          "627:     if grains[\"os\"] == \"MacOS\":",
          "628:         return True",
          "629:     return False",
          "632: @pytest.mark.skip_initial_gh_actions_failure(skip=_check_skip)",
          "633: @pytest.mark.skip_on_windows(reason=\"pre_flight_args is not implemented for Windows\")",
          "634: @pytest.mark.parametrize(",
          "635:     \"test_opts\",",
          "636:     [",
          "637:         (None, \"\"),",
          "638:         (\"one\", \" one\"),",
          "639:         (\"one two\", \" one two\"),",
          "640:         (\"| touch /tmp/test\", \" '|' touch /tmp/test\"),",
          "641:         (\"; touch /tmp/test\", \" ';' touch /tmp/test\"),",
          "642:         ([\"one\"], \" one\"),",
          "643:         ([\"one\", \"two\"], \" one two\"),",
          "644:         ([\"one\", \"two\", \"| touch /tmp/test\"], \" one two '| touch /tmp/test'\"),",
          "645:         ([\"one\", \"two\", \"; touch /tmp/test\"], \" one two '; touch /tmp/test'\"),",
          "646:     ],",
          "647: )",
          "648: def test_run_with_pre_flight_args(opts, target, test_opts, tmp_path):",
          "649:     \"\"\"",
          "650:     test Single.run() when ssh_pre_flight is set",
          "651:     and script successfully runs",
          "652:     \"\"\"",
          "653:     opts[\"ssh_run_pre_flight\"] = True",
          "654:     pre_flight_script = tmp_path / \"script.sh\"",
          "655:     pre_flight_script.write_text(\"\")",
          "656:     target[\"ssh_pre_flight\"] = str(pre_flight_script)",
          "658:     if test_opts[0] is not None:",
          "659:         target[\"ssh_pre_flight_args\"] = test_opts[0]",
          "660:     expected_args = test_opts[1]",
          "662:     single = ssh.Single(",
          "663:         opts,",
          "664:         opts[\"argv\"],",
          "665:         \"localhost\",",
          "666:         mods={},",
          "667:         fsclient=None,",
          "668:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
          "669:         mine=False,",
          "671:     )",
          "673:     cmd_ret = (\"Success\", \"\", 0)",
          "674:     mock_cmd = MagicMock(return_value=cmd_ret)",
          "675:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 0))",
          "676:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
          "677:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
          "678:     patch_shell_send = patch(",
          "679:         \"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0)",
          "680:     )",
          "681:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
          "683:     with patch_os, patch_cmd, patch_exec_cmd, patch_shell_send:",
          "684:         single.run()",
          "685:         script_args = mock_exec_cmd.mock_calls[0].args[0]",
          "686:         assert re.search(r\"\\/bin\\/sh '.[a-z0-9]+\", script_args)",
          "689: @pytest.mark.slow_test",
          "690: @pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")",
          "691: @pytest.mark.skip_if_binaries_missing(\"ssh\", check_all=True)",
          "692: def test_ssh_single__cmd_str(opts):",
          "693:     argv = []",
          "694:     id_ = \"minion\"",
          "695:     host = \"minion\"",
          "697:     single = ssh.Single(opts, argv, id_, host, sudo=False)",
          "698:     cmd = single._cmd_str()",
          "699:     expected = dedent(",
          "700:         \"\"\"",
          "701:         SUDO=\"\"",
          "702:         if [ -n \"\" ]",
          "703:         then SUDO=\" \"",
          "704:         fi",
          "705:         SUDO_USER=\"\"",
          "706:         if [ \"$SUDO\" ] && [ \"$SUDO_USER\" ]",
          "707:         then SUDO=\"$SUDO -u $SUDO_USER\"",
          "708:         fi",
          "709:         \"\"\"",
          "710:     )",
          "712:     assert expected in cmd",
          "715: @pytest.mark.slow_test",
          "716: @pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")",
          "717: @pytest.mark.skip_if_binaries_missing(\"ssh\", check_all=True)",
          "718: def test_ssh_single__cmd_str_sudo(opts):",
          "719:     argv = []",
          "720:     id_ = \"minion\"",
          "721:     host = \"minion\"",
          "723:     single = ssh.Single(opts, argv, id_, host, sudo=True)",
          "724:     cmd = single._cmd_str()",
          "725:     expected = dedent(",
          "726:         \"\"\"",
          "727:         SUDO=\"\"",
          "728:         if [ -n \"sudo\" ]",
          "729:         then SUDO=\"sudo \"",
          "730:         fi",
          "731:         SUDO_USER=\"\"",
          "732:         if [ \"$SUDO\" ] && [ \"$SUDO_USER\" ]",
          "733:         then SUDO=\"$SUDO -u $SUDO_USER\"",
          "734:         fi",
          "735:         \"\"\"",
          "736:     )",
          "738:     assert expected in cmd",
          "741: @pytest.mark.slow_test",
          "742: @pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")",
          "743: @pytest.mark.skip_if_binaries_missing(\"ssh\", check_all=True)",
          "744: def test_ssh_single__cmd_str_sudo_user(opts):",
          "745:     argv = []",
          "746:     id_ = \"minion\"",
          "747:     host = \"minion\"",
          "748:     user = \"wayne\"",
          "750:     single = ssh.Single(opts, argv, id_, host, sudo=True, sudo_user=user)",
          "751:     cmd = single._cmd_str()",
          "752:     expected = dedent(",
          "753:         \"\"\"",
          "754:         SUDO=\"\"",
          "755:         if [ -n \"sudo\" ]",
          "756:         then SUDO=\"sudo \"",
          "757:         fi",
          "758:         SUDO_USER=\"wayne\"",
          "759:         if [ \"$SUDO\" ] && [ \"$SUDO_USER\" ]",
          "760:         then SUDO=\"$SUDO -u $SUDO_USER\"",
          "761:         fi",
          "762:         \"\"\"",
          "763:     )",
          "765:     assert expected in cmd",
          "768: @pytest.mark.slow_test",
          "769: @pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")",
          "770: @pytest.mark.skip_if_binaries_missing(\"ssh\", check_all=True)",
          "771: def test_ssh_single__cmd_str_sudo_passwd(opts):",
          "772:     argv = []",
          "773:     id_ = \"minion\"",
          "774:     host = \"minion\"",
          "775:     passwd = \"salty\"",
          "777:     single = ssh.Single(opts, argv, id_, host, sudo=True, passwd=passwd)",
          "778:     cmd = single._cmd_str()",
          "779:     expected = dedent(",
          "780:         \"\"\"",
          "781:         SUDO=\"\"",
          "782:         if [ -n \"sudo -p '[salt:sudo:d11bd4221135c33324a6bdc09674146fbfdf519989847491e34a689369bbce23]passwd:'\" ]",
          "783:         then SUDO=\"sudo -p '[salt:sudo:d11bd4221135c33324a6bdc09674146fbfdf519989847491e34a689369bbce23]passwd:' \"",
          "784:         fi",
          "785:         SUDO_USER=\"\"",
          "786:         if [ \"$SUDO\" ] && [ \"$SUDO_USER\" ]",
          "787:         then SUDO=\"$SUDO -u $SUDO_USER\"",
          "788:         fi",
          "789:         \"\"\"",
          "790:     )",
          "792:     assert expected in cmd",
          "795: @pytest.mark.slow_test",
          "796: @pytest.mark.skip_on_windows(reason=\"Windows does not support salt-ssh\")",
          "797: @pytest.mark.skip_if_binaries_missing(\"ssh\", check_all=True)",
          "798: def test_ssh_single__cmd_str_sudo_passwd_user(opts):",
          "799:     argv = []",
          "800:     id_ = \"minion\"",
          "801:     host = \"minion\"",
          "802:     user = \"wayne\"",
          "803:     passwd = \"salty\"",
          "805:     single = ssh.Single(opts, argv, id_, host, sudo=True, passwd=passwd, sudo_user=user)",
          "806:     cmd = single._cmd_str()",
          "807:     expected = dedent(",
          "808:         \"\"\"",
          "809:         SUDO=\"\"",
          "810:         if [ -n \"sudo -p '[salt:sudo:d11bd4221135c33324a6bdc09674146fbfdf519989847491e34a689369bbce23]passwd:'\" ]",
          "811:         then SUDO=\"sudo -p '[salt:sudo:d11bd4221135c33324a6bdc09674146fbfdf519989847491e34a689369bbce23]passwd:' \"",
          "812:         fi",
          "813:         SUDO_USER=\"wayne\"",
          "814:         if [ \"$SUDO\" ] && [ \"$SUDO_USER\" ]",
          "815:         then SUDO=\"$SUDO -u $SUDO_USER\"",
          "816:         fi",
          "817:         \"\"\"",
          "818:     )",
          "820:     assert expected in cmd",
          "",
          "---------------"
        ],
        "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
          "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "194:         assert mock_exec_cmd.mock_calls[0].args[",
          "195:             0",
          "196:         ] == \"/bin/sh '/tmp/script.sh'{}\".format(expected_args)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199: def test_expand_target_dns(opts, roster):",
          "200:     \"\"\"",
          "201:     test expand_target when target is root@<dns>",
          "202:     \"\"\"",
          "203:     host = \"localhost\"",
          "204:     user = \"test-user@\"",
          "205:     opts[\"tgt\"] = user + host",
          "207:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "208:         client = ssh.SSH(opts)",
          "209:     assert opts[\"tgt\"] == user + host",
          "210:     with patch(",
          "211:         \"salt.roster.get_roster_file\", MagicMock(return_value=\"/etc/salt/roster\")",
          "212:     ), patch(",
          "213:         \"salt.client.ssh.compile_template\",",
          "214:         MagicMock(return_value=salt.utils.yaml.safe_load(roster)),",
          "215:     ):",
          "216:         client._expand_target()",
          "217:     assert opts[\"tgt\"] == host",
          "220: def test_expand_target_no_user(opts, roster):",
          "221:     \"\"\"",
          "222:     test expand_target when no user defined",
          "223:     \"\"\"",
          "224:     host = \"127.0.0.1\"",
          "225:     opts[\"tgt\"] = host",
          "227:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "228:         client = ssh.SSH(opts)",
          "229:     assert opts[\"tgt\"] == host",
          "231:     with patch(",
          "232:         \"salt.roster.get_roster_file\", MagicMock(return_value=\"/etc/salt/roster\")",
          "233:     ), patch(",
          "234:         \"salt.client.ssh.compile_template\",",
          "235:         MagicMock(return_value=salt.utils.yaml.safe_load(roster)),",
          "236:     ):",
          "237:         client._expand_target()",
          "238:     assert opts[\"tgt\"] == host",
          "241: def test_update_targets_ip_address(opts):",
          "242:     \"\"\"",
          "243:     test update_targets when host is ip address",
          "244:     \"\"\"",
          "245:     host = \"127.0.0.1\"",
          "246:     user = \"test-user@\"",
          "247:     opts[\"tgt\"] = user + host",
          "249:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "250:         client = ssh.SSH(opts)",
          "251:     assert opts[\"tgt\"] == user + host",
          "252:     client._update_targets()",
          "253:     assert opts[\"tgt\"] == host",
          "254:     assert client.targets[host][\"user\"] == user.split(\"@\")[0]",
          "257: def test_update_targets_dns(opts):",
          "258:     \"\"\"",
          "259:     test update_targets when host is dns",
          "260:     \"\"\"",
          "261:     host = \"localhost\"",
          "262:     user = \"test-user@\"",
          "263:     opts[\"tgt\"] = user + host",
          "265:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "266:         client = ssh.SSH(opts)",
          "267:     assert opts[\"tgt\"] == user + host",
          "268:     client._update_targets()",
          "269:     assert opts[\"tgt\"] == host",
          "270:     assert client.targets[host][\"user\"] == user.split(\"@\")[0]",
          "273: def test_update_targets_no_user(opts):",
          "274:     \"\"\"",
          "275:     test update_targets when no user defined",
          "276:     \"\"\"",
          "277:     host = \"127.0.0.1\"",
          "278:     opts[\"tgt\"] = host",
          "280:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "281:         client = ssh.SSH(opts)",
          "282:     assert opts[\"tgt\"] == host",
          "283:     client._update_targets()",
          "284:     assert opts[\"tgt\"] == host",
          "287: def test_update_expand_target_dns(opts, roster):",
          "288:     \"\"\"",
          "289:     test update_targets and expand_target when host is dns",
          "290:     \"\"\"",
          "291:     host = \"localhost\"",
          "292:     user = \"test-user@\"",
          "293:     opts[\"tgt\"] = user + host",
          "295:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "296:         client = ssh.SSH(opts)",
          "297:     assert opts[\"tgt\"] == user + host",
          "298:     with patch(",
          "299:         \"salt.roster.get_roster_file\", MagicMock(return_value=\"/etc/salt/roster\")",
          "300:     ), patch(",
          "301:         \"salt.client.ssh.compile_template\",",
          "302:         MagicMock(return_value=salt.utils.yaml.safe_load(roster)),",
          "303:     ):",
          "304:         client._expand_target()",
          "305:     client._update_targets()",
          "306:     assert opts[\"tgt\"] == host",
          "307:     assert client.targets[host][\"user\"] == user.split(\"@\")[0]",
          "310: def test_parse_tgt(opts):",
          "311:     \"\"\"",
          "312:     test parse_tgt when user and host set on",
          "313:     the ssh cli tgt",
          "314:     \"\"\"",
          "315:     host = \"localhost\"",
          "316:     user = \"test-user@\"",
          "317:     opts[\"tgt\"] = user + host",
          "319:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "320:         assert not opts.get(\"ssh_cli_tgt\")",
          "321:         client = ssh.SSH(opts)",
          "322:         assert client.parse_tgt[\"hostname\"] == host",
          "323:         assert client.parse_tgt[\"user\"] == user.split(\"@\")[0]",
          "324:         assert opts.get(\"ssh_cli_tgt\") == user + host",
          "327: def test_parse_tgt_no_user(opts):",
          "328:     \"\"\"",
          "329:     test parse_tgt when only the host set on",
          "330:     the ssh cli tgt",
          "331:     \"\"\"",
          "332:     host = \"localhost\"",
          "333:     opts[\"ssh_user\"] = \"ssh-usr\"",
          "334:     opts[\"tgt\"] = host",
          "336:     with patch(\"salt.utils.network.is_reachable_host\", MagicMock(return_value=False)):",
          "337:         assert not opts.get(\"ssh_cli_tgt\")",
          "338:         client = ssh.SSH(opts)",
          "339:         assert client.parse_tgt[\"hostname\"] == host",
          "340:         assert client.parse_tgt[\"user\"] == opts[\"ssh_user\"]",
          "341:         assert opts.get(\"ssh_cli_tgt\") == host",
          "344: def test_extra_filerefs(tmp_path, opts):",
          "345:     \"\"\"",
          "346:     test \"extra_filerefs\" are not excluded from kwargs",
          "347:     when preparing the SSH opts",
          "348:     \"\"\"",
          "349:     ssh_opts = {",
          "350:         \"eauth\": \"auto\",",
          "351:         \"username\": \"test\",",
          "352:         \"password\": \"test\",",
          "353:         \"client\": \"ssh\",",
          "354:         \"tgt\": \"localhost\",",
          "355:         \"fun\": \"test.ping\",",
          "356:         \"ssh_port\": 22,",
          "357:         \"extra_filerefs\": \"salt://foobar\",",
          "358:     }",
          "359:     roster = str(tmp_path / \"roster\")",
          "360:     client = salt.client.ssh.client.SSHClient(mopts=opts, disable_custom_roster=True)",
          "361:     with patch(\"salt.roster.get_roster_file\", MagicMock(return_value=roster)):",
          "362:         ssh_obj = client._prep_ssh(**ssh_opts)",
          "363:         assert ssh_obj.opts.get(\"extra_filerefs\", None) == \"salt://foobar\"",
          "366: def test_key_deploy_permission_denied_scp(tmp_path, opts):",
          "367:     \"\"\"",
          "368:     test \"key_deploy\" function when",
          "369:     permission denied authentication error",
          "370:     when attempting to use scp to copy file",
          "371:     to target",
          "372:     \"\"\"",
          "373:     host = \"localhost\"",
          "374:     passwd = \"password\"",
          "375:     usr = \"ssh-usr\"",
          "376:     opts[\"ssh_user\"] = usr",
          "377:     opts[\"tgt\"] = host",
          "379:     ssh_ret = {",
          "380:         host: {",
          "381:             \"stdout\": \"\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\",",
          "382:             \"stderr\": \"Permission denied, please try again.\\nPermission denied, please try again.\\nroot@192.168.1.187: Permission denied (publickey,gssapi-keyex,gssapi-with-micimport pudb; pu.dbassword).\\nscp: Connection closed\\n\",",
          "383:             \"retcode\": 255,",
          "384:         }",
          "385:     }",
          "386:     key_run_ret = {",
          "387:         \"localhost\": {",
          "388:             \"jid\": \"20230922155652279959\",",
          "389:             \"return\": \"test\",",
          "390:             \"retcode\": 0,",
          "391:             \"id\": \"test\",",
          "392:             \"fun\": \"cmd.run\",",
          "393:             \"fun_args\": [\"echo test\"],",
          "394:         }",
          "395:     }",
          "396:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "397:     with patch_roster_file:",
          "398:         client = ssh.SSH(opts)",
          "399:     patch_input = patch(\"builtins.input\", side_effect=[\"y\"])",
          "400:     patch_getpass = patch(\"getpass.getpass\", return_value=[\"password\"])",
          "401:     mock_key_run = MagicMock(return_value=key_run_ret)",
          "402:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
          "403:     with patch_input, patch_getpass, patch_key_run:",
          "404:         ret = client.key_deploy(host, ssh_ret)",
          "405:     assert mock_key_run.call_args_list[0][0] == (",
          "406:         host,",
          "407:         {\"passwd\": [passwd], \"host\": host, \"user\": usr},",
          "408:         True,",
          "409:     )",
          "410:     assert ret == key_run_ret",
          "411:     assert mock_key_run.call_count == 1",
          "414: def test_key_deploy_permission_denied_file_scp(tmp_path, opts):",
          "415:     \"\"\"",
          "416:     test \"key_deploy\" function when permission denied",
          "417:     due to not having access to copy the file to the target",
          "418:     We do not want to deploy the key, because this is not",
          "419:     an authentication to the target error.",
          "420:     \"\"\"",
          "421:     host = \"localhost\"",
          "422:     passwd = \"password\"",
          "423:     usr = \"ssh-usr\"",
          "424:     opts[\"ssh_user\"] = usr",
          "425:     opts[\"tgt\"] = host",
          "427:     mock_key_run = MagicMock(return_value=False)",
          "428:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
          "430:     ssh_ret = {",
          "431:         \"localhost\": {",
          "432:             \"stdout\": \"\",",
          "433:             \"stderr\": 'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
          "434:             \"retcode\": 1,",
          "435:         }",
          "436:     }",
          "437:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "438:     with patch_roster_file:",
          "439:         client = ssh.SSH(opts)",
          "440:     ret = client.key_deploy(host, ssh_ret)",
          "441:     assert ret == ssh_ret",
          "442:     assert mock_key_run.call_count == 0",
          "445: def test_key_deploy_no_permission_denied(tmp_path, opts):",
          "446:     \"\"\"",
          "447:     test \"key_deploy\" function when no permission denied",
          "448:     is returned",
          "449:     \"\"\"",
          "450:     host = \"localhost\"",
          "451:     passwd = \"password\"",
          "452:     usr = \"ssh-usr\"",
          "453:     opts[\"ssh_user\"] = usr",
          "454:     opts[\"tgt\"] = host",
          "456:     mock_key_run = MagicMock(return_value=False)",
          "457:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
          "458:     ssh_ret = {",
          "459:         \"localhost\": {",
          "460:             \"jid\": \"20230922161937998385\",",
          "461:             \"return\": \"test\",",
          "462:             \"retcode\": 0,",
          "463:             \"id\": \"test\",",
          "464:             \"fun\": \"cmd.run\",",
          "465:             \"fun_args\": [\"echo test\"],",
          "466:         }",
          "467:     }",
          "468:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "469:     with patch_roster_file:",
          "470:         client = ssh.SSH(opts)",
          "471:     ret = client.key_deploy(host, ssh_ret)",
          "472:     assert ret == ssh_ret",
          "473:     assert mock_key_run.call_count == 0",
          "",
          "---------------"
        ]
      }
    }
  ]
}