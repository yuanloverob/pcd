{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb05816cf7558faaa86a5a8f5622bcc83a380c6b",
      "candidate_info": {
        "commit_hash": "fb05816cf7558faaa86a5a8f5622bcc83a380c6b",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/fb05816cf7558faaa86a5a8f5622bcc83a380c6b",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java"
        ],
        "message": "PDFBOX-4892: improve logging\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888240 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java||examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java||examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java -> examples/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:             output = connection.getOutputStream();",
          "145:             output.write(request);",
          "146:         }",
          "147:         finally",
          "148:         {",
          "149:             IOUtils.closeQuietly(output);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:         catch (IOException ex)",
          "148:         {",
          "149:             LOG.error(\"Exception when writing to \" + this.url, ex);",
          "150:             throw ex;",
          "151:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:             input = connection.getInputStream();",
          "159:             response = IOUtils.toByteArray(input);",
          "160:         }",
          "161:         finally",
          "162:         {",
          "163:             IOUtils.closeQuietly(input);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:         catch (IOException ex)",
          "167:         {",
          "168:             LOG.error(\"Exception when reading from \" + this.url, ex);",
          "169:             throw ex;",
          "170:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "653de1a1f0bdb13f5aad2a63e9f0d21cb62ababc",
      "candidate_info": {
        "commit_hash": "653de1a1f0bdb13f5aad2a63e9f0d21cb62ababc",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/653de1a1f0bdb13f5aad2a63e9f0d21cb62ababc",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/DrawObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/DrawObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/markedcontent/DrawObject.java"
        ],
        "message": "PDFBOX-4892: remove unneeded conversion, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892702 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/DrawObject.java||pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/DrawObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/DrawObject.java||pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/DrawObject.java",
          "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/markedcontent/DrawObject.java||pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/markedcontent/DrawObject.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/DrawObject.java||pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/DrawObject.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/DrawObject.java -> pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/DrawObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:                     LOG.error(\"recursion is too deep, skipping form XObject\");",
          "70:                     return;",
          "71:                 }",
          "74:                 {",
          "76:                 }",
          "77:                 else",
          "78:                 {",
          "80:                 }",
          "81:             }",
          "82:             finally",
          "",
          "[Removed Lines]",
          "72:                 PDFormXObject form = (PDFormXObject) xobject;",
          "73:                 if (form instanceof PDTransparencyGroup)",
          "75:                     context.showTransparencyGroup((PDTransparencyGroup) form);",
          "79:                     context.showForm(form);",
          "",
          "[Added Lines]",
          "72:                 if (xobject instanceof PDTransparencyGroup)",
          "74:                     context.showTransparencyGroup((PDTransparencyGroup) xobject);",
          "78:                     context.showForm((PDFormXObject) xobject);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/DrawObject.java||pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/DrawObject.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/DrawObject.java -> pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/DrawObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:                     LOG.error(\"recursion is too deep, skipping form XObject\");",
          "77:                     return;",
          "78:                 }",
          "81:                 {",
          "83:                 }",
          "84:                 else",
          "85:                 {",
          "87:                 }",
          "88:             }",
          "89:             finally",
          "",
          "[Removed Lines]",
          "79:                 PDFormXObject form = (PDFormXObject) xobject;",
          "80:                 if (form instanceof PDTransparencyGroup)",
          "82:                     context.showTransparencyGroup((PDTransparencyGroup) form);",
          "86:                     context.showForm(form);",
          "",
          "[Added Lines]",
          "79:                 if (xobject instanceof PDTransparencyGroup)",
          "81:                     context.showTransparencyGroup((PDTransparencyGroup) xobject);",
          "85:                     context.showForm((PDFormXObject) xobject);",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/markedcontent/DrawObject.java||pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/markedcontent/DrawObject.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/markedcontent/DrawObject.java -> pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/markedcontent/DrawObject.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:                     LOG.error(\"recursion is too deep, skipping form XObject\");",
          "69:                     return;",
          "70:                 }",
          "73:                 {",
          "75:                 }",
          "76:                 else",
          "77:                 {",
          "79:                 }",
          "80:             }",
          "81:             finally",
          "",
          "[Removed Lines]",
          "71:                 PDFormXObject form = (PDFormXObject) xobject;",
          "72:                 if (form instanceof PDTransparencyGroup)",
          "74:                     context.showTransparencyGroup((PDTransparencyGroup) form);",
          "78:                     context.showForm(form);",
          "",
          "[Added Lines]",
          "71:                 if (xobject instanceof PDTransparencyGroup)",
          "73:                     context.showTransparencyGroup((PDTransparencyGroup) xobject);",
          "77:                     context.showForm((PDFormXObject) xobject);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "412114ce80b4773e9cca1979068682760b99cbfd",
      "candidate_info": {
        "commit_hash": "412114ce80b4773e9cca1979068682760b99cbfd",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/412114ce80b4773e9cca1979068682760b99cbfd",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java",
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateRadioButtons.java",
          "examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java"
        ],
        "message": "PDFBOX-4939: add tests for CreateCheckBox and CreateRadioButtons examples\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1881152 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java",
          "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateRadioButtons.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateRadioButtons.java",
          "examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java||examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java -> examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateCheckBox.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:         checkbox.unCheck();",
          "105:         document.close();",
          "106:     }",
          "",
          "[Removed Lines]",
          "104:         document.save(\"CheckBoxSample.pdf\");",
          "",
          "[Added Lines]",
          "104:         document.save(\"target/CheckBoxSample.pdf\");",
          "",
          "---------------"
        ],
        "examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateRadioButtons.java||examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateRadioButtons.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateRadioButtons.java -> examples/src/main/java/org/apache/pdfbox/examples/interactive/form/CreateRadioButtons.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         radioButton.setValue(\"c\");",
          "119:         document.close();",
          "120:     }",
          "",
          "[Removed Lines]",
          "118:         document.save(\"RadioButtonsSample.pdf\");",
          "",
          "[Added Lines]",
          "118:         document.save(\"target/RadioButtonsSample.pdf\");",
          "",
          "---------------"
        ],
        "examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java||examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java": [
          "File: examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java -> examples/src/test/java/org/apache/pdfbox/examples/interactive/form/TestCreateSimpleForms.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceEntry;",
          "33: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
          "34: import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;",
          "35: import org.apache.pdfbox.pdmodel.interactive.form.PDTextField;",
          "36: import org.apache.pdfbox.rendering.PDFRenderer;",
          "37: import org.junit.Assert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import org.apache.pdfbox.pdmodel.interactive.form.PDCheckBox;",
          "36: import org.apache.pdfbox.pdmodel.interactive.form.PDRadioButton;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:         doc.close();",
          "178:     }",
          "180:     private PDFont getFontFromWidgetResources(PDTextField textBox, String fontResourceName) throws IOException",
          "181:     {",
          "182:         PDAnnotationWidget widget = textBox.getWidgets().get(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     @Test",
          "183:     public void testCreateCheckBox() throws IOException",
          "184:     {",
          "185:         CreateCheckBox.main(null);",
          "186:         PDDocument doc1 = PDDocument.load(new File(\"target/CheckBoxSample.pdf\"));",
          "187:         new PDFRenderer(doc1).renderImage(0);",
          "188:         PDAcroForm acroForm1 = doc1.getDocumentCatalog().getAcroForm();",
          "189:         PDCheckBox checkbox1 = (PDCheckBox) acroForm1.getField(\"MyCheckBox\");",
          "190:         Assert.assertEquals(\"Yes\", checkbox1.getOnValue());",
          "191:         Assert.assertEquals(\"Off\", checkbox1.getValue());",
          "192:         checkbox1.check();",
          "193:         Assert.assertEquals(\"Yes\", checkbox1.getValue());",
          "194:         doc1.save(\"target/CheckBoxSample-modified.pdf\");",
          "195:         doc1.close();",
          "197:         PDDocument doc2 = PDDocument.load(new File(\"target/CheckBoxSample-modified.pdf\"));",
          "198:         new PDFRenderer(doc2).renderImage(0);",
          "199:         PDAcroForm acroForm2 = doc2.getDocumentCatalog().getAcroForm();",
          "200:         PDCheckBox checkbox2 = (PDCheckBox) acroForm2.getField(\"MyCheckBox\");",
          "201:         Assert.assertEquals(\"Yes\", checkbox2.getValue());",
          "202:         doc2.close();",
          "203:     }",
          "205:     @Test",
          "206:     public void testRadioButtons() throws IOException",
          "207:     {",
          "208:         CreateRadioButtons.main(null);",
          "209:         PDDocument doc1 = PDDocument.load(new File(\"target/RadioButtonsSample.pdf\"));",
          "210:         new PDFRenderer(doc1).renderImage(0);",
          "211:         PDAcroForm acroForm1 = doc1.getDocumentCatalog().getAcroForm();",
          "212:         PDRadioButton radioButton1 = (PDRadioButton) acroForm1.getField(\"MyRadioButton\");",
          "213:         Assert.assertEquals(3, radioButton1.getWidgets().size());",
          "214:         Assert.assertEquals(\"c\", radioButton1.getValue());",
          "215:         Assert.assertEquals(1, radioButton1.getSelectedExportValues().size());",
          "216:         Assert.assertEquals(\"c\", radioButton1.getSelectedExportValues().get(0));",
          "217:         Assert.assertEquals(3, radioButton1.getExportValues().size());",
          "218:         Assert.assertEquals(\"a\", radioButton1.getExportValues().get(0));",
          "219:         Assert.assertEquals(\"b\", radioButton1.getExportValues().get(1));",
          "220:         Assert.assertEquals(\"c\", radioButton1.getExportValues().get(2));",
          "221:         radioButton1.setValue(\"b\");",
          "222:         doc1.save(\"target/RadioButtonsSample-modified.pdf\");",
          "223:         doc1.close();",
          "225:         PDDocument doc2 = PDDocument.load(new File(\"target/RadioButtonsSample-modified.pdf\"));",
          "226:         new PDFRenderer(doc2).renderImage(0);",
          "227:         PDAcroForm acroForm2 = doc2.getDocumentCatalog().getAcroForm();",
          "228:         PDRadioButton radioButton2 = (PDRadioButton) acroForm2.getField(\"MyRadioButton\");",
          "229:         Assert.assertEquals(\"b\", radioButton2.getValue());",
          "230:         Assert.assertEquals(1, radioButton2.getSelectedExportValues().size());",
          "231:         Assert.assertEquals(\"b\", radioButton2.getSelectedExportValues().get(0));",
          "232:         Assert.assertEquals(3, radioButton2.getExportValues().size());",
          "233:         doc2.close();",
          "234:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5acbf38a5df330c5d3c91f7e9242520ba521cc5",
      "candidate_info": {
        "commit_hash": "f5acbf38a5df330c5d3c91f7e9242520ba521cc5",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f5acbf38a5df330c5d3c91f7e9242520ba521cc5",
        "files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java"
        ],
        "message": "PDFBOX-2941: Sonar fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1884180 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java||debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java": [
          "File: debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java -> debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:     @Override",
          "383:     public void mouseClicked(MouseEvent e)",
          "384:     {",
          "386:         {",
          "388:             {",
          "401:             }",
          "402:         }",
          "403:     }",
          "",
          "[Removed Lines]",
          "385:         if (!currentURI.isEmpty())",
          "387:             if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE))",
          "389:                 try",
          "390:                 {",
          "391:                     Desktop.getDesktop().browse(new URI(currentURI));",
          "392:                 }",
          "393:                 catch (URISyntaxException ex)",
          "394:                 {",
          "395:                     new ErrorDialog(ex).setVisible(true);",
          "396:                 }",
          "397:                 catch (IOException ex)",
          "398:                 {",
          "399:                     new ErrorDialog(ex).setVisible(true);",
          "400:                 }",
          "",
          "[Added Lines]",
          "385:         if (!currentURI.isEmpty() &&",
          "386:             Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE))",
          "388:             try",
          "390:                 Desktop.getDesktop().browse(new URI(currentURI));",
          "391:             }",
          "392:             catch (URISyntaxException ex)",
          "393:             {",
          "394:                 new ErrorDialog(ex).setVisible(true);",
          "395:             }",
          "396:             catch (IOException ex)",
          "397:             {",
          "398:                 new ErrorDialog(ex).setVisible(true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aff5dd85fe20c5d14b3d7b33258dbdf9791db70c",
      "candidate_info": {
        "commit_hash": "aff5dd85fe20c5d14b3d7b33258dbdf9791db70c",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/aff5dd85fe20c5d14b3d7b33258dbdf9791db70c",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/COSFilterInputStream.java"
        ],
        "message": "PDFBOX-5110: improve performance by reading whole segments at once instead of bytes at a time, by Jordi Boixadera\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886933 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/COSFilterInputStream.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/COSFilterInputStream.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/COSFilterInputStream.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/COSFilterInputStream.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/COSFilterInputStream.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/digitalsignature/COSFilterInputStream.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: public class COSFilterInputStream extends FilterInputStream",
          "30: {",
          "52:     {",
          "54:     }",
          "68:     {",
          "70:     }",
          "74:     {",
          "76:     }",
          "81:     {",
          "83:         {",
          "86:             {",
          "88:             }",
          "90:         }",
          "91:     }",
          "93:     {",
          "94:     }",
          "102:     {",
          "107:     }",
          "114:     {",
          "120:     }",
          "127: }",
          "",
          "[Removed Lines]",
          "31:   private final int[] byteRange;",
          "32:   private long position = 0;",
          "34:   public COSFilterInputStream(InputStream in, int[] byteRange)",
          "35:   {",
          "36:     super(in);",
          "37:     this.byteRange = byteRange;",
          "38:   }",
          "40:   public COSFilterInputStream(byte[] in, int[] byteRange)",
          "41:   {",
          "42:     super(new ByteArrayInputStream(in));",
          "43:     this.byteRange = byteRange;",
          "44:   }",
          "46:   @Override",
          "47:   public int read() throws IOException",
          "48:   {",
          "49:     nextAvailable();",
          "50:     int i = super.read();",
          "51:     if (i>-1)",
          "53:       ++position;",
          "55:     return i;",
          "56:   }",
          "58:   @Override",
          "59:   public int read(byte[] b) throws IOException",
          "60:   {",
          "61:     return read(b,0,b.length);",
          "62:   }",
          "64:   @Override",
          "65:   public int read(byte[] b, int off, int len) throws IOException",
          "66:   {",
          "67:     if (len == 0)",
          "69:         return 0;",
          "72:     int c = read();",
          "73:     if (c == -1)",
          "75:         return -1;",
          "77:     b[off] = (byte)c;",
          "79:     int i = 1;",
          "80:     try",
          "82:         for (; i < len; i++)",
          "84:             c = read();",
          "85:             if (c == -1)",
          "87:                 break;",
          "89:             b[off + i] = (byte)c;",
          "92:     catch (IOException ee)",
          "95:     return i;",
          "96:   }",
          "98:   private boolean inRange()",
          "99:   {",
          "100:     long pos = position;",
          "101:     for (int i = 0; i<byteRange.length/2;++i)",
          "103:       if(byteRange[i*2] <= pos &&  byteRange[i*2]+byteRange[i*2+1]>pos)",
          "104:       {",
          "105:         return true;",
          "106:       }",
          "108:     return false;",
          "109:   }",
          "111:   private void nextAvailable() throws IOException",
          "112:   {",
          "113:     while (!inRange())",
          "115:       ++position;",
          "116:       if(super.read()<0)",
          "117:       {",
          "118:         break;",
          "119:       }",
          "121:   }",
          "123:   public byte[] toByteArray() throws IOException",
          "124:   {",
          "125:       return IOUtils.toByteArray(this);",
          "126:   }",
          "",
          "[Added Lines]",
          "34:     private int[][] ranges;",
          "35:     private int range;",
          "36:     private long position = 0;",
          "38:     public COSFilterInputStream(InputStream in, int[] byteRange)",
          "39:     {",
          "40:         super(in);",
          "41:         calculateRanges(byteRange);",
          "42:     }",
          "44:     public COSFilterInputStream(byte[] in, int[] byteRange)",
          "46:         this(new ByteArrayInputStream(in), byteRange);",
          "49:     @Override",
          "50:     public int read() throws IOException",
          "52:         if (this.range == -1 || getRemaining() <= 0)",
          "53:         {",
          "54:             if (!nextRange())",
          "55:             {",
          "56:                 return -1; // EOF",
          "57:             }",
          "58:         }",
          "59:         int result = super.read();",
          "60:         this.position++;",
          "61:         return result;",
          "64:     @Override",
          "65:     public int read(byte[] b) throws IOException",
          "67:         return read(b, 0, b.length);",
          "70:     @Override",
          "71:     public int read(byte[] b, int off, int len) throws IOException",
          "73:         if (this.range == -1 || getRemaining() <= 0)",
          "75:             if (!nextRange())",
          "77:                 return -1; // EOF",
          "80:         int bytesRead = super.read(b, off, (int) Math.min(len, getRemaining()));",
          "81:         this.position += bytesRead;",
          "82:         return bytesRead;",
          "85:     public byte[] toByteArray() throws IOException",
          "87:         return IOUtils.toByteArray(this);",
          "90:     private void calculateRanges(int[] byteRange)",
          "92:         this.ranges = new int[byteRange.length / 2][];",
          "93:         for (int i = 0; i < byteRange.length / 2; i++)",
          "94:         {",
          "95:             this.ranges[i] = new int[] { byteRange[i * 2], byteRange[i * 2] + byteRange[i * 2 + 1] };",
          "96:         }",
          "97:         this.range = -1;",
          "98:     }",
          "100:     private long getRemaining()",
          "101:     {",
          "102:         return this.ranges[this.range][1] - this.position;",
          "105:     private boolean nextRange() throws IOException",
          "107:         if (this.ranges.length > this.range + 1)",
          "108:         {",
          "109:             this.range++;",
          "110:             while (this.position < this.ranges[this.range][0])",
          "111:             {",
          "112:                 long skipped = super.skip(this.ranges[this.range][0] - this.position);",
          "113:                 this.position += skipped;",
          "114:             }",
          "115:             return true;",
          "116:         }",
          "117:         else",
          "118:         {",
          "119:             return false;",
          "120:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}