{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fe00ba6729d667f4b0450fc74d63c5781884ea98",
      "candidate_info": {
        "commit_hash": "fe00ba6729d667f4b0450fc74d63c5781884ea98",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/fe00ba6729d667f4b0450fc74d63c5781884ea98",
        "files": [
          "ambari-web/app/models/host.js",
          "ambari-web/app/models/host_component.js",
          "ambari-web/app/views/main/host/details.js",
          "ambari-web/test/models/host_component_test.js"
        ],
        "message": "AMBARI-24627 \"Host is in Maintenance mode\" text is not displayed in UI after maintenance mode is turned on",
        "before_after_code_files": [
          "ambari-web/app/models/host.js||ambari-web/app/models/host.js",
          "ambari-web/app/models/host_component.js||ambari-web/app/models/host_component.js",
          "ambari-web/app/views/main/host/details.js||ambari-web/app/views/main/host/details.js",
          "ambari-web/test/models/host_component_test.js||ambari-web/test/models/host_component_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/models/host.js||ambari-web/app/models/host.js": [
          "File: ambari-web/app/models/host.js -> ambari-web/app/models/host.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:       'ALERT': 'health-status-DEAD-ORANGE'",
          "217:     };",
          "218:     return statusMap[this.get('healthStatus')] || 'health-status-DEAD-YELLOW';",
          "221:   healthIconClass: Em.computed.getByKey('healthIconClassMap', 'healthClass', ''),",
          "",
          "[Removed Lines]",
          "219:   }.property('healthStatus'),",
          "",
          "[Added Lines]",
          "219:   }.property('healthStatus', 'passiveState'),",
          "",
          "---------------"
        ],
        "ambari-web/app/models/host_component.js||ambari-web/app/models/host_component.js": [
          "File: ambari-web/app/models/host_component.js -> ambari-web/app/models/host_component.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "119:   isActive: Em.computed.equal('passiveState', 'OFF'),",
          "",
          "[Added Lines]",
          "119:   isActive: function() {",
          "120:     let passiveState = this.get('passiveState');",
          "121:     if (passiveState === 'IMPLIED_FROM_HOST') {",
          "122:       passiveState = this.get('host.passiveState');",
          "123:     } else if (passiveState === 'IMPLIED_FROM_SERVICE') {",
          "124:       passiveState = this.get('service.passiveState');",
          "125:     } else if (passiveState === 'IMPLIED_FROM_SERVICE_AND_HOST') {",
          "126:       return this.get('service.passiveState') === 'OFF' && this.get('host.passiveState') === 'OFF';",
          "127:     }",
          "128:     return passiveState === 'OFF';",
          "129:   }.property('passiveState', 'host.passiveState', 'service.passiveState'),",
          "",
          "---------------"
        ],
        "ambari-web/app/views/main/host/details.js||ambari-web/app/views/main/host/details.js": [
          "File: ambari-web/app/views/main/host/details.js -> ambari-web/app/views/main/host/details.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:       label: this.t('host.host.details.checkHost')",
          "97:     });",
          "98:     return result;",
          "101:   didInsertElement: function () {",
          "102:     var self = this;",
          "",
          "[Removed Lines]",
          "99:   }.property('controller.content', 'isActive', 'controller.content.isNotHeartBeating'),",
          "",
          "[Added Lines]",
          "99:   }.property('controller.content', 'controller.content.isActive', 'controller.content.isNotHeartBeating'),",
          "",
          "---------------"
        ],
        "ambari-web/test/models/host_component_test.js||ambari-web/test/models/host_component_test.js": [
          "File: ambari-web/test/models/host_component_test.js -> ambari-web/test/models/host_component_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:     });",
          "147:   });",
          "151:   App.TestAliases.testAsComputedIfThenElse(hc, 'passiveTooltip', 'isActive', '', Em.I18n.t('hosts.component.passive.mode'));",
          "153:   describe('#isActive', function() {",
          "159:     it('passiveState is OFF', function() {",
          "160:       hc.set('passiveState', \"OFF\");",
          "161:       hc.propertyDidChange('isActive');",
          "162:       expect(hc.get('isActive')).to.be.true;",
          "163:     });",
          "164:   });",
          "166:   describe('#statusClass', function() {",
          "",
          "[Removed Lines]",
          "149:   App.TestAliases.testAsComputedEqual(hc, 'isActive', 'passiveState', 'OFF');",
          "154:     it('passiveState is ON', function() {",
          "155:       hc.set('passiveState', \"ON\");",
          "156:       hc.propertyDidChange('isActive');",
          "157:       expect(hc.get('isActive')).to.be.false;",
          "158:     });",
          "",
          "[Added Lines]",
          "157:     it('passiveState is IMPLIED_FROM_HOST', function() {",
          "158:       hc.set('passiveState', \"IMPLIED_FROM_HOST\");",
          "159:       hc.set('host', {",
          "160:         passiveState: 'OFF'",
          "161:       });",
          "162:       hc.propertyDidChange('isActive');",
          "163:       expect(hc.get('isActive')).to.be.true;",
          "164:     });",
          "165:     it('passiveState is IMPLIED_FROM_SERVICE', function() {",
          "166:       hc.set('passiveState', \"IMPLIED_FROM_SERVICE\");",
          "167:       hc.set('service', {",
          "168:         passiveState: 'OFF'",
          "169:       });",
          "170:       hc.propertyDidChange('isActive');",
          "171:       expect(hc.get('isActive')).to.be.true;",
          "172:     });",
          "173:     it('passiveState is IMPLIED_FROM_SERVICE_AND_HOST', function() {",
          "174:       hc.set('passiveState', \"IMPLIED_FROM_SERVICE_AND_HOST\");",
          "175:       hc.set('host', {",
          "176:         passiveState: 'OFF'",
          "177:       });",
          "178:       hc.set('service', {",
          "179:         passiveState: 'OFF'",
          "180:       });",
          "181:       hc.propertyDidChange('isActive');",
          "182:       expect(hc.get('isActive')).to.be.true;",
          "183:     });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65ee5420056d63a6e2fcbbeacca4f92fd1ca09b2",
      "candidate_info": {
        "commit_hash": "65ee5420056d63a6e2fcbbeacca4f92fd1ca09b2",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/65ee5420056d63a6e2fcbbeacca4f92fd1ca09b2",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "ambari-agent/src/test/python/ambari_agent/TestActionQueue.py",
          "ambari-agent/src/test/python/ambari_agent/TestAlerts.py",
          "ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/AmbariEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/ClusterProvisionStartedEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/BlueprintProvisioningState.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java"
        ],
        "message": "AMBARI-24476. Disable autostart during blueprint deploy. (#2073)\n\n* AMBARI-24476. Disable autostart during blueprint deploy. (mpapirkovskyy)\n\n* AMBARI-24476. Disable autostart during blueprint deploy. (mpapirkovskyy)\n\n* AMBARI-24476. Disable autostart during blueprint deploy. (mpapirkovskyy)\n\n* AMBARI-24476. Disable autostart during blueprint deploy. Agent UT fixes. (mpapirkovskyy)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py||ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "ambari-agent/src/test/python/ambari_agent/TestActionQueue.py||ambari-agent/src/test/python/ambari_agent/TestActionQueue.py",
          "ambari-agent/src/test/python/ambari_agent/TestAlerts.py||ambari-agent/src/test/python/ambari_agent/TestAlerts.py",
          "ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py||ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java||ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/AmbariEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/AmbariEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/ClusterProvisionStartedEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/ClusterProvisionStartedEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/BlueprintProvisioningState.java||ambari-server/src/main/java/org/apache/ambari/server/state/BlueprintProvisioningState.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java||ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java||ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py||ambari-agent/src/main/python/ambari_agent/RecoveryManager.py": [
          "File: ambari-agent/src/main/python/ambari_agent/RecoveryManager.py -> ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   \"\"\"",
          "36:   COMMAND_TYPE = \"commandType\"",
          "37:   PAYLOAD_LEVEL = \"payloadLevel\"",
          "38:   SERVICE_NAME = \"serviceName\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:   BLUEPRINT_STATE_IN_PROGRESS = 'IN_PROGRESS'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     self.active_command_count = 0",
          "98:     self.cluster_id = None",
          "99:     self.initializer_module = initializer_module",
          "101:     self.actions = {}",
          "102:     self.update_config(6, 60, 5, 12, recovery_enabled, auto_start_only, auto_install_start)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:     self.metadata_cache = initializer_module.metadata_cache",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:     with self.__active_command_lock:",
          "110:       self.active_command_count -= 1",
          "112:   def has_active_command(self):",
          "113:     return self.active_command_count > 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:   def is_blueprint_provisioning(self):",
          "115:     try:",
          "116:       blueprint_state = self.metadata_cache[self.cluster_id]['clusterLevelParams']['blueprint_provisioning_state']",
          "117:     except KeyError:",
          "118:       blueprint_state = 'NONE'",
          "120:     return blueprint_state == RecoveryManager.BLUEPRINT_STATE_IN_PROGRESS",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "640:       logger.info(\"Recovery is paused, tasks waiting in pipeline for this host.\")",
          "641:       return None",
          "643:     if self.enabled():",
          "644:       command_id = self.get_unique_task_id()",
          "645:       command = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "653:     if self.is_blueprint_provisioning():",
          "654:       logger.info(\"Recovery is paused, blueprint is being provisioned.\")",
          "655:       return None",
          "",
          "---------------"
        ],
        "ambari-agent/src/test/python/ambari_agent/TestActionQueue.py||ambari-agent/src/test/python/ambari_agent/TestActionQueue.py": [
          "File: ambari-agent/src/test/python/ambari_agent/TestActionQueue.py -> ambari-agent/src/test/python/ambari_agent/TestActionQueue.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "508:     initializer_module = InitializerModule()",
          "509:     initializer_module.init()",
          "510:     initializer_module.config = config",
          "512:     initializer_module.recovery_manager.update_config(5, 5, 1, 11, True, False, False)",
          "514:     with patch(\"__builtin__.open\") as open_mock:",
          "",
          "[Removed Lines]",
          "511:     initializer_module.recovery_manager = RecoveryManager(tempfile.mktemp())",
          "",
          "[Added Lines]",
          "511:     initializer_module.recovery_manager = RecoveryManager(MagicMock())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "952:                                 get_mock, process_command_mock, gpeo_mock):",
          "953:     CustomServiceOrchestrator_mock.return_value = None",
          "954:     dummy_controller = MagicMock()",
          "956:     config = MagicMock()",
          "957:     gpeo_mock.return_value = 0",
          "958:     config.get_parallel_exec_option = gpeo_mock",
          "",
          "[Removed Lines]",
          "955:     dummy_controller.recovery_manager = RecoveryManager(tempfile.mktemp())",
          "",
          "[Added Lines]",
          "955:     dummy_controller.recovery_manager = RecoveryManager(MagicMock())",
          "",
          "---------------"
        ],
        "ambari-agent/src/test/python/ambari_agent/TestAlerts.py||ambari-agent/src/test/python/ambari_agent/TestAlerts.py": [
          "File: ambari-agent/src/test/python/ambari_agent/TestAlerts.py -> ambari-agent/src/test/python/ambari_agent/TestAlerts.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     cluster_configuration = self.__get_cluster_configuration()",
          "114:     self.__update_cluster_configuration(cluster_configuration, {})",
          "117:     alert = RecoveryAlert(definition_json, definition_json['source'], self.config, rm)",
          "118:     alert.set_helpers(collector, cluster_configuration, MagicMock())",
          "119:     alert.set_cluster(\"c1\", \"0\", \"c6401.ambari.apache.org\")",
          "",
          "[Removed Lines]",
          "116:     rm = RecoveryManager(tempfile.mktemp(), True)",
          "",
          "[Added Lines]",
          "116:     rm = RecoveryManager(MagicMock(), True)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "871:     self.assertEquals(alert._get_reporting_text(alert.RESULT_WARNING), '{0}')",
          "872:     self.assertEquals(alert._get_reporting_text(alert.RESULT_CRITICAL), '{0}')",
          "875:     definition_json['source']['type'] = 'RECOVERY'",
          "876:     alert = RecoveryAlert(definition_json, definition_json['source'], self.config, rm)",
          "877:     self.assertEquals(alert._get_reporting_text(alert.RESULT_OK), 'No recovery operations executed for {2}{0}.')",
          "",
          "[Removed Lines]",
          "874:     rm = RecoveryManager(tempfile.mktemp())",
          "",
          "[Added Lines]",
          "874:     rm = RecoveryManager(MagicMock())",
          "",
          "---------------"
        ],
        "ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py||ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py": [
          "File: ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py -> ambari-agent/src/test/python/ambari_agent/TestRecoveryManager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:     self.assertFalse(rm.execute(\"NODEMANAGER2\"))",
          "203:   def test_recovery_required(self):",
          "205:     rm.update_config(12, 5, 1, 15, True, False, False, )",
          "206:     rm.update_recovery_config({'recoveryConfig':{'components':[",
          "207:       {'component_name': 'NODEMANAGER', 'service_name': 'YARN', 'desired_state': 'INSTALLED'}",
          "",
          "[Removed Lines]",
          "204:     rm = RecoveryManager(True, False)",
          "",
          "[Added Lines]",
          "204:     rm = RecoveryManager(MagicMock(), False)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:     rm.update_desired_status(\"NODEMANAGER\", \"STARTED\")",
          "236:     self.assertTrue(rm.requires_recovery(\"NODEMANAGER\"))",
          "240:     rm.update_current_status(\"NODEMANAGER\", \"INIT\")",
          "241:     rm.update_desired_status(\"NODEMANAGER\", \"INSTALLED\")",
          "",
          "[Removed Lines]",
          "238:     rm = RecoveryManager(True, True)",
          "",
          "[Added Lines]",
          "238:     rm = RecoveryManager(MagicMock(), True)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:   def test_recovery_required2(self):",
          "255:     rm.update_config(15, 5, 1, 16, True, False, False)",
          "256:     rm.update_recovery_config({'recoveryConfig':{'components':[",
          "257:       {'component_name': 'NODEMANAGER', 'service_name': 'YARN', 'desired_state': 'INSTALLED'}",
          "",
          "[Removed Lines]",
          "254:     rm = RecoveryManager(True, True)",
          "",
          "[Added Lines]",
          "254:     rm = RecoveryManager(MagicMock(), True)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260:     rm.update_desired_status(\"NODEMANAGER\", \"STARTED\")",
          "261:     self.assertTrue(rm.requires_recovery(\"NODEMANAGER\"))",
          "264:     rm.update_config(15, 5, 1, 16, True, False, False)",
          "265:     rm.update_recovery_config({'recoveryConfig':{'components':[",
          "266:       {'component_name': 'NODEMANAGER', 'service_name': 'YARN', 'desired_state': 'INSTALLED'}",
          "",
          "[Removed Lines]",
          "263:     rm = RecoveryManager( True, True)",
          "",
          "[Added Lines]",
          "263:     rm = RecoveryManager( MagicMock(), True)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "273:     rm.update_desired_status(\"DATANODE\", \"STARTED\")",
          "274:     self.assertFalse(rm.requires_recovery(\"DATANODE\"))",
          "277:     rm.update_config(15, 5, 1, 16, True, False, False)",
          "278:     rm.update_current_status(\"NODEMANAGER\", \"INSTALLED\")",
          "279:     rm.update_desired_status(\"NODEMANAGER\", \"STARTED\")",
          "",
          "[Removed Lines]",
          "276:     rm = RecoveryManager(True, True)",
          "",
          "[Added Lines]",
          "276:     rm = RecoveryManager(MagicMock(), True)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "346:     time_mock.side_effect = \\",
          "347:       [1000, 1001, 1104, 1105, 1106, 1807, 1808, 1809, 1810, 1811, 1812]",
          "350:     rm.update_config(5, 5, 0, 11, True, False, False)",
          "352:     command1 = copy.deepcopy(self.command)",
          "",
          "[Removed Lines]",
          "349:     rm = RecoveryManager(True)",
          "",
          "[Added Lines]",
          "349:     rm = RecoveryManager(MagicMock())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "428:   def test_reset_if_window_passed_since_last_attempt(self, time_mock):",
          "429:     time_mock.side_effect = \\",
          "430:       [1000, 1071, 1372]",
          "433:     rm.update_config(2, 5, 1, 4, True, True, False)",
          "",
          "[Removed Lines]",
          "431:     rm = RecoveryManager(True)",
          "",
          "[Added Lines]",
          "431:     rm = RecoveryManager(MagicMock())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "447:   @patch.object(RecoveryManager, \"_now_\")",
          "448:   def test_is_action_info_stale(self, time_mock):",
          "451:     rm.update_config(5, 60, 5, 16, True, False, False)",
          "453:     time_mock.return_value = 0",
          "",
          "[Removed Lines]",
          "450:     rm = RecoveryManager(True)",
          "",
          "[Added Lines]",
          "450:     rm = RecoveryManager(MagicMock())",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java||ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/ExecutionCommand.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:     String USER_LIST = \"user_list\";",
          "551:     String GROUP_LIST = \"group_list\";",
          "552:     String USER_GROUPS = \"user_groups\";",
          "553:     String NOT_MANAGED_HDFS_PATH_LIST = \"not_managed_hdfs_path_list\";",
          "554:     String REFRESH_TOPOLOGY = \"refresh_topology\";",
          "555:     String HOST_SYS_PREPPED = \"host_sys_prepped\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:     String BLUEPRINT_PROVISIONING_STATE = \"blueprint_provisioning_state\";",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_PASSWORD;",
          "25: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_URL;",
          "26: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_USERNAME;",
          "27: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.CLIENTS_TO_UPDATE_CONFIGS;",
          "28: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.CLUSTER_NAME;",
          "29: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.COMMAND_RETRY_ENABLED;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.BLUEPRINT_PROVISIONING_STATE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5743:     clusterLevelParams.putAll(getMetadataClusterLevelConfigsParams(cluster, stackId));",
          "5744:     clusterLevelParams.put(CLUSTER_NAME, cluster.getClusterName());",
          "5745:     clusterLevelParams.put(HOOKS_FOLDER, configs.getProperty(Configuration.HOOKS_FOLDER));",
          "5747:     return clusterLevelParams;",
          "5748:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5747:     clusterLevelParams.put(BLUEPRINT_PROVISIONING_STATE, cluster.getBlueprintProvisioningState().toString());",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/AmbariEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/AmbariEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/AmbariEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/events/AmbariEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     CLUSTER_PROVISIONED,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:     CLUSTER_PROVISION_STARTED,",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/ClusterProvisionStartedEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/ClusterProvisionStartedEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/ClusterProvisionStartedEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/events/ClusterProvisionStartedEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.events;",
          "23: public class ClusterProvisionStartedEvent extends AmbariEvent {",
          "25:   private final long clusterId;",
          "27:   public ClusterProvisionStartedEvent(long clusterId) {",
          "28:     super(AmbariEventType.CLUSTER_PROVISION_STARTED);",
          "29:     this.clusterId = clusterId;",
          "30:   }",
          "32:   public long getClusterId() {",
          "33:     return clusterId;",
          "34:   }",
          "35: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import javax.persistence.Table;",
          "43: import javax.persistence.TableGenerator;",
          "45: import org.apache.ambari.server.state.SecurityType;",
          "46: import org.apache.ambari.server.state.State;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:   @Column(name = \"cluster_info\", insertable = true, updatable = true)",
          "96:   private String clusterInfo = \"\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:   @Basic",
          "100:   @Enumerated(value = EnumType.STRING)",
          "101:   @Column(name = \"blueprint_provisioning_state\", insertable = true, updatable = true)",
          "102:   private BlueprintProvisioningState blueprintProvisioningState = BlueprintProvisioningState.NONE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "347:   public void setUpgradeEntity(UpgradeEntity upgradeEntity) {",
          "348:     this.upgradeEntity = upgradeEntity;",
          "349:   }",
          "350: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357:   public BlueprintProvisioningState getBlueprintProvisioningState() {",
          "358:     return blueprintProvisioningState;",
          "359:   }",
          "361:   public void setBlueprintProvisioningState(BlueprintProvisioningState blueprintProvisioningState) {",
          "362:     this.blueprintProvisioningState = blueprintProvisioningState;",
          "363:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/BlueprintProvisioningState.java||ambari-server/src/main/java/org/apache/ambari/server/state/BlueprintProvisioningState.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/BlueprintProvisioningState.java -> ambari-server/src/main/java/org/apache/ambari/server/state/BlueprintProvisioningState.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.state;",
          "21: public enum BlueprintProvisioningState {",
          "25:   NONE,",
          "29:   IN_PROGRESS,",
          "33:   FINISHED",
          "34: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java||ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java -> ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:   void setProvisioningState(State provisioningState);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:   BlueprintProvisioningState getBlueprintProvisioningState();",
          "250:   void setBlueprintProvisioningState(BlueprintProvisioningState blueprintProvisioningState);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import org.apache.ambari.server.ServiceComponentNotFoundException;",
          "57: import org.apache.ambari.server.ServiceNotFoundException;",
          "58: import org.apache.ambari.server.agent.ExecutionCommand.KeyNames;",
          "59: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "60: import org.apache.ambari.server.controller.AmbariManagementController;",
          "61: import org.apache.ambari.server.controller.AmbariSessionManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.apache.ambari.server.agent.stomp.MetadataHolder;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69: import org.apache.ambari.server.events.AmbariEvent.AmbariEventType;",
          "70: import org.apache.ambari.server.events.ClusterConfigChangedEvent;",
          "71: import org.apache.ambari.server.events.ClusterEvent;",
          "72: import org.apache.ambari.server.events.ClusterProvisionedEvent;",
          "73: import org.apache.ambari.server.events.ConfigsUpdateEvent;",
          "74: import org.apache.ambari.server.events.jpa.EntityManagerCacheInvalidationEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: import org.apache.ambari.server.events.ClusterProvisionStartedEvent;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111: import org.apache.ambari.server.orm.entities.TopologyRequestEntity;",
          "112: import org.apache.ambari.server.orm.entities.UpgradeEntity;",
          "113: import org.apache.ambari.server.security.authorization.AuthorizationException;",
          "114: import org.apache.ambari.server.state.Cluster;",
          "115: import org.apache.ambari.server.state.ClusterHealthReport;",
          "116: import org.apache.ambari.server.state.Clusters;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:   @Inject",
          "281:   private STOMPComponentsDeleteHandler STOMPComponentsDeleteHandler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:   @Inject",
          "287:   private MetadataHolder metadataHolder;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "966:     clusterEntity = clusterDAO.merge(clusterEntity);",
          "967:   }",
          "969:   @Override",
          "970:   public SecurityType getSecurityType() {",
          "971:     SecurityType securityType = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "975:   @Override",
          "976:   public BlueprintProvisioningState getBlueprintProvisioningState() {",
          "977:     ClusterEntity clusterEntity = getClusterEntity();",
          "978:     return clusterEntity.getBlueprintProvisioningState();",
          "979:   }",
          "981:   @Override",
          "982:   public void setBlueprintProvisioningState(BlueprintProvisioningState blueprintProvisioningState) {",
          "983:     ClusterEntity clusterEntity = getClusterEntity();",
          "984:     clusterEntity.setBlueprintProvisioningState(blueprintProvisioningState);",
          "985:     clusterEntity = clusterDAO.merge(clusterEntity);",
          "986:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2791:           LOG.warn(\"Failed to remove temporary configurations: {} / {}\", e.getKey(), e.getValue(), ex);",
          "2792:         }",
          "2793:       }",
          "2794:     }",
          "2795:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2813:       changeBlueprintProvisioningState(BlueprintProvisioningState.FINISHED);",
          "2814:     }",
          "2815:   }",
          "2817:   @Subscribe",
          "2818:   public void onClusterProvisionStarted(ClusterProvisionStartedEvent event) {",
          "2819:     if (event.getClusterId() == getClusterId()) {",
          "2820:       changeBlueprintProvisioningState(BlueprintProvisioningState.IN_PROGRESS);",
          "2821:     }",
          "2822:   }",
          "2824:   private void changeBlueprintProvisioningState(BlueprintProvisioningState newState) {",
          "2825:     setBlueprintProvisioningState(newState);",
          "2826:     try {",
          "2827:       metadataHolder.updateData(controller.getClusterMetadataOnConfigsUpdate(this));",
          "2828:     } catch (AmbariException e) {",
          "2829:       LOG.error(\"Metadata update failed after setting blueprint provision state to {}\", newState, e);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java||ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java -> ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: import org.apache.ambari.server.controller.spi.UnsupportedPropertyException;",
          "62: import org.apache.ambari.server.events.AmbariEvent;",
          "63: import org.apache.ambari.server.events.ClusterConfigFinishedEvent;",
          "64: import org.apache.ambari.server.events.ClusterProvisionedEvent;",
          "65: import org.apache.ambari.server.events.HostsRemovedEvent;",
          "66: import org.apache.ambari.server.events.RequestFinishedEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: import org.apache.ambari.server.events.ClusterProvisionStartedEvent;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:     ambariContext.persistInstallStateForUI(clusterName, stack.getName(), stack.getVersion());",
          "353:     clusterProvisionWithBlueprintCreateRequests.put(clusterId, logicalRequest);",
          "354:     return getRequestStatus(logicalRequest.getRequestId());",
          "355:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:     ambariEventPublisher.publish(new ClusterProvisionStartedEvent(clusterId));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.apache.ambari.server.orm.DBAccessor;",
          "36: import org.apache.ambari.server.orm.dao.DaoUtils;",
          "37: import org.apache.ambari.server.orm.entities.ServiceConfigEntity;",
          "38: import org.apache.ambari.server.state.Cluster;",
          "39: import org.apache.ambari.server.state.Clusters;",
          "40: import org.apache.ambari.server.state.Config;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   private static final String SERVICE_CONFIG_MAPPING_TABLE = \"serviceconfigmapping\";",
          "57:   private static final String CLUSTER_CONFIG_TABLE = \"clusterconfig\";",
          "59:   @Inject",
          "60:   DaoUtils daoUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:   protected static final String CLUSTERS_TABLE = \"clusters\";",
          "60:   protected static final String CLUSTERS_BLUEPRINT_PROVISIONING_STATE_COLUMN = \"blueprint_provisioning_state\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   @Override",
          "93:   protected void executeDDLUpdates() throws AmbariException, SQLException {",
          "94:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:     addBlueprintProvisioningState();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260:     dba.executeQuery(serviceConfigMappingRemoveSQL);",
          "261:     dba.executeQuery(clusterConfigRemoveSQL);",
          "262:   }",
          "263: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:   protected void addBlueprintProvisioningState() throws SQLException {",
          "269:     dbAccessor.addColumn(CLUSTERS_TABLE,",
          "270:         new DBAccessor.DBColumnInfo(CLUSTERS_BLUEPRINT_PROVISIONING_STATE_COLUMN, String.class, 255,",
          "271:             BlueprintProvisioningState.NONE, true));",
          "272:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   cluster_info VARCHAR(255) NOT NULL,",
          "59:   cluster_name VARCHAR(100) NOT NULL UNIQUE,",
          "60:   provisioning_state VARCHAR(255) NOT NULL DEFAULT 'INIT',",
          "61:   security_type VARCHAR(32) NOT NULL DEFAULT 'NONE',",
          "62:   desired_cluster_state VARCHAR(255) NOT NULL,",
          "63:   desired_stack_id BIGINT NOT NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   cluster_info VARCHAR(255) NOT NULL,",
          "79:   cluster_name VARCHAR(100) NOT NULL UNIQUE,",
          "80:   provisioning_state VARCHAR(255) NOT NULL DEFAULT 'INIT',",
          "81:   security_type VARCHAR(32) NOT NULL DEFAULT 'NONE',",
          "82:   desired_cluster_state VARCHAR(255) NOT NULL,",
          "83:   desired_stack_id BIGINT NOT NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   cluster_info VARCHAR2(255) NULL,",
          "59:   cluster_name VARCHAR2(100) NOT NULL UNIQUE,",
          "60:   provisioning_state VARCHAR2(255) DEFAULT 'INIT' NOT NULL,",
          "61:   security_type VARCHAR2(32) DEFAULT 'NONE' NOT NULL,",
          "62:   desired_cluster_state VARCHAR2(255) NULL,",
          "63:   desired_stack_id NUMBER(19) NOT NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:   blueprint_provisioning_state VARCHAR2(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   cluster_info VARCHAR(255) NOT NULL,",
          "59:   cluster_name VARCHAR(100) NOT NULL UNIQUE,",
          "60:   provisioning_state VARCHAR(255) NOT NULL DEFAULT 'INIT',",
          "61:   security_type VARCHAR(32) NOT NULL DEFAULT 'NONE',",
          "62:   desired_cluster_state VARCHAR(255) NOT NULL,",
          "63:   desired_stack_id BIGINT NOT NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   cluster_info VARCHAR(255) NOT NULL,",
          "58:   cluster_name VARCHAR(100) NOT NULL UNIQUE,",
          "59:   provisioning_state VARCHAR(255) NOT NULL DEFAULT 'INIT',",
          "60:   security_type VARCHAR(32) NOT NULL DEFAULT 'NONE',",
          "61:   desired_cluster_state VARCHAR(255) NOT NULL,",
          "62:   desired_stack_id NUMERIC(19) NOT NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   cluster_info VARCHAR(255) NOT NULL,",
          "72:   cluster_name VARCHAR(100) NOT NULL UNIQUE,",
          "73:   provisioning_state VARCHAR(255) NOT NULL DEFAULT 'INIT',",
          "74:   security_type VARCHAR(32) NOT NULL DEFAULT 'NONE',",
          "75:   desired_cluster_state VARCHAR(255) NOT NULL,",
          "76:   desired_stack_id BIGINT NOT NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java -> ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterDeployWithStartOnlyTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: import org.apache.ambari.server.controller.internal.Stack;",
          "56: import org.apache.ambari.server.controller.spi.ClusterController;",
          "57: import org.apache.ambari.server.controller.spi.ResourceProvider;",
          "58: import org.apache.ambari.server.orm.entities.TopologyLogicalRequestEntity;",
          "59: import org.apache.ambari.server.security.encryption.CredentialStoreService;",
          "60: import org.apache.ambari.server.state.Cluster;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: import org.apache.ambari.server.events.publishers.AmbariEventPublisher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:   @Mock",
          "163:   private TopologyValidatorService topologyValidatorServiceMock;",
          "166:   private final Configuration stackConfig = new Configuration(new HashMap<>(),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:   @Mock(type = MockType.NICE)",
          "166:   private AmbariEventPublisher eventPublisher;",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java -> ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartOnComponentLevelTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import org.apache.ambari.server.controller.internal.Stack;",
          "57: import org.apache.ambari.server.controller.spi.ClusterController;",
          "58: import org.apache.ambari.server.controller.spi.ResourceProvider;",
          "59: import org.apache.ambari.server.orm.entities.TopologyLogicalRequestEntity;",
          "60: import org.apache.ambari.server.security.encryption.CredentialStoreService;",
          "61: import org.apache.ambari.server.state.Cluster;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.apache.ambari.server.events.publishers.AmbariEventPublisher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:   @Mock",
          "160:   private TopologyValidatorService topologyValidatorServiceMock;",
          "162:   private final Configuration stackConfig = new Configuration(new HashMap<>(),",
          "163:     new HashMap<>());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:   @Mock(type = MockType.NICE)",
          "163:   private AmbariEventPublisher eventPublisher;",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java -> ambari-server/src/test/java/org/apache/ambari/server/topology/ClusterInstallWithoutStartTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import org.apache.ambari.server.controller.internal.Stack;",
          "57: import org.apache.ambari.server.controller.spi.ClusterController;",
          "58: import org.apache.ambari.server.controller.spi.ResourceProvider;",
          "59: import org.apache.ambari.server.orm.entities.TopologyLogicalRequestEntity;",
          "60: import org.apache.ambari.server.security.encryption.CredentialStoreService;",
          "61: import org.apache.ambari.server.state.Cluster;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import org.apache.ambari.server.events.publishers.AmbariEventPublisher;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:   @Mock",
          "162:   private TopologyValidatorService topologyValidatorServiceMock;",
          "164:   private final Configuration stackConfig = new Configuration(new HashMap<>(),",
          "165:     new HashMap<>());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:   @Mock(type = MockType.NICE)",
          "165:   private AmbariEventPublisher eventPublisher;",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java -> ambari-server/src/test/java/org/apache/ambari/server/topology/TopologyManagerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: import org.apache.ambari.server.controller.spi.ClusterController;",
          "59: import org.apache.ambari.server.controller.spi.Resource;",
          "60: import org.apache.ambari.server.controller.spi.ResourceProvider;",
          "61: import org.apache.ambari.server.events.RequestFinishedEvent;",
          "62: import org.apache.ambari.server.events.publishers.AmbariEventPublisher;",
          "63: import org.apache.ambari.server.orm.dao.SettingDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: import org.apache.ambari.server.events.ClusterProvisionStartedEvent;",
          "62: import org.apache.ambari.server.events.ClusterProvisionedEvent;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:     PowerMock.verify(System.class);",
          "379:     verify(blueprint, stack, request, group1, group2, ambariContext, logicalRequestFactory,",
          "380:         logicalRequest, configurationRequest, configurationRequest2, configurationRequest3,",
          "383:     PowerMock.reset(System.class);",
          "384:     reset(blueprint, stack, request, group1, group2, ambariContext, logicalRequestFactory,",
          "385:         logicalRequest, configurationRequest, configurationRequest2, configurationRequest3,",
          "387:   }",
          "389:   @Test",
          "",
          "[Removed Lines]",
          "381:         requestStatusResponse, executor, persistedState, clusterTopologyMock, mockFuture, settingDAO);",
          "386:         requestStatusResponse, executor, persistedState, clusterTopologyMock, mockFuture, settingDAO);",
          "",
          "[Added Lines]",
          "383:         requestStatusResponse, executor, persistedState, clusterTopologyMock, mockFuture, settingDAO, eventPublisher);",
          "388:         requestStatusResponse, executor, persistedState, clusterTopologyMock, mockFuture, settingDAO, eventPublisher);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "396:   }",
          "398:   @Test",
          "399:   public void testAddKerberosClientAtTopologyInit() throws Exception {",
          "400:     Map<ClusterTopology, List<LogicalRequest>> allRequests = new HashMap<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400:   @Test",
          "401:   public void testBlueprintProvisioningStateEvent() throws Exception {",
          "402:     expect(persistedState.getAllRequests()).andReturn(Collections.emptyMap()).anyTimes();",
          "403:     eventPublisher.publish(anyObject(ClusterProvisionStartedEvent.class));",
          "404:     expectLastCall().once();",
          "405:     replayAll();",
          "407:     topologyManager.provisionCluster(request);",
          "408:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "437:     expect(persistedState.getProvisionRequest(CLUSTER_ID)).andReturn(logicalRequest).anyTimes();",
          "438:     expect(logicalRequest.isFinished()).andReturn(true).anyTimes();",
          "439:     expect(logicalRequest.isSuccessful()).andReturn(true).anyTimes();",
          "440:     replayAll();",
          "441:     topologyManager.provisionCluster(request);",
          "442:     requestFinished();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452:     eventPublisher.publish(anyObject(ClusterProvisionedEvent.class));",
          "453:     expectLastCall().once();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "541:             configurationRequest, configurationRequest2, configurationRequest3, executor,",
          "542:             persistedState, clusterTopologyMock, securityConfigurationFactory, credentialStoreService,",
          "543:             clusterController, resourceProvider, mockFuture, requestStatusResponse, logicalRequest, settingDAO,",
          "545:   }",
          "547:   @Test(expected = InvalidTopologyException.class)",
          "",
          "[Removed Lines]",
          "544:             configureClusterTaskFactory, configureClusterTask);",
          "",
          "[Added Lines]",
          "558:             configureClusterTaskFactory, configureClusterTask, eventPublisher);",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.upgrade;",
          "21: import static org.easymock.EasyMock.anyObject;",
          "22: import static org.easymock.EasyMock.anyString;",
          "23: import static org.easymock.EasyMock.capture;",
          "24: import static org.easymock.EasyMock.createMockBuilder;",
          "25: import static org.easymock.EasyMock.createNiceMock;",
          "26: import static org.easymock.EasyMock.expect;",
          "27: import static org.easymock.EasyMock.expectLastCall;",
          "28: import static org.easymock.EasyMock.replay;",
          "29: import static org.easymock.EasyMock.startsWith;",
          "30: import static org.easymock.EasyMock.verify;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.apache.ambari.server.upgrade.UpgradeCatalog271.CLUSTERS_BLUEPRINT_PROVISIONING_STATE_COLUMN;",
          "22: import static org.apache.ambari.server.upgrade.UpgradeCatalog271.CLUSTERS_TABLE;",
          "28: import static org.easymock.EasyMock.eq;",
          "31: import static org.easymock.EasyMock.newCapture;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: import org.apache.ambari.server.controller.AmbariManagementController;",
          "38: import org.apache.ambari.server.controller.AmbariManagementControllerImpl;",
          "39: import org.apache.ambari.server.orm.DBAccessor;",
          "40: import org.apache.ambari.server.state.Cluster;",
          "41: import org.apache.ambari.server.state.Clusters;",
          "42: import org.apache.ambari.server.state.Config;",
          "43: import org.apache.ambari.server.state.Service;",
          "44: import org.apache.ambari.server.state.StackId;",
          "45: import org.easymock.Capture;",
          "46: import org.easymock.EasyMock;",
          "47: import org.easymock.EasyMockSupport;",
          "48: import org.junit.Assert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "51: import org.easymock.CaptureType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: public class UpgradeCatalog271Test {",
          "55:   @Test",
          "56:   public void testExecuteDMLUpdates() throws Exception {",
          "57:     Method addNewConfigurationsFromXml = AbstractUpgradeCatalog.class.getDeclaredMethod(\"addNewConfigurationsFromXml\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:   @Test",
          "62:   public void testExecuteDDLUpdates() throws Exception {",
          "63:     EasyMockSupport easyMockSupport = new EasyMockSupport();",
          "64:     Injector injector = easyMockSupport.createNiceMock(Injector.class);",
          "65:     DBAccessor dbAccessor = easyMockSupport.createNiceMock(DBAccessor.class);",
          "67:     Capture<DBAccessor.DBColumnInfo> blueprintProvisioningStateColumnCapture = newCapture(CaptureType.ALL);",
          "68:     dbAccessor.addColumn(eq(CLUSTERS_TABLE), capture(blueprintProvisioningStateColumnCapture));",
          "69:     expectLastCall().once();",
          "71:     replay(dbAccessor, injector);",
          "73:     UpgradeCatalog271 upgradeCatalog271 = new UpgradeCatalog271(injector);",
          "74:     upgradeCatalog271.dbAccessor = dbAccessor;",
          "75:     upgradeCatalog271.executeDDLUpdates();",
          "77:     DBAccessor.DBColumnInfo capturedBlueprintProvisioningStateColumn =",
          "78:         blueprintProvisioningStateColumnCapture.getValue();",
          "79:     Assert.assertEquals(CLUSTERS_BLUEPRINT_PROVISIONING_STATE_COLUMN,",
          "80:         capturedBlueprintProvisioningStateColumn.getName());",
          "81:     Assert.assertEquals(BlueprintProvisioningState.NONE, capturedBlueprintProvisioningStateColumn.getDefaultValue());",
          "82:     Assert.assertEquals(String.class, capturedBlueprintProvisioningStateColumn.getType());",
          "84:     easyMockSupport.verifyAll();",
          "86:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb69172a701aa05eb07ed1c1ff9b6ba51d245311",
      "candidate_info": {
        "commit_hash": "cb69172a701aa05eb07ed1c1ff9b6ba51d245311",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/cb69172a701aa05eb07ed1c1ff9b6ba51d245311",
        "files": [
          "ambari-server/src/main/resources/common-services/ZEPPELIN/0.6.0/alerts.json",
          "ambari-server/src/main/resources/common-services/ZEPPELIN/0.6.0/package/scripts/alerts/alert_check_zeppelin.py",
          "ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/alerts.json",
          "ambari-server/src/main/resources/common-services/ZEPPELIN/0.7.0/package/scripts/alerts/alert_check_zeppelin.py",
          "src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py"
        ],
        "message": "[AMBARI-24327] Zeppelin server is shown as started even if it fails during start up.(vbrodetskyi)",
        "before_after_code_files": [
          "src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py||src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py||src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py": [
          "File: src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py -> src/main/resources/stacks/HDP/3.0/services/ZEPPELIN/package/scripts/alerts/alert_check_zeppelin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"",
          "2: Licensed to the Apache Software Foundation (ASF) under one",
          "3: or more contributor license agreements.  See the NOTICE file",
          "4: distributed with this work for additional information",
          "5: regarding copyright ownership.  The ASF licenses this file",
          "6: to you under the Apache License, Version 2.0 (the",
          "7: \"License\"); you may not use this file except in compliance",
          "8: with the License.  You may obtain a copy of the License at",
          "10:     http://www.apache.org/licenses/LICENSE-2.0",
          "12: Unless required by applicable law or agreed to in writing, software",
          "13: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: See the License for the specific language governing permissions and",
          "16: limitations under the License.",
          "18: \"\"\"",
          "20: import socket",
          "22: from resource_management.core.exceptions import ComponentIsNotRunning",
          "23: from ambari_commons.os_family_impl import OsFamilyFuncImpl, OsFamilyImpl",
          "24: from resource_management.libraries.functions import get_kinit_path",
          "25: from resource_management.core.resources import Execute",
          "27: ZEPPELIN_PORT_KEY = '{{zeppelin-site/zeppelin.server.port}}'",
          "28: ZEPPELIN_PORT_SSL_KEY = '{{zeppelin-site/zeppelin.server.ssl.port}}'",
          "30: SECURITY_ENABLED_KEY = '{{cluster-env/security_enabled}}'",
          "31: ZEPPELIN_KEYTAB_KEY = '{{zeppelin-site/zeppelin.server.kerberos.keytab}}'",
          "32: ZEPPELIN_PRINCIPAL_KEY = '{{zeppelin-site/zeppelin.server.kerberos.principal}}'",
          "33: ZEPPELIN_USER_KEY = '{{zeppelin-env/zeppelin_user}}'",
          "35: UI_SSL_ENABLED = '{{zeppelin-site/zeppelin.ssl}}'",
          "37: KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY = '{{kerberos-env/executable_search_paths}}'",
          "39: RESULT_CODE_OK = 'OK'",
          "40: RESULT_CODE_CRITICAL = 'CRITICAL'",
          "41: RESULT_CODE_UNKNOWN = 'UNKNOWN'",
          "43: @OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)",
          "44: def get_tokens():",
          "45:   \"\"\"",
          "46:   Returns a tuple of tokens in the format {{site/property}} that will be used",
          "47:   to build the dictionary passed into execute",
          "48:   \"\"\"",
          "49:   return (ZEPPELIN_USER_KEY, UI_SSL_ENABLED, SECURITY_ENABLED_KEY, ZEPPELIN_KEYTAB_KEY, ZEPPELIN_PRINCIPAL_KEY,",
          "50:           KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY, ZEPPELIN_PORT_KEY, ZEPPELIN_PORT_SSL_KEY)",
          "53: @OsFamilyFuncImpl(os_family=OsFamilyImpl.DEFAULT)",
          "54: def execute(configurations={}, parameters={}, host_name=None):",
          "56:   if configurations is None:",
          "57:     return ('UNKNOWN', ['There were no configurations supplied to the script.'])",
          "59:   zeppelin_user = configurations[ZEPPELIN_USER_KEY]",
          "61:   ui_ssl_enabled = None",
          "62:   if UI_SSL_ENABLED in configurations:",
          "63:     ui_ssl_enabled = configurations[UI_SSL_ENABLED]",
          "65:   zeppelin_port = None",
          "66:   if UI_SSL_ENABLED in configurations:",
          "67:     zeppelin_port = configurations[ZEPPELIN_PORT_SSL_KEY]",
          "69:   security_enabled = False",
          "70:   if SECURITY_ENABLED_KEY in configurations:",
          "71:     security_enabled = str(configurations[SECURITY_ENABLED_KEY]).upper() == 'TRUE'",
          "73:   if host_name is None:",
          "74:     host_name = socket.getfqdn()",
          "76:   zeppelin_kerberos_keytab = None",
          "77:   if ZEPPELIN_KEYTAB_KEY in configurations:",
          "78:     zeppelin_kerberos_keytab = configurations[ZEPPELIN_KEYTAB_KEY]",
          "80:   zeppelin_principal = None",
          "81:   if ZEPPELIN_PRINCIPAL_KEY in configurations:",
          "82:     zeppelin_principal = configurations[ZEPPELIN_PRINCIPAL_KEY]",
          "83:     zeppelin_principal = zeppelin_principal.replace('_HOST',host_name.lower())",
          "85:   if KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY in configurations:",
          "86:     kerberos_executable_search_paths = configurations[KERBEROS_EXECUTABLE_SEARCH_PATHS_KEY]",
          "87:   else:",
          "88:     kerberos_executable_search_paths = None",
          "90:   kinit_path_local = get_kinit_path(kerberos_executable_search_paths)",
          "92:   try:",
          "93:     if security_enabled:",
          "94:       kinit_cmd = format(\"{kinit_path_local} -kt {zeppelin_kerberos_keytab} {zeppelin_principal}; \")",
          "95:       Execute(kinit_cmd, user=zeppelin_user)",
          "97:     scheme = \"https\" if ui_ssl_enabled else \"http\"",
          "98:     Execute(format(\"curl -s -o /dev/null -w'%{{http_code}}' --negotiate -u: -k {scheme}://{host_name}:{zeppelin_port}/api/version | grep 200\"),",
          "99:             tries = 10,",
          "100:             try_sleep=3,",
          "101:             user=zeppelin_user,",
          "102:             logoutput=True)",
          "103:   except ComponentIsNotRunning as ex:",
          "104:     return (RESULT_CODE_CRITICAL, [str(ex)])",
          "105:   except:",
          "106:     return (RESULT_CODE_CRITICAL, [\"Zeppelin is not running\"])",
          "108:   return (RESULT_CODE_OK, [\"Successful connection to Zeppelin\"])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d930ad4faa5898d992fb0055e86a261d31195924",
      "candidate_info": {
        "commit_hash": "d930ad4faa5898d992fb0055e86a261d31195924",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/d930ad4faa5898d992fb0055e86a261d31195924",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "ambari-server/src/main/resources/common-services/KAFKA/0.8.1/package/scripts/params.py",
          "ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/scripts/params.py",
          "ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/templates/input.config-ranger.json.j2",
          "ambari-server/src/main/resources/common-services/RANGER/0.5.0/configuration/ranger-ugsync-site.xml",
          "ambari-server/src/main/resources/common-services/RANGER/0.7.0/configuration/ranger-admin-site.xml",
          "ambari-server/src/main/resources/common-services/RANGER/0.7.0/configuration/ranger-env.xml",
          "ambari-server/src/main/resources/common-services/RANGER_KMS/0.5.0.2.3/configuration/kms-env.xml",
          "ambari-server/src/main/resources/common-services/YARN/2.1.0.2.0/package/scripts/params_linux.py",
          "ambari-server/src/main/resources/stacks/HDP/2.3/services/RANGER_KMS/themes/theme_version_1.json",
          "ambari-server/src/main/resources/stacks/HDP/2.3/services/stack_advisor.py",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java",
          "ambari-server/src/test/python/stacks/2.3/common/test_stack_advisor.py",
          "ambari-server/src/test/python/stacks/2.5/configs/ranger-admin-default.json",
          "ambari-server/src/test/python/stacks/2.5/configs/ranger-admin-secured.json",
          "ambari-server/src/test/python/stacks/2.6/configs/ranger-admin-default.json",
          "ambari-server/src/test/python/stacks/2.6/configs/ranger-admin-secured.json"
        ],
        "message": "AMBARI-24352 Updating Ranger and Ranger KMS configs during Ambari upgrade (mugdha) (#1878)\n\n* AMBARI-24352 Updating Ranger and Ranger KMS configs during Ambari upgrade (mugdha)\n\n* AMBARI-24352 Updating Ranger and Ranger KMS configs during Ambari upgrade. Minor UT fix. (mugdha)\n\n* AMBARI-24352 Updating Ranger and Ranger KMS configs during Ambari upgrade. Adding Doc Comment. (mugdha)\n\n* AMBARI-24352 Updating Ranger and Ranger KMS configs during Ambari upgrade. Adding logic for fetching port from existing db conn string. (mugdha)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "ambari-server/src/main/resources/common-services/KAFKA/0.8.1/package/scripts/params.py||ambari-server/src/main/resources/common-services/KAFKA/0.8.1/package/scripts/params.py",
          "ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/scripts/params.py||ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/scripts/params.py",
          "ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/templates/input.config-ranger.json.j2||ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/templates/input.config-ranger.json.j2",
          "ambari-server/src/main/resources/common-services/YARN/2.1.0.2.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/YARN/2.1.0.2.0/package/scripts/params_linux.py",
          "ambari-server/src/main/resources/stacks/HDP/2.3/services/stack_advisor.py||ambari-server/src/main/resources/stacks/HDP/2.3/services/stack_advisor.py",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java",
          "ambari-server/src/test/python/stacks/2.3/common/test_stack_advisor.py||ambari-server/src/test/python/stacks/2.3/common/test_stack_advisor.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:       catalogBinder.addBinding().to(UpgradeCatalog261.class);",
          "190:       catalogBinder.addBinding().to(UpgradeCatalog262.class);",
          "191:       catalogBinder.addBinding().to(UpgradeCatalog270.class);",
          "192:       catalogBinder.addBinding().to(UpdateAlertScriptPaths.class);",
          "193:       catalogBinder.addBinding().to(FinalUpgradeCatalog.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192:       catalogBinder.addBinding().to(UpgradeCatalog271.class);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog271.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.ambari.server.upgrade;",
          "20: import java.sql.SQLException;",
          "21: import java.util.HashMap;",
          "22: import java.util.Map;",
          "23: import java.util.Set;",
          "24: import java.util.regex.Matcher;",
          "25: import java.util.regex.Pattern;",
          "27: import org.apache.ambari.server.AmbariException;",
          "28: import org.apache.ambari.server.controller.AmbariManagementController;",
          "29: import org.apache.ambari.server.orm.dao.DaoUtils;",
          "30: import org.apache.ambari.server.state.Cluster;",
          "31: import org.apache.ambari.server.state.Clusters;",
          "32: import org.apache.ambari.server.state.Config;",
          "34: import org.slf4j.Logger;",
          "35: import org.slf4j.LoggerFactory;",
          "37: import com.google.common.collect.Sets;",
          "38: import com.google.inject.Inject;",
          "39: import com.google.inject.Injector;",
          "41: public class UpgradeCatalog271 extends AbstractUpgradeCatalog {",
          "46:   private static final Logger LOG = LoggerFactory.getLogger(UpgradeCatalog271.class);",
          "48:   @Inject",
          "49:   DaoUtils daoUtils;",
          "56:   @Inject",
          "57:   public UpgradeCatalog271(Injector injector) {",
          "58:     super(injector);",
          "59:     daoUtils = injector.getInstance(DaoUtils.class);",
          "60:   }",
          "65:   @Override",
          "66:   public String getTargetVersion() {",
          "67:     return \"2.7.1\";",
          "68:   }",
          "73:   @Override",
          "74:   public String getSourceVersion() {",
          "75:     return \"2.7.0\";",
          "76:   }",
          "81:   @Override",
          "82:   protected void executeDDLUpdates() throws AmbariException, SQLException {",
          "83:   }",
          "88:   @Override",
          "89:   protected void executePreDMLUpdates() throws AmbariException, SQLException {",
          "90:   }",
          "95:   @Override",
          "96:   protected void executeDMLUpdates() throws AmbariException, SQLException {",
          "97:     addNewConfigurationsFromXml();",
          "98:     updateRangerLogDirConfigs();",
          "99:     updateRangerKmsDbUrl();",
          "100:   }",
          "106:   protected void updateRangerLogDirConfigs() throws AmbariException {",
          "107:     AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);",
          "108:     Clusters clusters = ambariManagementController.getClusters();",
          "109:     if (clusters != null) {",
          "110:       Map<String, Cluster> clusterMap = clusters.getClusters();",
          "111:       if (clusterMap != null && !clusterMap.isEmpty()) {",
          "112:         for (final Cluster cluster : clusterMap.values()) {",
          "113:           Set<String> installedServices = cluster.getServices().keySet();",
          "114:           if (installedServices.contains(\"RANGER\")) {",
          "115:             Config rangerEnvConfig = cluster.getDesiredConfigByType(\"ranger-env\");",
          "116:             Config rangerAdminSiteConfig = cluster.getDesiredConfigByType(\"ranger-admin-site\");",
          "117:             Config rangerUgsyncSiteConfig = cluster.getDesiredConfigByType(\"ranger-ugsync-site\");",
          "118:             if (rangerEnvConfig != null) {",
          "119:               String rangerAdminLogDir = rangerEnvConfig.getProperties().get(\"ranger_admin_log_dir\");",
          "120:               String rangerUsersyncLogDir = rangerEnvConfig.getProperties().get(\"ranger_usersync_log_dir\");",
          "121:               if (rangerAdminLogDir != null && rangerAdminSiteConfig != null) {",
          "122:                 Map<String, String> newProperty = new HashMap<String, String>();",
          "123:                 newProperty.put(\"ranger.logs.base.dir\", rangerAdminLogDir);",
          "124:                 updateConfigurationPropertiesForCluster(cluster, \"ranger-admin-site\", newProperty, true, false);",
          "125:               }",
          "126:               if (rangerUsersyncLogDir != null && rangerUgsyncSiteConfig != null && rangerUgsyncSiteConfig.getProperties().containsKey(\"ranger.usersync.logdir\")) {",
          "127:                 Map<String, String> updateProperty = new HashMap<String, String>();",
          "128:                 updateProperty.put(\"ranger.usersync.logdir\", rangerUsersyncLogDir);",
          "129:                 updateConfigurationPropertiesForCluster(cluster, \"ranger-ugsync-site\", updateProperty, true, false);",
          "130:               }",
          "131:               Set<String> removeProperties = Sets.newHashSet(\"ranger_admin_log_dir\", \"ranger_usersync_log_dir\");",
          "132:               removeConfigurationPropertiesFromCluster(cluster, \"ranger-env\", removeProperties);",
          "133:             }",
          "134:           }",
          "135:         }",
          "136:       }",
          "137:     }",
          "139:   }",
          "146:   protected void updateRangerKmsDbUrl() throws AmbariException {",
          "147:     AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);",
          "148:     Clusters clusters = ambariManagementController.getClusters();",
          "149:     if (clusters != null) {",
          "150:       Map<String, Cluster> clusterMap = clusters.getClusters();",
          "151:       if (clusterMap != null && !clusterMap.isEmpty()) {",
          "152:         for (final Cluster cluster : clusterMap.values()) {",
          "153:           Set<String> installedServices = cluster.getServices().keySet();",
          "154:           if (installedServices.contains(\"RANGER_KMS\")) {",
          "155:             Config rangerKmsPropertiesConfig = cluster.getDesiredConfigByType(\"kms-properties\");",
          "156:             Config rangerKmsEnvConfig = cluster.getDesiredConfigByType(\"kms-env\");",
          "157:             Config rangerKmsDbksConfig = cluster.getDesiredConfigByType(\"dbks-site\");",
          "158:             if (rangerKmsPropertiesConfig != null) {",
          "159:               String dbFlavor = rangerKmsPropertiesConfig.getProperties().get(\"DB_FLAVOR\");",
          "160:               String dbHost = rangerKmsPropertiesConfig.getProperties().get(\"db_host\");",
          "161:               String rangerKmsRootDbUrl = \"\";",
          "162:               if (dbFlavor != null && dbHost != null) {",
          "163:                 String port = \"\";",
          "164:                 if (rangerKmsDbksConfig != null) {",
          "165:                   String rangerKmsDbUrl = rangerKmsDbksConfig.getProperties().get(\"ranger.ks.jpa.jdbc.url\");",
          "166:                   if (rangerKmsDbUrl != null) {",
          "167:                     Pattern pattern = Pattern.compile(\"(:[0-9]+)\");",
          "168:                     Matcher matcher = pattern.matcher(rangerKmsDbUrl);",
          "169:                     if (matcher.find()) {",
          "170:                       port = matcher.group();",
          "171:                     }",
          "172:                   }",
          "173:                 }",
          "174:                 if (\"MYSQL\".equalsIgnoreCase(dbFlavor)) {",
          "175:                   rangerKmsRootDbUrl = \"jdbc:mysql://\" + dbHost + (!port.equalsIgnoreCase(\"\")?port:\":3306\");",
          "176:                 } else if (\"ORACLE\".equalsIgnoreCase(dbFlavor)) {",
          "177:                   rangerKmsRootDbUrl = \"jdbc:oracle:thin:@//\" + dbHost + (!port.equalsIgnoreCase(\"\")?port:\":1521\");",
          "178:                 } else if (\"POSTGRES\".equalsIgnoreCase(dbFlavor)) {",
          "179:                   rangerKmsRootDbUrl = \"jdbc:postgresql://\" + dbHost + (!port.equalsIgnoreCase(\"\")?port:\":5432\") + \"/postgres\";",
          "180:                 } else if (\"MSSQL\".equalsIgnoreCase(dbFlavor)) {",
          "181:                   rangerKmsRootDbUrl = \"jdbc:sqlserver://\" + dbHost + (!port.equalsIgnoreCase(\"\")?port:\":1433\");",
          "182:                 } else if (\"SQLA\".equalsIgnoreCase(dbFlavor)) {",
          "183:                   rangerKmsRootDbUrl = \"jdbc:sqlanywhere:host=\" + dbHost + (!port.equalsIgnoreCase(\"\")?port:\":2638\") + \";\";",
          "184:                 }",
          "185:                 Map<String, String> newProperty = new HashMap<String, String>();",
          "186:                 newProperty.put(\"ranger_kms_privelege_user_jdbc_url\", rangerKmsRootDbUrl);",
          "187:                 if (rangerKmsEnvConfig != null) {",
          "188:                   updateConfigurationPropertiesForCluster(cluster, \"kms-env\", newProperty, true, false);",
          "189:                 }",
          "190:               }",
          "191:             }",
          "192:           }",
          "193:         }",
          "194:       }",
          "195:     }",
          "196:   }",
          "198: }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/KAFKA/0.8.1/package/scripts/params.py||ambari-server/src/main/resources/common-services/KAFKA/0.8.1/package/scripts/params.py": [
          "File: ambari-server/src/main/resources/common-services/KAFKA/0.8.1/package/scripts/params.py -> ambari-server/src/main/resources/common-services/KAFKA/0.8.1/package/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "209: # ambari-server hostname",
          "210: ambari_server_hostname = config['ambariLevelParams']['ambari_server_host']",
          "214: # ranger kafka plugin enabled property",
          "215: enable_ranger_kafka = default(\"configurations/ranger-kafka-plugin-properties/ranger-kafka-plugin-enabled\", \"No\")",
          "216: enable_ranger_kafka = True if enable_ranger_kafka.lower() == 'yes' else False",
          "",
          "[Removed Lines]",
          "212: ranger_admin_log_dir = default(\"/configurations/ranger-env/ranger_admin_log_dir\",\"/var/log/ranger/admin\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/scripts/params.py||ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/scripts/params.py": [
          "File: ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/scripts/params.py -> ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/scripts/params.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: unix_user  = config['configurations']['ranger-env']['ranger_user']",
          "129: unix_group = config['configurations']['ranger-env']['ranger_group']",
          "130: ranger_pid_dir = default(\"/configurations/ranger-env/ranger_pid_dir\", \"/var/run/ranger\")",
          "133: ranger_admin_default_file = format('{ranger_conf}/ranger-admin-default-site.xml')",
          "134: security_app_context_file = format('{ranger_conf}/security-applicationContext.xml')",
          "135: ranger_ugsync_default_file = format('{ranger_ugsync_conf}/ranger-ugsync-default.xml')",
          "",
          "[Removed Lines]",
          "131: usersync_log_dir = default(\"/configurations/ranger-env/ranger_usersync_log_dir\", \"/var/log/ranger/usersync\")",
          "132: admin_log_dir = default(\"/configurations/ranger-env/ranger_admin_log_dir\", \"/var/log/ranger/admin\")",
          "",
          "[Added Lines]",
          "131: old_usersync_log_dir = default(\"/configurations/ranger-env/ranger_usersync_log_dir\", \"/var/log/ranger/usersync\")",
          "132: old_admin_log_dir = default(\"/configurations/ranger-env/ranger_admin_log_dir\", \"/var/log/ranger/admin\")",
          "133: usersync_log_dir = default(\"/configurations/ranger-ugsync-site/ranger.usersync.logdir\", old_usersync_log_dir)",
          "134: admin_log_dir = default(\"/configurations/ranger-admin-site/ranger.logs.base.dir\", old_admin_log_dir)",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/templates/input.config-ranger.json.j2||ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/templates/input.config-ranger.json.j2": [
          "File: ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/templates/input.config-ranger.json.j2 -> ambari-server/src/main/resources/common-services/RANGER/0.4.0/package/templates/input.config-ranger.json.j2",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     {",
          "21:       \"type\":\"ranger_admin\",",
          "22:       \"rowtype\":\"service\",",
          "24:     },",
          "25:     {",
          "26:       \"type\":\"ranger_dbpatch\",",
          "27:       \"is_enabled\":\"true\",",
          "29:     },",
          "30:     {",
          "31:       \"type\":\"ranger_usersync\",",
          "32:       \"rowtype\":\"service\",",
          "34:     }",
          "35:   ],",
          "36:   \"filter\":[",
          "",
          "[Removed Lines]",
          "23:       \"path\":\"{{default('/configurations/ranger-env/ranger_admin_log_dir', '/var/log/ranger/admin')}}/xa_portal.log\"",
          "28:       \"path\":\"{{default('/configurations/ranger-env/ranger_admin_log_dir', '/var/log/ranger/admin')}}/ranger_db_patch.log\"",
          "33:       \"path\":\"{{default('/configurations/ranger-env/ranger_usersync_log_dir', '/var/log/ranger/usersync')}}/usersync.log\"",
          "",
          "[Added Lines]",
          "23:       \"path\":\"{{default('/configurations/ranger-admin-site/ranger.logs.base.dir', '/var/log/ranger/admin')}}/xa_portal.log\"",
          "28:       \"path\":\"{{default('/configurations/ranger-admin-site/ranger.logs.base.dir', '/var/log/ranger/admin')}}/ranger_db_patch.log\"",
          "33:       \"path\":\"{{default('/configurations/ranger-ugsync-site/ranger.usersync.logdir', '/var/log/ranger/usersync')}}/usersync.log\"",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/common-services/YARN/2.1.0.2.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/YARN/2.1.0.2.0/package/scripts/params_linux.py": [
          "File: ambari-server/src/main/resources/common-services/YARN/2.1.0.2.0/package/scripts/params_linux.py -> ambari-server/src/main/resources/common-services/YARN/2.1.0.2.0/package/scripts/params_linux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "453: else:",
          "454:   namenode_hostname = config['clusterHostInfo']['namenode_hosts'][0]",
          "458: scheme = 'http' if not yarn_https_on else 'https'",
          "459: yarn_rm_address = config['configurations']['yarn-site']['yarn.resourcemanager.webapp.address'] if not yarn_https_on else config['configurations']['yarn-site']['yarn.resourcemanager.webapp.https.address']",
          "460: rm_active_port = rm_https_port if yarn_https_on else rm_port",
          "",
          "[Removed Lines]",
          "456: ranger_admin_log_dir = default(\"/configurations/ranger-env/ranger_admin_log_dir\",\"/var/log/ranger/admin\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/stacks/HDP/2.3/services/stack_advisor.py||ambari-server/src/main/resources/stacks/HDP/2.3/services/stack_advisor.py": [
          "File: ambari-server/src/main/resources/stacks/HDP/2.3/services/stack_advisor.py -> ambari-server/src/main/resources/stacks/HDP/2.3/services/stack_advisor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "443:     security_enabled = self.isSecurityEnabled(services)",
          "444:     putRangerKmsSiteProperty = self.putProperty(configurations, \"kms-site\", services)",
          "445:     putRangerKmsSitePropertyAttribute = self.putPropertyAttribute(configurations, \"kms-site\")",
          "447:     if 'kms-properties' in services['configurations'] and ('DB_FLAVOR' in services['configurations']['kms-properties']['properties']):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "446:     putRangerKmsEnvProperty = self.putProperty(configurations, \"kms-env\", services)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470:         for key in rangerKmsDbProperties:",
          "471:           putRangerKmsDbksProperty(key, rangerKmsDbProperties.get(key))",
          "473:     if kmsEnvProperties and self.checkSiteProperties(kmsEnvProperties, 'kms_user') and 'KERBEROS' in servicesList:",
          "474:       kmsUser = kmsEnvProperties['kms_user']",
          "475:       kmsUserOld = self.getOldValue(services, 'kms-env', 'kms_user')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "474:     if 'kms-properties' in services['configurations'] and ('DB_FLAVOR' in services['configurations']['kms-properties']['properties']) \\",
          "475:       and ('db_host' in services['configurations']['kms-properties']['properties']):",
          "477:       rangerKmsDbFlavor = services['configurations'][\"kms-properties\"][\"properties\"][\"DB_FLAVOR\"]",
          "478:       rangerKmsDbHost =   services['configurations'][\"kms-properties\"][\"properties\"][\"db_host\"]",
          "480:       ranger_kms_db_privelege_url_dict = {",
          "481:         'MYSQL': {'ranger_kms_privelege_user_jdbc_url': 'jdbc:mysql://' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost)},",
          "482:         'ORACLE': {'ranger_kms_privelege_user_jdbc_url': 'jdbc:oracle:thin:@' + self.getOracleDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost, None)},",
          "483:         'POSTGRES': {'ranger_kms_privelege_user_jdbc_url': 'jdbc:postgresql://' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost) + '/postgres'},",
          "484:         'MSSQL': {'ranger_kms_privelege_user_jdbc_url': 'jdbc:sqlserver://' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost) + ';'},",
          "485:         'SQLA': {'ranger_kms_privelege_user_jdbc_url': 'jdbc:sqlanywhere:host=' + self.getDBConnectionHostPort(rangerKmsDbFlavor, rangerKmsDbHost) + ';'}",
          "486:       }",
          "488:       rangerKmsPrivelegeDbProperties = ranger_kms_db_privelege_url_dict.get(rangerKmsDbFlavor, ranger_kms_db_privelege_url_dict['MYSQL'])",
          "489:       for key in rangerKmsPrivelegeDbProperties:",
          "490:         putRangerKmsEnvProperty(key, rangerKmsPrivelegeDbProperties.get(key))",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog271Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.server.upgrade;",
          "21: import static org.easymock.EasyMock.anyObject;",
          "22: import static org.easymock.EasyMock.anyString;",
          "23: import static org.easymock.EasyMock.capture;",
          "24: import static org.easymock.EasyMock.createMockBuilder;",
          "25: import static org.easymock.EasyMock.createNiceMock;",
          "26: import static org.easymock.EasyMock.expect;",
          "27: import static org.easymock.EasyMock.expectLastCall;",
          "28: import static org.easymock.EasyMock.replay;",
          "29: import static org.easymock.EasyMock.verify;",
          "31: import java.lang.reflect.Method;",
          "32: import java.util.Collections;",
          "33: import java.util.HashMap;",
          "34: import java.util.Map;",
          "36: import org.apache.ambari.server.controller.AmbariManagementController;",
          "37: import org.apache.ambari.server.controller.AmbariManagementControllerImpl;",
          "38: import org.apache.ambari.server.state.Cluster;",
          "39: import org.apache.ambari.server.state.Clusters;",
          "40: import org.apache.ambari.server.state.Config;",
          "41: import org.apache.ambari.server.state.Service;",
          "42: import org.apache.ambari.server.state.StackId;",
          "43: import org.easymock.Capture;",
          "44: import org.easymock.EasyMock;",
          "45: import org.easymock.EasyMockSupport;",
          "46: import org.junit.Assert;",
          "47: import org.junit.Test;",
          "49: import com.google.inject.Injector;",
          "51: public class UpgradeCatalog271Test {",
          "53:   @Test",
          "54:   public void testExecuteDMLUpdates() throws Exception {",
          "55:     Method addNewConfigurationsFromXml = AbstractUpgradeCatalog.class.getDeclaredMethod(\"addNewConfigurationsFromXml\");",
          "56:     Method updateRangerLogDirConfigs = UpgradeCatalog271.class.getDeclaredMethod(\"updateRangerLogDirConfigs\");",
          "57:     Method updateRangerKmsDbUrl = UpgradeCatalog271.class.getDeclaredMethod(\"updateRangerKmsDbUrl\");",
          "59:     UpgradeCatalog271 upgradeCatalog271 = createMockBuilder(UpgradeCatalog271.class)",
          "60:       .addMockedMethod(updateRangerKmsDbUrl)",
          "61:       .addMockedMethod(updateRangerLogDirConfigs)",
          "62:       .addMockedMethod(addNewConfigurationsFromXml)",
          "63:       .createMock();",
          "65:     upgradeCatalog271.addNewConfigurationsFromXml();",
          "66:     expectLastCall().once();",
          "68:     upgradeCatalog271.updateRangerLogDirConfigs();",
          "69:     expectLastCall().once();",
          "71:     upgradeCatalog271.updateRangerKmsDbUrl();",
          "72:     expectLastCall().once();",
          "74:     replay(upgradeCatalog271);",
          "75:     upgradeCatalog271.executeDMLUpdates();",
          "76:     verify(upgradeCatalog271);",
          "77:   }",
          "79:   @Test",
          "80:   public void testUpdateRangerLogDirConfigs() throws Exception {",
          "82:     Map<String, Service> installedServices = new HashMap<String, Service>() {",
          "83:       {",
          "84:         put(\"RANGER\", null);",
          "85:       }",
          "86:     };",
          "88:     Map<String, String> rangerEnvConfig = new HashMap<String, String>() {",
          "89:       {",
          "90:         put(\"ranger_admin_log_dir\", \"/var/log/ranger/admin\");",
          "91:         put(\"ranger_usersync_log_dir\", \"/var/log/ranger/usersync\");",
          "92:       }",
          "93:     };",
          "95:     Map<String, String> oldRangerUgsyncSiteConfig = new HashMap<String, String>() {",
          "96:       {",
          "97:         put(\"ranger.usersync.logdir\", \"{{usersync_log_dir}}\");",
          "98:       }",
          "99:     };",
          "101:     EasyMockSupport easyMockSupport = new EasyMockSupport();",
          "103:     Clusters clusters = easyMockSupport.createNiceMock(Clusters.class);",
          "104:     final Cluster cluster = easyMockSupport.createNiceMock(Cluster.class);",
          "106:     Injector injector = easyMockSupport.createNiceMock(Injector.class);",
          "107:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "108:       .addMockedMethod(\"createConfiguration\")",
          "109:       .addMockedMethod(\"getClusters\", new Class[] { })",
          "110:       .addMockedMethod(\"createConfig\")",
          "111:       .createNiceMock();",
          "113:     expect(injector.getInstance(AmbariManagementController.class)).andReturn(controller).anyTimes();",
          "114:     expect(controller.getClusters()).andReturn(clusters).anyTimes();",
          "116:     expect(clusters.getClusters()).andReturn(new HashMap<String, Cluster>() {{",
          "117:       put(\"normal\", cluster);",
          "118:     }}).once();",
          "119:     expect(cluster.getClusterName()).andReturn(\"cl1\").anyTimes();",
          "120:     expect(cluster.getServices()).andReturn(installedServices).atLeastOnce();",
          "122:     Config mockRangerEnvConfig = easyMockSupport.createNiceMock(Config.class);",
          "123:     expect(cluster.getDesiredConfigByType(\"ranger-env\")).andReturn(mockRangerEnvConfig).atLeastOnce();",
          "124:     expect(mockRangerEnvConfig.getProperties()).andReturn(rangerEnvConfig).anyTimes();",
          "126:     Config mockRangerAdminSiteConfig = easyMockSupport.createNiceMock(Config.class);",
          "127:     expect(cluster.getDesiredConfigByType(\"ranger-admin-site\")).andReturn(mockRangerAdminSiteConfig).atLeastOnce();",
          "128:     expect(mockRangerAdminSiteConfig.getProperties()).andReturn(Collections.emptyMap()).anyTimes();",
          "130:     Config mockRangerUgsyncSiteConfig = easyMockSupport.createNiceMock(Config.class);",
          "131:     expect(cluster.getDesiredConfigByType(\"ranger-ugsync-site\")).andReturn(mockRangerUgsyncSiteConfig).atLeastOnce();",
          "132:     expect(mockRangerUgsyncSiteConfig.getProperties()).andReturn(oldRangerUgsyncSiteConfig).anyTimes();",
          "134:     Capture<Map> rangerAdminpropertiesCapture = EasyMock.newCapture();",
          "135:     expect(controller.createConfig(anyObject(Cluster.class), anyObject(StackId.class), anyString(), capture(rangerAdminpropertiesCapture), anyString(),",
          "136:       anyObject(Map.class))).andReturn(createNiceMock(Config.class)).once();",
          "138:     Capture<Map> rangerUgsyncPropertiesCapture = EasyMock.newCapture();",
          "139:     expect(controller.createConfig(anyObject(Cluster.class), anyObject(StackId.class), anyString(), capture(rangerUgsyncPropertiesCapture), anyString(),",
          "140:       anyObject(Map.class))).andReturn(createNiceMock(Config.class)).once();",
          "142:     Capture<Map> rangerEnvPropertiesCapture = EasyMock.newCapture();",
          "143:     expect(controller.createConfig(anyObject(Cluster.class), anyObject(StackId.class), anyString(), capture(rangerEnvPropertiesCapture), anyString(),",
          "144:       anyObject(Map.class))).andReturn(createNiceMock(Config.class)).once();",
          "146:     replay(controller, injector, clusters, mockRangerEnvConfig, mockRangerAdminSiteConfig, mockRangerUgsyncSiteConfig, cluster);",
          "147:     new UpgradeCatalog271(injector).updateRangerLogDirConfigs();",
          "148:     easyMockSupport.verifyAll();",
          "150:     Map<String, String> updatedRangerAdminConfig = rangerAdminpropertiesCapture.getValue();",
          "151:     Assert.assertEquals(updatedRangerAdminConfig.get(\"ranger.logs.base.dir\"), \"/var/log/ranger/admin\");",
          "153:     Map<String, String> updatedRangerUgsyncSiteConfig = rangerUgsyncPropertiesCapture.getValue();",
          "154:     Assert.assertEquals(updatedRangerUgsyncSiteConfig.get(\"ranger.usersync.logdir\"), \"/var/log/ranger/usersync\");",
          "156:     Map<String, String> updatedRangerEnvConfig = rangerEnvPropertiesCapture.getValue();",
          "157:     Assert.assertFalse(updatedRangerEnvConfig.containsKey(\"ranger_admin_log_dir\"));",
          "158:     Assert.assertFalse(updatedRangerEnvConfig.containsKey(\"ranger_usersync_log_dir\"));",
          "159:   }",
          "161:   @Test",
          "162:   public void testUpdateRangerKmsDbUrl() throws Exception {",
          "164:     Map<String, Service> installedServices = new HashMap<String, Service>() {",
          "165:       {",
          "166:         put(\"RANGER_KMS\", null);",
          "167:       }",
          "168:     };",
          "170:     Map<String, String> rangerKmsPropertiesConfig = new HashMap<String, String>() {",
          "171:       {",
          "172:         put(\"DB_FLAVOR\", \"MYSQL\");",
          "173:         put(\"db_host\", \"c6401.ambari.apache.org\");",
          "174:       }",
          "175:     };",
          "177:     Map<String, String> rangerKmsDbksPropertiesConfig = new HashMap<String, String>() {",
          "178:       {",
          "179:         put(\"ranger.ks.jpa.jdbc.url\", \"jdbc:mysql://c6401.ambari.apache.org:3546\");",
          "180:       }",
          "181:     };",
          "183:     EasyMockSupport easyMockSupport = new EasyMockSupport();",
          "185:     Clusters clusters = easyMockSupport.createNiceMock(Clusters.class);",
          "186:     final Cluster cluster = easyMockSupport.createNiceMock(Cluster.class);",
          "188:     Injector injector = easyMockSupport.createNiceMock(Injector.class);",
          "189:     AmbariManagementControllerImpl controller = createMockBuilder(AmbariManagementControllerImpl.class)",
          "190:       .addMockedMethod(\"createConfiguration\")",
          "191:       .addMockedMethod(\"getClusters\", new Class[] { })",
          "192:       .addMockedMethod(\"createConfig\")",
          "193:       .createNiceMock();",
          "195:     expect(injector.getInstance(AmbariManagementController.class)).andReturn(controller).anyTimes();",
          "196:     expect(controller.getClusters()).andReturn(clusters).anyTimes();",
          "198:     expect(clusters.getClusters()).andReturn(new HashMap<String, Cluster>() {{",
          "199:       put(\"normal\", cluster);",
          "200:     }}).once();",
          "201:     expect(cluster.getClusterName()).andReturn(\"cl1\").once();",
          "202:     expect(cluster.getServices()).andReturn(installedServices).atLeastOnce();",
          "204:     Config mockRangerKmsPropertiesConfig = easyMockSupport.createNiceMock(Config.class);",
          "205:     expect(cluster.getDesiredConfigByType(\"kms-properties\")).andReturn(mockRangerKmsPropertiesConfig).atLeastOnce();",
          "207:     Config mockRangerKmsEnvConfig = easyMockSupport.createNiceMock(Config.class);",
          "208:     expect(cluster.getDesiredConfigByType(\"kms-env\")).andReturn(mockRangerKmsEnvConfig).atLeastOnce();",
          "210:     Config mockRangerKmsDbksConfig = easyMockSupport.createNiceMock(Config.class);",
          "211:     expect(cluster.getDesiredConfigByType(\"dbks-site\")).andReturn(mockRangerKmsDbksConfig).atLeastOnce();",
          "213:     expect(mockRangerKmsPropertiesConfig.getProperties()).andReturn(rangerKmsPropertiesConfig).anyTimes();",
          "214:     expect(mockRangerKmsEnvConfig.getProperties()).andReturn(Collections.emptyMap()).anyTimes();",
          "215:     expect(mockRangerKmsDbksConfig.getProperties()).andReturn(rangerKmsDbksPropertiesConfig).anyTimes();",
          "217:     Capture<Map> propertiesCapture = EasyMock.newCapture();",
          "218:     expect(controller.createConfig(anyObject(Cluster.class), anyObject(StackId.class), anyString(), capture(propertiesCapture), anyString(),",
          "219:       anyObject(Map.class))).andReturn(createNiceMock(Config.class)).once();",
          "221:     replay(controller, injector, clusters, mockRangerKmsPropertiesConfig, mockRangerKmsEnvConfig, mockRangerKmsDbksConfig, cluster);",
          "222:     new UpgradeCatalog271(injector).updateRangerKmsDbUrl();",
          "223:     easyMockSupport.verifyAll();",
          "225:     Map<String, String> updatedRangerKmsEnvConfig = propertiesCapture.getValue();",
          "226:     Assert.assertEquals(updatedRangerKmsEnvConfig.get(\"ranger_kms_privelege_user_jdbc_url\"), \"jdbc:mysql://c6401.ambari.apache.org:3546\");",
          "227:   }",
          "229: }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/stacks/2.3/common/test_stack_advisor.py||ambari-server/src/test/python/stacks/2.3/common/test_stack_advisor.py": [
          "File: ambari-server/src/test/python/stacks/2.3/common/test_stack_advisor.py -> ambari-server/src/test/python/stacks/2.3/common/test_stack_advisor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1698:         'hadoop.kms.proxyuser.root.hosts': {'delete': 'true'},",
          "1699:         'hadoop.kms.proxyuser.root.users': {'delete': 'true'}",
          "1700:         }",
          "1701:       }",
          "1702:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1701:       },",
          "1702:       'kms-env': {",
          "1703:         'properties': {",
          "1704:           'ranger_kms_privelege_user_jdbc_url': 'jdbc:oracle:thin:@c6401.ambari.apache.org:1521:XE'",
          "1705:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1741:         'hadoop.kms.proxyuser.ambari-cl1.hosts': '*',",
          "1742:         'hadoop.kms.proxyuser.ambari-cl1.users': '*'",
          "1743:         }",
          "1744:       }",
          "1745:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1749:       },",
          "1750:       'kms-env': {",
          "1751:         'properties': {",
          "1752:           'ranger_kms_privelege_user_jdbc_url': 'jdbc:oracle:thin:@c6401.ambari.apache.org:1521:XE'",
          "1753:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "65d35cae920a7ee2834dd1af3200535a64c5f161",
      "candidate_info": {
        "commit_hash": "65d35cae920a7ee2834dd1af3200535a64c5f161",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/65d35cae920a7ee2834dd1af3200535a64c5f161",
        "files": [
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java"
        ],
        "message": "[AMBARI-24637] Ambari metrics service check failed during UI deploy. (#2316) (#2442)\n\n* [AMBARI-24637] Ambari metrics service check failed during UI deploy.\n\n* [AMBARI-24637] Ambari metrics service check failed during UI deploy. (2)",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java",
          "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:       apps = new ConcurrentHashMap<>();",
          "300:       if (timelineMetricHostMetadata == null) {",
          "301:         TimelineMetricHostMetadata newHostMetadata = new TimelineMetricHostMetadata(apps);",
          "303:         HOSTED_APPS_MAP.put(hostname, newHostMetadata);",
          "304:       } else {",
          "305:         HOSTED_APPS_MAP.get(hostname).setHostedApps(apps);",
          "",
          "[Removed Lines]",
          "302:         newHostMetadata.setUuid(getUuidForHostname(hostname, true));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "453:     }",
          "455:     byte[] uuid = uuidGenStrategy.computeUuid(hostname, HOSTNAME_UUID_LENGTH);",
          "458:       return null;",
          "459:     }",
          "464:     }",
          "468:     return uuid;",
          "469:   }",
          "",
          "[Removed Lines]",
          "456:     if (uuidHostMap.containsKey(new TimelineMetricUuid(uuid))) {",
          "457:       LOG.error(\"Duplicate key computed for \" + hostname +\", Collides with  \" + uuidHostMap.get(uuid));",
          "461:     if (timelineMetricHostMetadata == null) {",
          "462:       timelineMetricHostMetadata = new TimelineMetricHostMetadata();",
          "463:       HOSTED_APPS_MAP.put(hostname, timelineMetricHostMetadata);",
          "465:     timelineMetricHostMetadata.setUuid(uuid);",
          "466:     uuidHostMap.put(new TimelineMetricUuid(uuid), hostname);",
          "",
          "[Added Lines]",
          "455:     TimelineMetricUuid timelineMetricUuid = new TimelineMetricUuid(uuid);",
          "456:     if (uuidHostMap.containsKey(timelineMetricUuid) && !hostname.equals(uuidHostMap.get(timelineMetricUuid))) {",
          "457:       LOG.error(\"Duplicate key computed for \" + hostname +\", Collides with  \" + uuidHostMap.get(timelineMetricUuid));",
          "461:     timelineMetricHostMetadata = HOSTED_APPS_MAP.computeIfAbsent(hostname, k -> new TimelineMetricHostMetadata());",
          "462:     if (timelineMetricHostMetadata.getUuid() == null) {",
          "463:       timelineMetricHostMetadata.setUuid(uuid);",
          "464:     }",
          "465:     if (!uuidHostMap.containsKey(timelineMetricUuid)) {",
          "466:       uuidHostMap.put(timelineMetricUuid, hostname);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "501:       return null;",
          "502:     }",
          "504:     if (timelineMetricMetadata == null) {",
          "505:       timelineMetricMetadata = new TimelineMetricMetadata();",
          "506:       timelineMetricMetadata.setMetricName(timelineClusterMetric.getMetricName());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505:     timelineMetricMetadata = METADATA_CACHE.get(key);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "509:       METADATA_CACHE.put(key, timelineMetricMetadata);",
          "510:     }",
          "513:     timelineMetricMetadata.setIsPersisted(false);",
          "515:     return uuid.uuid;",
          "516:   }",
          "",
          "[Removed Lines]",
          "512:     timelineMetricMetadata.setUuid(uuid.uuid);",
          "514:     uuidKeyMap.put(uuid, key);",
          "",
          "[Added Lines]",
          "514:     if (timelineMetricMetadata.getUuid() == null) {",
          "515:       timelineMetricMetadata.setUuid(uuid.uuid);",
          "516:     }",
          "519:     if (!uuidKeyMap.containsKey(uuid)) {",
          "520:       uuidKeyMap.put(uuid, key);",
          "521:     }",
          "",
          "---------------"
        ],
        "ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java||ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java -> ambari-metrics/ambari-metrics-timelineservice/src/test/java/org/apache/ambari/metrics/core/timeline/discovery/TestMetadataManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:   public void testWildcardSanitization() throws IOException, SQLException, URISyntaxException {",
          "186:     metadataManager = new TimelineMetricMetadataManager(new Configuration(), hdb);",
          "187:     final long now = System.currentTimeMillis();",
          "189:     TimelineMetrics timelineMetrics = new TimelineMetrics();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:     hdb.setMetadataInstance(metadataManager);",
          "",
          "---------------"
        ]
      }
    }
  ]
}