{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2b79eb12258c42549cb217bce2a497bce2a2c239",
      "candidate_info": {
        "commit_hash": "2b79eb12258c42549cb217bce2a497bce2a2c239",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/2b79eb12258c42549cb217bce2a497bce2a2c239",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java"
        ],
        "message": "PDFBOX-4892: reorder code for optimization / clarity\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1885292 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceN.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "357:         for (int c = 0; c < numColorants; c++)",
          "358:         {",
          "359:             PDColorSpace componentColorSpace;",
          "361:             {",
          "363:                 componentColorSpace = processColorSpace;",
          "",
          "[Removed Lines]",
          "360:             if (colorantToComponent[c] >= 0)",
          "",
          "[Added Lines]",
          "360:             boolean isProcessColorant = colorantToComponent[c] >= 0;",
          "361:             if (isProcessColorant)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:             }",
          "379:             float[] componentSamples = new float[componentColorSpace.getNumberOfComponents()];",
          "382:             if (isProcessColorant)",
          "383:             {",
          "385:                 componentSamples[componentIndex] = value[c];",
          "386:             }",
          "387:             else",
          "",
          "[Removed Lines]",
          "378:             boolean isProcessColorant = colorantToComponent[c] >= 0;",
          "380:             int componentIndex = colorantToComponent[c];",
          "",
          "[Added Lines]",
          "384:                 int componentIndex = colorantToComponent[c];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fdec71314d02e0e9ba8747de0ba7dfcde83739d2",
      "candidate_info": {
        "commit_hash": "fdec71314d02e0e9ba8747de0ba7dfcde83739d2",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/fdec71314d02e0e9ba8747de0ba7dfcde83739d2",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java"
        ],
        "message": "PDFBOX-4892: remove null check (would mean a completely broken download anyway), as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1888030 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:         {",
          "121:             String ttfName = \"/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf\";",
          "122:             InputStream resourceAsStream = FontMapper.class.getResourceAsStream(ttfName);",
          "127:             InputStream ttfStream = new BufferedInputStream(resourceAsStream);",
          "128:             TTFParser ttfParser = new TTFParser();",
          "129:             lastResortFont = ttfParser.parse(ttfStream);",
          "",
          "[Removed Lines]",
          "123:             if (resourceAsStream == null)",
          "124:             {",
          "125:                 throw new IOException(\"resource '\" + ttfName + \"' not found\");",
          "126:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25b28d4439b9b10cafca917ba813ce16cbb8ed9d",
      "candidate_info": {
        "commit_hash": "25b28d4439b9b10cafca917ba813ce16cbb8ed9d",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/25b28d4439b9b10cafca917ba813ce16cbb8ed9d",
        "files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java"
        ],
        "message": "PDFBOX-4892: close PDDocument\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1889164 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/font/TestFontEmbedding.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:     {",
          "252:         PDDocument document = PDDocument.load(file);",
          "253:         PDFTextStripper stripper = new PDFTextStripper();",
          "255:     }",
          "",
          "[Removed Lines]",
          "254:         return stripper.getText(document);",
          "",
          "[Added Lines]",
          "254:         String text = stripper.getText(document);",
          "255:         document.close();",
          "256:         return text;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4b66aaf3f7a13fca9fc23f42022dd37c9ab4c04",
      "candidate_info": {
        "commit_hash": "a4b66aaf3f7a13fca9fc23f42022dd37c9ab4c04",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/a4b66aaf3f7a13fca9fc23f42022dd37c9ab4c04",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java",
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java"
        ],
        "message": "PDFBOX-4985: render orphan annotation widgets backported from trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1882910 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java",
          "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java",
          "preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.util.ArrayList;",
          "21: import java.util.List;",
          "23: import org.apache.pdfbox.cos.COSArray;",
          "24: import org.apache.pdfbox.cos.COSBase;",
          "25: import org.apache.pdfbox.cos.COSDictionary;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.apache.commons.logging.Log;",
          "24: import org.apache.commons.logging.LogFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: public class PDDocumentCatalog implements COSObjectable",
          "55: {",
          "56:     private final COSDictionary root;",
          "57:     private final PDDocument document;",
          "58:     private PDAcroForm cachedAcroForm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     private static final Log LOG = LogFactory.getLog(PDDocumentCatalog.class);",
          "63:     private boolean hasAcroFormFixesApplied;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:         return getAcroForm(true);",
          "106:     }",
          "118:     public PDAcroForm getAcroForm(boolean applyFixes)",
          "119:     {",
          "120:         if (cachedAcroForm == null)",
          "121:         {",
          "122:             COSDictionary dict = (COSDictionary)root.getDictionaryObject(COSName.ACRO_FORM);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:         if (!hasAcroFormFixesApplied && applyFixes)",
          "130:         {",
          "131:             cachedAcroForm = null;",
          "132:             hasAcroFormFixesApplied = true;",
          "133:         }",
          "134:         else if (hasAcroFormFixesApplied && !applyFixes)",
          "135:         {",
          "136:             LOG.warn(\"AcroForm content has already been retrieved with applyFixes set to true - original content changed because of that\");",
          "137:         }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.commons.logging.Log;",
          "33: import org.apache.commons.logging.LogFactory;",
          "34: import org.apache.pdfbox.cos.COSArray;",
          "35: import org.apache.pdfbox.cos.COSBase;",
          "36: import org.apache.pdfbox.cos.COSDictionary;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.apache.fontbox.ttf.TrueTypeFont;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: import org.apache.pdfbox.pdmodel.fdf.FDFDictionary;",
          "49: import org.apache.pdfbox.pdmodel.fdf.FDFDocument;",
          "50: import org.apache.pdfbox.pdmodel.fdf.FDFField;",
          "51: import org.apache.pdfbox.pdmodel.font.PDType1Font;",
          "52: import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;",
          "53: import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: import org.apache.pdfbox.pdmodel.font.FontMapper;",
          "53: import org.apache.pdfbox.pdmodel.font.FontMappers;",
          "54: import org.apache.pdfbox.pdmodel.font.FontMapping;",
          "55: import org.apache.pdfbox.pdmodel.font.PDType0Font;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:         if (applyFixes) {",
          "122:             verifyOrCreateDefaults();",
          "123:         }",
          "124:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:             if (getNeedAppearances() && getFields().isEmpty())",
          "133:             {",
          "134:                 resolveFieldsFromWidgets(this);",
          "135:             }",
          "139:             if (getNeedAppearances())",
          "140:             {",
          "141:                 try",
          "142:                 {",
          "143:                     LOG.debug(\"trying to generate appearance streams for fields as NeedAppearances is true()\");",
          "144:                     refreshAppearances();",
          "145:                     setNeedAppearances(false);",
          "146:                 }",
          "147:                 catch (IOException ioe)",
          "148:                 {",
          "149:                     LOG.debug(\"couldn't generate appearance stream for some fields - check output\");",
          "150:                     LOG.debug(ioe.getMessage());",
          "151:                 }",
          "152:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "760:         this.scriptingHandler = scriptingHandler;",
          "761:     }",
          "764:     private Matrix resolveTransformationMatrix(PDAnnotation annotation, PDAppearanceStream appearanceStream)",
          "765:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "794:     private void resolveFieldsFromWidgets(PDAcroForm acroForm)",
          "795:     {",
          "797:         LOG.debug(\"rebuilding fields from widgets\");",
          "798:         List<PDField> fields = acroForm.getFields();",
          "799:         for (PDPage page : document.getPages())",
          "800:         {",
          "801:             try",
          "802:             {",
          "803:                 List<PDAnnotation> annots = page.getAnnotations();",
          "804:                 for (PDAnnotation annot : annots)",
          "805:                 {",
          "806:                     if (annot instanceof PDAnnotationWidget)",
          "807:                     {",
          "808:                         PDField field = PDFieldFactory.createField(acroForm, annot.getCOSObject(), null);",
          "809:                         if (field instanceof PDVariableText)",
          "810:                         {",
          "811:                             ensureFontResources((PDVariableText) field);",
          "812:                         }",
          "813:                         fields.add(field);",
          "814:                     }",
          "815:                 }",
          "816:             }",
          "817:             catch (IOException ioe)",
          "818:             {",
          "819:                 LOG.debug(\"couldn't read annotations for page \" + ioe.getMessage());",
          "820:             }",
          "821:         }",
          "822:         acroForm.setFields(fields);",
          "823:     }",
          "834:     private void ensureFontResources(PDVariableText field)",
          "835:     {",
          "836:         String daString = field.getDefaultAppearance();",
          "837:         if (daString.startsWith(\"/\") && daString.length() > 1)",
          "838:         {",
          "839:             COSName fontName = COSName.getPDFName(daString.substring(1, daString.indexOf(\" \")));",
          "840:             try{",
          "841:                 if (getDefaultResources() != null && getDefaultResources().getFont(fontName) == null)",
          "842:                 {",
          "843:                     LOG.debug(\"trying to add missing font resource for field \" + field.getFullyQualifiedName());",
          "844:                     FontMapper mapper = FontMappers.instance();",
          "845:                     FontMapping<TrueTypeFont> fontMapping = mapper.getTrueTypeFont(fontName.getName() , null);",
          "846:                     if (fontMapping != null)",
          "847:                     {",
          "848:                         PDType0Font pdFont = PDType0Font.load(getDocument(), fontMapping.getFont(), false);",
          "849:                         LOG.debug(\"looked up font for \" + fontName.getName() + \" - found \" + fontMapping.getFont().getName());",
          "850:                         getDefaultResources().put(fontName, pdFont);",
          "851:                     }",
          "852:                     else",
          "853:                     {",
          "854:                         LOG.debug(\"no suitable font found for field \" + field.getFullyQualifiedName() + \" for font name \" + fontName.getName());",
          "855:                     }",
          "856:                 }",
          "857:             }",
          "858:             catch (IOException ioe)",
          "859:             {",
          "860:                 LOG.debug(\"Unable to handle font resources for field \" + field.getFullyQualifiedName() + \": \" + ioe.getMessage());",
          "861:             }",
          "862:         }",
          "863:     }",
          "",
          "---------------"
        ],
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainText.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     PlainText(String textValue)",
          "53:     {",
          "55:         paragraphs = new ArrayList<Paragraph>();",
          "57:         {",
          "64:         }",
          "65:     }",
          "",
          "[Removed Lines]",
          "54:         List<String> parts = Arrays.asList(textValue.replaceAll(\"\\t\", \" \").split(\"\\\\r\\\\n|\\\\n|\\\\r|\\\\u2028|\\\\u2029\"));",
          "56:         for (String part : parts)",
          "59:          if (part.length() == 0)",
          "60:          {",
          "61:           part = \" \";",
          "62:          }",
          "63:             paragraphs.add(new Paragraph(part));",
          "",
          "[Added Lines]",
          "55:         if (textValue.isEmpty()) {",
          "56:             paragraphs.add(new Paragraph(\"\"));",
          "57:         }",
          "58:         else",
          "60:             List<String> parts = Arrays.asList(textValue.replaceAll(\"\\t\", \" \").split(\"\\\\r\\\\n|\\\\n|\\\\r|\\\\u2028|\\\\u2029\"));",
          "61:             for (String part : parts)",
          "62:             {",
          "64:                 if (part.length() == 0)",
          "65:                 {",
          "66:                     part = \" \";",
          "67:                 }",
          "68:                 paragraphs.add(new Paragraph(part));",
          "69:             }",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFlattenTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     public void testFlattenOpenOfficeForm() throws IOException",
          "197:     {",
          "198:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/12839977/OpenOfficeForm.pdf\";",
          "",
          "[Removed Lines]",
          "195:     @Test",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java||pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java": [
          "File: pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java -> pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormFromAnnotsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: package org.apache.pdfbox.pdmodel.interactive.form;",
          "19: import static org.junit.Assert.assertEquals;",
          "21: import java.io.IOException;",
          "22: import java.net.URL;",
          "24: import org.apache.pdfbox.cos.COSArray;",
          "25: import org.apache.pdfbox.cos.COSDictionary;",
          "26: import org.apache.pdfbox.cos.COSName;",
          "27: import org.apache.pdfbox.io.IOUtils;",
          "28: import org.apache.pdfbox.pdmodel.PDDocument;",
          "29: import org.apache.pdfbox.pdmodel.PDDocumentCatalog;",
          "31: import org.junit.Test;",
          "37: public class PDAcroFormFromAnnotsTest",
          "38: {",
          "46:     @Test",
          "47:     public void testFromAnnots4985DefaultMode() throws IOException",
          "48:     {",
          "50:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/13013354/POPPLER-806.pdf\";",
          "51:         String acrobatSourceUrl = \"https://issues.apache.org/jira/secure/attachment/13013384/POPPLER-806-acrobat.pdf\";",
          "53:         int numFormFieldsByAcrobat = 0;",
          "55:         PDDocument testPdf = null;",
          "56:         try",
          "57:         {",
          "58:             testPdf = PDDocument.load(new URL(acrobatSourceUrl).openStream());",
          "59:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "60:             PDAcroForm acroForm = catalog.getAcroForm(false);",
          "61:             numFormFieldsByAcrobat = acroForm.getFields().size();",
          "62:         }",
          "63:         finally",
          "64:         {",
          "65:             IOUtils.closeQuietly(testPdf);",
          "66:         }",
          "68:         try",
          "69:         {",
          "70:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "71:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "73:             COSDictionary cosAcroForm = (COSDictionary) catalog.getCOSObject().getDictionaryObject(COSName.ACRO_FORM);",
          "74:             COSArray cosFields = (COSArray) cosAcroForm.getDictionaryObject(COSName.FIELDS);",
          "75:             assertEquals(\"Initially there shall be 0 fields\", 0, cosFields.size());",
          "76:             PDAcroForm acroForm = catalog.getAcroForm();",
          "77:             assertEquals(\"After rebuild there shall be \" + numFormFieldsByAcrobat + \" fields\", numFormFieldsByAcrobat, acroForm.getFields().size());",
          "78:         }",
          "79:         finally",
          "80:         {",
          "81:             IOUtils.closeQuietly(testPdf);",
          "82:         }",
          "83:     }",
          "92:     @Test",
          "93:     public void testFromAnnots4985CorrectionMode() throws IOException",
          "94:     {",
          "96:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/13013354/POPPLER-806.pdf\";",
          "97:         String acrobatSourceUrl = \"https://issues.apache.org/jira/secure/attachment/13013384/POPPLER-806-acrobat.pdf\";",
          "99:         int numFormFieldsByAcrobat = 0;",
          "101:         PDDocument testPdf = null;",
          "102:         try",
          "103:         {",
          "104:             testPdf = PDDocument.load(new URL(acrobatSourceUrl).openStream());",
          "105:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "106:             PDAcroForm acroForm = catalog.getAcroForm(false);",
          "107:             numFormFieldsByAcrobat = acroForm.getFields().size();",
          "108:         }",
          "109:         finally",
          "110:         {",
          "111:             IOUtils.closeQuietly(testPdf);",
          "112:         }",
          "114:         try",
          "115:         {",
          "116:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "117:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "119:             COSDictionary cosAcroForm = (COSDictionary) catalog.getCOSObject().getDictionaryObject(COSName.ACRO_FORM);",
          "120:             COSArray cosFields = (COSArray) cosAcroForm.getDictionaryObject(COSName.FIELDS);",
          "121:             assertEquals(\"Initially there shall be 0 fields\", 0, cosFields.size());",
          "122:             PDAcroForm acroForm = catalog.getAcroForm(true);",
          "123:             assertEquals(\"After rebuild there shall be \" + numFormFieldsByAcrobat + \" fields\", numFormFieldsByAcrobat, acroForm.getFields().size());",
          "124:         }",
          "125:         finally",
          "126:         {",
          "127:             IOUtils.closeQuietly(testPdf);",
          "128:         }",
          "129:     }",
          "138:     @Test",
          "139:     public void testFromAnnots4985WithoutCorrectionMode() throws IOException",
          "140:     {",
          "142:         String sourceUrl = \"https://issues.apache.org/jira/secure/attachment/13013354/POPPLER-806.pdf\";",
          "144:         int numCosFormFields = 0;",
          "146:         PDDocument testPdf = null;",
          "147:         try",
          "148:         {",
          "149:             testPdf = PDDocument.load(new URL(sourceUrl).openStream());",
          "150:             PDDocumentCatalog catalog = testPdf.getDocumentCatalog();",
          "152:             COSDictionary cosAcroForm = (COSDictionary) catalog.getCOSObject().getDictionaryObject(COSName.ACRO_FORM);",
          "153:             COSArray cosFields = (COSArray) cosAcroForm.getDictionaryObject(COSName.FIELDS);",
          "154:             numCosFormFields = cosFields.size();",
          "155:             assertEquals(\"Initially there shall be 0 fields\", 0, cosFields.size());",
          "156:             PDAcroForm acroForm = catalog.getAcroForm(false);",
          "157:             assertEquals(\"After call without correction there shall be \" + numCosFormFields + \" fields\", numCosFormFields, acroForm.getFields().size());",
          "158:         }",
          "159:         finally",
          "160:         {",
          "161:             IOUtils.closeQuietly(testPdf);",
          "162:         }",
          "163:     }",
          "164: }",
          "",
          "---------------"
        ],
        "preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java||preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java -> preflight/src/main/java/org/apache/pdfbox/preflight/process/AcroFormValidationProcess.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     protected void checkNeedAppearences(PreflightContext ctx, PDAcroForm acroForm)",
          "87:     {",
          "89:         {",
          "90:             addValidationError(ctx, new ValidationError(ERROR_SYNTAX_DICT_INVALID,",
          "91:                     \"NeedAppearance is present with the value \\\"true\\\"\"));",
          "",
          "[Removed Lines]",
          "88:         if (acroForm.getCOSObject().getBoolean(ACROFORM_DICTIONARY_KEY_NEED_APPEARANCES, false))",
          "",
          "[Added Lines]",
          "88:         if (acroForm.getNeedAppearances())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4899d9ea58ebc417fd62a060826a6ec79eed7e4",
      "candidate_info": {
        "commit_hash": "d4899d9ea58ebc417fd62a060826a6ec79eed7e4",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d4899d9ea58ebc417fd62a060826a6ec79eed7e4",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/BufferedRandomAccessFile.java"
        ],
        "message": "PDFBOX-4892: remove unneeded field\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1890813 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/BufferedRandomAccessFile.java||fontbox/src/main/java/org/apache/fontbox/ttf/BufferedRandomAccessFile.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/ttf/BufferedRandomAccessFile.java||fontbox/src/main/java/org/apache/fontbox/ttf/BufferedRandomAccessFile.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/ttf/BufferedRandomAccessFile.java -> fontbox/src/main/java/org/apache/fontbox/ttf/BufferedRandomAccessFile.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     private long realpos = 0;",
          "",
          "[Removed Lines]",
          "51:     private final int BUFSIZE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:             throws FileNotFoundException",
          "67:     {",
          "68:         super(filename, mode);",
          "71:     }",
          "",
          "[Removed Lines]",
          "69:         BUFSIZE = bufsize;",
          "70:         buffer = new byte[BUFSIZE];",
          "",
          "[Added Lines]",
          "64:         buffer = new byte[bufsize];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:             throws FileNotFoundException",
          "87:     {",
          "88:         super(file, mode);",
          "91:     }",
          "",
          "[Removed Lines]",
          "89:         BUFSIZE = bufsize;",
          "90:         buffer = new byte[BUFSIZE];",
          "",
          "[Added Lines]",
          "83:         buffer = new byte[bufsize];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:     private int fillBuffer() throws IOException",
          "121:     {",
          "124:         if (n >= 0)",
          "125:         {",
          "",
          "[Removed Lines]",
          "122:         int n = super.read(buffer, 0, BUFSIZE);",
          "",
          "[Added Lines]",
          "115:         int n = super.read(buffer);",
          "",
          "---------------"
        ]
      }
    }
  ]
}