{
  "cve_id": "CVE-2014-6633",
  "cve_desc": "The safe_eval function in trytond in Tryton before 2.4.15, 2.6.x before 2.6.14, 2.8.x before 2.8.11, 3.0.x before 3.0.7, and 3.2.x before 3.2.3 allows remote authenticated users to execute arbitrary commands via shell metacharacters in (1) the collection.domain in the webdav module or (2) the formula field in the price_list module.",
  "repo": "tryton/trytond",
  "patch_hash": "19fc2a01357b7638041953326e404f51d96fad06",
  "patch_info": {
    "commit_hash": "19fc2a01357b7638041953326e404f51d96fad06",
    "repo": "tryton/trytond",
    "commit_url": "https://github.com/tryton/trytond/commit/19fc2a01357b7638041953326e404f51d96fad06",
    "files": [
      "CHANGELOG",
      "trytond/ir/cron.py",
      "trytond/ir/lang.py",
      "trytond/res/user.py",
      "trytond/webdav/webdav.py"
    ],
    "message": "Use literal_eval instead of safe_eval whenever possible\n\nCVE-2014-6633\nissue4155\nreview10521002",
    "before_after_code_files": [
      "trytond/ir/cron.py||trytond/ir/cron.py",
      "trytond/ir/lang.py||trytond/ir/lang.py",
      "trytond/res/user.py||trytond/res/user.py",
      "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
    ]
  },
  "patch_diff": {
    "trytond/ir/cron.py||trytond/ir/cron.py": [
      "File: trytond/ir/cron.py -> trytond/ir/cron.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: import logging",
      "8: from email.mime.text import MIMEText",
      "9: from email.header import Header",
      "11: from ..model import ModelView, ModelSQL, fields",
      "13: from ..transaction import Transaction",
      "14: from ..pool import Pool",
      "15: from .. import backend",
      "",
      "[Removed Lines]",
      "12: from ..tools import safe_eval, get_smtp_server",
      "",
      "[Added Lines]",
      "10: from ast import literal_eval",
      "13: from ..tools import get_smtp_server",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "156:         pool = Pool()",
      "157:         Config = pool.get('ir.configuration')",
      "158:         try:",
      "160:             Model = pool.get(cron.model)",
      "161:             with Transaction().set_user(cron.user.id):",
      "162:                 getattr(Model, cron.function)(*args)",
      "",
      "[Removed Lines]",
      "159:             args = (cron.args or []) and safe_eval(cron.args)",
      "",
      "[Added Lines]",
      "160:             args = (cron.args or []) and literal_eval(cron.args)",
      "",
      "---------------"
    ],
    "trytond/ir/lang.py||trytond/ir/lang.py": [
      "File: trytond/ir/lang.py -> trytond/ir/lang.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: #this repository contains the full copyright notices and license terms.",
      "3: import datetime",
      "4: import warnings",
      "6: from ..model import ModelView, ModelSQL, fields",
      "7: from ..cache import Cache",
      "9: from ..transaction import Transaction",
      "10: from ..pool import Pool",
      "11: from .time_locale import TIME_LOCALE",
      "",
      "[Removed Lines]",
      "8: from ..tools import safe_eval, datetime_strftime",
      "",
      "[Added Lines]",
      "5: from ast import literal_eval",
      "9: from ..tools import datetime_strftime",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "135:         '''",
      "136:         for lang in langs:",
      "137:             try:",
      "139:                 for i in grouping:",
      "140:                     if not isinstance(i, int):",
      "141:                         raise",
      "",
      "[Removed Lines]",
      "138:                 grouping = safe_eval(lang.grouping)",
      "",
      "[Added Lines]",
      "139:                 grouping = literal_eval(lang.grouping)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "258:         if monetary:",
      "259:             thousands_sep = monetary.mon_thousands_sep",
      "261:         else:",
      "262:             thousands_sep = lang.thousands_sep",
      "264:         if not grouping:",
      "265:             return (s, 0)",
      "266:         if s[-1] == ' ':",
      "",
      "[Removed Lines]",
      "260:             grouping = safe_eval(monetary.mon_grouping)",
      "263:             grouping = safe_eval(lang.grouping)",
      "",
      "[Added Lines]",
      "261:             grouping = literal_eval(monetary.mon_grouping)",
      "264:             grouping = literal_eval(lang.grouping)",
      "",
      "---------------"
    ],
    "trytond/res/user.py||trytond/res/user.py": [
      "File: trytond/res/user.py -> trytond/res/user.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: import datetime",
      "10: from itertools import groupby, ifilter",
      "11: from operator import attrgetter",
      "12: from sql import Literal",
      "13: from sql.conditionals import Coalesce",
      "14: from sql.aggregate import Count",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: from ast import literal_eval",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "22: from ..model import ModelView, ModelSQL, fields",
      "23: from ..wizard import Wizard, StateView, Button, StateTransition",
      "25: from .. import backend",
      "26: from ..transaction import Transaction",
      "27: from ..cache import Cache",
      "",
      "[Removed Lines]",
      "24: from ..tools import safe_eval, grouped_slice",
      "",
      "[Added Lines]",
      "26: from ..tools import grouped_slice",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "341:                 date = date.replace(i, j)",
      "342:             res['locale'] = {",
      "343:                 'date': date,",
      "345:                 'decimal_point': user.language.decimal_point,",
      "346:                 'thousands_sep': user.language.thousands_sep,",
      "347:             }",
      "",
      "[Removed Lines]",
      "344:                 'grouping': safe_eval(user.language.grouping),",
      "",
      "[Added Lines]",
      "346:                 'grouping': literal_eval(user.language.grouping),",
      "",
      "---------------"
    ],
    "trytond/webdav/webdav.py||trytond/webdav/webdav.py": [
      "File: trytond/webdav/webdav.py -> trytond/webdav/webdav.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: import encodings",
      "9: import uuid",
      "10: import datetime",
      "11: from dateutil.relativedelta import relativedelta",
      "12: from sql.functions import Extract",
      "13: from sql.conditionals import Coalesce",
      "15: from trytond.model import ModelView, ModelSQL, fields",
      "17: from trytond.transaction import Transaction",
      "18: from trytond.pool import Pool",
      "19: from trytond.config import config",
      "",
      "[Removed Lines]",
      "16: from trytond.tools import reduce_ids, safe_eval",
      "",
      "[Added Lines]",
      "11: from ast import literal_eval",
      "18: from trytond.tools import reduce_ids",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "307:                 if not Model:",
      "308:                     return res",
      "309:                 models = Model.search(",
      "311:                 for child in models:",
      "312:                     if '/' in child.rec_name:",
      "313:                         continue",
      "",
      "[Removed Lines]",
      "310:                         safe_eval(collection.domain or \"[]\"))",
      "",
      "[Added Lines]",
      "312:                     literal_eval(collection.domain))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "759:             model_name = collection.model.model",
      "760:             Model = pool.get(model_name)",
      "761:             ids = list(resources[model_name])",
      "763:             domain = [domain, ('id', 'in', ids)]",
      "764:             records = Model.search(domain)",
      "765:             for record in records:",
      "",
      "[Removed Lines]",
      "762:             domain = safe_eval(collection.domain or '[]')",
      "",
      "[Added Lines]",
      "764:             domain = literal_eval(collection.domain)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dc0c3cd5176819efdbf0d22376c8ad2f298e14a5",
      "candidate_info": {
        "commit_hash": "dc0c3cd5176819efdbf0d22376c8ad2f298e14a5",
        "repo": "tryton/trytond",
        "commit_url": "https://github.com/tryton/trytond/commit/dc0c3cd5176819efdbf0d22376c8ad2f298e14a5",
        "files": [
          "CHANGELOG",
          "trytond/ir/cron.py",
          "trytond/ir/lang.py",
          "trytond/res/user.py",
          "trytond/webdav/webdav.py"
        ],
        "message": "Use literal_eval instead of safe_eval whenever possible\n\nCVE-2014-6633\nissue4155\nreview10521002\n(grafted from 33dc5c84a9025a78899cf0eac24516ff87bb10a9)\n\n--HG--\nbranch : 2.6",
        "before_after_code_files": [
          "trytond/ir/cron.py||trytond/ir/cron.py",
          "trytond/ir/lang.py||trytond/ir/lang.py",
          "trytond/res/user.py||trytond/res/user.py",
          "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "trytond/ir/cron.py||trytond/ir/cron.py",
            "trytond/ir/lang.py||trytond/ir/lang.py",
            "trytond/res/user.py||trytond/res/user.py",
            "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
          ],
          "candidate": [
            "trytond/ir/cron.py||trytond/ir/cron.py",
            "trytond/ir/lang.py||trytond/ir/lang.py",
            "trytond/res/user.py||trytond/res/user.py",
            "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
          ]
        }
      },
      "candidate_diff": {
        "trytond/ir/cron.py||trytond/ir/cron.py": [
          "File: trytond/ir/cron.py -> trytond/ir/cron.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import sys",
          "8: import logging",
          "9: from ..config import CONFIG",
          "10: from ..model import ModelView, ModelSQL, fields",
          "12: from ..transaction import Transaction",
          "13: from ..pool import Pool",
          "14: from ..backend import TableHandler",
          "",
          "[Removed Lines]",
          "11: from ..tools import safe_eval",
          "",
          "[Added Lines]",
          "10: from ast import literal_eval",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:     def _callback(cls, cron):",
          "149:         pool = Pool()",
          "150:         try:",
          "152:             Model = pool.get(cron.model)",
          "153:             with Transaction().set_user(cron.user.id):",
          "154:                 getattr(Model, cron.function)(*args)",
          "",
          "[Removed Lines]",
          "151:             args = (cron.args or []) and safe_eval(cron.args)",
          "",
          "[Added Lines]",
          "152:             args = (cron.args or []) and literal_eval(cron.args)",
          "",
          "---------------"
        ],
        "trytond/ir/lang.py||trytond/ir/lang.py": [
          "File: trytond/ir/lang.py -> trytond/ir/lang.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #this repository contains the full copyright notices and license terms.",
          "3: import datetime",
          "4: import warnings",
          "6: from ..model import ModelView, ModelSQL, fields",
          "7: from ..cache import Cache",
          "9: from ..transaction import Transaction",
          "10: from ..pool import Pool",
          "11: from ..config import CONFIG",
          "",
          "[Removed Lines]",
          "8: from ..tools import safe_eval, datetime_strftime",
          "",
          "[Added Lines]",
          "5: from ast import literal_eval",
          "9: from ..tools import datetime_strftime",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:         '''",
          "125:         for lang in langs:",
          "126:             try:",
          "128:                 for i in grouping:",
          "129:                     if not isinstance(i, int):",
          "130:                         return False",
          "",
          "[Removed Lines]",
          "127:                 grouping = safe_eval(lang.grouping)",
          "",
          "[Added Lines]",
          "128:                 grouping = literal_eval(lang.grouping)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:         if monetary:",
          "217:             thousands_sep = monetary.mon_thousands_sep",
          "219:         else:",
          "220:             thousands_sep = lang.thousands_sep",
          "222:         if not grouping:",
          "223:             return (s, 0)",
          "224:         if s[-1] == ' ':",
          "",
          "[Removed Lines]",
          "218:             grouping = safe_eval(monetary.mon_grouping)",
          "221:             grouping = safe_eval(lang.grouping)",
          "",
          "[Added Lines]",
          "219:             grouping = literal_eval(monetary.mon_grouping)",
          "222:             grouping = literal_eval(lang.grouping)",
          "",
          "---------------"
        ],
        "trytond/res/user.py||trytond/res/user.py": [
          "File: trytond/res/user.py -> trytond/res/user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import datetime",
          "14: from itertools import groupby, ifilter",
          "15: from operator import attrgetter",
          "17: from ..model import ModelView, ModelSQL, fields",
          "18: from ..wizard import Wizard, StateView, Button, StateTransition",
          "20: from ..backend import TableHandler",
          "21: from ..transaction import Transaction",
          "22: from ..cache import Cache",
          "",
          "[Removed Lines]",
          "19: from ..tools import safe_eval",
          "",
          "[Added Lines]",
          "16: from ast import literal_eval",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327:                 date = date.replace(i, j)",
          "328:             res['locale'] = {",
          "329:                 'date': date,",
          "331:                 'decimal_point': user.language.decimal_point,",
          "332:                 'thousands_sep': user.language.thousands_sep,",
          "333:             }",
          "",
          "[Removed Lines]",
          "330:                 'grouping': safe_eval(user.language.grouping),",
          "",
          "[Added Lines]",
          "331:                 'grouping': literal_eval(user.language.grouping),",
          "",
          "---------------"
        ],
        "trytond/webdav/webdav.py||trytond/webdav/webdav.py": [
          "File: trytond/webdav/webdav.py -> trytond/webdav/webdav.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import encodings",
          "9: import uuid",
          "10: import datetime",
          "11: from dateutil.relativedelta import relativedelta",
          "12: from trytond.model import ModelView, ModelSQL, fields",
          "14: from trytond.transaction import Transaction",
          "15: from trytond.pool import Pool",
          "16: from trytond.config import CONFIG",
          "",
          "[Removed Lines]",
          "13: from trytond.tools import reduce_ids, safe_eval",
          "",
          "[Added Lines]",
          "11: from ast import literal_eval",
          "15: from trytond.tools import reduce_ids",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:                 if not Model:",
          "298:                     return res",
          "299:                 models = Model.search(",
          "301:                 for child in models:",
          "302:                     if '/' in child.rec_name:",
          "303:                         continue",
          "",
          "[Removed Lines]",
          "300:                         safe_eval(collection.domain or \"[]\"))",
          "",
          "[Added Lines]",
          "302:                     literal_eval(collection.domain))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "745:             model_name = collection.model.model",
          "746:             Model = pool.get(model_name)",
          "747:             ids = list(resources[model_name])",
          "749:             domain = [domain, ('id', 'in', ids)]",
          "750:             records = Model.search(domain)",
          "751:             for record in records:",
          "",
          "[Removed Lines]",
          "748:             domain = safe_eval(collection.domain or '[]')",
          "",
          "[Added Lines]",
          "750:             domain = literal_eval(collection.domain)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e7fc491128bfb81f6441c018361c83787a65002",
      "candidate_info": {
        "commit_hash": "6e7fc491128bfb81f6441c018361c83787a65002",
        "repo": "tryton/trytond",
        "commit_url": "https://github.com/tryton/trytond/commit/6e7fc491128bfb81f6441c018361c83787a65002",
        "files": [
          "CHANGELOG",
          "trytond/ir/cron.py",
          "trytond/ir/lang.py",
          "trytond/res/user.py",
          "trytond/webdav/webdav.py"
        ],
        "message": "Use literal_eval instead of safe_eval whenever possible\n\nCVE-2014-6633\nissue4155\nreview10521002\n(grafted from 33dc5c84a9025a78899cf0eac24516ff87bb10a9)\n\n--HG--\nbranch : 2.4",
        "before_after_code_files": [
          "trytond/ir/cron.py||trytond/ir/cron.py",
          "trytond/ir/lang.py||trytond/ir/lang.py",
          "trytond/res/user.py||trytond/res/user.py",
          "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "trytond/ir/cron.py||trytond/ir/cron.py",
            "trytond/ir/lang.py||trytond/ir/lang.py",
            "trytond/res/user.py||trytond/res/user.py",
            "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
          ],
          "candidate": [
            "trytond/ir/cron.py||trytond/ir/cron.py",
            "trytond/ir/lang.py||trytond/ir/lang.py",
            "trytond/res/user.py||trytond/res/user.py",
            "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
          ]
        }
      },
      "candidate_diff": {
        "trytond/ir/cron.py||trytond/ir/cron.py": [
          "File: trytond/ir/cron.py -> trytond/ir/cron.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import sys",
          "8: import logging",
          "9: from ..config import CONFIG",
          "10: from ..model import ModelView, ModelSQL, fields",
          "12: from ..transaction import Transaction",
          "13: from ..pool import Pool",
          "14: from ..backend import TableHandler",
          "",
          "[Removed Lines]",
          "11: from ..tools import safe_eval",
          "",
          "[Added Lines]",
          "10: from ast import literal_eval",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:     def _callback(self, cron):",
          "134:         pool = Pool()",
          "135:         try:",
          "137:             model_obj = pool.get(cron.model)",
          "138:             with Transaction().set_user(cron.user.id):",
          "139:                 getattr(model_obj, cron.function)(*args)",
          "",
          "[Removed Lines]",
          "136:             args = (cron.args or []) and safe_eval(cron.args)",
          "",
          "[Added Lines]",
          "137:             args = (cron.args or []) and literal_eval(cron.args)",
          "",
          "---------------"
        ],
        "trytond/ir/lang.py||trytond/ir/lang.py": [
          "File: trytond/ir/lang.py -> trytond/ir/lang.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #this repository contains the full copyright notices and license terms.",
          "3: import datetime",
          "4: import warnings",
          "6: from ..model import ModelView, ModelSQL, fields",
          "7: from ..model.cacheable import Cacheable",
          "9: from ..transaction import Transaction",
          "10: from ..pool import Pool",
          "11: from ..config import CONFIG",
          "",
          "[Removed Lines]",
          "8: from ..tools import safe_eval, datetime_strftime",
          "",
          "[Added Lines]",
          "5: from ast import literal_eval",
          "9: from ..tools import datetime_strftime",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:         '''",
          "109:         for lang in self.browse(ids):",
          "110:             try:",
          "112:                 for i in grouping:",
          "113:                     if not isinstance(i, int):",
          "114:                         return False",
          "",
          "[Removed Lines]",
          "111:                 grouping = safe_eval(lang.grouping)",
          "",
          "[Added Lines]",
          "112:                 grouping = literal_eval(lang.grouping)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:         if monetary:",
          "197:             thousands_sep = monetary['mon_thousands_sep']",
          "199:         else:",
          "200:             thousands_sep = lang['thousands_sep']",
          "202:         if not grouping:",
          "203:             return (s, 0)",
          "204:         if s[-1] == ' ':",
          "",
          "[Removed Lines]",
          "198:             grouping = safe_eval(monetary['mon_grouping'])",
          "201:             grouping = safe_eval(lang['grouping'])",
          "",
          "[Added Lines]",
          "199:             grouping = literal_eval(monetary['mon_grouping'])",
          "202:             grouping = literal_eval(lang['grouping'])",
          "",
          "---------------"
        ],
        "trytond/res/user.py||trytond/res/user.py": [
          "File: trytond/res/user.py -> trytond/res/user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     hashlib = None",
          "11:     import sha",
          "12: import time",
          "13: from ..model import ModelView, ModelSQL, fields",
          "14: from ..wizard import Wizard, StateView, Button, StateTransition",
          "16: from ..backend import TableHandler",
          "17: from ..transaction import Transaction",
          "18: from ..cache import Cache",
          "",
          "[Removed Lines]",
          "15: from ..tools import safe_eval, reduce_ids",
          "",
          "[Added Lines]",
          "13: from ast import literal_eval",
          "17: from ..tools import reduce_ids",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "321:                 date = date.replace(i, j)",
          "322:             res['locale'] = {",
          "323:                 'date': date,",
          "325:                 'decimal_point': user.language.decimal_point,",
          "326:                 'thousands_sep': user.language.thousands_sep,",
          "327:             }",
          "",
          "[Removed Lines]",
          "324:                 'grouping': safe_eval(user.language.grouping),",
          "",
          "[Added Lines]",
          "326:                 'grouping': literal_eval(user.language.grouping),",
          "",
          "---------------"
        ],
        "trytond/webdav/webdav.py||trytond/webdav/webdav.py": [
          "File: trytond/webdav/webdav.py -> trytond/webdav/webdav.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import encodings",
          "9: import uuid",
          "10: import datetime",
          "11: from dateutil.relativedelta import relativedelta",
          "12: from trytond.model import ModelView, ModelSQL, fields",
          "14: from trytond.transaction import Transaction",
          "15: from trytond.pool import Pool",
          "16: from trytond.config import CONFIG",
          "",
          "[Removed Lines]",
          "13: from trytond.tools import reduce_ids, safe_eval",
          "",
          "[Added Lines]",
          "11: from ast import literal_eval",
          "15: from trytond.tools import reduce_ids",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "300:                 if not model_obj:",
          "301:                     return res",
          "302:                 model_ids = model_obj.search(",
          "304:                 for child in model_obj.browse(model_ids):",
          "305:                     if '/' in child.rec_name:",
          "306:                         continue",
          "",
          "[Removed Lines]",
          "303:                         safe_eval(collection.domain or \"[]\"))",
          "",
          "[Added Lines]",
          "305:                         literal_eval(collection.domain or \"[]\"))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "736:             model_name = collection.model.model",
          "737:             model_obj = pool.get(model_name)",
          "738:             ids = list(resources[model_name])",
          "740:             domain = [domain, ('id', 'in', ids)]",
          "741:             record_ids = model_obj.search(domain)",
          "742:             for record in model_obj.browse(record_ids):",
          "",
          "[Removed Lines]",
          "739:             domain = safe_eval(collection.domain or '[]')",
          "",
          "[Added Lines]",
          "741:             domain = literal_eval(collection.domain)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37cd017ce2aaa346582fb53fd418c27449e00295",
      "candidate_info": {
        "commit_hash": "37cd017ce2aaa346582fb53fd418c27449e00295",
        "repo": "tryton/trytond",
        "commit_url": "https://github.com/tryton/trytond/commit/37cd017ce2aaa346582fb53fd418c27449e00295",
        "files": [
          "CHANGELOG",
          "trytond/ir/cron.py",
          "trytond/ir/lang.py",
          "trytond/res/user.py",
          "trytond/webdav/webdav.py"
        ],
        "message": "Use literal_eval instead of safe_eval whenever possible\n\nCVE-2014-6633\nissue4155\nreview10521002\n(grafted from 33dc5c84a9025a78899cf0eac24516ff87bb10a9)\n\n--HG--\nbranch : 2.8",
        "before_after_code_files": [
          "trytond/ir/cron.py||trytond/ir/cron.py",
          "trytond/ir/lang.py||trytond/ir/lang.py",
          "trytond/res/user.py||trytond/res/user.py",
          "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "trytond/ir/cron.py||trytond/ir/cron.py",
            "trytond/ir/lang.py||trytond/ir/lang.py",
            "trytond/res/user.py||trytond/res/user.py",
            "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
          ],
          "candidate": [
            "trytond/ir/cron.py||trytond/ir/cron.py",
            "trytond/ir/lang.py||trytond/ir/lang.py",
            "trytond/res/user.py||trytond/res/user.py",
            "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
          ]
        }
      },
      "candidate_diff": {
        "trytond/ir/cron.py||trytond/ir/cron.py": [
          "File: trytond/ir/cron.py -> trytond/ir/cron.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import traceback",
          "7: import sys",
          "8: import logging",
          "10: from ..model import ModelView, ModelSQL, fields",
          "12: from ..transaction import Transaction",
          "13: from ..pool import Pool",
          "14: from ..backend import TableHandler",
          "",
          "[Removed Lines]",
          "11: from ..tools import safe_eval",
          "",
          "[Added Lines]",
          "9: from ast import literal_eval",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:         pool = Pool()",
          "150:         Config = pool.get('ir.configuration')",
          "151:         try:",
          "153:             Model = pool.get(cron.model)",
          "154:             with Transaction().set_user(cron.user.id):",
          "155:                 getattr(Model, cron.function)(*args)",
          "",
          "[Removed Lines]",
          "152:             args = (cron.args or []) and safe_eval(cron.args)",
          "",
          "[Added Lines]",
          "152:             args = (cron.args or []) and literal_eval(cron.args)",
          "",
          "---------------"
        ],
        "trytond/ir/lang.py||trytond/ir/lang.py": [
          "File: trytond/ir/lang.py -> trytond/ir/lang.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #this repository contains the full copyright notices and license terms.",
          "3: import datetime",
          "4: import warnings",
          "6: from ..model import ModelView, ModelSQL, fields",
          "7: from ..cache import Cache",
          "9: from ..transaction import Transaction",
          "10: from ..pool import Pool",
          "11: from .time_locale import TIME_LOCALE",
          "",
          "[Removed Lines]",
          "8: from ..tools import safe_eval, datetime_strftime",
          "",
          "[Added Lines]",
          "5: from ast import literal_eval",
          "9: from ..tools import datetime_strftime",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:         '''",
          "133:         for lang in langs:",
          "134:             try:",
          "136:                 for i in grouping:",
          "137:                     if not isinstance(i, int):",
          "138:                         raise",
          "",
          "[Removed Lines]",
          "135:                 grouping = safe_eval(lang.grouping)",
          "",
          "[Added Lines]",
          "136:                 grouping = literal_eval(lang.grouping)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "246:         if monetary:",
          "247:             thousands_sep = monetary.mon_thousands_sep",
          "249:         else:",
          "250:             thousands_sep = lang.thousands_sep",
          "252:         if not grouping:",
          "253:             return (s, 0)",
          "254:         if s[-1] == ' ':",
          "",
          "[Removed Lines]",
          "248:             grouping = safe_eval(monetary.mon_grouping)",
          "251:             grouping = safe_eval(lang.grouping)",
          "",
          "[Added Lines]",
          "249:             grouping = literal_eval(monetary.mon_grouping)",
          "252:             grouping = literal_eval(lang.grouping)",
          "",
          "---------------"
        ],
        "trytond/res/user.py||trytond/res/user.py": [
          "File: trytond/res/user.py -> trytond/res/user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import datetime",
          "10: from itertools import groupby, ifilter",
          "11: from operator import attrgetter",
          "13: from ..model import ModelView, ModelSQL, fields",
          "14: from ..wizard import Wizard, StateView, Button, StateTransition",
          "16: from ..backend import TableHandler",
          "17: from ..transaction import Transaction",
          "18: from ..cache import Cache",
          "",
          "[Removed Lines]",
          "15: from ..tools import safe_eval",
          "",
          "[Added Lines]",
          "12: from ast import literal_eval",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:                 date = date.replace(i, j)",
          "329:             res['locale'] = {",
          "330:                 'date': date,",
          "332:                 'decimal_point': user.language.decimal_point,",
          "333:                 'thousands_sep': user.language.thousands_sep,",
          "334:             }",
          "",
          "[Removed Lines]",
          "331:                 'grouping': safe_eval(user.language.grouping),",
          "",
          "[Added Lines]",
          "331:                 'grouping': literal_eval(user.language.grouping),",
          "",
          "---------------"
        ],
        "trytond/webdav/webdav.py||trytond/webdav/webdav.py": [
          "File: trytond/webdav/webdav.py -> trytond/webdav/webdav.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import encodings",
          "9: import uuid",
          "10: import datetime",
          "11: from dateutil.relativedelta import relativedelta",
          "12: from trytond.model import ModelView, ModelSQL, fields",
          "14: from trytond.transaction import Transaction",
          "15: from trytond.pool import Pool",
          "16: from trytond.config import CONFIG",
          "",
          "[Removed Lines]",
          "13: from trytond.tools import reduce_ids, safe_eval",
          "",
          "[Added Lines]",
          "11: from ast import literal_eval",
          "15: from trytond.tools import reduce_ids",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "299:                 if not Model:",
          "300:                     return res",
          "301:                 models = Model.search(",
          "303:                 for child in models:",
          "304:                     if '/' in child.rec_name:",
          "305:                         continue",
          "",
          "[Removed Lines]",
          "302:                         safe_eval(collection.domain or \"[]\"))",
          "",
          "[Added Lines]",
          "304:                     literal_eval(collection.domain))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "753:             model_name = collection.model.model",
          "754:             Model = pool.get(model_name)",
          "755:             ids = list(resources[model_name])",
          "757:             domain = [domain, ('id', 'in', ids)]",
          "758:             records = Model.search(domain)",
          "759:             for record in records:",
          "",
          "[Removed Lines]",
          "756:             domain = safe_eval(collection.domain or '[]')",
          "",
          "[Added Lines]",
          "758:             domain = literal_eval(collection.domain)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56a8b67b94ce0d5426af5ec7e5665f9c74afb732",
      "candidate_info": {
        "commit_hash": "56a8b67b94ce0d5426af5ec7e5665f9c74afb732",
        "repo": "tryton/trytond",
        "commit_url": "https://github.com/tryton/trytond/commit/56a8b67b94ce0d5426af5ec7e5665f9c74afb732",
        "files": [
          "CHANGELOG",
          "trytond/ir/cron.py",
          "trytond/ir/lang.py",
          "trytond/res/user.py",
          "trytond/webdav/webdav.py"
        ],
        "message": "Use literal_eval instead of safe_eval whenever possible\n\nCVE-2014-6633\nissue4155\nreview10521002\n(grafted from 33dc5c84a9025a78899cf0eac24516ff87bb10a9)\n\n--HG--\nbranch : 3.0",
        "before_after_code_files": [
          "trytond/ir/cron.py||trytond/ir/cron.py",
          "trytond/ir/lang.py||trytond/ir/lang.py",
          "trytond/res/user.py||trytond/res/user.py",
          "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "trytond/ir/cron.py||trytond/ir/cron.py",
            "trytond/ir/lang.py||trytond/ir/lang.py",
            "trytond/res/user.py||trytond/res/user.py",
            "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
          ],
          "candidate": [
            "trytond/ir/cron.py||trytond/ir/cron.py",
            "trytond/ir/lang.py||trytond/ir/lang.py",
            "trytond/res/user.py||trytond/res/user.py",
            "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
          ]
        }
      },
      "candidate_diff": {
        "trytond/ir/cron.py||trytond/ir/cron.py": [
          "File: trytond/ir/cron.py -> trytond/ir/cron.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import logging",
          "9: from email.mime.text import MIMEText",
          "10: from email.header import Header",
          "12: from ..model import ModelView, ModelSQL, fields",
          "14: from ..transaction import Transaction",
          "15: from ..pool import Pool",
          "16: from .. import backend",
          "",
          "[Removed Lines]",
          "13: from ..tools import safe_eval, get_smtp_server",
          "",
          "[Added Lines]",
          "11: from ast import literal_eval",
          "14: from ..tools import get_smtp_server",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:         pool = Pool()",
          "158:         Config = pool.get('ir.configuration')",
          "159:         try:",
          "161:             Model = pool.get(cron.model)",
          "162:             with Transaction().set_user(cron.user.id):",
          "163:                 getattr(Model, cron.function)(*args)",
          "",
          "[Removed Lines]",
          "160:             args = (cron.args or []) and safe_eval(cron.args)",
          "",
          "[Added Lines]",
          "161:             args = (cron.args or []) and literal_eval(cron.args)",
          "",
          "---------------"
        ],
        "trytond/ir/lang.py||trytond/ir/lang.py": [
          "File: trytond/ir/lang.py -> trytond/ir/lang.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #this repository contains the full copyright notices and license terms.",
          "3: import datetime",
          "4: import warnings",
          "6: from ..model import ModelView, ModelSQL, fields",
          "7: from ..cache import Cache",
          "9: from ..transaction import Transaction",
          "10: from ..pool import Pool",
          "11: from .time_locale import TIME_LOCALE",
          "",
          "[Removed Lines]",
          "8: from ..tools import safe_eval, datetime_strftime",
          "",
          "[Added Lines]",
          "5: from ast import literal_eval",
          "9: from ..tools import datetime_strftime",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:         '''",
          "133:         for lang in langs:",
          "134:             try:",
          "136:                 for i in grouping:",
          "137:                     if not isinstance(i, int):",
          "138:                         raise",
          "",
          "[Removed Lines]",
          "135:                 grouping = safe_eval(lang.grouping)",
          "",
          "[Added Lines]",
          "136:                 grouping = literal_eval(lang.grouping)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255:         if monetary:",
          "256:             thousands_sep = monetary.mon_thousands_sep",
          "258:         else:",
          "259:             thousands_sep = lang.thousands_sep",
          "261:         if not grouping:",
          "262:             return (s, 0)",
          "263:         if s[-1] == ' ':",
          "",
          "[Removed Lines]",
          "257:             grouping = safe_eval(monetary.mon_grouping)",
          "260:             grouping = safe_eval(lang.grouping)",
          "",
          "[Added Lines]",
          "258:             grouping = literal_eval(monetary.mon_grouping)",
          "261:             grouping = literal_eval(lang.grouping)",
          "",
          "---------------"
        ],
        "trytond/res/user.py||trytond/res/user.py": [
          "File: trytond/res/user.py -> trytond/res/user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import datetime",
          "10: from itertools import groupby, ifilter",
          "11: from operator import attrgetter",
          "12: from sql import Literal",
          "13: from sql.aggregate import Count",
          "15: from ..model import ModelView, ModelSQL, fields",
          "16: from ..wizard import Wizard, StateView, Button, StateTransition",
          "18: from .. import backend",
          "19: from ..transaction import Transaction",
          "20: from ..cache import Cache",
          "",
          "[Removed Lines]",
          "17: from ..tools import safe_eval",
          "",
          "[Added Lines]",
          "12: from ast import literal_eval",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "331:                 date = date.replace(i, j)",
          "332:             res['locale'] = {",
          "333:                 'date': date,",
          "335:                 'decimal_point': user.language.decimal_point,",
          "336:                 'thousands_sep': user.language.thousands_sep,",
          "337:             }",
          "",
          "[Removed Lines]",
          "334:                 'grouping': safe_eval(user.language.grouping),",
          "",
          "[Added Lines]",
          "335:                 'grouping': literal_eval(user.language.grouping),",
          "",
          "---------------"
        ],
        "trytond/webdav/webdav.py||trytond/webdav/webdav.py": [
          "File: trytond/webdav/webdav.py -> trytond/webdav/webdav.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import encodings",
          "9: import uuid",
          "10: import datetime",
          "11: from dateutil.relativedelta import relativedelta",
          "12: from sql.functions import Extract",
          "13: from sql.conditionals import Coalesce",
          "15: from trytond.model import ModelView, ModelSQL, fields",
          "17: from trytond.transaction import Transaction",
          "18: from trytond.pool import Pool",
          "19: from trytond.config import CONFIG",
          "",
          "[Removed Lines]",
          "16: from trytond.tools import reduce_ids, safe_eval",
          "",
          "[Added Lines]",
          "11: from ast import literal_eval",
          "18: from trytond.tools import reduce_ids",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:                 if not Model:",
          "307:                     return res",
          "308:                 models = Model.search(",
          "310:                 for child in models:",
          "311:                     if '/' in child.rec_name:",
          "312:                         continue",
          "",
          "[Removed Lines]",
          "309:                         safe_eval(collection.domain or \"[]\"))",
          "",
          "[Added Lines]",
          "311:                     literal_eval(collection.domain))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "760:             model_name = collection.model.model",
          "761:             Model = pool.get(model_name)",
          "762:             ids = list(resources[model_name])",
          "764:             domain = [domain, ('id', 'in', ids)]",
          "765:             records = Model.search(domain)",
          "766:             for record in records:",
          "",
          "[Removed Lines]",
          "763:             domain = safe_eval(collection.domain or '[]')",
          "",
          "[Added Lines]",
          "765:             domain = literal_eval(collection.domain)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "397765e3e2b2a3b6fbba886396bf9aa047e74a99",
      "candidate_info": {
        "commit_hash": "397765e3e2b2a3b6fbba886396bf9aa047e74a99",
        "repo": "tryton/trytond",
        "commit_url": "https://github.com/tryton/trytond/commit/397765e3e2b2a3b6fbba886396bf9aa047e74a99",
        "files": [
          "CHANGELOG",
          "trytond/ir/cron.py",
          "trytond/ir/lang.py",
          "trytond/res/user.py",
          "trytond/webdav/webdav.py"
        ],
        "message": "Use literal_eval instead of safe_eval whenever possible\n\nCVE-2014-6633\nissue4155\nreview10521002\n(grafted from 33dc5c84a9025a78899cf0eac24516ff87bb10a9)\n\n--HG--\nbranch : 3.2",
        "before_after_code_files": [
          "trytond/ir/cron.py||trytond/ir/cron.py",
          "trytond/ir/lang.py||trytond/ir/lang.py",
          "trytond/res/user.py||trytond/res/user.py",
          "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "trytond/ir/cron.py||trytond/ir/cron.py",
            "trytond/ir/lang.py||trytond/ir/lang.py",
            "trytond/res/user.py||trytond/res/user.py",
            "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
          ],
          "candidate": [
            "trytond/ir/cron.py||trytond/ir/cron.py",
            "trytond/ir/lang.py||trytond/ir/lang.py",
            "trytond/res/user.py||trytond/res/user.py",
            "trytond/webdav/webdav.py||trytond/webdav/webdav.py"
          ]
        }
      },
      "candidate_diff": {
        "trytond/ir/cron.py||trytond/ir/cron.py": [
          "File: trytond/ir/cron.py -> trytond/ir/cron.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: import logging",
          "8: from email.mime.text import MIMEText",
          "9: from email.header import Header",
          "11: from ..model import ModelView, ModelSQL, fields",
          "13: from ..transaction import Transaction",
          "14: from ..pool import Pool",
          "15: from .. import backend",
          "",
          "[Removed Lines]",
          "12: from ..tools import safe_eval, get_smtp_server",
          "",
          "[Added Lines]",
          "10: from ast import literal_eval",
          "13: from ..tools import get_smtp_server",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:         pool = Pool()",
          "157:         Config = pool.get('ir.configuration')",
          "158:         try:",
          "160:             Model = pool.get(cron.model)",
          "161:             with Transaction().set_user(cron.user.id):",
          "162:                 getattr(Model, cron.function)(*args)",
          "",
          "[Removed Lines]",
          "159:             args = (cron.args or []) and safe_eval(cron.args)",
          "",
          "[Added Lines]",
          "160:             args = (cron.args or []) and literal_eval(cron.args)",
          "",
          "---------------"
        ],
        "trytond/ir/lang.py||trytond/ir/lang.py": [
          "File: trytond/ir/lang.py -> trytond/ir/lang.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #this repository contains the full copyright notices and license terms.",
          "3: import datetime",
          "4: import warnings",
          "6: from ..model import ModelView, ModelSQL, fields",
          "7: from ..cache import Cache",
          "9: from ..transaction import Transaction",
          "10: from ..pool import Pool",
          "11: from .time_locale import TIME_LOCALE",
          "",
          "[Removed Lines]",
          "8: from ..tools import safe_eval, datetime_strftime",
          "",
          "[Added Lines]",
          "5: from ast import literal_eval",
          "9: from ..tools import datetime_strftime",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:         '''",
          "133:         for lang in langs:",
          "134:             try:",
          "136:                 for i in grouping:",
          "137:                     if not isinstance(i, int):",
          "138:                         raise",
          "",
          "[Removed Lines]",
          "135:                 grouping = safe_eval(lang.grouping)",
          "",
          "[Added Lines]",
          "136:                 grouping = literal_eval(lang.grouping)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255:         if monetary:",
          "256:             thousands_sep = monetary.mon_thousands_sep",
          "258:         else:",
          "259:             thousands_sep = lang.thousands_sep",
          "261:         if not grouping:",
          "262:             return (s, 0)",
          "263:         if s[-1] == ' ':",
          "",
          "[Removed Lines]",
          "257:             grouping = safe_eval(monetary.mon_grouping)",
          "260:             grouping = safe_eval(lang.grouping)",
          "",
          "[Added Lines]",
          "258:             grouping = literal_eval(monetary.mon_grouping)",
          "261:             grouping = literal_eval(lang.grouping)",
          "",
          "---------------"
        ],
        "trytond/res/user.py||trytond/res/user.py": [
          "File: trytond/res/user.py -> trytond/res/user.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import datetime",
          "10: from itertools import groupby, ifilter",
          "11: from operator import attrgetter",
          "12: from sql import Literal",
          "13: from sql.conditionals import Coalesce",
          "14: from sql.aggregate import Count",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: from ast import literal_eval",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344:                 date = date.replace(i, j)",
          "345:             res['locale'] = {",
          "346:                 'date': date,",
          "348:                 'decimal_point': user.language.decimal_point,",
          "349:                 'thousands_sep': user.language.thousands_sep,",
          "350:             }",
          "",
          "[Removed Lines]",
          "347:                 'grouping': safe_eval(user.language.grouping),",
          "",
          "[Added Lines]",
          "349:                 'grouping': literal_eval(user.language.grouping),",
          "",
          "---------------"
        ],
        "trytond/webdav/webdav.py||trytond/webdav/webdav.py": [
          "File: trytond/webdav/webdav.py -> trytond/webdav/webdav.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import encodings",
          "9: import uuid",
          "10: import datetime",
          "11: from dateutil.relativedelta import relativedelta",
          "12: from sql.functions import Extract",
          "13: from sql.conditionals import Coalesce",
          "15: from trytond.model import ModelView, ModelSQL, fields",
          "17: from trytond.transaction import Transaction",
          "18: from trytond.pool import Pool",
          "19: from trytond.config import CONFIG",
          "",
          "[Removed Lines]",
          "16: from trytond.tools import reduce_ids, safe_eval",
          "",
          "[Added Lines]",
          "11: from ast import literal_eval",
          "18: from trytond.tools import reduce_ids",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:                 if not Model:",
          "307:                     return res",
          "308:                 models = Model.search(",
          "310:                 for child in models:",
          "311:                     if '/' in child.rec_name:",
          "312:                         continue",
          "",
          "[Removed Lines]",
          "309:                         safe_eval(collection.domain or \"[]\"))",
          "",
          "[Added Lines]",
          "311:                     literal_eval(collection.domain))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "760:             model_name = collection.model.model",
          "761:             Model = pool.get(model_name)",
          "762:             ids = list(resources[model_name])",
          "764:             domain = [domain, ('id', 'in', ids)]",
          "765:             records = Model.search(domain)",
          "766:             for record in records:",
          "",
          "[Removed Lines]",
          "763:             domain = safe_eval(collection.domain or '[]')",
          "",
          "[Added Lines]",
          "765:             domain = literal_eval(collection.domain)",
          "",
          "---------------"
        ]
      }
    }
  ]
}