{
  "cve_id": "CVE-2023-6753",
  "cve_desc": "Path Traversal in GitHub repository mlflow/mlflow prior to 2.9.2.",
  "repo": "mlflow/mlflow",
  "patch_hash": "1c6309f884798fbf56017a3cc808016869ee8de4",
  "patch_info": {
    "commit_hash": "1c6309f884798fbf56017a3cc808016869ee8de4",
    "repo": "mlflow/mlflow",
    "commit_url": "https://github.com/mlflow/mlflow/commit/1c6309f884798fbf56017a3cc808016869ee8de4",
    "files": [
      "mlflow/data/http_dataset_source.py",
      "tests/data/test_http_dataset_source.py"
    ],
    "message": "Fix for windows traversal attack (#10647)\n\nSigned-off-by: Ben Wilson <benjamin.wilson@databricks.com>\nSigned-off-by: Ben Wilson <39283302+BenWilson2@users.noreply.github.com>\nCo-authored-by: Harutaka Kawamura <hkawamura0130@gmail.com>",
    "before_after_code_files": [
      "mlflow/data/http_dataset_source.py||mlflow/data/http_dataset_source.py",
      "tests/data/test_http_dataset_source.py||tests/data/test_http_dataset_source.py"
    ]
  },
  "patch_diff": {
    "mlflow/data/http_dataset_source.py||mlflow/data/http_dataset_source.py": [
      "File: mlflow/data/http_dataset_source.py -> mlflow/data/http_dataset_source.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import os",
      "3: import re",
      "4: from typing import Any, Dict",
      "5: from urllib.parse import urlparse",
      "",
      "[Removed Lines]",
      "2: import posixpath",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41:     def _get_source_type() -> str:",
      "42:         return \"http\"",
      "44:     def load(self, dst_path=None) -> str:",
      "45:         \"\"\"",
      "46:         Downloads the dataset source to the local filesystem.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "43:     def _extract_filename(self, response) -> str:",
      "44:         \"\"\"",
      "45:         Extracts a filename from the Content-Disposition header or the URL's path.",
      "46:         \"\"\"",
      "47:         if content_disposition := response.headers.get(\"Content-Disposition\"):",
      "48:             for match in re.finditer(r\"filename=(.+)\", content_disposition):",
      "49:                 filename = match[1].strip(\"'\\\"\")",
      "50:                 if _is_path(filename):",
      "51:                     raise MlflowException.invalid_parameter_value(",
      "52:                         f\"Invalid filename in Content-Disposition header: {filename}. \"",
      "53:                         \"It must be a file name, not a path.\"",
      "54:                     )",
      "55:                 return filename",
      "57:         # Extract basename from URL if no valid filename in Content-Disposition",
      "58:         return os.path.basename(urlparse(self.url).path)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "58:         )",
      "59:         augmented_raise_for_status(resp)",
      "76:             basename = \"dataset_source\"",
      "78:         if dst_path is None:",
      "",
      "[Removed Lines]",
      "61:         path = urlparse(self.url).path",
      "62:         content_disposition = resp.headers.get(\"Content-Disposition\")",
      "63:         if content_disposition is not None and (",
      "64:             file_name := next(re.finditer(r\"filename=(.+)\", content_disposition), None)",
      "65:         ):",
      "66:             # NB: If the filename is quoted, unquote it",
      "67:             basename = file_name[1].strip(\"'\\\"\")",
      "68:             if _is_path(basename):",
      "69:                 raise MlflowException.invalid_parameter_value(",
      "70:                     f\"Invalid filename in Content-Disposition header: {basename}. \"",
      "71:                     \"It must be a file name, not a path.\"",
      "72:                 )",
      "73:         elif path is not None and len(posixpath.basename(path)) > 0:",
      "74:             basename = posixpath.basename(path)",
      "75:         else:",
      "",
      "[Added Lines]",
      "77:         basename = self._extract_filename(resp)",
      "79:         if not basename:",
      "",
      "---------------"
    ],
    "tests/data/test_http_dataset_source.py||tests/data/test_http_dataset_source.py": [
      "File: tests/data/test_http_dataset_source.py -> tests/data/test_http_dataset_source.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: from mlflow.data.dataset_source_registry import get_dataset_source_from_json, resolve_dataset_source",
      "9: from mlflow.data.http_dataset_source import HTTPDatasetSource",
      "10: from mlflow.exceptions import MlflowException",
      "11: from mlflow.utils.rest_utils import cloud_storage_http_request",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11: from mlflow.utils.os import is_windows",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "156:         with pytest.raises(MlflowException, match=\"Invalid filename in Content-Disposition header\"):",
      "157:             source.load()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "161: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
      "162: @pytest.mark.parametrize(",
      "163:     \"filename\",",
      "164:     [",
      "165:         r\"..\\..\\poc.txt\",",
      "166:         r\"Users\\User\\poc.txt\",",
      "167:     ],",
      "168: )",
      "169: def test_source_load_with_content_disposition_header_invalid_filename_windows(filename):",
      "170:     def download_with_mock_content_disposition_headers(*args, **kwargs):",
      "171:         response = cloud_storage_http_request(*args, **kwargs)",
      "172:         response.headers = {\"Content-Disposition\": f\"attachment; filename={filename}\"}",
      "173:         return response",
      "175:     with mock.patch(",
      "176:         \"mlflow.data.http_dataset_source.cloud_storage_http_request\",",
      "177:         side_effect=download_with_mock_content_disposition_headers,",
      "178:     ):",
      "179:         source = HTTPDatasetSource(",
      "180:             \"https://raw.githubusercontent.com/mlflow/mlflow/master/tests/datasets/winequality-red.csv\"",
      "181:         )",
      "183:         # Expect an MlflowException for invalid filenames",
      "184:         with pytest.raises(MlflowException, match=\"Invalid filename in Content-Disposition header\"):",
      "185:             source.load()",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4210d25c5ec8442c750985ea60fc22fd13160506",
      "candidate_info": {
        "commit_hash": "4210d25c5ec8442c750985ea60fc22fd13160506",
        "repo": "mlflow/mlflow",
        "commit_url": "https://github.com/mlflow/mlflow/commit/4210d25c5ec8442c750985ea60fc22fd13160506",
        "files": [
          "mlflow/data/http_dataset_source.py"
        ],
        "message": "Enabled stream in HTTPDatasetSource.load (#8589)\n\nSigned-off-by: harupy <hkawamura0130@gmail.com>",
        "before_after_code_files": [
          "mlflow/data/http_dataset_source.py||mlflow/data/http_dataset_source.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "mlflow/data/http_dataset_source.py||mlflow/data/http_dataset_source.py"
          ],
          "candidate": [
            "mlflow/data/http_dataset_source.py||mlflow/data/http_dataset_source.py"
          ]
        }
      },
      "candidate_diff": {
        "mlflow/data/http_dataset_source.py||mlflow/data/http_dataset_source.py": [
          "File: mlflow/data/http_dataset_source.py -> mlflow/data/http_dataset_source.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:         resp = cloud_storage_http_request(",
          "51:             method=\"GET\",",
          "52:             url=self.url,",
          "53:         )",
          "54:         augmented_raise_for_status(resp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:             stream=True,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d3c146b0178a401506b0136c830674e8edec80f",
      "candidate_info": {
        "commit_hash": "3d3c146b0178a401506b0136c830674e8edec80f",
        "repo": "mlflow/mlflow",
        "commit_url": "https://github.com/mlflow/mlflow/commit/3d3c146b0178a401506b0136c830674e8edec80f",
        "files": [
          "mlflow/data/http_dataset_source.py",
          "tests/data/test_http_dataset_source.py"
        ],
        "message": "Fix for windows traversal attack (#10647)\n\nSigned-off-by: Ben Wilson <benjamin.wilson@databricks.com>\nSigned-off-by: Ben Wilson <39283302+BenWilson2@users.noreply.github.com>\nCo-authored-by: Harutaka Kawamura <hkawamura0130@gmail.com>",
        "before_after_code_files": [
          "mlflow/data/http_dataset_source.py||mlflow/data/http_dataset_source.py",
          "tests/data/test_http_dataset_source.py||tests/data/test_http_dataset_source.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "mlflow/data/http_dataset_source.py||mlflow/data/http_dataset_source.py",
            "tests/data/test_http_dataset_source.py||tests/data/test_http_dataset_source.py"
          ],
          "candidate": [
            "mlflow/data/http_dataset_source.py||mlflow/data/http_dataset_source.py",
            "tests/data/test_http_dataset_source.py||tests/data/test_http_dataset_source.py"
          ]
        }
      },
      "candidate_diff": {
        "mlflow/data/http_dataset_source.py||mlflow/data/http_dataset_source.py": [
          "File: mlflow/data/http_dataset_source.py -> mlflow/data/http_dataset_source.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import os",
          "3: import re",
          "4: from typing import Any, Dict",
          "5: from urllib.parse import urlparse",
          "",
          "[Removed Lines]",
          "2: import posixpath",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     def _get_source_type() -> str:",
          "42:         return \"http\"",
          "44:     def load(self, dst_path=None) -> str:",
          "45:         \"\"\"",
          "46:         Downloads the dataset source to the local filesystem.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:     def _extract_filename(self, response) -> str:",
          "44:         \"\"\"",
          "45:         Extracts a filename from the Content-Disposition header or the URL's path.",
          "46:         \"\"\"",
          "47:         if content_disposition := response.headers.get(\"Content-Disposition\"):",
          "48:             for match in re.finditer(r\"filename=(.+)\", content_disposition):",
          "49:                 filename = match[1].strip(\"'\\\"\")",
          "50:                 if _is_path(filename):",
          "51:                     raise MlflowException.invalid_parameter_value(",
          "52:                         f\"Invalid filename in Content-Disposition header: {filename}. \"",
          "53:                         \"It must be a file name, not a path.\"",
          "54:                     )",
          "55:                 return filename",
          "57:         # Extract basename from URL if no valid filename in Content-Disposition",
          "58:         return os.path.basename(urlparse(self.url).path)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:         )",
          "59:         augmented_raise_for_status(resp)",
          "76:             basename = \"dataset_source\"",
          "78:         if dst_path is None:",
          "",
          "[Removed Lines]",
          "61:         path = urlparse(self.url).path",
          "62:         content_disposition = resp.headers.get(\"Content-Disposition\")",
          "63:         if content_disposition is not None and (",
          "64:             file_name := next(re.finditer(r\"filename=(.+)\", content_disposition), None)",
          "65:         ):",
          "66:             # NB: If the filename is quoted, unquote it",
          "67:             basename = file_name[1].strip(\"'\\\"\")",
          "68:             if _is_path(basename):",
          "69:                 raise MlflowException.invalid_parameter_value(",
          "70:                     f\"Invalid filename in Content-Disposition header: {basename}. \"",
          "71:                     \"It must be a file name, not a path.\"",
          "72:                 )",
          "73:         elif path is not None and len(posixpath.basename(path)) > 0:",
          "74:             basename = posixpath.basename(path)",
          "75:         else:",
          "",
          "[Added Lines]",
          "77:         basename = self._extract_filename(resp)",
          "79:         if not basename:",
          "",
          "---------------"
        ],
        "tests/data/test_http_dataset_source.py||tests/data/test_http_dataset_source.py": [
          "File: tests/data/test_http_dataset_source.py -> tests/data/test_http_dataset_source.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from mlflow.data.dataset_source_registry import get_dataset_source_from_json, resolve_dataset_source",
          "9: from mlflow.data.http_dataset_source import HTTPDatasetSource",
          "10: from mlflow.exceptions import MlflowException",
          "11: from mlflow.utils.rest_utils import cloud_storage_http_request",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: from mlflow.utils.os import is_windows",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:         with pytest.raises(MlflowException, match=\"Invalid filename in Content-Disposition header\"):",
          "157:             source.load()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
          "162: @pytest.mark.parametrize(",
          "163:     \"filename\",",
          "164:     [",
          "165:         r\"..\\..\\poc.txt\",",
          "166:         r\"Users\\User\\poc.txt\",",
          "167:     ],",
          "168: )",
          "169: def test_source_load_with_content_disposition_header_invalid_filename_windows(filename):",
          "170:     def download_with_mock_content_disposition_headers(*args, **kwargs):",
          "171:         response = cloud_storage_http_request(*args, **kwargs)",
          "172:         response.headers = {\"Content-Disposition\": f\"attachment; filename={filename}\"}",
          "173:         return response",
          "175:     with mock.patch(",
          "176:         \"mlflow.data.http_dataset_source.cloud_storage_http_request\",",
          "177:         side_effect=download_with_mock_content_disposition_headers,",
          "178:     ):",
          "179:         source = HTTPDatasetSource(",
          "180:             \"https://raw.githubusercontent.com/mlflow/mlflow/master/tests/datasets/winequality-red.csv\"",
          "181:         )",
          "183:         # Expect an MlflowException for invalid filenames",
          "184:         with pytest.raises(MlflowException, match=\"Invalid filename in Content-Disposition header\"):",
          "185:             source.load()",
          "",
          "---------------"
        ]
      }
    }
  ]
}