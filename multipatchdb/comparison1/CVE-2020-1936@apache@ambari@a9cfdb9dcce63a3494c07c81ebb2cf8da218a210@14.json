{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e89e2048515c2a8f279d0e0e8bc772f6654468bf",
      "candidate_info": {
        "commit_hash": "e89e2048515c2a8f279d0e0e8bc772f6654468bf",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/e89e2048515c2a8f279d0e0e8bc772f6654468bf",
        "files": [
          "ambari-web/app/views/common/configs/config_versions_control_view.js"
        ],
        "message": "AMBARI-25185 Chrome and Firefox browsers are crashing while opening Ambari UI. (ababiichuk)",
        "before_after_code_files": [
          "ambari-web/app/views/common/configs/config_versions_control_view.js||ambari-web/app/views/common/configs/config_versions_control_view.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/views/common/configs/config_versions_control_view.js||ambari-web/app/views/common/configs/config_versions_control_view.js": [
          "File: ambari-web/app/views/common/configs/config_versions_control_view.js -> ambari-web/app/views/common/configs/config_versions_control_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     return serviceVersions.sort(function (a, b) {",
          "48:       return Em.get(b, 'createTime') - Em.get(a, 'createTime');",
          "49:     });",
          "52:   primaryServiceVersionsInCompare: function() {",
          "53:     return this.get('serviceVersions').filter((sv) => sv.get('version') !== this.get('controller.compareServiceVersion.version'));",
          "",
          "[Removed Lines]",
          "50:   }.property('serviceName', 'controller.selectedConfigGroup.name'),",
          "",
          "[Added Lines]",
          "50:   }.property('controller.selectedConfigGroup.name'),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "041e26889c18639b6916cee3ad6353405279b784",
      "candidate_info": {
        "commit_hash": "041e26889c18639b6916cee3ad6353405279b784",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/041e26889c18639b6916cee3ad6353405279b784",
        "files": [
          "ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py"
        ],
        "message": "AMBARI-24716 : Restrict user permissions for Atlas configuration file. (#2419)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py||ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py||ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py": [
          "File: ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py -> ambari-server/src/main/resources/common-services/ATLAS/0.1.0.2.3/package/scripts/metadata.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:           Execute(('chown', format('{metadata_user}:{user_group}'), file),",
          "115:                   sudo=True",
          "116:                   )",
          "118:                   sudo=True",
          "119:                   )",
          "",
          "[Removed Lines]",
          "117:           Execute(('chmod', '644', file),",
          "",
          "[Added Lines]",
          "117:           Execute(('chmod', '640', file),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "983a8a62672d447d5350ca8ef2efcee649b1770e",
      "candidate_info": {
        "commit_hash": "983a8a62672d447d5350ca8ef2efcee649b1770e",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/983a8a62672d447d5350ca8ef2efcee649b1770e",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/README.md",
          "ambari-logsearch/ambari-logsearch-web/src/app/app.module.ts"
        ],
        "message": "[AMBARI-24445] [Log Search UI] exclude mock data from production build (#2029)\n\n(cherry picked from commit ea95b8353ac07f4c6897ba4b7b31513ad23bd13d)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/app.module.ts||ambari-logsearch/ambari-logsearch-web/src/app/app.module.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/app.module.ts||ambari-logsearch/ambari-logsearch-web/src/app/app.module.ts": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/app.module.ts -> ambari-logsearch/ambari-logsearch-web/src/app/app.module.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import {ServiceInjector} from '@app/classes/service-injector';",
          "42: import {HttpClientService} from '@app/services/http-client.service';",
          "43: import {UtilsService} from '@app/services/utils.service';",
          "44: import {LogsContainerService} from '@app/services/logs-container.service';",
          "",
          "[Removed Lines]",
          "41: import {MockApiDataService} from '@app/services/mock-api-data.service';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116: import {LogsStateService} from '@app/services/storage/logs-state.service';",
          "117: import {LoginScreenGuardService} from '@app/services/login-screen-guard.service';",
          "136: @NgModule({",
          "137:   declarations: [",
          "138:     AppComponent,",
          "",
          "[Removed Lines]",
          "119: export function getXHRBackend(",
          "120:   injector: Injector, browser: BrowserXhr, xsrf: XSRFStrategy, options: ResponseOptions",
          "121: ): XHRBackend | InMemoryBackendService {",
          "122:   if (environment.production) {",
          "123:     return new XHRBackend(browser, options, xsrf);",
          "124:   } else {",
          "125:     return new InMemoryBackendService(",
          "126:       injector,",
          "127:       new MockApiDataService(),",
          "128:       {",
          "129:         passThruUnknownUrl: true,",
          "130:         rootPath: ''",
          "131:       }",
          "132:     );",
          "133:   }",
          "134: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "230:     TabsService,",
          "231:     TabGuard,",
          "232:     LogsBreadcrumbsResolverService,",
          "238:     AuthService,",
          "239:     AuthGuardService,",
          "240:     HistoryManagerService,",
          "",
          "[Removed Lines]",
          "233:     {",
          "234:       provide: XHRBackend,",
          "235:       useFactory: getXHRBackend,",
          "236:       deps: [Injector, BrowserXhr, XSRFStrategy, ResponseOptions]",
          "237:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97827c52e725009a36a3cd621dbcf776203008e9",
      "candidate_info": {
        "commit_hash": "97827c52e725009a36a3cd621dbcf776203008e9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/97827c52e725009a36a3cd621dbcf776203008e9",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java"
        ],
        "message": "AMBARI-25250. Blueprint processor should support multiple ZooKeeper nodes for livy.server.recovery.state-store.url (#2935)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2826:     Map<String, PropertyUpdater> oozieEnvHeapSizeMap = new HashMap<>();",
          "2827:     Map<String, PropertyUpdater> multiWebhcatSiteMap = new HashMap<>();",
          "2828:     Map<String, PropertyUpdater> multiHbaseSiteMap = new HashMap<>();",
          "2829:     Map<String, PropertyUpdater> multiStormSiteMap = new HashMap<>();",
          "2830:     Map<String, PropertyUpdater> multiCoreSiteMap = new HashMap<>();",
          "2831:     Map<String, PropertyUpdater> multiHdfsSiteMap = new HashMap<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2829:     Map<String, PropertyUpdater> livy2Conf = new HashMap<>();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2899:     multiHostTopologyUpdaters.put(\"accumulo-site\", multiAccumuloSiteMap);",
          "2900:     multiHostTopologyUpdaters.put(\"kms-site\", multiRangerKmsSiteMap);",
          "2901:     multiHostTopologyUpdaters.put(\"application-properties\", atlasPropsMap);",
          "2903:     dbHostTopologyUpdaters.put(\"hive-site\", dbHiveSiteMap);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2903:     multiHostTopologyUpdaters.put(\"livy2-conf\", livy2Conf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3225:     druidCommon.put(\"metastore_hostname\", HostGroupUpdater.INSTANCE);",
          "3226:     druidCommon.put(\"druid.metadata.storage.connector.connectURI\", HostGroupUpdater.INSTANCE);",
          "3227:     druidCommon.put(\"druid.zk.service.host\", new MultipleHostTopologyUpdater(\"ZOOKEEPER_SERVER\"));",
          "3228:   }",
          "3230:   private static void addUnitPropertyUpdaters() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3231:     livy2Conf.put(\"livy.server.recovery.state-store.url\", new MultipleHostTopologyUpdater(\"ZOOKEEPER_SERVER\"));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2764:     Map<String, String> typeProps = new HashMap<>();",
          "2765:     typeProps.put(\"hbase.zookeeper.quorum\", \"localhost\");",
          "2766:     properties.put(\"hbase-site\", typeProps);",
          "2768:     Configuration clusterConfig = new Configuration(properties, emptyMap());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2767:     Map<String, String> livyConf = new HashMap<>();",
          "2768:     livyConf.put(\"livy.server.recovery.state-store.url\", \"/livy2-recovery\");",
          "2769:     properties.put(\"livy2-conf\", livyConf);",
          "2770:     Map<String, String> originalLivyConf = ImmutableMap.copyOf(livyConf);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2799:     ClusterTopology topology = createClusterTopology(bp, clusterConfig, hostGroups);",
          "2800:     BlueprintConfigurationProcessor updater = new BlueprintConfigurationProcessor(topology);",
          "2801:     updater.doUpdateForClusterCreate();",
          "2803:     String[] hosts = updatedVal.split(\",\");",
          "2805:     Collection<String> expectedHosts = new HashSet<>();",
          "",
          "[Removed Lines]",
          "2802:     String updatedVal = topology.getConfiguration().getFullProperties().get(\"hbase-site\").get(\"hbase.zookeeper.quorum\");",
          "",
          "[Added Lines]",
          "2806:     Map<String, Map<String, String>> fullProperties = topology.getConfiguration().getFullProperties();",
          "2807:     String updatedVal = fullProperties.get(\"hbase-site\").get(\"hbase.zookeeper.quorum\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2813:       assertTrue(expectedHosts.contains(host));",
          "2814:       expectedHosts.remove(host);",
          "2815:     }",
          "2816:   }",
          "2818:   @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2822:     assertEquals(originalLivyConf, fullProperties.get(\"livy2-conf\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfcec7bf72677785539eae5130ed56ed84877e06",
      "candidate_info": {
        "commit_hash": "bfcec7bf72677785539eae5130ed56ed84877e06",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/bfcec7bf72677785539eae5130ed56ed84877e06",
        "files": [
          "ambari-web/app/controllers/main/admin/federation/step3_controller.js",
          "ambari-web/app/controllers/main/admin/federation/step4_controller.js",
          "ambari-web/app/data/configs/wizards/federation_properties.js"
        ],
        "message": "AMBARI-24525 Accumulo does not startup in Federated Cluster. (ababiichuk)",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/admin/federation/step3_controller.js||ambari-web/app/controllers/main/admin/federation/step3_controller.js",
          "ambari-web/app/controllers/main/admin/federation/step4_controller.js||ambari-web/app/controllers/main/admin/federation/step4_controller.js",
          "ambari-web/app/data/configs/wizards/federation_properties.js||ambari-web/app/data/configs/wizards/federation_properties.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/admin/federation/step3_controller.js||ambari-web/app/controllers/main/admin/federation/step3_controller.js": [
          "File: ambari-web/app/controllers/main/admin/federation/step3_controller.js -> ambari-web/app/controllers/main/admin/federation/step3_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:     return App.ajax.send({",
          "54:       name: 'config.tags',",
          "55:       sender: this,",
          "58:     });",
          "59:   },",
          "62:   onLoadConfigsTags: function (data) {",
          "63:     var urlParams = '(type=hdfs-site&tag=' + data.Clusters.desired_configs['hdfs-site'].tag + ')';",
          "65:       urlParams += '|(type=core-site&tag=' + data.Clusters.desired_configs['core-site'].tag + ')' +",
          "66:       '|(type=ranger-tagsync-site&tag=' + data.Clusters.desired_configs['ranger-tagsync-site'].tag + ')' +",
          "67:           '|(type=ranger-hdfs-security&tag=' + data.Clusters.desired_configs['ranger-hdfs-security'].tag + ')'",
          "68:     }",
          "69:     App.ajax.send({",
          "70:       name: 'admin.get.all_configurations',",
          "71:       sender: this,",
          "72:       data: {",
          "73:         urlParams: urlParams",
          "74:       },",
          "77:     });",
          "78:   },",
          "",
          "[Removed Lines]",
          "56:       success: 'onLoadConfigsTags',",
          "57:       error: 'onTaskError'",
          "64:     if (App.Service.find().someProperty('serviceName', 'RANGER')) {",
          "75:       success: 'onLoadConfigs',",
          "76:       error: 'onTaskError'",
          "",
          "[Added Lines]",
          "56:       success: 'onLoadConfigsTags'",
          "62:     var servicesModel = App.Service.find();",
          "64:     if (servicesModel.someProperty('serviceName', 'RANGER')) {",
          "69:     if (servicesModel.someProperty('serviceName', 'ACCUMULO')) {",
          "70:       urlParams += '|(type=accumulo-site&tag=' + data.Clusters.desired_configs['accumulo-site'].tag + ')';",
          "71:     }",
          "78:       success: 'onLoadConfigs'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:   },",
          "133:   tweakServiceConfigs: function (configs) {",
          "134:     var dependencies = this.prepareDependencies();",
          "135:     var nameServices = App.HDFSService.find().objectAt(0).get('masterComponentGroups').mapProperty('name');",
          "136:     nameServices.push(dependencies.newNameservice);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     var servicesModel = App.Service.find();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:       ]);",
          "148:     }",
          "151:       var hdfsRangerConfigs = this.get('serverConfigData').items.findProperty('type', 'ranger-hdfs-security').properties;",
          "152:       var reponamePrefix = hdfsRangerConfigs['ranger.plugin.hdfs.service.name'] === '{{repo_name}}' ? dependencies.clustername + '_hadoop_' : hdfsRangerConfigs['ranger.plugin.hdfs.service.name'] + '_';",
          "153:       var coreSiteConfigs = this.get('serverConfigData').items.findProperty('type', 'core-site').properties;",
          "",
          "[Removed Lines]",
          "150:     if (App.Service.find().someProperty('serviceName', 'RANGER')) {",
          "",
          "[Added Lines]",
          "153:     if (servicesModel.someProperty('serviceName', 'RANGER')) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159:       }, this);",
          "160:     }",
          "162:     configs.forEach(function (config) {",
          "163:       if (!configsToRemove.contains(config.name)) {",
          "164:         config.isOverridable = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:     if (servicesModel.someProperty('serviceName', 'ACCUMULO')) {",
          "166:       var hdfsNameSpacesModel = App.HDFSService.find().objectAt(0).get('masterComponentGroups');",
          "167:       var newNameSpace = this.get('content.nameServiceId');",
          "168:       var volumesValue = nameServices.map(function (ns) {",
          "169:         return 'hdfs://' + ns + '/apps/accumulo/data';",
          "170:       }).join();",
          "171:       var replacementsValue = nameServices.map(function (ns) {",
          "172:         var hostName;",
          "173:         if (ns === newNameSpace) {",
          "174:           var hostNames = this.get('content.masterComponentHosts').filter(function (hc) {",
          "175:             return hc.component === 'NAMENODE' && !hc.isInstalled;",
          "176:           }).mapProperty('hostName');",
          "177:           hostName = hostNames[0];",
          "178:         } else {",
          "179:           var nameSpaceObject = hdfsNameSpacesModel.findProperty('name', ns);",
          "180:           hostName = nameSpaceObject && nameSpaceObject.hosts[0];",
          "181:         }",
          "182:         return 'hdfs://' + hostName + ':8020/apps/accumulo/data hdfs://' + ns + '/apps/accumulo/data';",
          "183:       }, this).join();",
          "184:       configs.push({",
          "185:         name: 'instance.volumes',",
          "186:         displayName: 'instance.volumes',",
          "187:         isReconfigurable: false,",
          "188:         value: volumesValue,",
          "189:         recommendedValue: volumesValue,",
          "190:         category: 'ACCUMULO',",
          "191:         filename: 'accumulo-site',",
          "192:         serviceName: 'MISC'",
          "193:       }, {",
          "194:         name: 'instance.volumes.replacements',",
          "195:         displayName: 'instance.volumes.replacements',",
          "196:         isReconfigurable: false,",
          "197:         value: replacementsValue,",
          "198:         recommendedValue: replacementsValue,",
          "199:         category: 'ACCUMULO',",
          "200:         filename: 'accumulo-site',",
          "201:         serviceName: 'MISC'",
          "202:       });",
          "203:     }",
          "",
          "---------------"
        ],
        "ambari-web/app/controllers/main/admin/federation/step4_controller.js||ambari-web/app/controllers/main/admin/federation/step4_controller.js": [
          "File: ambari-web/app/controllers/main/admin/federation/step4_controller.js -> ambari-web/app/controllers/main/admin/federation/step4_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   },",
          "52:   reconfigureServices: function () {",
          "53:     var configs = [];",
          "54:     var data = this.get('content.serviceConfigProperties');",
          "55:     var note = Em.I18n.t('admin.nameNodeFederation.wizard,step4.save.configuration.note');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     var servicesModel = App.Service.find();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:         desired_config: this.reconfigureSites(['hdfs-site'], data, note)",
          "59:       }",
          "60:     });",
          "62:       configs.push({",
          "63:         Clusters: {",
          "64:           desired_config: this.reconfigureSites(['ranger-tagsync-site'], data, note)",
          "65:         }",
          "66:       });",
          "67:     }",
          "68:     return App.ajax.send({",
          "69:       name: 'common.service.multiConfigurations',",
          "70:       sender: this,",
          "",
          "[Removed Lines]",
          "61:     if (App.Service.find().someProperty('serviceName', 'RANGER')) {",
          "",
          "[Added Lines]",
          "62:     if (servicesModel.someProperty('serviceName', 'RANGER')) {",
          "69:     if (servicesModel.someProperty('serviceName', 'ACCUMULO')) {",
          "70:       configs.push({",
          "71:         Clusters: {",
          "72:           desired_config: this.reconfigureSites(['accumulo-site'], data, note)",
          "73:         }",
          "74:       });",
          "75:     }",
          "",
          "---------------"
        ],
        "ambari-web/app/data/configs/wizards/federation_properties.js||ambari-web/app/data/configs/wizards/federation_properties.js": [
          "File: ambari-web/app/data/configs/wizards/federation_properties.js -> ambari-web/app/data/configs/wizards/federation_properties.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     displayName: 'MISC',",
          "24:     configCategories: [",
          "25:       App.ServiceConfigCategory.create({ name: 'HDFS', displayName: 'HDFS'}),",
          "27:     ],",
          "28:     sites: ['core-site'],",
          "29:     configs: [",
          "",
          "[Removed Lines]",
          "26:       App.ServiceConfigCategory.create({ name: 'RANGER', displayName: 'Ranger'})",
          "",
          "[Added Lines]",
          "26:       App.ServiceConfigCategory.create({ name: 'RANGER', displayName: 'Ranger'}),",
          "27:       App.ServiceConfigCategory.create({ name: 'ACCUMULO', displayName: 'Accumulo'})",
          "",
          "---------------"
        ]
      }
    }
  ]
}