{
  "cve_id": "CVE-2014-0109",
  "cve_desc": "Apache CXF before 2.6.14 and 2.7.x before 2.7.11 allows remote attackers to cause a denial of service (memory consumption) via a large request with the Content-Type set to text/html to a SOAP endpoint, which triggers an error.",
  "repo": "apache/cxf",
  "patch_hash": "6dd839afbb4d834ed668738bd89e7775c1cf2f9d",
  "patch_info": {
    "commit_hash": "6dd839afbb4d834ed668738bd89e7775c1cf2f9d",
    "repo": "apache/cxf",
    "commit_url": "https://github.com/apache/cxf/commit/6dd839afbb4d834ed668738bd89e7775c1cf2f9d",
    "files": [
      "api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java"
    ],
    "message": "Update StaxInInterceptor to just create a html error message on the client side as the normal error handling works best on server side.",
    "before_after_code_files": [
      "api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java||api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java"
    ]
  },
  "patch_diff": {
    "api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java||api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java": [
      "File: api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java -> api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import java.io.IOException;",
      "23: import java.io.InputStream;",
      "24: import java.io.Reader;",
      "25: import java.util.HashMap;",
      "26: import java.util.List;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import java.io.InputStreamReader;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: import org.apache.cxf.common.util.StringUtils;",
      "37: import org.apache.cxf.helpers.CastUtils;",
      "38: import org.apache.cxf.helpers.HttpHeaderHelper;",
      "40: import org.apache.cxf.message.Message;",
      "41: import org.apache.cxf.phase.AbstractPhaseInterceptor;",
      "42: import org.apache.cxf.phase.Phase;",
      "43: import org.apache.cxf.staxutils.StaxUtils;",
      "",
      "[Removed Lines]",
      "39: import org.apache.cxf.helpers.IOUtils;",
      "",
      "[Added Lines]",
      "41: import org.apache.cxf.message.MessageUtils;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "73:         }",
      "74:         String contentType = (String)message.get(Message.CONTENT_TYPE);",
      "78:             try {",
      "80:             } catch (IOException e) {",
      "81:                 throw new Fault(new org.apache.cxf.common.i18n.Message(\"INVALID_HTML_RESPONSETYPE\",",
      "82:                         LOG, \"(none)\"));",
      "",
      "[Removed Lines]",
      "76:         if (contentType != null && contentType.contains(\"text/html\")) {",
      "77:             String htmlMessage = null;",
      "79:                 htmlMessage = IOUtils.toString(is, 500);",
      "",
      "[Added Lines]",
      "77:         if (contentType != null",
      "78:             && contentType.contains(\"text/html\")",
      "79:             && MessageUtils.isRequestor(message)) {",
      "80:             StringBuilder htmlMessage = new StringBuilder(1024);",
      "82:                 if (reader == null) {",
      "83:                     reader = new InputStreamReader(is, (String)message.get(Message.ENCODING));",
      "84:                 }",
      "85:                 char s[] = new char[1024];",
      "86:                 int i = reader.read(s);",
      "87:                 while (htmlMessage.length() < 64536 && i > 0) {",
      "88:                     htmlMessage.append(s, 0, i);",
      "89:                     i = reader.read(s);",
      "90:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8ed98e684c1a67a77ae8726db05a04a4978a445",
      "candidate_info": {
        "commit_hash": "f8ed98e684c1a67a77ae8726db05a04a4978a445",
        "repo": "apache/cxf",
        "commit_url": "https://github.com/apache/cxf/commit/f8ed98e684c1a67a77ae8726db05a04a4978a445",
        "files": [
          "core/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java"
        ],
        "message": "Update StaxInInterceptor to just create a html error message on the client side as the normal error handling works best on server side.",
        "before_after_code_files": [
          "core/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java||core/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java||core/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java": [
          "File: core/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java -> core/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.IOException;",
          "23: import java.io.InputStream;",
          "24: import java.io.Reader;",
          "25: import java.util.HashMap;",
          "26: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.io.InputStreamReader;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: import org.apache.cxf.common.util.StringUtils;",
          "37: import org.apache.cxf.helpers.CastUtils;",
          "38: import org.apache.cxf.helpers.HttpHeaderHelper;",
          "40: import org.apache.cxf.message.Message;",
          "41: import org.apache.cxf.phase.AbstractPhaseInterceptor;",
          "42: import org.apache.cxf.phase.Phase;",
          "43: import org.apache.cxf.staxutils.StaxUtils;",
          "",
          "[Removed Lines]",
          "39: import org.apache.cxf.helpers.IOUtils;",
          "",
          "[Added Lines]",
          "41: import org.apache.cxf.message.MessageUtils;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         }",
          "74:         String contentType = (String)message.get(Message.CONTENT_TYPE);",
          "78:             try {",
          "80:             } catch (IOException e) {",
          "81:                 throw new Fault(new org.apache.cxf.common.i18n.Message(\"INVALID_HTML_RESPONSETYPE\",",
          "82:                         LOG, \"(none)\"));",
          "",
          "[Removed Lines]",
          "76:         if (contentType != null && contentType.contains(\"text/html\")) {",
          "77:             String htmlMessage = null;",
          "79:                 htmlMessage = IOUtils.toString(is, 500);",
          "",
          "[Added Lines]",
          "77:         if (contentType != null",
          "78:             && contentType.contains(\"text/html\")",
          "79:             && MessageUtils.isRequestor(message)) {",
          "80:             StringBuilder htmlMessage = new StringBuilder(1024);",
          "82:                 if (reader == null) {",
          "83:                     reader = new InputStreamReader(is, (String)message.get(Message.ENCODING));",
          "84:                 }",
          "85:                 char s[] = new char[1024];",
          "86:                 int i = reader.read(s);",
          "87:                 while (htmlMessage.length() < 64536 && i > 0) {",
          "88:                     htmlMessage.append(s, 0, i);",
          "89:                     i = reader.read(s);",
          "90:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5f907b1da89453919218ba0bf70be0d8b6810c5",
      "candidate_info": {
        "commit_hash": "a5f907b1da89453919218ba0bf70be0d8b6810c5",
        "repo": "apache/cxf",
        "commit_url": "https://github.com/apache/cxf/commit/a5f907b1da89453919218ba0bf70be0d8b6810c5",
        "files": [
          "api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java"
        ],
        "message": "Update StaxInInterceptor to just create a html error message on the client side as the normal error handling works best on server side.",
        "before_after_code_files": [
          "api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java||api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java||api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java"
          ],
          "candidate": [
            "api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java||api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java"
          ]
        }
      },
      "candidate_diff": {
        "api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java||api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java": [
          "File: api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java -> api/src/main/java/org/apache/cxf/interceptor/StaxInInterceptor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.io.IOException;",
          "23: import java.io.InputStream;",
          "24: import java.io.Reader;",
          "25: import java.util.HashMap;",
          "26: import java.util.List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.io.InputStreamReader;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: import org.apache.cxf.common.util.StringUtils;",
          "37: import org.apache.cxf.helpers.CastUtils;",
          "38: import org.apache.cxf.helpers.HttpHeaderHelper;",
          "40: import org.apache.cxf.message.Message;",
          "41: import org.apache.cxf.phase.AbstractPhaseInterceptor;",
          "42: import org.apache.cxf.phase.Phase;",
          "43: import org.apache.cxf.staxutils.StaxUtils;",
          "",
          "[Removed Lines]",
          "39: import org.apache.cxf.helpers.IOUtils;",
          "",
          "[Added Lines]",
          "41: import org.apache.cxf.message.MessageUtils;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:         }",
          "74:         String contentType = (String)message.get(Message.CONTENT_TYPE);",
          "78:             try {",
          "80:             } catch (IOException e) {",
          "81:                 throw new Fault(new org.apache.cxf.common.i18n.Message(\"INVALID_HTML_RESPONSETYPE\",",
          "82:                         LOG, \"(none)\"));",
          "",
          "[Removed Lines]",
          "76:         if (contentType != null && contentType.contains(\"text/html\")) {",
          "77:             String htmlMessage = null;",
          "79:                 htmlMessage = IOUtils.toString(is, 500);",
          "",
          "[Added Lines]",
          "77:         if (contentType != null",
          "78:             && contentType.contains(\"text/html\")",
          "79:             && MessageUtils.isRequestor(message)) {",
          "80:             StringBuilder htmlMessage = new StringBuilder(1024);",
          "82:                 if (reader == null) {",
          "83:                     reader = new InputStreamReader(is, (String)message.get(Message.ENCODING));",
          "84:                 }",
          "85:                 char s[] = new char[1024];",
          "86:                 int i = reader.read(s);",
          "87:                 while (htmlMessage.length() < 64536 && i > 0) {",
          "88:                     htmlMessage.append(s, 0, i);",
          "89:                     i = reader.read(s);",
          "90:                 }",
          "",
          "---------------"
        ]
      }
    }
  ]
}