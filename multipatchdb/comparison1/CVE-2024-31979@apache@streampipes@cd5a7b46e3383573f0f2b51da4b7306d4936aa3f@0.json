{
  "cve_id": "CVE-2024-31979",
  "cve_desc": "Server-Side Request Forgery (SSRF) vulnerability in Apache StreamPipes during installation process of pipeline elements.\nPreviously, StreamPipes allowed users to configure custom endpoints from which to install additional pipeline elements. \nThese endpoints were not properly validated, allowing an attacker to get StreamPipes to send an HTTP GET request to an arbitrary address.\nThis issue affects Apache StreamPipes: through 0.93.0.\n\nUsers are recommended to upgrade to version 0.95.0, which fixes the issue.\n\n",
  "repo": "apache/streampipes",
  "patch_hash": "cd5a7b46e3383573f0f2b51da4b7306d4936aa3f",
  "patch_info": {
    "commit_hash": "cd5a7b46e3383573f0f2b51da4b7306d4936aa3f",
    "repo": "apache/streampipes",
    "commit_url": "https://github.com/apache/streampipes/commit/cd5a7b46e3383573f0f2b51da4b7306d4936aa3f",
    "files": [
      "ui/src/app/connect/components/adapter-configuration/adapter-settings/adapter-deployment-settings/adapter-deployment-settings.component.ts",
      "ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts",
      "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html",
      "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
      "ui/src/app/editor/components/pipeline/pipeline.component.ts",
      "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
      "ui/src/app/editor/model/editor.model.ts",
      "ui/src/app/editor/services/jsplumb.service.ts",
      "ui/src/app/editor/services/object-provider.service.ts"
    ],
    "message": "fix(#2815): Fix pipeline validation in UI (#2816)\n\n* fix(#2815): Fix pipeline validation in UI\n\n* Fix formatting\n\n* Fix formatting\n\n* fix(#2815): Fix linting\n\n* Fix e2e tests\n\n---------\n\nCo-authored-by: Philipp Zehnder <tenthe@users.noreply.github.com>",
    "before_after_code_files": [
      "ui/src/app/connect/components/adapter-configuration/adapter-settings/adapter-deployment-settings/adapter-deployment-settings.component.ts||ui/src/app/connect/components/adapter-configuration/adapter-settings/adapter-deployment-settings/adapter-deployment-settings.component.ts",
      "ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts||ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts",
      "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html",
      "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
      "ui/src/app/editor/components/pipeline/pipeline.component.ts||ui/src/app/editor/components/pipeline/pipeline.component.ts",
      "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts||ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
      "ui/src/app/editor/model/editor.model.ts||ui/src/app/editor/model/editor.model.ts",
      "ui/src/app/editor/services/jsplumb.service.ts||ui/src/app/editor/services/jsplumb.service.ts",
      "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts"
    ]
  },
  "patch_diff": {
    "ui/src/app/connect/components/adapter-configuration/adapter-settings/adapter-deployment-settings/adapter-deployment-settings.component.ts||ui/src/app/connect/components/adapter-configuration/adapter-settings/adapter-deployment-settings/adapter-deployment-settings.component.ts": [
      "File: ui/src/app/connect/components/adapter-configuration/adapter-settings/adapter-deployment-settings/adapter-deployment-settings.component.ts -> ui/src/app/connect/components/adapter-configuration/adapter-settings/adapter-deployment-settings/adapter-deployment-settings.component.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:             );",
      "80:         }",
      "84:         this.serviceTagCtrl.setValue(null);",
      "85:     }",
      "",
      "[Removed Lines]",
      "82:         event.chipInput!.clear();",
      "",
      "[Added Lines]",
      "82:         if (event.chipInput) {",
      "83:             event.chipInput.clear();",
      "84:         }",
      "",
      "---------------"
    ],
    "ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts||ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts": [
      "File: ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts -> ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "247:     submit() {",
      "248:         const pipelineModel = this.pipelineComponent.rawPipelineModel;",
      "250:         this.pipelinePositioningService.collectPipelineElementPositions(",
      "251:             this.pipelineCanvasMetadata,",
      "252:             pipelineModel,",
      "",
      "[Removed Lines]",
      "249:         const pipeline = this.objectProvider.makeFinalPipeline(pipelineModel);",
      "",
      "[Added Lines]",
      "249:         const pipeline = this.objectProvider.makePipeline(pipelineModel);",
      "",
      "---------------"
    ],
    "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html": [
      "File: ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html -> ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:   ~",
      "17:   -->",
      "18: <div>",
      "31:         >",
      "39:             >",
      "54:             >",
      "65:             >",
      "86:                 \"",
      "88:             >",
      "123:         <div",
      "124:             class=\"editor-pe-info\"",
      "125:             [ngClass]=\"'pe-info-' + pipelineElementCssType\"",
      "",
      "[Removed Lines]",
      "19:     <div",
      "20:         [ngStyle]=\"",
      "21:             currentMouseOverElement === pipelineElement.payload.dom",
      "22:                 ? { opacity: 1 }",
      "23:                 : { opacity: 1 }",
      "24:         \"",
      "25:         class=\"sp-fade-options\"",
      "26:     >",
      "27:         <span",
      "28:             class=\"options-button customize-button\"",
      "30:             style=\"z-index: 10\"",
      "32:             <button",
      "33:                 class=\"options-icon-button\"",
      "34:                 mat-icon-button",
      "35:                 matTooltip=\"Configure Element\"",
      "36:                 [matTooltipPosition]=\"'above'\"",
      "37:                 (click)=\"customizeElement(pipelineElement)\"",
      "38:                 data-cy=\"settings-pipeline-element-button\"",
      "40:                 <i class=\"material-icons options-icon-size\">settings</i>",
      "41:             </button>",
      "42:         </span>",
      "43:         <span",
      "44:             class=\"options-button customize-button\"",
      "46:             style=\"z-index: 10\"",
      "47:         >",
      "48:             <button",
      "49:                 class=\"options-icon-button\"",
      "50:                 mat-icon-button",
      "51:                 matTooltip=\"Configure Element\"",
      "52:                 [matTooltipPosition]=\"'above'\"",
      "53:                 (click)=\"openCustomizeStreamDialog()\"",
      "55:                 <i class=\"material-icons options-icon-size\">settings</i>",
      "56:             </button>",
      "57:         </span>",
      "58:         <span class=\"options-button delete-button\" style=\"z-index: 10\">",
      "59:             <button",
      "60:                 class=\"options-icon-button\"",
      "61:                 mat-icon-button",
      "62:                 matTooltip=\"Delete Element\"",
      "63:                 [matTooltipPosition]=\"'above'\"",
      "64:                 (click)=\"removeElement(pipelineElement)\"",
      "66:                 <i class=\"material-icons options-icon-size\">clear</i>",
      "67:             </button>",
      "68:         </span>",
      "69:         <span",
      "70:             class=\"options-button possible-button\"",
      "72:             style=\"z-index: 10\"",
      "73:         >",
      "74:             <button",
      "75:                 class=\"options-icon-button\"",
      "76:                 mat-icon-button",
      "77:                 matTooltip=\"Compatible Elements\"",
      "78:                 [matTooltipPosition]=\"'below'\"",
      "79:                 [disabled]=\"!possibleElements || possibleElements.length === 0\"",
      "80:                 (click)=\"openPossibleElementsDialog()\"",
      "81:                 [attr.data-cy]=\"",
      "82:                     'sp-possible-elements-' +",
      "83:                     pipelineElement.payload.name",
      "84:                         .toLowerCase()",
      "85:                         .replaceAll(' ', '_')",
      "87:                 _",
      "89:                 <i class=\"material-icons options-icon-size\">account_tree</i>",
      "90:             </button>",
      "91:         </span>",
      "92:         <span",
      "93:             class=\"options-button recommended-button\"",
      "95:                 pipelineElement.type !== 'action' &&",
      "96:                 recommendationsAvailable &&",
      "97:                 recommendedElements.length > 0",
      "98:             \"",
      "99:             style=\"z-index: 10\"",
      "100:         >",
      "101:             <button",
      "102:                 class=\"options-icon-button\"",
      "103:                 mat-icon-button",
      "104:                 matTooltip=\"Recommended Elements\"",
      "105:                 [matTooltipPosition]=\"'below'\"",
      "106:                 (click)=\"showRecommendations($event)\"",
      "107:                 [disabled]=\"!recommendationsAvailable\"",
      "108:             >",
      "109:                 <i class=\"material-icons options-icon-size\">add</i>",
      "110:             </button>",
      "111:         </span>",
      "112:         <span class=\"options-button help-button\" style=\"z-index: 10\">",
      "113:             <button",
      "114:                 class=\"options-icon-button\"",
      "115:                 matTooltip=\"Help\"",
      "116:                 [matTooltipPosition]=\"'below'\"",
      "117:                 mat-icon-button",
      "118:                 (click)=\"openHelpDialog()\"",
      "119:             >",
      "120:                 <i class=\"material-icons options-icon-size\">help</i>",
      "121:             </button>",
      "122:         </span>",
      "",
      "[Added Lines]",
      "19:     <div>",
      "20:         <div",
      "21:             [ngStyle]=\"",
      "22:                 currentMouseOverElement === pipelineElement.payload.dom",
      "23:                     ? { opacity: 1 }",
      "24:                     : { opacity: 1 }",
      "25:             \"",
      "26:             class=\"sp-fade-options\"",
      "28:             <span",
      "29:                 class=\"options-button customize-button\"",
      "31:                 style=\"z-index: 10\"",
      "33:                 <button",
      "34:                     class=\"options-icon-button\"",
      "35:                     mat-icon-button",
      "36:                     matTooltip=\"Configure Element\"",
      "37:                     [matTooltipPosition]=\"'above'\"",
      "38:                     (click)=\"customizeElement(pipelineElement)\"",
      "39:                     data-cy=\"settings-pipeline-element-button\"",
      "40:                 >",
      "41:                     <i class=\"material-icons options-icon-size\">settings</i>",
      "42:                 </button>",
      "43:             </span>",
      "44:             <span",
      "45:                 class=\"options-button customize-button\"",
      "47:                 style=\"z-index: 10\"",
      "49:                 <button",
      "50:                     class=\"options-icon-button\"",
      "51:                     mat-icon-button",
      "52:                     matTooltip=\"Configure Element\"",
      "53:                     [matTooltipPosition]=\"'above'\"",
      "54:                     (click)=\"openCustomizeStreamDialog()\"",
      "55:                 >",
      "56:                     <i class=\"material-icons options-icon-size\">settings</i>",
      "57:                 </button>",
      "58:             </span>",
      "59:             <span class=\"options-button delete-button\" style=\"z-index: 10\">",
      "60:                 <button",
      "61:                     class=\"options-icon-button\"",
      "62:                     mat-icon-button",
      "63:                     matTooltip=\"Delete Element\"",
      "64:                     [matTooltipPosition]=\"'above'\"",
      "65:                     (click)=\"removeElement(pipelineElement)\"",
      "66:                 >",
      "67:                     <i class=\"material-icons options-icon-size\">clear</i>",
      "68:                 </button>",
      "69:             </span>",
      "70:             <span",
      "71:                 class=\"options-button possible-button\"",
      "73:                 style=\"z-index: 10\"",
      "75:                 <button",
      "76:                     class=\"options-icon-button\"",
      "77:                     mat-icon-button",
      "78:                     matTooltip=\"Compatible Elements\"",
      "79:                     [matTooltipPosition]=\"'below'\"",
      "80:                     [disabled]=\"",
      "81:                         !possibleElements || possibleElements.length === 0",
      "82:                     \"",
      "83:                     (click)=\"openPossibleElementsDialog()\"",
      "84:                     [attr.data-cy]=\"",
      "85:                         'sp-possible-elements-' +",
      "86:                         pipelineElement.payload.name",
      "87:                             .toLowerCase()",
      "88:                             .replaceAll(' ', '_')",
      "89:                     \"",
      "90:                     _",
      "91:                 >",
      "92:                     <i class=\"material-icons options-icon-size\">account_tree</i>",
      "93:                 </button>",
      "94:             </span>",
      "95:             <span",
      "96:                 class=\"options-button recommended-button\"",
      "98:                     pipelineElement.type !== 'action' &&",
      "99:                     recommendationsAvailable &&",
      "100:                     recommendedElements.length > 0",
      "102:                 style=\"z-index: 10\"",
      "104:                 <button",
      "105:                     class=\"options-icon-button\"",
      "106:                     mat-icon-button",
      "107:                     matTooltip=\"Recommended Elements\"",
      "108:                     [matTooltipPosition]=\"'below'\"",
      "109:                     (click)=\"showRecommendations($event)\"",
      "110:                     [disabled]=\"!recommendationsAvailable\"",
      "111:                 >",
      "112:                     <i class=\"material-icons options-icon-size\">add</i>",
      "113:                 </button>",
      "114:             </span>",
      "115:             <span class=\"options-button help-button\" style=\"z-index: 10\">",
      "116:                 <button",
      "117:                     class=\"options-icon-button\"",
      "118:                     matTooltip=\"Help\"",
      "119:                     [matTooltipPosition]=\"'below'\"",
      "120:                     mat-icon-button",
      "121:                     (click)=\"openHelpDialog()\"",
      "122:                 >",
      "123:                     <i class=\"material-icons options-icon-size\">help</i>",
      "124:                 </button>",
      "125:             </span>",
      "126:         </div>",
      "",
      "---------------"
    ],
    "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts": [
      "File: ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts -> ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:         this.pipelineElementConfiguredObservable =",
      "112:             this.editorService.pipelineElementConfigured$.subscribe(",
      "113:                 pipelineElementDomId => {",
      "115:                     this.restApi.updateCachedPipeline(this.rawPipelineModel);",
      "116:                     if (",
      "117:                         pipelineElementDomId ===",
      "",
      "[Removed Lines]",
      "114:                     this.pipelineElement.settings.openCustomize = false;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ui/src/app/editor/components/pipeline/pipeline.component.ts||ui/src/app/editor/components/pipeline/pipeline.component.ts": [
      "File: ui/src/app/editor/components/pipeline/pipeline.component.ts -> ui/src/app/editor/components/pipeline/pipeline.component.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:     previewModeActive = false;",
      "119:     pipelinePreview: PipelinePreviewModel;",
      "121:     constructor(",
      "122:         private jsplumbService: JsplumbService,",
      "123:         private pipelineEditorService: PipelineEditorService,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "121:     shouldOpenCustomizeSettings = false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         this.jsplumbFactoryService.destroy(this.preview);",
      "169:     }",
      "172:         this.currentMouseOverElement = elementId;",
      "173:     }",
      "176:         this.currentMouseOverElement =",
      "177:             this.currentMouseOverElement === elementId ? '' : elementId;",
      "178:     }",
      "",
      "[Removed Lines]",
      "171:     updateMouseover(elementId) {",
      "175:     updateOptionsClick(elementId) {",
      "",
      "[Added Lines]",
      "173:     updateMouseover(elementId: string) {",
      "177:     updateOptionsClick(elementId: string) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "191:         );",
      "192:     }",
      "195:         return (",
      "196:             currentPipelineElement.type +",
      "197:             ' ' +",
      "199:             currentPipelineElement.settings.connectable +",
      "200:             ' ' +",
      "201:             currentPipelineElement.settings.displaySettings",
      "",
      "[Removed Lines]",
      "194:     getElementCssClasses(currentPipelineElement) {",
      "198:             (currentPipelineElement.settings.openCustomize ? '' : '') +",
      "",
      "[Added Lines]",
      "196:     getElementCssClasses(currentPipelineElement: PipelineElementConfig) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "210:         return this.isInPipeline('set');",
      "211:     }",
      "214:         return this.rawPipelineModel.some(",
      "215:             x => x.type === type && !x.settings.disabled,",
      "216:         );",
      "",
      "[Removed Lines]",
      "213:     isInPipeline(type) {",
      "",
      "[Added Lines]",
      "214:     isInPipeline(type: string) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "336:     initPlumb() {",
      "337:         this.JsplumbBridge.unbind(EVENT_CONNECTION);",
      "339:         this.JsplumbBridge.bind(EVENT_CONNECTION_MOVED, info => {",
      "340:             const pe = this.objectProvider.findElement(",
      "341:                 info.newTargetEndpoint.elementId,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "340:         this.JsplumbBridge.bind(EVENT_CONNECTION_DRAG, () => {",
      "341:             this.shouldOpenCustomizeSettings = true;",
      "342:         });",
      "344:         this.JsplumbBridge.bind(EVENT_CONNECTION_ABORT, () => {",
      "345:             this.shouldOpenCustomizeSettings = false;",
      "346:         });",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "355:                 this.rawPipelineModel,",
      "356:             );",
      "357:             (pe.payload as InvocablePipelineElementUnion).configured = false;",
      "359:             info.targetEndpoint.setType('empty');",
      "360:             this.JsplumbBridge.repaintEverything();",
      "361:             this.validatePipeline();",
      "",
      "[Removed Lines]",
      "358:             pe.settings.openCustomize = true;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "383:                 info.target.id,",
      "384:                 this.rawPipelineModel,",
      "385:             );",
      "387:                 this.currentPipelineModel = this.objectProvider.makePipeline(",
      "388:                     this.rawPipelineModel,",
      "389:                 );",
      "390:                 pe.settings.loadingStatus = true;",
      "391:                 this.objectProvider",
      "392:                     .updatePipeline(this.currentPipelineModel)",
      "",
      "[Removed Lines]",
      "386:             if (pe.settings.openCustomize) {",
      "",
      "[Added Lines]",
      "395:             if (",
      "396:                 this.shouldOpenCustomizeSettings ||",
      "397:                 info.connection.data.openCustomize",
      "398:             ) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "399:                                     info.target.id,",
      "400:                                 );",
      "401:                             const currentConnectionValid =",
      "406:                             if (currentConnectionValid) {",
      "407:                                 this.validatePipeline(",
      "408:                                     pipelineModificationMessage,",
      "",
      "[Removed Lines]",
      "402:                                 this.currentConnectionValid(",
      "403:                                     pe,",
      "404:                                     edgeValidations,",
      "405:                                 );",
      "",
      "[Added Lines]",
      "415:                                 this.currentConnectionValid(edgeValidations);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "467:         };",
      "468:     }",
      "475:         return targetEdges.every(",
      "476:             e => e.status.validationStatusType === 'COMPLETE',",
      "477:         );",
      "",
      "[Removed Lines]",
      "470:     currentConnectionValid(",
      "471:         pe: PipelineElementConfig,",
      "472:         targetEdges: PipelineEdgeValidation[],",
      "473:     ) {",
      "474:         const entity = pe.payload as InvocablePipelineElementUnion;",
      "",
      "[Added Lines]",
      "480:     currentConnectionValid(targetEdges: PipelineEdgeValidation[]) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "511:                             ).outputStream = modification.outputStream;",
      "512:                         }",
      "513:                     }",
      "515:                         (",
      "516:                             pe.payload as InvocablePipelineElementUnion",
      "517:                         ).inputStreams = modification.inputStreams;",
      "518:                     }",
      "519:                     if (modification.validationInfos.length > 0) {",
      "520:                         this.pipelineStyleService.updatePeConfigurationStatus(",
      "521:                             pe,",
      "",
      "[Removed Lines]",
      "514:                     if (modification.inputStreams) {",
      "",
      "[Added Lines]",
      "520:                     if (",
      "521:                         modification.inputStreams &&",
      "522:                         modification.inputStreams.length > 0",
      "523:                     ) {",
      "528:                     if (modification.pipelineElementValid) {",
      "529:                         pe.settings.completed =",
      "530:                             PipelineElementConfigurationStatus.OK;",
      "531:                     }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "536:         }",
      "537:     }",
      "540:         let custom = false;",
      "541:         if (pe.payload instanceof DataProcessorInvocation) {",
      "542:             pe.payload.outputStrategies.forEach(strategy => {",
      "",
      "[Removed Lines]",
      "539:     isCustomOutput(pe) {",
      "",
      "[Added Lines]",
      "552:     isCustomOutput(pe: PipelineElementConfig) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "576:         });",
      "577:     }",
      "580:         this.dialog.open(ConfirmDialogComponent, {",
      "581:             width: '500px',",
      "582:             data: {",
      "",
      "[Removed Lines]",
      "579:     showErrorDialog(title, description) {",
      "",
      "[Added Lines]",
      "592:     showErrorDialog(title: string, description: string) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "611:         dialogRef.afterClosed().subscribe(c => {",
      "612:             if (c) {",
      "614:                 (",
      "615:                     pipelineElementConfig.payload as InvocablePipelineElementUnion",
      "616:                 ).configured = true;",
      "",
      "[Removed Lines]",
      "613:                 pipelineElementConfig.settings.openCustomize = false;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts||ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts": [
      "File: ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts -> ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "45:     constructor(",
      "46:         private dialogRef: DialogRef<CompatibleElementsComponent>,",
      "47:         private JsPlumbService: JsplumbService,",
      "52:     ngOnInit() {",
      "53:         this.possibleElements.sort((a, b) => a.name.localeCompare(b.name));",
      "",
      "[Removed Lines]",
      "48:     ) {",
      "50:     }",
      "",
      "[Added Lines]",
      "48:     ) {}",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:         this.hide();",
      "66:     }",
      "72:     hide() {",
      "74:         this.dialogRef.close();",
      "",
      "[Removed Lines]",
      "68:     iconText(elementId) {",
      "70:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ui/src/app/editor/model/editor.model.ts||ui/src/app/editor/model/editor.model.ts": [
      "File: ui/src/app/editor/model/editor.model.ts -> ui/src/app/editor/model/editor.model.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "41: export interface PipelineElementConfig {",
      "42:     type: string;",
      "43:     settings: {",
      "45:         preview: boolean;",
      "46:         displaySettings: string;",
      "47:         connectable: string;",
      "",
      "[Removed Lines]",
      "44:         openCustomize: boolean;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ui/src/app/editor/services/jsplumb.service.ts||ui/src/app/editor/services/jsplumb.service.ts": [
      "File: ui/src/app/editor/services/jsplumb.service.ts -> ui/src/app/editor/services/jsplumb.service.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "132:                 pipelineElementConfig.payload as InvocablePipelineElementUnion,",
      "133:                 sourceElement,",
      "134:                 false,",
      "135:             );",
      "136:         });",
      "137:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "135:                 true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141:         pipelineElement: InvocablePipelineElementUnion,",
      "142:         sourceElement,",
      "143:         previewConfig: boolean,",
      "144:     ) {",
      "145:         let targetElementId;",
      "146:         if (pipelineElement instanceof DataProcessorInvocation) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "145:         openCustomize = false,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "150:                 true,",
      "151:                 false,",
      "152:             );",
      "154:         } else {",
      "155:             targetElementId = this.dataSinkDropped(",
      "156:                 pipelineElementDomId,",
      "",
      "[Removed Lines]",
      "153:             this.connectNodes(sourceElement, targetElementId, previewConfig);",
      "",
      "[Added Lines]",
      "155:             this.connectNodes(",
      "156:                 sourceElement,",
      "157:                 targetElementId,",
      "158:                 previewConfig,",
      "159:                 openCustomize,",
      "160:             );",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "158:                 true,",
      "159:                 false,",
      "160:             );",
      "162:         }",
      "163:     }",
      "",
      "[Removed Lines]",
      "161:             this.connectNodes(sourceElement, targetElementId, previewConfig);",
      "",
      "[Added Lines]",
      "168:             this.connectNodes(",
      "169:                 sourceElement,",
      "170:                 targetElementId,",
      "171:                 previewConfig,",
      "172:                 openCustomize,",
      "173:             );",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "166:         sourceElementSelector,",
      "167:         targetElementId,",
      "168:         previewConfig: boolean,",
      "169:     ) {",
      "170:         const sourceElement = sourceElementSelector.get()[0];",
      "171:         const jsplumbBridge = this.getBridge(previewConfig);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "181:         openCustomize = false,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "195:             source: sourceEndPoint,",
      "196:             target: targetEndPoint,",
      "197:             detachable: true,",
      "198:         });",
      "199:         jsplumbBridge.repaintEverything();",
      "200:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211:             data: {",
      "212:                 openCustomize,",
      "213:             },",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "250:         );",
      "251:         pipelineElementConfig.settings = {",
      "252:             connectable,",
      "254:             preview: isPreview,",
      "255:             completed:",
      "256:                 pipelineElement instanceof SpDataStream ||",
      "",
      "[Removed Lines]",
      "253:             openCustomize: !(pipelineElement as any).configured,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts": [
      "File: ui/src/app/editor/services/object-provider.service.ts -> ui/src/app/editor/services/object-provider.service.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import { Injectable } from '@angular/core';",
      "20: import {",
      "25: import { EditorService } from './editor.service';",
      "26: import { JsplumbFactoryService } from './jsplumb-factory.service';",
      "",
      "[Removed Lines]",
      "21:     InvocablePipelineElementUnion,",
      "22:     PipelineElementConfig,",
      "23: } from '../model/editor.model';",
      "24: import { DataSinkInvocation, Pipeline } from '@streampipes/platform-services';",
      "",
      "[Added Lines]",
      "20: import { PipelineElementConfig } from '../model/editor.model';",
      "22:     DataProcessorInvocation,",
      "23:     DataSinkInvocation,",
      "24:     Pipeline,",
      "25:     SpDataStream,",
      "26: } from '@streampipes/platform-services';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32:         private jsplumbFactoryService: JsplumbFactoryService,",
      "33:     ) {}",
      "40:     preparePipeline(): Pipeline {",
      "41:         const pipeline = new Pipeline();",
      "42:         pipeline.name = '';",
      "",
      "[Removed Lines]",
      "35:     prepareElement(pipelineElement: InvocablePipelineElementUnion) {",
      "36:         pipelineElement.connectedTo = [];",
      "37:         return pipelineElement;",
      "38:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "48:         return pipeline;",
      "49:     }",
      "61:     hasConnectedPipelineElement(",
      "62:         pipelineElementDomId: string,",
      "63:         rawPipelineModel: PipelineElementConfig[],",
      "",
      "[Removed Lines]",
      "51:     makeFinalPipeline(currentPipelineElements: PipelineElementConfig[]) {",
      "52:         return this.makePipeline(currentPipelineElements);",
      "53:     }",
      "55:     makePipeline(currentPipelineElements: PipelineElementConfig[]): Pipeline {",
      "56:         let pipeline = this.preparePipeline();",
      "57:         pipeline = this.addElementNew(pipeline, currentPipelineElements);",
      "58:         return pipeline;",
      "59:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "85:     }",
      "87:     findElement(",
      "89:         rawPipelineModel: PipelineElementConfig[],",
      "90:     ): PipelineElementConfig {",
      "91:         return (",
      "",
      "[Removed Lines]",
      "88:         elementId,",
      "",
      "[Added Lines]",
      "75:         elementId: string,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "94:         );",
      "95:     }",
      "101:         const jsplumbBridge =",
      "102:             this.jsplumbFactoryService.getJsplumbBridge(false);",
      "103:         currentPipelineElements.forEach(pipelineElementConfig => {",
      "",
      "[Removed Lines]",
      "97:     addElementNew(",
      "98:         pipeline,",
      "99:         currentPipelineElements: PipelineElementConfig[],",
      "100:     ): Pipeline {",
      "",
      "[Added Lines]",
      "84:     makePipeline(currentPipelineElements: PipelineElementConfig[]): Pipeline {",
      "85:         const pipeline = this.preparePipeline();",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "109:                     pipelineElementConfig.type === 'sepa' ||",
      "110:                     pipelineElementConfig.type === 'action'",
      "111:                 ) {",
      "116:                     const connections = jsplumbBridge.getConnections({",
      "117:                         target: document.getElementById(payload.dom),",
      "118:                     }) as any;",
      "",
      "[Removed Lines]",
      "112:                     let payload = pipelineElementConfig.payload;",
      "113:                     payload = this.prepareElement(",
      "114:                         payload as InvocablePipelineElementUnion,",
      "115:                     );",
      "",
      "[Added Lines]",
      "97:                     const payload = pipelineElementConfig.payload;",
      "98:                     payload.connectedTo = [];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "121:                     }",
      "122:                     if (payload.connectedTo && payload.connectedTo.length > 0) {",
      "123:                         pipelineElementConfig.type === 'action'",
      "126:                     }",
      "127:                 } else {",
      "129:                 }",
      "130:             }",
      "131:         });",
      "",
      "[Removed Lines]",
      "124:                             ? pipeline.actions.push(payload)",
      "125:                             : pipeline.sepas.push(payload);",
      "128:                     pipeline.streams.push(pipelineElementConfig.payload);",
      "",
      "[Added Lines]",
      "107:                             ? pipeline.actions.push(",
      "108:                                   payload as DataSinkInvocation,",
      "109:                               )",
      "110:                             : pipeline.sepas.push(",
      "111:                                   payload as DataProcessorInvocation,",
      "112:                               );",
      "115:                     pipeline.streams.push(",
      "116:                         pipelineElementConfig.payload as SpDataStream,",
      "117:                     );",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c6a1028f00210bcec5859990688c7c45f6700ea",
      "candidate_info": {
        "commit_hash": "4c6a1028f00210bcec5859990688c7c45f6700ea",
        "repo": "apache/streampipes",
        "commit_url": "https://github.com/apache/streampipes/commit/4c6a1028f00210bcec5859990688c7c45f6700ea",
        "files": [
          "ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts",
          "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html",
          "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
          "ui/src/app/editor/components/pipeline/pipeline.component.ts",
          "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
          "ui/src/app/editor/model/editor.model.ts",
          "ui/src/app/editor/services/jsplumb.service.ts",
          "ui/src/app/editor/services/object-provider.service.ts"
        ],
        "message": "fix(#2815): Fix pipeline validation in UI (#2816)",
        "before_after_code_files": [
          "ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts||ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts",
          "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html",
          "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
          "ui/src/app/editor/components/pipeline/pipeline.component.ts||ui/src/app/editor/components/pipeline/pipeline.component.ts",
          "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts||ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
          "ui/src/app/editor/model/editor.model.ts||ui/src/app/editor/model/editor.model.ts",
          "ui/src/app/editor/services/jsplumb.service.ts||ui/src/app/editor/services/jsplumb.service.ts",
          "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts||ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts",
            "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html",
            "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
            "ui/src/app/editor/components/pipeline/pipeline.component.ts||ui/src/app/editor/components/pipeline/pipeline.component.ts",
            "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts||ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
            "ui/src/app/editor/model/editor.model.ts||ui/src/app/editor/model/editor.model.ts",
            "ui/src/app/editor/services/jsplumb.service.ts||ui/src/app/editor/services/jsplumb.service.ts",
            "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts"
          ],
          "candidate": [
            "ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts||ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts",
            "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html",
            "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
            "ui/src/app/editor/components/pipeline/pipeline.component.ts||ui/src/app/editor/components/pipeline/pipeline.component.ts",
            "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts||ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
            "ui/src/app/editor/model/editor.model.ts||ui/src/app/editor/model/editor.model.ts",
            "ui/src/app/editor/services/jsplumb.service.ts||ui/src/app/editor/services/jsplumb.service.ts",
            "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts||ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts": [
          "File: ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts -> ui/src/app/editor/components/pipeline-assembly/pipeline-assembly.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "247:     submit() {",
          "248:         const pipelineModel = this.pipelineComponent.rawPipelineModel;",
          "250:         this.pipelinePositioningService.collectPipelineElementPositions(",
          "251:             this.pipelineCanvasMetadata,",
          "252:             pipelineModel,",
          "",
          "[Removed Lines]",
          "249:         const pipeline = this.objectProvider.makeFinalPipeline(pipelineModel);",
          "",
          "[Added Lines]",
          "249:         const pipeline = this.objectProvider.makePipeline(pipelineModel);",
          "",
          "---------------"
        ],
        "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html": [
          "File: ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html -> ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   ~",
          "17:   -->",
          "18: <div>",
          "31:         >",
          "39:             >",
          "54:             >",
          "65:             >",
          "86:                 \"",
          "88:             >",
          "123:         <div",
          "124:             class=\"editor-pe-info\"",
          "125:             [ngClass]=\"'pe-info-' + pipelineElementCssType\"",
          "",
          "[Removed Lines]",
          "19:     <div",
          "20:         [ngStyle]=\"",
          "21:             currentMouseOverElement === pipelineElement.payload.dom",
          "22:                 ? { opacity: 1 }",
          "23:                 : { opacity: 1 }",
          "24:         \"",
          "25:         class=\"sp-fade-options\"",
          "26:     >",
          "27:         <span",
          "28:             class=\"options-button customize-button\"",
          "30:             style=\"z-index: 10\"",
          "32:             <button",
          "33:                 class=\"options-icon-button\"",
          "34:                 mat-icon-button",
          "35:                 matTooltip=\"Configure Element\"",
          "36:                 [matTooltipPosition]=\"'above'\"",
          "37:                 (click)=\"customizeElement(pipelineElement)\"",
          "38:                 data-cy=\"settings-pipeline-element-button\"",
          "40:                 <i class=\"material-icons options-icon-size\">settings</i>",
          "41:             </button>",
          "42:         </span>",
          "43:         <span",
          "44:             class=\"options-button customize-button\"",
          "46:             style=\"z-index: 10\"",
          "47:         >",
          "48:             <button",
          "49:                 class=\"options-icon-button\"",
          "50:                 mat-icon-button",
          "51:                 matTooltip=\"Configure Element\"",
          "52:                 [matTooltipPosition]=\"'above'\"",
          "53:                 (click)=\"openCustomizeStreamDialog()\"",
          "55:                 <i class=\"material-icons options-icon-size\">settings</i>",
          "56:             </button>",
          "57:         </span>",
          "58:         <span class=\"options-button delete-button\" style=\"z-index: 10\">",
          "59:             <button",
          "60:                 class=\"options-icon-button\"",
          "61:                 mat-icon-button",
          "62:                 matTooltip=\"Delete Element\"",
          "63:                 [matTooltipPosition]=\"'above'\"",
          "64:                 (click)=\"removeElement(pipelineElement)\"",
          "66:                 <i class=\"material-icons options-icon-size\">clear</i>",
          "67:             </button>",
          "68:         </span>",
          "69:         <span",
          "70:             class=\"options-button possible-button\"",
          "72:             style=\"z-index: 10\"",
          "73:         >",
          "74:             <button",
          "75:                 class=\"options-icon-button\"",
          "76:                 mat-icon-button",
          "77:                 matTooltip=\"Compatible Elements\"",
          "78:                 [matTooltipPosition]=\"'below'\"",
          "79:                 [disabled]=\"!possibleElements || possibleElements.length === 0\"",
          "80:                 (click)=\"openPossibleElementsDialog()\"",
          "81:                 [attr.data-cy]=\"",
          "82:                     'sp-possible-elements-' +",
          "83:                     pipelineElement.payload.name",
          "84:                         .toLowerCase()",
          "85:                         .replaceAll(' ', '_')",
          "87:                 _",
          "89:                 <i class=\"material-icons options-icon-size\">account_tree</i>",
          "90:             </button>",
          "91:         </span>",
          "92:         <span",
          "93:             class=\"options-button recommended-button\"",
          "95:                 pipelineElement.type !== 'action' &&",
          "96:                 recommendationsAvailable &&",
          "97:                 recommendedElements.length > 0",
          "98:             \"",
          "99:             style=\"z-index: 10\"",
          "100:         >",
          "101:             <button",
          "102:                 class=\"options-icon-button\"",
          "103:                 mat-icon-button",
          "104:                 matTooltip=\"Recommended Elements\"",
          "105:                 [matTooltipPosition]=\"'below'\"",
          "106:                 (click)=\"showRecommendations($event)\"",
          "107:                 [disabled]=\"!recommendationsAvailable\"",
          "108:             >",
          "109:                 <i class=\"material-icons options-icon-size\">add</i>",
          "110:             </button>",
          "111:         </span>",
          "112:         <span class=\"options-button help-button\" style=\"z-index: 10\">",
          "113:             <button",
          "114:                 class=\"options-icon-button\"",
          "115:                 matTooltip=\"Help\"",
          "116:                 [matTooltipPosition]=\"'below'\"",
          "117:                 mat-icon-button",
          "118:                 (click)=\"openHelpDialog()\"",
          "119:             >",
          "120:                 <i class=\"material-icons options-icon-size\">help</i>",
          "121:             </button>",
          "122:         </span>",
          "",
          "[Added Lines]",
          "19:     <div>",
          "20:         <div",
          "21:             [ngStyle]=\"",
          "22:                 currentMouseOverElement === pipelineElement.payload.dom",
          "23:                     ? { opacity: 1 }",
          "24:                     : { opacity: 1 }",
          "25:             \"",
          "26:             class=\"sp-fade-options\"",
          "28:             <span",
          "29:                 class=\"options-button customize-button\"",
          "31:                 style=\"z-index: 10\"",
          "33:                 <button",
          "34:                     class=\"options-icon-button\"",
          "35:                     mat-icon-button",
          "36:                     matTooltip=\"Configure Element\"",
          "37:                     [matTooltipPosition]=\"'above'\"",
          "38:                     (click)=\"customizeElement(pipelineElement)\"",
          "39:                     data-cy=\"settings-pipeline-element-button\"",
          "40:                 >",
          "41:                     <i class=\"material-icons options-icon-size\">settings</i>",
          "42:                 </button>",
          "43:             </span>",
          "44:             <span",
          "45:                 class=\"options-button customize-button\"",
          "47:                 style=\"z-index: 10\"",
          "49:                 <button",
          "50:                     class=\"options-icon-button\"",
          "51:                     mat-icon-button",
          "52:                     matTooltip=\"Configure Element\"",
          "53:                     [matTooltipPosition]=\"'above'\"",
          "54:                     (click)=\"openCustomizeStreamDialog()\"",
          "55:                 >",
          "56:                     <i class=\"material-icons options-icon-size\">settings</i>",
          "57:                 </button>",
          "58:             </span>",
          "59:             <span class=\"options-button delete-button\" style=\"z-index: 10\">",
          "60:                 <button",
          "61:                     class=\"options-icon-button\"",
          "62:                     mat-icon-button",
          "63:                     matTooltip=\"Delete Element\"",
          "64:                     [matTooltipPosition]=\"'above'\"",
          "65:                     (click)=\"removeElement(pipelineElement)\"",
          "66:                 >",
          "67:                     <i class=\"material-icons options-icon-size\">clear</i>",
          "68:                 </button>",
          "69:             </span>",
          "70:             <span",
          "71:                 class=\"options-button possible-button\"",
          "73:                 style=\"z-index: 10\"",
          "75:                 <button",
          "76:                     class=\"options-icon-button\"",
          "77:                     mat-icon-button",
          "78:                     matTooltip=\"Compatible Elements\"",
          "79:                     [matTooltipPosition]=\"'below'\"",
          "80:                     [disabled]=\"",
          "81:                         !possibleElements || possibleElements.length === 0",
          "82:                     \"",
          "83:                     (click)=\"openPossibleElementsDialog()\"",
          "84:                     [attr.data-cy]=\"",
          "85:                         'sp-possible-elements-' +",
          "86:                         pipelineElement.payload.name",
          "87:                             .toLowerCase()",
          "88:                             .replaceAll(' ', '_')",
          "89:                     \"",
          "90:                     _",
          "91:                 >",
          "92:                     <i class=\"material-icons options-icon-size\">account_tree</i>",
          "93:                 </button>",
          "94:             </span>",
          "95:             <span",
          "96:                 class=\"options-button recommended-button\"",
          "98:                     pipelineElement.type !== 'action' &&",
          "99:                     recommendationsAvailable &&",
          "100:                     recommendedElements.length > 0",
          "102:                 style=\"z-index: 10\"",
          "104:                 <button",
          "105:                     class=\"options-icon-button\"",
          "106:                     mat-icon-button",
          "107:                     matTooltip=\"Recommended Elements\"",
          "108:                     [matTooltipPosition]=\"'below'\"",
          "109:                     (click)=\"showRecommendations($event)\"",
          "110:                     [disabled]=\"!recommendationsAvailable\"",
          "111:                 >",
          "112:                     <i class=\"material-icons options-icon-size\">add</i>",
          "113:                 </button>",
          "114:             </span>",
          "115:             <span class=\"options-button help-button\" style=\"z-index: 10\">",
          "116:                 <button",
          "117:                     class=\"options-icon-button\"",
          "118:                     matTooltip=\"Help\"",
          "119:                     [matTooltipPosition]=\"'below'\"",
          "120:                     mat-icon-button",
          "121:                     (click)=\"openHelpDialog()\"",
          "122:                 >",
          "123:                     <i class=\"material-icons options-icon-size\">help</i>",
          "124:                 </button>",
          "125:             </span>",
          "126:         </div>",
          "",
          "---------------"
        ],
        "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts": [
          "File: ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts -> ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:         this.pipelineElementConfiguredObservable =",
          "112:             this.editorService.pipelineElementConfigured$.subscribe(",
          "113:                 pipelineElementDomId => {",
          "115:                     this.restApi.updateCachedPipeline(this.rawPipelineModel);",
          "116:                     if (",
          "117:                         pipelineElementDomId ===",
          "",
          "[Removed Lines]",
          "114:                     this.pipelineElement.settings.openCustomize = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/app/editor/components/pipeline/pipeline.component.ts||ui/src/app/editor/components/pipeline/pipeline.component.ts": [
          "File: ui/src/app/editor/components/pipeline/pipeline.component.ts -> ui/src/app/editor/components/pipeline/pipeline.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     previewModeActive = false;",
          "119:     pipelinePreview: PipelinePreviewModel;",
          "121:     constructor(",
          "122:         private jsplumbService: JsplumbService,",
          "123:         private pipelineEditorService: PipelineEditorService,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:     shouldOpenCustomizeSettings = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:         this.jsplumbFactoryService.destroy(this.preview);",
          "169:     }",
          "172:         this.currentMouseOverElement = elementId;",
          "173:     }",
          "176:         this.currentMouseOverElement =",
          "177:             this.currentMouseOverElement === elementId ? '' : elementId;",
          "178:     }",
          "",
          "[Removed Lines]",
          "171:     updateMouseover(elementId) {",
          "175:     updateOptionsClick(elementId) {",
          "",
          "[Added Lines]",
          "173:     updateMouseover(elementId: string) {",
          "177:     updateOptionsClick(elementId: string) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:         );",
          "192:     }",
          "195:         return (",
          "196:             currentPipelineElement.type +",
          "197:             ' ' +",
          "199:             currentPipelineElement.settings.connectable +",
          "200:             ' ' +",
          "201:             currentPipelineElement.settings.displaySettings",
          "",
          "[Removed Lines]",
          "194:     getElementCssClasses(currentPipelineElement) {",
          "198:             (currentPipelineElement.settings.openCustomize ? '' : '') +",
          "",
          "[Added Lines]",
          "196:     getElementCssClasses(currentPipelineElement: PipelineElementConfig) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "210:         return this.isInPipeline('set');",
          "211:     }",
          "214:         return this.rawPipelineModel.some(",
          "215:             x => x.type === type && !x.settings.disabled,",
          "216:         );",
          "",
          "[Removed Lines]",
          "213:     isInPipeline(type) {",
          "",
          "[Added Lines]",
          "214:     isInPipeline(type: string) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "336:     initPlumb() {",
          "337:         this.JsplumbBridge.unbind(EVENT_CONNECTION);",
          "339:         this.JsplumbBridge.bind(EVENT_CONNECTION_MOVED, info => {",
          "340:             const pe = this.objectProvider.findElement(",
          "341:                 info.newTargetEndpoint.elementId,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:         this.JsplumbBridge.bind(EVENT_CONNECTION_DRAG, () => {",
          "341:             this.shouldOpenCustomizeSettings = true;",
          "342:         });",
          "344:         this.JsplumbBridge.bind(EVENT_CONNECTION_ABORT, () => {",
          "345:             this.shouldOpenCustomizeSettings = false;",
          "346:         });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "355:                 this.rawPipelineModel,",
          "356:             );",
          "357:             (pe.payload as InvocablePipelineElementUnion).configured = false;",
          "359:             info.targetEndpoint.setType('empty');",
          "360:             this.JsplumbBridge.repaintEverything();",
          "361:             this.validatePipeline();",
          "",
          "[Removed Lines]",
          "358:             pe.settings.openCustomize = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "383:                 info.target.id,",
          "384:                 this.rawPipelineModel,",
          "385:             );",
          "387:                 this.currentPipelineModel = this.objectProvider.makePipeline(",
          "388:                     this.rawPipelineModel,",
          "389:                 );",
          "390:                 pe.settings.loadingStatus = true;",
          "391:                 this.objectProvider",
          "392:                     .updatePipeline(this.currentPipelineModel)",
          "",
          "[Removed Lines]",
          "386:             if (pe.settings.openCustomize) {",
          "",
          "[Added Lines]",
          "395:             if (",
          "396:                 this.shouldOpenCustomizeSettings ||",
          "397:                 info.connection.data.openCustomize",
          "398:             ) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "399:                                     info.target.id,",
          "400:                                 );",
          "401:                             const currentConnectionValid =",
          "406:                             if (currentConnectionValid) {",
          "407:                                 this.validatePipeline(",
          "408:                                     pipelineModificationMessage,",
          "",
          "[Removed Lines]",
          "402:                                 this.currentConnectionValid(",
          "403:                                     pe,",
          "404:                                     edgeValidations,",
          "405:                                 );",
          "",
          "[Added Lines]",
          "415:                                 this.currentConnectionValid(edgeValidations);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "467:         };",
          "468:     }",
          "475:         return targetEdges.every(",
          "476:             e => e.status.validationStatusType === 'COMPLETE',",
          "477:         );",
          "",
          "[Removed Lines]",
          "470:     currentConnectionValid(",
          "471:         pe: PipelineElementConfig,",
          "472:         targetEdges: PipelineEdgeValidation[],",
          "473:     ) {",
          "474:         const entity = pe.payload as InvocablePipelineElementUnion;",
          "",
          "[Added Lines]",
          "480:     currentConnectionValid(targetEdges: PipelineEdgeValidation[]) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "511:                             ).outputStream = modification.outputStream;",
          "512:                         }",
          "513:                     }",
          "515:                         (",
          "516:                             pe.payload as InvocablePipelineElementUnion",
          "517:                         ).inputStreams = modification.inputStreams;",
          "518:                     }",
          "519:                     if (modification.validationInfos.length > 0) {",
          "520:                         this.pipelineStyleService.updatePeConfigurationStatus(",
          "521:                             pe,",
          "",
          "[Removed Lines]",
          "514:                     if (modification.inputStreams) {",
          "",
          "[Added Lines]",
          "520:                     if (",
          "521:                         modification.inputStreams &&",
          "522:                         modification.inputStreams.length > 0",
          "523:                     ) {",
          "528:                     if (modification.pipelineElementValid) {",
          "529:                         pe.settings.completed =",
          "530:                             PipelineElementConfigurationStatus.OK;",
          "531:                     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "536:         }",
          "537:     }",
          "540:         let custom = false;",
          "541:         if (pe.payload instanceof DataProcessorInvocation) {",
          "542:             pe.payload.outputStrategies.forEach(strategy => {",
          "",
          "[Removed Lines]",
          "539:     isCustomOutput(pe) {",
          "",
          "[Added Lines]",
          "552:     isCustomOutput(pe: PipelineElementConfig) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "576:         });",
          "577:     }",
          "580:         this.dialog.open(ConfirmDialogComponent, {",
          "581:             width: '500px',",
          "582:             data: {",
          "",
          "[Removed Lines]",
          "579:     showErrorDialog(title, description) {",
          "",
          "[Added Lines]",
          "592:     showErrorDialog(title: string, description: string) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "611:         dialogRef.afterClosed().subscribe(c => {",
          "612:             if (c) {",
          "614:                 (",
          "615:                     pipelineElementConfig.payload as InvocablePipelineElementUnion",
          "616:                 ).configured = true;",
          "",
          "[Removed Lines]",
          "613:                 pipelineElementConfig.settings.openCustomize = false;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts||ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts": [
          "File: ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts -> ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     constructor(",
          "46:         private dialogRef: DialogRef<CompatibleElementsComponent>,",
          "47:         private JsPlumbService: JsplumbService,",
          "52:     ngOnInit() {",
          "53:         this.possibleElements.sort((a, b) => a.name.localeCompare(b.name));",
          "",
          "[Removed Lines]",
          "48:     ) {",
          "50:     }",
          "",
          "[Added Lines]",
          "48:     ) {}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:         this.hide();",
          "66:     }",
          "72:     hide() {",
          "74:         this.dialogRef.close();",
          "",
          "[Removed Lines]",
          "68:     iconText(elementId) {",
          "70:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/app/editor/model/editor.model.ts||ui/src/app/editor/model/editor.model.ts": [
          "File: ui/src/app/editor/model/editor.model.ts -> ui/src/app/editor/model/editor.model.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: export interface PipelineElementConfig {",
          "42:     type: string;",
          "43:     settings: {",
          "45:         preview: boolean;",
          "46:         displaySettings: string;",
          "47:         connectable: string;",
          "",
          "[Removed Lines]",
          "44:         openCustomize: boolean;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/app/editor/services/jsplumb.service.ts||ui/src/app/editor/services/jsplumb.service.ts": [
          "File: ui/src/app/editor/services/jsplumb.service.ts -> ui/src/app/editor/services/jsplumb.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:                 pipelineElementConfig.payload as InvocablePipelineElementUnion,",
          "133:                 sourceElement,",
          "134:                 false,",
          "135:             );",
          "136:         });",
          "137:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:                 true,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:         pipelineElement: InvocablePipelineElementUnion,",
          "142:         sourceElement,",
          "143:         previewConfig: boolean,",
          "144:     ) {",
          "145:         let targetElementId;",
          "146:         if (pipelineElement instanceof DataProcessorInvocation) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:         openCustomize = false,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:                 true,",
          "151:                 false,",
          "152:             );",
          "154:         } else {",
          "155:             targetElementId = this.dataSinkDropped(",
          "156:                 pipelineElementDomId,",
          "",
          "[Removed Lines]",
          "153:             this.connectNodes(sourceElement, targetElementId, previewConfig);",
          "",
          "[Added Lines]",
          "155:             this.connectNodes(",
          "156:                 sourceElement,",
          "157:                 targetElementId,",
          "158:                 previewConfig,",
          "159:                 openCustomize,",
          "160:             );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:                 true,",
          "159:                 false,",
          "160:             );",
          "162:         }",
          "163:     }",
          "",
          "[Removed Lines]",
          "161:             this.connectNodes(sourceElement, targetElementId, previewConfig);",
          "",
          "[Added Lines]",
          "168:             this.connectNodes(",
          "169:                 sourceElement,",
          "170:                 targetElementId,",
          "171:                 previewConfig,",
          "172:                 openCustomize,",
          "173:             );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:         sourceElementSelector,",
          "167:         targetElementId,",
          "168:         previewConfig: boolean,",
          "169:     ) {",
          "170:         const sourceElement = sourceElementSelector.get()[0];",
          "171:         const jsplumbBridge = this.getBridge(previewConfig);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:         openCustomize = false,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "195:             source: sourceEndPoint,",
          "196:             target: targetEndPoint,",
          "197:             detachable: true,",
          "198:         });",
          "199:         jsplumbBridge.repaintEverything();",
          "200:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:             data: {",
          "212:                 openCustomize,",
          "213:             },",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "250:         );",
          "251:         pipelineElementConfig.settings = {",
          "252:             connectable,",
          "254:             preview: isPreview,",
          "255:             completed:",
          "256:                 pipelineElement instanceof SpDataStream ||",
          "",
          "[Removed Lines]",
          "253:             openCustomize: !(pipelineElement as any).configured,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts": [
          "File: ui/src/app/editor/services/object-provider.service.ts -> ui/src/app/editor/services/object-provider.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { Injectable } from '@angular/core';",
          "20: import {",
          "25: import { EditorService } from './editor.service';",
          "26: import { JsplumbFactoryService } from './jsplumb-factory.service';",
          "",
          "[Removed Lines]",
          "21:     InvocablePipelineElementUnion,",
          "22:     PipelineElementConfig,",
          "23: } from '../model/editor.model';",
          "24: import { DataSinkInvocation, Pipeline } from '@streampipes/platform-services';",
          "",
          "[Added Lines]",
          "20: import { PipelineElementConfig } from '../model/editor.model';",
          "22:     DataProcessorInvocation,",
          "23:     DataSinkInvocation,",
          "24:     Pipeline,",
          "25:     SpDataStream,",
          "26: } from '@streampipes/platform-services';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:         private jsplumbFactoryService: JsplumbFactoryService,",
          "33:     ) {}",
          "40:     preparePipeline(): Pipeline {",
          "41:         const pipeline = new Pipeline();",
          "42:         pipeline.name = '';",
          "",
          "[Removed Lines]",
          "35:     prepareElement(pipelineElement: InvocablePipelineElementUnion) {",
          "36:         pipelineElement.connectedTo = [];",
          "37:         return pipelineElement;",
          "38:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:         return pipeline;",
          "49:     }",
          "61:     hasConnectedPipelineElement(",
          "62:         pipelineElementDomId: string,",
          "63:         rawPipelineModel: PipelineElementConfig[],",
          "",
          "[Removed Lines]",
          "51:     makeFinalPipeline(currentPipelineElements: PipelineElementConfig[]) {",
          "52:         return this.makePipeline(currentPipelineElements);",
          "53:     }",
          "55:     makePipeline(currentPipelineElements: PipelineElementConfig[]): Pipeline {",
          "56:         let pipeline = this.preparePipeline();",
          "57:         pipeline = this.addElementNew(pipeline, currentPipelineElements);",
          "58:         return pipeline;",
          "59:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:     }",
          "87:     findElement(",
          "89:         rawPipelineModel: PipelineElementConfig[],",
          "90:     ): PipelineElementConfig {",
          "91:         return (",
          "",
          "[Removed Lines]",
          "88:         elementId,",
          "",
          "[Added Lines]",
          "75:         elementId: string,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "94:         );",
          "95:     }",
          "101:         const jsplumbBridge =",
          "102:             this.jsplumbFactoryService.getJsplumbBridge(false);",
          "103:         currentPipelineElements.forEach(pipelineElementConfig => {",
          "",
          "[Removed Lines]",
          "97:     addElementNew(",
          "98:         pipeline,",
          "99:         currentPipelineElements: PipelineElementConfig[],",
          "100:     ): Pipeline {",
          "",
          "[Added Lines]",
          "84:     makePipeline(currentPipelineElements: PipelineElementConfig[]): Pipeline {",
          "85:         const pipeline = this.preparePipeline();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109:                     pipelineElementConfig.type === 'sepa' ||",
          "110:                     pipelineElementConfig.type === 'action'",
          "111:                 ) {",
          "116:                     const connections = jsplumbBridge.getConnections({",
          "117:                         target: document.getElementById(payload.dom),",
          "118:                     }) as any;",
          "",
          "[Removed Lines]",
          "112:                     let payload = pipelineElementConfig.payload;",
          "113:                     payload = this.prepareElement(",
          "114:                         payload as InvocablePipelineElementUnion,",
          "115:                     );",
          "",
          "[Added Lines]",
          "97:                     const payload = pipelineElementConfig.payload;",
          "98:                     payload.connectedTo = [];",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "121:                     }",
          "122:                     if (payload.connectedTo && payload.connectedTo.length > 0) {",
          "123:                         pipelineElementConfig.type === 'action'",
          "126:                     }",
          "127:                 } else {",
          "129:                 }",
          "130:             }",
          "131:         });",
          "",
          "[Removed Lines]",
          "124:                             ? pipeline.actions.push(payload)",
          "125:                             : pipeline.sepas.push(payload);",
          "128:                     pipeline.streams.push(pipelineElementConfig.payload);",
          "",
          "[Added Lines]",
          "107:                             ? pipeline.actions.push(",
          "108:                                   payload as DataSinkInvocation,",
          "109:                               )",
          "110:                             : pipeline.sepas.push(",
          "111:                                   payload as DataProcessorInvocation,",
          "112:                               );",
          "115:                     pipeline.streams.push(",
          "116:                         pipelineElementConfig.payload as SpDataStream,",
          "117:                     );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "509c5c08feace82689532a69b0717b622f1f94b3",
      "candidate_info": {
        "commit_hash": "509c5c08feace82689532a69b0717b622f1f94b3",
        "repo": "apache/streampipes",
        "commit_url": "https://github.com/apache/streampipes/commit/509c5c08feace82689532a69b0717b622f1f94b3",
        "files": [
          "ui/cypress/support/builder/PipelineElementBuilder.ts",
          "ui/cypress/tests/adapter/editAdapter.smoke.spec.ts",
          "ui/cypress/tests/adapter/editAdapterSettingsAndPipeline.spec.ts",
          "ui/cypress/tests/adapter/editAdapterValuesAndFields.spec.ts",
          "ui/src/app/connect/dialog/adapter-started/adapter-started-update-migration/adapter-started-update-migration.component.html",
          "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html",
          "ui/src/app/pipelines/components/pipeline-overview/pipeline-overview.component.html"
        ],
        "message": "Added two new tests for editing adapters and pipelines (#2110)\n\n* added new tests for edit adapter and pipeline\n\n* added header",
        "before_after_code_files": [
          "ui/cypress/support/builder/PipelineElementBuilder.ts||ui/cypress/support/builder/PipelineElementBuilder.ts",
          "ui/cypress/tests/adapter/editAdapter.smoke.spec.ts||ui/cypress/tests/adapter/editAdapter.smoke.spec.ts",
          "ui/cypress/tests/adapter/editAdapterSettingsAndPipeline.spec.ts||ui/cypress/tests/adapter/editAdapterSettingsAndPipeline.spec.ts",
          "ui/cypress/tests/adapter/editAdapterValuesAndFields.spec.ts||ui/cypress/tests/adapter/editAdapterValuesAndFields.spec.ts",
          "ui/src/app/connect/dialog/adapter-started/adapter-started-update-migration/adapter-started-update-migration.component.html||ui/src/app/connect/dialog/adapter-started/adapter-started-update-migration/adapter-started-update-migration.component.html",
          "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html",
          "ui/src/app/pipelines/components/pipeline-overview/pipeline-overview.component.html||ui/src/app/pipelines/components/pipeline-overview/pipeline-overview.component.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html"
          ],
          "candidate": [
            "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html"
          ]
        }
      },
      "candidate_diff": {
        "ui/cypress/support/builder/PipelineElementBuilder.ts||ui/cypress/support/builder/PipelineElementBuilder.ts": [
          "File: ui/cypress/support/builder/PipelineElementBuilder.ts -> ui/cypress/support/builder/PipelineElementBuilder.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { UserInput } from '../model/UserInput';",
          "20: import { PipelineElementInput } from '../model/PipelineElementInput';",
          "22: export class PipelineElementBuilder {",
          "23:     pipelineElementInput: PipelineElementInput;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import { UserInputType } from '../model/UserInputType';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:         return new PipelineElementBuilder(name);",
          "33:     }",
          "36:         const userInput = new UserInput();",
          "37:         userInput.type = type;",
          "38:         userInput.selector = selector;",
          "",
          "[Removed Lines]",
          "35:     public addInput(type: string, selector: string, value: string) {",
          "",
          "[Added Lines]",
          "36:     public addInput(type: UserInputType, selector: string, value: string) {",
          "",
          "---------------"
        ],
        "ui/cypress/tests/adapter/editAdapter.smoke.spec.ts||ui/cypress/tests/adapter/editAdapter.smoke.spec.ts": [
          "File: ui/cypress/tests/adapter/editAdapter.smoke.spec.ts -> ui/cypress/tests/adapter/editAdapter.smoke.spec.ts"
        ],
        "ui/cypress/tests/adapter/editAdapterSettingsAndPipeline.spec.ts||ui/cypress/tests/adapter/editAdapterSettingsAndPipeline.spec.ts": [
          "File: ui/cypress/tests/adapter/editAdapterSettingsAndPipeline.spec.ts -> ui/cypress/tests/adapter/editAdapterSettingsAndPipeline.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import { ConnectUtils } from '../../support/utils/connect/ConnectUtils';",
          "20: import { ConnectBtns } from '../../support/utils/connect/ConnectBtns';",
          "21: import { PipelineUtils } from '../../support/utils/PipelineUtils';",
          "22: import { PipelineElementBuilder } from '../../support/builder/PipelineElementBuilder';",
          "23: import { PipelineBuilder } from '../../support/builder/PipelineBuilder';",
          "24: import { AdapterBuilder } from '../../support/builder/AdapterBuilder';",
          "25: import { DashboardUtils } from '../../support/utils/DashboardUtils';",
          "27: describe('Test Edit Adapter and Pipeline', () => {",
          "28:     beforeEach('Setup Test', () => {",
          "30:         cy.initStreamPipesTest();",
          "31:         ConnectUtils.addMachineDataSimulator('simulator');",
          "33:         const adapterName = 'simulator';",
          "34:         const pipelineInput = PipelineBuilder.create('Pipeline Test')",
          "35:             .addSource(adapterName)",
          "36:             .addProcessingElement(",
          "37:                 PipelineElementBuilder.create('numerical_filter')",
          "38:                     .addInput('input', 'value', '10')",
          "39:                     .build(),",
          "40:             )",
          "41:             .addSink(",
          "42:                 PipelineElementBuilder.create('data_lake')",
          "43:                     .addInput('input', 'db_measurement', 'demo')",
          "44:                     .build(),",
          "45:             )",
          "46:             .build();",
          "48:         PipelineUtils.addPipeline(pipelineInput);",
          "49:     });",
          "51:     it('Edit adapter and test Pipeline behaviour', () => {",
          "53:         ConnectUtils.goToConnect();",
          "54:         ConnectBtns.editAdapter().should('not.be.disabled');",
          "55:         ConnectBtns.editAdapter().click();",
          "56:         const newUserConfiguration = AdapterBuilder.create(",
          "57:             'Machine_Data_Simulator',",
          "58:         )",
          "59:             .addInput('input', 'wait-time-ms', '2000')",
          "60:             .addInput('radio', 'selected', 'simulator-option-pressure')",
          "61:             .build();",
          "63:         ConnectUtils.configureAdapter(newUserConfiguration);",
          "66:         ConnectUtils.finishEventSchemaConfiguration();",
          "67:         ConnectBtns.storeEditAdapter().click();",
          "70:         cy.dataCy('sp-connect-adapter-edit-warning', {",
          "71:             timeout: 60000,",
          "72:         }).should('be.visible');",
          "73:         cy.dataCy('btn-update-adapter-migrate-pipelines').click();",
          "74:         ConnectUtils.closeAdapterPreview();",
          "77:         cy.visit('#/pipelines').wait(1000);",
          "79:         cy.dataCy('pipeline-warning-icon', {",
          "80:             timeout: 60000,",
          "81:         }).should('be.visible');",
          "83:         cy.dataCy('pipeline-sync-problem-icon', {",
          "84:             timeout: 60000,",
          "85:         }).should('be.visible');",
          "87:         cy.dataCy('modify-pipeline-btn').click();",
          "88:         cy.dataCy('settings-pipeline-element-button').eq(0).click();",
          "89:         cy.dataCy('number-mapping').contains('pressure').click({ force: true });",
          "90:         cy.dataCy('sp-element-configuration-save').click({ force: true });",
          "91:         cy.dataCy('sp-editor-save-pipeline').click();",
          "92:         cy.dataCy('sp-editor-save').click();",
          "93:         cy.dataCy('start-pipeline-button').click();",
          "94:         cy.dataCy('sp-pipeline-dialog-close').click();",
          "97:         cy.wait(1000);",
          "98:         DashboardUtils.goToDashboard();",
          "101:         const dashboardName = 'testDashboard';",
          "102:         DashboardUtils.addAndEditDashboard(dashboardName);",
          "103:         cy.dataCy('dashboard-add-widget').click();",
          "104:         cy.dataCy('dashboard-visualize-pipeline-Pipeline_Test').click();",
          "105:         cy.dataCy('dashboard-select-widget-table').click();",
          "106:         cy.get('[type=\"checkbox\"]').check();",
          "107:         cy.dataCy('dashboard-new-widget-next-btn').click();",
          "108:         cy.dataCy('dashboard-save-edit-mode').click();",
          "109:         cy.get('.main-panel').should('include.text', 'pressure');",
          "110:         cy.get('.main-panel').should('include.text', 'sensorId');",
          "111:         cy.get('.main-panel').should('include.text', 'time');",
          "112:     });",
          "113: });",
          "",
          "---------------"
        ],
        "ui/cypress/tests/adapter/editAdapterValuesAndFields.spec.ts||ui/cypress/tests/adapter/editAdapterValuesAndFields.spec.ts": [
          "File: ui/cypress/tests/adapter/editAdapterValuesAndFields.spec.ts -> ui/cypress/tests/adapter/editAdapterValuesAndFields.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import { ConnectUtils } from '../../support/utils/connect/ConnectUtils';",
          "20: import { ConnectBtns } from '../../support/utils/connect/ConnectBtns';",
          "21: import { AdapterBuilder } from '../../support/builder/AdapterBuilder';",
          "23: describe('Test Edit Adapter', () => {",
          "24:     beforeEach('Setup Test', () => {",
          "25:         cy.initStreamPipesTest();",
          "26:     });",
          "28:     it('Test configuration of adapter fields ', () => {",
          "30:         const builder = AdapterBuilder.create('Machine_Data_Simulator')",
          "31:             .setName('Machine_Data_Simulator')",
          "32:             .addInput('input', 'wait-time-ms', '1000');",
          "33:         const configuration = builder.build();",
          "34:         ConnectUtils.goToConnect();",
          "35:         ConnectUtils.goToNewAdapterPage();",
          "36:         ConnectUtils.selectAdapter(configuration.adapterType);",
          "37:         cy.contains('Next').click();",
          "40:         cy.dataCy('connect-add-static-property').click();",
          "41:         cy.dataCy('connect-add-field-name').type('test-property-1');",
          "42:         cy.dataCy('connect-add-field-name-button').click();",
          "43:         cy.dataCy('edit-density').click();",
          "45:         cy.dataCy('connect-edit-field-runtime-name')",
          "46:             .clear()",
          "47:             .type('test-density');",
          "49:         cy.get('[id=\"domainproperty\"]')",
          "50:             .clear()",
          "51:             .type('http://schema.org/Numbers');",
          "53:         cy.dataCy('connect-change-runtime-type')",
          "54:             .click()",
          "55:             .get('mat-option')",
          "56:             .contains('Double')",
          "57:             .click();",
          "59:         cy.dataCy('connect-schema-correction-value').type('2');",
          "60:         cy.dataCy('connect-schema-correction-operator')",
          "61:             .click()",
          "62:             .get('mat-option')",
          "63:             .contains('Multiply')",
          "64:             .click();",
          "65:         cy.dataCy('sp-save-edit-property').click();",
          "66:         cy.dataCy('sp-event-schema-next-button').click();",
          "69:         cy.dataCy('sp-adapter-name').type('Test Adapter');",
          "70:         cy.dataCy('adapter-settings-start-adapter-btn').click();",
          "71:         ConnectUtils.closeAdapterPreview();",
          "74:         ConnectBtns.editAdapter().should('not.be.disabled');",
          "75:         ConnectBtns.editAdapter().click();",
          "76:         cy.contains('Next').click();",
          "77:         cy.dataCy('edit-density').click();",
          "78:         cy.dataCy('connect-edit-field-runtime-name').should(",
          "79:             'have.value',",
          "80:             'test-density',",
          "81:         );",
          "82:         cy.get('[id=\"domainproperty\"]').should(",
          "83:             'have.value',",
          "84:             'http://schema.org/Numbers',",
          "85:         );",
          "86:         cy.dataCy('connect-change-runtime-type').should(",
          "87:             'include.text',",
          "88:             'Double',",
          "89:         );",
          "90:         cy.dataCy('connect-schema-correction-value').should('have.value', '2');",
          "91:         cy.dataCy('connect-schema-correction-operator').should(",
          "92:             'include.text',",
          "93:             'Multiply',",
          "94:         );",
          "97:         cy.dataCy('connect-edit-field-runtime-name').clear();",
          "98:         cy.get('[id=\"domainproperty\"]').clear();",
          "99:         cy.dataCy('connect-change-runtime-type')",
          "100:             .click()",
          "101:             .get('mat-option')",
          "102:             .contains('Float')",
          "103:             .click();",
          "104:         cy.dataCy('connect-schema-correction-value').clear();",
          "105:         cy.dataCy('sp-save-edit-property').click();",
          "106:         cy.get('[class=\"general-panel\"]').should(",
          "107:             'include.text',",
          "108:             'test-property-1',",
          "109:         );",
          "110:         cy.dataCy('sp-event-schema-next-button').click();",
          "111:         cy.dataCy('store-edit-adapter').click();",
          "112:         ConnectUtils.closeAdapterPreview();",
          "115:         ConnectBtns.editAdapter().click();",
          "116:         const newUserConfiguration = AdapterBuilder.create(",
          "117:             'Machine_Data_Simulator',",
          "118:         )",
          "119:             .addInput('input', 'wait-time-ms', '2000')",
          "120:             .addInput('radio', 'selected', 'simulator-option-pressure')",
          "121:             .build();",
          "122:         ConnectUtils.configureAdapter(newUserConfiguration);",
          "125:         cy.get('[class=\"general-panel\"]').should(",
          "126:             'include.text',",
          "127:             'test-property-1',",
          "128:         );",
          "129:         cy.dataCy('sp-event-schema-next-button').click();",
          "130:         cy.dataCy('store-edit-adapter').click();",
          "131:         ConnectUtils.closeAdapterPreview();",
          "132:     });",
          "133: });",
          "",
          "---------------"
        ],
        "ui/src/app/connect/dialog/adapter-started/adapter-started-update-migration/adapter-started-update-migration.component.html||ui/src/app/connect/dialog/adapter-started/adapter-started-update-migration/adapter-started-update-migration.component.html": [
          "File: ui/src/app/connect/dialog/adapter-started/adapter-started-update-migration/adapter-started-update-migration.component.html -> ui/src/app/connect/dialog/adapter-started/adapter-started-update-migration/adapter-started-update-migration.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:                 fxLayoutAlign=\"start center\"",
          "35:             >",
          "37:                 &nbsp;Pipeline&nbsp;<b>{{ updateInfo.pipelineName }}</b",
          "38:                 >&nbsp;will be stopped and needs manual review.",
          "39:             </div>",
          "",
          "[Removed Lines]",
          "36:                 <i class=\"material-icons\">warning</i>",
          "",
          "[Added Lines]",
          "36:                 <i",
          "37:                     class=\"material-icons\"",
          "38:                     data-cy=\"sp-connect-adapter-edit-warning\"",
          "39:                     >warning</i",
          "40:                 >",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:             mat-raised-button",
          "51:             color=\"accent\"",
          "52:             (click)=\"startUpdateEmitter.emit()\"",
          "53:         >",
          "54:             Update adapter and migrate pipelines",
          "55:         </button>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:             data-cy=\"btn-update-adapter-migrate-pipelines\"",
          "",
          "---------------"
        ],
        "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html": [
          "File: ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html -> ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:                 matTooltip=\"Configure Element\"",
          "36:                 [matTooltipPosition]=\"'above'\"",
          "37:                 (click)=\"customizeElement(pipelineElement)\"",
          "38:             >",
          "39:                 <i class=\"material-icons options-icon-size\">settings</i>",
          "40:             </button>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:                 data-cy=\"settings-pipeline-element-button\"",
          "",
          "---------------"
        ],
        "ui/src/app/pipelines/components/pipeline-overview/pipeline-overview.component.html||ui/src/app/pipelines/components/pipeline-overview/pipeline-overview.component.html": [
          "File: ui/src/app/pipelines/components/pipeline-overview/pipeline-overview.component.html -> ui/src/app/pipelines/components/pipeline-overview/pipeline-overview.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:                                         ? 's'",
          "83:                                         : ''",
          "84:                                 }}\"",
          "85:                             >",
          "86:                                 <i class=\"material-icons pipeline-notification\"",
          "87:                                     >warning</i",
          "88:                                 >",
          "89:                             </button>",
          "90:                         </div>",
          "92:                             <mat-icon",
          "93:                                 color=\"warn\"",
          "94:                                 matTooltip=\"Invalid pipeline: Modify to fix problems\"",
          "",
          "[Removed Lines]",
          "91:                         <div class=\"ml-10 notification-icon\">",
          "",
          "[Added Lines]",
          "85:                                 data-cy=\"pipeline-warning-icon\"",
          "92:                         <div",
          "93:                             class=\"ml-10 notification-icon\"",
          "94:                             data-cy=\"pipeline-sync-problem-icon\"",
          "95:                         >",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:                     mat-icon-button",
          "109:                     matTooltip=\"Start pipeline\"",
          "110:                     matTooltipPosition=\"above\"",
          "111:                     (click)=\"",
          "112:                         pipelineOperationsService.startPipeline(",
          "113:                             pipeline._id,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:                     data-cy=\"start-pipeline-button\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:                                     pipeline._id",
          "206:                                 )",
          "207:                             \"",
          "208:                         >",
          "209:                             <i class=\"material-icons\">mode_edit</i>",
          "210:                         </button>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "213:                             data-cy=\"modify-pipeline-btn\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b99270f071171d8c164f0815c33ac618643a15a",
      "candidate_info": {
        "commit_hash": "0b99270f071171d8c164f0815c33ac618643a15a",
        "repo": "apache/streampipes",
        "commit_url": "https://github.com/apache/streampipes/commit/0b99270f071171d8c164f0815c33ac618643a15a",
        "files": [
          "ui/package-lock.json",
          "ui/package.json",
          "ui/projects/streampipes/platform-services/package.json",
          "ui/projects/streampipes/platform-services/src/lib/apis/pipeline.service.spec.ts",
          "ui/projects/streampipes/shared-ui/package.json",
          "ui/src/app/configuration/extensions-service-management/extensions-service-configuration/service-configs/service-configs-password/service-configs-password.component.spec.ts",
          "ui/src/app/configuration/shared/configuration.service.spec.ts",
          "ui/src/app/configuration/shared/configuration.service.ts",
          "ui/src/app/core-ui/core-ui.module.ts",
          "ui/src/app/core-ui/object-permission-dialog/object-permission-dialog.component.ts",
          "ui/src/app/core-ui/static-properties/static-code-input/static-code-input.component.ts",
          "ui/src/app/core-ui/static-properties/static-property-util.service.ts",
          "ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-runtime-resolvable-tree-input.component.ts",
          "ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.html",
          "ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.ts",
          "ui/src/app/dashboard/dashboard.module.ts",
          "ui/src/app/data-explorer-shared/components/chart-container/data-explorer-chart-container.component.ts",
          "ui/src/app/data-explorer-shared/data-explorer-shared.module.ts",
          "ui/src/app/data-explorer-shared/models/dataview-dashboard.model.ts",
          "ui/src/app/data-explorer/data-explorer.module.ts",
          "ui/src/app/editor/components/pipeline-assembly/pipeline-assembly-drawing-area/pipeline-assembly-drawing-area-pan-zoom/pipeline-assembly-drawing-area-pan-zoom.component.ts",
          "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
          "ui/src/app/editor/dialog/pipeline-element-discovery/pipeline-element-discovery.component.ts",
          "ui/src/app/editor/dialog/save-pipeline/save-pipeline.component.ts",
          "ui/src/app/editor/services/object-provider.service.ts",
          "ui/src/app/login/components/setup/setup.component.ts",
          "ui/src/app/services/rest-api.service.ts",
          "ui/src/scss/sp/sp-theme.scss"
        ],
        "message": "deps(#3463): Bump Angular to v18 (#3464)\n\n* deps(#3463): Bump Angular to v18\n\n* Fix linting\n\n* Fix tree node component\n\n* Update tree component",
        "before_after_code_files": [
          "ui/projects/streampipes/platform-services/src/lib/apis/pipeline.service.spec.ts||ui/projects/streampipes/platform-services/src/lib/apis/pipeline.service.spec.ts",
          "ui/src/app/configuration/extensions-service-management/extensions-service-configuration/service-configs/service-configs-password/service-configs-password.component.spec.ts||ui/src/app/configuration/extensions-service-management/extensions-service-configuration/service-configs/service-configs-password/service-configs-password.component.spec.ts",
          "ui/src/app/configuration/shared/configuration.service.spec.ts||ui/src/app/configuration/shared/configuration.service.spec.ts",
          "ui/src/app/configuration/shared/configuration.service.ts||ui/src/app/configuration/shared/configuration.service.ts",
          "ui/src/app/core-ui/core-ui.module.ts||ui/src/app/core-ui/core-ui.module.ts",
          "ui/src/app/core-ui/object-permission-dialog/object-permission-dialog.component.ts||ui/src/app/core-ui/object-permission-dialog/object-permission-dialog.component.ts",
          "ui/src/app/core-ui/static-properties/static-code-input/static-code-input.component.ts||ui/src/app/core-ui/static-properties/static-code-input/static-code-input.component.ts",
          "ui/src/app/core-ui/static-properties/static-property-util.service.ts||ui/src/app/core-ui/static-properties/static-property-util.service.ts",
          "ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-runtime-resolvable-tree-input.component.ts||ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-runtime-resolvable-tree-input.component.ts",
          "ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.html||ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.html",
          "ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.ts||ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.ts",
          "ui/src/app/dashboard/dashboard.module.ts||ui/src/app/dashboard/dashboard.module.ts",
          "ui/src/app/data-explorer-shared/components/chart-container/data-explorer-chart-container.component.ts||ui/src/app/data-explorer-shared/components/chart-container/data-explorer-chart-container.component.ts",
          "ui/src/app/data-explorer-shared/data-explorer-shared.module.ts||ui/src/app/data-explorer-shared/data-explorer-shared.module.ts",
          "ui/src/app/data-explorer-shared/models/dataview-dashboard.model.ts||ui/src/app/data-explorer-shared/models/dataview-dashboard.model.ts",
          "ui/src/app/data-explorer/data-explorer.module.ts||ui/src/app/data-explorer/data-explorer.module.ts",
          "ui/src/app/editor/components/pipeline-assembly/pipeline-assembly-drawing-area/pipeline-assembly-drawing-area-pan-zoom/pipeline-assembly-drawing-area-pan-zoom.component.ts||ui/src/app/editor/components/pipeline-assembly/pipeline-assembly-drawing-area/pipeline-assembly-drawing-area-pan-zoom/pipeline-assembly-drawing-area-pan-zoom.component.ts",
          "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts||ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
          "ui/src/app/editor/dialog/pipeline-element-discovery/pipeline-element-discovery.component.ts||ui/src/app/editor/dialog/pipeline-element-discovery/pipeline-element-discovery.component.ts",
          "ui/src/app/editor/dialog/save-pipeline/save-pipeline.component.ts||ui/src/app/editor/dialog/save-pipeline/save-pipeline.component.ts",
          "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts",
          "ui/src/app/login/components/setup/setup.component.ts||ui/src/app/login/components/setup/setup.component.ts",
          "ui/src/app/services/rest-api.service.ts||ui/src/app/services/rest-api.service.ts",
          "ui/src/scss/sp/sp-theme.scss||ui/src/scss/sp/sp-theme.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts||ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
            "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts"
          ],
          "candidate": [
            "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts||ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
            "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts"
          ]
        }
      },
      "candidate_diff": {
        "ui/projects/streampipes/platform-services/src/lib/apis/pipeline.service.spec.ts||ui/projects/streampipes/platform-services/src/lib/apis/pipeline.service.spec.ts": [
          "File: ui/projects/streampipes/platform-services/src/lib/apis/pipeline.service.spec.ts -> ui/projects/streampipes/platform-services/src/lib/apis/pipeline.service.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { TestBed } from '@angular/core/testing';",
          "20: import { PipelineService } from './pipeline.service';",
          "21: import {",
          "23:     HttpTestingController,",
          "24: } from '@angular/common/http/testing';",
          "25: import { Pipeline } from '../model/gen/streampipes-model';",
          "27: describe('PipelineService', () => {",
          "28:     const mockPath = 'mock';",
          "",
          "[Removed Lines]",
          "22:     HttpClientTestingModule,",
          "",
          "[Added Lines]",
          "23:     provideHttpClientTesting,",
          "26: import {",
          "27:     provideHttpClient,",
          "28:     withInterceptorsFromDi,",
          "29: } from '@angular/common/http';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     beforeEach(() => {",
          "33:         TestBed.configureTestingModule({",
          "35:         });",
          "36:         httpMock = TestBed.inject(HttpTestingController);",
          "37:         pipelineService = TestBed.inject(PipelineService);",
          "",
          "[Removed Lines]",
          "34:             imports: [HttpClientTestingModule],",
          "",
          "[Added Lines]",
          "38:             imports: [],",
          "39:             providers: [",
          "40:                 provideHttpClient(withInterceptorsFromDi()),",
          "41:                 provideHttpClientTesting(),",
          "42:             ],",
          "",
          "---------------"
        ],
        "ui/src/app/configuration/extensions-service-management/extensions-service-configuration/service-configs/service-configs-password/service-configs-password.component.spec.ts||ui/src/app/configuration/extensions-service-management/extensions-service-configuration/service-configs/service-configs-password/service-configs-password.component.spec.ts": [
          "File: ui/src/app/configuration/extensions-service-management/extensions-service-configuration/service-configs/service-configs-password/service-configs-password.component.spec.ts -> ui/src/app/configuration/extensions-service-management/extensions-service-configuration/service-configs/service-configs-password/service-configs-password.component.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { DebugElement } from '@angular/core';",
          "20: import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';",
          "22: import { ServiceConfigsPasswordComponent } from './service-configs-password.component';",
          "23: import { ConfigurationService } from '../../../../shared/configuration.service';",
          "24: import { CommonModule } from '@angular/common';",
          "",
          "[Removed Lines]",
          "21: import { HttpClientTestingModule } from '@angular/common/http/testing';",
          "",
          "[Added Lines]",
          "21: import { provideHttpClientTesting } from '@angular/common/http/testing';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: import { MatInputModule } from '@angular/material/input';",
          "33: import { MatCheckboxModule } from '@angular/material/checkbox';",
          "34: import { MatTooltipModule } from '@angular/material/tooltip';",
          "36: describe('ServiceConfigsPasswordComponent', () => {",
          "37:     let fixture: ComponentFixture<ServiceConfigsPasswordComponent>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import {",
          "36:     provideHttpClient,",
          "37:     withInterceptorsFromDi,",
          "38: } from '@angular/common/http';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     let component: ServiceConfigsPasswordComponent;",
          "45:     beforeEach(waitForAsync(() => {",
          "46:         configurationServiceStub = {",
          "47:             adjustConfigurationKey(key) {",
          "",
          "[Removed Lines]",
          "43:     let configurationServcie: ConfigurationService;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "55:         };",
          "57:         TestBed.configureTestingModule({",
          "58:             imports: [",
          "59:                 CommonModule,",
          "60:                 BrowserAnimationsModule,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:             declarations: [ServiceConfigsPasswordComponent],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "66:                 MatCheckboxModule,",
          "67:                 MatTooltipModule,",
          "68:                 FormsModule,",
          "70:             ],",
          "72:             providers: [",
          "73:                 {",
          "74:                     provide: ConfigurationService,",
          "75:                     useValue: configurationServiceStub,",
          "76:                 },",
          "77:             ],",
          "78:         }).compileComponents();",
          "80:         fixture = TestBed.createComponent(ServiceConfigsPasswordComponent);",
          "85:         component = fixture.componentInstance;",
          "86:     }));",
          "",
          "[Removed Lines]",
          "69:                 HttpClientTestingModule,",
          "71:             declarations: [ServiceConfigsPasswordComponent],",
          "82:         configurationServcie =",
          "83:             fixture.debugElement.injector.get(ConfigurationService);",
          "",
          "[Added Lines]",
          "78:                 provideHttpClient(withInterceptorsFromDi()),",
          "79:                 provideHttpClientTesting(),",
          "",
          "---------------"
        ],
        "ui/src/app/configuration/shared/configuration.service.spec.ts||ui/src/app/configuration/shared/configuration.service.spec.ts": [
          "File: ui/src/app/configuration/shared/configuration.service.spec.ts -> ui/src/app/configuration/shared/configuration.service.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { getTestBed, TestBed } from '@angular/core/testing';",
          "20: import {",
          "22:     HttpTestingController,",
          "23: } from '@angular/common/http/testing';",
          "24: import { ConfigurationService } from './configuration.service';",
          "25: import { SpServiceConfiguration } from '../../../../projects/streampipes/platform-services/src/lib/model/gen/streampipes-model';",
          "27: describe('ConfigurationService', () => {",
          "28:     let injector: TestBed;",
          "",
          "[Removed Lines]",
          "21:     HttpClientTestingModule,",
          "",
          "[Added Lines]",
          "22:     provideHttpClientTesting,",
          "26: import {",
          "27:     provideHttpClient,",
          "28:     withInterceptorsFromDi,",
          "29: } from '@angular/common/http';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     beforeEach(() => {",
          "33:         TestBed.configureTestingModule({",
          "36:         });",
          "37:         injector = getTestBed();",
          "38:         service = injector.get(ConfigurationService);",
          "",
          "[Removed Lines]",
          "34:             imports: [HttpClientTestingModule],",
          "35:             providers: [ConfigurationService],",
          "",
          "[Added Lines]",
          "38:             imports: [],",
          "39:             providers: [",
          "40:                 ConfigurationService,",
          "41:                 provideHttpClient(withInterceptorsFromDi()),",
          "42:                 provideHttpClientTesting(),",
          "43:             ],",
          "",
          "---------------"
        ],
        "ui/src/app/configuration/shared/configuration.service.ts||ui/src/app/configuration/shared/configuration.service.ts": [
          "File: ui/src/app/configuration/shared/configuration.service.ts -> ui/src/app/configuration/shared/configuration.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:     updateExtensionsServiceConfigs(",
          "85:         config: SpServiceConfiguration,",
          "87:         return this.http.put(",
          "88:             this.getServerUrl() +",
          "89:                 `/api/v2/extensions-services-configurations/${config.serviceGroup}`,",
          "",
          "[Removed Lines]",
          "86:     ): Observable<Object> {",
          "",
          "[Added Lines]",
          "86:     ): Observable<object> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     updateMessagingSettings(",
          "95:         messagingSettings: MessagingSettings,",
          "97:         return this.http.post(",
          "98:             this.getServerUrl() + '/api/v2/messaging',",
          "99:             messagingSettings,",
          "",
          "[Removed Lines]",
          "96:     ): Observable<Object> {",
          "",
          "[Added Lines]",
          "96:     ): Observable<object> {",
          "",
          "---------------"
        ],
        "ui/src/app/core-ui/core-ui.module.ts||ui/src/app/core-ui/core-ui.module.ts": [
          "File: ui/src/app/core-ui/core-ui.module.ts -> ui/src/app/core-ui/core-ui.module.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: import { StaticTreeInputBrowseNodesComponent } from './static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component';",
          "108: import { StaticTreeInputNodeDetailsComponent } from './static-properties/static-runtime-resolvable-tree-input/static-tree-input-node-details/static-tree-input-node-details.component';",
          "109: import { SingleMarkerMapComponent } from './single-marker-map/single-marker-map.component';",
          "111: import { StaticTreeInputTextEditorComponent } from './static-properties/static-runtime-resolvable-tree-input/static-tree-input-text-editor/static-tree-input-text-editor.component';",
          "112: import { PipelineElementTemplateConfigItemComponent } from './pipeline-element-template-config/pipeline-element-template-config-item/pipeline-element-template-config-item.component';",
          "113: import { ConfigurationCodePanelComponent } from './configuration-code-panel/configuration-code-panel.component';",
          "",
          "[Removed Lines]",
          "110: import { LeafletModule } from '@asymmetrik/ngx-leaflet';",
          "",
          "[Added Lines]",
          "110: import { LeafletModule } from '@bluehalo/ngx-leaflet';",
          "",
          "---------------"
        ],
        "ui/src/app/core-ui/object-permission-dialog/object-permission-dialog.component.ts||ui/src/app/core-ui/object-permission-dialog/object-permission-dialog.component.ts": [
          "File: ui/src/app/core-ui/object-permission-dialog/object-permission-dialog.component.ts -> ui/src/app/core-ui/object-permission-dialog/object-permission-dialog.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "232:     private addUserToSelection(authority: PermissionEntry) {",
          "233:         const user = this.allUsers.find(u => u.principalId === authority.sid);",
          "235:     }",
          "237:     private addGroupToSelection(authority: PermissionEntry) {",
          "",
          "[Removed Lines]",
          "234:         user && this.grantedUserAuthorities.push(user);",
          "",
          "[Added Lines]",
          "234:         if (user !== undefined) {",
          "235:             this.grantedUserAuthorities.push(user);",
          "236:         }",
          "",
          "---------------"
        ],
        "ui/src/app/core-ui/static-properties/static-code-input/static-code-input.component.ts||ui/src/app/core-ui/static-properties/static-code-input/static-code-input.component.ts": [
          "File: ui/src/app/core-ui/static-properties/static-code-input/static-code-input.component.ts -> ui/src/app/core-ui/static-properties/static-code-input/static-code-input.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     }",
          "66:     applyLanguage() {",
          "71:     }",
          "73:     ngAfterViewInit() {",
          "",
          "[Removed Lines]",
          "67:         this.staticProperty.language === 'None'",
          "68:             ? (this.editorOptions.mode = '')",
          "69:             : (this.editorOptions.mode =",
          "70:                   this.staticProperty.language.toLowerCase());",
          "",
          "[Added Lines]",
          "67:         if (this.staticProperty.language === 'None') {",
          "68:             this.editorOptions.mode = '';",
          "69:         } else {",
          "70:             this.editorOptions.mode =",
          "71:                 this.staticProperty.language.toLowerCase();",
          "72:         }",
          "",
          "---------------"
        ],
        "ui/src/app/core-ui/static-properties/static-property-util.service.ts||ui/src/app/core-ui/static-properties/static-property-util.service.ts": [
          "File: ui/src/app/core-ui/static-properties/static-property-util.service.ts -> ui/src/app/core-ui/static-properties/static-property-util.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:             val instanceof RuntimeResolvableAnyStaticProperty ||",
          "156:             val instanceof RuntimeResolvableOneOfStaticProperty",
          "157:         ) {",
          "162:             clone.elementId = id;",
          "163:             clone.dependsOn = val.dependsOn;",
          "",
          "[Removed Lines]",
          "158:             val instanceof RuntimeResolvableAnyStaticProperty",
          "159:                 ? (clone = new RuntimeResolvableAnyStaticProperty())",
          "160:                 : (clone = new RuntimeResolvableOneOfStaticProperty());",
          "",
          "[Added Lines]",
          "158:             if (val instanceof RuntimeResolvableAnyStaticProperty) {",
          "159:                 clone = new RuntimeResolvableAnyStaticProperty();",
          "160:             } else {",
          "161:                 clone = new RuntimeResolvableOneOfStaticProperty();",
          "162:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:             val instanceof AnyStaticProperty ||",
          "168:             val instanceof OneOfStaticProperty",
          "169:         ) {",
          "174:             clone.elementId = id;",
          "175:             clone.options = val.options.map(option => this.cloneOption(option));",
          "",
          "[Removed Lines]",
          "170:             val instanceof AnyStaticProperty",
          "171:                 ? (clone = new AnyStaticProperty())",
          "172:                 : (clone = new OneOfStaticProperty());",
          "",
          "[Added Lines]",
          "172:             if (val instanceof AnyStaticProperty) {",
          "173:                 clone = new AnyStaticProperty();",
          "174:             } else {",
          "175:                 clone = new OneOfStaticProperty();",
          "176:             }",
          "",
          "---------------"
        ],
        "ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-runtime-resolvable-tree-input.component.ts||ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-runtime-resolvable-tree-input.component.ts": [
          "File: ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-runtime-resolvable-tree-input.component.ts -> ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-runtime-resolvable-tree-input.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     ) {",
          "102:         if (",
          "103:             staticProperty.latestFetchedNodes &&",
          "105:         ) {",
          "106:             this.latestFetchedNodes = staticProperty.latestFetchedNodes;",
          "107:             if (node) {",
          "",
          "[Removed Lines]",
          "104:             staticProperty.latestFetchedNodes.length > 0",
          "",
          "[Added Lines]",
          "104:             staticProperty.nextBaseNodeToResolve !== null",
          "",
          "---------------"
        ],
        "ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.html||ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.html": [
          "File: ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.html -> ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: <mat-tree",
          "36:     [dataSource]=\"dataSource\"",
          "38:     #tree",
          "39:     class=\"sp-tree\"",
          "40:     [ngClass]=\"largeView ? 'tree-large-height' : 'tree-normal-height'\"",
          "",
          "[Removed Lines]",
          "37:     [treeControl]=\"treeControl\"",
          "",
          "[Added Lines]",
          "37:     [childrenAccessor]=\"childrenAccessor\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:                 matTreeNodeToggle",
          "87:                 [attr.data-cy]=\"'expand-' + node.nodeName\"",
          "88:                 [attr.aria-label]=\"'Toggle ' + node.nodeName\"",
          "90:             >",
          "91:                 <mat-icon class=\"mat-icon-rtl-mirror\">",
          "92:                     {{",
          "96:                     }}",
          "97:                 </mat-icon>",
          "98:             </button>",
          "99:             <div fxLayoutAlign=\"start center\">",
          "100:                 <i",
          "101:                     class=\"material-icons color-primary pr-5\"",
          "103:                     >folder</i",
          "104:                 >",
          "105:                 <i",
          "106:                     class=\"material-icons color-primary pr-5\"",
          "108:                     >folder_open</i",
          "109:                 >",
          "110:                 <i",
          "111:                     class=\"material-icons pr-5 icon-button\"",
          "115:                     matTooltip=\"Add all direct children\"",
          "116:                     (click)=\"addAllDirectChildren(node)\"",
          "117:                     >add_circle</i",
          "",
          "[Removed Lines]",
          "89:                 (click)=\"loadChildren(node, treeControl.isExpanded(node))\"",
          "93:                         treeControl.isExpanded(node)",
          "94:                             ? 'expand_more'",
          "95:                             : 'chevron_right'",
          "113:                         treeControl.isExpanded(node) && hasDataChildren(node)",
          "114:                     \"",
          "",
          "[Added Lines]",
          "89:                 (click)=\"loadChildren(node, tree.isExpanded(node))\"",
          "93:                         tree.isExpanded(node) ? 'expand_more' : 'chevron_right'",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:                 <span class=\"node-name pr-5\">&nbsp;{{ node.nodeName }}</span>",
          "136:             </div>",
          "137:         </div>",
          "139:             <ng-container matTreeNodeOutlet></ng-container>",
          "140:         </div>",
          "141:     </mat-nested-tree-node>",
          "",
          "[Removed Lines]",
          "138:         <div *ngIf=\"treeControl.isExpanded(node)\" role=\"group\">",
          "",
          "[Added Lines]",
          "134:         <div *ngIf=\"tree.isExpanded(node)\" role=\"group\">",
          "",
          "---------------"
        ],
        "ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.ts||ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.ts": [
          "File: ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.ts -> ui/src/app/core-ui/static-properties/static-runtime-resolvable-tree-input/static-tree-input-browse-nodes/static-tree-input-browse-nodes.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:     tree: MatTree<TreeInputNode>;",
          "60:     largeView = false;",
          "62:     dataSource = new MatTreeNestedDataSource<TreeInputNode>();",
          "64:     selectedNodeId: string;",
          "",
          "[Removed Lines]",
          "61:     treeControl = new NestedTreeControl<TreeInputNode>(node => node.children);",
          "",
          "[Added Lines]",
          "61:     childrenAccessor = node => node.children;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     ) {}",
          "72:     ngOnInit(): void {",
          "77:         this.dataSource = new MatTreeNestedDataSource<TreeInputNode>();",
          "78:     }",
          "80:     updateNodes(nodes: TreeInputNode[]) {",
          "82:     }",
          "84:     refreshTree() {",
          "85:         const data = this.dataSource.data.slice();",
          "88:         this.dataSource.data = [...data];",
          "89:     }",
          "",
          "[Removed Lines]",
          "73:         this.treeControl = new NestedTreeControl<TreeInputNode>(",
          "74:             node => node.children,",
          "75:         );",
          "81:         this.dataSource.data = nodes;",
          "86:         this.dataSource.data = null;",
          "87:         this.dataSource = new MatTreeNestedDataSource<TreeInputNode>();",
          "",
          "[Added Lines]",
          "74:         this.dataSource.data = [];",
          "78:         this.dataSource.data = nodes || [];",
          "83:         this.dataSource.data = [];",
          "",
          "---------------"
        ],
        "ui/src/app/dashboard/dashboard.module.ts||ui/src/app/dashboard/dashboard.module.ts": [
          "File: ui/src/app/dashboard/dashboard.module.ts -> ui/src/app/dashboard/dashboard.module.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import { DashboardOverviewComponent } from './components/overview/dashboard-overview.component';",
          "28: import { NgxChartsModule } from '@swimlane/ngx-charts';",
          "29: import { CdkTableModule } from '@angular/cdk/table';",
          "31: import { CoreUiModule } from '../core-ui/core-ui.module';",
          "32: import { PlatformServicesModule } from '@streampipes/platform-services';",
          "33: import { ServicesModule } from '../services/services.module';",
          "",
          "[Removed Lines]",
          "30: import { LeafletModule } from '@asymmetrik/ngx-leaflet';",
          "",
          "[Added Lines]",
          "30: import { LeafletModule } from '@bluehalo/ngx-leaflet';",
          "",
          "---------------"
        ],
        "ui/src/app/data-explorer-shared/components/chart-container/data-explorer-chart-container.component.ts||ui/src/app/data-explorer-shared/components/chart-container/data-explorer-chart-container.component.ts": [
          "File: ui/src/app/data-explorer-shared/components/chart-container/data-explorer-chart-container.component.ts -> ui/src/app/data-explorer-shared/components/chart-container/data-explorer-chart-container.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "311:     }",
          "313:     handleTimer(start: boolean) {",
          "315:     }",
          "317:     downloadDataAsFile(): void {",
          "",
          "[Removed Lines]",
          "314:         start ? this.startLoadingTimer() : this.stopLoadingTimer();",
          "",
          "[Added Lines]",
          "314:         if (start) {",
          "315:             this.startLoadingTimer();",
          "316:         } else {",
          "317:             this.stopLoadingTimer();",
          "318:         }",
          "",
          "---------------"
        ],
        "ui/src/app/data-explorer-shared/data-explorer-shared.module.ts||ui/src/app/data-explorer-shared/data-explorer-shared.module.ts": [
          "File: ui/src/app/data-explorer-shared/data-explorer-shared.module.ts -> ui/src/app/data-explorer-shared/data-explorer-shared.module.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import { MatProgressBarModule } from '@angular/material/progress-bar';",
          "41: import { MatButtonToggleModule } from '@angular/material/button-toggle';",
          "42: import { CommonModule } from '@angular/common';",
          "44: import { CoreUiModule } from '../core-ui/core-ui.module';",
          "45: import { MatTabsModule } from '@angular/material/tabs';",
          "46: import { GridsterModule } from 'angular-gridster2';",
          "",
          "[Removed Lines]",
          "43: import { LeafletModule } from '@asymmetrik/ngx-leaflet';",
          "",
          "[Added Lines]",
          "43: import { LeafletModule } from '@bluehalo/ngx-leaflet';",
          "",
          "---------------"
        ],
        "ui/src/app/data-explorer-shared/models/dataview-dashboard.model.ts||ui/src/app/data-explorer-shared/models/dataview-dashboard.model.ts": [
          "File: ui/src/app/data-explorer-shared/models/dataview-dashboard.model.ts -> ui/src/app/data-explorer-shared/models/dataview-dashboard.model.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: import { Observable } from 'rxjs';",
          "42: export interface BaseWidgetData<T extends DataExplorerWidgetModel> {",
          "43:     removeWidgetCallback: EventEmitter<boolean>;",
          "",
          "[Removed Lines]",
          "40: export interface IDataViewDashboardConfig extends GridsterConfig {}",
          "",
          "[Added Lines]",
          "40: export type IDataViewDashboardConfig = GridsterConfig;",
          "",
          "---------------"
        ],
        "ui/src/app/data-explorer/data-explorer.module.ts||ui/src/app/data-explorer/data-explorer.module.ts": [
          "File: ui/src/app/data-explorer/data-explorer.module.ts -> ui/src/app/data-explorer/data-explorer.module.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import { MatSliderModule } from '@angular/material/slider';",
          "29: import { MatSnackBarModule } from '@angular/material/snack-bar';",
          "30: import { MatTabsModule } from '@angular/material/tabs';",
          "33: import { NgxChartsModule } from '@swimlane/ngx-charts';",
          "34: import { GridsterModule } from 'angular-gridster2';",
          "",
          "[Removed Lines]",
          "31: import { LeafletModule } from '@asymmetrik/ngx-leaflet';",
          "",
          "[Added Lines]",
          "31: import { LeafletModule } from '@bluehalo/ngx-leaflet';",
          "",
          "---------------"
        ],
        "ui/src/app/editor/components/pipeline-assembly/pipeline-assembly-drawing-area/pipeline-assembly-drawing-area-pan-zoom/pipeline-assembly-drawing-area-pan-zoom.component.ts||ui/src/app/editor/components/pipeline-assembly/pipeline-assembly-drawing-area/pipeline-assembly-drawing-area-pan-zoom/pipeline-assembly-drawing-area-pan-zoom.component.ts": [
          "File: ui/src/app/editor/components/pipeline-assembly/pipeline-assembly-drawing-area/pipeline-assembly-drawing-area-pan-zoom/pipeline-assembly-drawing-area-pan-zoom.component.ts -> ui/src/app/editor/components/pipeline-assembly/pipeline-assembly-drawing-area/pipeline-assembly-drawing-area-pan-zoom/pipeline-assembly-drawing-area-pan-zoom.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         this.doZoom(false);",
          "94:     }",
          "98:         this.currentZoomLevel = this.panzoom.getScale();",
          "99:         this.jsplumbBridge.setZoom(this.currentZoomLevel);",
          "100:         this.jsplumbBridge.repaintEverything();",
          "",
          "[Removed Lines]",
          "96:     doZoom(zoomOut) {",
          "97:         zoomOut ? this.panzoom.zoomOut() : this.panzoom.zoomIn();",
          "",
          "[Added Lines]",
          "96:     doZoom(zoomOut: boolean) {",
          "97:         if (zoomOut) {",
          "98:             this.panzoom.zoomOut();",
          "99:         } else {",
          "100:             this.panzoom.zoomIn();",
          "101:         }",
          "",
          "---------------"
        ],
        "ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts||ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts": [
          "File: ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts -> ui/src/app/editor/dialog/compatible-elements/compatible-elements.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     }",
          "89:     changeStyle(index: number, hover: boolean) {",
          "93:     }",
          "94: }",
          "",
          "[Removed Lines]",
          "90:         hover",
          "91:             ? (this.styles[index] = this.makeHoverStyle())",
          "92:             : (this.styles[index] = this.makeStandardStyle());",
          "",
          "[Added Lines]",
          "90:         if (hover) {",
          "91:             this.styles[index] = this.makeHoverStyle();",
          "92:         } else {",
          "93:             this.styles[index] = this.makeStandardStyle();",
          "94:         }",
          "",
          "---------------"
        ],
        "ui/src/app/editor/dialog/pipeline-element-discovery/pipeline-element-discovery.component.ts||ui/src/app/editor/dialog/pipeline-element-discovery/pipeline-element-discovery.component.ts": [
          "File: ui/src/app/editor/dialog/pipeline-element-discovery/pipeline-element-discovery.component.ts -> ui/src/app/editor/dialog/pipeline-element-discovery/pipeline-element-discovery.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     }",
          "96:     changeStyle(index: number, hover: boolean) {",
          "100:     }",
          "101: }",
          "",
          "[Removed Lines]",
          "97:         hover",
          "98:             ? (this.styles[index] = this.makeHoverStyle())",
          "99:             : (this.styles[index] = this.makeStandardStyle());",
          "",
          "[Added Lines]",
          "97:         if (hover) {",
          "98:             this.styles[index] = this.makeHoverStyle();",
          "99:         } else {",
          "100:             this.styles[index] = this.makeStandardStyle();",
          "101:         }",
          "",
          "---------------"
        ],
        "ui/src/app/editor/dialog/save-pipeline/save-pipeline.component.ts||ui/src/app/editor/dialog/save-pipeline/save-pipeline.component.ts": [
          "File: ui/src/app/editor/dialog/save-pipeline/save-pipeline.component.ts -> ui/src/app/editor/dialog/save-pipeline/save-pipeline.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:         }",
          "234:     }",
          "237:         let request;",
          "238:         this.pipelineCanvasMetadata.pipelineId = pipelineId;",
          "239:         if (this.storageOptions.updateModeActive) {",
          "",
          "[Removed Lines]",
          "236:     getPipelineCanvasMetadata$(pipelineId: string): Observable<Object> {",
          "",
          "[Added Lines]",
          "236:     getPipelineCanvasMetadata$(pipelineId: string): Observable<object> {",
          "",
          "---------------"
        ],
        "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts": [
          "File: ui/src/app/editor/services/object-provider.service.ts -> ui/src/app/editor/services/object-provider.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:                         payload.connectedTo.push(connections[i].sourceId);",
          "104:                     }",
          "105:                     if (payload.connectedTo && payload.connectedTo.length > 0) {",
          "113:                     }",
          "114:                 } else {",
          "115:                     pipeline.streams.push(",
          "",
          "[Removed Lines]",
          "106:                         pipelineElementConfig.type === 'action'",
          "107:                             ? pipeline.actions.push(",
          "108:                                   payload as DataSinkInvocation,",
          "109:                               )",
          "110:                             : pipeline.sepas.push(",
          "111:                                   payload as DataProcessorInvocation,",
          "112:                               );",
          "",
          "[Added Lines]",
          "106:                         if (pipelineElementConfig.type === 'action') {",
          "107:                             pipeline.actions.push(",
          "108:                                 payload as DataSinkInvocation,",
          "109:                             );",
          "110:                         } else {",
          "111:                             pipeline.sepas.push(",
          "112:                                 payload as DataProcessorInvocation,",
          "113:                             );",
          "114:                         }",
          "",
          "---------------"
        ],
        "ui/src/app/login/components/setup/setup.component.ts||ui/src/app/login/components/setup/setup.component.ts": [
          "File: ui/src/app/login/components/setup/setup.component.ts -> ui/src/app/login/components/setup/setup.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:                     this.scrollContainer.nativeElement.scrollHeight;",
          "70:                 const nextInstallationStep = currentInstallationStep + 1;",
          "71:                 if (nextInstallationStep > data.installationStepCount - 1) {",
          "80:                         () => {",
          "81:                             this.loading = false;",
          "84:                 } else {",
          "85:                     this.configure(nextInstallationStep);",
          "86:                 }",
          "",
          "[Removed Lines]",
          "73:                     this.restApi.configured().subscribe(res => {",
          "74:                         if (res.configured) {",
          "75:                             this.installationFinished = true;",
          "76:                             this.loading = false;",
          "77:                         }",
          "79:                     }),",
          "83:                         };",
          "",
          "[Added Lines]",
          "72:                     this.restApi.configured().subscribe(",
          "73:                         res => {",
          "74:                             if (res.configured) {",
          "75:                                 this.installationFinished = true;",
          "76:                                 this.loading = false;",
          "77:                             }",
          "78:                         },",
          "81:                         },",
          "82:                     );",
          "",
          "---------------"
        ],
        "ui/src/app/services/rest-api.service.ts||ui/src/app/services/rest-api.service.ts": [
          "File: ui/src/app/services/rest-api.service.ts -> ui/src/app/services/rest-api.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: @Injectable({ providedIn: 'root' })",
          "26: export class RestApi {",
          "29:     constructor(",
          "30:         private platformServicesCommons: PlatformServicesCommons,",
          "31:         private $http: HttpClient,",
          "",
          "[Removed Lines]",
          "27:     encodeURIComponent: any;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         });",
          "56:     }",
          "101:     updateCachedPipeline(rawPipelineModel: any) {",
          "102:         return this.$http.post(",
          "103:             this.urlApiBase() + '/pipeline-cache',",
          "",
          "[Removed Lines]",
          "58:     getDomainKnowledgeItems(query) {",
          "59:         return this.$http.post(",
          "60:             this.getServerUrl() + '/autocomplete/domain',",
          "61:             query,",
          "62:         );",
          "63:     }",
          "65:     getAllUnits() {",
          "66:         return this.$http.get(this.getServerUrl() + '/units/instances');",
          "67:     }",
          "69:     getAllUnitTypes() {",
          "70:         return this.$http.get(this.getServerUrl() + '/units/types');",
          "71:     }",
          "73:     getUnit(resource) {",
          "74:         return this.$http.get(",
          "75:             this.getServerUrl() +",
          "76:                 '/units/instances/' +",
          "77:                 encodeURIComponent(resource),",
          "78:         );",
          "79:     }",
          "81:     getEpaCategories() {",
          "82:         return this.$http.get(this.getServerUrl() + '/categories/epa');",
          "83:     }",
          "85:     getAdapterCategories() {",
          "86:         return this.$http.get(this.getServerUrl() + '/categories/adapter');",
          "87:     }",
          "89:     getApplicationLinks() {",
          "90:         return this.$http.get(this.getServerUrl() + '/applink');",
          "91:     }",
          "93:     getFileMetadata() {",
          "94:         return this.$http.get(this.urlApiBase() + '/files');",
          "95:     }",
          "97:     getCachedPipeline() {",
          "98:         return this.$http.get(this.urlApiBase() + '/pipeline-cache');",
          "99:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:         );",
          "106:     }",
          "112:     getVersionInfo() {",
          "113:         return this.$http.get(this.getServerUrl() + '/info/versions');",
          "114:     }",
          "",
          "[Removed Lines]",
          "108:     removePipelineFromCache() {",
          "109:         return this.$http.delete(this.urlApiBase() + '/pipeline-cache');",
          "110:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/scss/sp/sp-theme.scss||ui/src/scss/sp/sp-theme.scss": [
          "File: ui/src/scss/sp/sp-theme.scss -> ui/src/scss/sp/sp-theme.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:     ),",
          "132: );",
          "140:     $font-family: 'Roboto-Regular, Arial',",
          "141: );",
          "144:     (",
          "145:         color: (",
          "146:             primary: $custom-theme-primary,",
          "",
          "[Removed Lines]",
          "134: $custom-theme-primary: mat.define-palette($mat-streampipes-primary);",
          "135: $custom-theme-accent-dark: mat.define-palette($mat-streampipes-accent-dark);",
          "136: $custom-theme-accent: mat.define-palette($mat-streampipes-accent);",
          "137: $custom-theme-warn: mat.define-palette(mat.$red-palette);",
          "139: $custom-typography: mat.define-typography-config(",
          "143: $custom-theme-light: mat.define-light-theme(",
          "",
          "[Added Lines]",
          "134: $custom-theme-primary: mat.m2-define-palette($mat-streampipes-primary);",
          "135: $custom-theme-accent-dark: mat.m2-define-palette($mat-streampipes-accent-dark);",
          "136: $custom-theme-accent: mat.m2-define-palette($mat-streampipes-accent);",
          "137: $custom-theme-warn: mat.m2-define-palette(mat.$m2-red-palette);",
          "139: $custom-typography: mat.m2-define-typography-config(",
          "143: $custom-theme-light: mat.m2-define-light-theme(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     )",
          "153: );",
          "156:     (",
          "157:         color: (",
          "158:             primary: $custom-theme-primary,",
          "",
          "[Removed Lines]",
          "155: $custom-theme-dark: mat.define-light-theme(",
          "",
          "[Added Lines]",
          "155: $custom-theme-dark: mat.m2-define-light-theme(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3257a2858693c993955e6343df4653f82d58e13",
      "candidate_info": {
        "commit_hash": "e3257a2858693c993955e6343df4653f82d58e13",
        "repo": "apache/streampipes",
        "commit_url": "https://github.com/apache/streampipes/commit/e3257a2858693c993955e6343df4653f82d58e13",
        "files": [
          "ui/package-lock.json",
          "ui/package.json",
          "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
          "ui/src/app/editor/services/jsplumb-bridge.service.ts",
          "ui/src/app/editor/services/object-provider.service.ts"
        ],
        "message": "fix(#2235): Use lodash for deep copy (#2238)",
        "before_after_code_files": [
          "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
          "ui/src/app/editor/services/jsplumb-bridge.service.ts||ui/src/app/editor/services/jsplumb-bridge.service.ts",
          "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
            "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts"
          ],
          "candidate": [
            "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
            "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts"
          ]
        }
      },
      "candidate_diff": {
        "ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts||ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts": [
          "File: ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts -> ui/src/app/editor/components/pipeline-element-options/pipeline-element-options.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { JsplumbBridge } from '../../services/jsplumb-bridge.service';",
          "22: import { RestApi } from '../../../services/rest-api.service';",
          "23: import {",
          "24:     Component,",
          "",
          "[Removed Lines]",
          "20: import { JsplumbService } from '../../services/jsplumb.service';",
          "21: import { PipelineValidationService } from '../../services/pipeline-validation.service';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     SpDataStream,",
          "42:     WildcardTopicDefinition,",
          "43: } from '@streampipes/platform-services';",
          "44: import { EditorService } from '../../services/editor.service';",
          "45: import { DialogService, PanelType } from '@streampipes/shared-ui';",
          "46: import { CompatibleElementsComponent } from '../../dialog/compatible-elements/compatible-elements.component';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import { cloneDeep } from 'lodash';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     pipelineElementConfiguredObservable: Subscription;",
          "96:     constructor(",
          "97:         private objectProvider: ObjectProvider,",
          "",
          "[Removed Lines]",
          "94:     JsplumbBridge: JsplumbBridge;",
          "",
          "[Added Lines]",
          "93:     jsplumbBridge: JsplumbBridge;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:         private dialogService: DialogService,",
          "100:         private editorService: EditorService,",
          "101:         private jsplumbFactoryService: JsplumbFactoryService,",
          "104:         private restApi: RestApi,",
          "105:     ) {",
          "106:         this.recommendationsAvailable = false;",
          "107:         this.possibleElements = [];",
          "108:         this.recommendedElements = [];",
          "109:         this.recommendationsShown = false;",
          "111:     }",
          "113:     ngOnInit() {",
          "",
          "[Removed Lines]",
          "102:         private jsplumbService: JsplumbService,",
          "103:         private pipelineValidationService: PipelineValidationService,",
          "110:         this.JsplumbBridge = this.jsplumbFactoryService.getJsplumbBridge(false);",
          "",
          "[Added Lines]",
          "107:         this.jsplumbBridge = this.jsplumbFactoryService.getJsplumbBridge(false);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "159:     }",
          "163:             this.rawPipelineModel,",
          "164:         );",
          "165:         const currentPipeline = this.objectProvider.makePipeline(clonedModel);",
          "",
          "[Removed Lines]",
          "161:     initRecs(pipelineElementDomId) {",
          "162:         const clonedModel: PipelineElementConfig[] = this.deepCopy(",
          "",
          "[Added Lines]",
          "158:     initRecs(pipelineElementDomId: string) {",
          "159:         const clonedModel: PipelineElementConfig[] = cloneDeep(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "167:             .recommendPipelineElement(currentPipeline, pipelineElementDomId)",
          "168:             .subscribe(result => {",
          "169:                 if (result.success) {",
          "171:                         this.pipelineElementRecommendationService.collectPossibleElements(",
          "172:                             this.allElements,",
          "173:                             result.possibleElements,",
          "174:                         ),",
          "175:                     );",
          "177:                         this.pipelineElementRecommendationService.populateRecommendedList(",
          "178:                             this.allElements,",
          "179:                             result.recommendedElements,",
          "",
          "[Removed Lines]",
          "170:                     this.possibleElements = this.deepCopy(",
          "176:                     this.recommendedElements = this.deepCopy(",
          "",
          "[Added Lines]",
          "167:                     this.possibleElements = cloneDeep(",
          "173:                     this.recommendedElements = cloneDeep(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "203:         e.stopPropagation();",
          "204:     }",
          "216:     isWildcardTopic() {",
          "217:         return (",
          "218:             (this.pipelineElement.payload as SpDataStream).eventGrounding",
          "",
          "[Removed Lines]",
          "206:     isRootElement() {",
          "207:         return (",
          "208:             this.JsplumbBridge.getConnections({",
          "209:                 source: document.getElementById(",
          "210:                     this.pipelineElement.payload.dom,",
          "211:                 ),",
          "212:             }).length === 0",
          "213:         );",
          "214:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "224:     ngOnDestroy(): void {",
          "225:         this.pipelineElementConfiguredObservable.unsubscribe();",
          "226:     }",
          "251: }",
          "",
          "[Removed Lines]",
          "228:     deepCopy(obj) {",
          "229:         let clone: any = {};",
          "230:         if (",
          "231:             obj === null ||",
          "232:             typeof obj !== 'object' ||",
          "233:             Array.isArray(obj) ||",
          "234:             obj === undefined",
          "235:         ) {",
          "236:             return obj;",
          "237:         }",
          "239:         if (Array.isArray(obj)) {",
          "240:             clone = obj.map(item => this.deepCopy(item));",
          "241:         }",
          "243:         for (const key in obj) {",
          "244:             if (obj.hasOwnProperty(key)) {",
          "245:                 clone[key] = this.deepCopy(obj[key]);",
          "246:             }",
          "247:         }",
          "249:         return clone;",
          "250:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ui/src/app/editor/services/jsplumb-bridge.service.ts||ui/src/app/editor/services/jsplumb-bridge.service.ts": [
          "File: ui/src/app/editor/services/jsplumb-bridge.service.ts -> ui/src/app/editor/services/jsplumb-bridge.service.ts"
        ],
        "ui/src/app/editor/services/object-provider.service.ts||ui/src/app/editor/services/object-provider.service.ts": [
          "File: ui/src/app/editor/services/object-provider.service.ts -> ui/src/app/editor/services/object-provider.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { Injectable } from '@angular/core';",
          "21: import {",
          "22:     InvocablePipelineElementUnion,",
          "23:     PipelineElementConfig,",
          "",
          "[Removed Lines]",
          "20: import { RestApi } from '../../services/rest-api.service';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: @Injectable({ providedIn: 'root' })",
          "30: export class ObjectProvider {",
          "31:     constructor(",
          "33:         private editorService: EditorService,",
          "34:         private jsplumbFactoryService: JsplumbFactoryService,",
          "35:     ) {}",
          "",
          "[Removed Lines]",
          "32:         private restApi: RestApi,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50:         return pipeline;",
          "51:     }",
          "54:         return this.makePipeline(currentPipelineElements);",
          "55:     }",
          "58:         let pipeline = this.preparePipeline();",
          "59:         pipeline = this.addElementNew(pipeline, currentPipelineElements);",
          "60:         return pipeline;",
          "",
          "[Removed Lines]",
          "53:     makeFinalPipeline(currentPipelineElements) {",
          "57:     makePipeline(currentPipelineElements): Pipeline {",
          "",
          "[Added Lines]",
          "51:     makeFinalPipeline(currentPipelineElements: PipelineElementConfig[]) {",
          "55:     makePipeline(currentPipelineElements: PipelineElementConfig[]): Pipeline {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:         pipeline,",
          "101:         currentPipelineElements: PipelineElementConfig[],",
          "102:     ): Pipeline {",
          "104:             this.jsplumbFactoryService.getJsplumbBridge(false);",
          "109:                     payload = this.prepareElement(",
          "110:                         payload as InvocablePipelineElementUnion,",
          "111:                     );",
          "113:                         target: document.getElementById(payload.dom),",
          "114:                     });",
          "115:                     for (let i = 0; i < connections.length; i++) {",
          "116:                         payload.connectedTo.push(connections[i].sourceId);",
          "117:                     }",
          "118:                     if (payload.connectedTo && payload.connectedTo.length > 0) {",
          "120:                             ? pipeline.actions.push(payload)",
          "121:                             : pipeline.sepas.push(payload);",
          "122:                     }",
          "123:                 } else {",
          "125:                 }",
          "126:             }",
          "127:         });",
          "",
          "[Removed Lines]",
          "103:         const JsplumbBridge =",
          "105:         currentPipelineElements.forEach(pe => {",
          "106:             if (pe.settings.disabled === undefined || !pe.settings.disabled) {",
          "107:                 if (pe.type === 'sepa' || pe.type === 'action') {",
          "108:                     let payload = pe.payload;",
          "112:                     const connections = JsplumbBridge.getConnections({",
          "119:                         pe.type === 'action'",
          "124:                     pipeline.streams.push(pe.payload);",
          "",
          "[Added Lines]",
          "101:         const jsplumbBridge =",
          "103:         currentPipelineElements.forEach(pipelineElementConfig => {",
          "104:             if (",
          "105:                 pipelineElementConfig.settings.disabled === undefined ||",
          "106:                 !pipelineElementConfig.settings.disabled",
          "107:             ) {",
          "108:                 if (",
          "109:                     pipelineElementConfig.type === 'sepa' ||",
          "110:                     pipelineElementConfig.type === 'action'",
          "111:                 ) {",
          "112:                     let payload = pipelineElementConfig.payload;",
          "116:                     const connections = jsplumbBridge.getConnections({",
          "123:                         pipelineElementConfig.type === 'action'",
          "128:                     pipeline.streams.push(pipelineElementConfig.payload);",
          "",
          "---------------"
        ]
      }
    }
  ]
}