{
  "cve_id": "CVE-2021-27906",
  "cve_desc": "A carefully crafted PDF file can trigger an OutOfMemory-Exception while loading the file. This issue affects Apache PDFBox version 2.0.22 and prior 2.0.x versions.",
  "repo": "apache/pdfbox",
  "patch_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
  "patch_info": {
    "commit_hash": "8c47be1011c11dc47300faecffd8ab32fba3646f",
    "repo": "apache/pdfbox",
    "commit_url": "https://github.com/apache/pdfbox/commit/8c47be1011c11dc47300faecffd8ab32fba3646f",
    "files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ],
    "message": "PDFBOX-5112: SonarCube fix, throw NoSuchElementException if no more elements are available\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887295 13f79535-47bb-0310-9956-ffa450edef68",
    "before_after_code_files": [
      "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java"
    ]
  },
  "patch_diff": {
    "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java||pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java": [
      "File: pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java -> pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFXrefStreamParser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import java.io.IOException;",
      "20: import java.util.Arrays;",
      "21: import java.util.Iterator;",
      "23: import org.apache.pdfbox.cos.COSArray;",
      "24: import org.apache.pdfbox.cos.COSBase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.NoSuchElementException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "212:         @Override",
      "213:         public Long next()",
      "214:         {",
      "215:             if (currentNumber < currentEnd)",
      "216:             {",
      "217:                 return currentNumber++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216:             if (currentNumber >= maxValue)",
      "217:             {",
      "218:                 throw new NoSuchElementException();",
      "219:             }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6a43e8e57021b99a16082a9a0ea1a0b0889d774",
      "candidate_info": {
        "commit_hash": "b6a43e8e57021b99a16082a9a0ea1a0b0889d774",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/b6a43e8e57021b99a16082a9a0ea1a0b0889d774",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java"
        ],
        "message": "PDFBOX-5115: optimize by moving code segment up\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887442 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDSimpleFont.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:         if (getStandard14AFM() != null)",
          "324:         {",
          "325:             String nameInAFM = getEncoding().getName(code);",
          "326:             if (\"nbspace\".equals(nameInAFM))",
          "327:             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:             if (\".notdef\".equals(nameInAFM))",
          "329:             {",
          "330:                 return 250f;",
          "331:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:                 nameInAFM = \"hyphen\";",
          "337:             }",
          "345:             return getStandard14AFM().getCharacterWidth(nameInAFM);",
          "346:         }",
          "347:         throw new IllegalStateException(\"No AFM\");",
          "",
          "[Removed Lines]",
          "340:             if (\".notdef\".equals(nameInAFM))",
          "341:             {",
          "342:                 return 250f;",
          "343:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5a56f2260c6096087d7071dd7974847027290eea",
      "candidate_info": {
        "commit_hash": "5a56f2260c6096087d7071dd7974847027290eea",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/5a56f2260c6096087d7071dd7974847027290eea",
        "files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java"
        ],
        "message": "PDFBOX-5138: Sonar fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1887956 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java||examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java": [
          "File: examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java -> examples/src/main/java/org/apache/pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:         }",
          "106:     }",
          "109:     {",
          "110:         Map<String, PDComplexFileSpecification> names = efTree.getNames();",
          "111:         if (names != null)",
          "",
          "[Removed Lines]",
          "108:     private static void extractFilesFromEFTree(PDNameTreeNode efTree, String filePath) throws IOException",
          "",
          "[Added Lines]",
          "108:     private static void extractFilesFromEFTree(PDNameTreeNode<PDComplexFileSpecification> efTree, String filePath) throws IOException",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fb764d7df54b156a2f4a62b2500eac1950ba678",
      "candidate_info": {
        "commit_hash": "1fb764d7df54b156a2f4a62b2500eac1950ba678",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/1fb764d7df54b156a2f4a62b2500eac1950ba678",
        "files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/CmapTable.java"
        ],
        "message": "PDFBOX-4892: optimize, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892495 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "fontbox/src/main/java/org/apache/fontbox/ttf/CmapTable.java||fontbox/src/main/java/org/apache/fontbox/ttf/CmapTable.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fontbox/src/main/java/org/apache/fontbox/ttf/CmapTable.java||fontbox/src/main/java/org/apache/fontbox/ttf/CmapTable.java": [
          "File: fontbox/src/main/java/org/apache/fontbox/ttf/CmapTable.java -> fontbox/src/main/java/org/apache/fontbox/ttf/CmapTable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:             cmap.initData(data);",
          "82:             cmaps[i] = cmap;",
          "83:         }",
          "84:         for (int i = 0; i < numberOfTables; i++)",
          "85:         {",
          "87:         }",
          "88:         initialized = true;",
          "89:     }",
          "",
          "[Removed Lines]",
          "86:             cmaps[i].initSubtable(this, ttf.getNumberOfGlyphs(), data);",
          "",
          "[Added Lines]",
          "84:         int numberOfGlyphs = ttf.getNumberOfGlyphs();",
          "87:             cmaps[i].initSubtable(this, numberOfGlyphs, data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f664b64e905a06a6164d4eed5cfa162904daf06f",
      "candidate_info": {
        "commit_hash": "f664b64e905a06a6164d4eed5cfa162904daf06f",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/f664b64e905a06a6164d4eed5cfa162904daf06f",
        "files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java"
        ],
        "message": "PDFBOX-4892: optimize code, as suggested by valerybokov\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1891449 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java||preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java||preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java": [
          "File: preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java -> preflight/src/main/java/org/apache/pdfbox/preflight/graphic/StandardColorSpaceHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:             ICC_Profile iccp = ICC_Profile.getInstance(is);",
          "250:             is.close();",
          "253:             {",
          "255:                 if (altCsId == ColorSpaces.Pattern)",
          "256:                 {",
          "257:                     context.addValidationError(new ValidationError(",
          "",
          "[Removed Lines]",
          "251:             PDColorSpace altpdcs = iccBased.getAlternateColorSpace();",
          "252:             if (altpdcs != null)",
          "254:                 ColorSpaces altCsId = ColorSpaces.valueOf(altpdcs.getName());",
          "",
          "[Added Lines]",
          "251:             PDColorSpace alternateColorSpace = iccBased.getAlternateColorSpace();",
          "252:             if (alternateColorSpace != null)",
          "254:                 ColorSpaces altCsId = ColorSpaces.valueOf(alternateColorSpace.getName());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "277:                 {",
          "278:                     return;",
          "279:                 }",
          "281:             }",
          "282:         }",
          "283:         catch (IllegalArgumentException e)",
          "",
          "[Removed Lines]",
          "280:                 validateICCProfileAlternateEntry(iccBased);",
          "",
          "[Added Lines]",
          "280:                 validateICCProfileAlternateEntry(iccBased, alternateColorSpace);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "550:         return true;",
          "551:     }",
          "554:     {",
          "557:         {",
          "559:             context.addValidationError(new ValidationError(ERROR_GRAPHIC_OUTPUT_INTENT_INVALID_ENTRY,",
          "560:                     \"/N entry of ICC profile is different (\" + iccBased.getNumberOfComponents()",
          "561:                     + \") than alternate entry colorspace component count (\"",
          "563:         }",
          "564:     }",
          "565: }",
          "",
          "[Removed Lines]",
          "553:     private void validateICCProfileAlternateEntry(PDICCBased iccBased) throws IOException",
          "555:         PDColorSpace altCS = iccBased.getAlternateColorSpace();",
          "556:         if (altCS != null && altCS.getNumberOfComponents() != iccBased.getNumberOfComponents())",
          "562:                     + altCS.getNumberOfComponents() + \")\"));",
          "",
          "[Added Lines]",
          "553:     private void validateICCProfileAlternateEntry(",
          "554:             PDICCBased iccBased, PDColorSpace alternateColorSpace) throws IOException",
          "556:         if (alternateColorSpace.getNumberOfComponents() != iccBased.getNumberOfComponents())",
          "562:                     + alternateColorSpace.getNumberOfComponents() + \")\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d336ad1a278e8e947c7f0d91b6fcafc59b8a3cc0",
      "candidate_info": {
        "commit_hash": "d336ad1a278e8e947c7f0d91b6fcafc59b8a3cc0",
        "repo": "apache/pdfbox",
        "commit_url": "https://github.com/apache/pdfbox/commit/d336ad1a278e8e947c7f0d91b6fcafc59b8a3cc0",
        "files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
        ],
        "message": "PDFBOX-5256: don't use floorDiv as it's not avail in suported java version\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1892314 13f79535-47bb-0310-9956-ffa450edef68",
        "before_after_code_files": [
          "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/pdfbox/pull/104"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java||pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java": [
          "File: pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java -> pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "647:         }",
          "648:         else if (quadding == 1)",
          "649:         {",
          "651:         }",
          "653:         for (int i = 0; i < numChars; i++)",
          "",
          "[Removed Lines]",
          "650:             xOffset = xOffset + Math.floorDiv(maxLen - numChars, 2) * combWidth;",
          "",
          "[Added Lines]",
          "650:             xOffset = xOffset + (maxLen - numChars) / 2 * combWidth;",
          "",
          "---------------"
        ]
      }
    }
  ]
}