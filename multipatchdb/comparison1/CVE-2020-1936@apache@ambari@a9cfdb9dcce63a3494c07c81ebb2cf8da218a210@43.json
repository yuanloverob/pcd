{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "09400e2905f3b101c72e8383e060b9575e89b825",
      "candidate_info": {
        "commit_hash": "09400e2905f3b101c72e8383e060b9575e89b825",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/09400e2905f3b101c72e8383e060b9575e89b825",
        "files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py",
          "ambari-server/src/main/resources/stacks/HDP/2.2/services/HIVE/configuration/hive-env.xml",
          "ambari-server/src/main/resources/stacks/HDP/2.3/services/HIVE/configuration/hive-env.xml",
          "ambari-server/src/main/resources/stacks/HDP/2.5/services/HIVE/configuration/hive-env.xml",
          "ambari-server/src/main/resources/stacks/HDP/2.5/services/HIVE/configuration/hive-interactive-env.xml",
          "ambari-server/src/main/resources/stacks/HDP/2.6/services/HIVE/configuration/hive-env.xml",
          "ambari-server/src/main/resources/stacks/HDP/2.6/services/HIVE/configuration/hive-interactive-env.xml"
        ],
        "message": "AMBARI-22863. Hive should handle a customized Zookeeper service princ\u2026 (#2244)\n\n* AMBARI-22863. Hive should handle a customized Zookeeper service principal name (amagyar)\n\n* AMBARI-22863. Hive should handle a customized Zookeeper service principal name (amagyar)",
        "before_after_code_files": [
          "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py||ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py": [
          "File: ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py -> ambari-server/src/main/resources/common-services/HIVE/0.12.0.2.0/package/scripts/params_linux.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "370: hive_server_principal = config['configurations']['hive-site']['hive.server2.authentication.kerberos.principal']",
          "371: hive_server2_authentication = config['configurations']['hive-site']['hive.server2.authentication']",
          "373: # ssl options",
          "374: hive_ssl = default('/configurations/hive-site/hive.server2.use.SSL', False)",
          "375: hive_ssl_keystore_path = default('/configurations/hive-site/hive.server2.keystore.path', None)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373: zk_principal_name = default(\"/configurations/zookeeper-env/zookeeper_principal_name\", \"zookeeper/_HOST@EXAMPLE.COM\")",
          "374: zk_principal_user = zk_principal_name.split('/')[0]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1bd6b93159a799c38f7ffbe1bbaba815323038f",
      "candidate_info": {
        "commit_hash": "f1bd6b93159a799c38f7ffbe1bbaba815323038f",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/f1bd6b93159a799c38f7ffbe1bbaba815323038f",
        "files": [
          "ambari-web/app/mixins/wizard/addSecurityConfigs.js",
          "ambari-web/test/mixins/wizard/addSeccurityConfigs_test.js"
        ],
        "message": "AMBARI-24555 Nifi Registry install fails. (ababiichuk)",
        "before_after_code_files": [
          "ambari-web/app/mixins/wizard/addSecurityConfigs.js||ambari-web/app/mixins/wizard/addSecurityConfigs.js",
          "ambari-web/test/mixins/wizard/addSeccurityConfigs_test.js||ambari-web/test/mixins/wizard/addSeccurityConfigs_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mixins/wizard/addSecurityConfigs.js||ambari-web/app/mixins/wizard/addSecurityConfigs.js": [
          "File: ambari-web/app/mixins/wizard/addSecurityConfigs.js -> ambari-web/app/mixins/wizard/addSecurityConfigs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "897:   removeIdentityReferences: function(kerberosDescriptor) {",
          "899:     kerberosDescriptor.services.forEach((service) => {",
          "900:       if (service.identities) {",
          "901:         service.identities = service.identities.filter(notReference);",
          "",
          "[Removed Lines]",
          "898:     const notReference = (identity) => Em.isNone(identity.reference);",
          "",
          "[Added Lines]",
          "898:     const notReference = (identity) => (Em.isNone(identity.reference) && !identity.name.startsWith('/'));",
          "",
          "---------------"
        ],
        "ambari-web/test/mixins/wizard/addSeccurityConfigs_test.js||ambari-web/test/mixins/wizard/addSeccurityConfigs_test.js": [
          "File: ambari-web/test/mixins/wizard/addSeccurityConfigs_test.js -> ambari-web/test/mixins/wizard/addSeccurityConfigs_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:               },",
          "338:               {",
          "339:                 name: 'foo'",
          "340:               }",
          "341:             ],",
          "342:             components: [",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:               },",
          "341:               {",
          "342:                 name: '/foo'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:                   },",
          "348:                   {",
          "349:                     name: 'foo'",
          "350:                   }",
          "351:                 ]",
          "352:               }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:                   },",
          "354:                   {",
          "355:                     name: '/foo'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff21bd18c447eb64bc76b0b53dcf3ac85a13c527",
      "candidate_info": {
        "commit_hash": "ff21bd18c447eb64bc76b0b53dcf3ac85a13c527",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/ff21bd18c447eb64bc76b0b53dcf3ac85a13c527",
        "files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js"
        ],
        "message": "AMBARI-25379 Upgrade AMS Grafana version to 6.4.2\n\nFix minor datasource related issues.\n\nChange-Id: I26a81da667cb264814828373c087bb5ad39ad945",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js||ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js": [
          "File: ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js -> ambari-metrics/ambari-metrics-grafana/ambari-metrics/datasource.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "394:           if (!_.isEmpty(templateSrv.variables)) {",
          "396:             if (templateSrv.variables[0].query === \"yarnqueues\") {",
          "419:                 });",
          "421:             }",
          "423:             if (templateSrv.variables[0].query === \"hbase-users\") {",
          "424:               var allUsers = templateSrv.variables.filter(function(variable) {",
          "",
          "[Removed Lines]",
          "397:               var allQueues = templateSrv.variables.filter(function(variable) { return variable.query === \"yarnqueues\";});",
          "398:               var selectedQs = (_.isEmpty(allQueues)) ? \"\" : allQueues[0].options.filter(function(q)",
          "399:               { return q.selected; }).map(function(qName) { return qName.value; });",
          "401:               if (!_.isEmpty(_.find(selectedQs, function (wildcard) { return wildcard === \"*\"; })))  {",
          "402:                 var allQueue = allQueues[0].options.filter(function(q) {",
          "403:                   return q.text !== \"All\"; }).map(function(queue) { return queue.value; });",
          "404:                 _.forEach(allQueue, function(processQueue) {",
          "405:                   metricsPromises.push(_.map(options.targets, function(target) {",
          "406:                     target.qmetric = processQueue;",
          "407:                     target.queue = target.metric.replace('root', target.qmetric);",
          "408:                     return getYarnAppIdData(target);",
          "409:                   }));",
          "410:                 });",
          "411:               } else {",
          "413:                 _.forEach(selectedQs, function(processQueue) {",
          "414:                   metricsPromises.push(_.map(options.targets, function(target) {",
          "415:                     target.qmetric = processQueue;",
          "416:                     target.queue = target.metric.replace('root', target.qmetric);",
          "417:                     return getYarnAppIdData(target);",
          "418:                   }));",
          "420:               }",
          "",
          "[Added Lines]",
          "397:               var allQueues = templateSrv.variables.filter(function(variable) {",
          "398:                 return variable.query === \"yarnqueues\";",
          "399:               });",
          "400:               var selectedQs = (_.isEmpty(allQueues)) ? \"\" : allQueues[0].options",
          "401:                 .filter(getSelectedItems)",
          "402:                 .map(function(qName) {",
          "403:                   return qName.value;",
          "406:               _.forEach(selectedQs, function(processQueue) {",
          "407:                 metricsPromises.push(_.map(options.targets, function(target) {",
          "408:                   target.qmetric = processQueue;",
          "409:                   target.queue = target.metric.replace('root', target.qmetric);",
          "410:                   return getYarnAppIdData(target);",
          "411:                 }));",
          "412:               });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "453:                 }",
          "454:               }",
          "458:               }",
          "459:               _.forEach(splitTables, function(table) {",
          "460:                 metricsPromises.push(_.map(options.targets, function(target) {",
          "",
          "[Removed Lines]",
          "456:               while (allTable.length > 0) {",
          "457:                 splitTables.push(allTable.splice(0, 20));",
          "",
          "[Added Lines]",
          "449:               while (allTables.length > 0) {",
          "450:                 splitTables.push(allTables.splice(0, 20));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "499:                   selectedCallers.push(caller.text);",
          "500:                 }",
          "501:               }",
          "503:                   metricsPromises.push(_.map(options.targets, function(target) {",
          "504:                     target.nnCaller = processCaller;",
          "505:                     target.nnMetric = target.metric.replace('*', target.nnCaller);",
          "",
          "[Removed Lines]",
          "502:               _.forEach(selectedCaller, function(processCaller) {",
          "",
          "[Added Lines]",
          "495:               _.forEach(selectedCallers, function(processCaller) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "572:             if (templateSrv.variables[0].query === \"topologies\" && templateSrv.variables[1] &&",
          "573:                 templateSrv.variables[1].name === \"component\") {",
          "582:             }",
          "585:             if (templateSrv.variables[0].query === \"topologies\" && templateSrv.variables[1] &&",
          "586:                 templateSrv.variables[1].name === \"topic\") {",
          "597:             }",
          "",
          "[Removed Lines]",
          "574:               var selectedTopology = templateSrv._values.topologies;",
          "575:               var selectedComponent = templateSrv._values.component;",
          "576:               metricsPromises.push(_.map(options.targets, function(target) {",
          "577:                 target.sTopology = selectedTopology;",
          "578:                 target.sComponent = selectedComponent;",
          "579:                 target.sTopoMetric = target.metric.replace('*', target.sTopology).replace('*', target.sComponent);",
          "580:                   return getStormData(target);",
          "581:               }));",
          "587:               var selectedTopology = templateSrv._values.topologies;",
          "588:               var selectedTopic = templateSrv._values.topic;",
          "589:               metricsPromises.push(_.map(options.targets, function(target) {",
          "590:                 target.sTopology = selectedTopology;",
          "591:                 target.sTopic = selectedTopic;",
          "592:                 target.sPartition = options.scopedVars.partition.value;",
          "593:                 target.sTopoMetric = target.metric.replace('*', target.sTopology).replace('*', target.sTopic)",
          "594:                     .replace('*', target.sPartition);",
          "595:                 return getStormData(target);",
          "596:               }));",
          "",
          "[Added Lines]",
          "567:               if (templateSrv._values) {",
          "568:                 var selectedTopology = templateSrv._values.topologies;",
          "569:                 var selectedComponent = templateSrv._values.component;",
          "571:                 metricsPromises.push(_.map(options.targets, function(target) {",
          "572:                   target.sTopology = selectedTopology;",
          "573:                   target.sComponent = selectedComponent;",
          "574:                   target.sTopoMetric = target.metric.replace('*', target.sTopology).replace('*', target.sComponent);",
          "575:                     return getStormData(target);",
          "576:                 }));",
          "577:               }",
          "583:               if (templateSrv._values) {",
          "584:                 var selectedTopology = templateSrv._values.topologies;",
          "585:                 var selectedTopic = templateSrv._values.topic;",
          "587:                 metricsPromises.push(_.map(options.targets, function(target) {",
          "588:                   target.sTopology = selectedTopology;",
          "589:                   target.sTopic = selectedTopic;",
          "590:                   target.sPartition = options.scopedVars.partition.value;",
          "591:                   target.sTopoMetric = target.metric.replace('*', target.sTopology).replace('*', target.sTopic)",
          "592:                       .replace('*', target.sPartition);",
          "593:                   return getStormData(target);",
          "594:                 }));",
          "595:               }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "800:           var cores = [];",
          "802:           if (interpolated === \"infra_solr_core\") {",
          "822:                       });",
          "823:           }",
          "825:           var collections = [];",
          "827:           if (interpolated === \"infra_solr_collection\") {",
          "846:                       });",
          "847:           }",
          "849:           var topologies = {};",
          "",
          "[Removed Lines]",
          "803:               return this.initMetricAppidMapping()",
          "804:                   .then(function () {",
          "805:                       var solrMetrics = allMetrics[\"ambari-infra-solr\"];",
          "806:                       var extractCores = solrMetrics.filter(/./.test.bind(new",
          "807:                       RegExp(\"^infra.solr.core.\", 'g')));",
          "808:                       _.map(extractCores, function (core) {",
          "811:                           core = core.split('.');",
          "812:                           var coreName = core.slice(3,6).join(\".\");",
          "813:                           if (cores.indexOf(coreName) < 0) {",
          "814:                               cores.push(coreName);",
          "815:                           }",
          "816:                       });",
          "817:                       return _.map(cores, function (cores) {",
          "818:                               return {",
          "819:                                   text: cores",
          "820:                               };",
          "821:                           });",
          "828:               return this.initMetricAppidMapping()",
          "829:                   .then(function () {",
          "830:                       var solrMetrics = allMetrics[\"ambari-infra-solr\"];",
          "831:                       var extractCollections = solrMetrics.filter(/./.test.bind(new",
          "832:                       RegExp(\"^infra.solr.core.\", 'g')));",
          "833:                       _.map(extractCollections, function (core) {",
          "835:                           core = core.split('.');",
          "836:                           var collection = core[3];",
          "837:                           if (collections.indexOf(collection) < 0) {",
          "838:                               collections.push(collection);",
          "839:                           }",
          "840:                       });",
          "841:                       return _.map(collections, function (collections) {",
          "842:                               return {",
          "843:                                   text: collections",
          "844:                               };",
          "845:                           });",
          "",
          "[Added Lines]",
          "802:             return this.initMetricAppidMapping()",
          "803:               .then(function () {",
          "804:                 var solrMetrics = [];",
          "805:                 if (allMetrics[\"ambari-infra-solr\"]) {",
          "806:                   var solrMetrics = allMetrics[\"ambari-infra-solr\"];",
          "807:                 }",
          "808:                 var extractCores = solrMetrics.filter(/./.test.bind(new",
          "809:                 RegExp(\"^infra.solr.core.\", 'g')));",
          "810:                 _.map(extractCores, function (core) {",
          "813:                   core = core.split('.');",
          "814:                   var coreName = core.slice(3,6).join(\".\");",
          "815:                   if (cores.indexOf(coreName) < 0) {",
          "816:                     cores.push(coreName);",
          "817:                   }",
          "818:                 });",
          "819:                 return _.map(cores, function (cores) {",
          "820:                         return {",
          "821:                           text: cores",
          "822:                         };",
          "824:               });",
          "830:             return this.initMetricAppidMapping()",
          "831:               .then(function () {",
          "832:                 var solrMetrics = [];",
          "833:                 if (allMetrics[\"ambari-infra-solr\"]) {",
          "834:                   var solrMetrics = allMetrics[\"ambari-infra-solr\"];",
          "835:                 }",
          "836:                 var extractCollections = solrMetrics.filter(/./.test.bind(new",
          "837:                 RegExp(\"^infra.solr.core.\", 'g')));",
          "838:                 _.map(extractCollections, function (core) {",
          "840:                   core = core.split('.');",
          "841:                   var collection = core[3];",
          "842:                   if (collections.indexOf(collection) < 0) {",
          "843:                     collections.push(collection);",
          "844:                   }",
          "845:                 });",
          "846:                 return _.map(collections, function (collections) {",
          "847:                         return {",
          "848:                           text: collections",
          "849:                         };",
          "851:               });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "851:           if(interpolated === \"topologies\") {",
          "852:             return this.initMetricAppidMapping()",
          "853:                 .then(function () {",
          "855:                   var extractTopologies = storm.filter(/./.test.bind(new",
          "856:                       RegExp(\"^topology.\", 'g')));",
          "857:                   _.map(extractTopologies, function(topology){",
          "",
          "[Removed Lines]",
          "854:                   var storm = allMetrics[\"nimbus\"];",
          "",
          "[Added Lines]",
          "859:                   var storm = [];",
          "860:                   if(allMetrics[\"nimbus\"]) {",
          "861:                     storm = allMetrics[\"nimbus\"];",
          "862:                   }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "875:             var componentName = interpolated.substring(0,interpolated.indexOf('.'));",
          "876:             return this.initMetricAppidMapping()",
          "877:                 .then(function () {",
          "879:                   var extractTopologies = storm.filter(/./.test.bind(new",
          "880:                       RegExp(\"^topology.\", 'g')));",
          "881:                   _.map(extractTopologies, function(topology){",
          "",
          "[Removed Lines]",
          "878:                   var storm = allMetrics[\"nimbus\"];",
          "",
          "[Added Lines]",
          "886:                   var storm = [];",
          "887:                   if(allMetrics[\"nimbus\"]) {",
          "888:                     storm = allMetrics[\"nimbus\"];",
          "889:                   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "902:           this.getStormEntities = function () {",
          "903:             return this.initMetricAppidMapping()",
          "904:                 .then(function () {",
          "906:                   var extractTopologies = storm.filter(/./.test.bind(new",
          "907:                       RegExp(\"partition\", 'g')));",
          "908:                   _.map(extractTopologies, function(topology){",
          "",
          "[Removed Lines]",
          "905:                   var storm = allMetrics[\"nimbus\"];",
          "",
          "[Added Lines]",
          "916:                   var storm = [];",
          "917:                   if(allMetrics[\"nimbus\"]) {",
          "918:                     storm = allMetrics[\"nimbus\"];",
          "919:                   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "974:           if(interpolated === \"druidServices\") {",
          "975:             return this.initMetricAppidMapping()",
          "976:               .then(function () {",
          "979:                 var extractNodeTypes = druidMetrics.filter(/./.test.bind(new RegExp(\"jvm/gc/time\", 'g')));",
          "980:                 var nodeTypes = _.map(extractNodeTypes, function(metricName) {",
          "",
          "[Removed Lines]",
          "977:                 var druidMetrics = allMetrics[\"druid\"];",
          "",
          "[Added Lines]",
          "991:                 var druidMetrics = [];",
          "992:                 if(allMetrics[\"druid\"]) {",
          "993:                   druidMetrics = allMetrics[\"druid\"];",
          "994:                 }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "994:           if(interpolated === \"druidDataSources\") {",
          "995:             return this.initMetricAppidMapping()",
          "996:               .then(function () {",
          "999:                 var extractDataSources = druidMetrics.filter(/./.test.bind(new RegExp(\"query/time\", 'g')));",
          "1000:                 var dataSources = _.map(extractDataSources, function(metricName) {",
          "",
          "[Removed Lines]",
          "997:                 var druidMetrics = allMetrics[\"druid\"];",
          "",
          "[Added Lines]",
          "1014:                 var druidMetrics = [];",
          "1015:                 if(allMetrics[\"druid\"]) {",
          "1016:                   druidMetrics = allMetrics[\"druid\"];",
          "1017:                 }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1014:           if(interpolated === \"druidQueryTypes\") {",
          "1015:             return this.initMetricAppidMapping()",
          "1016:               .then(function () {",
          "1019:                 var extractQueryTypes = druidMetrics.filter(/./.test.bind(new RegExp(\"query/time\", 'g')));",
          "1020:                 var queryTypes = _.map(extractQueryTypes, function(metricName) {",
          "",
          "[Removed Lines]",
          "1017:                 var druidMetrics = allMetrics[\"druid\"];",
          "",
          "[Added Lines]",
          "1037:                 var druidMetrics = [];",
          "1038:                 if(allMetrics[\"druid\"]) {",
          "1039:                   druidMetrics = allMetrics[\"druid\"];",
          "1040:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "322459ec6d0eba3eaa7db37b1836511e88906c67",
      "candidate_info": {
        "commit_hash": "322459ec6d0eba3eaa7db37b1836511e88906c67",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/322459ec6d0eba3eaa7db37b1836511e88906c67",
        "files": [
          "ambari-web/app/mixins/common/configs/config_recommendation_parser.js",
          "ambari-web/app/mixins/common/configs/enhanced_configs.js",
          "ambari-web/app/views/common/controls_view.js",
          "ambari-web/test/mixins/common/configs/config_recommendation_parser_test.js"
        ],
        "message": "[AMBARI-24523] Hive and Oozie JDBC url reset after set manually.",
        "before_after_code_files": [
          "ambari-web/app/mixins/common/configs/config_recommendation_parser.js||ambari-web/app/mixins/common/configs/config_recommendation_parser.js",
          "ambari-web/app/mixins/common/configs/enhanced_configs.js||ambari-web/app/mixins/common/configs/enhanced_configs.js",
          "ambari-web/app/views/common/controls_view.js||ambari-web/app/views/common/controls_view.js",
          "ambari-web/test/mixins/common/configs/config_recommendation_parser_test.js||ambari-web/test/mixins/common/configs/config_recommendation_parser_test.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/mixins/common/configs/config_recommendation_parser.js||ambari-web/app/mixins/common/configs/config_recommendation_parser.js": [
          "File: ambari-web/app/mixins/common/configs/config_recommendation_parser.js -> ambari-web/app/mixins/common/configs/config_recommendation_parser.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:         fileName = Em.get(config, 'filename'),",
          "159:         group = Em.get(config, 'group.name'),",
          "160:         value = Em.get(config, 'value'),",
          "162:     Em.set(config, 'recommendedValue', recommendedValue);",
          "163:     if (this.allowUpdateProperty(parentProperties, name, fileName, group, value)) {",
          "164:       var allowConfigUpdate = true;",
          "",
          "[Removed Lines]",
          "161:         prevRecommeneded = Em.get(config, 'recommendedValue');",
          "",
          "[Added Lines]",
          "161:         isUserOverriden = Em.get(config, 'didUserOverrideValue');;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:         }",
          "171:       }",
          "174:         allowConfigUpdate = false;",
          "175:       }",
          "",
          "[Removed Lines]",
          "173:       if (prevRecommeneded !== value && name !== \"capacity-scheduler\") {",
          "",
          "[Added Lines]",
          "173:       if (isUserOverriden && name !== \"capacity-scheduler\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:       if (!Em.isNone(recommendedValue) && !Em.get(config, 'hiddenBySection')) {",
          "185:         Em.set(config, 'isVisible', true);",
          "186:       }",
          "188:     }",
          "189:     if (this.updateInitialOnRecommendations(Em.get(config, 'serviceName'))) {",
          "190:       Em.set(config, 'initialValue', recommendedValue);",
          "",
          "[Removed Lines]",
          "187:       this.applyRecommendation(name, fileName, group, recommendedValue, this._getInitialValue(config), parentProperties, Em.get(config, 'isEditable'));",
          "",
          "[Added Lines]",
          "187:       let recommendationExists = this.getRecommendation(name, fileName, group);",
          "188:       if (recommendationExists && isUserOverriden) {",
          "189:         this.removeRecommendation(name, fileName, group);",
          "190:       } else if (!isUserOverriden) {",
          "191:         this.applyRecommendation(name, fileName, group, recommendedValue, this._getInitialValue(config), parentProperties, Em.get(config, 'isEditable'));",
          "192:       }",
          "",
          "---------------"
        ],
        "ambari-web/app/mixins/common/configs/enhanced_configs.js||ambari-web/app/mixins/common/configs/enhanced_configs.js": [
          "File: ambari-web/app/mixins/common/configs/enhanced_configs.js -> ambari-web/app/mixins/common/configs/enhanced_configs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "628:   },",
          "636:   removeCurrentFromDependentList: function (config, saveRecommended) {",
          "639:   },",
          "641:   updateAttributesFromTheme: function (serviceName) {",
          "",
          "[Removed Lines]",
          "637:     var recommendation = this.getRecommendation(config.get('name'), config.get('filename'), config.get('group.name'));",
          "638:     if (recommendation) this.saveRecommendation(recommendation, saveRecommended);",
          "",
          "[Added Lines]",
          "637:     let name = config.get('name'),",
          "638:       fileName = config.get('filename'),",
          "639:       group = config.get('group.name');",
          "640:     var recommendation = this.getRecommendation(name, fileName, group);",
          "641:     if (recommendation) {",
          "642:       if (config.get('didUserOverrideValue')) {",
          "643:         this.removeRecommendation(name, fileName, group);",
          "644:       } else {",
          "645:         this.saveRecommendation(recommendation, saveRecommended);",
          "646:       }",
          "647:     }",
          "",
          "---------------"
        ],
        "ambari-web/app/views/common/controls_view.js||ambari-web/app/views/common/controls_view.js": [
          "File: ambari-web/app/views/common/controls_view.js -> ambari-web/app/views/common/controls_view.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     if (this.get('selected') || this.get('serviceConfig.changedViaUndoValue')) {",
          "171:       var self = this, config = this.get('serviceConfig'),",
          "172:         controller = this.get('controller');",
          "173:       delay(function(){",
          "174:         self.sendRequestRorDependentConfigs(config, controller);",
          "175:       }, 500);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:       Em.set(config, 'didUserOverrideValue', true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "186:     if (this.get('selected')) {",
          "187:       var self = this, config = this.get('config'),",
          "188:         controller = this.get('controller');",
          "189:       delay(function(){",
          "190:         self.sendRequestRorDependentConfigs(config, controller);",
          "191:       }, 500);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:       Em.set(config, 'didUserOverrideValue', true);",
          "",
          "---------------"
        ],
        "ambari-web/test/mixins/common/configs/config_recommendation_parser_test.js||ambari-web/test/mixins/common/configs/config_recommendation_parser_test.js": [
          "File: ambari-web/test/mixins/common/configs/config_recommendation_parser_test.js -> ambari-web/test/mixins/common/configs/config_recommendation_parser_test.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:       describe('update recommendation', function() {",
          "230:         beforeEach(function() {",
          "231:           sinon.spy(instanceObject, 'applyRecommendation');",
          "232:           sinon.stub(instanceObject, 'allowUpdateProperty').returns(c.allowUpdateProperty);",
          "233:           sinon.stub(instanceObject, 'updateInitialOnRecommendations').returns(c.updateInitialOnRecommendations);",
          "234:         });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:           sinon.stub(instanceObject, 'getRecommendation').returns(false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "236:           instanceObject.allowUpdateProperty.restore();",
          "237:           instanceObject.updateInitialOnRecommendations.restore();",
          "238:           instanceObject.applyRecommendation.restore();",
          "239:         });",
          "241:         it(c.m, function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:           instanceObject.getRecommendation.restore();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a87b38aa5dbfb9e45d12de49e6882ed2e12709e",
      "candidate_info": {
        "commit_hash": "4a87b38aa5dbfb9e45d12de49e6882ed2e12709e",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/4a87b38aa5dbfb9e45d12de49e6882ed2e12709e",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java"
        ],
        "message": "AMBARI-24254. ADDENDUM: flag infra-solr instances to restart after upgrade (#1736)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1111:         hostComponentDesiredStateDAO.remove(hostComponentDesiredStateEntity);",
          "1112:         entityManager.detach(hostComponentDesiredStateEntity);",
          "1113:         hostComponentDesiredStateEntity.setServiceName(AMBARI_INFRA_NEW_NAME);",
          "1114:       }",
          "1116:       clusterServiceEntity.getServiceComponentDesiredStateEntities().clear();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1114:         if (\"INFRA_SOLR\".equals(hostComponentDesiredStateEntity.getComponentName())) {",
          "1115:           hostComponentDesiredStateEntity.setRestartRequired(true);",
          "1116:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}