{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8e08a25c592cce345aaa8b9df914bfb32d02ade1",
      "candidate_info": {
        "commit_hash": "8e08a25c592cce345aaa8b9df914bfb32d02ade1",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8e08a25c592cce345aaa8b9df914bfb32d02ade1",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java",
          "ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/AmbariContextTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java"
        ],
        "message": "AMBARI-24549. Move blueprint provisioning state property to host component level. (#2240)\n\n* AMBARI-24549. Move blueprint provisioning state property to host component level. (mpapirkovskyy)\n\n* AMBARI-24549. Move blueprint provisioning state property to host component level. (mpapirkovskyy)\n\n* AMBARI-24549. Move blueprint provisioning state property to host component level. (mpapirkovskyy)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py||ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java",
          "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java||ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java",
          "ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java||ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java",
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java",
          "ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql",
          "ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostResourceProviderTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/topology/AmbariContextTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/AmbariContextTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/RecoveryManager.py||ambari-agent/src/main/python/ambari_agent/RecoveryManager.py": [
          "File: ambari-agent/src/main/python/ambari_agent/RecoveryManager.py -> ambari-agent/src/main/python/ambari_agent/RecoveryManager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     self.active_command_count = 0",
          "99:     self.cluster_id = None",
          "100:     self.initializer_module = initializer_module",
          "103:     self.actions = {}",
          "104:     self.update_config(6, 60, 5, 12, recovery_enabled, auto_start_only, auto_install_start)",
          "",
          "[Removed Lines]",
          "101:     self.metadata_cache = initializer_module.metadata_cache",
          "",
          "[Added Lines]",
          "101:     self.host_level_params_cache = initializer_module.host_level_params_cache",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     with self.__active_command_lock:",
          "112:       self.active_command_count -= 1",
          "115:     try:",
          "117:     except KeyError:",
          "118:       blueprint_state = 'NONE'",
          "",
          "[Removed Lines]",
          "114:   def is_blueprint_provisioning(self):",
          "116:       blueprint_state = self.metadata_cache[self.cluster_id]['clusterLevelParams']['blueprint_provisioning_state']",
          "",
          "[Added Lines]",
          "114:   def is_blueprint_provisioning_for_component(self, component_name):",
          "116:       blueprint_state = self.host_level_params_cache[self.cluster_id]['blueprint_provisioning_state'][component_name]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "650:       logger.info(\"Recovery is paused, tasks waiting in pipeline for this host.\")",
          "651:       return None",
          "654:       logger.info(\"Recovery is paused, blueprint is being provisioned.\")",
          "655:       return None",
          "",
          "[Removed Lines]",
          "653:     if self.is_blueprint_provisioning():",
          "",
          "[Added Lines]",
          "653:     if self.is_blueprint_provisioning_for_component(component):",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.apache.ambari.server.events.MaintenanceModeEvent;",
          "35: import org.apache.ambari.server.events.ServiceComponentRecoveryChangedEvent;",
          "36: import org.apache.ambari.server.events.publishers.AmbariEventPublisher;",
          "37: import org.apache.ambari.server.state.Cluster;",
          "38: import org.apache.ambari.server.state.Clusters;",
          "39: import org.apache.ambari.server.state.Host;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:       }",
          "77:       HostLevelParamsCluster hostLevelParamsCluster = new HostLevelParamsCluster(",
          "78:           m_ambariManagementController.get().retrieveHostRepositories(cl, host),",
          "81:       hostLevelParamsClusters.put(Long.toString(cl.getClusterId()),",
          "82:           hostLevelParamsCluster);",
          "",
          "[Removed Lines]",
          "79:           recoveryConfigHelper.getRecoveryConfig(cl.getClusterName(), host.getHostName()));",
          "",
          "[Added Lines]",
          "80:           recoveryConfigHelper.getRecoveryConfig(cl.getClusterName(), host.getHostName()),",
          "81:           m_ambariManagementController.get().getBlueprintProvisioningStates(cl.getClusterId(), host.getHostId()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:     return hostLevelParamsUpdateEvent;",
          "86:   }",
          "88:   @Override",
          "89:   protected HostLevelParamsUpdateEvent handleUpdate(HostLevelParamsUpdateEvent current, HostLevelParamsUpdateEvent update) {",
          "90:     HostLevelParamsUpdateEvent result = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:   public void updateAllHosts() throws AmbariException {",
          "91:     for (Host host : clusters.getHosts()) {",
          "92:       updateData(getCurrentData(host.getHostId()));",
          "93:     }",
          "94:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:           HostLevelParamsCluster currentCluster = current.getHostLevelParamsClusters().get(clusterId);",
          "108:           RecoveryConfig mergedRecoveryConfig;",
          "109:           SortedMap<Long, CommandRepository> mergedRepositories;",
          "110:           SortedMap<String, Long> mergedComponentRepos;",
          "111:           if (!currentCluster.getRecoveryConfig().equals(updatedCluster.getRecoveryConfig())) {",
          "112:             mergedRecoveryConfig = updatedCluster.getRecoveryConfig();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:           Map<String, BlueprintProvisioningState> mergedBlueprintProvisioningStates;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:           } else {",
          "122:             mergedRepositories = currentCluster.getHostRepositories().getRepositories();",
          "123:           }",
          "124:           if (!currentCluster.getHostRepositories().getComponentRepos()",
          "125:               .equals(updatedCluster.getHostRepositories().getComponentRepos())) {",
          "126:             mergedComponentRepos = updatedCluster.getHostRepositories().getComponentRepos();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:           if (!currentCluster.getBlueprintProvisioningState()",
          "134:               .equals(updatedCluster.getBlueprintProvisioningState())) {",
          "135:             mergedBlueprintProvisioningStates = updatedCluster.getBlueprintProvisioningState();",
          "136:             clusterChanged = true;",
          "137:           } else {",
          "138:             mergedBlueprintProvisioningStates = currentCluster.getBlueprintProvisioningState();",
          "139:           }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "131:           if (clusterChanged) {",
          "132:             HostLevelParamsCluster mergedCluster = new HostLevelParamsCluster(",
          "133:                 new HostRepositories(mergedRepositories, mergedComponentRepos),",
          "135:             mergedClusters.put(clusterId, mergedCluster);",
          "136:             changed = true;",
          "137:           } else {",
          "",
          "[Removed Lines]",
          "134:                 mergedRecoveryConfig);",
          "",
          "[Added Lines]",
          "150:                 mergedRecoveryConfig,",
          "151:                 mergedBlueprintProvisioningStates);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "176:         Long.toString(clusterId),",
          "177:             new HostLevelParamsCluster(",
          "178:                     m_ambariManagementController.get().retrieveHostRepositories(cluster, host),",
          "180:     updateData(hostLevelParamsUpdateEvent);",
          "181:   }",
          "",
          "[Removed Lines]",
          "179:                     recoveryConfigHelper.getRecoveryConfig(cluster.getClusterName(), host.getHostName())));",
          "",
          "[Added Lines]",
          "196:                     recoveryConfigHelper.getRecoveryConfig(cluster.getClusterName(), host.getHostName()),",
          "197:                     m_ambariManagementController.get().getBlueprintProvisioningStates(clusterId, host.getHostId())));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java||ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java -> ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.agent.stomp.dto;",
          "21: import org.apache.ambari.server.agent.RecoveryConfig;",
          "23: import com.fasterxml.jackson.annotation.JsonInclude;",
          "24: import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.util.Map;",
          "24: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   @JsonProperty(\"recoveryConfig\")",
          "33:   private RecoveryConfig recoveryConfig;",
          "36:     this.hostRepositories = hostRepositories;",
          "37:     this.recoveryConfig = recoveryConfig;",
          "38:   }",
          "40:   public HostRepositories getHostRepositories() {",
          "",
          "[Removed Lines]",
          "35:   public HostLevelParamsCluster(HostRepositories hostRepositories, RecoveryConfig recoveryConfig) {",
          "",
          "[Added Lines]",
          "38:   @JsonProperty(\"blueprint_provisioning_state\")",
          "39:   private Map<String, BlueprintProvisioningState> blueprintProvisioningState;",
          "41:   public HostLevelParamsCluster(HostRepositories hostRepositories, RecoveryConfig recoveryConfig,",
          "42:                                 Map<String, BlueprintProvisioningState> blueprintProvisioningState) {",
          "45:     this.blueprintProvisioningState = blueprintProvisioningState;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:   public RecoveryConfig getRecoveryConfig() {",
          "45:     return recoveryConfig;",
          "46:   }",
          "47: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56:   public Map<String, BlueprintProvisioningState> getBlueprintProvisioningState() {",
          "57:     return blueprintProvisioningState;",
          "58:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: import org.apache.ambari.server.security.ldap.LdapBatchDto;",
          "49: import org.apache.ambari.server.security.ldap.LdapSyncDto;",
          "50: import org.apache.ambari.server.stageplanner.RoleGraphFactory;",
          "51: import org.apache.ambari.server.state.Cluster;",
          "52: import org.apache.ambari.server.state.Clusters;",
          "53: import org.apache.ambari.server.state.Config;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   void createHostComponents(",
          "105:       Set<ServiceComponentHostRequest> requests) throws AmbariException, AuthorizationException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:   void createHostComponents(",
          "118:       Set<ServiceComponentHostRequest> requests, boolean isBlueprintProvisioned) throws AmbariException, AuthorizationException;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "938:   TopologyUpdateEvent getAddedComponentsTopologyEvent(Set<ServiceComponentHostRequest> requests)",
          "939:       throws AmbariException;",
          "940: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "954:   Map<String, BlueprintProvisioningState> getBlueprintProvisioningStates(Long clusterId, Long hostId) throws AmbariException;",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java||ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_PASSWORD;",
          "25: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_URL;",
          "26: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_USERNAME;",
          "28: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.CLIENTS_TO_UPDATE_CONFIGS;",
          "29: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.CLUSTER_NAME;",
          "30: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.COMMAND_RETRY_ENABLED;",
          "",
          "[Removed Lines]",
          "27: import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.BLUEPRINT_PROVISIONING_STATE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146: import org.apache.ambari.server.orm.dao.ClusterDAO;",
          "147: import org.apache.ambari.server.orm.dao.ExtensionDAO;",
          "148: import org.apache.ambari.server.orm.dao.ExtensionLinkDAO;",
          "149: import org.apache.ambari.server.orm.dao.RepositoryVersionDAO;",
          "150: import org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO;",
          "151: import org.apache.ambari.server.orm.dao.SettingDAO;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: import org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154: import org.apache.ambari.server.orm.dao.WidgetLayoutDAO;",
          "155: import org.apache.ambari.server.orm.entities.ClusterEntity;",
          "156: import org.apache.ambari.server.orm.entities.ExtensionLinkEntity;",
          "157: import org.apache.ambari.server.orm.entities.HostEntity;",
          "158: import org.apache.ambari.server.orm.entities.RepoDefinitionEntity;",
          "159: import org.apache.ambari.server.orm.entities.RepoOsEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: import org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntity;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183: import org.apache.ambari.server.stack.RepoUtil;",
          "184: import org.apache.ambari.server.stageplanner.RoleGraph;",
          "185: import org.apache.ambari.server.stageplanner.RoleGraphFactory;",
          "186: import org.apache.ambari.server.state.Cluster;",
          "187: import org.apache.ambari.server.state.Clusters;",
          "188: import org.apache.ambari.server.state.CommandScriptDefinition;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "374:   @Inject",
          "375:   private RepositoryVersionHelper repoVersionHelper;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379:   @Inject",
          "380:   private HostComponentDesiredStateDAO hostComponentDesiredStateDAO;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "549:   public synchronized void createHostComponents(Set<ServiceComponentHostRequest> requests)",
          "550:       throws AmbariException, AuthorizationException {",
          "552:     if (requests.isEmpty()) {",
          "553:       LOG.warn(\"Received an empty requests set\");",
          "554:       return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557:     createHostComponents(requests, false);",
          "558:   }",
          "560:   @Override",
          "561:   public synchronized void createHostComponents(Set<ServiceComponentHostRequest> requests, boolean isBlueprintProvisioned)",
          "562:       throws AmbariException, AuthorizationException {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "702:     setMonitoringServicesRestartRequired(requests);",
          "705:     m_topologyHolder.get().updateData(getAddedComponentsTopologyEvent(requests));",
          "706:   }",
          "709:     throws AmbariException {",
          "710:     Multimap<Cluster, ServiceComponentHost> schMap = ArrayListMultimap.create();",
          "711:     Map<Long, Map<String, List<String>>> serviceComponentNames = new HashMap<>();",
          "",
          "[Removed Lines]",
          "704:     persistServiceComponentHosts(requests);",
          "708:   void persistServiceComponentHosts(Set<ServiceComponentHostRequest> requests)",
          "",
          "[Added Lines]",
          "716:     persistServiceComponentHosts(requests, isBlueprintProvisioned);",
          "720:   void persistServiceComponentHosts(Set<ServiceComponentHostRequest> requests, boolean isBlueprintProvisioned)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "742:         State state = State.valueOf(request.getDesiredState());",
          "743:         sch.setDesiredState(state);",
          "744:       }",
          "746:       schMap.put(cluster, sch);",
          "747:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "757:       if (isBlueprintProvisioned && !sch.isClientComponent()) {",
          "758:         HostComponentDesiredStateEntity desiredStateEntity = sch.getDesiredStateEntity();",
          "759:         desiredStateEntity.setBlueprintProvisioningState(BlueprintProvisioningState.IN_PROGRESS);",
          "760:         hostComponentDesiredStateDAO.merge(desiredStateEntity);",
          "761:       }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5676:     return statusCommandParams;",
          "5677:   }",
          "5680:   public TreeMap<String, String> getTopologyCommandParams(Long clusterId, String serviceName, String componentName, ServiceComponentHost sch) throws AmbariException {",
          "5681:     TreeMap<String, String> commandParams = new TreeMap<>();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5696:   @Override",
          "5697:   public Map<String, BlueprintProvisioningState> getBlueprintProvisioningStates(Long clusterId, Long hostId)",
          "5698:       throws AmbariException {",
          "5699:     Map<String, BlueprintProvisioningState> blueprintProvisioningStates = new HashMap<>();",
          "5700:     Host host = clusters.getHostById(hostId);",
          "5701:     Cluster cl = clusters.getCluster(clusterId);",
          "5702:     for (ServiceComponentHost sch : cl.getServiceComponentHosts(host.getHostName())) {",
          "5703:       if (!sch.isClientComponent()) {",
          "5704:         blueprintProvisioningStates.put(sch.getServiceComponentName(),",
          "5705:             sch.getDesiredStateEntity().getBlueprintProvisioningState());",
          "5706:       }",
          "5707:     }",
          "5708:     return blueprintProvisioningStates;",
          "5709:   }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5744:     clusterLevelParams.putAll(getMetadataClusterLevelConfigsParams(cluster, stackId));",
          "5745:     clusterLevelParams.put(CLUSTER_NAME, cluster.getClusterName());",
          "5746:     clusterLevelParams.put(HOOKS_FOLDER, configs.getProperty(Configuration.HOOKS_FOLDER));",
          "5749:     return clusterLevelParams;",
          "5750:   }",
          "",
          "[Removed Lines]",
          "5747:     clusterLevelParams.put(BLUEPRINT_PROVISIONING_STATE, cluster.getBlueprintProvisioningState().toString());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java||ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java -> ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:             new HostLevelParamsCluster(",
          "571:             getManagementController().retrieveHostRepositories(cl, addedHost),",
          "572:             recoveryConfigHelper.getRecoveryConfig(cl.getClusterName(),",
          "574:         ));",
          "575:         hostLevelParamsUpdateEvents.add(hostLevelParamsUpdateEvent);",
          "576:       }",
          "",
          "[Removed Lines]",
          "573:                 addedHost.getHostName())",
          "",
          "[Added Lines]",
          "573:                 addedHost.getHostName()),",
          "574:             getManagementController().getBlueprintProvisioningStates(cl.getClusterId(), addedHost.getHostId())",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: import javax.persistence.Table;",
          "43: import javax.persistence.TableGenerator;",
          "46: import org.apache.ambari.server.state.SecurityType;",
          "47: import org.apache.ambari.server.state.State;",
          "",
          "[Removed Lines]",
          "45: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   @Column(name = \"cluster_info\", insertable = true, updatable = true)",
          "97:   private String clusterInfo = \"\";",
          "",
          "[Removed Lines]",
          "99:   @Basic",
          "100:   @Enumerated(value = EnumType.STRING)",
          "101:   @Column(name = \"blueprint_provisioning_state\", insertable = true, updatable = true)",
          "102:   private BlueprintProvisioningState blueprintProvisioningState = BlueprintProvisioningState.NONE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353:   public void setUpgradeEntity(UpgradeEntity upgradeEntity) {",
          "354:     this.upgradeEntity = upgradeEntity;",
          "355:   }",
          "364: }",
          "",
          "[Removed Lines]",
          "357:   public BlueprintProvisioningState getBlueprintProvisioningState() {",
          "358:     return blueprintProvisioningState;",
          "359:   }",
          "361:   public void setBlueprintProvisioningState(BlueprintProvisioningState blueprintProvisioningState) {",
          "362:     this.blueprintProvisioningState = blueprintProvisioningState;",
          "363:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java||ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java -> ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import javax.persistence.TableGenerator;",
          "37: import javax.persistence.UniqueConstraint;",
          "39: import org.apache.ambari.server.state.HostComponentAdminState;",
          "40: import org.apache.ambari.server.state.MaintenanceState;",
          "41: import org.apache.ambari.server.state.State;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:   @Column(name = \"restart_required\", insertable = true, updatable = true, nullable = false)",
          "123:   private Integer restartRequired = 0;",
          "125:   public Long getId() { return id; }",
          "127:   public Long getClusterId() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:   @Basic",
          "127:   @Enumerated(value = EnumType.STRING)",
          "128:   @Column(name = \"blueprint_provisioning_state\", insertable = true, updatable = true)",
          "129:   private BlueprintProvisioningState blueprintProvisioningState = BlueprintProvisioningState.NONE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "180:     this.hostId = hostId;",
          "181:   }",
          "183:   @Override",
          "184:   public boolean equals(Object o) {",
          "185:     if (this == o) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189:   public BlueprintProvisioningState getBlueprintProvisioningState() {",
          "190:     return blueprintProvisioningState;",
          "191:   }",
          "193:   public void setBlueprintProvisioningState(BlueprintProvisioningState blueprintProvisioningState) {",
          "194:     this.blueprintProvisioningState = blueprintProvisioningState;",
          "195:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "215:       return false;",
          "216:     }",
          "218:     return true;",
          "219:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:     if (!Objects.equal(blueprintProvisioningState, that.blueprintProvisioningState)) {",
          "233:       return false;",
          "234:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java||ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java -> ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:   void setProvisioningState(State provisioningState);",
          "",
          "[Removed Lines]",
          "248:   BlueprintProvisioningState getBlueprintProvisioningState();",
          "250:   void setBlueprintProvisioningState(BlueprintProvisioningState blueprintProvisioningState);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: import org.apache.ambari.server.ServiceComponentNotFoundException;",
          "57: import org.apache.ambari.server.ServiceNotFoundException;",
          "58: import org.apache.ambari.server.agent.ExecutionCommand.KeyNames;",
          "60: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "61: import org.apache.ambari.server.controller.AmbariManagementController;",
          "62: import org.apache.ambari.server.controller.AmbariSessionManager;",
          "",
          "[Removed Lines]",
          "59: import org.apache.ambari.server.agent.stomp.MetadataHolder;",
          "",
          "[Added Lines]",
          "59: import org.apache.ambari.server.agent.stomp.HostLevelParamsHolder;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70: import org.apache.ambari.server.events.AmbariEvent.AmbariEventType;",
          "71: import org.apache.ambari.server.events.ClusterConfigChangedEvent;",
          "72: import org.apache.ambari.server.events.ClusterEvent;",
          "74: import org.apache.ambari.server.events.ClusterProvisionedEvent;",
          "75: import org.apache.ambari.server.events.ConfigsUpdateEvent;",
          "76: import org.apache.ambari.server.events.jpa.EntityManagerCacheInvalidationEvent;",
          "",
          "[Removed Lines]",
          "73: import org.apache.ambari.server.events.ClusterProvisionStartedEvent;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "284:   private STOMPComponentsDeleteHandler STOMPComponentsDeleteHandler;",
          "286:   @Inject",
          "",
          "[Removed Lines]",
          "287:   private MetadataHolder metadataHolder;",
          "",
          "[Added Lines]",
          "286:   private HostLevelParamsHolder hostLevelParamsHolder;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "972:     clusterEntity = clusterDAO.merge(clusterEntity);",
          "973:   }",
          "986:   }",
          "988:   @Override",
          "",
          "[Removed Lines]",
          "975:   @Override",
          "976:   public BlueprintProvisioningState getBlueprintProvisioningState() {",
          "977:     ClusterEntity clusterEntity = getClusterEntity();",
          "978:     return clusterEntity.getBlueprintProvisioningState();",
          "979:   }",
          "981:   @Override",
          "982:   public void setBlueprintProvisioningState(BlueprintProvisioningState blueprintProvisioningState) {",
          "983:     ClusterEntity clusterEntity = getClusterEntity();",
          "984:     clusterEntity.setBlueprintProvisioningState(blueprintProvisioningState);",
          "985:     clusterEntity = clusterDAO.merge(clusterEntity);",
          "",
          "[Added Lines]",
          "974:   private boolean setBlueprintProvisioningState(BlueprintProvisioningState blueprintProvisioningState) {",
          "975:     boolean updated = false;",
          "976:     for (Service s : getServices().values()) {",
          "977:       for (ServiceComponent sc : s.getServiceComponents().values()) {",
          "978:         if (!sc.isClientComponent()) {",
          "979:           for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {",
          "980:             HostComponentDesiredStateEntity desiredStateEntity = sch.getDesiredStateEntity();",
          "981:             if (desiredStateEntity.getBlueprintProvisioningState() != blueprintProvisioningState) {",
          "982:               desiredStateEntity.setBlueprintProvisioningState(blueprintProvisioningState);",
          "983:               hostComponentDesiredStateDAO.merge(desiredStateEntity);",
          "984:               updated = true;",
          "985:             }",
          "986:           }",
          "987:         }",
          "988:       }",
          "989:     }",
          "990:     return updated;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2814:     }",
          "2815:   }",
          "2824:   private void changeBlueprintProvisioningState(BlueprintProvisioningState newState) {",
          "2830:     }",
          "2831:   }",
          "",
          "[Removed Lines]",
          "2817:   @Subscribe",
          "2818:   public void onClusterProvisionStarted(ClusterProvisionStartedEvent event) {",
          "2819:     if (event.getClusterId() == getClusterId()) {",
          "2820:       changeBlueprintProvisioningState(BlueprintProvisioningState.IN_PROGRESS);",
          "2821:     }",
          "2822:   }",
          "2825:     setBlueprintProvisioningState(newState);",
          "2826:     try {",
          "2827:       metadataHolder.updateData(controller.getClusterMetadataOnConfigsUpdate(this));",
          "2828:     } catch (AmbariException e) {",
          "2829:       LOG.error(\"Metadata update failed after setting blueprint provision state to {}\", newState, e);",
          "",
          "[Added Lines]",
          "2823:     boolean updated = setBlueprintProvisioningState(newState);",
          "2824:     if (updated) {",
          "2825:       try {",
          "2827:         hostLevelParamsHolder.updateAllHosts();",
          "2828:       } catch (AmbariException e) {",
          "2829:         LOG.error(\"Topology update failed after setting blueprint provision state to {}\", newState, e);",
          "2830:       }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java||ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java -> ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.ambari.server.AmbariException;",
          "33: import org.apache.ambari.server.agent.AlertDefinitionCommand;",
          "34: import org.apache.ambari.server.agent.stomp.TopologyHolder;",
          "35: import org.apache.ambari.server.api.services.AmbariMetaInfo;",
          "36: import org.apache.ambari.server.controller.AmbariManagementController;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.apache.ambari.server.agent.stomp.HostLevelParamsHolder;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61: import org.apache.ambari.server.orm.entities.RepositoryVersionEntity;",
          "62: import org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity;",
          "63: import org.apache.ambari.server.orm.entities.StackEntity;",
          "64: import org.apache.ambari.server.state.Cluster;",
          "65: import org.apache.ambari.server.state.Clusters;",
          "66: import org.apache.ambari.server.state.ComponentInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:   @Inject",
          "141:   private Provider<TopologyHolder> m_topologyHolder;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:   @Inject",
          "146:   private Provider<HostLevelParamsHolder> m_hostLevelParamsHolder;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1043:           STOMPUpdatePublisher.publish(new HostComponentsUpdateEvent(Collections.singletonList(",
          "1044:               HostComponentUpdate.createHostComponentStatusUpdate(stateEntity, oldState))));",
          "1045:         }",
          "1047:       } catch (InvalidStateTransitionException e) {",
          "1048:         LOG.error(\"Can't handle ServiceComponentHostEvent event at\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1051:         if (event.getType().equals(ServiceComponentHostEventType.HOST_SVCCOMP_START)) {",
          "1052:           HostComponentDesiredStateEntity desiredStateEntity = getDesiredStateEntity();",
          "1053:           if (desiredStateEntity.getBlueprintProvisioningState() == BlueprintProvisioningState.IN_PROGRESS) {",
          "1054:             desiredStateEntity.setBlueprintProvisioningState(BlueprintProvisioningState.FINISHED);",
          "1055:             hostComponentDesiredStateDAO.merge(desiredStateEntity);",
          "1056:             m_hostLevelParamsHolder.get().updateData(m_hostLevelParamsHolder.get().getCurrentData(getHost().getHostId()));",
          "1057:           }",
          "1058:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1053:             + \", eventType=\" + event.getType()",
          "1054:             + \", event=\" + event);",
          "1055:         throw e;",
          "1056:       }",
          "1057:     } finally {",
          "1058:       writeLock.unlock();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1069:       } catch (AmbariException e) {",
          "1070:         LOG.error(\"Can't update topology on hosts on ServiceComponentHostEvent event: \"",
          "1071:             + \"serviceComponentName=\" + getServiceComponentName()",
          "1072:             + \", hostName=\" + getHostName()",
          "1073:             + \", currentState=\" + oldState",
          "1074:             + \", eventType=\" + event.getType()",
          "1075:             + \", event=\" + event);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java||ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java -> ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import org.apache.ambari.server.actionmanager.HostRoleCommand;",
          "44: import org.apache.ambari.server.actionmanager.HostRoleCommandFactory;",
          "45: import org.apache.ambari.server.actionmanager.HostRoleStatus;",
          "46: import org.apache.ambari.server.controller.AmbariManagementController;",
          "47: import org.apache.ambari.server.controller.AmbariServer;",
          "48: import org.apache.ambari.server.controller.ClusterRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.apache.ambari.server.agent.stomp.HostLevelParamsHolder;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:   @Inject",
          "125:   private Provider<ConfigHelper> configHelper;",
          "127:   private static AmbariManagementController controller;",
          "128:   private static ClusterController clusterController;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:   @Inject",
          "129:   HostLevelParamsHolder hostLevelParamsHolder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "415:       RetryHelper.executeWithRetry(new Callable<Object>() {",
          "416:         @Override",
          "417:         public Object call() throws Exception {",
          "419:           return null;",
          "420:         }",
          "421:       });",
          "422:     } catch (AmbariException e) {",
          "423:       LOG.error(\"Unable to create host component resource for host {}\", hostName, e);",
          "424:       throw new RuntimeException(String.format(\"Unable to create host component resource for host '%s': %s\",",
          "",
          "[Removed Lines]",
          "418:           getController().createHostComponents(requests);",
          "",
          "[Added Lines]",
          "422:           getController().createHostComponents(requests, true);",
          "426:       hostLevelParamsHolder.updateData(hostLevelParamsHolder.getCurrentData(host.getHostId()));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog272.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import java.util.Collections;",
          "29: import org.apache.ambari.server.AmbariException;",
          "30: import org.slf4j.Logger;",
          "31: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import org.apache.ambari.server.orm.DBAccessor;",
          "31: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   static final String RENAME_COLLISION_BEHAVIOR_PROPERTY_SQL = String.format(\"UPDATE %s SET %s = '%s' WHERE %s = '%s' AND %s = '%s'\", AMBARI_CONFIGURATION_TABLE,",
          "46:       AMBARI_CONFIGURATION_PROPERTY_NAME_COLUMN, LDAP_CONFIGURATION_CORRECT_COLLISION_BEHAVIOR_PROPERTY_NAME, AMBARI_CONFIGURATION_CATEGORY_NAME_COLUMN,",
          "47:       LDAP_CONFIGURATION.getCategoryName(), AMBARI_CONFIGURATION_PROPERTY_NAME_COLUMN, LDAP_CONFIGURATION_WRONG_COLLISION_BEHAVIOR_PROPERTY_NAME);",
          "49:   @Inject",
          "50:   public UpgradeCatalog272(Injector injector) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   protected static final String HOST_COMPONENT_DESIRED_STATE_TABLE = \"hostcomponentdesiredstate\";",
          "51:   protected static final String CLUSTERS_TABLE = \"clusters\";",
          "52:   protected static final String BLUEPRINT_PROVISIONING_STATE_COLUMN = \"blueprint_provisioning_state\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:   @Override",
          "65:   protected void executeDDLUpdates() throws AmbariException, SQLException {",
          "67:   }",
          "69:   @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     moveBlueprintProvisioningState();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:     addRoleAuthorization(AMBARI_VIEW_STATUS_INFO.getId(), \"View status information\", Collections.singleton(\"AMBARI.ADMINISTRATOR:AMBARI\"));",
          "94:     LOG.info(\"Added new role authorization {}\", AMBARI_VIEW_STATUS_INFO.getId());",
          "95:   }",
          "96: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   protected void moveBlueprintProvisioningState() throws SQLException {",
          "103:     dbAccessor.dropColumn(CLUSTERS_TABLE, BLUEPRINT_PROVISIONING_STATE_COLUMN);",
          "104:     dbAccessor.addColumn(HOST_COMPONENT_DESIRED_STATE_TABLE,",
          "105:         new DBAccessor.DBColumnInfo(BLUEPRINT_PROVISIONING_STATE_COLUMN, String.class, 255,",
          "106:             BlueprintProvisioningState.NONE, true));",
          "107:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-Derby-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   cluster_info VARCHAR(255) NOT NULL,",
          "59:   cluster_name VARCHAR(100) NOT NULL UNIQUE,",
          "60:   provisioning_state VARCHAR(255) NOT NULL DEFAULT 'INIT',",
          "62:   security_type VARCHAR(32) NOT NULL DEFAULT 'NONE',",
          "63:   desired_cluster_state VARCHAR(255) NOT NULL,",
          "64:   desired_stack_id BIGINT NOT NULL,",
          "",
          "[Removed Lines]",
          "61:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:   service_name VARCHAR(255) NOT NULL,",
          "227:   admin_state VARCHAR(32),",
          "228:   maintenance_state VARCHAR(32) NOT NULL,",
          "229:   restart_required SMALLINT NOT NULL DEFAULT 0,",
          "230:   CONSTRAINT PK_hostcomponentdesiredstate PRIMARY KEY (id),",
          "231:   CONSTRAINT UQ_hcdesiredstate_name UNIQUE (component_name, service_name, host_id, cluster_id),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-MySQL-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:   cluster_info VARCHAR(255) NOT NULL,",
          "79:   cluster_name VARCHAR(100) NOT NULL UNIQUE,",
          "80:   provisioning_state VARCHAR(255) NOT NULL DEFAULT 'INIT',",
          "82:   security_type VARCHAR(32) NOT NULL DEFAULT 'NONE',",
          "83:   desired_cluster_state VARCHAR(255) NOT NULL,",
          "84:   desired_stack_id BIGINT NOT NULL,",
          "",
          "[Removed Lines]",
          "81:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:   service_name VARCHAR(100) NOT NULL,",
          "247:   admin_state VARCHAR(32),",
          "248:   maintenance_state VARCHAR(32) NOT NULL DEFAULT 'ACTIVE',",
          "249:   restart_required TINYINT(1) NOT NULL DEFAULT 0,",
          "250:   CONSTRAINT PK_hostcomponentdesiredstate PRIMARY KEY (id),",
          "251:   CONSTRAINT UQ_hcdesiredstate_name UNIQUE (component_name, service_name, host_id, cluster_id),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-Oracle-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   cluster_info VARCHAR2(255) NULL,",
          "59:   cluster_name VARCHAR2(100) NOT NULL UNIQUE,",
          "60:   provisioning_state VARCHAR2(255) DEFAULT 'INIT' NOT NULL,",
          "62:   security_type VARCHAR2(32) DEFAULT 'NONE' NOT NULL,",
          "63:   desired_cluster_state VARCHAR2(255) NULL,",
          "64:   desired_stack_id NUMBER(19) NOT NULL,",
          "",
          "[Removed Lines]",
          "61:   blueprint_provisioning_state VARCHAR2(255) DEFAULT 'NONE',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:   service_name VARCHAR2(255) NOT NULL,",
          "228:   admin_state VARCHAR2(32) NULL,",
          "229:   maintenance_state VARCHAR2(32) NOT NULL,",
          "230:   restart_required NUMBER(1) DEFAULT 0 NOT NULL,",
          "231:   CONSTRAINT PK_hostcomponentdesiredstate PRIMARY KEY (id),",
          "232:   CONSTRAINT UQ_hcdesiredstate_name UNIQUE (component_name, service_name, host_id, cluster_id),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:   blueprint_provisioning_state VARCHAR2(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-Postgres-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   cluster_info VARCHAR(255) NOT NULL,",
          "59:   cluster_name VARCHAR(100) NOT NULL UNIQUE,",
          "60:   provisioning_state VARCHAR(255) NOT NULL DEFAULT 'INIT',",
          "62:   security_type VARCHAR(32) NOT NULL DEFAULT 'NONE',",
          "63:   desired_cluster_state VARCHAR(255) NOT NULL,",
          "64:   desired_stack_id BIGINT NOT NULL,",
          "",
          "[Removed Lines]",
          "61:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:   service_name VARCHAR(255) NOT NULL,",
          "229:   admin_state VARCHAR(32),",
          "230:   maintenance_state VARCHAR(32) NOT NULL,",
          "231:   restart_required SMALLINT NOT NULL DEFAULT 0,",
          "232:   CONSTRAINT PK_hostcomponentdesiredstate PRIMARY KEY (id),",
          "233:   CONSTRAINT UQ_hcdesiredstate_name UNIQUE (component_name, service_name, host_id, cluster_id),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-SQLAnywhere-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   cluster_info VARCHAR(255) NOT NULL,",
          "58:   cluster_name VARCHAR(100) NOT NULL UNIQUE,",
          "59:   provisioning_state VARCHAR(255) NOT NULL DEFAULT 'INIT',",
          "61:   security_type VARCHAR(32) NOT NULL DEFAULT 'NONE',",
          "62:   desired_cluster_state VARCHAR(255) NOT NULL,",
          "63:   desired_stack_id NUMERIC(19) NOT NULL,",
          "",
          "[Removed Lines]",
          "60:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "225:   service_name VARCHAR(255) NOT NULL,",
          "226:   admin_state VARCHAR(32),",
          "227:   maintenance_state VARCHAR(32) NOT NULL DEFAULT 'ACTIVE',",
          "228:   restart_required BIT NOT NULL DEFAULT 0,",
          "229:   CONSTRAINT PK_hostcomponentdesiredstate PRIMARY KEY (id),",
          "230:   CONSTRAINT UQ_hcdesiredstate_name UNIQUE (component_name, service_name, host_id, cluster_id),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql||ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql": [
          "File: ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql -> ambari-server/src/main/resources/Ambari-DDL-SQLServer-CREATE.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   cluster_info VARCHAR(255) NOT NULL,",
          "72:   cluster_name VARCHAR(100) NOT NULL UNIQUE,",
          "73:   provisioning_state VARCHAR(255) NOT NULL DEFAULT 'INIT',",
          "75:   security_type VARCHAR(32) NOT NULL DEFAULT 'NONE',",
          "76:   desired_cluster_state VARCHAR(255) NOT NULL,",
          "77:   desired_stack_id BIGINT NOT NULL,",
          "",
          "[Removed Lines]",
          "74:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:   service_name VARCHAR(255) NOT NULL,",
          "241:   admin_state VARCHAR(32),",
          "242:   maintenance_state VARCHAR(32) NOT NULL,",
          "243:   restart_required BIT NOT NULL DEFAULT 0,",
          "244:   CONSTRAINT PK_hostcomponentdesiredstate PRIMARY KEY CLUSTERED (id),",
          "245:   CONSTRAINT UQ_hcdesiredstate_name UNIQUE (component_name, service_name, host_id, cluster_id),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:   blueprint_provisioning_state VARCHAR(255) DEFAULT 'NONE',",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     HostLevelParamsUpdateEvent current = new HostLevelParamsUpdateEvent(HOST_ID, Collections.emptyMap());",
          "42:     Map<String, HostLevelParamsCluster> clusters = new HashMap<>();",
          "43:     HostRepositories hostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "45:     clusters.put(\"1\", cluster);",
          "46:     HostLevelParamsUpdateEvent update = new HostLevelParamsUpdateEvent(HOST_ID, clusters);",
          "",
          "[Removed Lines]",
          "44:     HostLevelParamsCluster cluster = new HostLevelParamsCluster(hostRepositories, new RecoveryConfig(null));",
          "",
          "[Added Lines]",
          "44:     HostLevelParamsCluster cluster = new HostLevelParamsCluster(hostRepositories,",
          "45:         new RecoveryConfig(null), Collections.emptyMap());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:   public void testHandleUpdateEmptyUpdate() {",
          "58:     Map<String, HostLevelParamsCluster> clusters = new HashMap<>();",
          "59:     HostRepositories hostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "61:     clusters.put(\"1\", cluster);",
          "62:     HostLevelParamsUpdateEvent current = new HostLevelParamsUpdateEvent(HOST_ID, clusters);",
          "63:     HostLevelParamsUpdateEvent update = new HostLevelParamsUpdateEvent(HOST_ID, Collections.emptyMap());",
          "",
          "[Removed Lines]",
          "60:     HostLevelParamsCluster cluster = new HostLevelParamsCluster(hostRepositories, new RecoveryConfig(null));",
          "",
          "[Added Lines]",
          "61:     HostLevelParamsCluster cluster = new HostLevelParamsCluster(hostRepositories,",
          "62:         new RecoveryConfig(null), Collections.emptyMap());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:   public void testHandleUpdateNoChanges() {",
          "75:     Map<String, HostLevelParamsCluster> currentClusters = new HashMap<>();",
          "76:     HostRepositories currentHostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "78:     currentClusters.put(\"1\", currentCluster);",
          "79:     HostLevelParamsUpdateEvent current = new HostLevelParamsUpdateEvent(HOST_ID, currentClusters);",
          "81:     Map<String, HostLevelParamsCluster> updateClusters = new HashMap<>();",
          "82:     HostRepositories updateHostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "84:     updateClusters.put(\"1\", updateCluster);",
          "85:     HostLevelParamsUpdateEvent update = new HostLevelParamsUpdateEvent(HOST_ID, updateClusters);",
          "",
          "[Removed Lines]",
          "77:     HostLevelParamsCluster currentCluster = new HostLevelParamsCluster(currentHostRepositories, new RecoveryConfig(null));",
          "83:     HostLevelParamsCluster updateCluster = new HostLevelParamsCluster(updateHostRepositories, new RecoveryConfig(null));",
          "",
          "[Added Lines]",
          "79:     HostLevelParamsCluster currentCluster = new HostLevelParamsCluster(currentHostRepositories,",
          "80:         new RecoveryConfig(null), Collections.emptyMap());",
          "86:     HostLevelParamsCluster updateCluster = new HostLevelParamsCluster(updateHostRepositories,",
          "87:         new RecoveryConfig(null), Collections.emptyMap());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:   public void testHandleUpdateOnChanges() {",
          "97:     Map<String, HostLevelParamsCluster> currentClusters = new HashMap<>();",
          "98:     HostRepositories currentHostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "100:     currentClusters.put(\"1\", currentCluster);",
          "101:     HostLevelParamsUpdateEvent current = new HostLevelParamsUpdateEvent(HOST_ID, currentClusters);",
          "103:     Map<String, HostLevelParamsCluster> updateClusters = new HashMap<>();",
          "104:     HostRepositories updateHostRepositories = new HostRepositories(Collections.emptySortedMap(), Collections.emptySortedMap());",
          "106:     updateClusters.put(\"2\", updateCluster);",
          "107:     HostLevelParamsUpdateEvent update = new HostLevelParamsUpdateEvent(HOST_ID, updateClusters);",
          "",
          "[Removed Lines]",
          "99:     HostLevelParamsCluster currentCluster = new HostLevelParamsCluster(currentHostRepositories, new RecoveryConfig(null));",
          "105:     HostLevelParamsCluster updateCluster = new HostLevelParamsCluster(updateHostRepositories, new RecoveryConfig(null));",
          "",
          "[Added Lines]",
          "103:     HostLevelParamsCluster currentCluster = new HostLevelParamsCluster(currentHostRepositories,",
          "104:         new RecoveryConfig(null), Collections.emptyMap());",
          "110:     HostLevelParamsCluster updateCluster = new HostLevelParamsCluster(updateHostRepositories,",
          "111:         new RecoveryConfig(null), Collections.emptyMap());",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostResourceProviderTest.java||ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostResourceProviderTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostResourceProviderTest.java -> ambari-server/src/test/java/org/apache/ambari/server/controller/internal/HostResourceProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.controller.internal;",
          "21: import static org.easymock.EasyMock.anyObject;",
          "22: import static org.easymock.EasyMock.capture;",
          "23: import static org.easymock.EasyMock.eq;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.easymock.EasyMock.anyLong;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:     Capture<String> rackChangeAffectedClusterName = EasyMock.newCapture();",
          "159:     managementController.registerRackChange(capture(rackChangeAffectedClusterName));",
          "160:     EasyMock.expectLastCall().once();",
          "163:     Clusters clusters = injector.getInstance(Clusters.class);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:     expect(managementController.getBlueprintProvisioningStates(anyLong(), anyLong()))",
          "163:         .andReturn(Collections.EMPTY_MAP).anyTimes();",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/topology/AmbariContextTest.java||ambari-server/src/test/java/org/apache/ambari/server/topology/AmbariContextTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/topology/AmbariContextTest.java -> ambari-server/src/test/java/org/apache/ambari/server/topology/AmbariContextTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import static org.easymock.EasyMock.createMock;",
          "25: import static org.easymock.EasyMock.createNiceMock;",
          "26: import static org.easymock.EasyMock.createStrictMock;",
          "27: import static org.easymock.EasyMock.expect;",
          "28: import static org.easymock.EasyMock.expectLastCall;",
          "29: import static org.easymock.EasyMock.replay;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import static org.easymock.EasyMock.eq;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: import java.util.Map;",
          "45: import java.util.Set;",
          "47: import org.apache.ambari.server.controller.AmbariManagementController;",
          "48: import org.apache.ambari.server.controller.ClusterRequest;",
          "49: import org.apache.ambari.server.controller.ConfigGroupRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: import org.apache.ambari.server.agent.stomp.HostLevelParamsHolder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:     expect(repositoryVersionDAO.findByStack(EasyMock.anyObject(StackId.class))).andReturn(",
          "219:         singletonList(repositoryVersion)).atLeastOnce();",
          "222:     context.configFactory = configFactory;",
          "223:     context.repositoryVersionDAO = repositoryVersionDAO;",
          "225:     blueprintServices.add(\"service1\");",
          "226:     blueprintServices.add(\"service2\");",
          "",
          "[Removed Lines]",
          "220:     replay(repositoryVersionDAO, repositoryVersion);",
          "",
          "[Added Lines]",
          "223:     HostLevelParamsHolder hostLevelParamsHolder = createNiceMock(HostLevelParamsHolder.class);",
          "224:     replay(repositoryVersionDAO, repositoryVersion, hostLevelParamsHolder);",
          "228:     context.hostLevelParamsHolder = hostLevelParamsHolder;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "386:     expect(cluster.getService(\"service2\")).andReturn(mockService1).once();",
          "387:     Capture<Set<ServiceComponentHostRequest>> requestsCapture = EasyMock.newCapture();",
          "390:     expectLastCall().once();",
          "392:     replayAll();",
          "",
          "[Removed Lines]",
          "389:     controller.createHostComponents(capture(requestsCapture));",
          "",
          "[Added Lines]",
          "394:     controller.createHostComponents(capture(requestsCapture), eq(true));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "416:     expect(cluster.getService(\"service1\")).andReturn(mockService1).times(2);",
          "417:     Capture<Set<ServiceComponentHostRequest>> requestsCapture = EasyMock.newCapture();",
          "420:     expectLastCall().once();",
          "422:     replayAll();",
          "",
          "[Removed Lines]",
          "419:     controller.createHostComponents(capture(requestsCapture));",
          "",
          "[Added Lines]",
          "424:     controller.createHostComponents(capture(requestsCapture), eq(true));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog272Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.ambari.server.upgrade;",
          "20: import static org.apache.ambari.server.upgrade.UpgradeCatalog270.AMBARI_CONFIGURATION_TABLE;",
          "21: import static org.apache.ambari.server.upgrade.UpgradeCatalog272.RENAME_COLLISION_BEHAVIOR_PROPERTY_SQL;",
          "22: import static org.easymock.EasyMock.createMockBuilder;",
          "23: import static org.easymock.EasyMock.expect;",
          "24: import static org.easymock.EasyMock.expectLastCall;",
          "25: import static org.easymock.EasyMock.replay;",
          "26: import static org.easymock.EasyMock.verify;",
          "27: import static org.junit.Assert.assertEquals;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import static org.apache.ambari.server.upgrade.UpgradeCatalog272.BLUEPRINT_PROVISIONING_STATE_COLUMN;",
          "22: import static org.apache.ambari.server.upgrade.UpgradeCatalog272.CLUSTERS_TABLE;",
          "23: import static org.apache.ambari.server.upgrade.UpgradeCatalog272.HOST_COMPONENT_DESIRED_STATE_TABLE;",
          "25: import static org.easymock.EasyMock.capture;",
          "27: import static org.easymock.EasyMock.eq;",
          "30: import static org.easymock.EasyMock.newCapture;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import java.lang.reflect.Method;",
          "31: import org.apache.ambari.server.orm.DBAccessor;",
          "32: import org.easymock.EasyMockSupport;",
          "33: import org.junit.Before;",
          "34: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.ambari.server.state.BlueprintProvisioningState;",
          "39: import org.easymock.Capture;",
          "40: import org.easymock.CaptureType;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     dbAccessor = easyMockSupport.createNiceMock(DBAccessor.class);",
          "48:   }",
          "50:   @Test",
          "51:   public void testExecuteDMLUpdates() throws Exception {",
          "52:     final Method renameLdapSynchCollisionBehaviorValue = UpgradeCatalog272.class.getDeclaredMethod(\"renameLdapSynchCollisionBehaviorValue\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:   @Test",
          "60:   public void testExecuteDDLUpdates() throws Exception {",
          "61:     dbAccessor.dropColumn(eq(CLUSTERS_TABLE), eq(BLUEPRINT_PROVISIONING_STATE_COLUMN));",
          "62:     expectLastCall().once();",
          "64:     Capture<DBAccessor.DBColumnInfo> blueprintProvisioningStateColumnCapture = newCapture(CaptureType.ALL);",
          "65:     dbAccessor.addColumn(eq(HOST_COMPONENT_DESIRED_STATE_TABLE), capture(blueprintProvisioningStateColumnCapture));",
          "66:     expectLastCall().once();",
          "68:     replay(dbAccessor, injector);",
          "70:     UpgradeCatalog272 upgradeCatalog272 = new UpgradeCatalog272(injector);",
          "71:     upgradeCatalog272.dbAccessor = dbAccessor;",
          "72:     upgradeCatalog272.executeDDLUpdates();",
          "74:     DBAccessor.DBColumnInfo capturedBlueprintProvisioningStateColumn =",
          "75:         blueprintProvisioningStateColumnCapture.getValue();",
          "76:     assertEquals(BLUEPRINT_PROVISIONING_STATE_COLUMN,",
          "77:         capturedBlueprintProvisioningStateColumn.getName());",
          "78:     assertEquals(BlueprintProvisioningState.NONE, capturedBlueprintProvisioningStateColumn.getDefaultValue());",
          "79:     assertEquals(String.class, capturedBlueprintProvisioningStateColumn.getType());",
          "81:     verify(dbAccessor);",
          "82:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ccb8e6d314d1429802dc06d11513df0169ccff8",
      "candidate_info": {
        "commit_hash": "6ccb8e6d314d1429802dc06d11513df0169ccff8",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/6ccb8e6d314d1429802dc06d11513df0169ccff8",
        "files": [
          "ambari-web/app/styles/application.less"
        ],
        "message": "AMBARI-24578 Quicklinks URL overflow outside the UI box",
        "before_after_code_files": [
          "ambari-web/app/styles/application.less||ambari-web/app/styles/application.less"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/styles/application.less||ambari-web/app/styles/application.less": [
          "File: ambari-web/app/styles/application.less -> ambari-web/app/styles/application.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "1254:       display: block;",
          "1255:       margin-bottom: 5px;",
          "1256:     }",
          "1257:   }",
          "1258: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1257:     h6 {",
          "1258:       word-break: break-all;",
          "1259:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56d0b405a664940525e56f9e938e1c09b885779d",
      "candidate_info": {
        "commit_hash": "56d0b405a664940525e56f9e938e1c09b885779d",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/56d0b405a664940525e56f9e938e1c09b885779d",
        "files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/images/logo.png",
          "ambari-admin/src/main/resources/ui/admin-web/app/index.html",
          "ambari-admin/src/main/resources/ui/admin-web/app/styles/theme/bootstrap-ambari.css",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/modals/AboutModal.html",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/sideNav.html"
        ],
        "message": "[AMBARI-24859] Admin View: Apache Ambari logo and favicon does not show when using Knox Gateway (#2577) (#2580)\n\n* AMBARI-24859. Admin View: Apache Ambari logo and favicon does not show when using Knox Gateway. (jaimin)\n\n* AMBARI-24859. Admin View: Apache Ambari logo in \"About\" popup modal does not show when using Knox Gateway. (jaimin)",
        "before_after_code_files": [
          "ambari-admin/src/main/resources/ui/admin-web/app/index.html||ambari-admin/src/main/resources/ui/admin-web/app/index.html",
          "ambari-admin/src/main/resources/ui/admin-web/app/styles/theme/bootstrap-ambari.css||ambari-admin/src/main/resources/ui/admin-web/app/styles/theme/bootstrap-ambari.css",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html||ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/modals/AboutModal.html||ambari-admin/src/main/resources/ui/admin-web/app/views/modals/AboutModal.html",
          "ambari-admin/src/main/resources/ui/admin-web/app/views/sideNav.html||ambari-admin/src/main/resources/ui/admin-web/app/views/sideNav.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-admin/src/main/resources/ui/admin-web/app/index.html||ambari-admin/src/main/resources/ui/admin-web/app/index.html": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/index.html -> ambari-admin/src/main/resources/ui/admin-web/app/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:   <meta name=\"description\" content=\"\">",
          "24:   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">",
          "25:   <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">",
          "27:   <!-- Place favicon.ico and apple-touch-icon.png in the root directory -->",
          "29:   <!-- build:css styles/vendor.css -->",
          "",
          "[Removed Lines]",
          "26:   <link rel=\"shortcut icon\" href=\"/img/logo.png\" type=\"image/x-icon\">",
          "",
          "[Added Lines]",
          "26:   <link rel=\"shortcut icon\" href=\"images/logo.png\" type=\"image/x-icon\">",
          "",
          "---------------"
        ],
        "ambari-admin/src/main/resources/ui/admin-web/app/styles/theme/bootstrap-ambari.css||ambari-admin/src/main/resources/ui/admin-web/app/styles/theme/bootstrap-ambari.css": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/styles/theme/bootstrap-ambari.css -> ambari-admin/src/main/resources/ui/admin-web/app/styles/theme/bootstrap-ambari.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   font-family: 'Roboto';",
          "20:   font-weight: normal;",
          "21:   font-style: normal;",
          "24: }",
          "25: .font-mixin {",
          "26:   font-family: 'Roboto', sans-serif;",
          "",
          "[Removed Lines]",
          "22:   src: url('fonts/Roboto-Regular-webfont.eot');",
          "23:   src: url('fonts/Roboto-Regular-webfont.eot?#iefix') format('embedded-opentype'), url('fonts/Roboto-Regular-webfont.woff') format('woff'), url('fonts/Roboto-Regular-webfont.ttf') format('truetype'), url('fonts/Roboto-Regular-webfont.svg#robotoregular') format('svg');",
          "",
          "[Added Lines]",
          "22:   src: url('../fonts/Roboto-Regular-webfont.eot');",
          "23:   src: url('../fonts/Roboto-Regular-webfont.eot?#iefix') format('embedded-opentype'), url('../fonts/Roboto-Regular-webfont.woff') format('woff'), url('../fonts/Roboto-Regular-webfont.ttf') format('truetype'), url('../fonts/Roboto-Regular-webfont.svg#robotoregular') format('svg');",
          "",
          "---------------"
        ],
        "ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html||ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html -> ambari-admin/src/main/resources/ui/admin-web/app/views/clusters/clusterInformation.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:           {{'main.createCluster.description' | translate}}",
          "30:         </span>",
          "31:       </div>",
          "33:       <div class=\"install-button\">",
          "34:         <a href=\"{{fromSiteRoot('/#/installer/step0')}}\" class=\"btn btn-primary\">",
          "35:           {{'main.createCluster.launchInstallWizard' | translate}}",
          "",
          "[Removed Lines]",
          "32:       <div><img id=\"install-box\" src=\"/img/install-box.svg\"></div>",
          "",
          "[Added Lines]",
          "32:       <div><img id=\"install-box\" src=\"{{fromSiteRoot('/img/install-box.svg')}}\"></div>",
          "",
          "---------------"
        ],
        "ambari-admin/src/main/resources/ui/admin-web/app/views/modals/AboutModal.html||ambari-admin/src/main/resources/ui/admin-web/app/views/modals/AboutModal.html": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/views/modals/AboutModal.html -> ambari-admin/src/main/resources/ui/admin-web/app/views/modals/AboutModal.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: <div class=\"modal-body\">",
          "23:   <div class=\"about clearfix\">",
          "24:     <div class=\"logo\">",
          "26:     </div>",
          "27:     <div class=\"content\">",
          "28:       <div class=\"project\">{{'common.apacheAmbari' | translate}}</div>",
          "",
          "[Removed Lines]",
          "25:       <img src=\"/img/logo.png\" alt=\"{{'common.apacheAmbari' | translate}}\" title=\"{{'common.apacheAmbari' | translate}}\">",
          "",
          "[Added Lines]",
          "25:       <img src={{fromSiteRoot('/img/logo.png')}} alt=\"{{'common.apacheAmbari' | translate}}\" title=\"{{'common.apacheAmbari' | translate}}\">",
          "",
          "---------------"
        ],
        "ambari-admin/src/main/resources/ui/admin-web/app/views/sideNav.html||ambari-admin/src/main/resources/ui/admin-web/app/views/sideNav.html": [
          "File: ambari-admin/src/main/resources/ui/admin-web/app/views/sideNav.html -> ambari-admin/src/main/resources/ui/admin-web/app/views/sideNav.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     <ul class=\"side-nav-header nav nav-pills nav-stacked\">",
          "22:       <li class=\"navigation-header active\">",
          "23:         <a href=\"{{fromSiteRoot('/#/main/dashboard')}}\" class=\"ambari-logo\">",
          "25:         </a>",
          "26:         <div class=\"btn-group\">",
          "27:           <a href=\"{{fromSiteRoot('/#/main/dashboard')}}\" class=\"ambari-header-link\" title=\"{{'common.apacheAmbari' | translate}}\" data-qa=\"ambari-title\">",
          "",
          "[Removed Lines]",
          "24:           <img src=\"/img/ambari-logo.png\" alt=\"{{'common.apacheAmbari' | translate}}\" title=\"{{'common.apacheAmbari' | translate}}\" data-qa=\"ambari-logo\">",
          "",
          "[Added Lines]",
          "24:           <img src=\"{{fromSiteRoot('/img/ambari-logo.png')}}\" alt=\"{{'common.apacheAmbari' | translate}}\" title=\"{{'common.apacheAmbari' | translate}}\" data-qa=\"ambari-logo\">",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "455adaacf29b4b48e027b7280c0733df67403470",
      "candidate_info": {
        "commit_hash": "455adaacf29b4b48e027b7280c0733df67403470",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/455adaacf29b4b48e027b7280c0733df67403470",
        "files": [
          "ambari-server/src/main/python/ambari-server.py",
          "ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "ambari-server/src/test/python/TestAmbariServer.py"
        ],
        "message": "AMBARI-24781 - Ambari setup-ldap: change group member default for IPA (#2463)",
        "before_after_code_files": [
          "ambari-server/src/main/python/ambari-server.py||ambari-server/src/main/python/ambari-server.py",
          "ambari-server/src/main/python/ambari_server/setupSecurity.py||ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "ambari-server/src/test/python/TestAmbariServer.py||ambari-server/src/test/python/TestAmbariServer.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/python/ambari-server.py||ambari-server/src/main/python/ambari-server.py": [
          "File: ambari-server/src/main/python/ambari-server.py -> ambari-server/src/main/python/ambari-server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "550:   parser.add_option('--ldap-secondary-host', action=\"callback\", callback=check_ldap_url_options, type='str', default=None, help=\"Secondary Host for LDAP (must not be used together with --ldap-secondary-url)\", dest=\"ldap_secondary_host\")",
          "551:   parser.add_option('--ldap-secondary-port', action=\"callback\", callback=check_ldap_url_options, type='int', default=None, help=\"Secondary Port for LDAP (must not be used together with --ldap-secondary-url)\", dest=\"ldap_secondary_port\")",
          "552:   parser.add_option('--ldap-ssl', default=None, help=\"Use SSL [true/false] for LDAP\", dest=\"ldap_ssl\")",
          "554:   parser.add_option('--ldap-user-class', default=None, help=\"User Attribute Object Class for LDAP\", dest=\"ldap_user_class\")",
          "555:   parser.add_option('--ldap-user-attr', default=None, help=\"User Attribute Name for LDAP\", dest=\"ldap_user_attr\")",
          "556:   parser.add_option('--ldap-group-class', default=None, help=\"Group Attribute Object Class for LDAP\", dest=\"ldap_group_class\")",
          "",
          "[Removed Lines]",
          "553:   parser.add_option('--ldap-use-generic-defaults', action=\"store_true\", default=None, help=\"Disables ldap type query and generic defaults will be offered for non existent properties\".format(\"/\".join(LDAP_TYPES)), dest=\"ldap_use_generic_defaults\")",
          "",
          "[Added Lines]",
          "553:   parser.add_option('--ldap-type', default=None, help=\"Specify ldap type [{}] for offering defaults for missing options.\".format(\"/\".join(LDAP_TYPES)), dest=\"ldap_type\")",
          "",
          "---------------"
        ],
        "ambari-server/src/main/python/ambari_server/setupSecurity.py||ambari-server/src/main/python/ambari_server/setupSecurity.py": [
          "File: ambari-server/src/main/python/ambari_server/setupSecurity.py -> ambari-server/src/main/python/ambari_server/setupSecurity.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "727:     LdapPropTemplate(properties, options.ldap_user_attr, \"ambari.ldap.attributes.user.name_attr\", \"User ID attribute{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'sAMAccountName', LDAP_IPA:'uid', LDAP_GENERIC:'uid'})),",
          "728:     LdapPropTemplate(properties, options.ldap_group_class, \"ambari.ldap.attributes.group.object_class\", \"Group object class{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'group', LDAP_IPA:'posixGroup', LDAP_GENERIC:'posixGroup'})),",
          "729:     LdapPropTemplate(properties, options.ldap_group_attr, \"ambari.ldap.attributes.group.name_attr\", \"Group name attribute{0}: \", REGEX_ANYTHING, False, LdapDefault(\"cn\")),",
          "731:     LdapPropTemplate(properties, options.ldap_dn, \"ambari.ldap.attributes.dn_attr\", \"Distinguished name attribute{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'distinguishedName', LDAP_IPA:'dn', LDAP_GENERIC:'dn'})),",
          "732:     LdapPropTemplate(properties, options.ldap_base_dn, \"ambari.ldap.attributes.user.search_base\", \"Search Base{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'dc=ambari,dc=apache,dc=org', LDAP_IPA:'cn=accounts,dc=ambari,dc=apache,dc=org', LDAP_GENERIC:'dc=ambari,dc=apache,dc=org'})),",
          "733:     LdapPropTemplate(properties, options.ldap_referral, \"ambari.ldap.advanced.referrals\", \"Referral method [follow/ignore]{0}: \", REGEX_REFERRAL, True, LdapDefault(\"follow\")),",
          "",
          "[Removed Lines]",
          "730:     LdapPropTemplate(properties, options.ldap_member_attr, \"ambari.ldap.attributes.group.member_attr\", \"Group member attribute{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'member', LDAP_IPA:'memberUid', LDAP_GENERIC:'memberUid'})),",
          "",
          "[Added Lines]",
          "730:     LdapPropTemplate(properties, options.ldap_member_attr, \"ambari.ldap.attributes.group.member_attr\", \"Group member attribute{0}: \", REGEX_ANYTHING, False, LdapDefaultMap({LDAP_AD:'member', LDAP_IPA:'member', LDAP_GENERIC:'memberUid'})),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "755:       return True",
          "756:   return False",
          "759:   return get_validated_string_input(\"Please select the type of LDAP you want to use [{}]({}):\".format(\"/\".join(LDAP_TYPES), LDAP_GENERIC),",
          "760:                                     LDAP_GENERIC,",
          "761:                                     REGEX_LDAP_TYPE,",
          "762:                                     \"Please enter one of the followings '{}'!\".format(\"', '\".join(LDAP_TYPES)),",
          "763:                                     False,",
          "766: def setup_ldap(options):",
          "767:   logger.info(\"Setup LDAP.\")",
          "",
          "[Removed Lines]",
          "758: def query_ldap_type():",
          "764:                                     False)",
          "",
          "[Added Lines]",
          "758: def query_ldap_type(ldap_type_option):",
          "764:                                     False,",
          "765:                                     answer = ldap_type_option)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "807:     LDAP_AD:'cn=ldapbind,dc=ambari,dc=apache,dc=org',",
          "808:     LDAP_IPA:'uid=ldapbind,cn=users,cn=accounts,dc=ambari,dc=apache,dc=org',",
          "809:     LDAP_GENERIC:'uid=ldapbind,cn=users,dc=ambari,dc=apache,dc=org'}))",
          "812:   ldap_property_list_opt = [LDAP_MGR_USERNAME_PROPERTY,",
          "813:                             LDAP_MGR_PASSWORD_PROPERTY,",
          "814:                             LDAP_DISABLE_ENDPOINT_IDENTIFICATION,",
          "",
          "[Removed Lines]",
          "810:   ldap_type = LDAP_GENERIC if options.ldap_use_generic_defaults or not should_query_ldap_type(ldap_property_list_reqd) else query_ldap_type()",
          "",
          "[Added Lines]",
          "811:   ldap_type = query_ldap_type(options.ldap_type) if options.ldap_type or should_query_ldap_type(ldap_property_list_reqd) else LDAP_GENERIC",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestAmbariServer.py||ambari-server/src/test/python/TestAmbariServer.py": [
          "File: ambari-server/src/test/python/TestAmbariServer.py -> ambari-server/src/test/python/TestAmbariServer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7161:     urlopen_mock.return_value = response",
          "7163:     options = self._create_empty_options_mock()",
          "7164:     setup_ldap(options)",
          "7166:     requestCall = urlopen_mock.call_args_list[0]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7164:     options.ldap_type = LDAP_GENERIC",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d44151d8cfad305f118123066d4dd708be0c556",
      "candidate_info": {
        "commit_hash": "4d44151d8cfad305f118123066d4dd708be0c556",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/4d44151d8cfad305f118123066d4dd708be0c556",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py"
        ],
        "message": "AMBARI-24583. Ambari agent status could be reported stale just after execution command thread has finished execution (aonishuk)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py||ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py||ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py -> ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: from ambari_agent import Constants",
          "23: from ambari_agent.LiveStatus import LiveStatus",
          "24: from collections import defaultdict",
          "26: from ambari_agent.models.commands import AgentCommand",
          "27: from ambari_stomp.adapter.websocket import ConnectionIsAlreadyClosed",
          "30: class ComponentStatusExecutor(threading.Thread):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: from ambari_agent.Utils import Utils",
          "29: from resource_management.libraries.functions.default import default",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     self.reported_component_status = defaultdict(lambda:defaultdict(lambda:defaultdict(lambda:None))) # component statuses which were received by server",
          "40:     self.server_responses_listener = initializer_module.server_responses_listener",
          "41:     self.logger = logging.getLogger(__name__)",
          "42:     threading.Thread.__init__(self)",
          "44:   def run(self):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     self.reports_to_discard = []",
          "45:     self.reports_to_discard_lock = threading.RLock()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:         self.clean_not_existing_clusters_info()",
          "55:         cluster_reports = defaultdict(lambda:[])",
          "57:         for cluster_id in self.topology_cache.get_cluster_ids():",
          "58:           # TODO: check if we can make clusters immutable too",
          "59:           try:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:         with self.reports_to_discard_lock:",
          "62:           self.reports_to_discard = []",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:               if result:",
          "105:                 cluster_reports[cluster_id].append(result)",
          "107:         self.send_updates_to_server(cluster_reports)",
          "108:       except ConnectionIsAlreadyClosed: # server and agent disconnected during sending data. Not an issue",
          "109:         pass",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:         cluster_reports = self.discard_stale_reports(cluster_reports)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:       self.stop_event.wait(self.status_commands_run_interval)",
          "114:     self.logger.info(\"ComponentStatusExecutor has successfully finished\")",
          "116:   def check_component_status(self, cluster_id, service_name, component_name, command_name, report=False):",
          "117:     \"\"\"",
          "118:     Returns components status if it has changed, otherwise None.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:   def discard_stale_reports(self, cluster_reports):",
          "126:     \"\"\"",
          "127:     Remove reports which are already stale (meaning other process has already updated status to something different)",
          "128:     \"\"\"",
          "129:     with self.reports_to_discard_lock:",
          "130:       # nothing to discard",
          "131:       if not self.reports_to_discard:",
          "132:         return cluster_reports",
          "134:       reports_to_discard = self.reports_to_discard[:]",
          "136:     new_cluster_reports = defaultdict(lambda:[])",
          "137:     for cluster_id, cluster_reports in cluster_reports.iteritems():",
          "138:       for cluster_report in cluster_reports:",
          "139:         for discarded_report in reports_to_discard:",
          "140:           if Utils.are_dicts_equal(cluster_report, discarded_report, keys_to_skip=['status']):",
          "141:             self.logger.info(\"Discarding outdated status {0} before sending\".format(cluster_report))",
          "142:             break",
          "143:         else:",
          "144:           new_cluster_reports[cluster_id].append(cluster_report)",
          "146:     return new_cluster_reports",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "151:       self.recovery_manager.handle_status_change(component_name, status)",
          "153:       if report:",
          "154:         self.send_updates_to_server({cluster_id: [result]})",
          "156:       return result",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:         with self.reports_to_discard_lock:",
          "187:           self.reports_to_discard.append(result)",
          "",
          "---------------"
        ]
      }
    }
  ]
}