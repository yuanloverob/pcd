{
  "cve_id": "CVE-2024-41888",
  "cve_desc": "Missing Release of Resource after Effective Lifetime vulnerability in Apache Answer.\n\nThis issue affects Apache Answer: through 1.3.5.\n\nThe password reset link remains valid within its expiration period even after it has been used. This could potentially lead to the link being misused or hijacked.\nUsers are recommended to upgrade to version 1.3.6, which fixes the issue.",
  "repo": "apache/incubator-answer",
  "patch_hash": "2820efc454f5808974dce0aa99aac106be3f727b",
  "patch_info": {
    "commit_hash": "2820efc454f5808974dce0aa99aac106be3f727b",
    "repo": "apache/incubator-answer",
    "commit_url": "https://github.com/apache/incubator-answer/commit/2820efc454f5808974dce0aa99aac106be3f727b",
    "files": [
      "internal/base/constant/cache_key.go",
      "internal/repo/export/email_repo.go",
      "internal/schema/email_template.go",
      "internal/service/content/user_service.go",
      "internal/service/export/email_service.go",
      "internal/service/notification/invite_answer_notification.go",
      "internal/service/notification/new_answer_notification.go",
      "internal/service/notification/new_comment_notification.go",
      "internal/service/notification/new_question_notification.go",
      "internal/service/siteinfo/siteinfo_service.go",
      "internal/service/user_admin/user_backyard.go",
      "internal/service/user_external_login/user_external_login_service.go"
    ],
    "message": "feat(user): ensure that only one link is active at a time",
    "before_after_code_files": [
      "internal/base/constant/cache_key.go||internal/base/constant/cache_key.go",
      "internal/repo/export/email_repo.go||internal/repo/export/email_repo.go",
      "internal/schema/email_template.go||internal/schema/email_template.go",
      "internal/service/content/user_service.go||internal/service/content/user_service.go",
      "internal/service/export/email_service.go||internal/service/export/email_service.go",
      "internal/service/notification/invite_answer_notification.go||internal/service/notification/invite_answer_notification.go",
      "internal/service/notification/new_answer_notification.go||internal/service/notification/new_answer_notification.go",
      "internal/service/notification/new_comment_notification.go||internal/service/notification/new_comment_notification.go",
      "internal/service/notification/new_question_notification.go||internal/service/notification/new_question_notification.go",
      "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go",
      "internal/service/user_admin/user_backyard.go||internal/service/user_admin/user_backyard.go",
      "internal/service/user_external_login/user_external_login_service.go||internal/service/user_external_login/user_external_login_service.go"
    ]
  },
  "patch_diff": {
    "internal/base/constant/cache_key.go||internal/base/constant/cache_key.go": [
      "File: internal/base/constant/cache_key.go -> internal/base/constant/cache_key.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  AdminTokenCacheKey                         = \"answer:admin:token:\"",
      "33:  AdminTokenCacheTime                        = 7 * 24 * time.Hour",
      "34:  UserTokenMappingCacheKey                   = \"answer:user-token:mapping:\"",
      "35:  SiteInfoCacheKey                           = \"answer:site-info:\"",
      "36:  SiteInfoCacheTime                          = 1 * time.Hour",
      "37:  ConfigID2KEYCacheKeyPrefix                 = \"answer:config:id:\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "35:  UserEmailCodeCacheKey                      = \"answer:user:email-code:\"",
      "36:  UserEmailCodeCacheTime                     = 10 * time.Minute",
      "37:  UserLatestEmailCodeCacheKey                = \"answer:user-id:email-code:\"",
      "",
      "---------------"
    ],
    "internal/repo/export/email_repo.go||internal/repo/export/email_repo.go": [
      "File: internal/repo/export/email_repo.go -> internal/repo/export/email_repo.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: import (",
      "23:  \"context\"",
      "24:  \"time\"",
      "26:  \"github.com/apache/incubator-answer/internal/base/data\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:  \"github.com/apache/incubator-answer/internal/base/constant\"",
      "25:  \"github.com/tidwall/gjson\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "42: }",
      "48:   return errors.InternalServer(reason.DatabaseError).WithError(err).WithStack()",
      "49:  }",
      "50:  return nil",
      "",
      "[Removed Lines]",
      "45: func (e *emailRepo) SetCode(ctx context.Context, code, content string, duration time.Duration) error {",
      "46:  err := e.data.Cache.SetString(ctx, code, content, duration)",
      "47:  if err != nil {",
      "",
      "[Added Lines]",
      "47: func (e *emailRepo) SetCode(ctx context.Context, userID, code, content string, duration time.Duration) error {",
      "50:  if err := e.data.Cache.SetString(ctx, constant.UserLatestEmailCodeCacheKey+userID, code, duration); err != nil {",
      "51:   return errors.InternalServer(reason.DatabaseError).WithError(err).WithStack()",
      "52:  }",
      "55:  if err := e.data.Cache.SetString(ctx, constant.UserEmailCodeCacheKey+code, content, duration); err != nil {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "54: func (e *emailRepo) VerifyCode(ctx context.Context, code string) (content string, err error) {",
      "56:  if err != nil {",
      "57:   return \"\", err",
      "58:  }",
      "59:  if !exist {",
      "60:   return \"\", nil",
      "61:  }",
      "62:  return content, nil",
      "63: }",
      "",
      "[Removed Lines]",
      "55:  content, exist, err := e.data.Cache.GetString(ctx, code)",
      "",
      "[Added Lines]",
      "64:  codeCacheKey := constant.UserEmailCodeCacheKey + code",
      "65:  content, exist, err := e.data.Cache.GetString(ctx, codeCacheKey)",
      "74:  _ = e.data.Cache.Del(ctx, codeCacheKey)",
      "79:  if skipValidationLatestCode := gjson.Get(content, \"skip_validation_latest_code\").Bool(); skipValidationLatestCode {",
      "80:   return content, nil",
      "81:  }",
      "82:  userID := gjson.Get(content, \"user_id\").String()",
      "85:  latestCode, exist, err := e.data.Cache.GetString(ctx, constant.UserLatestEmailCodeCacheKey+userID)",
      "86:  if err != nil {",
      "87:   return \"\", err",
      "88:  }",
      "89:  if !exist {",
      "90:   return \"\", nil",
      "91:  }",
      "94:  if latestCode != code {",
      "95:   return \"\", nil",
      "96:  }",
      "",
      "---------------"
    ],
    "internal/schema/email_template.go||internal/schema/email_template.go": [
      "File: internal/schema/email_template.go -> internal/schema/email_template.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  NotificationSources []constant.NotificationSource `json:\"notification_source,omitempty\"`",
      "44:  BindingKey string `json:\"binding_key,omitempty\"`",
      "45: }",
      "47: func (r *EmailCodeContent) ToJSONString() string {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:  SkipValidationLatestCode bool `json:\"skip_validation_latest_code\"`",
      "",
      "---------------"
    ],
    "internal/service/content/user_service.go||internal/service/content/user_service.go": [
      "File: internal/service/content/user_service.go -> internal/service/content/user_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "227:  if err != nil {",
      "228:   return err",
      "229:  }",
      "231:  return nil",
      "232: }",
      "",
      "[Removed Lines]",
      "230:  go us.emailService.SendAndSaveCode(ctx, req.Email, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "230:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, req.Email, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "450:  if err != nil {",
      "451:   return nil, nil, err",
      "452:  }",
      "455:  roleID, err := us.userRoleService.GetUserRole(ctx, userInfo.ID)",
      "456:  if err != nil {",
      "",
      "[Removed Lines]",
      "453:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "453:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "500:  if err != nil {",
      "501:   return err",
      "502:  }",
      "504:  return nil",
      "505: }",
      "",
      "[Removed Lines]",
      "503:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "503:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "621:  }",
      "622:  log.Infof(\"send email confirmation %s\", verifyEmailURL)",
      "625:  return nil, nil",
      "626: }",
      "",
      "[Removed Lines]",
      "624:  go us.emailService.SendAndSaveCode(ctx, req.Email, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "624:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, req.Email, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ],
    "internal/service/export/email_service.go||internal/service/export/email_service.go": [
      "File: internal/service/export/email_service.go -> internal/service/export/email_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "53: type EmailRepo interface {",
      "55:  VerifyCode(ctx context.Context, code string) (content string, err error)",
      "56: }",
      "",
      "[Removed Lines]",
      "54:  SetCode(ctx context.Context, code, content string, duration time.Duration) error",
      "",
      "[Added Lines]",
      "54:  SetCode(ctx context.Context, userID, code, content string, duration time.Duration) error",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89: }",
      "94:  if err != nil {",
      "95:   log.Error(err)",
      "96:  }",
      "97: }",
      "103:  if err != nil {",
      "104:   log.Error(err)",
      "105:  }",
      "106: }",
      "109: func (es *EmailService) SendAndSaveCodeWithTime(",
      "113:  if err != nil {",
      "114:   log.Error(err)",
      "115:  }",
      "116: }",
      "",
      "[Removed Lines]",
      "92: func (es *EmailService) SaveCode(ctx context.Context, code, codeContent string) {",
      "93:  err := es.emailRepo.SetCode(ctx, code, codeContent, 10*time.Minute)",
      "100: func (es *EmailService) SendAndSaveCode(ctx context.Context, toEmailAddr, subject, body, code, codeContent string) {",
      "101:  es.Send(ctx, toEmailAddr, subject, body)",
      "102:  err := es.emailRepo.SetCode(ctx, code, codeContent, 10*time.Minute)",
      "110:  ctx context.Context, toEmailAddr, subject, body, code, codeContent string, duration time.Duration) {",
      "111:  es.Send(ctx, toEmailAddr, subject, body)",
      "112:  err := es.emailRepo.SetCode(ctx, code, codeContent, duration)",
      "",
      "[Added Lines]",
      "92: func (es *EmailService) SaveCode(ctx context.Context, userID, code, codeContent string) {",
      "93:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, constant.UserEmailCodeCacheTime)",
      "100: func (es *EmailService) SendAndSaveCode(ctx context.Context, userID, toEmailAddr, subject, body, code, codeContent string) {",
      "101:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, constant.UserEmailCodeCacheTime)",
      "104:   return",
      "106:  es.Send(ctx, toEmailAddr, subject, body)",
      "111:  ctx context.Context, userID, toEmailAddr, subject, body, code, codeContent string, duration time.Duration) {",
      "112:  err := es.emailRepo.SetCode(ctx, userID, code, codeContent, duration)",
      "115:   return",
      "117:  es.Send(ctx, toEmailAddr, subject, body)",
      "",
      "---------------"
    ],
    "internal/service/notification/invite_answer_notification.go||internal/service/notification/invite_answer_notification.go": [
      "File: internal/service/notification/invite_answer_notification.go -> internal/service/notification/invite_answer_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:  }",
      "76:  ns.emailService.SendAndSaveCodeWithTime(",
      "78: }",
      "",
      "[Removed Lines]",
      "77:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "78:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_answer_notification.go||internal/service/notification/new_answer_notification.go": [
      "File: internal/service/notification/new_answer_notification.go -> internal/service/notification/new_answer_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "74:  }",
      "76:  ns.emailService.SendAndSaveCodeWithTime(",
      "78: }",
      "",
      "[Removed Lines]",
      "77:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "78:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_comment_notification.go||internal/service/notification/new_comment_notification.go": [
      "File: internal/service/notification/new_comment_notification.go -> internal/service/notification/new_comment_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "59:   NotificationSources: []constant.NotificationSource{",
      "60:    constant.InboxSource,",
      "61:   },",
      "64:  }",
      "66:  if len(lang) > 0 {",
      "",
      "[Removed Lines]",
      "62:   Email:  email,",
      "63:   UserID: userID,",
      "",
      "[Added Lines]",
      "62:   Email:                    email,",
      "63:   UserID:                   userID,",
      "64:   SkipValidationLatestCode: true,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:  }",
      "75:  ns.emailService.SendAndSaveCodeWithTime(",
      "77: }",
      "",
      "[Removed Lines]",
      "76:   ctx, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "77:   ctx, userID, email, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/notification/new_question_notification.go||internal/service/notification/new_question_notification.go": [
      "File: internal/service/notification/new_question_notification.go -> internal/service/notification/new_question_notification.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "189:    constant.AllNewQuestionSource,",
      "190:    constant.AllNewQuestionForFollowingTagsSource,",
      "191:   },",
      "192:  }",
      "193:  ns.emailService.SendAndSaveCodeWithTime(",
      "195: }",
      "197: func (ns *ExternalNotificationService) syncNewQuestionNotificationToPlugin(ctx context.Context,",
      "",
      "[Removed Lines]",
      "194:   ctx, userInfo.EMail, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "[Added Lines]",
      "192:   SkipValidationLatestCode: true,",
      "195:   ctx, userInfo.ID, userInfo.EMail, title, body, rawData.UnsubscribeCode, codeContent.ToJSONString(), 1*24*time.Hour)",
      "",
      "---------------"
    ],
    "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go": [
      "File: internal/service/siteinfo/siteinfo_service.go -> internal/service/siteinfo/siteinfo_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "274:   if err != nil {",
      "275:    return err",
      "276:   }",
      "278:  }",
      "279:  return nil",
      "280: }",
      "",
      "[Removed Lines]",
      "277:   go s.emailService.SendAndSaveCode(ctx, req.TestEmailRecipient, title, body, \"\", \"\")",
      "",
      "[Added Lines]",
      "277:   go s.emailService.Send(ctx, req.TestEmailRecipient, title, body)",
      "",
      "---------------"
    ],
    "internal/service/user_admin/user_backyard.go||internal/service/user_admin/user_backyard.go": [
      "File: internal/service/user_admin/user_backyard.go -> internal/service/user_admin/user_backyard.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "514: func (us *UserAdminService) GetUserActivation(ctx context.Context, req *schema.GetUserActivationReq) (",
      "515:  resp *schema.GetUserActivationResp, err error) {",
      "517:  if err != nil {",
      "518:   return nil, err",
      "519:  }",
      "",
      "[Removed Lines]",
      "516:  user, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "[Added Lines]",
      "516:  userInfo, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "527:  }",
      "529:  data := &schema.EmailCodeContent{",
      "532:  }",
      "533:  code := uuid.NewString()",
      "535:  resp = &schema.GetUserActivationResp{",
      "536:   ActivationURL: fmt.Sprintf(\"%s/users/account-activation?code=%s\", general.SiteUrl, code),",
      "537:  }",
      "",
      "[Removed Lines]",
      "530:   Email:  user.EMail,",
      "531:   UserID: user.ID,",
      "534:  us.emailService.SaveCode(ctx, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "530:   Email:  userInfo.EMail,",
      "531:   UserID: userInfo.ID,",
      "534:  us.emailService.SaveCode(ctx, userInfo.ID, code, data.ToJSONString())",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "542: func (us *UserAdminService) SendUserActivation(ctx context.Context, req *schema.SendUserActivationReq) (err error) {",
      "544:  if err != nil {",
      "545:   return err",
      "546:  }",
      "",
      "[Removed Lines]",
      "543:  user, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "[Added Lines]",
      "543:  userInfo, exist, err := us.userRepo.GetUserInfo(ctx, req.UserID)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "554:  }",
      "556:  data := &schema.EmailCodeContent{",
      "559:  }",
      "560:  code := uuid.NewString()",
      "563:  verifyEmailURL := fmt.Sprintf(\"%s/users/account-activation?code=%s\", general.SiteUrl, code)",
      "564:  title, body, err := us.emailService.RegisterTemplate(ctx, verifyEmailURL)",
      "565:  if err != nil {",
      "566:   return err",
      "567:  }",
      "569:  return nil",
      "570: }",
      "",
      "[Removed Lines]",
      "557:   Email:  user.EMail,",
      "558:   UserID: user.ID,",
      "561:  us.emailService.SaveCode(ctx, code, data.ToJSONString())",
      "568:  go us.emailService.SendAndSaveCode(ctx, user.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "557:   Email:  userInfo.EMail,",
      "558:   UserID: userInfo.ID,",
      "567:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ],
    "internal/service/user_external_login/user_external_login_service.go||internal/service/user_external_login/user_external_login_service.go": [
      "File: internal/service/user_external_login/user_external_login_service.go -> internal/service/user_external_login/user_external_login_service.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:  if err != nil {",
      "329:   return nil, err",
      "330:  }",
      "332:  return resp, nil",
      "333: }",
      "",
      "[Removed Lines]",
      "331:  go us.emailService.SendAndSaveCode(ctx, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "[Added Lines]",
      "331:  go us.emailService.SendAndSaveCode(ctx, userInfo.ID, userInfo.EMail, title, body, code, data.ToJSONString())",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f014602ec7a5303a84b9a80458fca0589c7128bb",
      "candidate_info": {
        "commit_hash": "f014602ec7a5303a84b9a80458fca0589c7128bb",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/f014602ec7a5303a84b9a80458fca0589c7128bb",
        "files": [
          "pkg/gravatar/gravatar.go"
        ],
        "message": "feat(user): change the hash way of gravatar",
        "before_after_code_files": [
          "pkg/gravatar/gravatar.go||pkg/gravatar/gravatar.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "pkg/gravatar/gravatar.go||pkg/gravatar/gravatar.go": [
          "File: pkg/gravatar/gravatar.go -> pkg/gravatar/gravatar.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package gravatar",
          "22: import (",
          "24:  \"encoding/hex\"",
          "25:  \"fmt\"",
          "26:  \"net/url\"",
          "27: )",
          "30: func GetAvatarURL(baseURL, email string) string {",
          "34: }",
          "",
          "[Removed Lines]",
          "23:  \"crypto/md5\"",
          "31:  h := md5.New()",
          "32:  h.Write([]byte(email))",
          "33:  return baseURL + hex.EncodeToString(h.Sum(nil))",
          "",
          "[Added Lines]",
          "23:  \"crypto/sha256\"",
          "27:  \"strings\"",
          "32:  hasher := sha256.Sum256([]byte(strings.TrimSpace(email)))",
          "33:  hash := hex.EncodeToString(hasher[:])",
          "34:  return baseURL + hash",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a2ab45c4b9c57dcdb1371a762be0290c4e0a572",
      "candidate_info": {
        "commit_hash": "2a2ab45c4b9c57dcdb1371a762be0290c4e0a572",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/2a2ab45c4b9c57dcdb1371a762be0290c4e0a572",
        "files": [
          "internal/base/conf/conf.go"
        ],
        "message": "refactor(conf): go fmt conf.go",
        "before_after_code_files": [
          "internal/base/conf/conf.go||internal/base/conf/conf.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "internal/base/conf/conf.go||internal/base/conf/conf.go": [
          "File: internal/base/conf/conf.go -> internal/base/conf/conf.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: }",
          "49: type envConfigOverrides struct {",
          "51:  SwaggerAddressPort string",
          "54: }",
          "56: func loadEnvs() (envOverrides *envConfigOverrides) {",
          "57:  return &envConfigOverrides{",
          "61:  }",
          "62: }",
          "",
          "[Removed Lines]",
          "50:  SwaggerHost         string",
          "53:  SiteAddr string",
          "58:   SwaggerHost:         os.Getenv(\"SWAGGER_HOST\"),",
          "59:   SwaggerAddressPort:  os.Getenv(\"SWAGGER_ADDRESS_PORT\"),",
          "60:   SiteAddr:            os.Getenv(\"SITE_ADDR\"),",
          "",
          "[Added Lines]",
          "50:  SwaggerHost        string",
          "52:  SiteAddr           string",
          "57:   SwaggerHost:        os.Getenv(\"SWAGGER_HOST\"),",
          "58:   SwaggerAddressPort: os.Getenv(\"SWAGGER_ADDRESS_PORT\"),",
          "59:   SiteAddr:           os.Getenv(\"SITE_ADDR\"),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bf4f8a70dce67dba111b523a7823a519daecb498",
      "candidate_info": {
        "commit_hash": "bf4f8a70dce67dba111b523a7823a519daecb498",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/bf4f8a70dce67dba111b523a7823a519daecb498",
        "files": [
          "ui/template/footer.html",
          "ui/template/header.html"
        ],
        "message": "fix(template): add template HTML",
        "before_after_code_files": [
          "ui/template/footer.html||ui/template/footer.html",
          "ui/template/header.html||ui/template/header.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/template/footer.html||ui/template/footer.html": [
          "File: ui/template/footer.html -> ui/template/footer.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         </footer>",
          "32:     </div>",
          "33: <!--customize_footer-->",
          "35: <!--customize_footer-->",
          "36: </body>",
          "37: </html>",
          "",
          "[Removed Lines]",
          "34: {{if .FooterCode }}{{.FooterCode}}{{end}}",
          "",
          "[Added Lines]",
          "34: {{if .FooterCode }}{{.FooterCode | templateHTML}}{{end}}",
          "",
          "---------------"
        ],
        "ui/template/header.html||ui/template/header.html": [
          "File: ui/template/header.html -> ui/template/header.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:             content=\"{{if $.siteinfo.Branding.Favicon }}{{$.siteinfo.Branding.Favicon}}{{else}}{{$.baseURL}}/favicon.ico{{end}}\"}",
          "78:     />",
          "79:     <!--customize_head-->",
          "81:     <!--customize_head-->",
          "82:   </head>",
          "84:   <body>",
          "85:     <!--customize_header-->",
          "87:     <!--customize_header-->",
          "88:     <div id=\"root\">",
          "",
          "[Removed Lines]",
          "80:     {{if .HeadCode }} {{.HeadCode}} {{end}}",
          "86:     {{if .HeaderCode }} {{.HeaderCode}} {{end}}",
          "",
          "[Added Lines]",
          "80:     {{if .HeadCode }} {{.HeadCode | templateHTML}} {{end}}",
          "86:     {{if .HeaderCode }} {{.HeaderCode | templateHTML}} {{end}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "912bc7a8f56e1861abb7a7bab92d36012aa6b622",
      "candidate_info": {
        "commit_hash": "912bc7a8f56e1861abb7a7bab92d36012aa6b622",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/912bc7a8f56e1861abb7a7bab92d36012aa6b622",
        "files": [
          "ui/template/footer.html",
          "ui/template/header.html"
        ],
        "message": "feat(template): add custom html in template #895",
        "before_after_code_files": [
          "ui/template/footer.html||ui/template/footer.html",
          "ui/template/header.html||ui/template/header.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ui/template/footer.html||ui/template/footer.html": [
          "File: ui/template/footer.html -> ui/template/footer.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:             </div>",
          "31:         </footer>",
          "32:     </div>",
          "33: </body>",
          "34: </html>",
          "35: {{end}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: <!--customize_footer-->",
          "34: {{if .FooterCode }}{{.FooterCode}}{{end}}",
          "35: <!--customize_footer-->",
          "",
          "---------------"
        ],
        "ui/template/header.html||ui/template/header.html": [
          "File: ui/template/header.html -> ui/template/header.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:             name=\"twitter:image\"",
          "77:             content=\"{{if $.siteinfo.Branding.Favicon }}{{$.siteinfo.Branding.Favicon}}{{else}}{{$.baseURL}}/favicon.ico{{end}}\"}",
          "78:     />",
          "79:   </head>",
          "81:   <body>",
          "82:     <div id=\"root\">",
          "84:       <div id=\"spin-mask\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     <!--customize_head-->",
          "80:     {{if .HeadCode }} {{.HeadCode}} {{end}}",
          "81:     <!--customize_head-->",
          "85:     <!--customize_header-->",
          "86:     {{if .HeaderCode }} {{.HeaderCode}} {{end}}",
          "87:     <!--customize_header-->",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c4318f1d18f96d73b9e2b90458f8ad5c2ece62e0",
      "candidate_info": {
        "commit_hash": "c4318f1d18f96d73b9e2b90458f8ad5c2ece62e0",
        "repo": "apache/incubator-answer",
        "commit_url": "https://github.com/apache/incubator-answer/commit/c4318f1d18f96d73b9e2b90458f8ad5c2ece62e0",
        "files": [
          "internal/service/siteinfo/siteinfo_service.go"
        ],
        "message": "feat(tag): recommend tags can't contain reserved tag",
        "before_after_code_files": [
          "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/answer/pull/1050"
        ],
        "olp_code_files": {
          "patch": [
            "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go"
          ],
          "candidate": [
            "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/service/siteinfo/siteinfo_service.go||internal/service/siteinfo/siteinfo_service.go": [
          "File: internal/service/siteinfo/siteinfo_service.go -> internal/service/siteinfo/siteinfo_service.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: func (s *SiteInfoService) SaveSiteWrite(ctx context.Context, req *schema.SiteWriteReq) (resp interface{}, err error) {",
          "183:  recommendTags, reservedTags := make([]string, 0), make([]string, 0)",
          "187:  for _, tag := range req.ReservedTags {",
          "189:  }",
          "190:  errData, err := s.tagCommonService.SetSiteWriteTag(ctx, recommendTags, reservedTags, req.UserID)",
          "191:  if err != nil {",
          "",
          "[Removed Lines]",
          "184:  for _, tag := range req.RecommendTags {",
          "185:   recommendTags = append(recommendTags, tag.SlugName)",
          "186:  }",
          "188:   reservedTags = append(reservedTags, tag.SlugName)",
          "",
          "[Added Lines]",
          "184:  recommendTagMapping, reservedTagMapping := make(map[string]bool), make(map[string]bool)",
          "186:   if !recommendTagMapping[tag.SlugName] {",
          "187:    reservedTagMapping[tag.SlugName] = true",
          "188:    reservedTags = append(reservedTags, tag.SlugName)",
          "189:   }",
          "190:  }",
          "193:  for _, tag := range req.RecommendTags {",
          "194:   if reservedTagMapping[tag.SlugName] {",
          "195:    continue",
          "196:   }",
          "197:   if !recommendTagMapping[tag.SlugName] {",
          "198:    recommendTagMapping[tag.SlugName] = true",
          "199:    recommendTags = append(recommendTags, tag.SlugName)",
          "200:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}