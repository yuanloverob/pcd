{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8e7fbcd4f5a04a3f50f9a99b6b4be46218f5898c",
      "candidate_info": {
        "commit_hash": "8e7fbcd4f5a04a3f50f9a99b6b4be46218f5898c",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8e7fbcd4f5a04a3f50f9a99b6b4be46218f5898c",
        "files": [
          "ambari-web/app/controllers/installer.js"
        ],
        "message": "AMBARI-25096 Cluster Installation fails when installing the cluster via Redhat satellite repositories (no internet connectivity Cluster) (asnaik)",
        "before_after_code_files": [
          "ambari-web/app/controllers/installer.js||ambari-web/app/controllers/installer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/installer.js||ambari-web/app/controllers/installer.js": [
          "File: ambari-web/app/controllers/installer.js -> ambari-web/app/controllers/installer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "848:       if (!verifyBaseUrl) {",
          "849:         dfd.resolve();",
          "850:       }",
          "851:       selectedStack.get('operatingSystems').forEach(function (os) {",
          "853:           os.get('repositories').forEach(function (repo) {",
          "854:             if (repo.get('showRepo')) {",
          "855:               repo.setProperties({",
          "",
          "[Removed Lines]",
          "852:         if (os.get('isSelected') && !os.get('isEmpty')) {",
          "",
          "[Added Lines]",
          "852:       var useRedhatSatellite = wizardStep1Controller.get('selectedStack.useRedhatSatellite');",
          "854:         if (os.get('isSelected') && (useRedhatSatellite || !os.get('isEmpty'))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31b96f1f3d95d1293643a0e9abd2ff2cab144f45",
      "candidate_info": {
        "commit_hash": "31b96f1f3d95d1293643a0e9abd2ff2cab144f45",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/31b96f1f3d95d1293643a0e9abd2ff2cab144f45",
        "files": [
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java"
        ],
        "message": "[AMBARI-24556] Aggregation across clusters are not being done in AMS for even when multiple cluster support is enabled. (#2313)",
        "before_after_code_files": [
          "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java||ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java": [
          "File: ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java -> ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     }",
          "103:     if (Boolean.valueOf(metricsConf.get(TIMELINE_METRICS_SUPPORT_MULTIPLE_CLUSTERS, \"false\"))) {",
          "106:       this.timelineMetricReadHelper = new TimelineMetricReadHelper(metadataManager);",
          "107:     }",
          "108:   }",
          "",
          "[Removed Lines]",
          "104:       this.timelineMetricReadHelper = new TimelineMetricReadHelper(metadataManager, true);",
          "105:     } else {",
          "",
          "[Added Lines]",
          "105:     } else {",
          "106:       this.timelineMetricReadHelper = new TimelineMetricReadHelper(metadataManager, true);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ed83a02e000eb6137ee96be7fa61c0c86f96ab9",
      "candidate_info": {
        "commit_hash": "8ed83a02e000eb6137ee96be7fa61c0c86f96ab9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8ed83a02e000eb6137ee96be7fa61c0c86f96ab9",
        "files": [
          "ambari-web/app/controllers/main/service/reassign/step3_controller.js",
          "ambari-web/app/controllers/main/service/reassign_controller.js",
          "ambari-web/app/utils/configs/move_hm_config_initializer.js"
        ],
        "message": "AMBARI-25248. Hive service check is failing after moving Hive Metastore from node to another using system tests. (ababiichuk)",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/service/reassign/step3_controller.js||ambari-web/app/controllers/main/service/reassign/step3_controller.js",
          "ambari-web/app/controllers/main/service/reassign_controller.js||ambari-web/app/controllers/main/service/reassign_controller.js",
          "ambari-web/app/utils/configs/move_hm_config_initializer.js||ambari-web/app/utils/configs/move_hm_config_initializer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/service/reassign/step3_controller.js||ambari-web/app/controllers/main/service/reassign/step3_controller.js": [
          "File: ambari-web/app/controllers/main/service/reassign/step3_controller.js -> ambari-web/app/controllers/main/service/reassign/step3_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:           this.get('propertiesToChange')[type].forEach(function (property) {",
          "372:             var propertyName = property.name,",
          "373:               stackProperty = App.configsCollection.getConfigByName(propertyName, type) || {},",
          "374:               displayedProperty = App.ServiceConfigProperty.create({",
          "375:                 name: propertyName,",
          "377:                 fileName: type",
          "378:               }, stackProperty, {",
          "379:                 value: configs[type][propertyName],",
          "380:                 category: serviceName,",
          "381:                 isEditable: Boolean(stackProperty.isEditable !== false && !property.isSecure)",
          "382:               });",
          "383:             displayedConfigs.push(displayedProperty);",
          "",
          "[Removed Lines]",
          "376:                 displayName: propertyName,",
          "",
          "[Added Lines]",
          "374:               displayName = self.getDisplayName(stackProperty.displayName, propertyName, type, serviceName),",
          "381:                 displayName,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "392:     });",
          "393:   },",
          "395:   onLoadConfigs: function (data) {",
          "397:     var hawqSiteIndex = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "396:   getDisplayName: function (stackDisplayName, propertyName, type, serviceName) {",
          "397:     let displayName = stackDisplayName || propertyName;",
          "398:     const keys = Em.keys(this.get('propertiesToChange'));",
          "399:     for (let i = 0; i < keys.length; i++) {",
          "400:       const fileName = keys[i],",
          "401:           service = App.config.get('serviceByConfigTypeMap')[fileName];",
          "402:       if (fileName !== type && service && service.get('serviceName') === serviceName) {",
          "403:         const configs = this.get('propertiesToChange')[fileName];",
          "404:         if (configs.someProperty('name', propertyName)) {",
          "405:           displayName = `${type}/${propertyName}`;",
          "406:           break;",
          "407:         }",
          "408:       }",
          "409:     }",
          "410:     return displayName;",
          "411:   },",
          "",
          "---------------"
        ],
        "ambari-web/app/controllers/main/service/reassign_controller.js||ambari-web/app/controllers/main/service/reassign_controller.js": [
          "File: ambari-web/app/controllers/main/service/reassign_controller.js -> ambari-web/app/controllers/main/service/reassign_controller.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "158:     'APP_TIMELINE_SERVER': ['yarn-site', 'yarn-env'],",
          "159:     'OOZIE_SERVER': ['oozie-site', 'core-site', 'oozie-env'],",
          "160:     'HIVE_SERVER': ['hive-site', 'webhcat-site', 'hive-env', 'core-site'],",
          "162:     'MYSQL_SERVER': ['hive-site'],",
          "163:     'HISTORYSERVER': ['mapred-site'],",
          "164:     'TIMELINE_READER' : ['yarn-site']",
          "",
          "[Removed Lines]",
          "161:     'HIVE_METASTORE': ['hive-site', 'webhcat-site', 'hive-env', 'core-site'],",
          "",
          "[Added Lines]",
          "161:     'HIVE_METASTORE': ['hive-site', 'webhcat-site', 'hive-env', 'core-site', 'hive-interactive-site'],",
          "",
          "---------------"
        ],
        "ambari-web/app/utils/configs/move_hm_config_initializer.js||ambari-web/app/utils/configs/move_hm_config_initializer.js": [
          "File: ambari-web/app/utils/configs/move_hm_config_initializer.js -> ambari-web/app/utils/configs/move_hm_config_initializer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   _initHiveMetastoreUris: function (configProperty, localDB, dependencies) {",
          "64:     return configProperty;",
          "65:   },",
          "",
          "[Removed Lines]",
          "50:     if (App.config.getConfigTagFromFileName(Em.get(configProperty, 'filename')) === 'hive-site') {",
          "51:       var hiveMSHosts = this.__getHmHostsConsideringMoved(localDB, dependencies);",
          "53:       var value = Em.get(configProperty, 'value');",
          "55:       var port = value.match(/:[0-9]{2,4}/);",
          "56:       port = port ? port[0].slice(1) : '9083';",
          "58:       value = hiveMSHosts.uniq().map(function (hiveMSHost) {",
          "59:         return 'thrift://' + hiveMSHost + ':' + port;",
          "60:       }).join(',');",
          "62:       Em.set(configProperty, 'value', value);",
          "63:     }",
          "",
          "[Added Lines]",
          "50:     var hiveMSHosts = this.__getHmHostsConsideringMoved(localDB, dependencies);",
          "52:     var value = Em.get(configProperty, 'value');",
          "54:     var port = value.match(/:[0-9]{2,4}/);",
          "55:     port = port ? port[0].slice(1) : '9083';",
          "57:     value = hiveMSHosts.uniq().map(function (hiveMSHost) {",
          "58:       return 'thrift://' + hiveMSHost + ':' + port;",
          "59:     }).join(',');",
          "61:     Em.set(configProperty, 'value', value);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1b5c998d97e42929e91a8b23b71a803cb21d9ab",
      "candidate_info": {
        "commit_hash": "c1b5c998d97e42929e91a8b23b71a803cb21d9ab",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/c1b5c998d97e42929e91a8b23b71a803cb21d9ab",
        "files": [
          "setup.py"
        ],
        "message": "AMBARI-24558. ADDENDUM: add missing ambari_jinja2 modules + install required dependencies for testing",
        "before_after_code_files": [
          "setup.py||setup.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.py||setup.py": [
          "File: setup.py -> setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: def get_ambari_server_stack_package():",
          "31:   return [\"stacks.utils\"]",
          "33: def create_package_dir_map():",
          "34:   package_dirs = {}",
          "35:   ambari_common_packages = get_ambari_common_packages()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: def get_extra_common_packages():",
          "34:   return [\"urlinfo_processor\", \"ambari_jinja2\", \"ambari_jinja2._markupsafe\"]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   ambari_server_packages = get_ambari_server_stack_package()",
          "40:   for ambari_server_package in ambari_server_packages:",
          "41:     package_dirs[ambari_server_package] = AMBARI_SERVER_TEST_PYTHON_FOLDER + '/' + ambari_server_package.replace(\".\", \"/\")",
          "42:   return package_dirs",
          "43: __version__ = \"3.0.0.dev0\"",
          "44: def get_version():",
          "45:   ambari_version = os.environ[\"AMBARI_VERSION\"] if \"AMBARI_VERSION\" in os.environ else __version__",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:   package_dirs[\"ambari_jinja2\"] = AMBARI_COMMON_PYTHON_FOLDER + \"/ambari_jinja2/ambari_jinja2\"",
          "46:   package_dirs[\"ambari_jinja2._markupsafe\"] = AMBARI_COMMON_PYTHON_FOLDER + \"/ambari_jinja2/ambari_jinja2/_markupsafe\"",
          "47:   package_dirs[\"urlinfo_processor\"] = AMBARI_COMMON_PYTHON_FOLDER + \"/urlinfo_processor\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:   license = \"AP2\",",
          "70:   keywords = \"hadoop, ambari\",",
          "71:   url = \"https://ambari.apache.org\",",
          "73:   package_dir = create_package_dir_map(),",
          "74:   include_package_data = True,",
          "75:   long_description=\"The Apache Ambari project is aimed at making Hadoop management simpler by developing software for provisioning, managing, and monitoring Apache Hadoop clusters. \"",
          "76:                    \"Ambari provides an intuitive, easy-to-use Hadoop management web UI backed by its RESTful APIs.\"",
          "",
          "[Removed Lines]",
          "72:   packages = get_ambari_common_packages() + get_ambari_server_stack_package(),",
          "",
          "[Added Lines]",
          "80:   packages = get_ambari_common_packages() + get_ambari_server_stack_package() + get_extra_common_packages(),",
          "82:   install_requires=[",
          "83:    'mock==1.0.1',",
          "84:    'coilmq==1.0.1'",
          "85:   ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4557c66df571a04ed4c4d487542c16960d9eadd",
      "candidate_info": {
        "commit_hash": "a4557c66df571a04ed4c4d487542c16960d9eadd",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a4557c66df571a04ed4c4d487542c16960d9eadd",
        "files": [
          "ambari-server/src/main/python/ambari_server/serverConfiguration.py"
        ],
        "message": "AMBARI-25413 Ambari is changing the truststore permission from 444/644 to 640. (santal) (#3150)",
        "before_after_code_files": [
          "ambari-server/src/main/python/ambari_server/serverConfiguration.py||ambari-server/src/main/python/ambari_server/serverConfiguration.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/python/ambari_server/serverConfiguration.py||ambari-server/src/main/python/ambari_server/serverConfiguration.py": [
          "File: ambari-server/src/main/python/ambari_server/serverConfiguration.py -> ambari-server/src/main/python/ambari_server/serverConfiguration.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "413:     self.MASTER_KEY_FILE_PERMISSIONS = \"640\"",
          "414:     self.CREDENTIALS_STORE_FILE_PERMISSIONS = \"640\"",
          "417:     self.DEFAULT_DB_NAME = \"ambari\"",
          "",
          "[Removed Lines]",
          "415:     self.TRUST_STORE_LOCATION_PERMISSIONS = \"640\"",
          "",
          "[Added Lines]",
          "415:     self.TRUST_STORE_LOCATION_PERMISSIONS = \"644\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}