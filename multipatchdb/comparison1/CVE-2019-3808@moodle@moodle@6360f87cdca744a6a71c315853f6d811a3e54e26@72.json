{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "175b3708c92f3f19529ccab62dcc196c46ba6423",
      "candidate_info": {
        "commit_hash": "175b3708c92f3f19529ccab62dcc196c46ba6423",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/175b3708c92f3f19529ccab62dcc196c46ba6423",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.6dev",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '36';                       // This version's branch.",
          "39: $maturity = MATURITY_ALPHA;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2018082400.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev (Build: 20180824)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2018083100.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "36: $release  = '3.6dev (Build: 20180831)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b57e1c95904080c367e9f185eeb3d290285772e2",
      "candidate_info": {
        "commit_hash": "b57e1c95904080c367e9f185eeb3d290285772e2",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/b57e1c95904080c367e9f185eeb3d290285772e2",
        "files": [
          "admin/settings/h5p.php",
          "admin/settings/top.php",
          "h5p/classes/form/uploadlibraries_form.php",
          "h5p/classes/helper.php",
          "h5p/libraries.php",
          "lang/en/h5p.php",
          "version.php"
        ],
        "message": "MDL-67059 core_h5p: UI to manually upload H5P content type libraries\n\nCo-authored by: Mihail Geshoski <mihail@moodle.com>",
        "before_after_code_files": [
          "admin/settings/h5p.php||admin/settings/h5p.php",
          "admin/settings/top.php||admin/settings/top.php",
          "h5p/classes/form/uploadlibraries_form.php||h5p/classes/form/uploadlibraries_form.php",
          "h5p/classes/helper.php||h5p/classes/helper.php",
          "h5p/libraries.php||h5p/libraries.php",
          "lang/en/h5p.php||lang/en/h5p.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/h5p.php||admin/settings/h5p.php": [
          "File: admin/settings/h5p.php -> admin/settings/h5p.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: defined('MOODLE_INTERNAL') || die();",
          "28: $ADMIN->add('h5p', new admin_externalpage('h5psettings', get_string('h5pmanage', 'core_h5p'),",
          "29:     new moodle_url('/h5p/libraries.php'), ['moodle/site:config', 'moodle/h5p:updatelibraries']));",
          "",
          "---------------"
        ],
        "admin/settings/top.php||admin/settings/top.php": [
          "File: admin/settings/top.php -> admin/settings/top.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: $ADMIN->add('root', new admin_category('analytics', new lang_string('analytics', 'analytics')));",
          "32: $ADMIN->add('root', new admin_category('competencies', new lang_string('competencies', 'core_competency')));",
          "33: $ADMIN->add('root', new admin_category('badges', new lang_string('badges'), empty($CFG->enablebadges)));",
          "34: $ADMIN->add('root', new admin_category('location', new lang_string('location','admin')));",
          "35: $ADMIN->add('root', new admin_category('language', new lang_string('language')));",
          "36: $ADMIN->add('root', new admin_category('messaging', new lang_string('messagingcategory', 'admin')));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: $ADMIN->add('root', new admin_category('h5p', new lang_string('h5p', 'core_h5p')));",
          "",
          "---------------"
        ],
        "h5p/classes/form/uploadlibraries_form.php||h5p/classes/form/uploadlibraries_form.php": [
          "File: h5p/classes/form/uploadlibraries_form.php -> h5p/classes/form/uploadlibraries_form.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_h5p\\form;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "35: class uploadlibraries_form extends \\moodleform {",
          "39:     public function definition() {",
          "40:         $mform = $this->_form;",
          "41:         $mform->addElement('header', 'settingsheader', get_string('uploadlibraries', 'core_h5p'));",
          "43:         $filemanageroptions = array(",
          "44:             'accepted_types' => array('.h5p', '.zip'),",
          "45:             'maxbytes' => 0,",
          "46:             'maxfiles' => 1,",
          "47:             'subdirs' => 0",
          "48:         );",
          "50:         $mform->addElement('filepicker', 'h5ppackage', get_string('h5ppackage', 'core_h5p'),",
          "51:             null, $filemanageroptions);",
          "52:         $mform->addHelpButton('h5ppackage', 'h5ppackage', 'core_h5p');",
          "53:         $mform->addRule('h5ppackage', null, 'required');",
          "55:         $this->add_action_buttons(false, get_string('uploadlibraries', 'core_h5p'));",
          "56:     }",
          "57: }",
          "",
          "---------------"
        ],
        "h5p/classes/helper.php||h5p/classes/helper.php": [
          "File: h5p/classes/helper.php -> h5p/classes/helper.php"
        ],
        "h5p/libraries.php||h5p/libraries.php": [
          "File: h5p/libraries.php -> h5p/libraries.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: require_once(__DIR__ . '/../config.php');",
          "27: require_login(null, false);",
          "29: $context = context_system::instance();",
          "30: require_capability('moodle/h5p:updatelibraries', $context);",
          "32: $pagetitle = get_string('h5pmanage', 'core_h5p');",
          "33: $url = new \\moodle_url(\"/h5p/libraries.php\");",
          "35: $PAGE->set_context($context);",
          "36: $PAGE->set_url($url);",
          "37: $PAGE->set_title($pagetitle);",
          "38: $PAGE->set_pagelayout('admin');",
          "39: $PAGE->set_heading($pagetitle);",
          "41: echo $OUTPUT->header();",
          "42: echo $OUTPUT->heading($pagetitle);",
          "43: echo $OUTPUT->box(get_string('librariesmanagerdescription', 'core_h5p'));",
          "45: $form = new \\core_h5p\\form\\uploadlibraries_form();",
          "46: if ($data = $form->get_data()) {",
          "47:     require_sesskey();",
          "50:     $usercontext = context_user::instance($USER->id);",
          "51:     $fs = get_file_storage();",
          "52:     $files = $fs->get_area_files($usercontext->id, 'user', 'draft', $data->h5ppackage, 'id',",
          "53:         false);",
          "54:     $file = reset($files);",
          "57:     $h5pfactory = new \\core_h5p\\factory();",
          "60:     if (\\core_h5p\\helper::save_h5p($h5pfactory, $file, new stdClass(), false, true) === false) {",
          "61:         echo $OUTPUT->notification(get_string('invalidpackage', 'core_h5p'), 'error');",
          "62:     } else {",
          "63:         echo $OUTPUT->notification(get_string('uploadsuccess', 'core_h5p'), 'success');",
          "64:     }",
          "65: }",
          "66: $form->display();",
          "67: echo $OUTPUT->footer();",
          "",
          "---------------"
        ],
        "lang/en/h5p.php||lang/en/h5p.php": [
          "File: lang/en/h5p.php -> lang/en/h5p.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: $string['h5pfilenotfound'] = 'H5P file not found';",
          "80: $string['h5pinvalidurl'] = 'Invalid H5P content URL.';",
          "81: $string['h5pprivatefile'] = 'This H5P content can\\'t be displayed because you don\\'t have access to the .h5p file.';",
          "82: $string['hideadvanced'] = 'Hide advanced';",
          "83: $string['invalidcontextid'] = 'H5P file not found (invalid contextid)';",
          "84: $string['invalidfile'] = 'File \"{$a->%filename}\" not allowed. Only files with the following extensions are allowed: {$a->%files-allowed}.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: $string['h5pmanage'] = 'Manage H5P content types';",
          "83: $string['h5ppackage'] = 'H5P content type';",
          "84: $string['h5ppackage_help'] = 'An H5P content type is a file with an H5P or ZIP extension containing all libraries required to display the content.';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92: $string['invalidlibraryproperty'] = 'Can\\'t read the property {$a->%property} in {$a->%library}';",
          "93: $string['invalidmainjson'] = 'A valid main h5p.json file is missing';",
          "94: $string['invalidmultiselectoption'] = 'Invalid selected option in multi-select.';",
          "95: $string['invalidselectoption'] = 'Invalid selected option in select.';",
          "96: $string['invalidsemanticsjson'] = 'Invalid semantics.json file has been included in the library {$a->%name}';",
          "97: $string['invalidsemanticstype'] = 'H5P internal error: unknown content type \"{$a->@type}\" in semantics. Removing content!';",
          "98: $string['invalidstring'] = 'Provided string is not valid according to regexp in semantics. (value: \"{$a->%value}\", regexp: \"{$a->%regexp}\")';",
          "99: $string['librarydirectoryerror'] = 'Library directory name must match machineName or machineName-majorVersion.minorVersion (from library.json). (Directory: {$a->%directoryName} , machineName: {$a->%machineName}, majorVersion: {$a->%majorVersion}, minorVersion: {$a->%minorVersion})';",
          "100: $string['license'] = 'License';",
          "101: $string['licenseCC010'] = 'CC0 1.0 Universal (CC0 1.0) Public Domain Dedication';",
          "102: $string['licenseCC010U'] = 'CC0 1.0 Universal';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: $string['invalidpackage'] = 'Invalid H5P content type';",
          "104: $string['librariesmanagerdescription'] = '<p>H5P enables users to create interactive content by providing a range of content types.</p>'.",
          "105:     '<p>To ensure that only trusted H5P content types are used on your site, you need to <i>either</i></p>'.",
          "106:     '<ul><li>Upload H5P content types from h5p.org <i>or</i></li><li>Enable the scheduled task \\'Download available H5P content types from h5p.org</li></ul>'.",
          "107:     '<p>Note that users will only be able to use the H5P content types which are installed on your site.</p>';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155: $string['unpackedFilesExceedsMaxSize'] = 'The total size of the unpacked files exceeds the maximum size allowed. ({$a->%used} > {$a->%max})';",
          "156: $string['updatedlibraries'] = 'Updated {$a->%old} H5P libraries.';",
          "157: $string['updatedlibrary'] = 'Updated {$a->%old} H5P library.';",
          "158: $string['wrongversion'] = 'The version of the H5P library {$a->%machineName} used in this content is not valid. Content contains {$a->%contentLibrary}, but it should be {$a->%semanticsLibrary}.';",
          "159: $string['year'] = 'Year';",
          "160: $string['years'] = 'Year(s)';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166: $string['uploadlibraries'] = 'Upload H5P content types';",
          "167: $string['uploadsuccess'] = 'H5P content types uploaded successfully';",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019110500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019110500.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41bc5aa587a4bb10bd4e9c5d0a2581bc385cd5ab",
      "candidate_info": {
        "commit_hash": "41bc5aa587a4bb10bd4e9c5d0a2581bc385cd5ab",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/41bc5aa587a4bb10bd4e9c5d0a2581bc385cd5ab",
        "files": [
          "lib/moodlelib.php",
          "message/classes/task/migrate_message_data.php",
          "version.php"
        ],
        "message": "MDL-61255 core_message: created task to handle migration of data",
        "before_after_code_files": [
          "lib/moodlelib.php||lib/moodlelib.php",
          "message/classes/task/migrate_message_data.php||message/classes/task/migrate_message_data.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lib/moodlelib.php||lib/moodlelib.php": [
          "File: lib/moodlelib.php -> lib/moodlelib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "4407: function complete_user_login($user) {",
          "4410:     \\core\\session\\manager::login_user($user);",
          "",
          "[Removed Lines]",
          "4408:     global $CFG, $USER, $SESSION;",
          "",
          "[Added Lines]",
          "4408:     global $CFG, $DB, $USER, $SESSION;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4429:     );",
          "4430:     $event->trigger();",
          "4432:     if (isguestuser()) {",
          "4434:         return $USER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4433:     if (!get_user_preferences('core_message_migrate_data', false, $USER->id)) {",
          "4435:         $sql = \"SELECT id",
          "4436:                   FROM {message} m",
          "4437:                  WHERE useridfrom = ?",
          "4438:                     OR useridto = ?\";",
          "4439:         $messageexists = $DB->record_exists_sql($sql, [$USER->id, $USER->id]);",
          "4441:         $sql = \"SELECT id",
          "4442:                   FROM {message_read} m",
          "4443:                  WHERE useridfrom = ?",
          "4444:                     OR useridto = ?\";",
          "4445:         $messagereadexists = $DB->record_exists_sql($sql, [$USER->id, $USER->id]);",
          "4447:         if ($messageexists || $messagereadexists) {",
          "4448:             \\core_message\\task\\migrate_message_data::queue_task($USER->id);",
          "4449:         } else {",
          "4450:             set_user_preference('core_message_migrate_data', true, $USER->id);",
          "4451:         }",
          "4452:     }",
          "",
          "---------------"
        ],
        "message/classes/task/migrate_message_data.php||message/classes/task/migrate_message_data.php": [
          "File: message/classes/task/migrate_message_data.php -> message/classes/task/migrate_message_data.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core_message\\task;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "36: class migrate_message_data extends \\core\\task\\adhoc_task {",
          "41:     public function execute() {",
          "42:         global $DB;",
          "44:         $userid = $this->get_custom_data()->userid;",
          "47:         $hasbeenmigrated = get_user_preferences('core_message_migrate_data', false, $userid);",
          "49:         if (!$hasbeenmigrated) {",
          "51:             $updatepreference = true;",
          "54:             $sql = \"SELECT DISTINCT(useridfrom)",
          "55:                       FROM {message} m",
          "56:                      WHERE useridto = ?",
          "57:                      UNION",
          "58:                     SELECT DISTINCT(useridfrom)",
          "59:                       FROM {message_read} m",
          "60:                      WHERE useridto = ?\";",
          "61:             $users = $DB->get_records_sql($sql, [$userid, $userid]);",
          "64:             $sql = \"SELECT DISTINCT(useridto)",
          "65:                       FROM {message} m",
          "66:                      WHERE useridfrom = ?",
          "67:                      UNION",
          "68:                     SELECT DISTINCT(useridto)",
          "69:                       FROM {message_read} m",
          "70:                      WHERE useridfrom = ?\";",
          "71:             $users = $users + $DB->get_records_sql($sql, [$userid, $userid]);",
          "72:             if (!empty($users)) {",
          "74:                 foreach ($users as $otheruserid => $user) {",
          "75:                     $ids = [$userid, $otheruserid];",
          "76:                     sort($ids);",
          "77:                     $key = implode('_', $ids);",
          "80:                     $timeout = 5; // In seconds.",
          "81:                     $locktype = 'core_message_migrate_data';",
          "84:                     $lockfactory = \\core\\lock\\lock_config::get_lock_factory($locktype);",
          "87:                     if ($lock = $lockfactory->get_lock($key, $timeout)) {",
          "88:                         try {",
          "89:                             $transaction = $DB->start_delegated_transaction();",
          "90:                             $this->migrate_data($userid, $otheruserid);",
          "91:                             $transaction->allow_commit();",
          "92:                         } catch (\\Throwable $e) {",
          "93:                             $updatepreference = false;",
          "94:                         }",
          "96:                         $lock->release();",
          "97:                     } else {",
          "100:                         $updatepreference = false;",
          "101:                         continue;",
          "102:                     }",
          "103:                 }",
          "104:             }",
          "106:             if ($updatepreference) {",
          "107:                 set_user_preference('core_message_migrate_data', true, $userid);",
          "108:             } else {",
          "110:                 throw new \\moodle_exception('Task failed.');",
          "111:             }",
          "112:         }",
          "113:     }",
          "122:     private function migrate_data($userid, $otheruserid) {",
          "123:         global $DB;",
          "125:         if (!$conversationid = \\core_message\\api::get_conversation_between_users([$userid, $otheruserid])) {",
          "126:             $conversationid = \\core_message\\api::create_conversation_between_users([$userid, $otheruserid]);",
          "127:         }",
          "130:         $select = \"(useridfrom = ? AND useridto = ?) OR (useridfrom = ? AND useridto = ?)\";",
          "131:         $params = [$userid, $otheruserid, $otheruserid, $userid];",
          "132:         $messages = $DB->get_recordset_select('message', $select, $params, 'id ASC');",
          "133:         foreach ($messages as $message) {",
          "134:             if ($message->notification) {",
          "135:                 $this->migrate_notification($message);",
          "136:             } else {",
          "137:                 $this->migrate_message($conversationid, $message);",
          "138:             }",
          "139:         }",
          "140:         $messages->close();",
          "143:         $DB->delete_records_select('message', $select, $params);",
          "146:         $messages = $DB->get_recordset_select('message_read', $select, $params, 'id ASC');",
          "147:         foreach ($messages as $message) {",
          "148:             if ($message->notification) {",
          "149:                 $this->migrate_notification($message);",
          "150:             } else {",
          "151:                 $this->migrate_message($conversationid, $message);",
          "152:             }",
          "153:         }",
          "154:         $messages->close();",
          "157:         $DB->delete_records_select('message_read', $select, $params);",
          "158:     }",
          "166:     private function migrate_notification($notification) {",
          "167:         global $DB;",
          "169:         $tabledata = new \\stdClass();",
          "170:         $tabledata->useridfrom = $notification->useridfrom;",
          "171:         $tabledata->useridto = $notification->useridto;",
          "172:         $tabledata->subject = $notification->subject;",
          "173:         $tabledata->fullmessage = $notification->fullmessage;",
          "174:         $tabledata->fullmessageformat = $notification->fullmessageformat;",
          "175:         $tabledata->fullmessagehtml = $notification->fullmessagehtml;",
          "176:         $tabledata->smallmessage = $notification->smallmessage;",
          "177:         $tabledata->component = $notification->component;",
          "178:         $tabledata->eventtype = $notification->eventtype;",
          "179:         $tabledata->contexturl = $notification->contexturl;",
          "180:         $tabledata->contexturlname = $notification->contexturlname;",
          "181:         $tabledata->timeread = $notification->timeread ?? null;",
          "182:         $tabledata->timecreated = $notification->timecreated;",
          "184:         $DB->insert_record('notifications', $tabledata);",
          "185:     }",
          "194:     private function migrate_message($conversationid, $message) {",
          "195:         global $DB;",
          "198:         $tabledata = new \\stdClass();",
          "199:         $tabledata->useridfrom = $message->useridfrom;",
          "200:         $tabledata->conversationid = $conversationid;",
          "201:         $tabledata->subject = $message->subject;",
          "202:         $tabledata->fullmessage = $message->fullmessage;",
          "203:         $tabledata->fullmessageformat = $message->fullmessageformat;",
          "204:         $tabledata->fullmessagehtml = $message->fullmessagehtml;",
          "205:         $tabledata->smallmessage = $message->smallmessage;",
          "206:         $tabledata->timecreated = $message->timecreated;",
          "208:         $messageid = $DB->insert_record('messages', $tabledata);",
          "211:         if ($message->timeuserfromdeleted) {",
          "212:             $mua = new \\stdClass();",
          "213:             $mua->userid = $message->useridfrom;",
          "214:             $mua->messageid = $messageid;",
          "215:             $mua->action = \\core_message\\api::MESSAGE_ACTION_DELETED;",
          "216:             $mua->timecreated = $message->timeuserfromdeleted;",
          "218:             $DB->insert_record('message_user_actions', $mua);",
          "219:         }",
          "222:         if ($message->timeusertodeleted) {",
          "223:             $mua = new \\stdClass();",
          "224:             $mua->userid = $message->useridto;",
          "225:             $mua->messageid = $messageid;",
          "226:             $mua->action = \\core_message\\api::MESSAGE_ACTION_DELETED;",
          "227:             $mua->timecreated = $message->timeusertodeleted;",
          "229:             $DB->insert_record('message_user_actions', $mua);",
          "230:         }",
          "234:         if (isset($message->timeread)) {",
          "235:             $mua = new \\stdClass();",
          "236:             $mua->userid = $message->useridto;",
          "237:             $mua->messageid = $messageid;",
          "238:             $mua->action = \\core_message\\api::MESSAGE_ACTION_READ;",
          "239:             $mua->timecreated = $message->timeread;",
          "241:             $DB->insert_record('message_user_actions', $mua);",
          "242:         }",
          "243:     }",
          "250:     public static function queue_task($userid) {",
          "252:         $task = new \\core_message\\task\\migrate_message_data();",
          "253:         $task->set_custom_data(",
          "254:             [",
          "255:                 'userid' => $userid",
          "256:             ]",
          "257:         );",
          "260:         \\core\\task\\manager::queue_adhoc_task($task, true);",
          "261:     }",
          "262: }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018040500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018040900.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7aeeb44463cf1ddf4f34be0d139427da18d91459",
      "candidate_info": {
        "commit_hash": "7aeeb44463cf1ddf4f34be0d139427da18d91459",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/7aeeb44463cf1ddf4f34be0d139427da18d91459",
        "files": [
          "lang/en/error.php",
          "lang/en/moodle.php",
          "lib/ajax/service.php",
          "lib/amd/build/ajax.min.js",
          "lib/amd/build/network.min.js",
          "lib/amd/build/page_global.min.js",
          "lib/amd/src/ajax.js",
          "lib/amd/src/network.js",
          "lib/amd/src/page_global.js",
          "lib/classes/session/external.php",
          "lib/classes/session/manager.php",
          "lib/db/services.php",
          "lib/outputrequirementslib.php",
          "lib/sessionkeepalive_ajax.php",
          "lib/upgrade.txt",
          "lib/yui/build/moodle-core-checknet/assets/checknet.txt",
          "lib/yui/build/moodle-core-checknet/moodle-core-checknet-debug.js",
          "lib/yui/build/moodle-core-checknet/moodle-core-checknet-min.js",
          "lib/yui/build/moodle-core-checknet/moodle-core-checknet.js",
          "lib/yui/src/checknet/assets/checknet.txt",
          "lib/yui/src/checknet/build.json",
          "lib/yui/src/checknet/js/checknet.js",
          "lib/yui/src/checknet/meta/checknet.json",
          "mod/scorm/player.php",
          "version.php"
        ],
        "message": "MDL-34498 session: Add a checker to warn before session expiry\n\nReplaces old yui module checknet.",
        "before_after_code_files": [
          "lang/en/error.php||lang/en/error.php",
          "lang/en/moodle.php||lang/en/moodle.php",
          "lib/ajax/service.php||lib/ajax/service.php",
          "lib/amd/src/ajax.js||lib/amd/src/ajax.js",
          "lib/amd/src/network.js||lib/amd/src/network.js",
          "lib/amd/src/page_global.js||lib/amd/src/page_global.js",
          "lib/classes/session/external.php||lib/classes/session/external.php",
          "lib/classes/session/manager.php||lib/classes/session/manager.php",
          "lib/db/services.php||lib/db/services.php",
          "lib/outputrequirementslib.php||lib/outputrequirementslib.php",
          "lib/sessionkeepalive_ajax.php||lib/sessionkeepalive_ajax.php",
          "lib/yui/src/checknet/js/checknet.js||lib/yui/src/checknet/js/checknet.js",
          "mod/scorm/player.php||mod/scorm/player.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/error.php||lang/en/error.php": [
          "File: lang/en/error.php -> lang/en/error.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "496: $string['serverconnection'] = 'Error connecting to the server';",
          "497: $string['servicedonotexist'] = 'The service does not exist';",
          "498: $string['sessionwaiterr'] = 'Timed out while waiting for session lock.<br />Wait for your current requests to finish and try again later.';",
          "499: $string['sessioncookiesdisable'] = 'Incorrect use of require_key_login() - session cookies must be disabled!';",
          "500: $string['sessiondiskfull'] = 'The session partition is full. It is not possible to log in at this time. Please notify the server administrator.';",
          "501: $string['sessionhandlerproblem'] = 'Session handler is misconfigured';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "499: $string['sessionexpired'] = 'Session expired';",
          "",
          "---------------"
        ],
        "lang/en/moodle.php||lang/en/moodle.php": [
          "File: lang/en/moodle.php -> lang/en/moodle.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "802: $string['existingcreators'] = 'Existing course creators';",
          "803: $string['existingstudents'] = 'Enrolled students';",
          "804: $string['existingteachers'] = 'Existing teachers';",
          "805: $string['expand'] = 'Expand';",
          "806: $string['expandall'] = 'Expand all';",
          "807: $string['expandcategory'] = 'Expand {$a}';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "805: $string['extendsession'] = 'Extend session';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1807: $string['separateandconnectedinfo'] = 'The scale based on the theory of separate and connected knowing. This theory describes two different ways that we can evaluate and learn about the things we see and hear.<ul><li><strong>Separate knowers</strong> remain as objective as possible without including feelings and emotions. In a discussion with other people, they like to defend their own ideas, using logic to find holes in opponent\\'s ideas.</li><li><strong>Connected knowers</strong> are more sensitive to other people. They are skilled at empathy and tend to listen and ask questions until they feel they can connect and \"understand things from their point of view\". They learn by trying to share the experiences that led to the knowledge they find in other people.</li></ul>';",
          "1808: $string['servererror'] = 'An error occurred whilst communicating with the server';",
          "1809: $string['serverlocaltime'] = 'Server\\'s local time';",
          "1811: $string['setcategorytheme'] = 'Set category theme';",
          "1812: $string['setpassword'] = 'Set password';",
          "1813: $string['setpasswordinstructions'] = 'Please enter your new password below, then save changes.';",
          "",
          "[Removed Lines]",
          "1810: $string['sessionforceclean'] = 'As a security precaution, user-generated scripts have been disabled within this session.';",
          "",
          "[Added Lines]",
          "1811: $string['sessionforceclean'] = 'As a security precaution, user-generated scripts have been disabled within this session';",
          "1812: $string['sessiontimeoutsoon'] = 'Your session is about to timeout. Do you want to extend your current session?';",
          "",
          "---------------"
        ],
        "lib/ajax/service.php||lib/ajax/service.php": [
          "File: lib/ajax/service.php -> lib/ajax/service.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: define('AJAX_SCRIPT', true);",
          "32: require_once(__DIR__ . '/../../config.php');",
          "33: require_once($CFG->libdir . '/externallib.php');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: if (!empty($_GET['nosessionupdate'])) {",
          "33:     define('NO_SESSION_UPDATE', true);",
          "34: }",
          "",
          "---------------"
        ],
        "lib/amd/src/ajax.js||lib/amd/src/ajax.js": [
          "File: lib/amd/src/ajax.js -> lib/amd/src/ajax.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     var requestSuccess = function(responses) {",
          "49:         if (responses.error) {",
          "",
          "[Removed Lines]",
          "43:         var requests = this;",
          "44:         var exception = null;",
          "45:         var i = 0;",
          "46:         var request;",
          "47:         var response;",
          "",
          "[Added Lines]",
          "43:         var requests = this,",
          "44:             exception = null,",
          "45:             i = 0,",
          "46:             request,",
          "47:             response,",
          "48:             nosessionupdate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:                     request.deferred.resolve(response.data);",
          "70:                 } else {",
          "71:                     exception = response.exception;",
          "72:                     break;",
          "73:                 }",
          "74:             } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:                     nosessionupdate = requests[i].nosessionupdate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:         if (exception !== null) {",
          "84:                 window.location = URL.relativeUrl(\"/login/index.php\");",
          "85:             } else {",
          "86:                 requests.forEach(function(request) {",
          "",
          "[Removed Lines]",
          "83:             if (exception.errorcode === \"servicerequireslogin\") {",
          "",
          "[Added Lines]",
          "85:             if (exception.errorcode === \"servicerequireslogin\" && !nosessionupdate) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "138:             $(window).bind('beforeunload', function() {",
          "139:                 unloading = true;",
          "140:             });",
          "",
          "[Removed Lines]",
          "137:         call: function(requests, async, loginrequired) {",
          "",
          "[Added Lines]",
          "142:         call: function(requests, async, loginrequired, nosessionupdate, timeout) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:             if (typeof async === \"undefined\") {",
          "151:                 async = true;",
          "152:             }",
          "153:             for (i = 0; i < requests.length; i++) {",
          "154:                 var request = requests[i];",
          "155:                 ajaxRequestData.push({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:             if (typeof timeout === 'undefined') {",
          "159:                 timeout = 0;",
          "160:             }",
          "162:             if (typeof nosessionupdate === \"undefined\") {",
          "163:                 nosessionupdate = false;",
          "164:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "157:                     methodname: request.methodname,",
          "158:                     args: request.args",
          "159:                 });",
          "160:                 request.deferred = $.Deferred();",
          "161:                 promises.push(request.deferred.promise());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:                 request.nosessionupdate = nosessionupdate;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "185:                 dataType: 'json',",
          "186:                 processData: false,",
          "187:                 async: async,",
          "189:             };",
          "191:             var script = 'service.php';",
          "",
          "[Removed Lines]",
          "188:                 contentType: \"application/json\"",
          "",
          "[Added Lines]",
          "201:                 contentType: \"application/json\",",
          "202:                 timeout: timeout",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "195:             var url = config.wwwroot + '/lib/ajax/' + script +",
          "196:                     '?sesskey=' + config.sesskey + '&info=' + requestInfo;",
          "199:             if (async) {",
          "200:                 $.ajax(url, settings)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:             if (nosessionupdate) {",
          "213:                 url += '&nosessionupdate=true';",
          "214:             }",
          "",
          "---------------"
        ],
        "lib/amd/src/network.js||lib/amd/src/network.js": [
          "File: lib/amd/src/network.js -> lib/amd/src/network.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: define(['jquery', 'core/ajax', 'core/config', 'core/notification', 'core/str'],",
          "25:         function($, Ajax, Config, Notification, Str) {",
          "27:     var started = false;",
          "28:     var warningDisplayed = false;",
          "29:     var keepAliveFrequency = 0;",
          "30:     var requestTimeout = 0;",
          "31:     var keepAliveMessage = false;",
          "32:     var checkFrequency = (Config.sessiontimeout / 10) * 1000;",
          "33:     var warningLimit = checkFrequency * 2; // 1/5 of sessiontimeout.",
          "40:     var touchSession = function() {",
          "41:         var request = {",
          "42:             methodname: 'core_session_touch',",
          "43:             args: { }",
          "44:         };",
          "46:         return Ajax.call([request], true, true, false, requestTimeout)[0].then(function() {",
          "47:             if (keepAliveFrequency > 0) {",
          "48:                 setTimeout(touchSession, keepAliveFrequency);",
          "49:             }",
          "50:             return true;",
          "51:         }).fail(function() {",
          "52:             Notification.alert('', keepAliveMessage);",
          "53:         });",
          "54:     };",
          "62:     var checkSession = function() {",
          "63:         var request = {",
          "64:             methodname: 'core_session_time_remaining',",
          "65:             args: { }",
          "66:         };",
          "68:         return Ajax.call([request], true, true, true)[0].then(function(args) {",
          "69:             if (args.userid <= 0) {",
          "70:                 return false;",
          "71:             }",
          "72:             if (args.timeremaining < 0) {",
          "73:                 Str.get_strings([",
          "74:                     {key: 'sessionexpired', component: 'error'},",
          "75:                     {key: 'sessionerroruser', component: 'error'}",
          "76:                 ]).then(function(strings) {",
          "77:                     Notification.alert(",
          "78:                         strings[0], // Title.",
          "79:                         strings[1] // Message.",
          "80:                     );",
          "81:                     return true;",
          "82:                 }).fail(Notification.exception);",
          "84:             } else if (args.timeremaining * 1000 < warningLimit && !warningDisplayed) {",
          "85:                 warningDisplayed = true;",
          "86:                 Str.get_strings([",
          "87:                     {key: 'norecentactivity', component: 'moodle'},",
          "88:                     {key: 'sessiontimeoutsoon', component: 'moodle'},",
          "89:                     {key: 'extendsession', component: 'moodle'},",
          "90:                     {key: 'cancel', component: 'moodle'}",
          "91:                 ]).then(function(strings) {",
          "92:                     Notification.confirm(",
          "93:                         strings[0], // Title.",
          "94:                         strings[1], // Message.",
          "95:                         strings[2], // Extend session.",
          "96:                         strings[3], // Cancel.",
          "97:                         function() {",
          "98:                             touchSession();",
          "99:                             warningDisplayed = false;",
          "101:                             setTimeout(checkSession, checkFrequency * 5);",
          "102:                             return true;",
          "103:                         },",
          "104:                         function() {",
          "105:                             warningDisplayed = false;",
          "106:                             setTimeout(checkSession, checkFrequency);",
          "107:                         }",
          "108:                     );",
          "109:                     return true;",
          "110:                 }).fail(Notification.exception);",
          "111:             } else {",
          "112:                 setTimeout(checkSession, checkFrequency);",
          "113:             }",
          "114:             return true;",
          "115:         });",
          "118:     };",
          "123:     var start = function() {",
          "124:         if (keepAliveFrequency > 0) {",
          "125:             setTimeout(touchSession, keepAliveFrequency);",
          "126:         } else {",
          "128:             setTimeout(checkSession, checkFrequency * 5);",
          "129:         }",
          "130:     };",
          "135:     var init = function() {",
          "137:         if (started) {",
          "138:             return;",
          "139:         }",
          "140:         started = true;",
          "142:         start();",
          "143:     };",
          "152:     var keepalive = function(freq, timeout, message) {",
          "154:         if (started) {",
          "155:             return;",
          "156:         }",
          "157:         started = true;",
          "159:         keepAliveFrequency = freq * 1000;",
          "160:         keepAliveMessage = message;",
          "161:         requestTimeout = timeout * 1000;",
          "162:         start();",
          "163:     };",
          "165:     return {",
          "166:         keepalive: keepalive,",
          "167:         init: init",
          "168:     };",
          "169: });",
          "",
          "---------------"
        ],
        "lib/amd/src/page_global.js||lib/amd/src/page_global.js": [
          "File: lib/amd/src/page_global.js -> lib/amd/src/page_global.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     'jquery',",
          "27:     'core/custom_interaction_events',",
          "28:     'core/str',",
          "29: ],",
          "30: function(",
          "31:     $,",
          "32:     CustomEvents,",
          "34: ) {",
          "",
          "[Removed Lines]",
          "33:     Str",
          "",
          "[Added Lines]",
          "29:     'core/network'",
          "34:     Str,",
          "35:     Network",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     var init = function() {",
          "129:         initActionOptionDropdownHandler();",
          "130:     };",
          "132:     return {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:         Network.init();",
          "",
          "---------------"
        ],
        "lib/classes/session/external.php||lib/classes/session/external.php": [
          "File: lib/classes/session/external.php -> lib/classes/session/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "25: namespace core\\session;",
          "27: defined('MOODLE_INTERNAL') || die();",
          "36: class external extends \\external_api {",
          "43:     public static function touch_session_parameters() {",
          "44:         return new \\external_function_parameters([]);",
          "45:     }",
          "52:     public static function touch_session() {",
          "53:         \\core\\session\\manager::touch_session(session_id());",
          "54:         return true;",
          "55:     }",
          "62:     public static function touch_session_returns() {",
          "63:         return new \\external_value(PARAM_BOOL, 'result');",
          "64:     }",
          "71:     public static function time_remaining_parameters() {",
          "72:         return new \\external_function_parameters([]);",
          "73:     }",
          "80:     public static function time_remaining() {",
          "81:         return \\core\\session\\manager::time_remaining(session_id());",
          "82:     }",
          "89:     public static function time_remaining_returns() {",
          "90:         return new \\external_single_structure(array (",
          "91:                 'userid' => new \\external_value(PARAM_INTEGER, 'The current user id.'),",
          "92:                 'timeremaining' => new \\external_value(PARAM_INTEGER, 'The number of seconds remaining in this session.')",
          "93:         ));",
          "94:     }",
          "95: }",
          "",
          "---------------"
        ],
        "lib/classes/session/manager.php||lib/classes/session/manager.php": [
          "File: lib/classes/session/manager.php -> lib/classes/session/manager.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "364:             }",
          "366:             if ($timeout) {",
          "367:                 session_regenerate_id(true);",
          "368:                 $_SESSION = array();",
          "369:                 $DB->delete_records('sessions', array('id'=>$record->id));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:                 if (defined('NO_SESSION_UPDATE') && NO_SESSION_UPDATE) {",
          "368:                     return;",
          "369:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:                     $updated = true;",
          "399:                 }",
          "402:                     $update->id = $record->id;",
          "403:                     $DB->update_record('sessions', $update);",
          "404:                 }",
          "",
          "[Removed Lines]",
          "401:                 if ($updated) {",
          "",
          "[Added Lines]",
          "404:                 if ($updated && (!defined('NO_SESSION_UPDATE') || !NO_SESSION_UPDATE)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "632:         return self::$handler->session_exists($sid);",
          "633:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642:     public static function time_remaining($sid) {",
          "643:         global $DB, $CFG;",
          "645:         if (empty($CFG->version)) {",
          "647:             return ['userid' => 0, 'timeremaining' => $CFG->sessiontimeout];",
          "648:         }",
          "651:         if (!$record = $DB->get_record('sessions', array('sid' => $sid), 'id, userid, timemodified')) {",
          "652:             return ['userid' => 0, 'timeremaining' => $CFG->sessiontimeout];",
          "653:         }",
          "655:         if (empty($record->userid) or isguestuser($record->userid)) {",
          "657:             return ['userid' => 0, 'timeremaining' => $CFG->sessiontimeout];",
          "658:         } else {",
          "659:             return ['userid' => $record->userid, 'timeremaining' => $CFG->sessiontimeout - (time() - $record->timemodified)];",
          "660:         }",
          "661:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "961:         global $CFG, $PAGE;",
          "963:         if ($frequency) {",
          "",
          "[Removed Lines]",
          "960:     public static function keepalive($identifier = 'sessionerroruser', $component = 'error', $frequency = null) {",
          "",
          "[Added Lines]",
          "989:     public static function keepalive($identifier = 'sessionerroruser', $component = 'error', $frequency = null, $timeout = 0) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "966:                 throw new \\coding_exception('Keepalive frequency is longer than the session lifespan.');",
          "967:             }",
          "968:         } else {",
          "982:     }",
          "",
          "[Removed Lines]",
          "970:             $frequency = $CFG->sessiontimeout / 3;",
          "971:         }",
          "974:         $sessionkeepaliveurl = new \\moodle_url('/lib/sessionkeepalive_ajax.php');",
          "975:         $PAGE->requires->string_for_js($identifier, $component);",
          "976:         $PAGE->requires->yui_module('moodle-core-checknet', 'M.core.checknet.init', array(array(",
          "978:             'frequency' => $frequency * 1000,",
          "979:             'message' => array($identifier, $component),",
          "980:             'uri' => $sessionkeepaliveurl->out(),",
          "981:         )));",
          "",
          "[Added Lines]",
          "999:             $frequency = $CFG->sessiontimeout / 10;",
          "1000:         }",
          "1002:         $PAGE->requires->js_call_amd('core/network', 'keepalive', array(",
          "1003:                 $frequency,",
          "1004:                 $timeout,",
          "1005:                 get_string($identifier, $component)",
          "1006:             ));",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "677:         'loginrequired' => false,",
          "678:         'ajax' => true,",
          "679:     ),",
          "680:     'core_files_get_files' => array(",
          "681:         'classname' => 'core_files_external',",
          "682:         'methodname' => 'get_files',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "680:     'core_session_touch' => array(",
          "681:         'classname' => 'core\\session\\external',",
          "682:         'methodname' => 'touch_session',",
          "683:         'description' => 'Keep the users session alive',",
          "684:         'type' => 'read',",
          "685:         'loginrequired' => true,",
          "686:         'ajax' => true,",
          "687:     ),",
          "688:     'core_session_time_remaining' => array(",
          "689:         'classname' => 'core\\session\\external',",
          "690:         'methodname' => 'time_remaining',",
          "691:         'description' => 'Count the seconds remaining in this session',",
          "692:         'type' => 'read',",
          "693:         'loginrequired' => true,",
          "694:         'ajax' => true,",
          "695:     ),",
          "",
          "---------------"
        ],
        "lib/outputrequirementslib.php||lib/outputrequirementslib.php": [
          "File: lib/outputrequirementslib.php -> lib/outputrequirementslib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:             $this->M_cfg = array(",
          "322:                 'wwwroot'             => $CFG->wwwroot,",
          "323:                 'sesskey'             => sesskey(),",
          "324:                 'themerev'            => theme_get_revision(),",
          "325:                 'slasharguments'      => (int)(!empty($CFG->slasharguments)),",
          "326:                 'theme'               => $page->theme->name,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "324:                 'sessiontimeout'      => $CFG->sessiontimeout,",
          "",
          "---------------"
        ],
        "lib/sessionkeepalive_ajax.php||lib/sessionkeepalive_ajax.php": [
          "File: lib/sessionkeepalive_ajax.php -> lib/sessionkeepalive_ajax.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/yui/src/checknet/js/checknet.js||lib/yui/src/checknet/js/checknet.js": [
          "File: lib/yui/src/checknet/js/checknet.js -> lib/yui/src/checknet/js/checknet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "mod/scorm/player.php||mod/scorm/player.php": [
          "File: mod/scorm/player.php -> mod/scorm/player.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "282:     include_once($CFG->dirroot.'/mod/scorm/datamodels/scorm_12.php');",
          "283: }",
          "295: echo $OUTPUT->footer();",
          "",
          "[Removed Lines]",
          "286: $PAGE->requires->string_for_js('networkdropped', 'mod_scorm');",
          "288: $args = array(",
          "289:     'message' => array('networkdropped', 'mod_scorm'),",
          "290:     'frequency' => 30000, // Frequency of network check.",
          "291:     'timeout' => 10000, // Timeout of network check.",
          "292:     'maxalerts' => 1 // Max number of alerts to be thrown.",
          "293: );",
          "294: $PAGE->requires->yui_module('moodle-core-checknet', 'M.core.checknet.init', array($args));",
          "",
          "[Added Lines]",
          "286: \\core\\session\\manager::keepalive('networkdropped', 'mod_scorm', 30, 10);",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019053000.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019060600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23d6756256a2602dbc17cc9c0af83d12b02bb0f5",
      "candidate_info": {
        "commit_hash": "23d6756256a2602dbc17cc9c0af83d12b02bb0f5",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/23d6756256a2602dbc17cc9c0af83d12b02bb0f5",
        "files": [
          "admin/settings/server.php",
          "lang/en/admin.php",
          "lib/cronlib.php",
          "version.php"
        ],
        "message": "MDL-64347 task: Add restrictions to scheduled task runner",
        "before_after_code_files": [
          "admin/settings/server.php||admin/settings/server.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lib/cronlib.php||lib/cronlib.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/server.php||admin/settings/server.php": [
          "File: admin/settings/server.php -> admin/settings/server.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: $ADMIN->add('server', new admin_category('taskconfig', new lang_string('taskadmintitle', 'admin')));",
          "215: $temp = new admin_settingpage('taskprocessing', new lang_string('taskprocessing','admin'));",
          "216: $temp->add(",
          "217:     new admin_setting_configtext(",
          "218:         'task_adhoc_concurrency_limit',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216: $temp->add(",
          "217:     new admin_setting_configtext(",
          "218:         'task_scheduled_concurrency_limit',",
          "219:         new lang_string('task_scheduled_concurrency_limit', 'admin'),",
          "220:         new lang_string('task_scheduled_concurrency_limit_desc', 'admin'),",
          "221:         3,",
          "222:         PARAM_INT",
          "223:     )",
          "224: );",
          "226: $temp->add(",
          "227:     new admin_setting_configduration(",
          "228:         'task_scheduled_max_runtime',",
          "229:         new lang_string('task_scheduled_max_runtime', 'admin'),",
          "230:         new lang_string('task_scheduled_max_runtime_desc', 'admin'),",
          "231:         30 * MINSECS",
          "232:     )",
          "233: );",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1165: $string['tabselectedtofront'] = 'On tables with tabs, should the row with the currently selected tab be placed at the front';",
          "1166: $string['tabselectedtofronttext'] = 'Bring selected tab row to front';",
          "1167: $string['testsiteupgradewarning'] = 'You are currently using the {$a} test site, to upgrade it properly use the command line interface tool';",
          "1168: $string['task_adhoc_concurrency_limit'] = 'Adhoc task concurrency limit';",
          "1169: $string['task_adhoc_concurrency_limit_desc'] = 'The number of adhoc task runners allowed to run concurrently. If the limit is high then scheduled tasks may not run regularly when there are lots of adhoc tasks. A setting of 0 will disable processing of adhoc tasks completely.';",
          "1170: $string['task_adhoc_max_runtime'] = 'Adhoc task runner lifetime';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1168: $string['task_scheduled_concurrency_limit'] = 'Scheduled task concurrency limit';",
          "1169: $string['task_scheduled_concurrency_limit_desc'] = 'The number of scheduled task runners allowed to run concurrently. If the limit is high then the server may experience high load which affects performance. A setting of 0 will disable processing of scheduled tasks completely.';",
          "1170: $string['task_scheduled_max_runtime'] = 'Scheduled task runner lifetime';",
          "1171: $string['task_scheduled_max_runtime_desc'] = 'The age of a scheduled task runner before it is freed.';",
          "",
          "---------------"
        ],
        "lib/cronlib.php||lib/cronlib.php": [
          "File: lib/cronlib.php -> lib/cronlib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     mtrace(\"Server Time: \".date('r', $timenow).\"\\n\\n\");",
          "72:     cron_run_adhoc_tasks($timenow);",
          "",
          "[Removed Lines]",
          "65:     while (!\\core\\task\\manager::static_caches_cleared_since($timenow) &&",
          "66:            $task = \\core\\task\\manager::get_next_scheduled_task($timenow)) {",
          "67:         cron_run_inner_scheduled_task($task);",
          "68:         unset($task);",
          "69:     }",
          "",
          "[Added Lines]",
          "65:     cron_run_scheduled_tasks($timenow);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     mtrace(\"Execution took \".$difftime.\" seconds\");",
          "80: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83: function cron_run_scheduled_tasks(int $timenow) {",
          "85:     $cronlockfactory = \\core\\lock\\lock_config::get_lock_factory('cron');",
          "86:     $maxruns = get_config('core', 'task_scheduled_concurrency_limit');",
          "87:     $maxruntime = get_config('core', 'task_scheduled_max_runtime');",
          "89:     $scheduledlock = null;",
          "90:     for ($run = 0; $run < $maxruns; $run++) {",
          "91:         if ($scheduledlock = $cronlockfactory->get_lock(\"scheduled_task_runner_{$run}\", 1)) {",
          "92:             break;",
          "93:         }",
          "94:     }",
          "96:     if (!$scheduledlock) {",
          "97:         mtrace(\"Skipping processing of scheduled tasks. Concurrency limit reached.\");",
          "98:         return;",
          "99:     }",
          "101:     $starttime = time();",
          "104:     while (!\\core\\task\\manager::static_caches_cleared_since($timenow) &&",
          "105:             $task = \\core\\task\\manager::get_next_scheduled_task($timenow)) {",
          "106:         cron_run_inner_scheduled_task($task);",
          "107:         unset($task);",
          "109:         if ((time() - $starttime) > $maxruntime) {",
          "110:             mtrace(\"Stopping processing of scheduled tasks as time limit has been reached.\");",
          "111:             break;",
          "112:         }",
          "113:     }",
          "116:     $scheduledlock->release();",
          "117: }",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019011502.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019011503.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}