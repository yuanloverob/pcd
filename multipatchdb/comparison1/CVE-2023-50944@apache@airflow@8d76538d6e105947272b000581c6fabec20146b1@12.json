{
  "cve_id": "CVE-2023-50944",
  "cve_desc": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows an authenticated user to access the source code of a DAG to which they don't have access.\u00a0This vulnerability is considered low since it requires an authenticated user to exploit it. Users are recommended to upgrade to version 2.8.1, which fixes this issue.",
  "repo": "apache/airflow",
  "patch_hash": "8d76538d6e105947272b000581c6fabec20146b1",
  "patch_info": {
    "commit_hash": "8d76538d6e105947272b000581c6fabec20146b1",
    "repo": "apache/airflow",
    "commit_url": "https://github.com/apache/airflow/commit/8d76538d6e105947272b000581c6fabec20146b1",
    "files": [
      "airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "airflow/models/dagcode.py",
      "tests/api_connexion/endpoints/test_dag_source_endpoint.py"
    ],
    "message": "Check DAG read permission before accessing DAG code (#36257)\n\n(cherry picked from commit 30ea37e0d247ce54c2d25b115e807fdb0074d795)",
    "before_after_code_files": [
      "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "airflow/models/dagcode.py||airflow/models/dagcode.py",
      "tests/api_connexion/endpoints/test_dag_source_endpoint.py||tests/api_connexion/endpoints/test_dag_source_endpoint.py"
    ]
  },
  "patch_diff": {
    "airflow/api_connexion/endpoints/dag_source_endpoint.py||airflow/api_connexion/endpoints/dag_source_endpoint.py": [
      "File: airflow/api_connexion/endpoints/dag_source_endpoint.py -> airflow/api_connexion/endpoints/dag_source_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: from __future__ import annotations",
      "19: from http import HTTPStatus",
      "21: from flask import Response, current_app, request",
      "22: from itsdangerous import BadSignature, URLSafeSerializer",
      "24: from airflow.api_connexion import security",
      "26: from airflow.api_connexion.schemas.dag_source_schema import dag_source_schema",
      "27: from airflow.auth.managers.models.resource_details import DagAccessEntity",
      "28: from airflow.models.dagcode import DagCode",
      "31: @security.requires_access_dag(\"GET\", DagAccessEntity.CODE)",
      "33:     \"\"\"Get source code using file token.\"\"\"",
      "34:     secret_key = current_app.config[\"SECRET_KEY\"]",
      "35:     auth_s = URLSafeSerializer(secret_key)",
      "36:     try:",
      "37:         path = auth_s.loads(file_token)",
      "39:     except (BadSignature, FileNotFoundError):",
      "40:         raise NotFound(\"Dag source not found\")",
      "",
      "[Removed Lines]",
      "25: from airflow.api_connexion.exceptions import NotFound",
      "32: def get_dag_source(*, file_token: str) -> Response:",
      "38:         dag_source = DagCode.code(path)",
      "",
      "[Added Lines]",
      "20: from typing import TYPE_CHECKING",
      "26: from airflow.api_connexion.exceptions import NotFound, PermissionDenied",
      "28: from airflow.api_connexion.security import get_readable_dags",
      "30: from airflow.models.dag import DagModel",
      "32: from airflow.utils.session import NEW_SESSION, provide_session",
      "34: if TYPE_CHECKING:",
      "35:     from sqlalchemy.orm import Session",
      "39: @provide_session",
      "40: def get_dag_source(*, file_token: str, session: Session = NEW_SESSION) -> Response:",
      "46:         dag_ids = session.query(DagModel.dag_id).filter(DagModel.fileloc == path).all()",
      "47:         readable_dags = get_readable_dags()",
      "48:         # Check if user has read access to all the DAGs defined in the file",
      "49:         if any(dag_id[0] not in readable_dags for dag_id in dag_ids):",
      "50:             raise PermissionDenied()",
      "51:         dag_source = DagCode.code(path, session=session)",
      "",
      "---------------"
    ],
    "airflow/models/dagcode.py||airflow/models/dagcode.py": [
      "File: airflow/models/dagcode.py -> airflow/models/dagcode.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "177:         return cls.code(fileloc)",
      "179:     @classmethod",
      "181:         \"\"\"Return source code for this DagCode object.",
      "183:         :return: source code as string",
      "184:         \"\"\"",
      "187:     @staticmethod",
      "188:     def _get_code_from_file(fileloc):",
      "",
      "[Removed Lines]",
      "180:     def code(cls, fileloc) -> str:",
      "185:         return cls._get_code_from_db(fileloc)",
      "",
      "[Added Lines]",
      "180:     @provide_session",
      "181:     def code(cls, fileloc, session: Session = NEW_SESSION) -> str:",
      "186:         return cls._get_code_from_db(fileloc, session)",
      "",
      "---------------"
    ],
    "tests/api_connexion/endpoints/test_dag_source_endpoint.py||tests/api_connexion/endpoints/test_dag_source_endpoint.py": [
      "File: tests/api_connexion/endpoints/test_dag_source_endpoint.py -> tests/api_connexion/endpoints/test_dag_source_endpoint.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))",
      "36: EXAMPLE_DAG_FILE = os.path.join(\"airflow\", \"example_dags\", \"example_bash_operator.py\")",
      "39: @pytest.fixture(scope=\"module\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "37: EXAMPLE_DAG_ID = \"example_bash_operator\"",
      "38: TEST_DAG_ID = \"latest_only\"",
      "39: NOT_READABLE_DAG_ID = \"latest_only_with_trigger\"",
      "40: TEST_MULTIPLE_DAGS_ID = \"dataset_produces_1\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "45:         role_name=\"Test\",",
      "46:         permissions=[(permissions.ACTION_CAN_READ, permissions.RESOURCE_DAG_CODE)],  # type: ignore",
      "47:     )",
      "48:     create_user(app, username=\"test_no_permissions\", role_name=\"TestNoPermissions\")  # type: ignore",
      "50:     yield app",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "52:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "53:         TEST_DAG_ID,",
      "54:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "55:     )",
      "56:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "57:         EXAMPLE_DAG_ID,",
      "58:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "59:     )",
      "60:     app.appbuilder.sm.sync_perm_for_dag(  # type: ignore",
      "61:         TEST_MULTIPLE_DAGS_ID,",
      "62:         access_control={\"Test\": [permissions.ACTION_CAN_READ]},",
      "63:     )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "80:     def test_should_respond_200_text(self, url_safe_serializer):",
      "81:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "82:         dagbag.sync_to_db()",
      "87:         response = self.client.get(",
      "88:             url, headers={\"Accept\": \"text/plain\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "89:         )",
      "",
      "[Removed Lines]",
      "83:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "84:         dag_docstring = self._get_dag_file_docstring(first_dag.fileloc)",
      "86:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "99:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "100:         dag_docstring = self._get_dag_file_docstring(test_dag.fileloc)",
      "102:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "95:     def test_should_respond_200_json(self, url_safe_serializer):",
      "96:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "97:         dagbag.sync_to_db()",
      "102:         response = self.client.get(",
      "103:             url, headers={\"Accept\": \"application/json\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "104:         )",
      "",
      "[Removed Lines]",
      "98:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "99:         dag_docstring = self._get_dag_file_docstring(first_dag.fileloc)",
      "101:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "114:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "115:         dag_docstring = self._get_dag_file_docstring(test_dag.fileloc)",
      "117:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "110:     def test_should_respond_406(self, url_safe_serializer):",
      "111:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "112:         dagbag.sync_to_db()",
      "116:         response = self.client.get(",
      "117:             url, headers={\"Accept\": \"image/webp\"}, environ_overrides={\"REMOTE_USER\": \"test\"}",
      "118:         )",
      "",
      "[Removed Lines]",
      "113:         first_dag: DAG = next(iter(dagbag.dags.values()))",
      "115:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(first_dag.fileloc)}\"",
      "",
      "[Added Lines]",
      "129:         test_dag: DAG = dagbag.dags[TEST_DAG_ID]",
      "131:         url = f\"/api/v1/dagSources/{url_safe_serializer.dumps(test_dag.fileloc)}\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "151:             environ_overrides={\"REMOTE_USER\": \"test_no_permissions\"},",
      "152:         )",
      "153:         assert response.status_code == 403",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "171:     def test_should_respond_403_not_readable(self, url_safe_serializer):",
      "172:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "173:         dagbag.sync_to_db()",
      "174:         dag: DAG = dagbag.dags[NOT_READABLE_DAG_ID]",
      "176:         response = self.client.get(",
      "177:             f\"/api/v1/dagSources/{url_safe_serializer.dumps(dag.fileloc)}\",",
      "178:             headers={\"Accept\": \"text/plain\"},",
      "179:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "180:         )",
      "181:         read_dag = self.client.get(",
      "182:             f\"/api/v1/dags/{NOT_READABLE_DAG_ID}\",",
      "183:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "184:         )",
      "185:         assert response.status_code == 403",
      "186:         assert read_dag.status_code == 403",
      "188:     def test_should_respond_403_some_dags_not_readable_in_the_file(self, url_safe_serializer):",
      "189:         dagbag = DagBag(dag_folder=EXAMPLE_DAG_FILE)",
      "190:         dagbag.sync_to_db()",
      "191:         dag: DAG = dagbag.dags[TEST_MULTIPLE_DAGS_ID]",
      "193:         response = self.client.get(",
      "194:             f\"/api/v1/dagSources/{url_safe_serializer.dumps(dag.fileloc)}\",",
      "195:             headers={\"Accept\": \"text/plain\"},",
      "196:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "197:         )",
      "199:         read_dag = self.client.get(",
      "200:             f\"/api/v1/dags/{TEST_MULTIPLE_DAGS_ID}\",",
      "201:             environ_overrides={\"REMOTE_USER\": \"test\"},",
      "202:         )",
      "203:         assert response.status_code == 403",
      "204:         assert read_dag.status_code == 200",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b9447b1e086a989ca3dffac599654e5ffcba0e44",
      "candidate_info": {
        "commit_hash": "b9447b1e086a989ca3dffac599654e5ffcba0e44",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b9447b1e086a989ca3dffac599654e5ffcba0e44",
        "files": [
          "airflow/www/templates/airflow/traceback.html"
        ],
        "message": "Improve the error message displayed when there is a webserver error (#36570)\n\nThe error message displayed when errors happen in the webserver did\nnot properly communicated, that the user MUST look at the logs and\nprovide more information to investigate the root cause (after looking\nat the logs themselves). We have a number of users just copy&pasting\nthe generic error message without understanding that this is not nearly\nenough to help them.\n\nThis PR proposes a bit more explicit call to look at the logs and\nexplains why details are not displayed (for security reasons).\n\n(cherry picked from commit 574f86ee1e323d2a1613284f4bb77b6c4a3d3d0a)",
        "before_after_code_files": [
          "airflow/www/templates/airflow/traceback.html||airflow/www/templates/airflow/traceback.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/templates/airflow/traceback.html||airflow/www/templates/airflow/traceback.html": [
          "File: airflow/www/templates/airflow/traceback.html -> airflow/www/templates/airflow/traceback.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:       <h1> Ooops! </h1>",
          "28:       <div>",
          "29:           <pre>",
          "50: Python version: {{ python_version }}",
          "51: Airflow version: {{ airflow_version }}",
          "",
          "[Removed Lines]",
          "30: Something bad has happened.",
          "32: Airflow is used by many users, and it is very likely that others had similar problems and you can easily find",
          "33: a solution to your problem.",
          "35: Consider following these steps:",
          "48:     Make sure however, to include all relevant details and results of your investigation so far.",
          "",
          "[Added Lines]",
          "30: Something bad has happened. For security reasons detailed information about the error is not logged.",
          "41:     All those resources might help you to find a solution to your problem.",
          "46:     get the logs with errors, describe results of your investigation so far, and consider creating a",
          "47:     <b><a href=\"https://github.com/apache/airflow/issues/new/choose\">bug report</a></b> including this information.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9ef5a089837e4d911c7a80d4ab5449946fbb6d8",
      "candidate_info": {
        "commit_hash": "b9ef5a089837e4d911c7a80d4ab5449946fbb6d8",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/b9ef5a089837e4d911c7a80d4ab5449946fbb6d8",
        "files": [
          "dev/README_RELEASE_PROVIDER_PACKAGES.md",
          "dev/breeze/src/airflow_breeze/commands/release_management_commands.py",
          "dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py",
          "dev/breeze/src/airflow_breeze/provider_issue_TEMPLATE.md.jinja2",
          "images/breeze/output_release-management_generate-issue-content-providers.svg",
          "images/breeze/output_release-management_generate-issue-content-providers.txt"
        ],
        "message": "Improve generation of \"Status of testing\" issue (#36470)\n\nThis PR improves/simplifies the process of issue generation when\nprovider package rc candidates are prepared for voting.\n\nIt improves the commmand to generate the issue and makes it simpler\n(less copy&paste) to create such issue, the issue also does not use\nthe \"Meta\" template and gets the right labels assigned automatically.\n\nRecent changes that automatically derive the suffix from PyPI packages\nprepared, removed the need of passing `--suffix` as parameter. In all\ncases the right rc* suffix will be automatically added during issue\ngeneration based on the version of package being prepared. The process\nhas been updated and command simplified by removing the `--suffix` flag.\n\nWhen the issue is prepared, we display the issue in terminal and asked\nthe release manager to create the issue by copy&pasting the issue\ncontent and title to a new issue, but that required a few copy&pastes\nand opening new Issue via \"Meta\" task type. This PR simplifies it a\nbit by not only displaying the content but also generating a URL that\ncan be either copy&pasted to browser URL field or just Cmd+clicked\nif your terminal allows that. Issue created this way does not have\nthe \"Body\" field header and has the labels properly assigned including\na dedicated \"testing status\" label that is used to gether stats for\npast \"status\" issues.\n\nThe advice for release manager has been improved (the comment generated\nhad some missing end of sentence and it should be now clearer on how\nto iterate during issue generation if you want to remove some PRs from\nthe generated issue content.\n\n(cherry picked from commit 5d88f6f9a4c7140c1da9db47aab7caf2d4c5f453)",
        "before_after_code_files": [
          "dev/breeze/src/airflow_breeze/commands/release_management_commands.py||dev/breeze/src/airflow_breeze/commands/release_management_commands.py",
          "dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py||dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py",
          "dev/breeze/src/airflow_breeze/provider_issue_TEMPLATE.md.jinja2||dev/breeze/src/airflow_breeze/provider_issue_TEMPLATE.md.jinja2"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "dev/breeze/src/airflow_breeze/commands/release_management_commands.py||dev/breeze/src/airflow_breeze/commands/release_management_commands.py": [
          "File: dev/breeze/src/airflow_breeze/commands/release_management_commands.py -> dev/breeze/src/airflow_breeze/commands/release_management_commands.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: from datetime import datetime",
          "30: from pathlib import Path",
          "31: from subprocess import DEVNULL",
          "34: import click",
          "35: from rich.progress import Progress",
          "",
          "[Removed Lines]",
          "32: from typing import IO, TYPE_CHECKING, Any, Generator, NamedTuple",
          "",
          "[Added Lines]",
          "32: from typing import IO, TYPE_CHECKING, Any, Generator, Iterable, NamedTuple",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1571:     return prs",
          "1574: @release_management.command(",
          "1575:     name=\"generate-issue-content-providers\", help=\"Generates content for issue to test the release.\"",
          "1576: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1574: def create_github_issue_url(title: str, body: str, labels: Iterable[str]) -> str:",
          "1575:     \"\"\"",
          "1576:     Creates URL to create the issue with title, body and labels.",
          "1577:     :param title: issue title",
          "1578:     :param body: issue body",
          "1579:     :param labels: labels for the issue",
          "1580:     :return: URL to use to create the issue",
          "1581:     \"\"\"",
          "1582:     from urllib.parse import quote",
          "1584:     quoted_labels = quote(\",\".join(labels))",
          "1585:     quoted_title = quote(title)",
          "1586:     quoted_body = quote(body)",
          "1587:     return (",
          "1588:         f\"https://github.com/apache/airflow/issues/new?labels={quoted_labels}&\"",
          "1589:         f\"title={quoted_title}&body={quoted_body}\"",
          "1590:     )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1592:     is_flag=True,",
          "1593:     help=\"Only consider package ids with packages prepared in the dist folder\",",
          "1594: )",
          "1596: @argument_provider_packages",
          "1597: def generate_issue_content_providers(",
          "1598:     disable_progress: bool,",
          "1599:     excluded_pr_list: str,",
          "1600:     github_token: str,",
          "1601:     only_available_in_dist: bool,",
          "1603:     provider_packages: list[str],",
          "1604: ):",
          "1605:     import jinja2",
          "",
          "[Removed Lines]",
          "1595: @click.option(\"--suffix\", default=\"rc1\", help=\"Suffix to add to the version prepared\")",
          "1602:     suffix: str,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1674:                     provider_package_id=provider_id,",
          "1675:                     pypi_package_name=provider_yaml_dict[\"package-name\"],",
          "1676:                     pr_list=pull_request_list,",
          "1678:                 )",
          "1679:         template = jinja2.Template(",
          "1680:             (Path(__file__).parents[1] / \"provider_issue_TEMPLATE.md.jinja2\").read_text()",
          "",
          "[Removed Lines]",
          "1677:                     suffix=package_suffix if package_suffix else suffix,",
          "",
          "[Added Lines]",
          "1694:                     suffix=package_suffix if package_suffix else \"\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1688:         get_console().print()",
          "1689:         get_console().print()",
          "1690:         get_console().print(",
          "1692:             f\"prepared on {datetime.now():%B %d, %Y}[/]\"",
          "1693:         )",
          "1694:         get_console().print()",
          "1698:         users: set[str] = set()",
          "1699:         for provider_info in providers.values():",
          "1700:             for pr in provider_info.pr_list:",
          "1701:                 users.add(\"@\" + pr.user.login)",
          "1706: def get_all_constraint_files(refresh_constraints: bool, python_version: str) -> None:",
          "",
          "[Removed Lines]",
          "1691:             \"Issue title: [yellow]Status of testing Providers that were \"",
          "1695:         syntax = Syntax(issue_content, \"markdown\", theme=\"ansi_dark\")",
          "1696:         get_console().print(syntax)",
          "1697:         get_console().print()",
          "1702:         get_console().print(\"All users involved in the PRs:\")",
          "1703:         get_console().print(\" \".join(users))",
          "",
          "[Added Lines]",
          "1708:             \"Issue title: [warning]Status of testing Providers that were \"",
          "1712:         issue_content += \"\\n\"",
          "1717:         issue_content += f\"All users involved in the PRs:\\n{' '.join(users)}\"",
          "1718:         syntax = Syntax(issue_content, \"markdown\", theme=\"ansi_dark\")",
          "1719:         get_console().print(syntax)",
          "1720:         url_to_create_the_issue = create_github_issue_url(",
          "1721:             title=f\"Status of testing Providers that were prepared on {datetime.now():%B %d, %Y}\",",
          "1722:             body=issue_content,",
          "1723:             labels=[\"testing status\", \"kind:meta\"],",
          "1724:         )",
          "1725:         get_console().print()",
          "1726:         get_console().print(",
          "1727:             \"[info]You can prefill the issue by copy&pasting this link to browser \"",
          "1728:             \"(or Cmd+Click if your terminal supports it):\\n\"",
          "1729:         )",
          "1730:         print(url_to_create_the_issue)",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py||dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py": [
          "File: dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py -> dev/breeze/src/airflow_breeze/commands/release_management_commands_config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:                 \"--excluded-pr-list\",",
          "235:                 \"--github-token\",",
          "236:                 \"--only-available-in-dist\",",
          "238:             ],",
          "239:         }",
          "240:     ],",
          "",
          "[Removed Lines]",
          "237:                 \"--suffix\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dev/breeze/src/airflow_breeze/provider_issue_TEMPLATE.md.jinja2||dev/breeze/src/airflow_breeze/provider_issue_TEMPLATE.md.jinja2": [
          "File: dev/breeze/src/airflow_breeze/provider_issue_TEMPLATE.md.jinja2 -> dev/breeze/src/airflow_breeze/provider_issue_TEMPLATE.md.jinja2",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: NOTE TO RELEASE MANAGER:",
          "30: -->",
          "",
          "[Removed Lines]",
          "23: Please move here the providers that have doc-only changes or for which changes are trivial, and",
          "24: you could assess that they are OK. In case",
          "26: The providers are automatically installed on Airflow 2.3 and latest `main` during the CI, so we know they",
          "27: are installable. Also, all classes within the providers are imported during the CI run so we know all",
          "28: providers can be imported.",
          "",
          "[Added Lines]",
          "23: You can move here the providers that have doc-only changes or for which changes are trivial, and",
          "24: you could assess that they are OK.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e98fed3e892d16f09fabd42abc251325d98aaf91",
      "candidate_info": {
        "commit_hash": "e98fed3e892d16f09fabd42abc251325d98aaf91",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/e98fed3e892d16f09fabd42abc251325d98aaf91",
        "files": [
          "airflow/www/views.py",
          "tests/www/views/test_views_tasks.py"
        ],
        "message": "Remove option ot set a task instance to running state in UI (#36518)\n\n* Remove option ot set a task instance to running state in UI\n* Uups, fix pytests\n\n(cherry picked from commit 60aa611f04559391621e7d0d9612cfffef6368a1)",
        "before_after_code_files": [
          "airflow/www/views.py||airflow/www/views.py",
          "tests/www/views/test_views_tasks.py||tests/www/views/test_views_tasks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/www/views.py||airflow/www/views.py": [
          "File: airflow/www/views.py -> airflow/www/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5450:         \"action_clear\": \"edit\",",
          "5451:         \"action_clear_downstream\": \"edit\",",
          "5452:         \"action_muldelete\": \"delete\",",
          "5454:         \"action_set_failed\": \"edit\",",
          "5455:         \"action_set_success\": \"edit\",",
          "5456:         \"action_set_retry\": \"edit\",",
          "",
          "[Removed Lines]",
          "5453:         \"action_set_running\": \"edit\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5727:         except Exception:",
          "5728:             flash(\"Failed to set state\", \"error\")",
          "5739:     @action(\"set_failed\", \"Set state to 'failed'\", \"\", single=False)",
          "5740:     @auth.has_access_dag_entities(\"PUT\", DagAccessEntity.TASK_INSTANCE)",
          "5741:     @action_logging",
          "",
          "[Removed Lines]",
          "5730:     @action(\"set_running\", \"Set state to 'running'\", \"\", single=False)",
          "5731:     @auth.has_access_dag_entities(\"PUT\", DagAccessEntity.TASK_INSTANCE)",
          "5732:     @action_logging",
          "5733:     def action_set_running(self, tis):",
          "5734:         \"\"\"Set state to 'running'.\"\"\"",
          "5735:         self.set_task_instance_state(tis, TaskInstanceState.RUNNING)",
          "5736:         self.update_redirect()",
          "5737:         return redirect(self.get_redirect())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/www/views/test_views_tasks.py||tests/www/views/test_views_tasks.py": [
          "File: tests/www/views/test_views_tasks.py -> tests/www/views/test_views_tasks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "943: @pytest.mark.parametrize(",
          "944:     \"action, expected_state\",",
          "945:     [",
          "947:         (\"set_failed\", State.FAILED),",
          "948:         (\"set_success\", State.SUCCESS),",
          "949:         (\"set_retry\", State.UP_FOR_RETRY),",
          "950:         (\"set_skipped\", State.SKIPPED),",
          "951:     ],",
          "953: )",
          "954: def test_task_instance_set_state(session, admin_client, action, expected_state):",
          "955:     task_id = \"runme_0\"",
          "",
          "[Removed Lines]",
          "946:         (\"set_running\", State.RUNNING),",
          "952:     ids=[\"running\", \"failed\", \"success\", \"retry\", \"skipped\"],",
          "",
          "[Added Lines]",
          "951:     ids=[\"failed\", \"success\", \"retry\", \"skipped\"],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "972: @pytest.mark.parametrize(",
          "973:     \"action\",",
          "974:     [",
          "976:         \"set_failed\",",
          "977:         \"set_success\",",
          "978:         \"set_retry\",",
          "",
          "[Removed Lines]",
          "975:         \"set_running\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07e30c9f9c1e8eda82360d66ba74970ebb64a65a",
      "candidate_info": {
        "commit_hash": "07e30c9f9c1e8eda82360d66ba74970ebb64a65a",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/07e30c9f9c1e8eda82360d66ba74970ebb64a65a",
        "files": [
          "setup.cfg"
        ],
        "message": "Fix configuration of mypy plugins to point to paths not modules (#36563)\n\nThe configuration of our MyPy plugins was wrongly pointing to\nmodules rather than paths. This caused problems in the environment\nwhere you had no PYTHONPATH set pointing to the root of your\nAirflow sources. One of the side effects was that MyPy Plugin\nfor IntelliJ failed with \"invalid plugin\" error.\n\nThis PR changes the plugins to use relative paths instead - which\nshould work when mypy is invoked from the root of the\nproject (which in general is how our mypy gets invoked anyway and\nis the default settings for most IDE integrations.\n\n(cherry picked from commit 8fba23fc8450d13c3a241252b547b95c0e258782)",
        "before_after_code_files": [
          "setup.cfg||setup.cfg"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "setup.cfg||setup.cfg": [
          "File: setup.cfg -> setup.cfg",
          "--- Hunk 1 ---",
          "[Context before]",
          "205: warn_redundant_casts = True",
          "206: warn_unused_ignores = False",
          "207: plugins =",
          "210: pretty = True",
          "211: show_error_codes = True",
          "212: # Mypy since 0.991 warns about type annotations being present in an untyped",
          "",
          "[Removed Lines]",
          "208:   dev.mypy.plugin.decorators,",
          "209:   dev.mypy.plugin.outputs",
          "",
          "[Added Lines]",
          "208:   dev/mypy/plugin/decorators.py,",
          "209:   dev/mypy/plugin/outputs.py",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4535686a9801f77cdfad7221e95315a657fa5153",
      "candidate_info": {
        "commit_hash": "4535686a9801f77cdfad7221e95315a657fa5153",
        "repo": "apache/airflow",
        "commit_url": "https://github.com/apache/airflow/commit/4535686a9801f77cdfad7221e95315a657fa5153",
        "files": [
          "airflow/hooks/filesystem.py"
        ],
        "message": "Follow BaseHook connection fields method signature in FSHook (#36444)\n\n(cherry picked from commit f5e5027e1c342237758424d7af50787a33329509)",
        "before_after_code_files": [
          "airflow/hooks/filesystem.py||airflow/hooks/filesystem.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/airflow/pull/36788"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "airflow/hooks/filesystem.py||airflow/hooks/filesystem.py": [
          "File: airflow/hooks/filesystem.py -> airflow/hooks/filesystem.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     conn_type = \"fs\"",
          "42:     hook_name = \"File (path)\"",
          "46:         \"\"\"Return connection widgets to add to connection form.\"\"\"",
          "47:         from flask_appbuilder.fieldwidgets import BS3TextFieldWidget",
          "48:         from flask_babel import lazy_gettext",
          "",
          "[Removed Lines]",
          "44:     @staticmethod",
          "45:     def get_connection_form_widgets() -> dict[str, Any]:",
          "",
          "[Added Lines]",
          "44:     @classmethod",
          "45:     def get_connection_form_widgets(cls) -> dict[str, Any]:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:         return {\"path\": StringField(lazy_gettext(\"Path\"), widget=BS3TextFieldWidget())}",
          "55:         \"\"\"Return custom field behaviour.\"\"\"",
          "56:         return {",
          "57:             \"hidden_fields\": [\"host\", \"schema\", \"port\", \"login\", \"password\", \"extra\"],",
          "",
          "[Removed Lines]",
          "53:     @staticmethod",
          "54:     def get_ui_field_behaviour() -> dict[str, Any]:",
          "",
          "[Added Lines]",
          "53:     @classmethod",
          "54:     def get_ui_field_behaviour(cls) -> dict[str, Any]:",
          "",
          "---------------"
        ]
      }
    }
  ]
}