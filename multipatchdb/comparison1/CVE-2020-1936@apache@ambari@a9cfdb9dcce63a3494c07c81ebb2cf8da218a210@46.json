{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dba6fbb15283121dc0481307ca1ded99f836c609",
      "candidate_info": {
        "commit_hash": "dba6fbb15283121dc0481307ca1ded99f836c609",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/dba6fbb15283121dc0481307ca1ded99f836c609",
        "files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/app.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less"
        ],
        "message": "[Log Search UI] Make the app header aligned with the design (#1780)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-web/src/app/components/app.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/app.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.html",
          "ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.less",
          "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-web/src/app/components/app.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/app.component.less": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/app.component.less -> ambari-logsearch/ambari-logsearch-web/src/app/components/app.component.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     h1 {",
          "35:       align-items: center;",
          "36:       align-self: stretch;",
          "38:       background-position: .5em center;",
          "39:       background-size: 25px;",
          "41:       display: flex;",
          "42:       font-size: 20px;",
          "43:       margin: 0 2em 0 0;",
          "",
          "[Removed Lines]",
          "37:       background: lighten(@navbar-background-color, 5%) url('/resources/assets/images/ambari-logo.png') no-repeat;",
          "40:       background-color: lighten(@navbar-background-color, 5%);",
          "",
          "[Added Lines]",
          "37:       background: @navbar-logo-background-color url('/resources/assets/images/ambari-logo.png') no-repeat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:       }",
          "48:     }",
          "49:     breadcrumbs {",
          "51:       .stretch-flex;",
          "52:     }",
          "",
          "[Removed Lines]",
          "50:       font-size: 18px;",
          "",
          "[Added Lines]",
          "49:       font-size: 20px;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.html||ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.html": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.html -> ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:       <span *ngIf=\"crumbs.length\" class=\"breadcrumb-separator\">/</span>",
          "22:       <ng-container *ngFor=\"let crumb of crumbs; index as i\">",
          "23:         <a *ngIf=\"i < crumbs.length-1\" [routerLink]=\"crumb.path\" routerLinkActive=\"active\">{{crumb.text | translate}}</a>",
          "25:         <span *ngIf=\"i < crumbs.length-1\" class=\"breadcrumb-separator\">/</span>",
          "26:       </ng-container>",
          "27:     </ng-container>",
          "",
          "[Removed Lines]",
          "24:         <span *ngIf=\"i === crumbs.length-1\">{{crumb.text | translate}}</span>",
          "",
          "[Added Lines]",
          "24:         <span *ngIf=\"i === crumbs.length-1\" class=\"breadcrumb-current\">{{crumb.text | translate}}</span>",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.less||ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.less": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.less -> ambari-logsearch/ambari-logsearch-web/src/app/components/breadrumbs/breadcrumbs.component.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   .breadcrumbs {",
          "20:     align-items: center;",
          "21:     display: flex;",
          "22:   }",
          "23: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     color: #fff;",
          "23:     font-size: 20px;",
          "24:     a, a:visited, a:active, a:hover {",
          "25:       color: #fff;",
          "26:       text-decoration: none;",
          "27:     }",
          "28:     .breadcrumb-separator {",
          "29:       color: #999;",
          "30:     }",
          "31:     .breadcrumb-current {",
          "32:       color: #ccc;",
          "33:     }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less||ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less": [
          "File: ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less -> ambari-logsearch/ambari-logsearch-web/src/app/modules/shared/variables.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: @base-font-color: #666;",
          "21: @navbar-background-color: #323544;",
          "22: @h1-vertical-margin: 20px;",
          "23: @button-border-radius: 4px;",
          "24: @input-border-width: 1px;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: @navbar-logo-background-color: #303d54;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6e6b9ac103093132f87a345f3fd5f63ead327e9",
      "candidate_info": {
        "commit_hash": "d6e6b9ac103093132f87a345f3fd5f63ead327e9",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/d6e6b9ac103093132f87a345f3fd5f63ead327e9",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java"
        ],
        "message": "AMBARI-24322. Log Search / Ambari upgrade: db config consistency check has warnings (*-logearch-conf configs). (#1825)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java||ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java -> ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:   public static final String AMBARI_INFRA_OLD_NAME = \"AMBARI_INFRA\";",
          "260:   public static final String AMBARI_INFRA_NEW_NAME = \"AMBARI_INFRA_SOLR\";",
          "263:   public static final String FK_HOSTCOMPONENTDESIREDSTATE_COMPONENT_NAME = \"fk_hostcomponentdesiredstate_component_name\";",
          "264:   public static final String FK_HOSTCOMPONENTSTATE_COMPONENT_NAME = \"fk_hostcomponentstate_component_name\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:   public static final String SERVICE_CONFIG_MAPPING_TABLE = \"serviceconfigmapping\";",
          "263:   public static final String CLUSTER_CONFIG_TABLE = \"clusterconfig\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1433:     AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);",
          "1434:     Clusters clusters = ambariManagementController.getClusters();",
          "1435:     if (clusters != null) {",
          "",
          "[Removed Lines]",
          "1432:   protected void updateLogSearchConfigs() throws AmbariException {",
          "",
          "[Added Lines]",
          "1435:   protected void updateLogSearchConfigs() throws AmbariException, SQLException {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1438:       ConfigHelper configHelper = injector.getInstance(ConfigHelper.class);",
          "1439:       if (clusterMap != null && !clusterMap.isEmpty()) {",
          "1440:         for (final Cluster cluster : clusterMap.values()) {",
          "1447:           Config logSearchEnv = cluster.getDesiredConfigByType(\"logsearch-env\");",
          "",
          "[Removed Lines]",
          "1441:           cluster.getAllConfigs().stream()",
          "1442:                   .map(Config::getType)",
          "1443:                   .filter(configType -> configType.endsWith(\"-logsearch-conf\"))",
          "1444:                   .collect(Collectors.toSet())",
          "1445:           .forEach(configType -> configHelper.removeConfigsByType(cluster, configType));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1523:             updateConfigurationPropertiesForCluster(cluster, \"logfeeder-output-config\", Collections.singletonMap(\"content\", content), true, true);",
          "1524:           }",
          "1525:         }",
          "1526:       }",
          "1527:     }",
          "1528:   }",
          "1530:   private void removeAdminHandlersFrom(Cluster cluster, String configType) throws AmbariException {",
          "1531:     Config logSearchServiceLogsConfig = cluster.getDesiredConfigByType(configType);",
          "1532:     if (logSearchServiceLogsConfig != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1523:           DBAccessor dba = dbAccessor != null ? dbAccessor : injector.getInstance(DBAccessor.class); // for testing",
          "1524:           removeLogSearchPatternConfigs(dba);",
          "1530:   private void removeLogSearchPatternConfigs(DBAccessor dbAccessor) throws SQLException {",
          "1532:     String configSuffix = \"-logsearch-conf\";",
          "1533:     String serviceConfigMappingRemoveSQL = String.format(",
          "1534:       \"DELETE FROM %s WHERE config_id IN (SELECT config_id from %s where type_name like '%%%s')\",",
          "1535:       SERVICE_CONFIG_MAPPING_TABLE, CLUSTER_CONFIG_TABLE, configSuffix);",
          "1537:     String clusterConfigRemoveSQL = String.format(",
          "1538:       \"DELETE FROM %s WHERE type_name like '%%%s'\",",
          "1539:       CLUSTER_CONFIG_TABLE, configSuffix);",
          "1541:     dbAccessor.executeQuery(serviceConfigMappingRemoveSQL);",
          "1542:     dbAccessor.executeQuery(clusterConfigRemoveSQL);",
          "1543:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java||ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java -> ambari-server/src/test/java/org/apache/ambari/server/upgrade/UpgradeCatalog270Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: import java.sql.Types;",
          "156: import java.util.ArrayList;",
          "157: import java.util.Arrays;",
          "159: import java.util.Collections;",
          "160: import java.util.HashMap;",
          "161: import java.util.Iterator;",
          "",
          "[Removed Lines]",
          "158: import java.util.Collection;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "998:         .addMockedMethod(\"createConfig\")",
          "999:         .createNiceMock();",
          "1000:     ConfigHelper configHelper = createMockBuilder(ConfigHelper.class)",
          "1002:         .addMockedMethod(\"createConfigType\", Cluster.class, StackId.class, AmbariManagementController.class,",
          "1003:             String.class, Map.class, String.class, String.class)",
          "1004:         .createMock();",
          "1006:     expect(injector2.getInstance(AmbariManagementController.class)).andReturn(controller).anyTimes();",
          "1007:     expect(injector2.getInstance(ConfigHelper.class)).andReturn(configHelper).anyTimes();",
          "1008:     expect(controller.getClusters()).andReturn(clusters).anyTimes();",
          "1026:     configHelper.createConfigType(anyObject(Cluster.class), anyObject(StackId.class), eq(controller),",
          "1027:         eq(\"logsearch-common-properties\"), eq(Collections.emptyMap()), eq(\"ambari-upgrade\"),",
          "1028:         eq(\"Updated logsearch-common-properties during Ambari Upgrade from 2.6.0 to 3.0.0\"));",
          "",
          "[Removed Lines]",
          "1001:         .addMockedMethod(\"removeConfigsByType\")",
          "1010:     Config confSomethingElse1 = easyMockSupport.createNiceMock(Config.class);",
          "1011:     expect(confSomethingElse1.getType()).andReturn(\"something-else-1\");",
          "1012:     Config confSomethingElse2 = easyMockSupport.createNiceMock(Config.class);",
          "1013:     expect(confSomethingElse2.getType()).andReturn(\"something-else-2\");",
          "1014:     Config confLogSearchConf1 = easyMockSupport.createNiceMock(Config.class);",
          "1015:     expect(confLogSearchConf1.getType()).andReturn(\"service-1-logsearch-conf\");",
          "1016:     Config confLogSearchConf2 = easyMockSupport.createNiceMock(Config.class);",
          "1017:     expect(confLogSearchConf2.getType()).andReturn(\"service-2-logsearch-conf\");",
          "1019:     Collection<Config> configs = Arrays.asList(confSomethingElse1, confLogSearchConf1, confSomethingElse2, confLogSearchConf2);",
          "1021:     expect(cluster.getAllConfigs()).andReturn(configs).atLeastOnce();",
          "1022:     configHelper.removeConfigsByType(cluster, \"service-1-logsearch-conf\");",
          "1023:     expectLastCall().once();",
          "1024:     configHelper.removeConfigsByType(cluster, \"service-2-logsearch-conf\");",
          "1025:     expectLastCall().once();",
          "",
          "[Added Lines]",
          "1006:     expect(injector2.getInstance(DBAccessor.class)).andReturn(dbAccessor).anyTimes();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1131:     expect(controller.createConfig(anyObject(Cluster.class), anyObject(StackId.class), anyString(), capture(logFeederOutputConfCapture), anyString(),",
          "1132:         EasyMock.anyObject())).andReturn(config).once();",
          "1135:     replay(controller, injector2);",
          "1137:     replay(logSearchPropertiesConf, logFeederPropertiesConf);",
          "1138:     replay(logFeederLog4jConf, logSearchLog4jConf);",
          "1139:     replay(logSearchServiceLogsConf, logSearchAuditLogsConf);",
          "",
          "[Removed Lines]",
          "1134:     replay(clusters, cluster);",
          "1136:     replay(confSomethingElse1, confSomethingElse2, confLogSearchConf1, confLogSearchConf2);",
          "",
          "[Added Lines]",
          "1117:     String serviceConfigMapping = \"serviceconfigmapping\";",
          "1118:     String clusterConfig = \"clusterconfig\";",
          "1119:     dbAccessor.executeQuery(startsWith(\"DELETE FROM \"+ serviceConfigMapping));",
          "1120:     expectLastCall().once();",
          "1121:     dbAccessor.executeQuery(startsWith(\"DELETE FROM \"+ clusterConfig));",
          "1122:     expectLastCall().once();",
          "1124:     replay(clusters, cluster, dbAccessor);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6c6a25ffdd38c5927f491d82bfdf8eba2bc6925",
      "candidate_info": {
        "commit_hash": "a6c6a25ffdd38c5927f491d82bfdf8eba2bc6925",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/a6c6a25ffdd38c5927f491d82bfdf8eba2bc6925",
        "files": [
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java",
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java",
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java",
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java",
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZKHelper.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/global/LogLevelFilterManagerState.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/LogLevelManagerFilterConfigurer.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrLogLevelFilterConfigurer.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ShipperConfigManager.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogSearchLogLevelFilterManagerFilter.java",
          "ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties",
          "ambari-logsearch/docker/test-config/logsearch/logsearch.properties"
        ],
        "message": "AMBARI-24459. Log Search / Log Feeder - support to use ZK only for storing filters (without manage input configs) (#2041)",
        "before_after_code_files": [
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java",
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java",
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java",
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java",
          "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZKHelper.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZKHelper.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java",
          "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/global/SolrLogLevelFilterManagerState.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/global/LogLevelFilterManagerState.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/LogLevelManagerFilterConfigurer.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/LogLevelManagerFilterConfigurer.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrLogLevelFilterConfigurer.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrLogLevelFilterConfigurer.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ShipperConfigManager.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ShipperConfigManager.java",
          "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogSearchLogLevelFilterManagerFilter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogSearchLogLevelFilterManagerFilter.java",
          "ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties||ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties",
          "ambari-logsearch/docker/test-config/logsearch/logsearch.properties||ambari-logsearch/docker/test-config/logsearch/logsearch.properties"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java": [
          "File: ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java -> ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogLevelFilterManagerZK.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:   private final Gson gson;",
          "44:   private final List<ACL> aclList;",
          "46:   public LogLevelFilterManagerZK(CuratorFramework client, TreeCache serverCache, List<ACL> aclList, Gson gson) {",
          "47:     this.client = client;",
          "48:     this.serverCache = serverCache;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   public LogLevelFilterManagerZK(Map<String, String> properties) throws Exception {",
          "47:     this.client = LogSearchConfigZKHelper.createZKClient(properties);",
          "48:     this.serverCache = new TreeCache(client, \"/\");",
          "49:     this.aclList = LogSearchConfigZKHelper.getAcls(properties);",
          "50:     this.gson = LogSearchConfigZKHelper.createGson();",
          "51:     this.serverCache.start();",
          "52:   }",
          "54:   public LogLevelFilterManagerZK(Map<String, String> properties, CuratorFramework client) throws Exception {",
          "55:     this.client = client;",
          "56:     this.serverCache = new TreeCache(client, \"/\");",
          "57:     this.aclList = LogSearchConfigZKHelper.getAcls(properties);",
          "58:     this.gson = LogSearchConfigZKHelper.createGson();",
          "59:     this.serverCache.start();",
          "60:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     return logLevelFilters;",
          "92:   }",
          "94: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:   public CuratorFramework getClient() {",
          "111:     return client;",
          "112:   }",
          "114:   public TreeCache getServerCache() {",
          "115:     return serverCache;",
          "116:   }",
          "118:   public Gson getGson() {",
          "119:     return gson;",
          "120:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java": [
          "File: ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java -> ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.ambari.logsearch.config.api.LogLevelFilterManager;",
          "26: import org.apache.ambari.logsearch.config.api.LogSearchConfigLogFeeder;",
          "28: import org.apache.ambari.logsearch.config.json.JsonHelper;",
          "29: import org.apache.ambari.logsearch.config.json.model.inputconfig.impl.InputConfigGson;",
          "30: import org.apache.ambari.logsearch.config.json.model.inputconfig.impl.InputConfigImpl;",
          "",
          "[Removed Lines]",
          "27: import org.apache.ambari.logsearch.config.api.model.loglevelfilter.LogLevelFilter;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: public class LogSearchConfigLogFeederZK extends LogSearchConfigZK implements LogSearchConfigLogFeeder {",
          "48:   private static final Logger LOG = LoggerFactory.getLogger(LogSearchConfigLogFeederZK.class);",
          "52:   private TreeCache logFeederClusterCache;",
          "54:   @Override",
          "55:   public void init(Map<String, String> properties, String clusterName) throws Exception {",
          "56:     super.init(properties);",
          "64:     setLogLevelFilterManager(logLevelFilterManager);",
          "65:   }",
          "",
          "[Removed Lines]",
          "50:   private static final long WAIT_FOR_ROOT_SLEEP_SECONDS = 10;",
          "57:     while (client.checkExists().forPath(\"/\") == null) {",
          "58:       LOG.info(\"Root node is not present yet, going to sleep for \" + WAIT_FOR_ROOT_SLEEP_SECONDS + \" seconds\");",
          "59:       Thread.sleep(WAIT_FOR_ROOT_SLEEP_SECONDS * 1000);",
          "60:     }",
          "62:     logFeederClusterCache = new TreeCache(client, String.format(\"/%s\", clusterName));",
          "63:     LogLevelFilterManager logLevelFilterManager = new LogLevelFilterManagerZK(client, null, getAcls(), gson);",
          "",
          "[Added Lines]",
          "54:     LogSearchConfigZKHelper.waitUntilRootAvailable(client);",
          "55:     logFeederClusterCache = LogSearchConfigZKHelper.createClusterCache(client, clusterName);",
          "56:     LogLevelFilterManager logLevelFilterManager = new LogLevelFilterManagerZK(client, null, LogSearchConfigZKHelper.getAcls(properties), gson);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:         if (event.getData().getPath().startsWith(configPathStab + \"input/\")) {",
          "100:           handleInputConfigChange(eventType, nodeName, nodeData);",
          "101:         } else if (event.getData().getPath().startsWith(configPathStab + \"loglevelfilter/\")) {",
          "103:         }",
          "104:       }",
          "",
          "[Removed Lines]",
          "102:           handleLogLevelFilterChange(eventType, nodeName, nodeData);",
          "",
          "[Added Lines]",
          "95:           LogSearchConfigZKHelper.handleLogLevelFilterChange(eventType, nodeName, nodeData, gson, logLevelFilterMonitor);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:           LOG.error(\"Could not load input configuration for service \" + serviceName + \":\\n\" + inputConfig, e);",
          "144:         }",
          "145:       }",
          "163:     };",
          "164:     logFeederClusterCache.getListenable().addListener(listener);",
          "165:     logFeederClusterCache.start();",
          "",
          "[Removed Lines]",
          "147:       private void handleLogLevelFilterChange(Type eventType, String nodeName, String nodeData) {",
          "148:         switch (eventType) {",
          "149:           case NODE_ADDED:",
          "150:           case NODE_UPDATED:",
          "151:             LOG.info(\"Node added/updated under loglevelfilter ZK node: \" + nodeName);",
          "152:             LogLevelFilter logLevelFilter = gson.fromJson(nodeData, LogLevelFilter.class);",
          "153:             logLevelFilterMonitor.setLogLevelFilter(nodeName, logLevelFilter);",
          "154:             break;",
          "155:           case NODE_REMOVED:",
          "156:             LOG.info(\"Node removed loglevelfilter input ZK node: \" + nodeName);",
          "157:             logLevelFilterMonitor.removeLogLevelFilter(nodeName);",
          "158:             break;",
          "159:           default:",
          "160:             break;",
          "161:         }",
          "162:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "173:       if (logFeederClusterCache.getCurrentData(globalConfigNodePath) != null) {",
          "174:         client.setData().forPath(globalConfigNodePath, data.getBytes());",
          "175:       } else {",
          "177:       }",
          "178:     } catch (Exception e) {",
          "179:       LOG.warn(\"Exception during global config node creation/update\", e);",
          "",
          "[Removed Lines]",
          "176:         client.create().creatingParentContainersIfNeeded().withACL(getAcls()).forPath(globalConfigNodePath, data.getBytes());",
          "",
          "[Added Lines]",
          "152:         client.create().creatingParentContainersIfNeeded().withACL(LogSearchConfigZKHelper.getAcls(properties)).forPath(globalConfigNodePath, data.getBytes());",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java": [
          "File: ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java -> ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     if (client.checkExists().forPath(\"/\") == null) {",
          "53:       client.create().creatingParentContainersIfNeeded().forPath(\"/\");",
          "54:     }",
          "58:     serverCache = new TreeCache(client, \"/\");",
          "59:     serverCache.start();",
          "61:     setLogLevelFilterManager(logLevelFilterManager);",
          "62:   }",
          "",
          "[Removed Lines]",
          "55:     if (client.checkExists().forPath(\"/output\") == null) {",
          "56:       client.create().creatingParentContainersIfNeeded().forPath(\"/output\");",
          "57:     }",
          "60:     LogLevelFilterManager logLevelFilterManager = new LogLevelFilterManagerZK(client, serverCache, getAcls(), gson);",
          "",
          "[Added Lines]",
          "57:     LogLevelFilterManager logLevelFilterManager = new LogLevelFilterManagerZK(client, serverCache, LogSearchConfigZKHelper.getAcls(properties), gson);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java": [
          "File: ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java -> ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: package org.apache.ambari.logsearch.config.zookeeper;",
          "24: import java.util.Map;",
          "26: import org.apache.ambari.logsearch.config.api.LogLevelFilterManager;",
          "27: import org.apache.ambari.logsearch.config.api.LogSearchConfig;",
          "33: import org.apache.curator.framework.CuratorFramework;",
          "38: import org.apache.zookeeper.KeeperException.NodeExistsException;",
          "42: import org.slf4j.Logger;",
          "43: import org.slf4j.LoggerFactory;",
          "46: import com.google.gson.Gson;",
          "49: public class LogSearchConfigZK implements LogSearchConfig {",
          "50:   private static final Logger LOG = LoggerFactory.getLogger(LogSearchConfigZK.class);",
          "107:   protected Map<String, String> properties;",
          "108:   protected CuratorFramework client;",
          "110:   protected Gson gson;",
          "111:   protected LogLevelFilterManager logLevelFilterManager;",
          "113:   public void init(Map<String, String> properties) throws Exception {",
          "114:     this.properties = properties;",
          "124:     client.start();",
          "145:   }",
          "147:   @Override",
          "148:   public void createInputConfig(String clusterName, String serviceName, String inputConfig) throws Exception {",
          "149:     String nodePath = String.format(\"/%s/input/%s\", clusterName, serviceName);",
          "150:     try {",
          "152:       LOG.info(\"Uploaded input config for the service \" + serviceName + \" for cluster \" + clusterName);",
          "153:     } catch (NodeExistsException e) {",
          "154:       LOG.debug(\"Did not upload input config for service \" + serviceName + \" as it was already uploaded by another Log Feeder\");",
          "",
          "[Removed Lines]",
          "22: import java.util.ArrayList;",
          "23: import java.util.List;",
          "28: import org.apache.ambari.logsearch.config.api.LogSearchPropertyDescription;",
          "29: import org.apache.ambari.logsearch.config.api.model.loglevelfilter.LogLevelFilter;",
          "30: import org.apache.commons.collections.MapUtils;",
          "31: import org.apache.commons.lang3.StringUtils;",
          "32: import org.apache.curator.RetryPolicy;",
          "34: import org.apache.curator.framework.CuratorFrameworkFactory;",
          "35: import org.apache.curator.framework.recipes.cache.TreeCache;",
          "36: import org.apache.curator.retry.RetryForever;",
          "37: import org.apache.curator.retry.RetryUntilElapsed;",
          "39: import org.apache.zookeeper.ZooDefs;",
          "40: import org.apache.zookeeper.data.ACL;",
          "41: import org.apache.zookeeper.data.Id;",
          "45: import com.google.common.base.Splitter;",
          "47: import com.google.gson.GsonBuilder;",
          "52:   private static final int DEFAULT_SESSION_TIMEOUT = 60000;",
          "53:   private static final int DEFAULT_CONNECTION_TIMEOUT = 30000;",
          "54:   private static final int RETRY_INTERVAL_MS = 10000;",
          "55:   private static final String DEFAULT_ZK_ROOT = \"/logsearch\";",
          "56:   private static final String DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";",
          "58:   @LogSearchPropertyDescription(",
          "59:     name = \"logsearch.config.zk_connect_string\",",
          "60:     description = \"ZooKeeper connection string.\",",
          "61:     examples = {\"localhost1:2181,localhost2:2181/znode\"},",
          "62:     sources = {\"logsearch.properties\", \"logfeeder.properties\"}",
          "63:   )",
          "64:   private static final String ZK_CONNECT_STRING_PROPERTY = \"logsearch.config.zk_connect_string\";",
          "66:   @LogSearchPropertyDescription(",
          "67:     name = \"logsearch.config.zk_acls\",",
          "68:     description = \"ZooKeeper ACLs for handling configs. (read & write)\",",
          "69:     examples = {\"world:anyone:r,sasl:solr:cdrwa,sasl:logsearch:cdrwa\"},",
          "70:     sources = {\"logsearch.properties\", \"logfeeder.properties\"},",
          "71:     defaultValue = \"world:anyone:cdrwa\"",
          "72:   )",
          "73:   private static final String ZK_ACLS_PROPERTY = \"logsearch.config.zk_acls\";",
          "75:   @LogSearchPropertyDescription(",
          "76:     name = \"logsearch.config.zk_root\",",
          "77:     description = \"ZooKeeper root node where the shippers are stored. (added to the connection string)\",",
          "78:     examples = {\"/logsearch\"},",
          "79:     sources = {\"logsearch.properties\", \"logfeeder.properties\"}",
          "80:   )",
          "81:   private static final String ZK_ROOT_NODE_PROPERTY = \"logsearch.config.zk_root\";",
          "83:   @LogSearchPropertyDescription(",
          "84:     name = \"logsearch.config.zk_session_time_out_ms\",",
          "85:     description = \"ZooKeeper session timeout in milliseconds\",",
          "86:     examples = {\"60000\"},",
          "87:     sources = {\"logsearch.properties\", \"logfeeder.properties\"}",
          "88:   )",
          "89:   private static final String ZK_SESSION_TIMEOUT_PROPERTY = \"logsearch.config.zk_session_time_out_ms\";",
          "91:   @LogSearchPropertyDescription(",
          "92:     name = \"logsearch.config.zk_connection_time_out_ms\",",
          "93:     description = \"ZooKeeper connection timeout in milliseconds\",",
          "94:     examples = {\"30000\"},",
          "95:     sources = {\"logsearch.properties\", \"logfeeder.properties\"}",
          "96:   )",
          "97:   private static final String ZK_CONNECTION_TIMEOUT_PROPERTY = \"logsearch.config.zk_connection_time_out_ms\";",
          "99:   @LogSearchPropertyDescription(",
          "100:     name = \"logsearch.config.zk_connection_retry_time_out_ms\",",
          "101:     description = \"The maximum elapsed time for connecting to ZooKeeper in milliseconds. 0 means retrying forever.\",",
          "102:     examples = {\"1200000\"},",
          "103:     sources = {\"logsearch.properties\", \"logfeeder.properties\"}",
          "104:   )",
          "105:   private static final String ZK_CONNECTION_RETRY_TIMEOUT_PROPERTY = \"logsearch.config.zk_connection_retry_time_out_ms\";",
          "109:   protected TreeCache outputCache;",
          "116:     String root = MapUtils.getString(properties, ZK_ROOT_NODE_PROPERTY, DEFAULT_ZK_ROOT);",
          "117:     LOG.info(\"Connecting to ZooKeeper at \" + properties.get(ZK_CONNECT_STRING_PROPERTY) + root);",
          "118:     client = CuratorFrameworkFactory.builder()",
          "119:         .connectString(properties.get(ZK_CONNECT_STRING_PROPERTY) + root)",
          "120:         .retryPolicy(getRetryPolicy(properties.get(ZK_CONNECTION_RETRY_TIMEOUT_PROPERTY)))",
          "121:         .connectionTimeoutMs(getIntProperty(ZK_CONNECTION_TIMEOUT_PROPERTY, DEFAULT_CONNECTION_TIMEOUT))",
          "122:         .sessionTimeoutMs(getIntProperty(ZK_SESSION_TIMEOUT_PROPERTY, DEFAULT_SESSION_TIMEOUT))",
          "123:         .build();",
          "126:     outputCache = new TreeCache(client, \"/output\");",
          "127:     outputCache.start();",
          "129:     gson = new GsonBuilder().setDateFormat(DATE_FORMAT).create();",
          "130:   }",
          "132:   private int getIntProperty(String propertyKey, int defaultValue) {",
          "133:     if (properties.get(propertyKey) == null)",
          "134:       return defaultValue;",
          "135:     return Integer.parseInt(properties.get(propertyKey));",
          "136:   }",
          "138:   private RetryPolicy getRetryPolicy(String zkConnectionRetryTimeoutValue) {",
          "139:     if (zkConnectionRetryTimeoutValue == null)",
          "140:       return new RetryForever(RETRY_INTERVAL_MS);",
          "141:     int maxElapsedTimeMs = Integer.parseInt(zkConnectionRetryTimeoutValue);",
          "142:     if (maxElapsedTimeMs == 0)",
          "143:       return new RetryForever(RETRY_INTERVAL_MS);",
          "144:     return new RetryUntilElapsed(maxElapsedTimeMs, RETRY_INTERVAL_MS);",
          "151:       client.create().creatingParentContainersIfNeeded().withACL(getAcls()).forPath(nodePath, inputConfig.getBytes());",
          "",
          "[Added Lines]",
          "43:     client = LogSearchConfigZKHelper.createZKClient(properties);",
          "45:     gson = LogSearchConfigZKHelper.createGson();",
          "52:       client.create().creatingParentContainersIfNeeded().withACL(LogSearchConfigZKHelper.getAcls(properties)).forPath(nodePath, inputConfig.getBytes());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:     this.logLevelFilterManager = logLevelFilterManager;",
          "166:   }",
          "211:   @Override",
          "212:   public void close() {",
          "213:     LOG.info(\"Closing ZooKeeper Connection\");",
          "",
          "[Removed Lines]",
          "168:   protected List<ACL> getAcls() {",
          "169:     String aclStr = properties.get(ZK_ACLS_PROPERTY);",
          "170:     if (StringUtils.isBlank(aclStr)) {",
          "171:       return ZooDefs.Ids.OPEN_ACL_UNSAFE;",
          "172:     }",
          "174:     List<ACL> acls = new ArrayList<>();",
          "175:     List<String> aclStrList = Splitter.on(\",\").omitEmptyStrings().trimResults().splitToList(aclStr);",
          "176:     for (String unparcedAcl : aclStrList) {",
          "177:       String[] parts = unparcedAcl.split(\":\");",
          "178:       if (parts.length == 3) {",
          "179:         acls.add(new ACL(parsePermission(parts[2]), new Id(parts[0], parts[1])));",
          "180:       }",
          "181:     }",
          "182:     return acls;",
          "183:   }",
          "185:   private Integer parsePermission(String permission) {",
          "186:     int permissionCode = 0;",
          "187:     for (char each : permission.toLowerCase().toCharArray()) {",
          "188:       switch (each) {",
          "189:         case 'r':",
          "190:           permissionCode |= ZooDefs.Perms.READ;",
          "191:           break;",
          "192:         case 'w':",
          "193:           permissionCode |= ZooDefs.Perms.WRITE;",
          "194:           break;",
          "195:         case 'c':",
          "196:           permissionCode |= ZooDefs.Perms.CREATE;",
          "197:           break;",
          "198:         case 'd':",
          "199:           permissionCode |= ZooDefs.Perms.DELETE;",
          "200:           break;",
          "201:         case 'a':",
          "202:           permissionCode |= ZooDefs.Perms.ADMIN;",
          "203:           break;",
          "204:         default:",
          "205:           throw new IllegalArgumentException(\"Unsupported permission: \" + permission);",
          "206:       }",
          "207:     }",
          "208:     return permissionCode;",
          "209:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZKHelper.java||ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZKHelper.java": [
          "File: ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZKHelper.java -> ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZKHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logsearch.config.zookeeper;",
          "21: import com.google.common.base.Splitter;",
          "22: import com.google.common.collect.ImmutableSet;",
          "23: import com.google.gson.Gson;",
          "24: import com.google.gson.GsonBuilder;",
          "25: import org.apache.ambari.logsearch.config.api.LogLevelFilterMonitor;",
          "26: import org.apache.ambari.logsearch.config.api.LogSearchPropertyDescription;",
          "27: import org.apache.ambari.logsearch.config.api.model.loglevelfilter.LogLevelFilter;",
          "28: import org.apache.commons.collections.MapUtils;",
          "29: import org.apache.commons.lang3.StringUtils;",
          "30: import org.apache.curator.RetryPolicy;",
          "31: import org.apache.curator.framework.CuratorFramework;",
          "32: import org.apache.curator.framework.CuratorFrameworkFactory;",
          "33: import org.apache.curator.framework.recipes.cache.TreeCache;",
          "34: import org.apache.curator.framework.recipes.cache.TreeCacheEvent;",
          "35: import org.apache.curator.framework.recipes.cache.TreeCacheListener;",
          "36: import org.apache.curator.retry.RetryForever;",
          "37: import org.apache.curator.retry.RetryUntilElapsed;",
          "38: import org.apache.curator.utils.ZKPaths;",
          "39: import org.apache.zookeeper.ZooDefs;",
          "40: import org.apache.zookeeper.data.ACL;",
          "41: import org.apache.zookeeper.data.Id;",
          "42: import org.slf4j.Logger;",
          "43: import org.slf4j.LoggerFactory;",
          "45: import java.util.ArrayList;",
          "46: import java.util.List;",
          "47: import java.util.Map;",
          "48: import java.util.Set;",
          "53: public class LogSearchConfigZKHelper {",
          "55:   private static final Logger LOG = LoggerFactory.getLogger(LogSearchConfigZKHelper.class);",
          "57:   private static final int DEFAULT_SESSION_TIMEOUT = 60000;",
          "58:   private static final int DEFAULT_CONNECTION_TIMEOUT = 30000;",
          "59:   private static final int RETRY_INTERVAL_MS = 10000;",
          "60:   private static final String DEFAULT_ZK_ROOT = \"/logsearch\";",
          "61:   private static final String DATE_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";",
          "63:   @LogSearchPropertyDescription(",
          "64:     name = \"logsearch.config.zk_connect_string\",",
          "65:     description = \"ZooKeeper connection string.\",",
          "66:     examples = {\"localhost1:2181,localhost2:2181/znode\"},",
          "67:     sources = {\"logsearch.properties\", \"logfeeder.properties\"}",
          "68:   )",
          "69:   private static final String ZK_CONNECT_STRING_PROPERTY = \"logsearch.config.zk_connect_string\";",
          "71:   @LogSearchPropertyDescription(",
          "72:     name = \"logsearch.config.zk_acls\",",
          "73:     description = \"ZooKeeper ACLs for handling configs. (read & write)\",",
          "74:     examples = {\"world:anyone:r,sasl:solr:cdrwa,sasl:logsearch:cdrwa\"},",
          "75:     sources = {\"logsearch.properties\", \"logfeeder.properties\"},",
          "76:     defaultValue = \"world:anyone:cdrwa\"",
          "77:   )",
          "78:   private static final String ZK_ACLS_PROPERTY = \"logsearch.config.zk_acls\";",
          "80:   @LogSearchPropertyDescription(",
          "81:     name = \"logsearch.config.zk_root\",",
          "82:     description = \"ZooKeeper root node where the shippers are stored. (added to the connection string)\",",
          "83:     examples = {\"/logsearch\"},",
          "84:     sources = {\"logsearch.properties\", \"logfeeder.properties\"}",
          "85:   )",
          "86:   private static final String ZK_ROOT_NODE_PROPERTY = \"logsearch.config.zk_root\";",
          "88:   @LogSearchPropertyDescription(",
          "89:     name = \"logsearch.config.zk_session_time_out_ms\",",
          "90:     description = \"ZooKeeper session timeout in milliseconds\",",
          "91:     examples = {\"60000\"},",
          "92:     sources = {\"logsearch.properties\", \"logfeeder.properties\"}",
          "93:   )",
          "94:   private static final String ZK_SESSION_TIMEOUT_PROPERTY = \"logsearch.config.zk_session_time_out_ms\";",
          "96:   @LogSearchPropertyDescription(",
          "97:     name = \"logsearch.config.zk_connection_time_out_ms\",",
          "98:     description = \"ZooKeeper connection timeout in milliseconds\",",
          "99:     examples = {\"30000\"},",
          "100:     sources = {\"logsearch.properties\", \"logfeeder.properties\"}",
          "101:   )",
          "102:   private static final String ZK_CONNECTION_TIMEOUT_PROPERTY = \"logsearch.config.zk_connection_time_out_ms\";",
          "104:   @LogSearchPropertyDescription(",
          "105:     name = \"logsearch.config.zk_connection_retry_time_out_ms\",",
          "106:     description = \"The maximum elapsed time for connecting to ZooKeeper in milliseconds. 0 means retrying forever.\",",
          "107:     examples = {\"1200000\"},",
          "108:     sources = {\"logsearch.properties\", \"logfeeder.properties\"}",
          "109:   )",
          "110:   private static final String ZK_CONNECTION_RETRY_TIMEOUT_PROPERTY = \"logsearch.config.zk_connection_retry_time_out_ms\";",
          "112:   private static final long WAIT_FOR_ROOT_SLEEP_SECONDS = 10;",
          "114:   private LogSearchConfigZKHelper() {",
          "115:   }",
          "120:   public static CuratorFramework createZKClient(Map<String, String> properties) {",
          "121:     String root = MapUtils.getString(properties, ZK_ROOT_NODE_PROPERTY, DEFAULT_ZK_ROOT);",
          "122:     LOG.info(\"Connecting to ZooKeeper at \" + properties.get(ZK_CONNECT_STRING_PROPERTY) + root);",
          "123:     return CuratorFrameworkFactory.builder()",
          "124:       .connectString(properties.get(ZK_CONNECT_STRING_PROPERTY) + root)",
          "125:       .retryPolicy(getRetryPolicy(properties.get(ZK_CONNECTION_RETRY_TIMEOUT_PROPERTY)))",
          "126:       .connectionTimeoutMs(getIntProperty(properties, ZK_CONNECTION_TIMEOUT_PROPERTY, DEFAULT_CONNECTION_TIMEOUT))",
          "127:       .sessionTimeoutMs(getIntProperty(properties, ZK_SESSION_TIMEOUT_PROPERTY, DEFAULT_SESSION_TIMEOUT))",
          "128:       .build();",
          "129:   }",
          "134:   public static List<ACL> getAcls(Map<String, String> properties) {",
          "135:     String aclStr = properties.get(ZK_ACLS_PROPERTY);",
          "136:     if (StringUtils.isBlank(aclStr)) {",
          "137:       return ZooDefs.Ids.OPEN_ACL_UNSAFE;",
          "138:     }",
          "140:     List<ACL> acls = new ArrayList<>();",
          "141:     List<String> aclStrList = Splitter.on(\",\").omitEmptyStrings().trimResults().splitToList(aclStr);",
          "142:     for (String unparcedAcl : aclStrList) {",
          "143:       String[] parts = unparcedAcl.split(\":\");",
          "144:       if (parts.length == 3) {",
          "145:         acls.add(new ACL(parsePermission(parts[2]), new Id(parts[0], parts[1])));",
          "146:       }",
          "147:     }",
          "148:     return acls;",
          "149:   }",
          "151:   private static int getIntProperty(Map<String, String> properties, String propertyKey, int defaultValue) {",
          "152:     if (properties.get(propertyKey) == null)",
          "153:       return defaultValue;",
          "154:     return Integer.parseInt(properties.get(propertyKey));",
          "155:   }",
          "157:   private static RetryPolicy getRetryPolicy(String zkConnectionRetryTimeoutValue) {",
          "158:     if (zkConnectionRetryTimeoutValue == null)",
          "159:       return new RetryForever(RETRY_INTERVAL_MS);",
          "160:     int maxElapsedTimeMs = Integer.parseInt(zkConnectionRetryTimeoutValue);",
          "161:     if (maxElapsedTimeMs == 0)",
          "162:       return new RetryForever(RETRY_INTERVAL_MS);",
          "163:     return new RetryUntilElapsed(maxElapsedTimeMs, RETRY_INTERVAL_MS);",
          "164:   }",
          "169:   public static TreeCacheListener createTreeCacheListener(String clusterName, Gson gson, LogLevelFilterMonitor logLevelFilterMonitor) {",
          "170:     return new TreeCacheListener() {",
          "171:       private final Set<TreeCacheEvent.Type> nodeEvents = ImmutableSet.of(TreeCacheEvent.Type.NODE_ADDED, TreeCacheEvent.Type.NODE_UPDATED, TreeCacheEvent.Type.NODE_REMOVED);",
          "172:       public void childEvent(CuratorFramework client, TreeCacheEvent event) throws Exception {",
          "173:         if (!nodeEvents.contains(event.getType())) {",
          "174:           return;",
          "175:         }",
          "176:         String nodeName = ZKPaths.getNodeFromPath(event.getData().getPath());",
          "177:         String nodeData = new String(event.getData().getData());",
          "178:         TreeCacheEvent.Type eventType = event.getType();",
          "180:         String configPathStab = String.format(\"/%s/\", clusterName);",
          "182:         if (event.getData().getPath().startsWith(configPathStab + \"loglevelfilter/\")) {",
          "183:           handleLogLevelFilterChange(eventType, nodeName, nodeData, gson, logLevelFilterMonitor);",
          "184:         }",
          "185:       }",
          "186:     };",
          "187:   }",
          "192:   public static TreeCache createClusterCache(CuratorFramework client, String clusterName) {",
          "193:     return new TreeCache(client, String.format(\"/%s\", clusterName));",
          "194:   }",
          "199:   public static void addAndStartListenersOnCluster(TreeCache clusterCache, TreeCacheListener listener) throws Exception {",
          "200:     clusterCache.getListenable().addListener(listener);",
          "201:     clusterCache.start();",
          "202:   }",
          "204:   public static void waitUntilRootAvailable(CuratorFramework client) throws Exception {",
          "205:     while (client.checkExists().forPath(\"/\") == null) {",
          "206:       LOG.info(\"Root node is not present yet, going to sleep for \" + WAIT_FOR_ROOT_SLEEP_SECONDS + \" seconds\");",
          "207:       Thread.sleep(WAIT_FOR_ROOT_SLEEP_SECONDS * 1000);",
          "208:     }",
          "209:   }",
          "214:   public static void handleLogLevelFilterChange(final TreeCacheEvent.Type eventType, final String nodeName, final String nodeData,",
          "215:                                                 final Gson gson, final LogLevelFilterMonitor logLevelFilterMonitor) {",
          "216:     switch (eventType) {",
          "217:       case NODE_ADDED:",
          "218:       case NODE_UPDATED:",
          "219:         LOG.info(\"Node added/updated under loglevelfilter ZK node: \" + nodeName);",
          "220:         LogLevelFilter logLevelFilter = gson.fromJson(nodeData, LogLevelFilter.class);",
          "221:         logLevelFilterMonitor.setLogLevelFilter(nodeName, logLevelFilter);",
          "222:         break;",
          "223:       case NODE_REMOVED:",
          "224:         LOG.info(\"Node removed loglevelfilter input ZK node: \" + nodeName);",
          "225:         logLevelFilterMonitor.removeLogLevelFilter(nodeName);",
          "226:         break;",
          "227:       default:",
          "228:         break;",
          "229:     }",
          "230:   }",
          "235:   public static Integer parsePermission(String permission) {",
          "236:     int permissionCode = 0;",
          "237:     for (char each : permission.toLowerCase().toCharArray()) {",
          "238:       switch (each) {",
          "239:         case 'r':",
          "240:           permissionCode |= ZooDefs.Perms.READ;",
          "241:           break;",
          "242:         case 'w':",
          "243:           permissionCode |= ZooDefs.Perms.WRITE;",
          "244:           break;",
          "245:         case 'c':",
          "246:           permissionCode |= ZooDefs.Perms.CREATE;",
          "247:           break;",
          "248:         case 'd':",
          "249:           permissionCode |= ZooDefs.Perms.DELETE;",
          "250:           break;",
          "251:         case 'a':",
          "252:           permissionCode |= ZooDefs.Perms.ADMIN;",
          "253:           break;",
          "254:         default:",
          "255:           throw new IllegalArgumentException(\"Unsupported permission: \" + permission);",
          "256:       }",
          "257:     }",
          "258:     return permissionCode;",
          "259:   }",
          "261:   public static Gson createGson() {",
          "262:     return new GsonBuilder().setDateFormat(DATE_FORMAT).create();",
          "263:   }",
          "265: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogFeederConstants.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   public static final String USE_SOLR_FILTER_STORAGE_PROPERTY = \"logfeeder.configs.filter.solr.enabled\";",
          "99:   public static final boolean USE_SOLR_FILTER_STORAGE_DEFAULT = false;",
          "101:   public static final String MONITOR_SOLR_FILTER_STORAGE_PROPERTY = \"logfeeder.configs.filter.solr.monitor.enabled\";",
          "102:   public static final boolean MONITOR_SOLR_FILTER_STORAGE_DEFAULT = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:   public static final String USE_ZK_FILTER_STORAGE_PROPERTY = \"logfeeder.configs.filter.zk.enabled\";",
          "102:   public static final boolean USE_ZK_FILTER_STORAGE_DEFAULT = false;",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.apache.ambari.logsearch.config.local.LogSearchConfigLogFeederLocal;",
          "39: import org.apache.ambari.logsearch.config.solr.LogLevelFilterManagerSolr;",
          "40: import org.apache.ambari.logsearch.config.solr.LogLevelFilterUpdaterSolr;",
          "41: import org.apache.ambari.logsearch.config.zookeeper.LogSearchConfigLogFeederZK;",
          "42: import org.apache.solr.client.solrj.SolrClient;",
          "43: import org.springframework.context.annotation.Bean;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: import org.apache.ambari.logsearch.config.zookeeper.LogLevelFilterManagerZK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;",
          "49: import javax.inject.Inject;",
          "51: @Configuration",
          "52: @PropertySource(value = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import java.util.HashMap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   }",
          "94:   @Bean",
          "96:     if (logFeederProps.isSolrFilterStorage()) {",
          "97:       SolrClient solrClient = new LogFeederSolrClientFactory().createSolrClient(",
          "98:         logFeederProps.getSolrZkConnectString(), logFeederProps.getSolrUrls(), \"history\");",
          "99:       return new LogLevelFilterManagerSolr(solrClient);",
          "100:     } else { // no default filter manager",
          "101:       return null;",
          "102:     }",
          "",
          "[Removed Lines]",
          "95:   public LogLevelFilterManager logLevelFilterManager() {",
          "",
          "[Added Lines]",
          "97:   public LogLevelFilterManager logLevelFilterManager() throws Exception {",
          "102:     } else if (logFeederProps.isUseLocalConfigs() && logFeederProps.isZkFilterStorage()) {",
          "103:       final HashMap<String, String> map = new HashMap<>();",
          "104:       for (final String name : logFeederProps.getProperties().stringPropertyNames()) {",
          "105:         map.put(name, logFeederProps.getProperties().getProperty(name));",
          "106:       }",
          "107:       return new LogLevelFilterManagerZK(map);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/LogFeederProps.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:   @Value(\"${\" + LogFeederConstants.USE_SOLR_FILTER_STORAGE_PROPERTY + \":\" + LogFeederConstants.USE_SOLR_FILTER_STORAGE_DEFAULT +\"}\")",
          "162:   public boolean solrFilterStorage;",
          "164:   @LogSearchPropertyDescription(",
          "165:     name = LogFeederConstants.MONITOR_SOLR_FILTER_STORAGE_PROPERTY,",
          "166:     description = \"Monitor log level filters (in solr) periodically - used for checking updates.\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:   @LogSearchPropertyDescription(",
          "165:     name = LogFeederConstants.USE_ZK_FILTER_STORAGE_PROPERTY,",
          "166:     description = \"Use zk as a log level filter storage (works only with local config)\",",
          "167:     examples = {\"true\"},",
          "168:     defaultValue = LogFeederConstants.USE_ZK_FILTER_STORAGE_DEFAULT + \"\",",
          "169:     sources = {LogFeederConstants.LOGFEEDER_PROPERTIES_FILE}",
          "170:   )",
          "171:   @Value(\"${\" + LogFeederConstants.USE_ZK_FILTER_STORAGE_PROPERTY + \":\" + LogFeederConstants.USE_ZK_FILTER_STORAGE_DEFAULT +\"}\")",
          "172:   public boolean zkFilterStorage;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:     this.solrUrlsStr = solrUrlsStr;",
          "335:   }",
          "337:   public String[] getSolrUrls() {",
          "338:     if (StringUtils.isNotBlank(this.solrUrlsStr)) {",
          "339:       return this.solrUrlsStr.split(\",\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:   public boolean isZkFilterStorage() {",
          "348:     return zkFilterStorage;",
          "349:   }",
          "351:   public void setZkFilterStorage(boolean zkFilterStorage) {",
          "352:     this.zkFilterStorage = zkFilterStorage;",
          "353:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java||ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java": [
          "File: ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java -> ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logfeeder.loglevelfilter;",
          "21: import org.apache.ambari.logfeeder.common.LogFeederConstants;",
          "22: import org.apache.ambari.logfeeder.conf.LogFeederProps;",
          "23: import org.apache.ambari.logfeeder.plugin.input.InputMarker;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import com.google.gson.Gson;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: import org.apache.ambari.logsearch.config.api.LogLevelFilterMonitor;",
          "26: import org.apache.ambari.logsearch.config.api.LogSearchConfig;",
          "27: import org.apache.ambari.logsearch.config.api.model.loglevelfilter.LogLevelFilter;",
          "28: import org.apache.commons.collections.CollectionUtils;",
          "29: import org.apache.commons.collections.MapUtils;",
          "30: import org.apache.commons.lang.StringUtils;",
          "31: import org.slf4j.Logger;",
          "32: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.ambari.logsearch.config.zookeeper.LogLevelFilterManagerZK;",
          "30: import org.apache.ambari.logsearch.config.zookeeper.LogSearchConfigZKHelper;",
          "34: import org.apache.curator.framework.CuratorFramework;",
          "35: import org.apache.curator.framework.recipes.cache.TreeCache;",
          "36: import org.apache.curator.framework.recipes.cache.TreeCacheListener;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:   private LogSearchConfig config;",
          "65:   private Map<String, LogLevelFilter> filters = new ConcurrentHashMap<>();",
          "67:   public LogLevelFilterHandler(LogSearchConfig config) {",
          "68:     this.config = config;",
          "69:   }",
          "71:   @PostConstruct",
          "73:     TimeZone.setDefault(TimeZone.getTimeZone(TIMEZONE));",
          "74:     if (config.getLogLevelFilterManager() != null) {",
          "75:       TreeMap<String, LogLevelFilter> sortedFilters = config.getLogLevelFilterManager()",
          "76:         .getLogLevelFilters(logFeederProps.getClusterName())",
          "",
          "[Removed Lines]",
          "72:   public void init() {",
          "",
          "[Added Lines]",
          "74:   private TreeCache clusterCache = null;",
          "75:   private TreeCacheListener listener = null;",
          "82:   public void init() throws Exception {",
          "84:     if (logFeederProps.isZkFilterStorage() && logFeederProps.isUseLocalConfigs()) {",
          "85:       LogLevelFilterManagerZK filterManager = (LogLevelFilterManagerZK) config.getLogLevelFilterManager();",
          "86:       CuratorFramework client = filterManager.getClient();",
          "87:       client.start();",
          "88:       Gson gson = filterManager.getGson();",
          "89:       LogSearchConfigZKHelper.waitUntilRootAvailable(client);",
          "90:       TreeCache clusterCache = LogSearchConfigZKHelper.createClusterCache(client, logFeederProps.getClusterName());",
          "91:       TreeCacheListener listener = LogSearchConfigZKHelper.createTreeCacheListener(",
          "92:         logFeederProps.getClusterName(), gson, this);",
          "93:       LogSearchConfigZKHelper.addAndStartListenersOnCluster(clusterCache, listener);",
          "94:     }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.common;",
          "21: import com.google.common.base.Splitter;",
          "22: import org.apache.zookeeper.ZooDefs;",
          "23: import org.apache.zookeeper.data.ACL;",
          "24: import org.apache.zookeeper.data.Id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import org.apache.ambari.logsearch.config.zookeeper.LogSearchConfigZKHelper;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     for (String unparcedAcl : aclStrList) {",
          "37:       String[] parts = unparcedAcl.split(\":\");",
          "38:       if (parts.length == 3) {",
          "40:       }",
          "41:     }",
          "42:     return acls;",
          "43:   }",
          "70: }",
          "",
          "[Removed Lines]",
          "39:         acls.add(new ACL(parsePermission(parts[2]), new Id(parts[0], parts[1])));",
          "45:   private Integer parsePermission(String permission) {",
          "46:     int permissionCode = 0;",
          "47:     for (char each : permission.toLowerCase().toCharArray()) {",
          "48:       switch (each) {",
          "49:         case 'r':",
          "50:           permissionCode |= ZooDefs.Perms.READ;",
          "51:           break;",
          "52:         case 'w':",
          "53:           permissionCode |= ZooDefs.Perms.WRITE;",
          "54:           break;",
          "55:         case 'c':",
          "56:           permissionCode |= ZooDefs.Perms.CREATE;",
          "57:           break;",
          "58:         case 'd':",
          "59:           permissionCode |= ZooDefs.Perms.DELETE;",
          "60:           break;",
          "61:         case 'a':",
          "62:           permissionCode |= ZooDefs.Perms.ADMIN;",
          "63:           break;",
          "64:         default:",
          "65:           throw new IllegalArgumentException(\"Unsupported permission: \" + permission);",
          "66:       }",
          "67:     }",
          "68:     return permissionCode;",
          "69:   }",
          "",
          "[Added Lines]",
          "40:         acls.add(new ACL(LogSearchConfigZKHelper.parsePermission(parts[2]), new Id(parts[0], parts[1])));",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.logsearch.conf;",
          "21: import org.apache.ambari.logsearch.config.api.LogSearchPropertyDescription;",
          "22: import org.springframework.beans.factory.annotation.Value;",
          "23: import org.springframework.context.annotation.Configuration;",
          "25: import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "24: import org.springframework.context.annotation.Bean;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:   @Value(\"${logsearch.config.api.filter.solr.enabled:false}\")",
          "48:   public boolean solrFilterStorage;",
          "50:   public boolean isConfigApiEnabled() {",
          "51:     return configApiEnabled;",
          "52:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:   @LogSearchPropertyDescription(",
          "53:     name = \"logsearch.config.api.filter.zk-only.enabled\",",
          "54:     description = \"Use zookeeper as a log level filter storage\",",
          "55:     examples = {\"true\"},",
          "56:     defaultValue = \"false\",",
          "57:     sources = {LOGSEARCH_PROPERTIES_FILE}",
          "58:   )",
          "59:   @Value(\"${logsearch.config.api.filter.zk.enabled:false}\")",
          "60:   public boolean zkFilterStorage;",
          "62:   @Bean(name = \"logLevelFilterManagerState\")",
          "63:   public LogLevelFilterManagerState logLevelFilterManagerState() {",
          "64:     return new LogLevelFilterManagerState();",
          "65:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:   public void setSolrFilterStorage(boolean solrFilterStorage) {",
          "63:     this.solrFilterStorage = solrFilterStorage;",
          "64:   }",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   public boolean isZkFilterStorage() {",
          "84:     return zkFilterStorage;",
          "85:   }",
          "87:   public void setZkFilterStorage(boolean zkFilterStorage) {",
          "88:     this.zkFilterStorage = zkFilterStorage;",
          "89:   }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import org.apache.ambari.logsearch.conf.global.LogSearchConfigState;",
          "24: import org.apache.ambari.logsearch.conf.global.SolrCollectionState;",
          "27: import org.apache.ambari.logsearch.web.authenticate.LogsearchAuthFailureHandler;",
          "28: import org.apache.ambari.logsearch.web.authenticate.LogsearchAuthSuccessHandler;",
          "29: import org.apache.ambari.logsearch.web.authenticate.LogsearchLogoutSuccessHandler;",
          "",
          "[Removed Lines]",
          "25: import org.apache.ambari.logsearch.conf.global.SolrLogLevelFilterManagerState;",
          "26: import org.apache.ambari.logsearch.config.api.LogSearchPropertyDescription;",
          "",
          "[Added Lines]",
          "25: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: import org.springframework.security.config.annotation.web.builders.HttpSecurity;",
          "45: import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;",
          "46: import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;",
          "48: import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;",
          "49: import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;",
          "50: import org.springframework.security.web.util.matcher.AntPathRequestMatcher;",
          "",
          "[Removed Lines]",
          "47: import org.springframework.security.config.http.SessionCreationPolicy;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:   private SolrCollectionState solrEventHistoryState;",
          "92:   @Inject",
          "96:   @Inject",
          "97:   private LogSearchConfigState logSearchConfigState;",
          "",
          "[Removed Lines]",
          "93:   @Named(\"solrLogLevelFilterManagerState\")",
          "94:   private SolrLogLevelFilterManagerState solrLogLevelFilterManagerState;",
          "",
          "[Added Lines]",
          "91:   @Named(\"logLevelFilterManagerState\")",
          "92:   private LogLevelFilterManagerState logLevelFilterManagerState;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:   @Bean",
          "192:   public LogSearchConfigStateFilter logSearchConfigStateFilter() {",
          "194:       return new LogSearchConfigStateFilter(shipperConfigInputRequestMatcher(), logSearchConfigState, logSearchConfigApiConfig.isConfigApiEnabled());",
          "195:     } else {",
          "196:       return new LogSearchConfigStateFilter(logsearchConfigRequestMatcher(), logSearchConfigState, logSearchConfigApiConfig.isConfigApiEnabled());",
          "",
          "[Removed Lines]",
          "193:     if (logSearchConfigApiConfig.isSolrFilterStorage()) {",
          "",
          "[Added Lines]",
          "191:     if (logSearchConfigApiConfig.isSolrFilterStorage() || logSearchConfigApiConfig.isZkFilterStorage()) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "200:   @Bean",
          "201:   public LogSearchLogLevelFilterManagerFilter logSearchLogLevelFilterManagerFilter() {",
          "204:   }",
          "206:   @Bean",
          "",
          "[Removed Lines]",
          "202:     boolean enabled = logSearchConfigApiConfig.isSolrFilterStorage() && !logSearchConfigApiConfig.isConfigApiEnabled();",
          "203:     return new LogSearchLogLevelFilterManagerFilter(logLevelFilterRequestMatcher(), solrLogLevelFilterManagerState, enabled);",
          "",
          "[Added Lines]",
          "200:     boolean enabled = (logSearchConfigApiConfig.isSolrFilterStorage() || logSearchConfigApiConfig.isZkFilterStorage())",
          "201:       && !logSearchConfigApiConfig.isConfigApiEnabled();",
          "202:     return new LogSearchLogLevelFilterManagerFilter(logLevelFilterRequestMatcher(), logLevelFilterManagerState, enabled);",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.ambari.logsearch.conf.global.SolrAuditLogsState;",
          "22: import org.apache.ambari.logsearch.conf.global.SolrCollectionState;",
          "24: import org.apache.ambari.logsearch.conf.global.SolrServiceLogsState;",
          "25: import org.apache.ambari.logsearch.conf.global.SolrEventHistoryState;",
          "26: import org.apache.ambari.logsearch.dao.SolrSchemaFieldDao;",
          "",
          "[Removed Lines]",
          "23: import org.apache.ambari.logsearch.conf.global.SolrLogLevelFilterManagerState;",
          "",
          "[Added Lines]",
          "23: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:     return new SolrEventHistoryState();",
          "55:   }",
          "62:   @Bean",
          "63:   public SolrClientsHolder solrClientsHolder() {",
          "64:     return new SolrClientsHolder();",
          "",
          "[Removed Lines]",
          "57:   @Bean(name = \"solrLogLevelFilterManagerState\")",
          "58:   public SolrLogLevelFilterManagerState solrLogLevelFilterManagerState() {",
          "59:     return new SolrLogLevelFilterManagerState();",
          "60:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/global/SolrLogLevelFilterManagerState.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/global/LogLevelFilterManagerState.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/global/SolrLogLevelFilterManagerState.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/global/LogLevelFilterManagerState.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import javax.inject.Named;",
          "23: @Named",
          "26:   private volatile boolean logLevelFilterManagerIsReady;",
          "",
          "[Removed Lines]",
          "24: public class SolrLogLevelFilterManagerState {",
          "",
          "[Added Lines]",
          "24: public class LogLevelFilterManagerState {",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/LogLevelManagerFilterConfigurer.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/LogLevelManagerFilterConfigurer.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/LogLevelManagerFilterConfigurer.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/LogLevelManagerFilterConfigurer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.ambari.logsearch.configurer;",
          "21: import org.apache.ambari.logsearch.conf.LogSearchConfigApiConfig;",
          "22: import org.apache.ambari.logsearch.conf.LogSearchConfigMapHolder;",
          "23: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "24: import org.apache.ambari.logsearch.config.solr.LogLevelFilterManagerSolr;",
          "25: import org.apache.ambari.logsearch.config.zookeeper.LogLevelFilterManagerZK;",
          "26: import org.apache.ambari.logsearch.config.zookeeper.LogSearchConfigZKHelper;",
          "27: import org.apache.ambari.logsearch.dao.EventHistorySolrDao;",
          "28: import org.apache.curator.framework.CuratorFramework;",
          "29: import org.slf4j.Logger;",
          "30: import org.slf4j.LoggerFactory;",
          "32: import javax.annotation.PostConstruct;",
          "33: import javax.inject.Inject;",
          "34: import javax.inject.Named;",
          "36: @Named",
          "37: public class LogLevelManagerFilterConfigurer implements Configurer {",
          "38:   private static final Logger logger = LoggerFactory.getLogger(LogLevelManagerFilterConfigurer.class);",
          "40:   private static final int RETRY_INTERVAL_SECONDS = 10;",
          "42:   private final EventHistorySolrDao eventHistorySolrDao;",
          "43:   private final LogLevelFilterManagerState logLevelFilterManagerState;",
          "44:   private final LogSearchConfigApiConfig logSearchConfigApiConfig;",
          "45:   private final LogSearchConfigMapHolder logSearchConfigMapHolder;",
          "47:   private LogLevelFilterManagerSolr logLevelFilterManagerSolr;",
          "48:   private LogLevelFilterManagerZK logLevelFilterManagerZK;",
          "50:   @Inject",
          "51:   public LogLevelManagerFilterConfigurer(final LogSearchConfigApiConfig logSearchConfigApiConfig,",
          "52:                                          final LogLevelFilterManagerState logLevelFilterManagerState,",
          "53:                                          final EventHistorySolrDao eventHistorySolrDao,",
          "54:                                          final LogSearchConfigMapHolder logSearchConfigMapHolder) {",
          "55:     this.logSearchConfigApiConfig = logSearchConfigApiConfig;",
          "56:     this.logLevelFilterManagerState = logLevelFilterManagerState;",
          "57:     this.eventHistorySolrDao = eventHistorySolrDao;",
          "58:     this.logSearchConfigMapHolder = logSearchConfigMapHolder;",
          "59:   }",
          "61:   @PostConstruct",
          "62:   @Override",
          "63:   public void start() {",
          "64:     Thread setupThread = new Thread(\"setup_solr_loglevel_filter_manager\") {",
          "65:       @Override",
          "66:       public void run() {",
          "67:         logger.info(\"Start initializing log level filter manager ...\");",
          "68:         if (logSearchConfigApiConfig.isSolrFilterStorage() || logSearchConfigApiConfig.isZkFilterStorage()) {",
          "69:           while (true) {",
          "70:             try {",
          "71:               if (logSearchConfigApiConfig.isSolrFilterStorage()) {",
          "72:                 if (eventHistorySolrDao.getSolrCollectionState().isSolrCollectionReady()) {",
          "73:                   setLogLevelFilterManagerSolr(new LogLevelFilterManagerSolr(eventHistorySolrDao.getSolrClient()));",
          "74:                   logLevelFilterManagerState.setLogLevelFilterManagerIsReady(true);",
          "75:                   logger.info(\"Log level filter manager (solr) successfully initialized.\");",
          "76:                   break;",
          "77:                 }",
          "78:               }",
          "79:               if (logSearchConfigApiConfig.isZkFilterStorage()) {",
          "80:                 CuratorFramework client = LogSearchConfigZKHelper.createZKClient(logSearchConfigMapHolder.getLogsearchProperties());",
          "81:                 client.start();",
          "82:                 if (client.checkExists().forPath(\"/\") == null) {",
          "83:                   client.create().creatingParentContainersIfNeeded().forPath(\"/\");",
          "84:                 }",
          "85:                 LogLevelFilterManagerZK logLevelFilterManagerZK = new LogLevelFilterManagerZK(",
          "86:                   logSearchConfigMapHolder.getLogsearchProperties(), client);",
          "87:                 setLogLevelFilterManagerZK(logLevelFilterManagerZK);",
          "88:                 logLevelFilterManagerState.setLogLevelFilterManagerIsReady(true);",
          "89:                 logger.info(\"Log level filter manager (zookeeper) successfully initialized.\");",
          "90:                 break;",
          "91:               }",
          "92:             } catch (Exception ex) {",
          "93:               logger.warn(\"Could not initialize log level Solr filter manager, going to sleep for \" + RETRY_INTERVAL_SECONDS + \" seconds \", ex);",
          "94:             }",
          "95:             try {",
          "96:               Thread.sleep(RETRY_INTERVAL_SECONDS * 1000);",
          "97:             } catch (Exception e) {/* ignore */}",
          "98:           }",
          "99:         } else {",
          "100:           logger.info(\"Solr is not used as a log level filter storage.\");",
          "101:         }",
          "102:       }",
          "103:     };",
          "104:     setupThread.setDaemon(true);",
          "105:     setupThread.start();",
          "106:   }",
          "108:   public LogLevelFilterManagerSolr getLogLevelFilterManagerSolr() {",
          "109:     return logLevelFilterManagerSolr;",
          "110:   }",
          "112:   public void setLogLevelFilterManagerSolr(final LogLevelFilterManagerSolr logLevelFilterManagerSolr) {",
          "113:     this.logLevelFilterManagerSolr = logLevelFilterManagerSolr;",
          "114:   }",
          "116:   public LogLevelFilterManagerZK getLogLevelFilterManagerZK() {",
          "117:     return logLevelFilterManagerZK;",
          "118:   }",
          "120:   public void setLogLevelFilterManagerZK(LogLevelFilterManagerZK logLevelFilterManagerZK) {",
          "121:     this.logLevelFilterManagerZK = logLevelFilterManagerZK;",
          "122:   }",
          "123: }",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrLogLevelFilterConfigurer.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrLogLevelFilterConfigurer.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrLogLevelFilterConfigurer.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrLogLevelFilterConfigurer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ShipperConfigManager.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ShipperConfigManager.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ShipperConfigManager.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ShipperConfigManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.apache.ambari.logsearch.conf.LogSearchConfigApiConfig;",
          "28: import org.apache.ambari.logsearch.config.api.model.inputconfig.InputConfig;",
          "29: import org.apache.ambari.logsearch.configurer.LogSearchConfigConfigurer;",
          "31: import org.apache.ambari.logsearch.model.common.LSServerInputConfig;",
          "32: import org.apache.ambari.logsearch.model.common.LSServerLogLevelFilterMap;",
          "33: import org.apache.log4j.Logger;",
          "",
          "[Removed Lines]",
          "30: import org.apache.ambari.logsearch.configurer.SolrLogLevelFilterConfigurer;",
          "",
          "[Added Lines]",
          "30: import org.apache.ambari.logsearch.configurer.LogLevelManagerFilterConfigurer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:   private LogSearchConfigConfigurer logSearchConfigConfigurer;",
          "57:   @Inject",
          "60:   public List<String> getServices(String clusterName) {",
          "61:     return logSearchConfigConfigurer.getConfig().getServices(clusterName);",
          "",
          "[Removed Lines]",
          "58:   private SolrLogLevelFilterConfigurer solrLogLevelFilterConfigurer;",
          "",
          "[Added Lines]",
          "58:   private LogLevelManagerFilterConfigurer logLevelFilterConfigurer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:   public LSServerLogLevelFilterMap getLogLevelFilters(String clusterName) {",
          "122:     if (logSearchConfigApiConfig.isSolrFilterStorage()) {",
          "124:     } else {",
          "125:       return new LSServerLogLevelFilterMap(logSearchConfigConfigurer.getConfig().getLogLevelFilterManager().getLogLevelFilters(clusterName));",
          "126:     }",
          "",
          "[Removed Lines]",
          "123:       return new LSServerLogLevelFilterMap(solrLogLevelFilterConfigurer.getLogLevelFilterManagerSolr().getLogLevelFilters(clusterName));",
          "",
          "[Added Lines]",
          "123:       return new LSServerLogLevelFilterMap(logLevelFilterConfigurer.getLogLevelFilterManagerSolr().getLogLevelFilters(clusterName));",
          "124:     } else if (logSearchConfigApiConfig.isZkFilterStorage()) {",
          "125:       return new LSServerLogLevelFilterMap(logLevelFilterConfigurer.getLogLevelFilterManagerZK().getLogLevelFilters(clusterName));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:   public Response setLogLevelFilters(String clusterName, LSServerLogLevelFilterMap request) {",
          "130:     try {",
          "131:       if (logSearchConfigApiConfig.isSolrFilterStorage()) {",
          "133:       } else {",
          "134:         logSearchConfigConfigurer.getConfig().getLogLevelFilterManager().setLogLevelFilters(clusterName, request.convertToApi());",
          "135:       }",
          "",
          "[Removed Lines]",
          "132:         solrLogLevelFilterConfigurer.getLogLevelFilterManagerSolr().setLogLevelFilters(clusterName, request.convertToApi());",
          "",
          "[Added Lines]",
          "134:         logLevelFilterConfigurer.getLogLevelFilterManagerSolr().setLogLevelFilters(clusterName, request.convertToApi());",
          "135:       } else if (logSearchConfigApiConfig.isZkFilterStorage()) {",
          "136:         logLevelFilterConfigurer.getLogLevelFilterManagerZK().setLogLevelFilters(clusterName, request.convertToApi());",
          "",
          "---------------"
        ],
        "ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogSearchLogLevelFilterManagerFilter.java||ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogSearchLogLevelFilterManagerFilter.java": [
          "File: ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogSearchLogLevelFilterManagerFilter.java -> ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogSearchLogLevelFilterManagerFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import com.fasterxml.jackson.databind.ObjectMapper;",
          "22: import org.apache.ambari.logsearch.common.MessageEnums;",
          "23: import org.apache.ambari.logsearch.common.VResponse;",
          "25: import org.apache.ambari.logsearch.util.RESTErrorUtil;",
          "26: import org.slf4j.Logger;",
          "27: import org.slf4j.LoggerFactory;",
          "",
          "[Removed Lines]",
          "24: import org.apache.ambari.logsearch.conf.global.SolrLogLevelFilterManagerState;",
          "",
          "[Added Lines]",
          "24: import org.apache.ambari.logsearch.conf.global.LogLevelFilterManagerState;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:   private static final String SOLR_FILTER_MANAGER_NOT_AVAILABLE = \"Solr log level filter manager is not available\";",
          "46:   private final RequestMatcher requestMatcher;",
          "48:   private final boolean enabled;",
          "50:   public LogSearchLogLevelFilterManagerFilter(RequestMatcher requestMatcher,",
          "52:                                               boolean enabled) {",
          "53:     this.requestMatcher = requestMatcher;",
          "55:     this.enabled = enabled;",
          "56:   }",
          "",
          "[Removed Lines]",
          "47:   private final SolrLogLevelFilterManagerState solrLogLevelFilterManagerState;",
          "51:                                               SolrLogLevelFilterManagerState solrLogLevelFilterManagerState,",
          "54:     this.solrLogLevelFilterManagerState = solrLogLevelFilterManagerState;",
          "",
          "[Added Lines]",
          "47:   private final LogLevelFilterManagerState logLevelFilterManagerState;",
          "51:                                               LogLevelFilterManagerState logLevelFilterManagerState,",
          "54:     this.logLevelFilterManagerState = logLevelFilterManagerState;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:   }",
          "86:   private VResponse getErrorResponse() {",
          "88:       return RESTErrorUtil.createMessageResponse(SOLR_FILTER_MANAGER_NOT_AVAILABLE, MessageEnums.SOLR_CONFIGURATION_API_SOLR_NOT_AVAILEBLE);",
          "89:     }",
          "",
          "[Removed Lines]",
          "87:     if (!solrLogLevelFilterManagerState.isLogLevelFilterManagerIsReady()) {",
          "",
          "[Added Lines]",
          "87:     if (!logLevelFilterManagerState.isLogLevelFilterManagerIsReady()) {",
          "",
          "---------------"
        ],
        "ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties||ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties": [
          "File: ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties -> ambari-logsearch/docker/test-config/logfeeder/logfeeder.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: logfeeder.solr.core.config.name=history",
          "34: #logfeeder.solr.urls=http://solr:8983/solr",
          "35: #logfeeder.configs.local.enabled=true",
          "",
          "[Removed Lines]",
          "36: #logfeeder.configs.filter.solr.enabled=true",
          "",
          "[Added Lines]",
          "37: #logfeeder.configs.filter.zk.enabled=true",
          "",
          "---------------"
        ],
        "ambari-logsearch/docker/test-config/logsearch/logsearch.properties||ambari-logsearch/docker/test-config/logsearch/logsearch.properties": [
          "File: ambari-logsearch/docker/test-config/logsearch/logsearch.properties -> ambari-logsearch/docker/test-config/logsearch/logsearch.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #logsearch.config.api.filter.solr.enabled=true",
          "22: #logsearch.config.api.enabled=false",
          "24: logsearch.service.logs.split.interval.mins=15",
          "25: logsearch.collection.service.logs.numshards=3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #logsearch.config.api.filter.zk.enabled=true",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3474dd39fbfbe62e6e421d57d49d0efd362fdc55",
      "candidate_info": {
        "commit_hash": "3474dd39fbfbe62e6e421d57d49d0efd362fdc55",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/3474dd39fbfbe62e6e421d57d49d0efd362fdc55",
        "files": [
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationConfigGenerator.py",
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py"
        ],
        "message": "AMBARI-24281. Infra Solr migration: migrationConfigGenerator script failed with custom service user (#1749) (#1752)",
        "before_after_code_files": [
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationConfigGenerator.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationConfigGenerator.py",
          "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-infra/ambari-infra-solr-client/src/main/python/migrationConfigGenerator.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationConfigGenerator.py": [
          "File: ambari-infra/ambari-infra-solr-client/src/main/python/migrationConfigGenerator.py -> ambari-infra/ambari-infra-solr-client/src/main/python/migrationConfigGenerator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:   infra_solr_user = infra_solr_env_props['infra_solr_user'] if 'infra_solr_user' in infra_solr_env_props else 'infra-solr'",
          "307:   infra_solr_kerberos_keytab = infra_solr_env_props['infra_solr_kerberos_keytab'] if 'infra_solr_kerberos_keytab' in infra_solr_env_props else '/etc/security/keytabs/ambari-infra-solr.service.keytab'",
          "309:   infra_solr_port = infra_solr_env_props['infra_solr_port'] if 'infra_solr_port' in infra_solr_env_props else '8886'",
          "311:   config.add_section('local')",
          "",
          "[Removed Lines]",
          "308:   infra_solr_kerberos_principal = infra_solr_user + \"/\" + host",
          "",
          "[Added Lines]",
          "308:   infra_solr_kerberos_principal_config = infra_solr_env_props['infra_solr_kerberos_principal'] if 'infra_solr_kerberos_principal' in infra_solr_env_props else 'infra-solr'",
          "309:   infra_solr_kerberos_principal = \"infra-solr/\" + host",
          "310:   if '/' in infra_solr_kerberos_principal_config:",
          "311:     infra_solr_kerberos_principal = infra_solr_kerberos_principal_config.replace('_HOST',host)",
          "312:   else:",
          "313:     infra_solr_kerberos_principal = infra_solr_kerberos_principal_config + \"/\" + host",
          "",
          "---------------"
        ],
        "ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py||ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py": [
          "File: ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py -> ambari-infra/ambari-infra-solr-client/src/main/python/migrationHelper.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "158: def create_solr_api_request_command(request_url, config, output=None):",
          "159:   user='infra-solr'",
          "160:   kerberos_enabled='false'",
          "161:   if config.has_section('cluster') and config.has_option('cluster', 'kerberos_enabled'):",
          "162:     kerberos_enabled=config.get('cluster', 'kerberos_enabled')",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:   if config.has_section('infra_solr'):",
          "161:     if config.has_option('infra_solr', 'user'):",
          "162:       user=config.get('infra_solr', 'user')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c1c665c41f39bf63877c1bc96d511fde0a4ed70",
      "candidate_info": {
        "commit_hash": "8c1c665c41f39bf63877c1bc96d511fde0a4ed70",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8c1c665c41f39bf63877c1bc96d511fde0a4ed70",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java"
        ],
        "message": "[AMBARI-25124] ambari-audit.log entries span multiple lines (apappu)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java",
          "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:       if (roles != null && !roles.isEmpty()) {",
          "68:         List<String> lines = new LinkedList<>();",
          "69:         for (Map.Entry<String, List<String>> entry : roles.entrySet()) {",
          "71:         }",
          "72:         builder.append(StringUtils.join(lines, \")\"));",
          "73:       }",
          "",
          "[Removed Lines]",
          "70:           lines.add(\"(\" + \"    \" + entry.getKey() + \": \" + StringUtils.join(entry.getValue(), \", \") + \")\");",
          "",
          "[Added Lines]",
          "70:           lines.add(\"(\" +entry.getKey() + \": \" + StringUtils.join(entry.getValue(), \", \") + \")\");",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:         builder.append(\"Operating system: \").append(repo.getKey());",
          "94:         builder.append(\"(\");",
          "95:         for (Map<String, String> properties : repo.getValue()) {",
          "97:           builder.append(\"), Repository name(\").append(properties.get(\"repo_name\"));",
          "98:           builder.append(\"), Base url(\").append(properties.get(\"base_url\")).append(\")\");",
          "99:           builder.append(\")\");",
          "",
          "[Removed Lines]",
          "96:           builder.append(\"    Repository ID(\").append(properties.get(\"repo_id\"));",
          "",
          "[Added Lines]",
          "96:           builder.append(\"Repository ID(\").append(properties.get(\"repo_id\"));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:         builder.append(\"Operating system: \").append(repo.getKey());",
          "96:         builder.append(\"(\");",
          "97:         for (Map<String, String> properties : repo.getValue()) {",
          "99:           builder.append(\"), Repository name(\").append(properties.get(\"repo_name\"));",
          "100:           builder.append(\"), Base url(\").append(properties.get(\"base_url\")).append(\")\");",
          "101:           builder.append(\")\");",
          "",
          "[Removed Lines]",
          "98:           builder.append(\"    Repository ID(\").append(properties.get(\"repo_id\"));",
          "",
          "[Added Lines]",
          "98:           builder.append(\"Repository ID(\").append(properties.get(\"repo_id\"));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         tmpLines = new LinkedList<>();",
          "91:         lines.add(role + \": [\");",
          "92:         if (users.get(role) != null && !users.get(role).isEmpty()) {",
          "94:         }",
          "95:         if (groups.get(role) != null && !groups.get(role).isEmpty()) {",
          "97:         }",
          "98:         if (roles.get(role) != null && !roles.get(role).isEmpty()) {",
          "100:         }",
          "101:         lines.add(StringUtils.join(tmpLines, \";\"));",
          "102:         lines.add(\"] \");",
          "",
          "[Removed Lines]",
          "93:           tmpLines.add(\"  Users: \" + StringUtils.join(users.get(role), \", \"));",
          "96:           tmpLines.add(\"  Groups: \" + StringUtils.join(groups.get(role), \", \"));",
          "99:           tmpLines.add(\"  Roles: \" + StringUtils.join(roles.get(role), \", \"));",
          "",
          "[Added Lines]",
          "93:           tmpLines.add(\"Users: \" + StringUtils.join(users.get(role), \", \"));",
          "96:           tmpLines.add(\"Groups: \" + StringUtils.join(groups.get(role), \", \"));",
          "99:           tmpLines.add(\"Roles: \" + StringUtils.join(roles.get(role), \", \"));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java||ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:         tmpLines = new LinkedList<>();",
          "110:         lines.add(role + \": [\");",
          "111:         if (users.get(role) != null && !users.get(role).isEmpty()) {",
          "113:         }",
          "114:         if (groups.get(role) != null && !groups.get(role).isEmpty()) {",
          "116:         }",
          "117:         if (roles.get(role) != null && !roles.get(role).isEmpty()) {",
          "119:         }",
          "120:         lines.add(StringUtils.join(tmpLines, \";\"));",
          "121:         lines.add(\"] \");",
          "",
          "[Removed Lines]",
          "112:           tmpLines.add(\"  Users: \" + StringUtils.join(users.get(role), \", \"));",
          "115:           tmpLines.add(\"  Groups: \" + StringUtils.join(groups.get(role), \", \"));",
          "118:           tmpLines.add(\"  Roles: \" + StringUtils.join(roles.get(role), \", \"));",
          "",
          "[Added Lines]",
          "112:           tmpLines.add(\"Users: \" + StringUtils.join(users.get(role), \", \"));",
          "115:           tmpLines.add(\"Groups: \" + StringUtils.join(groups.get(role), \", \"));",
          "118:           tmpLines.add(\"Roles: \" + StringUtils.join(roles.get(role), \", \"));",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java -> ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     String actualAuditMessage = evnt.getAuditMessage();",
          "61:     String expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Success)\",",
          "",
          "[Removed Lines]",
          "58:     String roleMessage = \"(\" + \"    a: r1, r2, r3\" + \")\";",
          "",
          "[Added Lines]",
          "58:     String roleMessage = \"(\" + \"a: r1, r2, r3\" + \")\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     actualAuditMessage = evnt.getAuditMessage();",
          "80:     expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Success)\",",
          "",
          "[Removed Lines]",
          "77:     roleMessage = \"(\" + \"    a: r1, r2, r3\" +  \")\";",
          "",
          "[Added Lines]",
          "77:     roleMessage = \"(\" + \"a: r1, r2, r3\" +  \")\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:     String actualAuditMessage = evnt.getAuditMessage();",
          "115:     String expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(%d)\",",
          "",
          "[Removed Lines]",
          "112:     String roleMessage = \"(\" + \"    a: r1, r2, r3\" +  \")\";",
          "",
          "[Added Lines]",
          "112:     String roleMessage = \"(\" + \"a: r1, r2, r3\" +  \")\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:     actualAuditMessage = evnt.getAuditMessage();",
          "136:     expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(%d)\",",
          "",
          "[Removed Lines]",
          "133:     roleMessage = \"(\" + \"    a: r1, r2, r3\" +  \")\";",
          "",
          "[Added Lines]",
          "133:     roleMessage = \"(\" + \"a: r1, r2, r3\" +  \")\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:     String actualAuditMessage = evnt.getAuditMessage();",
          "170:     String expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(UNKNOWN USER)\",",
          "",
          "[Removed Lines]",
          "167:     String roleMessage = \"(\" + \"    a: r1, r2, r3\" +  \")\";",
          "",
          "[Added Lines]",
          "167:     String roleMessage = \"(\" + \"a: r1, r2, r3\" +  \")\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186:     actualAuditMessage = evnt.getAuditMessage();",
          "191:     expectedAuditMessage = String.format(\"User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(UNKNOWN USER)\",",
          "",
          "[Removed Lines]",
          "188:     roleMessage =  \"(\" + \"    a: r1, r2, r3\" +  \")\";",
          "",
          "[Added Lines]",
          "188:     roleMessage =  \"(\" + \"a: r1, r2, r3\" +  \")\";",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     String actual = event.getAuditMessage();",
          "99:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(Role change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Roles(\" +",
          "100:       \"Permission1: [\" +",
          "103:       \" Permission2: [\" +",
          "106:     Assert.assertTrue(\"Class mismatch\", event instanceof ClusterPrivilegeChangeRequestAuditEvent);",
          "107:     Assert.assertEquals(expected, actual);",
          "",
          "[Removed Lines]",
          "101:       \"  Users: \" + userName + \";\" +",
          "102:       \"  Groups: testgroup]\" +",
          "104:       \"  Users: \" + userName + \"2] )\";",
          "",
          "[Added Lines]",
          "101:       \"Users: \" + userName + \";\" +",
          "102:       \"Groups: testgroup]\" +",
          "104:       \"Users: \" + userName + \"2] )\";",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     String actual = event.getAuditMessage();",
          "62:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(Repository version addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(StackName), Stack version(1.9), Display name(MyStack), Repo version(1.2-56), Repositories(\" +",
          "63:       \"Operating system: redhat6(\" +",
          "65:       \"Operating system: redhat7(\" +",
          "67:       \")\";",
          "69:     Assert.assertTrue(\"Class mismatch\", event instanceof AddRepositoryVersionRequestAuditEvent);",
          "",
          "[Removed Lines]",
          "64:       \"    Repository ID(2), Repository name(MyRepo6), Base url(http://example6.com))\" +",
          "66:       \"    Repository ID(1), Repository name(MyRepo), Base url(http://example.com))\" +",
          "",
          "[Added Lines]",
          "64:       \"Repository ID(2), Repository name(MyRepo6), Base url(http://example6.com))\" +",
          "66:       \"Repository ID(1), Repository name(MyRepo), Base url(http://example.com))\" +",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:     String actual = event.getAuditMessage();",
          "92:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(Repository version change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(StackName), Stack version(1.9), Display name(MyStack), Repo version(1.2-56), Repositories(\" +",
          "93:       \"Operating system: redhat6(\" +",
          "95:       \"Operating system: redhat7(\" +",
          "97:       \")\";",
          "99:     Assert.assertTrue(\"Class mismatch\", event instanceof ChangeRepositoryVersionRequestAuditEvent);",
          "",
          "[Removed Lines]",
          "94:       \"    Repository ID(2), Repository name(MyRepo6), Base url(http://example6.com))\" +",
          "96:       \"    Repository ID(1), Repository name(MyRepo), Base url(http://example.com))\" +",
          "",
          "[Added Lines]",
          "94:       \"Repository ID(2), Repository name(MyRepo6), Base url(http://example6.com))\" +",
          "96:       \"Repository ID(1), Repository name(MyRepo), Base url(http://example.com))\" +",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java||ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java -> ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     String actual = event.getAuditMessage();",
          "77:     String expected = \"User(\" + userName + \"), RemoteIp(1.2.3.4), Operation(View permission change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Type(MyView), Version(MyView), Name(MyView), Permissions(\" +",
          "78:       \"Permission1: [\" +",
          "81:       \" Permission2: [\" +",
          "84:     Assert.assertTrue(\"Class mismatch\", event instanceof ViewPrivilegeChangeRequestAuditEvent);",
          "85:     Assert.assertEquals(expected, actual);",
          "",
          "[Removed Lines]",
          "79:       \"  Users: testuser;\" +",
          "80:       \"  Groups: testgroup]\" +",
          "82:       \"  Users: testuser2] )\";",
          "",
          "[Added Lines]",
          "79:       \"Users: testuser;\" +",
          "80:       \"Groups: testgroup]\" +",
          "82:       \"Users: testuser2] )\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}