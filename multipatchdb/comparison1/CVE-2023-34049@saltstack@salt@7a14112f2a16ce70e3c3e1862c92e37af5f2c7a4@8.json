{
  "cve_id": "CVE-2023-34049",
  "cve_desc": "The Salt-SSH pre-flight option copies the script to the target at a predictable path, which allows an attacker to force Salt-SSH to run their script. If an attacker has access to the target VM and knows the path to the pre-flight script before it runs they can ensure Salt-SSH runs their script with the privileges of the user running Salt-SSH.\u00a0Do not make the copy path on the target predictable and ensure we check return codes of the scp command if the copy fails.",
  "repo": "saltstack/salt",
  "patch_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
  "patch_info": {
    "commit_hash": "7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "repo": "saltstack/salt",
    "commit_url": "https://github.com/saltstack/salt/commit/7a14112f2a16ce70e3c3e1862c92e37af5f2c7a4",
    "files": [
      "changelog/cve-2023-34049.security.md",
      "salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py"
    ],
    "message": "Fix CVE-2023-34049",
    "before_after_code_files": [
      "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
      "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py",
      "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
    ]
  },
  "patch_diff": {
    "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
      "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import logging",
      "12: import multiprocessing",
      "13: import os",
      "14: import queue",
      "15: import re",
      "16: import shlex",
      "17: import subprocess",
      "18: import sys",
      "19: import tarfile",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "14: import pathlib",
      "18: import shutil",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "467:             if target.get(\"passwd\", False) or self.opts[\"ssh_passwd\"]:",
      "468:                 self._key_deploy_run(host, target, False)",
      "469:             return ret",
      "471:             target = self.targets[host]",
      "472:             # permission denied, attempt to auto deploy ssh key",
      "473:             print(",
      "",
      "[Removed Lines]",
      "470:         if ret[host].get(\"stderr\", \"\").count(\"Permission denied\"):",
      "",
      "[Added Lines]",
      "472:         stderr = ret[host].get(\"stderr\", \"\")",
      "473:         # -failed to upload file- is detecting scp errors",
      "474:         # Errors to ignore when Permission denied is in the stderr. For example",
      "475:         # scp can get a permission denied on the target host, but they where",
      "476:         # able to accurate authenticate against the box",
      "477:         ignore_err = [\"failed to upload file\"]",
      "478:         check_err = [x for x in ignore_err if stderr.count(x)]",
      "479:         if \"Permission denied\" in stderr and not check_err:",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1007:         \"\"\"",
      "1008:         Run our pre_flight script before running any ssh commands",
      "1009:         \"\"\"",
      "1016:     def check_thin_dir(self):",
      "1017:         \"\"\"",
      "",
      "[Removed Lines]",
      "1010:         script = os.path.join(tempfile.gettempdir(), self.ssh_pre_file)",
      "1012:         self.shell.send(self.ssh_pre_flight, script)",
      "1014:         return self.execute_script(script, script_args=self.ssh_pre_flight_args)",
      "",
      "[Added Lines]",
      "1019:         with tempfile.NamedTemporaryFile() as temp:",
      "1020:             # ensure we use copyfile to not copy the file attributes",
      "1021:             # we want to ensure we use the perms set by the secure",
      "1022:             # NamedTemporaryFile",
      "1023:             try:",
      "1024:                 shutil.copyfile(self.ssh_pre_flight, temp.name)",
      "1025:             except OSError as err:",
      "1026:                 return (",
      "1027:                     \"\",",
      "1028:                     f\"Could not copy pre flight script {self.ssh_pre_flight} to temporary path\",",
      "1029:                     1,",
      "1030:                 )",
      "1031:             target_script = f\".{pathlib.Path(temp.name).name}\"",
      "1032:             log.trace(f\"Copying the pre flight script {self.ssh_pre_file} to target\")",
      "1033:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
      "1034:             if retcode != 0:",
      "1035:                 # We could not copy the script to the target",
      "1036:                 log.error(",
      "1037:                     f\"Could not copy the pre flight script {self.ssh_pre_file} to target\"",
      "1038:                 )",
      "1039:                 return stdout, stderr, retcode",
      "1041:             log.trace(f\"Executing the pre flight script {self.ssh_pre_file} on target\")",
      "1042:             return self.execute_script(",
      "1043:                 target_script, script_args=self.ssh_pre_flight_args",
      "1044:             )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1388:             return self.shell.exec_cmd(cmd_str)",
      "1390:         # Write the shim to a temporary file in the default temp directory",
      "1394:             shim_tmp_file.write(salt.utils.stringutils.to_bytes(cmd_str))",
      "1396:         # Copy shim to target system, under $HOME/.<randomized name>",
      "1400:         if self.winrm:",
      "1401:             target_shim_file = saltwinshell.get_target_shim_file(self, target_shim_file)",
      "1404:         # Remove our shim file",
      "1405:         try:",
      "",
      "[Removed Lines]",
      "1391:         with tempfile.NamedTemporaryFile(",
      "1392:             mode=\"w+b\", prefix=\"shim_\", delete=False",
      "1393:         ) as shim_tmp_file:",
      "1397:         target_shim_file = \".{}.{}\".format(",
      "1398:             binascii.hexlify(os.urandom(6)).decode(\"ascii\"), extension",
      "1399:         )",
      "1402:         self.shell.send(shim_tmp_file.name, target_shim_file, makedirs=True)",
      "",
      "[Added Lines]",
      "1421:         with tempfile.NamedTemporaryFile(mode=\"w+b\", delete=False) as shim_tmp_file:",
      "1425:         target_shim_file = f\".{pathlib.Path(shim_tmp_file.name).name}\"",
      "1429:         stdout, stderr, retcode = self.shell.send(",
      "1430:             shim_tmp_file.name, target_shim_file, makedirs=True",
      "1431:         )",
      "1432:         if retcode != 0:",
      "1433:             log.error(f\"Could not copy the shim script to target\")",
      "1434:             return stdout, stderr, retcode",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
      "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import re",
      "4: from textwrap import dedent",
      "6: import pytest",
      "",
      "[Removed Lines]",
      "1: import os",
      "3: import tempfile",
      "",
      "[Added Lines]",
      "1: import logging",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: from salt.client import ssh",
      "17: from tests.support.mock import MagicMock, call, patch",
      "20: @pytest.fixture",
      "21: def opts(tmp_path):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: log = logging.getLogger(__name__)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "242:         assert ret == cmd_ret",
      "245: def test_execute_script(opts, target, tmp_path):",
      "246:     \"\"\"",
      "247:     test Single.execute_script()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "247:     \"\"\"",
      "248:     test Single.run_ssh_pre_flight function",
      "249:     \"\"\"",
      "250:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "251:     single = ssh.Single(",
      "252:         opts,",
      "253:         opts[\"argv\"],",
      "254:         \"localhost\",",
      "255:         mods={},",
      "256:         fsclient=None,",
      "257:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "258:         mine=False,",
      "260:     )",
      "262:     cmd_ret = (\"Success\", \"\", 0)",
      "263:     mock_flight = MagicMock(return_value=cmd_ret)",
      "264:     mock_cmd = MagicMock(return_value=cmd_ret)",
      "265:     patch_flight = patch(\"salt.client.ssh.Single.run_ssh_pre_flight\", mock_flight)",
      "266:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "267:     patch_exec_cmd = patch(",
      "268:         \"salt.client.ssh.shell.Shell.exec_cmd\", return_value=(\"\", \"\", 1)",
      "269:     )",
      "270:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "272:     with patch_os, patch_flight, patch_cmd, patch_exec_cmd:",
      "273:         ret = single.run()",
      "274:         mock_cmd.assert_called()",
      "275:         mock_flight.assert_called()",
      "276:         assert ret == cmd_ret",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "273:         ] == mock_cmd.call_args_list",
      "277:     \"\"\"",
      "278:     test Single.shim_cmd()",
      "279:     \"\"\"",
      "",
      "[Removed Lines]",
      "276: def test_shim_cmd(opts, target):",
      "",
      "[Added Lines]",
      "310: def test_shim_cmd(opts, target, tmp_path):",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "295:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "296:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0))",
      "297:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "300:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "301:         assert ret == exp_ret",
      "302:         assert [",
      "305:         ] == mock_cmd.call_args_list",
      "309:     \"\"\"",
      "311:     \"\"\"",
      "313:     single = ssh.Single(",
      "314:         opts,",
      "315:         opts[\"argv\"],",
      "",
      "[Removed Lines]",
      "299:     with patch_cmd, patch_rand, patch_send:",
      "303:             call(\"/bin/sh '.35d96ccac2ff.py'\"),",
      "304:             call(\"rm '.35d96ccac2ff.py'\"),",
      "308: def test_run_ssh_pre_flight(opts, target, tmp_path):",
      "310:     test Single.run_ssh_pre_flight",
      "312:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "332:     tmp_file = tmp_path / \"tmp_file\"",
      "333:     mock_tmp = MagicMock()",
      "334:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "335:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "337:     with patch_cmd, patch_tmp, patch_send:",
      "341:             call(f\"/bin/sh '.{tmp_file.name}'\"),",
      "342:             call(f\"rm '.{tmp_file.name}'\"),",
      "346: def test_shim_cmd_copy_fails(opts, target, caplog):",
      "348:     test Single.shim_cmd() when copying the file fails",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "320:         mine=False,",
      "321:         winrm=False,",
      "322:         tty=True,",
      "324:     )",
      "328:     patch_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_cmd)",
      "332:     )",
      "335:         ret = single.run_ssh_pre_flight()",
      "343: @pytest.mark.skip_on_windows(reason=\"SSH_PY_SHIM not set on windows\")",
      "",
      "[Removed Lines]",
      "326:     exp_ret = (\"Success\", \"\", 0)",
      "327:     mock_cmd = MagicMock(return_value=exp_ret)",
      "329:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=exp_ret)",
      "330:     exp_tmp = os.path.join(",
      "331:         tempfile.gettempdir(), os.path.basename(target[\"ssh_pre_flight\"])",
      "334:     with patch_cmd, patch_send:",
      "336:         assert ret == exp_ret",
      "337:         assert [",
      "338:             call(\"/bin/sh '{}'\".format(exp_tmp)),",
      "339:             call(\"rm '{}'\".format(exp_tmp)),",
      "340:         ] == mock_cmd.call_args_list",
      "",
      "[Added Lines]",
      "363:     ret_cmd = (\"Success\", \"\", 0)",
      "364:     mock_cmd = MagicMock(return_value=ret_cmd)",
      "366:     ret_send = (\"\", \"General error in file copy\", 1)",
      "367:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=ret_send)",
      "368:     patch_rand = patch(\"os.urandom\", return_value=b\"5\\xd9l\\xca\\xc2\\xff\")",
      "370:     with patch_cmd, patch_rand, patch_send:",
      "371:         ret = single.shim_cmd(cmd_str=\"echo test\")",
      "372:         assert ret == ret_send",
      "373:         assert \"Could not copy the shim script to target\" in caplog.text",
      "374:         mock_cmd.assert_not_called()",
      "377: def test_run_ssh_pre_flight_no_connect(opts, target, tmp_path, caplog):",
      "378:     \"\"\"",
      "379:     test Single.run_ssh_pre_flight when you",
      "380:     cannot connect to the target",
      "381:     \"\"\"",
      "382:     pre_flight = tmp_path / \"script.sh\"",
      "383:     pre_flight.write_text(\"\")",
      "384:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "385:     single = ssh.Single(",
      "386:         opts,",
      "387:         opts[\"argv\"],",
      "388:         \"localhost\",",
      "389:         mods={},",
      "390:         fsclient=None,",
      "391:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "392:         mine=False,",
      "393:         winrm=False,",
      "394:         tty=True,",
      "396:     )",
      "397:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "398:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "399:     tmp_file = tmp_path / \"tmp_file\"",
      "400:     mock_tmp = MagicMock()",
      "401:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "402:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "403:     ret_send = (",
      "404:         \"\",",
      "405:         \"ssh: connect to host 192.168.1.186 port 22: No route to host\\nscp: Connection closed\\n\",",
      "406:         255,",
      "407:     )",
      "408:     send_mock = MagicMock(return_value=ret_send)",
      "409:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "411:     with caplog.at_level(logging.TRACE):",
      "412:         with patch_send, patch_exec_cmd, patch_tmp:",
      "413:             ret = single.run_ssh_pre_flight()",
      "414:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
      "415:     assert (",
      "416:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
      "417:         in caplog.text",
      "418:     )",
      "419:     assert ret == ret_send",
      "420:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "421:     target_script = send_mock.call_args_list[0][0][1]",
      "422:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "423:     mock_exec_cmd.assert_not_called()",
      "426: def test_run_ssh_pre_flight_permission_denied(opts, target, tmp_path):",
      "427:     \"\"\"",
      "428:     test Single.run_ssh_pre_flight when you",
      "429:     cannot copy script to the target due to",
      "430:     a permission denied error",
      "431:     \"\"\"",
      "432:     pre_flight = tmp_path / \"script.sh\"",
      "433:     pre_flight.write_text(\"\")",
      "434:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "435:     single = ssh.Single(",
      "436:         opts,",
      "437:         opts[\"argv\"],",
      "438:         \"localhost\",",
      "439:         mods={},",
      "440:         fsclient=None,",
      "441:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "442:         mine=False,",
      "443:         winrm=False,",
      "444:         tty=True,",
      "446:     )",
      "447:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 1))",
      "448:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "449:     tmp_file = tmp_path / \"tmp_file\"",
      "450:     mock_tmp = MagicMock()",
      "451:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "452:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "453:     ret_send = (",
      "454:         \"\",",
      "455:         'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "456:         255,",
      "458:     send_mock = MagicMock(return_value=ret_send)",
      "459:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "461:     with patch_send, patch_exec_cmd, patch_tmp:",
      "463:     assert ret == ret_send",
      "464:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "465:     target_script = send_mock.call_args_list[0][0][1]",
      "466:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "467:     mock_exec_cmd.assert_not_called()",
      "470: def test_run_ssh_pre_flight_connect(opts, target, tmp_path, caplog):",
      "471:     \"\"\"",
      "472:     test Single.run_ssh_pre_flight when you",
      "473:     can connect to the target",
      "474:     \"\"\"",
      "475:     pre_flight = tmp_path / \"script.sh\"",
      "476:     pre_flight.write_text(\"\")",
      "477:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "478:     single = ssh.Single(",
      "479:         opts,",
      "480:         opts[\"argv\"],",
      "481:         \"localhost\",",
      "482:         mods={},",
      "483:         fsclient=None,",
      "484:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "485:         mine=False,",
      "486:         winrm=False,",
      "487:         tty=True,",
      "489:     )",
      "490:     ret_exec_cmd = (\"\", \"\", 1)",
      "491:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "492:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "493:     tmp_file = tmp_path / \"tmp_file\"",
      "494:     mock_tmp = MagicMock()",
      "495:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "496:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "497:     ret_send = (",
      "498:         \"\",",
      "499:         \"\\rroot@192.168.1.187's password: \\n\\rpreflight.sh 0%    0 0.0KB/s   --:-- ETA\\rpreflight.sh 100%   20     2.7KB/s   00:00 \\n\",",
      "500:         0,",
      "501:     )",
      "502:     send_mock = MagicMock(return_value=ret_send)",
      "503:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "505:     with caplog.at_level(logging.TRACE):",
      "506:         with patch_send, patch_exec_cmd, patch_tmp:",
      "507:             ret = single.run_ssh_pre_flight()",
      "509:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
      "510:     assert ret == ret_exec_cmd",
      "511:     assert send_mock.call_args_list[0][0][0] == tmp_file",
      "512:     target_script = send_mock.call_args_list[0][0][1]",
      "513:     assert re.search(r\".[a-z0-9]+\", target_script)",
      "514:     mock_exec_cmd.assert_called()",
      "517: def test_run_ssh_pre_flight_shutil_fails(opts, target, tmp_path):",
      "518:     \"\"\"",
      "519:     test Single.run_ssh_pre_flight when cannot",
      "520:     copyfile with shutil",
      "521:     \"\"\"",
      "522:     pre_flight = tmp_path / \"script.sh\"",
      "523:     pre_flight.write_text(\"\")",
      "524:     target[\"ssh_pre_flight\"] = str(pre_flight)",
      "525:     single = ssh.Single(",
      "526:         opts,",
      "527:         opts[\"argv\"],",
      "528:         \"localhost\",",
      "529:         mods={},",
      "530:         fsclient=None,",
      "531:         thin=salt.utils.thin.thin_path(opts[\"cachedir\"]),",
      "532:         mine=False,",
      "533:         winrm=False,",
      "534:         tty=True,",
      "536:     )",
      "537:     ret_exec_cmd = (\"\", \"\", 1)",
      "538:     mock_exec_cmd = MagicMock(return_value=ret_exec_cmd)",
      "539:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "540:     tmp_file = tmp_path / \"tmp_file\"",
      "541:     mock_tmp = MagicMock()",
      "542:     patch_tmp = patch(\"tempfile.NamedTemporaryFile\", mock_tmp)",
      "543:     mock_tmp.return_value.__enter__.return_value.name = tmp_file",
      "544:     send_mock = MagicMock()",
      "545:     mock_shutil = MagicMock(side_effect=IOError(\"Permission Denied\"))",
      "546:     patch_shutil = patch(\"shutil.copyfile\", mock_shutil)",
      "547:     patch_send = patch(\"salt.client.ssh.shell.Shell.send\", send_mock)",
      "549:     with patch_send, patch_exec_cmd, patch_tmp, patch_shutil:",
      "550:         ret = single.run_ssh_pre_flight()",
      "552:     assert ret == (",
      "553:         \"\",",
      "554:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
      "555:         1,",
      "556:     )",
      "557:     mock_exec_cmd.assert_not_called()",
      "558:     send_mock.assert_not_called()",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "434:     and script successfully runs",
      "435:     \"\"\"",
      "436:     opts[\"ssh_run_pre_flight\"] = True",
      "439:     if test_opts[0] is not None:",
      "440:         target[\"ssh_pre_flight_args\"] = test_opts[0]",
      "",
      "[Removed Lines]",
      "437:     target[\"ssh_pre_flight\"] = str(tmp_path / \"script.sh\")",
      "",
      "[Added Lines]",
      "655:     pre_flight_script = tmp_path / \"script.sh\"",
      "656:     pre_flight_script.write_text(\"\")",
      "657:     target[\"ssh_pre_flight\"] = str(pre_flight_script)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "456:     mock_exec_cmd = MagicMock(return_value=(\"\", \"\", 0))",
      "457:     patch_cmd = patch(\"salt.client.ssh.Single.cmd_block\", mock_cmd)",
      "458:     patch_exec_cmd = patch(\"salt.client.ssh.shell.Shell.exec_cmd\", mock_exec_cmd)",
      "460:     patch_os = patch(\"os.path.exists\", side_effect=[True])",
      "462:     with patch_os, patch_cmd, patch_exec_cmd, patch_shell_send:",
      "469: @pytest.mark.slow_test",
      "",
      "[Removed Lines]",
      "459:     patch_shell_send = patch(\"salt.client.ssh.shell.Shell.send\", return_value=None)",
      "463:         ret = single.run()",
      "464:         assert mock_exec_cmd.mock_calls[0].args[",
      "465:             0",
      "466:         ] == \"/bin/sh '/tmp/script.sh'{}\".format(expected_args)",
      "",
      "[Added Lines]",
      "679:     patch_shell_send = patch(",
      "680:         \"salt.client.ssh.shell.Shell.send\", return_value=(\"\", \"\", 0)",
      "681:     )",
      "685:         single.run()",
      "686:         script_args = mock_exec_cmd.mock_calls[0].args[0]",
      "687:         assert re.search(r\"\\/bin\\/sh '.[a-z0-9]+\", script_args)",
      "",
      "---------------"
    ],
    "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
      "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "339:     with patch(\"salt.roster.get_roster_file\", MagicMock(return_value=roster)):",
      "340:         ssh_obj = client._prep_ssh(**ssh_opts)",
      "341:         assert ssh_obj.opts.get(\"extra_filerefs\", None) == \"salt://foobar\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "344: def test_key_deploy_permission_denied_scp(tmp_path, opts):",
      "345:     \"\"\"",
      "346:     test \"key_deploy\" function when",
      "347:     permission denied authentication error",
      "348:     when attempting to use scp to copy file",
      "349:     to target",
      "350:     \"\"\"",
      "351:     host = \"localhost\"",
      "352:     passwd = \"password\"",
      "353:     usr = \"ssh-usr\"",
      "354:     opts[\"ssh_user\"] = usr",
      "355:     opts[\"tgt\"] = host",
      "357:     ssh_ret = {",
      "358:         host: {",
      "359:             \"stdout\": \"\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\\rroot@192.168.1.187's password: \\n\",",
      "360:             \"stderr\": \"Permission denied, please try again.\\nPermission denied, please try again.\\nroot@192.168.1.187: Permission denied (publickey,gssapi-keyex,gssapi-with-micimport pudb; pu.dbassword).\\nscp: Connection closed\\n\",",
      "361:             \"retcode\": 255,",
      "362:         }",
      "363:     }",
      "364:     key_run_ret = {",
      "365:         \"localhost\": {",
      "366:             \"jid\": \"20230922155652279959\",",
      "367:             \"return\": \"test\",",
      "368:             \"retcode\": 0,",
      "369:             \"id\": \"test\",",
      "370:             \"fun\": \"cmd.run\",",
      "371:             \"fun_args\": [\"echo test\"],",
      "372:         }",
      "373:     }",
      "374:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "375:     with patch_roster_file:",
      "376:         client = ssh.SSH(opts)",
      "377:     patch_input = patch(\"builtins.input\", side_effect=[\"y\"])",
      "378:     patch_getpass = patch(\"getpass.getpass\", return_value=[\"password\"])",
      "379:     mock_key_run = MagicMock(return_value=key_run_ret)",
      "380:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "381:     with patch_input, patch_getpass, patch_key_run:",
      "382:         ret = client.key_deploy(host, ssh_ret)",
      "383:     assert mock_key_run.call_args_list[0][0] == (",
      "384:         host,",
      "385:         {\"passwd\": [passwd], \"host\": host, \"user\": usr},",
      "386:         True,",
      "387:     )",
      "388:     assert ret == key_run_ret",
      "389:     assert mock_key_run.call_count == 1",
      "392: def test_key_deploy_permission_denied_file_scp(tmp_path, opts):",
      "393:     \"\"\"",
      "394:     test \"key_deploy\" function when permission denied",
      "395:     due to not having access to copy the file to the target",
      "396:     We do not want to deploy the key, because this is not",
      "397:     an authentication to the target error.",
      "398:     \"\"\"",
      "399:     host = \"localhost\"",
      "400:     passwd = \"password\"",
      "401:     usr = \"ssh-usr\"",
      "402:     opts[\"ssh_user\"] = usr",
      "403:     opts[\"tgt\"] = host",
      "405:     mock_key_run = MagicMock(return_value=False)",
      "406:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "408:     ssh_ret = {",
      "409:         \"localhost\": {",
      "410:             \"stdout\": \"\",",
      "411:             \"stderr\": 'scp: dest open \"/tmp/preflight.sh\": Permission denied\\nscp: failed to upload file /etc/salt/preflight.sh to /tmp/preflight.sh\\n',",
      "412:             \"retcode\": 1,",
      "413:         }",
      "414:     }",
      "415:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "416:     with patch_roster_file:",
      "417:         client = ssh.SSH(opts)",
      "418:     ret = client.key_deploy(host, ssh_ret)",
      "419:     assert ret == ssh_ret",
      "420:     assert mock_key_run.call_count == 0",
      "423: def test_key_deploy_no_permission_denied(tmp_path, opts):",
      "424:     \"\"\"",
      "425:     test \"key_deploy\" function when no permission denied",
      "426:     is returned",
      "427:     \"\"\"",
      "428:     host = \"localhost\"",
      "429:     passwd = \"password\"",
      "430:     usr = \"ssh-usr\"",
      "431:     opts[\"ssh_user\"] = usr",
      "432:     opts[\"tgt\"] = host",
      "434:     mock_key_run = MagicMock(return_value=False)",
      "435:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
      "436:     ssh_ret = {",
      "437:         \"localhost\": {",
      "438:             \"jid\": \"20230922161937998385\",",
      "439:             \"return\": \"test\",",
      "440:             \"retcode\": 0,",
      "441:             \"id\": \"test\",",
      "442:             \"fun\": \"cmd.run\",",
      "443:             \"fun_args\": [\"echo test\"],",
      "444:         }",
      "445:     }",
      "446:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
      "447:     with patch_roster_file:",
      "448:         client = ssh.SSH(opts)",
      "449:     ret = client.key_deploy(host, ssh_ret)",
      "450:     assert ret == ssh_ret",
      "451:     assert mock_key_run.call_count == 0",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "808699f34315dc68dd99f648d769b9a1e57c0307",
      "candidate_info": {
        "commit_hash": "808699f34315dc68dd99f648d769b9a1e57c0307",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/808699f34315dc68dd99f648d769b9a1e57c0307",
        "files": [
          "changelog/52452.fixed.md",
          "salt/client/ssh/__init__.py",
          "salt/client/ssh/wrapper/__init__.py"
        ],
        "message": "Make salt-ssh more strict when handling unexpected situations\n\nThis commit ensures that output indicating failure is not\npassed off as the output of the command when it is called\nvia `__salt__`, e.g. during template rendering or in wrapper\nmodules. It does this by raising exceptions when issues\nare detected and thus simulates the remote error locally.\nSee issue #64531 for a detailed description.",
        "before_after_code_files": [
          "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
          "salt/client/ssh/wrapper/__init__.py||salt/client/ssh/wrapper/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ],
          "candidate": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
          "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "556:         )",
          "557:         ret = {\"id\": single.id}",
          "559:         try:",
          "588:             ret[\"ret\"] = {",
          "589:                 \"stdout\": stdout,",
          "590:                 \"stderr\": stderr,",
          "591:                 \"retcode\": retcode,",
          "592:             }",
          "593:         que.put((ret, retcode))",
          "595:     def handle_ssh(self, mine=False):",
          "",
          "[Removed Lines]",
          "558:         stdout, stderr, retcode = single.run()",
          "560:             retcode = int(retcode)",
          "561:         except (TypeError, ValueError):",
          "562:             log.warning(f\"Got an invalid retcode for host '{host}': '{retcode}'\")",
          "563:             retcode = 1",
          "564:         # This job is done, yield",
          "565:         try:",
          "566:             data = salt.utils.json.find_json(stdout)",
          "567:             if len(data) < 2 and \"local\" in data:",
          "568:                 ret[\"ret\"] = data[\"local\"]",
          "569:                 try:",
          "570:                     # Ensure a reported local retcode is kept",
          "571:                     remote_retcode = data[\"local\"][\"retcode\"]",
          "572:                     try:",
          "573:                         retcode = int(remote_retcode)",
          "574:                     except (TypeError, ValueError):",
          "575:                         log.warning(",
          "576:                             f\"Host '{host}' reported an invalid retcode: '{remote_retcode}'\"",
          "577:                         )",
          "578:                         retcode = max(retcode, 1)",
          "579:                 except (KeyError, TypeError):",
          "580:                     pass",
          "581:             else:",
          "582:                 ret[\"ret\"] = {",
          "583:                     \"stdout\": stdout,",
          "584:                     \"stderr\": stderr,",
          "585:                     \"retcode\": retcode,",
          "586:                 }",
          "587:         except Exception:  # pylint: disable=broad-except",
          "",
          "[Added Lines]",
          "558:         stdout = stderr = \"\"",
          "559:         retcode = 0",
          "561:             stdout, stderr, retcode = single.run()",
          "562:             ret[\"ret\"] = salt.client.ssh.wrapper.parse_ret(stdout, stderr, retcode)",
          "563:         except (",
          "564:             salt.client.ssh.wrapper.SSHPermissionDeniedError,",
          "565:             salt.client.ssh.wrapper.SSHCommandExecutionError,",
          "566:         ) as err:",
          "567:             ret[\"ret\"] = err.to_ret()",
          "568:             # All caught errors always indicate the retcode is/should be > 0",
          "569:             retcode = max(retcode, err.retcode, 1)",
          "570:         except salt.client.ssh.wrapper.SSHException as err:",
          "571:             ret[\"ret\"] = err.to_ret()",
          "572:             if not self.opts.get(\"raw_shell\"):",
          "573:                 # We only expect valid JSON output from Salt",
          "574:                 retcode = max(retcode, err.retcode, 1)",
          "575:                 ret[\"ret\"].pop(\"_error\", None)",
          "576:         except Exception as err:  # pylint: disable=broad-except",
          "577:             log.error(",
          "578:                 f\"Error while parsing the command output: {err}\",",
          "579:                 exc_info_on_loglevel=logging.DEBUG,",
          "580:             )",
          "582:                 \"_error\": f\"Internal error while parsing the command output: {err}\",",
          "586:                 \"data\": None,",
          "588:             retcode = max(retcode, 1)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:             self.cache_job(jid, host, ret[host], fun)",
          "738:             if self.event:",
          "739:                 id_, data = next(iter(ret.items()))",
          "741:                     data = {\"return\": data}",
          "742:                 if \"id\" not in data:",
          "743:                     data[\"id\"] = id_",
          "",
          "[Removed Lines]",
          "740:                 if isinstance(data, str):",
          "",
          "[Added Lines]",
          "736:                 if not isinstance(data, dict):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "854:                 salt.output.display_output(p_data, outputter, self.opts)",
          "855:             if self.event:",
          "856:                 id_, data = next(iter(ret.items()))",
          "858:                     data = {\"return\": data}",
          "859:                 if \"id\" not in data:",
          "860:                     data[\"id\"] = id_",
          "",
          "[Removed Lines]",
          "857:                 if isinstance(data, str):",
          "",
          "[Added Lines]",
          "853:                 if not isinstance(data, dict):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1037:             # NamedTemporaryFile",
          "1038:             try:",
          "1039:                 shutil.copyfile(self.ssh_pre_flight, temp.name)",
          "1041:                 return (",
          "1042:                     \"\",",
          "1043:                     \"Could not copy pre flight script to temporary path\",",
          "",
          "[Removed Lines]",
          "1040:             except OSError as err:",
          "",
          "[Added Lines]",
          "1036:             except OSError:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1100:         Returns tuple of (stdout, stderr, retcode)",
          "1101:         \"\"\"",
          "1104:         if self.ssh_pre_flight:",
          "1105:             if not self.opts.get(\"ssh_run_pre_flight\", False) and self.check_thin_dir():",
          "",
          "[Removed Lines]",
          "1102:         stdout = stderr = retcode = None",
          "",
          "[Added Lines]",
          "1098:         stdout = stderr = \"\"",
          "1099:         retcode = 0",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1176:             )",
          "1178:             opts_pkg = pre_wrapper[\"test.opts_pkg\"]()  # pylint: disable=E1102",
          "1185:             opts_pkg[\"file_roots\"] = self.opts[\"file_roots\"]",
          "1186:             opts_pkg[\"pillar_roots\"] = self.opts[\"pillar_roots\"]",
          "",
          "[Removed Lines]",
          "1179:             if \"_error\" in opts_pkg:",
          "1180:                 # Refresh failed",
          "1181:                 retcode = opts_pkg[\"retcode\"]",
          "1182:                 ret = salt.utils.json.dumps({\"local\": opts_pkg})",
          "1183:                 return ret, retcode",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1307:                 result = wrapper[mine_fun](*self.args, **self.kwargs)",
          "1308:             else:",
          "1309:                 result = self.wfuncs[self.fun](*self.args, **self.kwargs)",
          "1310:         except TypeError as exc:",
          "1312:             log.error(result, exc_info_on_loglevel=logging.DEBUG)",
          "1313:             retcode = 1",
          "1314:         except Exception as exc:  # pylint: disable=broad-except",
          "1318:             log.error(result, exc_info_on_loglevel=logging.DEBUG)",
          "1319:             retcode = 1",
          "",
          "[Removed Lines]",
          "1311:             result = f\"TypeError encountered executing {self.fun}: {exc}\"",
          "1315:             result = \"An Exception occurred while executing {}: {}\".format(",
          "1316:                 self.fun, exc",
          "1317:             )",
          "",
          "[Added Lines]",
          "1302:         except salt.client.ssh.wrapper.SSHException:",
          "1303:             # SSHExceptions indicating remote command failure or",
          "1304:             # parsing issues are handled centrally in SSH.handle_routine",
          "1305:             raise",
          "1307:             result = {\"local\": f\"TypeError encountered executing {self.fun}: {exc}\"}",
          "1311:             result = {",
          "1312:                 \"local\": f\"An Exception occurred while executing {self.fun}: {exc}\"",
          "1313:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1325:         # emit (as seen in ssh_py_shim.py)",
          "1326:         if isinstance(result, dict) and \"local\" in result:",
          "1327:             ret = salt.utils.json.dumps({\"local\": result[\"local\"]})",
          "1328:         else:",
          "1329:             ret = salt.utils.json.dumps({\"local\": {\"return\": result}})",
          "1330:         return ret, retcode",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1324:         elif self.context.get(\"retcode\"):",
          "1325:             # The wrapped command failed, the usual behavior is that",
          "1326:             # the return is dumped as-is without declaring it as a result.",
          "1327:             ret = salt.utils.json.dumps({\"local\": result})",
          "",
          "---------------"
        ],
        "salt/client/ssh/wrapper/__init__.py||salt/client/ssh/wrapper/__init__.py": [
          "File: salt/client/ssh/wrapper/__init__.py -> salt/client/ssh/wrapper/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import copy",
          "11: import salt.client.ssh",
          "12: import salt.loader",
          "13: import salt.utils.data",
          "14: import salt.utils.json",
          "17: class FunctionWrapper:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: import logging",
          "16: from salt.defaults import NOT_SET",
          "17: from salt.exceptions import CommandExecutionError, SaltException",
          "19: log = logging.getLogger(__name__)",
          "22: class SSHException(SaltException):",
          "23:     \"\"\"",
          "24:     Indicates general command failure via salt-ssh.",
          "25:     \"\"\"",
          "27:     _error = \"\"",
          "29:     def __init__(",
          "30:         self, stdout, stderr, retcode, result=NOT_SET, data=None, *args, **kwargs",
          "31:     ):",
          "32:         super().__init__(stderr, *args, **kwargs)",
          "33:         self.stdout = stdout",
          "34:         self.stderr = stderr",
          "35:         self.result = result",
          "36:         self.data = data",
          "37:         self.retcode = retcode",
          "38:         if args:",
          "39:             self._error = args.pop(0)",
          "41:     def to_ret(self):",
          "42:         ret = {",
          "43:             \"stdout\": self.stdout,",
          "44:             \"stderr\": self.stderr,",
          "45:             \"retcode\": self.retcode,",
          "46:             \"data\": self.data,",
          "47:         }",
          "48:         if self._error:",
          "49:             ret[\"_error\"] = self._error",
          "50:         if self.result is not NOT_SET:",
          "51:             ret[\"return\"] = self.result",
          "52:         return ret",
          "55: class SSHCommandExecutionError(SSHException, CommandExecutionError):",
          "56:     \"\"\"",
          "57:     Thrown whenever a non-zero exit code is returned.",
          "58:     This was introduced to make the salt-ssh FunctionWrapper behave",
          "59:     more like the usual one, in particular to force template rendering",
          "60:     to stop when a function call results in an exception.",
          "61:     \"\"\"",
          "63:     _error = \"The command resulted in a non-zero exit code\"",
          "65:     def to_ret(self):",
          "66:         if self.data and \"local\" in self.data:",
          "67:             # Wrapped commands that indicate a non-zero retcode",
          "68:             return self.data[\"local\"]",
          "69:         elif self.stderr:",
          "70:             # Remote executions that indicate a non-zero retcode",
          "71:             return self.stderr",
          "72:         return super().to_ret()",
          "75: class SSHPermissionDeniedError(SSHException):",
          "76:     \"\"\"",
          "77:     Thrown when \"Permission denied\" is found in stderr",
          "78:     \"\"\"",
          "80:     _error = \"Permission Denied\"",
          "83: class SSHReturnDecodeError(SSHException):",
          "84:     \"\"\"",
          "85:     Thrown when JSON-decoding stdout fails and the retcode is 0 otherwise",
          "86:     \"\"\"",
          "88:     _error = \"Failed to return clean data\"",
          "91: class SSHMalformedReturnError(SSHException):",
          "92:     \"\"\"",
          "93:     Thrown when a decoded return dict is not formed as",
          "94:     {\"local\": {\"return\": ...}}",
          "95:     \"\"\"",
          "97:     _error = \"Return dict was malformed\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:             )",
          "121:             stdout, stderr, retcode = single.cmd_block()",
          "143:         return caller",
          "",
          "[Removed Lines]",
          "122:             if stderr.count(\"Permission Denied\"):",
          "123:                 return {",
          "124:                     \"_error\": \"Permission Denied\",",
          "125:                     \"stdout\": stdout,",
          "126:                     \"stderr\": stderr,",
          "127:                     \"retcode\": retcode,",
          "128:                 }",
          "129:             try:",
          "130:                 ret = salt.utils.json.loads(stdout)",
          "131:                 if len(ret) < 2 and \"local\" in ret:",
          "132:                     ret = ret[\"local\"]",
          "133:                 ret = ret.get(\"return\", {})",
          "134:             except ValueError:",
          "135:                 ret = {",
          "136:                     \"_error\": \"Failed to return clean data\",",
          "137:                     \"stderr\": stderr,",
          "138:                     \"stdout\": stdout,",
          "139:                     \"retcode\": retcode,",
          "140:                 }",
          "141:             return ret",
          "",
          "[Added Lines]",
          "205:             return parse_ret(stdout, stderr, retcode, result_only=True)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "176:             return self[cmd]",
          "177:         else:",
          "178:             return default",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245: def parse_ret(stdout, stderr, retcode, result_only=False):",
          "246:     \"\"\"",
          "247:     Parse the output of a remote or local command and return its",
          "248:     result. Raise exceptions if the command has a non-zero exitcode",
          "249:     or its output is not valid JSON or is not in the expected format,",
          "250:     usually ``{\"local\": {\"return\": value}}`` (+ optional keys in the \"local\" dict).",
          "251:     \"\"\"",
          "252:     try:",
          "253:         retcode = int(retcode)",
          "254:     except (TypeError, ValueError):",
          "255:         log.warning(f\"Got an invalid retcode for host: '{retcode}'\")",
          "256:         retcode = 1",
          "258:     if retcode and stderr.count(\"Permission Denied\"):",
          "259:         raise SSHPermissionDeniedError(stdout=stdout, stderr=stderr, retcode=retcode)",
          "261:     result = NOT_SET",
          "262:     error = None",
          "263:     data = None",
          "264:     local_data = None",
          "266:     try:",
          "267:         data = salt.utils.json.loads(stdout)",
          "268:         if len(data) < 2 and \"local\" in data:",
          "269:             try:",
          "270:                 result = data[\"local\"]",
          "271:                 try:",
          "272:                     # Ensure a reported local retcode is kept (at least)",
          "273:                     retcode = max(retcode, result[\"retcode\"])",
          "274:                 except (KeyError, TypeError):",
          "275:                     pass",
          "276:                 if not isinstance(data[\"local\"], dict):",
          "277:                     # When a command has failed, the return is dumped as-is",
          "278:                     # without declaring it as a result, usually a string or list.",
          "279:                     error = SSHCommandExecutionError",
          "280:                 elif result_only:",
          "281:                     result = result[\"return\"]",
          "282:             except KeyError:",
          "283:                 error = SSHMalformedReturnError",
          "284:         else:",
          "285:             error = SSHMalformedReturnError",
          "287:     except ValueError:",
          "288:         # No valid JSON output was found",
          "289:         error = SSHReturnDecodeError",
          "290:     if retcode:",
          "291:         raise SSHCommandExecutionError(",
          "292:             stdout=stdout,",
          "293:             stderr=stderr,",
          "294:             retcode=retcode,",
          "295:             result=result,",
          "296:             data=local_data if local_data is not None else data,",
          "297:         )",
          "298:     if error is not None:",
          "299:         raise error(",
          "300:             stdout=stdout,",
          "301:             stderr=stderr,",
          "302:             retcode=retcode,",
          "303:             result=result,",
          "304:             data=local_data if local_data is not None else data,",
          "305:         )",
          "306:     return result",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df835c19826381b58b58ce38ec9a63551b2f7725",
      "candidate_info": {
        "commit_hash": "df835c19826381b58b58ce38ec9a63551b2f7725",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/df835c19826381b58b58ce38ec9a63551b2f7725",
        "files": [
          "tests/pytests/unit/client/ssh/test_ssh.py"
        ],
        "message": "Add test for issue #66610",
        "before_after_code_files": [
          "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
          ],
          "candidate": [
            "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/client/ssh/test_ssh.py||tests/pytests/unit/client/ssh/test_ssh.py": [
          "File: tests/pytests/unit/client/ssh/test_ssh.py -> tests/pytests/unit/client/ssh/test_ssh.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:         assert ssh_obj.opts.get(\"extra_filerefs\", None) == \"salt://foobar\"",
          "345:     \"\"\"",
          "346:     test \"key_deploy\" function when",
          "347:     permission denied authentication error",
          "",
          "[Removed Lines]",
          "344: def test_key_deploy_permission_denied_scp(tmp_path, opts):",
          "",
          "[Added Lines]",
          "344: @pytest.mark.parametrize(\"user_choice\", (\"y\", \"n\"))",
          "345: def test_key_deploy_permission_denied_scp(tmp_path, opts, user_choice):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375:     patch_roster_file = patch(\"salt.roster.get_roster_file\", MagicMock(return_value=\"\"))",
          "376:     with patch_roster_file:",
          "377:         client = ssh.SSH(opts)",
          "379:     patch_getpass = patch(\"getpass.getpass\", return_value=[\"password\"])",
          "380:     mock_key_run = MagicMock(return_value=key_run_ret)",
          "381:     patch_key_run = patch(\"salt.client.ssh.SSH._key_deploy_run\", mock_key_run)",
          "382:     with patch_input, patch_getpass, patch_key_run:",
          "383:         ret = client.key_deploy(host, ssh_ret)",
          "393: def test_key_deploy_permission_denied_file_scp(tmp_path, opts):",
          "",
          "[Removed Lines]",
          "378:     patch_input = patch(\"builtins.input\", side_effect=[\"y\"])",
          "384:     assert mock_key_run.call_args_list[0][0] == (",
          "385:         host,",
          "386:         {\"passwd\": [passwd], \"host\": host, \"user\": usr},",
          "387:         True,",
          "388:     )",
          "389:     assert ret == key_run_ret",
          "390:     assert mock_key_run.call_count == 1",
          "",
          "[Added Lines]",
          "379:     patch_input = patch(\"builtins.input\", side_effect=[user_choice])",
          "385:     if user_choice == \"y\":",
          "386:         assert mock_key_run.call_args_list[0][0] == (",
          "387:             host,",
          "388:             {\"passwd\": [passwd], \"host\": host, \"user\": usr},",
          "389:             True,",
          "390:         )",
          "391:         assert ret == key_run_ret",
          "392:         assert mock_key_run.call_count == 1",
          "393:     else:",
          "394:         mock_key_run.assert_not_called()",
          "395:         assert ret == (ssh_ret, None)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b5b5fb4f5c31faa05546d0435b20b20b81a8a05b",
      "candidate_info": {
        "commit_hash": "b5b5fb4f5c31faa05546d0435b20b20b81a8a05b",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/b5b5fb4f5c31faa05546d0435b20b20b81a8a05b",
        "files": [
          "salt/client/ssh/__init__.py",
          "salt/utils/relenv.py"
        ],
        "message": "Relenv deploy is successful",
        "before_after_code_files": [
          "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py",
          "salt/utils/relenv.py||salt/utils/relenv.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ],
          "candidate": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
          "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import pathlib",
          "14: import queue",
          "15: import re",
          "17: import shlex",
          "18: import shutil",
          "19: import subprocess",
          "",
          "[Removed Lines]",
          "16: import requests",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: import salt.utils.network",
          "44: import salt.utils.path",
          "45: import salt.utils.platform",
          "46: import salt.utils.stringutils",
          "47: import salt.utils.thin",
          "48: import salt.utils.url",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import salt.utils.relenv",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60: except ImportError:",
          "61:     HAS_WINSHELL = False",
          "64: DEFAULT_THIN_DIR = \"/var/tmp/.%%USER%%_%%FQDNUUID%%_salt\"",
          "66: # RSTR is just a delimiter to distinguish the beginning of salt STDOUT",
          "",
          "[Removed Lines]",
          "63: # The directory where salt thin/relenv is deployed",
          "",
          "[Added Lines]",
          "64: # The directory where salt thin is deployed",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:     ]",
          "192: )",
          "194: if not salt.utils.platform.is_windows() and not salt.utils.platform.is_junos():",
          "195:     shim_file = os.path.join(os.path.dirname(__file__), \"ssh_py_shim.py\")",
          "196:     if not os.path.exists(shim_file):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: SSH_SH_SHIM_RELENV = \"\\n\".join(",
          "197:     [",
          "198:         s.strip()",
          "199:         for s in '''",
          "200: /bin/sh << 'EOF'",
          "201: set -e",
          "202: set -u",
          "203: DEBUG=\"{DEBUG}\"",
          "204: if [ -n \"$DEBUG\" ]; then set -x; fi",
          "206: SET_PATH=\"{SET_PATH}\"",
          "207: if [ -n \"$SET_PATH\" ]; then export PATH=$SET_PATH; fi",
          "209: SUDO=\"\"",
          "210: if [ -n \"{SUDO}\" ]; then SUDO=\"{SUDO} \"; fi",
          "212: SUDO_USER=\"{SUDO_USER}\"",
          "213: if [ \"$SUDO\" ] && [ \"$SUDO_USER\" ]; then SUDO=\"$SUDO -u $SUDO_USER\"; fi",
          "215: RELENV_TAR=\"{THIN_DIR}/salt-relenv.tar.xz\"",
          "216: RELENV_DIR=\"{THIN_DIR}/salt\"",
          "217: mkdir -p \"{THIN_DIR}\"",
          "218: SALT_CALL_BIN=\"$RELENV_DIR/salt-call\"",
          "220: # Extract relenv tarball if not already extracted",
          "221: if [ ! -x \"$SALT_CALL_BIN\" ]; then",
          "222:     if [ ! -f \"$RELENV_TAR\" ]; then",
          "223:         echo deploy",
          "224:         echo \"ERROR: relenv tarball not found at $RELENV_TAR\" >&2",
          "225:         exit 11",
          "226:     fi",
          "228:     # Create directory if not exists and extract the tarball",
          "229:     tar -xf \"$RELENV_TAR\" -C \"{THIN_DIR}\"",
          "230: fi",
          "232: # Check if Python binary is executable",
          "233: if [ ! -x \"$SALT_CALL_BIN\" ]; then",
          "234:     echo \"ERROR: salt-call binary not found or not executable at $SALT_CALL_BIN\" >&2",
          "235:     exit 1",
          "236: fi",
          "238: echo \"{RSTR}\"",
          "239: echo \"{RSTR}\" >&2",
          "241: exec $SUDO \"$SALT_CALL_BIN\" --retcode-passthrough --local --metadata --out=json -lquiet -c \"$RELENV_DIR\" {ARGS}",
          "242: EOF",
          "243: '''.split(\"\\n\")",
          "244:     ]",
          "245: )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "311:             self.opts[\"ssh_wipe\"] = \"True\"",
          "312:         self.returners = salt.loader.returners(self.opts, {})",
          "313:         self.fsclient = salt.fileclient.FSClient(self.opts)",
          "323:         self.mods = mod_data(self.fsclient)",
          "325:     # __setstate__ and __getstate__ are only used on spawning platforms.",
          "",
          "[Removed Lines]",
          "314:         self.thin = salt.utils.thin.gen_thin(",
          "315:             self.opts[\"cachedir\"],",
          "316:             extra_mods=self.opts.get(\"thin_extra_mods\"),",
          "317:             overwrite=self.opts[\"regen_thin\"],",
          "318:             extended_cfg=self.opts.get(\"ssh_ext_alternatives\"),",
          "319:             exclude_saltexts=self.opts.get(\"thin_exclude_saltexts\", False),",
          "320:             saltext_allowlist=self.opts.get(\"thin_saltext_allowlist\"),",
          "321:             saltext_blocklist=self.opts.get(\"thin_saltext_blocklist\"),",
          "322:         )",
          "",
          "[Added Lines]",
          "367:         if self.opts.get(\"relenv\"):",
          "368:             self.thin = None",
          "369:         else:",
          "370:             self.thin = salt.utils.thin.gen_thin(",
          "371:                 self.opts[\"cachedir\"],",
          "372:                 extra_mods=self.opts.get(\"thin_extra_mods\"),",
          "373:                 overwrite=self.opts[\"regen_thin\"],",
          "374:                 extended_cfg=self.opts.get(\"ssh_ext_alternatives\"),",
          "375:                 exclude_saltexts=self.opts.get(\"thin_exclude_saltexts\", False),",
          "376:                 saltext_allowlist=self.opts.get(\"thin_saltext_allowlist\"),",
          "377:                 saltext_blocklist=self.opts.get(\"thin_saltext_blocklist\"),",
          "378:             )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1072:             # Determine if Windows client is x86 or AMD64",
          "1073:             arch, _, _ = self.shell.exec_cmd(\"powershell $ENV:PROCESSOR_ARCHITECTURE\")",
          "1074:             self.arch = arch.strip()",
          "1145:     def detect_os_arch(self):",
          "1146:         \"\"\"",
          "",
          "[Removed Lines]",
          "1075:         self.thin = thin if thin else salt.utils.thin.thin_path(opts[\"cachedir\"])",
          "1077:     def __arg_comps(self):",
          "1078:         \"\"\"",
          "1079:         Return the function name and the arg list",
          "1080:         \"\"\"",
          "1081:         fun = self.argv[0] if self.argv else \"\"",
          "1082:         parsed = salt.utils.args.parse_input(",
          "1083:             self.argv[1:], condition=False, no_parse=self.opts.get(\"no_parse\", [])",
          "1084:         )",
          "1085:         args = parsed[0]",
          "1086:         kws = parsed[1]",
          "1087:         return fun, args, kws",
          "1089:     def _escape_arg(self, arg):",
          "1090:         \"\"\"",
          "1091:         Properly escape argument to protect special characters from shell",
          "1092:         interpretation.  This avoids having to do tricky argument quoting.",
          "1094:         Effectively just escape all characters in the argument that are not",
          "1095:         alphanumeric!",
          "1096:         \"\"\"",
          "1097:         if self.winrm:",
          "1098:             return arg",
          "1099:         return \"\".join([\"\\\\\" + char if re.match(r\"\\W\", char) else char for char in arg])",
          "1101:     def run_ssh_pre_hook(self):",
          "1102:         \"\"\"",
          "1103:         Run a pre_hook script on the host machine before running any ssh commands",
          "1104:         \"\"\"",
          "1105:         return self.shell.exec_cmd(self.ssh_pre_hook)",
          "1107:     def run_ssh_pre_flight(self):",
          "1108:         \"\"\"",
          "1109:         Run our pre_flight script before running any ssh commands",
          "1110:         \"\"\"",
          "1111:         with tempfile.NamedTemporaryFile() as temp:",
          "1112:             # ensure we use copyfile to not copy the file attributes",
          "1113:             # we want to ensure we use the perms set by the secure",
          "1114:             # NamedTemporaryFile",
          "1115:             try:",
          "1116:                 shutil.copyfile(self.ssh_pre_flight, temp.name)",
          "1117:             except OSError:",
          "1118:                 return (",
          "1119:                     \"\",",
          "1120:                     \"Could not copy pre flight script to temporary path\",",
          "1121:                     1,",
          "1122:                 )",
          "1123:             target_script = f\".{pathlib.Path(temp.name).name}\"",
          "1124:             log.trace(\"Copying the pre flight script to target\")",
          "1125:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
          "1126:             if retcode != 0:",
          "1127:                 # We could not copy the script to the target",
          "1128:                 log.error(\"Could not copy the pre flight script to target\")",
          "1129:                 return stdout, stderr, retcode",
          "1131:             log.trace(\"Executing the pre flight script on target\")",
          "1132:             return self.execute_script(",
          "1133:                 target_script, script_args=self.ssh_pre_flight_args",
          "1134:             )",
          "1136:     def check_thin_dir(self):",
          "1137:         \"\"\"",
          "1138:         check if the thindir exists on the remote machine",
          "1139:         \"\"\"",
          "1140:         stdout, stderr, retcode = self.shell.exec_cmd(f\"test -d {self.thin_dir}\")",
          "1141:         if retcode != 0:",
          "1142:             return False",
          "1143:         return True",
          "",
          "[Added Lines]",
          "1132:         if self.opts.get(\"relenv\"):",
          "1133:             kernel, os_arch = self.detect_os_arch()",
          "1134:             self.thin = salt.utils.relenv.gen_relenv(opts[\"cachedir\"], kernel=kernel, os_arch=os_arch)",
          "1135:         else:",
          "1136:             self.thin = thin if thin else salt.utils.thin.thin_path(opts[\"cachedir\"])",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1200:         return kernel, os_arch",
          "1209:         \"\"\"",
          "1248:         \"\"\"",
          "1250:         \"\"\"",
          "1295:             return False",
          "1307:     def deploy(self):",
          "1308:         \"\"\"",
          "1310:         \"\"\"",
          "1311:         if self.opts.get(\"relenv\"):",
          "1313:         else:",
          "1314:             self.shell.send(",
          "1315:                 self.thin,",
          "",
          "[Removed Lines]",
          "1202:     def get_relenv_tarball(self, kernel, arch):",
          "1203:         \"\"\"",
          "1204:         Get the latest Salt onedir tarball URL for the specified kernel and architecture.",
          "1206:         :param kernel: The detected OS (e.g., 'linux', 'darwin', 'windows')",
          "1207:         :param arch: The detected architecture (e.g., 'amd64', 'x86_64', 'arm64')",
          "1208:         :return: The URL of the latest tarball",
          "1210:         # TODO actually add this as an option",
          "1211:         base_url = self.opts.get(\"salt_repo_url\", \"https://repo.saltproject.io/salt/py3/onedir/latest/\")",
          "1213:         try:",
          "1214:             # Request the page listing",
          "1215:             response = requests.get(base_url)",
          "1216:             response.raise_for_status()",
          "1217:         except requests.RequestException as e:",
          "1218:             log.error(f\"Failed to retrieve tarball listing: {e}\")",
          "1219:             raise ValueError(\"Unable to fetch tarball list from repository\")",
          "1221:         # Determine the correct file extension based on the OS",
          "1222:         if kernel == \"windows\":",
          "1223:             file_extension = \"zip\"",
          "1224:         else:",
          "1225:             file_extension = \"tar.xz\"",
          "1227:         # Search for tarball filenames that match the kernel and arch",
          "1228:         pattern = re.compile(rf'href=\"(salt-.*-onedir-{kernel}-{arch}\\.{file_extension})\"')",
          "1230:         # Find all matches in the HTML content",
          "1231:         matches = pattern.findall(response.text)",
          "1233:         if not matches:",
          "1234:             log.error(f\"No tarballs found for {kernel} and {arch}\")",
          "1235:             raise ValueError(f\"No tarball found for {kernel} {arch}\")",
          "1237:         # Assume that the latest tarball is the last one in the sorted list",
          "1238:         matches.sort()",
          "1239:         latest_tarball = matches[-1]",
          "1241:         # Construct the full URL",
          "1242:         latest_url = base_url + latest_tarball",
          "1243:         log.info(f\"Latest relenv tarball URL: {latest_url}\")",
          "1245:         return latest_url, file_extension",
          "1247:     def relenv(self):",
          "1249:         Deploy salt-relenv",
          "1251:         try:",
          "1252:             # Detect OS and architecture",
          "1253:             kernel, os_arch = self.detect_os_arch()",
          "1254:         except ValueError as e:",
          "1255:             log.error(f\"Error in OS and architecture detection: {e}\")",
          "1256:             return False",
          "1258:         hash_ext = \".sha512\"",
          "1260:         # Construct the relenv URL based on the detected OS and architecture",
          "1261:         relenv_url, ext = self.get_relenv_tarball(kernel, os_arch)",
          "1263:         # Define the URLs for the sha512 and sha512.asc files",
          "1264:         codesum_url = relenv_url + hash_ext",
          "1266:         # Path to cache the downloaded files",
          "1267:         tarball_path = os.path.join(self.opts[\"cachedir\"], f\"salt-relenv-{kernel}-{os_arch}.{ext}\")",
          "1268:         codesum_path = tarball_path + hash_ext",
          "1270:         # Function to download a file if it doesn't exist in the cache",
          "1271:         def download_file(url, destination):",
          "1272:             if not os.path.exists(destination):",
          "1273:                 log.info(f\"Downloading from {url} to {destination}\")",
          "1274:                 try:",
          "1275:                     with salt.utils.files.fopen(destination, 'wb+') as dest_file:",
          "1276:                         salt.utils.http.query(",
          "1277:                             url=url,",
          "1278:                             method='GET',",
          "1279:                             stream=True,",
          "1280:                             streaming_callback=dest_file.write,",
          "1281:                             raise_error=True",
          "1282:                         )",
          "1284:                 except Exception as e:",
          "1285:                     log.error(f\"Error during file download: {e}\")",
          "1286:                     return False",
          "1287:             return True",
          "1289:         # Download the relenv tarball if not already cached",
          "1290:         if not download_file(relenv_url, tarball_path):",
          "1291:             return False",
          "1293:         # Download the .sha512 file",
          "1294:         if not download_file(codesum_url, codesum_path):",
          "1297:         # Send the tarball to the target machine",
          "1298:         result = True",
          "1299:         stdout, _, retcode = self.shell.send(tarball_path, os.path.join(self.thin_dir, f\"salt-relenv.{ext}\"))",
          "1300:         log.info(stdout.strip())",
          "1301:         result &= (retcode == 0)",
          "1302:         stdout, _, retcode = self.shell.send(codesum_path, os.path.join(self.thin_dir, \"code-checksum\"))",
          "1303:         log.info(stdout.strip())",
          "1304:         result &= (retcode == 0)",
          "1305:         return result",
          "1309:         Deploy salt-thin/relenv",
          "1312:             self.relenv()",
          "",
          "[Added Lines]",
          "1196:     def __arg_comps(self):",
          "1198:         Return the function name and the arg list",
          "1199:         \"\"\"",
          "1200:         fun = self.argv[0] if self.argv else \"\"",
          "1201:         parsed = salt.utils.args.parse_input(",
          "1202:             self.argv[1:], condition=False, no_parse=self.opts.get(\"no_parse\", [])",
          "1203:         )",
          "1204:         args = parsed[0]",
          "1205:         kws = parsed[1]",
          "1206:         return fun, args, kws",
          "1208:     def _escape_arg(self, arg):",
          "1209:         \"\"\"",
          "1210:         Properly escape argument to protect special characters from shell",
          "1211:         interpretation.  This avoids having to do tricky argument quoting.",
          "1213:         Effectively just escape all characters in the argument that are not",
          "1214:         alphanumeric!",
          "1215:         \"\"\"",
          "1216:         if self.winrm:",
          "1217:             return arg",
          "1218:         return \"\".join([\"\\\\\" + char if re.match(r\"\\W\", char) else char for char in arg])",
          "1220:     def run_ssh_pre_hook(self):",
          "1222:         Run a pre_hook script on the host machine before running any ssh commands",
          "1224:         return self.shell.exec_cmd(self.ssh_pre_hook)",
          "1226:     def run_ssh_pre_flight(self):",
          "1227:         \"\"\"",
          "1228:         Run our pre_flight script before running any ssh commands",
          "1229:         \"\"\"",
          "1230:         with tempfile.NamedTemporaryFile() as temp:",
          "1231:             # ensure we use copyfile to not copy the file attributes",
          "1232:             # we want to ensure we use the perms set by the secure",
          "1233:             # NamedTemporaryFile",
          "1234:             try:",
          "1235:                 shutil.copyfile(self.ssh_pre_flight, temp.name)",
          "1236:             except OSError:",
          "1237:                 return (",
          "1238:                     \"\",",
          "1239:                     \"Could not copy pre flight script to temporary path\",",
          "1240:                     1,",
          "1241:                 )",
          "1242:             target_script = f\".{pathlib.Path(temp.name).name}\"",
          "1243:             log.trace(\"Copying the pre flight script to target\")",
          "1244:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
          "1245:             if retcode != 0:",
          "1246:                 # We could not copy the script to the target",
          "1247:                 log.error(\"Could not copy the pre flight script to target\")",
          "1248:                 return stdout, stderr, retcode",
          "1250:             log.trace(\"Executing the pre flight script on target\")",
          "1251:             return self.execute_script(",
          "1252:                 target_script, script_args=self.ssh_pre_flight_args",
          "1253:             )",
          "1255:     def check_thin_dir(self):",
          "1256:         \"\"\"",
          "1257:         check if the thindir exists on the remote machine",
          "1258:         \"\"\"",
          "1259:         stdout, stderr, retcode = self.shell.exec_cmd(f\"test -d {self.thin_dir}\")",
          "1260:         if retcode != 0:",
          "1262:         return True",
          "1266:         Deploy salt-thin",
          "1269:             self.shell.send(",
          "1270:                 self.thin,",
          "1271:                 os.path.join(self.thin_dir, \"salt-relenv.tar.xz\"),",
          "1272:             )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1608:             cachedir = self.opts[\"_caller_cachedir\"]",
          "1609:         else:",
          "1610:             cachedir = self.opts[\"cachedir\"]",
          "1612:         debug = \"\"",
          "1613:         if not self.opts.get(\"log_level\"):",
          "1614:             self.opts[\"log_level\"] = \"info\"",
          "1615:         if LOG_LEVELS[\"debug\"] >= LOG_LEVELS[self.opts.get(\"log_level\", \"info\")]:",
          "1616:             debug = \"1\"",
          "1617:         arg_str = '''",
          "1618: OPTIONS.config = \\",
          "1619: \"\"\"",
          "",
          "[Removed Lines]",
          "1611:         thin_code_digest, thin_sum = salt.utils.thin.thin_sum(cachedir, \"sha1\")",
          "",
          "[Added Lines]",
          "1578:         if self.opts.get(\"relenv\"):",
          "1579:             return SSH_SH_SHIM_RELENV.format(",
          "1580:                 DEBUG=debug,",
          "1581:                 SUDO=sudo,",
          "1582:                 SUDO_USER=sudo_user or \"\",",
          "1583:                 THIN_DIR=self.thin_dir,",
          "1584:                 SET_PATH=self.set_path,",
          "1585:                 RSTR=RSTR,",
          "1586:                 ARGS=\" \".join(self.argv),",
          "1587:             )",
          "1589:         thin_code_digest, thin_sum = salt.utils.thin.thin_sum(cachedir, \"sha1\")",
          "",
          "---------------"
        ],
        "salt/utils/relenv.py||salt/utils/relenv.py": [
          "File: salt/utils/relenv.py -> salt/utils/relenv.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os",
          "2: import logging",
          "3: import re",
          "4: import requests",
          "5: import salt.utils.files",
          "6: import salt.utils.http",
          "7: import salt.utils.thin",
          "8: import salt.utils.hashutils",
          "10: log = logging.getLogger(__name__)",
          "12: def gen_relenv(",
          "13:     cachedir,",
          "14:     kernel,",
          "15:     os_arch,",
          "16:     overwrite=False,",
          "17: ):",
          "18:     \"\"\"",
          "19:     Deploy salt-relenv.",
          "20:     :param cachedir: The cache directory where the downloaded tarball will be stored.",
          "21:     :param kernel: The detected OS (e.g., 'linux', 'darwin', 'windows').",
          "22:     :param os_arch: The detected architecture (e.g., 'amd64', 'x86_64', 'arm64').",
          "23:     :param overwrite: Whether to overwrite the existing cached tarball.",
          "24:     :return: The path to the recompressed .tgz file.",
          "25:     \"\"\"",
          "26:     # Set up directories",
          "27:     relenv_dir = os.path.join(cachedir, \"relenv\", kernel, os_arch)",
          "28:     if not os.path.isdir(relenv_dir):",
          "29:         os.makedirs(relenv_dir)",
          "31:     relenv_url = get_tarball(kernel, os_arch)",
          "32:     tarball_path = os.path.join(relenv_dir, f\"salt-relenv.tar.xz\")",
          "34:     # Download the tarball if it doesn't exist or overwrite is True",
          "35:     if overwrite or not os.path.exists(tarball_path):",
          "36:         if not download(cachedir, relenv_url, tarball_path):",
          "37:             return False",
          "39:     return tarball_path",
          "41: def get_tarball(kernel, arch):",
          "42:     \"\"\"",
          "43:     Get the latest Salt onedir tarball URL for the specified kernel and architecture.",
          "44:     :param kernel: The detected OS (e.g., 'linux', 'darwin', 'windows').",
          "45:     :param arch: The detected architecture (e.g., 'amd64', 'x86_64', 'arm64').",
          "46:     :return: The URL of the latest tarball.",
          "47:     \"\"\"",
          "48:     base_url = \"https://repo.saltproject.io/salt/py3/onedir/latest/\"",
          "49:     try:",
          "50:         # Request the page listing",
          "51:         response = requests.get(base_url)",
          "52:         response.raise_for_status()",
          "53:     except requests.RequestException as e:",
          "54:         log.error(f\"Failed to retrieve tarball listing: {e}\")",
          "55:         raise ValueError(\"Unable to fetch tarball list from repository\")",
          "57:     # Search for tarball filenames that match the kernel and arch",
          "58:     pattern = re.compile(rf'href=\"(salt-.*-onedir-{kernel}-{arch}\\.tar\\.xz)\"')",
          "59:     matches = pattern.findall(response.text)",
          "60:     if not matches:",
          "61:         log.error(f\"No tarballs found for {kernel} and {arch}\")",
          "62:         raise ValueError(f\"No tarball found for {kernel} {arch}\")",
          "64:     # Return the latest tarball URL",
          "65:     matches.sort()",
          "66:     latest_tarball = matches[-1]",
          "67:     return base_url + latest_tarball",
          "69: def download(cachedir, url, destination):",
          "70:     if not os.path.exists(destination):",
          "71:         log.info(f\"Downloading from {url} to {destination}\")",
          "72:         try:",
          "73:             with salt.utils.files.fopen(destination, 'wb+') as dest_file:",
          "74:                 def stream_callback(chunk):",
          "75:                     dest_file.write(chunk)",
          "76:                 result = salt.utils.http.query(",
          "77:                     url=url,",
          "78:                     method='GET',",
          "79:                     stream=True,",
          "80:                     streaming_callback=stream_callback,",
          "81:                     raise_error=True",
          "82:                 )",
          "83:                 if result.get(\"status\") != 200:",
          "84:                     log.error(f\"Failed to download file from {url}\")",
          "85:                     return False",
          "86:         except Exception as e:",
          "87:             log.error(f\"Error during file download: {e}\")",
          "88:             return False",
          "89:     return True",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f41ed71b13241fff9c9e4c3caae8efa638e5b0f8",
      "candidate_info": {
        "commit_hash": "f41ed71b13241fff9c9e4c3caae8efa638e5b0f8",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/f41ed71b13241fff9c9e4c3caae8efa638e5b0f8",
        "files": [
          "tests/pytests/unit/client/ssh/test_single.py"
        ],
        "message": "Fix logs in ssh tests",
        "before_after_code_files": [
          "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
          ],
          "candidate": [
            "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py"
          ]
        }
      },
      "candidate_diff": {
        "tests/pytests/unit/client/ssh/test_single.py||tests/pytests/unit/client/ssh/test_single.py": [
          "File: tests/pytests/unit/client/ssh/test_single.py -> tests/pytests/unit/client/ssh/test_single.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "411:     with caplog.at_level(logging.TRACE):",
          "412:         with patch_send, patch_exec_cmd, patch_tmp:",
          "413:             ret = single.run_ssh_pre_flight()",
          "419:     assert ret == ret_send",
          "420:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "421:     target_script = send_mock.call_args_list[0][0][1]",
          "",
          "[Removed Lines]",
          "414:     assert f\"Copying the pre flight script {pre_flight.name}\" in caplog.text",
          "415:     assert (",
          "416:         f\"Could not copy the pre flight script {pre_flight.name} to target\"",
          "417:         in caplog.text",
          "418:     )",
          "",
          "[Added Lines]",
          "414:     assert \"Copying the pre flight script\" in caplog.text",
          "415:     assert \"Could not copy the pre flight script to target\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "506:         with patch_send, patch_exec_cmd, patch_tmp:",
          "507:             ret = single.run_ssh_pre_flight()",
          "510:     assert ret == ret_exec_cmd",
          "511:     assert send_mock.call_args_list[0][0][0] == tmp_file",
          "512:     target_script = send_mock.call_args_list[0][0][1]",
          "",
          "[Removed Lines]",
          "509:     assert f\"Executing the pre flight script {pre_flight.name} on target\" in caplog.text",
          "",
          "[Added Lines]",
          "506:     assert \"Executing the pre flight script on target\" in caplog.text",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "552:     assert ret == (",
          "553:         \"\",",
          "555:         1,",
          "556:     )",
          "557:     mock_exec_cmd.assert_not_called()",
          "",
          "[Removed Lines]",
          "554:         f\"Could not copy pre flight script {pre_flight} to temporary path\",",
          "",
          "[Added Lines]",
          "551:         \"Could not copy pre flight script to temporary path\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7bcad0567048b2052c8c0f2bf7797e89c3c5c6a",
      "candidate_info": {
        "commit_hash": "e7bcad0567048b2052c8c0f2bf7797e89c3c5c6a",
        "repo": "saltstack/salt",
        "commit_url": "https://github.com/saltstack/salt/commit/e7bcad0567048b2052c8c0f2bf7797e89c3c5c6a",
        "files": [
          "salt/client/ssh/__init__.py"
        ],
        "message": "Remove filename from logs",
        "before_after_code_files": [
          "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ],
          "candidate": [
            "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py"
          ]
        }
      },
      "candidate_diff": {
        "salt/client/ssh/__init__.py||salt/client/ssh/__init__.py": [
          "File: salt/client/ssh/__init__.py -> salt/client/ssh/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1025:             except OSError as err:",
          "1026:                 return (",
          "1027:                     \"\",",
          "1029:                     1,",
          "1030:                 )",
          "1031:             target_script = f\".{pathlib.Path(temp.name).name}\"",
          "1033:             stdout, stderr, retcode = self.shell.send(temp.name, target_script)",
          "1034:             if retcode != 0:",
          "1035:                 # We could not copy the script to the target",
          "1039:                 return stdout, stderr, retcode",
          "1042:             return self.execute_script(",
          "1043:                 target_script, script_args=self.ssh_pre_flight_args",
          "1044:             )",
          "",
          "[Removed Lines]",
          "1028:                     f\"Could not copy pre flight script {self.ssh_pre_flight} to temporary path\",",
          "1032:             log.trace(f\"Copying the pre flight script {self.ssh_pre_file} to target\")",
          "1036:                 log.error(",
          "1037:                     f\"Could not copy the pre flight script {self.ssh_pre_file} to target\"",
          "1038:                 )",
          "1041:             log.trace(f\"Executing the pre flight script {self.ssh_pre_file} on target\")",
          "",
          "[Added Lines]",
          "1028:                     \"Could not copy pre flight script to temporary path\",",
          "1032:             log.trace(\"Copying the pre flight script to target\")",
          "1036:                 log.error(\"Could not copy the pre flight script to target\")",
          "1039:             log.trace(\"Executing the pre flight script on target\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1430:             shim_tmp_file.name, target_shim_file, makedirs=True",
          "1431:         )",
          "1432:         if retcode != 0:",
          "1434:             return stdout, stderr, retcode",
          "1436:         # Remove our shim file",
          "",
          "[Removed Lines]",
          "1433:             log.error(f\"Could not copy the shim script to target\")",
          "",
          "[Added Lines]",
          "1431:             log.error(\"Could not copy the shim script to target\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}