{
  "cve_id": "CVE-2021-3912",
  "cve_desc": "OctoRPKI tries to load the entire contents of a repository in memory, and in the case of a GZIP bomb, unzip it in memory, making it possible to create a repository that makes OctoRPKI run out of memory (and thus crash).",
  "repo": "cloudflare/cfrpki",
  "patch_hash": "648658b1b176a747b52645989cfddc73a81eacad",
  "patch_info": {
    "commit_hash": "648658b1b176a747b52645989cfddc73a81eacad",
    "repo": "cloudflare/cfrpki",
    "commit_url": "https://github.com/cloudflare/cfrpki/commit/648658b1b176a747b52645989cfddc73a81eacad",
    "files": [
      "cmd/octorpki/octorpki.go",
      "sync/lib/rrdp.go"
    ],
    "message": "VULN-8282: Prevent resource exhaustion by enforcing a 100mg limit on downloaded files",
    "before_after_code_files": [
      "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go",
      "sync/lib/rrdp.go||sync/lib/rrdp.go"
    ]
  },
  "patch_diff": {
    "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
      "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "442:     sentry.CaptureException(err)",
      "443:    })",
      "446:     log.Errorf(\"Error when processing %v (for %v): %v. Will add to rsync.\", path, rsync, err)",
      "447:     rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"failover to rsync\", \"message\", err)",
      "448:    } else {",
      "",
      "[Removed Lines]",
      "445:    if s.RRDPFailover {",
      "",
      "[Added Lines]",
      "446:    if s.RRDPFailover && err.Error() != \"http: request body too large\" {",
      "",
      "---------------"
    ],
    "sync/lib/rrdp.go||sync/lib/rrdp.go": [
      "File: sync/lib/rrdp.go -> sync/lib/rrdp.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:  \"encoding/xml\"",
      "7:  \"errors\"",
      "8:  \"fmt\"",
      "10:  \"io/ioutil\"",
      "11:  \"net/http\"",
      "12:  \"strings\"",
      "13: )",
      "15: type RRDPFetcher interface {",
      "16:  GetXML(string) (string, error)",
      "17: }",
      "",
      "[Removed Lines]",
      "9:  \"github.com/getsentry/sentry-go\"",
      "",
      "[Added Lines]",
      "13:  \"github.com/getsentry/sentry-go\"",
      "16: const ResponseLimit int64 = 100000000 // (100mb)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40:   return \"\", NewRRDPErrorFetch(req, errors.New(fmt.Sprintf(\"status is %d\", res.StatusCode)))",
      "41:  }",
      "44:  if err != nil {",
      "45:   return \"\", err",
      "46:  }",
      "",
      "[Removed Lines]",
      "43:  data, err := ioutil.ReadAll(res.Body)",
      "",
      "[Added Lines]",
      "47:  r := http.MaxBytesReader(nil, res.Body, ResponseLimit)",
      "48:  data, err := ioutil.ReadAll(r)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dbc038f83197edc1f3360ab35af193a1557063c6",
      "candidate_info": {
        "commit_hash": "dbc038f83197edc1f3360ab35af193a1557063c6",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/dbc038f83197edc1f3360ab35af193a1557063c6",
        "files": [
          "cmd/octorpki/octorpki.go"
        ],
        "message": "VULN-8283: Removing test lines",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cloudflare/cfrpki/pull/100"
        ],
        "olp_code_files": {
          "patch": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ],
          "candidate": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  AppVersion = \"OctoRPKI \" + version + \" \" + buildinfos",
          "56:  UseManifest = flag.Bool(\"manifest.use\", true, \"Use manifests file to explore instead of going into the repository\")",
          "57:  Basepath    = flag.String(\"cache\", \"cache/\", \"Base directory to store certificates\")",
          "58:  LogLevel    = flag.String(\"loglevel\", \"info\", \"Log level\")",
          "",
          "[Removed Lines]",
          "52:  RootTAL  = flag.String(\"tal.root\", \"tals/afrinic.tal,tals/apnic.tal,tals/arin.tal,tals/lacnic.tal,tals/ripe.tal\", \"List of TAL separated by comma\")",
          "53:  TALNames = flag.String(\"tal.name\", \"AFRINIC,APNIC,ARIN,LACNIC,RIPE\", \"Name of the TALs\")",
          "",
          "[Added Lines]",
          "52:  RootTAL     = flag.String(\"tal.root\", \"tals/afrinic.tal,tals/apnic.tal,tals/arin.tal,tals/lacnic.tal,tals/ripe.tal\", \"List of TAL separated by comma\")",
          "53:  TALNames    = flag.String(\"tal.name\", \"AFRINIC,APNIC,ARIN,LACNIC,RIPE\", \"Name of the TALs\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71ac74e691dc791731f90b72710975414ecec1eb",
      "candidate_info": {
        "commit_hash": "71ac74e691dc791731f90b72710975414ecec1eb",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/71ac74e691dc791731f90b72710975414ecec1eb",
        "files": [
          "cmd/octorpki/octorpki.go"
        ],
        "message": "VULN-8283: Add Timeout to http.Client preventing infinite open connections",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cloudflare/cfrpki/pull/100"
        ],
        "olp_code_files": {
          "patch": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ],
          "candidate": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  AppVersion = \"OctoRPKI \" + version + \" \" + buildinfos",
          "54:  UseManifest = flag.Bool(\"manifest.use\", true, \"Use manifests file to explore instead of going into the repository\")",
          "55:  Basepath    = flag.String(\"cache\", \"cache/\", \"Base directory to store certificates\")",
          "56:  LogLevel    = flag.String(\"loglevel\", \"info\", \"Log level\")",
          "",
          "[Removed Lines]",
          "52:  RootTAL     = flag.String(\"tal.root\", \"tals/afrinic.tal,tals/apnic.tal,tals/arin.tal,tals/lacnic.tal,tals/ripe.tal\", \"List of TAL separated by comma\")",
          "53:  TALNames    = flag.String(\"tal.name\", \"AFRINIC,APNIC,ARIN,LACNIC,RIPE\", \"Name of the TALs\")",
          "",
          "[Added Lines]",
          "52:  RootTAL  = flag.String(\"tal.root\", \"tals/afrinic.tal,tals/apnic.tal,tals/arin.tal,tals/lacnic.tal,tals/ripe.tal\", \"List of TAL separated by comma\")",
          "53:  TALNames = flag.String(\"tal.name\", \"AFRINIC,APNIC,ARIN,LACNIC,RIPE\", \"Name of the TALs\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1236:    log.StandardLogger()),",
          "1237:   HTTPFetcher: &syncpki.HTTPFetcher{",
          "1238:    UserAgent: *UserAgent,",
          "1240:   },",
          "1241:   ROAList: &prefixfile.ROAList{",
          "1242:    Data: make([]prefixfile.ROAJson, 0),",
          "",
          "[Removed Lines]",
          "1239:    Client:    &http.Client{},",
          "",
          "[Added Lines]",
          "1241:    Client: &http.Client{",
          "1243:     Timeout: time.Second * 60,",
          "1244:    },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e6193cb104f4b10d21ef777fe0c8f99c1d08c61",
      "candidate_info": {
        "commit_hash": "3e6193cb104f4b10d21ef777fe0c8f99c1d08c61",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/3e6193cb104f4b10d21ef777fe0c8f99c1d08c61",
        "files": [
          "sync/lib/rrdp.go"
        ],
        "message": "VULN-8282: Adjust threshold a smidge for max file size",
        "before_after_code_files": [
          "sync/lib/rrdp.go||sync/lib/rrdp.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sync/lib/rrdp.go||sync/lib/rrdp.go"
          ],
          "candidate": [
            "sync/lib/rrdp.go||sync/lib/rrdp.go"
          ]
        }
      },
      "candidate_diff": {
        "sync/lib/rrdp.go||sync/lib/rrdp.go": [
          "File: sync/lib/rrdp.go -> sync/lib/rrdp.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  \"github.com/getsentry/sentry-go\"",
          "14: )",
          "18: type RRDPFetcher interface {",
          "19:  GetXML(string) (string, error)",
          "",
          "[Removed Lines]",
          "16: const ResponseLimit int64 = 100000000 // (100mb)",
          "",
          "[Added Lines]",
          "16: const ResponseLimit int64 = 1000000000 // (5Gb)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ebd910709b3ecd287532ae3fe9deccff438e207",
      "candidate_info": {
        "commit_hash": "4ebd910709b3ecd287532ae3fe9deccff438e207",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/4ebd910709b3ecd287532ae3fe9deccff438e207",
        "files": [
          "cmd/octorpki/octorpki.go"
        ],
        "message": "Cleanup (#113)\n\nCo-authored-by: Oliver Geiselhardt-Herms <ogeiselhardt-herms@cloudflare.com>",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ],
          "candidate": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  StrictCms       = flag.Bool(\"strict.cms\", false, \"Decode CMS with strict settings\")",
          "67:  RsyncBin     = flag.String(\"rsync.bin\", DefaultBin(), \"The rsync binary to use\")",
          "",
          "[Removed Lines]",
          "66:  RsyncTimeout = flag.String(\"rsync.timeout\", \"20m\", \"Rsync command timeout\")",
          "",
          "[Added Lines]",
          "66:  RsyncTimeout = flag.Duration(\"rsync.timeout\", time.Minute*20, \"Rsync command timeout\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:  CorsCreds   = flag.Bool(\"cors.creds\", false, \"Cors enable credentials\")",
          "95:  Pprof     = flag.Bool(\"pprof\", false, \"Enable pprof endpoint\")",
          "",
          "[Removed Lines]",
          "89:  Output   = flag.String(\"output.roa\", \"output.json\", \"Output ROA file or URL\")",
          "90:  Sign     = flag.Bool(\"output.sign\", true, \"Sign output (GoRTR compatible)\")",
          "91:  SignKey  = flag.String(\"output.sign.key\", \"private.pem\", \"ECDSA signing key\")",
          "92:  Validity = flag.String(\"output.sign.validity\", \"1h\", \"Validity\")",
          "",
          "[Added Lines]",
          "89:  Output           = flag.String(\"output.roa\", \"output.json\", \"Output ROA file or URL\")",
          "90:  Sign             = flag.Bool(\"output.sign\", true, \"Sign output (GoRTR compatible)\")",
          "91:  SignKey          = flag.String(\"output.sign.key\", \"private.pem\", \"ECDSA signing key\")",
          "92:  ValidityDuration = flag.Duration(\"output.sign.validity\", time.Hour, \"Validity\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:  LastError string `json:\"last-error,omitempty\"`",
          "219: }",
          "230:  Mode string",
          "233:  LastComputed time.Time",
          "234:  WaitStable   bool",
          "235:  Sign         bool",
          "236:  Key          *ecdsa.PrivateKey",
          "240:  HasPreviousStable bool",
          "241:  Fetcher           *syncpki.LocalFetch",
          "242:  HTTPFetcher       *syncpki.HTTPFetcher",
          "",
          "[Removed Lines]",
          "221: type state struct {",
          "222:  Basepath     string",
          "223:  Tals         []*pki.PKIFile",
          "224:  TalsFetch    map[string]*librpki.RPKITAL",
          "225:  TalNames     []string",
          "226:  UseManifest  bool",
          "227:  RsyncBin     string",
          "228:  RsyncTimeout time.Duration",
          "232:  Validity     time.Duration",
          "237:  EnableCache  bool",
          "239:  Stable            bool // Indicates something has been added to the fetch list (rsync of rrdp)",
          "",
          "[Added Lines]",
          "221: type OctoRPKI struct {",
          "222:  Basepath    string",
          "223:  Tals        []*pki.PKIFile",
          "224:  TalsFetch   map[string]*librpki.RPKITAL",
          "225:  TalNames    []string",
          "226:  UseManifest bool",
          "235:  Stable            bool // Indicates something has been added to the fetch list (rsync or rrdp)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "266:  InfoAuthorities     [][]SIA",
          "267:  InfoAuthoritiesLock *sync.RWMutex",
          "271:  StrictHash      bool",
          "272:  StrictManifests bool",
          "273:  StrictCms       bool",
          "274: }",
          "277:  var hasChanged bool",
          "278:  for rsync, ts := range s.CurrentRepos {",
          "279:   if _, ok := s.PrevRepos[rsync]; !ok {",
          "",
          "[Removed Lines]",
          "269:  Pprof bool",
          "276: func (s *state) MainReduce() bool {",
          "",
          "[Added Lines]",
          "270: func (s *OctoRPKI) MainReduce() bool {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "288:  s.Fetcher.SetRepositories(s.CurrentRepos)",
          "292:  }",
          "294:  return hasChanged",
          "",
          "[Removed Lines]",
          "290:  if !hasChanged && len(s.PrevRepos) != len(s.CurrentRepos) {",
          "291:   hasChanged = true",
          "",
          "[Added Lines]",
          "284:  if len(s.PrevRepos) != len(s.CurrentRepos) {",
          "285:   return true",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "303:  }",
          "304: }",
          "307:  fPath, err := syncpki.GetDownloadPath(path, true)",
          "308:  if err != nil {",
          "309:   log.Fatal(err)",
          "",
          "[Removed Lines]",
          "306: func (s *state) WriteRsyncFileOnDisk(path string, data []byte, withdraw bool) error {",
          "",
          "[Added Lines]",
          "300: func (s *OctoRPKI) WriteRsyncFileOnDisk(path string, data []byte, withdraw bool) error {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "330:  return nil",
          "331: }",
          "334:  if len(args) > 0 {",
          "335:   rsync, ok := args[0].(string)",
          "336:   if ok && !strings.Contains(path, rsync) {",
          "",
          "[Removed Lines]",
          "333: func (s *state) ReceiveRRDPFileCallback(main string, url string, path string, data []byte, withdraw bool, snapshot bool, serial int64, args ...interface{}) error {",
          "",
          "[Added Lines]",
          "327: func (s *OctoRPKI) ReceiveRRDPFileCallback(main string, url string, path string, data []byte, withdraw bool, snapshot bool, serial int64, args ...interface{}) error {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "356:  return nil",
          "357: }",
          "360:  f, err := os.Open(file)",
          "361:  if err != nil {",
          "362:   return err",
          "",
          "[Removed Lines]",
          "359: func (s *state) LoadRRDP(file string) error {",
          "",
          "[Added Lines]",
          "353: func (s *OctoRPKI) LoadRRDP(file string) error {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "373:  return nil",
          "374: }",
          "377:  f, err := os.Create(file)",
          "378:  if err != nil {",
          "379:   return err",
          "",
          "[Removed Lines]",
          "376: func (s *state) SaveRRDP(file string) error {",
          "",
          "[Added Lines]",
          "370: func (s *OctoRPKI) SaveRRDP(file string) error {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "384:  return dec.Encode(s.RRDPInfo)",
          "385: }",
          "388:  tracer := opentracing.GlobalTracer()",
          "389:  span := tracer.StartSpan(",
          "390:   \"rrdp\",",
          "",
          "[Removed Lines]",
          "387: func (s *state) MainRRDP(pSpan opentracing.Span) {",
          "",
          "[Added Lines]",
          "381: func (s *OctoRPKI) MainRRDP(pSpan opentracing.Span) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "392:  )",
          "393:  defer span.Finish()",
          "396:   rSpan := tracer.StartSpan(",
          "397:    \"sync\",",
          "398:    opentracing.ChildOf(span.Context()),",
          "399:   )",
          "401:   rSpan.SetTag(\"rsync\", rsync)",
          "402:   rSpan.SetTag(\"type\", \"rrdp\")",
          "405:   rrdpid := rsync",
          "408:   info := s.RRDPInfo[rrdpid]",
          "410:   MetricSIACounts.With(",
          "411:    prometheus.Labels{",
          "413:     \"type\":    \"rrdp\",",
          "414:    }).Set(0)",
          "418:   tmpStats.Iteration++",
          "419:   tmpStats.Count = 0",
          "421:   t1 := time.Now().UTC()",
          "423:   rrdp := &syncpki.RRDPSystem{",
          "",
          "[Removed Lines]",
          "395:  for vv, rsync := range s.RRDPFetch {",
          "400:   rSpan.SetTag(\"rrdp\", vv)",
          "403:   log.Infof(\"RRDP sync %v\", vv)",
          "407:   path := vv",
          "412:     \"address\": vv,",
          "416:   tmpStats := s.RRDPStats[vv]",
          "417:   tmpStats.URI = vv",
          "420:   s.RRDPStats[vv] = tmpStats",
          "",
          "[Added Lines]",
          "389:  for path, rsync := range s.RRDPFetch {",
          "394:   rSpan.SetTag(\"rrdp\", path)",
          "397:   log.Infof(\"RRDP sync %v\", path)",
          "405:     \"address\": path,",
          "409:   tmpStats := s.RRDPStats[path]",
          "410:   tmpStats.URI = path",
          "413:   s.RRDPStats[path] = tmpStats",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "432:    Log: log.StandardLogger(),",
          "433:   }",
          "435:   t2 := time.Now().UTC()",
          "436:   if err != nil {",
          "437:    rSpan.SetTag(\"error\", true)",
          "439:    sentry.WithScope(func(scope *sentry.Scope) {",
          "440:     if errC, ok := err.(interface{ SetURL(string, string) }); ok {",
          "442:     }",
          "443:     if errC, ok := err.(interface{ SetSentryScope(*sentry.Scope) }); ok {",
          "444:      errC.SetSentryScope(scope)",
          "445:     }",
          "446:     rrdp.SetSentryScope(scope)",
          "447:     scope.SetTag(\"Rsync\", rsync)",
          "449:     sentry.CaptureException(err)",
          "450:    })",
          "",
          "[Removed Lines]",
          "434:   err := rrdp.FetchRRDP(s.RRDPFetchDomain[vv])",
          "441:      errC.SetURL(vv, rsync)",
          "448:     scope.SetTag(\"RRDP\", vv)",
          "",
          "[Added Lines]",
          "427:   err := rrdp.FetchRRDP(s.RRDPFetchDomain[path])",
          "434:      errC.SetURL(path, rsync)",
          "441:     scope.SetTag(\"RRDP\", path)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "462:    MetricRRDPErrors.With(",
          "463:     prometheus.Labels{",
          "465:     }).Inc()",
          "468:    tmpStats.Errors++",
          "469:    tmpStats.LastFetchError = int(time.Now().UTC().UnixNano() / 1000000000)",
          "470:    tmpStats.LastError = fmt.Sprint(err)",
          "471:    tmpStats.Duration = t2.Sub(t1).Seconds()",
          "473:    rSpan.Finish()",
          "474:    continue",
          "475:   } else {",
          "477:    delete(s.RsyncFetch, rsync)",
          "478:   }",
          "",
          "[Removed Lines]",
          "464:      \"address\": vv,",
          "467:    tmpStats = s.RRDPStats[vv]",
          "472:    s.RRDPStats[vv] = tmpStats",
          "476:    log.Debugf(\"Success fetching %s, removing rsync %s\", vv, rsync)",
          "",
          "[Added Lines]",
          "457:      \"address\": path,",
          "460:    tmpStats = s.RRDPStats[path]",
          "465:    s.RRDPStats[path] = tmpStats",
          "469:    log.Debugf(\"Success fetching %s, removing rsync %s\", path, rsync)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "481:   sentry.WithScope(func(scope *sentry.Scope) {",
          "482:    scope.SetLevel(sentry.LevelInfo)",
          "483:    scope.SetTag(\"Rsync\", rsync)",
          "485:    rrdp.SetSentryScope(scope)",
          "486:    sentry.CaptureMessage(\"fetched rrdp successfully\")",
          "487:   })",
          "",
          "[Removed Lines]",
          "484:    scope.SetTag(\"RRDP\", vv)",
          "",
          "[Added Lines]",
          "477:    scope.SetTag(\"RRDP\", path)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "489:   rSpan.Finish()",
          "490:   MetricRRDPSerial.With(",
          "491:    prometheus.Labels{",
          "493:    }).Set(float64(rrdp.Serial))",
          "494:   lastFetch := time.Now().UTC().UnixNano() / 1000000000",
          "495:   MetricLastFetch.With(",
          "496:    prometheus.Labels{",
          "498:     \"type\":    \"rrdp\",",
          "499:    }).Set(float64(lastFetch))",
          "501:   tmpStats.LastFetch = int(lastFetch)",
          "502:   tmpStats.RRDPSerial = rrdp.Serial",
          "503:   tmpStats.RRDPSessionID = rrdp.SessionID",
          "504:   tmpStats.Duration = t2.Sub(t1).Seconds()",
          "507:   s.RRDPInfo[rrdpid] = RRDPInfo{",
          "508:    Rsync:     rsync,",
          "",
          "[Removed Lines]",
          "492:     \"address\": vv,",
          "497:     \"address\": vv,",
          "500:   tmpStats = s.RRDPStats[vv]",
          "505:   s.RRDPStats[vv] = tmpStats",
          "",
          "[Added Lines]",
          "485:     \"address\": path,",
          "490:     \"address\": path,",
          "493:   tmpStats = s.RRDPStats[path]",
          "498:   s.RRDPStats[path] = tmpStats",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "513:  }",
          "514: }",
          "517:  tracer := opentracing.GlobalTracer()",
          "518:  span := tracer.StartSpan(",
          "519:   \"rsync\",",
          "",
          "[Removed Lines]",
          "516: func (s *state) MainRsync(pSpan opentracing.Span) {",
          "",
          "[Added Lines]",
          "509: func (s *OctoRPKI) MainRsync(pSpan opentracing.Span) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "525:   Log: log.StandardLogger(),",
          "526:  }",
          "529:   rSpan := tracer.StartSpan(",
          "530:    \"sync\",",
          "531:    opentracing.ChildOf(span.Context()),",
          "532:   )",
          "534:   rSpan.SetTag(\"type\", \"rsync\")",
          "538:   if err != nil {",
          "539:    log.Fatal(err)",
          "540:   }",
          "544:   tmpStats.Iteration++",
          "545:   tmpStats.Count = 0",
          "548:   path := filepath.Join(s.Basepath, downloadPath)",
          "550:   t1 := time.Now().UTC()",
          "552:   t2 := time.Now().UTC()",
          "553:   if err != nil {",
          "554:    rSpan.SetTag(\"error\", true)",
          "",
          "[Removed Lines]",
          "528:  for v, _ := range s.RsyncFetch {",
          "533:   rSpan.SetTag(\"rsync\", v)",
          "536:   log.Infof(\"Rsync sync %v\", v)",
          "537:   downloadPath, err := syncpki.GetDownloadPath(v, true)",
          "542:   tmpStats := s.RsyncStats[v]",
          "543:   tmpStats.URI = v",
          "546:   s.RsyncStats[v] = tmpStats",
          "549:   ctxRsync, cancelRsync := context.WithTimeout(context.Background(), s.RsyncTimeout)",
          "551:   files, err := rsync.RunRsync(ctxRsync, v, s.RsyncBin, path)",
          "",
          "[Added Lines]",
          "521:  for uri, _ := range s.RsyncFetch {",
          "526:   rSpan.SetTag(\"rsync\", uri)",
          "529:   log.Infof(\"Rsync sync %v\", uri)",
          "530:   downloadPath, err := syncpki.GetDownloadPath(uri, true)",
          "535:   tmpStats := s.RsyncStats[uri]",
          "536:   tmpStats.URI = uri",
          "539:   s.RsyncStats[uri] = tmpStats",
          "542:   ctxRsync, cancelRsync := context.WithTimeout(context.Background(), *RsyncTimeout)",
          "544:   files, err := rsync.RunRsync(ctxRsync, uri, *RsyncBin, path)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "556:    log.Errorf(\"Error when processing %v (for %v): %v. Will add to rsync.\", path, rsync, err)",
          "557:    sentry.WithScope(func(scope *sentry.Scope) {",
          "558:     if errC, ok := err.(interface{ SetRsync(string) }); ok {",
          "560:     }",
          "561:     if errC, ok := err.(interface{ SetSentryScope(*sentry.Scope) }); ok {",
          "562:      errC.SetSentryScope(scope)",
          "563:     }",
          "565:     sentry.CaptureException(err)",
          "566:    })",
          "568:    MetricRsyncErrors.With(",
          "569:     prometheus.Labels{",
          "571:     }).Inc()",
          "574:    tmpStats.Errors++",
          "575:    tmpStats.LastFetchError = int(time.Now().UTC().UnixNano() / 1000000000)",
          "576:    tmpStats.LastError = fmt.Sprint(err)",
          "578:   } else {",
          "579:    rSpan.LogKV(\"event\", \"rsync\", \"type\", \"success\", \"message\", \"rsync successfully fetched\")",
          "580:    sentry.WithScope(func(scope *sentry.Scope) {",
          "581:     scope.SetLevel(sentry.LevelInfo)",
          "583:     sentry.CaptureMessage(\"fetched rsync successfully\")",
          "584:    })",
          "585:   }",
          "",
          "[Removed Lines]",
          "559:      errC.SetRsync(v)",
          "564:     scope.SetTag(\"Rsync\", v)",
          "570:      \"address\": v,",
          "573:    tmpStats = s.RsyncStats[v]",
          "577:    s.RsyncStats[v] = tmpStats",
          "582:     scope.SetTag(\"Rsync\", v)",
          "",
          "[Added Lines]",
          "552:      errC.SetRsync(uri)",
          "557:     scope.SetTag(\"Rsync\", uri)",
          "563:      \"address\": uri,",
          "566:    tmpStats = s.RsyncStats[uri]",
          "570:    s.RsyncStats[uri] = tmpStats",
          "575:     scope.SetTag(\"Rsync\", uri)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "594:   MetricSIACounts.With(",
          "595:    prometheus.Labels{",
          "597:     \"type\":    \"rsync\",",
          "598:    }).Set(float64(countFiles))",
          "599:   lastFetch := time.Now().UTC().UnixNano() / 1000000000",
          "600:   MetricLastFetch.With(",
          "601:    prometheus.Labels{",
          "603:     \"type\":    \"rsync\",",
          "604:    }).Set(float64(lastFetch))",
          "606:   tmpStats.LastFetch = int(lastFetch)",
          "607:   tmpStats.Count = countFiles",
          "608:   tmpStats.Duration = t2.Sub(t1).Seconds()",
          "610:  }",
          "611: }",
          "614:  log.Debugf(msg, args...)",
          "615: }",
          "618:  log.Errorf(msg, args...)",
          "619:  s.ValidationMessages = append(s.ValidationMessages, fmt.Sprintf(msg, args...))",
          "620: }",
          "623:  log.Printf(msg, args...)",
          "624:  s.ValidationMessages = append(s.ValidationMessages, fmt.Sprintf(msg, args...))",
          "625: }",
          "628:  log.Warnf(msg, args...)",
          "629:  s.ValidationMessages = append(s.ValidationMessages, fmt.Sprintf(msg, args...))",
          "630: }",
          "",
          "[Removed Lines]",
          "596:     \"address\": v,",
          "602:     \"address\": v,",
          "605:   tmpStats = s.RsyncStats[v]",
          "609:   s.RsyncStats[v] = tmpStats",
          "613: func (s *state) Debugf(msg string, args ...interface{}) {",
          "617: func (s *state) Errorf(msg string, args ...interface{}) {",
          "622: func (s *state) Printf(msg string, args ...interface{}) {",
          "627: func (s *state) Warnf(msg string, args ...interface{}) {",
          "",
          "[Added Lines]",
          "589:     \"address\": uri,",
          "595:     \"address\": uri,",
          "598:   tmpStats = s.RsyncStats[uri]",
          "602:   s.RsyncStats[uri] = tmpStats",
          "606: func (s *OctoRPKI) Debugf(msg string, args ...interface{}) {",
          "610: func (s *OctoRPKI) Errorf(msg string, args ...interface{}) {",
          "615: func (s *OctoRPKI) Printf(msg string, args ...interface{}) {",
          "620: func (s *OctoRPKI) Warnf(msg string, args ...interface{}) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "648: }",
          "652:  tracer := opentracing.GlobalTracer()",
          "653:  span := tracer.StartSpan(",
          "654:   \"tal\",",
          "",
          "[Removed Lines]",
          "651: func (s *state) MainTAL(pSpan opentracing.Span) {",
          "",
          "[Added Lines]",
          "644: func (s *OctoRPKI) MainTAL(pSpan opentracing.Span) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "796:  defer span.Finish()",
          "797: }",
          "800:  ia := make([][]SIA, len(s.Tals))",
          "801:  for i := 0; i < len(ia); i++ {",
          "802:   ia[i] = make([]SIA, 0)",
          "",
          "[Removed Lines]",
          "799: func (s *state) MainValidation(pSpan opentracing.Span) {",
          "",
          "[Added Lines]",
          "792: func (s *OctoRPKI) MainValidation(pSpan opentracing.Span) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "962:  }",
          "963:  curTime := time.Now().UTC()",
          "964:  s.LastComputed = curTime",
          "966:  roalist.Metadata = prefixfile.MetaData{",
          "967:   Counts:    counts,",
          "970:  }",
          "972:  roalist.Data = FilterDuplicates(roalist.Data)",
          "",
          "[Removed Lines]",
          "965:  validTime := curTime.Add(s.Validity)",
          "968:   Generated: int(curTime.UnixNano()) / 1000000000,",
          "969:   Valid:     int(validTime.UnixNano()) / 1000000000,",
          "",
          "[Added Lines]",
          "958:  validTime := curTime.Add(*ValidityDuration)",
          "961:   Generated: int(curTime.Unix()),",
          "962:   Valid:     int(validTime.Unix()),",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "992:  s.ROAListLock.Unlock()",
          "993: }",
          "996:  if s.Stable || !s.WaitStable || s.HasPreviousStable {",
          "999:   maxAge := int(upTo.Sub(time.Now()).Seconds())",
          "1001:   w.Header().Set(\"Content-Type\", \"application/json\")",
          "1004:    w.Header().Set(\"Cache-Control\", fmt.Sprintf(\"max-age=%v\", maxAge))",
          "1005:   }",
          "",
          "[Removed Lines]",
          "995: func (s *state) ServeROAs(w http.ResponseWriter, r *http.Request) {",
          "998:   upTo := s.LastComputed.Add(s.Validity)",
          "1003:   if maxAge > 0 && s.EnableCache {",
          "",
          "[Added Lines]",
          "988: func (s *OctoRPKI) ServeROAs(w http.ResponseWriter, r *http.Request) {",
          "991:   upTo := s.LastComputed.Add(*ValidityDuration)",
          "996:   if maxAge > 0 && *CacheHeader {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1029:  }",
          "1030: }",
          "1033:  if s.Stable || s.HasPreviousStable {",
          "1034:   w.WriteHeader(http.StatusOK)",
          "1035:   return",
          "",
          "[Removed Lines]",
          "1032: func (s *state) ServeHealth(w http.ResponseWriter, r *http.Request) {",
          "",
          "[Added Lines]",
          "1025: func (s *OctoRPKI) ServeHealth(w http.ResponseWriter, r *http.Request) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1063:  ROACount           int               `json:\"roas-count\"`",
          "1064: }",
          "1067:  w.Header().Set(\"Content-Type\", \"application/json\")",
          "1069:  s.InfoAuthoritiesLock.RLock()",
          "",
          "[Removed Lines]",
          "1066: func (s *state) ServeInfo(w http.ResponseWriter, r *http.Request) {",
          "",
          "[Added Lines]",
          "1059: func (s *OctoRPKI) ServeInfo(w http.ResponseWriter, r *http.Request) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1104:  enc.Encode(ir)",
          "1105: }",
          "1109:  fullPath := path",
          "1110:  if len(path) > 0 && string(path[0]) != \"/\" {",
          "",
          "[Removed Lines]",
          "1107: func (s *state) Serve(addr string, path string, metricsPath string, infoPath string, healthPath string, corsOrigin string, corsCreds bool) {",
          "",
          "[Added Lines]",
          "1100: func (s *OctoRPKI) Serve(addr string, path string, metricsPath string, infoPath string, healthPath string, corsOrigin string, corsCreds bool) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1119:  r.HandleFunc(healthPath, s.ServeHealth)",
          "1120:  r.Handle(metricsPath, promhttp.Handler())",
          "1123:   r.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)",
          "1124:   r.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)",
          "1125:   r.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)",
          "",
          "[Removed Lines]",
          "1122:  if s.Pprof {",
          "",
          "[Added Lines]",
          "1115:  if *Pprof {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1209:    Type: pki.TYPE_TAL,",
          "1210:   })",
          "1211:  }",
          "1215:  err := os.MkdirAll(*Basepath, os.ModePerm)",
          "1216:  if err != nil {",
          "1217:   log.Fatal(err)",
          "1218:  }",
          "1229:   WaitStable: *WaitStable,",
          "1231:   Sign:       *Sign,",
          "1235:   Mode:         *Mode,",
          "1236:   RRDPFailover: *RRDPFailover,",
          "",
          "[Removed Lines]",
          "1212:  timeoutDur, _ := time.ParseDuration(*RsyncTimeout)",
          "1213:  timeValidity, _ := time.ParseDuration(*Validity)",
          "1220:  s := &state{",
          "1221:   Basepath:     *Basepath,",
          "1222:   Tals:         tals,",
          "1223:   TalsFetch:    make(map[string]*librpki.RPKITAL),",
          "1224:   TalNames:     talNames,",
          "1225:   UseManifest:  *UseManifest,",
          "1226:   RsyncTimeout: timeoutDur,",
          "1227:   RsyncBin:     *RsyncBin,",
          "1230:   Validity:   timeValidity,",
          "1233:   EnableCache: *CacheHeader,",
          "",
          "[Added Lines]",
          "1211:  s := &OctoRPKI{",
          "1212:   Basepath:    *Basepath,",
          "1213:   Tals:        tals,",
          "1214:   TalsFetch:   make(map[string]*librpki.RPKITAL),",
          "1215:   TalNames:    talNames,",
          "1216:   UseManifest: *UseManifest,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1268:   InfoAuthorities:     make([][]SIA, 0),",
          "1269:   InfoAuthoritiesLock: &sync.RWMutex{},",
          "1273:   StrictHash:      *StrictHash,",
          "1274:   StrictManifests: *StrictManifests,",
          "1275:   StrictCms:       *StrictCms,",
          "",
          "[Removed Lines]",
          "1271:   Pprof: *Pprof,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d72828d642360e70a774fe8bd6b898e685f36e7b",
      "candidate_info": {
        "commit_hash": "d72828d642360e70a774fe8bd6b898e685f36e7b",
        "repo": "cloudflare/cfrpki",
        "commit_url": "https://github.com/cloudflare/cfrpki/commit/d72828d642360e70a774fe8bd6b898e685f36e7b",
        "files": [
          "cmd/octorpki/octorpki.go",
          "go.mod",
          "go.sum",
          "sync/lib/fetch.go",
          "sync/lib/rsync.go"
        ],
        "message": "Refactoring (#115)\n\nCo-authored-by: Oliver Geiselhardt-Herms <ogeiselhardt-herms@cloudflare.com>",
        "before_after_code_files": [
          "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "sync/lib/fetch.go||sync/lib/fetch.go",
          "sync/lib/rsync.go||sync/lib/rsync.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ],
          "candidate": [
            "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/octorpki/octorpki.go||cmd/octorpki/octorpki.go": [
          "File: cmd/octorpki/octorpki.go -> cmd/octorpki/octorpki.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  \"encoding/hex\"",
          "10:  \"encoding/json\"",
          "11:  \"encoding/pem\"",
          "13:  \"flag\"",
          "14:  \"fmt\"",
          "15:  \"io/ioutil\"",
          "",
          "[Removed Lines]",
          "12:  \"errors\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:  \"runtime\"",
          "21:  \"strings\"",
          "22:  \"sync\"",
          "23:  \"time\"",
          "25:  syncpki \"github.com/cloudflare/cfrpki/sync/lib\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"sync/atomic\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:  UseManifest   = flag.Bool(\"manifest.use\", true, \"Use manifests file to explore instead of going into the repository\")",
          "55:  Basepath      = flag.String(\"cache\", \"cache/\", \"Base directory to store certificates\")",
          "56:  LogLevel      = flag.String(\"loglevel\", \"info\", \"Log level\")",
          "58:  MaxIterations = flag.Int(\"max.iterations\", 32, \"Specify the max number of iterations octorpki will make before failing to generate output.json\")",
          "60:  StrictManifests = flag.Bool(\"strict.manifests\", true, \"Manifests must be complete or invalidate CA\")",
          "",
          "[Removed Lines]",
          "57:  Refresh       = flag.String(\"refresh\", \"20m\", \"Revalidation interval\")",
          "",
          "[Added Lines]",
          "57:  Refresh       = flag.Duration(\"refresh\", time.Minute*20, \"Revalidation interval\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:  CertRepository = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 48, 5}",
          "101:  CertRRDP       = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 48, 13}",
          "103:  MetricSIACounts = prometheus.NewGaugeVec(",
          "104:   prometheus.GaugeOpts{",
          "105:    Name: \"file_count_sia\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: )",
          "104: var (",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "218: }",
          "220: type OctoRPKI struct {",
          "222:  Tals        []*pki.PKIFile",
          "223:  TalsFetch   map[string]*librpki.RPKITAL",
          "224:  TalNames    []string",
          "225:  UseManifest bool",
          "229:  LastComputed time.Time",
          "232:  Key          *ecdsa.PrivateKey",
          "236:  Fetcher           *syncpki.LocalFetch",
          "237:  HTTPFetcher       *syncpki.HTTPFetcher",
          "",
          "[Removed Lines]",
          "221:  Basepath    string",
          "227:  Mode string",
          "230:  WaitStable   bool",
          "231:  Sign         bool",
          "234:  Stable            bool // Indicates something has been added to the fetch list (rsync or rrdp)",
          "235:  HasPreviousStable bool",
          "",
          "[Added Lines]",
          "231:  Stable            atomic.Bool // Indicates something has been added to the fetch list (rsync or rrdp)",
          "232:  HasPreviousStable atomic.Bool",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "243:  RRDPFetch       map[string]string",
          "244:  RRDPFetchDomain map[string]string",
          "249:  ROAList     *prefixfile.ROAList",
          "250:  ROAListLock *sync.RWMutex",
          "",
          "[Removed Lines]",
          "246:  RRDPInfo     map[string]RRDPInfo",
          "247:  RRDPFailover bool",
          "",
          "[Added Lines]",
          "243:  RRDPInfo map[string]RRDPInfo",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "261:  InfoAuthorities     [][]SIA",
          "262:  InfoAuthoritiesLock *sync.RWMutex",
          "267: }",
          "269: func (s *OctoRPKI) MainReduce() bool {",
          "270:  var hasChanged bool",
          "271:  for rsync, ts := range s.CurrentRepos {",
          "272:   if _, ok := s.PrevRepos[rsync]; !ok {",
          "",
          "[Removed Lines]",
          "264:  StrictHash      bool",
          "265:  StrictManifests bool",
          "266:  StrictCms       bool",
          "",
          "[Added Lines]",
          "262:  t1 := time.Now()",
          "263:  defer func() {",
          "264:   t2 := time.Now().UTC()",
          "265:   MetricOperationTime.With(prometheus.Labels{\"type\": \"reduce\"}).Observe(float64(t2.Sub(t1).Seconds()))",
          "266:  }()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "287:  return hasChanged",
          "288: }",
          "296:  }",
          "297: }",
          "299: func (s *OctoRPKI) WriteRsyncFileOnDisk(path string, data []byte) error {",
          "301:  if err != nil {",
          "302:   log.Fatal(err)",
          "303:  }",
          "306:  if err != nil {",
          "307:   log.Fatal(err)",
          "308:  }",
          "311:  if err != nil {",
          "312:   log.Fatal(err)",
          "313:  }",
          "",
          "[Removed Lines]",
          "290: func ExtractRsyncDomain(rsync string) (string, error) {",
          "291:  if len(rsync) > len(\"rsync://\") {",
          "292:   rsyncDomain := strings.Split(rsync[8:], \"/\")",
          "293:   return \"rsync://\" + rsyncDomain[0], nil",
          "294:  } else {",
          "295:   return \"\", errors.New(\"Wrong size\")",
          "300:  fPath, err := syncpki.GetDownloadPath(path, true)",
          "305:  err = os.MkdirAll(filepath.Join(s.Basepath, fPath), os.ModePerm)",
          "310:  fPath, err = syncpki.GetDownloadPath(path, false)",
          "",
          "[Added Lines]",
          "288: func ExtractRsyncDomain(rsyncURL string) (string, error) {",
          "289:  if !strings.HasPrefix(rsyncURL, syncpki.RsyncProtoPrefix) {",
          "290:   return \"\", fmt.Errorf(\"%q it not an rsync URL\", rsyncURL)",
          "293:  return strings.Split(strings.TrimPrefix(rsyncURL, syncpki.RsyncProtoPrefix), \"/\")[0], nil",
          "297:  fPath, err := syncpki.ExtractFoldersPathFromRsyncURL(path)",
          "302:  err = os.MkdirAll(filepath.Join(*Basepath, fPath), os.ModePerm)",
          "307:  fPath, err = syncpki.ExtractFilePathFromRsyncURL(path)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "317:   return fmt.Errorf(\"Path %q contains illegal path element\", fPath)",
          "318:  }",
          "321:  err = ioutil.WriteFile(fp, data, 0600)",
          "322:  if err != nil {",
          "323:   return fmt.Errorf(\"Unable to write file %q: %v\", fp, err)",
          "",
          "[Removed Lines]",
          "320:  fp := filepath.Join(s.Basepath, fPath)",
          "",
          "[Added Lines]",
          "317:  fp := filepath.Join(*Basepath, fPath)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "446:    })",
          "450:     log.Errorf(\"Error when processing %v (for %v): %v. Will add to rsync.\", path, rsync, err)",
          "451:     rSpan.LogKV(\"event\", \"rrdp failure\", \"type\", \"failover to rsync\", \"message\", err)",
          "452:    } else {",
          "",
          "[Removed Lines]",
          "449:    if s.RRDPFailover && err.Error() != \"http: request body too large\" {",
          "",
          "[Added Lines]",
          "446:    if *RRDPFailover && err.Error() != \"http: request body too large\" {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "486:    prometheus.Labels{",
          "487:     \"address\": path,",
          "488:    }).Set(float64(rrdp.Serial))",
          "490:   MetricLastFetch.With(",
          "491:    prometheus.Labels{",
          "492:     \"address\": path,",
          "",
          "[Removed Lines]",
          "489:   lastFetch := time.Now().UTC().UnixNano() / 1000000000",
          "",
          "[Added Lines]",
          "486:   lastFetch := time.Now().Unix()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "508: }",
          "510: func (s *OctoRPKI) MainRsync(pSpan opentracing.Span) {",
          "511:  tracer := opentracing.GlobalTracer()",
          "512:  span := tracer.StartSpan(",
          "513:   \"rsync\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:  t1 := time.Now()",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "528:   rSpan.SetTag(\"type\", \"rsync\")",
          "530:   log.Infof(\"Rsync sync %v\", uri)",
          "532:   if err != nil {",
          "533:    log.Fatal(err)",
          "534:   }",
          "",
          "[Removed Lines]",
          "531:   downloadPath, err := syncpki.GetDownloadPath(uri, true)",
          "",
          "[Added Lines]",
          "529:   downloadPath, err := syncpki.ExtractFoldersPathFromRsyncURL(uri)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "539:   tmpStats.Count = 0",
          "540:   s.RsyncStats[uri] = tmpStats",
          "543:   ctxRsync, cancelRsync := context.WithTimeout(context.Background(), *RsyncTimeout)",
          "544:   t1 := time.Now().UTC()",
          "545:   files, err := rsync.RunRsync(ctxRsync, uri, *RsyncBin, path)",
          "",
          "[Removed Lines]",
          "542:   path := filepath.Join(s.Basepath, downloadPath)",
          "",
          "[Added Lines]",
          "540:   path := filepath.Join(*Basepath, downloadPath)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "567:    tmpStats = s.RsyncStats[uri]",
          "568:    tmpStats.Errors++",
          "570:    tmpStats.LastError = fmt.Sprint(err)",
          "571:    s.RsyncStats[uri] = tmpStats",
          "572:   } else {",
          "",
          "[Removed Lines]",
          "569:    tmpStats.LastFetchError = int(time.Now().UTC().UnixNano() / 1000000000)",
          "",
          "[Added Lines]",
          "567:    tmpStats.LastFetchError = int(time.Now().Unix())",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "590:     \"address\": uri,",
          "591:     \"type\":    \"rsync\",",
          "592:    }).Set(float64(countFiles))",
          "594:   MetricLastFetch.With(",
          "595:    prometheus.Labels{",
          "596:     \"address\": uri,",
          "",
          "[Removed Lines]",
          "593:   lastFetch := time.Now().UTC().UnixNano() / 1000000000",
          "",
          "[Added Lines]",
          "591:   lastFetch := time.Now().Unix()",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "602:   tmpStats.Duration = t2.Sub(t1).Seconds()",
          "603:   s.RsyncStats[uri] = tmpStats",
          "604:  }",
          "605: }",
          "607: func (s *OctoRPKI) Debugf(msg string, args ...interface{}) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604:  t2 := time.Now()",
          "605:  MetricOperationTime.With(prometheus.Labels{\"type\": \"rsync\"}).Observe(float64(t2.Sub(t1).Seconds()))",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "645: func (s *OctoRPKI) MainTAL(pSpan opentracing.Span) {",
          "646:  tracer := opentracing.GlobalTracer()",
          "647:  span := tracer.StartSpan(",
          "648:   \"tal\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "647:  t1 := time.Now()",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "772:   }",
          "776:    rsync := tal.GetRsyncURI()",
          "777:    log.Infof(\"Root certificate for %s will be downloaded using rsync: %s\", path, rsync)",
          "778:    s.RsyncFetch[rsync] = \"\"",
          "",
          "[Removed Lines]",
          "775:   if !success && s.RRDPFailover && tal.HasRsync() {",
          "",
          "[Added Lines]",
          "777:   if !success && *RRDPFailover && tal.HasRsync() {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "787:   tSpan.Finish()",
          "788:  }",
          "791: }",
          "793: func (s *OctoRPKI) MainValidation(pSpan opentracing.Span) {",
          "794:  ia := make([][]SIA, len(s.Tals))",
          "795:  for i := 0; i < len(ia); i++ {",
          "796:   ia[i] = make([]SIA, 0)",
          "",
          "[Removed Lines]",
          "790:  defer span.Finish()",
          "",
          "[Added Lines]",
          "792:  t2 := time.Now()",
          "793:  MetricOperationTime.With(prometheus.Labels{\"type\": \"tal\"}).Observe(float64(t2.Sub(t1).Seconds()))",
          "795:  span.Finish()",
          "799:  t1 := time.Now()",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "813:   tSpan.SetTag(\"tal\", tal.Path)",
          "815:   validator := pki.NewValidator()",
          "818:   sm := pki.NewSimpleManager()",
          "819:   manager[i] = sm",
          "",
          "[Removed Lines]",
          "816:   validator.DecoderConfig.ValidateStrict = s.StrictCms",
          "",
          "[Added Lines]",
          "822:   validator.DecoderConfig.ValidateStrict = *StrictCms",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "821:   manager[i].Validator = validator",
          "822:   manager[i].FileSeeker = s.Fetcher",
          "823:   manager[i].Log = s",
          "827:   go func(sm *pki.SimpleManager, tal *pki.PKIFile) {",
          "828:    for err := range sm.Errors {",
          "",
          "[Removed Lines]",
          "824:   manager[i].StrictHash = s.StrictHash",
          "825:   manager[i].StrictManifests = s.StrictManifests",
          "",
          "[Added Lines]",
          "830:   manager[i].StrictHash = *StrictHash",
          "831:   manager[i].StrictManifests = *StrictManifests",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "964:  }",
          "966:  roalist.Data = FilterDuplicates(roalist.Data)",
          "968:   sSpan := tracer.StartSpan(",
          "969:    \"sign\",",
          "970:    opentracing.ChildOf(span.Context()),",
          "",
          "[Removed Lines]",
          "967:  if s.Sign {",
          "",
          "[Added Lines]",
          "973:  if *Sign {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "984:  s.ROAListLock.Lock()",
          "985:  s.ROAList = roalist",
          "986:  s.ROAListLock.Unlock()",
          "987: }",
          "989: func (s *OctoRPKI) ServeROAs(w http.ResponseWriter, r *http.Request) {",
          "992:   upTo := s.LastComputed.Add(*ValidityDuration)",
          "993:   maxAge := int(upTo.Sub(time.Now()).Seconds())",
          "",
          "[Removed Lines]",
          "990:  if s.Stable || !s.WaitStable || s.HasPreviousStable {",
          "",
          "[Added Lines]",
          "994:  t2 := time.Now().UTC()",
          "995:  s.ValidationDuration = t2.Sub(t1)",
          "996:  MetricOperationTime.With(prometheus.Labels{\"type\": \"validation\"}).Observe(float64(s.ValidationDuration.Seconds()))",
          "997:  MetricLastValidation.Set(float64(s.LastComputed.Unix()))",
          "1001:  if s.Stable.Load() || !*WaitStable || s.HasPreviousStable.Load() {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1024: }",
          "1026: func (s *OctoRPKI) ServeHealth(w http.ResponseWriter, r *http.Request) {",
          "1028:   w.WriteHeader(http.StatusOK)",
          "1029:   return",
          "1030:  }",
          "",
          "[Removed Lines]",
          "1027:  if s.Stable || s.HasPreviousStable {",
          "",
          "[Added Lines]",
          "1038:  if s.Stable.Load() || s.HasPreviousStable.Load() {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1089:   TAs:                ias,",
          "1090:   ROACount:           len(s.ROAList.Data),",
          "1091:   ROAsTALs:           s.ROAsTALsCount,",
          "1094:   ValidationDuration: s.ValidationDuration.Seconds(),",
          "1095:   Iteration:          s.Iteration,",
          "1096:  }",
          "",
          "[Removed Lines]",
          "1092:   Stable:             s.Stable,",
          "1093:   LastValidation:     int(s.LastComputed.UnixNano() / 1000000),",
          "",
          "[Added Lines]",
          "1103:   Stable:             s.Stable.Load(),",
          "1104:   LastValidation:     int(s.LastComputed.Unix()),",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1192:   opentracing.SetGlobalTracer(tracer)",
          "1193:  }",
          "1197:  rootTALs := strings.Split(*RootTAL, \",\")",
          "1198:  talNames := strings.Split(*TALNames, \",\")",
          "1199:  tals := make([]*pki.PKIFile, 0)",
          "",
          "[Removed Lines]",
          "1195:  mainRefresh, _ := time.ParseDuration(*Refresh)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1210:  }",
          "1212:  s := &OctoRPKI{",
          "1214:   Tals:        tals,",
          "1215:   TalsFetch:   make(map[string]*librpki.RPKITAL),",
          "1216:   TalNames:    talNames,",
          "1217:   UseManifest: *UseManifest,",
          "1225:   RRDPInfo: make(map[string]RRDPInfo),",
          "1227:   PrevRepos:    make(map[string]time.Time),",
          "",
          "[Removed Lines]",
          "1213:   Basepath:    *Basepath,",
          "1219:   WaitStable: *WaitStable,",
          "1220:   Sign:       *Sign,",
          "1222:   Mode:         *Mode,",
          "1223:   RRDPFailover: *RRDPFailover,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1255:   InfoAuthorities:     make([][]SIA, 0),",
          "1256:   InfoAuthoritiesLock: &sync.RWMutex{},",
          "1261:  }",
          "1263:  if *Sign {",
          "",
          "[Removed Lines]",
          "1258:   StrictHash:      *StrictHash,",
          "1259:   StrictManifests: *StrictManifests,",
          "1260:   StrictCms:       *StrictCms,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1282:  } else if *Mode != \"oneoff\" {",
          "1283:   log.Fatalf(\"Mode %v is not specified. Choose either server or oneoff\", *Mode)",
          "1284:  }",
          "1287:  var spanActive bool",
          "1288:  var pSpan opentracing.Span",
          "1289:  var iterationsUntilStable int",
          "",
          "[Removed Lines]",
          "1285:  tracer := opentracing.GlobalTracer()",
          "",
          "[Added Lines]",
          "1284:  s.validationLoop()",
          "1285: }",
          "1287: func (s *OctoRPKI) validationLoop() {",
          "1288:  tracer := opentracing.GlobalTracer()",
          "1289:  var err error",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1329:     Observe(float64(t2.Sub(t1).Seconds()))",
          "1330:   }",
          "1335:   s.MainTAL(span)",
          "1336:   s.TalsFetch = make(map[string]*librpki.RPKITAL) // clear decoded TAL for next iteration",
          "1348:   s.MainRsync(span)",
          "1357:   s.ValidationMessages = make([]string, 0)",
          "1361:   s.MainValidation(span)",
          "1386:    if *Output == \"\" {",
          "1389:    } else {",
          "1391:     if err != nil {",
          "1393:     }",
          "1397:    }",
          "1399:   }",
          "1402:   span.Finish()",
          "1405:    log.Info(\"Stable, terminating\")",
          "1406:    break",
          "1407:   }",
          "1411:    MetricState.Set(float64(1))",
          "1413:    pSpan.SetTag(\"iterations\", iterationsUntilStable)",
          "1414:    pSpan.Finish()",
          "1415:    spanActive = false",
          "1424:   }",
          "1426:  }",
          "1427: }",
          "",
          "[Removed Lines]",
          "1332:   t1 := time.Now().UTC()",
          "1338:   t2 := time.Now().UTC()",
          "1339:   MetricOperationTime.With(",
          "1340:    prometheus.Labels{",
          "1341:     \"type\": \"tal\",",
          "1342:    }).",
          "1343:    Observe(float64(t2.Sub(t1).Seconds()))",
          "1345:   t1 = time.Now().UTC()",
          "1350:   t2 = time.Now().UTC()",
          "1351:   MetricOperationTime.With(",
          "1352:    prometheus.Labels{",
          "1353:     \"type\": \"rsync\",",
          "1354:    }).",
          "1355:    Observe(float64(t2.Sub(t1).Seconds()))",
          "1358:   t1 = time.Now().UTC()",
          "1363:   t2 = time.Now().UTC()",
          "1364:   s.ValidationDuration = t2.Sub(t1)",
          "1365:   MetricOperationTime.With(",
          "1366:    prometheus.Labels{",
          "1367:     \"type\": \"validation\",",
          "1368:    }).",
          "1369:    Observe(float64(s.ValidationDuration.Seconds()))",
          "1370:   MetricLastValidation.Set(float64(s.LastComputed.UnixNano() / 1000000000))",
          "1372:   t1 = time.Now().UTC()",
          "1375:   s.Stable = !s.MainReduce() && s.Iteration > 1",
          "1376:   s.HasPreviousStable = s.Stable",
          "1378:   t2 = time.Now().UTC()",
          "1379:   MetricOperationTime.With(",
          "1380:    prometheus.Labels{",
          "1381:     \"type\": \"reduce\",",
          "1382:    }).",
          "1383:    Observe(float64(t2.Sub(t1).Seconds()))",
          "1385:   if *Mode == \"oneoff\" && (s.Stable || !*WaitStable) {",
          "1387:     enc := json.NewEncoder(os.Stdout)",
          "1388:     enc.Encode(s.ROAList)",
          "1390:     f, err := os.Create(*Output)",
          "1392:      log.Fatal(err)",
          "1394:     enc := json.NewEncoder(f)",
          "1395:     enc.Encode(s.ROAList)",
          "1396:     f.Close()",
          "1401:   span.SetTag(\"stable\", s.Stable)",
          "1404:   if *Mode == \"oneoff\" && s.Stable {",
          "1409:   if s.Stable {",
          "1410:    MetricLastStableValidation.Set(float64(s.LastComputed.UnixNano() / 1000000000))",
          "1417:    log.Infof(\"Stable state. Revalidating in %v\", mainRefresh)",
          "1418:    <-time.After(mainRefresh)",
          "1419:    s.Stable = false",
          "1420:   } else {",
          "1421:    MetricState.Set(float64(0))",
          "1423:    log.Info(\"Still exploring. Revalidating now\")",
          "",
          "[Added Lines]",
          "1346:   changed := s.MainReduce()",
          "1347:   s.Stable.Store(!changed && s.Iteration > 1)",
          "1348:   s.HasPreviousStable.Store(s.Stable.Load())",
          "1350:   if *Mode == \"oneoff\" && (s.Stable.Load() || !*WaitStable) {",
          "1351:    fc, err := json.Marshal(s.ROAList)",
          "1352:    if err != nil {",
          "1353:     log.Errorf(\"unable to marshal ROA list: %v\", err)",
          "1354:     continue",
          "1355:    }",
          "1358:     fmt.Println(string(fc))",
          "1360:     err := ioutil.WriteFile(*Output, fc, 0600)",
          "1362:      log.Errorf(\"Unable to write ROA list to %q: %v\", *Output, err)",
          "1363:      continue",
          "1368:   span.SetTag(\"stable\", s.Stable.Load())",
          "1371:   if *Mode == \"oneoff\" && s.Stable.Load() {",
          "1376:   if s.Stable.Load() {",
          "1377:    MetricLastStableValidation.Set(float64(s.LastComputed.Unix()))",
          "1384:    log.Infof(\"Stable state. Revalidating in %v\", *Refresh)",
          "1385:    <-time.After(*Refresh)",
          "1386:    s.Stable.Store(false)",
          "1387:    continue",
          "1390:   MetricState.Set(float64(0))",
          "1391:   log.Info(\"Still exploring. Revalidating now\")",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: module github.com/cloudflare/cfrpki",
          "5: require (",
          "7:  github.com/cloudflare/gortr v0.14.7",
          "8:  github.com/getsentry/sentry-go v0.11.0",
          "9:  github.com/golang/protobuf v1.5.2",
          "",
          "[Removed Lines]",
          "3: go 1.12",
          "6:  github.com/HdrHistogram/hdrhistogram-go v1.1.2 // indirect",
          "",
          "[Added Lines]",
          "3: go 1.19",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:  github.com/sirupsen/logrus v1.8.1",
          "16:  github.com/stretchr/testify v1.7.0",
          "17:  github.com/uber/jaeger-client-go v2.29.1+incompatible",
          "19:  google.golang.org/grpc v1.41.0",
          "20: )",
          "22: replace github.com/codahale/hdrhistogram => github.com/HdrHistogram/hdrhistogram-go v0.9.0",
          "",
          "[Removed Lines]",
          "18:  github.com/uber/jaeger-lib v2.4.1+incompatible // indirect",
          "",
          "[Added Lines]",
          "20: require (",
          "21:  bitbucket.org/creachadair/shell v0.0.6 // indirect",
          "22:  cloud.google.com/go v0.93.3 // indirect",
          "23:  github.com/HdrHistogram/hdrhistogram-go v1.1.2 // indirect",
          "24:  github.com/beorn7/perks v1.0.1 // indirect",
          "25:  github.com/bgentry/speakeasy v0.1.0 // indirect",
          "26:  github.com/census-instrumentation/opencensus-proto v0.3.0 // indirect",
          "27:  github.com/cespare/xxhash/v2 v2.1.1 // indirect",
          "28:  github.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403 // indirect",
          "29:  github.com/cncf/xds/go v0.0.0-20210805033703-aa0b78936158 // indirect",
          "30:  github.com/coreos/go-semver v0.3.0 // indirect",
          "31:  github.com/coreos/go-systemd/v22 v22.3.2 // indirect",
          "32:  github.com/cpuguy83/go-md2man/v2 v2.0.0 // indirect",
          "33:  github.com/davecgh/go-spew v1.1.1 // indirect",
          "34:  github.com/dustin/go-humanize v1.0.0 // indirect",
          "35:  github.com/envoyproxy/go-control-plane v0.9.10-0.20210907150352-cf90f659a021 // indirect",
          "36:  github.com/envoyproxy/protoc-gen-validate v0.3.0-java // indirect",
          "37:  github.com/form3tech-oss/jwt-go v3.2.3+incompatible // indirect",
          "38:  github.com/fullstorydev/grpcurl v1.8.2 // indirect",
          "39:  github.com/gogo/protobuf v1.3.2 // indirect",
          "40:  github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b // indirect",
          "41:  github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect",
          "42:  github.com/golang/mock v1.6.0 // indirect",
          "43:  github.com/google/btree v1.0.1 // indirect",
          "44:  github.com/google/trillian v1.4.0 // indirect",
          "45:  github.com/gorilla/websocket v1.4.2 // indirect",
          "46:  github.com/grpc-ecosystem/go-grpc-middleware v1.3.0 // indirect",
          "47:  github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0 // indirect",
          "48:  github.com/grpc-ecosystem/grpc-gateway v1.16.0 // indirect",
          "49:  github.com/inconshreveable/mousetrap v1.0.0 // indirect",
          "50:  github.com/jhump/protoreflect v1.9.0 // indirect",
          "51:  github.com/jonboulle/clockwork v0.2.2 // indirect",
          "52:  github.com/json-iterator/go v1.1.11 // indirect",
          "53:  github.com/mattn/go-runewidth v0.0.9 // indirect",
          "54:  github.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect",
          "55:  github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect",
          "56:  github.com/modern-go/reflect2 v1.0.1 // indirect",
          "57:  github.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e // indirect",
          "58:  github.com/olekukonko/tablewriter v0.0.5 // indirect",
          "59:  github.com/pkg/errors v0.9.1 // indirect",
          "60:  github.com/pmezard/go-difflib v1.0.0 // indirect",
          "61:  github.com/prometheus/client_model v0.2.0 // indirect",
          "62:  github.com/prometheus/common v0.26.0 // indirect",
          "63:  github.com/prometheus/procfs v0.6.0 // indirect",
          "64:  github.com/russross/blackfriday/v2 v2.0.1 // indirect",
          "65:  github.com/shurcooL/sanitized_anchor_name v1.0.0 // indirect",
          "66:  github.com/soheilhy/cmux v0.1.5 // indirect",
          "67:  github.com/spf13/cobra v1.1.3 // indirect",
          "68:  github.com/spf13/pflag v1.0.5 // indirect",
          "69:  github.com/tmc/grpc-websocket-proxy v0.0.0-20201229170055-e5319fda7802 // indirect",
          "70:  github.com/uber/jaeger-lib v2.4.1+incompatible // indirect",
          "71:  github.com/urfave/cli v1.22.4 // indirect",
          "72:  github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2 // indirect",
          "73:  go.etcd.io/bbolt v1.3.6 // indirect",
          "74:  go.etcd.io/etcd/api/v3 v3.5.0 // indirect",
          "75:  go.etcd.io/etcd/client/pkg/v3 v3.5.0 // indirect",
          "76:  go.etcd.io/etcd/client/v2 v2.305.0 // indirect",
          "77:  go.etcd.io/etcd/client/v3 v3.5.0 // indirect",
          "78:  go.etcd.io/etcd/etcdctl/v3 v3.5.0 // indirect",
          "79:  go.etcd.io/etcd/etcdutl/v3 v3.5.0 // indirect",
          "80:  go.etcd.io/etcd/pkg/v3 v3.5.0 // indirect",
          "81:  go.etcd.io/etcd/raft/v3 v3.5.0 // indirect",
          "82:  go.etcd.io/etcd/server/v3 v3.5.0 // indirect",
          "83:  go.etcd.io/etcd/tests/v3 v3.5.0 // indirect",
          "84:  go.etcd.io/etcd/v3 v3.5.0 // indirect",
          "85:  go.opentelemetry.io/contrib v0.20.0 // indirect",
          "86:  go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.20.0 // indirect",
          "87:  go.opentelemetry.io/otel v0.20.0 // indirect",
          "88:  go.opentelemetry.io/otel/exporters/otlp v0.20.0 // indirect",
          "89:  go.opentelemetry.io/otel/metric v0.20.0 // indirect",
          "90:  go.opentelemetry.io/otel/sdk v0.20.0 // indirect",
          "91:  go.opentelemetry.io/otel/sdk/export/metric v0.20.0 // indirect",
          "92:  go.opentelemetry.io/otel/sdk/metric v0.20.0 // indirect",
          "93:  go.opentelemetry.io/otel/trace v0.20.0 // indirect",
          "94:  go.opentelemetry.io/proto/otlp v0.7.0 // indirect",
          "95:  go.uber.org/atomic v1.7.0 // indirect",
          "96:  go.uber.org/multierr v1.6.0 // indirect",
          "97:  go.uber.org/zap v1.17.0 // indirect",
          "98:  golang.org/x/crypto v0.0.0-20201002170205-7f63de1d35b0 // indirect",
          "99:  golang.org/x/mod v0.4.2 // indirect",
          "100:  golang.org/x/net v0.0.0-20210503060351-7fd8e65b6420 // indirect",
          "101:  golang.org/x/oauth2 v0.0.0-20210805134026-6f1e6394065a // indirect",
          "102:  golang.org/x/sys v0.0.0-20210806184541-e5e7981a1069 // indirect",
          "103:  golang.org/x/text v0.3.6 // indirect",
          "104:  golang.org/x/time v0.0.0-20210220033141-f8bda1e9f3ba // indirect",
          "105:  golang.org/x/tools v0.1.5 // indirect",
          "106:  golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 // indirect",
          "107:  google.golang.org/appengine v1.6.7 // indirect",
          "108:  google.golang.org/genproto v0.0.0-20210821163610-241b8fcbd6c8 // indirect",
          "109:  google.golang.org/protobuf v1.27.1 // indirect",
          "110:  gopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f // indirect",
          "111:  gopkg.in/cheggaaa/pb.v1 v1.0.28 // indirect",
          "112:  gopkg.in/natefinch/lumberjack.v2 v2.0.0 // indirect",
          "113:  gopkg.in/yaml.v2 v2.4.0 // indirect",
          "114:  gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b // indirect",
          "115:  sigs.k8s.io/yaml v1.2.0 // indirect",
          "116: )",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: github.com/certifi/gocertifi v0.0.0-20191021191039-0944d244cd40/go.mod h1:sGbDF6GwGcLpkNXPUTkMRoywsNa/ol15pxFe6ERfguA=",
          "157: github.com/certifi/gocertifi v0.0.0-20200922220541-2c3bb06c6054 h1:uH66TXeswKn5PW5zdZ39xEwfS9an067BirqA+P4QaLI=",
          "158: github.com/certifi/gocertifi v0.0.0-20200922220541-2c3bb06c6054/go.mod h1:sGbDF6GwGcLpkNXPUTkMRoywsNa/ol15pxFe6ERfguA=",
          "160: github.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=",
          "161: github.com/cespare/xxhash/v2 v2.1.1 h1:6MnRN8NT7+YBpUIWxHtefFZOKTAPgGjpQSxqLNn0+qY=",
          "162: github.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=",
          "",
          "[Removed Lines]",
          "159: github.com/cespare/xxhash v1.1.0 h1:a6HrQnmkObjyL+Gs60czilIUGqrzKutQD6XZog3p+ko=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190: github.com/coreos/go-semver v0.3.0 h1:wkHLiw0WNATZnSG7epLsujiMCgPAc9xhjJ4tgnAxmfM=",
          "191: github.com/coreos/go-semver v0.3.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=",
          "192: github.com/coreos/go-systemd v0.0.0-20180511133405-39ca1b05acc7/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=",
          "194: github.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=",
          "195: github.com/coreos/go-systemd/v22 v22.1.0/go.mod h1:xO0FLkIi5MaZafQlIrOotqXZ90ih+1atmu1JpKERPPk=",
          "196: github.com/coreos/go-systemd/v22 v22.3.2 h1:D9/bQk5vlXQFZ6Kwuu6zaiXJ9oTPe68++AzAJc1DzSI=",
          "197: github.com/coreos/go-systemd/v22 v22.3.2/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=",
          "198: github.com/coreos/pkg v0.0.0-20160727233714-3ac0863d7acf/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=",
          "199: github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=",
          "201: github.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=",
          "202: github.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=",
          "203: github.com/cpuguy83/go-md2man/v2 v2.0.0 h1:EoUDS0afbrsXAZ9YQ9jdu/mZ2sXgT1/2yyNng4PGlyM=",
          "",
          "[Removed Lines]",
          "193: github.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e h1:Wf6HqHfScWJN9/ZjdUKyjop4mf3Qdd+1TvvltAvM3m8=",
          "200: github.com/cpuguy83/go-md2man v1.0.10 h1:BSKMNlYxDvnunlTymqtgONjNnaRV1sTpcovwwjF22jk=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "531: github.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=",
          "532: github.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=",
          "533: github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=",
          "535: github.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=",
          "536: github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=",
          "537: github.com/kr/pty v1.1.8/go.mod h1:O1sed60cT9XZ5uDucP5qwvh+TE3NnUj51EiZO/lmSfw=",
          "",
          "[Removed Lines]",
          "534: github.com/kr/pretty v0.2.1 h1:Fmg33tUaq4/8ym9TJN1x7sLJnHVwhP33CNkpYV/7rwI=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "710: github.com/rs/cors v1.7.0/go.mod h1:gFx+x8UowdsKA9AchylcLynDq+nNFfI8FkUZdN/jGCU=",
          "711: github.com/rs/cors v1.8.0 h1:P2KMzcFwrPoSjkF1WLRPsp3UMLyql8L4v9hQpVeK5so=",
          "712: github.com/rs/cors v1.8.0/go.mod h1:EBwu+T5AvHOcXwvZIkQFjUN6s8Czyqw12GL/Y0tUyRM=",
          "714: github.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=",
          "715: github.com/russross/blackfriday/v2 v2.0.1 h1:lPqVAte+HuHNfhJ/0LC98ESWRz8afy9tM/0RK8m9o+Q=",
          "716: github.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=",
          "",
          "[Removed Lines]",
          "713: github.com/russross/blackfriday v1.5.2 h1:HyvC0ARfnZBqnXwABFeSZHpKvJHJJfPz81GNueLj0oo=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "944: golang.org/x/exp v0.0.0-20200119233911-0405dc783f0a/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=",
          "945: golang.org/x/exp v0.0.0-20200207192155-f17229e696bd/go.mod h1:J/WKrq2StrnmMY6+EHIKF9dgMWnmCNThgcyBT1FY9mM=",
          "946: golang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=",
          "948: golang.org/x/exp v0.0.0-20200331195152-e8c3332aa8e5/go.mod h1:4M0jN8W1tt0AVLNr8HDosyJCDCDuyL9N9+3m7wDWgKw=",
          "949: golang.org/x/image v0.0.0-20180708004352-c73c2afc3b81/go.mod h1:ux5Hcp/YLpHSI86hEcLt0YII63i6oz57MZXIpbrjZUs=",
          "950: golang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=",
          "",
          "[Removed Lines]",
          "947: golang.org/x/exp v0.0.0-20200331195152-e8c3332aa8e5 h1:FR+oGxGfbQu1d+jglI3rCkjAjUnhRSZcUxr+DqlDLNo=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1235: golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=",
          "1236: golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=",
          "1237: gonum.org/v1/gonum v0.0.0-20180816165407-929014505bf4/go.mod h1:Y+Yx5eoAFn32cQvJDxZx5Dpnq+c3wtXuadVZAcxbbBo=",
          "1239: gonum.org/v1/gonum v0.8.2/go.mod h1:oe/vMfY3deqTw+1EZJhuvEW2iwGF1bW9wwu7XCu0+v0=",
          "1241: gonum.org/v1/netlib v0.0.0-20190313105609-8cb42192e0e0/go.mod h1:wa6Ws7BG/ESfp6dHfk7C6KdzKA7wR7u/rKwOGE66zvw=",
          "1242: gonum.org/v1/plot v0.0.0-20190515093506-e2840ee46a6b/go.mod h1:Wt8AAjI+ypCyYX3nZBvf6cAIx93T+c/OS2HFAYskSZc=",
          "1243: google.golang.org/api v0.3.1/go.mod h1:6wY9I6uQWHQ8EM57III9mq/AjF+i8G65rmVagqKMtkk=",
          "",
          "[Removed Lines]",
          "1238: gonum.org/v1/gonum v0.8.2 h1:CCXrcPKiGGotvnN6jfUsKk4rRqm7q09/YbKb5xCEvtM=",
          "1240: gonum.org/v1/netlib v0.0.0-20190313105609-8cb42192e0e0 h1:OE9mWmgKkjJyEmDAAtGMPjXu+YNeGvK9VTSHY6+Qihc=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "sync/lib/fetch.go||sync/lib/fetch.go": [
          "File: sync/lib/fetch.go -> sync/lib/fetch.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: }",
          "52: func FetchFile(path string, conv bool) ([]byte, []byte, error) {",
          "60:  if err != nil {",
          "62:  }",
          "65:  sha256 := tmpSha265[:]",
          "67:  if conv {",
          "69:   if err != nil {",
          "71:   }",
          "72:  }",
          "74: }",
          "76: func ParseMapDirectory(mapdir string) map[string]string {",
          "",
          "[Removed Lines]",
          "54:  f, err := os.Open(path)",
          "55:  if err != nil {",
          "56:   return nil, nil, err",
          "57:  }",
          "58:  defer f.Close()",
          "59:  data, err := ioutil.ReadAll(f)",
          "61:   return data, nil, err",
          "64:  tmpSha265 := sha256.Sum256(data)",
          "68:   data, err = librpki.BER2DER(data)",
          "70:    return data, sha256, err",
          "73:  return data, sha256, err",
          "",
          "[Added Lines]",
          "53:  fc, err := ioutil.ReadFile(path)",
          "55:   return nil, nil, fmt.Errorf(\"Unable to read file %q: %v\", path, err)",
          "58:  tmpSha265 := sha256.Sum256(fc)",
          "62:   fc, err = librpki.BER2DER(fc)",
          "64:    return fc, sha256, err",
          "67:  return fc, sha256, err",
          "",
          "---------------"
        ],
        "sync/lib/rsync.go||sync/lib/rsync.go": [
          "File: sync/lib/rsync.go -> sync/lib/rsync.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:  \"strings\"",
          "12: )",
          "17: )",
          "28:  }",
          "34:  }",
          "42: }",
          "",
          "[Removed Lines]",
          "14: var (",
          "15:  reDeletion = regexp.MustCompile(\"^deleting (.*)\")",
          "16:  reMatch    = regexp.MustCompile(\"(.*\\\\.(cer|mft|crl|roa|gbr))$\")",
          "20: func GetMatch(str string) bool {",
          "21:  return reMatch.MatchString(str)",
          "22: }",
          "24: func GetDownloadPath(sync string, trimFile bool) (string, error) {",
          "26:  if len(sync) <= 8 || sync[0:8] != \"rsync://\" {",
          "27:   return \"\", errors.New(fmt.Sprintf(\"Incorrect rsync address %v\", sync))",
          "30:  splitSync := strings.Split(sync[8:], \"/\")",
          "32:  if sync[len(sync)-1] != '/' && len(splitSync) > 2 && trimFile {",
          "33:   splitSync = splitSync[0 : len(splitSync)-1]",
          "36:  joinFiles := strings.Join(splitSync, \"/\")",
          "38:  if GetMatch(sync) == true {",
          "39:   joinFiles = strings.TrimSuffix(joinFiles, \"/\")",
          "40:  }",
          "41:  return joinFiles, nil",
          "",
          "[Added Lines]",
          "14: const (",
          "15:  RsyncProtoPrefix = \"rsync://\"",
          "18: var (",
          "19:  reDeletion            = regexp.MustCompile(\"^deleting (.*)\")",
          "20:  wantedFileExtensionRE = regexp.MustCompile(\"(.*\\\\.(cer|mft|crl|roa|gbr))$\")",
          "21: )",
          "23: func ExtractFoldersPathFromRsyncURL(url string) (string, error) {",
          "24:  if !isRsyncURL(url) {",
          "25:   return \"\", fmt.Errorf(\"%q is not an rsync URL\", url)",
          "28:  filePath := strings.TrimPrefix(url, RsyncProtoPrefix)",
          "29:  parts := strings.Split(filePath, \"/\")",
          "30:  return strings.Join(parts[0:len(parts)-1], \"/\"), nil",
          "31: }",
          "33: func ExtractFilePathFromRsyncURL(url string) (string, error) {",
          "34:  if !isRsyncURL(url) {",
          "35:   return \"\", fmt.Errorf(\"%q is not an rsync URL\", url)",
          "38:  return strings.TrimPrefix(url, RsyncProtoPrefix), nil",
          "39: }",
          "41: func isRsyncURL(url string) bool {",
          "42:  return strings.HasPrefix(url, RsyncProtoPrefix)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:  for scanner.Scan() {",
          "120:   line := scanner.Text()",
          "123:   if s.Log != nil {",
          "124:    s.Log.Debugf(\"Rsync received from %v: %v (match=%v)\", uri, line, match)",
          "125:   }",
          "",
          "[Removed Lines]",
          "122:   match := GetMatch(line)",
          "",
          "[Added Lines]",
          "123:   match := wantedFileExtensionRE.MatchString(line)",
          "",
          "---------------"
        ]
      }
    }
  ]
}