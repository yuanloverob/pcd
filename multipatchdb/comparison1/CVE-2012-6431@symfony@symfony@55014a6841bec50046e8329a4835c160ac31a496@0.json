{
  "cve_id": "CVE-2012-6431",
  "cve_desc": "Symfony 2.0.x before 2.0.20 does not process URL encoded data consistently within the Routing and Security components, which allows remote attackers to bypass intended URI restrictions via a doubly encoded string.",
  "repo": "symfony/symfony",
  "patch_hash": "55014a6841bec50046e8329a4835c160ac31a496",
  "patch_info": {
    "commit_hash": "55014a6841bec50046e8329a4835c160ac31a496",
    "repo": "symfony/symfony",
    "commit_url": "https://github.com/symfony/symfony/commit/55014a6841bec50046e8329a4835c160ac31a496",
    "files": [
      "CHANGELOG-2.1.md",
      "src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php",
      "src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php",
      "src/Symfony/Component/HttpFoundation/Request.php",
      "src/Symfony/Component/HttpFoundation/RequestMatcher.php",
      "src/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php",
      "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
      "src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php",
      "src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php",
      "src/Symfony/Component/Routing/Matcher/UrlMatcher.php",
      "src/Symfony/Component/Routing/Matcher/UrlMatcherInterface.php",
      "src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php",
      "src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php",
      "src/Symfony/Component/Routing/Tests/Matcher/UrlMatcherTest.php"
    ],
    "message": "[Routing] Request methods always return a raw path, fix the matcher to decode only once\n\nsq",
    "before_after_code_files": [
      "src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php||src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php",
      "src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php||src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php",
      "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
      "src/Symfony/Component/HttpFoundation/RequestMatcher.php||src/Symfony/Component/HttpFoundation/RequestMatcher.php",
      "src/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php",
      "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
      "src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php||src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php",
      "src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php||src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php",
      "src/Symfony/Component/Routing/Matcher/UrlMatcher.php||src/Symfony/Component/Routing/Matcher/UrlMatcher.php",
      "src/Symfony/Component/Routing/Matcher/UrlMatcherInterface.php||src/Symfony/Component/Routing/Matcher/UrlMatcherInterface.php",
      "src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php||src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php",
      "src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php||src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php",
      "src/Symfony/Component/Routing/Tests/Matcher/UrlMatcherTest.php||src/Symfony/Component/Routing/Tests/Matcher/UrlMatcherTest.php"
    ]
  },
  "patch_diff": {
    "src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php||src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php": [
      "File: src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php -> src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "130:                             ->performNoDeepMerging()",
      "131:                             ->children()",
      "132:                                 ->scalarNode('ip')->end()",
      "134:                                 ->scalarNode('service')->end()",
      "135:                             ->end()",
      "136:                         ->end()",
      "",
      "[Removed Lines]",
      "133:                                 ->scalarNode('path')->end()",
      "",
      "[Added Lines]",
      "133:                                 ->scalarNode('path')",
      "134:                                     ->setInfo('use the urldecoded format')",
      "135:                                     ->setExample('^/path to resource/')",
      "136:                                 ->end()",
      "",
      "---------------"
    ],
    "src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php||src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php": [
      "File: src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php -> src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "154:                     ->prototype('array')",
      "155:                         ->children()",
      "156:                             ->scalarNode('requires_channel')->defaultNull()->end()",
      "158:                             ->scalarNode('host')->defaultNull()->end()",
      "159:                             ->scalarNode('ip')->defaultNull()->end()",
      "160:                             ->arrayNode('methods')",
      "",
      "[Removed Lines]",
      "157:                             ->scalarNode('path')->defaultNull()->end()",
      "",
      "[Added Lines]",
      "157:                             ->scalarNode('path')",
      "158:                                 ->defaultNull()",
      "159:                                 ->setInfo('use the urldecoded format')",
      "160:                                 ->setExample('^/path to resource/')",
      "161:                             ->end()",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
      "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1317:         }",
      "1319:         $basename = basename($baseUrl);",
      "1322:             return '';",
      "1323:         }",
      "",
      "[Removed Lines]",
      "1320:         if (empty($basename) || !strpos(urldecode($truncatedRequestUri), $basename)) {",
      "",
      "[Added Lines]",
      "1330:         if (empty($basename) || !strpos(rawurldecode($truncatedRequestUri), $basename)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1385:             return $requestUri;",
      "1386:         }",
      "1389:     }",
      "",
      "[Removed Lines]",
      "1388:         return rawurldecode((string) $pathInfo);",
      "",
      "[Added Lines]",
      "1398:         return (string) $pathInfo;",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpFoundation/RequestMatcher.php||src/Symfony/Component/HttpFoundation/RequestMatcher.php": [
      "File: src/Symfony/Component/HttpFoundation/RequestMatcher.php -> src/Symfony/Component/HttpFoundation/RequestMatcher.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:         if (null !== $this->path) {",
      "128:             $path = str_replace('#', '\\\\#', $this->path);",
      "131:                 return false;",
      "132:             }",
      "133:         }",
      "",
      "[Removed Lines]",
      "130:             if (!preg_match('#'.$path.'#', $request->getPathInfo())) {",
      "",
      "[Added Lines]",
      "130:             if (!preg_match('#'.$path.'#', rawurldecode($request->getPathInfo()))) {",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php": [
      "File: src/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php -> src/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "150:         $this->assertFalse($matcher->matches($request));",
      "151:     }",
      "153:     public function testAttributes()",
      "154:     {",
      "155:         $matcher = new RequestMatcher();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "153:     public function testPathWithEncodedCharacters()",
      "154:     {",
      "155:         $matcher = new RequestMatcher();",
      "156:         $request = Request::create('/admin/fo%20o');",
      "157:         $matcher->matchPath('^/admin/fo o*$');",
      "158:         $this->assertTrue($matcher->matches($request));",
      "159:     }",
      "",
      "---------------"
    ],
    "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php": [
      "File: src/Symfony/Component/HttpFoundation/Tests/RequestTest.php -> src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "315:         $request->initialize(array(), array(), array(), array(), array(), $server);",
      "317:         $this->assertEquals('http://servername/path/info?query=string', $request->getUri(), '->getUri() with rewrite, default port without HOST_HEADER');",
      "318:    }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "321:         $server = array(",
      "322:             'HTTP_HOST'       => 'hostname:8080',",
      "323:             'SERVER_NAME'     => 'servername',",
      "324:             'SERVER_PORT'     => '8080',",
      "325:             'QUERY_STRING'    => 'query=string',",
      "326:             'REQUEST_URI'     => '/ba%20se/index_dev.php/foo%20bar/in+fo?query=string',",
      "327:             'SCRIPT_NAME'     => '/ba se/index_dev.php',",
      "328:             'PATH_TRANSLATED' => 'redirect:/index.php/foo bar/in+fo',",
      "329:             'PHP_SELF'        => '/ba se/index_dev.php/path/info',",
      "330:             'SCRIPT_FILENAME' => '/some/where/ba se/index_dev.php',",
      "331:         );",
      "333:         $request->initialize(array(), array(), array(), array(), array(), $server);",
      "335:         $this->assertEquals(",
      "336:             'http://hostname:8080/ba%20se/index_dev.php/foo%20bar/in+fo?query=string',",
      "337:             $request->getUri()",
      "338:         );",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "984:                 '/home',",
      "985:             ),",
      "986:             array(",
      "988:                 array(",
      "989:                     'SCRIPT_FILENAME' => '/home/John Doe/public_html/foo bar/app.php',",
      "990:                     'SCRIPT_NAME'     => '/foo bar/app.php',",
      "991:                     'PHP_SELF'        => '/foo bar/app.php',",
      "992:                 ),",
      "993:                 '/foo%20bar/app.php',",
      "995:             ),",
      "996:             array(",
      "997:                 '/foo/bar+baz',",
      "",
      "[Removed Lines]",
      "987:                 '/foo%20bar/app.php/home%2Fbaz',",
      "994:                 '/home%2Fbaz',",
      "",
      "[Added Lines]",
      "1008:                 '/foo%20bar/app.php/home%3Dbaz',",
      "1015:                 '/home%3Dbaz',",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php||src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php": [
      "File: src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php -> src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "62:     public function match(\\$pathinfo)",
      "63:     {",
      "64:         \\$allow = array();",
      "67: $code",
      "",
      "[Removed Lines]",
      "65:         \\$pathinfo = urldecode(\\$pathinfo);",
      "",
      "[Added Lines]",
      "65:         \\$pathinfo = rawurldecode(\\$pathinfo);",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php||src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php": [
      "File: src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php -> src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:     protected function matchCollection($pathinfo, RouteCollection $routes)",
      "45:     {",
      "48:         foreach ($routes as $name => $route) {",
      "49:             if ($route instanceof RouteCollection) {",
      "50:                 if (!$ret = $this->matchCollection($pathinfo, $route)) {",
      "",
      "[Removed Lines]",
      "46:         $pathinfo = urldecode($pathinfo);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Routing/Matcher/UrlMatcher.php||src/Symfony/Component/Routing/Matcher/UrlMatcher.php": [
      "File: src/Symfony/Component/Routing/Matcher/UrlMatcher.php -> src/Symfony/Component/Routing/Matcher/UrlMatcher.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:     {",
      "81:         $this->allow = array();",
      "84:             return $ret;",
      "85:         }",
      "",
      "[Removed Lines]",
      "83:         if ($ret = $this->matchCollection(urldecode($pathinfo), $this->routes)) {",
      "",
      "[Added Lines]",
      "90:         if ($ret = $this->matchCollection(rawurldecode($pathinfo), $this->routes)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "177:         $parameters = $defaults;",
      "178:         foreach ($params as $key => $value) {",
      "179:             if (!is_int($key)) {",
      "181:             }",
      "182:         }",
      "",
      "[Removed Lines]",
      "180:                 $parameters[$key] = rawurldecode($value);",
      "",
      "[Added Lines]",
      "187:                 $parameters[$key] = $value;",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Routing/Matcher/UrlMatcherInterface.php||src/Symfony/Component/Routing/Matcher/UrlMatcherInterface.php": [
      "File: src/Symfony/Component/Routing/Matcher/UrlMatcherInterface.php -> src/Symfony/Component/Routing/Matcher/UrlMatcherInterface.php"
    ],
    "src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php||src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php": [
      "File: src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php -> src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher1.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:     public function match($pathinfo)",
      "24:     {",
      "25:         $allow = array();",
      "29:         if (0 === strpos($pathinfo, '/foo') && preg_match('#^/foo/(?P<bar>baz|symfony)$#xs', $pathinfo, $matches)) {",
      "",
      "[Removed Lines]",
      "26:         $pathinfo = urldecode($pathinfo);",
      "",
      "[Added Lines]",
      "26:         $pathinfo = rawurldecode($pathinfo);",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php||src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php": [
      "File: src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php -> src/Symfony/Component/Routing/Tests/Fixtures/dumper/url_matcher2.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "23:     public function match($pathinfo)",
      "24:     {",
      "25:         $allow = array();",
      "29:         if (0 === strpos($pathinfo, '/foo') && preg_match('#^/foo/(?P<bar>baz|symfony)$#xs', $pathinfo, $matches)) {",
      "",
      "[Removed Lines]",
      "26:         $pathinfo = urldecode($pathinfo);",
      "",
      "[Added Lines]",
      "26:         $pathinfo = rawurldecode($pathinfo);",
      "",
      "---------------"
    ],
    "src/Symfony/Component/Routing/Tests/Matcher/UrlMatcherTest.php||src/Symfony/Component/Routing/Tests/Matcher/UrlMatcherTest.php": [
      "File: src/Symfony/Component/Routing/Tests/Matcher/UrlMatcherTest.php -> src/Symfony/Component/Routing/Tests/Matcher/UrlMatcherTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "157:         $collection->add('foo', new Route('/{foo}/bar', array(), array('foo' => '['.preg_quote($chars).']+')));",
      "159:         $matcher = new UrlMatcher($collection, new RequestContext(), array());",
      "162:     }",
      "164:     public function testMatchWithDotMetacharacterInRequirements()",
      "",
      "[Removed Lines]",
      "160:         $this->assertEquals(array('_route' => 'foo', 'foo' => $chars), $matcher->match('/'.urlencode($chars).'/bar'));",
      "161:         $this->assertEquals(array('_route' => 'foo', 'foo' => $chars), $matcher->match('/'.strtr($chars, array('%' => '%25', '+' => '%2B')).'/bar'));",
      "",
      "[Added Lines]",
      "160:         $this->assertEquals(array('_route' => 'foo', 'foo' => $chars), $matcher->match('/'.rawurlencode($chars).'/bar'));",
      "161:         $this->assertEquals(array('_route' => 'foo', 'foo' => $chars), $matcher->match('/'.strtr($chars, array('%' => '%25')).'/bar'));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:         $matcher = new UrlMatcher($coll, new RequestContext());",
      "217:         $matcher->match('/foo');",
      "218:     }",
      "219: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "220:     public function testDecodeOnce()",
      "221:     {",
      "222:         $coll = new RouteCollection();",
      "223:         $coll->add('foo', new Route('/foo/{foo}'));",
      "225:         $matcher = new UrlMatcher($coll, new RequestContext());",
      "226:         $this->assertEquals(array('foo' => 'bar%23', '_route' => 'foo'), $matcher->match('/foo/bar%2523'));",
      "227:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d17ba0e14775f6825b7df4a2d23c21036da06c11",
      "candidate_info": {
        "commit_hash": "d17ba0e14775f6825b7df4a2d23c21036da06c11",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/d17ba0e14775f6825b7df4a2d23c21036da06c11",
        "files": [
          "src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
        ],
        "message": "Fixed base URL detection when request URI contains encoded chars\n\nSigned-off-by: Victor Berchet <victor@suumit.com>",
        "before_after_code_files": [
          "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
          "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/symfony/symfony/pull/3780"
        ],
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
            "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php",
            "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpFoundation/Request.php||src/Symfony/Component/HttpFoundation/Request.php": [
          "File: src/Symfony/Component/HttpFoundation/Request.php -> src/Symfony/Component/HttpFoundation/Request.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1302:         $requestUri = $this->getRequestUri();",
          "1307:         }",
          "1312:         }",
          "1314:         $truncatedRequestUri = $requestUri;",
          "",
          "[Removed Lines]",
          "1304:         if ($baseUrl && 0 === strpos($requestUri, $baseUrl)) {",
          "1306:             return $baseUrl;",
          "1309:         if ($baseUrl && 0 === strpos($requestUri, dirname($baseUrl))) {",
          "1311:             return rtrim(dirname($baseUrl), '/');",
          "",
          "[Added Lines]",
          "1304:         if ($baseUrl && false !== $prefix = $this->getUrlencodedPrefix($requestUri, $baseUrl)) {",
          "1306:             return $prefix;",
          "1309:         if ($baseUrl && false !== $prefix = $this->getUrlencodedPrefix($requestUri, dirname($baseUrl))) {",
          "1311:             return rtrim($prefix, '/');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1317:         }",
          "1319:         $basename = basename($baseUrl);",
          "1322:             return '';",
          "1323:         }",
          "",
          "[Removed Lines]",
          "1320:         if (empty($basename) || !strpos($truncatedRequestUri, $basename)) {",
          "",
          "[Added Lines]",
          "1320:         if (empty($basename) || !strpos(urldecode($truncatedRequestUri), $basename)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1378:             $requestUri = substr($requestUri, 0, $pos);",
          "1379:         }",
          "1383:             return '/';",
          "1384:         } elseif (null === $baseUrl) {",
          "1385:             return $requestUri;",
          "1386:         }",
          "1389:     }",
          "",
          "[Removed Lines]",
          "1381:         if ((null !== $baseUrl) && (false === ($pathInfo = substr(urldecode($requestUri), strlen(urldecode($baseUrl)))))) {",
          "1388:         return (string) $pathInfo;",
          "",
          "[Added Lines]",
          "1381:         if ((null !== $baseUrl) && (false === ($pathInfo = substr($requestUri, strlen($baseUrl))))) {",
          "1388:         return rawurldecode((string) $pathInfo);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1423:         } catch (\\Exception $e) {",
          "1424:         }",
          "1425:     }",
          "1426: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1436:     private function getUrlencodedPrefix($string, $prefix)",
          "1437:     {",
          "1438:         if (0 !== strpos(rawurldecode($string), $prefix)) {",
          "1439:             return false;",
          "1440:         }",
          "1442:         $len = strlen($prefix);",
          "1444:         if (preg_match(\"#^(%[[:xdigit:]]{2}|.){{$len}}#\", $string, $match)) {",
          "1445:             return $match[0];",
          "1446:         }",
          "1448:         return false;",
          "1449:     }",
          "",
          "---------------"
        ],
        "src/Symfony/Component/HttpFoundation/Tests/RequestTest.php||src/Symfony/Component/HttpFoundation/Tests/RequestTest.php": [
          "File: src/Symfony/Component/HttpFoundation/Tests/RequestTest.php -> src/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "752:         $this->assertEquals('/path/info', $request->getPathInfo());",
          "760:         $server = array();",
          "761:         $server['REQUEST_URI'] = '/path%20test/info';",
          "762:         $request->initialize(array(), array(), array(), array(), array(), $server);",
          "766:     }",
          "768:     public function testGetPreferredLanguage()",
          "",
          "[Removed Lines]",
          "754:         $server = array();",
          "755:         $server['REQUEST_URI'] = '/path test/info';",
          "756:         $request->initialize(array(), array(), array(), array(), array(), $server);",
          "758:         $this->assertEquals('/path test/info', $request->getPathInfo());",
          "764:         $this->assertEquals('/path test/info', $request->getPathInfo());",
          "",
          "[Added Lines]",
          "758:         $this->assertEquals('/path%20test/info', $request->getPathInfo());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "946:         Request::trustProxyData();",
          "947:     }",
          "949:     private function stopTrustingProxyData()",
          "950:     {",
          "951:         $class = new \\ReflectionClass('Symfony\\\\Component\\\\HttpFoundation\\\\Request');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "945:     public function testGetBaseUrl($uri, $server, $expectedBaseUrl, $expectedPathInfo)",
          "946:     {",
          "947:         $request = Request::create($uri, 'GET', array(), array(), array(), $server);",
          "949:         $this->assertSame($expectedBaseUrl, $request->getBaseUrl(), 'baseUrl');",
          "950:         $this->assertSame($expectedPathInfo, $request->getPathInfo(), 'pathInfo');",
          "951:     }",
          "953:     public function getBaseUrlData()",
          "954:     {",
          "955:         return array(",
          "956:             array(",
          "957:                 '/foo%20bar',",
          "958:                 array(",
          "959:                     'SCRIPT_FILENAME' => '/home/John Doe/public_html/foo bar/app.php',",
          "960:                     'SCRIPT_NAME'     => '/foo bar/app.php',",
          "961:                     'PHP_SELF'        => '/foo bar/app.php',",
          "962:                 ),",
          "963:                 '/foo%20bar',",
          "964:                 '/',",
          "965:             ),",
          "966:             array(",
          "967:                 '/foo%20bar/home',",
          "968:                 array(",
          "969:                     'SCRIPT_FILENAME' => '/home/John Doe/public_html/foo bar/app.php',",
          "970:                     'SCRIPT_NAME'     => '/foo bar/app.php',",
          "971:                     'PHP_SELF'        => '/foo bar/app.php',",
          "972:                 ),",
          "973:                 '/foo%20bar',",
          "974:                 '/home',",
          "975:             ),",
          "976:             array(",
          "977:                 '/foo%20bar/app.php/home',",
          "978:                 array(",
          "979:                     'SCRIPT_FILENAME' => '/home/John Doe/public_html/foo bar/app.php',",
          "980:                     'SCRIPT_NAME'     => '/foo bar/app.php',",
          "981:                     'PHP_SELF'        => '/foo bar/app.php',",
          "982:                 ),",
          "983:                 '/foo%20bar/app.php',",
          "984:                 '/home',",
          "985:             ),",
          "986:             array(",
          "987:                 '/foo%20bar/app.php/home%2Fbaz',",
          "988:                 array(",
          "989:                     'SCRIPT_FILENAME' => '/home/John Doe/public_html/foo bar/app.php',",
          "990:                     'SCRIPT_NAME'     => '/foo bar/app.php',",
          "991:                     'PHP_SELF'        => '/foo bar/app.php',",
          "992:                 ),",
          "993:                 '/foo%20bar/app.php',",
          "994:                 '/home%2Fbaz',",
          "995:             ),",
          "996:             array(",
          "997:                 '/foo/bar+baz',",
          "998:                 array(",
          "999:                     'SCRIPT_FILENAME' => '/home/John Doe/public_html/foo/app.php',",
          "1000:                     'SCRIPT_NAME'     => '/foo/app.php',",
          "1001:                     'PHP_SELF'        => '/foo/app.php',",
          "1002:                 ),",
          "1003:                 '/foo',",
          "1004:                 '/bar+baz',",
          "1005:             ),",
          "1006:         );",
          "1007:     }",
          "1012:     public function testUrlencodedStringPrefix($string, $prefix, $expect)",
          "1013:     {",
          "1014:         $request = new Request;",
          "1016:         $me = new \\ReflectionMethod($request, 'getUrlencodedPrefix');",
          "1017:         $me->setAccessible(true);",
          "1019:         $this->assertSame($expect, $me->invoke($request, $string, $prefix));",
          "1020:     }",
          "1022:     public function urlencodedStringPrefixData()",
          "1023:     {",
          "1024:         return array(",
          "1025:             array('foo', 'foo', 'foo'),",
          "1026:             array('fo%6f', 'foo', 'fo%6f'),",
          "1027:             array('foo/bar', 'foo', 'foo'),",
          "1028:             array('fo%6f/bar', 'foo', 'fo%6f'),",
          "1029:             array('f%6f%6f/bar', 'foo', 'f%6f%6f'),",
          "1030:             array('%66%6F%6F/bar', 'foo', '%66%6F%6F'),",
          "1031:             array('fo+o/bar', 'fo+o', 'fo+o'),",
          "1032:             array('fo%2Bo/bar', 'fo+o', 'fo%2Bo'),",
          "1033:         );",
          "1034:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "761724ae57d07cee2368bee86a2f1fe22cf188fc",
      "candidate_info": {
        "commit_hash": "761724ae57d07cee2368bee86a2f1fe22cf188fc",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/761724ae57d07cee2368bee86a2f1fe22cf188fc",
        "files": [
          "src/Symfony/Component/Routing/Generator/UrlGenerator.php",
          "src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php",
          "src/Symfony/Component/Routing/Matcher/UrlMatcher.php",
          "tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher1.php",
          "tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher2.php",
          "tests/Symfony/Tests/Component/Routing/Matcher/UrlMatcherTest.php"
        ],
        "message": "[Routing] Adjust urlescaping rules, fixes #752\n\nOnly + and % are now encoded in generated routes, since they are the only characters that, if not encoded, could cause problems/conflicts when decoded. Namely + turns into a space, and % followed by numbers could do funky things.\n\nThe matcher decodes everything which works since nothing will have %NN without being escaped, and + are escaped as well.",
        "before_after_code_files": [
          "src/Symfony/Component/Routing/Generator/UrlGenerator.php||src/Symfony/Component/Routing/Generator/UrlGenerator.php",
          "src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php||src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php",
          "src/Symfony/Component/Routing/Matcher/UrlMatcher.php||src/Symfony/Component/Routing/Matcher/UrlMatcher.php",
          "tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher1.php||tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher1.php",
          "tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher2.php||tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher2.php",
          "tests/Symfony/Tests/Component/Routing/Matcher/UrlMatcherTest.php||tests/Symfony/Tests/Component/Routing/Matcher/UrlMatcherTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php||src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php",
            "src/Symfony/Component/Routing/Matcher/UrlMatcher.php||src/Symfony/Component/Routing/Matcher/UrlMatcher.php"
          ],
          "candidate": [
            "src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php||src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php",
            "src/Symfony/Component/Routing/Matcher/UrlMatcher.php||src/Symfony/Component/Routing/Matcher/UrlMatcher.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/Routing/Generator/UrlGenerator.php||src/Symfony/Component/Routing/Generator/UrlGenerator.php": [
          "File: src/Symfony/Component/Routing/Generator/UrlGenerator.php -> src/Symfony/Component/Routing/Generator/UrlGenerator.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:                     }",
          "127:                     if (!$isEmpty || !$optional) {",
          "130:                     }",
          "132:                     $optional = false;",
          "",
          "[Removed Lines]",
          "129:                         $url = $token[1].str_replace('%2F', '/', rawurlencode($tparams[$token[3]])).$url;",
          "",
          "[Added Lines]",
          "128:                         $url = $token[1].strtr($tparams[$token[3]], array('%'=>'%25', '+'=>'%2B')).$url;",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php||src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php": [
          "File: src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php -> src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     public function match(\\$pathinfo)",
          "62:     {",
          "63:         \\$allow = array();",
          "65: $code",
          "66:         throw 0 < count(\\$allow) ? new MethodNotAllowedException(array_unique(\\$allow)) : new ResourceNotFoundException();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:         \\$pathinfo = urldecode(\\$pathinfo);",
          "",
          "---------------"
        ],
        "src/Symfony/Component/Routing/Matcher/UrlMatcher.php||src/Symfony/Component/Routing/Matcher/UrlMatcher.php": [
          "File: src/Symfony/Component/Routing/Matcher/UrlMatcher.php -> src/Symfony/Component/Routing/Matcher/UrlMatcher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:     protected function matchCollection($pathinfo, RouteCollection $routes)",
          "95:     {",
          "96:         foreach ($routes as $name => $route) {",
          "97:             if ($route instanceof RouteCollection) {",
          "98:                 if (false === strpos($route->getPrefix(), '{') && $route->getPrefix() !== substr($pathinfo, 0, strlen($route->getPrefix()))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:         $pathinfo = urldecode($pathinfo);",
          "",
          "---------------"
        ],
        "tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher1.php||tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher1.php": [
          "File: tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher1.php -> tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher1.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     public function match($pathinfo)",
          "24:     {",
          "25:         $allow = array();",
          "28:         if (0 === strpos($pathinfo, '/foo') && preg_match('#^/foo/(?P<bar>baz|symfony)$#x', $pathinfo, $matches)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:         $pathinfo = urldecode($pathinfo);",
          "",
          "---------------"
        ],
        "tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher2.php||tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher2.php": [
          "File: tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher2.php -> tests/Symfony/Tests/Component/Routing/Fixtures/dumper/url_matcher2.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     public function match($pathinfo)",
          "24:     {",
          "25:         $allow = array();",
          "28:         if (0 === strpos($pathinfo, '/foo') && preg_match('#^/foo/(?P<bar>baz|symfony)$#x', $pathinfo, $matches)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:         $pathinfo = urldecode($pathinfo);",
          "",
          "---------------"
        ],
        "tests/Symfony/Tests/Component/Routing/Matcher/UrlMatcherTest.php||tests/Symfony/Tests/Component/Routing/Matcher/UrlMatcherTest.php": [
          "File: tests/Symfony/Tests/Component/Routing/Matcher/UrlMatcherTest.php -> tests/Symfony/Tests/Component/Routing/Matcher/UrlMatcherTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:         $this->assertEquals(array('_locale' => 'fr', '_route' => 'foo', 'foo' => 'foo'), $matcher->match('/fr/b/foo'));",
          "151:     }",
          "153:     public function testMatchRegression()",
          "154:     {",
          "155:         $coll = new RouteCollection();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:     public function testMatchNonAlpha()",
          "154:     {",
          "155:         $collection = new RouteCollection();",
          "156:         $chars = '!\"$%\u00e9\u00e0 &\\'()*+,./:;<=>@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\\[]^_`abcdefghijklmnopqrstuvwxyz{|}~-';",
          "157:         $collection->add('foo', new Route('/{foo}/bar', array(), array('foo' => '['.preg_quote($chars).']+')));",
          "159:         $matcher = new UrlMatcher($collection, new RequestContext(), array());",
          "160:         $this->assertEquals(array('_route' => 'foo', 'foo' => $chars), $matcher->match('/'.urlencode($chars).'/bar'));",
          "161:         $this->assertEquals(array('_route' => 'foo', 'foo' => $chars), $matcher->match('/'.strtr($chars, array('%' => '%25', '+' => '%2B')).'/bar'));",
          "162:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "997d5498467698a57ff7af8fab2dd5a7737bc60e",
      "candidate_info": {
        "commit_hash": "997d5498467698a57ff7af8fab2dd5a7737bc60e",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/997d5498467698a57ff7af8fab2dd5a7737bc60e",
        "files": [
          "src/Symfony/Component/HttpFoundation/RequestMatcher.php"
        ],
        "message": "[HttpFoundation] Avoid a few unnecessary str_replace() calls",
        "before_after_code_files": [
          "src/Symfony/Component/HttpFoundation/RequestMatcher.php||src/Symfony/Component/HttpFoundation/RequestMatcher.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/HttpFoundation/RequestMatcher.php||src/Symfony/Component/HttpFoundation/RequestMatcher.php"
          ],
          "candidate": [
            "src/Symfony/Component/HttpFoundation/RequestMatcher.php||src/Symfony/Component/HttpFoundation/RequestMatcher.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/HttpFoundation/RequestMatcher.php||src/Symfony/Component/HttpFoundation/RequestMatcher.php": [
          "File: src/Symfony/Component/HttpFoundation/RequestMatcher.php -> src/Symfony/Component/HttpFoundation/RequestMatcher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:         }",
          "138:         foreach ($this->attributes as $key => $pattern) {",
          "140:                 return false;",
          "141:             }",
          "142:         }",
          "150:         }",
          "153:             return false;",
          "154:         }",
          "",
          "[Removed Lines]",
          "139:             if (!preg_match('#'.str_replace('#', '\\\\#', $pattern).'#', $request->attributes->get($key))) {",
          "144:         if (null !== $this->path) {",
          "145:             $path = str_replace('#', '\\\\#', $this->path);",
          "147:             if (!preg_match('#'.$path.'#', rawurldecode($request->getPathInfo()))) {",
          "148:                 return false;",
          "149:             }",
          "152:         if (null !== $this->host && !preg_match('#'.str_replace('#', '\\\\#', $this->host).'#i', $request->getHost())) {",
          "",
          "[Added Lines]",
          "139:             if (!preg_match('{'.$pattern.'}', $request->attributes->get($key))) {",
          "144:         if (null !== $this->path && !preg_match('{'.$this->path.'}', rawurldecode($request->getPathInfo()))) {",
          "145:             return false;",
          "148:         if (null !== $this->host && !preg_match('{'.$this->host.'}i', $request->getHost())) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24b93928bf783290c0df193f1b9948a174b01d1b",
      "candidate_info": {
        "commit_hash": "24b93928bf783290c0df193f1b9948a174b01d1b",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/24b93928bf783290c0df193f1b9948a174b01d1b",
        "files": [
          "src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php",
          "tests/Symfony/Tests/Component/Routing/Matcher/TraceableUrlMatcherTest.php"
        ],
        "message": "[Routing] added a matcher that helps debugging matching problems",
        "before_after_code_files": [
          "src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php||src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php",
          "tests/Symfony/Tests/Component/Routing/Matcher/TraceableUrlMatcherTest.php||tests/Symfony/Tests/Component/Routing/Matcher/TraceableUrlMatcherTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php||src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php"
          ],
          "candidate": [
            "src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php||src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php||src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php": [
          "File: src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php -> src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "12: namespace Symfony\\Component\\Routing\\Matcher;",
          "14: use Symfony\\Component\\Routing\\Exception\\ExceptionInterface;",
          "15: use Symfony\\Component\\Routing\\Route;",
          "16: use Symfony\\Component\\Routing\\RouteCollection;",
          "17: use Symfony\\Component\\Routing\\RequestContext;",
          "18: use Symfony\\Component\\Routing\\Matcher\\UrlMatcher;",
          "25: class TraceableUrlMatcher extends UrlMatcher",
          "26: {",
          "27:     const ROUTE_DOES_NOT_MATCH = 0;",
          "28:     const ROUTE_ALMOST_MATCHES = 1;",
          "29:     const ROUTE_MATCHES        = 2;",
          "31:     protected $traces;",
          "33:     public function getTraces($pathinfo)",
          "34:     {",
          "35:         $this->traces = array();",
          "37:         try {",
          "38:             $this->match($pathinfo);",
          "39:         } catch (ExceptionInterface $e) {",
          "40:         }",
          "42:         return $this->traces;",
          "43:     }",
          "45:     protected function matchCollection($pathinfo, RouteCollection $routes)",
          "46:     {",
          "47:         $pathinfo = urldecode($pathinfo);",
          "49:         foreach ($routes as $name => $route) {",
          "50:             if ($route instanceof RouteCollection) {",
          "51:                 if (!$ret = $this->matchCollection($pathinfo, $route)) {",
          "52:                     continue;",
          "53:                 }",
          "55:                 return true;",
          "56:             }",
          "58:             $compiledRoute = $route->compile();",
          "60:             if (!preg_match($compiledRoute->getRegex(), $pathinfo, $matches)) {",
          "62:                 $r = new Route($route->getPattern(), $route->getDefaults(), array(), $route->getOptions());",
          "63:                 $cr = $r->compile();",
          "64:                 if (!preg_match($cr->getRegex(), $pathinfo)) {",
          "65:                     $this->addTrace(sprintf('Pattern \"%s\" does not match', $route->getPattern()), self::ROUTE_DOES_NOT_MATCH, $name, $route);",
          "67:                     continue;",
          "68:                 }",
          "70:                 foreach ($route->getRequirements() as $n => $regex) {",
          "71:                     $r = new Route($route->getPattern(), $route->getDefaults(), array($n => $regex), $route->getOptions());",
          "72:                     $cr = $r->compile();",
          "74:                     if (in_array($n, $cr->getVariables()) && !preg_match($cr->getRegex(), $pathinfo)) {",
          "75:                         $this->addTrace(sprintf('Requirement for \"%s\" does not match (%s)', $n, $regex), self::ROUTE_ALMOST_MATCHES, $name, $route);",
          "77:                         continue;",
          "78:                     }",
          "79:                 }",
          "81:                 continue;",
          "82:             }",
          "85:             if ($req = $route->getRequirement('_method')) {",
          "87:                 if ('HEAD' === $method = $this->context->getMethod()) {",
          "88:                     $method = 'GET';",
          "89:                 }",
          "91:                 if (!in_array($method, $req = explode('|', strtoupper($req)))) {",
          "92:                     $this->allow = array_merge($this->allow, $req);",
          "94:                     $this->addTrace(sprintf('Method \"%s\" does not match the requirement (\"%s\")', $this->context->getMethod(), implode(', ', $req)), self::ROUTE_ALMOST_MATCHES, $name, $route);",
          "96:                     continue;",
          "97:                 }",
          "98:             }",
          "101:             if ($scheme = $route->getRequirement('_scheme')) {",
          "102:                 if ($this->context->getScheme() !== $scheme) {",
          "103:                     $this->addTrace(sprintf('Scheme \"%s\" does not match the requirement (\"%s\"); the user will be redirected', $this->context->getScheme(), $scheme), self::ROUTE_ALMOST_MATCHES, $name, $route);",
          "105:                     return true;",
          "106:                 }",
          "107:             }",
          "109:             $this->addTrace('Route matches!', self::ROUTE_MATCHES, $name, $route);",
          "111:             return true;",
          "112:         }",
          "113:     }",
          "115:     private function addTrace($log, $level = self::ROUTE_DOES_NOT_MATCH, $name = null, $route = null)",
          "116:     {",
          "117:         $this->traces[] = array(",
          "118:             'log'     => $log,",
          "119:             'name'    => $name,",
          "120:             'level'   => $level,",
          "121:             'pattern' => null !== $route ? $route->getPattern() : null,",
          "122:         );",
          "123:     }",
          "124: }",
          "",
          "---------------"
        ],
        "tests/Symfony/Tests/Component/Routing/Matcher/TraceableUrlMatcherTest.php||tests/Symfony/Tests/Component/Routing/Matcher/TraceableUrlMatcherTest.php": [
          "File: tests/Symfony/Tests/Component/Routing/Matcher/TraceableUrlMatcherTest.php -> tests/Symfony/Tests/Component/Routing/Matcher/TraceableUrlMatcherTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "12: namespace Symfony\\Tests\\Component\\Routing\\Matcher;",
          "14: use Symfony\\Component\\Routing\\Route;",
          "15: use Symfony\\Component\\Routing\\RouteCollection;",
          "16: use Symfony\\Component\\Routing\\RequestContext;",
          "17: use Symfony\\Component\\Routing\\Matcher\\TraceableUrlMatcher;",
          "19: class TraceableUrlMatcherTest extends \\PHPUnit_Framework_TestCase",
          "20: {",
          "21:     public function test()",
          "22:     {",
          "23:         $coll = new RouteCollection();",
          "24:         $coll->add('foo', new Route('/foo', array(), array('_method' => 'POST')));",
          "25:         $coll->add('bar', new Route('/bar/{id}', array(), array('id' => '\\d+')));",
          "26:         $coll->add('bar1', new Route('/bar/{name}', array(), array('id' => '\\w+', '_method' => 'POST')));",
          "28:         $context = new RequestContext();",
          "30:         $matcher = new TraceableUrlMatcher($coll, $context);",
          "31:         $traces = $matcher->getTraces('/babar');",
          "32:         $this->assertEquals(array(0, 0, 0), $this->getLevels($traces));",
          "34:         $traces = $matcher->getTraces('/foo');",
          "35:         $this->assertEquals(array(1, 0, 0), $this->getLevels($traces));",
          "37:         $traces = $matcher->getTraces('/bar/12');",
          "38:         $this->assertEquals(array(0, 2), $this->getLevels($traces));",
          "40:         $traces = $matcher->getTraces('/bar/dd');",
          "41:         $this->assertEquals(array(0, 1, 1), $this->getLevels($traces));",
          "43:         $context->setMethod('POST');",
          "44:         $traces = $matcher->getTraces('/foo');",
          "45:         $this->assertEquals(array(2), $this->getLevels($traces));",
          "47:         $traces = $matcher->getTraces('/bar/dd');",
          "48:         $this->assertEquals(array(0, 1, 2), $this->getLevels($traces));",
          "49:     }",
          "51:     public function getLevels($traces)",
          "52:     {",
          "53:         $levels = array();",
          "54:         foreach ($traces as $trace) {",
          "55:             $levels[] = $trace['level'];",
          "56:         }",
          "58:         return $levels;",
          "59:     }",
          "60: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23bb668e261bc49707ee33f681e0268a89073c90",
      "candidate_info": {
        "commit_hash": "23bb668e261bc49707ee33f681e0268a89073c90",
        "repo": "symfony/symfony",
        "commit_url": "https://github.com/symfony/symfony/commit/23bb668e261bc49707ee33f681e0268a89073c90",
        "files": [
          "src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php",
          "src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php"
        ],
        "message": "[FrameworkBundle][SecurityBundle] updated configuration to new method names",
        "before_after_code_files": [
          "src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php||src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php",
          "src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php||src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php||src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php",
            "src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php||src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php"
          ],
          "candidate": [
            "src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php||src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php",
            "src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php||src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php||src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php": [
          "File: src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php -> src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:         $rootNode",
          "48:             ->children()",
          "50:                 ->scalarNode('trust_proxy_headers')->defaultFalse()->end()",
          "51:                 ->scalarNode('secret')->isRequired()->end()",
          "52:                 ->scalarNode('ide')->defaultNull()->end()",
          "",
          "[Removed Lines]",
          "49:                 ->scalarNode('charset')->setInfo('general configuration')->end()",
          "",
          "[Added Lines]",
          "49:                 ->scalarNode('charset')->info('general configuration')->end()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:         $rootNode",
          "74:             ->children()",
          "75:                 ->arrayNode('form')",
          "77:                     ->canBeUnset()",
          "78:                     ->treatNullLike(array('enabled' => true))",
          "79:                     ->treatTrueLike(array('enabled' => true))",
          "",
          "[Removed Lines]",
          "76:                     ->setInfo('form configuration')",
          "",
          "[Added Lines]",
          "76:                     ->info('form configuration')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:         $rootNode",
          "100:             ->children()",
          "101:                 ->arrayNode('esi')",
          "103:                     ->canBeUnset()",
          "104:                     ->treatNullLike(array('enabled' => true))",
          "105:                     ->treatTrueLike(array('enabled' => true))",
          "",
          "[Removed Lines]",
          "102:                     ->setInfo('esi configuration')",
          "",
          "[Added Lines]",
          "102:                     ->info('esi configuration')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "116:         $rootNode",
          "117:             ->children()",
          "118:                 ->arrayNode('profiler')",
          "120:                     ->canBeUnset()",
          "121:                     ->children()",
          "122:                         ->booleanNode('only_exceptions')->defaultFalse()->end()",
          "",
          "[Removed Lines]",
          "119:                     ->setInfo('profiler configuration')",
          "",
          "[Added Lines]",
          "119:                     ->info('profiler configuration')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:                             ->children()",
          "132:                                 ->scalarNode('ip')->end()",
          "133:                                 ->scalarNode('path')",
          "136:                                 ->end()",
          "137:                                 ->scalarNode('service')->end()",
          "138:                             ->end()",
          "",
          "[Removed Lines]",
          "134:                                     ->setInfo('use the urldecoded format')",
          "135:                                     ->setExample('^/path to resource/')",
          "",
          "[Added Lines]",
          "134:                                     ->info('use the urldecoded format')",
          "135:                                     ->example('^/path to resource/')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "148:         $rootNode",
          "149:             ->children()",
          "150:                 ->arrayNode('router')",
          "152:                     ->canBeUnset()",
          "153:                     ->children()",
          "154:                         ->scalarNode('resource')->isRequired()->end()",
          "",
          "[Removed Lines]",
          "151:                     ->setInfo('router configuration')",
          "",
          "[Added Lines]",
          "151:                     ->info('router configuration')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "166:         $rootNode",
          "167:             ->children()",
          "168:                 ->arrayNode('session')",
          "170:                     ->canBeUnset()",
          "171:                     ->children()",
          "172:                         ->booleanNode('auto_start')->defaultFalse()->end()",
          "",
          "[Removed Lines]",
          "169:                     ->setInfo('session configuration')",
          "",
          "[Added Lines]",
          "169:                     ->info('session configuration')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "182:                         ->scalarNode('gc_probability')->end()",
          "183:                         ->scalarNode('gc_maxlifetime')->end()",
          "184:                         ->scalarNode('save_path')->defaultValue('%kernel.cache_dir%/sessions')->end()",
          "190:                     ->end()",
          "191:                 ->end()",
          "192:             ->end()",
          "",
          "[Removed Lines]",
          "185:                         ->scalarNode('lifetime')->setInfo('DEPRECATED! Please use: cookie_lifetime')->end()",
          "186:                         ->scalarNode('path')->setInfo('DEPRECATED! Please use: cookie_path')->end()",
          "187:                         ->scalarNode('domain')->setInfo('DEPRECATED! Please use: cookie_domain')->end()",
          "188:                         ->booleanNode('secure')->setInfo('DEPRECATED! Please use: cookie_secure')->end()",
          "189:                         ->booleanNode('httponly')->setInfo('DEPRECATED! Please use: cookie_httponly')->end()",
          "",
          "[Added Lines]",
          "185:                         ->scalarNode('lifetime')->info('DEPRECATED! Please use: cookie_lifetime')->end()",
          "186:                         ->scalarNode('path')->info('DEPRECATED! Please use: cookie_path')->end()",
          "187:                         ->scalarNode('domain')->info('DEPRECATED! Please use: cookie_domain')->end()",
          "188:                         ->booleanNode('secure')->info('DEPRECATED! Please use: cookie_secure')->end()",
          "189:                         ->booleanNode('httponly')->info('DEPRECATED! Please use: cookie_httponly')->end()",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "218:         $rootNode",
          "219:             ->children()",
          "220:                 ->arrayNode('templating')",
          "222:                     ->canBeUnset()",
          "223:                     ->children()",
          "224:                         ->scalarNode('assets_version')->defaultValue(null)->end()",
          "",
          "[Removed Lines]",
          "221:                     ->setInfo('templating configuration')",
          "",
          "[Added Lines]",
          "221:                     ->info('templating configuration')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "268:                     ->fixXmlConfig('engine')",
          "269:                     ->children()",
          "270:                         ->arrayNode('engines')",
          "272:                             ->isRequired()",
          "273:                             ->requiresAtLeastOneElement()",
          "274:                             ->beforeNormalization()",
          "",
          "[Removed Lines]",
          "271:                             ->setExample(array('twig'))",
          "",
          "[Added Lines]",
          "271:                             ->example(array('twig'))",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "331:         $rootNode",
          "332:             ->children()",
          "333:                 ->arrayNode('translator')",
          "335:                     ->canBeUnset()",
          "336:                     ->treatNullLike(array('enabled' => true))",
          "337:                     ->treatTrueLike(array('enabled' => true))",
          "",
          "[Removed Lines]",
          "334:                     ->setInfo('translator configuration')",
          "",
          "[Added Lines]",
          "334:                     ->info('translator configuration')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "349:         $rootNode",
          "350:             ->children()",
          "351:                 ->arrayNode('validation')",
          "353:                     ->canBeUnset()",
          "354:                     ->treatNullLike(array('enabled' => true))",
          "355:                     ->treatTrueLike(array('enabled' => true))",
          "",
          "[Removed Lines]",
          "352:                     ->setInfo('validation configuration')",
          "",
          "[Added Lines]",
          "352:                     ->info('validation configuration')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "368:         $rootNode",
          "369:             ->children()",
          "370:                 ->arrayNode('annotations')",
          "372:                     ->addDefaultsIfNotSet()",
          "373:                     ->children()",
          "374:                         ->scalarNode('cache')->defaultValue('file')->end()",
          "",
          "[Removed Lines]",
          "371:                     ->setInfo('annotation configuration')",
          "",
          "[Added Lines]",
          "371:                     ->info('annotation configuration')",
          "",
          "---------------"
        ],
        "src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php||src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php": [
          "File: src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php -> src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:         $rootNode",
          "59:             ->children()",
          "62:                 ->booleanNode('hide_user_not_found')->defaultTrue()->end()",
          "63:                 ->booleanNode('always_authenticate_before_granting')->defaultFalse()->end()",
          "64:                 ->booleanNode('erase_credentials')->defaultTrue()->end()",
          "",
          "[Removed Lines]",
          "60:                 ->scalarNode('access_denied_url')->defaultNull()->setExample('/foo/error403')->end()",
          "61:                 ->scalarNode('session_fixation_strategy')->cannotBeEmpty()->setInfo('strategy can be: none, migrate, invalidate')->defaultValue('migrate')->end()",
          "",
          "[Added Lines]",
          "60:                 ->scalarNode('access_denied_url')->defaultNull()->example('/foo/error403')->end()",
          "61:                 ->scalarNode('session_fixation_strategy')->cannotBeEmpty()->info('strategy can be: none, migrate, invalidate')->defaultValue('migrate')->end()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:                     ->children()",
          "92:                         ->scalarNode('connection')",
          "93:                             ->defaultNull()",
          "95:                         ->end()",
          "96:                         ->arrayNode('cache')",
          "97:                             ->addDefaultsIfNotSet()",
          "",
          "[Removed Lines]",
          "94:                             ->setInfo('any name configured in doctrine.dbal section')",
          "",
          "[Added Lines]",
          "94:                             ->info('any name configured in doctrine.dbal section')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:                             ->scalarNode('requires_channel')->defaultNull()->end()",
          "157:                             ->scalarNode('path')",
          "158:                                 ->defaultNull()",
          "161:                             ->end()",
          "162:                             ->scalarNode('host')->defaultNull()->end()",
          "163:                             ->scalarNode('ip')->defaultNull()->end()",
          "",
          "[Removed Lines]",
          "159:                                 ->setInfo('use the urldecoded format')",
          "160:                                 ->setExample('^/path to resource/')",
          "",
          "[Added Lines]",
          "159:                                 ->info('use the urldecoded format')",
          "160:                                 ->example('^/path to resource/')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:             ->fixXmlConfig('provider')",
          "301:             ->children()",
          "302:                 ->arrayNode('providers')",
          "304:                         'memory' => array(",
          "305:                             'name' => 'memory',",
          "306:                             'users' => array(",
          "",
          "[Removed Lines]",
          "303:                     ->setExample(array(",
          "",
          "[Added Lines]",
          "303:                     ->example(array(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "360:             ->fixXmlConfig('encoder')",
          "361:             ->children()",
          "362:                 ->arrayNode('encoders')",
          "364:                         'Acme\\DemoBundle\\Entity\\User1' => 'sha512',",
          "365:                         'Acme\\DemoBundle\\Entity\\User2' => array(",
          "366:                             'algorithm' => 'sha512',",
          "",
          "[Removed Lines]",
          "363:                     ->setExample(array(",
          "",
          "[Added Lines]",
          "363:                     ->example(array(",
          "",
          "---------------"
        ]
      }
    }
  ]
}