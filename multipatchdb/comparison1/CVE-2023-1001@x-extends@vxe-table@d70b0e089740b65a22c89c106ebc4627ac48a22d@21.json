{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "13dc1caefdf0fa6dc26ad60a8c91ae5b02dcafbf",
      "candidate_info": {
        "commit_hash": "13dc1caefdf0fa6dc26ad60a8c91ae5b02dcafbf",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/13dc1caefdf0fa6dc26ad60a8c91ae5b02dcafbf",
        "files": [
          "package.json",
          "packages/table/src/columnInfo.ts",
          "packages/table/src/methods.ts"
        ],
        "message": "fix",
        "before_after_code_files": [
          "packages/table/src/columnInfo.ts||packages/table/src/columnInfo.ts",
          "packages/table/src/methods.ts||packages/table/src/methods.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/table/src/columnInfo.ts||packages/table/src/columnInfo.ts": [
          "File: packages/table/src/columnInfo.ts -> packages/table/src/columnInfo.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:       if (formatter) {",
          "43:         if (XEUtils.isString(formatter)) {",
          "44:           const gFormatOpts = formats.get(formatter) || XEUtils[formatter]",
          "46:             errLog('vxe.error.notFormats', [formatter])",
          "47:           }",
          "48:         } else if (XEUtils.isArray(formatter)) {",
          "49:           const gFormatOpts = formats.get(formatter[0]) || XEUtils[formatter[0]]",
          "51:             errLog('vxe.error.notFormats', [formatter[0]])",
          "52:           }",
          "53:         }",
          "",
          "[Removed Lines]",
          "45:           if (!gFormatOpts || !XEUtils.isFunction(gFormatOpts.cellFormatMethod)) {",
          "50:           if (!gFormatOpts || !XEUtils.isFunction(gFormatOpts.cellFormatMethod)) {",
          "",
          "[Added Lines]",
          "45:           if (!gFormatOpts || !XEUtils.isFunction(gFormatOpts.tableCellFormatMethod || gFormatOpts.cellFormatMethod)) {",
          "50:           if (!gFormatOpts || !XEUtils.isFunction(gFormatOpts.tableCellFormatMethod || gFormatOpts.cellFormatMethod)) {",
          "",
          "---------------"
        ],
        "packages/table/src/methods.ts||packages/table/src/methods.ts": [
          "File: packages/table/src/methods.ts -> packages/table/src/methods.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1181:       const formatParams = { cellValue, row, rowIndex: this.getRowIndex(row), column, columnIndex: this.getColumnIndex(column) }",
          "1182:       if (XEUtils.isString(formatter)) {",
          "1183:         const gFormatOpts = formats.get(formatter)",
          "1185:       } else if (XEUtils.isArray(formatter)) {",
          "1186:         const gFormatOpts = formats.get(formatter[0])",
          "1188:       } else {",
          "1189:         cellLabel = formatter(formatParams)",
          "1190:       }",
          "",
          "[Removed Lines]",
          "1184:         cellLabel = gFormatOpts && gFormatOpts.cellFormatMethod ? gFormatOpts.cellFormatMethod(formatParams) : ''",
          "1187:         cellLabel = gFormatOpts && gFormatOpts.cellFormatMethod ? gFormatOpts.cellFormatMethod(formatParams, ...formatter.slice(1)) : ''",
          "",
          "[Added Lines]",
          "1184:         const tcFormatMethod = gFormatOpts ? (gFormatOpts.tableCellFormatMethod || gFormatOpts.cellFormatMethod) : null",
          "1185:         cellLabel = tcFormatMethod ? tcFormatMethod(formatParams) : ''",
          "1188:         const tcFormatMethod = gFormatOpts ? (gFormatOpts.tableCellFormatMethod || gFormatOpts.cellFormatMethod) : null",
          "1189:         cellLabel = tcFormatMethod ? tcFormatMethod(formatParams, ...formatter.slice(1)) : ''",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3ec4b31c6bcd68e567bbadfe49021078112b6cac",
      "candidate_info": {
        "commit_hash": "3ec4b31c6bcd68e567bbadfe49021078112b6cac",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/3ec4b31c6bcd68e567bbadfe49021078112b6cac",
        "files": [
          "examples/views/button/Button.vue",
          "package.json",
          "packages/button/src/button.js",
          "packages/custom/src/panel.js",
          "packages/table/src/columnInfo.js",
          "packages/table/src/header.js",
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "packages/v-x-e-table/src/conf.js",
          "packages/v-x-e-table/src/renderer.js",
          "styles/input.scss"
        ],
        "message": "\u540c\u6b65\u81ea\u5b9a\u4e49\u5217\u529f\u80fd",
        "before_after_code_files": [
          "examples/views/button/Button.vue||examples/views/button/Button.vue",
          "packages/button/src/button.js||packages/button/src/button.js",
          "packages/custom/src/panel.js||packages/custom/src/panel.js",
          "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js",
          "packages/table/src/header.js||packages/table/src/header.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js",
          "packages/v-x-e-table/src/renderer.js||packages/v-x-e-table/src/renderer.js",
          "styles/input.scss||styles/input.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/button/Button.vue||examples/views/button/Button.vue": [
          "File: examples/views/button/Button.vue -> examples/views/button/Button.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:       </vxe-button>",
          "147:     </p>",
          "149:     <p>",
          "150:       <vxe-button icon=\"fa fa-plus\">\u4f7f\u7528\u7b2c\u4e09\u65b9\u56fe\u6807</vxe-button>",
          "151:       <vxe-button status=\"primary\" icon=\"fa fa-save\">\u4e3b\u8981\u56fe\u6807\u989c\u8272</vxe-button>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149:   <p>",
          "150:       <vxe-button status=\"danger\" transfer trigger=\"manual\">",
          "151:         <template #default>\u624b\u52a8</template>",
          "152:         <template #dropdowns>",
          "153:           <vxe-button mode=\"text\" content=\"\u4e0b\u62c9\u6309\u94ae1\"></vxe-button>",
          "154:           <vxe-button mode=\"text\" content=\"\u4e0b\u62c9\u6309\u94ae2\" status=\"danger\"></vxe-button>",
          "155:           <vxe-button mode=\"text\" content=\"\u4e0b\u62c9\u6309\u94ae3\"></vxe-button>",
          "156:         </template>",
          "157:       </vxe-button>",
          "158:       <vxe-button status=\"danger\" transfer trigger=\"click\">",
          "159:         <template #default>\u70b9\u51fb</template>",
          "160:         <template #dropdowns>",
          "161:           <vxe-button mode=\"text\" content=\"\u4e0b\u62c9\u6309\u94ae1\"></vxe-button>",
          "162:           <vxe-button mode=\"text\" content=\"\u4e0b\u62c9\u6309\u94ae2\" status=\"danger\"></vxe-button>",
          "163:           <vxe-button mode=\"text\" content=\"\u4e0b\u62c9\u6309\u94ae3\"></vxe-button>",
          "164:         </template>",
          "165:       </vxe-button>",
          "166:     </p>",
          "",
          "---------------"
        ],
        "packages/button/src/button.js||packages/button/src/button.js": [
          "File: packages/button/src/button.js -> packages/button/src/button.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     title: String,",
          "24:     disabled: Boolean,",
          "25:     loading: Boolean,",
          "26:     destroyOnClose: Boolean,",
          "27:     className: [String, Function],",
          "28:     popupClassName: [String, Function],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:     trigger: { type: String, default: () => GlobalConfig.button.trigger },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:   data () {",
          "37:     return {",
          "38:       inited: false,",
          "40:       animatVisible: false,",
          "41:       panelIndex: 0,",
          "42:       panelStyle: null,",
          "43:       panelPlacement: null",
          "",
          "[Removed Lines]",
          "39:       showPanel: false,",
          "",
          "[Added Lines]",
          "40:       visiblePanel: false,",
          "42:       isActivated: false,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:     GlobalEvent.on(this, 'mousewheel', this.handleGlobalMousewheelEvent)",
          "100:   },",
          "101:   beforeDestroy () {",
          "102:     const panelElem = this.$refs.panel",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:     GlobalEvent.on(this, 'mousedown', this.handleGlobalMousedownEvent)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:   },",
          "107:   destroyed () {",
          "108:     GlobalEvent.off(this, 'mousewheel')",
          "109:   },",
          "110:   render (h) {",
          "112:     const downsSlot = $scopedSlots.dropdowns",
          "113:     return downsSlot ? h('div', {",
          "114:       class: ['vxe-button--dropdown', className ? (XEUtils.isFunction(className) ? className({ $button: this }) : className) : '', {",
          "115:         [`size--${vSize}`]: vSize,",
          "117:       }]",
          "118:     }, [",
          "119:       h('button', {",
          "",
          "[Removed Lines]",
          "111:     const { $scopedSlots, className, popupClassName, title, inited, type, destroyOnClose, isFormBtn, btnMode, btnStatus, btnRound, btnCircle, vSize, name, disabled, loading, showPanel, animatVisible, panelPlacement } = this",
          "116:         'is--active': showPanel",
          "",
          "[Added Lines]",
          "112:     GlobalEvent.off(this, 'mousedown')",
          "115:     const { $scopedSlots, className, popupClassName, trigger, title, inited, type, destroyOnClose, isFormBtn, btnMode, btnStatus, btnRound, btnCircle, vSize, name, disabled, loading, visiblePanel, animatVisible, panelPlacement } = this",
          "117:     const btnOns = {}",
          "118:     const panelOns = {}",
          "119:     if (downsSlot && trigger === 'hover') {",
          "121:       btnOns.mouseenter = this.mouseenterTargetEvent",
          "122:       btnOns.mouseleave = this.mouseleaveTargetEvent",
          "124:       panelOns.onMouseenter = this.mouseenterDropdownEvent",
          "125:       panelOns.onMouseleave = this.mouseleaveDropdownEvent",
          "126:     }",
          "130:         'is--active': visiblePanel",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "133:           disabled: disabled || loading",
          "134:         },",
          "135:         on: {",
          "139:         }",
          "140:       }, this.renderContent(h).concat([",
          "141:         h('i', {",
          "",
          "[Removed Lines]",
          "136:           mouseenter: this.mouseenterTargetEvent,",
          "137:           mouseleave: this.mouseleaveTargetEvent,",
          "138:           click: this.clickEvent",
          "",
          "[Added Lines]",
          "150:           click: this.clickTargetEvent,",
          "151:           ...btnOns",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "147:         class: ['vxe-button--dropdown-panel', popupClassName ? (XEUtils.isFunction(popupClassName) ? popupClassName({ $button: this }) : popupClassName) : '', {",
          "148:           [`size--${vSize}`]: vSize,",
          "149:           'animat--leave': animatVisible,",
          "151:         }],",
          "152:         attrs: {",
          "153:           placement: panelPlacement",
          "",
          "[Removed Lines]",
          "150:           'animat--enter': showPanel",
          "",
          "[Added Lines]",
          "163:           'animat--enter': visiblePanel",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "159:           on: {",
          "160:             mousedown: this.mousedownDropdownEvent,",
          "161:             click: this.clickDropdownEvent,",
          "164:           }",
          "166:       ] : null)",
          "167:     ]) : h('button', {",
          "168:       ref: 'xBtn',",
          "",
          "[Removed Lines]",
          "162:             mouseenter: this.mouseenterDropdownEvent,",
          "163:             mouseleave: this.mouseleaveDropdownEvent",
          "165:         }, destroyOnClose && !showPanel ? [] : downsSlot.call(this, {}, h))",
          "",
          "[Added Lines]",
          "175:             ...panelOns",
          "177:         }, destroyOnClose && !visiblePanel ? [] : downsSlot.call(this, {}, h))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "226:       return contents",
          "227:     },",
          "228:     handleGlobalMousewheelEvent (evnt) {",
          "230:         this.closePanel()",
          "231:       }",
          "232:     },",
          "233:     updateZindex () {",
          "234:       if (this.panelIndex < UtilTools.getLastZIndex()) {",
          "235:         this.panelIndex = UtilTools.nextZIndex()",
          "",
          "[Removed Lines]",
          "229:       if (this.showPanel && !DomTools.getEventTargetNode(evnt, this.$refs.panel).flag) {",
          "",
          "[Added Lines]",
          "241:       if (this.visiblePanel && !DomTools.getEventTargetNode(evnt, this.$refs.panel).flag) {",
          "245:     handleGlobalMousedownEvent (evnt) {",
          "246:       const { disabled, visiblePanel } = this",
          "247:       if (!disabled) {",
          "248:         const el = this.$refs.$el",
          "249:         const panelElem = this.$refs.panel",
          "250:         this.isActivated = DomTools.getEventTargetNode(evnt, el).flag || DomTools.getEventTargetNode(evnt, panelElem).flag",
          "251:         if (visiblePanel && !this.isActivated) {",
          "252:           this.closePanel()",
          "253:         }",
          "254:       }",
          "255:     },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "257:         if (panelElem) {",
          "258:           panelElem.dataset.active = 'N'",
          "259:         }",
          "261:         setTimeout(() => {",
          "262:           if (!panelElem || panelElem.dataset.active !== 'Y') {",
          "263:             this.animatVisible = false",
          "",
          "[Removed Lines]",
          "260:         this.showPanel = false",
          "",
          "[Added Lines]",
          "283:         this.visiblePanel = false",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "277:       this.$emit('mouseleave', { $event: evnt })",
          "278:     },",
          "279:     mouseenterTargetEvent (evnt) {",
          "295:       this.$emit('mouseenter', { $event: evnt })",
          "296:     },",
          "297:     mouseenterDropdownEvent () {",
          "",
          "[Removed Lines]",
          "280:       const panelElem = this.$refs.panel",
          "281:       panelElem.dataset.active = 'Y'",
          "282:       if (!this.inited) {",
          "283:         this.inited = true",
          "284:         if (this.transfer) {",
          "285:           document.body.appendChild(panelElem)",
          "286:         }",
          "287:       }",
          "288:       this.showTime = setTimeout(() => {",
          "289:         if (panelElem.dataset.active === 'Y') {",
          "290:           this.mouseenterDropdownEvent()",
          "291:         } else {",
          "292:           this.animatVisible = false",
          "293:         }",
          "294:       }, 250)",
          "",
          "[Added Lines]",
          "303:       this.openPanel()",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "300:       this.animatVisible = true",
          "301:       setTimeout(() => {",
          "302:         if (panelElem.dataset.active === 'Y') {",
          "304:           this.updateZindex()",
          "305:           this.updatePlacement()",
          "306:           setTimeout(() => {",
          "308:               this.updatePlacement()",
          "309:             }",
          "310:           }, 50)",
          "",
          "[Removed Lines]",
          "303:           this.showPanel = true",
          "307:             if (this.showPanel) {",
          "",
          "[Added Lines]",
          "312:           this.visiblePanel = true",
          "316:             if (this.visiblePanel) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "314:     mouseleaveDropdownEvent () {",
          "315:       this.closePanel()",
          "316:     },",
          "317:     closePanel () {",
          "318:       const panelElem = this.$refs.panel",
          "319:       clearTimeout(this.showTime)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:     clickTargetEvent (evnt) {",
          "327:       const { trigger } = this",
          "328:       if (trigger === 'click') {",
          "329:         if (this.visiblePanel) {",
          "330:           this.closePanel()",
          "331:         } else {",
          "332:           this.openPanel()",
          "333:         }",
          "334:       }",
          "335:       this.clickEvent(evnt)",
          "336:     },",
          "337:     openPanel () {",
          "338:       const { trigger } = this",
          "339:       const panelElem = this.$refs.panel",
          "340:       panelElem.dataset.active = 'Y'",
          "341:       if (!this.inited) {",
          "342:         this.inited = true",
          "343:         if (this.transfer) {",
          "344:           document.body.appendChild(panelElem)",
          "345:         }",
          "346:       }",
          "347:       this.showTime = setTimeout(() => {",
          "348:         if (panelElem.dataset.active === 'Y') {",
          "349:           this.mouseenterDropdownEvent()",
          "350:         } else {",
          "351:           this.animatVisible = false",
          "352:         }",
          "353:       }, trigger === 'click' ? 50 : 250)",
          "354:       return this.$nextTick()",
          "355:     },",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "321:         panelElem.dataset.active = 'N'",
          "322:         setTimeout(() => {",
          "323:           if (panelElem.dataset.active !== 'Y') {",
          "325:             setTimeout(() => {",
          "326:               if (panelElem.dataset.active !== 'Y') {",
          "327:                 this.animatVisible = false",
          "",
          "[Removed Lines]",
          "324:             this.showPanel = false",
          "",
          "[Added Lines]",
          "363:             this.visiblePanel = false",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "331:         }, 100)",
          "332:       } else {",
          "333:         this.animatVisible = false",
          "335:       }",
          "336:     },",
          "337:     updatePlacement () {",
          "338:       return this.$nextTick().then(() => {",
          "",
          "[Removed Lines]",
          "334:         this.showPanel = false",
          "",
          "[Added Lines]",
          "373:         this.visiblePanel = false",
          "375:       return this.$nextTick()",
          "",
          "---------------"
        ],
        "packages/custom/src/panel.js||packages/custom/src/panel.js": [
          "File: packages/custom/src/panel.js -> packages/custom/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "589:     getStoreData () {",
          "590:       return {}",
          "591:     },",
          "604:     confirmCustomEvent  (evnt) {",
          "605:       const { $xetable } = this",
          "606:       const { customOpts, customColumnList } = $xetable",
          "",
          "[Removed Lines]",
          "592:     handleSaveStore (type) {",
          "593:       const { $xetable } = this",
          "594:       const { id, customOpts } = $xetable",
          "595:       const { storage, updateStore } = customOpts",
          "596:       if (storage && id && updateStore) {",
          "597:         updateStore({",
          "598:           id,",
          "599:           type,",
          "600:           storeData: $xetable.getCustomStoreData()",
          "601:         })",
          "602:       }",
          "603:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "629:       })",
          "630:       $xetable.closeCustom()",
          "631:       $xetable.emitCustomEvent('confirm', evnt)",
          "633:     },",
          "634:     cancelCustomEvent  (evnt) {",
          "635:       const { $xetable } = this",
          "",
          "[Removed Lines]",
          "632:       this.handleSaveStore('confirm')",
          "",
          "[Added Lines]",
          "620:       $xetable.saveCustomStore('confirm')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "663:       $xetable.resetColumn(true)",
          "664:       $xetable.closeCustom()",
          "665:       $xetable.emitCustomEvent('reset', evnt)",
          "667:     },",
          "668:     resetCustomEvent  (evnt) {",
          "669:       if (VXETable.modal) {",
          "",
          "[Removed Lines]",
          "666:       this.handleSaveStore('reset')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "719:       this.handleOptionCheck(column)",
          "720:       if (customOpts.immediate) {",
          "721:         $xetable.handleCustom()",
          "722:       }",
          "723:       $xetable.checkCustomStatus()",
          "724:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "709:         $xetable.saveCustomStore('update:visible')",
          "",
          "---------------"
        ],
        "packages/table/src/columnInfo.js||packages/table/src/columnInfo.js": [
          "File: packages/table/src/columnInfo.js -> packages/table/src/columnInfo.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:       renderWidth: 0,",
          "128:       renderHeight: 0,",
          "129:       renderResizeWidth: 0,",
          "132:       renderLeft: 0,",
          "133:       renderArgs: [], // \u6e32\u67d3\u53c2\u6570\u53ef\u7528\u4e8e\u6269\u5c55",
          "",
          "[Removed Lines]",
          "130:       resizeWidth: 0,",
          "",
          "[Added Lines]",
          "130:       resizeWidth: 0, // \u624b\u52a8\u8c03\u6574",
          "",
          "---------------"
        ],
        "packages/table/src/header.js||packages/table/src/header.js": [
          "File: packages/table/src/header.js -> packages/table/src/header.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:         $xetable._lastResizeTime = Date.now()",
          "281:         $xetable.analyColumnWidth()",
          "282:         $xetable.recalculate(true).then(() => {",
          "284:           $xetable.updateCellAreas()",
          "285:           $xetable.emitEvent('resizable-change', { ...params, resizeWidth }, evnt)",
          "286:         })",
          "",
          "[Removed Lines]",
          "283:           $xetable.saveCustomResizable()",
          "",
          "[Added Lines]",
          "283:           $xetable.saveCustomStore('update:visible')",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: const isWebkit = browse['-webkit'] && !browse.edge",
          "16: const debounceScrollYDuration = browse.msie ? 80 : 20",
          "",
          "[Removed Lines]",
          "18: const resizableStorageKey = 'VXE_TABLE_CUSTOM_COLUMN_WIDTH'",
          "19: const visibleStorageKey = 'VXE_TABLE_CUSTOM_COLUMN_VISIBLE'",
          "20: const fixedStorageKey = 'VXE_TABLE_CUSTOM_COLUMN_FIXED'",
          "21: const sortStorageKey = 'VXE_TABLE_CUSTOM_COLUMN_SORT'",
          "",
          "[Added Lines]",
          "18: const customStorageKey = 'VXE_CUSTOM_STORE'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   return orders[oIndex < orders.length ? oIndex : 0]",
          "47: }",
          "50:   const version = GlobalConfig.version",
          "53: }",
          "55: const getRecoverRowMaps = (_vm, keyMaps) => {",
          "",
          "[Removed Lines]",
          "49: function getCustomStorageMap (key) {",
          "51:   const rest = XEUtils.toStringJSON(localStorage.getItem(key))",
          "52:   return rest && rest._v === version ? rest : { _v: version }",
          "",
          "[Added Lines]",
          "46: const getCustomStorageMap = (id) => {",
          "48:   const rest = XEUtils.toStringJSON(localStorage.getItem(customStorageKey) || '')",
          "49:   const maps = rest && rest._v === version ? rest : { _v: version }",
          "50:   return (id ? maps[id] : maps) || {}",
          "51: }",
          "53: const setCustomStorageMap = (id, data) => {",
          "54:   const version = GlobalConfig.version",
          "55:   const maps = getCustomStorageMap()",
          "56:   maps[id] = data || undefined",
          "57:   maps._v = version",
          "58:   localStorage.setItem(customStorageKey, XEUtils.toJSONString(maps))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "592:     this.collectColumn = collectColumn",
          "593:     const tableFullColumn = getColumnList(collectColumn)",
          "594:     this.tableFullColumn = tableFullColumn",
          "595:     this.initColumnSort()",
          "614:       }",
          "616:     })",
          "617:   },",
          "",
          "[Removed Lines]",
          "596:     this.restoreCustomStorage()",
          "597:     this.cacheColumnMap()",
          "598:     this.parseColumns().then(() => {",
          "599:       if (this.scrollXLoad) {",
          "600:         this.loadScrollXData(true)",
          "601:       }",
          "602:     })",
          "603:     this.clearMergeCells()",
          "604:     this.clearMergeFooterItems()",
          "605:     this.handleTableData(true)",
          "606:     if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "607:       if ((this.scrollXLoad || this.scrollYLoad) && this.expandColumn) {",
          "608:         warnLog('vxe.error.scrollErrProp', ['column.type=expand'])",
          "609:       }",
          "610:     }",
          "611:     return this.$nextTick().then(() => {",
          "612:       if (this.$toolbar) {",
          "613:         this.$toolbar.syncUpdate({ collectColumn, $table: this })",
          "615:       return this.recalculate()",
          "",
          "[Added Lines]",
          "601:     this._isLoading = true",
          "603:     return Promise.resolve(",
          "604:       this.restoreCustomStorage()",
          "605:     ).then(() => {",
          "606:       this._isLoading = false",
          "607:       this.cacheColumnMap()",
          "608:       this.parseColumns().then(() => {",
          "609:         if (this.scrollXLoad) {",
          "610:           this.loadScrollXData(true)",
          "611:         }",
          "612:       })",
          "613:       this.clearMergeCells()",
          "614:       this.clearMergeFooterItems()",
          "615:       this.handleTableData(true)",
          "616:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "617:         if ((this.scrollXLoad || this.scrollYLoad) && this.expandColumn) {",
          "618:           warnLog('vxe.error.scrollErrProp', ['column.type=expand'])",
          "619:         }",
          "621:       return this.$nextTick().then(() => {",
          "622:         if (this.$toolbar) {",
          "623:           this.$toolbar.syncUpdate({ collectColumn, $table: this })",
          "624:         }",
          "625:         return this.recalculate()",
          "626:       })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "682:     }",
          "683:     this.tableSourceData = sourceData",
          "684:   },",
          "685:   loadTreeChildren (row, childRecords) {",
          "686:     const { keepSource, tableSourceData, treeOpts, fullDataRowIdData, fullDataRowMap, fullAllDataRowMap, fullAllDataRowIdData, sourceDataRowIdData } = this",
          "687:     const { transform, mapChildrenField } = treeOpts",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696:   getParams () {",
          "697:     return this.params",
          "698:   },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1569:       XEUtils.eachTree([targetColumn], (column) => {",
          "1570:         column.fixed = fixed",
          "1571:       })",
          "1573:       return this.refreshColumn()",
          "1574:     }",
          "1575:     return this.$nextTick()",
          "",
          "[Removed Lines]",
          "1572:       this.saveCustomFixed()",
          "",
          "[Added Lines]",
          "1586:       this.saveCustomStore('update:fixed')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1584:       XEUtils.eachTree([targetColumn], (column) => {",
          "1585:         column.fixed = null",
          "1586:       })",
          "1588:       return this.refreshColumn()",
          "1589:     }",
          "1590:     return this.$nextTick()",
          "",
          "[Removed Lines]",
          "1587:       this.saveCustomFixed()",
          "",
          "[Added Lines]",
          "1601:       this.saveCustomStore('update:fixed')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1662:       }",
          "1663:       column.renderResizeWidth = column.renderWidth",
          "1664:     })",
          "1674:     return this.handleCustom()",
          "1675:   },",
          "1676:   handleCustom () {",
          "",
          "[Removed Lines]",
          "1665:     if (opts.resizable) {",
          "1666:       this.saveCustomResizable(true)",
          "1667:     }",
          "1668:     if (opts.sort) {",
          "1669:       this.saveCustomSort(true)",
          "1670:     }",
          "1671:     if (opts.fixed) {",
          "1672:       this.saveCustomFixed()",
          "1673:     }",
          "",
          "[Added Lines]",
          "1679:     this.saveCustomStore('reset')",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1684:         this.clearCopyCellArea()",
          "1685:       }",
          "1686:     }",
          "1688:     this.analyColumnWidth()",
          "1689:     return this.refreshColumn(true)",
          "1690:   },",
          "1718:         }",
          "1733:         }",
          "1750:         }",
          "1797:         }",
          "1798:       })",
          "",
          "[Removed Lines]",
          "1687:     this.saveCustomStore()",
          "1694:   restoreCustomStorage () {",
          "1695:     const { id, customConfig, customOpts } = this",
          "1696:     const { storage, restoreStore } = customOpts",
          "1697:     const isAllStorage = storage === true",
          "1698:     const storageOpts = isAllStorage ? {} : Object.assign({}, storage || {})",
          "1699:     const isCustomResizable = isAllStorage || storageOpts.resizable",
          "1700:     const isCustomVisible = isAllStorage || storageOpts.visible",
          "1701:     const isCustomFixed = isAllStorage || storageOpts.fixed",
          "1702:     const isCustomSort = isAllStorage || storageOpts.sort",
          "1703:     if (storage && id && restoreStore) {",
          "1704:       restoreStore({ id })",
          "1705:     }",
          "1706:     if (customConfig && (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort)) {",
          "1707:       const customMap = {}",
          "1708:       if (!id) {",
          "1709:         errLog('vxe.error.reqProp', ['id'])",
          "1710:         return",
          "1711:       }",
          "1712:       if (isCustomResizable) {",
          "1713:         const columnWidthStorage = getCustomStorageMap(resizableStorageKey)[id]",
          "1714:         if (columnWidthStorage) {",
          "1715:           XEUtils.each(columnWidthStorage, (resizeWidth, field) => {",
          "1716:             customMap[field] = { field, resizeWidth }",
          "1717:           })",
          "1719:       }",
          "1721:       if (isCustomFixed) {",
          "1722:         const columnFixedStorage = getCustomStorageMap(fixedStorageKey)[id]",
          "1723:         if (columnFixedStorage) {",
          "1724:           const colFixeds = columnFixedStorage.split(',')",
          "1725:           colFixeds.forEach((fixConf) => {",
          "1726:             const [field, fixed] = fixConf.split('|')",
          "1727:             if (customMap[field]) {",
          "1728:               customMap[field].fixed = fixed",
          "1729:             } else {",
          "1730:               customMap[field] = { field, fixed }",
          "1731:             }",
          "1732:           })",
          "1734:       }",
          "1736:       let hasCustomSort = false",
          "1737:       if (isCustomSort) {",
          "1738:         const columnSortStorage = getCustomStorageMap(sortStorageKey)[id]",
          "1739:         if (columnSortStorage) {",
          "1740:           XEUtils.each(columnSortStorage, (renderSortNumber, colKey) => {",
          "1741:             if (customMap[colKey]) {",
          "1742:               customMap[colKey].renderSortNumber = renderSortNumber",
          "1743:             } else {",
          "1744:               customMap[colKey] = { renderSortNumber }",
          "1745:             }",
          "1746:             if (!hasCustomSort) {",
          "1747:               hasCustomSort = true",
          "1748:             }",
          "1749:           })",
          "1751:       }",
          "1752:       if (isCustomVisible) {",
          "1753:         const columnVisibleStorage = getCustomStorageMap(visibleStorageKey)[id]",
          "1754:         if (columnVisibleStorage) {",
          "1755:           const colVisibles = columnVisibleStorage.split('|')",
          "1756:           const colHides = colVisibles[0] ? colVisibles[0].split(',') : []",
          "1757:           const colShows = colVisibles[1] ? colVisibles[1].split(',') : []",
          "1758:           colHides.forEach(field => {",
          "1759:             if (customMap[field]) {",
          "1760:               customMap[field].visible = false",
          "1761:             } else {",
          "1762:               customMap[field] = { field, visible: false }",
          "1763:             }",
          "1764:           })",
          "1765:           colShows.forEach(field => {",
          "1766:             if (customMap[field]) {",
          "1767:               customMap[field].visible = true",
          "1768:             } else {",
          "1769:               customMap[field] = { field, visible: true }",
          "1770:             }",
          "1771:           })",
          "1772:         }",
          "1773:       }",
          "1774:       let { collectColumn } = this",
          "1775:       const keyMap = {}",
          "1776:       XEUtils.eachTree(collectColumn, column => {",
          "1777:         const colKey = column.getKey()",
          "1778:         if (colKey) {",
          "1779:           keyMap[colKey] = column",
          "1780:         }",
          "1781:       })",
          "1782:       XEUtils.each(customMap, ({ visible, resizeWidth, fixed, renderSortNumber }, field) => {",
          "1783:         const column = keyMap[field]",
          "1784:         if (column) {",
          "1785:           if (XEUtils.isNumber(resizeWidth)) {",
          "1786:             column.resizeWidth = resizeWidth",
          "1787:           }",
          "1788:           if (XEUtils.isBoolean(visible)) {",
          "1789:             column.visible = visible",
          "1790:           }",
          "1791:           if (fixed) {",
          "1792:             column.fixed = fixed",
          "1793:           }",
          "1794:           if (renderSortNumber) {",
          "1795:             column.renderSortNumber = Number(renderSortNumber)",
          "1796:           }",
          "",
          "[Added Lines]",
          "1696:   handleCustomRestore (storeData) {",
          "1697:     const { tableFullColumn } = this",
          "1698:     let { collectColumn } = this",
          "1699:     const { resizableData, sortData, visibleData, fixedData } = storeData",
          "1700:     let hasCustomSort = false",
          "1702:     if (resizableData || sortData || visibleData || fixedData) {",
          "1703:       tableFullColumn.forEach(column => {",
          "1704:         const colKey = column.getKey()",
          "1705:         if (resizableData && XEUtils.isNumber(resizableData[colKey])) {",
          "1706:           column.resizeWidth = resizableData[colKey]",
          "1708:         if (visibleData && XEUtils.isBoolean(visibleData[colKey])) {",
          "1709:           column.visible = visibleData[colKey]",
          "1711:         if (fixedData && fixedData[colKey]) {",
          "1712:           column.fixed = fixedData[colKey]",
          "1714:         if (sortData && XEUtils.isNumber(sortData[colKey])) {",
          "1715:           hasCustomSort = true",
          "1716:           column.renderSortNumber = sortData[colKey]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1804:       }",
          "1805:     }",
          "1806:   },",
          "1816:       if (!id) {",
          "1817:         errLog('vxe.error.reqProp', ['id'])",
          "1818:         return",
          "1819:       }",
          "1825:           }",
          "1845:       }",
          "1863:     }",
          "1864:   },",
          "1865:   getCustomStoreData () {",
          "1867:     const { checkMethod } = customOpts",
          "1868:     const resizableData = {}",
          "1869:     const sortData = {}",
          "1870:     const visibleData = {}",
          "1871:     const fixedData = {}",
          "1872:     const storeData = {",
          "1877:     }",
          "1878:     if (!id) {",
          "1879:       errLog('vxe.error.reqProp', ['id'])",
          "1880:       return storeData",
          "1881:     }",
          "1882:     XEUtils.eachTree(collectColumn, (column, index, items, path, parent) => {",
          "1884:       if (!parent) {",
          "1885:         collectColumn.forEach((column) => {",
          "1886:           const colKey = column.getKey()",
          "1887:           if (colKey) {",
          "1888:             sortData[colKey] = column.renderSortNumber",
          "1889:           }",
          "1890:         })",
          "",
          "[Removed Lines]",
          "1807:   saveCustomFixed () {",
          "1808:     const { id, collectColumn, customConfig, customOpts } = this",
          "1809:     const { storage } = customOpts",
          "1810:     const isAllStorage = storage === true",
          "1811:     const storageOpts = isAllStorage ? {} : Object.assign({}, storage || {})",
          "1812:     const isCustomFixed = isAllStorage || storageOpts.fixed",
          "1813:     if (customConfig && isCustomFixed) {",
          "1814:       const columnFixedStorageMap = getCustomStorageMap(fixedStorageKey)",
          "1815:       const colFixeds = []",
          "1820:       XEUtils.eachTree(collectColumn, (column) => {",
          "1821:         if (column.fixed && column.fixed !== column.defaultFixed) {",
          "1822:           const colKey = column.getKey()",
          "1823:           if (colKey) {",
          "1824:             colFixeds.push(`${colKey}|${column.fixed}`)",
          "1826:         }",
          "1827:       })",
          "1828:       columnFixedStorageMap[id] = colFixeds.join(',') || undefined",
          "1829:       localStorage.setItem(fixedStorageKey, XEUtils.toJSONString(columnFixedStorageMap))",
          "1830:     }",
          "1831:   },",
          "1832:   saveCustomVisible () {",
          "1833:     const { id, collectColumn, customConfig, customOpts } = this",
          "1834:     const { checkMethod, storage } = customOpts",
          "1835:     const isAllStorage = storage === true",
          "1836:     const storageOpts = isAllStorage ? {} : Object.assign({}, storage || {})",
          "1837:     const isCustomVisible = isAllStorage || storageOpts.visible",
          "1838:     if (customConfig && isCustomVisible) {",
          "1839:       const columnVisibleStorageMap = getCustomStorageMap(visibleStorageKey)",
          "1840:       const colHides = []",
          "1841:       const colShows = []",
          "1842:       if (!id) {",
          "1843:         errLog('vxe.error.reqProp', ['id'])",
          "1844:         return",
          "1846:       XEUtils.eachTree(collectColumn, column => {",
          "1847:         if (!checkMethod || checkMethod({ column })) {",
          "1848:           if (!column.visible && column.defaultVisible) {",
          "1849:             const colKey = column.getKey()",
          "1850:             if (colKey) {",
          "1851:               colHides.push(colKey)",
          "1852:             }",
          "1853:           } else if (column.visible && !column.defaultVisible) {",
          "1854:             const colKey = column.getKey()",
          "1855:             if (colKey) {",
          "1856:               colShows.push(colKey)",
          "1857:             }",
          "1858:           }",
          "1859:         }",
          "1860:       })",
          "1861:       columnVisibleStorageMap[id] = [colHides.join(',')].concat(colShows.length ? [colShows.join(',')] : []).join('|') || undefined",
          "1862:       localStorage.setItem(visibleStorageKey, XEUtils.toJSONString(columnVisibleStorageMap))",
          "1866:     const { id, collectColumn, customOpts } = this",
          "1873:       resizableData,",
          "1874:       sortData,",
          "1875:       visibleData,",
          "1876:       fixedData",
          "",
          "[Added Lines]",
          "1730:   restoreCustomStorage () {",
          "1731:     const { id, customConfig, customOpts } = this",
          "1732:     const { storage, restoreStore } = customOpts",
          "1733:     const isAllCustom = storage === true",
          "1734:     const storageOpts = isAllCustom ? {} : Object.assign({}, storage || {})",
          "1735:     const isCustomResizable = isAllCustom || storageOpts.resizable",
          "1736:     const isCustomVisible = isAllCustom || storageOpts.visible",
          "1737:     const isCustomFixed = isAllCustom || storageOpts.fixed",
          "1738:     const isCustomSort = isAllCustom || storageOpts.sort",
          "1739:     if (customConfig && (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort)) {",
          "1744:       const storeData = getCustomStorageMap(id)",
          "1745:       if (restoreStore) {",
          "1746:         return Promise.resolve(",
          "1747:           restoreStore({ id, type: 'restore', storeData })",
          "1748:         ).then(storeData => {",
          "1749:           if (!storeData) {",
          "1750:             return",
          "1752:           return this.handleCustomRestore(storeData)",
          "1753:         }).catch(e => e)",
          "1754:       } else {",
          "1755:         return this.handleCustomRestore(storeData)",
          "1760:     const { id, customOpts, collectColumn } = this",
          "1767:       resizableData: undefined,",
          "1768:       sortData: undefined,",
          "1769:       visibleData: undefined,",
          "1770:       fixedData: undefined",
          "1776:     let hasResizable = 0",
          "1777:     let hasSort = 0",
          "1778:     let hasFixedt = 0",
          "1779:     let hasVisible = 0",
          "1786:             hasSort = 1",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1892:       if (column.resizeWidth) {",
          "1893:         const colKey = column.getKey()",
          "1894:         if (colKey) {",
          "1895:           resizableData[colKey] = column.renderWidth",
          "1896:         }",
          "1897:       }",
          "1898:       if (column.fixed && column.fixed !== column.defaultFixed) {",
          "1899:         const colKey = column.getKey()",
          "1900:         if (colKey) {",
          "1901:           fixedData[colKey] = column.fixed",
          "1902:         }",
          "1903:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1794:           hasResizable = 1",
          "1801:           hasFixedt = 1",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1905:         if (!column.visible && column.defaultVisible) {",
          "1906:           const colKey = column.getKey()",
          "1907:           if (colKey) {",
          "1908:             visibleData[colKey] = false",
          "1909:           }",
          "1910:         } else if (column.visible && !column.defaultVisible) {",
          "1911:           const colKey = column.getKey()",
          "1912:           if (colKey) {",
          "1913:             visibleData[colKey] = true",
          "1914:           }",
          "1915:         }",
          "1916:       }",
          "1917:     })",
          "1952:     }",
          "1953:   },",
          "1963:       if (!id) {",
          "1964:         errLog('vxe.error.reqProp', ['id'])",
          "1966:       }",
          "1974:           }",
          "1975:         })",
          "1976:       }",
          "1979:     }",
          "1980:   },",
          "1981:   handleUpdateDataQueue () {",
          "1982:     this.upDataFlag++",
          "",
          "[Removed Lines]",
          "1918:     return storeData",
          "1919:   },",
          "1920:   saveCustomStore () {",
          "1921:     this.saveCustomVisible()",
          "1922:     this.saveCustomSort()",
          "1923:     this.saveCustomFixed()",
          "1924:     this.saveCustomResizable()",
          "1925:   },",
          "1926:   saveCustomResizable (isReset) {",
          "1927:     const { id, collectColumn, customConfig, customOpts } = this",
          "1928:     const { storage } = customOpts",
          "1929:     const isAllStorage = storage === true",
          "1930:     const storageOpts = isAllStorage ? {} : Object.assign({}, storage || {})",
          "1931:     const isResizable = isAllStorage || storageOpts.resizable",
          "1932:     if (customConfig && isResizable) {",
          "1933:       const columnWidthStorageMap = getCustomStorageMap(resizableStorageKey)",
          "1934:       let columnWidthStorage",
          "1935:       if (!id) {",
          "1936:         errLog('vxe.error.reqProp', ['id'])",
          "1937:         return",
          "1938:       }",
          "1939:       if (!isReset) {",
          "1940:         columnWidthStorage = XEUtils.isPlainObject(columnWidthStorageMap[id]) ? columnWidthStorageMap[id] : {}",
          "1941:         XEUtils.eachTree(collectColumn, column => {",
          "1942:           if (column.resizeWidth) {",
          "1943:             const colKey = column.getKey()",
          "1944:             if (colKey) {",
          "1945:               columnWidthStorage[colKey] = column.renderWidth",
          "1946:             }",
          "1947:           }",
          "1948:         })",
          "1949:       }",
          "1950:       columnWidthStorageMap[id] = XEUtils.isEmpty(columnWidthStorage) ? undefined : columnWidthStorage",
          "1951:       localStorage.setItem(resizableStorageKey, XEUtils.toJSONString(columnWidthStorageMap))",
          "1954:   saveCustomSort (isReset) {",
          "1955:     const { id, collectColumn, customConfig, customOpts } = this",
          "1956:     const { storage } = customOpts",
          "1957:     const isAllStorage = storage === true",
          "1958:     const storageOpts = isAllStorage ? {} : Object.assign({}, storage || {})",
          "1959:     const isSort = isAllStorage || storageOpts.sort",
          "1960:     if (customConfig && isSort) {",
          "1961:       const columnSortStorageMap = getCustomStorageMap(sortStorageKey)",
          "1962:       let columnWidthStorage",
          "1965:         return",
          "1967:       if (!isReset) {",
          "1968:         columnWidthStorage = XEUtils.isPlainObject(columnSortStorageMap[id]) ? columnSortStorageMap[id] : {}",
          "1970:         collectColumn.forEach(column => {",
          "1971:           const colKey = column.getKey()",
          "1972:           if (colKey) {",
          "1973:             columnWidthStorage[colKey] = column.renderSortNumber",
          "1977:       columnSortStorageMap[id] = XEUtils.isEmpty(columnWidthStorage) ? undefined : columnWidthStorage",
          "1978:       localStorage.setItem(sortStorageKey, XEUtils.toJSONString(columnSortStorageMap))",
          "",
          "[Added Lines]",
          "1809:             hasVisible = 1",
          "1815:             hasVisible = 1",
          "1821:     if (hasResizable) {",
          "1822:       storeData.resizableData = resizableData",
          "1823:     }",
          "1824:     if (hasSort) {",
          "1825:       storeData.sortData = sortData",
          "1827:     if (hasFixedt) {",
          "1828:       storeData.fixedData = fixedData",
          "1829:     }",
          "1830:     if (hasVisible) {",
          "1831:       storeData.visibleData = visibleData",
          "1832:     }",
          "1833:     return storeData",
          "1835:   saveCustomStore (type) {",
          "1836:     const { id, customOpts } = this",
          "1837:     const { updateStore, storage } = customOpts",
          "1838:     const isAllCustom = storage === true",
          "1839:     const storageOpts = isAllCustom ? {} : Object.assign({}, storage || {})",
          "1840:     const isCustomResizable = isAllCustom || storageOpts.resizable",
          "1841:     const isCustomVisible = isAllCustom || storageOpts.visible",
          "1842:     const isCustomFixed = isAllCustom || storageOpts.fixed",
          "1843:     const isCustomSort = isAllCustom || storageOpts.sort",
          "1844:     if (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort) {",
          "1847:         return this.$nextTick()",
          "1849:       const storeData = type === 'reset'",
          "1850:         ? {",
          "1851:             resizableData: {},",
          "1852:             sortData: {},",
          "1853:             visibleData: {},",
          "1854:             fixedData: {}",
          "1856:         : this.getCustomStoreData()",
          "1857:       if (updateStore) {",
          "1858:         return updateStore({",
          "1859:           id,",
          "1860:           type,",
          "1861:           storeData",
          "1863:       } else {",
          "1864:         setCustomStorageMap(id, type === 'reset' ? null : storeData)",
          "1867:     return this.$nextTick()",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2718:           this.clearSelected()",
          "2719:         }",
          "2720:         if (areaOpts.autoClear) {",
          "2722:             this.preventEvent(evnt, 'event.clearAreas', {}, () => {",
          "2723:               this.clearCellAreas()",
          "2724:               this.clearCopyCellArea()",
          "2725:             })",
          "2726:           }",
          "2727:         }",
          "",
          "[Removed Lines]",
          "2721:           if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-areas-clear').flag) {",
          "",
          "[Added Lines]",
          "2609:           const cellAreas = this.getCellAreas()",
          "2610:           if (cellAreas.length && !getEventTargetNode(evnt, document.body, 'vxe-table--ignore-areas-clear').flag) {",
          "2614:               this.emitEvent('clear-cell-area-selection', { cellAreas }, evnt)",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "481:         message: true,",
          "482:         isHeader: false,",
          "483:         isFooter: false",
          "485:     }",
          "486:   },",
          "487:   computed: {",
          "",
          "[Removed Lines]",
          "484:       }",
          "",
          "[Added Lines]",
          "484:       },",
          "485:       _isLoading: false",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1060:       editRules",
          "1061:     } = this",
          "1062:     const { leftList, rightList } = columnStore",
          "1063:     return h('div', {",
          "1064:       class: ['vxe-table', 'vxe-table--render-default', `tid_${tId}`, vSize ? `size--${vSize}` : '', `border--${tableBorder}`, {",
          "1065:         [`valid-msg--${validOpts.msgMode}`]: !!editRules,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1064:     const currLoading = this._isLoading || loading",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1079:         'is--animat': !!this.animat,",
          "1080:         'is--round': this.round,",
          "1081:         'is--stripe': !treeConfig && stripe,",
          "1084:         'is--scroll-y': overflowY,",
          "1085:         'is--scroll-x': overflowX,",
          "1086:         'is--virtual-x': scrollXLoad,",
          "",
          "[Removed Lines]",
          "1082:         'is--loading': loading,",
          "1083:         'is--empty': !loading && !tableData.length,",
          "",
          "[Added Lines]",
          "1084:         'is--loading': currLoading,",
          "1085:         'is--empty': !currLoading && !tableData.length,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1184:       h(VxeLoading, {",
          "1185:         class: 'vxe-table--loading',",
          "1186:         props: {",
          "1188:           icon: loadingOpts.icon,",
          "1189:           text: loadingOpts.text",
          "1190:         }",
          "",
          "[Removed Lines]",
          "1187:           value: loading,",
          "",
          "[Added Lines]",
          "1189:           value: currLoading,",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js": [
          "File: packages/v-x-e-table/src/conf.js -> packages/v-x-e-table/src/conf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:   button: {",
          "347:   },",
          "348:   buttonGroup: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:     trigger: 'hover'",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/renderer.js||packages/v-x-e-table/src/renderer.js": [
          "File: packages/v-x-e-table/src/renderer.js -> packages/v-x-e-table/src/renderer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "714:           case 'date':",
          "715:           case 'week':",
          "716:           case 'month':",
          "717:           case 'year':",
          "718:             cellValue = getLabelFormatDate(cellValue, props)",
          "719:             break",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "717:           case 'quarter':",
          "",
          "---------------"
        ],
        "styles/input.scss||styles/input.scss": [
          "File: styles/input.scss -> styles/input.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "331:   }",
          "332: }",
          "334: .vxe-input--panel-wrapper,",
          "335: .vxe-input--panel-layout-wrapper {",
          "336:   background-color: $vxe-input-panel-background-color;",
          "337:   border: 1px solid $vxe-table-popup-border-color;",
          "338:   box-shadow: 0 0 6px 2px rgba(0, 0, 0, 0.1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334: .vxe-input--panel {",
          "335:   pointer-events: none;",
          "336: }",
          "340:   pointer-events: auto;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345: }",
          "347: .vxe-input--panel-layout-wrapper {",
          "349:   flex-direction: row;",
          "350: }",
          "",
          "[Removed Lines]",
          "348:   display: flex;",
          "",
          "[Added Lines]",
          "353:   display: inline-flex;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c8d08aabfae8c95c29e596e6dba56c2d8916d4c7",
      "candidate_info": {
        "commit_hash": "c8d08aabfae8c95c29e596e6dba56c2d8916d4c7",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/c8d08aabfae8c95c29e596e6dba56c2d8916d4c7",
        "files": [
          "packages/checkbox/src/checkbox.js",
          "packages/custom/src/panel.js",
          "packages/export/src/export-panel.js",
          "packages/export/src/import-panel.js",
          "packages/export/src/mixin.js",
          "packages/filter/src/mixin.js",
          "packages/filter/src/panel.js",
          "packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js",
          "packages/table/src/header.js",
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "packages/v-x-e-table/src/conf.js",
          "styles/button.scss",
          "styles/icon.scss",
          "styles/icon/iconfont.ttf",
          "styles/icon/iconfont.woff",
          "styles/icon/iconfont.woff2",
          "styles/old-icon.scss",
          "types/table.d.ts"
        ],
        "message": "\u4f18\u5316\u6837\u5f0f",
        "before_after_code_files": [
          "packages/checkbox/src/checkbox.js||packages/checkbox/src/checkbox.js",
          "packages/custom/src/panel.js||packages/custom/src/panel.js",
          "packages/export/src/export-panel.js||packages/export/src/export-panel.js",
          "packages/export/src/import-panel.js||packages/export/src/import-panel.js",
          "packages/export/src/mixin.js||packages/export/src/mixin.js",
          "packages/filter/src/mixin.js||packages/filter/src/mixin.js",
          "packages/filter/src/panel.js||packages/filter/src/panel.js",
          "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js",
          "packages/table/src/header.js||packages/table/src/header.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js",
          "styles/button.scss||styles/button.scss",
          "styles/icon.scss||styles/icon.scss",
          "styles/old-icon.scss||styles/old-icon.scss",
          "types/table.d.ts||types/table.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/checkbox/src/checkbox.js||packages/checkbox/src/checkbox.js": [
          "File: packages/checkbox/src/checkbox.js -> packages/checkbox/src/checkbox.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:         }",
          "79:       }),",
          "80:       h('span', {",
          "82:       }),",
          "83:       h('span', {",
          "84:         class: 'vxe-checkbox--label'",
          "",
          "[Removed Lines]",
          "81:         class: ['vxe-checkbox--icon', indeterminate ? 'vxe-icon-checkbox-indeterminate' : (isChecked ? 'vxe-icon-checkbox-checked' : 'vxe-icon-checkbox-unchecked')]",
          "",
          "[Added Lines]",
          "81:         class: ['vxe-checkbox--icon', indeterminate ? 'vxe-icon-checkbox-indeterminate' : (isChecked ? 'vxe-icon-checkbox-checked-fill' : 'vxe-icon-checkbox-unchecked')]",
          "",
          "---------------"
        ],
        "packages/custom/src/panel.js||packages/custom/src/panel.js": [
          "File: packages/custom/src/panel.js -> packages/custom/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:   const { _e, $xetable, customStore } = _vm",
          "240:   const { customOpts, customColumnList, columnOpts, isMaxFixedColumn } = $xetable",
          "241:   const { modalOptions, allowVisible, allowSort, allowFixed, allowResizable, checkMethod, visibleMethod } = customOpts",
          "242:   const modalOpts = Object.assign({}, modalOptions)",
          "243:   const trVNs = []",
          "244:   XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:   const { maxFixedSize } = columnOpts",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:   const isAllChecked = customStore.isAll",
          "377:   const isAllIndeterminate = customStore.isIndeterminate",
          "378:   return h('vxe-modal', {",
          "380:     props: {",
          "381:       className: ['vxe-table-custom-popup-wrapper', 'vxe-table--ignore-clear', modalOpts.className || ''].join(' '),",
          "382:       value: customStore.visible,",
          "383:       title: modalOpts.title || GlobalConfig.i18n('vxe.custom.cstmTitle'),",
          "385:       minWidth: modalOpts.minWidth || 700,",
          "387:       minHeight: modalOpts.minHeight || 400,",
          "394:     },",
          "395:     on: {",
          "396:       input (value) {",
          "",
          "[Removed Lines]",
          "379:     key: 'popup',",
          "384:       width: modalOpts.width || '50vw',",
          "386:       height: modalOpts.height || '50vh',",
          "388:       mask: true,",
          "389:       lockView: true,",
          "390:       showFooter: true,",
          "391:       resize: true,",
          "392:       escClosable: true,",
          "393:       destroyOnClose: true",
          "",
          "[Added Lines]",
          "380:     key: 'modal',",
          "385:       width: modalOpts.width || Math.min(880, document.documentElement.clientWidth),",
          "387:       height: modalOpts.height || Math.min(680, document.documentElement.clientHeight),",
          "389:       showZoom: !!modalOpts.showZoom,",
          "390:       mask: !!modalOpts.mask,",
          "391:       lockView: !!modalOpts.lockView,",
          "392:       resize: !!modalOpts.resize,",
          "393:       escClosable: !!modalOpts.escClosable,",
          "394:       destroyOnClose: true,",
          "395:       showFooter: true",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "489:                     ? h('th', {}, GlobalConfig.i18n('vxe.custom.setting.colResizable'))",
          "490:                     : _e(),",
          "491:                   allowFixed",
          "493:                     : _e()",
          "494:                 ])",
          "495:               ]),",
          "",
          "[Removed Lines]",
          "492:                     ? h('th', {}, GlobalConfig.i18n('vxe.custom.setting.colFixed', [columnOpts.maxFixedSize || 0]))",
          "",
          "[Added Lines]",
          "494:                     ? h('th', {}, GlobalConfig.i18n(`vxe.custom.setting.${maxFixedSize ? 'colFixedMax' : 'colFixed'}`, [maxFixedSize]))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "566:   render (h) {",
          "567:     const { $xetable } = this",
          "568:     const { customOpts } = $xetable",
          "570:       return renderPopupPanel(h, this)",
          "571:     }",
          "572:     return renderSimplePanel(h, this)",
          "",
          "[Removed Lines]",
          "569:     if (customOpts.mode === 'popup') {",
          "",
          "[Added Lines]",
          "571:     if (['modal', 'popup'].includes(`${customOpts.mode}`)) {",
          "",
          "---------------"
        ],
        "packages/export/src/export-panel.js||packages/export/src/export-panel.js": [
          "File: packages/export/src/export-panel.js -> packages/export/src/export-panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:                 h('td', [",
          "141:                   h('vxe-select', {",
          "142:                     props: {",
          "144:                     },",
          "145:                     on: {",
          "146:                       input (value) {",
          "147:                         defaultOptions.type = value",
          "148:                       }",
          "149:                     }",
          "158:                 ])",
          "159:               ]),",
          "160:               isPrint || showSheet ? h('tr', [",
          "",
          "[Removed Lines]",
          "143:                       value: defaultOptions.type",
          "150:                   }, storeData.typeList.map(item => {",
          "151:                     return h('vxe-option', {",
          "152:                       props: {",
          "153:                         value: item.value,",
          "154:                         label: GlobalConfig.i18n(item.label)",
          "155:                       }",
          "156:                     })",
          "157:                   }))",
          "",
          "[Added Lines]",
          "143:                       value: defaultOptions.type,",
          "144:                       options: storeData.typeList",
          "151:                   })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:                 h('td', [",
          "182:                   h('vxe-select', {",
          "183:                     props: {",
          "185:                     },",
          "186:                     on: {",
          "187:                       input (value) {",
          "188:                         defaultOptions.mode = value",
          "189:                       }",
          "190:                     }",
          "199:                 ])",
          "200:               ]),",
          "201:               h('tr', [",
          "",
          "[Removed Lines]",
          "184:                       value: defaultOptions.mode",
          "191:                   }, storeData.modeList.map(item => {",
          "192:                     return h('vxe-option', {",
          "193:                       props: {",
          "194:                         value: item.value,",
          "195:                         label: GlobalConfig.i18n(item.label)",
          "196:                       }",
          "197:                     })",
          "198:                   }))",
          "",
          "[Added Lines]",
          "178:                       value: defaultOptions.mode,",
          "179:                       options: storeData.modeList",
          "186:                   })",
          "",
          "---------------"
        ],
        "packages/export/src/import-panel.js||packages/export/src/import-panel.js": [
          "File: packages/export/src/import-panel.js -> packages/export/src/import-panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:       const { type, typeList } = storeData",
          "35:       if (type) {",
          "36:         const selectItem = XEUtils.find(typeList, item => type === item.value)",
          "38:       }",
          "39:       return `*.${typeList.map(item => item.value).join(', *.')}`",
          "40:     }",
          "",
          "[Removed Lines]",
          "37:         return selectItem ? GlobalConfig.i18n(selectItem.label) : '*.*'",
          "",
          "[Added Lines]",
          "37:         return selectItem ? selectItem.label : '*.*'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:       props: {",
          "47:         value: storeData.visible,",
          "48:         title: GlobalConfig.i18n('vxe.import.impTitle'),",
          "50:         mask: true,",
          "51:         lockView: true,",
          "52:         showFooter: false,",
          "",
          "[Removed Lines]",
          "49:         width: 440,",
          "",
          "[Added Lines]",
          "49:         width: 520,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:               h('td', parseTypeLabel)",
          "106:             ]),",
          "107:             h('tr', [",
          "109:               h('td', [",
          "111:                   props: {",
          "113:                   },",
          "114:                   on: {",
          "115:                     input (value) {",
          "116:                       defaultOptions.mode = value",
          "117:                     }",
          "118:                   }",
          "126:               ])",
          "127:             ])",
          "128:           ])",
          "",
          "[Removed Lines]",
          "108:               h('td', GlobalConfig.i18n('vxe.import.impOpts')),",
          "110:                 h('vxe-radio-group', {",
          "112:                     value: defaultOptions.mode",
          "119:                 }, storeData.modeList.map(item => {",
          "120:                   return h('vxe-radio', {",
          "121:                     props: {",
          "122:                       label: item.value",
          "123:                     }",
          "124:                   }, GlobalConfig.i18n(item.label))",
          "125:                 }))",
          "",
          "[Added Lines]",
          "108:               h('td', GlobalConfig.i18n('vxe.import.impMode')),",
          "110:                 h('vxe-select', {",
          "112:                     value: defaultOptions.mode,",
          "113:                     options: storeData.modeList",
          "120:                 })",
          "",
          "---------------"
        ],
        "packages/export/src/mixin.js||packages/export/src/mixin.js": [
          "File: packages/export/src/mixin.js -> packages/export/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "826:     $xetable.createData(rows)",
          "827:       .then((data) => {",
          "828:         let loadRest",
          "830:           loadRest = $xetable.insert(data)",
          "831:         } else {",
          "832:           loadRest = $xetable.reloadData(data)",
          "",
          "[Removed Lines]",
          "829:         if (opts.mode === 'insert') {",
          "",
          "[Added Lines]",
          "829:         if (opts.mode === 'insert' || opts.mode === 'insertBottom') {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "894:     $xetable._importResolve = _importResolve",
          "895:     $xetable._importReject = _importReject",
          "896:     if (window.FileReader) {",
          "898:       if (options.remote) {",
          "899:         if (importMethod) {",
          "900:           Promise.resolve(importMethod({ file, options, $table: $xetable })).then(() => {",
          "",
          "[Removed Lines]",
          "897:       const options = Object.assign({ mode: 'insert' }, opts, { type, filename })",
          "",
          "[Added Lines]",
          "897:       const options = Object.assign({ mode: 'insertBottom' }, opts, { type, filename })",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1044: }",
          "1046: function handleExportAndPrint ($xetable, options, isPrint) {",
          "1048:   const selectRecords = $xetable.getCheckboxRecords()",
          "1049:   const hasFooter = !!footerTableData.length",
          "1050:   const hasTree = treeConfig",
          "1051:   const hasMerge = !hasTree && mergeList.length",
          "1053:   const types = defOpts.types || XEUtils.keys(exportOpts._typeMaps)",
          "1055:   const checkMethod = customOpts.checkMethod",
          "1056:   const exportColumns = collectColumn.slice(0)",
          "1057:   const { columns } = defOpts",
          "1060:     return {",
          "1061:       value,",
          "1063:     }",
          "1064:   })",
          "1066:     return {",
          "1069:     }",
          "1070:   })",
          "",
          "[Removed Lines]",
          "1047:   const { initStore, customOpts, collectColumn, footerTableData, treeConfig, mergeList, isGroup, exportParams, exportOpts } = $xetable",
          "1052:   const defOpts = Object.assign({ message: true, isHeader: true }, options)",
          "1054:   const modes = defOpts.modes",
          "1059:   const typeList = types.map(value => {",
          "1062:       label: `vxe.export.types.${value}`",
          "1065:   const modeList = modes.map(value => {",
          "1067:       value,",
          "1068:       label: `vxe.export.modes.${value}`",
          "",
          "[Added Lines]",
          "1047:   const { $xegrid, initStore, customOpts, collectColumn, footerTableData, treeConfig, mergeList, isGroup, exportParams, exportOpts } = $xetable",
          "1048:   const proxyOpts = $xegrid ? $xegrid.proxyOpts : {}",
          "1053:   const defOpts = Object.assign({",
          "1054:     message: true,",
          "1055:     isHeader: true,",
          "1056:     current: 'current',",
          "1057:     modes: ['current', 'selected'].concat(proxyOpts.ajax && proxyOpts.ajax.queryAll ? ['all'] : [])",
          "1058:   }, options)",
          "1060:   const modes = defOpts.modes || []",
          "1065:   const typeList = types.map((value) => {",
          "1068:       label: GlobalConfig.i18n(`vxe.export.types.${value}`)",
          "1071:   const modeList = modes.map((item) => {",
          "1072:     if (item && item.value) {",
          "1073:       return {",
          "1074:         value: item.value,",
          "1075:         label: item.label || item.value",
          "1076:       }",
          "1077:     }",
          "1079:       value: item,",
          "1080:       label: GlobalConfig.i18n(`vxe.export.modes.${item}`)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1113:   Object.assign(exportParams, {",
          "1114:     mode: selectRecords.length ? 'selected' : 'current'",
          "1115:   }, defOpts)",
          "1118:   }",
          "1121:   }",
          "1122:   initStore.export = true",
          "1123:   return $xetable.$nextTick()",
          "",
          "[Removed Lines]",
          "1116:   if (modes.indexOf(exportParams.mode) === -1) {",
          "1117:     exportParams.mode = modes[0]",
          "1119:   if (types.indexOf(exportParams.type) === -1) {",
          "1120:     exportParams.type = types[0]",
          "",
          "[Added Lines]",
          "1128:   if (!modeList.some(item => item.value === exportParams.mode)) {",
          "1129:     exportParams.mode = modeList[0].value",
          "1131:   if (!typeList.some(item => item.value === exportParams.type)) {",
          "1132:     exportParams.type = typeList[0].value",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1297:       }",
          "1299:       if (!opts.data) {",
          "1301:         if (mode === 'selected') {",
          "1302:           const selectRecords = this.getCheckboxRecords()",
          "1303:           if (['html', 'pdf'].indexOf(type) > -1 && treeConfig) {",
          "",
          "[Removed Lines]",
          "1300:         opts.data = afterFullData",
          "",
          "[Added Lines]",
          "1312:         opts.data = []",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1343:                 })",
          "1344:             }",
          "1345:           }",
          "1346:         }",
          "1347:       }",
          "1348:       return handleExport(this, opts)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1358:         } else if (mode === 'current') {",
          "1359:           opts.data = afterFullData",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1427:     _openImport (options) {",
          "1428:       const { importOpts } = this",
          "1429:       const defOpts = Object.assign({",
          "1431:         message: true,",
          "1433:       }, options, importOpts)",
          "1435:       const isTree = !!this.getTreeStatus()",
          "1436:       if (isTree) {",
          "1437:         if (defOpts.message) {",
          "",
          "[Removed Lines]",
          "1430:         mode: 'insert',",
          "1432:         types: XEUtils.keys(importOpts._typeMaps)",
          "1434:       const { types } = defOpts",
          "",
          "[Added Lines]",
          "1444:         mode: 'insertBottom',",
          "1446:         types: XEUtils.keys(importOpts._typeMaps),",
          "1447:         modes: ['insertBottom', 'covering']",
          "1449:       const types = defOpts.types || []",
          "1450:       const modes = defOpts.modes || []",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1443:         errLog('vxe.error.reqProp', ['import-config'])",
          "1444:       }",
          "1447:         return {",
          "1448:           value,",
          "1450:         }",
          "1451:       })",
          "1453:         return {",
          "1456:         }",
          "1457:       })",
          "1458:       Object.assign(this.importStore, {",
          "",
          "[Removed Lines]",
          "1446:       const typeList = types.map(value => {",
          "1449:           label: `vxe.export.types.${value}`",
          "1452:       const modeList = defOpts.modes.map(value => {",
          "1454:           value,",
          "1455:           label: `vxe.import.modes.${value}`",
          "",
          "[Added Lines]",
          "1462:       const typeList = types.map((value) => {",
          "1465:           label: GlobalConfig.i18n(`vxe.export.types.${value}`)",
          "1468:       const modeList = modes.map((item) => {",
          "1469:         if (item && item.value) {",
          "1470:           return {",
          "1471:             value: item.value,",
          "1472:             label: item.label || item.value",
          "1473:           }",
          "1474:         }",
          "1476:           value: item,",
          "1477:           label: GlobalConfig.i18n(`vxe.import.modes.${item}`)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1464:         visible: true",
          "1465:       })",
          "1466:       Object.assign(this.importParams, defOpts)",
          "1467:       this.initStore.import = true",
          "1468:     },",
          "1469:     _openExport (options) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1489:       if (!modeList.some(item => item.value === this.importParams.mode)) {",
          "1490:         this.importParams.mode = modeList[0].value",
          "1491:       }",
          "",
          "---------------"
        ],
        "packages/filter/src/mixin.js||packages/filter/src/mixin.js": [
          "File: packages/filter/src/mixin.js -> packages/filter/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import XEUtils from 'xe-utils'",
          "2: import DomTools from '../../tools/dom'",
          "3: import { toFilters, handleFieldOrColumn } from '../../table/src/util'",
          "4: import VXETable from '../../v-x-e-table'",
          "6: export default {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import { isEnableConf } from '../../tools/utils'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33:       const column = handleFieldOrColumn(this, fieldOrColumn)",
          "34:       if (column && column.filters) {",
          "35:         column.filters = toFilters(options || [])",
          "36:       }",
          "38:     },",
          "39:     checkFilterOptions () {",
          "40:       const { filterStore } = this",
          "",
          "[Removed Lines]",
          "32:     _setFilter (fieldOrColumn, options) {",
          "37:       return this.$nextTick()",
          "",
          "[Added Lines]",
          "33:     _setFilter (fieldOrColumn, options, update) {",
          "38:       return update ? this.updateData() : this.$nextTick()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:       } else {",
          "58:         const { target: targetElem, pageX } = evnt",
          "59:         const { filters, filterMultiple, filterRender } = column",
          "61:         const filterRecoverMethod = column.filterRecoverMethod || (compConf ? (compConf.tableFilterRecoverMethod || compConf.filterRecoverMethod) : null)",
          "62:         const { visibleWidth } = DomTools.getDomNode()",
          "63:         Object.assign(filterStore, {",
          "",
          "[Removed Lines]",
          "60:         const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null",
          "",
          "[Added Lines]",
          "61:         const compConf = isEnableConf(filterRender) ? VXETable.renderer.get(filterRender.name) : null",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "205:       if (column) {",
          "206:         const { filters, filterRender } = column",
          "207:         if (filters) {",
          "209:           const filterResetMethod = column.filterResetMethod || (compConf ? (compConf.tableFilterResetMethod || compConf.filterResetMethod) : null)",
          "210:           filters.forEach((item) => {",
          "211:             item._checked = false",
          "",
          "[Removed Lines]",
          "208:           const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null",
          "",
          "[Added Lines]",
          "209:           const compConf = isEnableConf(filterRender) ? VXETable.renderer.get(filterRender.name) : null",
          "",
          "---------------"
        ],
        "packages/filter/src/panel.js||packages/filter/src/panel.js": [
          "File: packages/filter/src/panel.js -> packages/filter/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import GlobalConfig from '../../v-x-e-table/src/conf'",
          "2: import VXETable from '../../v-x-e-table'",
          "4: import { getSlotVNs } from '../../tools/vn'",
          "6: export default {",
          "",
          "[Removed Lines]",
          "3: import UtilTools from '../../tools/utils'",
          "",
          "[Added Lines]",
          "3: import UtilTools, { isEnableConf } from '../../tools/utils'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     const { $parent: $xetable, filterStore } = this",
          "19:     const { args, column } = filterStore",
          "20:     const filterRender = column ? column.filterRender : null",
          "22:     const filterClassName = compConf ? (compConf.tableFilterClassName || compConf.filterClassName) : ''",
          "23:     return h('div', {",
          "24:       class: [",
          "",
          "[Removed Lines]",
          "21:     const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null",
          "",
          "[Added Lines]",
          "21:     const compConf = isEnableConf(filterRender) ? VXETable.renderer.get(filterRender.name) : null",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:       const { filterOpts } = $xetable",
          "121:       const { column, multiple } = filterStore",
          "122:       const filterRender = column.filterRender",
          "124:       const isDisabled = !hasCheckOption && !filterStore.isAllSelected && !filterStore.isIndeterminate",
          "125:       return multiple && (compConf ? !(compConf.showTableFilterFooter === false || compConf.showFilterFooter === false) : true) ? [",
          "126:         h('div', {",
          "",
          "[Removed Lines]",
          "123:       const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null",
          "",
          "[Added Lines]",
          "123:       const compConf = isEnableConf(filterRender) ? VXETable.renderer.get(filterRender.name) : null",
          "",
          "---------------"
        ],
        "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js": [
          "File: packages/locale/lang/en-US.js -> packages/locale/lang/en-US.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:         colTitle: 'Title',",
          "120:         colResizable: 'Column width (px)',",
          "121:         colVisible: 'Visible',",
          "123:         fixedLeft: 'Left',",
          "124:         fixedUnset: 'Unset',",
          "125:         fixedRight: 'Right'",
          "",
          "[Removed Lines]",
          "122:         colFixed: 'Freeze columns (Max. {0})',",
          "",
          "[Added Lines]",
          "122:         colFixed: 'Freeze columns',",
          "123:         colFixedMax: 'Freeze columns (Max. {0})',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:     },",
          "128:     import: {",
          "129:       modes: {",
          "132:       },",
          "133:       impTitle: 'Import data',",
          "134:       impFile: 'Filename',",
          "135:       impSelect: 'Select file',",
          "136:       impType: 'File type',",
          "137:       impOpts: 'Settings',",
          "138:       impConfirm: 'Import',",
          "139:       impCancel: 'Cancel'",
          "140:     },",
          "",
          "[Removed Lines]",
          "130:         covering: 'Covering',",
          "131:         insert: 'Insert'",
          "",
          "[Added Lines]",
          "131:         covering: 'Overwrite mode (directly overwrite table data)',",
          "132:         insert: 'Bottom append (appends new data to the bottom of the table)',",
          "133:         insertTop: 'Top append (appends new data to the top of the table)',",
          "134:         insertBottom: 'Bottom append (appends new data to the bottom of the table)'",
          "141:       impMode: 'Import mode',",
          "",
          "---------------"
        ],
        "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js": [
          "File: packages/locale/lang/es-ES.js -> packages/locale/lang/es-ES.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:         colTitle: 'Title',",
          "120:         colResizable: 'Column width (px)',",
          "121:         colVisible: 'Visible',",
          "123:         fixedLeft: 'Left',",
          "124:         fixedUnset: 'Unset',",
          "125:         fixedRight: 'Right'",
          "",
          "[Removed Lines]",
          "122:         colFixed: 'Freeze columns (Max {0})',",
          "",
          "[Added Lines]",
          "122:         colFixed: 'Freeze columns',",
          "123:         colFixedMax: 'Freeze columns (Max {0})',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:     },",
          "128:     import: {",
          "129:       modes: {",
          "132:       },",
          "133:       impTitle: 'Importar datos',",
          "134:       impFile: 'Nombre del archivo',",
          "135:       impSelect: 'Seleccionar archivo',",
          "136:       impType: 'Tipo de archivo',",
          "137:       impOpts: 'Configuraci\u00f3n',",
          "138:       impConfirm: 'Importar',",
          "139:       impCancel: 'Cancelar'",
          "140:     },",
          "",
          "[Removed Lines]",
          "130:         covering: 'Cubriendo',",
          "131:         insert: 'Insertar'",
          "",
          "[Added Lines]",
          "131:         covering: 'Overwrite mode (directly overwrite table data)',",
          "132:         insert: 'Bottom append (appends new data to the bottom of the table)',",
          "133:         insertTop: 'Top append (appends new data to the top of the table)',",
          "134:         insertBottom: 'Bottom append (appends new data to the bottom of the table)'",
          "141:       impMode: 'Import mode',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js": [
          "File: packages/locale/lang/ja-JP.js -> packages/locale/lang/ja-JP.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:         colTitle: '\u30bf\u30a4\u30c8\u30eb',",
          "120:         colResizable: 'Column width (px)',",
          "121:         colVisible: '\u8868\u793a',",
          "123:         fixedLeft: '\u5de6\u5074',",
          "124:         fixedUnset: '\u6307\u5b9a\u3057\u306a\u3044',",
          "125:         fixedRight: '\u53f3\u5074'",
          "",
          "[Removed Lines]",
          "122:         colFixed: '\u51bb\u7ed3\u5217\uff08\u6700\u591a {0} \u5217\uff09',",
          "",
          "[Added Lines]",
          "122:         colFixed: '\u51bb\u7ed3\u5217',",
          "123:         colFixedMax: '\u51bb\u7ed3\u5217\uff08\u6700\u591a {0} \u5217\uff09',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:     },",
          "128:     import: {",
          "129:       modes: {",
          "132:       },",
          "133:       impTitle: '\u30c7\u30fc\u30bf\u30a4\u30f3\u30dd\u30fc\u30c8',",
          "134:       impFile: '\u30d5\u30a1\u30a4\u30eb\u540d',",
          "135:       impSelect: '\u30d5\u30a1\u30a4\u30eb\u9078\u629e',",
          "136:       impType: '\u30d5\u30a1\u30a4\u30eb\u306e\u7a2e\u985e',",
          "137:       impOpts: '\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a',",
          "138:       impConfirm: '\u30a4\u30f3\u30dd\u30fc\u30c8',",
          "139:       impCancel: '\u30ad\u30e3\u30f3\u30bb\u30eb'",
          "140:     },",
          "",
          "[Removed Lines]",
          "130:         covering: '\u4e0a\u66f8\u304d',",
          "131:         insert: '\u8ffd\u52a0'",
          "",
          "[Added Lines]",
          "131:         covering: 'Overwrite mode (directly overwrite table data)',",
          "132:         insert: 'Bottom append (appends new data to the bottom of the table)',",
          "133:         insertTop: 'Top append (appends new data to the top of the table)',",
          "134:         insertBottom: 'Bottom append (appends new data to the bottom of the table)'",
          "141:       impMode: 'Import mode',",
          "",
          "---------------"
        ],
        "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js": [
          "File: packages/locale/lang/pt-BR.js -> packages/locale/lang/pt-BR.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:         colTitle: 'Title',",
          "120:         colResizable: 'Column width (px)',",
          "121:         colVisible: 'Visible',",
          "123:         fixedLeft: 'Left',",
          "124:         fixedUnset: 'Unset',",
          "125:         fixedRight: 'Right'",
          "",
          "[Removed Lines]",
          "122:         colFixed: 'Freeze columns (Max {0})',",
          "",
          "[Added Lines]",
          "122:         colFixed: 'Freeze columns',",
          "123:         colFixedMax: 'Freeze columns (Max {0})',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:     },",
          "128:     import: {",
          "129:       modes: {",
          "132:       },",
          "133:       impTitle: 'Importar dados',",
          "134:       impFile: 'Nome do arquivo',",
          "135:       impSelect: 'Selecionar arquivo',",
          "136:       impType: 'Tipo de arquivo',",
          "137:       impOpts: 'Configura\u00e7\u00f5es',",
          "138:       impConfirm: 'Importar',",
          "139:       impCancel: 'Cancelar'",
          "140:     },",
          "",
          "[Removed Lines]",
          "130:         covering: 'Sobrescrever',",
          "131:         insert: 'Inserir'",
          "",
          "[Added Lines]",
          "131:         covering: 'Overwrite mode (directly overwrite table data)',",
          "132:         insert: 'Bottom append (appends new data to the bottom of the table)',",
          "133:         insertTop: 'Top append (appends new data to the top of the table)',",
          "134:         insertBottom: 'Bottom append (appends new data to the bottom of the table)'",
          "141:       impMode: 'Import mode',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js": [
          "File: packages/locale/lang/zh-CN.js -> packages/locale/lang/zh-CN.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:         colTitle: '\u6807\u9898',",
          "120:         colResizable: '\u5217\u5bbd\uff08\u50cf\u7d20\uff09',",
          "121:         colVisible: '\u662f\u5426\u663e\u793a',",
          "123:         fixedLeft: '\u5de6\u4fa7',",
          "124:         fixedUnset: '\u4e0d\u8bbe\u7f6e',",
          "125:         fixedRight: '\u53f3\u4fa7'",
          "",
          "[Removed Lines]",
          "122:         colFixed: '\u51bb\u7ed3\u5217\uff08\u6700\u591a {0} \u5217\uff09',",
          "",
          "[Added Lines]",
          "122:         colFixed: '\u51bb\u7ed3\u5217',",
          "123:         colFixedMax: '\u51bb\u7ed3\u5217\uff08\u6700\u591a {0} \u5217\uff09',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:     },",
          "128:     import: {",
          "129:       modes: {",
          "132:       },",
          "133:       impTitle: '\u5bfc\u5165\u6570\u636e',",
          "134:       impFile: '\u6587\u4ef6\u540d',",
          "135:       impSelect: '\u9009\u62e9\u6587\u4ef6',",
          "136:       impType: '\u6587\u4ef6\u7c7b\u578b',",
          "137:       impOpts: '\u53c2\u6570\u8bbe\u7f6e',",
          "138:       impConfirm: '\u5bfc\u5165',",
          "139:       impCancel: '\u53d6\u6d88'",
          "140:     },",
          "",
          "[Removed Lines]",
          "130:         covering: '\u8986\u76d6',",
          "131:         insert: '\u65b0\u589e'",
          "",
          "[Added Lines]",
          "131:         covering: '\u8986\u76d6\u65b9\u5f0f\uff08\u76f4\u63a5\u8986\u76d6\u8868\u683c\u6570\u636e\uff09',",
          "132:         insert: '\u5e95\u90e8\u8ffd\u52a0\uff08\u5728\u8868\u683c\u7684\u5e95\u90e8\u8ffd\u52a0\u65b0\u6570\u636e\uff09',",
          "133:         insertTop: '\u9876\u90e8\u8ffd\u52a0\uff08\u5728\u8868\u683c\u7684\u9876\u90e8\u8ffd\u52a0\u65b0\u6570\u636e\uff09',",
          "134:         insertBottom: '\u5e95\u90e8\u8ffd\u52a0\uff08\u5728\u8868\u683c\u7684\u5e95\u90e8\u8ffd\u52a0\u65b0\u6570\u636e\uff09'",
          "141:       impMode: '\u5bfc\u5165\u6a21\u5f0f',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js": [
          "File: packages/locale/lang/zh-TC.js -> packages/locale/lang/zh-TC.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:         colTitle: '\u6a19\u984c',",
          "120:         colResizable: '\u5217\u5bbd\uff08\u50cf\u7d20\uff09',",
          "121:         colVisible: '\u662f\u5426\u986f\u793a',",
          "123:         fixedLeft: '\u5de6\u5074',",
          "124:         fixedUnset: '\u4e0d\u8a2d\u5b9a',",
          "125:         fixedRight: '\u53f3\u5074'",
          "",
          "[Removed Lines]",
          "122:         colFixed: '\u51bb\u7ed3\u5217\uff08\u6700\u591a {0} \u5217\uff09',",
          "",
          "[Added Lines]",
          "122:         colFixed: '\u51bb\u7ed3\u5217',",
          "123:         colFixedMax: '\u51bb\u7ed3\u5217\uff08\u6700\u591a {0} \u5217\uff09',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:     },",
          "128:     import: {",
          "129:       modes: {",
          "132:       },",
          "133:       impTitle: '\u5c0e\u5165\u6578\u64da',",
          "134:       impFile: '\u6a94\u540d',",
          "135:       impSelect: '\u9078\u64c7\u6a94\u6848',",
          "136:       impType: '\u6a94\u6848\u985e\u578b',",
          "137:       impOpts: '\u53c3\u6578\u8a2d\u7f6e',",
          "138:       impConfirm: '\u5c0e\u5165',",
          "139:       impCancel: '\u53d6\u6d88'",
          "140:     },",
          "",
          "[Removed Lines]",
          "130:         covering: '\u8986\u76d6',",
          "131:         insert: '\u65b0\u589e'",
          "",
          "[Added Lines]",
          "131:         covering: '\u8986\u76d6\u65b9\u5f0f\uff08\u76f4\u63a5\u8986\u76d6\u8868\u683c\u6570\u636e\uff09',",
          "132:         insert: '\u5e95\u90e8\u8ffd\u52a0\uff08\u5728\u8868\u683c\u7684\u5e95\u90e8\u8ffd\u52a0\u65b0\u6570\u636e\uff09',",
          "133:         insertTop: '\u9876\u90e8\u8ffd\u52a0\uff08\u5728\u8868\u683c\u7684\u9876\u90e8\u8ffd\u52a0\u65b0\u6570\u636e\uff09',",
          "134:         insertBottom: '\u5e95\u90e8\u8ffd\u52a0\uff08\u5728\u8868\u683c\u7684\u5e95\u90e8\u8ffd\u52a0\u65b0\u6570\u636e\uff09'",
          "141:       impMode: '\u5c0e\u5165\u6a21\u5f0f',",
          "",
          "---------------"
        ],
        "packages/table/src/header.js||packages/table/src/header.js": [
          "File: packages/table/src/header.js -> packages/table/src/header.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:           $xetable.saveCustomStore('update:visible')",
          "284:           $xetable.updateCellAreas()",
          "285:           $xetable.emitEvent('resizable-change', { ...params, resizeWidth }, evnt)",
          "286:         })",
          "287:         DomTools.removeClass($xetable.$el, 'drag--resize')",
          "288:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:           setTimeout(() => $xetable.recalculate(true), 300)",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1364:         return filterColumns.every(({ column, valueList, itemList }) => {",
          "1365:           if (valueList.length && !allRemoteFilter) {",
          "1366:             const { filterMethod, filterRender, field } = column",
          "1368:             const compFilterMethod = compConf && compConf.renderFilter ? (compConf.tableFilterMethod || compConf.filterMethod) : null",
          "1369:             const defaultFilterMethod = compConf ? (compConf.defaultTableFilterMethod || compConf.defaultFilterMethod) : null",
          "1370:             const cellValue = UtilTools.getCellValue(row, column)",
          "",
          "[Removed Lines]",
          "1367:             const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null",
          "",
          "[Added Lines]",
          "1367:             const compConf = isEnableConf(filterRender) ? VXETable.renderer.get(filterRender.name) : null",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1567:   setColumnFixed (fieldOrColumn, fixed) {",
          "1568:     const { isMaxFixedColumn, columnOpts } = this",
          "1570:     const column = handleFieldOrColumn(this, fieldOrColumn)",
          "1571:     const targetColumn = getRootColumn(this, column)",
          "1572:     if (targetColumn && targetColumn.fixed !== fixed) {",
          "",
          "[Removed Lines]",
          "1569:     const { maxFixedSize } = columnOpts",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1575:         if (VXETable.modal) {",
          "1576:           VXETable.modal.message({",
          "1577:             status: 'error',",
          "1579:           })",
          "1580:         }",
          "1581:         return this.$nextTick()",
          "",
          "[Removed Lines]",
          "1578:             content: GlobalConfig.i18n('vxe.table.maxFixedCol', [maxFixedSize])",
          "",
          "[Added Lines]",
          "1577:             content: GlobalConfig.i18n('vxe.table.maxFixedCol', [columnOpts.maxFixedSize])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1702:     if (resizableData || sortData || visibleData || fixedData) {",
          "1703:       tableFullColumn.forEach(column => {",
          "1704:         const colKey = column.getKey()",
          "1705:         if (resizableData && XEUtils.isNumber(resizableData[colKey])) {",
          "1706:           column.resizeWidth = resizableData[colKey]",
          "1707:         }",
          "1708:         if (visibleData && XEUtils.isBoolean(visibleData[colKey])) {",
          "1709:           column.visible = visibleData[colKey]",
          "1710:         }",
          "1718:       })",
          "1720:       if (hasCustomSort) {",
          "",
          "[Removed Lines]",
          "1711:         if (fixedData && fixedData[colKey]) {",
          "1712:           column.fixed = fixedData[colKey]",
          "1713:         }",
          "1714:         if (sortData && XEUtils.isNumber(sortData[colKey])) {",
          "1715:           hasCustomSort = true",
          "1716:           column.renderSortNumber = sortData[colKey]",
          "1717:         }",
          "",
          "[Added Lines]",
          "1705:         if (!parent) {",
          "1706:           if (fixedData && fixedData[colKey]) {",
          "1707:             column.fixed = fixedData[colKey]",
          "1708:           }",
          "1709:           if (sortData && XEUtils.isNumber(sortData[colKey])) {",
          "1710:             hasCustomSort = true",
          "1711:             column.renderSortNumber = sortData[colKey]",
          "1712:           }",
          "1713:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1787:             sortData[colKey] = column.renderSortNumber",
          "1788:           }",
          "1789:         })",
          "1790:       }",
          "1791:       if (column.resizeWidth) {",
          "1792:         const colKey = column.getKey()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1792:         if (column.fixed && column.fixed !== column.defaultFixed) {",
          "1793:           const colKey = column.getKey()",
          "1794:           if (colKey) {",
          "1795:             hasFixedt = 1",
          "1796:             fixedData[colKey] = column.fixed",
          "1797:           }",
          "1798:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1795:           resizableData[colKey] = column.renderWidth",
          "1796:         }",
          "1797:       }",
          "1805:       if (!checkMethod || checkMethod({ column })) {",
          "1806:         if (!column.visible && column.defaultVisible) {",
          "1807:           const colKey = column.getKey()",
          "",
          "[Removed Lines]",
          "1798:       if (column.fixed && column.fixed !== column.defaultFixed) {",
          "1799:         const colKey = column.getKey()",
          "1800:         if (colKey) {",
          "1801:           hasFixedt = 1",
          "1802:           fixedData[colKey] = column.fixed",
          "1803:         }",
          "1804:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:       const { collectColumn } = this",
          "619:       let fixedSize = 0",
          "620:       collectColumn.forEach((column) => {",
          "622:           fixedSize++",
          "623:         }",
          "624:       })",
          "",
          "[Removed Lines]",
          "621:         if (column.fixed) {",
          "",
          "[Added Lines]",
          "621:         if (column.renderFixed) {",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/conf.js||packages/v-x-e-table/src/conf.js": [
          "File: packages/v-x-e-table/src/conf.js -> packages/v-x-e-table/src/conf.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:       allowFixed: true,",
          "65:       allowSort: true,",
          "66:       showFooter: true,",
          "70:     },",
          "71:     sortConfig: {",
          "",
          "[Removed Lines]",
          "67:       placement: 'topRight'",
          "",
          "[Added Lines]",
          "67:       placement: 'topRight',",
          "70:       modalOptions: {",
          "71:         showZoom: true,",
          "72:         mask: true,",
          "73:         lockView: true,",
          "74:         resize: true,",
          "75:         escClosable: true",
          "76:       }",
          "",
          "---------------"
        ],
        "styles/button.scss||styles/button.scss": [
          "File: styles/button.scss -> styles/button.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:       &:hover {",
          "104:         color: $vxe-primary-lighten-color;",
          "105:       }",
          "106:     }",
          "107:     @for $index from 0 to length($btnThemeList) {",
          "108:       $item: nth($btnThemeList, $index + 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:       &:active {",
          "107:         color: $vxe-primary-darken-color;",
          "108:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:           &:hover {",
          "116:             color: map-get($item, btnLightenColor);",
          "117:           }",
          "118:         }",
          "119:         &.is--disabled {",
          "120:           color: map-get($item, btnDisabledColor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:           &:active {",
          "122:             color: map-get($item, btnDarkenColor);",
          "123:           }",
          "",
          "---------------"
        ],
        "styles/icon.scss||styles/icon.scss": [
          "File: styles/icon.scss -> styles/icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: @font-face {",
          "4:   font-family: \"vxeiconfont\";",
          "5:   src:",
          "7: }",
          "9: @keyframes rollCircle {",
          "",
          "[Removed Lines]",
          "6:        url('data:application/x-font-woff2;charset=utf-8;base64,') format('woff2');",
          "",
          "[Added Lines]",
          "6:        url('data:application/x-font-woff2;charset=utf-8;base64,') format('woff2');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   ),",
          "31:   (",
          "32:     name: \"warning\",",
          "34:   ),",
          "35:   (",
          "36:     name: \"danger\",",
          "37:     textColor: $vxe-danger-color,",
          "38:   )",
          "39: );",
          "",
          "[Removed Lines]",
          "33:     textColor: $vxe-warning-color,",
          "",
          "[Added Lines]",
          "33:     textColor:  $vxe-warning-color,",
          "38:   ),",
          "39:   (",
          "40:     name: \"error\",",
          "41:     textColor: $vxe-danger-color,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73:   }",
          "74: }",
          "76: .vxe-icon-drag-handle:before {",
          "77:   content: \"\\e64e\";",
          "78: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: .vxe-icon-align-left:before {",
          "81:   content: \"\\e6bb\";",
          "82: }",
          "84: .vxe-icon-align-right:before {",
          "85:   content: \"\\e6b9\";",
          "86: }",
          "88: .vxe-icon-rmb:before {",
          "89:   content: \"\\e66b\";",
          "90: }",
          "92: .vxe-icon-usd:before {",
          "93:   content: \"\\eb1a\";",
          "94: }",
          "96: .vxe-icon-recover:before {",
          "97:   content: \"\\e642\";",
          "98: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:   content: \"\\e638\";",
          "114: }",
          "120: .vxe-icon-align-center:before {",
          "121:   content: \"\\e610\";",
          "122: }",
          "128: .vxe-icon-pc:before {",
          "129:   content: \"\\e65a\";",
          "130: }",
          "",
          "[Removed Lines]",
          "116: .vxe-icon-align-left:before {",
          "117:   content: \"\\e60f\";",
          "118: }",
          "124: .vxe-icon-align-right:before {",
          "125:   content: \"\\e611\";",
          "126: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "styles/old-icon.scss||styles/old-icon.scss": [
          "File: styles/old-icon.scss -> styles/old-icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     border-width: 0.1em;",
          "93:     border-style: solid;",
          "94:     border-color: inherit;",
          "96:   }",
          "97: }",
          "",
          "[Removed Lines]",
          "95:     background-color: $vxe-icon-background-color;",
          "",
          "[Added Lines]",
          "95:     background-color: var(--vxe-ui-layout-background-color);",
          "",
          "---------------"
        ],
        "types/table.d.ts||types/table.d.ts": [
          "File: types/table.d.ts -> types/table.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "840:   setFilter(column: ColumnInfo, options: ColumnFilterOption[]): Promise<any>;",
          "",
          "[Added Lines]",
          "841:   setFilter(column: ColumnInfo, options: ColumnFilterOption[], update?: boolean): Promise<any>;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4cf24c1e052be56e835057a7f7c426c79196800f",
      "candidate_info": {
        "commit_hash": "4cf24c1e052be56e835057a7f7c426c79196800f",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/4cf24c1e052be56e835057a7f7c426c79196800f",
        "files": [
          "README.md",
          "package.json",
          "packages/v-x-e-table/index.js"
        ],
        "message": "\u4fee\u590d\u62a5\u9519\u95ee\u9898",
        "before_after_code_files": [
          "packages/v-x-e-table/index.js||packages/v-x-e-table/index.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/v-x-e-table/index.js||packages/v-x-e-table/index.js": [
          "File: packages/v-x-e-table/index.js -> packages/v-x-e-table/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:   reg,",
          "98:   use,",
          "99:   setup,",
          "101:   interceptor,",
          "102:   renderer,",
          "103:   commands,",
          "",
          "[Removed Lines]",
          "100:   config,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:   menus,",
          "106:   validators,",
          "107:   t,",
          "109: }",
          "111: export * from './src/interceptor'",
          "",
          "[Removed Lines]",
          "108:   _t",
          "",
          "[Added Lines]",
          "107:   _t,",
          "110:   config,",
          "111:   globalConfs",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dea378041d9de9a1b939d10296a73ae10a545ebf",
      "candidate_info": {
        "commit_hash": "dea378041d9de9a1b939d10296a73ae10a545ebf",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/dea378041d9de9a1b939d10296a73ae10a545ebf",
        "files": [
          "styles/button.scss"
        ],
        "message": "\u4fee\u590d\u6309\u94ae\u6837\u5f0f",
        "before_after_code_files": [
          "styles/button.scss||styles/button.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "styles/button.scss||styles/button.scss": [
          "File: styles/button.scss -> styles/button.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:   border-radius: $vxe-border-radius;",
          "335:   border: 1px solid $vxe-input-border-color;",
          "336:   box-shadow: 0 1px 6px rgba(0,0,0,.2);",
          "340:     display: block;",
          "341:     width: 100%;",
          "342:     border: 0;",
          "343:     &.type--text {",
          "344:       padding: 2px 8px;",
          "345:     }",
          "",
          "[Removed Lines]",
          "337:   & > .vxe-button {",
          "338:     margin-left: 0;",
          "339:     margin-top: 0.4em;",
          "",
          "[Added Lines]",
          "337:   & > .vxe-button.type--text,",
          "338:   & > .vxe-button.type--button {",
          "342:     margin: 0.4em 0 0 0;",
          "343:   }",
          "344:   & > .vxe-button {",
          "",
          "---------------"
        ]
      }
    }
  ]
}