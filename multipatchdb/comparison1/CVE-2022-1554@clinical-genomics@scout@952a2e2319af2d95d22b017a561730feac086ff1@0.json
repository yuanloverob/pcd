{
  "cve_id": "CVE-2022-1554",
  "cve_desc": "Path Traversal due to `send_file` call in GitHub repository clinical-genomics/scout prior to 4.52.",
  "repo": "clinical-genomics/scout",
  "patch_hash": "952a2e2319af2d95d22b017a561730feac086ff1",
  "patch_info": {
    "commit_hash": "952a2e2319af2d95d22b017a561730feac086ff1",
    "repo": "clinical-genomics/scout",
    "commit_url": "https://github.com/clinical-genomics/scout/commit/952a2e2319af2d95d22b017a561730feac086ff1",
    "files": [
      "CHANGELOG.md",
      "scout/models/case/case.py",
      "scripts/convert_case_omim_format.py"
    ],
    "message": "Merge branch 'auth_serve_files' of https://github.com/Clinical-Genomics/scout into auth_serve_files",
    "before_after_code_files": [
      "scout/models/case/case.py||scout/models/case/case.py",
      "scripts/convert_case_omim_format.py||scripts/convert_case_omim_format.py"
    ]
  },
  "patch_diff": {
    "scout/models/case/case.py||scout/models/case/case.py": [
      "File: scout/models/case/case.py -> scout/models/case/case.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: from __future__ import absolute_import",
      "3: import logging",
      "5: from datetime import datetime",
      "14: logger = logging.getLogger(__name__)",
      "16: individual = dict(",
      "",
      "[Removed Lines]",
      "4: import os",
      "7: from scout.constants import ANALYSIS_TYPES",
      "8: from scout.models import PhenotypeTerm",
      "9: from scout.models.panel import GenePanel",
      "11: from . import STATUS",
      "12: from .individual import Individual",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "59:     created_at=datetime,",
      "60:     delivery_report=str,  # delivery report is a path to html file",
      "61:     diagnosis_genes=list,  # List of references to genes",
      "63:     display_name=str,  # required. This is the case name that will be shown in scout.",
      "64:     dynamic_gene_list=list,  # List of genes",
      "65:     gene_fusion_report=str,  # Path to the gene fusions report file",
      "",
      "[Removed Lines]",
      "62:     diagnosis_phenotypes=list,  # List of references to diseases",
      "",
      "[Added Lines]",
      "54:     diagnosis_phenotypes=list,  # List of dictionaries with OMIM disease data",
      "",
      "---------------"
    ],
    "scripts/convert_case_omim_format.py||scripts/convert_case_omim_format.py": [
      "File: scripts/convert_case_omim_format.py -> scripts/convert_case_omim_format.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #!/usr/bin/python",
      "2: # -*- coding: utf-8 -*-",
      "4: import click",
      "5: from pymongo import MongoClient",
      "7: CASES_WITH_DIA = {",
      "8:     \"diagnosis_phenotypes\": {\"$exists\": True, \"$ne\": []}",
      "9: }  # MongoDB query to locate cases with any diagnosis",
      "11: SELECT_FIELDS = {",
      "12:     \"owner\": 1,",
      "13:     \"display_name\": 1,",
      "14:     \"diagnosis_phenotypes\": 1,",
      "15: }  # select only a few important fields using the query above",
      "18: @click.command()",
      "19: @click.option(\"--db-uri\", required=True, help=\"mongodb://user:password@db_url:db_port\")",
      "20: @click.option(\"--db-name\", required=True, help=\"db name\")",
      "21: @click.option(\"--fix\", help=\"Use this flag to fix the OMIM format in old cases\", is_flag=True)",
      "22: def omim_case_fix_format(db_uri, db_name, fix):",
      "23:     try:",
      "24:         client = MongoClient(db_uri)",
      "25:         db = client[db_name]",
      "26:         # test connection",
      "27:         click.echo(\"database connection info:{}\".format(db))",
      "29:         cases_with_dia = list(db.case.find(CASES_WITH_DIA, SELECT_FIELDS))",
      "30:         click.echo(f\"Total number of cases with diagnosis:{len(cases_with_dia)}\")",
      "32:         # Display cases with old format of diagnosis (a list of integers)",
      "33:         cases_with_old_dia = [",
      "34:             case for case in cases_with_dia if isinstance(case[\"diagnosis_phenotypes\"][0], int)",
      "35:         ]",
      "36:         click.echo(f\"Total number of cases with old diagnosis format:{len(cases_with_old_dia)}\")",
      "38:         for i, case in enumerate(cases_with_old_dia):",
      "39:             click.echo(f\"n:{i}\\t{case['owner']}\\t{case['display_name']}\")",
      "40:             old_dia = case[\"diagnosis_phenotypes\"]",
      "41:             new_dia = []",
      "43:             for dia_nr in old_dia:",
      "44:                 disease_term = db.disease_term.find_one({\"disease_nr\": dia_nr})",
      "45:                 if disease_term is None:",
      "46:                     click.echo(f\"Could not find a disease term with id:{dia_nr}\")",
      "47:                     continue",
      "48:                 new_dia.append(",
      "49:                     {",
      "50:                         \"disease_nr\": dia_nr,",
      "51:                         \"disease_id\": disease_term[\"disease_id\"],",
      "52:                         \"description\": disease_term[\"description\"],",
      "53:                     }",
      "54:                 )",
      "56:             if fix is False:",
      "57:                 new_dia = old_dia",
      "58:             else:",
      "59:                 db.case.find_one_and_update(",
      "60:                     {\"_id\": case[\"_id\"]}, {\"$set\": {\"diagnosis_phenotypes\": new_dia}}",
      "61:                 )",
      "62:             click.echo(f\"old dia:{old_dia}--->new dia:{new_dia}\\n\")",
      "64:     except Exception as err:",
      "65:         click.echo(\"Error {}\".format(err))",
      "68: if __name__ == \"__main__\":",
      "69:     omim_case_fix_format()",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "18fd44b677d448faf569d71acdab74d3d53fd4b8",
      "candidate_info": {
        "commit_hash": "18fd44b677d448faf569d71acdab74d3d53fd4b8",
        "repo": "clinical-genomics/scout",
        "commit_url": "https://github.com/clinical-genomics/scout/commit/18fd44b677d448faf569d71acdab74d3d53fd4b8",
        "files": [
          "CHANGELOG.md",
          "scout/server/blueprints/alignviewers/controllers.py",
          "scout/server/blueprints/alignviewers/views.py",
          "tests/server/blueprints/alignviewers/test_alignviewers_views.py"
        ],
        "message": "Additional check for user logged in status and requested resource before serving files using remote static (#3303)\n\n* Additional check for user logged in status before serving alignments\n\n* Removed unused import\n\n* Fixed changelog and added tests\n\n* Removed unused endpoint and file extension check\n\n* Snmall fix\n\n* Removed unused imports\n\n* fixed code\n\n* Remove debug message\n\n* Small fix to a comment\n\n* Check files served by remote static using user sessions\n\n* Small but important fix\n\n* Fix error also in the code\n\n* Fix test\n\n* Revert conftest\n\n* Remove session[igv_tracks] after response\n\n* simplify code\n\n* unused import\n\n* Fix test\n\n* Remove debug messages\n\n* Removed unused code and fixed a comment\n\n* Update scout/server/blueprints/alignviewers/views.py\n\nCo-authored-by: Daniel Nilsson <daniel.k.nilsson@gmail.com>\n\n* Update scout/server/blueprints/alignviewers/views.py\n\nCo-authored-by: Daniel Nilsson <daniel.k.nilsson@gmail.com>\n\nCo-authored-by: Daniel Nilsson <daniel.k.nilsson@gmail.com>",
        "before_after_code_files": [
          "scout/server/blueprints/alignviewers/controllers.py||scout/server/blueprints/alignviewers/controllers.py",
          "scout/server/blueprints/alignviewers/views.py||scout/server/blueprints/alignviewers/views.py",
          "tests/server/blueprints/alignviewers/test_alignviewers_views.py||tests/server/blueprints/alignviewers/test_alignviewers_views.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/Clinical-Genomics/scout/pull/3303"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scout/server/blueprints/alignviewers/controllers.py||scout/server/blueprints/alignviewers/controllers.py": [
          "File: scout/server/blueprints/alignviewers/controllers.py -> scout/server/blueprints/alignviewers/controllers.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import logging",
          "3: import os.path",
          "6: from flask_login import current_user",
          "8: from scout.constants import CASE_SPECIFIC_TRACKS, HUMAN_REFERENCE, IGV_TRACKS",
          "",
          "[Removed Lines]",
          "5: from flask import flash",
          "",
          "[Added Lines]",
          "5: from flask import flash, session",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: CUSTOM_TRACK_NAMES = [\"Genes\", \"ClinVar\", \"ClinVar CNVs\"]",
          "17: def make_igv_tracks(case_obj, variant_id, chrom=None, start=None, stop=None):",
          "18:     \"\"\"Create a dictionary containing the required tracks for displaying IGV tracks for case or a group of cases",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: def set_session_tracks(display_obj):",
          "18:     \"\"\"Save igv tracks as a session object. This way it's easy to verify that a user is requesting one of these files from remote_static view endpoint",
          "20:     Args:",
          "21:         display_obj(dict): A display object containing case name, list of genes, lucus and tracks",
          "22:     \"\"\"",
          "23:     session_tracks = list(display_obj.get(\"reference_track\", {}).values())",
          "24:     for key, track_items in display_obj.items():",
          "25:         if key not in [\"tracks\", \"custom_tracks\", \"sample_tracks\"]:",
          "26:             continue",
          "27:         for track_item in track_items:",
          "28:             session_tracks += list(track_item.values())",
          "30:     session[\"igv_tracks\"] = session_tracks",
          "",
          "---------------"
        ],
        "scout/server/blueprints/alignviewers/views.py||scout/server/blueprints/alignviewers/views.py": [
          "File: scout/server/blueprints/alignviewers/views.py -> scout/server/blueprints/alignviewers/views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf-8 -*-",
          "2: import logging",
          "5: import requests",
          "7: from flask_login import current_user",
          "9: from scout.server.extensions import store",
          "12: from . import controllers",
          "13: from .partial import send_file_partial",
          "",
          "[Removed Lines]",
          "3: import os.path",
          "6: from flask import Blueprint, Response, abort, render_template, request, send_file",
          "10: from scout.server.utils import institute_and_case, user_institutes",
          "",
          "[Added Lines]",
          "5: from flask import (",
          "6:     Blueprint,",
          "7:     Response,",
          "8:     abort,",
          "9:     copy_current_request_context,",
          "10:     render_template,",
          "11:     request,",
          "12:     session,",
          "13: )",
          "17: from scout.server.utils import institute_and_case",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     Based on code from answers to this thread:",
          "33:         https://stackoverflow.com/questions/6656363/proxying-to-another-web-service-with-flask/",
          "34:     \"\"\"",
          "37:     resp = requests.request(",
          "38:         method=request.method,",
          "39:         url=remote_url,",
          "",
          "[Removed Lines]",
          "35:     LOG.debug(\"Got request: %s\", request)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62: @alignviewers_bp.route(\"/remote/static\", methods=[\"OPTIONS\", \"GET\"])",
          "63: def remote_static():",
          "64:     \"\"\"Stream *large* static files with special requirements.\"\"\"",
          "66:     range_header = request.headers.get(\"Range\", None)",
          "67:     if not range_header and (file_path.endswith(\".bam\") or file_path.endswith(\".cram\")):",
          "68:         return abort(500)",
          "",
          "[Removed Lines]",
          "65:     file_path = request.args.get(\"file\") or \"\"",
          "",
          "[Added Lines]",
          "70:     file_path = request.args.get(\"file\") or \".\"",
          "72:     # Check that user is logged in or that file extension is valid",
          "73:     if current_user.is_authenticated is False or file_path not in session.get(\"igv_tracks\", []):",
          "74:         LOG.warning(f\"{file_path} not in {session.get('igv_tracks', [])}\")",
          "75:         return abort(403)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:     return new_resp",
          "82: @alignviewers_bp.route(",
          "83:     \"/<institute_id>/<case_name>/<variant_id>/igv-splice-junctions\", methods=[\"GET\"]",
          "84: )",
          "",
          "[Removed Lines]",
          "74: @alignviewers_bp.route(\"/remote/static/unindexed\", methods=[\"OPTIONS\", \"GET\"])",
          "75: def unindexed_remote_static():",
          "76:     file_path = request.args.get(\"file\")",
          "77:     base_name = os.path.basename(file_path)",
          "78:     resp = send_file(file_path, download_name=base_name)",
          "79:     return resp",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "91:     )  # This function takes care of checking if user is authorized to see resource",
          "93:     display_obj = controllers.make_sashimi_tracks(case_obj, variant_id)",
          "97: @alignviewers_bp.route(\"/<institute_id>/<case_name>/igv\", methods=[\"GET\"])  # from case page",
          "",
          "[Removed Lines]",
          "94:     return render_template(\"alignviewers/igv_sashimi_viewer.html\", **display_obj)",
          "",
          "[Added Lines]",
          "97:     controllers.set_session_tracks(display_obj)",
          "99:     response = Response(render_template(\"alignviewers/igv_sashimi_viewer.html\", **display_obj))",
          "101:     @response.call_on_close",
          "102:     @copy_current_request_context",
          "103:     def clear_session_tracks():",
          "104:         session.pop(\"igv_tracks\", None)  # clean up igv session tracks",
          "106:     return response",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "120:     )  # This function takes care of checking if user is authorized to see resource",
          "122:     display_obj = controllers.make_igv_tracks(case_obj, variant_id, chrom, start, stop)",
          "",
          "[Removed Lines]",
          "123:     return render_template(\"alignviewers/igv_viewer.html\", **display_obj)",
          "",
          "[Added Lines]",
          "135:     controllers.set_session_tracks(display_obj)",
          "137:     response = Response(render_template(\"alignviewers/igv_viewer.html\", **display_obj))",
          "139:     @response.call_on_close",
          "140:     @copy_current_request_context",
          "141:     def clear_session_tracks():",
          "142:         session.pop(\"igv_tracks\", None)  # clean up igv session tracks",
          "144:     return response",
          "",
          "---------------"
        ],
        "tests/server/blueprints/alignviewers/test_alignviewers_views.py||tests/server/blueprints/alignviewers/test_alignviewers_views.py": [
          "File: tests/server/blueprints/alignviewers/test_alignviewers_views.py -> tests/server/blueprints/alignviewers/test_alignviewers_views.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # -*- coding: utf-8 -*-",
          "2: import requests",
          "5: from scout.server.extensions import store",
          "8: def test_remote_cors(app):",
          "10:     cloud_track_url = \"http://google.com\"",
          "12:     # GIVEN an initialized app",
          "",
          "[Removed Lines]",
          "3: from flask import url_for",
          "9:     \"\"\"Test endpoint that servers as a proxy to the actual remote track on the cloud\"\"\"",
          "",
          "[Added Lines]",
          "3: from flask import session, url_for",
          "8: def test_remote_static_no_auth(app):",
          "9:     \"\"\"Test endpoint that serves alignment files as non-logged user\"\"\"",
          "10:     # GIVEN a running demo app",
          "11:     with app.test_client() as client:",
          "12:         # GIVEN that user is not logged in",
          "13:         resp = client.get(",
          "14:             url_for(",
          "15:                 \"alignviewers.remote_static\",",
          "16:                 file=\"../demo/ACC5963A1_lanes_1234_star_sorted_sj_filtered_sorted.bed.gz\",",
          "17:             )",
          "18:         )",
          "19:         # THEN endpoint should return forbidden (403)",
          "20:         assert resp.status_code == 403",
          "23: def test_test_remote_static_not_in_session(app):",
          "24:     \"\"\"Test endpoint that serves alignment files that are not saved in the session\"\"\"",
          "26:     # GIVEN a running demo app",
          "27:     with app.test_client() as client:",
          "28:         # GIVEN that user is \u00dflogged in",
          "29:         client.get(url_for(\"auto_login\"))",
          "30:         # If requested file doesn't have a valid extension",
          "31:         resp = client.get(",
          "32:             url_for(",
          "33:                 \"alignviewers.remote_static\",",
          "34:                 file=\"config.py\",",
          "35:             )",
          "36:         )",
          "37:         # THEN endpoint should return forbidden (403)",
          "38:         assert resp.status_code == 403",
          "41: def test_remote_static(app):",
          "42:     \"\"\"Test endpoint that serves files as a logged user\"\"\"",
          "43:     # GIVEN a file on disk",
          "44:     file = \"../demo/ACC5963A1_lanes_1234_star_sorted_sj_filtered_sorted.bed.gz\"",
          "46:     # GIVEN a running demo app",
          "47:     with app.test_client() as client:",
          "48:         # GIVEN that user is logged in",
          "49:         client.get(url_for(\"auto_login\"))",
          "50:         with client.session_transaction() as session:",
          "51:             # GIVEN that resource file exists in user session",
          "52:             session[\"igv_tracks\"] = [file]",
          "54:         # THEN the resource should be available to the user",
          "55:         resp = client.get(",
          "56:             url_for(",
          "57:                 \"alignviewers.remote_static\",",
          "58:                 file=file,",
          "59:             )",
          "60:         )",
          "61:         assert resp.status_code == 200",
          "65:     \"\"\"Test endpoint that serves as a proxy to the actual remote track on the cloud\"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:         # THEN the response should be a valid HTML page",
          "74:         assert resp.status_code == 200",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:         # AND when the reponse is closed case IGV tracks should be removed from session",
          "132:         resp.close()",
          "133:         assert session.get(\"igv_tracks\") is None",
          "",
          "---------------"
        ]
      }
    }
  ]
}