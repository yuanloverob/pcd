{
  "cve_id": "CVE-2023-1001",
  "cve_desc": "A vulnerability, which was classified as problematic, has been found in xuliangzhan vxe-table up to 3.7.9. This issue affects the function export of the file packages/textarea/src/textarea.js of the component vxe-textarea. The manipulation of the argument inputValue leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 3.7.10 is able to address this issue. The patch is named d70b0e089740b65a22c89c106ebc4627ac48a22d. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-266123.",
  "repo": "x-extends/vxe-table",
  "patch_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
  "patch_info": {
    "commit_hash": "d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "repo": "x-extends/vxe-table",
    "commit_url": "https://github.com/x-extends/vxe-table/commit/d70b0e089740b65a22c89c106ebc4627ac48a22d",
    "files": [
      "packages/table/src/body.js",
      "packages/textarea/src/textarea.js"
    ],
    "message": "textarea \u4fee\u590d\u6ce8\u5165xss\u95ee\u9898 #I8O21R",
    "before_after_code_files": [
      "packages/table/src/body.js||packages/table/src/body.js",
      "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js"
    ]
  },
  "patch_diff": {
    "packages/table/src/body.js||packages/table/src/body.js": [
      "File: packages/table/src/body.js -> packages/table/src/body.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "499:     elemStore[`${prefix}xSpace`] = $refs.xSpace",
      "500:     elemStore[`${prefix}ySpace`] = $refs.ySpace",
      "501:     elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock",
      "504:   },",
      "505:   beforeDestroy () {",
      "506:     clearTimeout(this.wheelTime)",
      "",
      "[Removed Lines]",
      "502:     this.$el.onscroll = this.scrollEvent",
      "503:     this.$el._onscroll = this.scrollEvent",
      "",
      "[Added Lines]",
      "502:     if (this.$el) {",
      "503:       this.$el.onscroll = this.scrollEvent",
      "504:       this.$el._onscroll = this.scrollEvent",
      "505:     }",
      "",
      "---------------"
    ],
    "packages/textarea/src/textarea.js||packages/textarea/src/textarea.js": [
      "File: packages/textarea/src/textarea.js -> packages/textarea/src/textarea.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "188:         autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')",
      "189:         autoTxtElem.style.width = `${textElem.clientWidth}px`",
      "190:         autoTxtElem.style.padding = textStyle.padding",
      "192:       }",
      "193:     },",
      "194:     handleResize () {",
      "",
      "[Removed Lines]",
      "191:         autoTxtElem.innerHTML = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "[Added Lines]",
      "191:         autoTxtElem.innerText = ('' + (inputValue || '\u3000')).replace(/\\n$/, '\\n\u3000')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a443dbc9c72e31563736b1c921e42a8597415e3",
      "candidate_info": {
        "commit_hash": "2a443dbc9c72e31563736b1c921e42a8597415e3",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/2a443dbc9c72e31563736b1c921e42a8597415e3",
        "files": [
          "examples/views/table/advanced/CustomStorage.vue",
          "packages/button/src/button.js",
          "packages/custom/src/panel.js",
          "packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js",
          "styles/button.scss",
          "styles/custom.scss"
        ],
        "message": "\u4fee\u590d custom-config.immediate \u6a21\u5f0f\u65e0\u6548\u95ee\u9898",
        "before_after_code_files": [
          "examples/views/table/advanced/CustomStorage.vue||examples/views/table/advanced/CustomStorage.vue",
          "packages/button/src/button.js||packages/button/src/button.js",
          "packages/custom/src/panel.js||packages/custom/src/panel.js",
          "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js",
          "styles/button.scss||styles/button.scss",
          "styles/custom.scss||styles/custom.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/views/table/advanced/CustomStorage.vue||examples/views/table/advanced/CustomStorage.vue": [
          "File: examples/views/table/advanced/CustomStorage.vue -> examples/views/table/advanced/CustomStorage.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:       ref=\"xTable1\"",
          "18:       height=\"400\"",
          "19:       id=\"toolbar_demo3\"",
          "21:       :data=\"tableData\">",
          "22:       <vxe-column type=\"seq\" width=\"60\"></vxe-column>",
          "23:       <vxe-column field=\"name\" title=\"Name\"></vxe-column>",
          "",
          "[Removed Lines]",
          "20:       :custom-config=\"{storage: true}\"",
          "",
          "[Added Lines]",
          "20:       :custom-config=\"{storage: true,immediate:true}\"",
          "",
          "---------------"
        ],
        "packages/button/src/button.js||packages/button/src/button.js": [
          "File: packages/button/src/button.js -> packages/button/src/button.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     disabled: Boolean,",
          "25:     loading: Boolean,",
          "26:     trigger: { type: String, default: () => GlobalConfig.button.trigger },",
          "27:     destroyOnClose: Boolean,",
          "28:     className: [String, Function],",
          "29:     popupClassName: [String, Function],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:     align: String,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:     GlobalEvent.off(this, 'mousedown')",
          "113:   },",
          "114:   render (h) {",
          "116:     const downsSlot = $scopedSlots.dropdowns",
          "117:     const btnOns = {}",
          "118:     const panelOns = {}",
          "",
          "[Removed Lines]",
          "115:     const { $scopedSlots, className, popupClassName, trigger, title, inited, type, destroyOnClose, isFormBtn, btnMode, btnStatus, btnRound, btnCircle, vSize, name, disabled, loading, visiblePanel, animatVisible, panelPlacement } = this",
          "",
          "[Added Lines]",
          "116:     const { $scopedSlots, className, popupClassName, trigger, align, title, inited, type, destroyOnClose, isFormBtn, btnMode, btnStatus, btnRound, btnCircle, vSize, name, disabled, loading, visiblePanel, animatVisible, panelPlacement } = this",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:     }, [",
          "133:       h('button', {",
          "134:         ref: 'xBtn',",
          "136:           [`size--${vSize}`]: vSize,",
          "137:           [`theme--${btnStatus}`]: btnStatus,",
          "138:           'is--round': btnRound,",
          "",
          "[Removed Lines]",
          "135:         class: ['vxe-button', `type--${btnMode}`, {",
          "",
          "[Added Lines]",
          "136:         class: ['vxe-button', `type--${btnMode}`, align ? `align--${align}` : '', {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "178:       ] : null)",
          "179:     ]) : h('button', {",
          "180:       ref: 'xBtn',",
          "182:         [`size--${vSize}`]: vSize,",
          "183:         [`theme--${btnStatus}`]: btnStatus,",
          "184:         'is--round': btnRound,",
          "",
          "[Removed Lines]",
          "181:       class: ['vxe-button', `type--${btnMode}`, className ? (XEUtils.isFunction(className) ? className({ $button: this }) : className) : '', {",
          "",
          "[Added Lines]",
          "182:       class: ['vxe-button', `type--${btnMode}`, align ? `align--${align}` : '', className ? (XEUtils.isFunction(className) ? className({ $button: this }) : className) : '', {",
          "",
          "---------------"
        ],
        "packages/custom/src/panel.js||packages/custom/src/panel.js": [
          "File: packages/custom/src/panel.js -> packages/custom/src/panel.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import DomTools from '../../tools/dom'",
          "4: import GlobalConfig from '../../v-x-e-table/src/conf'",
          "5: import XEUtils from 'xe-utils'",
          "7: const { formatText } = UtilTools",
          "8: const { addClass, removeClass } = DomTools",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import VxeButtonComponent from '../../button/src/button'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:                   title: GlobalConfig.i18n('vxe.table.allTitle')",
          "183:                 },",
          "184:                 on: {",
          "186:                 }",
          "187:               }, [",
          "188:                 h('span', {",
          "",
          "[Removed Lines]",
          "185:                   click: _vm.allCustomEvent",
          "",
          "[Added Lines]",
          "186:                   click: _vm.allOptionEvent",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "217:           ? h('div', {",
          "218:             class: 'vxe-table-custom--footer'",
          "219:           }, [",
          "222:               on: {",
          "223:                 click: _vm.resetCustomEvent",
          "224:               }",
          "226:             customOpts.immediate",
          "230:                 on: {",
          "231:                   click: _vm.cancelCustomEvent",
          "232:                 }",
          "240:           ])",
          "241:           : null",
          "242:       ]",
          "",
          "[Removed Lines]",
          "220:             h('button', {",
          "221:               class: 'btn--reset',",
          "225:             }, customOpts.resetButtonText || GlobalConfig.i18n('vxe.table.customRestore')),",
          "227:               ? _e()",
          "228:               : h('button', {",
          "229:                 class: 'btn--cancel',",
          "233:               }, customOpts.resetButtonText || GlobalConfig.i18n('vxe.table.customCancel')),",
          "234:             h('button', {",
          "235:               class: 'btn--confirm',",
          "236:               on: {",
          "237:                 click: _vm.confirmCustomEvent",
          "238:               }",
          "239:             }, customOpts.confirmButtonText || GlobalConfig.i18n('vxe.table.customConfirm'))",
          "",
          "[Added Lines]",
          "221:             h(VxeButtonComponent, {",
          "222:               props: {",
          "223:                 mode: 'text',",
          "224:                 content: customOpts.resetButtonText || GlobalConfig.i18n('vxe.table.customRestore')",
          "225:               },",
          "229:             }),",
          "231:               ? h(VxeButtonComponent, {",
          "232:                 props: {",
          "233:                   mode: 'text',",
          "234:                   content: customOpts.closeButtonText || GlobalConfig.i18n('vxe.table.customClose')",
          "235:                 },",
          "236:                 on: {",
          "237:                   click: _vm.cancelCloseEvent",
          "238:                 }",
          "239:               })",
          "240:               : h(VxeButtonComponent, {",
          "241:                 props: {",
          "242:                   mode: 'text',",
          "243:                   content: customOpts.resetButtonText || GlobalConfig.i18n('vxe.table.customCancel')",
          "244:                 },",
          "248:               }),",
          "249:             customOpts.immediate",
          "250:               ? _e()",
          "251:               : h(VxeButtonComponent, {",
          "252:                 props: {",
          "253:                   mode: 'text',",
          "254:                   status: 'primary',",
          "255:                   content: customOpts.confirmButtonText || GlobalConfig.i18n('vxe.table.customConfirm')",
          "256:                 },",
          "257:                 on: {",
          "258:                   click: _vm.confirmCustomEvent",
          "259:                 }",
          "260:               })",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "469:                         title: GlobalConfig.i18n('vxe.table.allTitle')",
          "470:                       },",
          "471:                       on: {",
          "473:                       }",
          "475:                     }, [",
          "",
          "[Removed Lines]",
          "472:                         click: _vm.allCustomEvent",
          "",
          "[Added Lines]",
          "490:                         click: _vm.allOptionEvent",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "530:         return h('div', {",
          "531:           class: 'vxe-table-custom-popup--footer'",
          "532:         }, [",
          "534:             props: {",
          "535:               content: customOpts.resetButtonText || GlobalConfig.i18n('vxe.custom.cstmRestore')",
          "536:             },",
          "",
          "[Removed Lines]",
          "533:           h('vxe-button', {",
          "",
          "[Added Lines]",
          "551:           h(VxeButtonComponent, {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "538:               click: _vm.resetCustomEvent",
          "539:             }",
          "540:           }),",
          "542:             props: {",
          "543:               content: customOpts.resetButtonText || GlobalConfig.i18n('vxe.custom.cstmCancel')",
          "544:             },",
          "",
          "[Removed Lines]",
          "541:           h('vxe-button', {",
          "",
          "[Added Lines]",
          "559:           h(VxeButtonComponent, {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "546:               click: _vm.cancelCustomEvent",
          "547:             }",
          "548:           }),",
          "550:             props: {",
          "551:               status: 'primary',",
          "552:               content: customOpts.confirmButtonText || GlobalConfig.i18n('vxe.custom.cstmConfirm')",
          "",
          "[Removed Lines]",
          "549:           h('vxe-button', {",
          "",
          "[Added Lines]",
          "567:           h(VxeButtonComponent, {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "637:       $xetable.emitCustomEvent('confirm', evnt)",
          "638:       $xetable.saveCustomStore('confirm')",
          "639:     },",
          "640:     cancelCustomEvent  (evnt) {",
          "641:       const { $xetable } = this",
          "642:       const { customStore, customOpts, customColumnList } = $xetable",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "658:     cancelCloseEvent ({ $event }) {",
          "659:       const { $xetable } = this",
          "660:       $xetable.closeCustom()",
          "661:       $xetable.emitCustomEvent('cancel', $event)",
          "662:     },",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "717:       const { $xetable } = this",
          "718:       const { customOpts } = $xetable",
          "719:       const isChecked = !column.renderVisible",
          "725:       if (customOpts.immediate) {",
          "726:         $xetable.handleCustom()",
          "727:         $xetable.saveCustomStore('update:visible')",
          "728:       }",
          "729:       $xetable.checkCustomStatus()",
          "730:     },",
          "731:     changeFixedOption  (column, colFixed) {",
          "732:       const { $xetable } = this",
          "737:       } else {",
          "741:         }",
          "742:       }",
          "743:     },",
          "752:       const { $xetable, customStore } = this",
          "754:       const { checkMethod } = customOpts",
          "755:       const isAll = !customStore.isAll",
          "763:       $xetable.checkCustomStatus()",
          "764:     },",
          "765:     sortMousedownEvent (evnt) {",
          "",
          "[Removed Lines]",
          "720:       XEUtils.eachTree([column], (item) => {",
          "721:         item.renderVisible = isChecked",
          "722:         item.halfVisible = false",
          "723:       })",
          "724:       this.handleOptionCheck(column)",
          "733:       const { isMaxFixedColumn } = $xetable",
          "734:       if (column.renderFixed === colFixed) {",
          "735:         column.renderFixed = ''",
          "738:         if (!isMaxFixedColumn || column.renderFixed) {",
          "739:           column.renderFixed = colFixed",
          "751:     allCustomEvent () {",
          "753:       const { customOpts, customColumnList } = $xetable",
          "756:       XEUtils.eachTree(customColumnList, (column) => {",
          "757:         if (!checkMethod || checkMethod({ column })) {",
          "758:           column.renderVisible = isAll",
          "759:           column.halfVisible = false",
          "760:         }",
          "761:       })",
          "762:       customStore.isAll = isAll",
          "",
          "[Added Lines]",
          "744:         XEUtils.eachTree([column], (item) => {",
          "745:           item.visible = isChecked",
          "746:           item.renderVisible = isChecked",
          "747:           item.halfVisible = false",
          "748:         })",
          "751:       } else {",
          "752:         XEUtils.eachTree([column], (item) => {",
          "753:           item.renderVisible = isChecked",
          "754:           item.halfVisible = false",
          "755:         })",
          "757:       this.handleOptionCheck(column)",
          "762:       const { isMaxFixedColumn, customOpts } = $xetable",
          "763:       if (customOpts.immediate) {",
          "764:         if (column.renderFixed === colFixed) {",
          "765:           column.fixed = ''",
          "766:           column.renderFixed = ''",
          "767:         } else {",
          "768:           if (!isMaxFixedColumn || column.renderFixed) {",
          "769:             column.fixed = colFixed",
          "770:             column.renderFixed = colFixed",
          "771:           }",
          "772:         }",
          "773:         $xetable.handleCustom()",
          "774:         $xetable.saveCustomStore('update:fixed')",
          "776:         if (column.renderFixed === colFixed) {",
          "777:           column.renderFixed = ''",
          "778:         } else {",
          "779:           if (!isMaxFixedColumn || column.renderFixed) {",
          "780:             column.renderFixed = colFixed",
          "781:           }",
          "785:     allOptionEvent () {",
          "787:       const { customColumnList, customOpts } = $xetable",
          "790:       if (customOpts.immediate) {",
          "791:         XEUtils.eachTree(customColumnList, (column) => {",
          "792:           if (!checkMethod || checkMethod({ column })) {",
          "793:             column.visible = isAll",
          "794:             column.renderVisible = isAll",
          "795:             column.halfVisible = false",
          "796:           }",
          "797:         })",
          "798:         customStore.isAll = isAll",
          "799:         $xetable.handleCustom()",
          "800:         $xetable.saveCustomStore('update:visible')",
          "801:       } else {",
          "802:         XEUtils.eachTree(customColumnList, (column) => {",
          "803:           if (!checkMethod || checkMethod({ column })) {",
          "804:             column.renderVisible = isAll",
          "805:             column.halfVisible = false",
          "806:           }",
          "807:         })",
          "808:         customStore.isAll = isAll",
          "809:       }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "793:     },",
          "794:     sortDragendEvent (evnt) {",
          "795:       const { $xetable, prevDropTrEl } = this",
          "797:       const trEl = evnt.currentTarget",
          "798:       const dragHintEl = this.$refs.dragHintElemRef",
          "799:       if (prevDropTrEl) {",
          "",
          "[Removed Lines]",
          "796:       const { customColumnList } = $xetable",
          "",
          "[Added Lines]",
          "843:       const { customColumnList, customOpts } = $xetable",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "829:       }",
          "830:       removeClass(trEl, 'active--drag-target')",
          "831:       removeClass(trEl, 'active--drag-origin')",
          "832:     },",
          "833:     sortDragoverEvent  (evnt) {",
          "834:       const { $xetable, prevDropTrEl } = this",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "880:       if (customOpts.immediate) {",
          "881:         XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {",
          "882:           if (!parent) {",
          "883:             const sortIndex = index + 1",
          "884:             column.renderSortNumber = sortIndex",
          "885:           }",
          "886:         })",
          "887:         $xetable.handleCustom()",
          "888:         $xetable.saveCustomStore('update:sort')",
          "889:       }",
          "",
          "---------------"
        ],
        "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js": [
          "File: packages/locale/lang/en-US.js -> packages/locale/lang/en-US.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: 'Column settings',",
          "61:       customAll: 'All',",
          "62:       customConfirm: 'Confirm',",
          "63:       customCancel: 'Cancel',",
          "64:       customRestore: 'Restore default',",
          "65:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:       customClose: 'Close',",
          "",
          "---------------"
        ],
        "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js": [
          "File: packages/locale/lang/es-ES.js -> packages/locale/lang/es-ES.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: 'Configuraciones de columna',",
          "61:       customAll: 'Todo',",
          "62:       customConfirm: 'Confirmar',",
          "63:       customCancel: 'Cancel',",
          "64:       customRestore: 'Restore default',",
          "65:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:       customClose: 'Close',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js": [
          "File: packages/locale/lang/ja-JP.js -> packages/locale/lang/ja-JP.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: '\u5217\u8a2d\u5b9a',",
          "61:       customAll: '\u5168\u90e8',",
          "62:       customConfirm: 'OK',",
          "63:       customCancel: 'Cancel',",
          "64:       customRestore: 'Restore default',",
          "65:       maxFixedCol: '\u6700\u5927\u56fa\u5b9a\u5217\u6570\u304c {0} \u3067\u3059\u3002'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:       customClose: '\u5173\u95ed',",
          "",
          "---------------"
        ],
        "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js": [
          "File: packages/locale/lang/pt-BR.js -> packages/locale/lang/pt-BR.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: 'Configura\u00e7\u00f5es de coluna',",
          "61:       customAll: 'Todos',",
          "62:       customConfirm: 'Confirmar',",
          "63:       customCancel: 'Cancel',",
          "64:       customRestore: 'Restore default',",
          "65:       maxFixedCol: 'The maximum number of Freeze columns cannot exceed {0}'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:       customClose: '\u5173\u95ed',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js": [
          "File: packages/locale/lang/zh-CN.js -> packages/locale/lang/zh-CN.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: '\u5217\u8bbe\u7f6e',",
          "61:       customAll: '\u5168\u90e8',",
          "62:       customConfirm: '\u786e\u8ba4',",
          "63:       customCancel: '\u53d6\u6d88',",
          "64:       customRestore: '\u6062\u590d\u9ed8\u8ba4',",
          "65:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6570\u91cf\u4e0d\u80fd\u8d85\u8fc7 {0} \u4e2a'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:       customClose: '\u5173\u95ed',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js": [
          "File: packages/locale/lang/zh-TC.js -> packages/locale/lang/zh-TC.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:       customTitle: '\u5217\u8a2d\u5b9a',",
          "61:       customAll: '\u5168\u90e8',",
          "62:       customConfirm: '\u78ba\u8a8d',",
          "63:       customCancel: '\u53d6\u6d88',",
          "64:       customRestore: '\u6062\u590d\u9ed8\u8ba4',",
          "65:       maxFixedCol: '\u6700\u5927\u51bb\u7ed3\u5217\u7684\u6578\u91cf\u4e0d\u80fd\u8d85\u904e {0} \u500b'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63:       customClose: '\u5173\u95ed',",
          "",
          "---------------"
        ],
        "styles/button.scss||styles/button.scss": [
          "File: styles/button.scss -> styles/button.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   user-select: none;",
          "68:   appearance: none;",
          "69:   @include createAnimationTransition(border, .2s);",
          "70:   &:not(.is--disabled) {",
          "71:     color: $vxe-font-color;",
          "72:     cursor: pointer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:   &.align--left {",
          "71:     text-align: left;",
          "72:   }",
          "73:   &.align--center {",
          "74:     text-align: center;",
          "75:   }",
          "76:   &.align--right {",
          "77:     text-align: right;",
          "78:   }",
          "",
          "---------------"
        ],
        "styles/custom.scss||styles/custom.scss": [
          "File: styles/custom.scss -> styles/custom.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:   flex-direction: row;",
          "147:   flex-shrink: 0;",
          "148:   border-top: 1px solid $vxe-table-popup-border-color;",
          "150:   button {",
          "153:     height: 2.8em;",
          "164:   }",
          "165: }",
          "",
          "[Removed Lines]",
          "149:   text-align: right;",
          "151:     background-color: transparent;",
          "152:     width: 50%;",
          "154:     border: 0;",
          "155:     color: $vxe-font-color;",
          "156:     text-align: center;",
          "157:     cursor: pointer;",
          "158:     &:focus {",
          "159:       outline: none;",
          "160:     }",
          "161:     &:hover {",
          "162:       color: $vxe-primary-color;",
          "163:     }",
          "",
          "[Added Lines]",
          "150:     flex-grow: 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9837bb7f04d478563707eb8ec1499cb51759ce9c",
      "candidate_info": {
        "commit_hash": "9837bb7f04d478563707eb8ec1499cb51759ce9c",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/9837bb7f04d478563707eb8ec1499cb51759ce9c",
        "files": [
          "packages/form/src/form.js"
        ],
        "message": "feature: vxe-form\u589e\u52a0loading\u63d2\u69fd",
        "before_after_code_files": [
          "packages/form/src/form.js||packages/form/src/form.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/form/src/form.js||packages/form/src/form.js": [
          "File: packages/form/src/form.js -> packages/form/src/form.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:         props: {",
          "190:           value: loading",
          "191:         }",
          "",
          "[Removed Lines]",
          "192:       }),",
          "",
          "[Added Lines]",
          "192:       },this.callSlot($scopedSlots.loading, {})),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4973f6c87e6e58073f1a01495458141e1e60989",
      "candidate_info": {
        "commit_hash": "f4973f6c87e6e58073f1a01495458141e1e60989",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/f4973f6c87e6e58073f1a01495458141e1e60989",
        "files": [
          "examples/plugins/table/index.js",
          "examples/views/table/start/Global.vue",
          "examples/views/table/start/I18n.vue",
          "examples/views/table/start/Icons.vue",
          "examples/views/table/start/Use.vue",
          "package.json",
          "packages/all.js",
          "packages/export/index.js",
          "packages/table/src/methods.js",
          "packages/ui/index.d.ts",
          "packages/ui/index.js",
          "packages/v-x-e-table/index.js",
          "packages/v-x-e-table/src/config.js",
          "types/v-x-e-table/index.d.ts"
        ],
        "message": "fix",
        "before_after_code_files": [
          "examples/plugins/table/index.js||examples/plugins/table/index.js",
          "examples/views/table/start/Global.vue||examples/views/table/start/Global.vue",
          "examples/views/table/start/I18n.vue||examples/views/table/start/I18n.vue",
          "examples/views/table/start/Icons.vue||examples/views/table/start/Icons.vue",
          "examples/views/table/start/Use.vue||examples/views/table/start/Use.vue",
          "packages/all.js||packages/all.js",
          "packages/export/index.js||packages/export/index.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/ui/index.d.ts||packages/ui/index.d.ts",
          "packages/ui/index.js||packages/ui/index.js",
          "packages/v-x-e-table/index.js||packages/v-x-e-table/index.js",
          "packages/v-x-e-table/src/config.js||packages/v-x-e-table/src/config.js",
          "types/v-x-e-table/index.d.ts||types/v-x-e-table/index.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/plugins/table/index.js||examples/plugins/table/index.js": [
          "File: examples/plugins/table/index.js -> examples/plugins/table/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: import './formatter'",
          "50:   table: {",
          "51:     exportConfig: {",
          "52:       types: ['csv', 'html', 'xml', 'txt']",
          "",
          "[Removed Lines]",
          "49: VXETable.setup({",
          "",
          "[Added Lines]",
          "49: VXETable.setConfig({",
          "",
          "---------------"
        ],
        "examples/views/table/start/Global.vue||examples/views/table/start/Global.vue": [
          "File: examples/views/table/start/Global.vue -> examples/views/table/start/Global.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:       <pre-code class=\"javascript\">",
          "6:         import VXETable from 'vxe-table'",
          "",
          "[Removed Lines]",
          "8:         VXETable.setup({",
          "",
          "[Added Lines]",
          "8:         VXETable.setConfig({",
          "",
          "---------------"
        ],
        "examples/views/table/start/I18n.vue||examples/views/table/start/I18n.vue": [
          "File: examples/views/table/start/I18n.vue -> examples/views/table/start/I18n.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:         import zhCN from 'vxe-table/lib/locale/lang/zh-CN'",
          "65:         import enUS from 'vxe-table/lib/locale/lang/en-US'",
          "69:           i18n: (key, args) => i18n.t(key, args)",
          "70:         })",
          "",
          "[Removed Lines]",
          "67:         VXETable.setup({",
          "",
          "[Added Lines]",
          "67:         VXETable.setConfig({",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:         new Vue({ i18n }).$mount('#app')",
          "75:         `,",
          "76:         `",
          "79:           translate (key, args) {",
          "",
          "[Removed Lines]",
          "77:         VXETable.setup({",
          "",
          "[Added Lines]",
          "77:         VXETable.setConfig({",
          "",
          "---------------"
        ],
        "examples/views/table/start/Icons.vue||examples/views/table/start/Icons.vue": [
          "File: examples/views/table/start/Icons.vue -> examples/views/table/start/Icons.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:       <pre-code class=\"javascript\">",
          "7:         import VXETable from 'vxe-table'",
          "10:           icon: {",
          "12:             LOADING: 'vxe-icon-spinner roll vxe-loading--default-icon',",
          "",
          "[Removed Lines]",
          "9:         VXETable.setup({",
          "",
          "[Added Lines]",
          "9:         VXETable.setConfig({",
          "",
          "---------------"
        ],
        "examples/views/table/start/Use.vue||examples/views/table/start/Use.vue": [
          "File: examples/views/table/start/Use.vue -> examples/views/table/start/Use.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:         import zhCN from 'vxe-table/lib/locale/lang/zh-CN'",
          "79:           i18n: (key, args) => XEUtils.toFormatString(XEUtils.get(zhCN, key), args)",
          "80:         })",
          "",
          "[Removed Lines]",
          "78:         VXETable.setup({",
          "",
          "[Added Lines]",
          "78:         VXETable.setConfig({",
          "",
          "---------------"
        ],
        "packages/all.js||packages/all.js": [
          "File: packages/all.js -> packages/all.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: export function install (Vue, options) {",
          "86:   if (XEUtils.isPlainObject(options)) {",
          "88:     if (options.theme) {",
          "89:       setTheme(options)",
          "90:     }",
          "",
          "[Removed Lines]",
          "87:     VXETable.config(options)",
          "",
          "[Added Lines]",
          "87:     VXETable.setConfig(options)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93: }",
          "97:   i18n: (key, args) => XEUtils.toFormatString(XEUtils.get(zhCN, key), args)",
          "98: })",
          "",
          "[Removed Lines]",
          "96: VXETable.config({",
          "",
          "[Added Lines]",
          "96: VXETable.setConfig({",
          "",
          "---------------"
        ],
        "packages/export/index.js||packages/export/index.js": [
          "File: packages/export/index.js -> packages/export/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:     VXETable.saveFile = saveFile",
          "22:     VXETable.readFile = readFile",
          "23:     VXETable.print = print",
          "25:       export: {",
          "26:         types: {",
          "27:           csv: 0,",
          "",
          "[Removed Lines]",
          "24:     VXETable.setup({",
          "",
          "[Added Lines]",
          "24:     VXETable.setConfig({",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2778:             const { delMethod, backMethod } = keyboardOpts",
          "2780:             if (keyboardOpts.isDel && (selected.row || selected.column)) {",
          "2781:               if (delMethod) {",
          "2789:               } else {",
          "2790:                 setCellValue(selected.row, selected.column, null)",
          "2791:               }",
          "",
          "[Removed Lines]",
          "2782:                 delMethod({",
          "2783:                   row: selected.row,",
          "2784:                   rowIndex: this.getRowIndex(selected.row),",
          "2785:                   column: selected.column,",
          "2786:                   columnIndex: this.getColumnIndex(selected.column),",
          "2787:                   $table: this",
          "2788:                 })",
          "",
          "[Added Lines]",
          "2781:               const delPaqrams = {",
          "2782:                 row: selected.row,",
          "2783:                 rowIndex: this.getRowIndex(selected.row),",
          "2784:                 column: selected.column,",
          "2785:                 columnIndex: this.getColumnIndex(selected.column),",
          "2786:                 $table: this",
          "2787:               }",
          "2789:                 delMethod(delPaqrams)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2806:                 this.updateFooter()",
          "2807:               }",
          "2808:             } else if (isBack && keyboardOpts.isArrow && treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow) {",
          "2810:               const { parent: parentRow } = XEUtils.findTree(this.afterFullData, item => item === currentRow, { children: childrenField })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2809:               this.emitEvent('cell-delete-value', delPaqrams, evnt)",
          "",
          "---------------"
        ],
        "packages/ui/index.d.ts||packages/ui/index.d.ts": [
          "File: packages/ui/index.d.ts -> packages/ui/index.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import VxeUI from '../v-x-e-table'",
          "3: export * from '../v-x-e-table'",
          "4: export default VxeUI",
          "",
          "---------------"
        ],
        "packages/ui/index.js||packages/ui/index.js": [
          "File: packages/ui/index.js -> packages/ui/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import VxeUI from '../v-x-e-table'",
          "3: export * from '../v-x-e-table'",
          "4: export default VxeUI",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/index.js||packages/v-x-e-table/index.js": [
          "File: packages/v-x-e-table/index.js -> packages/v-x-e-table/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import XEUtils from 'xe-utils'",
          "2: import GlobalConfig from '../v-x-e-table/src/conf'",
          "3: import { interceptor } from './src/interceptor'",
          "4: import { renderer } from './src/renderer'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import DomZIndex from 'dom-zindex'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6: import { menus } from './src/menus'",
          "7: import { formats } from './src/formats'",
          "8: import { validators } from './src/validators'",
          "10: import { setTheme } from './src/theme'",
          "11: import { UtilTools } from '../tools/utils'",
          "12: import { errLog, warnLog } from '../tools/log'",
          "",
          "[Removed Lines]",
          "9: import { setConfig } from './src/config'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:   return rest",
          "49: }",
          "51: class VXETableConfig {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: export const setConfig = (options) => {",
          "55:   if (options) {",
          "56:     if (options.theme) {",
          "57:       setTheme(options)",
          "58:     }",
          "59:     if (options.zIndex) {",
          "60:       DomZIndex.setCurrent(options.zIndex)",
          "61:     }",
          "62:     XEUtils.merge(GlobalConfig, options)",
          "63:   }",
          "64:   return VXETable",
          "65: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:   return setConfig(options)",
          "114: }",
          "116: export const globalStore = {}",
          "118: export const VXETable = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: export function setIcon (options) {",
          "133:   if (options) {",
          "134:     Object.assign(GlobalConfig.icon, options)",
          "135:   }",
          "136:   return VXETable",
          "137: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:   reg,",
          "122:   use,",
          "123:   setConfig,",
          "124:   globalStore,",
          "125:   interceptor,",
          "126:   renderer,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:   setIcon,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "137:   globalConfs",
          "138: }",
          "140: setTheme(globalStore)",
          "142: export * from './src/interceptor'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: export const VxeUI = VXETable",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "144: export * from './src/commands'",
          "145: export * from './src/menus'",
          "146: export * from './src/formats'",
          "149: export default VXETable",
          "",
          "[Removed Lines]",
          "147: export * from './src/config'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/config.js||packages/v-x-e-table/src/config.js": [
          "File: packages/v-x-e-table/src/config.js -> packages/v-x-e-table/src/config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "types/v-x-e-table/index.d.ts||types/v-x-e-table/index.d.ts": [
          "File: types/v-x-e-table/index.d.ts -> types/v-x-e-table/index.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   zIndex?: number;",
          "26:   version?: number;",
          "27:   emptyCell?: string;",
          "31:   table?: any;",
          "32:   grid?: any;",
          "33:   export?: {",
          "",
          "[Removed Lines]",
          "28:   icon?: {",
          "29:     [key: string]: string;",
          "30:   };",
          "",
          "[Added Lines]",
          "28:   icon?: VxeGlobalIcon;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:   [key: string]: any;",
          "55: }",
          "57: export type VxeGlobalConfigMethod = (options?: VXETableConfigOptions) => VxeGlobalStore",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: export interface VxeGlobalIcon {",
          "56:   [ket: string]: string",
          "57: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104: export const setup: VXETableSetupOptions",
          "106: export interface VXETablePluginObject {",
          "107:   install(vxetable: VXETableCore, ...options: any[]): void;",
          "108:   [key: string]: any;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: export function setIcon(options?: VxeGlobalIcon): VXETableCore",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "123:   setConfig: VxeGlobalConfigMethod;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:   setIcon: typeof setIcon",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "200: export const VXETable: VXETableCore",
          "202: export * from './renderer'",
          "203: export * from './interceptor'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: export const VxeUI: VXETableCore",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4f7321a16ce8e54346e2cd86dd30b48f85b3897",
      "candidate_info": {
        "commit_hash": "b4f7321a16ce8e54346e2cd86dd30b48f85b3897",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/b4f7321a16ce8e54346e2cd86dd30b48f85b3897",
        "files": [
          "package.json",
          "packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js",
          "packages/pager/src/pager.js",
          "packages/table/src/header.js",
          "styles/button.scss",
          "styles/custom.scss",
          "styles/grid.scss",
          "styles/input.scss",
          "styles/modal.scss",
          "styles/old-icon.scss",
          "styles/pager.scss",
          "styles/pulldown.scss",
          "styles/select.scss",
          "styles/table.scss",
          "styles/variable.scss"
        ],
        "message": "releases 3.8.22",
        "before_after_code_files": [
          "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js",
          "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js",
          "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js",
          "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js",
          "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js",
          "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js",
          "packages/pager/src/pager.js||packages/pager/src/pager.js",
          "packages/table/src/header.js||packages/table/src/header.js",
          "styles/button.scss||styles/button.scss",
          "styles/custom.scss||styles/custom.scss",
          "styles/grid.scss||styles/grid.scss",
          "styles/input.scss||styles/input.scss",
          "styles/modal.scss||styles/modal.scss",
          "styles/old-icon.scss||styles/old-icon.scss",
          "styles/pager.scss||styles/pager.scss",
          "styles/pulldown.scss||styles/pulldown.scss",
          "styles/select.scss||styles/select.scss",
          "styles/table.scss||styles/table.scss",
          "styles/variable.scss||styles/variable.scss"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "packages/locale/lang/en-US.js||packages/locale/lang/en-US.js": [
          "File: packages/locale/lang/en-US.js -> packages/locale/lang/en-US.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     },",
          "81:     pager: {",
          "82:       goto: 'Go to',",
          "83:       pagesize: '{0}/page',",
          "84:       total: 'Total {0} record',",
          "85:       pageClassifier: '',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:       gotoTitle: 'Number',",
          "",
          "---------------"
        ],
        "packages/locale/lang/es-ES.js||packages/locale/lang/es-ES.js": [
          "File: packages/locale/lang/es-ES.js -> packages/locale/lang/es-ES.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     },",
          "81:     pager: {",
          "82:       goto: 'Ir a',",
          "83:       pagesize: '{0}/p\u00e1gina',",
          "84:       total: 'Total {0} registro',",
          "85:       pageClassifier: '',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:       gotoTitle: 'Number',",
          "",
          "---------------"
        ],
        "packages/locale/lang/ja-JP.js||packages/locale/lang/ja-JP.js": [
          "File: packages/locale/lang/ja-JP.js -> packages/locale/lang/ja-JP.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     },",
          "81:     pager: {",
          "82:       goto: '\u79fb\u52d5',",
          "83:       pagesize: '{0}\u4ef6/\u30da\u30fc\u30b8',",
          "84:       total: '\u5168 {0} \u4ef6',",
          "85:       pageClassifier: '\u30da\u30fc\u30b8',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:       gotoTitle: '\u9875\u6570',",
          "",
          "---------------"
        ],
        "packages/locale/lang/pt-BR.js||packages/locale/lang/pt-BR.js": [
          "File: packages/locale/lang/pt-BR.js -> packages/locale/lang/pt-BR.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     },",
          "81:     pager: {",
          "82:       goto: 'Ir para',",
          "83:       pagesize: '{0}/p\u00e1gina',",
          "84:       total: 'Total de {0} registros',",
          "85:       pageClassifier: '',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:       gotoTitle: 'Number',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-CN.js||packages/locale/lang/zh-CN.js": [
          "File: packages/locale/lang/zh-CN.js -> packages/locale/lang/zh-CN.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     },",
          "81:     pager: {",
          "82:       goto: '\u524d\u5f80',",
          "83:       pagesize: '{0}\u6761/\u9875',",
          "84:       total: '\u5171 {0} \u6761\u8bb0\u5f55',",
          "85:       pageClassifier: '\u9875',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:       gotoTitle: '\u9875\u6570',",
          "",
          "---------------"
        ],
        "packages/locale/lang/zh-TC.js||packages/locale/lang/zh-TC.js": [
          "File: packages/locale/lang/zh-TC.js -> packages/locale/lang/zh-TC.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     },",
          "81:     pager: {",
          "82:       goto: '\u524d\u5f80',",
          "83:       pagesize: '{0}\u9805/\u9801',",
          "84:       total: '\u5171 {0} \u9805\u8a18\u9304',",
          "85:       pageClassifier: '\u9801',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:       gotoTitle: '\u9875\u6570',",
          "",
          "---------------"
        ],
        "packages/pager/src/pager.js||packages/pager/src/pager.js": [
          "File: packages/pager/src/pager.js -> packages/pager/src/pager.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:         isFull ? h('span', {",
          "299:           class: 'vxe-pager--goto-text'",
          "300:         }, GlobalConfig.i18n('vxe.pager.goto')) : null,",
          "302:           class: 'vxe-pager--goto',",
          "309:           },",
          "310:           on: {",
          "312:             keydown: this.jumpKeydownEvent,",
          "313:             blur: this.triggerJumpEvent",
          "314:           }",
          "",
          "[Removed Lines]",
          "301:         h('input', {",
          "303:           domProps: {",
          "304:             value: this.inpCurrPage",
          "305:           },",
          "306:           attrs: {",
          "307:             type: 'text',",
          "308:             autocomplete: 'off'",
          "311:             input: this.jumpInputEvent,",
          "",
          "[Added Lines]",
          "301:         h('vxe-input', {",
          "303:           props: {",
          "304:             value: this.inpCurrPage,",
          "305:             placeholder: GlobalConfig.i18n('vxe.pager.gotoTitle'),",
          "306:             align: 'center',",
          "307:             type: 'integer',",
          "308:             max: this.pageCount,",
          "309:             min: 1,",
          "310:             controls: false",
          "313:             modelValue: (val) => {",
          "314:               this.inpCurrPage = val",
          "315:             },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "448:       this.$emit('update:pageSize', pageSize)",
          "449:       this.$emit('page-change', { type: 'size', pageSize, currentPage })",
          "450:     },",
          "459:         this.nextPage()",
          "462:         this.prevPage()",
          "463:       }",
          "464:     },",
          "467:       const current = value <= 0 ? 1 : value >= this.pageCount ? this.pageCount : value",
          "468:       const currPage = XEUtils.toValueString(current)",
          "470:       this.inpCurrPage = currPage",
          "471:       this.jumpPage(current)",
          "472:     }",
          "",
          "[Removed Lines]",
          "451:     jumpInputEvent (evnt) {",
          "452:       this.inpCurrPage = evnt.target.value",
          "453:     },",
          "454:     jumpKeydownEvent (evnt) {",
          "455:       if (evnt.keyCode === 13) {",
          "456:         this.triggerJumpEvent(evnt)",
          "457:       } else if (evnt.keyCode === 38) {",
          "458:         evnt.preventDefault()",
          "460:       } else if (evnt.keyCode === 40) {",
          "461:         evnt.preventDefault()",
          "465:     triggerJumpEvent (evnt) {",
          "466:       const value = XEUtils.toInteger(evnt.target.value)",
          "469:       evnt.target.value = currPage",
          "",
          "[Added Lines]",
          "455:     jumpKeydownEvent (params) {",
          "456:       const { $event } = params",
          "457:       if ($event.keyCode === 13) {",
          "458:         this.triggerJumpEvent(params)",
          "459:       } else if ($event.keyCode === 38) {",
          "460:         $event.preventDefault()",
          "462:       } else if ($event.keyCode === 40) {",
          "463:         $event.preventDefault()",
          "467:     triggerJumpEvent (params) {",
          "468:       const { $event } = params",
          "469:       const value = XEUtils.toInteger($event.target.value)",
          "472:       $event.target.value = currPage",
          "",
          "---------------"
        ],
        "packages/table/src/header.js||packages/table/src/header.js": [
          "File: packages/table/src/header.js -> packages/table/src/header.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:           }, cols.map((column, $columnIndex) => {",
          "118:             const { type, showHeaderOverflow, headerAlign, align, headerClassName } = column",
          "120:             const isColGroup = column.children && column.children.length",
          "121:             const fixedHiddenColumn = fixedType ? column.fixed !== fixedType && !isColGroup : column.fixed && overflowX",
          "122:             const headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120:             const colid = column.id",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:               thOns.mousedown = evnt => $xetable.triggerHeaderCellMousedownEvent(evnt, params)",
          "146:             }",
          "147:             return h('th', {",
          "149:                 [`col--${headAlign}`]: headAlign,",
          "150:                 [`col--${type}`]: type,",
          "151:                 'col--last': $columnIndex === cols.length - 1,",
          "",
          "[Removed Lines]",
          "148:               class: ['vxe-header--column', column.id, {",
          "",
          "[Added Lines]",
          "149:               class: ['vxe-header--column', colid, {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:                 'col--current': currentColumn === column",
          "160:               }, UtilTools.getClass(headerClassName, params), UtilTools.getClass(headerCellClassName, params)],",
          "161:               attrs: {",
          "163:                 colspan: column.colSpan > 1 ? column.colSpan : null,",
          "164:                 rowspan: column.rowSpan > 1 ? column.rowSpan : null",
          "165:               },",
          "166:               style: headerCellStyle ? (XEUtils.isFunction(headerCellStyle) ? headerCellStyle(params) : headerCellStyle) : null,",
          "167:               on: thOns,",
          "169:             }, [",
          "170:               h('div', {",
          "171:                 class: ['vxe-cell', {",
          "",
          "[Removed Lines]",
          "162:                 colid: column.id,",
          "168:               key: columnKey || columnOpts.useKey || isColGroup ? column.id : $columnIndex",
          "",
          "[Added Lines]",
          "163:                 colid,",
          "169:               key: columnKey || columnOpts.useKey || isColGroup ? colid : $columnIndex",
          "",
          "---------------"
        ],
        "styles/button.scss||styles/button.scss": [
          "File: styles/button.scss -> styles/button.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "262: }",
          "263: .vxe-button--dropdown {",
          "264:   position: relative;",
          "265:   &+.vxe-button-wrapper,",
          "266:   &+.vxe-button.type--button,",
          "267:   &+.vxe-button--dropdown {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:   outline: 0;",
          "",
          "---------------"
        ],
        "styles/custom.scss||styles/custom.scss": [
          "File: styles/custom.scss -> styles/custom.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   flex-grow: 1;",
          "101:   overflow-x: hidden;",
          "102:   overflow-y: auto;",
          "103: }",
          "105: .vxe-table-custom--header,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:   outline: 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221: .vxe-table-custom-popup--body {",
          "222:   overflow: auto;",
          "223:   height: 100%;",
          "224: }",
          "226: .vxe-table-custom-popup--table-wrapper {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:   outline: 0;",
          "",
          "---------------"
        ],
        "styles/grid.scss||styles/grid.scss": [
          "File: styles/grid.scss -> styles/grid.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   .vxe-grid--right-wrapper {",
          "43:     flex-shrink: 0;",
          "44:     overflow: auto;",
          "45:   }",
          "46:   .vxe-grid--table-wrapper {",
          "47:     flex-grow: 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     outline: 0;",
          "",
          "---------------"
        ],
        "styles/input.scss||styles/input.scss": [
          "File: styles/input.scss -> styles/input.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   top: 1px;",
          "87:   right: 0.5em;",
          "88:   height: calc(100% - 2px);",
          "91:   &.is--error {",
          "93:   }",
          "94: }",
          "",
          "[Removed Lines]",
          "89:   color: var($vxe-input-count-color);",
          "90:   background-color: var($vxe-input-count-background-color);",
          "92:     color: var($vxe-input-count-error-color);",
          "",
          "[Added Lines]",
          "89:   color: $vxe-input-count-color;",
          "90:   background-color: $vxe-input-count-background-color;",
          "92:     color: $vxe-input-count-error-color;",
          "",
          "---------------"
        ],
        "styles/modal.scss||styles/modal.scss": [
          "File: styles/modal.scss -> styles/modal.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:   color: $vxe-font-color;",
          "13:   font-family: $vxe-font-family;",
          "14:   transition: top .4s ease-in-out;",
          "15:   &.is--active {",
          "16:     display: block;",
          "17:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:   outline: 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:     text-align: left;",
          "167:     pointer-events: auto;",
          "168:     opacity: 0;",
          "169:     &.is--drag {",
          "170:       cursor: move;",
          "171:      .vxe-modal--body,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:     outline: 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "231:   .vxe-modal--body {",
          "232:     display: flex;",
          "233:     flex-grow: 1;",
          "234:   }",
          "235:   .vxe-modal--header {",
          "236:     display: flex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:     outline: 0;",
          "",
          "---------------"
        ],
        "styles/old-icon.scss||styles/old-icon.scss": [
          "File: styles/old-icon.scss -> styles/old-icon.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     border-width: 0.1em;",
          "93:     border-style: solid;",
          "94:     border-color: inherit;",
          "96:   }",
          "97: }",
          "",
          "[Removed Lines]",
          "95:     background-color: var(--vxe-ui-layout-background-color);",
          "",
          "[Added Lines]",
          "95:     background-color: $vxe-layout-background-color;",
          "",
          "---------------"
        ],
        "styles/pager.scss||styles/pager.scss": [
          "File: styles/pager.scss -> styles/pager.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     line-height: 2em;",
          "153:     display: inline-block;",
          "154:   }",
          "160:   .vxe-pager--sizes > .vxe-select--panel .vxe-select-option {",
          "161:     text-align: center;",
          "162:   }",
          "",
          "[Removed Lines]",
          "155:   .vxe-pager--jump .vxe-pager--goto,",
          "156:   .vxe-pager--sizes > .vxe-input {",
          "157:     height: 2.15em;",
          "158:     line-height: 2.15em;",
          "159:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:       }",
          "245:     }",
          "246:   }",
          "259:   .vxe-pager--jump {",
          "260:     .vxe-pager--goto-text {",
          "261:       margin-right: 0.25em;",
          "",
          "[Removed Lines]",
          "247:   .vxe-pager--jump .vxe-pager--goto {",
          "248:     border-radius: $vxe-border-radius;",
          "249:     border: 1px solid $vxe-input-border-color;",
          "250:     color: $vxe-font-color;",
          "251:     transition: border .2s ease-in-out;",
          "252:     padding: 0 0.4em;",
          "253:     background-color: $vxe-input-background-color;",
          "254:     &:focus {",
          "255:       border: 1px solid $vxe-primary-color;",
          "256:       outline: 0;",
          "257:     }",
          "258:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "264:       margin-left: 0.25em;",
          "265:     }",
          "266:     .vxe-pager--goto {",
          "269:     }",
          "270:   }",
          "271: }",
          "",
          "[Removed Lines]",
          "267:       width: 3.2em;",
          "268:       text-align: center;",
          "",
          "[Added Lines]",
          "250:       width: 4em;",
          "",
          "---------------"
        ],
        "styles/pulldown.scss||styles/pulldown.scss": [
          "File: styles/pulldown.scss -> styles/pulldown.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   padding: 4px 0;",
          "17:   color: $vxe-font-color;",
          "18:   text-align: left;",
          "19:   &:not(.is--transfer) {",
          "20:     min-width: 100%;",
          "21:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:   outline: 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   }",
          "40: }",
          "41: .vxe-pulldown--panel-wrapper {",
          "43: }",
          "45: .vxe-pulldown,",
          "",
          "[Removed Lines]",
          "42:   background-color: var(--vxe-pulldown-panel-background-color);",
          "",
          "[Added Lines]",
          "43:   background-color: $vxe-pulldown-panel-background-color;",
          "",
          "---------------"
        ],
        "styles/select.scss||styles/select.scss": [
          "File: styles/select.scss -> styles/select.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   position: relative;",
          "111:   overflow-x: hidden;",
          "112:   overflow-y: auto;",
          "113:   padding: 4px 0;",
          "114:   max-height: 200px;",
          "115: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   outline: 0;",
          "",
          "---------------"
        ],
        "styles/table.scss||styles/table.scss": [
          "File: styles/table.scss -> styles/table.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: .vxe-table--fixed-right-body-wrapper {",
          "45:   overflow-y: auto;",
          "46:   overflow-x: auto;",
          "47: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   outline: 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: .vxe-table--filter-template {",
          "52:   .vxe-default-input,",
          "53:   .vxe-default-textarea {",
          "55:   }",
          "56:   .vxe-default-input,",
          "57:   .vxe-default-textarea,",
          "",
          "[Removed Lines]",
          "54:     background-color: var(--vxe-ui-layout-background-color);",
          "",
          "[Added Lines]",
          "55:     background-color: $vxe-layout-background-color;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:     outline: 0;",
          "60:     padding: 0 2px;",
          "61:     width: 100%;",
          "65:     &:focus {",
          "67:     }",
          "68:     &[disabled] {",
          "69:       cursor: not-allowed;",
          "71:     }",
          "72:   }",
          "73:   .vxe-default-input,",
          "74:   .vxe-default-textarea,",
          "75:   .vxe-default-select {",
          "77:   }",
          "78:   .vxe-default-input {",
          "79:     &[type=\"date\"]::-webkit-inner-spin-button {",
          "",
          "[Removed Lines]",
          "62:     color: var(--vxe-ui-font-color);",
          "63:     border-radius: var(--vxe-ui-border-radius);",
          "64:     border: 1px solid var(--vxe-ui-input-border-color);",
          "66:       border: 1px solid var(--vxe-ui-font-primary-color);",
          "70:       background-color: var(--vxe-ui-input-disabled-background-color);",
          "76:     height: var(--vxe-ui-input-height-default);",
          "",
          "[Added Lines]",
          "63:     color: $vxe-font-color;",
          "64:     border-radius: $vxe-border-radius;",
          "65:     border: 1px solid $vxe-input-border-color;",
          "67:       border: 1px solid $vxe-primary-color;",
          "71:       background-color: $vxe-input-disabled-background-color;",
          "77:     height: $vxe-input-height-default;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:       height: 24px;",
          "85:     }",
          "86:     &::placeholder {",
          "88:     }",
          "89:   }",
          "90:   .vxe-default-textarea {",
          "",
          "[Removed Lines]",
          "87:       color: var(--vxe-ui-input-placeholder-color);",
          "",
          "[Added Lines]",
          "88:       color: $vxe-input-placeholder-color;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "900:     overflow: hidden;",
          "901:     background-color: inherit;",
          "902:     transition: 0.3s box-shadow;",
          "903:     .vxe-table--body-wrapper {",
          "904:       overflow-x: hidden;",
          "905:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:     outline: 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "940:     &.fixed-right--wrapper {",
          "941:       position: absolute;",
          "942:       top: 0;",
          "943:     }",
          "944:     &.fixed-left--wrapper {",
          "945:       left: 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "945:       outline: 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1099:     z-index: 1;",
          "1100:     &.is--ellipsis {",
          "1101:       overflow: auto;",
          "1102:     }",
          "1103:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1105:       outline: 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1205:     overflow: hidden;",
          "1206:     width: 100%;",
          "1207:     pointer-events: none;",
          "1208:   }",
          "1209:   .vxe-table--empty-block {",
          "1210:     display: none;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1212:     outline: 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1452:   margin-top: -1px;",
          "1453:   &.body--wrapper{",
          "1454:     overflow-x: auto;",
          "1455:   }",
          "1456: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1460:     outline: 0;",
          "",
          "---------------"
        ],
        "styles/variable.scss||styles/variable.scss": [
          "File: styles/variable.scss -> styles/variable.scss",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: $vxe-warning-color: #e6a23c !default;",
          "21: $vxe-danger-color: #f56c6c !default;",
          "23: $vxe-font-lighten-color: lighten($vxe-font-color, 10%) !default;",
          "24: $vxe-primary-lighten-color: lighten($vxe-primary-color, 10%) !default;",
          "25: $vxe-success-lighten-color: lighten($vxe-success-color, 10%) !default;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: $vxe-layout-background-color: #fff !default;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102: $vxe-table-cell-dirty-insert-color: #19A15F !default;",
          "103: $vxe-table-cell-area-border-color: $vxe-primary-color !default;",
          "104: $vxe-table-cell-area-border-width: 1px !default;",
          "105: $vxe-table-cell-main-area-extension-border-color: #fff;",
          "106: $vxe-table-cell-main-area-extension-background-color: $vxe-primary-color !default;",
          "107: $vxe-table-cell-extend-area-border-width: 2px !default;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108: $vxe-table-cell-area-status-border-width: $vxe-table-cell-area-border-width !default;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "99234c053c37d8f6eafd8a236dfd335e946da10d",
      "candidate_info": {
        "commit_hash": "99234c053c37d8f6eafd8a236dfd335e946da10d",
        "repo": "x-extends/vxe-table",
        "commit_url": "https://github.com/x-extends/vxe-table/commit/99234c053c37d8f6eafd8a236dfd335e946da10d",
        "files": [
          "examples/views/table/tree/CRUD.vue",
          "package.json",
          "packages/edit/src/mixin.js",
          "packages/table/src/body.js",
          "packages/table/src/cell.js",
          "packages/table/src/methods.js",
          "packages/table/src/table.js",
          "packages/table/src/util.js",
          "packages/tools/utils.js",
          "packages/v-x-e-table/src/renderer.js",
          "types/table.d.ts",
          "types/v-x-e-table/index.d.ts"
        ],
        "message": "\u5f15\u5165 dom-aindex\uff0c\u591a\u7ec4\u4ef6\u5171\u4eab z-index",
        "before_after_code_files": [
          "examples/views/table/tree/CRUD.vue||examples/views/table/tree/CRUD.vue",
          "packages/edit/src/mixin.js||packages/edit/src/mixin.js",
          "packages/table/src/body.js||packages/table/src/body.js",
          "packages/table/src/cell.js||packages/table/src/cell.js",
          "packages/table/src/methods.js||packages/table/src/methods.js",
          "packages/table/src/table.js||packages/table/src/table.js",
          "packages/table/src/util.js||packages/table/src/util.js",
          "packages/tools/utils.js||packages/tools/utils.js",
          "packages/v-x-e-table/src/renderer.js||packages/v-x-e-table/src/renderer.js",
          "types/table.d.ts||types/table.d.ts",
          "types/v-x-e-table/index.d.ts||types/v-x-e-table/index.d.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/x-extends/vxe-table/pull/1672",
          "https://github.com/wangdaodao/vxe-table/pull/4"
        ],
        "olp_code_files": {
          "patch": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ],
          "candidate": [
            "packages/table/src/body.js||packages/table/src/body.js"
          ]
        }
      },
      "candidate_diff": {
        "examples/views/table/tree/CRUD.vue||examples/views/table/tree/CRUD.vue": [
          "File: examples/views/table/tree/CRUD.vue -> examples/views/table/tree/CRUD.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:       :data=\"tableData\">",
          "26:       <vxe-column type=\"checkbox\" width=\"60\"></vxe-column>",
          "27:       <vxe-column field=\"name\" title=\"Name\" tree-node></vxe-column>",
          "30:       <vxe-column field=\"date\" title=\"Date\" :edit-render=\"{name: '$input', props: {type: 'date'}}\"></vxe-column>",
          "32:         <template #default=\"{ row }\">",
          "35:           <vxe-button type=\"text\" status=\"primary\" @click=\"insertRow(row, 'bottom')\">\u5c3e\u90e8\u63d2\u5165\u5b50\u8282\u70b9</vxe-button>",
          "36:           <vxe-button type=\"text\" status=\"primary\" @click=\"removeRow(row)\">\u5220\u9664\u8282\u70b9</vxe-button>",
          "37:         </template>",
          "",
          "[Removed Lines]",
          "28:       <vxe-column field=\"size\" title=\"Size\" :edit-render=\"{name: 'input'}\"></vxe-column>",
          "29:       <vxe-column field=\"type\" title=\"Type\" :edit-render=\"{name: 'input'}\"></vxe-column>",
          "31:       <vxe-column title=\"\u64cd\u4f5c\" width=\"500\">",
          "33:           <vxe-button type=\"text\" status=\"primary\" @click=\"insertRow(row, 'current')\">\u63d2\u5165\u8282\u70b9</vxe-button>",
          "34:           <vxe-button type=\"text\" status=\"primary\" @click=\"insertRow(row, 'top')\">\u9876\u90e8\u63d2\u5165\u8282\u70b9</vxe-button>",
          "",
          "[Added Lines]",
          "28:       <vxe-column field=\"size\" title=\"Size\" width=\"100\" :edit-render=\"{name: 'input'}\"></vxe-column>",
          "30:       <vxe-column title=\"\u64cd\u4f5c\" width=\"640\">",
          "32:           <vxe-button type=\"text\" status=\"primary\" @click=\"insertRow(row, 'current')\">\u5f53\u524d\u4f4d\u7f6e\u63d2\u5165\u8282\u70b9</vxe-button>",
          "33:           <vxe-button type=\"text\" status=\"primary\" @click=\"insertNextRow(row, 'current')\">\u4e0b\u4e00\u884c\u4f4d\u7f6e\u63d2\u5165\u8282\u70b9</vxe-button>",
          "34:           <vxe-button type=\"text\" status=\"primary\" @click=\"insertRow(row, 'top')\">\u9876\u90e8\u63d2\u5165\u5b50\u8282\u70b9</vxe-button>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:         await $table.setActiveRow(newRow) // \u63d2\u5165\u5b50\u8282\u70b9",
          "288:       }",
          "289:     },",
          "290:     async removeRow (row) {",
          "291:       const $table = this.$refs.xTable",
          "292:       await $table.remove(row)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:     async insertNextRow (currRow, locat) {",
          "291:       const $table = this.$refs.xTable",
          "295:       if (locat === 'current') {",
          "296:         const record = {",
          "297:           name: '\u65b0\u6570\u636e',",
          "298:           id: Date.now(),",
          "299:           parentId: currRow.parentId, // \u7236\u8282\u70b9\u5fc5\u987b\u4e0e\u5f53\u524d\u884c\u4e00\u81f4",
          "300:           date: XEUtils.toDateString(new Date(), 'yyyy-MM-dd')",
          "301:         }",
          "302:         const { row: newRow } = await $table.insertNextAt(record, currRow)",
          "303:         await $table.setActiveRow(newRow) // \u63d2\u5165\u5b50\u8282\u70b9",
          "304:       }",
          "305:     },",
          "",
          "---------------"
        ],
        "packages/edit/src/mixin.js||packages/edit/src/mixin.js": [
          "File: packages/edit/src/mixin.js -> packages/edit/src/mixin.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:       const parentRest = fullAllDataRowIdData[getRowid(_vm, parentRow)]",
          "20:       const parentLevel = parentRest ? parentRest.level : 0",
          "21:       let parentChilds = parentRow[childrenField]",
          "22:       if (!XEUtils.isArray(parentChilds)) {",
          "23:         parentChilds = parentRow[childrenField] = []",
          "24:       }",
          "25:       parentChilds[funcName](item)",
          "26:       const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, $index: -1, items: parentChilds, parent, level: parentLevel + 1 }",
          "27:       fullDataRowIdData[rowid] = rest",
          "28:       fullAllDataRowIdData[rowid] = rest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:       let mapChilds = parentRow[mapChildrenField]",
          "26:       if (!XEUtils.isArray(mapChilds)) {",
          "27:         mapChilds = parentRow[childrenField] = []",
          "28:       }",
          "30:       mapChilds[funcName](item)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:   })",
          "42: }",
          "44: export default {",
          "45:   methods: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: function handleInsertRowAt (_vm, records, row, isInsertNextRow) {",
          "50:   const { tableFullTreeData, mergeList, afterFullData, editStore, tableFullData, treeConfig, fullDataRowIdData, fullAllDataRowIdData, treeOpts } = _vm",
          "51:   const { transform, rowField, mapChildrenField } = treeOpts",
          "52:   const childrenField = treeOpts.children || treeOpts.childrenField",
          "53:   if (!XEUtils.isArray(records)) {",
          "54:     records = [records]",
          "55:   }",
          "56:   const newRecords = _vm.defineField(records.map(record => Object.assign(treeConfig && transform ? { [mapChildrenField]: [], [childrenField]: [] } : {}, record)))",
          "57:   if (!row) {",
          "59:     if (treeConfig && transform) {",
          "60:       insertTreeRow(_vm, newRecords, false)",
          "61:     } else {",
          "62:       afterFullData.unshift(...newRecords)",
          "63:       tableFullData.unshift(...newRecords)",
          "65:       mergeList.forEach(mergeItem => {",
          "66:         const { row: mergeRowIndex } = mergeItem",
          "67:         if (mergeRowIndex > 0) {",
          "68:           mergeItem.row = mergeRowIndex + newRecords.length",
          "69:         }",
          "70:       })",
          "71:     }",
          "72:   } else {",
          "73:     if (row === -1) {",
          "75:       if (treeConfig && transform) {",
          "76:         insertTreeRow(_vm, newRecords, true)",
          "77:       } else {",
          "78:         afterFullData.push(...newRecords)",
          "79:         tableFullData.push(...newRecords)",
          "81:         mergeList.forEach(mergeItem => {",
          "82:           const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem",
          "83:           if (mergeRowIndex + mergeRowspan > afterFullData.length) {",
          "84:             mergeItem.rowspan = mergeRowspan + newRecords.length",
          "85:           }",
          "86:         })",
          "87:       }",
          "88:     } else {",
          "90:       if (treeConfig && transform) {",
          "91:         const matchMapObj = XEUtils.findTree(tableFullTreeData, item => row[rowField] === item[rowField], { children: mapChildrenField })",
          "92:         if (matchMapObj) {",
          "93:           const { parent: parentRow } = matchMapObj",
          "94:           const parentMapChilds = parentRow ? parentRow[mapChildrenField] : tableFullTreeData",
          "95:           const parentRest = fullAllDataRowIdData[getRowid(_vm, parentRow)]",
          "96:           const parentLevel = parentRest ? parentRest.level : 0",
          "97:           newRecords.forEach((item, i) => {",
          "98:             const rowid = getRowid(_vm, item)",
          "99:             if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "100:               if (item[treeOpts.parentField]) {",
          "101:                 if (parentRow && item[treeOpts.parentField] !== parentRow[rowField]) {",
          "102:                   errLog('vxe.error.errProp', [`${treeOpts.parentField}=${item[treeOpts.parentField]}`, `${treeOpts.parentField}=${parentRow[rowField]}`])",
          "103:                 }",
          "104:               }",
          "105:             }",
          "106:             if (parentRow) {",
          "107:               item[treeOpts.parentField] = parentRow[rowField]",
          "108:             }",
          "109:             let targetIndex = matchMapObj.index + i",
          "110:             if (isInsertNextRow) {",
          "111:               targetIndex = targetIndex + 1",
          "112:             }",
          "113:             parentMapChilds.splice(targetIndex, 0, item)",
          "114:             const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, $index: -1, items: parentMapChilds, parent: parentRow, level: parentLevel + 1 }",
          "115:             fullDataRowIdData[rowid] = rest",
          "116:             fullAllDataRowIdData[rowid] = rest",
          "117:           })",
          "120:           if (parentRow) {",
          "121:             const matchObj = XEUtils.findTree(tableFullTreeData, item => row[rowField] === item[rowField], { children: childrenField })",
          "122:             if (matchObj) {",
          "123:               const parentChilds = matchObj.items",
          "124:               let targetIndex = matchObj.index",
          "125:               if (isInsertNextRow) {",
          "126:                 targetIndex = targetIndex + 1",
          "127:               }",
          "128:               parentChilds.splice(targetIndex, 0, ...newRecords)",
          "129:             }",
          "130:           }",
          "131:         } else {",
          "132:           if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "133:             warnLog('vxe.error.unableInsert')",
          "134:           }",
          "135:           insertTreeRow(_vm, newRecords, true)",
          "136:         }",
          "137:       } else {",
          "138:         if (treeConfig) {",
          "139:           throw new Error(getLog('vxe.error.noTree', ['insert']))",
          "140:         }",
          "141:         let afIndex = -1",
          "143:         if (XEUtils.isNumber(row)) {",
          "144:           if (row < afterFullData.length) {",
          "145:             afIndex = row",
          "146:           }",
          "147:         } else {",
          "148:           afIndex = _vm.findRowIndexOf(afterFullData, row)",
          "149:         }",
          "151:         if (isInsertNextRow) {",
          "152:           afIndex = Math.max(afterFullData.length, afIndex + 1)",
          "153:         }",
          "154:         if (afIndex === -1) {",
          "155:           throw new Error(errLog('vxe.error.unableInsert'))",
          "156:         }",
          "157:         afterFullData.splice(afIndex, 0, ...newRecords)",
          "158:         tableFullData.splice(_vm.findRowIndexOf(tableFullData, row), 0, ...newRecords)",
          "160:         mergeList.forEach(mergeItem => {",
          "161:           const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem",
          "162:           if (mergeRowIndex > afIndex) {",
          "163:             mergeItem.row = mergeRowIndex + newRecords.length",
          "164:           } else if (mergeRowIndex + mergeRowspan > afIndex) {",
          "165:             mergeItem.rowspan = mergeRowspan + newRecords.length",
          "166:           }",
          "167:         })",
          "168:       }",
          "169:     }",
          "170:   }",
          "171:   const { insertList, insertMaps } = editStore",
          "172:   newRecords.forEach(newRow => {",
          "173:     const rowid = getRowid(_vm, newRow)",
          "174:     insertMaps[rowid] = newRow",
          "175:   })",
          "176:   insertList.unshift(...newRecords)",
          "177:   _vm.cacheRowMap()",
          "178:   _vm.updateScrollYStatus()",
          "179:   _vm.handleTableData(treeConfig && transform)",
          "180:   if (!(treeConfig && transform)) {",
          "181:     _vm.updateAfterDataIndex()",
          "182:   }",
          "183:   _vm.updateFooter()",
          "184:   _vm.checkSelectionStatus()",
          "185:   if (_vm.scrollYLoad) {",
          "186:     _vm.updateScrollYSpace()",
          "187:   }",
          "188:   return _vm.$nextTick().then(() => {",
          "189:     _vm.updateCellAreas()",
          "190:     return _vm.recalculate()",
          "191:   }).then(() => {",
          "192:     return {",
          "193:       row: newRecords.length ? newRecords[newRecords.length - 1] : null,",
          "194:       rows: newRecords",
          "195:     }",
          "196:   })",
          "197: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:     _insert (records) {",
          "53:     },",
          "",
          "[Removed Lines]",
          "52:       return this.insertAt(records)",
          "",
          "[Added Lines]",
          "207:       return handleInsertRowAt(this, records, null)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     _insertAt (records, row) {",
          "188:     },",
          "",
          "[Removed Lines]",
          "63:       const { tableFullTreeData, mergeList, afterFullData, editStore, tableFullData, treeConfig, fullDataRowIdData, fullAllDataRowIdData, treeOpts } = this",
          "64:       const { transform, rowField, mapChildrenField } = treeOpts",
          "65:       if (!XEUtils.isArray(records)) {",
          "66:         records = [records]",
          "67:       }",
          "68:       const newRecords = this.defineField(records.map(record => Object.assign({}, record)))",
          "69:       if (!row) {",
          "71:         if (treeConfig && transform) {",
          "72:           insertTreeRow(this, newRecords, false)",
          "73:         } else {",
          "74:           afterFullData.unshift(...newRecords)",
          "75:           tableFullData.unshift(...newRecords)",
          "77:           mergeList.forEach(mergeItem => {",
          "78:             const { row: mergeRowIndex } = mergeItem",
          "79:             if (mergeRowIndex > 0) {",
          "80:               mergeItem.row = mergeRowIndex + newRecords.length",
          "81:             }",
          "82:           })",
          "83:         }",
          "84:       } else {",
          "85:         if (row === -1) {",
          "87:           if (treeConfig && transform) {",
          "88:             insertTreeRow(this, newRecords, true)",
          "89:           } else {",
          "90:             afterFullData.push(...newRecords)",
          "91:             tableFullData.push(...newRecords)",
          "93:             mergeList.forEach(mergeItem => {",
          "94:               const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem",
          "95:               if (mergeRowIndex + mergeRowspan > afterFullData.length) {",
          "96:                 mergeItem.rowspan = mergeRowspan + newRecords.length",
          "97:               }",
          "98:             })",
          "99:           }",
          "100:         } else {",
          "102:           if (treeConfig && transform) {",
          "103:             const matchObj = XEUtils.findTree(tableFullTreeData, item => row[rowField] === item[rowField], { children: mapChildrenField })",
          "104:             if (matchObj) {",
          "105:               const { parent: parentRow } = matchObj",
          "106:               const parentChilds = matchObj.items",
          "107:               const parentRest = fullAllDataRowIdData[getRowid(this, parentRow)]",
          "108:               const parentLevel = parentRest ? parentRest.level : 0",
          "109:               newRecords.forEach((item, i) => {",
          "110:                 const rowid = getRowid(this, item)",
          "111:                 if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "112:                   if (item[treeOpts.parentField]) {",
          "113:                     if (parentRow && item[treeOpts.parentField] !== parentRow[rowField]) {",
          "114:                       errLog('vxe.error.errProp', [`${treeOpts.parentField}=${item[treeOpts.parentField]}`, `${treeOpts.parentField}=${parentRow[rowField]}`])",
          "115:                     }",
          "116:                   }",
          "117:                 }",
          "118:                 if (parentRow) {",
          "119:                   item[treeOpts.parentField] = parentRow[rowField]",
          "120:                 }",
          "121:                 parentChilds.splice(matchObj.index + i, 0, item)",
          "122:                 const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, $index: -1, items: parentChilds, parent: parentRow, level: parentLevel + 1 }",
          "123:                 fullDataRowIdData[rowid] = rest",
          "124:                 fullAllDataRowIdData[rowid] = rest",
          "125:               })",
          "126:             } else {",
          "127:               if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "128:                 warnLog('vxe.error.unableInsert')",
          "129:               }",
          "130:               insertTreeRow(this, newRecords, true)",
          "131:             }",
          "132:           } else {",
          "133:             if (treeConfig) {",
          "134:               throw new Error(getLog('vxe.error.noTree', ['insert']))",
          "135:             }",
          "136:             let afIndex = -1",
          "138:             if (XEUtils.isNumber(row)) {",
          "139:               if (row < afterFullData.length) {",
          "140:                 afIndex = row",
          "141:               }",
          "142:             } else {",
          "143:               afIndex = this.findRowIndexOf(afterFullData, row)",
          "144:             }",
          "145:             if (afIndex === -1) {",
          "146:               throw new Error(errLog('vxe.error.unableInsert'))",
          "147:             }",
          "148:             afterFullData.splice(afIndex, 0, ...newRecords)",
          "149:             tableFullData.splice(this.findRowIndexOf(tableFullData, row), 0, ...newRecords)",
          "151:             mergeList.forEach(mergeItem => {",
          "152:               const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem",
          "153:               if (mergeRowIndex > afIndex) {",
          "154:                 mergeItem.row = mergeRowIndex + newRecords.length",
          "155:               } else if (mergeRowIndex + mergeRowspan > afIndex) {",
          "156:                 mergeItem.rowspan = mergeRowspan + newRecords.length",
          "157:               }",
          "158:             })",
          "159:           }",
          "160:         }",
          "161:       }",
          "162:       const { insertList, insertMaps } = editStore",
          "163:       newRecords.forEach(newRow => {",
          "164:         const rowid = getRowid(this, newRow)",
          "165:         insertMaps[rowid] = newRow",
          "166:       })",
          "167:       insertList.unshift(...newRecords)",
          "168:       this.cacheRowMap()",
          "169:       this.updateScrollYStatus()",
          "170:       this.handleTableData(treeConfig && transform)",
          "171:       if (!(treeConfig && transform)) {",
          "172:         this.updateAfterDataIndex()",
          "173:       }",
          "174:       this.updateFooter()",
          "175:       this.checkSelectionStatus()",
          "176:       if (this.scrollYLoad) {",
          "177:         this.updateScrollYSpace()",
          "178:       }",
          "179:       return this.$nextTick().then(() => {",
          "180:         this.updateCellAreas()",
          "181:         return this.recalculate()",
          "182:       }).then(() => {",
          "183:         return {",
          "184:           row: newRecords.length ? newRecords[newRecords.length - 1] : null,",
          "185:           rows: newRecords",
          "186:         }",
          "187:       })",
          "",
          "[Added Lines]",
          "219:       return handleInsertRowAt(this, records, row)",
          "220:     },",
          "221:     _insertNextAt (records, row) {",
          "222:       return handleInsertRowAt(this, records, row, true)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "195:     _remove (rows) {",
          "196:       const { afterFullData, tableFullData, tableFullTreeData, treeConfig, mergeList, editStore, checkboxOpts, selectCheckboxRows, isInsertByRow, treeOpts } = this",
          "198:       const { actived, removeList, insertList, insertMaps } = editStore",
          "199:       const { checkField } = checkboxOpts",
          "201:       if (!rows) {",
          "202:         rows = tableFullData",
          "203:       } else if (!XEUtils.isArray(rows)) {",
          "",
          "[Removed Lines]",
          "197:       const { transform } = treeOpts",
          "200:       let rest = []",
          "",
          "[Added Lines]",
          "232:       const { transform, mapChildrenField } = treeOpts",
          "233:       const childrenField = treeOpts.children || treeOpts.childrenField",
          "236:       let delList = []",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "220:       }",
          "222:       if (tableFullData === rows) {",
          "224:         this.tableFullData = []",
          "225:         this.afterFullData = []",
          "226:         this.clearMergeCells()",
          "",
          "[Removed Lines]",
          "223:         rows = rest = tableFullData.slice(0)",
          "",
          "[Added Lines]",
          "259:         rows = delList = tableFullData.slice(0)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "229:         if (treeConfig && transform) {",
          "230:           rows.forEach((row) => {",
          "231:             const rowid = getRowid(this, row)",
          "233:             if (matchObj) {",
          "236:             }",
          "237:             const afIndex = this.findRowIndexOf(afterFullData, row)",
          "238:             if (afIndex > -1) {",
          "",
          "[Removed Lines]",
          "232:             const matchObj = XEUtils.findTree(tableFullTreeData, item => rowid === getRowid(this, item), treeOpts)",
          "234:               const rItems = matchObj.items.splice(matchObj.index, 1)",
          "235:               rest.push(rItems[0])",
          "",
          "[Added Lines]",
          "268:             const matchMapObj = XEUtils.findTree(tableFullTreeData, item => rowid === getRowid(this, item), { children: mapChildrenField })",
          "269:             if (matchMapObj) {",
          "270:               const rItems = matchMapObj.items.splice(matchMapObj.index, 1)",
          "271:               delList.push(rItems[0])",
          "272:             }",
          "273:             const matchObj = XEUtils.findTree(tableFullTreeData, item => rowid === getRowid(this, item), { children: childrenField })",
          "275:               matchObj.items.splice(matchObj.index, 1)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "244:             const tfIndex = this.findRowIndexOf(tableFullData, row)",
          "245:             if (tfIndex > -1) {",
          "246:               const rItems = tableFullData.splice(tfIndex, 1)",
          "248:             }",
          "249:             const afIndex = this.findRowIndexOf(afterFullData, row)",
          "250:             if (afIndex > -1) {",
          "",
          "[Removed Lines]",
          "247:               rest.push(rItems[0])",
          "",
          "[Added Lines]",
          "287:               delList.push(rItems[0])",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "289:         this.updateCellAreas()",
          "290:         return this.recalculate()",
          "291:       }).then(() => {",
          "293:       })",
          "294:     },",
          "",
          "[Removed Lines]",
          "292:         return { row: rest.length ? rest[rest.length - 1] : null, rows: rest }",
          "",
          "[Added Lines]",
          "332:         return { row: delList.length ? delList[delList.length - 1] : null, rows: delList }",
          "",
          "---------------"
        ],
        "packages/table/src/body.js||packages/table/src/body.js": [
          "File: packages/table/src/body.js -> packages/table/src/body.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: const renderType = 'body'",
          "13:   return $xetable._isResize || ($xetable.lastScrollTime && Date.now() < $xetable.lastScrollTime + $xetable.delayHover)",
          "14: }",
          "",
          "[Removed Lines]",
          "12: function isOperateMouse ($xetable) {",
          "",
          "[Added Lines]",
          "12: function isVMScrollProcess ($xetable) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:   if (showTitle || showTooltip || showAllTip || bindMouseenter || tooltipConfig) {",
          "124:     tdOns.mouseenter = evnt => {",
          "126:         return",
          "127:       }",
          "128:       if (showTitle) {",
          "",
          "[Removed Lines]",
          "125:       if (isOperateMouse($xetable)) {",
          "",
          "[Added Lines]",
          "125:       if (isVMScrollProcess($xetable)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:   if (showTooltip || showAllTip || bindMouseleave || tooltipConfig) {",
          "141:     tdOns.mouseleave = evnt => {",
          "143:         return",
          "144:       }",
          "145:       if (showTooltip || showAllTip) {",
          "",
          "[Removed Lines]",
          "142:       if (isOperateMouse($xetable)) {",
          "",
          "[Added Lines]",
          "142:       if (isVMScrollProcess($xetable)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "324:     if (rowOpts.isHover || highlightHoverRow) {",
          "325:       trOn.mouseenter = evnt => {",
          "327:           return",
          "328:         }",
          "329:         $xetable.triggerHoverEvent(evnt, { row, rowIndex })",
          "330:       }",
          "331:       trOn.mouseleave = () => {",
          "333:           return",
          "334:         }",
          "335:         $xetable.clearHoverRow()",
          "",
          "[Removed Lines]",
          "326:         if (isOperateMouse($xetable)) {",
          "332:         if (isOperateMouse($xetable)) {",
          "",
          "[Added Lines]",
          "326:         if (isVMScrollProcess($xetable)) {",
          "332:         if (isVMScrollProcess($xetable)) {",
          "",
          "---------------"
        ],
        "packages/table/src/cell.js||packages/table/src/cell.js": [
          "File: packages/table/src/cell.js -> packages/table/src/cell.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "471:   },",
          "472:   renderCheckboxCellByProp (h, params) {",
          "473:     const { $table, row, column, isHidden } = params",
          "476:     const { slots } = column",
          "477:     const defaultSlot = slots ? slots.default : null",
          "478:     const checkboxSlot = slots ? slots.checkbox : null",
          "480:     let isChecked = false",
          "481:     const isVisible = !visibleMethod || visibleMethod({ row })",
          "482:     let isDisabled = !!checkMethod",
          "",
          "[Removed Lines]",
          "474:     const { treeConfig, treeIndeterminates } = $table",
          "475:     const { labelField, checkField, halfField, checkMethod, visibleMethod } = $table.checkboxOpts",
          "479:     let indeterminate = false",
          "",
          "[Added Lines]",
          "474:     const { treeConfig, treeIndeterminates, checkboxOpts } = $table",
          "475:     const { labelField, checkField, checkMethod, visibleMethod } = checkboxOpts",
          "476:     const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField",
          "480:     let isIndeterminate = false",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "495:         isDisabled = !checkMethod({ row })",
          "496:       }",
          "497:       if (treeConfig) {",
          "499:       }",
          "500:     }",
          "502:     if (checkboxSlot) {",
          "503:       return $table.callSlot(checkboxSlot, checkboxParams, h)",
          "504:     }",
          "",
          "[Removed Lines]",
          "498:         indeterminate = $table.findRowIndexOf(treeIndeterminates, row) > -1",
          "501:     const checkboxParams = { ...params, checked: isChecked, disabled: isDisabled, visible: isVisible, indeterminate }",
          "",
          "[Added Lines]",
          "499:         isIndeterminate = $table.findRowIndexOf(treeIndeterminates, row) > -1",
          "502:     const checkboxParams = { ...params, checked: isChecked, disabled: isDisabled, visible: isVisible, indeterminate: isIndeterminate }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "506:     if (isVisible) {",
          "507:       checkVNs.push(",
          "508:         h('span', {",
          "510:         })",
          "511:       )",
          "512:     }",
          "",
          "[Removed Lines]",
          "509:           class: ['vxe-checkbox--icon', indeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "",
          "[Added Lines]",
          "510:           class: ['vxe-checkbox--icon', isIndeterminate ? GlobalConfig.icon.TABLE_CHECKBOX_INDETERMINATE : (isChecked ? GlobalConfig.icon.TABLE_CHECKBOX_CHECKED : GlobalConfig.icon.TABLE_CHECKBOX_UNCHECKED)]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "522:         class: ['vxe-cell--checkbox', {",
          "523:           'is--checked': isChecked,",
          "524:           'is--disabled': isDisabled,",
          "526:         }],",
          "527:         on",
          "528:       }, checkVNs)",
          "",
          "[Removed Lines]",
          "525:           'is--indeterminate': halfField && !isChecked ? row[halfField] : indeterminate",
          "",
          "[Added Lines]",
          "526:           'is--indeterminate': indeterminateField && !isChecked ? row[indeterminateField] : isIndeterminate",
          "",
          "---------------"
        ],
        "packages/table/src/methods.js||packages/table/src/methods.js": [
          "File: packages/table/src/methods.js -> packages/table/src/methods.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3121:   handleCheckedAllCheckboxRow (value, isForce) {",
          "3122:     const { afterFullData, treeConfig, treeOpts, selectCheckboxRows, checkboxReserveRowMap, checkboxOpts } = this",
          "3123:     const { checkField, reserve, checkStrictly, checkMethod } = checkboxOpts",
          "3124:     let selectRows = []",
          "3125:     const beforeSelection = treeConfig ? [] : selectCheckboxRows.filter(row => this.findRowIndexOf(afterFullData, row) === -1)",
          "3126:     if (checkStrictly) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3124:     const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3138:             }",
          "3139:             XEUtils.set(row, checkField, value)",
          "3140:           }",
          "3141:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3142:           if (treeConfig && indeterminateField) {",
          "3143:             XEUtils.set(row, indeterminateField, false)",
          "3144:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3223:   },",
          "3224:   checkSelectionStatus () {",
          "3225:     const { afterFullData, selectCheckboxRows, treeIndeterminates, checkboxOpts, treeConfig } = this",
          "3227:     if (!checkStrictly) {",
          "3228:       const disableRows = []",
          "3229:       const checkRows = []",
          "",
          "[Removed Lines]",
          "3226:     const { checkField, halfField, checkStrictly, checkMethod } = checkboxOpts",
          "",
          "[Added Lines]",
          "3230:     const { checkField, checkStrictly, checkMethod } = checkboxOpts",
          "3231:     const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3248:         )",
          "3249:         isAllSelected = isAllResolve && afterFullData.length !== disableRows.length",
          "3250:         if (treeConfig) {",
          "3253:           } else {",
          "3254:             isIndeterminate = !isAllSelected && afterFullData.some(row => XEUtils.get(row, checkField) || this.findRowIndexOf(treeIndeterminates, row) > -1)",
          "3255:           }",
          "3256:         } else {",
          "3259:           } else {",
          "3260:             isIndeterminate = !isAllSelected && afterFullData.some(row => XEUtils.get(row, checkField))",
          "3261:           }",
          "",
          "[Removed Lines]",
          "3251:           if (halfField) {",
          "3252:             isIndeterminate = !isAllSelected && afterFullData.some(row => XEUtils.get(row, checkField) || XEUtils.get(row, halfField) || this.findRowIndexOf(treeIndeterminates, row) > -1)",
          "3257:           if (halfField) {",
          "3258:             isIndeterminate = !isAllSelected && afterFullData.some(row => XEUtils.get(row, checkField) || XEUtils.get(row, halfField))",
          "",
          "[Added Lines]",
          "3256:           if (indeterminateField) {",
          "3257:             isIndeterminate = !isAllSelected && afterFullData.some(row => XEUtils.get(row, checkField) || XEUtils.get(row, indeterminateField) || this.findRowIndexOf(treeIndeterminates, row) > -1)",
          "3262:           if (indeterminateField) {",
          "3263:             isIndeterminate = !isAllSelected && afterFullData.some(row => XEUtils.get(row, checkField) || XEUtils.get(row, indeterminateField))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3428:   clearCheckboxRow () {",
          "3429:     const { tableFullData, treeConfig, treeOpts, checkboxOpts } = this",
          "3430:     const { checkField, reserve } = checkboxOpts",
          "3431:     if (checkField) {",
          "3432:       if (treeConfig) {",
          "3434:       } else {",
          "3436:       }",
          "3437:     }",
          "3438:     if (reserve) {",
          "",
          "[Removed Lines]",
          "3433:         XEUtils.eachTree(tableFullData, item => XEUtils.set(item, checkField, false), treeOpts)",
          "3435:         tableFullData.forEach(item => XEUtils.set(item, checkField, false))",
          "",
          "[Added Lines]",
          "3436:     const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField",
          "3438:       const handleClearChecked = (item) => {",
          "3439:         if (treeConfig && indeterminateField) {",
          "3440:           XEUtils.set(item, indeterminateField, false)",
          "3441:         }",
          "3442:         XEUtils.set(item, checkField, false)",
          "3443:       }",
          "3445:         XEUtils.eachTree(tableFullData, handleClearChecked, treeOpts)",
          "3447:         tableFullData.forEach(handleClearChecked)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4928: }",
          "4933: funcs.forEach(name => {",
          "4934:   Methods[name] = function (...args) {",
          "",
          "[Removed Lines]",
          "4931: const funcs = 'setFilter,openFilter,clearFilter,getCheckedFilters,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,openPrint,exportData,openImport,importData,saveFile,readFile,importByFile,print'.split(',')",
          "",
          "[Added Lines]",
          "4943: const funcs = 'setFilter,openFilter,clearFilter,getCheckedFilters,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,getCopyCellAreas,clearCopyCellArea,setCellAreas,openFind,openReplace,closeFNR,getSelectedCell,clearSelected,insert,insertAt,insertNextAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearEdit,clearActived,getEditRecord,getActiveRecord,isEditByRow,isActiveByRow,setEditRow,setActiveRow,setEditCell,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,openPrint,exportData,openImport,importData,saveFile,readFile,importByFile,print'.split(',')",
          "",
          "---------------"
        ],
        "packages/table/src/table.js||packages/table/src/table.js": [
          "File: packages/table/src/table.js -> packages/table/src/table.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "885:       if (this.editConfig && this.editOpts.activeMethod) {",
          "886:         warnLog('vxe.error.delProp', ['table.edit-config.activeMethod', 'table.edit-config.beforeEditMethod'])",
          "887:       }",
          "888:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "888:       if (this.treeConfig && this.checkboxOpts.isShiftKey) {",
          "889:         errLog('vxe.error.errConflicts', ['tree-config', 'checkbox-config.isShiftKey'])",
          "890:       }",
          "891:       if (this.checkboxOpts.halfField) {",
          "892:         warnLog('vxe.error.delProp', ['checkbox-config.halfField', 'checkbox-config.indeterminateField'])",
          "893:       }",
          "",
          "---------------"
        ],
        "packages/table/src/util.js||packages/table/src/util.js": [
          "File: packages/table/src/util.js -> packages/table/src/util.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:   const { treeOpts } = $table",
          "161:   const childrenField = treeOpts.children || treeOpts.childrenField",
          "162:   const rowChildren = prevRow[childrenField]",
          "164:     for (let index = 0; index < rowChildren.length; index++) {",
          "165:       count += countTreeExpand(rowChildren[index], params)",
          "166:     }",
          "",
          "[Removed Lines]",
          "163:   if ($table.isTreeExpandByRow(prevRow)) {",
          "",
          "[Added Lines]",
          "163:   if (rowChildren && $table.isTreeExpandByRow(prevRow)) {",
          "",
          "---------------"
        ],
        "packages/tools/utils.js||packages/tools/utils.js": [
          "File: packages/tools/utils.js -> packages/tools/utils.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import XEUtils from 'xe-utils'",
          "2: import GlobalConfig from '../v-x-e-table/src/conf'",
          "3: import { warnLog, errLog } from '../tools/log'",
          "8: export function isEnableConf (conf) {",
          "9:   return conf && conf.enabled !== false",
          "10: }",
          "",
          "[Removed Lines]",
          "5: let zindexIndex = 0",
          "6: let lastZindex = 1",
          "",
          "[Added Lines]",
          "3: import DomZIndex from 'dom-zindex'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: export const UtilTools = {",
          "33:   nextZIndex () {",
          "36:   },",
          "37:   getLastZIndex () {",
          "39:   },",
          "40:   getColumnList,",
          "41:   getClass (property, params) {",
          "",
          "[Removed Lines]",
          "34:     lastZindex = GlobalConfig.zIndex + zindexIndex++",
          "35:     return lastZindex",
          "38:     return lastZindex",
          "",
          "[Added Lines]",
          "32:     return DomZIndex.getNext()",
          "35:     return DomZIndex.getCurrent()",
          "",
          "---------------"
        ],
        "packages/v-x-e-table/src/renderer.js||packages/v-x-e-table/src/renderer.js": [
          "File: packages/v-x-e-table/src/renderer.js -> packages/v-x-e-table/src/renderer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   XEUtils.objectEach(nativeEvents, (func, key) => {",
          "105:     nativeOns[key] = function (...args) {",
          "106:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "109:         }",
          "110:       }",
          "111:       func(params, ...args)",
          "",
          "[Removed Lines]",
          "107:         if (!XEUtils.isFunction(key)) {",
          "108:           errLog('vxe.error.errFunc', [key])",
          "",
          "[Added Lines]",
          "107:         if (!XEUtils.isFunction(func)) {",
          "108:           errLog('vxe.error.errFunc', [func])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:   XEUtils.objectEach(events, (func, key) => {",
          "124:     ons[key] = function (...args) {",
          "125:       if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {",
          "128:         }",
          "129:       }",
          "130:       func(params, ...args)",
          "",
          "[Removed Lines]",
          "126:         if (!XEUtils.isFunction(key)) {",
          "127:           errLog('vxe.error.errFunc', [key])",
          "",
          "[Added Lines]",
          "126:         if (!XEUtils.isFunction(func)) {",
          "127:           errLog('vxe.error.errFunc', [func])",
          "",
          "---------------"
        ],
        "types/table.d.ts||types/table.d.ts": [
          "File: types/table.d.ts -> types/table.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "868:   insertAt(records: RecordInfo | RecordInfo[], row: RowInfo | -1 | null): Promise<{ row: RowInfo, rows: RowInfo[] }>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877:   insertNextAtt(records: RecordInfo | RecordInfo[], row: RowInfo | -1 | null): Promise<{ row: RowInfo, rows: RowInfo[] }>;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1340:   reserve?: boolean;",
          "1341:   labelField?: string;",
          "1342:   checkField?: string;",
          "1344:   showHeader?: boolean;",
          "1345:   checkAll?: boolean;",
          "1346:   checkRowKeys?: string[] | number[];",
          "",
          "[Removed Lines]",
          "1343:   halfField?: string;",
          "",
          "[Added Lines]",
          "1352:   indeterminateField?: string;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1350:   trigger?: 'default' | 'cell' | 'row' | '';",
          "1351:   highlight?: boolean;",
          "1352:   range?: boolean;",
          "1353: }",
          "1354: export type CheckboxConfig = TableCheckboxConfig",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1367:   halfField?: string;",
          "",
          "---------------"
        ],
        "types/v-x-e-table/index.d.ts||types/v-x-e-table/index.d.ts": [
          "File: types/v-x-e-table/index.d.ts -> types/v-x-e-table/index.d.ts"
        ]
      }
    }
  ]
}