{
  "cve_id": "CVE-2021-4026",
  "cve_desc": "bookstack is vulnerable to Improper Access Control",
  "repo": "bookstackapp/bookstack",
  "patch_hash": "b4fa82e3298a15443ca40bff205b7a16a1031d92",
  "patch_info": {
    "commit_hash": "b4fa82e3298a15443ca40bff205b7a16a1031d92",
    "repo": "bookstackapp/bookstack",
    "commit_url": "https://github.com/bookstackapp/bookstack/commit/b4fa82e3298a15443ca40bff205b7a16a1031d92",
    "files": [
      "app/Actions/ActivityService.php",
      "app/Auth/Permissions/PermissionService.php",
      "app/Exceptions/Handler.php",
      "tests/Api/AttachmentsApiTest.php"
    ],
    "message": "Fixed related permissions query not considering drafts\n\nPage-related items added on drafts could be visible in certain scenarios\nsince the applied permissions query filters would not consider\npage draft visibility.\nThis commit alters queries on related items to apply such filtering.\n\nIncluded test to cover API scenario.\nThanks to @haxatron for reporting.",
    "before_after_code_files": [
      "app/Actions/ActivityService.php||app/Actions/ActivityService.php",
      "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php",
      "app/Exceptions/Handler.php||app/Exceptions/Handler.php",
      "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
    ]
  },
  "patch_diff": {
    "app/Actions/ActivityService.php||app/Actions/ActivityService.php": [
      "File: app/Actions/ActivityService.php -> app/Actions/ActivityService.php"
    ],
    "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
      "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "608:     public function filterRestrictedEntityRelations($query, string $tableName, string $entityIdColumn, string $entityTypeColumn, string $action = 'view')",
      "609:     {",
      "610:         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn, 'entityTypeColumn' => $entityTypeColumn];",
      "624:         });",
      "626:         $this->clean();",
      "",
      "[Removed Lines]",
      "612:         $q = $query->where(function ($query) use ($tableDetails, $action) {",
      "613:             $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {",
      "615:                 $permissionQuery->select(['role_id'])->from('joint_permissions')",
      "616:                     ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "617:                     ->whereColumn('joint_permissions.entity_type', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
      "618:                     ->where('action', '=', $action)",
      "619:                     ->whereIn('role_id', $this->getCurrentUserRoles())",
      "620:                     ->where(function (QueryBuilder $query) {",
      "621:                         $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "622:                     });",
      "623:             });",
      "",
      "[Added Lines]",
      "613:         $pageMorphClass = (new Page())->getMorphClass();",
      "615:         $q = $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {",
      "617:             $permissionQuery->select(['role_id'])->from('joint_permissions')",
      "618:                 ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "619:                 ->whereColumn('joint_permissions.entity_type', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
      "620:                 ->where('joint_permissions.action', '=', $action)",
      "621:                 ->whereIn('joint_permissions.role_id', $this->getCurrentUserRoles())",
      "622:                 ->where(function (QueryBuilder $query) {",
      "623:                     $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "624:                 });",
      "625:         })->where(function ($query) use ($tableDetails, $pageMorphClass) {",
      "627:             $query->where($tableDetails['entityTypeColumn'], '!=', $pageMorphClass)",
      "628:                 ->orWhereExists(function(QueryBuilder $query) use ($tableDetails, $pageMorphClass) {",
      "629:                     $query->select('id')->from('pages')",
      "630:                         ->whereColumn('pages.id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "631:                         ->where($tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'], '=', $pageMorphClass)",
      "632:                         ->where('pages.draft', '=', false);",
      "633:                 });",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "635:     public function filterRelatedEntity(string $entityClass, Builder $query, string $tableName, string $entityIdColumn): Builder",
      "636:     {",
      "652:                 });",
      "654:         });",
      "656:         $this->clean();",
      "658:         return $q;",
      "",
      "[Removed Lines]",
      "637:         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn];",
      "638:         $morphClass = app($entityClass)->getMorphClass();",
      "640:         $q = $query->where(function ($query) use ($tableDetails, $morphClass) {",
      "641:             $query->where(function ($query) use (&$tableDetails, $morphClass) {",
      "642:                 $query->whereExists(function ($permissionQuery) use (&$tableDetails, $morphClass) {",
      "644:                     $permissionQuery->select('id')->from('joint_permissions')",
      "645:                         ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
      "646:                         ->where('entity_type', '=', $morphClass)",
      "647:                         ->where('action', '=', 'view')",
      "648:                         ->whereIn('role_id', $this->getCurrentUserRoles())",
      "649:                         ->where(function (QueryBuilder $query) {",
      "650:                             $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "651:                         });",
      "653:             })->orWhere($tableDetails['entityIdColumn'], '=', 0);",
      "",
      "[Added Lines]",
      "647:         $fullEntityIdColumn = $tableName . '.' . $entityIdColumn;",
      "648:         $instance = new $entityClass;",
      "649:         $morphClass = $instance->getMorphClass();",
      "651:         $existsQuery = function($permissionQuery) use ($fullEntityIdColumn, $morphClass) {",
      "653:             $permissionQuery->select('joint_permissions.role_id')->from('joint_permissions')",
      "654:                 ->whereColumn('joint_permissions.entity_id', '=', $fullEntityIdColumn)",
      "655:                 ->where('joint_permissions.entity_type', '=', $morphClass)",
      "656:                 ->where('joint_permissions.action', '=', 'view')",
      "657:                 ->whereIn('joint_permissions.role_id', $this->getCurrentUserRoles())",
      "658:                 ->where(function (QueryBuilder $query) {",
      "659:                     $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
      "661:         };",
      "663:         $q = $query->where(function ($query) use ($existsQuery, $fullEntityIdColumn) {",
      "664:             $query->whereExists($existsQuery)",
      "665:                 ->orWhere($fullEntityIdColumn, '=', 0);",
      "668:         if ($instance instanceof Page) {",
      "670:             $q->whereExists(function(QueryBuilder $query) use ($fullEntityIdColumn) {",
      "671:                 $query->select('id')->from('pages')",
      "672:                     ->whereColumn('pages.id', '=', $fullEntityIdColumn)",
      "673:                     ->where(function (QueryBuilder $query) {",
      "674:                         $query->where('pages.draft', '=', false)",
      "675:                             ->orWhere('pages.owned_by', '=', $this->currentUser()->id);",
      "676:                     });",
      "677:             });",
      "678:         }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "667:     protected function addJointHasPermissionCheck($query, int $userIdToCheck)",
      "668:     {",
      "672:         });",
      "673:     }",
      "",
      "[Removed Lines]",
      "669:         $query->where('has_permission', '=', true)->orWhere(function ($query) use ($userIdToCheck) {",
      "670:             $query->where('has_permission_own', '=', true)",
      "671:                 ->where('owned_by', '=', $userIdToCheck);",
      "",
      "[Added Lines]",
      "693:         $query->where('joint_permissions.has_permission', '=', true)->orWhere(function ($query) use ($userIdToCheck) {",
      "694:             $query->where('joint_permissions.has_permission_own', '=', true)",
      "695:                 ->where('joint_permissions.owned_by', '=', $userIdToCheck);",
      "",
      "---------------"
    ],
    "app/Exceptions/Handler.php||app/Exceptions/Handler.php": [
      "File: app/Exceptions/Handler.php -> app/Exceptions/Handler.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: use Exception;",
      "6: use Illuminate\\Auth\\AuthenticationException;",
      "7: use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;",
      "8: use Illuminate\\Http\\JsonResponse;",
      "9: use Illuminate\\Http\\Request;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: use Illuminate\\Database\\Eloquent\\ModelNotFoundException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "79:     {",
      "81:         $headers = [];",
      "82:         if ($e instanceof HttpException) {",
      "83:             $code = $e->getStatusCode();",
      "84:             $headers = $e->getHeaders();",
      "85:         }",
      "87:         $responseData = [",
      "88:             'error' => [",
      "89:                 'message' => $e->getMessage(),",
      "",
      "[Removed Lines]",
      "78:     protected function renderApiException(Exception $e): JsonResponse",
      "80:         $code = $e->getCode() === 0 ? 500 : $e->getCode();",
      "",
      "[Added Lines]",
      "79:     protected function renderApiException(Throwable $e): JsonResponse",
      "81:         $code = 500;",
      "89:         if ($e instanceof ModelNotFoundException) {",
      "90:             $code = 404;",
      "91:         }",
      "",
      "---------------"
    ],
    "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php": [
      "File: tests/Api/AttachmentsApiTest.php -> tests/Api/AttachmentsApiTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "224:         unlink(storage_path($attachment->path));",
      "225:     }",
      "227:     public function test_update_endpoint()",
      "228:     {",
      "229:         $this->actingAsApiAdmin();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227:     public function test_attachment_not_visible_on_other_users_draft()",
      "228:     {",
      "229:         $this->actingAsApiAdmin();",
      "230:         $editor = $this->getEditor();",
      "233:         $page = Page::query()->first();",
      "234:         $page->draft = true;",
      "235:         $page->owned_by = $editor;",
      "236:         $page->save();",
      "237:         $this->regenEntityPermissions($page);",
      "239:         $attachment = $this->createAttachmentForPage($page, [",
      "240:             'name'  => 'my attachment',",
      "241:             'path'  => 'https://example.com',",
      "242:             'order' => 1,",
      "243:         ]);",
      "245:         $resp = $this->getJson(\"{$this->baseEndpoint}/{$attachment->id}\");",
      "247:         $resp->assertStatus(404);",
      "248:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2989852520ee05581abbf156a0b6aa8aad2cc910",
      "candidate_info": {
        "commit_hash": "2989852520ee05581abbf156a0b6aa8aad2cc910",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/2989852520ee05581abbf156a0b6aa8aad2cc910",
        "files": [
          "app/Auth/Permissions/JointPermissionBuilder.php",
          "app/Auth/Permissions/SimpleEntityData.php",
          "tests/Api/AttachmentsApiTest.php"
        ],
        "message": "Added simple data model for faster permission generation",
        "before_after_code_files": [
          "app/Auth/Permissions/JointPermissionBuilder.php||app/Auth/Permissions/JointPermissionBuilder.php",
          "app/Auth/Permissions/SimpleEntityData.php||app/Auth/Permissions/SimpleEntityData.php",
          "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
          ],
          "candidate": [
            "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Auth/Permissions/JointPermissionBuilder.php||app/Auth/Permissions/JointPermissionBuilder.php": [
          "File: app/Auth/Permissions/JointPermissionBuilder.php -> app/Auth/Permissions/JointPermissionBuilder.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:     public function rebuildForAll()",
          "27:     {",
          "28:         JointPermission::query()->truncate();",
          "32:         $roles = Role::query()->with('permissions')->get()->all();",
          "",
          "[Removed Lines]",
          "29:         $this->readyEntityCache();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:     {",
          "106:         $this->entityCache = [];",
          "108:         foreach ($entities as $entity) {",
          "113:             }",
          "116:         }",
          "117:     }",
          "123:     {",
          "129:     }",
          "135:     {",
          "143:     }",
          "148:     protected function bookFetchQuery(): Builder",
          "149:     {",
          "",
          "[Removed Lines]",
          "104:     protected function readyEntityCache(array $entities = [])",
          "109:             $class = get_class($entity);",
          "111:             if (!isset($this->entityCache[$class])) {",
          "112:                 $this->entityCache[$class] = [];",
          "115:             $this->entityCache[$class][$entity->getRawAttribute('id')] = $entity;",
          "122:     protected function getBook(int $bookId): ?Book",
          "124:         if ($this->entityCache[Book::class][$bookId] ?? false) {",
          "125:             return $this->entityCache[Book::class][$bookId];",
          "126:         }",
          "128:         return Book::query()->withTrashed()->find($bookId);",
          "134:     protected function getChapter(int $chapterId): ?Chapter",
          "136:         if ($this->entityCache[Chapter::class][$chapterId] ?? false) {",
          "137:             return $this->entityCache[Chapter::class][$chapterId];",
          "138:         }",
          "140:         return Chapter::query()",
          "141:             ->withTrashed()",
          "142:             ->find($chapterId);",
          "",
          "[Added Lines]",
          "101:     protected function readyEntityCache(array $entities)",
          "106:             if (!isset($this->entityCache[$entity->type])) {",
          "107:                 $this->entityCache[$entity->type] = [];",
          "110:             $this->entityCache[$entity->type][$entity->id] = $entity;",
          "117:     protected function getBook(int $bookId): SimpleEntityData",
          "119:         return $this->entityCache['book'][$bookId];",
          "125:     protected function getChapter(int $chapterId): SimpleEntityData",
          "127:         return $this->entityCache['chapter'][$chapterId];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:     protected function deleteManyJointPermissionsForEntities(array $entities)",
          "208:     {",
          "211:         DB::transaction(function () use ($idsByType) {",
          "212:             foreach ($idsByType as $type => $ids) {",
          "",
          "[Removed Lines]",
          "209:         $idsByType = $this->entitiesToTypeIdMap($entities);",
          "",
          "[Added Lines]",
          "188:         $simpleEntities = $this->entitiesToSimpleEntities($entities);",
          "189:         $idsByType = $this->entitiesToTypeIdMap($simpleEntities);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220:         });",
          "221:     }",
          "232:     {",
          "233:         $this->readyEntityCache($entities);",
          "234:         $jointPermissions = [];",
          "237:         $entityRestrictedMap = [];",
          "238:         foreach ($entities as $entity) {",
          "240:         }",
          "",
          "[Removed Lines]",
          "231:     protected function createManyJointPermissions(array $entities, array $roles)",
          "239:             $entityRestrictedMap[$entity->getMorphClass() . ':' . $entity->getRawAttribute('id')] = boolval($entity->getRawAttribute('restricted'));",
          "",
          "[Added Lines]",
          "207:     protected function entitiesToSimpleEntities(array $entities): array",
          "208:     {",
          "209:         $simpleEntities = [];",
          "211:         foreach ($entities as $entity) {",
          "212:             $attrs = $entity->getAttributes();",
          "213:             $simple = new SimpleEntityData();",
          "214:             $simple->id = $attrs['id'];",
          "215:             $simple->type = $entity->getMorphClass();",
          "216:             $simple->restricted = boolval($attrs['restricted'] ?? 0);",
          "217:             $simple->owned_by = $attrs['owned_by'] ?? 0;",
          "218:             $simple->book_id = $attrs['book_id'] ?? null;",
          "219:             $simple->chapter_id = $attrs['chapter_id'] ?? null;",
          "220:             $simpleEntities[] = $simple;",
          "221:         }",
          "223:         return $simpleEntities;",
          "224:     }",
          "232:     protected function createManyJointPermissions(array $originalEntities, array $roles)",
          "234:         $entities = $this->entitiesToSimpleEntities($originalEntities);",
          "241:             $entityRestrictedMap[$entity->type . ':' . $entity->id] = $entity->restricted;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "262:         foreach ($entities as $entity) {",
          "263:             foreach ($roles as $role) {",
          "264:                 foreach ($this->getActions($entity) as $action) {",
          "266:                 }",
          "267:             }",
          "268:         }",
          "",
          "[Removed Lines]",
          "265:                     $jointPermissions[] = $this->createJointPermissionData($entity, $role, $action, $permissionMap, $rolePermissionMap);",
          "",
          "[Added Lines]",
          "267:                     $jointPermissions[] = $this->createJointPermissionData(",
          "268:                         $entity,",
          "269:                         $role->getRawAttribute('id'),",
          "270:                         $action,",
          "271:                         $permissionMap,",
          "272:                         $rolePermissionMap,",
          "273:                         $role->system_name === 'admin'",
          "274:                     );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "285:         $idsByType = [];",
          "287:         foreach ($entities as $entity) {",
          "292:             }",
          "295:         }",
          "297:         return $idsByType;",
          "",
          "[Removed Lines]",
          "288:             $type = $entity->getMorphClass();",
          "290:             if (!isset($idsByType[$type])) {",
          "291:                 $idsByType[$type] = [];",
          "294:             $idsByType[$type][] = $entity->getRawAttribute('id');",
          "",
          "[Added Lines]",
          "297:             if (!isset($idsByType[$entity->type])) {",
          "298:                 $idsByType[$entity->type] = [];",
          "301:             $idsByType[$entity->type][] = $entity->id;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "306:     {",
          "307:         $idsByType = $this->entitiesToTypeIdMap($entities);",
          "308:         $permissionFetch = EntityPermission::query();",
          "",
          "[Removed Lines]",
          "305:     protected function getEntityPermissionsForEntities(array $entities)",
          "",
          "[Added Lines]",
          "312:     protected function getEntityPermissionsForEntities(array $entities): array",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "313:             });",
          "314:         }",
          "317:     }",
          "323:     {",
          "324:         $baseActions = ['view', 'update', 'delete'];",
          "326:             $baseActions[] = 'page-create';",
          "327:         }",
          "329:             $baseActions[] = 'chapter-create';",
          "330:         }",
          "",
          "[Removed Lines]",
          "316:         return $permissionFetch->get();",
          "322:     protected function getActions(Entity $entity): array",
          "325:         if ($entity instanceof Chapter || $entity instanceof Book) {",
          "328:         if ($entity instanceof Book) {",
          "",
          "[Added Lines]",
          "323:         return $permissionFetch->get()->all();",
          "329:     protected function getActions(SimpleEntityData $entity): array",
          "333:         if ($entity->type === 'chapter' || $entity->type === 'book') {",
          "337:         if ($entity->type === 'book') {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "340:     {",
          "344:         $explodedAction = explode('-', $action);",
          "345:         $restrictionAction = end($explodedAction);",
          "349:         }",
          "351:         if ($entity->restricted) {",
          "355:         }",
          "359:         }",
          "362:         $book = $this->getBook($entity->book_id);",
          "364:         $hasPermissiveAccessToParents = !$book->restricted;",
          "368:             $chapter = $this->getChapter($entity->chapter_id);",
          "369:             $hasPermissiveAccessToParents = $hasPermissiveAccessToParents && !$chapter->restricted;",
          "370:             if ($chapter->restricted) {",
          "372:             }",
          "373:         }",
          "375:         return $this->createJointPermissionDataArray(",
          "376:             $entity,",
          "378:             $action,",
          "379:             ($hasExplicitAccessToParents || ($roleHasPermission && $hasPermissiveAccessToParents)),",
          "380:             ($hasExplicitAccessToParents || ($roleHasPermissionOwn && $hasPermissiveAccessToParents))",
          "",
          "[Removed Lines]",
          "339:     protected function createJointPermissionData(Entity $entity, Role $role, string $action, array $permissionMap, array $rolePermissionMap): array",
          "341:         $permissionPrefix = (strpos($action, '-') === false ? ($entity->getType() . '-') : '') . $action;",
          "342:         $roleHasPermission = isset($rolePermissionMap[$role->getRawAttribute('id') . ':' . $permissionPrefix . '-all']);",
          "343:         $roleHasPermissionOwn = isset($rolePermissionMap[$role->getRawAttribute('id') . ':' . $permissionPrefix . '-own']);",
          "347:         if ($role->system_name === 'admin') {",
          "348:             return $this->createJointPermissionDataArray($entity, $role, $action, true, true);",
          "352:             $hasAccess = $this->mapHasActiveRestriction($permissionMap, $entity, $role, $restrictionAction);",
          "354:             return $this->createJointPermissionDataArray($entity, $role, $action, $hasAccess, $hasAccess);",
          "357:         if ($entity instanceof Book || $entity instanceof Bookshelf) {",
          "358:             return $this->createJointPermissionDataArray($entity, $role, $action, $roleHasPermission, $roleHasPermissionOwn);",
          "363:         $hasExplicitAccessToParents = $this->mapHasActiveRestriction($permissionMap, $book, $role, $restrictionAction);",
          "367:         if ($entity instanceof Page && intval($entity->chapter_id) !== 0) {",
          "371:                 $hasExplicitAccessToParents = $this->mapHasActiveRestriction($permissionMap, $chapter, $role, $restrictionAction);",
          "377:             $role,",
          "",
          "[Added Lines]",
          "348:     protected function createJointPermissionData(SimpleEntityData $entity, int $roleId, string $action, array $permissionMap, array $rolePermissionMap, bool $isAdminRole): array",
          "350:         $permissionPrefix = (strpos($action, '-') === false ? ($entity->type . '-') : '') . $action;",
          "351:         $roleHasPermission = isset($rolePermissionMap[$roleId . ':' . $permissionPrefix . '-all']);",
          "352:         $roleHasPermissionOwn = isset($rolePermissionMap[$roleId . ':' . $permissionPrefix . '-own']);",
          "356:         if ($isAdminRole) {",
          "357:             return $this->createJointPermissionDataArray($entity, $roleId, $action, true, true);",
          "361:             $hasAccess = $this->mapHasActiveRestriction($permissionMap, $entity, $roleId, $restrictionAction);",
          "363:             return $this->createJointPermissionDataArray($entity, $roleId, $action, $hasAccess, $hasAccess);",
          "366:         if ($entity->type === 'book' || $entity->type === 'bookshelf') {",
          "367:             return $this->createJointPermissionDataArray($entity, $roleId, $action, $roleHasPermission, $roleHasPermissionOwn);",
          "372:         $hasExplicitAccessToParents = $this->mapHasActiveRestriction($permissionMap, $book, $roleId, $restrictionAction);",
          "376:         if ($entity->type === 'page' && $entity->chapter_id !== 0) {",
          "380:                 $hasExplicitAccessToParents = $this->mapHasActiveRestriction($permissionMap, $chapter, $roleId, $restrictionAction);",
          "386:             $roleId,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "388:     {",
          "391:         return $entityMap[$key] ?? false;",
          "392:     }",
          "",
          "[Removed Lines]",
          "387:     protected function mapHasActiveRestriction(array $entityMap, Entity $entity, Role $role, string $action): bool",
          "389:         $key = $entity->getMorphClass() . ':' . $entity->getRawAttribute('id') . ':' . $role->getRawAttribute('id') . ':' . $action;",
          "",
          "[Added Lines]",
          "396:     protected function mapHasActiveRestriction(array $entityMap, SimpleEntityData $entity, int $roleId, string $action): bool",
          "398:         $key = $entity->type . ':' . $entity->id . ':' . $roleId . ':' . $action;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "399:     {",
          "400:         return [",
          "401:             'action'             => $action,",
          "404:             'has_permission'     => $permissionAll,",
          "405:             'has_permission_own' => $permissionOwn,",
          "408:         ];",
          "409:     }",
          "",
          "[Removed Lines]",
          "398:     protected function createJointPermissionDataArray(Entity $entity, Role $role, string $action, bool $permissionAll, bool $permissionOwn): array",
          "402:             'entity_id'          => $entity->getRawAttribute('id'),",
          "403:             'entity_type'        => $entity->getMorphClass(),",
          "406:             'owned_by'           => $entity->getRawAttribute('owned_by'),",
          "407:             'role_id'            => $role->getRawAttribute('id'),",
          "",
          "[Added Lines]",
          "407:     protected function createJointPermissionDataArray(SimpleEntityData $entity, int $roleId, string $action, bool $permissionAll, bool $permissionOwn): array",
          "411:             'entity_id'          => $entity->id,",
          "412:             'entity_type'        => $entity->type,",
          "415:             'owned_by'           => $entity->owned_by,",
          "416:             'role_id'            => $roleId,",
          "",
          "---------------"
        ],
        "app/Auth/Permissions/SimpleEntityData.php||app/Auth/Permissions/SimpleEntityData.php": [
          "File: app/Auth/Permissions/SimpleEntityData.php -> app/Auth/Permissions/SimpleEntityData.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace BookStack\\Auth\\Permissions;",
          "5: class SimpleEntityData",
          "6: {",
          "7:     public int $id;",
          "8:     public string $type;",
          "9:     public bool $restricted;",
          "10:     public int $owned_by;",
          "11:     public ?int $book_id;",
          "12:     public ?int $chapter_id;",
          "13: }",
          "",
          "---------------"
        ],
        "tests/Api/AttachmentsApiTest.php||tests/Api/AttachmentsApiTest.php": [
          "File: tests/Api/AttachmentsApiTest.php -> tests/Api/AttachmentsApiTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "263:         $page = Page::query()->first();",
          "264:         $page->draft = true;",
          "266:         $page->save();",
          "267:         $this->regenEntityPermissions($page);",
          "",
          "[Removed Lines]",
          "265:         $page->owned_by = $editor;",
          "",
          "[Added Lines]",
          "265:         $page->owned_by = $editor->id;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e5951a75f053c3c45e6e56a96e76dbd79807d99",
      "candidate_info": {
        "commit_hash": "1e5951a75f053c3c45e6e56a96e76dbd79807d99",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/1e5951a75f053c3c45e6e56a96e76dbd79807d99",
        "files": [
          "app/Actions/ActivityService.php",
          "app/Actions/TagRepo.php",
          "app/Actions/ViewService.php",
          "app/Auth/Permissions/PermissionService.php",
          "app/Entities/Models/Page.php",
          "app/Uploads/ImageRepo.php"
        ],
        "message": "Done a refactor pass on PermissionService\n\nCould do with splitting out into seperate query/build classess really.\nCloses #2633.",
        "before_after_code_files": [
          "app/Actions/ActivityService.php||app/Actions/ActivityService.php",
          "app/Actions/TagRepo.php||app/Actions/TagRepo.php",
          "app/Actions/ViewService.php||app/Actions/ViewService.php",
          "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php",
          "app/Entities/Models/Page.php||app/Entities/Models/Page.php",
          "app/Uploads/ImageRepo.php||app/Uploads/ImageRepo.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/Actions/ActivityService.php||app/Actions/ActivityService.php",
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ],
          "candidate": [
            "app/Actions/ActivityService.php||app/Actions/ActivityService.php",
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Actions/ActivityService.php||app/Actions/ActivityService.php": [
          "File: app/Actions/ActivityService.php -> app/Actions/ActivityService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     public function latest(int $count = 20, int $page = 0): array",
          "79:     {",
          "80:         $activityList = $this->permissionService",
          "82:             ->orderBy('created_at', 'desc')",
          "83:             ->with(['user', 'entity'])",
          "84:             ->skip($count * $page)",
          "",
          "[Removed Lines]",
          "81:             ->filterRestrictedEntityRelations($this->activity, 'activities', 'entity_id', 'entity_type')",
          "",
          "[Added Lines]",
          "81:             ->filterRestrictedEntityRelations($this->activity->newQuery(), 'activities', 'entity_id', 'entity_type')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131:     public function userActivity(User $user, int $count = 20, int $page = 0): array",
          "132:     {",
          "133:         $activityList = $this->permissionService",
          "135:             ->orderBy('created_at', 'desc')",
          "136:             ->where('user_id', '=', $user->id)",
          "137:             ->skip($count * $page)",
          "",
          "[Removed Lines]",
          "134:             ->filterRestrictedEntityRelations($this->activity, 'activities', 'entity_id', 'entity_type')",
          "",
          "[Added Lines]",
          "134:             ->filterRestrictedEntityRelations($this->activity->newQuery(), 'activities', 'entity_id', 'entity_type')",
          "",
          "---------------"
        ],
        "app/Actions/TagRepo.php||app/Actions/TagRepo.php": [
          "File: app/Actions/TagRepo.php -> app/Actions/TagRepo.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     public function getNameSuggestions(?string $searchTerm): Collection",
          "28:     {",
          "31:         if ($searchTerm) {",
          "32:             $query = $query->where('name', 'LIKE', $searchTerm . '%')->orderBy('name', 'desc');",
          "",
          "[Removed Lines]",
          "29:         $query = $this->tag->select('*', DB::raw('count(*) as count'))->groupBy('name');",
          "",
          "[Added Lines]",
          "29:         $query = $this->tag->newQuery()",
          "30:             ->select('*', DB::raw('count(*) as count'))",
          "31:             ->groupBy('name');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     public function getValueSuggestions(?string $searchTerm, ?string $tagName): Collection",
          "47:     {",
          "50:         if ($searchTerm) {",
          "51:             $query = $query->where('value', 'LIKE', $searchTerm . '%')->orderBy('value', 'desc');",
          "",
          "[Removed Lines]",
          "48:         $query = $this->tag->select('*', DB::raw('count(*) as count'))->groupBy('value');",
          "",
          "[Added Lines]",
          "50:         $query = $this->tag->newQuery()",
          "51:             ->select('*', DB::raw('count(*) as count'))",
          "52:             ->groupBy('value');",
          "",
          "---------------"
        ],
        "app/Actions/ViewService.php||app/Actions/ViewService.php": [
          "File: app/Actions/ViewService.php -> app/Actions/ViewService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     {",
          "66:         $skipCount = $count * $page;",
          "67:         $query = $this->permissionService",
          "69:             ->select('*', 'viewable_id', 'viewable_type', DB::raw('SUM(views) as view_count'))",
          "70:             ->groupBy('viewable_id', 'viewable_type')",
          "71:             ->orderBy('view_count', 'desc');",
          "",
          "[Removed Lines]",
          "68:             ->filterRestrictedEntityRelations($this->view, 'views', 'viewable_id', 'viewable_type', $action)",
          "",
          "[Added Lines]",
          "68:             ->filterRestrictedEntityRelations($this->view->newQuery(), 'views', 'viewable_id', 'viewable_type', $action)",
          "",
          "---------------"
        ],
        "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
          "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php namespace BookStack\\Auth\\Permissions;",
          "4: use BookStack\\Auth\\Role;",
          "5: use BookStack\\Entities\\Models\\Book;",
          "6: use BookStack\\Entities\\Models\\Chapter;",
          "7: use BookStack\\Entities\\Models\\Entity;",
          "9: use BookStack\\Entities\\Models\\Page;",
          "10: use BookStack\\Model;",
          "11: use BookStack\\Traits\\HasCreatorAndUpdater;",
          "12: use BookStack\\Traits\\HasOwner;",
          "13: use Illuminate\\Database\\Connection;",
          "14: use Illuminate\\Database\\Eloquent\\Builder;",
          "15: use Illuminate\\Database\\Query\\Builder as QueryBuilder;",
          "18: class PermissionService",
          "19: {",
          "51:     protected $entityCache;",
          "63:         $this->db = $db;",
          "68:     }",
          "74:     public function setConnection(Connection $connection)",
          "75:     {",
          "",
          "[Removed Lines]",
          "3: use BookStack\\Auth\\Permissions;",
          "8: use BookStack\\Entities\\EntityProvider;",
          "16: use Illuminate\\Support\\Collection;",
          "21:     protected $currentAction;",
          "22:     protected $isAdminUser;",
          "23:     protected $userRoles = false;",
          "24:     protected $currentUserModel = false;",
          "29:     protected $db;",
          "34:     protected $jointPermission;",
          "39:     protected $role;",
          "44:     protected $entityPermission;",
          "49:     protected $entityProvider;",
          "56:     public function __construct(",
          "57:         JointPermission $jointPermission,",
          "58:         Permissions\\EntityPermission $entityPermission,",
          "59:         Role $role,",
          "60:         Connection $db,",
          "61:         EntityProvider $entityProvider",
          "62:     ) {",
          "64:         $this->jointPermission = $jointPermission;",
          "65:         $this->entityPermission = $entityPermission;",
          "66:         $this->role = $role;",
          "67:         $this->entityProvider = $entityProvider;",
          "",
          "[Added Lines]",
          "4: use BookStack\\Auth\\User;",
          "6: use BookStack\\Entities\\Models\\BookChild;",
          "7: use BookStack\\Entities\\Models\\Bookshelf;",
          "16: use Illuminate\\Database\\Eloquent\\Collection as EloquentCollection;",
          "18: use Throwable;",
          "25:     protected $userRoles = null;",
          "30:     protected $currentUserModel = null;",
          "35:     protected $db;",
          "45:     public function __construct(Connection $db)",
          "46:     {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     {",
          "85:         $this->entityCache = [];",
          "87:         foreach ($entities as $entity) {",
          "91:             }",
          "93:         }",
          "94:     }",
          "102:     {",
          "110:         }",
          "113:     }",
          "",
          "[Removed Lines]",
          "83:     protected function readyEntityCache($entities = [])",
          "88:             $type = $entity->getType();",
          "89:             if (!isset($this->entityCache[$type])) {",
          "90:                 $this->entityCache[$type] = collect();",
          "92:             $this->entityCache[$type]->put($entity->id, $entity);",
          "101:     protected function getBook($bookId)",
          "103:         if (isset($this->entityCache['book']) && $this->entityCache['book']->has($bookId)) {",
          "104:             return $this->entityCache['book']->get($bookId);",
          "105:         }",
          "107:         $book = $this->entityProvider->book->find($bookId);",
          "108:         if ($book === null) {",
          "109:             $book = false;",
          "112:         return $book;",
          "",
          "[Added Lines]",
          "62:     protected function readyEntityCache(array $entities = [])",
          "67:             $class = get_class($entity);",
          "68:             if (!isset($this->entityCache[$class])) {",
          "69:                 $this->entityCache[$class] = collect();",
          "71:             $this->entityCache[$class]->put($entity->id, $entity);",
          "78:     protected function getBook(int $bookId): ?Book",
          "80:         if (isset($this->entityCache[Book::class]) && $this->entityCache[Book::class]->has($bookId)) {",
          "81:             return $this->entityCache[Book::class]->get($bookId);",
          "84:         return Book::query()->withTrashed()->find($bookId);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:     protected function getChapter(int $chapterId): ?Chapter",
          "119:     {",
          "122:         }",
          "125:             ->withTrashed()",
          "126:             ->find($chapterId);",
          "127:     }",
          "134:     {",
          "136:             return $this->userRoles;",
          "137:         }",
          "141:         if (auth()->guest()) {",
          "144:         }",
          "151:     }",
          "",
          "[Removed Lines]",
          "120:         if (isset($this->entityCache['chapter']) && $this->entityCache['chapter']->has($chapterId)) {",
          "121:             return $this->entityCache['chapter']->get($chapterId);",
          "124:         return $this->entityProvider->chapter->newQuery()",
          "133:     protected function getRoles()",
          "135:         if ($this->userRoles !== false) {",
          "139:         $roles = [];",
          "142:             $roles[] = $this->role->getSystemRole('public')->id;",
          "143:             return $roles;",
          "147:         foreach ($this->currentUser()->roles as $role) {",
          "148:             $roles[] = $role->id;",
          "149:         }",
          "150:         return $roles;",
          "",
          "[Added Lines]",
          "92:         if (isset($this->entityCache[Chapter::class]) && $this->entityCache[Chapter::class]->has($chapterId)) {",
          "93:             return $this->entityCache[Chapter::class]->get($chapterId);",
          "96:         return Chapter::query()",
          "104:     protected function getCurrentUserRoles(): array",
          "106:         if (!is_null($this->userRoles)) {",
          "111:             $this->userRoles = [Role::getSystemRole('public')->id];",
          "112:         } else {",
          "113:             $this->userRoles = $this->currentUser()->roles->pluck('id')->values()->all();",
          "116:         return $this->userRoles;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156:     public function buildJointPermissions()",
          "157:     {",
          "159:         $this->readyEntityCache();",
          "166:             $this->buildJointPermissionsForBooks($books, $roles);",
          "167:         });",
          "172:                 $this->buildJointPermissionsForShelves($shelves, $roles);",
          "173:             });",
          "174:     }",
          "181:     {",
          "188:     }",
          "197:     {",
          "198:         if ($deleteOld) {",
          "199:             $this->deleteManyJointPermissionsForEntities($shelves->all());",
          "200:         }",
          "202:     }",
          "211:     {",
          "212:         $entities = clone $books;",
          "",
          "[Removed Lines]",
          "158:         $this->jointPermission->truncate();",
          "162:         $roles = $this->role->with('permissions')->get()->all();",
          "165:         $this->bookFetchQuery()->chunk(5, function ($books) use ($roles) {",
          "170:         $this->entityProvider->bookshelf->newQuery()->withTrashed()->select(['id', 'restricted', 'owned_by'])",
          "171:             ->chunk(50, function ($shelves) use ($roles) {",
          "180:     protected function bookFetchQuery()",
          "182:         return $this->entityProvider->book->withTrashed()->newQuery()",
          "183:             ->select(['id', 'restricted', 'owned_by'])->with(['chapters' => function ($query) {",
          "184:                 $query->withTrashed()->select(['id', 'restricted', 'owned_by', 'book_id']);",
          "185:             }, 'pages'  => function ($query) {",
          "186:                 $query->withTrashed()->select(['id', 'restricted', 'owned_by', 'book_id', 'chapter_id']);",
          "187:             }]);",
          "196:     protected function buildJointPermissionsForShelves($shelves, $roles, $deleteOld = false)",
          "201:         $this->createManyJointPermissions($shelves, $roles);",
          "210:     protected function buildJointPermissionsForBooks($books, $roles, $deleteOld = false)",
          "",
          "[Added Lines]",
          "124:         JointPermission::query()->truncate();",
          "128:         $roles = Role::query()->with('permissions')->get()->all();",
          "131:         $this->bookFetchQuery()->chunk(5, function (EloquentCollection $books) use ($roles) {",
          "136:         Bookshelf::query()->withTrashed()->select(['id', 'restricted', 'owned_by'])",
          "137:             ->chunk(50, function (EloquentCollection $shelves) use ($roles) {",
          "145:     protected function bookFetchQuery(): Builder",
          "147:         return Book::query()->withTrashed()",
          "148:             ->select(['id', 'restricted', 'owned_by'])->with([",
          "149:                 'chapters' => function ($query) {",
          "150:                     $query->withTrashed()->select(['id', 'restricted', 'owned_by', 'book_id']);",
          "151:                 },",
          "152:                 'pages' => function ($query) {",
          "153:                     $query->withTrashed()->select(['id', 'restricted', 'owned_by', 'book_id', 'chapter_id']);",
          "154:                 }",
          "155:             ]);",
          "162:     protected function buildJointPermissionsForShelves(EloquentCollection $shelves, array $roles, bool $deleteOld = false)",
          "167:         $this->createManyJointPermissions($shelves->all(), $roles);",
          "174:     protected function buildJointPermissionsForBooks(EloquentCollection $books, array $roles, bool $deleteOld = false)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "224:         if ($deleteOld) {",
          "225:             $this->deleteManyJointPermissionsForEntities($entities->all());",
          "226:         }",
          "228:     }",
          "235:     public function buildJointPermissionsForEntity(Entity $entity)",
          "236:     {",
          "237:         $entities = [$entity];",
          "239:             $books = $this->bookFetchQuery()->where('id', '=', $entity->id)->get();",
          "241:             return;",
          "242:         }",
          "244:         if ($entity->book) {",
          "245:             $entities[] = $entity->book;",
          "246:         }",
          "249:             $entities[] = $entity->chapter;",
          "250:         }",
          "253:             foreach ($entity->pages as $page) {",
          "254:                 $entities[] = $page;",
          "255:             }",
          "256:         }",
          "259:     }",
          "267:     {",
          "270:         $this->createManyJointPermissions($entities, $roles);",
          "271:     }",
          "277:     public function buildJointPermissionForRole(Role $role)",
          "278:     {",
          "",
          "[Removed Lines]",
          "227:         $this->createManyJointPermissions($entities, $roles);",
          "238:         if ($entity->isA('book')) {",
          "240:             $this->buildJointPermissionsForBooks($books, $this->role->newQuery()->get(), true);",
          "248:         if ($entity->isA('page') && $entity->chapter_id) {",
          "252:         if ($entity->isA('chapter')) {",
          "258:         $this->buildJointPermissionsForEntities(collect($entities));",
          "266:     public function buildJointPermissionsForEntities(Collection $entities)",
          "268:         $roles = $this->role->newQuery()->get();",
          "269:         $this->deleteManyJointPermissionsForEntities($entities->all());",
          "",
          "[Added Lines]",
          "191:         $this->createManyJointPermissions($entities->all(), $roles);",
          "201:         if ($entity instanceof Book) {",
          "203:             $this->buildJointPermissionsForBooks($books, Role::query()->get()->all(), true);",
          "212:         if ($entity instanceof Page && $entity->chapter_id) {",
          "216:         if ($entity instanceof Chapter) {",
          "222:         $this->buildJointPermissionsForEntities($entities);",
          "229:     public function buildJointPermissionsForEntities(array $entities)",
          "231:         $roles = Role::query()->get()->values()->all();",
          "232:         $this->deleteManyJointPermissionsForEntities($entities);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "285:         });",
          "289:             ->chunk(50, function ($shelves) use ($roles) {",
          "290:                 $this->buildJointPermissionsForShelves($shelves, $roles);",
          "291:             });",
          "",
          "[Removed Lines]",
          "288:         $this->entityProvider->bookshelf->newQuery()->select(['id', 'restricted', 'owned_by'])",
          "",
          "[Added Lines]",
          "250:         Bookshelf::query()->select(['id', 'restricted', 'owned_by'])",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "309:         $roleIds = array_map(function ($role) {",
          "310:             return $role->id;",
          "311:         }, $roles);",
          "313:     }",
          "320:     public function deleteJointPermissionsForEntity(Entity $entity)",
          "321:     {",
          "",
          "[Removed Lines]",
          "312:         $this->jointPermission->newQuery()->whereIn('role_id', $roleIds)->delete();",
          "",
          "[Added Lines]",
          "273:         JointPermission::query()->whereIn('role_id', $roleIds)->delete();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "331:     {",
          "332:         if (count($entities) === 0) {",
          "333:             return;",
          "",
          "[Removed Lines]",
          "330:     protected function deleteManyJointPermissionsForEntities($entities)",
          "",
          "[Added Lines]",
          "291:     protected function deleteManyJointPermissionsForEntities(array $entities)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "349:     }",
          "358:     {",
          "359:         $this->readyEntityCache($entities);",
          "360:         $jointPermissions = [];",
          "363:         $entityRestrictedMap = [];",
          "365:         foreach ($entities as $entity) {",
          "366:             $entityRestrictedMap[$entity->getMorphClass() . ':' . $entity->id] = boolval($entity->getRawAttribute('restricted'));",
          "367:             $permissionFetch->orWhere(function ($query) use ($entity) {",
          "",
          "[Removed Lines]",
          "357:     protected function createManyJointPermissions($entities, $roles)",
          "364:         $permissionFetch = $this->entityPermission->newQuery();",
          "",
          "[Added Lines]",
          "318:     protected function createManyJointPermissions(array $entities, array $roles)",
          "325:         $permissionFetch = EntityPermission::query();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "412:     {",
          "413:         $baseActions = ['view', 'update', 'delete'];",
          "415:             $baseActions[] = 'page-create';",
          "416:         }",
          "418:             $baseActions[] = 'chapter-create';",
          "419:         }",
          "420:         return $baseActions;",
          "",
          "[Removed Lines]",
          "411:     protected function getActions(Entity $entity)",
          "414:         if ($entity->isA('chapter') || $entity->isA('book')) {",
          "417:         if ($entity->isA('book')) {",
          "",
          "[Added Lines]",
          "370:     protected function getActions(Entity $entity): array",
          "373:         if ($entity instanceof Chapter || $entity instanceof Book) {",
          "376:         if ($entity instanceof Book) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "434:     {",
          "435:         $permissionPrefix = (strpos($action, '-') === false ? ($entity->getType() . '-') : '') . $action;",
          "436:         $roleHasPermission = isset($rolePermissionMap[$role->getRawAttribute('id') . ':' . $permissionPrefix . '-all']);",
          "",
          "[Removed Lines]",
          "433:     protected function createJointPermissionData(Entity $entity, Role $role, $action, $permissionMap, $rolePermissionMap)",
          "",
          "[Added Lines]",
          "386:     protected function createJointPermissionData(Entity $entity, Role $role, string $action, array $permissionMap, array $rolePermissionMap): array",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "447:             return $this->createJointPermissionDataArray($entity, $role, $action, $hasAccess, $hasAccess);",
          "448:         }",
          "451:             return $this->createJointPermissionDataArray($entity, $role, $action, $roleHasPermission, $roleHasPermissionOwn);",
          "452:         }",
          "",
          "[Removed Lines]",
          "450:         if ($entity->isA('book') || $entity->isA('bookshelf')) {",
          "",
          "[Added Lines]",
          "403:         if ($entity instanceof Book || $entity instanceof Bookshelf) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "486:     {",
          "487:         $key = $entity->getMorphClass() . ':' . $entity->getRawAttribute('id') . ':' . $role->getRawAttribute('id') . ':' . $action;",
          "489:     }",
          "502:     {",
          "503:         return [",
          "509:             'has_permission_own' => $permissionOwn,",
          "511:         ];",
          "512:     }",
          "",
          "[Removed Lines]",
          "485:     protected function mapHasActiveRestriction($entityMap, Entity $entity, Role $role, $action)",
          "488:         return isset($entityMap[$key]) ? $entityMap[$key] : false;",
          "501:     protected function createJointPermissionDataArray(Entity $entity, Role $role, $action, $permissionAll, $permissionOwn)",
          "504:             'role_id'            => $role->getRawAttribute('id'),",
          "505:             'entity_id'          => $entity->getRawAttribute('id'),",
          "506:             'entity_type'        => $entity->getMorphClass(),",
          "507:             'action'             => $action,",
          "508:             'has_permission'     => $permissionAll,",
          "510:             'owned_by'         => $entity->getRawAttribute('owned_by')",
          "",
          "[Added Lines]",
          "433:     protected function mapHasActiveRestriction(array $entityMap, Entity $entity, Role $role, string $action): bool",
          "436:         return $entityMap[$key] ?? false;",
          "443:     protected function createJointPermissionDataArray(Entity $entity, Role $role, string $action, bool $permissionAll, bool $permissionOwn): array",
          "446:             'role_id' => $role->getRawAttribute('id'),",
          "447:             'entity_id' => $entity->getRawAttribute('id'),",
          "448:             'entity_type' => $entity->getMorphClass(),",
          "449:             'action' => $action,",
          "450:             'has_permission' => $permissionAll,",
          "452:             'owned_by' => $entity->getRawAttribute('owned_by'),",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "522:         $baseQuery = $ownable->newQuery()->where('id', '=', $ownable->id);",
          "523:         $action = end($explodedPermission);",
          "526:         $nonJointPermissions = ['restrictions', 'image', 'attachment', 'comment'];",
          "529:         if (in_array($explodedPermission[0], $nonJointPermissions)) {",
          "533:             $ownerField = ($ownable instanceof Entity) ? 'owned_by' : 'created_by';",
          "535:             return ($allPermission || ($isOwner && $ownPermission));",
          "536:         }",
          "539:         if ($action === 'create') {",
          "541:         }",
          "544:         $this->clean();",
          "546:     }",
          "556:     {",
          "557:         $userRoleIds = $this->currentUser()->roles()->select('id')->pluck('id')->toArray();",
          "558:         $userId = $this->currentUser()->id;",
          "",
          "[Removed Lines]",
          "524:         $this->currentAction = $action;",
          "530:             $allPermission = $this->currentUser() && $this->currentUser()->can($permission . '-all');",
          "531:             $ownPermission = $this->currentUser() && $this->currentUser()->can($permission . '-own');",
          "532:             $this->currentAction = 'view';",
          "534:             $isOwner = $this->currentUser() && $this->currentUser()->id === $ownable->$ownerField;",
          "540:             $this->currentAction = $permission;",
          "543:         $q = $this->entityRestrictionQuery($baseQuery)->count() > 0;",
          "545:         return $q;",
          "555:     public function checkUserHasPermissionOnAnything(string $permission, string $entityClass = null)",
          "",
          "[Added Lines]",
          "466:         $user = $this->currentUser();",
          "472:             $allPermission = $user && $user->can($permission . '-all');",
          "473:             $ownPermission = $user && $user->can($permission . '-own');",
          "475:             $isOwner = $user && $user->id === $ownable->$ownerField;",
          "481:             $action = $permission;",
          "484:         $hasAccess = $this->entityRestrictionQuery($baseQuery, $action)->count() > 0;",
          "486:         return $hasAccess;",
          "493:     public function checkUserHasPermissionOnAnything(string $permission, ?string $entityClass = null): bool",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "578:         return $hasPermission;",
          "579:     }",
          "607:     {",
          "612:                     ->where(function ($query) {",
          "613:                         $query->where('has_permission', '=', true)",
          "614:                             ->orWhere(function ($query) {",
          "",
          "[Removed Lines]",
          "588:     public function checkIfRestrictionsSet(Entity $entity, $action)",
          "589:     {",
          "590:         $this->currentAction = $action;",
          "591:         if ($entity->isA('page')) {",
          "592:             return $entity->restricted || ($entity->chapter && $entity->chapter->restricted) || $entity->book->restricted;",
          "593:         } elseif ($entity->isA('chapter')) {",
          "594:             return $entity->restricted || $entity->book->restricted;",
          "595:         } elseif ($entity->isA('book')) {",
          "596:             return $entity->restricted;",
          "597:         }",
          "598:     }",
          "606:     protected function entityRestrictionQuery($query)",
          "608:         $q = $query->where(function ($parentQuery) {",
          "609:             $parentQuery->whereHas('jointPermissions', function ($permissionQuery) {",
          "610:                 $permissionQuery->whereIn('role_id', $this->getRoles())",
          "611:                     ->where('action', '=', $this->currentAction)",
          "",
          "[Added Lines]",
          "523:     protected function entityRestrictionQuery(Builder $query, string $action): Builder",
          "525:         $q = $query->where(function ($parentQuery) use ($action) {",
          "526:             $parentQuery->whereHas('jointPermissions', function ($permissionQuery) use ($action) {",
          "527:                 $permissionQuery->whereIn('role_id', $this->getCurrentUserRoles())",
          "528:                     ->where('action', '=', $action)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "631:         $this->clean();",
          "632:         return $query->where(function (Builder $parentQuery) use ($ability) {",
          "633:             $parentQuery->whereHas('jointPermissions', function (Builder $permissionQuery) use ($ability) {",
          "635:                     ->where('action', '=', $ability)",
          "636:                     ->where(function (Builder $query) {",
          "637:                         $query->where('has_permission', '=', true)",
          "",
          "[Removed Lines]",
          "634:                 $permissionQuery->whereIn('role_id', $this->getRoles())",
          "",
          "[Added Lines]",
          "552:                 $permissionQuery->whereIn('role_id', $this->getCurrentUserRoles())",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "652:     {",
          "653:         return $query->where(function (Builder $query) {",
          "654:             $query->where('draft', '=', false)",
          "",
          "[Removed Lines]",
          "651:     public function enforceDraftVisiblityOnQuery(Builder $query): Builder",
          "",
          "[Added Lines]",
          "569:     public function enforceDraftVisibilityOnQuery(Builder $query): Builder",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "660:     }",
          "670:     {",
          "671:         if (strtolower($entityType) === 'page') {",
          "674:                 $query->where('draft', '=', false)",
          "675:                     ->orWhere(function ($query) {",
          "676:                         $query->where('draft', '=', true)",
          "",
          "[Removed Lines]",
          "669:     public function enforceEntityRestrictions($entityType, $query, $action = 'view')",
          "673:             $query = $query->where(function ($query) {",
          "",
          "[Added Lines]",
          "583:     public function enforceEntityRestrictions(string $entityType, Builder $query, string $action = 'view'): Builder",
          "587:             $query->where(function ($query) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "679:             });",
          "680:         }",
          "684:     }",
          "696:     {",
          "699:         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn, 'entityTypeColumn' => $entityTypeColumn];",
          "703:                 $permissionQuery->select('id')->from('joint_permissions')",
          "704:                     ->whereRaw('joint_permissions.entity_id=' . $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "705:                     ->whereRaw('joint_permissions.entity_type=' . $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
          "708:                     ->where(function ($query) {",
          "709:                         $query->where('has_permission', '=', true)->orWhere(function ($query) {",
          "710:                             $query->where('has_permission_own', '=', true)",
          "",
          "[Removed Lines]",
          "682:         $this->currentAction = $action;",
          "683:         return $this->entityRestrictionQuery($query);",
          "695:     public function filterRestrictedEntityRelations($query, $tableName, $entityIdColumn, $entityTypeColumn, $action = 'view')",
          "698:         $this->currentAction = $action;",
          "701:         $q = $query->where(function ($query) use ($tableDetails) {",
          "702:             $query->whereExists(function ($permissionQuery) use (&$tableDetails) {",
          "706:                     ->where('action', '=', $this->currentAction)",
          "707:                     ->whereIn('role_id', $this->getRoles())",
          "",
          "[Added Lines]",
          "596:         return $this->entityRestrictionQuery($query, $action);",
          "602:     public function filterRestrictedEntityRelations(Builder $query, string $tableName, string $entityIdColumn, string $entityTypeColumn, string $action = 'view'): Builder",
          "606:         $q = $query->where(function ($query) use ($tableDetails, $action) {",
          "607:             $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {",
          "611:                     ->where('action', '=', $action)",
          "612:                     ->whereIn('role_id', $this->getCurrentUserRoles())",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "713:                     });",
          "714:             });",
          "715:         });",
          "716:         $this->clean();",
          "717:         return $q;",
          "718:     }",
          "730:     {",
          "732:         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn];",
          "739:                     $permissionQuery->select('id')->from('joint_permissions')",
          "740:                         ->whereRaw('joint_permissions.entity_id=' . $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "744:                         ->where(function ($query) {",
          "745:                             $query->where('has_permission', '=', true)->orWhere(function ($query) {",
          "746:                                 $query->where('has_permission_own', '=', true)",
          "",
          "[Removed Lines]",
          "729:     public function filterRelatedEntity($entityType, $query, $tableName, $entityIdColumn)",
          "731:         $this->currentAction = 'view';",
          "734:         $pageMorphClass = $this->entityProvider->get($entityType)->getMorphClass();",
          "736:         $q = $query->where(function ($query) use ($tableDetails, $pageMorphClass) {",
          "737:             $query->where(function ($query) use (&$tableDetails, $pageMorphClass) {",
          "738:                 $query->whereExists(function ($permissionQuery) use (&$tableDetails, $pageMorphClass) {",
          "741:                         ->where('entity_type', '=', $pageMorphClass)",
          "742:                         ->where('action', '=', $this->currentAction)",
          "743:                         ->whereIn('role_id', $this->getRoles())",
          "",
          "[Added Lines]",
          "630:     public function filterRelatedEntity(string $entityClass, Builder $query, string $tableName, string $entityIdColumn): Builder",
          "633:         $morphClass = app($entityClass)->getMorphClass();",
          "635:         $q = $query->where(function ($query) use ($tableDetails, $morphClass) {",
          "636:             $query->where(function ($query) use (&$tableDetails, $morphClass) {",
          "637:                 $query->whereExists(function ($permissionQuery) use (&$tableDetails, $morphClass) {",
          "640:                         ->where('entity_type', '=', $morphClass)",
          "641:                         ->where('action', '=', 'view')",
          "642:                         ->whereIn('role_id', $this->getCurrentUserRoles())",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "752:         });",
          "754:         $this->clean();",
          "756:         return $q;",
          "757:     }",
          "764:     {",
          "766:             $this->currentUserModel = user();",
          "767:         }",
          "",
          "[Removed Lines]",
          "763:     private function currentUser()",
          "765:         if ($this->currentUserModel === false) {",
          "",
          "[Added Lines]",
          "660:     private function currentUser(): User",
          "662:         if (is_null($this->currentUserModel)) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "776:     {",
          "780:     }",
          "781: }",
          "",
          "[Removed Lines]",
          "775:     private function clean()",
          "777:         $this->currentUserModel = false;",
          "778:         $this->userRoles = false;",
          "779:         $this->isAdminUser = null;",
          "",
          "[Added Lines]",
          "672:     private function clean(): void",
          "674:         $this->currentUserModel = null;",
          "675:         $this->userRoles = null;",
          "",
          "---------------"
        ],
        "app/Entities/Models/Page.php||app/Entities/Models/Page.php": [
          "File: app/Entities/Models/Page.php -> app/Entities/Models/Page.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     public function scopeVisible(Builder $query): Builder",
          "42:     {",
          "44:         return parent::scopeVisible($query);",
          "45:     }",
          "",
          "[Removed Lines]",
          "43:         $query = Permissions::enforceDraftVisiblityOnQuery($query);",
          "",
          "[Added Lines]",
          "43:         $query = Permissions::enforceDraftVisibilityOnQuery($query);",
          "",
          "---------------"
        ],
        "app/Uploads/ImageRepo.php||app/Uploads/ImageRepo.php": [
          "File: app/Uploads/ImageRepo.php -> app/Uploads/ImageRepo.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:         }",
          "87:         if ($whereClause !== null) {",
          "88:             $imageQuery = $imageQuery->where($whereClause);",
          "",
          "[Removed Lines]",
          "85:         $imageQuery = $this->restrictionService->filterRelatedEntity('page', $imageQuery, 'images', 'uploaded_to');",
          "",
          "[Added Lines]",
          "85:         $imageQuery = $this->restrictionService->filterRelatedEntity(Page::class, $imageQuery, 'images', 'uploaded_to');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00af40ab14e6c32524daf077006a4f5ae6fd3823",
      "candidate_info": {
        "commit_hash": "00af40ab14e6c32524daf077006a4f5ae6fd3823",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/00af40ab14e6c32524daf077006a4f5ae6fd3823",
        "files": [
          "app/Auth/Permissions/PermissionService.php"
        ],
        "message": "Allow to use DB tables prefix",
        "before_after_code_files": [
          "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ],
          "candidate": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
          "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:     public function filterRestrictedEntityRelations($query, string $tableName, string $entityIdColumn, string $entityTypeColumn, string $action = 'view')",
          "609:     {",
          "612:         $q = $query->where(function ($query) use ($tableDetails, $action) {",
          "613:             $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {",
          "614:                 $permissionQuery->select(['role_id'])->from('joint_permissions')",
          "617:                     ->where('action', '=', $action)",
          "618:                     ->whereIn('role_id', $this->getCurrentUserRoles())",
          "619:                     ->where(function (QueryBuilder $query) {",
          "",
          "[Removed Lines]",
          "610:         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn, 'entityTypeColumn' => $entityTypeColumn];",
          "615:                     ->whereRaw('joint_permissions.entity_id=' . $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "616:                     ->whereRaw('joint_permissions.entity_type=' . $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
          "",
          "[Added Lines]",
          "610:         $tableDetails = ['tableName' => $this->db->getTablePrefix() . $tableName, 'entityIdColumn' => $entityIdColumn, 'entityTypeColumn' => $entityTypeColumn];",
          "615:                     ->whereRaw($this->db->getTablePrefix() . 'joint_permissions.entity_id=' . $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "616:                     ->whereRaw($this->db->getTablePrefix() . 'joint_permissions.entity_type=' . $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "640:             $query->where(function ($query) use (&$tableDetails, $morphClass) {",
          "641:                 $query->whereExists(function ($permissionQuery) use (&$tableDetails, $morphClass) {",
          "642:                     $permissionQuery->select('id')->from('joint_permissions')",
          "644:                         ->where('entity_type', '=', $morphClass)",
          "645:                         ->where('action', '=', 'view')",
          "646:                         ->whereIn('role_id', $this->getCurrentUserRoles())",
          "",
          "[Removed Lines]",
          "643:                         ->whereRaw('joint_permissions.entity_id=' . $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "",
          "[Added Lines]",
          "643:                         ->whereRaw($this->db->getTablePrefix() . 'joint_permissions.entity_id=' . $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ba8ba5c63421881d9346cbd6dd09a28943ff84ef",
      "candidate_info": {
        "commit_hash": "ba8ba5c63421881d9346cbd6dd09a28943ff84ef",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/ba8ba5c63421881d9346cbd6dd09a28943ff84ef",
        "files": [
          "app/Auth/Permissions/PermissionService.php",
          "app/Entities/Queries/TopFavourites.php",
          "app/Http/Controllers/SearchController.php",
          "app/Providers/CustomFacadeProvider.php",
          "tests/FavouriteTest.php"
        ],
        "message": "Added testing to favourite system\n\n- Also removed some old view service references.\n- Updated TopFavourites query to be based on favourites table and join\n  in the views instead of the other way around, so that favourites still\nshow even if they have no views.",
        "before_after_code_files": [
          "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php",
          "app/Entities/Queries/TopFavourites.php||app/Entities/Queries/TopFavourites.php",
          "app/Http/Controllers/SearchController.php||app/Http/Controllers/SearchController.php",
          "app/Providers/CustomFacadeProvider.php||app/Providers/CustomFacadeProvider.php",
          "tests/FavouriteTest.php||tests/FavouriteTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ],
          "candidate": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
          "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "589:         $q = $query->where(function ($query) use ($tableDetails, $action) {",
          "590:             $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {",
          "592:                     ->whereRaw('joint_permissions.entity_id=' . $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "593:                     ->whereRaw('joint_permissions.entity_type=' . $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
          "594:                     ->where('action', '=', $action)",
          "",
          "[Removed Lines]",
          "591:                 $permissionQuery->select('id')->from('joint_permissions')",
          "",
          "[Added Lines]",
          "591:                 $permissionQuery->select(['role_id'])->from('joint_permissions')",
          "",
          "---------------"
        ],
        "app/Entities/Queries/TopFavourites.php||app/Entities/Queries/TopFavourites.php": [
          "File: app/Entities/Queries/TopFavourites.php -> app/Entities/Queries/TopFavourites.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php namespace BookStack\\Entities\\Queries;",
          "4: use Illuminate\\Database\\Query\\JoinClause;",
          "7: class TopFavourites extends EntityQuery",
          "8: {",
          "9:     public function run(int $count, int $skip = 0)",
          "10:     {",
          "11:         $user = user();",
          "13:             return collect();",
          "14:         }",
          "16:         $query = $this->permissionService()",
          "24:             })",
          "28:             ->skip($skip)",
          "29:             ->take($count)",
          "30:             ->get()",
          "32:             ->filter();",
          "33:     }",
          "34: }",
          "",
          "[Removed Lines]",
          "3: use BookStack\\Actions\\View;",
          "5: use Illuminate\\Support\\Facades\\DB;",
          "12:         if ($user === null || $user->isDefault()) {",
          "17:             ->filterRestrictedEntityRelations(View::query(), 'views', 'viewable_id', 'viewable_type', 'view')",
          "18:             ->select('*', 'viewable_id', 'viewable_type', DB::raw('SUM(views) as view_count'))",
          "19:             ->groupBy('viewable_id', 'viewable_type')",
          "20:             ->rightJoin('favourites', function (JoinClause $join) {",
          "21:                 $join->on('views.viewable_id', '=', 'favourites.favouritable_id');",
          "22:                 $join->on('views.viewable_type', '=', 'favourites.favouritable_type');",
          "23:                 $join->where('favourites.user_id', '=', user()->id);",
          "25:             ->orderBy('view_count', 'desc');",
          "27:         return $query->with('viewable')",
          "31:             ->pluck('viewable')",
          "",
          "[Added Lines]",
          "3: use BookStack\\Actions\\Favourite;",
          "11:         if (is_null($user) || $user->isDefault()) {",
          "16:             ->filterRestrictedEntityRelations(Favourite::query(), 'favourites', 'favouritable_id', 'favouritable_type', 'view')",
          "17:             ->select('favourites.*')",
          "18:             ->leftJoin('views', function (JoinClause $join) {",
          "19:                 $join->on('favourites.favouritable_id', '=', 'views.viewable_id');",
          "20:                 $join->on('favourites.favouritable_type', '=', 'views.viewable_type');",
          "21:                 $join->where('views.user_id', '=', user()->id);",
          "23:             ->orderBy('views.views', 'desc')",
          "24:             ->where('favourites.user_id', '=', user()->id);",
          "26:         return $query->with('favouritable')",
          "30:             ->pluck('favouritable')",
          "",
          "---------------"
        ],
        "app/Http/Controllers/SearchController.php||app/Http/Controllers/SearchController.php": [
          "File: app/Http/Controllers/SearchController.php -> app/Http/Controllers/SearchController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php namespace BookStack\\Http\\Controllers;",
          "4: use BookStack\\Entities\\Queries\\Popular;",
          "5: use BookStack\\Entities\\Tools\\SearchRunner;",
          "6: use BookStack\\Entities\\Tools\\ShelfContext;",
          "",
          "[Removed Lines]",
          "3: use BookStack\\Actions\\ViewService;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: class SearchController extends Controller",
          "12: {",
          "14:     protected $searchRunner;",
          "15:     protected $entityContextManager;",
          "17:     public function __construct(",
          "19:         SearchRunner $searchRunner,",
          "20:         ShelfContext $entityContextManager",
          "21:     ) {",
          "23:         $this->searchRunner = $searchRunner;",
          "24:         $this->entityContextManager = $entityContextManager;",
          "25:     }",
          "",
          "[Removed Lines]",
          "13:     protected $viewService;",
          "18:         ViewService $viewService,",
          "22:         $this->viewService = $viewService;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "app/Providers/CustomFacadeProvider.php||app/Providers/CustomFacadeProvider.php": [
          "File: app/Providers/CustomFacadeProvider.php -> app/Providers/CustomFacadeProvider.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace BookStack\\Providers;",
          "5: use BookStack\\Actions\\ActivityService;",
          "7: use BookStack\\Auth\\Permissions\\PermissionService;",
          "8: use BookStack\\Theming\\ThemeService;",
          "9: use BookStack\\Uploads\\ImageService;",
          "",
          "[Removed Lines]",
          "6: use BookStack\\Actions\\ViewService;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:             return $this->app->make(ActivityService::class);",
          "33:         });",
          "39:         $this->app->singleton('images', function () {",
          "40:             return $this->app->make(ImageService::class);",
          "41:         });",
          "",
          "[Removed Lines]",
          "35:         $this->app->singleton('views', function () {",
          "36:             return $this->app->make(ViewService::class);",
          "37:         });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/FavouriteTest.php||tests/FavouriteTest.php": [
          "File: tests/FavouriteTest.php -> tests/FavouriteTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "3: use BookStack\\Actions\\Favourite;",
          "4: use BookStack\\Entities\\Models\\Page;",
          "5: use Tests\\TestCase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: use BookStack\\Entities\\Models\\Book;",
          "5: use BookStack\\Entities\\Models\\Bookshelf;",
          "6: use BookStack\\Entities\\Models\\Chapter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:         ]);",
          "57:     }",
          "59: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     public function test_book_chapter_shelf_pages_contain_favourite_button()",
          "63:     {",
          "64:         $entities = [",
          "65:             Bookshelf::query()->first(),",
          "66:             Book::query()->first(),",
          "67:             Chapter::query()->first(),",
          "68:         ];",
          "69:         $this->actingAs($this->getEditor());",
          "71:         foreach ($entities as $entity) {",
          "72:             $resp = $this->get($entity->getUrl());",
          "73:             $resp->assertElementExists('form[method=\"POST\"][action$=\"/favourites/add\"]');",
          "74:         }",
          "75:     }",
          "77:     public function test_header_contains_link_to_favourites_page_when_logged_in()",
          "78:     {",
          "79:         $this->setSettings(['app-public' => 'true']);",
          "80:         $this->get('/')->assertElementNotContains('header', 'My Favourites');",
          "81:         $this->actingAs($this->getViewer())->get('/')->assertElementContains('header a', 'My Favourites');",
          "82:     }",
          "84:     public function test_favourites_shown_on_homepage()",
          "85:     {",
          "86:         $editor = $this->getEditor();",
          "88:         $resp = $this->actingAs($editor)->get('/');",
          "89:         $resp->assertElementNotExists('#top-favourites');",
          "92:         $page = Page::query()->first();",
          "93:         $page->favourites()->save((new Favourite)->forceFill(['user_id' => $editor->id]));",
          "95:         $resp = $this->get('/');",
          "96:         $resp->assertElementExists('#top-favourites');",
          "97:         $resp->assertElementContains('#top-favourites', $page->name);",
          "98:     }",
          "100:     public function test_favourites_list_page_shows_favourites_and_has_working_pagination()",
          "101:     {",
          "103:         $page = Page::query()->first();",
          "104:         $editor = $this->getEditor();",
          "106:         $resp = $this->actingAs($editor)->get('/favourites');",
          "107:         $resp->assertDontSee($page->name);",
          "109:         $page->favourites()->save((new Favourite)->forceFill(['user_id' => $editor->id]));",
          "111:         $resp = $this->get('/favourites');",
          "112:         $resp->assertSee($page->name);",
          "114:         $resp = $this->get('/favourites?page=2');",
          "115:         $resp->assertDontSee($page->name);",
          "116:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9490457d044b51fbe330998ce37dcfe255038f55",
      "candidate_info": {
        "commit_hash": "9490457d044b51fbe330998ce37dcfe255038f55",
        "repo": "bookstackapp/bookstack",
        "commit_url": "https://github.com/bookstackapp/bookstack/commit/9490457d044b51fbe330998ce37dcfe255038f55",
        "files": [
          "app/Auth/Permissions/PermissionService.php",
          "app/Http/Middleware/ApiAuthenticate.php"
        ],
        "message": "Applied StyleCI changes",
        "before_after_code_files": [
          "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php",
          "app/Http/Middleware/ApiAuthenticate.php||app/Http/Middleware/ApiAuthenticate.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ],
          "candidate": [
            "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php"
          ]
        }
      },
      "candidate_diff": {
        "app/Auth/Permissions/PermissionService.php||app/Auth/Permissions/PermissionService.php": [
          "File: app/Auth/Permissions/PermissionService.php -> app/Auth/Permissions/PermissionService.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:         })->where(function ($query) use ($tableDetails, $pageMorphClass) {",
          "627:             $query->where($tableDetails['entityTypeColumn'], '!=', $pageMorphClass)",
          "629:                     $query->select('id')->from('pages')",
          "630:                         ->whereColumn('pages.id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
          "631:                         ->where($tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'], '=', $pageMorphClass)",
          "",
          "[Removed Lines]",
          "628:                 ->orWhereExists(function(QueryBuilder $query) use ($tableDetails, $pageMorphClass) {",
          "",
          "[Added Lines]",
          "628:                 ->orWhereExists(function (QueryBuilder $query) use ($tableDetails, $pageMorphClass) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "645:     public function filterRelatedEntity(string $entityClass, Builder $query, string $tableName, string $entityIdColumn): Builder",
          "646:     {",
          "647:         $fullEntityIdColumn = $tableName . '.' . $entityIdColumn;",
          "649:         $morphClass = $instance->getMorphClass();",
          "653:             $permissionQuery->select('joint_permissions.role_id')->from('joint_permissions')",
          "654:                 ->whereColumn('joint_permissions.entity_id', '=', $fullEntityIdColumn)",
          "",
          "[Removed Lines]",
          "648:         $instance = new $entityClass;",
          "651:         $existsQuery = function($permissionQuery) use ($fullEntityIdColumn, $morphClass) {",
          "",
          "[Added Lines]",
          "648:         $instance = new $entityClass();",
          "651:         $existsQuery = function ($permissionQuery) use ($fullEntityIdColumn, $morphClass) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "668:         if ($instance instanceof Page) {",
          "671:                 $query->select('id')->from('pages')",
          "672:                     ->whereColumn('pages.id', '=', $fullEntityIdColumn)",
          "673:                     ->where(function (QueryBuilder $query) {",
          "",
          "[Removed Lines]",
          "670:             $q->whereExists(function(QueryBuilder $query) use ($fullEntityIdColumn) {",
          "",
          "[Added Lines]",
          "670:             $q->whereExists(function (QueryBuilder $query) use ($fullEntityIdColumn) {",
          "",
          "---------------"
        ],
        "app/Http/Middleware/ApiAuthenticate.php||app/Http/Middleware/ApiAuthenticate.php": [
          "File: app/Http/Middleware/ApiAuthenticate.php -> app/Http/Middleware/ApiAuthenticate.php"
        ]
      }
    }
  ]
}