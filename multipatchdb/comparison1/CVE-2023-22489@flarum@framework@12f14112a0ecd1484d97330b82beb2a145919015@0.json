{
  "cve_id": "CVE-2023-22489",
  "cve_desc": "Flarum is a discussion platform for websites. If the first post of a discussion is permanently deleted but the discussion stays visible, any actor who can view the discussion is able to create a new reply via the REST API, no matter the reply permission or lock status. This includes users that don't have a validated email. Guests cannot successfully create a reply because the API will fail with a 500 error when the user ID 0 is inserted into the database. This happens because when the first post of a discussion is permanently deleted, the `first_post_id` attribute of the discussion becomes `null` which causes access control to be skipped for all new replies. Flarum automatically makes discussions with zero comments invisible so an additional condition for this vulnerability is that the discussion must have at least one approved reply so that `discussions.comment_count` is still above zero after the post deletion. This can open the discussion to uncontrolled spam or just unintentional replies if users still had their tab open before the vulnerable discussion was locked and then post a reply when they shouldn't be able to. In combination with the email notification settings, this could also be used as a way to send unsolicited emails. Versions between `v1.3.0` and `v1.6.3` are impacted. The vulnerability has been fixed and published as flarum/core v1.6.3. All communities running Flarum should upgrade as soon as possible. There are no known workarounds.\n",
  "repo": "flarum/framework",
  "patch_hash": "12f14112a0ecd1484d97330b82beb2a145919015",
  "patch_info": {
    "commit_hash": "12f14112a0ecd1484d97330b82beb2a145919015",
    "repo": "flarum/framework",
    "commit_url": "https://github.com/flarum/framework/commit/12f14112a0ecd1484d97330b82beb2a145919015",
    "files": [
      "framework/core/src/Discussion/Command/StartDiscussionHandler.php",
      "framework/core/src/Post/Command/PostReply.php",
      "framework/core/src/Post/Command/PostReplyHandler.php",
      "framework/core/tests/integration/api/posts/CreateTest.php"
    ],
    "message": "Merge pull request from GHSA-hph3-hv3c-7725\n\n* test: add reply creation tests\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\n* fix: access checking being bypassed for post creation when first post is deleted\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\n* chore: recover tests\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\n* chore: make provider public\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>",
    "before_after_code_files": [
      "framework/core/src/Discussion/Command/StartDiscussionHandler.php||framework/core/src/Discussion/Command/StartDiscussionHandler.php",
      "framework/core/src/Post/Command/PostReply.php||framework/core/src/Post/Command/PostReply.php",
      "framework/core/src/Post/Command/PostReplyHandler.php||framework/core/src/Post/Command/PostReplyHandler.php",
      "framework/core/tests/integration/api/posts/CreateTest.php||framework/core/tests/integration/api/posts/CreateTest.php"
    ]
  },
  "patch_diff": {
    "framework/core/src/Discussion/Command/StartDiscussionHandler.php||framework/core/src/Discussion/Command/StartDiscussionHandler.php": [
      "File: framework/core/src/Discussion/Command/StartDiscussionHandler.php -> framework/core/src/Discussion/Command/StartDiscussionHandler.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:         try {",
      "81:             $post = $this->bus->dispatch(",
      "83:             );",
      "84:         } catch (Exception $e) {",
      "85:             $discussion->delete();",
      "",
      "[Removed Lines]",
      "82:                 new PostReply($discussion->id, $actor, $data, $ipAddress)",
      "",
      "[Added Lines]",
      "82:                 new PostReply($discussion->id, $actor, $data, $ipAddress, true)",
      "",
      "---------------"
    ],
    "framework/core/src/Post/Command/PostReply.php||framework/core/src/Post/Command/PostReply.php": [
      "File: framework/core/src/Post/Command/PostReply.php -> framework/core/src/Post/Command/PostReply.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:     public $ipAddress;",
      "51:     {",
      "52:         $this->discussionId = $discussionId;",
      "53:         $this->actor = $actor;",
      "54:         $this->data = $data;",
      "55:         $this->ipAddress = $ipAddress;",
      "56:     }",
      "57: }",
      "",
      "[Removed Lines]",
      "50:     public function __construct($discussionId, User $actor, array $data, $ipAddress = null)",
      "",
      "[Added Lines]",
      "47:     public $isFirstPost;",
      "55:     public function __construct($discussionId, User $actor, array $data, $ipAddress = null, bool $isFirstPost = false)",
      "61:         $this->isFirstPost = $isFirstPost;",
      "",
      "---------------"
    ],
    "framework/core/src/Post/Command/PostReplyHandler.php||framework/core/src/Post/Command/PostReplyHandler.php": [
      "File: framework/core/src/Post/Command/PostReplyHandler.php -> framework/core/src/Post/Command/PostReplyHandler.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:             $actor->assertCan('reply', $discussion);",
      "79:         }",
      "",
      "[Removed Lines]",
      "77:         if ($discussion->first_post_id !== null) {",
      "",
      "[Added Lines]",
      "77:         if (! $command->isFirstPost) {",
      "",
      "---------------"
    ],
    "framework/core/tests/integration/api/posts/CreateTest.php||framework/core/tests/integration/api/posts/CreateTest.php": [
      "File: framework/core/tests/integration/api/posts/CreateTest.php -> framework/core/tests/integration/api/posts/CreateTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: namespace Flarum\\Tests\\integration\\api\\posts;",
      "12: use Carbon\\Carbon;",
      "13: use Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;",
      "14: use Flarum\\Testing\\integration\\TestCase;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: use Flarum\\Group\\Group;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "27:         $this->prepareDatabase([",
      "28:             'discussions' => [",
      "30:             ],",
      "31:             'users' => [",
      "32:                 $this->normalUser(),",
      "34:         ]);",
      "35:     }",
      "41:     {",
      "42:         $response = $this->send(",
      "43:             $this->request('POST', '/api/posts', [",
      "45:                 'json' => [",
      "46:                     'data' => [",
      "47:                         'attributes' => [",
      "48:                             'content' => 'reply with predetermined content for automated testing - too-obscure',",
      "49:                         ],",
      "50:                         'relationships' => [",
      "52:                         ],",
      "53:                     ],",
      "54:                 ],",
      "55:             ])",
      "56:         );",
      "59:     }",
      "",
      "[Removed Lines]",
      "29:                 ['id' => 1, 'title' => __CLASS__, 'created_at' => Carbon::now()->toDateTimeString(), 'user_id' => 2],",
      "33:             ]",
      "40:     public function can_create_reply()",
      "44:                 'authenticatedAs' => 2,",
      "51:                             'discussion' => ['data' => ['id' => 1]],",
      "58:         $this->assertEquals(201, $response->getStatusCode());",
      "",
      "[Added Lines]",
      "30:                 ['id' => 1, 'title' => __CLASS__, 'created_at' => Carbon::now()->toDateTimeString(), 'user_id' => 2, 'first_post_id' => 1],",
      "32:                 ['id' => 2, 'title' => __CLASS__, 'created_at' => Carbon::now()->toDateTimeString(), 'user_id' => 2, 'first_post_id' => null],",
      "33:             ],",
      "34:             'posts' => [",
      "35:                 ['id' => 1, 'discussion_id' => 1, 'number' => 1, 'created_at' => Carbon::now()->subDay()->toDateTimeString(), 'user_id' => 2, 'type' => 'comment', 'content' => '<t></t>'],",
      "39:                 ['id' => 3, 'username' => 'restricted', 'email' => 'restricted@machine.local', 'is_email_confirmed' => 1],",
      "40:             ],",
      "41:             'groups' => [",
      "42:                 ['id' => 40, 'name_singular' => 'tess', 'name_plural' => 'tess'],",
      "43:             ],",
      "44:             'group_user' => [",
      "45:                 ['group_id' => 40, 'user_id' => 3],",
      "46:             ],",
      "47:             'group_permission' => [",
      "48:                 ['group_id' => 40, 'permission' => 'discussion.reply'],",
      "49:             ],",
      "57:     public function can_create_reply_if_allowed(int $actorId, int $discussionId, int $responseStatus)",
      "60:         $this->database()",
      "61:             ->table('group_permission')",
      "62:             ->where('permission', 'discussion.reply')",
      "63:             ->where('group_id', Group::MEMBER_ID)",
      "64:             ->delete();",
      "68:                 'authenticatedAs' => $actorId,",
      "75:                             'discussion' => ['data' => ['id' => $discussionId]],",
      "82:         $this->assertEquals($responseStatus, $response->getStatusCode());",
      "83:     }",
      "85:     public function discussionRepliesPrvider(): array",
      "86:     {",
      "87:         return [",
      "89:             'can_create_reply_with_ability' => [3, 1, 201],",
      "90:             'cannot_create_reply_without_ability' => [2, 1, 403],",
      "91:             'can_create_reply_with_ability_when_first_post_is_deleted' => [3, 2, 201],",
      "92:             'cannot_create_reply_without_ability_when_first_post_is_deleted' => [2, 2, 403],",
      "93:         ];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "12dfcc5c7960e8dc1e35e9d0a10d071923b39a76",
      "candidate_info": {
        "commit_hash": "12dfcc5c7960e8dc1e35e9d0a10d071923b39a76",
        "repo": "flarum/framework",
        "commit_url": "https://github.com/flarum/framework/commit/12dfcc5c7960e8dc1e35e9d0a10d071923b39a76",
        "files": [
          "framework/core/src/Discussion/Command/StartDiscussionHandler.php",
          "framework/core/src/Post/Command/PostReply.php",
          "framework/core/src/Post/Command/PostReplyHandler.php",
          "framework/core/tests/integration/api/posts/CreateTest.php"
        ],
        "message": "Merge pull request from GHSA-hph3-hv3c-7725\n\n* test: add reply creation tests\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\n* fix: access checking being bypassed for post creation when first post is deleted\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\n* chore: recover tests\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\n* chore: make provider public\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>\n\nSigned-off-by: Sami Mazouz <sychocouldy@gmail.com>",
        "before_after_code_files": [
          "framework/core/src/Discussion/Command/StartDiscussionHandler.php||framework/core/src/Discussion/Command/StartDiscussionHandler.php",
          "framework/core/src/Post/Command/PostReply.php||framework/core/src/Post/Command/PostReply.php",
          "framework/core/src/Post/Command/PostReplyHandler.php||framework/core/src/Post/Command/PostReplyHandler.php",
          "framework/core/tests/integration/api/posts/CreateTest.php||framework/core/tests/integration/api/posts/CreateTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "framework/core/src/Discussion/Command/StartDiscussionHandler.php||framework/core/src/Discussion/Command/StartDiscussionHandler.php",
            "framework/core/src/Post/Command/PostReply.php||framework/core/src/Post/Command/PostReply.php",
            "framework/core/src/Post/Command/PostReplyHandler.php||framework/core/src/Post/Command/PostReplyHandler.php",
            "framework/core/tests/integration/api/posts/CreateTest.php||framework/core/tests/integration/api/posts/CreateTest.php"
          ],
          "candidate": [
            "framework/core/src/Discussion/Command/StartDiscussionHandler.php||framework/core/src/Discussion/Command/StartDiscussionHandler.php",
            "framework/core/src/Post/Command/PostReply.php||framework/core/src/Post/Command/PostReply.php",
            "framework/core/src/Post/Command/PostReplyHandler.php||framework/core/src/Post/Command/PostReplyHandler.php",
            "framework/core/tests/integration/api/posts/CreateTest.php||framework/core/tests/integration/api/posts/CreateTest.php"
          ]
        }
      },
      "candidate_diff": {
        "framework/core/src/Discussion/Command/StartDiscussionHandler.php||framework/core/src/Discussion/Command/StartDiscussionHandler.php": [
          "File: framework/core/src/Discussion/Command/StartDiscussionHandler.php -> framework/core/src/Discussion/Command/StartDiscussionHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         try {",
          "81:             $post = $this->bus->dispatch(",
          "83:             );",
          "84:         } catch (Exception $e) {",
          "85:             $discussion->delete();",
          "",
          "[Removed Lines]",
          "82:                 new PostReply($discussion->id, $actor, $data, $ipAddress)",
          "",
          "[Added Lines]",
          "82:                 new PostReply($discussion->id, $actor, $data, $ipAddress, true)",
          "",
          "---------------"
        ],
        "framework/core/src/Post/Command/PostReply.php||framework/core/src/Post/Command/PostReply.php": [
          "File: framework/core/src/Post/Command/PostReply.php -> framework/core/src/Post/Command/PostReply.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     public $ipAddress;",
          "51:     {",
          "52:         $this->discussionId = $discussionId;",
          "53:         $this->actor = $actor;",
          "54:         $this->data = $data;",
          "55:         $this->ipAddress = $ipAddress;",
          "56:     }",
          "57: }",
          "",
          "[Removed Lines]",
          "50:     public function __construct($discussionId, User $actor, array $data, $ipAddress = null)",
          "",
          "[Added Lines]",
          "47:     public $isFirstPost;",
          "55:     public function __construct($discussionId, User $actor, array $data, $ipAddress = null, bool $isFirstPost = false)",
          "61:         $this->isFirstPost = $isFirstPost;",
          "",
          "---------------"
        ],
        "framework/core/src/Post/Command/PostReplyHandler.php||framework/core/src/Post/Command/PostReplyHandler.php": [
          "File: framework/core/src/Post/Command/PostReplyHandler.php -> framework/core/src/Post/Command/PostReplyHandler.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:             $actor->assertCan('reply', $discussion);",
          "79:         }",
          "",
          "[Removed Lines]",
          "77:         if ($discussion->first_post_id !== null) {",
          "",
          "[Added Lines]",
          "77:         if (! $command->isFirstPost) {",
          "",
          "---------------"
        ],
        "framework/core/tests/integration/api/posts/CreateTest.php||framework/core/tests/integration/api/posts/CreateTest.php": [
          "File: framework/core/tests/integration/api/posts/CreateTest.php -> framework/core/tests/integration/api/posts/CreateTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: namespace Flarum\\Tests\\integration\\api\\posts;",
          "12: use Carbon\\Carbon;",
          "13: use Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;",
          "14: use Flarum\\Testing\\integration\\TestCase;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: use Flarum\\Group\\Group;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:         $this->prepareDatabase([",
          "28:             'discussions' => [",
          "30:             ],",
          "31:             'users' => [",
          "32:                 $this->normalUser(),",
          "34:         ]);",
          "35:     }",
          "41:     {",
          "42:         $response = $this->send(",
          "43:             $this->request('POST', '/api/posts', [",
          "45:                 'json' => [",
          "46:                     'data' => [",
          "47:                         'attributes' => [",
          "48:                             'content' => 'reply with predetermined content for automated testing - too-obscure',",
          "49:                         ],",
          "50:                         'relationships' => [",
          "52:                         ],",
          "53:                     ],",
          "54:                 ],",
          "55:             ])",
          "56:         );",
          "59:     }",
          "",
          "[Removed Lines]",
          "29:                 ['id' => 1, 'title' => __CLASS__, 'created_at' => Carbon::now()->toDateTimeString(), 'user_id' => 2],",
          "33:             ]",
          "40:     public function can_create_reply()",
          "44:                 'authenticatedAs' => 2,",
          "51:                             'discussion' => ['data' => ['id' => 1]],",
          "58:         $this->assertEquals(201, $response->getStatusCode());",
          "",
          "[Added Lines]",
          "30:                 ['id' => 1, 'title' => __CLASS__, 'created_at' => Carbon::now()->toDateTimeString(), 'user_id' => 2, 'first_post_id' => 1],",
          "32:                 ['id' => 2, 'title' => __CLASS__, 'created_at' => Carbon::now()->toDateTimeString(), 'user_id' => 2, 'first_post_id' => null],",
          "33:             ],",
          "34:             'posts' => [",
          "35:                 ['id' => 1, 'discussion_id' => 1, 'number' => 1, 'created_at' => Carbon::now()->subDay()->toDateTimeString(), 'user_id' => 2, 'type' => 'comment', 'content' => '<t></t>'],",
          "39:                 ['id' => 3, 'username' => 'restricted', 'email' => 'restricted@machine.local', 'is_email_confirmed' => 1],",
          "40:             ],",
          "41:             'groups' => [",
          "42:                 ['id' => 40, 'name_singular' => 'tess', 'name_plural' => 'tess'],",
          "43:             ],",
          "44:             'group_user' => [",
          "45:                 ['group_id' => 40, 'user_id' => 3],",
          "46:             ],",
          "47:             'group_permission' => [",
          "48:                 ['group_id' => 40, 'permission' => 'discussion.reply'],",
          "49:             ],",
          "57:     public function can_create_reply_if_allowed(int $actorId, int $discussionId, int $responseStatus)",
          "60:         $this->database()",
          "61:             ->table('group_permission')",
          "62:             ->where('permission', 'discussion.reply')",
          "63:             ->where('group_id', Group::MEMBER_ID)",
          "64:             ->delete();",
          "68:                 'authenticatedAs' => $actorId,",
          "75:                             'discussion' => ['data' => ['id' => $discussionId]],",
          "82:         $this->assertEquals($responseStatus, $response->getStatusCode());",
          "83:     }",
          "85:     public function discussionRepliesPrvider(): array",
          "86:     {",
          "87:         return [",
          "89:             'can_create_reply_with_ability' => [3, 1, 201],",
          "90:             'cannot_create_reply_without_ability' => [2, 1, 403],",
          "91:             'can_create_reply_with_ability_when_first_post_is_deleted' => [3, 2, 201],",
          "92:             'cannot_create_reply_without_ability_when_first_post_is_deleted' => [2, 2, 403],",
          "93:         ];",
          "",
          "---------------"
        ]
      }
    }
  ]
}