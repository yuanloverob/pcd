{
  "cve_id": "CVE-2021-25967",
  "cve_desc": "In CKAN, versions 2.9.0 to 2.9.3 are affected by a stored XSS vulnerability via SVG file upload of users\u2019 profile picture. This allows low privileged application users to store malicious scripts in their profile picture. These scripts are executed in a victim\u2019s browser when they open the malicious profile picture",
  "repo": "ckan/ckan",
  "patch_hash": "5a46989c0a4f2c2873ca182c196da83b82babd25",
  "patch_info": {
    "commit_hash": "5a46989c0a4f2c2873ca182c196da83b82babd25",
    "repo": "ckan/ckan",
    "commit_url": "https://github.com/ckan/ckan/commit/5a46989c0a4f2c2873ca182c196da83b82babd25",
    "files": [
      "ckan/lib/uploader.py",
      "ckan/logic/action/create.py",
      "ckan/tests/logic/action/test_create.py",
      "dev-requirements.txt"
    ],
    "message": "Allow strict types for user/group uploads",
    "before_after_code_files": [
      "ckan/lib/uploader.py||ckan/lib/uploader.py",
      "ckan/logic/action/create.py||ckan/logic/action/create.py",
      "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py"
    ]
  },
  "patch_diff": {
    "ckan/lib/uploader.py||ckan/lib/uploader.py": [
      "File: ckan/lib/uploader.py -> ckan/lib/uploader.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: import ckan.lib.munge as munge",
      "14: import ckan.logic as logic",
      "15: import ckan.plugins as plugins",
      "18: ALLOWED_UPLOAD_TYPES = (cgi.FieldStorage, FlaskFileStorage)",
      "19: MB = 1 << 20",
      "",
      "[Removed Lines]",
      "16: from ckan.common import config",
      "",
      "[Added Lines]",
      "16: from ckan.common import config, aslist",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "192:             except OSError:",
      "193:                 pass",
      "196: class ResourceUpload(object):",
      "197:     def __init__(self, resource):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "195:     def verify_type(self):",
      "196:         if not self.filename:",
      "197:             return",
      "199:         actual = magic.from_buffer(self.upload_file.read(1024), mime=True)",
      "200:         self.upload_file.seek(0, os.SEEK_SET)",
      "202:         err = {self.file_field: [f\"Unsupported upload type: {actual}\"]}",
      "204:         mimetypes = aslist(",
      "205:             config.get(f\"ckan.upload.{self.object_type}.mimetypes\"))",
      "206:         if mimetypes and actual not in mimetypes:",
      "207:             raise logic.ValidationError(err)",
      "209:         type_ = actual.split(\"/\")[0]",
      "210:         types = aslist(",
      "211:             config.get(f\"ckan.upload.{self.object_type}.types\"))",
      "212:         if types and type_ not in types:",
      "213:             raise logic.ValidationError(err)",
      "",
      "---------------"
    ],
    "ckan/logic/action/create.py||ckan/logic/action/create.py": [
      "File: ckan/logic/action/create.py -> ckan/logic/action/create.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "762:     }",
      "763:     logic.get_action('activity_create')(activity_create_context, activity_dict)",
      "765:     upload.upload(uploader.get_max_image_size())",
      "767:     if not context.get('defer_commit'):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "765:     if hasattr(upload, \"verify_type\"):",
      "766:         upload.verify_type()",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1012:     }",
      "1013:     logic.get_action('activity_create')(activity_create_context, activity_dict)",
      "1015:     upload.upload(uploader.get_max_image_size())",
      "1017:     if not context.get('defer_commit'):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1018:     if hasattr(upload, \"verify_type\"):",
      "1019:         upload.verify_type()",
      "",
      "---------------"
    ],
    "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py": [
      "File: ckan/tests/logic/action/test_create.py -> ckan/tests/logic/action/test_create.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1667: @pytest.mark.usefixtures(\"clean_db\")",
      "1668: class TestUserImageUrl(object):",
      "1671:         params = {",
      "1672:             \"name\": \"test_user\",",
      "",
      "[Removed Lines]",
      "1669:     def test_upload_picture(self):",
      "",
      "[Added Lines]",
      "1669:     def test_external_picture(self):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1682:             user_dict[\"image_display_url\"] == \"https://example.com/mypic.png\"",
      "1683:         )",
      "1686: class TestVocabularyCreate(object):",
      "1687:     @pytest.mark.usefixtures(\"clean_db\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1685:     def test_upload_non_picture_works_without_extra_config(",
      "1686:             self, create_with_upload, faker):",
      "1687:         params = {",
      "1688:             \"name\": faker.user_name(),",
      "1689:             \"email\": faker.email(),",
      "1690:             \"password\": \"12345678\",",
      "1691:             \"action\": \"user_create\",",
      "1692:             \"upload_field_name\": \"image_upload\",",
      "1693:         }",
      "1694:         assert create_with_upload(\"hello world\", \"file.txt\", **params)",
      "1696:     @pytest.mark.ckan_config(\"ckan.upload.user.types\", \"image\")",
      "1697:     def test_upload_non_picture(self, create_with_upload, faker):",
      "1698:         params = {",
      "1699:             \"name\": faker.user_name(),",
      "1700:             \"email\": faker.email(),",
      "1701:             \"password\": \"12345678\",",
      "1702:             \"action\": \"user_create\",",
      "1703:             \"upload_field_name\": \"image_upload\",",
      "1704:         }",
      "1705:         with pytest.raises(",
      "1706:                 logic.ValidationError, match=\"Unsupported upload type\"):",
      "1707:             create_with_upload(\"hello world\", \"file.txt\", **params)",
      "1709:     @pytest.mark.ckan_config(\"ckan.upload.user.types\", \"image\")",
      "1710:     def test_upload_non_picture_with_png_extension(",
      "1711:             self, create_with_upload, faker):",
      "1712:         params = {",
      "1713:             \"name\": faker.user_name(),",
      "1714:             \"email\": faker.email(),",
      "1715:             \"password\": \"12345678\",",
      "1716:             \"action\": \"user_create\",",
      "1717:             \"upload_field_name\": \"image_upload\",",
      "1718:         }",
      "1719:         with pytest.raises(",
      "1720:                 logic.ValidationError, match=\"Unsupported upload type\"):",
      "1721:             create_with_upload(\"hello world\", \"file.png\", **params)",
      "1723:     @pytest.mark.ckan_config(\"ckan.upload.user.types\", \"image\")",
      "1724:     def test_upload_picture(self, create_with_upload, faker):",
      "1725:         params = {",
      "1726:             \"name\": faker.user_name(),",
      "1727:             \"email\": faker.email(),",
      "1728:             \"password\": \"12345678\",",
      "1729:             \"action\": \"user_create\",",
      "1730:             \"upload_field_name\": \"image_upload\",",
      "1731:         }",
      "1732:         assert create_with_upload(faker.image(), \"file.png\", **params)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "70d3ec6562e0f4cb7ef16780a86a666e1a15a95c",
      "candidate_info": {
        "commit_hash": "70d3ec6562e0f4cb7ef16780a86a666e1a15a95c",
        "repo": "ckan/ckan",
        "commit_url": "https://github.com/ckan/ckan/commit/70d3ec6562e0f4cb7ef16780a86a666e1a15a95c",
        "files": [
          "ckan/lib/uploader.py"
        ],
        "message": "remove unused import",
        "before_after_code_files": [
          "ckan/lib/uploader.py||ckan/lib/uploader.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ckan/lib/uploader.py||ckan/lib/uploader.py"
          ],
          "candidate": [
            "ckan/lib/uploader.py||ckan/lib/uploader.py"
          ]
        }
      },
      "candidate_diff": {
        "ckan/lib/uploader.py||ckan/lib/uploader.py": [
          "File: ckan/lib/uploader.py -> ckan/lib/uploader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import ckan.lib.munge as munge",
          "14: import ckan.logic as logic",
          "15: import ckan.plugins as plugins",
          "18: ALLOWED_UPLOAD_TYPES = (cgi.FieldStorage, FlaskFileStorage)",
          "19: MB = 1 << 20",
          "",
          "[Removed Lines]",
          "16: from ckan.common import config, aslist",
          "",
          "[Added Lines]",
          "16: from ckan.common import config",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff0fe566bbb01f4dee65a9e52c89326666290f7a",
      "candidate_info": {
        "commit_hash": "ff0fe566bbb01f4dee65a9e52c89326666290f7a",
        "repo": "ckan/ckan",
        "commit_url": "https://github.com/ckan/ckan/commit/ff0fe566bbb01f4dee65a9e52c89326666290f7a",
        "files": [
          "ckan/config/config_declaration.yaml",
          "ckan/lib/uploader.py",
          "ckan/logic/action/create.py"
        ],
        "message": "Declare new options",
        "before_after_code_files": [
          "ckan/lib/uploader.py||ckan/lib/uploader.py",
          "ckan/logic/action/create.py||ckan/logic/action/create.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ckan/lib/uploader.py||ckan/lib/uploader.py",
            "ckan/logic/action/create.py||ckan/logic/action/create.py"
          ],
          "candidate": [
            "ckan/lib/uploader.py||ckan/lib/uploader.py",
            "ckan/logic/action/create.py||ckan/logic/action/create.py"
          ]
        }
      },
      "candidate_diff": {
        "ckan/lib/uploader.py||ckan/lib/uploader.py": [
          "File: ckan/lib/uploader.py -> ckan/lib/uploader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:         err = {self.file_field: [f\"Unsupported upload type: {actual}\"]}",
          "208:         if mimetypes and actual not in mimetypes:",
          "209:             raise logic.ValidationError(err)",
          "211:         type_ = actual.split(\"/\")[0]",
          "214:         if types and type_ not in types:",
          "215:             raise logic.ValidationError(err)",
          "",
          "[Removed Lines]",
          "206:         mimetypes = aslist(",
          "207:             config.get(f\"ckan.upload.{self.object_type}.mimetypes\"))",
          "212:         types = aslist(",
          "213:             config.get(f\"ckan.upload.{self.object_type}.types\"))",
          "",
          "[Added Lines]",
          "206:         mimetypes = config.get_value(",
          "207:             f\"ckan.upload.{self.object_type}.mimetypes\")",
          "212:         types = config.get_value(f\"ckan.upload.{self.object_type}.types\")",
          "",
          "---------------"
        ],
        "ckan/logic/action/create.py||ckan/logic/action/create.py": [
          "File: ckan/logic/action/create.py -> ckan/logic/action/create.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import ckan.lib.navl.dictization_functions",
          "25: import ckan.lib.uploader as uploader",
          "26: import ckan.lib.mailer as mailer",
          "27: import ckan.lib.datapreview",
          "28: import ckan.lib.api_token as api_token",
          "29: import ckan.authz as authz",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import ckan.lib.signals as signals",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "993:         data['_password'] = data.pop('password_hash')",
          "995:     user = model_save.user_dict_save(data, context)",
          "997:     # Flush the session to cause user.id to be initialised, because",
          "998:     # activity_create() (below) needs it.",
          "999:     session.flush()",
          "",
          "[Removed Lines]",
          "996:     plugins.toolkit.signals.user_created.send(user.name, user=user)",
          "",
          "[Added Lines]",
          "997:     signals.user_created.send(user.name, user=user)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f39aa66a1c6f05181bc4b165e0d9d24e37d51ff0",
      "candidate_info": {
        "commit_hash": "f39aa66a1c6f05181bc4b165e0d9d24e37d51ff0",
        "repo": "ckan/ckan",
        "commit_url": "https://github.com/ckan/ckan/commit/f39aa66a1c6f05181bc4b165e0d9d24e37d51ff0",
        "files": [
          "ckan/lib/uploader.py",
          "ckan/logic/action/create.py",
          "ckan/tests/logic/action/test_create.py"
        ],
        "message": "Allow strict types for user/group uploads\n\nCKAN 2.9 specific changes when cherry-picking:\n\n* Replace f-strings with .format()\n* Don't use faker / Pillow for tests, as there is no faker fixture in\nthe Python 2 version",
        "before_after_code_files": [
          "ckan/lib/uploader.py||ckan/lib/uploader.py",
          "ckan/logic/action/create.py||ckan/logic/action/create.py",
          "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ckan/lib/uploader.py||ckan/lib/uploader.py",
            "ckan/logic/action/create.py||ckan/logic/action/create.py",
            "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py"
          ],
          "candidate": [
            "ckan/lib/uploader.py||ckan/lib/uploader.py",
            "ckan/logic/action/create.py||ckan/logic/action/create.py",
            "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py"
          ]
        }
      },
      "candidate_diff": {
        "ckan/lib/uploader.py||ckan/lib/uploader.py": [
          "File: ckan/lib/uploader.py -> ckan/lib/uploader.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import ckan.lib.munge as munge",
          "14: import ckan.logic as logic",
          "15: import ckan.plugins as plugins",
          "18: ALLOWED_UPLOAD_TYPES = (cgi.FieldStorage, FlaskFileStorage)",
          "19: MB = 1 << 20",
          "",
          "[Removed Lines]",
          "16: from ckan.common import config",
          "",
          "[Added Lines]",
          "16: from ckan.common import config, aslist",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:             except OSError:",
          "193:                 pass",
          "196: class ResourceUpload(object):",
          "197:     def __init__(self, resource):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     def verify_type(self):",
          "196:         if not self.filename:",
          "197:             return",
          "199:         actual = magic.from_buffer(self.upload_file.read(1024), mime=True)",
          "200:         self.upload_file.seek(0, os.SEEK_SET)",
          "202:         err = {self.file_field: [",
          "203:             \"Unsupported upload type: {actual}\".format(actual=actual)]}",
          "205:         mimetypes = aslist(",
          "206:             config.get(\"ckan.upload.{}.mimetypes\".format(self.object_type)))",
          "207:         if mimetypes and actual not in mimetypes:",
          "208:             raise logic.ValidationError(err)",
          "210:         type_ = actual.split(\"/\")[0]",
          "211:         types = aslist(",
          "212:             config.get(\"ckan.upload.{}.types\".format(self.object_type)))",
          "213:         if types and type_ not in types:",
          "214:             raise logic.ValidationError(err)",
          "",
          "---------------"
        ],
        "ckan/logic/action/create.py||ckan/logic/action/create.py": [
          "File: ckan/logic/action/create.py -> ckan/logic/action/create.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "766:     }",
          "767:     logic.get_action('activity_create')(activity_create_context, activity_dict)",
          "769:     upload.upload(uploader.get_max_image_size())",
          "771:     if not context.get('defer_commit'):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "769:     if hasattr(upload, \"verify_type\"):",
          "770:         upload.verify_type()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1070:     }",
          "1071:     logic.get_action('activity_create')(activity_create_context, activity_dict)",
          "1073:     upload.upload(uploader.get_max_image_size())",
          "1075:     if not context.get('defer_commit'):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1076:     if hasattr(upload, \"verify_type\"):",
          "1077:         upload.verify_type()",
          "",
          "---------------"
        ],
        "ckan/tests/logic/action/test_create.py||ckan/tests/logic/action/test_create.py": [
          "File: ckan/tests/logic/action/test_create.py -> ckan/tests/logic/action/test_create.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1354: @pytest.mark.usefixtures(\"clean_db\")",
          "1355: class TestUserImageUrl(object):",
          "1359:         params = {",
          "1360:             'name': 'test_user',",
          "",
          "[Removed Lines]",
          "1357:     def test_upload_picture(self):",
          "",
          "[Added Lines]",
          "1356:     def test_external_picture(self):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1363:             'image_url': 'https://example.com/mypic.png',",
          "1364:         }",
          "",
          "[Removed Lines]",
          "1366:         user_dict = helpers.call_action('user_create', {}, **params)",
          "1368:         assert user_dict['image_url'] == 'https://example.com/mypic.png'",
          "1369:         assert user_dict['image_display_url'] == 'https://example.com/mypic.png'",
          "",
          "[Added Lines]",
          "1365:         user_dict = helpers.call_action(\"user_create\", {}, **params)",
          "1367:         assert user_dict[\"image_url\"] == \"https://example.com/mypic.png\"",
          "1368:         assert (",
          "1369:             user_dict[\"image_display_url\"] == \"https://example.com/mypic.png\"",
          "1370:         )",
          "1372:     def test_upload_non_picture_works_without_extra_config(",
          "1373:             self, create_with_upload):",
          "1374:         params = {",
          "1375:             \"name\": \"test_user_1\",",
          "1376:             \"email\": \"test1@example.com\",",
          "1377:             \"password\": \"12345678\",",
          "1378:             \"action\": \"user_create\",",
          "1379:             \"upload_field_name\": \"image_upload\",",
          "1380:         }",
          "1381:         assert create_with_upload(\"hello world\", \"file.txt\", **params)",
          "1383:     @pytest.mark.ckan_config(\"ckan.upload.user.types\", \"image\")",
          "1384:     def test_upload_non_picture(self, create_with_upload):",
          "1385:         params = {",
          "1386:             \"name\": \"test_user_1\",",
          "1387:             \"email\": \"test1@example.com\",",
          "1388:             \"password\": \"12345678\",",
          "1389:             \"action\": \"user_create\",",
          "1390:             \"upload_field_name\": \"image_upload\",",
          "1391:         }",
          "1392:         with pytest.raises(",
          "1393:                 logic.ValidationError, match=\"Unsupported upload type\"):",
          "1394:             create_with_upload(\"hello world\", \"file.txt\", **params)",
          "1396:     @pytest.mark.ckan_config(\"ckan.upload.user.types\", \"image\")",
          "1397:     def test_upload_non_picture_with_png_extension(",
          "1398:             self, create_with_upload):",
          "1399:         params = {",
          "1400:             \"name\": \"test_user_1\",",
          "1401:             \"email\": \"test1@example.com\",",
          "1402:             \"password\": \"12345678\",",
          "1403:             \"action\": \"user_create\",",
          "1404:             \"upload_field_name\": \"image_upload\",",
          "1405:         }",
          "1406:         with pytest.raises(",
          "1407:                 logic.ValidationError, match=\"Unsupported upload type\"):",
          "1408:             create_with_upload(\"hello world\", \"file.png\", **params)",
          "1410:     @pytest.mark.ckan_config(\"ckan.upload.user.types\", \"image\")",
          "1411:     def test_upload_picture(self, create_with_upload):",
          "1412:         params = {",
          "1413:             \"name\": \"test_user_1\",",
          "1414:             \"email\": \"test1@example.com\",",
          "1415:             \"password\": \"12345678\",",
          "1416:             \"action\": \"user_create\",",
          "1417:             \"upload_field_name\": \"image_upload\",",
          "1418:         }",
          "1420:         some_png = \"\"\"",
          "1421:         89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52",
          "1422:         00 00 00 01 00 00 00 01 08 02 00 00 00 90 77 53",
          "1423:         DE 00 00 00 0C 49 44 41 54 08 D7 63 F8 CF C0 00",
          "1424:         00 03 01 01 00 18 DD 8D B0 00 00 00 00 49 45 4E",
          "1425:         44 AE 42 60 82\"\"\"",
          "1426:         some_png = some_png.replace(' ', '').replace('\\n', '')",
          "1427:         some_png_bytes = bytes(bytearray.fromhex(some_png))",
          "1428:         assert create_with_upload(some_png_bytes, \"file.png\", **params)",
          "",
          "---------------"
        ]
      }
    }
  ]
}