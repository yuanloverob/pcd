{
  "cve_id": "CVE-2023-40029",
  "cve_desc": "Argo CD is a declarative continuous deployment for Kubernetes. Argo CD Cluster secrets might be managed declaratively using Argo CD / kubectl apply. As a result, the full secret body is stored in`kubectl.kubernetes.io/last-applied-configuration` annotation. pull request #7139 introduced the ability to manage cluster labels and annotations. Since clusters are stored as secrets it also exposes the `kubectl.kubernetes.io/last-applied-configuration` annotation which includes full secret body. In order to view the cluster annotations via the Argo CD API, the user must have `clusters, get` RBAC access. **Note:** In many cases, cluster secrets do not contain any actually-secret information. But sometimes, as in bearer-token auth, the contents might be very sensitive. The bug has been patched in versions 2.8.3, 2.7.14, and 2.6.15. Users are advised to upgrade. Users unable to upgrade should update/deploy cluster secret with `server-side-apply` flag which does not use or rely on `kubectl.kubernetes.io/last-applied-configuration` annotation. Note: annotation for existing secrets will require manual removal.\n\n",
  "repo": "argoproj/argo-cd",
  "patch_hash": "44e52c4ae76e6da1343bdd54e57a822d93549f28",
  "patch_info": {
    "commit_hash": "44e52c4ae76e6da1343bdd54e57a822d93549f28",
    "repo": "argoproj/argo-cd",
    "commit_url": "https://github.com/argoproj/argo-cd/commit/44e52c4ae76e6da1343bdd54e57a822d93549f28",
    "files": [
      "cmd/argocd-repo-server/commands/argocd_repo_server.go",
      "docs/operator-manual/server-commands/argocd-repo-server.md",
      "manifests/base/repo-server/argocd-repo-server-deployment.yaml",
      "manifests/core-install.yaml",
      "manifests/ha/install.yaml",
      "manifests/ha/namespace-install.yaml",
      "manifests/install.yaml",
      "manifests/namespace-install.yaml",
      "reposerver/repository/repository.go",
      "util/helm/client.go",
      "util/helm/client_test.go",
      "util/helm/mocks/Client.go"
    ],
    "message": "Merge pull request from GHSA-g687-f2gx-6wm8\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n* feat: use untar with limiter\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>\n\n---------\n\nSigned-off-by: pashakostohrys <pavel@codefresh.io>",
    "before_after_code_files": [
      "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go",
      "reposerver/repository/repository.go||reposerver/repository/repository.go",
      "util/helm/client.go||util/helm/client.go",
      "util/helm/client_test.go||util/helm/client_test.go",
      "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
    ]
  },
  "patch_diff": {
    "cmd/argocd-repo-server/commands/argocd_repo_server.go||cmd/argocd-repo-server/commands/argocd_repo_server.go": [
      "File: cmd/argocd-repo-server/commands/argocd_repo_server.go -> cmd/argocd-repo-server/commands/argocd_repo_server.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "82:   allowOutOfBoundsSymlinks          bool",
      "83:   streamedManifestMaxTarSize        string",
      "84:   streamedManifestMaxExtractedSize  string",
      "85:  )",
      "86:  var command = cobra.Command{",
      "87:   Use:               cliName,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85:   helmManifestMaxExtractedSize      string",
      "86:   disableManifestMaxExtractedSize   bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120:    streamedManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(streamedManifestMaxExtractedSize)",
      "121:    errors.CheckError(err)",
      "123:    askPassServer := askpass.NewServer()",
      "124:    metricsServer := metrics.NewMetricsServer()",
      "125:    cacheutil.CollectMetrics(redisClient, metricsServer)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "125:    helmManifestMaxExtractedSizeQuantity, err := resource.ParseQuantity(helmManifestMaxExtractedSize)",
      "126:    errors.CheckError(err)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "134:     AllowOutOfBoundsSymlinks:                     allowOutOfBoundsSymlinks,",
      "135:     StreamedManifestMaxExtractedSize:             streamedManifestMaxExtractedSizeQuantity.ToDec().Value(),",
      "136:     StreamedManifestMaxTarSize:                   streamedManifestMaxTarSizeQuantity.ToDec().Value(),",
      "137:    }, askPassServer)",
      "138:    errors.CheckError(err)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142:     HelmManifestMaxExtractedSize:                 helmManifestMaxExtractedSizeQuantity.ToDec().Value(),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "216:  command.Flags().BoolVar(&allowOutOfBoundsSymlinks, \"allow-oob-symlinks\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS\", false), \"Allow out-of-bounds symlinks in repositories (not recommended)\")",
      "217:  command.Flags().StringVar(&streamedManifestMaxTarSize, \"streamed-manifest-max-tar-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE\", \"100M\"), \"Maximum size of streamed manifest archives\")",
      "218:  command.Flags().StringVar(&streamedManifestMaxExtractedSize, \"streamed-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of streamed manifest archives when extracted\")",
      "219:  tlsConfigCustomizerSrc = tls.AddTLSFlagsToCmd(&command)",
      "220:  cacheSrc = reposervercache.AddCacheFlagsToCmd(&command, func(client *redis.Client) {",
      "221:   redisClient = client",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "225:  command.Flags().StringVar(&helmManifestMaxExtractedSize, \"helm-manifest-max-extracted-size\", env.StringFromEnv(\"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", \"1G\"), \"Maximum size of helm manifest archives when extracted\")",
      "226:  command.Flags().BoolVar(&disableManifestMaxExtractedSize, \"disable-helm-manifest-max-extracted-size\", env.ParseBoolFromEnv(\"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE\", false), \"Disable maximum size of helm manifest archives when extracted\")",
      "",
      "---------------"
    ],
    "reposerver/repository/repository.go||reposerver/repository/repository.go": [
      "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "107:  AllowOutOfBoundsSymlinks                     bool",
      "108:  StreamedManifestMaxExtractedSize             int64",
      "109:  StreamedManifestMaxTarSize                   int64",
      "110: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110:  HelmManifestMaxExtractedSize                 int64",
      "111:  DisableHelmManifestMaxExtractedSize          bool",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "346:   if source.Helm != nil {",
      "347:    helmPassCredentials = source.Helm.PassCredentials",
      "348:   }",
      "350:   if err != nil {",
      "351:    return err",
      "352:   }",
      "",
      "[Removed Lines]",
      "349:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials)",
      "",
      "[Added Lines]",
      "351:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials, s.initConstants.HelmManifestMaxExtractedSize, s.initConstants.DisableHelmManifestMaxExtractedSize)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2233:  if err != nil {",
      "2234:   return nil, fmt.Errorf(\"helm client error: %v\", err)",
      "2235:  }",
      "2237:  if err != nil {",
      "2238:   return nil, fmt.Errorf(\"error extracting chart: %v\", err)",
      "2239:  }",
      "",
      "[Removed Lines]",
      "2236:  chartPath, closer, err := helmClient.ExtractChart(q.Name, revision, false)",
      "",
      "[Added Lines]",
      "2238:  chartPath, closer, err := helmClient.ExtractChart(q.Name, revision, false, s.initConstants.HelmManifestMaxExtractedSize, s.initConstants.DisableHelmManifestMaxExtractedSize)",
      "",
      "---------------"
    ],
    "util/helm/client.go||util/helm/client.go": [
      "File: util/helm/client.go -> util/helm/client.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "8:  \"encoding/json\"",
      "9:  \"errors\"",
      "10:  \"fmt\"",
      "11:  \"io\"",
      "12:  \"net/http\"",
      "13:  \"net/url\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25:  \"oras.land/oras-go/v2/registry/remote/auth\"",
      "27:  \"github.com/argoproj/argo-cd/v2/util/cache\"",
      "29:  argoio \"github.com/argoproj/argo-cd/v2/util/io\"",
      "30:  \"github.com/argoproj/argo-cd/v2/util/io/files\"",
      "31:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
      "",
      "[Removed Lines]",
      "28:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: type Client interface {",
      "54:  CleanChartCache(chart string, version string) error",
      "56:  GetIndex(noCache bool) (*Index, error)",
      "57:  GetTags(chart string, noCache bool) (*TagsList, error)",
      "58:  TestHelmOCI() (bool, error)",
      "",
      "[Removed Lines]",
      "55:  ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error)",
      "",
      "[Added Lines]",
      "55:  ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "122:  return os.RemoveAll(cachePath)",
      "123: }",
      "127:  helmCmd, err := NewCmdWithVersion(\"\", HelmV3, c.enableOci, c.proxy)",
      "",
      "[Removed Lines]",
      "125: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error) {",
      "",
      "[Added Lines]",
      "125: func untarChart(tempDir string, cachedChartPath string, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) error {",
      "126:  if disableManifestMaxExtractedSize {",
      "127:   cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
      "128:   cmd.Dir = tempDir",
      "129:   _, err := executil.Run(cmd)",
      "130:   return err",
      "131:  }",
      "132:  reader, err := os.Open(cachedChartPath)",
      "133:  if err != nil {",
      "134:   return err",
      "135:  }",
      "136:  return files.Untgz(tempDir, reader, manifestMaxExtractedSize, false)",
      "137: }",
      "139: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, argoio.Closer, error) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "196:   if len(infos) != 1 {",
      "197:    return \"\", nil, fmt.Errorf(\"expected 1 file, found %v\", len(infos))",
      "198:   }",
      "199:   err = os.Rename(filepath.Join(tempDest, infos[0].Name()), cachedChartPath)",
      "200:   if err != nil {",
      "201:    return \"\", nil, err",
      "202:   }",
      "203:  }",
      "208:  if err != nil {",
      "209:   _ = os.RemoveAll(tempDir)",
      "210:   return \"\", nil, err",
      "",
      "[Removed Lines]",
      "205:  cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
      "206:  cmd.Dir = tempDir",
      "207:  _, err = executil.Run(cmd)",
      "",
      "[Added Lines]",
      "220:  err = untarChart(tempDir, cachedChartPath, manifestMaxExtractedSize, disableManifestMaxExtractedSize)",
      "",
      "---------------"
    ],
    "util/helm/client_test.go||util/helm/client_test.go": [
      "File: util/helm/client_test.go -> util/helm/client_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "4:  \"bytes\"",
      "5:  \"encoding/json\"",
      "6:  \"fmt\"",
      "7:  \"os\"",
      "8:  \"strings\"",
      "9:  \"testing\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7:  \"math\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72: func Test_nativeHelmChart_ExtractChart(t *testing.T) {",
      "73:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
      "75:  assert.NoError(t, err)",
      "76:  defer io.Close(closer)",
      "77:  info, err := os.Stat(path)",
      "",
      "[Removed Lines]",
      "74:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
      "",
      "[Added Lines]",
      "75:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "79:  assert.True(t, info.IsDir())",
      "80: }",
      "82: func Test_nativeHelmChart_ExtractChart_insecure(t *testing.T) {",
      "83:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{InsecureSkipVerify: true}, false, \"\")",
      "85:  assert.NoError(t, err)",
      "86:  defer io.Close(closer)",
      "87:  info, err := os.Stat(path)",
      "",
      "[Removed Lines]",
      "84:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
      "",
      "[Added Lines]",
      "83: func Test_nativeHelmChart_ExtractChartWithLimiter(t *testing.T) {",
      "84:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
      "85:  _, _, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, 100, false)",
      "86:  assert.Error(t, err, \"error while iterating on tar reader: unexpected EOF\")",
      "87: }",
      "91:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false, math.MaxInt64, true)",
      "",
      "---------------"
    ],
    "util/helm/mocks/Client.go||util/helm/mocks/Client.go": [
      "File: util/helm/mocks/Client.go -> util/helm/mocks/Client.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "29: }",
      "33:  ret := _m.Called(chart, version)",
      "35:  var r0 string",
      "",
      "[Removed Lines]",
      "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
      "",
      "[Added Lines]",
      "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool, manifestMaxExtractedSize int64, disableManifestMaxExtractedSize bool) (string, io.Closer, error) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f34687bd80a8977052f2ce9cd145c8f0265d9b59",
      "candidate_info": {
        "commit_hash": "f34687bd80a8977052f2ce9cd145c8f0265d9b59",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/f34687bd80a8977052f2ce9cd145c8f0265d9b59",
        "files": [
          "util/argo/normalizers/knowntypes_normalizer_test.go",
          "util/argo/resource_tracking_test.go",
          "util/cert/cert_test.go",
          "util/cli/cli.go",
          "util/clusterauth/clusterauth_test.go",
          "util/cmp/stream.go",
          "util/cmp/stream_test.go",
          "util/config/reader.go",
          "util/config/reader_test.go",
          "util/db/gpgkeys.go",
          "util/dex/dex.go",
          "util/git/creds.go",
          "util/git/creds_test.go",
          "util/git/git_test.go",
          "util/gpg/gpg.go",
          "util/gpg/gpg_test.go",
          "util/helm/client.go",
          "util/helm/cmd.go",
          "util/helm/helm.go",
          "util/io/files/tar_test.go",
          "util/kube/kube_test.go",
          "util/lua/custom_actions_test.go",
          "util/lua/health_test.go",
          "util/oidc/oidc_test.go",
          "util/tls/tls.go",
          "util/webhook/webhook_test.go"
        ],
        "message": "chore: Replace deprecated ioutil in util packages (#9848)\n\nSigned-off-by: jannfis <jann@mistrust.net>",
        "before_after_code_files": [
          "util/argo/normalizers/knowntypes_normalizer_test.go||util/argo/normalizers/knowntypes_normalizer_test.go",
          "util/argo/resource_tracking_test.go||util/argo/resource_tracking_test.go",
          "util/cert/cert_test.go||util/cert/cert_test.go",
          "util/cli/cli.go||util/cli/cli.go",
          "util/clusterauth/clusterauth_test.go||util/clusterauth/clusterauth_test.go",
          "util/cmp/stream.go||util/cmp/stream.go",
          "util/cmp/stream_test.go||util/cmp/stream_test.go",
          "util/config/reader.go||util/config/reader.go",
          "util/config/reader_test.go||util/config/reader_test.go",
          "util/db/gpgkeys.go||util/db/gpgkeys.go",
          "util/dex/dex.go||util/dex/dex.go",
          "util/git/creds.go||util/git/creds.go",
          "util/git/creds_test.go||util/git/creds_test.go",
          "util/git/git_test.go||util/git/git_test.go",
          "util/gpg/gpg.go||util/gpg/gpg.go",
          "util/gpg/gpg_test.go||util/gpg/gpg_test.go",
          "util/helm/client.go||util/helm/client.go",
          "util/helm/cmd.go||util/helm/cmd.go",
          "util/helm/helm.go||util/helm/helm.go",
          "util/io/files/tar_test.go||util/io/files/tar_test.go",
          "util/kube/kube_test.go||util/kube/kube_test.go",
          "util/lua/custom_actions_test.go||util/lua/custom_actions_test.go",
          "util/lua/health_test.go||util/lua/health_test.go",
          "util/oidc/oidc_test.go||util/oidc/oidc_test.go",
          "util/tls/tls.go||util/tls/tls.go",
          "util/webhook/webhook_test.go||util/webhook/webhook_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/helm/client.go||util/helm/client.go"
          ],
          "candidate": [
            "util/helm/client.go||util/helm/client.go"
          ]
        }
      },
      "candidate_diff": {
        "util/argo/normalizers/knowntypes_normalizer_test.go||util/argo/normalizers/knowntypes_normalizer_test.go": [
          "File: util/argo/normalizers/knowntypes_normalizer_test.go -> util/argo/normalizers/knowntypes_normalizer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "6:  \"strings\"",
          "7:  \"testing\"",
          "",
          "[Removed Lines]",
          "5:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "5:  \"os\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286: }",
          "288: func TestKnownTypes(t *testing.T) {",
          "290:  if !assert.NoError(t, err) {",
          "291:   return",
          "292:  }",
          "",
          "[Removed Lines]",
          "289:  typesData, err := ioutil.ReadFile(\"./diffing_known_types.txt\")",
          "",
          "[Added Lines]",
          "289:  typesData, err := os.ReadFile(\"./diffing_known_types.txt\")",
          "",
          "---------------"
        ],
        "util/argo/resource_tracking_test.go||util/argo/resource_tracking_test.go": [
          "File: util/argo/resource_tracking_test.go -> util/argo/resource_tracking_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package argo",
          "3: import (",
          "5:  \"testing\"",
          "7:  \"github.com/argoproj/argo-cd/v2/util/kube\"",
          "",
          "[Removed Lines]",
          "4:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "4:  \"os\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: )",
          "16: func TestSetAppInstanceLabel(t *testing.T) {",
          "18:  assert.Nil(t, err)",
          "20:  var obj unstructured.Unstructured",
          "",
          "[Removed Lines]",
          "17:  yamlBytes, err := ioutil.ReadFile(\"testdata/svc.yaml\")",
          "",
          "[Added Lines]",
          "17:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "30: }",
          "32: func TestSetAppInstanceAnnotation(t *testing.T) {",
          "34:  assert.Nil(t, err)",
          "36:  var obj unstructured.Unstructured",
          "",
          "[Removed Lines]",
          "33:  yamlBytes, err := ioutil.ReadFile(\"testdata/svc.yaml\")",
          "",
          "[Added Lines]",
          "33:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "47: }",
          "49: func TestSetAppInstanceAnnotationAndLabel(t *testing.T) {",
          "51:  assert.Nil(t, err)",
          "52:  var obj unstructured.Unstructured",
          "53:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "",
          "[Removed Lines]",
          "50:  yamlBytes, err := ioutil.ReadFile(\"testdata/svc.yaml\")",
          "",
          "[Added Lines]",
          "50:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "63: }",
          "65: func TestSetAppInstanceAnnotationNotFound(t *testing.T) {",
          "67:  assert.Nil(t, err)",
          "69:  var obj unstructured.Unstructured",
          "",
          "[Removed Lines]",
          "66:  yamlBytes, err := ioutil.ReadFile(\"testdata/svc.yaml\")",
          "",
          "[Added Lines]",
          "66:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "108: }",
          "110: func sampleResource() *unstructured.Unstructured {",
          "112:  if err != nil {",
          "113:   panic(err)",
          "114:  }",
          "",
          "[Removed Lines]",
          "111:  yamlBytes, err := ioutil.ReadFile(\"testdata/svc.yaml\")",
          "",
          "[Added Lines]",
          "111:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "",
          "---------------"
        ],
        "util/cert/cert_test.go||util/cert/cert_test.go": [
          "File: util/cert/cert_test.go -> util/cert/cert_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "6:  \"os\"",
          "7:  \"path\"",
          "8:  \"testing\"",
          "",
          "[Removed Lines]",
          "5:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473: func TestGetCertificateForConnect(t *testing.T) {",
          "474:  t.Run(\"Success\", func(t *testing.T) {",
          "475:   temppath := t.TempDir()",
          "477:   if err != nil {",
          "478:    panic(err)",
          "479:   }",
          "481:   if err != nil {",
          "482:    panic(err)",
          "483:   }",
          "",
          "[Removed Lines]",
          "476:   cert, err := ioutil.ReadFile(\"../../test/fixture/certs/argocd-test-server.crt\")",
          "480:   err = ioutil.WriteFile(path.Join(temppath, \"127.0.0.1\"), cert, 0666)",
          "",
          "[Added Lines]",
          "475:   cert, err := os.ReadFile(\"../../test/fixture/certs/argocd-test-server.crt\")",
          "479:   err = os.WriteFile(path.Join(temppath, \"127.0.0.1\"), cert, 0666)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "498:  t.Run(\"No valid cert in file\", func(t *testing.T) {",
          "499:   temppath := t.TempDir()",
          "501:   if err != nil {",
          "502:    panic(err)",
          "503:   }",
          "",
          "[Removed Lines]",
          "500:   err := ioutil.WriteFile(path.Join(temppath, \"127.0.0.1\"), []byte(\"foobar\"), 0666)",
          "",
          "[Added Lines]",
          "499:   err := os.WriteFile(path.Join(temppath, \"127.0.0.1\"), []byte(\"foobar\"), 0666)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "513: func TestGetCertBundlePathForRepository(t *testing.T) {",
          "514:  t.Run(\"Success\", func(t *testing.T) {",
          "515:   temppath := t.TempDir()",
          "517:   if err != nil {",
          "518:    panic(err)",
          "519:   }",
          "521:   if err != nil {",
          "522:    panic(err)",
          "523:   }",
          "",
          "[Removed Lines]",
          "516:   cert, err := ioutil.ReadFile(\"../../test/fixture/certs/argocd-test-server.crt\")",
          "520:   err = ioutil.WriteFile(path.Join(temppath, \"127.0.0.1\"), cert, 0666)",
          "",
          "[Added Lines]",
          "515:   cert, err := os.ReadFile(\"../../test/fixture/certs/argocd-test-server.crt\")",
          "519:   err = os.WriteFile(path.Join(temppath, \"127.0.0.1\"), cert, 0666)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "538:  t.Run(\"No valid cert in file\", func(t *testing.T) {",
          "539:   temppath := t.TempDir()",
          "541:   if err != nil {",
          "542:    panic(err)",
          "543:   }",
          "",
          "[Removed Lines]",
          "540:   err := ioutil.WriteFile(path.Join(temppath, \"127.0.0.1\"), []byte(\"foobar\"), 0666)",
          "",
          "[Added Lines]",
          "539:   err := os.WriteFile(path.Join(temppath, \"127.0.0.1\"), []byte(\"foobar\"), 0666)",
          "",
          "---------------"
        ],
        "util/cli/cli.go||util/cli/cli.go": [
          "File: util/cli/cli.go -> util/cli/cli.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"bytes\"",
          "8:  \"flag\"",
          "9:  \"fmt\"",
          "11:  \"os\"",
          "12:  \"os/exec\"",
          "13:  \"path\"",
          "",
          "[Removed Lines]",
          "10:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180: }",
          "182: func writeToTempFile(pattern string, data []byte) string {",
          "184:  errors.CheckError(err)",
          "185:  defer io.Close(f)",
          "186:  _, err = f.Write(data)",
          "",
          "[Removed Lines]",
          "183:  f, err := ioutil.TempFile(\"\", pattern)",
          "",
          "[Added Lines]",
          "182:  f, err := os.CreateTemp(\"\", pattern)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:   err := (term.TTY{In: os.Stdin, TryDev: true}).Safe(cmd.Run)",
          "253:   errors.CheckError(err)",
          "256:   errors.CheckError(err)",
          "257:   if string(updated) == \"\" || string(updated) == string(data) {",
          "259:    break",
          "260:   } else {",
          "261:    data = stripComments(updated)",
          "",
          "[Removed Lines]",
          "255:   updated, err := ioutil.ReadFile(tempFile)",
          "258:    errors.CheckError(fmt.Errorf(\"Edit cancelled, no valid changes were saved.\"))",
          "",
          "[Added Lines]",
          "254:   updated, err := os.ReadFile(tempFile)",
          "257:    errors.CheckError(fmt.Errorf(\"edit cancelled, no valid changes were saved\"))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274: func PrintDiff(name string, live *unstructured.Unstructured, target *unstructured.Unstructured) error {",
          "276:  if err != nil {",
          "277:   return err",
          "278:  }",
          "",
          "[Removed Lines]",
          "275:  tempDir, err := ioutil.TempDir(\"\", \"argocd-diff\")",
          "",
          "[Added Lines]",
          "274:  tempDir, err := os.MkdirTemp(\"\", \"argocd-diff\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "284:    return err",
          "285:   }",
          "286:  }",
          "288:  if err != nil {",
          "289:   return err",
          "290:  }",
          "",
          "[Removed Lines]",
          "287:  err = ioutil.WriteFile(targetFile, targetData, 0644)",
          "",
          "[Added Lines]",
          "286:  err = os.WriteFile(targetFile, targetData, 0644)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "296:    return err",
          "297:   }",
          "298:  }",
          "300:  if err != nil {",
          "301:   return err",
          "302:  }",
          "",
          "[Removed Lines]",
          "299:  err = ioutil.WriteFile(liveFile, liveData, 0644)",
          "",
          "[Added Lines]",
          "298:  err = os.WriteFile(liveFile, liveData, 0644)",
          "",
          "---------------"
        ],
        "util/clusterauth/clusterauth_test.go||util/clusterauth/clusterauth_test.go": [
          "File: util/clusterauth/clusterauth_test.go -> util/clusterauth/clusterauth_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "6:  \"testing\"",
          "7:  \"time\"",
          "",
          "[Removed Lines]",
          "5:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "5:  \"os\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: )",
          "38: func newServiceAccount() *corev1.ServiceAccount {",
          "40:  errors.CheckError(err)",
          "41:  var sa corev1.ServiceAccount",
          "42:  err = yaml.Unmarshal(saBytes, &sa)",
          "",
          "[Removed Lines]",
          "39:  saBytes, err := ioutil.ReadFile(\"./testdata/argocd-manager-sa.yaml\")",
          "",
          "[Added Lines]",
          "39:  saBytes, err := os.ReadFile(\"./testdata/argocd-manager-sa.yaml\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45: }",
          "47: func newServiceAccountSecret() *corev1.Secret {",
          "49:  errors.CheckError(err)",
          "50:  var secret corev1.Secret",
          "51:  err = yaml.Unmarshal(secretBytes, &secret)",
          "",
          "[Removed Lines]",
          "48:  secretBytes, err := ioutil.ReadFile(\"./testdata/argocd-manager-sa-token.yaml\")",
          "",
          "[Added Lines]",
          "48:  secretBytes, err := os.ReadFile(\"./testdata/argocd-manager-sa-token.yaml\")",
          "",
          "---------------"
        ],
        "util/cmp/stream.go||util/cmp/stream.go": [
          "File: util/cmp/stream.go -> util/cmp/stream.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"encoding/hex\"",
          "8:  \"fmt\"",
          "9:  \"io\"",
          "11:  \"os\"",
          "12:  \"path/filepath\"",
          "13:  \"strings\"",
          "",
          "[Removed Lines]",
          "10:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:  if err != nil {",
          "172:   return nil, \"\", fmt.Errorf(\"error creating tempDir for compressing files: %s\", err)",
          "173:  }",
          "175:  if err != nil {",
          "176:   return nil, \"\", fmt.Errorf(\"error creating app temp tgz file: %w\", err)",
          "177:  }",
          "",
          "[Removed Lines]",
          "174:  tgzFile, err := ioutil.TempFile(tempDir, appName)",
          "",
          "[Added Lines]",
          "173:  tgzFile, err := os.CreateTemp(tempDir, appName)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199: func receiveFile(ctx context.Context, receiver StreamReceiver, checksum, dst string) (*os.File, error) {",
          "200:  hasher := sha256.New()",
          "202:  if err != nil {",
          "203:   return nil, fmt.Errorf(\"error creating file: %w\", err)",
          "204:  }",
          "",
          "[Removed Lines]",
          "201:  file, err := ioutil.TempFile(dst, \"\")",
          "",
          "[Added Lines]",
          "200:  file, err := os.CreateTemp(dst, \"\")",
          "",
          "---------------"
        ],
        "util/cmp/stream_test.go||util/cmp/stream_test.go": [
          "File: util/cmp/stream_test.go -> util/cmp/stream_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "6:  \"io\"",
          "8:  \"os\"",
          "9:  \"path/filepath\"",
          "10:  \"testing\"",
          "",
          "[Removed Lines]",
          "7:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:   require.NoError(t, err)",
          "70:   assert.NotEmpty(t, workdir)",
          "72:   require.NoError(t, err)",
          "73:   require.Equal(t, 2, len(files))",
          "74:   names := []string{}",
          "",
          "[Removed Lines]",
          "71:   files, err := ioutil.ReadDir(workdir)",
          "",
          "[Added Lines]",
          "70:   files, err := os.ReadDir(workdir)",
          "",
          "---------------"
        ],
        "util/config/reader.go||util/config/reader.go": [
          "File: util/config/reader.go -> util/config/reader.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"encoding/json\"",
          "5:  \"io\"",
          "7:  \"net/http\"",
          "9:  \"github.com/ghodss/yaml\"",
          "10: )",
          "13: func UnmarshalReader(reader io.Reader, obj interface{}) error {",
          "15:  if err != nil {",
          "16:   return err",
          "17:  }",
          "",
          "[Removed Lines]",
          "6:  \"io/ioutil\"",
          "14:  data, err := ioutil.ReadAll(reader)",
          "",
          "[Added Lines]",
          "7:  \"os\"",
          "14:  data, err := io.ReadAll(reader)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: func MarshalLocalYAMLFile(path string, obj interface{}) error {",
          "45:  yamlData, err := yaml.Marshal(obj)",
          "46:  if err == nil {",
          "48:  }",
          "49:  return err",
          "50: }",
          "",
          "[Removed Lines]",
          "47:   err = ioutil.WriteFile(path, yamlData, 0600)",
          "",
          "[Added Lines]",
          "47:   err = os.WriteFile(path, yamlData, 0600)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: func UnmarshalLocalFile(path string, obj interface{}) error {",
          "56:  if err == nil {",
          "57:   err = unmarshalObject(data, obj)",
          "58:  }",
          "",
          "[Removed Lines]",
          "55:  data, err := ioutil.ReadFile(path)",
          "",
          "[Added Lines]",
          "55:  data, err := os.ReadFile(path)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:   defer func() {",
          "83:    _ = resp.Body.Close()",
          "84:   }()",
          "86:  }",
          "87:  return data, err",
          "88: }",
          "",
          "[Removed Lines]",
          "85:   data, err = ioutil.ReadAll(resp.Body)",
          "",
          "[Added Lines]",
          "85:   data, err = io.ReadAll(resp.Body)",
          "",
          "---------------"
        ],
        "util/config/reader_test.go||util/config/reader_test.go": [
          "File: util/config/reader_test.go -> util/config/reader_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"encoding/json\"",
          "6:  \"fmt\"",
          "7:  \"io\"",
          "9:  \"net\"",
          "10:  \"net/http\"",
          "11:  \"os\"",
          "",
          "[Removed Lines]",
          "8:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:  )",
          "22:  sentinel := fmt.Sprintf(\"---\\nfield1: %q\\nfield2: %d\", field1, field2)",
          "25:  if err != nil {",
          "26:   panic(err)",
          "27:  }",
          "",
          "[Removed Lines]",
          "24:  file, err := ioutil.TempFile(os.TempDir(), \"\")",
          "",
          "[Added Lines]",
          "23:  file, err := os.CreateTemp(os.TempDir(), \"\")",
          "",
          "---------------"
        ],
        "util/db/gpgkeys.go||util/db/gpgkeys.go": [
          "File: util/db/gpgkeys.go -> util/db/gpgkeys.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"context\"",
          "5:  \"fmt\"",
          "7:  \"os\"",
          "9:  log \"github.com/sirupsen/logrus\"",
          "",
          "[Removed Lines]",
          "6:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: func validatePGPKey(keyData string) (*appsv1.GnuPGPublicKey, error) {",
          "19:  if err != nil {",
          "20:   return nil, err",
          "21:  }",
          "22:  defer os.Remove(f.Name())",
          "25:  if err != nil {",
          "26:   return nil, err",
          "27:  }",
          "",
          "[Removed Lines]",
          "18:  f, err := ioutil.TempFile(\"\", \"gpg-public-key\")",
          "24:  err = ioutil.WriteFile(f.Name(), []byte(keyData), 0600)",
          "",
          "[Added Lines]",
          "17:  f, err := os.CreateTemp(\"\", \"gpg-public-key\")",
          "23:  err = os.WriteFile(f.Name(), []byte(keyData), 0600)",
          "",
          "---------------"
        ],
        "util/dex/dex.go||util/dex/dex.go": [
          "File: util/dex/dex.go -> util/dex/dex.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"bytes\"",
          "5:  \"fmt\"",
          "7:  \"net/http\"",
          "8:  \"net/http/httputil\"",
          "9:  \"net/url\"",
          "",
          "[Removed Lines]",
          "6:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "6:  \"io\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:  proxy := httputil.NewSingleHostReverseProxy(target)",
          "35:  proxy.ModifyResponse = func(resp *http.Response) error {",
          "36:   if resp.StatusCode == 500 {",
          "38:    if err != nil {",
          "39:     return err",
          "40:    }",
          "",
          "[Removed Lines]",
          "37:    b, err := ioutil.ReadAll(resp.Body)",
          "",
          "[Added Lines]",
          "37:    b, err := io.ReadAll(resp.Body)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:    resp.Header.Set(\"Content-Length\", strconv.Itoa(0))",
          "48:    resp.Header.Set(\"Location\", fmt.Sprintf(\"%s?has_sso_error=true\", path.Join(baseHRef, \"login\")))",
          "49:    resp.StatusCode = http.StatusSeeOther",
          "51:    return nil",
          "52:   }",
          "53:   return nil",
          "",
          "[Removed Lines]",
          "50:    resp.Body = ioutil.NopCloser(bytes.NewReader(make([]byte, 0)))",
          "",
          "[Added Lines]",
          "50:    resp.Body = io.NopCloser(bytes.NewReader(make([]byte, 0)))",
          "",
          "---------------"
        ],
        "util/git/creds.go||util/git/creds.go": [
          "File: util/git/creds.go -> util/git/creds.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"crypto/sha256\"",
          "6:  \"fmt\"",
          "7:  \"io\"",
          "9:  \"os\"",
          "10:  \"strconv\"",
          "11:  \"strings\"",
          "",
          "[Removed Lines]",
          "8:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:   if err == nil {",
          "158:    defer certFile.Close()",
          "160:    if err != nil {",
          "161:     removeErr := os.Remove(certFile.Name())",
          "162:     if removeErr != nil {",
          "",
          "[Removed Lines]",
          "156:   certFile, err := ioutil.TempFile(argoio.TempDir, \"\")",
          "159:    keyFile, err = ioutil.TempFile(argoio.TempDir, \"\")",
          "",
          "[Added Lines]",
          "155:   certFile, err := os.CreateTemp(argoio.TempDir, \"\")",
          "158:    keyFile, err = os.CreateTemp(argoio.TempDir, \"\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "245: func (c SSHCreds) Environ() (io.Closer, []string, error) {",
          "248:  if err != nil {",
          "249:   return nil, nil, err",
          "250:  }",
          "",
          "[Removed Lines]",
          "247:  file, err := ioutil.TempFile(argoio.TempDir, \"\")",
          "",
          "[Added Lines]",
          "246:  file, err := os.CreateTemp(argoio.TempDir, \"\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "319:   if err == nil {",
          "320:    defer certFile.Close()",
          "322:    if err != nil {",
          "323:     removeErr := os.Remove(certFile.Name())",
          "324:     if removeErr != nil {",
          "",
          "[Removed Lines]",
          "318:   certFile, err := ioutil.TempFile(argoio.TempDir, \"\")",
          "321:    keyFile, err = ioutil.TempFile(argoio.TempDir, \"\")",
          "",
          "[Added Lines]",
          "317:   certFile, err := os.CreateTemp(argoio.TempDir, \"\")",
          "320:    keyFile, err = os.CreateTemp(argoio.TempDir, \"\")",
          "",
          "---------------"
        ],
        "util/git/creds_test.go||util/git/creds_test.go": [
          "File: util/git/creds_test.go -> util/git/creds_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "6:  \"os\"",
          "7:  \"path\"",
          "8:  \"regexp\"",
          "",
          "[Removed Lines]",
          "5:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  var nonce string",
          "48:  for _, envVar := range env {",
          "49:   if strings.HasPrefix(envVar, ASKPASS_NONCE_ENV) {",
          "51:    break",
          "52:   }",
          "53:  }",
          "",
          "[Removed Lines]",
          "50:    nonce = envVar[len(ASKPASS_NONCE_ENV) + 1:]",
          "",
          "[Added Lines]",
          "49:    nonce = envVar[len(ASKPASS_NONCE_ENV)+1:]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:  assert.NotEmpty(t, cert)",
          "110:  assert.NotEmpty(t, key)",
          "113:  assert.NoError(t, err)",
          "114:  assert.Equal(t, \"clientCertData\", string(certBytes))",
          "116:  assert.Equal(t, \"clientCertKey\", string(keyBytes))",
          "117:  assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "112:  certBytes, err := ioutil.ReadFile(cert)",
          "115:  keyBytes, err := ioutil.ReadFile(key)",
          "",
          "[Added Lines]",
          "111:  certBytes, err := os.ReadFile(cert)",
          "114:  keyBytes, err := os.ReadFile(key)",
          "",
          "---------------"
        ],
        "util/git/git_test.go||util/git/git_test.go": [
          "File: util/git/git_test.go -> util/git/git_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "6:  \"net/http\"",
          "7:  \"os\"",
          "8:  \"path/filepath\"",
          "",
          "[Removed Lines]",
          "5:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "5:  \"io\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "138:  assert.NoError(t, err)",
          "139:  assert.NotEqual(t, \"\", keyFile)",
          "142:  assert.NoError(t, err)",
          "143:  assert.NotEqual(t, \"\", string(certData))",
          "146:  assert.NoError(t, err)",
          "147:  assert.NotEqual(t, \"\", string(keyData))",
          "",
          "[Removed Lines]",
          "141:  certData, err := ioutil.ReadFile(certFile)",
          "145:  keyData, err := ioutil.ReadFile(keyFile)",
          "",
          "[Added Lines]",
          "141:  certData, err := os.ReadFile(certFile)",
          "145:  keyData, err := os.ReadFile(keyFile)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:   assert.Equal(t, \"http://proxy-from-env:7878\", proxy.String())",
          "206:  }",
          "209:  assert.NoError(t, err)",
          "210:  temppath := t.TempDir()",
          "211:  defer os.RemoveAll(temppath)",
          "213:  assert.NoError(t, err)",
          "214:  os.Setenv(common.EnvVarTLSDataPath, temppath)",
          "215:  client = GetRepoHTTPClient(\"https://127.0.0.1\", false, creds, \"\")",
          "",
          "[Removed Lines]",
          "208:  cert, err := ioutil.ReadFile(\"../../test/fixture/certs/argocd-test-server.crt\")",
          "212:  err = ioutil.WriteFile(filepath.Join(temppath, \"127.0.0.1\"), cert, 0666)",
          "",
          "[Added Lines]",
          "208:  cert, err := os.ReadFile(\"../../test/fixture/certs/argocd-test-server.crt\")",
          "212:  err = os.WriteFile(filepath.Join(temppath, \"127.0.0.1\"), cert, 0666)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "290:  assert.NoError(t, err)",
          "291:  if err == nil {",
          "292:   defer fileHandle.Close()",
          "294:   assert.NoError(t, err)",
          "295:   if err == nil {",
          "296:    assert.Equal(t, \"This is not a YAML, sorry.\\n\", string(text))",
          "",
          "[Removed Lines]",
          "293:   text, err := ioutil.ReadAll(fileHandle)",
          "",
          "[Added Lines]",
          "293:   text, err := io.ReadAll(fileHandle)",
          "",
          "---------------"
        ],
        "util/gpg/gpg.go||util/gpg/gpg.go": [
          "File: util/gpg/gpg.go -> util/gpg/gpg.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"bufio\"",
          "5:  \"encoding/hex\"",
          "6:  \"fmt\"",
          "8:  \"os\"",
          "9:  \"os/exec\"",
          "10:  \"path\"",
          "",
          "[Removed Lines]",
          "7:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156: func writeKeyToFile(keyData string) (string, error) {",
          "158:  if err != nil {",
          "159:   return \"\", err",
          "160:  }",
          "163:  if err != nil {",
          "164:   os.Remove(f.Name())",
          "165:   return \"\", err",
          "",
          "[Removed Lines]",
          "157:  f, err := ioutil.TempFile(\"\", \"gpg-public-key\")",
          "162:  err = ioutil.WriteFile(f.Name(), []byte(keyData), 0600)",
          "",
          "[Added Lines]",
          "156:  f, err := os.CreateTemp(\"\", \"gpg-public-key\")",
          "161:  err = os.WriteFile(f.Name(), []byte(keyData), 0600)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "244:   }",
          "245:  }",
          "248:  if err != nil {",
          "249:   return fmt.Errorf(\"could not create canary: %v\", err)",
          "250:  }",
          "253:  if err != nil {",
          "254:   return err",
          "255:  }",
          "",
          "[Removed Lines]",
          "247:  err = ioutil.WriteFile(filepath.Join(gnuPgHome, canaryMarkerFilename), []byte(\"canary\"), 0644)",
          "252:  f, err := ioutil.TempFile(\"\", \"gpg-key-recipe\")",
          "",
          "[Added Lines]",
          "246:  err = os.WriteFile(filepath.Join(gnuPgHome, canaryMarkerFilename), []byte(\"canary\"), 0644)",
          "251:  f, err := os.CreateTemp(\"\", \"gpg-key-recipe\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "271: }",
          "273: func ImportPGPKeysFromString(keyData string) ([]*appsv1.GnuPGPublicKey, error) {",
          "275:  if err != nil {",
          "276:   return nil, err",
          "277:  }",
          "",
          "[Removed Lines]",
          "274:  f, err := ioutil.TempFile(\"\", \"gpg-key-import\")",
          "",
          "[Added Lines]",
          "273:  f, err := os.CreateTemp(\"\", \"gpg-key-import\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "340: func ValidatePGPKeys(keyFile string) (map[string]*appsv1.GnuPGPublicKey, error) {",
          "341:  keys := make(map[string]*appsv1.GnuPGPublicKey)",
          "343:  if err != nil {",
          "344:   return nil, err",
          "345:  }",
          "",
          "[Removed Lines]",
          "342:  tempHome, err := ioutil.TempDir(\"\", \"gpg-verify-key\")",
          "",
          "[Added Lines]",
          "341:  tempHome, err := os.MkdirTemp(\"\", \"gpg-verify-key\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "386:  }",
          "390:  if err != nil {",
          "391:   return err",
          "392:  }",
          "",
          "[Removed Lines]",
          "389:  f, err := ioutil.TempFile(\"\", \"gpg-key-fps\")",
          "",
          "[Added Lines]",
          "388:  f, err := os.CreateTemp(\"\", \"gpg-key-fps\")",
          "",
          "---------------"
        ],
        "util/gpg/gpg_test.go||util/gpg/gpg_test.go": [
          "File: util/gpg/gpg_test.go -> util/gpg/gpg_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"io\"",
          "7:  \"os\"",
          "8:  \"os/exec\"",
          "9:  \"path\"",
          "",
          "[Removed Lines]",
          "6:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: func initTempDir(t *testing.T) string {",
          "35:  if err != nil {",
          "36:   panic(err)",
          "37:  }",
          "",
          "[Removed Lines]",
          "34:  p, err := ioutil.TempDir(os.TempDir(), \"\")",
          "",
          "[Added Lines]",
          "33:  p, err := os.MkdirTemp(os.TempDir(), \"\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:  assert.Equal(t, keys[0].Trust, \"ultimate\")",
          "91:  assert.NoError(t, err)",
          "92:  defer os.Remove(f.Name())",
          "",
          "[Removed Lines]",
          "90:  f, err := ioutil.TempFile(\"\", \"gpg-test\")",
          "",
          "[Added Lines]",
          "89:  f, err := os.CreateTemp(\"\", \"gpg-test\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305:  {",
          "307:   if err != nil {",
          "308:    panic(err.Error())",
          "309:   }",
          "",
          "[Removed Lines]",
          "306:   c, err := ioutil.ReadFile(\"testdata/good_signature.txt\")",
          "",
          "[Added Lines]",
          "305:   c, err := os.ReadFile(\"testdata/good_signature.txt\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "319:  {",
          "321:   if err != nil {",
          "322:    panic(err.Error())",
          "323:   }",
          "",
          "[Removed Lines]",
          "320:   c, err := ioutil.ReadFile(\"testdata/unknown_signature1.txt\")",
          "",
          "[Added Lines]",
          "319:   c, err := os.ReadFile(\"testdata/unknown_signature1.txt\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "333:  {",
          "335:   if err != nil {",
          "336:    panic(err.Error())",
          "337:   }",
          "",
          "[Removed Lines]",
          "334:   c, err := ioutil.ReadFile(\"testdata/unknown_signature2.txt\")",
          "",
          "[Added Lines]",
          "333:   c, err := os.ReadFile(\"testdata/unknown_signature2.txt\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "347:  {",
          "349:   if err != nil {",
          "350:    panic(err.Error())",
          "351:   }",
          "",
          "[Removed Lines]",
          "348:   c, err := ioutil.ReadFile(\"testdata/bad_signature_bad.txt\")",
          "",
          "[Added Lines]",
          "347:   c, err := os.ReadFile(\"testdata/bad_signature_bad.txt\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "361:  {",
          "363:   if err != nil {",
          "364:    panic(err.Error())",
          "365:   }",
          "",
          "[Removed Lines]",
          "362:   c, err := ioutil.ReadFile(\"testdata/bad_signature_manipulated.txt\")",
          "",
          "[Added Lines]",
          "361:   c, err := os.ReadFile(\"testdata/bad_signature_manipulated.txt\")",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "372:  {",
          "374:   if err != nil {",
          "375:    panic(err.Error())",
          "376:   }",
          "",
          "[Removed Lines]",
          "373:   c, err := ioutil.ReadFile(\"testdata/bad_signature_preeof1.txt\")",
          "",
          "[Added Lines]",
          "372:   c, err := os.ReadFile(\"testdata/bad_signature_preeof1.txt\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "383:  {",
          "385:   if err != nil {",
          "386:    panic(err.Error())",
          "387:   }",
          "",
          "[Removed Lines]",
          "384:   c, err := ioutil.ReadFile(\"testdata/bad_signature_preeof2.txt\")",
          "",
          "[Added Lines]",
          "383:   c, err := os.ReadFile(\"testdata/bad_signature_preeof2.txt\")",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "394:  {",
          "396:   if err != nil {",
          "397:    panic(err.Error())",
          "398:   }",
          "",
          "[Removed Lines]",
          "395:   c, err := ioutil.ReadFile(\"testdata/bad_signature_nodata.txt\")",
          "",
          "[Added Lines]",
          "394:   c, err := os.ReadFile(\"testdata/bad_signature_nodata.txt\")",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "405:  {",
          "407:   if err != nil {",
          "408:    panic(err.Error())",
          "409:   }",
          "",
          "[Removed Lines]",
          "406:   c, err := ioutil.ReadFile(\"testdata/bad_signature_malformed1.txt\")",
          "",
          "[Added Lines]",
          "405:   c, err := os.ReadFile(\"testdata/bad_signature_malformed1.txt\")",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "416:  {",
          "418:   if err != nil {",
          "419:    panic(err.Error())",
          "420:   }",
          "",
          "[Removed Lines]",
          "417:   c, err := ioutil.ReadFile(\"testdata/bad_signature_malformed2.txt\")",
          "",
          "[Added Lines]",
          "416:   c, err := os.ReadFile(\"testdata/bad_signature_malformed2.txt\")",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "427:  {",
          "429:   if err != nil {",
          "430:    panic(err.Error())",
          "431:   }",
          "",
          "[Removed Lines]",
          "428:   c, err := ioutil.ReadFile(\"testdata/bad_signature_malformed3.txt\")",
          "",
          "[Added Lines]",
          "427:   c, err := os.ReadFile(\"testdata/bad_signature_malformed3.txt\")",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "438:  {",
          "440:   if err != nil {",
          "441:    panic(err.Error())",
          "442:   }",
          "",
          "[Removed Lines]",
          "439:   c, err := ioutil.ReadFile(\"testdata/bad_signature_badkeyid.txt\")",
          "",
          "[Added Lines]",
          "438:   c, err := os.ReadFile(\"testdata/bad_signature_badkeyid.txt\")",
          "",
          "---------------"
        ],
        "util/helm/client.go||util/helm/client.go": [
          "File: util/helm/client.go -> util/helm/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  \"encoding/json\"",
          "8:  \"errors\"",
          "9:  \"fmt\"",
          "11:  \"net/http\"",
          "12:  \"net/url\"",
          "13:  \"os\"",
          "",
          "[Removed Lines]",
          "10:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "10:  \"io\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  \"github.com/argoproj/argo-cd/v2/util/cache\"",
          "25:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "27:  \"github.com/argoproj/argo-cd/v2/util/io/files\"",
          "28:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
          "29: )",
          "",
          "[Removed Lines]",
          "26:  \"github.com/argoproj/argo-cd/v2/util/io\"",
          "",
          "[Added Lines]",
          "26:  argoio \"github.com/argoproj/argo-cd/v2/util/io\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50: type Client interface {",
          "51:  CleanChartCache(chart string, version string) error",
          "53:  GetIndex(noCache bool) (*Index, error)",
          "54:  TestHelmOCI() (bool, error)",
          "55: }",
          "",
          "[Removed Lines]",
          "52:  ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error)",
          "",
          "[Added Lines]",
          "52:  ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:  }",
          "63: }",
          "66:  return func(c *nativeHelmChart) {",
          "67:   c.chartCachePaths = chartPaths",
          "68:  }",
          "",
          "[Removed Lines]",
          "65: func WithChartPaths(chartPaths *io.TempPaths) ClientOpts {",
          "",
          "[Added Lines]",
          "65: func WithChartPaths(chartPaths *argoio.TempPaths) ClientOpts {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "79:   repoLock:        repoLock,",
          "80:   enableOci:       enableOci,",
          "81:   proxy:           proxy,",
          "83:  }",
          "84:  for i := range opts {",
          "85:   opts[i](c)",
          "",
          "[Removed Lines]",
          "82:   chartCachePaths: io.NewTempPaths(os.TempDir()),",
          "",
          "[Added Lines]",
          "82:   chartCachePaths: argoio.NewTempPaths(os.TempDir()),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "90: var _ Client = &nativeHelmChart{}",
          "92: type nativeHelmChart struct {",
          "94:  repoURL         string",
          "95:  creds           Creds",
          "96:  repoLock        sync.KeyLock",
          "",
          "[Removed Lines]",
          "93:  chartCachePaths *io.TempPaths",
          "",
          "[Added Lines]",
          "93:  chartCachePaths *argoio.TempPaths",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "118:  return os.RemoveAll(cachePath)",
          "119: }",
          "123:  helmCmd, err := NewCmdWithVersion(\"\", HelmV3, c.enableOci, c.proxy)",
          "",
          "[Removed Lines]",
          "121: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
          "",
          "[Added Lines]",
          "121: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, argoio.Closer, error) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "185:   }",
          "189:   if err != nil {",
          "190:    return \"\", nil, err",
          "191:   }",
          "",
          "[Removed Lines]",
          "188:   infos, err := ioutil.ReadDir(tempDest)",
          "",
          "[Added Lines]",
          "188:   infos, err := os.ReadDir(tempDest)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "205:   _ = os.RemoveAll(tempDir)",
          "206:   return \"\", nil, err",
          "207:  }",
          "209:   return os.RemoveAll(tempDir)",
          "210:  }), nil",
          "211: }",
          "",
          "[Removed Lines]",
          "208:  return path.Join(tempDir, normalizeChartName(chart)), io.NewCloser(func() error {",
          "",
          "[Added Lines]",
          "208:  return path.Join(tempDir, normalizeChartName(chart)), argoio.NewCloser(func() error {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "249: func (c *nativeHelmChart) TestHelmOCI() (bool, error) {",
          "250:  start := time.Now()",
          "253:  if err != nil {",
          "254:   return false, err",
          "255:  }",
          "",
          "[Removed Lines]",
          "252:  tmpDir, err := ioutil.TempDir(\"\", \"helm\")",
          "",
          "[Added Lines]",
          "252:  tmpDir, err := os.MkdirTemp(\"\", \"helm\")",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "311:  if resp.StatusCode != 200 {",
          "312:   return nil, errors.New(\"failed to get index: \" + resp.Status)",
          "313:  }",
          "315: }",
          "317: func newTLSConfig(creds Creds) (*tls.Config, error) {",
          "318:  tlsConfig := &tls.Config{InsecureSkipVerify: creds.InsecureSkipVerify}",
          "320:  if creds.CAPath != \"\" {",
          "322:   if err != nil {",
          "323:    return nil, err",
          "324:   }",
          "",
          "[Removed Lines]",
          "314:  return ioutil.ReadAll(resp.Body)",
          "321:   caData, err := ioutil.ReadFile(creds.CAPath)",
          "",
          "[Added Lines]",
          "314:  return io.ReadAll(resp.Body)",
          "321:   caData, err := os.ReadFile(creds.CAPath)",
          "",
          "---------------"
        ],
        "util/helm/cmd.go||util/helm/cmd.go": [
          "File: util/helm/cmd.go -> util/helm/cmd.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "6:  \"os\"",
          "7:  \"os/exec\"",
          "8:  \"path\"",
          "",
          "[Removed Lines]",
          "5:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:  \"regexp\"",
          "12:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "14:  pathutil \"github.com/argoproj/argo-cd/v2/util/io/path\"",
          "15:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
          "16: )",
          "",
          "[Removed Lines]",
          "13:  \"github.com/argoproj/argo-cd/v2/util/io\"",
          "",
          "[Added Lines]",
          "12:  argoio \"github.com/argoproj/argo-cd/v2/util/io\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36: }",
          "38: func NewCmdWithVersion(workDir string, version HelmVer, isHelmOci bool, proxy string) (*Cmd, error) {",
          "40:  if err != nil {",
          "41:   return nil, err",
          "42:  }",
          "",
          "[Removed Lines]",
          "39:  tmpDir, err := ioutil.TempDir(\"\", \"helm\")",
          "",
          "[Added Lines]",
          "38:  tmpDir, err := os.MkdirTemp(\"\", \"helm\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:   if err != nil {",
          "96:    return \"\", err",
          "97:   }",
          "99:   args = append(args, \"--cert-file\", filePath)",
          "100:  }",
          "101:  if len(creds.KeyData) > 0 {",
          "",
          "[Removed Lines]",
          "98:   defer io.Close(closer)",
          "",
          "[Added Lines]",
          "97:   defer argoio.Close(closer)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "103:   if err != nil {",
          "104:    return \"\", err",
          "105:   }",
          "107:   args = append(args, \"--key-file\", filePath)",
          "108:  }",
          "",
          "[Removed Lines]",
          "106:   defer io.Close(closer)",
          "",
          "[Added Lines]",
          "105:   defer argoio.Close(closer)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "125:   if err != nil {",
          "126:    return \"\", err",
          "127:   }",
          "129:   args = append(args, \"--cert-file\", filePath)",
          "130:  }",
          "131:  if len(creds.KeyData) > 0 {",
          "",
          "[Removed Lines]",
          "128:   defer io.Close(closer)",
          "",
          "[Added Lines]",
          "127:   defer argoio.Close(closer)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "133:   if err != nil {",
          "134:    return \"\", err",
          "135:   }",
          "137:   args = append(args, \"--key-file\", filePath)",
          "138:  }",
          "",
          "[Removed Lines]",
          "136:   defer io.Close(closer)",
          "",
          "[Added Lines]",
          "135:   defer argoio.Close(closer)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "141: }",
          "143: func (c *Cmd) RepoAdd(name string, url string, opts Creds, passCredentials bool) (string, error) {",
          "145:  if err != nil {",
          "146:   return \"\", err",
          "147:  }",
          "",
          "[Removed Lines]",
          "144:  tmp, err := ioutil.TempDir(\"\", \"helm\")",
          "",
          "[Added Lines]",
          "143:  tmp, err := os.MkdirTemp(\"\", \"helm\")",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "166:  }",
          "168:  if len(opts.CertData) > 0 {",
          "170:   if err != nil {",
          "171:    return \"\", err",
          "172:   }",
          "",
          "[Removed Lines]",
          "169:   certFile, err := ioutil.TempFile(\"\", \"helm\")",
          "",
          "[Added Lines]",
          "168:   certFile, err := os.CreateTemp(\"\", \"helm\")",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "179:  }",
          "181:  if len(opts.KeyData) > 0 {",
          "183:   if err != nil {",
          "184:    return \"\", err",
          "185:   }",
          "",
          "[Removed Lines]",
          "182:   keyFile, err := ioutil.TempFile(\"\", \"helm\")",
          "",
          "[Added Lines]",
          "181:   keyFile, err := os.CreateTemp(\"\", \"helm\")",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "200:  return c.run(args...)",
          "201: }",
          "205:  if err != nil {",
          "206:   return \"\", nil, err",
          "207:  }",
          "209:  if err != nil {",
          "210:   _ = os.RemoveAll(file.Name())",
          "211:   return \"\", nil, err",
          "212:  }",
          "213:  defer file.Close()",
          "215:   return os.RemoveAll(file.Name())",
          "216:  }), nil",
          "217: }",
          "",
          "[Removed Lines]",
          "203: func writeToTmp(data []byte) (string, io.Closer, error) {",
          "204:  file, err := ioutil.TempFile(\"\", \"\")",
          "208:  err = ioutil.WriteFile(file.Name(), data, 0644)",
          "214:  return file.Name(), io.NewCloser(func() error {",
          "",
          "[Added Lines]",
          "202: func writeToTmp(data []byte) (string, argoio.Closer, error) {",
          "203:  file, err := os.CreateTemp(\"\", \"\")",
          "207:  err = os.WriteFile(file.Name(), data, 0644)",
          "213:  return file.Name(), argoio.NewCloser(func() error {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "241:   if err != nil {",
          "242:    return \"\", err",
          "243:   }",
          "245:   args = append(args, \"--cert-file\", filePath)",
          "246:  }",
          "247:  if len(creds.KeyData) > 0 {",
          "",
          "[Removed Lines]",
          "244:   defer io.Close(closer)",
          "",
          "[Added Lines]",
          "243:   defer argoio.Close(closer)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "249:   if err != nil {",
          "250:    return \"\", err",
          "251:   }",
          "253:   args = append(args, \"--key-file\", filePath)",
          "254:  }",
          "255:  if passCredentials && c.helmPassCredentialsSupported {",
          "",
          "[Removed Lines]",
          "252:   defer io.Close(closer)",
          "",
          "[Added Lines]",
          "251:   defer argoio.Close(closer)",
          "",
          "---------------"
        ],
        "util/helm/helm.go||util/helm/helm.go": [
          "File: util/helm/helm.go -> util/helm/helm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "6:  \"net/url\"",
          "7:  \"os\"",
          "8:  \"os/exec\"",
          "",
          "[Removed Lines]",
          "5:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:    if _, err := os.Stat(file); os.IsNotExist(err) {",
          "154:     continue",
          "155:    }",
          "157:   }",
          "158:   if err != nil {",
          "159:    return nil, fmt.Errorf(\"failed to read value file %s: %s\", file, err)",
          "",
          "[Removed Lines]",
          "156:    fileValues, err = ioutil.ReadFile(file)",
          "",
          "[Added Lines]",
          "155:    fileValues, err = os.ReadFile(file)",
          "",
          "---------------"
        ],
        "util/io/files/tar_test.go||util/io/files/tar_test.go": [
          "File: util/io/files/tar_test.go -> util/io/files/tar_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"compress/gzip\"",
          "6:  \"fmt\"",
          "7:  \"io\"",
          "9:  \"os\"",
          "10:  \"path/filepath\"",
          "11:  \"testing\"",
          "",
          "[Removed Lines]",
          "8:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  setup := func(t *testing.T) *fixture {",
          "25:   t.Helper()",
          "26:   testDir := getTestDataDir(t)",
          "28:   require.NoError(t, err)",
          "29:   return &fixture{",
          "30:    file: f,",
          "",
          "[Removed Lines]",
          "27:   f, err := ioutil.TempFile(testDir, \"\")",
          "",
          "[Added Lines]",
          "26:   f, err := os.CreateTemp(testDir, \"\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103: func TestUntgz(t *testing.T) {",
          "104:  createTmpDir := func(t *testing.T) string {",
          "105:   t.Helper()",
          "107:   if err != nil {",
          "108:    t.Fatalf(\"error creating tmpDir: %s\", err)",
          "109:   }",
          "",
          "[Removed Lines]",
          "106:   tmpDir, err := ioutil.TempDir(getTestDataDir(t), \"\")",
          "",
          "[Added Lines]",
          "105:   tmpDir, err := os.MkdirTemp(getTestDataDir(t), \"\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "118:  }",
          "119:  createTgz := func(t *testing.T, fromDir, destDir string) *os.File {",
          "120:   t.Helper()",
          "122:   if err != nil {",
          "123:    t.Fatalf(\"error creating tmpFile in %q: %s\", destDir, err)",
          "124:   }",
          "",
          "[Removed Lines]",
          "121:   f, err := ioutil.TempFile(destDir, \"\")",
          "",
          "[Added Lines]",
          "120:   f, err := os.CreateTemp(destDir, \"\")",
          "",
          "---------------"
        ],
        "util/kube/kube_test.go||util/kube/kube_test.go": [
          "File: util/kube/kube_test.go -> util/kube/kube_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"encoding/json\"",
          "6:  \"log\"",
          "7:  \"testing\"",
          "9:  \"github.com/ghodss/yaml\"",
          "",
          "[Removed Lines]",
          "5:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "6:  \"os\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108: }",
          "110: func TestSetLegacyJobLabel(t *testing.T) {",
          "112:  assert.Nil(t, err)",
          "113:  var obj unstructured.Unstructured",
          "114:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "",
          "[Removed Lines]",
          "111:  yamlBytes, err := ioutil.ReadFile(\"testdata/job.yaml\")",
          "",
          "[Added Lines]",
          "111:  yamlBytes, err := os.ReadFile(\"testdata/job.yaml\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134: }",
          "136: func TestSetSvcLabel(t *testing.T) {",
          "138:  assert.Nil(t, err)",
          "139:  var obj unstructured.Unstructured",
          "140:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "",
          "[Removed Lines]",
          "137:  yamlBytes, err := ioutil.ReadFile(\"testdata/svc.yaml\")",
          "",
          "[Added Lines]",
          "137:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163: }",
          "165: func TestSetAppInstanceAnnotation(t *testing.T) {",
          "167:  assert.Nil(t, err)",
          "168:  var obj unstructured.Unstructured",
          "169:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "",
          "[Removed Lines]",
          "166:  yamlBytes, err := ioutil.ReadFile(\"testdata/svc.yaml\")",
          "",
          "[Added Lines]",
          "166:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185: }",
          "187: func TestGetAppInstanceAnnotation(t *testing.T) {",
          "189:  assert.Nil(t, err)",
          "190:  var obj unstructured.Unstructured",
          "191:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "",
          "[Removed Lines]",
          "188:  yamlBytes, err := ioutil.ReadFile(\"testdata/svc.yaml\")",
          "",
          "[Added Lines]",
          "188:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "197: }",
          "199: func TestGetAppInstanceLabel(t *testing.T) {",
          "201:  assert.Nil(t, err)",
          "202:  var obj unstructured.Unstructured",
          "203:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "",
          "[Removed Lines]",
          "200:  yamlBytes, err := ioutil.ReadFile(\"testdata/svc.yaml\")",
          "",
          "[Added Lines]",
          "200:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "208: }",
          "210: func TestRemoveLabel(t *testing.T) {",
          "212:  assert.Nil(t, err)",
          "213:  var obj unstructured.Unstructured",
          "214:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "",
          "[Removed Lines]",
          "211:  yamlBytes, err := ioutil.ReadFile(\"testdata/svc.yaml\")",
          "",
          "[Added Lines]",
          "211:  yamlBytes, err := os.ReadFile(\"testdata/svc.yaml\")",
          "",
          "---------------"
        ],
        "util/lua/custom_actions_test.go||util/lua/custom_actions_test.go": [
          "File: util/lua/custom_actions_test.go -> util/lua/custom_actions_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "6:  \"os\"",
          "7:  \"path/filepath\"",
          "8:  \"strings\"",
          "",
          "[Removed Lines]",
          "5:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   assert.NoError(t, err)",
          "49:   dir := filepath.Dir(path)",
          "52:   assert.NoError(t, err)",
          "53:   var resourceTest ActionTestStructure",
          "54:   err = yaml.Unmarshal(yamlBytes, &resourceTest)",
          "",
          "[Removed Lines]",
          "51:   yamlBytes, err := ioutil.ReadFile(dir + \"/action_test.yaml\")",
          "",
          "[Added Lines]",
          "50:   yamlBytes, err := os.ReadFile(dir + \"/action_test.yaml\")",
          "",
          "---------------"
        ],
        "util/lua/health_test.go||util/lua/health_test.go": [
          "File: util/lua/health_test.go -> util/lua/health_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package lua",
          "3: import (",
          "5:  \"os\"",
          "6:  \"path/filepath\"",
          "7:  \"strings\"",
          "",
          "[Removed Lines]",
          "4:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: }",
          "27: func getObj(path string) *unstructured.Unstructured {",
          "29:  errors.CheckError(err)",
          "30:  obj := make(map[string]interface{})",
          "31:  err = yaml.Unmarshal(yamlBytes, &obj)",
          "",
          "[Removed Lines]",
          "28:  yamlBytes, err := ioutil.ReadFile(path)",
          "",
          "[Added Lines]",
          "27:  yamlBytes, err := os.ReadFile(path)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:   }",
          "41:   errors.CheckError(err)",
          "42:   dir := filepath.Dir(path)",
          "44:   errors.CheckError(err)",
          "45:   var resourceTest TestStructure",
          "46:   err = yaml.Unmarshal(yamlBytes, &resourceTest)",
          "",
          "[Removed Lines]",
          "43:   yamlBytes, err := ioutil.ReadFile(dir + \"/health_test.yaml\")",
          "",
          "[Added Lines]",
          "42:   yamlBytes, err := os.ReadFile(dir + \"/health_test.yaml\")",
          "",
          "---------------"
        ],
        "util/oidc/oidc_test.go||util/oidc/oidc_test.go": [
          "File: util/oidc/oidc_test.go -> util/oidc/oidc_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"encoding/hex\"",
          "5:  \"encoding/json\"",
          "7:  \"net/http\"",
          "8:  \"net/http/httptest\"",
          "9:  \"net/url\"",
          "10:  \"testing\"",
          "12:  gooidc \"github.com/coreos/go-oidc\"",
          "",
          "[Removed Lines]",
          "6:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "9:  \"os\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: func TestInferGrantType(t *testing.T) {",
          "25:  for _, path := range []string{\"dex\", \"okta\", \"auth0\", \"onelogin\"} {",
          "26:   t.Run(path, func(t *testing.T) {",
          "28:    assert.NoError(t, err)",
          "29:    var config OIDCConfiguration",
          "30:    err = json.Unmarshal(rawConfig, &config)",
          "",
          "[Removed Lines]",
          "27:    rawConfig, err := ioutil.ReadFile(\"testdata/\" + path + \".json\")",
          "",
          "[Added Lines]",
          "27:    rawConfig, err := os.ReadFile(\"testdata/\" + path + \".json\")",
          "",
          "---------------"
        ],
        "util/tls/tls.go||util/tls/tls.go": [
          "File: util/tls/tls.go -> util/tls/tls.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  \"encoding/pem\"",
          "13:  \"errors\"",
          "14:  \"fmt\"",
          "16:  \"math/big\"",
          "17:  \"net\"",
          "18:  \"os\"",
          "",
          "[Removed Lines]",
          "15:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:    return nil, fmt.Errorf(\"could not load TLS certificate: %v\", err)",
          "351:   } else {",
          "353:    if err != nil {",
          "354:     return nil, fmt.Errorf(\"failure to load TLS certificates from %s: %v\", path, err)",
          "355:    }",
          "",
          "[Removed Lines]",
          "352:    f, err := ioutil.ReadFile(path)",
          "",
          "[Added Lines]",
          "351:    f, err := os.ReadFile(path)",
          "",
          "---------------"
        ],
        "util/webhook/webhook_test.go||util/webhook/webhook_test.go": [
          "File: util/webhook/webhook_test.go -> util/webhook/webhook_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"bytes\"",
          "5:  \"encoding/json\"",
          "6:  \"fmt\"",
          "8:  \"net/http\"",
          "9:  \"net/http/httptest\"",
          "10:  \"testing\"",
          "11:  \"time\"",
          "",
          "[Removed Lines]",
          "7:  \"io/ioutil\"",
          "",
          "[Added Lines]",
          "7:  \"io\"",
          "10:  \"os\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:  h := NewMockHandler()",
          "60:  req := httptest.NewRequest(\"POST\", \"/api/webhook\", nil)",
          "61:  req.Header.Set(\"X-GitHub-Event\", \"push\")",
          "63:  assert.NoError(t, err)",
          "65:  w := httptest.NewRecorder()",
          "66:  h.Handler(w, req)",
          "67:  assert.Equal(t, w.Code, http.StatusOK)",
          "",
          "[Removed Lines]",
          "62:  eventJSON, err := ioutil.ReadFile(\"github-commit-event.json\")",
          "64:  req.Body = ioutil.NopCloser(bytes.NewReader(eventJSON))",
          "",
          "[Added Lines]",
          "63:  eventJSON, err := os.ReadFile(\"github-commit-event.json\")",
          "65:  req.Body = io.NopCloser(bytes.NewReader(eventJSON))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:  h := NewMockHandler()",
          "76:  req := httptest.NewRequest(\"POST\", \"/api/webhook\", nil)",
          "77:  req.Header.Set(\"X-GitHub-Event\", \"push\")",
          "79:  assert.NoError(t, err)",
          "81:  w := httptest.NewRecorder()",
          "82:  h.Handler(w, req)",
          "83:  assert.Equal(t, w.Code, http.StatusOK)",
          "",
          "[Removed Lines]",
          "78:  eventJSON, err := ioutil.ReadFile(\"github-tag-event.json\")",
          "80:  req.Body = ioutil.NopCloser(bytes.NewReader(eventJSON))",
          "",
          "[Added Lines]",
          "79:  eventJSON, err := os.ReadFile(\"github-tag-event.json\")",
          "81:  req.Body = io.NopCloser(bytes.NewReader(eventJSON))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:  h := NewMockHandler()",
          "92:  req := httptest.NewRequest(\"POST\", \"/api/webhook\", nil)",
          "93:  req.Header.Set(\"X-Event-Key\", \"repo:refs_changed\")",
          "95:  assert.NoError(t, err)",
          "97:  w := httptest.NewRecorder()",
          "98:  h.Handler(w, req)",
          "99:  assert.Equal(t, w.Code, http.StatusOK)",
          "",
          "[Removed Lines]",
          "94:  eventJSON, err := ioutil.ReadFile(\"bitbucket-server-event.json\")",
          "96:  req.Body = ioutil.NopCloser(bytes.NewReader(eventJSON))",
          "",
          "[Added Lines]",
          "95:  eventJSON, err := os.ReadFile(\"bitbucket-server-event.json\")",
          "97:  req.Body = io.NopCloser(bytes.NewReader(eventJSON))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "123:  h := NewMockHandler()",
          "124:  req := httptest.NewRequest(\"POST\", \"/api/webhook\", nil)",
          "125:  req.Header.Set(\"X-Gogs-Event\", \"push\")",
          "127:  assert.NoError(t, err)",
          "129:  w := httptest.NewRecorder()",
          "130:  h.Handler(w, req)",
          "131:  assert.Equal(t, w.Code, http.StatusOK)",
          "",
          "[Removed Lines]",
          "126:  eventJSON, err := ioutil.ReadFile(\"gogs-event.json\")",
          "128:  req.Body = ioutil.NopCloser(bytes.NewReader(eventJSON))",
          "",
          "[Added Lines]",
          "127:  eventJSON, err := os.ReadFile(\"gogs-event.json\")",
          "129:  req.Body = io.NopCloser(bytes.NewReader(eventJSON))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "139:  h := NewMockHandler()",
          "140:  req := httptest.NewRequest(\"POST\", \"/api/webhook\", nil)",
          "141:  req.Header.Set(\"X-Gitlab-Event\", \"Push Hook\")",
          "143:  assert.NoError(t, err)",
          "145:  w := httptest.NewRecorder()",
          "146:  h.Handler(w, req)",
          "147:  assert.Equal(t, w.Code, http.StatusOK)",
          "",
          "[Removed Lines]",
          "142:  eventJSON, err := ioutil.ReadFile(\"gitlab-event.json\")",
          "144:  req.Body = ioutil.NopCloser(bytes.NewReader(eventJSON))",
          "",
          "[Added Lines]",
          "143:  eventJSON, err := os.ReadFile(\"gitlab-event.json\")",
          "145:  req.Body = io.NopCloser(bytes.NewReader(eventJSON))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2770c690a5597fcbab344cd2ad494c918472bdd1",
      "candidate_info": {
        "commit_hash": "2770c690a5597fcbab344cd2ad494c918472bdd1",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/2770c690a5597fcbab344cd2ad494c918472bdd1",
        "files": [
          "cmd/argocd/commands/app.go",
          "cmd/util/app.go",
          "cmd/util/app_test.go",
          "docs/operator-manual/upgrading/2.1-2.2.md",
          "docs/operator-manual/upgrading/overview.md",
          "docs/user-guide/commands/argocd_admin_app_generate-spec.md",
          "docs/user-guide/commands/argocd_app_create.md",
          "docs/user-guide/commands/argocd_app_set.md",
          "docs/user-guide/helm.md",
          "hack/installers/checksums/helm-v3.7.1-linux-amd64.tar.gz.sha256",
          "hack/tool-versions.sh",
          "manifests/core-install.yaml",
          "manifests/crds/application-crd.yaml",
          "manifests/ha/install.yaml",
          "manifests/install.yaml",
          "pkg/apis/application/v1alpha1/generated.pb.go",
          "pkg/apis/application/v1alpha1/generated.proto",
          "pkg/apis/application/v1alpha1/openapi_generated.go",
          "pkg/apis/application/v1alpha1/types.go",
          "reposerver/repository/repository.go",
          "test/e2e/fixture/app/actions.go",
          "test/e2e/fixture/app/context.go",
          "test/e2e/fixture/repos/repos.go",
          "test/e2e/helm_test.go",
          "util/helm/client.go",
          "util/helm/client_test.go",
          "util/helm/cmd.go",
          "util/helm/helm.go",
          "util/helm/helm_test.go",
          "util/helm/helmver.go",
          "util/helm/mocks/Client.go"
        ],
        "message": "Update to Helm v3.7.1, allow to pass credentials and new OCI support (#7249)\n\n* chore: Update Helm to v3.7.1\n\nSigned-off-by: Mathieu Parent <math.parent@gmail.com>",
        "before_after_code_files": [
          "cmd/argocd/commands/app.go||cmd/argocd/commands/app.go",
          "cmd/util/app.go||cmd/util/app.go",
          "cmd/util/app_test.go||cmd/util/app_test.go",
          "hack/installers/checksums/helm-v3.7.1-linux-amd64.tar.gz.sha256||hack/installers/checksums/helm-v3.7.1-linux-amd64.tar.gz.sha256",
          "hack/tool-versions.sh||hack/tool-versions.sh",
          "pkg/apis/application/v1alpha1/generated.pb.go||pkg/apis/application/v1alpha1/generated.pb.go",
          "pkg/apis/application/v1alpha1/generated.proto||pkg/apis/application/v1alpha1/generated.proto",
          "pkg/apis/application/v1alpha1/openapi_generated.go||pkg/apis/application/v1alpha1/openapi_generated.go",
          "pkg/apis/application/v1alpha1/types.go||pkg/apis/application/v1alpha1/types.go",
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "test/e2e/fixture/app/actions.go||test/e2e/fixture/app/actions.go",
          "test/e2e/fixture/app/context.go||test/e2e/fixture/app/context.go",
          "test/e2e/fixture/repos/repos.go||test/e2e/fixture/repos/repos.go",
          "test/e2e/helm_test.go||test/e2e/helm_test.go",
          "util/helm/client.go||util/helm/client.go",
          "util/helm/client_test.go||util/helm/client_test.go",
          "util/helm/cmd.go||util/helm/cmd.go",
          "util/helm/helm.go||util/helm/helm.go",
          "util/helm/helm_test.go||util/helm/helm_test.go",
          "util/helm/helmver.go||util/helm/helmver.go",
          "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ],
          "candidate": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/argocd/commands/app.go||cmd/argocd/commands/app.go": [
          "File: cmd/argocd/commands/app.go -> cmd/argocd/commands/app.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "668:       }",
          "669:      }",
          "670:     }",
          "671:    }",
          "673:    if app.Spec.Source.Plugin != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "671:     if app.Spec.Source.Helm.PassCredentials {",
          "672:      app.Spec.Source.Helm.PassCredentials = false",
          "673:      updated = true",
          "674:     }",
          "",
          "---------------"
        ],
        "cmd/util/app.go||cmd/util/app.go": [
          "File: cmd/util/app.go -> cmd/util/app.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  helmSetStrings                  []string",
          "41:  helmSetFiles                    []string",
          "42:  helmVersion                     string",
          "43:  project                         string",
          "44:  syncPolicy                      string",
          "45:  syncOptions                     []string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:  helmPassCredentials             bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:  command.Flags().StringVar(&opts.values, \"values-literal-file\", \"\", \"Filename or URL to import as a literal Helm values block\")",
          "87:  command.Flags().StringVar(&opts.releaseName, \"release-name\", \"\", \"Helm release-name\")",
          "88:  command.Flags().StringVar(&opts.helmVersion, \"helm-version\", \"\", \"Helm version\")",
          "89:  command.Flags().StringArrayVar(&opts.helmSets, \"helm-set\", []string{}, \"Helm set values on the command line (can be repeated to set several values: --helm-set key1=val1 --helm-set key2=val2)\")",
          "90:  command.Flags().StringArrayVar(&opts.helmSetStrings, \"helm-set-string\", []string{}, \"Helm set STRING values on the command line (can be repeated to set several values: --helm-set-string key1=val1 --helm-set-string key2=val2)\")",
          "91:  command.Flags().StringArrayVar(&opts.helmSetFiles, \"helm-set-file\", []string{}, \"Helm set values from respective files specified via the command line (can be repeated to set several values: --helm-set-file key1=path1 --helm-set-file key2=path2)\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:  command.Flags().BoolVar(&opts.helmPassCredentials, \"helm-pass-credentials\", false, \"Pass credentials to all domain\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:    setHelmOpt(&spec.Source, helmOpts{releaseName: appOpts.releaseName})",
          "157:   case \"helm-version\":",
          "158:    setHelmOpt(&spec.Source, helmOpts{version: appOpts.helmVersion})",
          "159:   case \"helm-set\":",
          "160:    setHelmOpt(&spec.Source, helmOpts{helmSets: appOpts.helmSets})",
          "161:   case \"helm-set-string\":",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:   case \"helm-pass-credentials\":",
          "162:    setHelmOpt(&spec.Source, helmOpts{passCredentials: appOpts.helmPassCredentials})",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "372: }",
          "374: type helmOpts struct {",
          "382: }",
          "384: func setHelmOpt(src *argoappv1.ApplicationSource, opts helmOpts) {",
          "",
          "[Removed Lines]",
          "375:  valueFiles     []string",
          "376:  values         string",
          "377:  releaseName    string",
          "378:  version        string",
          "379:  helmSets       []string",
          "380:  helmSetStrings []string",
          "381:  helmSetFiles   []string",
          "",
          "[Added Lines]",
          "379:  valueFiles      []string",
          "380:  values          string",
          "381:  releaseName     string",
          "382:  version         string",
          "383:  helmSets        []string",
          "384:  helmSetStrings  []string",
          "385:  helmSetFiles    []string",
          "386:  passCredentials bool",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "397:  if opts.version != \"\" {",
          "398:   src.Helm.Version = opts.version",
          "399:  }",
          "400:  for _, text := range opts.helmSets {",
          "401:   p, err := argoappv1.NewHelmParameter(text, false)",
          "402:   if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "405:  if opts.passCredentials {",
          "406:   src.Helm.PassCredentials = opts.passCredentials",
          "407:  }",
          "",
          "---------------"
        ],
        "cmd/util/app_test.go||cmd/util/app_test.go": [
          "File: cmd/util/app_test.go -> cmd/util/app_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   setHelmOpt(&src, helmOpts{version: \"v3\"})",
          "46:   assert.Equal(t, \"v3\", src.Helm.Version)",
          "47:  })",
          "48: }",
          "50: func Test_setKustomizeOpt(t *testing.T) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:  t.Run(\"HelmPassCredentials\", func(t *testing.T) {",
          "49:   src := v1alpha1.ApplicationSource{}",
          "50:   setHelmOpt(&src, helmOpts{passCredentials: true})",
          "51:   assert.Equal(t, true, src.Helm.PassCredentials)",
          "52:  })",
          "",
          "---------------"
        ],
        "hack/installers/checksums/helm-v3.7.1-linux-amd64.tar.gz.sha256||hack/installers/checksums/helm-v3.7.1-linux-amd64.tar.gz.sha256": [
          "File: hack/installers/checksums/helm-v3.7.1-linux-amd64.tar.gz.sha256 -> hack/installers/checksums/helm-v3.7.1-linux-amd64.tar.gz.sha256",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: 6cd6cad4b97e10c33c978ff3ac97bb42b68f79766f1d2284cfd62ec04cd177f4  helm-v3.7.1-linux-amd64.tar.gz",
          "",
          "---------------"
        ],
        "hack/tool-versions.sh||hack/tool-versions.sh": [
          "File: hack/tool-versions.sh -> hack/tool-versions.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: # SHA256 sum of the binary.",
          "10: ###############################################################################",
          "11: helm2_version=2.17.0",
          "13: jq_version=1.6",
          "14: ksonnet_version=0.13.1",
          "15: kubectl_version=1.17.8",
          "",
          "[Removed Lines]",
          "12: helm3_version=3.6.0",
          "",
          "[Added Lines]",
          "12: helm3_version=3.7.1",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/generated.pb.go||pkg/apis/application/v1alpha1/generated.pb.go": [
          "File: pkg/apis/application/v1alpha1/generated.pb.go -> pkg/apis/application/v1alpha1/generated.pb.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2633: }",
          "2635: var fileDescriptor_030104ce3b95bcac = []byte{",
          "2637:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x5d, 0x6c, 0x24, 0xd9,",
          "2638:  0x55, 0xf0, 0x56, 0xb7, 0x7f, 0xba, 0x8f, 0x7f, 0x66, 0x7c, 0x67, 0x76, 0xd6, 0xf1, 0xb7, 0x19,",
          "2639:  0x8f, 0x6a, 0x95, 0x64, 0x3f, 0x92, 0xd8, 0xec, 0xb0, 0x84, 0x25, 0x1b, 0x36, 0xb8, 0x6d, 0xcf,",
          "2640:  0x8c, 0x67, 0x3c, 0xb6, 0xe7, 0xd8, 0x33, 0x43, 0x7e, 0x08, 0x5b, 0xae, 0xbe, 0xdd, 0x5d, 0xe3,",
          "2641:  0xee, 0xaa, 0xde, 0xaa, 0x6a, 0x8f, 0x3b, 0x21, 0x7f, 0x28, 0x90, 0x15, 0xf9, 0xd9, 0x28, 0xe1,",
          "2653:  0x2f, 0x60, 0xea, 0x2d, 0xba, 0x41, 0x48, 0x17, 0xf7, 0x7b, 0x14, 0x9a, 0x7b, 0x5e, 0xd3, 0xb4,",
          "3058: }",
          "3060: func (m *AWSAuthConfig) Marshal() (dAtA []byte, err error) {",
          "",
          "[Removed Lines]",
          "2642:  0x21, 0x91, 0x10, 0x84, 0x1f, 0x21, 0xf1, 0x10, 0x01, 0x4f, 0x80, 0x10, 0x0f, 0xe4, 0x29, 0x08,",
          "2643:  0x09, 0x22, 0x81, 0x92, 0x40, 0x84, 0x49, 0x86, 0xa0, 0x00, 0x12, 0x20, 0x20, 0x2f, 0xcc, 0x13,",
          "2644:  0xba, 0x3f, 0x75, 0xef, 0xad, 0xea, 0xee, 0xb1, 0x3d, 0x5d, 0x33, 0x89, 0x22, 0xde, 0xba, 0xce,",
          "2645:  0x39, 0xf7, 0x9c, 0x73, 0xff, 0xce, 0x3d, 0xf7, 0xdc, 0x73, 0x6f, 0xc3, 0x7a, 0xdd, 0x8b, 0x1b,",
          "2646:  0x9d, 0xdd, 0x05, 0x37, 0x68, 0x2d, 0x3a, 0x61, 0x3d, 0x68, 0x87, 0xc1, 0x1d, 0xfe, 0xe3, 0xad,",
          "2647:  0x6e, 0x75, 0x71, 0xff, 0xe2, 0x62, 0x7b, 0xaf, 0xbe, 0xe8, 0xb4, 0xbd, 0x68, 0xd1, 0x69, 0xb7,",
          "2648:  0x9b, 0x9e, 0xeb, 0xc4, 0x5e, 0xe0, 0x2f, 0xee, 0x3f, 0xe7, 0x34, 0xdb, 0x0d, 0xe7, 0xb9, 0xc5,",
          "2649:  0x3a, 0xf5, 0x69, 0xe8, 0xc4, 0xb4, 0xba, 0xd0, 0x0e, 0x83, 0x38, 0x20, 0xef, 0xd0, 0xdc, 0x16,",
          "2650:  0x12, 0x6e, 0xfc, 0xc7, 0xcf, 0xb9, 0xd5, 0x85, 0xfd, 0x8b, 0x0b, 0xed, 0xbd, 0xfa, 0x02, 0xe3,",
          "2651:  0xb6, 0x60, 0x70, 0x5b, 0x48, 0xb8, 0xcd, 0xbd, 0xd5, 0xd0, 0xa5, 0x1e, 0xd4, 0x83, 0x45, 0xce,",
          "2652:  0x74, 0xb7, 0x53, 0xe3, 0x5f, 0xfc, 0x83, 0xff, 0x12, 0xc2, 0xe6, 0xec, 0xbd, 0x17, 0xa2, 0x05,",
          "2654:  0x1c, 0xb7, 0xe1, 0xf9, 0x34, 0xec, 0xea, 0x3a, 0xb5, 0x68, 0xec, 0xf4, 0x2b, 0xb5, 0x38, 0xa8,",
          "2655:  0x54, 0xd8, 0xf1, 0x63, 0xaf, 0x45, 0x7b, 0x0a, 0xbc, 0xed, 0xa8, 0x02, 0x91, 0xdb, 0xa0, 0x2d,",
          "2656:  0x27, 0x5b, 0xce, 0x7e, 0x05, 0xa6, 0x96, 0x6e, 0x6f, 0x2f, 0x75, 0xe2, 0xc6, 0x72, 0xe0, 0xd7,",
          "2657:  0xbc, 0x3a, 0xf9, 0x71, 0x98, 0x70, 0x9b, 0x9d, 0x28, 0xa6, 0xe1, 0x86, 0xd3, 0xa2, 0xb3, 0xd6,",
          "2658:  0x05, 0xeb, 0xd9, 0x72, 0xe5, 0xcc, 0x57, 0x0e, 0xe7, 0x9f, 0xb8, 0x77, 0x38, 0x3f, 0xb1, 0xac,",
          "2659:  0x51, 0x68, 0xd2, 0x91, 0xff, 0x0f, 0xe3, 0x61, 0xd0, 0xa4, 0x4b, 0xb8, 0x31, 0x5b, 0xe0, 0x45,",
          "2660:  0x4e, 0xc9, 0x22, 0xe3, 0x28, 0xc0, 0x98, 0xe0, 0xed, 0xaf, 0x15, 0x00, 0x96, 0xda, 0xed, 0xad,",
          "2661:  0x30, 0xb8, 0x43, 0xdd, 0x98, 0xbc, 0x0c, 0x25, 0xd6, 0x0a, 0x55, 0x27, 0x76, 0xb8, 0xb4, 0x89,",
          "2662:  0x8b, 0x3f, 0xba, 0x20, 0x2a, 0xb3, 0x60, 0x56, 0x46, 0xf7, 0x1c, 0xa3, 0x5e, 0xd8, 0x7f, 0x6e,",
          "2663:  0x61, 0x73, 0x97, 0x95, 0xbf, 0x4e, 0x63, 0xa7, 0x42, 0xa4, 0x30, 0xd0, 0x30, 0x54, 0x5c, 0x89,",
          "2664:  0x0f, 0x23, 0x51, 0x9b, 0xba, 0x5c, 0xb1, 0x89, 0x8b, 0xeb, 0x0b, 0xc3, 0x0c, 0x91, 0x05, 0xad,",
          "2665:  0xf9, 0x76, 0x9b, 0xba, 0x95, 0x49, 0x29, 0x79, 0x84, 0x7d, 0x21, 0x97, 0x43, 0xf6, 0x61, 0x2c,",
          "2666:  0x8a, 0x9d, 0xb8, 0x13, 0xcd, 0x16, 0xb9, 0xc4, 0x8d, 0xdc, 0x24, 0x72, 0xae, 0x95, 0x69, 0x29,",
          "2667:  0x73, 0x4c, 0x7c, 0xa3, 0x94, 0x66, 0xff, 0xbd, 0x05, 0xd3, 0x9a, 0x78, 0xdd, 0x8b, 0x62, 0xf2,",
          "2668:  0xde, 0x9e, 0xc6, 0x5d, 0x38, 0x5e, 0xe3, 0xb2, 0xd2, 0xbc, 0x69, 0x4f, 0x4b, 0x61, 0xa5, 0x04,",
          "2669:  0x62, 0x34, 0x6c, 0x0b, 0x46, 0xbd, 0x98, 0xb6, 0xa2, 0xd9, 0xc2, 0x85, 0xe2, 0xb3, 0x13, 0x17,",
          "2670:  0xaf, 0xe4, 0x55, 0xcf, 0xca, 0x94, 0x14, 0x3a, 0xba, 0xc6, 0xd8, 0xa3, 0x90, 0x62, 0x7f, 0x0f,",
          "2671:  0xcc, 0xfa, 0xb1, 0x06, 0x27, 0xcf, 0xc1, 0x44, 0x14, 0x74, 0x42, 0x97, 0x22, 0x6d, 0x07, 0xd1,",
          "2672:  0xac, 0x75, 0xa1, 0xc8, 0x86, 0x1e, 0x1b, 0xa9, 0xdb, 0x1a, 0x8c, 0x26, 0x0d, 0xf9, 0xb4, 0x05,",
          "2673:  0x93, 0x55, 0x1a, 0xc5, 0x9e, 0xcf, 0xe5, 0x27, 0xca, 0xef, 0x0c, 0xad, 0x7c, 0x02, 0x5c, 0xd1,",
          "2674:  0xcc, 0x2b, 0x67, 0x65, 0x45, 0x26, 0x0d, 0x60, 0x84, 0x29, 0xf9, 0x6c, 0xc6, 0x55, 0x69, 0xe4,",
          "2675:  0x86, 0x5e, 0x9b, 0x7d, 0xf3, 0x31, 0x63, 0xcc, 0xb8, 0x15, 0x8d, 0x42, 0x93, 0x8e, 0xf8, 0x30,",
          "2676:  0xca, 0x66, 0x54, 0x34, 0x3b, 0xc2, 0xf5, 0x5f, 0x1b, 0x4e, 0x7f, 0xd9, 0xa8, 0x6c, 0xb2, 0xea,",
          "2677:  0xd6, 0x67, 0x5f, 0x11, 0x0a, 0x31, 0xe4, 0x53, 0x16, 0xcc, 0xca, 0x19, 0x8f, 0x54, 0x34, 0xe8,",
          "2678:  0xed, 0x86, 0x17, 0xd3, 0xa6, 0x17, 0xc5, 0xb3, 0xa3, 0x5c, 0x87, 0xc5, 0xe3, 0x8d, 0xad, 0xcb,",
          "2679:  0x61, 0xd0, 0x69, 0x5f, 0xf3, 0xfc, 0x6a, 0xe5, 0x82, 0x94, 0x34, 0xbb, 0x3c, 0x80, 0x31, 0x0e,",
          "2680:  0x14, 0x49, 0x3e, 0x67, 0xc1, 0x9c, 0xef, 0xb4, 0x68, 0xd4, 0x76, 0x58, 0xd7, 0x0a, 0x74, 0xa5,",
          "2681:  0xe9, 0xb8, 0x7b, 0x5c, 0xa3, 0xb1, 0x87, 0xd3, 0xc8, 0x96, 0x1a, 0xcd, 0x6d, 0x0c, 0x64, 0x8d,",
          "2682:  0x0f, 0x10, 0x4b, 0x7e, 0xcb, 0x82, 0x99, 0x20, 0x6c, 0x37, 0x1c, 0x9f, 0x56, 0x13, 0x6c, 0x34,",
          "2683:  0x3b, 0xce, 0xa7, 0xde, 0xfb, 0x86, 0xeb, 0xa2, 0xcd, 0x2c, 0xdb, 0xeb, 0x81, 0xef, 0xc5, 0x41,",
          "2684:  0xb8, 0x4d, 0xe3, 0xd8, 0xf3, 0xeb, 0x51, 0xe5, 0xc9, 0x7b, 0x87, 0xf3, 0x33, 0x3d, 0x54, 0xd8,",
          "2685:  0xab, 0x0f, 0xf9, 0x00, 0x4c, 0x44, 0x5d, 0xdf, 0xbd, 0xed, 0xf9, 0xd5, 0xe0, 0x6e, 0x34, 0x5b,",
          "2686:  0xca, 0x63, 0xfa, 0x6e, 0x2b, 0x86, 0x72, 0x02, 0x6a, 0x01, 0x68, 0x4a, 0xeb, 0xdf, 0x71, 0x7a,",
          "2687:  0x28, 0x95, 0xf3, 0xee, 0x38, 0x3d, 0x98, 0x1e, 0x20, 0x96, 0x7c, 0xdc, 0x82, 0xa9, 0xc8, 0xab,",
          "2688:  0xfb, 0x4e, 0xdc, 0x09, 0xe9, 0x35, 0xda, 0x8d, 0x66, 0x81, 0x2b, 0x72, 0x75, 0xc8, 0x56, 0x31,",
          "2689:  0x58, 0x56, 0x9e, 0x94, 0x3a, 0x4e, 0x99, 0xd0, 0x08, 0xd3, 0x72, 0xfb, 0x4d, 0x34, 0x3d, 0xac,",
          "2690:  0x27, 0xf2, 0x9d, 0x68, 0x7a, 0x50, 0x0f, 0x14, 0x69, 0xff, 0x79, 0x01, 0x4e, 0x67, 0xd7, 0x20,",
          "2691:  0xf2, 0x3b, 0x16, 0x9c, 0xba, 0x73, 0x37, 0xde, 0x09, 0xf6, 0xa8, 0x1f, 0x55, 0xba, 0xcc, 0x52,",
          "2692:  0x70, 0xeb, 0x3b, 0x71, 0xd1, 0xcd, 0x77, 0xb5, 0x5b, 0xb8, 0x9a, 0x96, 0xb2, 0xea, 0xc7, 0x61,",
          "2693:  0xb7, 0xf2, 0x94, 0xac, 0xcf, 0xa9, 0xab, 0xb7, 0x77, 0x4c, 0x2c, 0x66, 0x95, 0x9a, 0xfb, 0x84,",
          "2694:  0x05, 0x67, 0xfb, 0xb1, 0x20, 0xa7, 0xa1, 0xb8, 0x47, 0xbb, 0xc2, 0xc1, 0x41, 0xf6, 0x93, 0xfc,",
          "2695:  0x2c, 0x8c, 0xee, 0x3b, 0xcd, 0x0e, 0x95, 0x8e, 0xc2, 0xe5, 0xe1, 0x2a, 0xa2, 0x34, 0x43, 0xc1,",
          "2696:  0xf5, 0xed, 0x85, 0x17, 0x2c, 0xfb, 0xaf, 0x8a, 0x30, 0x61, 0x2c, 0x15, 0x8f, 0xc1, 0xf9, 0x09,",
          "2697:  0x52, 0xce, 0xcf, 0xf5, 0xdc, 0x56, 0xb9, 0x81, 0xde, 0xcf, 0xdd, 0x8c, 0xf7, 0xb3, 0x99, 0x9f,",
          "2698:  0xc8, 0x07, 0xba, 0x3f, 0x24, 0x86, 0x72, 0xd0, 0x66, 0xce, 0x2d, 0x5b, 0x45, 0x47, 0xf2, 0xe8,",
          "2699:  0xc2, 0xcd, 0x84, 0x5d, 0x65, 0xea, 0xde, 0xe1, 0x7c, 0x59, 0x7d, 0xa2, 0x16, 0x64, 0x7f, 0xdd,",
          "2700:  0x82, 0xb3, 0x86, 0x8e, 0xcb, 0x81, 0x5f, 0xf5, 0x78, 0xd7, 0x5e, 0x80, 0x91, 0xb8, 0xdb, 0x4e,",
          "2701:  0x3c, 0x68, 0xd5, 0x52, 0x3b, 0xdd, 0x36, 0x45, 0x8e, 0x61, 0x3e, 0x73, 0x8b, 0x46, 0x91, 0x53,",
          "2702:  0xa7, 0x59, 0x9f, 0xf9, 0xba, 0x00, 0x63, 0x82, 0x27, 0x21, 0x90, 0xa6, 0x13, 0xc5, 0x3b, 0xa1,",
          "2703:  0xe3, 0x47, 0x9c, 0xfd, 0x8e, 0xd7, 0xa2, 0xb2, 0x81, 0x7f, 0xe4, 0x78, 0x23, 0x86, 0x95, 0xa8,",
          "2704:  0x9c, 0xbb, 0x77, 0x38, 0x4f, 0xd6, 0x7b, 0x38, 0x61, 0x1f, 0xee, 0xf6, 0xe7, 0x2c, 0x38, 0xd7,",
          "2705:  0xdf, 0xad, 0x21, 0x6f, 0x84, 0xb1, 0x88, 0x86, 0xfb, 0x34, 0x94, 0xb5, 0xd3, 0x5d, 0xc2, 0xa1,",
          "2706:  0x28, 0xb1, 0x64, 0x11, 0xca, 0xca, 0xe4, 0xca, 0x3a, 0xce, 0x48, 0xd2, 0xb2, 0xb6, 0xd3, 0x9a,",
          "2707:  0x86, 0x35, 0x1a, 0xfb, 0x90, 0x4e, 0x90, 0x6a, 0x34, 0xbe, 0xdf, 0xe0, 0x18, 0xfb, 0x1f, 0x2c,",
          "2708:  0x38, 0x65, 0x68, 0xf5, 0x18, 0xbc, 0x5c, 0x3f, 0xed, 0xe5, 0xae, 0xe5, 0x36, 0x9e, 0x07, 0xb8,",
          "2709:  0xb9, 0x5f, 0x1e, 0x83, 0x19, 0x73, 0xd4, 0x73, 0x73, 0xcc, 0x37, 0x58, 0xb4, 0x1d, 0xdc, 0xc4,",
          "2710:  0x75, 0xd9, 0xe6, 0x7a, 0x83, 0x25, 0xc0, 0x98, 0xe0, 0x59, 0x23, 0xb6, 0x9d, 0xb8, 0x21, 0x1b,",
          "2711:  0x5c, 0x35, 0xe2, 0x96, 0x13, 0x37, 0x90, 0x63, 0xc8, 0x4b, 0x30, 0x1d, 0x3b, 0x61, 0x9d, 0xc6,",
          "2712:  0x48, 0xf7, 0xbd, 0x28, 0x99, 0x2f, 0xe5, 0xca, 0x39, 0x49, 0x3b, 0xbd, 0x93, 0xc2, 0x62, 0x86,",
          "2713:  0x9a, 0xbc, 0x02, 0x23, 0x0d, 0xda, 0x6c, 0x49, 0xbf, 0x66, 0x3b, 0xbf, 0x19, 0xce, 0xeb, 0x7a,",
          "2714:  0x85, 0x36, 0x5b, 0x95, 0x12, 0x53, 0x99, 0xfd, 0x42, 0x2e, 0x8a, 0xfc, 0xa2, 0x05, 0xe5, 0xbd,",
          "2715:  0x4e, 0x14, 0x07, 0x2d, 0xef, 0xfd, 0x74, 0xb6, 0xc4, 0x05, 0xff, 0x4c, 0xce, 0x82, 0xaf, 0x25,",
          "2716:  0xfc, 0xc5, 0x7c, 0x57, 0x9f, 0xa8, 0x25, 0x93, 0x0f, 0xc2, 0xf8, 0x5e, 0x14, 0xf8, 0x3e, 0x65,",
          "2717:  0x9e, 0x0a, 0x53, 0xe2, 0x56, 0xde, 0x4a, 0x08, 0xee, 0x95, 0x09, 0xd6, 0xb7, 0xf2, 0x03, 0x13,",
          "2718:  0x99, 0xbc, 0x19, 0xaa, 0x5e, 0x48, 0xdd, 0x38, 0x08, 0xbb, 0xb3, 0xf0, 0x48, 0x9a, 0x61, 0x25,",
          "2719:  0xe1, 0x2f, 0x9a, 0x41, 0x7d, 0xa2, 0x96, 0x4c, 0xba, 0x30, 0xd6, 0x6e, 0x76, 0xea, 0x9e, 0x3f,",
          "2720:  0x3b, 0xc1, 0x75, 0xb8, 0x99, 0xb3, 0x0e, 0x5b, 0x9c, 0x79, 0x05, 0x98, 0x51, 0x11, 0xbf, 0x51,",
          "2721:  0x0a, 0x24, 0xcf, 0xc0, 0xa8, 0xdb, 0x70, 0xc2, 0x78, 0x76, 0x92, 0x8f, 0x59, 0x35, 0x89, 0x96,",
          "2722:  0x19, 0x10, 0x05, 0xce, 0xfe, 0x8d, 0x02, 0xcc, 0x0d, 0xae, 0x98, 0x98, 0x4d, 0x6e, 0x27, 0x8c,",
          "2723:  0x84, 0x7d, 0x2e, 0x99, 0xb3, 0x89, 0x83, 0x31, 0xc1, 0x93, 0x8f, 0x5a, 0x30, 0x7e, 0x47, 0xf6,",
          "2724:  0x78, 0xe1, 0x91, 0xf4, 0xf8, 0x55, 0xd9, 0xe3, 0x4a, 0x87, 0xab, 0x49, 0xaf, 0x4b, 0xb9, 0x4c,",
          "2725:  0x5d, 0x7a, 0xe0, 0x36, 0x3b, 0xd5, 0xc4, 0x32, 0x2a, 0xd2, 0x55, 0x01, 0xc6, 0x04, 0xcf, 0x48,",
          "2726:  0x3d, 0x5f, 0x90, 0x8e, 0xa4, 0x49, 0xd7, 0x7c, 0x49, 0x2a, 0xf1, 0xf6, 0x77, 0x8a, 0xf0, 0x64,",
          "2727:  0xdf, 0xc9, 0x47, 0x16, 0x00, 0xb8, 0xcf, 0x72, 0xc9, 0x63, 0x1b, 0x4c, 0xb1, 0xab, 0x9e, 0x66,",
          "2728:  0x2e, 0xc6, 0x2d, 0x05, 0x45, 0x83, 0x82, 0x7c, 0x18, 0xa0, 0xed, 0x84, 0x4e, 0x8b, 0xc6, 0x34,",
          "2729:  0x4c, 0xec, 0xe4, 0xb5, 0xe1, 0x5a, 0x89, 0xe9, 0xb1, 0x95, 0xf0, 0xd4, 0x3e, 0x8e, 0x02, 0x45,",
          "2730:  0x68, 0x88, 0x64, 0x7b, 0xe8, 0x90, 0x36, 0xa9, 0x13, 0xd1, 0x0d, 0xbd, 0x7c, 0xa8, 0x3d, 0x34,",
          "2731:  0x6a, 0x14, 0x9a, 0x74, 0x6c, 0x1d, 0xe3, 0xb5, 0x88, 0x64, 0x5b, 0xa9, 0x75, 0x8c, 0xd7, 0x33,",
          "2732:  0x42, 0x89, 0x25, 0xaf, 0x59, 0x30, 0x5d, 0xf3, 0x9a, 0x54, 0x4b, 0x97, 0x3b, 0xde, 0xcd, 0xe1,",
          "2733:  0x2b, 0x79, 0xc9, 0xe4, 0xab, 0x2d, 0x70, 0x0a, 0x1c, 0x61, 0x46, 0x3c, 0xeb, 0xe6, 0x7d, 0x1a,",
          "2734:  0x72, 0xd3, 0x3d, 0x96, 0xee, 0xe6, 0x5b, 0x02, 0x8c, 0x09, 0xde, 0xfe, 0x42, 0x01, 0x66, 0x07,",
          "2735:  0x8d, 0x39, 0x12, 0xb1, 0x91, 0x15, 0xdf, 0x72, 0xc2, 0x48, 0xba, 0xef, 0x43, 0xee, 0x02, 0x25,",
          "2736:  0xdf, 0x5b, 0x4e, 0x68, 0x8e, 0x51, 0x2e, 0x00, 0x13, 0x49, 0xe4, 0x0e, 0x8c, 0xc4, 0x4d, 0x27,",
          "2737:  0xa7, 0xb0, 0x91, 0x21, 0x51, 0x3b, 0x59, 0xeb, 0x4b, 0x11, 0x72, 0x19, 0xe4, 0x69, 0x18, 0x69,",
          "2738:  0x7a, 0xbb, 0xcc, 0x19, 0x65, 0x83, 0x98, 0xaf, 0x2a, 0xeb, 0xde, 0x6e, 0x84, 0x1c, 0x6a, 0x7f,",
          "2739:  0xcd, 0xea, 0xd3, 0x36, 0xd2, 0xe8, 0xb2, 0x41, 0x45, 0xfd, 0x7d, 0x2f, 0x0c, 0xfc, 0x16, 0xf5,",
          "2740:  0xe3, 0x6c, 0x28, 0x74, 0x55, 0xa3, 0xd0, 0xa4, 0x23, 0xbf, 0x60, 0xf5, 0x99, 0x0d, 0x43, 0xc6,",
          "2741:  0x00, 0xa5, 0x4a, 0xc7, 0x9e, 0x10, 0xf6, 0x7f, 0x8c, 0xf5, 0xb1, 0x7f, 0x6a, 0x41, 0x23, 0x17,",
          "2742:  0x01, 0x98, 0x37, 0xb5, 0x15, 0xd2, 0x9a, 0x77, 0x20, 0x6b, 0xa6, 0x58, 0x6e, 0x28, 0x0c, 0x1a,",
          "2743:  0x54, 0x49, 0x99, 0xed, 0x4e, 0x8d, 0x95, 0x29, 0xf4, 0x96, 0x11, 0x18, 0x34, 0xa8, 0xc8, 0xf3,",
          "2744:  0x30, 0xe6, 0xb5, 0x9c, 0x3a, 0x4d, 0xda, 0xff, 0x69, 0x36, 0xb9, 0xd6, 0x38, 0xe4, 0xfe, 0xe1,",
          "2745:  0xfc, 0xb4, 0x52, 0x88, 0x83, 0x50, 0xd2, 0x92, 0xdf, 0xb6, 0x60, 0xd2, 0x0d, 0x5a, 0xad, 0xc0,",
          "2746:  0x5f, 0x77, 0x76, 0x69, 0x33, 0x09, 0x71, 0xdd, 0x79, 0x54, 0xcb, 0xfd, 0xc2, 0xb2, 0x21, 0x4c,",
          "2747:  0x6c, 0x30, 0x55, 0xe0, 0xce, 0x44, 0x61, 0x4a, 0x2b, 0x73, 0x0e, 0x8e, 0x3e, 0x78, 0x0e, 0x92,",
          "2748:  0x3f, 0xb2, 0x60, 0x46, 0x94, 0x5d, 0xf2, 0xfd, 0x20, 0x96, 0x91, 0x47, 0x11, 0xa3, 0x0a, 0x1e,",
          "2749:  0x71, 0xb5, 0x0c, 0x89, 0xa2, 0x6e, 0xaf, 0x93, 0x6a, 0xce, 0xf4, 0xe0, 0xb1, 0x57, 0x49, 0x72,",
          "2750:  0x19, 0x66, 0x6a, 0x41, 0xe8, 0x52, 0xb3, 0x21, 0xb8, 0xe3, 0x57, 0xd2, 0x8c, 0x2e, 0x65, 0x09,",
          "2751:  0xb0, 0xb7, 0x0c, 0xb9, 0x05, 0xe7, 0x0c, 0xa0, 0xd9, 0x0e, 0x25, 0xce, 0xed, 0xbc, 0xe4, 0x76,",
          "2752:  0xee, 0x52, 0x5f, 0x2a, 0x1c, 0x50, 0x7a, 0xee, 0x9d, 0x30, 0xd3, 0xd3, 0x7f, 0x7d, 0x76, 0xf7,",
          "2753:  0x67, 0xcd, 0xdd, 0x7d, 0xd9, 0xd8, 0x94, 0xcf, 0xad, 0xc0, 0xb9, 0xfe, 0x2d, 0x75, 0x12, 0x2e,",
          "2754:  0xf6, 0xaf, 0x59, 0xf0, 0xd4, 0x00, 0x37, 0x46, 0x6d, 0x6b, 0xac, 0x41, 0xdb, 0x1a, 0xe2, 0x40,",
          "2755:  0x91, 0xfa, 0xfb, 0xd2, 0x58, 0x5c, 0x1a, 0x6e, 0x44, 0xac, 0xfa, 0xfb, 0xa2, 0xa3, 0xc7, 0xef,",
          "2756:  0x1d, 0xce, 0x17, 0x57, 0xfd, 0x7d, 0x64, 0xbc, 0xed, 0x5f, 0x19, 0x4b, 0xed, 0x9c, 0xb6, 0x93,",
          "2757:  0xcd, 0x3a, 0x57, 0x54, 0xee, 0x9b, 0x36, 0x73, 0x1e, 0x8b, 0xc6, 0xce, 0x50, 0x84, 0xe0, 0xa5,",
          "2758:  0x38, 0xf2, 0x09, 0x8b, 0x47, 0xbd, 0x93, 0x1d, 0xa5, 0xf4, 0xac, 0x1e, 0x4d, 0x10, 0xde, 0x8c,",
          "2759:  0xa5, 0x27, 0x40, 0x34, 0xa5, 0xb3, 0x99, 0xdc, 0x16, 0x41, 0xa7, 0xac, 0x7f, 0x95, 0xc4, 0xc5,",
          "2760:  0x13, 0x3c, 0x39, 0x00, 0x88, 0xba, 0xbe, 0xbb, 0x15, 0x34, 0x3d, 0xb7, 0x2b, 0xc3, 0x0c, 0x39,",
          "2761:  0x44, 0x4e, 0x05, 0x3f, 0xe1, 0x64, 0xe9, 0x6f, 0x34, 0x64, 0x91, 0x2f, 0x5a, 0x30, 0xe3, 0xd5,",
          "2762:  0xfd, 0x20, 0xa4, 0x2b, 0x5e, 0xad, 0x46, 0x43, 0xea, 0xbb, 0x34, 0xf1, 0x43, 0x6e, 0x0f, 0xa7,",
          "2763:  0x41, 0x12, 0xf4, 0x5b, 0xcb, 0xb2, 0xd7, 0x53, 0xbc, 0x07, 0x85, 0xbd, 0xca, 0x90, 0x2a, 0x8c,",
          "2764:  0x78, 0x7e, 0x2d, 0x90, 0x86, 0xad, 0x32, 0x9c, 0x52, 0x6b, 0x7e, 0x2d, 0xd0, 0x73, 0x85, 0x7d,",
          "2765:  0x21, 0xe7, 0x4e, 0xd6, 0xe1, 0x6c, 0x28, 0x77, 0xa2, 0x57, 0xbc, 0x88, 0xf9, 0xf3, 0xeb, 0x5e,",
          "2766:  0xcb, 0x8b, 0xb9, 0x51, 0x2a, 0x56, 0x66, 0xef, 0x1d, 0xce, 0x9f, 0xc5, 0x3e, 0x78, 0xec, 0x5b,",
          "2767:  0xca, 0x7e, 0xb5, 0x9c, 0xde, 0x6e, 0x8b, 0x60, 0xd2, 0x07, 0xa1, 0x1c, 0xaa, 0xf0, 0xbd, 0xf0,",
          "2768:  0x8c, 0xd6, 0xf3, 0x69, 0x63, 0x19, 0xc5, 0x52, 0x71, 0x10, 0x1d, 0xa8, 0xd7, 0x12, 0x99, 0x87,",
          "2769:  0xc4, 0x7a, 0x5e, 0x4e, 0x8b, 0x1c, 0xc6, 0x97, 0x94, 0xaa, 0x03, 0x76, 0x5d, 0xdf, 0x45, 0x2e,",
          "2770:  0x83, 0x84, 0x30, 0xd6, 0xa0, 0x4e, 0x33, 0x6e, 0xc8, 0x78, 0xd2, 0xd5, 0x61, 0x7d, 0x5a, 0xc6,",
          "2771:  0x2b, 0x1b, 0xab, 0x13, 0x50, 0x94, 0x92, 0xc8, 0x01, 0x8c, 0x37, 0x44, 0x27, 0xc8, 0xb5, 0xfd,",
          "2772:  0xfa, 0xb0, 0x8d, 0x9b, 0xea, 0x59, 0x3d, 0x7f, 0x25, 0x00, 0x13, 0x71, 0xe4, 0x97, 0x2c, 0x00,",
          "2773:  0x37, 0x09, 0xd2, 0x25, 0xd3, 0x07, 0x73, 0xb3, 0x3b, 0x2a, 0xfe, 0xa7, 0x5d, 0x23, 0x05, 0x8a,",
          "2774:  0xd0, 0x90, 0x4c, 0x5e, 0x86, 0xc9, 0x90, 0xba, 0x81, 0xef, 0x7a, 0x4d, 0x5a, 0x5d, 0x8a, 0xb9,",
          "2775:  0x1b, 0x7f, 0xb2, 0x60, 0xde, 0x69, 0xe6, 0x9f, 0xa0, 0xc1, 0x03, 0x53, 0x1c, 0xc9, 0xab, 0x16,",
          "2776:  0x4c, 0xab, 0x40, 0x25, 0xeb, 0x10, 0x2a, 0x03, 0x36, 0xeb, 0x39, 0x85, 0x45, 0x39, 0xcf, 0x0a,",
          "2777:  0x61, 0xdb, 0x95, 0x34, 0x0c, 0x33, 0x72, 0xc9, 0xbb, 0x01, 0x82, 0x5d, 0x1e, 0x14, 0x64, 0x55,",
          "2778:  0x2d, 0x9d, 0xb8, 0xaa, 0xd3, 0x22, 0xbe, 0x9d, 0x70, 0x40, 0x83, 0x1b, 0xb9, 0x06, 0x20, 0xa6,",
          "2779:  0xcd, 0x4e, 0xb7, 0x4d, 0x79, 0x50, 0xa6, 0x5c, 0x79, 0x73, 0xd2, 0xf8, 0xdb, 0x0a, 0x73, 0xff,",
          "2780:  0x70, 0xbe, 0x77, 0xb7, 0xcb, 0xa3, 0xb1, 0x46, 0x71, 0xf2, 0x01, 0x18, 0x8f, 0x3a, 0xad, 0x96,",
          "2781:  0xa3, 0x82, 0x2b, 0x5b, 0xf9, 0xad, 0x88, 0x82, 0xaf, 0x1e, 0x9b, 0x12, 0x80, 0x89, 0x44, 0xdb,",
          "2782:  0x07, 0xd2, 0x4b, 0x4f, 0x9e, 0x87, 0x49, 0x7a, 0x10, 0xd3, 0xd0, 0x77, 0x9a, 0x37, 0x71, 0x3d,",
          "2783:  0xd9, 0x8e, 0xf3, 0xce, 0x5f, 0x35, 0xe0, 0x98, 0xa2, 0x22, 0xb6, 0xf2, 0xbc, 0x0b, 0x9c, 0x1e,",
          "2784:  0xb4, 0xe7, 0x9d, 0xf8, 0xd9, 0xf6, 0xff, 0x14, 0x52, 0x1e, 0xc1, 0x4e, 0x48, 0x29, 0x09, 0x60,",
          "2785:  0xd4, 0x0f, 0xaa, 0xca, 0xe8, 0x5d, 0xcd, 0xc7, 0xe8, 0x6d, 0x04, 0x55, 0xe3, 0x5c, 0x99, 0x7d,",
          "2786:  0x45, 0x28, 0xe4, 0xf0, 0x83, 0xb7, 0xe4, 0x84, 0x92, 0x23, 0xa4, 0x13, 0x94, 0xa7, 0x64, 0x75,",
          "2787:  0xf0, 0xb6, 0x69, 0x0a, 0xc2, 0xb4, 0x5c, 0xb2, 0x07, 0xa3, 0x8d, 0x20, 0x8a, 0xc5, 0x5e, 0x65,",
          "2788:  0x68, 0x2f, 0xec, 0x4a, 0x10, 0xc5, 0x7c, 0x09, 0x53, 0xd5, 0x66, 0x90, 0x08, 0x85, 0x0c, 0xfb,",
          "2789:  0xbb, 0x56, 0x2a, 0xf8, 0x72, 0xdb, 0x89, 0xdd, 0xc6, 0xea, 0x3e, 0xdb, 0x3f, 0x5e, 0x4b, 0x1d,",
          "2790:  0x1c, 0xfc, 0x84, 0x79, 0x70, 0x70, 0xff, 0x70, 0xfe, 0x4d, 0x83, 0x12, 0x7d, 0xee, 0x32, 0x0e,",
          "2791:  0x0b, 0x9c, 0x85, 0x71, 0xc6, 0xf0, 0x11, 0x0b, 0x26, 0x0c, 0xf5, 0xe4, 0x82, 0x92, 0x63, 0x0c,",
          "2792:  0x5b, 0x39, 0x57, 0x06, 0x10, 0x4d, 0x91, 0xf6, 0x67, 0x2d, 0x18, 0xaf, 0x38, 0xee, 0x5e, 0x50,",
          "2793:  0xab, 0x91, 0xb7, 0x40, 0xa9, 0xda, 0x91, 0x47, 0x34, 0xa2, 0x7e, 0x2a, 0xf2, 0xbe, 0x22, 0xe1,",
          "2794:  0xa8, 0x28, 0xd8, 0x18, 0xae, 0x39, 0x6e, 0x1c, 0x84, 0x5c, 0xed, 0xa2, 0x18, 0xc3, 0x97, 0x38,",
          "2795:  0x04, 0x25, 0x86, 0x6d, 0xd2, 0x5b, 0xce, 0x41, 0x52, 0x38, 0x1b, 0xf9, 0xb9, 0xae, 0x51, 0x68,",
          "2796:  0xd2, 0xd9, 0x7f, 0x56, 0x86, 0x71, 0x79, 0x16, 0x7a, 0xec, 0xd3, 0x8c, 0xc4, 0x8b, 0x2f, 0x0c,",
          "2797:  0xf4, 0xe2, 0x23, 0x18, 0x73, 0x79, 0x1a, 0x95, 0x5c, 0x4a, 0x87, 0x8c, 0x81, 0x49, 0x05, 0x45,",
          "2798:  0x66, 0x96, 0x56, 0x4b, 0x7c, 0xa3, 0x14, 0x45, 0x3e, 0x63, 0xc1, 0x29, 0x37, 0xf0, 0x7d, 0xea,",
          "2799:  0x6a, 0x3b, 0x3f, 0x92, 0xc7, 0x69, 0xdf, 0x72, 0x9a, 0xa9, 0x3e, 0x74, 0xcd, 0x20, 0x30, 0x2b,",
          "2800:  0x9e, 0xbc, 0x08, 0x53, 0xa2, 0xcd, 0x6e, 0xa5, 0xf6, 0xc7, 0xfa, 0xfc, 0xdb, 0x44, 0x62, 0x9a,",
          "2801:  0x96, 0x2c, 0x88, 0x38, 0x03, 0x3f, 0x10, 0x12, 0x7b, 0x64, 0x19, 0x7c, 0x54, 0x27, 0x46, 0x11,",
          "2802:  0x1a, 0x14, 0x24, 0x04, 0x12, 0xd2, 0x5a, 0x48, 0xa3, 0x06, 0xd2, 0x57, 0x3a, 0x34, 0x8a, 0xf9,",
          "2803:  0x1a, 0x33, 0xfe, 0x70, 0x67, 0x63, 0xd8, 0xc3, 0x09, 0xfb, 0x70, 0x27, 0x7b, 0xd2, 0xd1, 0x2d,",
          "2804:  0xe5, 0x31, 0x9d, 0x64, 0x37, 0x0f, 0xf4, 0x77, 0xe7, 0x61, 0x34, 0x6a, 0x38, 0x61, 0x95, 0xaf,",
          "2805:  0x6d, 0xc5, 0x4a, 0x99, 0xd9, 0x92, 0x6d, 0x06, 0x40, 0x01, 0x27, 0x2b, 0x70, 0x3a, 0x73, 0x7a,",
          "2806:  0x1f, 0xf1, 0xd5, 0xab, 0x54, 0x99, 0x95, 0xec, 0x4e, 0x67, 0xce, 0xfd, 0x23, 0xec, 0x29, 0x61,",
          "2807:  0x6e, 0x82, 0x26, 0x8e, 0xd8, 0x04, 0x75, 0x61, 0xac, 0x29, 0x02, 0x01, 0x93, 0xdc, 0x54, 0xde,",
          "2808:  0xc8, 0xa5, 0x01, 0x16, 0xcc, 0x00, 0x8c, 0x1a, 0xed, 0x32, 0xa0, 0x20, 0x05, 0x92, 0x4f, 0x31,",
          "2809:  0x83, 0x66, 0xc4, 0x0e, 0xa6, 0xb8, 0x02, 0xb7, 0xf2, 0x51, 0xa0, 0x27, 0x54, 0xa2, 0xad, 0x9b,",
          "2810:  0x11, 0x88, 0x30, 0xe5, 0xcf, 0xfd, 0x24, 0x4c, 0x3c, 0x6c, 0xdc, 0xe1, 0x25, 0x38, 0x3d, 0x54,",
          "2811:  0xc4, 0xe1, 0x7b, 0x16, 0x24, 0xfd, 0xba, 0xec, 0xb8, 0x0d, 0xca, 0x86, 0x0c, 0x79, 0x09, 0xa6,",
          "2812:  0xd5, 0x36, 0x62, 0x39, 0xe8, 0xc8, 0xb8, 0x65, 0x51, 0x07, 0x96, 0x31, 0x85, 0xc5, 0x0c, 0x35,",
          "2813:  0x59, 0x84, 0x32, 0x6b, 0x27, 0x51, 0x54, 0x98, 0x5d, 0xb5, 0x55, 0x59, 0xda, 0x5a, 0x93, 0xa5,",
          "2814:  0x34, 0x0d, 0x09, 0x60, 0xa6, 0xe9, 0x44, 0x31, 0xd7, 0x80, 0xed, 0x2a, 0x1e, 0xf2, 0x64, 0x9a,",
          "2815:  0x27, 0x2f, 0xad, 0x67, 0x19, 0x61, 0x2f, 0x6f, 0xfb, 0xeb, 0x23, 0x30, 0x95, 0xb2, 0x8c, 0x6c,",
          "2816:  0x55, 0xe9, 0x44, 0xcc, 0xf5, 0x51, 0x21, 0x16, 0xb5, 0xaa, 0xdc, 0x94, 0x70, 0x54, 0x14, 0x8c,",
          "2817:  0xba, 0xed, 0x44, 0xd1, 0xdd, 0x20, 0xac, 0x4a, 0x53, 0xae, 0xa8, 0xb7, 0x24, 0x1c, 0x15, 0x05,",
          "2818:  0x5b, 0x5f, 0x76, 0xa9, 0x13, 0xd2, 0x90, 0x27, 0x73, 0x64, 0xd7, 0x97, 0x8a, 0x46, 0xa1, 0x49,",
          "2819:  0xc7, 0x8d, 0x72, 0xdc, 0x8c, 0x96, 0x9b, 0x1e, 0xf5, 0x63, 0xa1, 0x66, 0x3e, 0x46, 0x79, 0x67,",
          "2820:  0x7d, 0xdb, 0x64, 0xaa, 0x8d, 0x72, 0x06, 0x81, 0x59, 0xf1, 0xe4, 0x63, 0x16, 0x4c, 0x39, 0x77,",
          "2821:  0x23, 0x9d, 0xeb, 0xcb, 0xad, 0xf2, 0xd0, 0x8b, 0x54, 0x2a, 0x7d, 0xb8, 0x32, 0xc3, 0xcc, 0x7b,",
          "2822:  0x0a, 0x84, 0x69, 0xa1, 0xe4, 0xf3, 0x16, 0x10, 0x7a, 0x40, 0xdd, 0xad, 0x30, 0xd8, 0xf7, 0xaa,",
          "2823:  0x49, 0x1f, 0xca, 0xed, 0xcf, 0x90, 0xde, 0xf6, 0x6a, 0x0f, 0x5f, 0x61, 0xd5, 0x7b, 0xe1, 0xd8,",
          "2824:  0x47, 0x07, 0xfb, 0xef, 0x8a, 0x30, 0x61, 0x18, 0xe3, 0xbe, 0x2b, 0xab, 0xf5, 0x03, 0xb6, 0xb2,",
          "2825:  0x16, 0x4e, 0xb0, 0xb2, 0x7e, 0x18, 0xca, 0x6e, 0x62, 0x28, 0xf2, 0xc9, 0x4d, 0xce, 0x9a, 0x1f,",
          "2826:  0x6d, 0x2b, 0x14, 0x08, 0xb5, 0x4c, 0x72, 0x19, 0x66, 0x0c, 0x36, 0xd2, 0xc8, 0x8c, 0x70, 0x23,",
          "2827:  0xa3, 0x02, 0x4d, 0x4b, 0x59, 0x02, 0xec, 0x2d, 0x43, 0x9e, 0x63, 0x5e, 0xad, 0x27, 0xeb, 0x25,",
          "2828:  0x76, 0xf1, 0x32, 0xef, 0x77, 0x69, 0x6b, 0x2d, 0x01, 0xa3, 0x49, 0x63, 0x7f, 0xdd, 0x52, 0x9d,",
          "2829:  0xfb, 0x18, 0x92, 0x46, 0xee, 0xa4, 0x93, 0x46, 0x56, 0x73, 0x69, 0xe6, 0x01, 0x09, 0x23, 0x1b,",
          "2830:  0x30, 0xbe, 0x1c, 0xb4, 0x5a, 0x8e, 0x5f, 0x25, 0x6f, 0x80, 0x71, 0x57, 0xfc, 0x94, 0xdb, 0x44,",
          "2831:  0x9e, 0x45, 0x20, 0xb1, 0x98, 0xe0, 0xc8, 0xd3, 0x30, 0xe2, 0x84, 0xf5, 0x64, 0x6b, 0xc8, 0x0f,",
          "2832:  0xc5, 0x96, 0xc2, 0x7a, 0x84, 0x1c, 0x6a, 0x7f, 0xae, 0x00, 0xb0, 0x1c, 0xb4, 0xda, 0x4e, 0x48,",
          "2833:  0xab, 0x3b, 0xc1, 0xff, 0xc5, 0x88, 0xc5, 0x8e, 0xe1, 0x93, 0x16, 0x10, 0xd6, 0x2a, 0x81, 0x4f,",
          "2834:  0x7d, 0x7d, 0x10, 0xc7, 0xd6, 0x4b, 0x37, 0x81, 0xca, 0xc5, 0x47, 0xcf, 0x81, 0x04, 0x81, 0x9a,",
          "2835:  0xe6, 0x18, 0xbb, 0x88, 0x67, 0x92, 0x15, 0xbf, 0x98, 0x4e, 0x70, 0xe0, 0x87, 0xd2, 0xd2, 0x01,",
          "2836:  0xb0, 0xbf, 0x5c, 0x80, 0x73, 0xc2, 0x6c, 0x5d, 0x77, 0x7c, 0xa7, 0x4e, 0x5b, 0x4c, 0xab, 0xe3,",
          "2837:  0x9e, 0x36, 0xb8, 0xcc, 0x7d, 0xf5, 0x92, 0x7c, 0x86, 0x61, 0x07, 0xa7, 0x18, 0x54, 0x62, 0x18,",
          "2838:  0xad, 0xf9, 0x5e, 0x8c, 0x9c, 0x39, 0x89, 0xa0, 0x94, 0xdc, 0x36, 0x91, 0xc6, 0x26, 0x27, 0x41,",
          "2839:  0x6a, 0xde, 0x5d, 0x96, 0xec, 0x51, 0x09, 0x62, 0x8b, 0x7b, 0x33, 0x70, 0xf7, 0x90, 0xb6, 0x03,",
          "2840:  0x6e, 0x58, 0x4a, 0xc6, 0x2c, 0x95, 0x70, 0x54, 0x14, 0xf6, 0x97, 0x2d, 0xc8, 0x9a, 0x5c, 0xbe,",
          "2841:  0x1b, 0x14, 0xf9, 0x8b, 0xd9, 0xdd, 0x60, 0x3a, 0xdd, 0xf0, 0x04, 0xd9, 0x7b, 0xef, 0x85, 0x09,",
          "2842:  0x27, 0x8e, 0x69, 0xab, 0x2d, 0xb6, 0x26, 0xc5, 0x87, 0x0b, 0x7f, 0x5d, 0x0f, 0xaa, 0x5e, 0xcd,",
          "2843:  0xe3, 0x5b, 0x12, 0x93, 0x9d, 0x7d, 0x03, 0x4a, 0xc9, 0x89, 0xcf, 0x31, 0xba, 0xfe, 0x99, 0x94,",
          "2844:  0x3b, 0x39, 0x60, 0x70, 0xdd, 0x2f, 0x40, 0x9f, 0x35, 0x93, 0x55, 0x59, 0x5b, 0x97, 0x54, 0x95,",
          "2845:  0x4f, 0x66, 0x61, 0xc8, 0x81, 0x38, 0xed, 0x12, 0x71, 0x96, 0x77, 0xe5, 0xbd, 0xe6, 0xeb, 0x03,",
          "2846:  0xb0, 0x09, 0xa9, 0x9f, 0x3a, 0x04, 0x23, 0x17, 0x01, 0xf4, 0xa2, 0x20, 0xb3, 0x3e, 0x54, 0xa4,",
          "2847:  0x56, 0xaf, 0x1d, 0x68, 0x50, 0x31, 0x17, 0xd0, 0xf3, 0xa3, 0xd8, 0x69, 0x36, 0xaf, 0x78, 0x7e,",
          "2848:  0x2c, 0xf7, 0xb2, 0xca, 0x60, 0xac, 0x69, 0x14, 0x9a, 0x74, 0x73, 0x6f, 0x33, 0xfa, 0xe5, 0x24,",
          "2849:  0x6e, 0xfd, 0x27, 0x0b, 0x30, 0x7d, 0xd9, 0xef, 0x6c, 0x5d, 0xde, 0xea, 0xec, 0x36, 0x3d, 0xf7,",
          "2850:  0x1a, 0xed, 0xb2, 0x4e, 0xdb, 0xa3, 0xdd, 0xb5, 0x15, 0xd9, 0xec, 0xaa, 0xd3, 0xae, 0x31, 0x20,",
          "2851:  0x0a, 0x1c, 0x53, 0xb3, 0xe6, 0xf9, 0x75, 0x1a, 0xb6, 0x43, 0x4f, 0xfa, 0xee, 0x86, 0x9a, 0x97,",
          "2852:  0x34, 0x0a, 0x4d, 0x3a, 0xc6, 0x3b, 0xb8, 0xeb, 0xd3, 0x30, 0x6b, 0x6d, 0x36, 0x19, 0x10, 0x05,",
          "2853:  0x8e, 0x11, 0xc5, 0x61, 0x27, 0x8a, 0x65, 0x8b, 0x29, 0xa2, 0x1d, 0x06, 0x44, 0x81, 0x63, 0xc3,",
          "2854:  0x23, 0xea, 0xec, 0xf2, 0x28, 0x6c, 0xe6, 0x3c, 0x7c, 0x5b, 0x80, 0x31, 0xc1, 0x33, 0xd2, 0x3d,",
          "2855:  0xda, 0x5d, 0x61, 0x6b, 0x6f, 0x26, 0x7d, 0xe5, 0x9a, 0x00, 0x63, 0x82, 0xb7, 0xff, 0xc9, 0x02,",
          "2856:  0x92, 0x6e, 0x8e, 0xc7, 0xb0, 0x7c, 0xbf, 0x92, 0x5e, 0xbe, 0x87, 0x0c, 0x98, 0xa7, 0xd5, 0x1f,",
          "2857:  0xb0, 0x8a, 0xff, 0xa6, 0x05, 0x93, 0xe6, 0xd9, 0x09, 0xa9, 0x67, 0x0c, 0xd1, 0x66, 0xda, 0x10,",
          "2858:  0xdd, 0x3f, 0x9c, 0xff, 0xa9, 0x7e, 0x57, 0x27, 0xeb, 0x5e, 0x1c, 0xb4, 0xa3, 0xb7, 0x52, 0xbf,",
          "2859:  0xee, 0xf9, 0x94, 0x47, 0x06, 0xc5, 0x99, 0x4b, 0xea, 0x60, 0x66, 0x39, 0xa8, 0xd2, 0x87, 0xb0,",
          "2860:  0x64, 0xf6, 0x6d, 0x98, 0xe9, 0xc9, 0x59, 0x3a, 0x86, 0xd1, 0x39, 0x32, 0x23, 0xd5, 0xfe, 0x94,",
          "2861:  0x05, 0x53, 0xa9, 0x94, 0xaf, 0x9c, 0x4c, 0x19, 0x9f, 0x15, 0x01, 0x3f, 0x76, 0x0b, 0x3d, 0x5f,",
          "2862:  0xc4, 0xe5, 0x4a, 0xc6, 0xac, 0xd0, 0x28, 0x34, 0xe9, 0xec, 0xcf, 0x16, 0xa0, 0x94, 0x44, 0x70,",
          "2863:  0x8f, 0xa1, 0xca, 0x27, 0x2c, 0x98, 0x52, 0x1b, 0x69, 0xee, 0x5e, 0xe7, 0x92, 0xf6, 0xc3, 0x34,",
          "2864:  0x50, 0x67, 0xb3, 0xcc, 0xbd, 0x56, 0x7e, 0x3e, 0x9a, 0xc2, 0x30, 0x2d, 0x9b, 0xdc, 0x02, 0x88,",
          "2865:  0xba, 0x51, 0x4c, 0x5b, 0x86, 0xa3, 0x6f, 0x1b, 0xb3, 0x63, 0xc1, 0x0d, 0x42, 0xca, 0xe6, 0xc2,",
          "2866:  0x46, 0x50, 0xa5, 0xdb, 0x8a, 0x52, 0x1b, 0x42, 0x0d, 0x43, 0x83, 0x93, 0xfd, 0x7b, 0x05, 0x38,",
          "2867:  0x9d, 0x55, 0x89, 0xbc, 0x07, 0x26, 0x13, 0xe9, 0xc6, 0x8d, 0xd1, 0x24, 0x6c, 0x3d, 0x89, 0x06,",
          "2868:  0xee, 0xfe, 0xe1, 0xfc, 0x7c, 0xef, 0x95, 0xd9, 0x05, 0x93, 0x04, 0x53, 0xcc, 0x44, 0x34, 0x43,",
          "2869:  0x86, 0xdd, 0x2a, 0xdd, 0xa5, 0x76, 0x5b, 0x86, 0x24, 0x8c, 0x68, 0x86, 0x89, 0xc5, 0x0c, 0x35,",
          "2870:  0xd9, 0x82, 0xb3, 0x06, 0x64, 0x83, 0x7a, 0xf5, 0xc6, 0x6e, 0x10, 0x8a, 0xab, 0x09, 0xc5, 0xca,",
          "2871:  0xd3, 0x92, 0xcb, 0x59, 0xec, 0x43, 0x83, 0x7d, 0x4b, 0x32, 0x07, 0xc3, 0x75, 0xda, 0x8e, 0xeb,",
          "2872:  0xc5, 0x5d, 0xb9, 0x73, 0x51, 0x76, 0x64, 0x59, 0xc2, 0x51, 0x51, 0xd8, 0xd7, 0x61, 0xe4, 0x98,",
          "2873:  0x23, 0xe8, 0x58, 0xeb, 0xf2, 0x0d, 0x28, 0x31, 0x76, 0xcc, 0x6e, 0xe4, 0xc5, 0x32, 0x80, 0x52,",
          "2874:  0x72, 0x53, 0x85, 0xd8, 0x50, 0xf4, 0x9c, 0x24, 0x60, 0xa4, 0xaa, 0xb5, 0x16, 0x45, 0x1d, 0xee,",
          "2875:  0x75, 0x30, 0x24, 0x79, 0x06, 0x8a, 0xf4, 0xa0, 0x9d, 0x8d, 0x0c, 0xad, 0x1e, 0xb4, 0xbd, 0x90,",
          "2876:  0x46, 0x8c, 0x88, 0x1e, 0xb4, 0xc9, 0x1c, 0x14, 0xbc, 0xaa, 0x5c, 0x50, 0x40, 0xd2, 0x14, 0xd6,",
          "2877:  0x56, 0xb0, 0xe0, 0x55, 0xed, 0x03, 0x28, 0xab, 0xab, 0x31, 0x64, 0x2f, 0xb1, 0xb3, 0x56, 0x1e,",
          "2878:  0x47, 0x2e, 0x09, 0xdf, 0x01, 0x16, 0xb6, 0x03, 0xa0, 0x93, 0x05, 0xf3, 0xb2, 0x2f, 0x17, 0x60,",
          "2879:  0xc4, 0x0d, 0x64, 0x5e, 0x6e, 0x49, 0xb3, 0xe1, 0x06, 0x96, 0x63, 0xec, 0xdb, 0x30, 0x7d, 0xcd,",
          "2880:  0x0f, 0xee, 0xfa, 0x6c, 0xe1, 0xbb, 0xe4, 0xd1, 0x66, 0x95, 0x31, 0xae, 0xb1, 0x1f, 0xd9, 0xe5,",
          "2881:  0x9c, 0x63, 0x51, 0xe0, 0xd4, 0xfd, 0x91, 0xc2, 0xa0, 0xfb, 0x23, 0xf6, 0x2f, 0x5b, 0x70, 0x3a,",
          "2882:  0x9b, 0x18, 0xf8, 0x7d, 0xdb, 0x8f, 0x7c, 0x84, 0x29, 0x93, 0x64, 0x9e, 0x6d, 0xb6, 0xc5, 0x19,",
          "2883:  0xf7, 0x0b, 0x30, 0xb9, 0xdb, 0xf1, 0x9a, 0x55, 0xf9, 0x2d, 0xf5, 0x51, 0xb9, 0x75, 0x15, 0x03,",
          "2884:  0x87, 0x29, 0x4a, 0xe6, 0xa7, 0xed, 0x7a, 0xbe, 0x13, 0x76, 0xb7, 0xf4, 0xba, 0xa1, 0xcc, 0x53,",
          "2885:  0x45, 0x61, 0xd0, 0xa0, 0xb2, 0xff, 0xa6, 0x08, 0xfa, 0x8e, 0x0e, 0xf1, 0x64, 0x0a, 0x85, 0x95,",
          "2886:  0x47, 0x90, 0x6b, 0xbb, 0xeb, 0xbb, 0xfa, 0x36, 0x50, 0x29, 0x93, 0x41, 0xf1, 0x71, 0x8b, 0x79,",
          "2887:  0x88, 0x5e, 0xec, 0x39, 0xdc, 0x58, 0xc8, 0x6d, 0xd5, 0x56, 0x4e, 0xa7, 0xec, 0x6b, 0x82, 0x73,",
          "2888:  0x10, 0x9a, 0x3e, 0xa7, 0x12, 0x86, 0xa6, 0x64, 0xf2, 0xb2, 0x3c, 0x97, 0x28, 0xe6, 0x96, 0x80,",
          "2889:  0x53, 0xca, 0x1c, 0x46, 0xb4, 0x61, 0x34, 0xa4, 0x71, 0x98, 0xa4, 0x3e, 0x5d, 0x1b, 0xf6, 0x94,",
          "2890:  0x36, 0x0e, 0xbb, 0xdb, 0x31, 0xdb, 0xba, 0xd5, 0x0d, 0xc7, 0x88, 0x83, 0x51, 0x08, 0xb2, 0x23,",
          "2891:  0x20, 0xbd, 0x6d, 0x71, 0xc2, 0x98, 0xef, 0x22, 0x94, 0x9d, 0x4e, 0x1c, 0xb4, 0x58, 0x33, 0xf1,",
          "2892:  0xee, 0x29, 0x19, 0x51, 0xed, 0x04, 0x81, 0x9a, 0xc6, 0x7e, 0x6d, 0x14, 0x32, 0x39, 0x0d, 0xe4,",
          "2893:  0xc0, 0xbc, 0x5f, 0x66, 0xe5, 0x7b, 0xbf, 0x4c, 0x29, 0xd3, 0xef, 0x8e, 0x19, 0xa9, 0xc3, 0x68,",
          "2894:  0xbb, 0xe1, 0x44, 0xc9, 0x1c, 0xbd, 0x91, 0x34, 0xd3, 0x16, 0x03, 0xde, 0x3f, 0x9c, 0xff, 0xe9,",
          "2895:  0xe3, 0xf9, 0x81, 0x6c, 0xac, 0x2e, 0x8a, 0x04, 0x4f, 0x2d, 0x9a, 0xf3, 0x40, 0xc1, 0xdf, 0xf4,",
          "2896:  0x04, 0x8b, 0x47, 0xec, 0x69, 0x3f, 0x6a, 0x89, 0x44, 0x38, 0xa4, 0x51, 0xa7, 0x19, 0xcb, 0xd1,",
          "2897:  0x70, 0x23, 0xc7, 0x59, 0x26, 0x18, 0xeb, 0x8c, 0x38, 0xf1, 0x8d, 0x86, 0x50, 0xf2, 0x1e, 0x28,",
          "2898:  0x47, 0xb1, 0x13, 0xc6, 0x0f, 0x99, 0x3f, 0xa3, 0x1a, 0x7d, 0x3b, 0x61, 0x82, 0x9a, 0x1f, 0x79,",
          "2899:  0x37, 0x40, 0xcd, 0xf3, 0xbd, 0xa8, 0xf1, 0x90, 0xc7, 0x89, 0x5c, 0xf1, 0x4b, 0x8a, 0x03, 0x1a,",
          "2900:  0xdc, 0x98, 0x75, 0xe3, 0x63, 0x5b, 0x04, 0x40, 0x4b, 0x7c, 0x2d, 0x55, 0xd6, 0x0d, 0x15, 0x06,",
          "2901:  0x0d, 0x2a, 0xfb, 0x43, 0x70, 0x26, 0x7b, 0xb7, 0x5b, 0x6e, 0x0d, 0xeb, 0x61, 0xd0, 0x69, 0x67,",
          "2902:  0xd7, 0x12, 0x7e, 0xf7, 0x17, 0x05, 0x8e, 0xd9, 0xf8, 0x3d, 0xcf, 0xaf, 0x66, 0x6d, 0xfc, 0x35,",
          "2903:  0xcf, 0xaf, 0x22, 0xc7, 0x1c, 0xe3, 0xe2, 0xdd, 0x9f, 0x58, 0x70, 0xe1, 0xa8, 0x2b, 0xe8, 0x6c,",
          "2904:  0xdb, 0x7f, 0xd7, 0x09, 0x7d, 0x79, 0xa9, 0x86, 0xdb, 0x8e, 0xdb, 0x4e, 0xe8, 0x23, 0x87, 0x92,",
          "2905:  0x2e, 0x8c, 0x89, 0x9c, 0x41, 0xe9, 0x1d, 0xdf, 0xc8, 0xf7, 0x42, 0x3c, 0xdb, 0x5b, 0xa9, 0x68,",
          "2906:  0x8d, 0xc8, 0x57, 0x44, 0x29, 0xd0, 0x7e, 0xcd, 0x02, 0xb2, 0xb9, 0x4f, 0xc3, 0xd0, 0xab, 0x1a,",
          "2907:  0x59, 0x8e, 0xe4, 0x79, 0x98, 0xbc, 0xb3, 0xbd, 0xb9, 0xb1, 0x15, 0x78, 0x3e, 0x4f, 0xd6, 0x37,",
          "2908:  0x72, 0x6b, 0xae, 0x1a, 0x70, 0x4c, 0x51, 0x91, 0x65, 0x98, 0xb9, 0xf3, 0x0a, 0x5b, 0x72, 0x56,",
          "2909:  0x0f, 0xda, 0x21, 0x8d, 0x22, 0xf5, 0x8c, 0x44, 0x59, 0x1c, 0x63, 0x5d, 0xbd, 0x91, 0x41, 0x62,",
          "2910:  0x2f, 0xbd, 0xfd, 0xa5, 0x02, 0x4c, 0x18, 0xaf, 0x2e, 0x1c, 0xc3, 0x1f, 0xc9, 0x3c, 0x14, 0x51,",
          "2911:  0x38, 0xe6, 0x43, 0x11, 0xcf, 0x42, 0xa9, 0x1d, 0x34, 0x3d, 0xd7, 0x53, 0x59, 0xf8, 0x93, 0xfc,",
          "2912:  0xac, 0x4b, 0xc2, 0x50, 0x61, 0xc9, 0x5d, 0x28, 0xab, 0xeb, 0xd3, 0x32, 0x2f, 0x2f, 0x2f, 0x8f,",
          "2913:  0x4c, 0xcd, 0x35, 0x7d, 0x2d, 0x5a, 0xcb, 0x22, 0x36, 0x8c, 0xf1, 0x81, 0x9a, 0x44, 0xf2, 0x79,",
          "2914:  0xa2, 0x07, 0x1f, 0xc1, 0x11, 0x4a, 0x8c, 0xfd, 0xaf, 0xa3, 0x50, 0x46, 0xda, 0x0e, 0x96, 0x43,",
          "2915:  0x5a, 0x8d, 0xc8, 0xeb, 0xa1, 0xd8, 0x09, 0x9b, 0xb2, 0xb1, 0x54, 0x98, 0xe7, 0x26, 0xae, 0x23,",
          "2916:  0x83, 0xa7, 0x56, 0x87, 0xc2, 0x89, 0x4e, 0x04, 0x8b, 0x47, 0x9e, 0x08, 0xbe, 0x08, 0x53, 0x51,",
          "2917:  0xd4, 0xd8, 0x0a, 0xbd, 0x7d, 0x27, 0x66, 0x63, 0x4e, 0xc6, 0x44, 0xf4, 0x11, 0xcc, 0xf6, 0x15,",
          "2918:  0x8d, 0xc4, 0x34, 0x2d, 0xb9, 0x0c, 0x33, 0xfa, 0x5c, 0x8e, 0x86, 0x31, 0x0f, 0x81, 0x88, 0x68,",
          "2919:  0x89, 0x3a, 0x01, 0xd1, 0x27, 0x79, 0x92, 0x00, 0x7b, 0xcb, 0x90, 0x15, 0x38, 0x9d, 0x02, 0x32,",
          "2920:  0x45, 0x44, 0x28, 0x45, 0x9d, 0xf9, 0xa7, 0xf8, 0x30, 0x5d, 0x7a, 0x4a, 0x90, 0xeb, 0x70, 0x46,",
          "2921:  0xf4, 0x2f, 0xbf, 0x76, 0xaf, 0x6a, 0x34, 0xce, 0x19, 0xfd, 0x3f, 0xc9, 0xe8, 0xcc, 0xe5, 0x5e,",
          "2922:  0x12, 0xec, 0x57, 0x8e, 0x8d, 0x50, 0x05, 0x5e, 0x5b, 0x91, 0x86, 0x4d, 0x8d, 0x50, 0xc5, 0x66,",
          "2923:  0xad, 0x8a, 0x26, 0x1d, 0x79, 0x17, 0x3c, 0xa5, 0x3f, 0x45, 0x04, 0x4d, 0xac, 0xf6, 0x2b, 0x32,",
          "2924:  0xe5, 0x61, 0x5e, 0xb2, 0x78, 0xea, 0x72, 0x5f, 0xb2, 0x2a, 0x0e, 0x2a, 0x4f, 0x76, 0x61, 0x4e,",
          "2925:  0xa1, 0x56, 0xd9, 0xec, 0x6d, 0x87, 0x5e, 0x44, 0x2b, 0x4e, 0x44, 0x6f, 0x86, 0x4d, 0x9e, 0x24,",
          "2926:  0x51, 0xd6, 0x4f, 0x47, 0x5c, 0xf6, 0xe2, 0x2b, 0xfd, 0x28, 0x71, 0x1d, 0x1f, 0xc0, 0x85, 0x39,",
          "2927:  0x17, 0xd4, 0x77, 0x76, 0x9b, 0x74, 0x73, 0x79, 0x8d, 0xa7, 0x4e, 0x18, 0xce, 0xc5, 0x6a, 0x82,",
          "2928:  0x40, 0x4d, 0xa3, 0x5c, 0xfb, 0xc9, 0x81, 0xae, 0xfd, 0x37, 0x2d, 0x98, 0x52, 0x83, 0xfd, 0x31,",
          "2929:  0xc4, 0xbb, 0x9a, 0xe9, 0x78, 0xd7, 0xe5, 0x61, 0xbd, 0x3a, 0xa9, 0xf9, 0x80, 0x8d, 0xd8, 0x77,",
          "2930:  0xcb, 0x00, 0xfc, 0x31, 0x1e, 0x8f, 0xa7, 0xe4, 0x5e, 0x80, 0x91, 0x90, 0xb6, 0x83, 0xac, 0xe5,",
          "2931:  0xe3, 0xb1, 0x7a, 0x8e, 0xf9, 0xc1, 0x9d, 0xce, 0xfd, 0x4e, 0x88, 0x47, 0xbf, 0xbf, 0x27, 0xc4,",
          "2932:  0xdb, 0xf0, 0xa4, 0xe7, 0x47, 0xd4, 0xed, 0x84, 0x72, 0xa1, 0xbb, 0x12, 0x44, 0xca, 0x3a, 0x94,",
          "2933:  0x2a, 0xaf, 0x97, 0x8c, 0x9e, 0x5c, 0xeb, 0x47, 0x84, 0xfd, 0xcb, 0xb2, 0x26, 0x4d, 0x10, 0xf2,",
          "2934:  0xee, 0x8f, 0x0e, 0x0f, 0x48, 0x38, 0x2a, 0x0a, 0x3d, 0x21, 0xd6, 0x6b, 0xc9, 0xe5, 0x9e, 0xcc,",
          "2935:  0x84, 0x58, 0xbf, 0xb4, 0x8d, 0x9a, 0xa6, 0xbf, 0x55, 0x2c, 0xe7, 0x64, 0x15, 0xe1, 0xc4, 0x56,",
          "2936:  0x31, 0x99, 0x9f, 0x13, 0x03, 0x9f, 0x6e, 0x48, 0x16, 0xeb, 0xc9, 0x81, 0x8b, 0xf5, 0x4b, 0x30,",
          "2937:  0xed, 0xf9, 0x0d, 0x1a, 0x7a, 0x31, 0xad, 0xf2, 0xb9, 0x30, 0x3b, 0xc5, 0x1b, 0x42, 0x45, 0xae,",
          "2938:  0xd6, 0x52, 0x58, 0xcc, 0x50, 0xa7, 0x8d, 0xca, 0xf4, 0x31, 0x8c, 0xca, 0x00, 0x53, 0x7e, 0x2a,",
          "2939:  0x1f, 0x53, 0x7e, 0x7a, 0x78, 0x53, 0x3e, 0xf3, 0x48, 0x4d, 0x39, 0xc9, 0xc5, 0x94, 0x3f, 0x03,",
          "2940:  0xa3, 0xed, 0x30, 0x38, 0xe8, 0xce, 0x9e, 0x49, 0x7b, 0xd3, 0x5b, 0x0c, 0x88, 0x02, 0x67, 0x26,",
          "2941:  0xca, 0x9d, 0x7d, 0x70, 0xa2, 0x9c, 0xfd, 0x6a, 0x01, 0x9e, 0xd4, 0x96, 0x8e, 0x8d, 0x2f, 0xaf,",
          "2942:  0xc6, 0xe6, 0x3a, 0xbf, 0x81, 0x29, 0x92, 0x33, 0x8c, 0xa0, 0xa9, 0x8e, 0xbf, 0x2a, 0x0c, 0x1a,",
          "2943:  0x54, 0x3c, 0xf6, 0x48, 0x43, 0x9e, 0xde, 0x9b, 0x35, 0x83, 0xcb, 0x12, 0x8e, 0x8a, 0x82, 0xbf,",
          "2944:  0xe4, 0x47, 0xc3, 0x58, 0x9e, 0xbd, 0x64, 0x33, 0x97, 0x96, 0x35, 0x0a, 0x4d, 0x3a, 0xe6, 0x2e,",
          "2945:  0xba, 0xc9, 0x14, 0x64, 0xa6, 0x70, 0x52, 0xb8, 0x8b, 0x6a, 0xd6, 0x29, 0x6c, 0xa2, 0x0e, 0x0f,",
          "2946:  0x32, 0x8f, 0xf6, 0xaa, 0xc3, 0x83, 0x06, 0x8a, 0xc2, 0xfe, 0x6f, 0x0b, 0x5e, 0xd7, 0xb7, 0x29,",
          "2947:  0x1e, 0xc3, 0xf2, 0x76, 0x90, 0x5e, 0xde, 0xb6, 0x87, 0x5f, 0xde, 0x7a, 0x6a, 0x31, 0x60, 0xa9,",
          "2948:  0xfb, 0x5b, 0x0b, 0xa6, 0x35, 0xfd, 0x63, 0xa8, 0xaa, 0x97, 0xeb, 0x9b, 0x7c, 0x5a, 0x75, 0x91,",
          "2949:  0x76, 0x9a, 0xaa, 0xdb, 0x37, 0x79, 0xdd, 0xc4, 0xde, 0x6b, 0xc9, 0x4d, 0x1e, 0xbd, 0x39, 0x62,",
          "2950:  0x13, 0xd3, 0x85, 0x31, 0x7e, 0x4d, 0x39, 0xca, 0x67, 0x0f, 0x98, 0x96, 0xcf, 0xc3, 0xa0, 0x7a,",
          "2951:  0x0f, 0xc8, 0x3f, 0x23, 0x94, 0x02, 0x79, 0xf2, 0xb9, 0x17, 0x31, 0x7b, 0x59, 0x95, 0xe1, 0x5a,",
          "2952:  0x9d, 0x7c, 0x2e, 0xe1, 0xa8, 0x28, 0xec, 0x16, 0xcc, 0xa6, 0x99, 0xaf, 0xd0, 0x1a, 0x0f, 0xb5,",
          "2953:  0x1d, 0xab, 0x9a, 0x8b, 0x50, 0x76, 0x78, 0xa9, 0xf5, 0x8e, 0x93, 0x7d, 0xf9, 0x66, 0x29, 0x41,",
          "2954:  0xa0, 0xa6, 0xb1, 0x7f, 0xd7, 0x82, 0x33, 0x7d, 0x2a, 0x93, 0x63, 0x98, 0x3a, 0xd6, 0x56, 0x60,",
          "2955:  0xc0, 0x6b, 0x44, 0x55, 0x5a, 0x73, 0x92, 0x60, 0x8e, 0x61, 0xd5, 0x56, 0x04, 0x18, 0x13, 0xbc,",
          "2956:  0xfd, 0x6f, 0x16, 0x9c, 0x4a, 0xeb, 0x1a, 0x91, 0xab, 0x40, 0x44, 0x65, 0x56, 0xbc, 0xc8, 0x0d,",
          "2957:  0xf6, 0x69, 0xd8, 0x65, 0x35, 0x17, 0x5a, 0xcf, 0x49, 0x4e, 0x64, 0xa9, 0x87, 0x02, 0xfb, 0x94,",
          "2958:  0xe2, 0x39, 0xbe, 0x55, 0xd5, 0xda, 0xc9, 0x48, 0xb9, 0x95, 0xe7, 0x48, 0xd1, 0x9d, 0x69, 0xee,",
          "2959:  0xa0, 0x95, 0x48, 0x34, 0xe5, 0xdb, 0xdf, 0x1a, 0x01, 0x75, 0x8e, 0xc5, 0xc3, 0x06, 0x39, 0x05,",
          "2960:  0x5d, 0x52, 0xcf, 0x23, 0x15, 0x4f, 0xf0, 0x3c, 0xd2, 0xc8, 0x83, 0x62, 0x04, 0xe2, 0xad, 0x1e,",
          "2961:  0xed, 0x8b, 0x1a, 0x46, 0x7f, 0x47, 0xa3, 0xd0, 0xa4, 0x63, 0x9a, 0x34, 0xbd, 0x7d, 0x2a, 0x0a,",
          "2962:  0x8d, 0xa5, 0x35, 0x59, 0x4f, 0x10, 0xa8, 0x69, 0x98, 0x26, 0x55, 0xaf, 0x56, 0x93, 0x3b, 0x45,",
          "2963:  0xa5, 0x09, 0x6b, 0x1d, 0xe4, 0x18, 0x46, 0xd1, 0x08, 0x82, 0x3d, 0xe9, 0xff, 0x29, 0x8a, 0x2b,",
          "2964:  0x41, 0xb0, 0x87, 0x1c, 0xc3, 0x3c, 0x16, 0x3f, 0x08, 0x5b, 0x4e, 0xd3, 0x7b, 0x3f, 0xad, 0x2a,",
          "2965:  0x29, 0xd2, 0xef, 0x53, 0x1e, 0xcb, 0x46, 0x2f, 0x09, 0xf6, 0x2b, 0xc7, 0x46, 0x60, 0x3b, 0xa4,",
          "2966:  0x55, 0xcf, 0x8d, 0x4d, 0x6e, 0x90, 0x1e, 0x81, 0x5b, 0x3d, 0x14, 0xd8, 0xa7, 0x14, 0x59, 0x82,",
          "2967:  0x53, 0xc9, 0x39, 0x64, 0x92, 0x2b, 0x22, 0x9c, 0x41, 0xe5, 0x87, 0x63, 0x1a, 0x8d, 0x59, 0x7a,",
          "2968:  0x66, 0x6d, 0x5a, 0x32, 0x63, 0x87, 0xbb, 0x89, 0x86, 0xb5, 0x49, 0x32, 0x79, 0x50, 0x51, 0xd8,",
          "2969:  0xbf, 0x5f, 0x60, 0xab, 0xe3, 0x80, 0x5b, 0xb8, 0x8f, 0x2d, 0xc8, 0x97, 0x1e, 0x91, 0x23, 0xc7,",
          "2970:  0x18, 0x91, 0xcf, 0xc3, 0xe4, 0x9d, 0x28, 0xf0, 0x55, 0x00, 0x6d, 0x74, 0x60, 0x00, 0xcd, 0xa0,",
          "2971:  0xea, 0x1f, 0x40, 0x1b, 0x3b, 0x61, 0x00, 0xed, 0x2f, 0x46, 0xe1, 0x9c, 0x3a, 0x3a, 0xa6, 0xf1,",
          "2972:  0xdd, 0x20, 0xdc, 0xf3, 0xfc, 0x3a, 0x3f, 0x6e, 0xfd, 0xa2, 0x05, 0x93, 0x62, 0x78, 0xcb, 0xf7,",
          "2973:  0x0a, 0xc4, 0xf1, 0x62, 0x2d, 0xa7, 0x2b, 0x65, 0x29, 0x61, 0x0b, 0x3b, 0x86, 0xa0, 0xcc, 0xe3,",
          "2974:  0x11, 0x26, 0x0a, 0x53, 0x1a, 0x91, 0x0f, 0x02, 0x24, 0x8f, 0x6a, 0xd5, 0x72, 0x7a, 0x5a, 0x2c,",
          "2975:  0xd1, 0x0f, 0x69, 0x4d, 0xbb, 0x92, 0x3b, 0x4a, 0x08, 0x1a, 0x02, 0xc9, 0xab, 0x96, 0xba, 0xc2,",
          "2976:  0x21, 0xce, 0x8a, 0x5e, 0x7e, 0x24, 0x6d, 0x73, 0x9c, 0x1b, 0x1d, 0x08, 0xe3, 0x9e, 0x5f, 0x67,",
          "2977:  0xdd, 0x2a, 0x63, 0x8e, 0x6f, 0xea, 0x97, 0xaa, 0xb0, 0x1e, 0x38, 0xd5, 0x8a, 0xd3, 0x74, 0x7c,",
          "2978:  0x97, 0x86, 0x6b, 0x82, 0xdc, 0x7c, 0xda, 0x88, 0x03, 0x30, 0x61, 0xd4, 0x73, 0x67, 0x72, 0xf4,",
          "2979:  0x38, 0x77, 0x26, 0xe7, 0xde, 0x09, 0x33, 0x3d, 0x9d, 0x79, 0xa2, 0x1b, 0x1d, 0x0f, 0x7f, 0x19,",
          "2980:  0xc4, 0xfe, 0xd3, 0x31, 0xbd, 0xc6, 0x6c, 0x04, 0x55, 0x71, 0x73, 0x2f, 0xd4, 0x3d, 0x2a, 0x5d,",
          "2981:  0xc5, 0x1c, 0x87, 0x88, 0xf1, 0x3c, 0x92, 0x02, 0xa2, 0x29, 0x92, 0x8d, 0xd1, 0xb6, 0x13, 0x52,",
          "2982:  0xff, 0x51, 0x8f, 0xd1, 0x2d, 0x25, 0x04, 0x0d, 0x81, 0xa4, 0x91, 0x3a, 0xcc, 0xbc, 0x34, 0xfc,",
          "2983:  0x61, 0x26, 0xf3, 0x5e, 0xfb, 0xde, 0xb0, 0xfa, 0x8c, 0x05, 0xd3, 0x7e, 0x6a, 0xe4, 0xca, 0x03,",
          "2984:  0xad, 0x9d, 0x47, 0x31, 0x2b, 0xc4, 0x8d, 0xe9, 0x34, 0x0c, 0x33, 0xf2, 0xfb, 0xad, 0x40, 0xa3,",
          "2985:  0x27, 0x5c, 0x81, 0xf4, 0x15, 0xe0, 0xb1, 0x41, 0x57, 0x80, 0x89, 0xaf, 0x2e, 0xff, 0x8f, 0xe7,",
          "2986:  0x7e, 0xf9, 0x1f, 0xfa, 0x5c, 0xfc, 0xbf, 0x0d, 0x65, 0x37, 0xa4, 0x4e, 0xfc, 0x90, 0xf7, 0xc0,",
          "2987:  0xf9, 0x83, 0x74, 0xcb, 0x09, 0x03, 0xd4, 0xbc, 0xec, 0xbf, 0x2e, 0xc2, 0xe9, 0xa4, 0x45, 0x92,",
          "2988:  0x83, 0x1e, 0xb6, 0x9c, 0x09, 0xb9, 0xda, 0x17, 0x55, 0xcb, 0xd9, 0x95, 0x04, 0x81, 0x9a, 0x86,",
          "2989:  0xb9, 0x4f, 0x9d, 0x88, 0x6e, 0xb6, 0xa9, 0xbf, 0xee, 0xed, 0x46, 0xbc, 0xc5, 0x8d, 0x6c, 0xb1,",
          "2990:  0x9b, 0x1a, 0x85, 0x26, 0x1d, 0xf3, 0x9d, 0x85, 0x1b, 0x1b, 0x65, 0xcf, 0x4d, 0xa5, 0x7b, 0x8c,",
          "2991:  0x09, 0x9e, 0x7c, 0xa1, 0xef, 0x2b, 0x1e, 0xf9, 0x64, 0x0c, 0xf4, 0x9c, 0x6f, 0x9d, 0xf0, 0xf9,",
          "2992:  0x8e, 0xd7, 0x2c, 0x38, 0xb5, 0x97, 0x4a, 0x55, 0x49, 0x4c, 0xf2, 0x90, 0x09, 0x90, 0xe9, 0xfc,",
          "2993:  0x17, 0x3d, 0x84, 0xd3, 0xf0, 0x08, 0xb3, 0xd2, 0xed, 0xff, 0xb4, 0xc0, 0x34, 0x4f, 0xc7, 0x73,",
          "2994:  0x84, 0x8c, 0x77, 0x99, 0x0a, 0x47, 0xbc, 0xcb, 0x94, 0xf8, 0x4c, 0xc5, 0xe3, 0xf9, 0xe8, 0x23,",
          "2995:  0x27, 0xf0, 0xd1, 0x47, 0x07, 0x3a, 0x59, 0xaf, 0x87, 0x62, 0xc7, 0xab, 0x4a, 0x37, 0x5b, 0x9f,",
          "2996:  0x5d, 0xad, 0xad, 0x20, 0x83, 0xdb, 0x7f, 0x3c, 0xaa, 0xb7, 0xd5, 0xf2, 0xa0, 0xfb, 0x87, 0xa2,",
          "2997:  0xda, 0x35, 0x95, 0xcf, 0x2a, 0x6a, 0xbe, 0xd1, 0x93, 0xcf, 0xfa, 0x8e, 0x93, 0xe7, 0x31, 0x88,",
          "2998:  0x06, 0x1a, 0x94, 0xce, 0x3a, 0x7e, 0x44, 0x12, 0xc3, 0x1d, 0x28, 0xb1, 0x9d, 0x08, 0x8f, 0x8f,",
          "2999:  0x95, 0x52, 0x4a, 0x95, 0xae, 0x48, 0xf8, 0xfd, 0xc3, 0xf9, 0xb7, 0x9f, 0x5c, 0xad, 0xa4, 0x34,",
          "3000:  0x2a, 0xfe, 0x24, 0x82, 0x32, 0xfb, 0xcd, 0xf3, 0x2d, 0xe4, 0x1e, 0xe7, 0xa6, 0xb2, 0x45, 0x09,",
          "3001:  0x22, 0x97, 0x64, 0x0e, 0x2d, 0x87, 0xf8, 0x50, 0xe6, 0x2f, 0x08, 0x71, 0xa1, 0x62, 0x2b, 0xb4,",
          "3002:  0xa5, 0xb2, 0x1e, 0x12, 0xc4, 0xfd, 0xc3, 0xf9, 0x17, 0x4f, 0x2e, 0x54, 0x15, 0x47, 0x2d, 0xc2,",
          "3003:  0xfe, 0x4e, 0x51, 0x8f, 0x5d, 0x99, 0xc6, 0xfc, 0x43, 0x31, 0x76, 0x5f, 0xc8, 0x8c, 0xdd, 0x0b,",
          "3004:  0x3d, 0x63, 0x77, 0x5a, 0xbf, 0xb2, 0x93, 0x1a, 0x8d, 0x8f, 0x7b, 0x81, 0x3d, 0x7a, 0xdb, 0xcd,",
          "3005:  0x3d, 0x8b, 0x57, 0x3a, 0x5e, 0x48, 0xa3, 0xad, 0xb0, 0xe3, 0x7b, 0x7e, 0x9d, 0x0f, 0xc7, 0x92,",
          "3006:  0xe9, 0x59, 0xa4, 0xd0, 0x98, 0xa5, 0xb7, 0xbf, 0xc4, 0x8f, 0x27, 0x8d, 0xd4, 0x2d, 0xd6, 0xcb,",
          "3007:  0x4d, 0xfe, 0x08, 0x93, 0x48, 0x1e, 0x55, 0xbd, 0x2c, 0x5e, 0x5e, 0x12, 0x38, 0x72, 0x17, 0xc6,",
          "3008:  0x77, 0xc5, 0x43, 0x10, 0xf9, 0xdc, 0x3c, 0x92, 0xaf, 0x4a, 0xf0, 0x3b, 0x9e, 0xc9, 0x13, 0x13,",
          "3009:  0xf7, 0xf5, 0x4f, 0x4c, 0xa4, 0xd9, 0xbf, 0x5e, 0x84, 0x53, 0x99, 0x27, 0x82, 0xd8, 0xfe, 0x3c,",
          "3010:  0x79, 0x0f, 0x2a, 0x1b, 0x4c, 0x57, 0xef, 0x1e, 0x2b, 0x0a, 0xf2, 0x3e, 0x80, 0x2a, 0x6d, 0x37,",
          "3011:  0x83, 0x2e, 0x77, 0x5c, 0x46, 0x4e, 0xec, 0xb8, 0x28, 0x5f, 0x77, 0x45, 0x71, 0x41, 0x83, 0xa3,",
          "3012:  0xcc, 0x98, 0x1d, 0x15, 0xcf, 0x5c, 0xa4, 0x33, 0x66, 0x8d, 0x0b, 0x78, 0x63, 0x8f, 0xf7, 0x02,",
          "3013:  0x9e, 0x07, 0xa7, 0x84, 0x8a, 0x2a, 0x41, 0xea, 0x21, 0xf2, 0xa0, 0xce, 0xb0, 0x11, 0xb5, 0x92,",
          "3014:  0x66, 0x83, 0x59, 0xbe, 0xf6, 0xa7, 0x0b, 0xcc, 0x7d, 0x13, 0x8d, 0x7d, 0x3d, 0x89, 0x65, 0xbf,",
          "3015:  0x11, 0xc6, 0x9c, 0x4e, 0xdc, 0x08, 0x7a, 0x1e, 0xe6, 0x58, 0xe2, 0x50, 0x94, 0x58, 0xb2, 0x0e,",
          "3016:  0x23, 0x55, 0x27, 0x4e, 0xde, 0xed, 0x3f, 0x89, 0x72, 0x3a, 0x70, 0xe5, 0xc4, 0x14, 0x39, 0x17,",
          "3017:  0xf2, 0x34, 0x8c, 0xc4, 0x4e, 0x3d, 0xf5, 0x62, 0xe8, 0x8e, 0x53, 0x8f, 0x90, 0x43, 0xcd, 0xd5,",
          "3018:  0x65, 0xe4, 0x88, 0xd5, 0xe5, 0x45, 0xe3, 0x1f, 0x25, 0x8c, 0x43, 0x92, 0xde, 0x7f, 0x81, 0x10,",
          "3019:  0x39, 0xfc, 0x29, 0x5a, 0xfb, 0xc7, 0x60, 0xd2, 0xfc, 0x97, 0x88, 0x63, 0x5d, 0x01, 0xb2, 0xff,",
          "3020:  0x65, 0x04, 0xa6, 0x52, 0x49, 0x74, 0xa9, 0x51, 0x6e, 0x1d, 0x39, 0xca, 0xf9, 0xf1, 0x57, 0xc7,",
          "3021:  0xa7, 0x32, 0x45, 0xd2, 0x38, 0xfe, 0xea, 0xf8, 0x14, 0x05, 0x8e, 0xf5, 0x4a, 0x35, 0xec, 0x62,",
          "3022:  0xc7, 0x97, 0x41, 0x74, 0xd5, 0x2b, 0x2b, 0x1c, 0x8a, 0x12, 0xcb, 0x36, 0xb0, 0x93, 0x11, 0x37,",
          "3023:  0x8a, 0xc2, 0x46, 0xc8, 0x59, 0x73, 0x35, 0x8f, 0xc7, 0xcc, 0x64, 0xc2, 0x28, 0xdf, 0xd0, 0x9b,",
          "3024:  0x10, 0x4c, 0x49, 0x24, 0x1f, 0xb3, 0xcc, 0x67, 0xdc, 0xc6, 0xf2, 0x38, 0xfc, 0xc9, 0xe6, 0x28,",
          "3025:  0x8a, 0x19, 0xf4, 0xe0, 0xd7, 0xdc, 0x22, 0x35, 0x81, 0xc7, 0x1f, 0xcd, 0x04, 0x86, 0x3e, 0x93,",
          "3026:  0xf7, 0xcd, 0x50, 0x6e, 0x39, 0xbe, 0x57, 0xa3, 0x51, 0x2c, 0xfe, 0xe1, 0xa5, 0x2c, 0x76, 0x4f,",
          "3027:  0xd7, 0x13, 0x20, 0x6a, 0x3c, 0xff, 0x1f, 0x25, 0x5e, 0x31, 0xb1, 0x89, 0x29, 0x1b, 0xff, 0xa3,",
          "3028:  0xa4, 0xc1, 0x68, 0xd2, 0xd8, 0x7f, 0x60, 0xc1, 0x93, 0x7d, 0x1b, 0xe3, 0x07, 0x37, 0x5a, 0x69,",
          "3029:  0xff, 0x61, 0x01, 0xce, 0xf4, 0x49, 0x32, 0x25, 0xdd, 0x47, 0xf6, 0xda, 0x9f, 0xcc, 0x62, 0x9d,",
          "3030:  0x1a, 0x38, 0x36, 0x4e, 0xb6, 0x0c, 0xe9, 0xa5, 0xa0, 0xf8, 0x58, 0x97, 0x02, 0xfb, 0x4b, 0x05,",
          "3031:  0x30, 0xde, 0xa5, 0x24, 0x1f, 0x32, 0xf3, 0xa9, 0xad, 0xbc, 0x72, 0x7f, 0x05, 0x73, 0x95, 0x8f,",
          "3032:  0x2d, 0x5a, 0xad, 0x5f, 0x7a, 0x76, 0x76, 0xbc, 0x16, 0x8e, 0x1e, 0xaf, 0xa4, 0x99, 0x24, 0xae,",
          "3033:  0x17, 0xf3, 0x4f, 0x5c, 0x2f, 0xf7, 0x24, 0xad, 0xff, 0xaa, 0x25, 0x46, 0x5a, 0xa6, 0x4a, 0xda,",
          "3034:  0xc2, 0x5a, 0x0f, 0xb0, 0xb0, 0x6f, 0x81, 0x52, 0x44, 0x9b, 0x35, 0xe6, 0xd9, 0x49, 0x4b, 0xac,",
          "3035:  0xc6, 0xc4, 0xb6, 0x84, 0xa3, 0xa2, 0xe0, 0x57, 0x5a, 0x9b, 0xcd, 0xe0, 0xee, 0x6a, 0xab, 0x1d,",
          "3036:  0x77, 0xa5, 0x4d, 0xd6, 0x57, 0x5a, 0x15, 0x06, 0x0d, 0x2a, 0xfb, 0xbf, 0x2c, 0xd1, 0x9d, 0xd2,",
          "3037:  0x47, 0x7f, 0x21, 0x73, 0xd5, 0xf0, 0xf8, 0xee, 0xed, 0xcf, 0x03, 0xb8, 0xea, 0xa9, 0x80, 0x7c,",
          "3038:  0x9e, 0xab, 0xd4, 0x4f, 0x0f, 0x98, 0x6f, 0x28, 0x26, 0x30, 0x34, 0xe4, 0xa5, 0x26, 0x4f, 0xf1,",
          "3039:  0xa8, 0xc9, 0x63, 0xff, 0xbb, 0x05, 0xa9, 0xc5, 0x82, 0xb4, 0x61, 0x94, 0x69, 0xd0, 0xcd, 0xe7,",
          "3040:  0x61, 0x03, 0x93, 0x35, 0x9b, 0x58, 0x72, 0x58, 0xf0, 0x9f, 0x28, 0x04, 0x91, 0xa6, 0xf4, 0xce,",
          "3041:  0x0b, 0x79, 0x3c, 0xbe, 0x61, 0x0a, 0x64, 0xfe, 0xbd, 0xfc, 0xcf, 0x0c, 0xe5, 0xe9, 0xdb, 0x2f,",
          "3042:  0xc0, 0x4c, 0x8f, 0x52, 0xfc, 0xf2, 0x51, 0x90, 0xbc, 0xe6, 0x60, 0x8c, 0x40, 0x7e, 0x15, 0x12,",
          "3043:  0x05, 0x8e, 0x39, 0xf8, 0xa7, 0xb3, 0xec, 0xc9, 0xe7, 0x2d, 0x98, 0x89, 0xb2, 0xfc, 0x1e, 0x55,",
          "3044:  0xdb, 0xa9, 0xc8, 0x55, 0x0f, 0x0a, 0x7b, 0x95, 0xb0, 0xff, 0x52, 0x9a, 0x27, 0xf1, 0x1f, 0x63,",
          "3045:  0x6a, 0x71, 0xb1, 0x06, 0x2e, 0x2e, 0x6c, 0x8a, 0xb9, 0x0d, 0x5a, 0xed, 0x34, 0x7b, 0x52, 0x69,",
          "3046:  0xb6, 0x25, 0x1c, 0x15, 0x45, 0xea, 0xd9, 0xba, 0xe2, 0x91, 0xcf, 0xd6, 0x3d, 0x0f, 0x93, 0xe6,",
          "3047:  0x8b, 0x25, 0x3c, 0x84, 0x26, 0x0f, 0x1f, 0xcc, 0xc7, 0x4d, 0x30, 0x45, 0x95, 0x79, 0xf6, 0x6c,",
          "3048:  0xf4, 0xc8, 0x67, 0xcf, 0x9e, 0x85, 0x92, 0x7c, 0xc2, 0x2b, 0x89, 0xef, 0x8a, 0x3c, 0x1d, 0x09,",
          "3049:  0x43, 0x85, 0x65, 0x06, 0xa2, 0xe5, 0xf8, 0x1d, 0xa7, 0xc9, 0x5a, 0x48, 0xa6, 0xef, 0xa9, 0x99,",
          "3050:  0x75, 0x5d, 0x61, 0xd0, 0xa0, 0xb2, 0xff, 0xd9, 0x82, 0xec, 0x8b, 0x42, 0xa9, 0x24, 0x40, 0xeb,",
          "3051:  0xc8, 0x24, 0xc0, 0x74, 0x82, 0x53, 0xe1, 0x58, 0x09, 0x4e, 0x66, 0xee, 0x51, 0xf1, 0x81, 0xb9,",
          "3052:  0x47, 0x6f, 0xd0, 0x17, 0xc8, 0x45, 0x92, 0xd2, 0x44, 0xbf, 0xcb, 0xe3, 0xc4, 0x86, 0x31, 0xd7,",
          "3053:  0x51, 0x39, 0xd6, 0x93, 0xc2, 0x51, 0x5a, 0x5e, 0xe2, 0x44, 0x12, 0x53, 0x59, 0xf8, 0xca, 0xb7,",
          "3054:  0xcf, 0x3f, 0xf1, 0xd5, 0x6f, 0x9f, 0x7f, 0xe2, 0x1b, 0xdf, 0x3e, 0xff, 0xc4, 0x47, 0xee, 0x9d,",
          "3055:  0xb7, 0xbe, 0x72, 0xef, 0xbc, 0xf5, 0xd5, 0x7b, 0xe7, 0xad, 0x6f, 0xdc, 0x3b, 0x6f, 0x7d, 0xeb,",
          "3056:  0xde, 0x79, 0xeb, 0x33, 0xff, 0x78, 0xfe, 0x89, 0x77, 0x97, 0x92, 0xb1, 0xfa, 0xbf, 0x01, 0x00,",
          "3057:  0x00, 0xff, 0xff, 0x76, 0xf3, 0x24, 0x31, 0xb1, 0x76, 0x00, 0x00,",
          "",
          "[Added Lines]",
          "2642:  0x21, 0x91, 0x10, 0x84, 0x1f, 0x81, 0x78, 0x88, 0x80, 0x27, 0x40, 0x88, 0x07, 0xf2, 0x14, 0x84,",
          "2643:  0x04, 0x91, 0x40, 0x49, 0x20, 0xc2, 0x24, 0x03, 0x28, 0x80, 0x04, 0x08, 0xc8, 0x0b, 0xf3, 0x84,",
          "2644:  0xee, 0x4f, 0xdd, 0x7b, 0xab, 0xba, 0x7b, 0x6c, 0x4f, 0xd7, 0x4c, 0xa2, 0x88, 0x37, 0xf7, 0x39,",
          "2645:  0xa7, 0xce, 0x39, 0xf7, 0xef, 0xdc, 0x73, 0xce, 0x3d, 0xf7, 0x1a, 0xd6, 0xeb, 0x5e, 0xdc, 0xe8,",
          "2646:  0xec, 0x2e, 0xb8, 0x41, 0x6b, 0xd1, 0x09, 0xeb, 0x41, 0x3b, 0x0c, 0xee, 0xf0, 0x3f, 0xde, 0xea,",
          "2647:  0x56, 0x17, 0xf7, 0x2f, 0x2e, 0xb6, 0xf7, 0xea, 0x8b, 0x4e, 0xdb, 0x8b, 0x16, 0x9d, 0x76, 0xbb,",
          "2648:  0xe9, 0xb9, 0x4e, 0xec, 0x05, 0xfe, 0xe2, 0xfe, 0x73, 0x4e, 0xb3, 0xdd, 0x70, 0x9e, 0x5b, 0xac,",
          "2649:  0x53, 0x9f, 0x86, 0x4e, 0x4c, 0xab, 0x0b, 0xed, 0x30, 0x88, 0x03, 0xf2, 0x0e, 0xcd, 0x6d, 0x21,",
          "2650:  0xe1, 0xc6, 0xff, 0xf8, 0x19, 0xb7, 0xba, 0xb0, 0x7f, 0x71, 0xa1, 0xbd, 0x57, 0x5f, 0x60, 0xdc,",
          "2651:  0x16, 0x0c, 0x6e, 0x0b, 0x09, 0xb7, 0xb9, 0xb7, 0x1a, 0xba, 0xd4, 0x83, 0x7a, 0xb0, 0xc8, 0x99,",
          "2652:  0xee, 0x76, 0x6a, 0xfc, 0x17, 0xff, 0xc1, 0xff, 0x12, 0xc2, 0xe6, 0xec, 0xbd, 0x17, 0xa2, 0x05,",
          "2654:  0x1c, 0xb7, 0xe1, 0xf9, 0x34, 0xec, 0xea, 0x36, 0xb5, 0x68, 0xec, 0xf4, 0xfb, 0x6a, 0x71, 0xd0,",
          "2655:  0x57, 0x61, 0xc7, 0x8f, 0xbd, 0x16, 0xed, 0xf9, 0xe0, 0x6d, 0x47, 0x7d, 0x10, 0xb9, 0x0d, 0xda,",
          "2656:  0x72, 0xb2, 0xdf, 0xd9, 0xaf, 0xc0, 0xd4, 0xd2, 0xed, 0xed, 0xa5, 0x4e, 0xdc, 0x58, 0x0e, 0xfc,",
          "2657:  0x9a, 0x57, 0x27, 0x3f, 0x0a, 0x13, 0x6e, 0xb3, 0x13, 0xc5, 0x34, 0xdc, 0x70, 0x5a, 0x74, 0xd6,",
          "2658:  0xba, 0x60, 0x3d, 0x5b, 0xae, 0x9c, 0xf9, 0xca, 0xe1, 0xfc, 0x13, 0xf7, 0x0e, 0xe7, 0x27, 0x96,",
          "2659:  0x35, 0x0a, 0x4d, 0x3a, 0xf2, 0xff, 0x61, 0x3c, 0x0c, 0x9a, 0x74, 0x09, 0x37, 0x66, 0x0b, 0xfc,",
          "2660:  0x93, 0x53, 0xf2, 0x93, 0x71, 0x14, 0x60, 0x4c, 0xf0, 0xf6, 0xd7, 0x0a, 0x00, 0x4b, 0xed, 0xf6,",
          "2661:  0x56, 0x18, 0xdc, 0xa1, 0x6e, 0x4c, 0x5e, 0x86, 0x12, 0xeb, 0x85, 0xaa, 0x13, 0x3b, 0x5c, 0xda,",
          "2662:  0xc4, 0xc5, 0x1f, 0x5e, 0x10, 0x8d, 0x59, 0x30, 0x1b, 0xa3, 0x47, 0x8e, 0x51, 0x2f, 0xec, 0x3f,",
          "2663:  0xb7, 0xb0, 0xb9, 0xcb, 0xbe, 0xbf, 0x4e, 0x63, 0xa7, 0x42, 0xa4, 0x30, 0xd0, 0x30, 0x54, 0x5c,",
          "2664:  0x89, 0x0f, 0x23, 0x51, 0x9b, 0xba, 0x5c, 0xb1, 0x89, 0x8b, 0xeb, 0x0b, 0xc3, 0x4c, 0x91, 0x05,",
          "2665:  0xad, 0xf9, 0x76, 0x9b, 0xba, 0x95, 0x49, 0x29, 0x79, 0x84, 0xfd, 0x42, 0x2e, 0x87, 0xec, 0xc3,",
          "2666:  0x58, 0x14, 0x3b, 0x71, 0x27, 0x9a, 0x2d, 0x72, 0x89, 0x1b, 0xb9, 0x49, 0xe4, 0x5c, 0x2b, 0xd3,",
          "2667:  0x52, 0xe6, 0x98, 0xf8, 0x8d, 0x52, 0x9a, 0xfd, 0x77, 0x16, 0x4c, 0x6b, 0xe2, 0x75, 0x2f, 0x8a,",
          "2668:  0xc9, 0x7b, 0x7b, 0x3a, 0x77, 0xe1, 0x78, 0x9d, 0xcb, 0xbe, 0xe6, 0x5d, 0x7b, 0x5a, 0x0a, 0x2b,",
          "2669:  0x25, 0x10, 0xa3, 0x63, 0x5b, 0x30, 0xea, 0xc5, 0xb4, 0x15, 0xcd, 0x16, 0x2e, 0x14, 0x9f, 0x9d,",
          "2670:  0xb8, 0x78, 0x25, 0xaf, 0x76, 0x56, 0xa6, 0xa4, 0xd0, 0xd1, 0x35, 0xc6, 0x1e, 0x85, 0x14, 0xfb,",
          "2671:  0xbb, 0x60, 0xb6, 0x8f, 0x75, 0x38, 0x79, 0x0e, 0x26, 0xa2, 0xa0, 0x13, 0xba, 0x14, 0x69, 0x3b,",
          "2672:  0x88, 0x66, 0xad, 0x0b, 0x45, 0x36, 0xf5, 0xd8, 0x4c, 0xdd, 0xd6, 0x60, 0x34, 0x69, 0xc8, 0xa7,",
          "2673:  0x2d, 0x98, 0xac, 0xd2, 0x28, 0xf6, 0x7c, 0x2e, 0x3f, 0x51, 0x7e, 0x67, 0x68, 0xe5, 0x13, 0xe0,",
          "2674:  0x8a, 0x66, 0x5e, 0x39, 0x2b, 0x1b, 0x32, 0x69, 0x00, 0x23, 0x4c, 0xc9, 0x67, 0x2b, 0xae, 0x4a,",
          "2675:  0x23, 0x37, 0xf4, 0xda, 0xec, 0x37, 0x9f, 0x33, 0xc6, 0x8a, 0x5b, 0xd1, 0x28, 0x34, 0xe9, 0x88,",
          "2676:  0x0f, 0xa3, 0x6c, 0x45, 0x45, 0xb3, 0x23, 0x5c, 0xff, 0xb5, 0xe1, 0xf4, 0x97, 0x9d, 0xca, 0x16,",
          "2677:  0xab, 0xee, 0x7d, 0xf6, 0x2b, 0x42, 0x21, 0x86, 0x7c, 0xca, 0x82, 0x59, 0xb9, 0xe2, 0x91, 0x8a,",
          "2678:  0x0e, 0xbd, 0xdd, 0xf0, 0x62, 0xda, 0xf4, 0xa2, 0x78, 0x76, 0x94, 0xeb, 0xb0, 0x78, 0xbc, 0xb9,",
          "2679:  0x75, 0x39, 0x0c, 0x3a, 0xed, 0x6b, 0x9e, 0x5f, 0xad, 0x5c, 0x90, 0x92, 0x66, 0x97, 0x07, 0x30,",
          "2680:  0xc6, 0x81, 0x22, 0xc9, 0xe7, 0x2c, 0x98, 0xf3, 0x9d, 0x16, 0x8d, 0xda, 0x0e, 0x1b, 0x5a, 0x81,",
          "2681:  0xae, 0x34, 0x1d, 0x77, 0x8f, 0x6b, 0x34, 0xf6, 0x70, 0x1a, 0xd9, 0x52, 0xa3, 0xb9, 0x8d, 0x81,",
          "2682:  0xac, 0xf1, 0x01, 0x62, 0xc9, 0x6f, 0x58, 0x30, 0x13, 0x84, 0xed, 0x86, 0xe3, 0xd3, 0x6a, 0x82,",
          "2683:  0x8d, 0x66, 0xc7, 0xf9, 0xd2, 0x7b, 0xdf, 0x70, 0x43, 0xb4, 0x99, 0x65, 0x7b, 0x3d, 0xf0, 0xbd,",
          "2684:  0x38, 0x08, 0xb7, 0x69, 0x1c, 0x7b, 0x7e, 0x3d, 0xaa, 0x3c, 0x79, 0xef, 0x70, 0x7e, 0xa6, 0x87,",
          "2685:  0x0a, 0x7b, 0xf5, 0x21, 0x1f, 0x80, 0x89, 0xa8, 0xeb, 0xbb, 0xb7, 0x3d, 0xbf, 0x1a, 0xdc, 0x8d,",
          "2686:  0x66, 0x4b, 0x79, 0x2c, 0xdf, 0x6d, 0xc5, 0x50, 0x2e, 0x40, 0x2d, 0x00, 0x4d, 0x69, 0xfd, 0x07,",
          "2687:  0x4e, 0x4f, 0xa5, 0x72, 0xde, 0x03, 0xa7, 0x27, 0xd3, 0x03, 0xc4, 0x92, 0x8f, 0x5b, 0x30, 0x15,",
          "2688:  0x79, 0x75, 0xdf, 0x89, 0x3b, 0x21, 0xbd, 0x46, 0xbb, 0xd1, 0x2c, 0x70, 0x45, 0xae, 0x0e, 0xd9,",
          "2689:  0x2b, 0x06, 0xcb, 0xca, 0x93, 0x52, 0xc7, 0x29, 0x13, 0x1a, 0x61, 0x5a, 0x6e, 0xbf, 0x85, 0xa6,",
          "2690:  0xa7, 0xf5, 0x44, 0xbe, 0x0b, 0x4d, 0x4f, 0xea, 0x81, 0x22, 0xed, 0x3f, 0x2b, 0xc0, 0xe9, 0xec,",
          "2691:  0x1e, 0x44, 0x7e, 0xcb, 0x82, 0x53, 0x77, 0xee, 0xc6, 0x3b, 0xc1, 0x1e, 0xf5, 0xa3, 0x4a, 0x97,",
          "2692:  0x59, 0x0a, 0x6e, 0x7d, 0x27, 0x2e, 0xba, 0xf9, 0xee, 0x76, 0x0b, 0x57, 0xd3, 0x52, 0x56, 0xfd,",
          "2693:  0x38, 0xec, 0x56, 0x9e, 0x92, 0xed, 0x39, 0x75, 0xf5, 0xf6, 0x8e, 0x89, 0xc5, 0xac, 0x52, 0x73,",
          "2694:  0x9f, 0xb0, 0xe0, 0x6c, 0x3f, 0x16, 0xe4, 0x34, 0x14, 0xf7, 0x68, 0x57, 0x38, 0x38, 0xc8, 0xfe,",
          "2695:  0x24, 0x3f, 0x0d, 0xa3, 0xfb, 0x4e, 0xb3, 0x43, 0xa5, 0xa3, 0x70, 0x79, 0xb8, 0x86, 0x28, 0xcd,",
          "2696:  0x50, 0x70, 0x7d, 0x7b, 0xe1, 0x05, 0xcb, 0xfe, 0xcb, 0x22, 0x4c, 0x18, 0x5b, 0xc5, 0x63, 0x70,",
          "2697:  0x7e, 0x82, 0x94, 0xf3, 0x73, 0x3d, 0xb7, 0x5d, 0x6e, 0xa0, 0xf7, 0x73, 0x37, 0xe3, 0xfd, 0x6c,",
          "2698:  0xe6, 0x27, 0xf2, 0x81, 0xee, 0x0f, 0x89, 0xa1, 0x1c, 0xb4, 0x99, 0x73, 0xcb, 0x76, 0xd1, 0x91,",
          "2699:  0x3c, 0x86, 0x70, 0x33, 0x61, 0x57, 0x99, 0xba, 0x77, 0x38, 0x5f, 0x56, 0x3f, 0x51, 0x0b, 0xb2,",
          "2700:  0xbf, 0x6e, 0xc1, 0x59, 0x43, 0xc7, 0xe5, 0xc0, 0xaf, 0x7a, 0x7c, 0x68, 0x2f, 0xc0, 0x48, 0xdc,",
          "2701:  0x6d, 0x27, 0x1e, 0xb4, 0xea, 0xa9, 0x9d, 0x6e, 0x9b, 0x22, 0xc7, 0x30, 0x9f, 0xb9, 0x45, 0xa3,",
          "2702:  0xc8, 0xa9, 0xd3, 0xac, 0xcf, 0x7c, 0x5d, 0x80, 0x31, 0xc1, 0x93, 0x10, 0x48, 0xd3, 0x89, 0xe2,",
          "2703:  0x9d, 0xd0, 0xf1, 0x23, 0xce, 0x7e, 0xc7, 0x6b, 0x51, 0xd9, 0xc1, 0x3f, 0x74, 0xbc, 0x19, 0xc3,",
          "2704:  0xbe, 0xa8, 0x9c, 0xbb, 0x77, 0x38, 0x4f, 0xd6, 0x7b, 0x38, 0x61, 0x1f, 0xee, 0xf6, 0xe7, 0x2c,",
          "2705:  0x38, 0xd7, 0xdf, 0xad, 0x21, 0x6f, 0x84, 0xb1, 0x88, 0x86, 0xfb, 0x34, 0x94, 0xad, 0xd3, 0x43,",
          "2706:  0xc2, 0xa1, 0x28, 0xb1, 0x64, 0x11, 0xca, 0xca, 0xe4, 0xca, 0x36, 0xce, 0x48, 0xd2, 0xb2, 0xb6,",
          "2707:  0xd3, 0x9a, 0x86, 0x75, 0x1a, 0xfb, 0x21, 0x9d, 0x20, 0xd5, 0x69, 0x3c, 0xde, 0xe0, 0x18, 0xfb,",
          "2708:  0xef, 0x2d, 0x38, 0x65, 0x68, 0xf5, 0x18, 0xbc, 0x5c, 0x3f, 0xed, 0xe5, 0xae, 0xe5, 0x36, 0x9f,",
          "2709:  0x07, 0xb8, 0xb9, 0x5f, 0x1e, 0x83, 0x19, 0x73, 0xd6, 0x73, 0x73, 0xcc, 0x03, 0x2c, 0xda, 0x0e,",
          "2710:  0x6e, 0xe2, 0xba, 0xec, 0x73, 0x1d, 0x60, 0x09, 0x30, 0x26, 0x78, 0xd6, 0x89, 0x6d, 0x27, 0x6e,",
          "2711:  0xc8, 0x0e, 0x57, 0x9d, 0xb8, 0xe5, 0xc4, 0x0d, 0xe4, 0x18, 0xf2, 0x12, 0x4c, 0xc7, 0x4e, 0x58,",
          "2712:  0xa7, 0x31, 0xd2, 0x7d, 0x2f, 0x4a, 0xd6, 0x4b, 0xb9, 0x72, 0x4e, 0xd2, 0x4e, 0xef, 0xa4, 0xb0,",
          "2713:  0x98, 0xa1, 0x26, 0xaf, 0xc0, 0x48, 0x83, 0x36, 0x5b, 0xd2, 0xaf, 0xd9, 0xce, 0x6f, 0x85, 0xf3,",
          "2714:  0xb6, 0x5e, 0xa1, 0xcd, 0x56, 0xa5, 0xc4, 0x54, 0x66, 0x7f, 0x21, 0x17, 0x45, 0x7e, 0xde, 0x82,",
          "2715:  0xf2, 0x5e, 0x27, 0x8a, 0x83, 0x96, 0xf7, 0x7e, 0x3a, 0x5b, 0xe2, 0x82, 0x7f, 0x2a, 0x67, 0xc1,",
          "2716:  0xd7, 0x12, 0xfe, 0x62, 0xbd, 0xab, 0x9f, 0xa8, 0x25, 0x93, 0x0f, 0xc2, 0xf8, 0x5e, 0x14, 0xf8,",
          "2717:  0x3e, 0x65, 0x9e, 0x0a, 0x53, 0xe2, 0x56, 0xde, 0x4a, 0x08, 0xee, 0x95, 0x09, 0x36, 0xb6, 0xf2,",
          "2718:  0x07, 0x26, 0x32, 0x79, 0x37, 0x54, 0xbd, 0x90, 0xba, 0x71, 0x10, 0x76, 0x67, 0xe1, 0x91, 0x74,",
          "2719:  0xc3, 0x4a, 0xc2, 0x5f, 0x74, 0x83, 0xfa, 0x89, 0x5a, 0x32, 0xe9, 0xc2, 0x58, 0xbb, 0xd9, 0xa9,",
          "2720:  0x7b, 0xfe, 0xec, 0x04, 0xd7, 0xe1, 0x66, 0xce, 0x3a, 0x6c, 0x71, 0xe6, 0x15, 0x60, 0x46, 0x45,",
          "2721:  0xfc, 0x8d, 0x52, 0x20, 0x79, 0x06, 0x46, 0xdd, 0x86, 0x13, 0xc6, 0xb3, 0x93, 0x7c, 0xce, 0xaa,",
          "2722:  0x45, 0xb4, 0xcc, 0x80, 0x28, 0x70, 0xf6, 0xaf, 0x15, 0x60, 0x6e, 0x70, 0xc3, 0xc4, 0x6a, 0x72,",
          "2723:  0x3b, 0x61, 0x24, 0xec, 0x73, 0xc9, 0x5c, 0x4d, 0x1c, 0x8c, 0x09, 0x9e, 0x7c, 0xd4, 0x82, 0xf1,",
          "2724:  0x3b, 0x72, 0xc4, 0x0b, 0x8f, 0x64, 0xc4, 0xaf, 0xca, 0x11, 0x57, 0x3a, 0x5c, 0x4d, 0x46, 0x5d,",
          "2725:  0xca, 0x65, 0xea, 0xd2, 0x03, 0xb7, 0xd9, 0xa9, 0x26, 0x96, 0x51, 0x91, 0xae, 0x0a, 0x30, 0x26,",
          "2726:  0x78, 0x46, 0xea, 0xf9, 0x82, 0x74, 0x24, 0x4d, 0xba, 0xe6, 0x4b, 0x52, 0x89, 0xb7, 0x7f, 0x7b,",
          "2727:  0x04, 0x9e, 0xec, 0xbb, 0xf8, 0xc8, 0x02, 0x00, 0xf7, 0x59, 0x2e, 0x79, 0x2c, 0xc0, 0x14, 0x51,",
          "2728:  0xf5, 0x34, 0x73, 0x31, 0x6e, 0x29, 0x28, 0x1a, 0x14, 0xe4, 0xc3, 0x00, 0x6d, 0x27, 0x74, 0x5a,",
          "2729:  0x34, 0xa6, 0x61, 0x62, 0x27, 0xaf, 0x0d, 0xd7, 0x4b, 0x4c, 0x8f, 0xad, 0x84, 0xa7, 0xf6, 0x71,",
          "2730:  0x14, 0x28, 0x42, 0x43, 0x24, 0x8b, 0xa1, 0x43, 0xda, 0xa4, 0x4e, 0x44, 0x37, 0xf4, 0xf6, 0xa1,",
          "2731:  0x62, 0x68, 0xd4, 0x28, 0x34, 0xe9, 0xd8, 0x3e, 0xc6, 0x5b, 0x11, 0xc9, 0xbe, 0x52, 0xfb, 0x18,",
          "2732:  0x6f, 0x67, 0x84, 0x12, 0x4b, 0x5e, 0xb3, 0x60, 0xba, 0xe6, 0x35, 0xa9, 0x96, 0x2e, 0x23, 0xde,",
          "2733:  0xcd, 0xe1, 0x1b, 0x79, 0xc9, 0xe4, 0xab, 0x2d, 0x70, 0x0a, 0x1c, 0x61, 0x46, 0x3c, 0x1b, 0xe6,",
          "2734:  0x7d, 0x1a, 0x72, 0xd3, 0x3d, 0x96, 0x1e, 0xe6, 0x5b, 0x02, 0x8c, 0x09, 0x9e, 0x2c, 0xc1, 0xa9,",
          "2735:  0xb6, 0x13, 0x45, 0xcb, 0x21, 0xad, 0x52, 0x3f, 0xf6, 0x9c, 0xa6, 0x88, 0x47, 0x4b, 0xda, 0x89,",
          "2736:  0xde, 0x4a, 0xa3, 0x31, 0x4b, 0x6f, 0x7f, 0xa1, 0x00, 0xb3, 0x83, 0xa6, 0x2d, 0x89, 0xd8, 0xe4,",
          "2737:  0x8c, 0x6f, 0x39, 0x61, 0x24, 0x23, 0x80, 0x21, 0x03, 0x49, 0xc9, 0xf7, 0x96, 0x13, 0x9a, 0xd3,",
          "2738:  0x9c, 0x0b, 0xc0, 0x44, 0x12, 0xb9, 0x03, 0x23, 0x71, 0xd3, 0xc9, 0x29, 0xf3, 0x64, 0x48, 0xd4,",
          "2739:  0x7e, 0xda, 0xfa, 0x52, 0x84, 0x5c, 0x06, 0x79, 0x1a, 0x46, 0x9a, 0xde, 0x2e, 0xf3, 0x67, 0xd9,",
          "2740:  0x3a, 0xe0, 0x1b, 0xd3, 0xba, 0xb7, 0x1b, 0x21, 0x87, 0xda, 0x5f, 0xb3, 0xfa, 0xf4, 0x8d, 0xb4,",
          "2741:  0xdb, 0x6c, 0x5e, 0x52, 0x7f, 0xdf, 0x0b, 0x03, 0xbf, 0x45, 0xfd, 0x38, 0x9b, 0x4d, 0x5d, 0xd5,",
          "2742:  0x28, 0x34, 0xe9, 0xc8, 0xcf, 0x59, 0x7d, 0x16, 0xd4, 0x90, 0x69, 0x44, 0xa9, 0xd2, 0xb1, 0xd7,",
          "2743:  0x94, 0xfd, 0x1f, 0x63, 0x7d, 0x4c, 0xa8, 0xda, 0x13, 0xc9, 0x45, 0x00, 0xe6, 0x90, 0x6d, 0x85,",
          "2744:  0xb4, 0xe6, 0x1d, 0xc8, 0x96, 0x29, 0x96, 0x1b, 0x0a, 0x83, 0x06, 0x55, 0xf2, 0xcd, 0x76, 0xa7,",
          "2745:  0xc6, 0xbe, 0x29, 0xf4, 0x7e, 0x23, 0x30, 0x68, 0x50, 0x91, 0xe7, 0x61, 0xcc, 0x6b, 0x39, 0x75,",
          "2746:  0x9a, 0xf4, 0xff, 0xd3, 0x6c, 0x7d, 0xae, 0x71, 0xc8, 0xfd, 0xc3, 0xf9, 0x69, 0xa5, 0x10, 0x07,",
          "2747:  0xa1, 0xa4, 0x25, 0xbf, 0x69, 0xc1, 0xa4, 0x1b, 0xb4, 0x5a, 0x81, 0xbf, 0xee, 0xec, 0xd2, 0x66,",
          "2748:  0x92, 0x25, 0xbb, 0xf3, 0xa8, 0x3c, 0x86, 0x85, 0x65, 0x43, 0x98, 0x88, 0x51, 0x55, 0xee, 0xcf,",
          "2749:  0x44, 0x61, 0x4a, 0x2b, 0x73, 0x19, 0x8f, 0x1e, 0xb1, 0x8c, 0xff, 0xd0, 0x82, 0x19, 0xf1, 0xed,",
          "2750:  0x92, 0xef, 0x07, 0xb1, 0x4c, 0x5e, 0x8a, 0x34, 0x57, 0xf0, 0x88, 0x9b, 0x65, 0x48, 0x14, 0x6d,",
          "2751:  0x7b, 0x9d, 0x54, 0x73, 0xa6, 0x07, 0x8f, 0xbd, 0x4a, 0x92, 0xcb, 0x30, 0x53, 0x0b, 0x42, 0x97,",
          "2752:  0x9a, 0x1d, 0x21, 0x6d, 0x90, 0x62, 0x74, 0x29, 0x4b, 0x80, 0xbd, 0xdf, 0x90, 0x5b, 0x70, 0xce,",
          "2753:  0x00, 0x9a, 0xfd, 0x50, 0xe2, 0xdc, 0xce, 0x4b, 0x6e, 0xe7, 0x2e, 0xf5, 0xa5, 0xc2, 0x01, 0x5f,",
          "2754:  0xcf, 0xbd, 0x13, 0x66, 0x7a, 0xc6, 0xaf, 0x4f, 0x82, 0xe0, 0xac, 0x99, 0x20, 0x28, 0x1b, 0x71,",
          "2755:  0xfd, 0xdc, 0x0a, 0x9c, 0xeb, 0xdf, 0x53, 0x27, 0xe1, 0x62, 0xff, 0x8a, 0x05, 0x4f, 0x0d, 0xf0,",
          "2756:  0x84, 0x54, 0x64, 0x64, 0x0d, 0x8a, 0x8c, 0x88, 0x03, 0x45, 0xea, 0xef, 0x4b, 0x63, 0x71, 0x69,",
          "2757:  0xb8, 0x19, 0xb1, 0xea, 0xef, 0x8b, 0x81, 0x1e, 0xbf, 0x77, 0x38, 0x5f, 0x5c, 0xf5, 0xf7, 0x91,",
          "2758:  0xf1, 0xb6, 0x7f, 0x69, 0x2c, 0x15, 0x7c, 0x6d, 0x27, 0xf1, 0x3e, 0x57, 0x54, 0x86, 0x5e, 0x9b,",
          "2759:  0x39, 0xcf, 0x45, 0x23, 0xb8, 0x14, 0x59, 0x7c, 0x29, 0x8e, 0x7c, 0xc2, 0xe2, 0x89, 0xf3, 0x24,",
          "2760:  0x28, 0x95, 0xce, 0xd9, 0xa3, 0xc9, 0xe3, 0x9b, 0xe9, 0xf8, 0x04, 0x88, 0xa6, 0x74, 0xb6, 0x92,",
          "2761:  0xdb, 0x22, 0x6f, 0x95, 0x75, 0xd1, 0x92, 0xd4, 0x7a, 0x82, 0x27, 0x07, 0x00, 0x51, 0xd7, 0x77,",
          "2762:  0xb7, 0x82, 0xa6, 0xe7, 0x76, 0x65, 0xa6, 0x22, 0x87, 0xe4, 0xab, 0xe0, 0x27, 0xfc, 0x34, 0xfd,",
          "2763:  0x1b, 0x0d, 0x59, 0xe4, 0x8b, 0x16, 0xcc, 0x78, 0x75, 0x3f, 0x08, 0xe9, 0x8a, 0x57, 0xab, 0xd1,",
          "2764:  0x90, 0xfa, 0x2e, 0x4d, 0x5c, 0x99, 0xdb, 0xc3, 0x69, 0x90, 0xe4, 0x0d, 0xd7, 0xb2, 0xec, 0xf5,",
          "2765:  0x12, 0xef, 0x41, 0x61, 0xaf, 0x32, 0xa4, 0x0a, 0x23, 0x9e, 0x5f, 0x0b, 0xa4, 0x61, 0xab, 0x0c,",
          "2766:  0xa7, 0xd4, 0x9a, 0x5f, 0x0b, 0xf4, 0x5a, 0x61, 0xbf, 0x90, 0x73, 0x27, 0xeb, 0x70, 0x36, 0x94,",
          "2767:  0xc1, 0xec, 0x15, 0x2f, 0x62, 0x21, 0xc1, 0xba, 0xd7, 0xf2, 0x62, 0x6e, 0x94, 0x8a, 0x95, 0xd9,",
          "2768:  0x7b, 0x87, 0xf3, 0x67, 0xb1, 0x0f, 0x1e, 0xfb, 0x7e, 0x65, 0xbf, 0x5a, 0x4e, 0x47, 0xec, 0x22,",
          "2769:  0x1f, 0xf5, 0x41, 0x28, 0x87, 0xea, 0x04, 0x40, 0x78, 0x46, 0xeb, 0xf9, 0xf4, 0xb1, 0x4c, 0x84,",
          "2770:  0xa9, 0x54, 0x8a, 0xce, 0xf5, 0x6b, 0x89, 0xcc, 0x43, 0x62, 0x23, 0x2f, 0x97, 0x45, 0x0e, 0xf3,",
          "2771:  0x4b, 0x4a, 0xd5, 0x39, 0xbf, 0xae, 0xef, 0x22, 0x97, 0x41, 0x42, 0x18, 0x6b, 0x50, 0xa7, 0x19,",
          "2772:  0x37, 0x64, 0x4a, 0xea, 0xea, 0xb0, 0x6e, 0x31, 0xe3, 0x95, 0x4d, 0xf7, 0x09, 0x28, 0x4a, 0x49,",
          "2773:  0xe4, 0x00, 0xc6, 0x1b, 0x62, 0x10, 0xe4, 0xde, 0x7e, 0x7d, 0xd8, 0xce, 0x4d, 0x8d, 0xac, 0x5e,",
          "2774:  0xbf, 0x12, 0x80, 0x89, 0x38, 0xf2, 0x0b, 0x16, 0x80, 0x9b, 0xe4, 0xf9, 0x92, 0xe5, 0x83, 0xb9,",
          "2775:  0xd9, 0x1d, 0x95, 0x42, 0xd4, 0xae, 0x91, 0x02, 0x45, 0x68, 0x48, 0x26, 0x2f, 0xc3, 0x64, 0x48,",
          "2776:  0xdd, 0xc0, 0x77, 0xbd, 0x26, 0xad, 0x2e, 0xc5, 0x3c, 0x12, 0x38, 0x59, 0x3e, 0xf0, 0x34, 0xf3,",
          "2777:  0x4f, 0xd0, 0xe0, 0x81, 0x29, 0x8e, 0xe4, 0x55, 0x0b, 0xa6, 0x55, 0xae, 0x93, 0x0d, 0x08, 0x95,",
          "2778:  0x39, 0x9f, 0xf5, 0x9c, 0x32, 0xab, 0x9c, 0x67, 0x85, 0xb0, 0x88, 0x27, 0x0d, 0xc3, 0x8c, 0x5c,",
          "2779:  0xf2, 0x6e, 0x80, 0x60, 0x97, 0xe7, 0x15, 0x59, 0x53, 0x4b, 0x27, 0x6e, 0xea, 0xb4, 0x48, 0x91,",
          "2780:  0x27, 0x1c, 0xd0, 0xe0, 0x46, 0xae, 0x01, 0x88, 0x65, 0xb3, 0xd3, 0x6d, 0x53, 0x9e, 0xd7, 0x29,",
          "2781:  0x57, 0xde, 0x9c, 0x74, 0xfe, 0xb6, 0xc2, 0xdc, 0x3f, 0x9c, 0xef, 0x0d, 0x98, 0x79, 0x42, 0xd7,",
          "2782:  0xf8, 0x9c, 0x7c, 0x00, 0xc6, 0xa3, 0x4e, 0xab, 0xe5, 0xa8, 0xfc, 0xcc, 0x56, 0x7e, 0x3b, 0xa2,",
          "2783:  0xe0, 0xab, 0xe7, 0xa6, 0x04, 0x60, 0x22, 0xd1, 0xf6, 0x81, 0xf4, 0xd2, 0x93, 0xe7, 0x61, 0x92,",
          "2784:  0x1e, 0xc4, 0x34, 0xf4, 0x9d, 0xe6, 0x4d, 0x5c, 0x4f, 0x22, 0x7a, 0x3e, 0xf8, 0xab, 0x06, 0x1c,",
          "2785:  0x53, 0x54, 0xc4, 0x56, 0x9e, 0x77, 0x81, 0xd3, 0x83, 0xf6, 0xbc, 0x13, 0x3f, 0xdb, 0xfe, 0x9f,",
          "2786:  0x42, 0xca, 0x23, 0xd8, 0x09, 0x29, 0x25, 0x01, 0x8c, 0xfa, 0x41, 0x55, 0x19, 0xbd, 0xab, 0xf9,",
          "2787:  0x18, 0xbd, 0x8d, 0xa0, 0x6a, 0x1c, 0x4d, 0xb3, 0x5f, 0x11, 0x0a, 0x39, 0xfc, 0xec, 0x2e, 0x39,",
          "2788:  0xe4, 0xe4, 0x08, 0xe9, 0x04, 0xe5, 0x29, 0x59, 0x9d, 0xdd, 0x6d, 0x9a, 0x82, 0x30, 0x2d, 0x97,",
          "2789:  0xec, 0xc1, 0x68, 0x23, 0x88, 0x62, 0x11, 0xab, 0x0c, 0xed, 0x85, 0x5d, 0x09, 0xa2, 0x98, 0x6f,",
          "2790:  0x61, 0xaa, 0xd9, 0x0c, 0x12, 0xa1, 0x90, 0x61, 0x7f, 0xc7, 0x4a, 0xe5, 0x6f, 0x6e, 0x3b, 0xb1,",
          "2791:  0xdb, 0x58, 0xdd, 0x67, 0xf1, 0xe3, 0xb5, 0xd4, 0xd9, 0xc3, 0x8f, 0x99, 0x67, 0x0f, 0xf7, 0x0f,",
          "2792:  0xe7, 0xdf, 0x34, 0xa8, 0x56, 0xe8, 0x2e, 0xe3, 0xb0, 0xc0, 0x59, 0x18, 0xc7, 0x14, 0x1f, 0xb1,",
          "2793:  0x60, 0xc2, 0x50, 0x4f, 0x6e, 0x28, 0x39, 0xa6, 0xc1, 0x95, 0x73, 0x65, 0x00, 0xd1, 0x14, 0x69,",
          "2794:  0x7f, 0xd6, 0x82, 0xf1, 0x8a, 0xe3, 0xee, 0x05, 0xb5, 0x1a, 0x79, 0x0b, 0x94, 0xaa, 0x1d, 0x79,",
          "2795:  0xca, 0x23, 0xda, 0xa7, 0x92, 0xf7, 0x2b, 0x12, 0x8e, 0x8a, 0x82, 0xcd, 0xe1, 0x9a, 0xe3, 0xc6,",
          "2796:  0x41, 0xc8, 0xd5, 0x2e, 0x8a, 0x39, 0x7c, 0x89, 0x43, 0x50, 0x62, 0x58, 0x90, 0xde, 0x72, 0x0e,",
          "2797:  0x92, 0x8f, 0xb3, 0xc9, 0xa3, 0xeb, 0x1a, 0x85, 0x26, 0x9d, 0xfd, 0xa7, 0x65, 0x18, 0x97, 0xc7,",
          "2798:  0xa9, 0xc7, 0x3e, 0x10, 0x49, 0xbc, 0xf8, 0xc2, 0x40, 0x2f, 0x3e, 0x82, 0x31, 0x97, 0x57, 0x62,",
          "2799:  0xc9, 0xad, 0x74, 0xc8, 0x34, 0x9a, 0x54, 0x50, 0x14, 0x77, 0x69, 0xb5, 0xc4, 0x6f, 0x94, 0xa2,",
          "2800:  0xc8, 0x67, 0x2c, 0x38, 0xe5, 0x06, 0xbe, 0x4f, 0x5d, 0x6d, 0xe7, 0x47, 0xf2, 0x38, 0x30, 0x5c,",
          "2801:  0x4e, 0x33, 0xd5, 0x29, 0xa7, 0x0c, 0x02, 0xb3, 0xe2, 0xc9, 0x8b, 0x30, 0x25, 0xfa, 0xec, 0x56,",
          "2802:  0x2a, 0x3e, 0xd6, 0x47, 0xe8, 0x26, 0x12, 0xd3, 0xb4, 0x64, 0x41, 0xe4, 0x19, 0xf8, 0x99, 0x92,",
          "2803:  0x88, 0x91, 0x65, 0xfe, 0x52, 0x1d, 0x3a, 0x45, 0x68, 0x50, 0x90, 0x10, 0x48, 0x48, 0x6b, 0x21,",
          "2804:  0x8d, 0x1a, 0x48, 0x5f, 0xe9, 0xd0, 0x28, 0xe6, 0x7b, 0xcc, 0xf8, 0xc3, 0x1d, 0xaf, 0x61, 0x0f,",
          "2805:  0x27, 0xec, 0xc3, 0x9d, 0xec, 0x49, 0x47, 0xb7, 0x94, 0xc7, 0x72, 0x92, 0xc3, 0x3c, 0xd0, 0xdf,",
          "2806:  0x9d, 0x87, 0xd1, 0xa8, 0xe1, 0x84, 0x55, 0xbe, 0xb7, 0x15, 0x2b, 0x65, 0x66, 0x4b, 0xb6, 0x19,",
          "2807:  0x00, 0x05, 0x9c, 0xac, 0xc0, 0xe9, 0x4c, 0x01, 0x40, 0xc4, 0x77, 0xaf, 0x52, 0x65, 0x56, 0xb2,",
          "2808:  0x3b, 0x9d, 0x29, 0x1d, 0x88, 0xb0, 0xe7, 0x0b, 0x33, 0x08, 0x9a, 0x38, 0x22, 0x08, 0xea, 0xc2,",
          "2809:  0x58, 0x53, 0x24, 0x02, 0x26, 0xb9, 0xa9, 0xbc, 0x91, 0x4b, 0x07, 0x2c, 0x98, 0x09, 0x18, 0x35,",
          "2810:  0xdb, 0x65, 0x42, 0x41, 0x0a, 0x24, 0x9f, 0x62, 0x06, 0xcd, 0xc8, 0x1d, 0x4c, 0x71, 0x05, 0x6e,",
          "2811:  0xe5, 0xa3, 0x40, 0x4f, 0xaa, 0x44, 0x5b, 0x37, 0x23, 0x11, 0x61, 0xca, 0x9f, 0xfb, 0x71, 0x98,",
          "2812:  0x78, 0xd8, 0xbc, 0xc3, 0x4b, 0x70, 0x7a, 0xa8, 0x8c, 0xc3, 0x77, 0x2d, 0x48, 0xc6, 0x75, 0xd9,",
          "2813:  0x71, 0x1b, 0x94, 0x4d, 0x19, 0xf2, 0x12, 0x4c, 0xab, 0x30, 0x62, 0x39, 0xe8, 0xc8, 0xbc, 0x65,",
          "2814:  0x51, 0xe7, 0xa6, 0x31, 0x85, 0xc5, 0x0c, 0x35, 0x59, 0x84, 0x32, 0xeb, 0x27, 0xf1, 0xa9, 0x30,",
          "2815:  0xbb, 0x2a, 0x54, 0x59, 0xda, 0x5a, 0x93, 0x5f, 0x69, 0x1a, 0x12, 0xc0, 0x4c, 0xd3, 0x89, 0x62,",
          "2816:  0xae, 0x01, 0x8b, 0x2a, 0x1e, 0xf2, 0x70, 0x9b, 0xd7, 0x3f, 0xad, 0x67, 0x19, 0x61, 0x2f, 0x6f,",
          "2817:  0xfb, 0xeb, 0x23, 0x30, 0x95, 0xb2, 0x8c, 0x6c, 0x57, 0xe9, 0x44, 0xcc, 0xf5, 0x51, 0x29, 0x16,",
          "2818:  0xb5, 0xab, 0xdc, 0x94, 0x70, 0x54, 0x14, 0x8c, 0xba, 0xed, 0x44, 0xd1, 0xdd, 0x20, 0xac, 0x4a,",
          "2819:  0x53, 0xae, 0xa8, 0xb7, 0x24, 0x1c, 0x15, 0x05, 0xdb, 0x5f, 0x76, 0xa9, 0x13, 0xd2, 0x90, 0xd7,",
          "2820:  0x83, 0x64, 0xf7, 0x97, 0x8a, 0x46, 0xa1, 0x49, 0xc7, 0x8d, 0x72, 0xdc, 0x8c, 0x96, 0x9b, 0x1e,",
          "2821:  0xf5, 0x63, 0xa1, 0x66, 0x3e, 0x46, 0x79, 0x67, 0x7d, 0xdb, 0x64, 0xaa, 0x8d, 0x72, 0x06, 0x81,",
          "2822:  0x59, 0xf1, 0xe4, 0x63, 0x16, 0x4c, 0x39, 0x77, 0x23, 0x5d, 0x2e, 0xcc, 0xad, 0xf2, 0xd0, 0x9b,",
          "2823:  0x54, 0xaa, 0x02, 0xb9, 0x32, 0xc3, 0xcc, 0x7b, 0x0a, 0x84, 0x69, 0xa1, 0xe4, 0xf3, 0x16, 0x10,",
          "2824:  0x7a, 0x40, 0xdd, 0xad, 0x30, 0xd8, 0xf7, 0xaa, 0xc9, 0x18, 0xca, 0xf0, 0x67, 0x48, 0x6f, 0x7b,",
          "2825:  0xb5, 0x87, 0xaf, 0xb0, 0xea, 0xbd, 0x70, 0xec, 0xa3, 0x83, 0xfd, 0xb7, 0x45, 0x98, 0x30, 0x8c,",
          "2826:  0x71, 0xdf, 0x9d, 0xd5, 0xfa, 0x3e, 0xdb, 0x59, 0x0b, 0x27, 0xd8, 0x59, 0x3f, 0x0c, 0x65, 0x37,",
          "2827:  0x31, 0x14, 0xf9, 0x94, 0x37, 0x67, 0xcd, 0x8f, 0xb6, 0x15, 0x0a, 0x84, 0x5a, 0x26, 0xb9, 0x0c,",
          "2828:  0x33, 0x06, 0x1b, 0x69, 0x64, 0x46, 0xb8, 0x91, 0x51, 0x89, 0xa6, 0xa5, 0x2c, 0x01, 0xf6, 0x7e,",
          "2829:  0x43, 0x9e, 0x63, 0x5e, 0xad, 0x27, 0xdb, 0x25, 0xa2, 0x78, 0x59, 0x3a, 0xbc, 0xb4, 0xb5, 0x96,",
          "2830:  0x80, 0xd1, 0xa4, 0xb1, 0xbf, 0x6e, 0xa9, 0xc1, 0x7d, 0x0c, 0x75, 0x27, 0x77, 0xd2, 0x75, 0x27,",
          "2831:  0xab, 0xb9, 0x74, 0xf3, 0x80, 0x9a, 0x93, 0x0d, 0x18, 0x5f, 0x0e, 0x5a, 0x2d, 0xc7, 0xaf, 0x92,",
          "2832:  0x37, 0xc0, 0xb8, 0x2b, 0xfe, 0x94, 0x61, 0x22, 0x2f, 0x44, 0x90, 0x58, 0x4c, 0x70, 0xe4, 0x69,",
          "2833:  0x18, 0x71, 0xc2, 0x7a, 0x12, 0x1a, 0xf2, 0x43, 0xb1, 0xa5, 0xb0, 0x1e, 0x21, 0x87, 0xda, 0x9f,",
          "2834:  0x2b, 0x00, 0x2c, 0x07, 0xad, 0xb6, 0x13, 0xd2, 0xea, 0x4e, 0xf0, 0x7f, 0x39, 0x62, 0x11, 0x31,",
          "2835:  0x7c, 0xd2, 0x02, 0xc2, 0x7a, 0x25, 0xf0, 0xa9, 0xaf, 0x0f, 0xe2, 0xd8, 0x7e, 0xe9, 0x26, 0x50,",
          "2836:  0xb9, 0xf9, 0xe8, 0x35, 0x90, 0x20, 0x50, 0xd3, 0x1c, 0x23, 0x8a, 0x78, 0x26, 0xd9, 0xf1, 0x8b,",
          "2837:  0xe9, 0x1a, 0x09, 0x7e, 0xae, 0x2d, 0x1d, 0x00, 0xfb, 0xcb, 0x05, 0x38, 0x27, 0xcc, 0xd6, 0x75,",
          "2838:  0xc7, 0x77, 0xea, 0xb4, 0xc5, 0xb4, 0x3a, 0xee, 0x69, 0x83, 0xcb, 0xdc, 0x57, 0x2f, 0x29, 0x89,",
          "2839:  0x18, 0x76, 0x72, 0x8a, 0x49, 0x25, 0xa6, 0xd1, 0x9a, 0xef, 0xc5, 0xc8, 0x99, 0x93, 0x08, 0x4a,",
          "2840:  0xc9, 0x85, 0x15, 0x69, 0x6c, 0x72, 0x12, 0xa4, 0xd6, 0xdd, 0x65, 0xc9, 0x1e, 0x95, 0x20, 0xb6,",
          "2841:  0xb9, 0x37, 0x03, 0x77, 0x0f, 0x69, 0x3b, 0xe0, 0x86, 0xa5, 0x64, 0xac, 0x52, 0x09, 0x47, 0x45,",
          "2842:  0x61, 0x7f, 0xd9, 0x82, 0xac, 0xc9, 0xe5, 0xd1, 0xa0, 0x28, 0x81, 0xcc, 0x46, 0x83, 0xe9, 0x8a,",
          "2843:  0xc5, 0x13, 0x14, 0x00, 0xbe, 0x17, 0x26, 0x9c, 0x38, 0xa6, 0xad, 0xb6, 0x08, 0x4d, 0x8a, 0x0f,",
          "2844:  0x97, 0xfe, 0xba, 0x1e, 0x54, 0xbd, 0x9a, 0xc7, 0x43, 0x12, 0x93, 0x9d, 0x7d, 0x03, 0x4a, 0xc9,",
          "2845:  0x89, 0xcf, 0x31, 0x86, 0xfe, 0x99, 0x94, 0x3b, 0x39, 0x60, 0x72, 0xdd, 0x2f, 0x40, 0x9f, 0x3d,",
          "2846:  0x93, 0x35, 0x59, 0x5b, 0x97, 0x54, 0x93, 0x4f, 0x66, 0x61, 0xc8, 0x81, 0x38, 0xed, 0x12, 0x79,",
          "2847:  0x96, 0x77, 0xe5, 0xbd, 0xe7, 0xeb, 0x03, 0xb0, 0x09, 0xa9, 0x9f, 0x3a, 0x04, 0x23, 0x17, 0x01,",
          "2848:  0xf4, 0xa6, 0x20, 0x0b, 0x47, 0x54, 0xa6, 0x56, 0xef, 0x1d, 0x68, 0x50, 0x31, 0x17, 0xd0, 0xf3,",
          "2849:  0xa3, 0xd8, 0x69, 0x36, 0xaf, 0x78, 0x7e, 0x2c, 0x63, 0x59, 0x65, 0x30, 0xd6, 0x34, 0x0a, 0x4d,",
          "2850:  0xba, 0xb9, 0xb7, 0x19, 0xe3, 0x72, 0x12, 0xb7, 0xfe, 0x93, 0x05, 0x98, 0xbe, 0xec, 0x77, 0xb6,",
          "2851:  0x2e, 0x6f, 0x75, 0x76, 0x9b, 0x9e, 0x7b, 0x8d, 0x76, 0xd9, 0xa0, 0xed, 0xd1, 0xee, 0xda, 0x8a,",
          "2852:  0xec, 0x76, 0x35, 0x68, 0xd7, 0x18, 0x10, 0x05, 0x8e, 0xa9, 0x59, 0xf3, 0xfc, 0x3a, 0x0d, 0xdb,",
          "2853:  0xa1, 0x27, 0x7d, 0x77, 0x43, 0xcd, 0x4b, 0x1a, 0x85, 0x26, 0x1d, 0xe3, 0x1d, 0xdc, 0xf5, 0x69,",
          "2854:  0x98, 0xb5, 0x36, 0x9b, 0x0c, 0x88, 0x02, 0xc7, 0x88, 0xe2, 0xb0, 0x13, 0xc5, 0xb2, 0xc7, 0x14,",
          "2855:  0xd1, 0x0e, 0x03, 0xa2, 0xc0, 0xb1, 0xe9, 0x11, 0x75, 0x76, 0x79, 0x16, 0x36, 0x73, 0x1e, 0xbe,",
          "2856:  0x2d, 0xc0, 0x98, 0xe0, 0x19, 0xe9, 0x1e, 0xed, 0xae, 0xb0, 0xbd, 0x37, 0x53, 0x01, 0x73, 0x4d,",
          "2857:  0x80, 0x31, 0xc1, 0xdb, 0xff, 0x64, 0x01, 0x49, 0x77, 0xc7, 0x63, 0xd8, 0xbe, 0x5f, 0x49, 0x6f,",
          "2858:  0xdf, 0x43, 0x26, 0xcc, 0xd3, 0xea, 0x0f, 0xd8, 0xc5, 0x7f, 0xdd, 0x82, 0x49, 0xf3, 0xec, 0x84,",
          "2859:  0xd4, 0x33, 0x86, 0x68, 0x33, 0x6d, 0x88, 0xee, 0x1f, 0xce, 0xff, 0x44, 0xbf, 0xdb, 0x97, 0x75,",
          "2860:  0x2f, 0x0e, 0xda, 0xd1, 0x5b, 0xa9, 0x5f, 0xf7, 0x7c, 0xca, 0x33, 0x83, 0xe2, 0xcc, 0x25, 0x75,",
          "2861:  0x30, 0xb3, 0x1c, 0x54, 0xe9, 0x43, 0x58, 0x32, 0xfb, 0x36, 0xcc, 0xf4, 0x94, 0x3d, 0x1d, 0xc3,",
          "2862:  0xe8, 0x1c, 0x59, 0xd4, 0x6a, 0x7f, 0xca, 0x82, 0xa9, 0x54, 0xd5, 0x58, 0x4e, 0xa6, 0x8c, 0xaf,",
          "2863:  0x8a, 0x80, 0x1f, 0xbb, 0x85, 0x9e, 0x2f, 0xf2, 0x72, 0x25, 0x63, 0x55, 0x68, 0x14, 0x9a, 0x74,",
          "2864:  0xf6, 0x67, 0x0b, 0x50, 0x4a, 0x32, 0xb8, 0xc7, 0x50, 0xe5, 0x13, 0x16, 0x4c, 0xa9, 0x40, 0x9a,",
          "2865:  0xbb, 0xd7, 0xb9, 0x94, 0xfd, 0x30, 0x0d, 0xd4, 0xd9, 0x2c, 0x73, 0xaf, 0x95, 0x9f, 0x8f, 0xa6,",
          "2866:  0x30, 0x4c, 0xcb, 0x26, 0xb7, 0x00, 0xa2, 0x6e, 0x14, 0xd3, 0x96, 0xe1, 0xe8, 0xdb, 0xc6, 0xea,",
          "2867:  0x58, 0x70, 0x83, 0x90, 0xb2, 0xb5, 0xb0, 0x11, 0x54, 0xe9, 0xb6, 0xa2, 0xd4, 0x86, 0x50, 0xc3,",
          "2868:  0xd0, 0xe0, 0x64, 0xff, 0x6e, 0x01, 0x4e, 0x67, 0x55, 0x22, 0xef, 0x81, 0xc9, 0x44, 0xba, 0x71,",
          "2869:  0xe9, 0x34, 0x49, 0x5b, 0x4f, 0xa2, 0x81, 0xbb, 0x7f, 0x38, 0x3f, 0xdf, 0x7b, 0xeb, 0x76, 0xc1,",
          "2870:  0x24, 0xc1, 0x14, 0x33, 0x91, 0xcd, 0x90, 0x69, 0xb7, 0x4a, 0x77, 0xa9, 0xdd, 0x96, 0x29, 0x09,",
          "2871:  0x23, 0x9b, 0x61, 0x62, 0x31, 0x43, 0x4d, 0xb6, 0xe0, 0xac, 0x01, 0xd9, 0xa0, 0x5e, 0xbd, 0xb1,",
          "2872:  0x1b, 0x84, 0xe2, 0x76, 0x43, 0xb1, 0xf2, 0xb4, 0xe4, 0x72, 0x16, 0xfb, 0xd0, 0x60, 0xdf, 0x2f,",
          "2873:  0x99, 0x83, 0xe1, 0x3a, 0x6d, 0xc7, 0xf5, 0xe2, 0xae, 0x8c, 0x5c, 0x94, 0x1d, 0x59, 0x96, 0x70,",
          "2874:  0x54, 0x14, 0xf6, 0x75, 0x18, 0x39, 0xe6, 0x0c, 0x3a, 0xd6, 0xbe, 0x7c, 0x03, 0x4a, 0x8c, 0x1d,",
          "2875:  0xb3, 0x1b, 0x79, 0xb1, 0x0c, 0xa0, 0x94, 0x5c, 0x76, 0x21, 0x36, 0x14, 0x3d, 0x27, 0x49, 0x18,",
          "2876:  0xa9, 0x66, 0xad, 0x45, 0x51, 0x87, 0x7b, 0x1d, 0x0c, 0x49, 0x9e, 0x81, 0x22, 0x3d, 0x68, 0x67,",
          "2877:  0x33, 0x43, 0xab, 0x07, 0x6d, 0x2f, 0xa4, 0x11, 0x23, 0xa2, 0x07, 0x6d, 0x32, 0x07, 0x05, 0xaf,",
          "2878:  0x2a, 0x37, 0x14, 0x90, 0x34, 0x85, 0xb5, 0x15, 0x2c, 0x78, 0x55, 0xfb, 0x00, 0xca, 0xea, 0x76,",
          "2879:  0x0d, 0xd9, 0x4b, 0xec, 0xac, 0x95, 0xc7, 0x91, 0x4b, 0xc2, 0x77, 0x80, 0x85, 0xed, 0x00, 0xe8,",
          "2880:  0x62, 0xc1, 0xbc, 0xec, 0xcb, 0x05, 0x18, 0x71, 0x03, 0x59, 0xda, 0x5b, 0xd2, 0x6c, 0xb8, 0x81,",
          "2881:  0xe5, 0x18, 0xfb, 0x36, 0x4c, 0x5f, 0xf3, 0x83, 0xbb, 0x3e, 0xdb, 0xf8, 0x2e, 0x79, 0xb4, 0x59,",
          "2882:  0x65, 0x8c, 0x6b, 0xec, 0x8f, 0xec, 0x76, 0xce, 0xb1, 0x28, 0x70, 0xea, 0x0a, 0x4a, 0x61, 0xd0,",
          "2883:  0x15, 0x14, 0xfb, 0x17, 0x2d, 0x38, 0x9d, 0x2d, 0x0c, 0xfc, 0x9e, 0xc5, 0x23, 0x1f, 0x61, 0xca,",
          "2884:  0x24, 0x95, 0x67, 0x9b, 0x6d, 0x71, 0xc6, 0xfd, 0x02, 0x4c, 0xee, 0x76, 0xbc, 0x66, 0x55, 0xfe,",
          "2885:  0x96, 0xfa, 0xa8, 0xda, 0xba, 0x8a, 0x81, 0xc3, 0x14, 0x25, 0xf3, 0xd3, 0x76, 0x3d, 0xdf, 0x09,",
          "2886:  0xbb, 0x5b, 0x7a, 0xdf, 0x50, 0xe6, 0xa9, 0xa2, 0x30, 0x68, 0x50, 0xd9, 0x7f, 0x5d, 0x04, 0x7d,",
          "2887:  0xcd, 0x87, 0x78, 0xb2, 0x84, 0xc2, 0xca, 0x23, 0xc9, 0xb5, 0xdd, 0xf5, 0x5d, 0x7d, 0xa1, 0xa8,",
          "2888:  0x94, 0xa9, 0xa0, 0xf8, 0xb8, 0xc5, 0x3c, 0x44, 0x2f, 0xf6, 0x1c, 0x6e, 0x2c, 0x64, 0x58, 0xb5,",
          "2889:  0x95, 0xd3, 0x29, 0xfb, 0x9a, 0xe0, 0x1c, 0x84, 0xa6, 0xcf, 0xa9, 0x84, 0xa1, 0x29, 0x99, 0xbc,",
          "2890:  0x2c, 0xcf, 0x25, 0x8a, 0xb9, 0x15, 0xe0, 0x94, 0x32, 0x87, 0x11, 0x6d, 0x18, 0x0d, 0x69, 0x1c,",
          "2891:  0x26, 0xa5, 0x4f, 0xd7, 0x86, 0x3d, 0xa5, 0x8d, 0xc3, 0xee, 0x76, 0xcc, 0x42, 0xb7, 0xba, 0xe1,",
          "2892:  0x18, 0x71, 0x30, 0x0a, 0x41, 0x76, 0x04, 0xa4, 0xb7, 0x2f, 0x4e, 0x98, 0xf3, 0x5d, 0x84, 0xb2,",
          "2893:  0xd3, 0x89, 0x83, 0x16, 0xeb, 0x26, 0x3e, 0x3c, 0x25, 0x23, 0xab, 0x9d, 0x20, 0x50, 0xd3, 0xd8,",
          "2894:  0xaf, 0x8d, 0x42, 0xa6, 0xa6, 0x81, 0x1c, 0x98, 0x57, 0xd4, 0xac, 0x7c, 0xaf, 0xa8, 0x29, 0x65,",
          "2895:  0xfa, 0x5d, 0x53, 0x23, 0x75, 0x18, 0x6d, 0x37, 0x9c, 0x28, 0x59, 0xa3, 0x37, 0x92, 0x6e, 0xda,",
          "2896:  0x62, 0xc0, 0xfb, 0x87, 0xf3, 0x3f, 0x79, 0x3c, 0x3f, 0x90, 0xcd, 0xd5, 0x45, 0x51, 0xe0, 0xa9,",
          "2897:  0x45, 0x73, 0x1e, 0x28, 0xf8, 0x9b, 0x9e, 0x60, 0xf1, 0x88, 0x98, 0xf6, 0xa3, 0x96, 0x28, 0x84,",
          "2898:  0x43, 0x1a, 0x75, 0x9a, 0xb1, 0x9c, 0x0d, 0x37, 0x72, 0x5c, 0x65, 0x82, 0xb1, 0xae, 0x88, 0x13,",
          "2899:  0xbf, 0xd1, 0x10, 0x4a, 0xde, 0x03, 0xe5, 0x28, 0x76, 0xc2, 0xf8, 0x21, 0xeb, 0x67, 0x54, 0xa7,",
          "2900:  0x6f, 0x27, 0x4c, 0x50, 0xf3, 0x23, 0xef, 0x06, 0xa8, 0x79, 0xbe, 0x17, 0x35, 0x1e, 0xf2, 0x38,",
          "2901:  0x91, 0x2b, 0x7e, 0x49, 0x71, 0x40, 0x83, 0x1b, 0xb3, 0x6e, 0x7c, 0x6e, 0x8b, 0x04, 0x68, 0x89,",
          "2902:  0xef, 0xa5, 0xca, 0xba, 0xa1, 0xc2, 0xa0, 0x41, 0x65, 0x7f, 0x08, 0xce, 0x64, 0xaf, 0x87, 0xcb,",
          "2903:  0xd0, 0xb0, 0x1e, 0x06, 0x9d, 0x76, 0x76, 0x2f, 0xe1, 0xd7, 0x87, 0x51, 0xe0, 0x98, 0x8d, 0xdf,",
          "2904:  0xf3, 0xfc, 0x6a, 0xd6, 0xc6, 0x5f, 0xf3, 0xfc, 0x2a, 0x72, 0xcc, 0x31, 0xee, 0xee, 0xfd, 0xb1,",
          "2905:  0x05, 0x17, 0x8e, 0xba, 0xc5, 0xce, 0xc2, 0xfe, 0xbb, 0x4e, 0xe8, 0xcb, 0x7b, 0x39, 0xdc, 0x76,",
          "2906:  0xdc, 0x76, 0x42, 0x1f, 0x39, 0x94, 0x74, 0x61, 0x4c, 0xd4, 0x0c, 0x4a, 0xef, 0xf8, 0x46, 0xbe,",
          "2907:  0x77, 0xea, 0x59, 0x6c, 0xa5, 0xb2, 0x35, 0xa2, 0x5e, 0x11, 0xa5, 0x40, 0xfb, 0x35, 0x0b, 0xc8,",
          "2908:  0xe6, 0x3e, 0x0d, 0x43, 0xaf, 0x6a, 0x54, 0x39, 0x92, 0xe7, 0x61, 0xf2, 0xce, 0xf6, 0xe6, 0xc6,",
          "2909:  0x56, 0xe0, 0xf9, 0xbc, 0x58, 0xdf, 0xa8, 0xad, 0xb9, 0x6a, 0xc0, 0x31, 0x45, 0x45, 0x96, 0x61,",
          "2910:  0xe6, 0xce, 0x2b, 0x6c, 0xcb, 0x59, 0x3d, 0x68, 0x87, 0x34, 0x8a, 0xd4, 0x4b, 0x14, 0x65, 0x71,",
          "2911:  0x8c, 0x75, 0xf5, 0x46, 0x06, 0x89, 0xbd, 0xf4, 0xf6, 0x97, 0x0a, 0x30, 0x61, 0x3c, 0xdc, 0x70,",
          "2912:  0x0c, 0x7f, 0x24, 0xf3, 0xd6, 0x44, 0xe1, 0x98, 0x6f, 0x4d, 0x3c, 0x0b, 0xa5, 0x76, 0xd0, 0xf4,",
          "2913:  0x5c, 0x4f, 0x55, 0xe1, 0x4f, 0xf2, 0xb3, 0x2e, 0x09, 0x43, 0x85, 0x25, 0x77, 0xa1, 0xac, 0x6e,",
          "2914:  0x60, 0xcb, 0xba, 0xbc, 0xbc, 0x3c, 0x32, 0xb5, 0xd6, 0xf4, 0xcd, 0x6a, 0x2d, 0x8b, 0xd8, 0x30,",
          "2915:  0xc6, 0x27, 0x6a, 0x92, 0xc9, 0xe7, 0x85, 0x1e, 0x7c, 0x06, 0x47, 0x28, 0x31, 0xf6, 0xbf, 0x8e,",
          "2916:  0x42, 0x19, 0x69, 0x3b, 0x58, 0x0e, 0x69, 0x35, 0x22, 0xaf, 0x87, 0x62, 0x27, 0x6c, 0xca, 0xce,",
          "2917:  0x52, 0x69, 0x9e, 0x9b, 0xb8, 0x8e, 0x0c, 0x9e, 0xda, 0x1d, 0x0a, 0x27, 0x3a, 0x11, 0x2c, 0x1e,",
          "2918:  0x79, 0x22, 0xf8, 0x22, 0x4c, 0x45, 0x51, 0x63, 0x2b, 0xf4, 0xf6, 0x9d, 0x98, 0xcd, 0x39, 0x99,",
          "2919:  0x13, 0xd1, 0x47, 0x30, 0xdb, 0x57, 0x34, 0x12, 0xd3, 0xb4, 0xe4, 0x32, 0xcc, 0xe8, 0x73, 0x39,",
          "2920:  0x1a, 0xc6, 0x3c, 0x05, 0x22, 0xb2, 0x25, 0xea, 0x04, 0x44, 0x9f, 0xe4, 0x49, 0x02, 0xec, 0xfd,",
          "2921:  0x86, 0xac, 0xc0, 0xe9, 0x14, 0x90, 0x29, 0x22, 0x52, 0x29, 0xea, 0xcc, 0x3f, 0xc5, 0x87, 0xe9,",
          "2922:  0xd2, 0xf3, 0x05, 0xb9, 0x0e, 0x67, 0xc4, 0xf8, 0xf2, 0x9b, 0xfb, 0xaa, 0x45, 0xe3, 0x9c, 0xd1,",
          "2923:  0xff, 0x93, 0x8c, 0xce, 0x5c, 0xee, 0x25, 0xc1, 0x7e, 0xdf, 0xb1, 0x19, 0xaa, 0xc0, 0x6b, 0x2b,",
          "2924:  0xd2, 0xb0, 0xa9, 0x19, 0xaa, 0xd8, 0xac, 0x55, 0xd1, 0xa4, 0x23, 0xef, 0x82, 0xa7, 0xf4, 0x4f,",
          "2925:  0x91, 0x41, 0x13, 0xbb, 0xfd, 0x8a, 0x2c, 0x79, 0x98, 0x97, 0x2c, 0x9e, 0xba, 0xdc, 0x97, 0xac,",
          "2926:  0x8a, 0x83, 0xbe, 0x27, 0xbb, 0x30, 0xa7, 0x50, 0xab, 0x6c, 0xf5, 0xb6, 0x43, 0x2f, 0xa2, 0x15,",
          "2927:  0x27, 0xa2, 0x37, 0xc3, 0x26, 0x2f, 0x92, 0x28, 0xeb, 0xd7, 0x27, 0x2e, 0x7b, 0xf1, 0x95, 0x7e,",
          "2928:  0x94, 0xb8, 0x8e, 0x0f, 0xe0, 0xc2, 0x9c, 0x0b, 0xea, 0x3b, 0xbb, 0x4d, 0xba, 0xb9, 0xbc, 0xc6,",
          "2929:  0x4b, 0x27, 0x0c, 0xe7, 0x62, 0x35, 0x41, 0xa0, 0xa6, 0x51, 0xae, 0xfd, 0xe4, 0x40, 0xd7, 0xfe,",
          "2930:  0x9b, 0x16, 0x4c, 0xa9, 0xc9, 0xfe, 0x18, 0xf2, 0x5d, 0xcd, 0x74, 0xbe, 0xeb, 0xf2, 0xb0, 0x5e,",
          "2931:  0x9d, 0xd4, 0x7c, 0x40, 0x20, 0xf6, 0x9d, 0x32, 0x00, 0x7f, 0xcf, 0xc7, 0xe3, 0x25, 0xb9, 0x17,",
          "2932:  0x60, 0x24, 0xa4, 0xed, 0x20, 0x6b, 0xf9, 0x78, 0xae, 0x9e, 0x63, 0xbe, 0x7f, 0x97, 0x73, 0xbf,",
          "2933:  0x13, 0xe2, 0xd1, 0xef, 0xed, 0x09, 0xf1, 0x36, 0x3c, 0xe9, 0xf9, 0x11, 0x75, 0x3b, 0xa1, 0xdc,",
          "2934:  0xe8, 0xae, 0x04, 0x91, 0xb2, 0x0e, 0xa5, 0xca, 0xeb, 0x25, 0xa3, 0x27, 0xd7, 0xfa, 0x11, 0x61,",
          "2935:  0xff, 0x6f, 0x59, 0x97, 0x26, 0x08, 0x79, 0xf7, 0x47, 0xa7, 0x07, 0x24, 0x1c, 0x15, 0x85, 0x5e,",
          "2936:  0x10, 0xeb, 0xb5, 0xe4, 0x72, 0x4f, 0x66, 0x41, 0xac, 0x5f, 0xda, 0x46, 0x4d, 0xd3, 0xdf, 0x2a,",
          "2937:  0x96, 0x73, 0xb2, 0x8a, 0x70, 0x62, 0xab, 0x98, 0xac, 0xcf, 0x89, 0x81, 0xaf, 0x3f, 0x24, 0x9b,",
          "2938:  0xf5, 0xe4, 0xc0, 0xcd, 0xfa, 0x25, 0x98, 0xf6, 0xfc, 0x06, 0x0d, 0xbd, 0x98, 0x56, 0xf9, 0x5a,",
          "2939:  0x98, 0x9d, 0xe2, 0x1d, 0xa1, 0x32, 0x57, 0x6b, 0x29, 0x2c, 0x66, 0xa8, 0xd3, 0x46, 0x65, 0xfa,",
          "2940:  0x18, 0x46, 0x65, 0x80, 0x29, 0x3f, 0x95, 0x8f, 0x29, 0x3f, 0x3d, 0xbc, 0x29, 0x9f, 0x79, 0xa4,",
          "2941:  0xa6, 0x9c, 0xe4, 0x62, 0xca, 0x9f, 0x81, 0xd1, 0x76, 0x18, 0x1c, 0x74, 0x67, 0xcf, 0xa4, 0xbd,",
          "2942:  0xe9, 0x2d, 0x06, 0x44, 0x81, 0x33, 0x0b, 0xe5, 0xce, 0x3e, 0xb8, 0x50, 0xce, 0x7e, 0xb5, 0x00,",
          "2943:  0x4f, 0x6a, 0x4b, 0xc7, 0xe6, 0x97, 0x57, 0x63, 0x6b, 0x9d, 0xdf, 0xc0, 0x14, 0xc5, 0x19, 0x46,",
          "2944:  0xd2, 0x54, 0xe7, 0x5f, 0x15, 0x06, 0x0d, 0x2a, 0x9e, 0x7b, 0xa4, 0x21, 0x2f, 0xef, 0xcd, 0x9a,",
          "2945:  0xc1, 0x65, 0x09, 0x47, 0x45, 0xc1, 0x1f, 0x03, 0xa4, 0x61, 0x2c, 0xcf, 0x5e, 0xb2, 0x95, 0x4b,",
          "2946:  0xcb, 0x1a, 0x85, 0x26, 0x1d, 0x73, 0x17, 0xdd, 0x64, 0x09, 0x32, 0x53, 0x38, 0x29, 0xdc, 0x45,",
          "2947:  0xb5, 0xea, 0x14, 0x36, 0x51, 0x87, 0x27, 0x99, 0x47, 0x7b, 0xd5, 0xe1, 0x49, 0x03, 0x45, 0x61,",
          "2948:  0xff, 0xb7, 0x05, 0xaf, 0xeb, 0xdb, 0x15, 0x8f, 0x61, 0x7b, 0x3b, 0x48, 0x6f, 0x6f, 0xdb, 0xc3,",
          "2949:  0x6f, 0x6f, 0x3d, 0xad, 0x18, 0xb0, 0xd5, 0xfd, 0x8d, 0x05, 0xd3, 0x9a, 0xfe, 0x31, 0x34, 0xd5,",
          "2950:  0xcb, 0xf5, 0x59, 0x3f, 0xad, 0xba, 0x28, 0x3b, 0x4d, 0xb5, 0xed, 0x9b, 0xbc, 0x6d, 0x22, 0xf6,",
          "2951:  0x5a, 0x72, 0x93, 0x77, 0x73, 0x8e, 0x08, 0x62, 0xba, 0x30, 0xc6, 0xaf, 0x29, 0x47, 0xf9, 0xc4,",
          "2952:  0x80, 0x69, 0xf9, 0x3c, 0x0d, 0xaa, 0x63, 0x40, 0xfe, 0x33, 0x42, 0x29, 0x90, 0x17, 0x9f, 0x7b,",
          "2953:  0x11, 0xb3, 0x97, 0x55, 0x99, 0xae, 0xd5, 0xc5, 0xe7, 0x12, 0x8e, 0x8a, 0xc2, 0x6e, 0xc1, 0x6c,",
          "2954:  0x9a, 0xf9, 0x0a, 0xad, 0xf1, 0x54, 0xdb, 0xb1, 0x9a, 0xb9, 0x08, 0x65, 0x87, 0x7f, 0xb5, 0xde,",
          "2955:  0x71, 0xb2, 0x8f, 0xe7, 0x2c, 0x25, 0x08, 0xd4, 0x34, 0xf6, 0xef, 0x58, 0x70, 0xa6, 0x4f, 0x63,",
          "2956:  0x72, 0x4c, 0x53, 0xc7, 0xda, 0x0a, 0x0c, 0x78, 0xd0, 0xa8, 0x4a, 0x6b, 0x4e, 0x92, 0xcc, 0x31,",
          "2957:  0xac, 0xda, 0x8a, 0x00, 0x63, 0x82, 0xb7, 0xff, 0xcd, 0x82, 0x53, 0x69, 0x5d, 0x23, 0x72, 0x15,",
          "2958:  0x88, 0x68, 0xcc, 0x8a, 0x17, 0xb9, 0xc1, 0x3e, 0x0d, 0xbb, 0xac, 0xe5, 0x42, 0xeb, 0x39, 0xc9,",
          "2959:  0x89, 0x2c, 0xf5, 0x50, 0x60, 0x9f, 0xaf, 0x78, 0x8d, 0x6f, 0x55, 0xf5, 0x76, 0x32, 0x53, 0x6e,",
          "2960:  0xe5, 0x39, 0x53, 0xf4, 0x60, 0x9a, 0x11, 0xb4, 0x12, 0x89, 0xa6, 0x7c, 0xfb, 0x5b, 0x23, 0xa0,",
          "2961:  0xce, 0xb1, 0x78, 0xda, 0x20, 0xa7, 0xa4, 0x4b, 0xea, 0x85, 0xa5, 0xe2, 0x09, 0x5e, 0x58, 0x1a,",
          "2962:  0x79, 0x50, 0x8e, 0x40, 0x3c, 0xf7, 0xa3, 0x7d, 0x51, 0xc3, 0xe8, 0xef, 0x68, 0x14, 0x9a, 0x74,",
          "2963:  0x4c, 0x93, 0xa6, 0xb7, 0x4f, 0xc5, 0x47, 0x63, 0x69, 0x4d, 0xd6, 0x13, 0x04, 0x6a, 0x1a, 0xa6,",
          "2964:  0x49, 0xd5, 0xab, 0xd5, 0x64, 0xa4, 0xa8, 0x34, 0x61, 0xbd, 0x83, 0x1c, 0xc3, 0x28, 0x1a, 0x41,",
          "2965:  0xb0, 0x27, 0xfd, 0x3f, 0x45, 0x71, 0x25, 0x08, 0xf6, 0x90, 0x63, 0x98, 0xc7, 0xe2, 0x07, 0x61,",
          "2966:  0xcb, 0x69, 0x7a, 0xef, 0xa7, 0x55, 0x25, 0x45, 0xfa, 0x7d, 0xca, 0x63, 0xd9, 0xe8, 0x25, 0xc1,",
          "2967:  0x7e, 0xdf, 0xb1, 0x19, 0xd8, 0x0e, 0x69, 0xd5, 0x73, 0x63, 0x93, 0x1b, 0xa4, 0x67, 0xe0, 0x56,",
          "2968:  0x0f, 0x05, 0xf6, 0xf9, 0x8a, 0x2c, 0xc1, 0xa9, 0xe4, 0x1c, 0x32, 0xa9, 0x15, 0x11, 0xce, 0xa0,",
          "2969:  0xf2, 0xc3, 0x31, 0x8d, 0xc6, 0x2c, 0x3d, 0xb3, 0x36, 0x2d, 0x59, 0xb1, 0xc3, 0xdd, 0x44, 0xc3,",
          "2970:  0xda, 0x24, 0x95, 0x3c, 0xa8, 0x28, 0xec, 0xdf, 0x2b, 0xb0, 0xdd, 0x71, 0xc0, 0x2d, 0xdc, 0xc7,",
          "2971:  0x96, 0xe4, 0x4b, 0xcf, 0xc8, 0x91, 0x63, 0xcc, 0xc8, 0xe7, 0x61, 0xf2, 0x4e, 0x14, 0xf8, 0x2a,",
          "2972:  0x81, 0x36, 0x3a, 0x30, 0x81, 0x66, 0x50, 0xf5, 0x4f, 0xa0, 0x8d, 0x9d, 0x30, 0x81, 0xf6, 0xe7,",
          "2973:  0xa3, 0x70, 0x4e, 0x1d, 0x1d, 0xd3, 0xf8, 0x6e, 0x10, 0xee, 0x79, 0x7e, 0x9d, 0x1f, 0xb7, 0x7e,",
          "2974:  0xd1, 0x82, 0x49, 0x31, 0xbd, 0xe5, 0x7b, 0x05, 0xe2, 0x78, 0xb1, 0x96, 0xd3, 0x95, 0xb2, 0x94,",
          "2975:  0xb0, 0x85, 0x1d, 0x43, 0x50, 0xe6, 0xf1, 0x08, 0x13, 0x85, 0x29, 0x8d, 0xc8, 0x07, 0x01, 0x92,",
          "2976:  0x77, 0xb9, 0x6a, 0x39, 0xbd, 0x4e, 0x96, 0xe8, 0x87, 0xb4, 0xa6, 0x5d, 0xc9, 0x1d, 0x25, 0x04,",
          "2977:  0x0d, 0x81, 0xe4, 0x55, 0x4b, 0x5d, 0xe1, 0x10, 0x67, 0x45, 0x2f, 0x3f, 0x92, 0xbe, 0x39, 0xce,",
          "2978:  0x8d, 0x0e, 0x84, 0x71, 0xcf, 0xaf, 0xb3, 0x61, 0x95, 0x39, 0xc7, 0x37, 0xf5, 0x2b, 0x55, 0x58,",
          "2979:  0x0f, 0x9c, 0x6a, 0xc5, 0x69, 0x3a, 0xbe, 0x4b, 0xc3, 0x35, 0x41, 0x6e, 0xbe, 0x8e, 0xc4, 0x01,",
          "2980:  0x98, 0x30, 0xea, 0xb9, 0x33, 0x39, 0x7a, 0x9c, 0x3b, 0x93, 0x73, 0xef, 0x84, 0x99, 0x9e, 0xc1,",
          "2981:  0x3c, 0xd1, 0x8d, 0x8e, 0x87, 0xbf, 0x0c, 0x62, 0xff, 0xc9, 0x98, 0xde, 0x63, 0x36, 0x82, 0xaa,",
          "2982:  0xb8, 0xb9, 0x17, 0xea, 0x11, 0x95, 0xae, 0x62, 0x8e, 0x53, 0xc4, 0x78, 0x61, 0x49, 0x01, 0xd1,",
          "2983:  0x14, 0xc9, 0xe6, 0x68, 0xdb, 0x09, 0xa9, 0xff, 0xa8, 0xe7, 0xe8, 0x96, 0x12, 0x82, 0x86, 0x40,",
          "2984:  0xd2, 0x48, 0x1d, 0x66, 0x5e, 0x1a, 0xfe, 0x30, 0x93, 0x79, 0xaf, 0x7d, 0x6f, 0x58, 0x7d, 0xc6,",
          "2985:  0x82, 0x69, 0x3f, 0x35, 0x73, 0xe5, 0x81, 0xd6, 0xce, 0xa3, 0x58, 0x15, 0xe2, 0xc6, 0x74, 0x1a,",
          "2986:  0x86, 0x19, 0xf9, 0xfd, 0x76, 0xa0, 0xd1, 0x13, 0xee, 0x40, 0xfa, 0x0a, 0xf0, 0xd8, 0xa0, 0x2b,",
          "2987:  0xc0, 0xc4, 0x57, 0x97, 0xff, 0xc7, 0x73, 0xbf, 0xfc, 0x0f, 0x7d, 0x2e, 0xfe, 0xdf, 0x86, 0xb2,",
          "2988:  0x1b, 0x52, 0x27, 0x7e, 0xc8, 0x7b, 0xe0, 0xfc, 0x4d, 0xbb, 0xe5, 0x84, 0x01, 0x6a, 0x5e, 0xf6,",
          "2989:  0x5f, 0x15, 0xe1, 0x74, 0xd2, 0x23, 0xc9, 0x41, 0x0f, 0xdb, 0xce, 0x84, 0x5c, 0xed, 0x8b, 0xaa,",
          "2990:  0xed, 0xec, 0x4a, 0x82, 0x40, 0x4d, 0xc3, 0xdc, 0xa7, 0x4e, 0x44, 0x37, 0xdb, 0xd4, 0x5f, 0xf7,",
          "2991:  0x76, 0x23, 0xde, 0xe3, 0x46, 0xb5, 0xd8, 0x4d, 0x8d, 0x42, 0x93, 0x8e, 0xf9, 0xce, 0xc2, 0x8d,",
          "2992:  0x8d, 0xb2, 0xe7, 0xa6, 0xd2, 0x3d, 0xc6, 0x04, 0x4f, 0xbe, 0xd0, 0xf7, 0x15, 0x8f, 0x7c, 0x2a,",
          "2993:  0x06, 0x7a, 0xce, 0xb7, 0x4e, 0xf8, 0x7c, 0xc7, 0x6b, 0x16, 0x9c, 0xda, 0x4b, 0x95, 0xaa, 0x24,",
          "2994:  0x26, 0x79, 0xc8, 0x02, 0xc8, 0x74, 0xfd, 0x8b, 0x9e, 0xc2, 0x69, 0x78, 0x84, 0x59, 0xe9, 0xf6,",
          "2995:  0x7f, 0x5a, 0x60, 0x9a, 0xa7, 0xe3, 0x39, 0x42, 0xc6, 0xbb, 0x4c, 0x85, 0x23, 0xde, 0x65, 0x4a,",
          "2996:  0x7c, 0xa6, 0xe2, 0xf1, 0x7c, 0xf4, 0x91, 0x13, 0xf8, 0xe8, 0xa3, 0x03, 0x9d, 0xac, 0xd7, 0x43,",
          "2997:  0xb1, 0xe3, 0x55, 0xa5, 0x9b, 0xad, 0xcf, 0xae, 0xd6, 0x56, 0x90, 0xc1, 0xed, 0x3f, 0x1a, 0xd5,",
          "2998:  0x61, 0xb5, 0x3c, 0xe8, 0xfe, 0x81, 0x68, 0x76, 0x4d, 0xd5, 0xb3, 0x8a, 0x96, 0x6f, 0xf4, 0xd4,",
          "2999:  0xb3, 0xbe, 0xe3, 0xe4, 0x75, 0x0c, 0xa2, 0x83, 0x06, 0x95, 0xb3, 0x8e, 0x1f, 0x51, 0xc4, 0x70,",
          "3000:  0x07, 0x4a, 0x2c, 0x12, 0xe1, 0xf9, 0xb1, 0x52, 0x4a, 0xa9, 0xd2, 0x15, 0x09, 0xbf, 0x7f, 0x38,",
          "3001:  0xff, 0xf6, 0x93, 0xab, 0x95, 0x7c, 0x8d, 0x8a, 0x3f, 0x89, 0xa0, 0xcc, 0xfe, 0xe6, 0xf5, 0x16,",
          "3002:  0x32, 0xc6, 0xb9, 0xa9, 0x6c, 0x51, 0x82, 0xc8, 0xa5, 0x98, 0x43, 0xcb, 0x21, 0x3e, 0x94, 0xf9,",
          "3003:  0x0b, 0x42, 0x5c, 0xa8, 0x08, 0x85, 0xb6, 0x54, 0xd5, 0x43, 0x82, 0xb8, 0x7f, 0x38, 0xff, 0xe2,",
          "3004:  0xc9, 0x85, 0xaa, 0xcf, 0x51, 0x8b, 0xb0, 0xff, 0xb1, 0xa8, 0xe7, 0xae, 0x2c, 0x63, 0xfe, 0x81,",
          "3005:  0x98, 0xbb, 0x2f, 0x64, 0xe6, 0xee, 0x85, 0x9e, 0xb9, 0x3b, 0xad, 0x5f, 0xd9, 0x49, 0xcd, 0xc6,",
          "3006:  0xc7, 0xbd, 0xc1, 0x1e, 0x1d, 0x76, 0x73, 0xcf, 0xe2, 0x95, 0x8e, 0x17, 0xd2, 0x68, 0x2b, 0xec,",
          "3007:  0xf8, 0x9e, 0x5f, 0xe7, 0xd3, 0xb1, 0x64, 0x7a, 0x16, 0x29, 0x34, 0x66, 0xe9, 0xed, 0x2f, 0xf1,",
          "3008:  0xe3, 0x49, 0xa3, 0x74, 0x8b, 0x8d, 0x72, 0x93, 0x3f, 0xc2, 0x24, 0x8a, 0x47, 0xd5, 0x28, 0x8b,",
          "3009:  0x97, 0x97, 0x04, 0x8e, 0xdc, 0x85, 0xf1, 0x5d, 0xf1, 0x10, 0x44, 0x3e, 0x37, 0x8f, 0xe4, 0xab,",
          "3010:  0x12, 0xfc, 0x8e, 0x67, 0xf2, 0xc4, 0xc4, 0x7d, 0xfd, 0x27, 0x26, 0xd2, 0xec, 0x5f, 0x2d, 0xc2,",
          "3011:  0xa9, 0xcc, 0x13, 0x41, 0x2c, 0x3e, 0x4f, 0xde, 0x83, 0xca, 0x26, 0xd3, 0xd5, 0xd3, 0xc9, 0x8a,",
          "3012:  0x82, 0xbc, 0x0f, 0xa0, 0x4a, 0xdb, 0xcd, 0xa0, 0xcb, 0x1d, 0x97, 0x91, 0x13, 0x3b, 0x2e, 0xca,",
          "3013:  0xd7, 0x5d, 0x51, 0x5c, 0xd0, 0xe0, 0x28, 0x2b, 0x66, 0x47, 0xc5, 0x33, 0x17, 0xe9, 0x8a, 0x59,",
          "3014:  0xe3, 0x02, 0xde, 0xd8, 0xe3, 0xbd, 0x80, 0xe7, 0xc1, 0x29, 0xa1, 0xa2, 0x2a, 0x90, 0x7a, 0x88,",
          "3015:  0x3a, 0xa8, 0x33, 0x6c, 0x46, 0xad, 0xa4, 0xd9, 0x60, 0x96, 0xaf, 0xfd, 0xe9, 0x02, 0x73, 0xdf,",
          "3016:  0x44, 0x67, 0x5f, 0x4f, 0x72, 0xd9, 0x6f, 0x84, 0x31, 0xa7, 0x13, 0x37, 0x82, 0x9e, 0x87, 0x39,",
          "3017:  0x96, 0x38, 0x14, 0x25, 0x96, 0xac, 0xc3, 0x48, 0xd5, 0x89, 0x93, 0xa7, 0xff, 0x4f, 0xa2, 0x9c,",
          "3018:  0x4e, 0x5c, 0x39, 0x31, 0x45, 0xce, 0x85, 0x3c, 0x0d, 0x23, 0xb1, 0x53, 0x4f, 0xbd, 0x18, 0xba,",
          "3019:  0xe3, 0xd4, 0x23, 0xe4, 0x50, 0x73, 0x77, 0x19, 0x39, 0x62, 0x77, 0x79, 0xd1, 0xf8, 0xa7, 0x14,",
          "3020:  0xc6, 0x21, 0x49, 0xef, 0x3f, 0x92, 0x10, 0x35, 0xfc, 0x29, 0x5a, 0xfb, 0x47, 0x60, 0xd2, 0xfc,",
          "3021:  0x47, 0x13, 0xc7, 0xba, 0x02, 0x64, 0xff, 0xcb, 0x08, 0x4c, 0xa5, 0x8a, 0xe8, 0x52, 0xb3, 0xdc,",
          "3022:  0x3a, 0x72, 0x96, 0xf3, 0xe3, 0xaf, 0x8e, 0x4f, 0x65, 0x89, 0xa4, 0x71, 0xfc, 0xd5, 0xf1, 0x29,",
          "3023:  0x0a, 0x1c, 0x1b, 0x95, 0x6a, 0xd8, 0xc5, 0x8e, 0x2f, 0x93, 0xe8, 0x6a, 0x54, 0x56, 0x38, 0x14,",
          "3024:  0x25, 0x96, 0x05, 0xb0, 0x93, 0x11, 0x37, 0x8a, 0xc2, 0x46, 0xc8, 0x55, 0x73, 0x35, 0x8f, 0xc7,",
          "3025:  0xcc, 0x64, 0xc1, 0x28, 0x0f, 0xe8, 0x4d, 0x08, 0xa6, 0x24, 0x92, 0x8f, 0x59, 0xe6, 0x33, 0x6e,",
          "3026:  0x63, 0x79, 0x1c, 0xfe, 0x64, 0x6b, 0x14, 0xc5, 0x0a, 0x7a, 0xf0, 0x6b, 0x6e, 0x91, 0x5a, 0xc0,",
          "3027:  0xe3, 0x8f, 0x66, 0x01, 0x43, 0x9f, 0xc5, 0xfb, 0x66, 0x28, 0xb7, 0x1c, 0xdf, 0xab, 0xd1, 0x28,",
          "3028:  0x16, 0xff, 0x24, 0xa6, 0x2c, 0xa2, 0xa7, 0xeb, 0x09, 0x10, 0x35, 0x9e, 0xff, 0x2b, 0x26, 0xde,",
          "3029:  0x30, 0x11, 0xc4, 0x94, 0x8d, 0x7f, 0xc5, 0xa4, 0xc1, 0x68, 0xd2, 0xd8, 0xbf, 0x6f, 0xc1, 0x93,",
          "3030:  0x7d, 0x3b, 0xe3, 0xfb, 0x37, 0x5b, 0x69, 0xff, 0x41, 0x01, 0xce, 0xf4, 0x29, 0x32, 0x25, 0xdd,",
          "3031:  0x47, 0xf6, 0xda, 0x9f, 0xac, 0x62, 0x9d, 0x1a, 0x38, 0x37, 0x4e, 0xb6, 0x0d, 0xe9, 0xad, 0xa0,",
          "3032:  0xf8, 0x58, 0xb7, 0x02, 0xfb, 0x4b, 0x05, 0x30, 0xde, 0xa5, 0x24, 0x1f, 0x32, 0xeb, 0xa9, 0xad,",
          "3033:  0xbc, 0x6a, 0x7f, 0x05, 0x73, 0x55, 0x8f, 0x2d, 0x7a, 0xad, 0x5f, 0x79, 0x76, 0x76, 0xbe, 0x16,",
          "3034:  0x8e, 0x9e, 0xaf, 0xa4, 0x99, 0x14, 0xae, 0x17, 0xf3, 0x2f, 0x5c, 0x2f, 0xf7, 0x14, 0xad, 0xff,",
          "3035:  0xb2, 0x25, 0x66, 0x5a, 0xa6, 0x49, 0xda, 0xc2, 0x5a, 0x0f, 0xb0, 0xb0, 0x6f, 0x81, 0x52, 0x44,",
          "3036:  0x9b, 0x35, 0xe6, 0xd9, 0x49, 0x4b, 0xac, 0xe6, 0xc4, 0xb6, 0x84, 0xa3, 0xa2, 0xe0, 0x57, 0x5a,",
          "3037:  0x9b, 0xcd, 0xe0, 0xee, 0x6a, 0xab, 0x1d, 0x77, 0xa5, 0x4d, 0xd6, 0x57, 0x5a, 0x15, 0x06, 0x0d,",
          "3038:  0x2a, 0xfb, 0xbf, 0x2c, 0x31, 0x9c, 0xd2, 0x47, 0x7f, 0x21, 0x73, 0xd5, 0xf0, 0xf8, 0xee, 0xed,",
          "3039:  0xcf, 0x02, 0xb8, 0xea, 0xa9, 0x80, 0x7c, 0x9e, 0xab, 0xd4, 0x4f, 0x0f, 0x98, 0x6f, 0x28, 0x26,",
          "3040:  0x30, 0x34, 0xe4, 0xa5, 0x16, 0x4f, 0xf1, 0xa8, 0xc5, 0x63, 0xff, 0xbb, 0x05, 0xa9, 0xcd, 0x82,",
          "3041:  0xb4, 0x61, 0x94, 0x69, 0xd0, 0xcd, 0xe7, 0x61, 0x03, 0x93, 0x35, 0x5b, 0x58, 0x72, 0x5a, 0xf0,",
          "3042:  0x3f, 0x51, 0x08, 0x22, 0x4d, 0xe9, 0x9d, 0x17, 0xf2, 0x78, 0x7c, 0xc3, 0x14, 0xc8, 0xfc, 0x7b,",
          "3043:  0xf9, 0x6f, 0x37, 0x94, 0xa7, 0x6f, 0xbf, 0x00, 0x33, 0x3d, 0x4a, 0xf1, 0xcb, 0x47, 0x41, 0xf2,",
          "3044:  0x9a, 0x83, 0x31, 0x03, 0xf9, 0x55, 0x48, 0x14, 0x38, 0xe6, 0xe0, 0x9f, 0xce, 0xb2, 0x27, 0x9f,",
          "3045:  0xb7, 0x60, 0x26, 0xca, 0xf2, 0x7b, 0x54, 0x7d, 0xa7, 0x32, 0x57, 0x3d, 0x28, 0xec, 0x55, 0xc2,",
          "3046:  0xfe, 0x0b, 0x69, 0x9e, 0xc4, 0xbf, 0x29, 0x53, 0x9b, 0x8b, 0x35, 0x70, 0x73, 0x61, 0x4b, 0xcc,",
          "3047:  0x6d, 0xd0, 0x6a, 0xa7, 0xd9, 0x53, 0x4a, 0xb3, 0x2d, 0xe1, 0xa8, 0x28, 0x52, 0xcf, 0xd6, 0x15,",
          "3048:  0x8f, 0x7c, 0xb6, 0xee, 0x79, 0x98, 0x34, 0x5f, 0x2c, 0xe1, 0x29, 0x34, 0x79, 0xf8, 0x60, 0x3e,",
          "3049:  0x6e, 0x82, 0x29, 0xaa, 0xcc, 0xb3, 0x67, 0xa3, 0x47, 0x3e, 0x7b, 0xf6, 0x2c, 0x94, 0xe4, 0x13,",
          "3050:  0x5e, 0x49, 0x7e, 0x57, 0xd4, 0xe9, 0x48, 0x18, 0x2a, 0x2c, 0x33, 0x10, 0x2d, 0xc7, 0xef, 0x38,",
          "3051:  0x4d, 0xd6, 0x43, 0xb2, 0x7c, 0x4f, 0xad, 0xac, 0xeb, 0x0a, 0x83, 0x06, 0x95, 0xfd, 0xcf, 0x16,",
          "3052:  0x64, 0x5f, 0x14, 0x4a, 0x15, 0x01, 0x5a, 0x47, 0x16, 0x01, 0xa6, 0x0b, 0x9c, 0x0a, 0xc7, 0x2a,",
          "3053:  0x70, 0x32, 0x6b, 0x8f, 0x8a, 0x0f, 0xac, 0x3d, 0x7a, 0x83, 0xbe, 0x40, 0x2e, 0x8a, 0x94, 0x26,",
          "3054:  0xfa, 0x5d, 0x1e, 0x27, 0x36, 0x8c, 0xb9, 0x8e, 0xaa, 0xb1, 0x9e, 0x14, 0x8e, 0xd2, 0xf2, 0x12,",
          "3055:  0x27, 0x92, 0x98, 0xca, 0xc2, 0x57, 0xbe, 0x7d, 0xfe, 0x89, 0xaf, 0x7e, 0xfb, 0xfc, 0x13, 0xdf,",
          "3056:  0xf8, 0xf6, 0xf9, 0x27, 0x3e, 0x72, 0xef, 0xbc, 0xf5, 0x95, 0x7b, 0xe7, 0xad, 0xaf, 0xde, 0x3b,",
          "3057:  0x6f, 0x7d, 0xe3, 0xde, 0x79, 0xeb, 0x5b, 0xf7, 0xce, 0x5b, 0x9f, 0xf9, 0x87, 0xf3, 0x4f, 0xbc,",
          "3058:  0xbb, 0x94, 0xcc, 0xd5, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x27, 0x4a, 0x7b, 0xbf, 0xf4, 0x76,",
          "3059:  0x00, 0x00,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3772:  _ = i",
          "3773:  var l int",
          "3774:  _ = l",
          "3775:  i -= len(m.Version)",
          "3776:  copy(dAtA[i:], m.Version)",
          "3777:  i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3777:  i--",
          "3778:  if m.PassCredentials {",
          "3779:   dAtA[i] = 1",
          "3780:  } else {",
          "3781:   dAtA[i] = 0",
          "3782:  }",
          "3783:  i--",
          "3784:  dAtA[i] = 0x38",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8444:  }",
          "8445:  l = len(m.Version)",
          "8446:  n += 1 + l + sovGenerated(uint64(l))",
          "8447:  return n",
          "8448: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8457:  n += 2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10302:   `Values:` + fmt.Sprintf(\"%v\", this.Values) + `,`,",
          "10303:   `FileParameters:` + repeatedStringForFileParameters + `,`,",
          "10304:   `Version:` + fmt.Sprintf(\"%v\", this.Version) + `,`,",
          "10305:   `}`,",
          "10306:  }, \"\")",
          "10307:  return s",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10316:   `PassCredentials:` + fmt.Sprintf(\"%v\", this.PassCredentials) + `,`,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "13886:    }",
          "13887:    m.Version = string(dAtA[iNdEx:postIndex])",
          "13888:    iNdEx = postIndex",
          "13889:   default:",
          "13890:    iNdEx = preIndex",
          "13891:    skippy, err := skipGenerated(dAtA[iNdEx:])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13901:   case 7:",
          "13902:    if wireType != 0 {",
          "13903:     return fmt.Errorf(\"proto: wrong wireType = %d for field PassCredentials\", wireType)",
          "13904:    }",
          "13905:    var v int",
          "13906:    for shift := uint(0); ; shift += 7 {",
          "13907:     if shift >= 64 {",
          "13908:      return ErrIntOverflowGenerated",
          "13909:     }",
          "13910:     if iNdEx >= l {",
          "13911:      return io.ErrUnexpectedEOF",
          "13912:     }",
          "13913:     b := dAtA[iNdEx]",
          "13914:     iNdEx++",
          "13915:     v |= int(b&0x7F) << shift",
          "13916:     if b < 0x80 {",
          "13917:      break",
          "13918:     }",
          "13919:    }",
          "13920:    m.PassCredentials = bool(v != 0)",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/generated.proto||pkg/apis/application/v1alpha1/generated.proto": [
          "File: pkg/apis/application/v1alpha1/generated.proto -> pkg/apis/application/v1alpha1/generated.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:   optional string version = 6;",
          "210: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:   optional bool passCredentials = 7;",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/openapi_generated.go||pkg/apis/application/v1alpha1/openapi_generated.go": [
          "File: pkg/apis/application/v1alpha1/openapi_generated.go -> pkg/apis/application/v1alpha1/openapi_generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:        Format:      \"\",",
          "779:       },",
          "780:      },",
          "781:     },",
          "782:    },",
          "783:   },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:      \"passCredentials\": {",
          "782:       SchemaProps: spec.SchemaProps{",
          "783:        Description: \"PassCredentials pass credentials to all domains (Helm's --pass-credentials)\",",
          "784:        Type:        []string{\"boolean\"},",
          "785:        Format:      \"\",",
          "786:       },",
          "787:      },",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/types.go||pkg/apis/application/v1alpha1/types.go": [
          "File: pkg/apis/application/v1alpha1/types.go -> pkg/apis/application/v1alpha1/types.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:  FileParameters []HelmFileParameter `json:\"fileParameters,omitempty\" protobuf:\"bytes,5,opt,name=fileParameters\"`",
          "239:  Version string `json:\"version,omitempty\" protobuf:\"bytes,6,opt,name=version\"`",
          "240: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241:  PassCredentials bool `json:\"passCredentials,omitempty\" protobuf:\"bytes,7,opt,name=passCredentials\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320: func (h *ApplicationSourceHelm) IsZero() bool {",
          "322: }",
          "",
          "[Removed Lines]",
          "321:  return h == nil || (h.Version == \"\") && (h.ReleaseName == \"\") && len(h.ValueFiles) == 0 && len(h.Parameters) == 0 && len(h.FileParameters) == 0 && h.Values == \"\"",
          "",
          "[Added Lines]",
          "323:  return h == nil || (h.Version == \"\") && (h.ReleaseName == \"\") && len(h.ValueFiles) == 0 && len(h.Parameters) == 0 && len(h.FileParameters) == 0 && h.Values == \"\" && !h.PassCredentials",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     return err",
          "243:    }",
          "244:   }",
          "246:   if err != nil {",
          "247:    return err",
          "248:   }",
          "",
          "[Removed Lines]",
          "245:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision)",
          "",
          "[Added Lines]",
          "245:   helmPassCredentials := false",
          "246:   if source.Helm != nil {",
          "247:    helmPassCredentials = source.Helm.PassCredentials",
          "248:   }",
          "249:   chartPath, closer, err := helmClient.ExtractChart(source.Chart, revision, helmPassCredentials)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567:  appHelm := q.ApplicationSource.Helm",
          "568:  var version string",
          "569:  if appHelm != nil {",
          "570:   if appHelm.Version != \"\" {",
          "571:    version = appHelm.Version",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:  var passCredentials bool",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "627:   for _, p := range appHelm.FileParameters {",
          "628:    templateOpts.SetFile[p.Name] = p.Path",
          "629:   }",
          "630:  }",
          "631:  if templateOpts.Name == \"\" {",
          "632:   templateOpts.Name = q.AppName",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "635:   passCredentials = appHelm.PassCredentials",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "666:   proxy = q.Repo.Proxy",
          "667:  }",
          "670:  if err != nil {",
          "671:   return nil, err",
          "672:  }",
          "",
          "[Removed Lines]",
          "669:  h, err := helm.NewHelmApp(appPath, getHelmRepos(q.Repos), isLocal, version, proxy)",
          "",
          "[Added Lines]",
          "675:  h, err := helm.NewHelmApp(appPath, getHelmRepos(q.Repos), isLocal, version, proxy, passCredentials)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1257:  res.Helm = &apiclient.HelmAppSpec{ValueFiles: availableValueFiles}",
          "1258:  var version string",
          "1259:  if q.Source.Helm != nil {",
          "1260:   if q.Source.Helm.Version != \"\" {",
          "1261:    version = q.Source.Helm.Version",
          "1262:   }",
          "1263:  }",
          "1265:  if err != nil {",
          "1266:   return err",
          "1267:  }",
          "",
          "[Removed Lines]",
          "1264:  h, err := helm.NewHelmApp(appPath, getHelmRepos(q.Repos), false, version, q.Repo.Proxy)",
          "",
          "[Added Lines]",
          "1265:  var passCredentials bool",
          "1270:   passCredentials = q.Source.Helm.PassCredentials",
          "1272:  h, err := helm.NewHelmApp(appPath, getHelmRepos(q.Repos), false, version, q.Repo.Proxy, passCredentials)",
          "",
          "---------------"
        ],
        "test/e2e/fixture/app/actions.go||test/e2e/fixture/app/actions.go": [
          "File: test/e2e/fixture/app/actions.go -> test/e2e/fixture/app/actions.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:  if a.context.revision != \"\" {",
          "201:   args = append(args, \"--revision\", a.context.revision)",
          "202:  }",
          "203:  return args",
          "204: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:  if a.context.helmPassCredentials {",
          "204:   args = append(args, \"--helm-pass-credentials\")",
          "205:  }",
          "",
          "---------------"
        ],
        "test/e2e/fixture/app/context.go||test/e2e/fixture/app/context.go": [
          "File: test/e2e/fixture/app/context.go -> test/e2e/fixture/app/context.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  force                  bool",
          "38:  directoryRecurse       bool",
          "39:  replace                bool",
          "40: }",
          "42: func Given(t *testing.T) *Context {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40:  helmPassCredentials    bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "290:  c.force = true",
          "291:  return c",
          "292: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295: func (c *Context) HelmPassCredentials() *Context {",
          "296:  c.helmPassCredentials = true",
          "297:  return c",
          "298: }",
          "",
          "---------------"
        ],
        "test/e2e/fixture/repos/repos.go||test/e2e/fixture/repos/repos.go": [
          "File: test/e2e/fixture/repos/repos.go -> test/e2e/fixture/repos/repos.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"os\"",
          "6:  \"path/filepath\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  \"io/ioutil\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155: func PushChartToOCIRegistry(chartPathName, chartName, chartVersion string) {",
          "159:  _ = os.Setenv(\"HELM_EXPERIMENTAL_OCI\", \"1\")",
          "163: }",
          "",
          "[Removed Lines]",
          "156:  chartAbsPath, err := filepath.Abs(fmt.Sprintf(\"./testdata/%s\", chartPathName))",
          "157:  errors.CheckError(err)",
          "160:  errors.FailOnErr(fixture.Run(\"\", \"helm\", \"chart\", \"save\", chartAbsPath, fmt.Sprintf(\"%s/%s:%s\", fixture.HelmOCIRegistryURL, chartName, chartVersion)))",
          "161:  errors.FailOnErr(fixture.Run(\"\", \"helm\", \"chart\", \"push\", fmt.Sprintf(\"%s/%s:%s\", fixture.HelmOCIRegistryURL, chartName, chartVersion)))",
          "",
          "[Added Lines]",
          "158:  tempDest, err1 := ioutil.TempDir(\"\", \"helm\")",
          "159:  errors.CheckError(err1)",
          "160:  defer func() { _ = os.RemoveAll(tempDest) }()",
          "162:  chartAbsPath, err2 := filepath.Abs(fmt.Sprintf(\"./testdata/%s\", chartPathName))",
          "163:  errors.CheckError(err2)",
          "166:  errors.FailOnErr(fixture.Run(\"\", \"helm\", \"dependency\", \"build\", chartAbsPath))",
          "167:  errors.FailOnErr(fixture.Run(\"\", \"helm\", \"package\", chartAbsPath, \"--destination\", tempDest))",
          "168:  _ = os.RemoveAll(fmt.Sprintf(\"%s/%s\", chartAbsPath, \"charts\"))",
          "169:  errors.FailOnErr(fixture.Run(",
          "170:   \"\",",
          "171:   \"helm\",",
          "172:   \"push\",",
          "173:   fmt.Sprintf(\"%s/%s-%s.tgz\", tempDest, chartName, chartVersion),",
          "174:   fmt.Sprintf(\"oci://%s\", fixture.HelmOCIRegistryURL),",
          "175:  ))",
          "",
          "---------------"
        ],
        "test/e2e/helm_test.go||test/e2e/helm_test.go": [
          "File: test/e2e/helm_test.go -> test/e2e/helm_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:   Timeout(30).",
          "360:   HelmHTTPSCredentialsUserPassAdded().",
          "361:   When().",
          "362:   Create().",
          "363:   Sync().",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:   HelmPassCredentials().",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "379:  ctx := Given(t).",
          "380:   CustomCACertAdded().",
          "383:  if legacyRepo {",
          "384:   ctx.And(func() {",
          "385:    FailOnErr(fixture.Run(\"\", \"kubectl\", \"create\", \"secret\", \"generic\", \"helm-repo\",",
          "",
          "[Removed Lines]",
          "382:   Timeout(30)",
          "",
          "[Added Lines]",
          "383:   Timeout(30).",
          "384:   HelmPassCredentials()",
          "",
          "---------------"
        ],
        "util/helm/client.go||util/helm/client.go": [
          "File: util/helm/client.go -> util/helm/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: type Client interface {",
          "49:  CleanChartCache(chart string, version string) error",
          "51:  GetIndex(noCache bool) (*Index, error)",
          "52:  TestHelmOCI() (bool, error)",
          "53: }",
          "",
          "[Removed Lines]",
          "50:  ExtractChart(chart string, version string) (string, io.Closer, error)",
          "",
          "[Added Lines]",
          "50:  ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:  return os.RemoveAll(c.getCachedChartPath(chart, version))",
          "118: }",
          "121:  err := c.ensureHelmChartRepoPath()",
          "122:  if err != nil {",
          "123:   return \"\", nil, err",
          "",
          "[Removed Lines]",
          "120: func (c *nativeHelmChart) ExtractChart(chart string, version string) (string, io.Closer, error) {",
          "",
          "[Added Lines]",
          "120: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:   if c.enableOci {",
          "165:    if c.creds.Password != \"\" && c.creds.Username != \"\" {",
          "167:     if err != nil {",
          "168:      return \"\", nil, err",
          "169:     }",
          "171:     defer func() {",
          "173:     }()",
          "174:    }",
          "192:    if err != nil {",
          "193:     return \"\", nil, err",
          "194:    }",
          "195:   } else {",
          "210:    if err != nil {",
          "211:     return \"\", nil, err",
          "212:    }",
          "213:   }",
          "215:  }",
          "217:  cmd := exec.Command(\"tar\", \"-zxvf\", cachedChartPath)",
          "",
          "[Removed Lines]",
          "166:     _, err = helmCmd.Login(c.repoURL, c.creds)",
          "172:      _, _ = helmCmd.Logout(c.repoURL, c.creds)",
          "177:    _, err = helmCmd.ChartPull(c.repoURL, chart, version)",
          "178:    if err != nil {",
          "179:     return \"\", nil, err",
          "180:    }",
          "183:    _, err = helmCmd.ChartExport(c.repoURL, chart, version, tempDest)",
          "184:    if err != nil {",
          "185:     return \"\", nil, err",
          "186:    }",
          "189:    cmd := exec.Command(\"tar\", \"-zcvf\", cachedChartPath, normalizeChartName(chart))",
          "190:    cmd.Dir = tempDest",
          "191:    _, err = executil.Run(cmd)",
          "196:    _, err = helmCmd.Fetch(c.repoURL, chart, version, tempDest, c.creds)",
          "197:    if err != nil {",
          "198:     return \"\", nil, err",
          "199:    }",
          "202:    infos, err := ioutil.ReadDir(tempDest)",
          "203:    if err != nil {",
          "204:     return \"\", nil, err",
          "205:    }",
          "206:    if len(infos) != 1 {",
          "207:     return \"\", nil, fmt.Errorf(\"expected 1 file, found %v\", len(infos))",
          "208:    }",
          "209:    err = os.Rename(filepath.Join(tempDest, infos[0].Name()), cachedChartPath)",
          "",
          "[Added Lines]",
          "166:     _, err = helmCmd.RegistryLogin(c.repoURL, c.creds)",
          "172:      _, _ = helmCmd.RegistryLogout(c.repoURL, c.creds)",
          "177:    _, err = helmCmd.PullOCI(c.repoURL, chart, version, tempDest)",
          "182:    _, err = helmCmd.Fetch(c.repoURL, chart, version, tempDest, c.creds, passCredentials)",
          "189:   infos, err := ioutil.ReadDir(tempDest)",
          "190:   if err != nil {",
          "191:    return \"\", nil, err",
          "192:   }",
          "193:   if len(infos) != 1 {",
          "194:    return \"\", nil, fmt.Errorf(\"expected 1 file, found %v\", len(infos))",
          "195:   }",
          "196:   err = os.Rename(filepath.Join(tempDest, infos[0].Name()), cachedChartPath)",
          "197:   if err != nil {",
          "198:    return \"\", nil, err",
          "199:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "282:  if c.creds.Username != \"\" && c.creds.Password != \"\" {",
          "284:   if err != nil {",
          "285:    return false, err",
          "286:   }",
          "287:   defer func() {",
          "289:   }()",
          "291:   log.WithFields(log.Fields{\"seconds\": time.Since(start).Seconds()}).Info(\"took to test helm oci repository\")",
          "",
          "[Removed Lines]",
          "283:   _, err = helmCmd.Login(c.repoURL, c.creds)",
          "288:    _, _ = helmCmd.Logout(c.repoURL, c.creds)",
          "",
          "[Added Lines]",
          "268:   _, err = helmCmd.RegistryLogin(c.repoURL, c.creds)",
          "273:    _, _ = helmCmd.RegistryLogout(c.repoURL, c.creds)",
          "",
          "---------------"
        ],
        "util/helm/client_test.go||util/helm/client_test.go": [
          "File: util/helm/client_test.go -> util/helm/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: func Test_nativeHelmChart_ExtractChart(t *testing.T) {",
          "67:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "69:  assert.NoError(t, err)",
          "70:  defer io.Close(closer)",
          "71:  info, err := os.Stat(path)",
          "",
          "[Removed Lines]",
          "68:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\")",
          "",
          "[Added Lines]",
          "68:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: func Test_nativeHelmChart_ExtractChart_insecure(t *testing.T) {",
          "77:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{InsecureSkipVerify: true}, false, \"\")",
          "79:  assert.NoError(t, err)",
          "80:  defer io.Close(closer)",
          "81:  info, err := os.Stat(path)",
          "",
          "[Removed Lines]",
          "78:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\")",
          "",
          "[Added Lines]",
          "78:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\", false)",
          "",
          "---------------"
        ],
        "util/helm/cmd.go||util/helm/cmd.go": [
          "File: util/helm/cmd.go -> util/helm/cmd.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:  return \"\", nil",
          "77: }",
          "80:  args := []string{\"registry\", \"login\"}",
          "81:  args = append(args, repo)",
          "",
          "[Removed Lines]",
          "79: func (c *Cmd) Login(repo string, creds Creds) (string, error) {",
          "",
          "[Added Lines]",
          "79: func (c *Cmd) RegistryLogin(repo string, creds Creds) (string, error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:  return c.run(args...)",
          "115: }",
          "118:  args := []string{\"registry\", \"logout\"}",
          "119:  args = append(args, repo)",
          "",
          "[Removed Lines]",
          "117: func (c *Cmd) Logout(repo string, creds Creds) (string, error) {",
          "",
          "[Added Lines]",
          "117: func (c *Cmd) RegistryLogout(repo string, creds Creds) (string, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:  return c.run(args...)",
          "142: }",
          "145:  tmp, err := ioutil.TempDir(\"\", \"helm\")",
          "146:  if err != nil {",
          "147:   return \"\", err",
          "",
          "[Removed Lines]",
          "144: func (c *Cmd) RepoAdd(name string, url string, opts Creds) (string, error) {",
          "",
          "[Added Lines]",
          "144: func (c *Cmd) RepoAdd(name string, url string, opts Creds, passCredentials bool) (string, error) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192:   args = append(args, \"--key-file\", keyFile.Name())",
          "193:  }",
          "195:  args = append(args, name, url)",
          "197:  return c.run(args...)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:  if c.helmPassCredentialsSupported && passCredentials {",
          "196:   args = append(args, \"--pass-credentials\")",
          "197:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:  }), nil",
          "214: }",
          "217:  args := []string{c.pullCommand, \"--destination\", destination}",
          "218:  if version != \"\" {",
          "219:   args = append(args, \"--version\", version)",
          "",
          "[Removed Lines]",
          "216: func (c *Cmd) Fetch(repo, chartName, version, destination string, creds Creds) (string, error) {",
          "",
          "[Added Lines]",
          "220: func (c *Cmd) Fetch(repo, chartName, version, destination string, creds Creds, passCredentials bool) (string, error) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "249:   defer io.Close(closer)",
          "250:   args = append(args, \"--key-file\", filePath)",
          "251:  }",
          "253:  return c.run(args...)",
          "254: }",
          "266: }",
          "268: func (c *Cmd) dependencyBuild() (string, error) {",
          "",
          "[Removed Lines]",
          "256: func (c *Cmd) ChartPull(repo string, chart string, version string) (string, error) {",
          "257:  return c.run(\"chart\", \"pull\", fmt.Sprintf(\"%s/%s:%s\", repo, chart, version))",
          "258: }",
          "260: func (c *Cmd) ChartExport(repo string, chartName string, version string, destination string) (string, error) {",
          "261:  args := []string{\"chart\", \"export\"}",
          "262:  chartURL := fmt.Sprintf(repo + \"/\" + chartName + \":\" + version)",
          "263:  args = append(args, chartURL, \"--destination\", destination)",
          "265:  return c.run(args...)",
          "",
          "[Added Lines]",
          "256:  if passCredentials && c.helmPassCredentialsSupported {",
          "257:   args = append(args, \"--pass-credentials\")",
          "258:  }",
          "263: func (c *Cmd) PullOCI(repo string, chart string, version string, destination string) (string, error) {",
          "264:  return c.run(",
          "265:   \"pull\",",
          "266:   fmt.Sprintf(\"oci://%s/%s\", repo, chart),",
          "267:   \"--version\",",
          "268:   version,",
          "269:   \"--destination\",",
          "270:   destination,",
          "271:  )",
          "",
          "---------------"
        ],
        "util/helm/helm.go||util/helm/helm.go": [
          "File: util/helm/helm.go -> util/helm/helm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: }",
          "41:  cmd, err := NewCmd(workDir, version, proxy)",
          "42:  if err != nil {",
          "43:   return nil, err",
          "44:  }",
          "45:  cmd.IsLocal = isLocal",
          "48: }",
          "50: type helm struct {",
          "53: }",
          "55: var _ Helm = &helm{}",
          "",
          "[Removed Lines]",
          "40: func NewHelmApp(workDir string, repos []HelmRepository, isLocal bool, version string, proxy string) (Helm, error) {",
          "47:  return &helm{repos: repos, cmd: *cmd}, nil",
          "51:  cmd   Cmd",
          "52:  repos []HelmRepository",
          "",
          "[Added Lines]",
          "40: func NewHelmApp(workDir string, repos []HelmRepository, isLocal bool, version string, proxy string, passCredentials bool) (Helm, error) {",
          "47:  return &helm{repos: repos, cmd: *cmd, passCredentials: passCredentials}, nil",
          "51:  cmd             Cmd",
          "52:  repos           []HelmRepository",
          "53:  passCredentials bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:   if repo.EnableOci {",
          "80:    h.cmd.IsHelmOci = true",
          "81:    if repo.Creds.Username != \"\" && repo.Creds.Password != \"\" {",
          "84:     defer func() {",
          "86:     }()",
          "88:     if err != nil {",
          "",
          "[Removed Lines]",
          "82:     _, err := h.cmd.Login(repo.Repo, repo.Creds)",
          "85:      _, _ = h.cmd.Logout(repo.Repo, repo.Creds)",
          "",
          "[Added Lines]",
          "83:     _, err := h.cmd.RegistryLogin(repo.Repo, repo.Creds)",
          "86:      _, _ = h.cmd.RegistryLogout(repo.Repo, repo.Creds)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:     }",
          "91:    }",
          "92:   } else {",
          "95:    if err != nil {",
          "96:     return err",
          "",
          "[Removed Lines]",
          "93:    _, err := h.cmd.RepoAdd(repo.Name, repo.Repo, repo.Creds)",
          "",
          "[Added Lines]",
          "94:    _, err := h.cmd.RepoAdd(repo.Name, repo.Repo, repo.Creds, h.passCredentials)",
          "",
          "---------------"
        ],
        "util/helm/helm_test.go||util/helm/helm_test.go": [
          "File: util/helm/helm_test.go -> util/helm/helm_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: }",
          "25: func TestHelmTemplateParams(t *testing.T) {",
          "27:  assert.NoError(t, err)",
          "28:  opts := TemplateOpts{",
          "29:   Name: \"test\",",
          "",
          "[Removed Lines]",
          "26:  h, err := NewHelmApp(\"./testdata/minio\", []HelmRepository{}, false, \"\", \"\")",
          "",
          "[Added Lines]",
          "26:  h, err := NewHelmApp(\"./testdata/minio\", []HelmRepository{}, false, \"\", \"\", false)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: }",
          "54: func TestHelmTemplateValues(t *testing.T) {",
          "56:  assert.NoError(t, err)",
          "57:  opts := TemplateOpts{",
          "58:   Name:   \"test\",",
          "",
          "[Removed Lines]",
          "55:  h, err := NewHelmApp(\"./testdata/redis\", []HelmRepository{}, false, \"\", \"\")",
          "",
          "[Added Lines]",
          "55:  h, err := NewHelmApp(\"./testdata/redis\", []HelmRepository{}, false, \"\", \"\", false)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73: }",
          "75: func TestHelmGetParams(t *testing.T) {",
          "77:  assert.NoError(t, err)",
          "78:  params, err := h.GetParameters([]string{})",
          "79:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "76:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\")",
          "",
          "[Added Lines]",
          "76:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\", false)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83: }",
          "85: func TestHelmGetParamsValueFiles(t *testing.T) {",
          "87:  assert.NoError(t, err)",
          "88:  params, err := h.GetParameters([]string{\"values-production.yaml\"})",
          "89:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "86:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\")",
          "",
          "[Added Lines]",
          "86:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\", false)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "93: }",
          "95: func TestHelmGetParamsValueFilesThatExist(t *testing.T) {",
          "97:  assert.NoError(t, err)",
          "98:  params, err := h.GetParameters([]string{\"values-missing.yaml\", \"values-production.yaml\"})",
          "99:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "96:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\")",
          "",
          "[Added Lines]",
          "96:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\", false)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "114:    }",
          "115:    clean()",
          "116:    defer clean()",
          "118:    assert.NoError(t, err)",
          "119:    err = h.Init()",
          "120:    assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "117:    h, err := NewHelmApp(fmt.Sprintf(\"./testdata/%s\", chart), helmRepos, false, \"\", \"\")",
          "",
          "[Added Lines]",
          "117:    h, err := NewHelmApp(fmt.Sprintf(\"./testdata/%s\", chart), helmRepos, false, \"\", \"\", false)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "129: }",
          "131: func TestHelmTemplateReleaseNameOverwrite(t *testing.T) {",
          "133:  assert.NoError(t, err)",
          "135:  objs, err := template(h, &TemplateOpts{Name: \"my-release\"})",
          "",
          "[Removed Lines]",
          "132:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\")",
          "",
          "[Added Lines]",
          "132:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\", false)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "147: }",
          "149: func TestHelmTemplateReleaseName(t *testing.T) {",
          "151:  assert.NoError(t, err)",
          "152:  objs, err := template(h, &TemplateOpts{Name: \"test\"})",
          "153:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "150:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\")",
          "",
          "[Added Lines]",
          "150:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\", false)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "206: }",
          "208: func TestAPIVersions(t *testing.T) {",
          "210:  if !assert.NoError(t, err) {",
          "211:   return",
          "212:  }",
          "",
          "[Removed Lines]",
          "209:  h, err := NewHelmApp(\"./testdata/api-versions\", nil, false, \"\", \"\")",
          "",
          "[Added Lines]",
          "209:  h, err := NewHelmApp(\"./testdata/api-versions\", nil, false, \"\", \"\", false)",
          "",
          "---------------"
        ],
        "util/helm/helmver.go||util/helm/helmver.go": [
          "File: util/helm/helmver.go -> util/helm/helmver.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  }",
          "19:  HelmV3 = HelmVer{",
          "29:  }",
          "30: )",
          "",
          "[Removed Lines]",
          "20:   binaryName:                  \"helm\",",
          "21:   templateNameArg:             \"--name-template\",",
          "22:   kubeVersionSupported:        true,",
          "23:   showCommand:                 \"show\",",
          "24:   pullCommand:                 \"pull\",",
          "25:   initSupported:               false,",
          "26:   getPostTemplateCallback:     cleanupChartLockFile,",
          "27:   additionalTemplateArgs:      []string{\"--include-crds\"},",
          "28:   insecureSkipVerifySupported: true,",
          "",
          "[Added Lines]",
          "20:   binaryName:                   \"helm\",",
          "21:   templateNameArg:              \"--name-template\",",
          "22:   kubeVersionSupported:         true,",
          "23:   showCommand:                  \"show\",",
          "24:   pullCommand:                  \"pull\",",
          "25:   initSupported:                false,",
          "26:   getPostTemplateCallback:      cleanupChartLockFile,",
          "27:   additionalTemplateArgs:       []string{\"--include-crds\"},",
          "28:   insecureSkipVerifySupported:  true,",
          "29:   helmPassCredentialsSupported: true,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: type HelmVer struct {",
          "63: }",
          "",
          "[Removed Lines]",
          "54:  binaryName                  string",
          "55:  initSupported               bool",
          "56:  templateNameArg             string",
          "57:  showCommand                 string",
          "58:  pullCommand                 string",
          "59:  kubeVersionSupported        bool",
          "60:  getPostTemplateCallback     func(chartPath string) (func(), error)",
          "61:  additionalTemplateArgs      []string",
          "62:  insecureSkipVerifySupported bool",
          "",
          "[Added Lines]",
          "55:  binaryName                   string",
          "56:  initSupported                bool",
          "57:  templateNameArg              string",
          "58:  showCommand                  string",
          "59:  pullCommand                  string",
          "60:  kubeVersionSupported         bool",
          "61:  getPostTemplateCallback      func(chartPath string) (func(), error)",
          "62:  additionalTemplateArgs       []string",
          "63:  insecureSkipVerifySupported  bool",
          "64:  helmPassCredentialsSupported bool",
          "",
          "---------------"
        ],
        "util/helm/mocks/Client.go||util/helm/mocks/Client.go": [
          "File: util/helm/mocks/Client.go -> util/helm/mocks/Client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: }",
          "33:  ret := _m.Called(chart, version)",
          "35:  var r0 string",
          "",
          "[Removed Lines]",
          "32: func (_m *Client) ExtractChart(chart string, version string) (string, io.Closer, error) {",
          "",
          "[Added Lines]",
          "32: func (_m *Client) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "387f775f4a70461c4f37e766f582183293af9a3a",
      "candidate_info": {
        "commit_hash": "387f775f4a70461c4f37e766f582183293af9a3a",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/387f775f4a70461c4f37e766f582183293af9a3a",
        "files": [
          "assets/swagger.json",
          "cmd/argocd/commands/repo.go",
          "docs/user-guide/commands/argocd_repo_add.md",
          "pkg/apiclient/repository/repository.pb.go",
          "pkg/apis/application/v1alpha1/generated.pb.go",
          "pkg/apis/application/v1alpha1/generated.proto",
          "pkg/apis/application/v1alpha1/openapi_generated.go",
          "pkg/apis/application/v1alpha1/types.go",
          "reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go",
          "server/application/application.go",
          "server/repository/repository.go",
          "server/repository/repository.proto",
          "util/argo/argo.go",
          "util/db/repository.go",
          "util/helm/client.go",
          "util/helm/client_test.go",
          "util/helm/cmd.go",
          "util/helm/cmd_test.go",
          "util/helm/mocks/Client.go",
          "util/settings/settings.go"
        ],
        "message": "feat: Support oci-based helm repository (#4018)\n\n* feat: Support oci-based helm repository\n\nSigned-off-by: haoshuwei <haoshuwei24@gmail.com>",
        "before_after_code_files": [
          "cmd/argocd/commands/repo.go||cmd/argocd/commands/repo.go",
          "pkg/apiclient/repository/repository.pb.go||pkg/apiclient/repository/repository.pb.go",
          "pkg/apis/application/v1alpha1/generated.pb.go||pkg/apis/application/v1alpha1/generated.pb.go",
          "pkg/apis/application/v1alpha1/generated.proto||pkg/apis/application/v1alpha1/generated.proto",
          "pkg/apis/application/v1alpha1/openapi_generated.go||pkg/apis/application/v1alpha1/openapi_generated.go",
          "pkg/apis/application/v1alpha1/types.go||pkg/apis/application/v1alpha1/types.go",
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go",
          "server/application/application.go||server/application/application.go",
          "server/repository/repository.go||server/repository/repository.go",
          "server/repository/repository.proto||server/repository/repository.proto",
          "util/argo/argo.go||util/argo/argo.go",
          "util/db/repository.go||util/db/repository.go",
          "util/helm/client.go||util/helm/client.go",
          "util/helm/client_test.go||util/helm/client_test.go",
          "util/helm/cmd.go||util/helm/cmd.go",
          "util/helm/cmd_test.go||util/helm/cmd_test.go",
          "util/helm/mocks/Client.go||util/helm/mocks/Client.go",
          "util/settings/settings.go||util/settings/settings.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ],
          "candidate": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go",
            "util/helm/mocks/Client.go||util/helm/mocks/Client.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/argocd/commands/repo.go||cmd/argocd/commands/repo.go": [
          "File: cmd/argocd/commands/repo.go -> cmd/argocd/commands/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:   tlsClientCertPath              string",
          "50:   tlsClientCertKeyPath           string",
          "51:   enableLfs                      bool",
          "52:  )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:   enableOci                      bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   # Add a private Helm repository named 'stable' via HTTPS",
          "71:   argocd repo add https://kubernetes-charts.storage.googleapis.com --type helm --name stable --username test --password test",
          "72: `",
          "74:  var command = &cobra.Command{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:   # Add a private Helm OCI-based repository named 'stable' via HTTPS",
          "75:   argocd repo add helm-oci-registry.cn-zhangjiakou.cr.aliyuncs.com --type helm --name stable --enable-oci --username test --password test",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:    repo.InsecureIgnoreHostKey = insecureIgnoreHostKey",
          "127:    repo.Insecure = insecureSkipServerVerification",
          "128:    repo.EnableLFS = enableLfs",
          "130:    if repo.Type == \"helm\" && repo.Name == \"\" {",
          "131:     errors.CheckError(fmt.Errorf(\"Must specify --name for repos of type 'helm'\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:    repo.EnableOCI = enableOci",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:     TlsClientCertData: repo.TLSClientCertData,",
          "158:     TlsClientCertKey:  repo.TLSClientCertKey,",
          "159:     Insecure:          repo.IsInsecure(),",
          "160:    }",
          "161:    _, err := repoIf.ValidateAccess(context.Background(), &repoAccessReq)",
          "162:    errors.CheckError(err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:     EnableOci:         repo.EnableOCI,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "181:  command.Flags().BoolVar(&insecureIgnoreHostKey, \"insecure-ignore-host-key\", false, \"disables SSH strict host key checking (deprecated, use --insecure-skip-server-verification instead)\")",
          "182:  command.Flags().BoolVar(&insecureSkipServerVerification, \"insecure-skip-server-verification\", false, \"disables server certificate and host key checks\")",
          "183:  command.Flags().BoolVar(&enableLfs, \"enable-lfs\", false, \"enable git-lfs (Large File Support) on this repository\")",
          "184:  command.Flags().BoolVar(&upsert, \"upsert\", false, \"Override an existing repository with the same name even if the spec differs\")",
          "185:  return command",
          "186: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:  command.Flags().BoolVar(&enableOci, \"enable-oci\", false, \"enable helm-oci (Helm OCI-Based Repository)\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "210: func printRepoTable(repos appsv1.Repositories) {",
          "211:  w := tabwriter.NewWriter(os.Stdout, 0, 0, 2, ' ', 0)",
          "213:  for _, r := range repos {",
          "214:   var hasCreds string",
          "215:   if !r.HasCredentials() {",
          "",
          "[Removed Lines]",
          "212:  _, _ = fmt.Fprintf(w, \"TYPE\\tNAME\\tREPO\\tINSECURE\\tLFS\\tCREDS\\tSTATUS\\tMESSAGE\\n\")",
          "",
          "[Added Lines]",
          "219:  _, _ = fmt.Fprintf(w, \"TYPE\\tNAME\\tREPO\\tINSECURE\\tOCI\\tLFS\\tCREDS\\tSTATUS\\tMESSAGE\\n\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "221:     hasCreds = \"true\"",
          "222:    }",
          "223:   }",
          "225:  }",
          "226:  _ = w.Flush()",
          "227: }",
          "",
          "[Removed Lines]",
          "224:   _, _ = fmt.Fprintf(w, \"%s\\t%s\\t%s\\t%v\\t%v\\t%s\\t%s\\t%s\\n\", r.Type, r.Name, r.Repo, r.IsInsecure(), r.EnableLFS, hasCreds, r.ConnectionState.Status, r.ConnectionState.Message)",
          "",
          "[Added Lines]",
          "231:   _, _ = fmt.Fprintf(w, \"%s\\t%s\\t%s\\t%v\\t%v\\t%v\\t%s\\t%s\\t%s\\n\", r.Type, r.Name, r.Repo, r.IsInsecure(), r.EnableOCI, r.EnableLFS, hasCreds, r.ConnectionState.Status, r.ConnectionState.Message)",
          "",
          "---------------"
        ],
        "pkg/apiclient/repository/repository.pb.go||pkg/apiclient/repository/repository.pb.go": [
          "File: pkg/apiclient/repository/repository.pb.go -> pkg/apiclient/repository/repository.pb.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "321:  Type string `protobuf:\"bytes,9,opt,name=type,proto3\" json:\"type,omitempty\"`",
          "324:  XXX_NoUnkeyedLiteral struct{} `json:\"-\"`",
          "325:  XXX_unrecognized     []byte   `json:\"-\"`",
          "326:  XXX_sizecache        int32    `json:\"-\"`",
          "",
          "[Removed Lines]",
          "323:  Name                 string   `protobuf:\"bytes,10,opt,name=name,proto3\" json:\"name,omitempty\"`",
          "",
          "[Added Lines]",
          "323:  Name string `protobuf:\"bytes,10,opt,name=name,proto3\" json:\"name,omitempty\"`",
          "325:  EnableOci            bool     `protobuf:\"varint,11,opt,name=enableOci,proto3\" json:\"enableOci,omitempty\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "422:  return \"\"",
          "423: }",
          "425: type RepoResponse struct {",
          "426:  XXX_NoUnkeyedLiteral struct{} `json:\"-\"`",
          "427:  XXX_unrecognized     []byte   `json:\"-\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427: func (m *RepoAccessQuery) GetEnableOci() bool {",
          "428:  if m != nil {",
          "429:   return m.EnableOci",
          "430:  }",
          "431:  return false",
          "432: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "592: }",
          "594: var fileDescriptor_8d38260443475705 = []byte{",
          "656: }",
          "",
          "[Removed Lines]",
          "596:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x6f, 0x1b, 0x45,",
          "597:  0x14, 0xd7, 0x26, 0xa9, 0x9b, 0x4c, 0x9a, 0xe0, 0x4e, 0x4b, 0x65, 0x5c, 0x37, 0x8d, 0xa6, 0xa5,",
          "598:  0x0a, 0x51, 0xd9, 0xc5, 0x06, 0x24, 0x54, 0x84, 0x50, 0xe2, 0xa0, 0x12, 0x11, 0x09, 0xd8, 0xaa,",
          "599:  0x48, 0x70, 0x41, 0xd3, 0xf5, 0x8b, 0xbd, 0x64, 0xbd, 0x33, 0xcc, 0x8c, 0x17, 0x59, 0x51, 0x2f,",
          "600:  0x9c, 0x0a, 0x37, 0x40, 0xdc, 0xb8, 0x54, 0xe2, 0xc0, 0x47, 0xe1, 0x88, 0xc4, 0x17, 0x40, 0x11,",
          "601:  0x1f, 0x04, 0xcd, 0xcc, 0xfe, 0x73, 0x6c, 0x6f, 0x5b, 0x91, 0xe6, 0xf6, 0xe6, 0xcd, 0x9b, 0xf7,",
          "602:  0xfb, 0xbd, 0xdf, 0xbc, 0x7d, 0x3b, 0x88, 0x48, 0x10, 0x09, 0x08, 0x4f, 0x00, 0x67, 0x32, 0x54,",
          "603:  0x4c, 0x8c, 0x4b, 0xa6, 0xcb, 0x05, 0x53, 0x0c, 0xa3, 0xc2, 0xd3, 0xbc, 0xda, 0x67, 0x7d, 0x66,",
          "604:  0xdc, 0x9e, 0xb6, 0x6c, 0x44, 0xb3, 0xd5, 0x67, 0xac, 0x1f, 0x81, 0x47, 0x79, 0xe8, 0xd1, 0x38,",
          "605:  0x66, 0x8a, 0xaa, 0x90, 0xc5, 0x32, 0xdd, 0x25, 0x47, 0xef, 0x49, 0x37, 0x64, 0x66, 0x37, 0x60,",
          "606:  0x02, 0xbc, 0xa4, 0xed, 0xf5, 0x21, 0x06, 0x41, 0x15, 0xf4, 0xd2, 0x98, 0xfd, 0x7e, 0xa8, 0x06,",
          "607:  0xa3, 0x47, 0x6e, 0xc0, 0x86, 0x1e, 0x15, 0x06, 0xe2, 0x1b, 0x63, 0xbc, 0x19, 0xf4, 0x3c, 0x7e,",
          "608:  0xd4, 0xd7, 0x87, 0xa5, 0x47, 0x39, 0x8f, 0xc2, 0xc0, 0x24, 0xf7, 0x92, 0x36, 0x8d, 0xf8, 0x80,",
          "609:  0x4e, 0xa7, 0xda, 0xad, 0x4a, 0x65, 0x4a, 0x79, 0x66, 0xc9, 0xe4, 0x43, 0xb4, 0xe6, 0x03, 0x67,",
          "610:  0x3b, 0x9c, 0xcb, 0xcf, 0x47, 0x20, 0xc6, 0x18, 0xa3, 0x25, 0x1d, 0xd4, 0x70, 0x36, 0x9d, 0xad,",
          "611:  0x15, 0xdf, 0xd8, 0xb8, 0x89, 0x96, 0x05, 0x24, 0xa1, 0x0c, 0x59, 0xdc, 0x58, 0x30, 0xfe, 0x7c,",
          "612:  0x4d, 0xda, 0xe8, 0xe2, 0x0e, 0xe7, 0xfb, 0xf1, 0x21, 0xd3, 0x47, 0xd5, 0x98, 0x43, 0x76, 0x54,",
          "613:  0xdb, 0xda, 0xc7, 0xa9, 0x1a, 0xa4, 0xc7, 0x8c, 0x4d, 0x8e, 0xd1, 0x95, 0x14, 0x73, 0x0f, 0x14,",
          "614:  0x0d, 0xa3, 0x14, 0xb9, 0x87, 0x6a, 0x92, 0x8d, 0x44, 0x60, 0x13, 0xac, 0x76, 0x0e, 0xdc, 0xa2,",
          "615:  0x3e, 0x37, 0xab, 0xcf, 0x18, 0x5f, 0x07, 0x3d, 0x97, 0x1f, 0xf5, 0x5d, 0x2d, 0x95, 0x5b, 0x92,",
          "616:  0xca, 0xcd, 0xa4, 0x72, 0x77, 0x0a, 0xe7, 0x03, 0x93, 0xd3, 0x4f, 0x73, 0x93, 0x0f, 0x50, 0x3d,",
          "617:  0x2b, 0xd8, 0x07, 0xc9, 0x59, 0x2c, 0x01, 0xbf, 0x81, 0x2e, 0x84, 0x0a, 0x86, 0xb2, 0xe1, 0x6c,",
          "618:  0x2e, 0x6e, 0xad, 0x76, 0xae, 0xb8, 0x25, 0x99, 0xd2, 0xe2, 0x7c, 0x1b, 0x41, 0xba, 0x68, 0x45,",
          "619:  0x1f, 0x9f, 0xaf, 0x15, 0x41, 0x97, 0x0e, 0x99, 0x06, 0x84, 0x43, 0x01, 0xd2, 0x16, 0xbe, 0xec,",
          "620:  0x4f, 0xf8, 0xc8, 0xd3, 0x05, 0xf4, 0x8a, 0x21, 0x11, 0x04, 0x20, 0xab, 0x75, 0x1f, 0x49, 0x10,",
          "621:  0x31, 0x1d, 0x42, 0xa6, 0x7b, 0xb6, 0xd6, 0x7b, 0x9c, 0x4a, 0xf9, 0x1d, 0x13, 0xbd, 0xc6, 0xa2,",
          "622:  0xdd, 0xcb, 0xd6, 0xf8, 0x36, 0x5a, 0x93, 0x72, 0xf0, 0x99, 0x08, 0x13, 0xaa, 0xe0, 0x13, 0x18,",
          "623:  0x37, 0x96, 0x4c, 0xc0, 0xa4, 0x53, 0x67, 0x08, 0x63, 0x09, 0xc1, 0x48, 0x40, 0xe3, 0x82, 0x61,",
          "624:  0x99, 0xaf, 0xf1, 0x5d, 0x74, 0x59, 0x45, 0xb2, 0x1b, 0x85, 0x10, 0xab, 0x2e, 0x08, 0xb5, 0x47,",
          "625:  0x15, 0x6d, 0xd4, 0x4c, 0x96, 0xe9, 0x0d, 0xbc, 0x8d, 0xea, 0x13, 0x4e, 0x0d, 0x79, 0xd1, 0x04,",
          "626:  0x4f, 0xf9, 0xf3, 0x26, 0x59, 0x99, 0x6c, 0x12, 0x53, 0x23, 0xb2, 0x3e, 0x6d, 0x93, 0x75, 0x74,",
          "627:  0x49, 0x4b, 0x94, 0xdd, 0x11, 0xf9, 0xdd, 0x41, 0x97, 0xb5, 0xa3, 0x2b, 0x80, 0x2a, 0xf0, 0xe1,",
          "628:  0xdb, 0x11, 0x48, 0x85, 0xbf, 0x2c, 0xa9, 0xb6, 0xda, 0xf9, 0xe8, 0x7f, 0x74, 0x8c, 0x9f, 0x5f,",
          "629:  0x79, 0x2a, 0xfe, 0x35, 0x54, 0x1b, 0x71, 0x09, 0x42, 0xa5, 0x57, 0x98, 0xae, 0x70, 0x0b, 0xad,",
          "630:  0x04, 0x02, 0x7a, 0xf2, 0xd3, 0x38, 0x1a, 0x1b, 0xe5, 0x97, 0xfd, 0xc2, 0x41, 0x62, 0xcb, 0xf2,",
          "631:  0x21, 0xef, 0x9d, 0x0b, 0xcb, 0xce, 0x8f, 0xeb, 0x16, 0xd0, 0x3a, 0x1f, 0x80, 0x48, 0xc2, 0x00,",
          "632:  0xf0, 0x0f, 0x0e, 0x5a, 0x3a, 0x08, 0xa5, 0xc2, 0xaf, 0x96, 0x5b, 0x39, 0x6f, 0xdc, 0xe6, 0xfe,",
          "633:  0x99, 0x50, 0xd0, 0x08, 0xe4, 0xe6, 0xf7, 0x7f, 0xff, 0xfb, 0xcb, 0xc2, 0x35, 0x7c, 0xd5, 0x4c,",
          "634:  0xbd, 0xa4, 0x5d, 0x8c, 0x98, 0x10, 0xe4, 0x93, 0x05, 0x07, 0x3f, 0x71, 0xd0, 0xe2, 0x7d, 0x98,",
          "635:  0x4b, 0xe5, 0x6c, 0xd4, 0x20, 0xb7, 0x0c, 0x8d, 0x1b, 0xf8, 0xfa, 0x2c, 0x1a, 0xde, 0xb1, 0x5e,",
          "636:  0x3d, 0xc6, 0x3f, 0x3b, 0xa8, 0xae, 0x49, 0xfb, 0xa5, 0xbd, 0x73, 0x90, 0xa8, 0x55, 0x25, 0x11,",
          "637:  0x1e, 0xa2, 0x65, 0x1d, 0xa5, 0x07, 0x12, 0x7e, 0xed, 0x34, 0x97, 0x7c, 0x2e, 0x37, 0x5b, 0xb3,",
          "638:  0xb6, 0xf2, 0xaf, 0x63, 0xcb, 0x40, 0x10, 0xbc, 0x59, 0x51, 0xbe, 0xfe, 0xa9, 0x48, 0xfc, 0x93,",
          "639:  0x83, 0xd6, 0xee, 0x83, 0x2a, 0x86, 0x2f, 0xbe, 0x39, 0x23, 0x73, 0x79, 0x30, 0x37, 0xc9, 0xfc,",
          "640:  0x80, 0x9c, 0xc0, 0xfb, 0x86, 0xc0, 0xbb, 0xe4, 0xad, 0xd9, 0x04, 0xec, 0xf0, 0x35, 0x79, 0x1e,",
          "641:  0xfa, 0x07, 0x86, 0x4a, 0xcf, 0x66, 0xb8, 0xe7, 0x6c, 0xe3, 0xc4, 0x50, 0xfa, 0x18, 0xa2, 0x61,",
          "642:  0x77, 0x40, 0x85, 0x9a, 0x7b, 0x27, 0x1b, 0x65, 0x77, 0x11, 0x9e, 0x93, 0x70, 0x0d, 0x89, 0x2d,",
          "643:  0x7c, 0xa7, 0x4a, 0x85, 0x01, 0x44, 0xc3, 0xc0, 0xc2, 0xfc, 0xea, 0xa0, 0x9a, 0x9d, 0x27, 0xf8,",
          "644:  0xc6, 0x69, 0xc4, 0x89, 0x39, 0x73, 0x56, 0x5d, 0xfa, 0xba, 0x21, 0xd8, 0x22, 0x33, 0x3b, 0xe1,",
          "645:  0x9e, 0xf9, 0xa2, 0xf5, 0x27, 0xf3, 0x9b, 0x83, 0xea, 0x19, 0x7e, 0x76, 0xf6, 0x9c, 0x18, 0x92,",
          "646:  0x67, 0x33, 0xc4, 0x4f, 0x1d, 0x54, 0xb3, 0x03, 0x6e, 0x9a, 0xd4, 0xc4, 0xe0, 0x3b, 0x2b, 0x52,",
          "647:  0x6d, 0x7b, 0xaf, 0xcd, 0x8a, 0xee, 0x36, 0x3c, 0x1e, 0x17, 0x12, 0xfe, 0xe1, 0xa0, 0x7a, 0xc6,",
          "648:  0x65, 0xbe, 0x84, 0x2f, 0x85, 0xad, 0xfb, 0x62, 0x6c, 0x31, 0x45, 0xb5, 0x3d, 0x88, 0x40, 0xc1,",
          "649:  0xbc, 0xb6, 0x6f, 0x9c, 0x76, 0xe7, 0x0d, 0x7f, 0xc7, 0x4e, 0xbd, 0xed, 0xaa, 0xa9, 0xa7, 0xd5,",
          "650:  0x18, 0xa0, 0xba, 0x85, 0x28, 0x89, 0xf1, 0xc2, 0x60, 0xb7, 0x9e, 0x03, 0x0c, 0x1f, 0xa3, 0xf5,",
          "651:  0x2f, 0x68, 0x14, 0x6a, 0x59, 0xed, 0xeb, 0x06, 0x5f, 0x9f, 0x9a, 0x1e, 0xc5, 0xab, 0xa7, 0x02,",
          "652:  0xad, 0x63, 0xd0, 0xee, 0x92, 0xdb, 0x55, 0xdf, 0x72, 0x92, 0x42, 0x59, 0x25, 0x77, 0x77, 0xff,",
          "653:  0x3c, 0xd9, 0x70, 0xfe, 0x3a, 0xd9, 0x70, 0xfe, 0x39, 0xd9, 0x70, 0xbe, 0x7a, 0xe7, 0x39, 0x5e,",
          "654:  0xda, 0x81, 0x79, 0x9b, 0x94, 0x9e, 0xc5, 0x8f, 0x6a, 0xe6, 0x5d, 0xfc, 0xf6, 0x7f, 0x01, 0x00,",
          "655:  0x00, 0xff, 0xff, 0xed, 0x96, 0x61, 0xeb, 0x30, 0x0c, 0x00, 0x00,",
          "",
          "[Added Lines]",
          "605:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x6f, 0x1c, 0x35,",
          "606:  0x14, 0xd6, 0xa4, 0xe9, 0x36, 0x71, 0x9a, 0xb0, 0x75, 0x4b, 0xb5, 0x6c, 0xb7, 0x69, 0xe4, 0x96,",
          "607:  0x2a, 0x44, 0x65, 0x86, 0x5d, 0x40, 0x42, 0x45, 0x08, 0x25, 0x1b, 0x54, 0x22, 0x22, 0x15, 0xa6,",
          "608:  0x2a, 0x12, 0x5c, 0x90, 0x33, 0xfb, 0xb2, 0x6b, 0x32, 0x3b, 0x36, 0xb6, 0x77, 0xd1, 0x2a, 0xea,",
          "609:  0x85, 0x53, 0xe1, 0x06, 0x88, 0x1b, 0x17, 0x24, 0x0e, 0xfc, 0x17, 0x5c, 0x39, 0x22, 0xf1, 0x0f,",
          "610:  0xa0, 0x88, 0x3f, 0x04, 0xd9, 0x9e, 0x5f, 0x9b, 0xfd, 0xd1, 0x56, 0x84, 0xdc, 0xec, 0xcf, 0xf6,",
          "611:  0xfb, 0xbe, 0xf7, 0xf9, 0xcd, 0x1b, 0x23, 0xa2, 0x40, 0x0e, 0x41, 0x06, 0x12, 0x04, 0x57, 0x4c,",
          "612:  0x73, 0x39, 0x2a, 0x0d, 0x7d, 0x21, 0xb9, 0xe6, 0x18, 0x15, 0x48, 0xfd, 0x5a, 0x97, 0x77, 0xb9,",
          "613:  0x85, 0x03, 0x33, 0x72, 0x3b, 0xea, 0x8d, 0x2e, 0xe7, 0xdd, 0x18, 0x02, 0x2a, 0x58, 0x40, 0x93,",
          "614:  0x84, 0x6b, 0xaa, 0x19, 0x4f, 0x54, 0xba, 0x4a, 0x8e, 0xde, 0x51, 0x3e, 0xe3, 0x76, 0x35, 0xe2,",
          "615:  0x12, 0x82, 0x61, 0x33, 0xe8, 0x42, 0x02, 0x92, 0x6a, 0xe8, 0xa4, 0x7b, 0xf6, 0xba, 0x4c, 0xf7,",
          "616:  0x06, 0x07, 0x7e, 0xc4, 0xfb, 0x01, 0x95, 0x96, 0xe2, 0x4b, 0x3b, 0x78, 0x3d, 0xea, 0x04, 0xe2,",
          "617:  0xa8, 0x6b, 0x0e, 0xab, 0x80, 0x0a, 0x11, 0xb3, 0xc8, 0x06, 0x0f, 0x86, 0x4d, 0x1a, 0x8b, 0x1e,",
          "618:  0x9d, 0x0c, 0xb5, 0x33, 0x2f, 0x94, 0x4d, 0xe5, 0x99, 0x29, 0x93, 0xf7, 0xd1, 0x6a, 0x08, 0x82,",
          "619:  0x6f, 0x0b, 0xa1, 0x3e, 0x19, 0x80, 0x1c, 0x61, 0x8c, 0x16, 0xcd, 0xa6, 0x9a, 0xb7, 0xe1, 0x6d,",
          "620:  0x2e, 0x87, 0x76, 0x8c, 0xeb, 0x68, 0x49, 0xc2, 0x90, 0x29, 0xc6, 0x93, 0xda, 0x82, 0xc5, 0xf3,",
          "621:  0x39, 0x69, 0xa2, 0x4b, 0xdb, 0x42, 0xec, 0x25, 0x87, 0xdc, 0x1c, 0xd5, 0x23, 0x01, 0xd9, 0x51,",
          "622:  0x33, 0x36, 0x98, 0xa0, 0xba, 0x97, 0x1e, 0xb3, 0x63, 0x72, 0x8c, 0xae, 0xa6, 0x9c, 0xbb, 0xa0,",
          "623:  0x29, 0x8b, 0x53, 0xe6, 0x0e, 0xaa, 0x28, 0x3e, 0x90, 0x91, 0x0b, 0xb0, 0xd2, 0xda, 0xf7, 0x8b,",
          "624:  0xfc, 0xfc, 0x2c, 0x3f, 0x3b, 0xf8, 0x22, 0xea, 0xf8, 0xe2, 0xa8, 0xeb, 0x1b, 0xab, 0xfc, 0x92,",
          "625:  0x55, 0x7e, 0x66, 0x95, 0xbf, 0x5d, 0x80, 0x8f, 0x6c, 0xcc, 0x30, 0x8d, 0x4d, 0xde, 0x43, 0xd5,",
          "626:  0x2c, 0xe1, 0x10, 0x94, 0xe0, 0x89, 0x02, 0xfc, 0x1a, 0xba, 0xc8, 0x34, 0xf4, 0x55, 0xcd, 0xdb,",
          "627:  0xb8, 0xb0, 0xb9, 0xd2, 0xba, 0xea, 0x97, 0x6c, 0x4a, 0x93, 0x0b, 0xdd, 0x0e, 0xd2, 0x46, 0xcb,",
          "628:  0xe6, 0xf8, 0x6c, 0xaf, 0x08, 0xba, 0x7c, 0xc8, 0x0d, 0x21, 0x1c, 0x4a, 0x50, 0x2e, 0xf1, 0xa5,",
          "629:  0x70, 0x0c, 0x23, 0xbf, 0x2f, 0xa0, 0x97, 0xac, 0x88, 0x28, 0x02, 0x35, 0xdf, 0xf7, 0x81, 0x02,",
          "630:  0x99, 0xd0, 0x3e, 0x64, 0xbe, 0x67, 0x73, 0xb3, 0x26, 0xa8, 0x52, 0x5f, 0x73, 0xd9, 0xa9, 0x5d,",
          "631:  0x70, 0x6b, 0xd9, 0x1c, 0xdf, 0x41, 0xab, 0x4a, 0xf5, 0x3e, 0x96, 0x6c, 0x48, 0x35, 0x7c, 0x04,",
          "632:  0xa3, 0xda, 0xa2, 0xdd, 0x30, 0x0e, 0x9a, 0x08, 0x2c, 0x51, 0x10, 0x0d, 0x24, 0xd4, 0x2e, 0x5a,",
          "633:  0x95, 0xf9, 0x1c, 0xdf, 0x43, 0x57, 0x74, 0xac, 0xda, 0x31, 0x83, 0x44, 0xb7, 0x41, 0xea, 0x5d,",
          "634:  0xaa, 0x69, 0xad, 0x62, 0xa3, 0x4c, 0x2e, 0xe0, 0x2d, 0x54, 0x1d, 0x03, 0x0d, 0xe5, 0x25, 0xbb,",
          "635:  0x79, 0x02, 0xcf, 0x8b, 0x64, 0x79, 0xbc, 0x48, 0x6c, 0x8e, 0xc8, 0x61, 0x36, 0xbf, 0x06, 0x5a,",
          "636:  0x86, 0x84, 0x1e, 0xc4, 0xf0, 0x30, 0x62, 0xb5, 0x15, 0x2b, 0xaf, 0x00, 0xc8, 0x1a, 0xba, 0x6c,",
          "637:  0x0c, 0xcc, 0x6e, 0x90, 0xfc, 0xea, 0xa1, 0x2b, 0x06, 0x68, 0x4b, 0xa0, 0x1a, 0x42, 0xf8, 0x6a,",
          "638:  0x00, 0x4a, 0xe3, 0xcf, 0x4a, 0x9e, 0xae, 0xb4, 0x3e, 0xf8, 0x0f, 0xf5, 0x14, 0xe6, 0x05, 0x91,",
          "639:  0x5e, 0xcd, 0x75, 0x54, 0x19, 0x08, 0x05, 0x52, 0xa7, 0x17, 0x9c, 0xce, 0x8c, 0xec, 0x48, 0x42,",
          "640:  0x47, 0x3d, 0x4c, 0xe2, 0x91, 0xbd, 0x97, 0xa5, 0xb0, 0x00, 0x48, 0xe2, 0x54, 0x3e, 0x16, 0x9d,",
          "641:  0x73, 0x51, 0xd9, 0xfa, 0x6e, 0xcd, 0x11, 0x3a, 0xf0, 0x11, 0xc8, 0x21, 0x8b, 0x00, 0x7f, 0xeb,",
          "642:  0xa1, 0xc5, 0x7d, 0xa6, 0x34, 0x7e, 0xb9, 0x5c, 0xe8, 0x79, 0x59, 0xd7, 0xf7, 0xce, 0x44, 0x82,",
          "643:  0x61, 0x20, 0xb7, 0xbe, 0xf9, 0xeb, 0x9f, 0x1f, 0x17, 0xae, 0xe3, 0x6b, 0xb6, 0x27, 0x0e, 0x9b,",
          "644:  0x45, 0x03, 0x62, 0xa0, 0x9e, 0x2e, 0x78, 0xf8, 0xa9, 0x87, 0x2e, 0x3c, 0x80, 0x99, 0x52, 0xce,",
          "645:  0xc6, 0x0d, 0x72, 0xdb, 0xca, 0xb8, 0x89, 0x6f, 0x4c, 0x93, 0x11, 0x1c, 0x9b, 0xd9, 0x13, 0xfc,",
          "646:  0x83, 0x87, 0xaa, 0x46, 0x74, 0x58, 0x5a, 0x3b, 0x07, 0x8b, 0x1a, 0xf3, 0x2c, 0xc2, 0x7d, 0xb4,",
          "647:  0x64, 0x76, 0x99, 0x76, 0x85, 0x5f, 0x39, 0xad, 0x25, 0xef, 0xda, 0xf5, 0xc6, 0xb4, 0xa5, 0xfc,",
          "648:  0xeb, 0xd8, 0xb4, 0x14, 0x04, 0x6f, 0xcc, 0x49, 0xdf, 0xfc, 0x72, 0x14, 0xfe, 0xde, 0x43, 0xab,",
          "649:  0x0f, 0x40, 0x17, 0xad, 0x19, 0xdf, 0x9a, 0x12, 0xb9, 0xdc, 0xb6, 0xeb, 0x64, 0xf6, 0x86, 0x5c,",
          "650:  0xc0, 0xbb, 0x56, 0xc0, 0xdb, 0xe4, 0x8d, 0xe9, 0x02, 0x5c, 0x6b, 0xb6, 0x71, 0x1e, 0x87, 0xfb,",
          "651:  0x56, 0x4a, 0xc7, 0x45, 0xb8, 0xef, 0x6d, 0xe1, 0xa1, 0x95, 0xf4, 0x21, 0xc4, 0xfd, 0x76, 0x8f,",
          "652:  0x4a, 0x3d, 0xf3, 0x4e, 0xd6, 0xcb, 0x70, 0xb1, 0x3d, 0x17, 0xe1, 0x5b, 0x11, 0x9b, 0xf8, 0xee,",
          "653:  0x3c, 0x17, 0x7a, 0x10, 0xf7, 0x23, 0x47, 0xf3, 0x93, 0x87, 0x2a, 0xae, 0x9f, 0xe0, 0x9b, 0xa7,",
          "654:  0x19, 0xc7, 0xfa, 0xcc, 0x59, 0x55, 0xe9, 0xab, 0x56, 0x60, 0x83, 0x4c, 0xad, 0x84, 0xfb, 0xf6,",
          "655:  0x8b, 0x36, 0x9f, 0xcc, 0xcf, 0x1e, 0xaa, 0x66, 0xfc, 0xd9, 0xd9, 0x73, 0x52, 0x48, 0x9e, 0xad,",
          "656:  0x10, 0xff, 0xe2, 0xa1, 0x8a, 0x6b, 0x70, 0x93, 0xa2, 0xc6, 0x1a, 0xdf, 0x59, 0x89, 0x6a, 0xba,",
          "657:  0x7b, 0xad, 0xcf, 0xa9, 0x6e, 0xab, 0xe3, 0x49, 0x61, 0xe1, 0x6f, 0x1e, 0xaa, 0x66, 0x5a, 0x66,",
          "658:  0x5b, 0xf8, 0xbf, 0xa8, 0xf5, 0x5f, 0x4c, 0x2d, 0xa6, 0xa8, 0xb2, 0x0b, 0x31, 0x68, 0x98, 0x55,",
          "659:  0xf6, 0xb5, 0xd3, 0x70, 0x5e, 0xf0, 0x77, 0x5d, 0xd7, 0xdb, 0x9a, 0xd7, 0xf5, 0x8c, 0x1b, 0x3d,",
          "660:  0x54, 0x75, 0x14, 0x25, 0x33, 0x5e, 0x98, 0xec, 0xf6, 0x73, 0x90, 0xe1, 0x63, 0xb4, 0xf6, 0x29,",
          "661:  0x8d, 0x99, 0xb1, 0xd5, 0xbd, 0x7d, 0xf0, 0x8d, 0x89, 0xee, 0x51, 0xbc, 0x89, 0xe6, 0xb0, 0xb5,",
          "662:  0x2c, 0xdb, 0x3d, 0x72, 0x67, 0xde, 0xb7, 0x3c, 0x4c, 0xa9, 0x9c, 0x93, 0x3b, 0x3b, 0x7f, 0x9c,",
          "663:  0xac, 0x7b, 0x7f, 0x9e, 0xac, 0x7b, 0x7f, 0x9f, 0xac, 0x7b, 0x9f, 0xbf, 0xf5, 0x1c, 0xef, 0xf0,",
          "664:  0xc8, 0xbe, 0x5c, 0x4a, 0x8f, 0xe6, 0x83, 0x8a, 0x7d, 0x35, 0xbf, 0xf9, 0x6f, 0x00, 0x00, 0x00,",
          "665:  0xff, 0xff, 0x4d, 0x12, 0x9c, 0xe8, 0x4e, 0x0c, 0x00, 0x00,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1427:   i -= len(m.XXX_unrecognized)",
          "1428:   copy(dAtA[i:], m.XXX_unrecognized)",
          "1429:  }",
          "1430:  if len(m.Name) > 0 {",
          "1431:   i -= len(m.Name)",
          "1432:   copy(dAtA[i:], m.Name)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1440:  if m.EnableOci {",
          "1441:   i--",
          "1442:   if m.EnableOci {",
          "1443:    dAtA[i] = 1",
          "1444:   } else {",
          "1445:    dAtA[i] = 0",
          "1446:   }",
          "1447:   i--",
          "1448:   dAtA[i] = 0x58",
          "1449:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1766:  if l > 0 {",
          "1767:   n += 1 + l + sovRepository(uint64(l))",
          "1768:  }",
          "1769:  if m.XXX_unrecognized != nil {",
          "1770:   n += len(m.XXX_unrecognized)",
          "1771:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1789:  if m.EnableOci {",
          "1790:   n += 2",
          "1791:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2653:    }",
          "2654:    m.Name = string(dAtA[iNdEx:postIndex])",
          "2655:    iNdEx = postIndex",
          "2656:   default:",
          "2657:    iNdEx = preIndex",
          "2658:    skippy, err := skipRepository(dAtA[iNdEx:])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2679:   case 11:",
          "2680:    if wireType != 0 {",
          "2681:     return fmt.Errorf(\"proto: wrong wireType = %d for field EnableOci\", wireType)",
          "2682:    }",
          "2683:    var v int",
          "2684:    for shift := uint(0); ; shift += 7 {",
          "2685:     if shift >= 64 {",
          "2686:      return ErrIntOverflowRepository",
          "2687:     }",
          "2688:     if iNdEx >= l {",
          "2689:      return io.ErrUnexpectedEOF",
          "2690:     }",
          "2691:     b := dAtA[iNdEx]",
          "2692:     iNdEx++",
          "2693:     v |= int(b&0x7F) << shift",
          "2694:     if b < 0x80 {",
          "2695:      break",
          "2696:     }",
          "2697:    }",
          "2698:    m.EnableOci = bool(v != 0)",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/generated.pb.go||pkg/apis/application/v1alpha1/generated.pb.go": [
          "File: pkg/apis/application/v1alpha1/generated.pb.go -> pkg/apis/application/v1alpha1/generated.pb.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2541: }",
          "2543: var fileDescriptor_e7dc23c2911a1a00 = []byte{",
          "2545:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x3c, 0x6d, 0x6c, 0x24, 0xd9,",
          "2546:  0x51, 0xd7, 0x33, 0xfe, 0x98, 0x29, 0x7f, 0xec, 0xfa, 0xed, 0xed, 0xc5, 0x59, 0x2e, 0xeb, 0x55,",
          "2547:  0x9f, 0x92, 0x1c, 0x24, 0xb1, 0xb9, 0xe5, 0x80, 0x4b, 0x0e, 0x12, 0x3c, 0xf6, 0x7e, 0x78, 0xd7,",
          "2548:  0xf6, 0xfa, 0xca, 0xbe, 0x5b, 0xe9, 0xf2, 0xc1, 0xb5, 0x7b, 0xde, 0xcc, 0xf4, 0x7a, 0xa6, 0x7b,",
          "2549:  0xae, 0xbb, 0xc7, 0xbb, 0x3e, 0x92, 0x90, 0x40, 0x82, 0x4e, 0xe1, 0x2e, 0x42, 0x44, 0xe4, 0x0f,",
          "2551:  0x51, 0x84, 0xe0, 0x84, 0x90, 0xe1, 0x36, 0x42, 0x42, 0xf0, 0x23, 0x20, 0xf8, 0xb5, 0xbf, 0xd0,",
          "2552:  0xfb, 0x7e, 0xdd, 0x33, 0xb3, 0xb6, 0x77, 0x7a, 0x37, 0xa7, 0xf0, 0x6f, 0xa6, 0xaa, 0xba, 0xea,",
          "2553:  0xf5, 0x7b, 0x55, 0xf5, 0xaa, 0xea, 0xd5, 0x6b, 0x58, 0x6b, 0x06, 0x69, 0xab, 0xb7, 0xbb, 0xe8,",
          "",
          "[Removed Lines]",
          "2550:  0x09, 0x22, 0xf0, 0x03, 0x11, 0x89, 0x1f, 0x11, 0x12, 0x82, 0x9f, 0x04, 0x09, 0x4e, 0xfc, 0x40,",
          "",
          "[Added Lines]",
          "2550:  0x89, 0x44, 0xe0, 0x07, 0x22, 0x12, 0x3f, 0x22, 0x24, 0x04, 0x3f, 0x09, 0x12, 0x9c, 0xf8, 0x01,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2586:  0x49, 0xe7, 0xc7, 0xf9, 0x00, 0x96, 0x8e, 0xa7, 0x52, 0x57, 0xe2, 0xa8, 0xd7, 0xbd, 0x1e, 0x84,",
          "2587:  0xf5, 0xda, 0x05, 0x29, 0x69, 0x7e, 0x65, 0x08, 0x63, 0x1c, 0x2a, 0x92, 0x7c, 0xcd, 0x81, 0x73,",
          "2588:  0xa1, 0xd7, 0xa1, 0x49, 0xd7, 0x63, 0x8b, 0x2a, 0xd0, 0xb5, 0xb6, 0xe7, 0xef, 0xf1, 0x11, 0x4d,",
          "2590:  0x60, 0x2e, 0x8a, 0xbb, 0x2d, 0x2f, 0xa4, 0x75, 0x85, 0x4d, 0xe6, 0x27, 0xb9, 0xc5, 0x7d, 0x72,",
          "2591:  0x84, 0xf5, 0xb9, 0x91, 0xe7, 0xb9, 0x11, 0x85, 0x41, 0x1a, 0xc5, 0xdb, 0x34, 0x4d, 0x83, 0xb0,",
          "2592:  0x99, 0xd4, 0xce, 0xde, 0x3d, 0x5c, 0x98, 0xeb, 0xa3, 0xc2, 0xfe, 0xc1, 0x90, 0x3b, 0x30, 0x95,",
          "",
          "[Removed Lines]",
          "2589:  0x3c, 0xd8, 0x88, 0x5c, 0x39, 0xa2, 0x73, 0x9b, 0x43, 0x59, 0xe3, 0x7d, 0xc4, 0x92, 0xdf, 0x77,",
          "",
          "[Added Lines]",
          "2589:  0x3c, 0xd8, 0x88, 0x5c, 0x39, 0xa2, 0x73, 0x9b, 0x43, 0x59, 0xe3, 0x7d, 0xc4, 0x92, 0xdf, 0x73,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2595:  0x46, 0xf7, 0x11, 0x4b, 0xbe, 0xe4, 0xc0, 0x4c, 0x12, 0x34, 0x43, 0x2f, 0xed, 0xc5, 0xf4, 0x3a,",
          "2596:  0x3d, 0x48, 0xe6, 0x81, 0x0f, 0xe4, 0xca, 0x28, 0x53, 0x62, 0xf1, 0xab, 0x9d, 0x95, 0x03, 0x9c,",
          "2597:  0xb1, 0xa1, 0x09, 0x66, 0x85, 0x0e, 0xb2, 0x2f, 0xa3, 0xcd, 0x53, 0xc5, 0xda, 0x97, 0xd1, 0xe5,",
          "2599:  0xa7, 0x3b, 0xd1, 0x1e, 0x0d, 0x93, 0xda, 0x01, 0x73, 0x10, 0xdc, 0xdd, 0x4e, 0x5d, 0x7c, 0xa5,",
          "2600:  0xc0, 0x8d, 0x6d, 0xf1, 0x5a, 0x56, 0xc4, 0xa5, 0x30, 0x8d, 0x0f, 0x6a, 0xef, 0x91, 0x2f, 0x73,",
          "2601:  0xea, 0xda, 0xcd, 0x1d, 0x1b, 0x8b, 0xf9, 0x11, 0x9d, 0x7b, 0xdd, 0x81, 0xc7, 0x07, 0xb1, 0x20,",
          "2602:  0xa7, 0xa1, 0xbc, 0x47, 0x0f, 0x44, 0x14, 0x83, 0xec, 0x27, 0x79, 0x19, 0xc6, 0xf7, 0xbd, 0x76,",
          "2603:  0x8f, 0xca, 0x68, 0x60, 0x75, 0x84, 0xb7, 0xd0, 0xc3, 0x42, 0xc1, 0xf2, 0x63, 0xa5, 0xe7, 0x1c,",
          "2605:  0x6c, 0x68, 0x43, 0xe3, 0x9b, 0x34, 0x17, 0xdf, 0xac, 0x17, 0x24, 0xef, 0xbe, 0x01, 0x0e, 0x79,",
          "2606:  0x15, 0xaa, 0x51, 0x97, 0x05, 0xae, 0x6c, 0xb7, 0x1c, 0x1b, 0x79, 0xe5, 0x6e, 0x28, 0x5e, 0xb5,",
          "2607:  0x99, 0xbb, 0x87, 0x0b, 0x55, 0xfd, 0x17, 0x8d, 0x14, 0xf7, 0x1f, 0x1d, 0x78, 0xdc, 0x1a, 0xe0,",
          "",
          "[Removed Lines]",
          "2598:  0xa1, 0x22, 0xdd, 0xbf, 0x2a, 0xc1, 0xe9, 0xfc, 0x8e, 0x43, 0xfe, 0xd0, 0x81, 0x53, 0xb7, 0x6e,",
          "2604:  0xf7, 0xaf, 0xcb, 0x30, 0x65, 0x6d, 0x0c, 0x8f, 0x20, 0xbc, 0x69, 0x67, 0xc2, 0x9b, 0x6b, 0xc5,",
          "",
          "[Added Lines]",
          "2598:  0xa1, 0x22, 0xdd, 0xbf, 0x2c, 0xc1, 0xe9, 0xfc, 0x8e, 0x43, 0xfe, 0xc0, 0x81, 0x53, 0xb7, 0x6e,",
          "2604:  0xf7, 0xaf, 0xca, 0x30, 0x65, 0x6d, 0x0c, 0x8f, 0x20, 0xbc, 0x69, 0x67, 0xc2, 0x9b, 0x6b, 0xc5,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2613:  0xc0, 0x44, 0x42, 0xe3, 0x7d, 0x1a, 0xcb, 0xb7, 0x33, 0xeb, 0xc1, 0xa1, 0x28, 0xb1, 0x64, 0x09,",
          "2614:  0xaa, 0xda, 0xc1, 0xca, 0x77, 0x9c, 0x93, 0xa4, 0x55, 0xe3, 0x95, 0x0d, 0x0d, 0x9b, 0x34, 0xf6,",
          "2615:  0x47, 0x46, 0x3a, 0x7a, 0xd2, 0x78, 0x22, 0xc1, 0x31, 0xee, 0x3f, 0x3b, 0x70, 0xca, 0x1a, 0xd5,",
          "2617:  0x30, 0x67, 0xeb, 0x3b, 0x77, 0xbe, 0x3c, 0x6d, 0xa2, 0xdd, 0xe8, 0x45, 0x5c, 0x97, 0x13, 0x6e,",
          "2618:  0xd2, 0x26, 0x01, 0x46, 0x85, 0x67, 0x33, 0xd8, 0xf5, 0xd2, 0x96, 0x9c, 0x6d, 0x3d, 0x83, 0x5b,",
          "2619:  0x5e, 0xda, 0x42, 0x8e, 0x21, 0x1f, 0x87, 0xd9, 0xd4, 0x8b, 0x9b, 0x34, 0x45, 0xba, 0x1f, 0x24,",
          "",
          "[Removed Lines]",
          "2616:  0x23, 0x08, 0x62, 0xf7, 0xb2, 0x41, 0xec, 0xe5, 0x62, 0x34, 0x79, 0x48, 0x14, 0xfb, 0xa7, 0x13,",
          "",
          "[Added Lines]",
          "2616:  0x23, 0x08, 0x62, 0xf7, 0xb2, 0x41, 0xec, 0xe5, 0x62, 0x34, 0x79, 0x48, 0x14, 0xfb, 0x27, 0x13,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2627:  0x45, 0x23, 0x96, 0xec, 0xc3, 0x44, 0xb7, 0xdd, 0x6b, 0x06, 0xe1, 0xfc, 0x14, 0x1f, 0x00, 0x16,",
          "2628:  0x39, 0x80, 0x2d, 0xce, 0xb9, 0x06, 0xcc, 0x85, 0x88, 0xdf, 0x28, 0xa5, 0x91, 0xa7, 0x60, 0xdc,",
          "2629:  0x6f, 0x79, 0x71, 0x3a, 0x3f, 0xcd, 0x95, 0x54, 0x5b, 0xcd, 0x0a, 0x03, 0xa2, 0xc0, 0xb9, 0x7f,",
          "2631:  0x38, 0x18, 0x15, 0x9e, 0x7c, 0x1e, 0x26, 0x6f, 0xc9, 0x75, 0x2e, 0x15, 0xbf, 0xce, 0xd7, 0xe4,",
          "2632:  0x3a, 0x6b, 0xf9, 0xd7, 0xd4, 0x5a, 0x4b, 0xa1, 0xee, 0x61, 0x19, 0xce, 0x0e, 0x34, 0x0b, 0xb2,",
          "2633:  0x08, 0xc0, 0xc3, 0x87, 0xcb, 0x01, 0xcb, 0xec, 0x44, 0x2e, 0x3b, 0xcb, 0x76, 0xfb, 0x97, 0x34,",
          "",
          "[Removed Lines]",
          "2630:  0xe3, 0xc0, 0xb9, 0xe1, 0x6f, 0x25, 0xcc, 0xc7, 0xef, 0xc5, 0x89, 0xf0, 0xc6, 0x15, 0xdb, 0x7c,",
          "",
          "[Added Lines]",
          "2630:  0xed, 0xc0, 0xb9, 0xe1, 0x6f, 0x25, 0xcc, 0xc7, 0xef, 0xc5, 0x89, 0xf0, 0xc6, 0x15, 0xdb, 0x7c,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2644:  0x0b, 0x07, 0x99, 0xe2, 0x72, 0x1f, 0xbf, 0x1e, 0xec, 0x26, 0xc8, 0xa1, 0xee, 0xf7, 0x9d, 0x01,",
          "2645:  0xb3, 0x22, 0x1d, 0x21, 0xd3, 0x25, 0x1a, 0xee, 0x07, 0x71, 0x14, 0x76, 0x68, 0x98, 0xe6, 0x6b,",
          "2646:  0x8d, 0x97, 0x0c, 0x0a, 0x6d, 0x3a, 0xf2, 0xab, 0x03, 0x0c, 0x60, 0x94, 0x32, 0x9b, 0x1c, 0xce,",
          "2648:  0x5b, 0x31, 0x6d, 0x04, 0x77, 0xe4, 0x5b, 0x69, 0x96, 0x9b, 0x1a, 0x83, 0x16, 0x95, 0x7a, 0x66,",
          "2649:  0xbb, 0xd7, 0x60, 0xcf, 0x94, 0xfa, 0x9f, 0x11, 0x18, 0xb4, 0xa8, 0xc8, 0xb3, 0x30, 0x11, 0x74,",
          "2650:  0xbc, 0x26, 0x55, 0x73, 0xff, 0x24, 0xb3, 0xa7, 0x35, 0x0e, 0xb9, 0x77, 0xb8, 0x30, 0xab, 0x07,",
          "",
          "[Removed Lines]",
          "2647:  0xb1, 0x6d, 0xc0, 0xfd, 0xdb, 0xf2, 0x00, 0xaf, 0xa4, 0x77, 0x17, 0x72, 0x11, 0x80, 0x45, 0x34,",
          "",
          "[Added Lines]",
          "2647:  0xb1, 0x6d, 0xc0, 0xfd, 0x9b, 0xf2, 0x00, 0xaf, 0xa4, 0x77, 0x17, 0x72, 0x11, 0x80, 0x45, 0x34,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2692:  0x59, 0xf3, 0xfc, 0xbd, 0xa8, 0xd1, 0x20, 0x1f, 0x86, 0x4a, 0xbd, 0x27, 0x0b, 0xdc, 0xe2, 0xdd,",
          "2693:  0x74, 0xe9, 0x72, 0x55, 0xc2, 0x51, 0x53, 0x30, 0x65, 0x6a, 0x78, 0x7e, 0x1a, 0xc5, 0x7c, 0xcc,",
          "2694:  0x65, 0xa1, 0x4c, 0x97, 0x39, 0x04, 0x25, 0x86, 0x65, 0x57, 0x1d, 0xef, 0x8e, 0x7a, 0x38, 0x9f,",
          "2696:  0x58, 0xc5, 0xc9, 0xa5, 0xa1, 0x71, 0x72, 0x17, 0x26, 0x7c, 0xde, 0x60, 0x22, 0x37, 0xb1, 0x51,",
          "2697:  0x0a, 0x16, 0x72, 0x74, 0xa2, 0x61, 0xc5, 0x8c, 0x49, 0xfc, 0x47, 0x29, 0x87, 0xbc, 0xe9, 0xc0,",
          "2698:  0x29, 0x9f, 0x25, 0x76, 0xbe, 0xf1, 0xb3, 0x63, 0x23, 0x1f, 0x91, 0xac, 0x64, 0x39, 0x9a, 0x33,",
          "",
          "[Removed Lines]",
          "2695:  0xa9, 0x6f, 0x18, 0x14, 0xda, 0x74, 0xee, 0x5f, 0x8e, 0xc3, 0xa4, 0x3c, 0x3d, 0x3a, 0x76, 0x39,",
          "",
          "[Added Lines]",
          "2695:  0xa9, 0x6f, 0x18, 0x14, 0xda, 0x74, 0xee, 0x5f, 0x8c, 0xc3, 0xa4, 0x3c, 0x3d, 0x3a, 0x76, 0x39,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2706:  0xad, 0x44, 0x3d, 0x59, 0x70, 0x28, 0x9b, 0x5a, 0x10, 0x66, 0xb0, 0x98, 0xa3, 0x26, 0x4b, 0x50,",
          "2707:  0x65, 0x43, 0x16, 0x8f, 0x0a, 0xb3, 0xd3, 0x11, 0xe2, 0xf2, 0xd6, 0x9a, 0x7c, 0xca, 0xd0, 0x90,",
          "2708:  0x08, 0xe6, 0xda, 0x5e, 0x92, 0xf2, 0x11, 0xb0, 0x78, 0xee, 0x01, 0x8f, 0x76, 0xf8, 0x41, 0xff,",
          "2710:  0xb0, 0x3d, 0x48, 0x27, 0xb1, 0xda, 0xab, 0xbc, 0x28, 0xe1, 0xa8, 0x29, 0x18, 0x75, 0xd7, 0x4b,",
          "2711:  0x92, 0xdb, 0x51, 0x5c, 0x97, 0xa6, 0xac, 0xa9, 0xb7, 0x24, 0x1c, 0x35, 0x05, 0xf3, 0x2f, 0xbb,",
          "2712:  0xd4, 0x8b, 0x69, 0xcc, 0x0f, 0x41, 0xf3, 0xfe, 0xa5, 0x66, 0x50, 0x68, 0xd3, 0x71, 0xbb, 0x4c,",
          "",
          "[Removed Lines]",
          "2709:  0x7a, 0x9e, 0x11, 0xf6, 0xf3, 0x76, 0xff, 0xac, 0x0c, 0x33, 0x19, 0xe3, 0x60, 0x5e, 0xa5, 0x97,",
          "",
          "[Added Lines]",
          "2709:  0x7a, 0x9e, 0x11, 0xf6, 0xf3, 0x76, 0xff, 0xb4, 0x0c, 0x33, 0x19, 0xe3, 0x60, 0x5e, 0xa5, 0x97,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2738:  0x13, 0xed, 0x30, 0x20, 0x0a, 0x1c, 0x5b, 0x94, 0xa4, 0xb7, 0xcb, 0xeb, 0x0e, 0xb9, 0xb3, 0x83,",
          "2739:  0x6d, 0x01, 0x46, 0x85, 0x67, 0xa4, 0x7b, 0xf4, 0x60, 0x95, 0x79, 0xf0, 0xdc, 0xe9, 0xde, 0x75,",
          "2740:  0x01, 0x46, 0x85, 0x77, 0xef, 0x3a, 0x40, 0xb2, 0xd3, 0xf1, 0x08, 0x36, 0x81, 0x30, 0xbb, 0x09,",
          "2742:  0xcc, 0x19, 0xc2, 0x8d, 0xac, 0x21, 0xdc, 0x3b, 0x5c, 0xf8, 0xc5, 0x41, 0xf7, 0x36, 0x9a, 0x41,",
          "2743:  0x1a, 0x75, 0x93, 0x8f, 0xd0, 0xb0, 0x19, 0x84, 0x94, 0xa7, 0xdf, 0xa2, 0xb2, 0x98, 0x29, 0x3f,",
          "2744:  0xae, 0x44, 0x75, 0xfa, 0x00, 0x96, 0xe4, 0xde, 0x84, 0xb9, 0xbe, 0xf3, 0xdc, 0x63, 0x28, 0xfd,",
          "",
          "[Removed Lines]",
          "2741:  0x8c, 0x52, 0x1f, 0xca, 0x8e, 0x7d, 0xc8, 0x5e, 0xf0, 0x07, 0x0e, 0x4c, 0xdb, 0x15, 0x42, 0xd2,",
          "",
          "[Added Lines]",
          "2741:  0x8c, 0x52, 0x1f, 0xca, 0x8e, 0x7d, 0xc8, 0x5e, 0xf0, 0xfb, 0x0e, 0x4c, 0xdb, 0x15, 0x42, 0xd2,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2774:  0xe3, 0x4a, 0x2d, 0x6a, 0x16, 0x15, 0xbe, 0x6b, 0x6a, 0x57, 0x86, 0x1a, 0x83, 0x16, 0x95, 0xfb,",
          "2775:  0x79, 0x38, 0x93, 0xbf, 0x13, 0x24, 0x43, 0xf7, 0x66, 0x1c, 0xf5, 0xba, 0xf9, 0x8d, 0x83, 0xdf,",
          "2776:  0x1c, 0x41, 0x81, 0x63, 0x0e, 0x7d, 0x2f, 0x08, 0xeb, 0x79, 0x87, 0x7e, 0x3d, 0x08, 0xeb, 0xc8,",
          "2778:  0xbd, 0x38, 0x94, 0x3d, 0x9b, 0xdc, 0x63, 0xdc, 0xf4, 0xe2, 0x10, 0x39, 0x94, 0xec, 0xc3, 0x84,",
          "2779:  0x68, 0x58, 0x90, 0x61, 0xef, 0x66, 0x81, 0xb7, 0xa8, 0x58, 0xec, 0xab, 0xb3, 0x39, 0xd1, 0x29,",
          "2780:  0x81, 0x52, 0x9a, 0x7b, 0x0d, 0xc8, 0x8d, 0x7d, 0x1a, 0xc7, 0x41, 0xdd, 0x6a, 0xaf, 0x20, 0xcf,",
          "",
          "[Removed Lines]",
          "2777:  0x31, 0xc7, 0xe8, 0xe2, 0xfe, 0x73, 0x07, 0x2e, 0x1c, 0x75, 0x75, 0x89, 0x3c, 0x09, 0x63, 0xb7,",
          "",
          "[Added Lines]",
          "2777:  0x31, 0xc7, 0xe8, 0xe2, 0xfe, 0x33, 0x07, 0x2e, 0x1c, 0x75, 0x75, 0x89, 0x3c, 0x09, 0x63, 0xb7,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2791:  0x03, 0xd5, 0x85, 0x46, 0x53, 0x8c, 0x96, 0x04, 0xd8, 0xff, 0x0c, 0x59, 0x85, 0xd3, 0x19, 0x20,",
          "2792:  0x1b, 0x88, 0x48, 0x4f, 0xe7, 0x25, 0x9f, 0xd3, 0x19, 0x3e, 0x6c, 0x2c, 0x7d, 0x4f, 0xb8, 0x6f,",
          "2793:  0x3b, 0x30, 0xa3, 0x27, 0xf5, 0x11, 0xe4, 0xaa, 0x41, 0x36, 0x57, 0x5d, 0x1d, 0x69, 0x9f, 0x97,",
          "2795:  0x16, 0xd3, 0x6e, 0x94, 0xb7, 0x2d, 0x46, 0x81, 0x1c, 0xf3, 0xee, 0xd5, 0x99, 0x41, 0x75, 0xfe,",
          "2796:  0xf1, 0x1f, 0x61, 0x9d, 0x7f, 0x1b, 0xce, 0x06, 0x61, 0x42, 0xfd, 0x5e, 0x2c, 0x5d, 0xe0, 0xd5,",
          "2797:  0x28, 0xd1, 0xfa, 0x57, 0xa9, 0xbd, 0x4f, 0x32, 0x3a, 0xbb, 0x36, 0x88, 0x08, 0x07, 0x3f, 0xcb,",
          "",
          "[Removed Lines]",
          "2794:  0xc3, 0x1e, 0x12, 0x8e, 0xff, 0xde, 0x04, 0x00, 0xbf, 0xd4, 0x1b, 0xf0, 0xbe, 0x91, 0x0b, 0x30,",
          "",
          "[Added Lines]",
          "2794:  0xc3, 0x1e, 0x12, 0x8e, 0xff, 0xdd, 0x04, 0x00, 0xbf, 0xd4, 0x1b, 0xf0, 0xbe, 0x91, 0x0b, 0x30,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2800:  0x1a, 0x9a, 0xc1, 0x76, 0x57, 0x2d, 0xc8, 0xee, 0xe0, 0xa4, 0x76, 0xa7, 0xb3, 0xaf, 0xa9, 0xa1,",
          "2801:  0xb7, 0xc3, 0xd4, 0x5e, 0x30, 0x3d, 0x74, 0x2f, 0xf8, 0x38, 0xcc, 0x06, 0x61, 0x8b, 0xc6, 0x41,",
          "2802:  0x4a, 0xeb, 0xdc, 0x10, 0xe6, 0x67, 0xf8, 0x44, 0xe8, 0x93, 0xca, 0xb5, 0x0c, 0x16, 0x73, 0xd4,",
          "2917: }",
          "2919: func (m *AWSAuthConfig) Marshal() (dAtA []byte, err error) {",
          "",
          "[Removed Lines]",
          "2803:  0xee, 0xeb, 0x25, 0x38, 0x6b, 0x0c, 0x84, 0x8d, 0x2c, 0x68, 0x30, 0x2d, 0xe1, 0xad, 0xc9, 0xe2,",
          "2804:  0x70, 0xc6, 0xfa, 0xb8, 0x83, 0x0e, 0x29, 0xb6, 0x35, 0x06, 0x2d, 0x2a, 0xb6, 0x7e, 0x3e, 0x8d,",
          "2805:  0x79, 0xdb, 0x44, 0xde, 0x7a, 0x56, 0x24, 0x1c, 0x35, 0x05, 0xff, 0x7e, 0x04, 0x8d, 0x53, 0x59,",
          "2806:  0x6b, 0xcb, 0x9f, 0x0a, 0xae, 0x18, 0x14, 0xda, 0x74, 0x6c, 0x1f, 0xf3, 0xd5, 0xe2, 0x31, 0x0b,",
          "2807:  0x9a, 0x16, 0xfb, 0x98, 0x5e, 0x2f, 0x8d, 0x55, 0xc3, 0xe1, 0xa7, 0x49, 0xe3, 0xfd, 0xc3, 0xe1,",
          "2808:  0xa9, 0x87, 0xa6, 0x70, 0xff, 0xcb, 0x81, 0xf7, 0x0e, 0x9c, 0x8a, 0x47, 0xe0, 0x12, 0x7b, 0x59,",
          "2809:  0x97, 0xb8, 0x35, 0xa2, 0x4b, 0xec, 0x7b, 0x85, 0x21, 0xee, 0xf1, 0x1f, 0x1c, 0x98, 0x35, 0xf4,",
          "2810:  0x8f, 0xe0, 0x3d, 0x1b, 0xc5, 0x7d, 0x0c, 0xc2, 0x8c, 0x5b, 0x9c, 0xea, 0x67, 0x5e, 0xec, 0x6d,",
          "2811:  0xfe, 0x62, 0x22, 0x90, 0x5b, 0xf6, 0xd5, 0x5d, 0xcc, 0x23, 0xe2, 0xaa, 0x7d, 0x98, 0xe0, 0x9d,",
          "2812:  0xfb, 0x49, 0x01, 0xd1, 0x64, 0x56, 0x38, 0x2f, 0x9d, 0x98, 0x68, 0x92, 0xff, 0x4d, 0x50, 0x4a,",
          "2813:  0xe3, 0xfd, 0x3c, 0x41, 0xc2, 0x9c, 0x54, 0x5d, 0x96, 0x78, 0x4c, 0x3f, 0x8f, 0x84, 0xa3, 0xa6,",
          "2814:  0x70, 0x3b, 0x30, 0x9f, 0x65, 0xbe, 0x4a, 0x1b, 0x3c, 0x49, 0x3f, 0xd6, 0x3b, 0xb2, 0x84, 0x95,",
          "2815:  0x3f, 0xb5, 0xde, 0xf3, 0xf2, 0xb7, 0x31, 0x97, 0x15, 0x02, 0x0d, 0x8d, 0xfb, 0xc7, 0x0e, 0x9c,",
          "2816:  0x19, 0xf0, 0x32, 0x05, 0x96, 0xb6, 0x52, 0x63, 0xfc, 0x43, 0x6e, 0xc8, 0xd6, 0x69, 0xc3, 0x53,",
          "2817:  0x09, 0xa1, 0x95, 0x3e, 0xae, 0x0a, 0x30, 0x2a, 0xbc, 0xfb, 0x1f, 0x0e, 0x9c, 0xca, 0x8e, 0x35,",
          "2818:  0x21, 0xd7, 0x80, 0x88, 0x97, 0x59, 0x0d, 0x12, 0x3f, 0xda, 0xa7, 0xf1, 0x01, 0x7b, 0x73, 0x31,",
          "2819:  0xea, 0x73, 0x92, 0x13, 0x59, 0xee, 0xa3, 0xc0, 0x01, 0x4f, 0x91, 0xaf, 0xf0, 0xb3, 0x42, 0x35,",
          "2820:  0xdb, 0x4a, 0x4d, 0xb6, 0x0b, 0x53, 0x13, 0xb3, 0x92, 0x76, 0x38, 0xaf, 0xe5, 0xa1, 0x2d, 0xdc,",
          "2821:  0xfd, 0x61, 0x19, 0xa6, 0xd5, 0xe3, 0x3c, 0xfd, 0x28, 0x28, 0x71, 0xcb, 0xdc, 0xd7, 0x2d, 0x9f,",
          "2822:  0xe0, 0xbe, 0xee, 0xd8, 0xfd, 0x12, 0x16, 0x71, 0x7f, 0xd4, 0x84, 0x2d, 0x96, 0xa3, 0xdf, 0x31,",
          "2823:  0x28, 0xb4, 0xe9, 0xd8, 0x48, 0xda, 0xc1, 0x3e, 0x15, 0x0f, 0x4d, 0x64, 0x47, 0xb2, 0xae, 0x10,",
          "2824:  0x68, 0x68, 0xd8, 0x48, 0xea, 0x41, 0xa3, 0xc1, 0x43, 0x07, 0x6b, 0x24, 0x6c, 0x76, 0x90, 0x63,",
          "2825:  0x18, 0x45, 0x2b, 0x8a, 0xf6, 0x64, 0xb4, 0xa0, 0x29, 0xae, 0x46, 0xd1, 0x1e, 0x72, 0x0c, 0xd9,",
          "2826:  0x80, 0x33, 0x61, 0x14, 0x77, 0xbc, 0x76, 0xf0, 0x1a, 0xad, 0x6b, 0x29, 0x32, 0x4a, 0xf8, 0x09,",
          "2827:  0xf9, 0xc0, 0x99, 0xcd, 0x7e, 0x12, 0x1c, 0xf4, 0x1c, 0x53, 0xbf, 0x6e, 0x4c, 0xeb, 0x81, 0x9f,",
          "2828:  0xda, 0xdc, 0x20, 0xab, 0x7e, 0x5b, 0x7d, 0x14, 0x38, 0xe0, 0x29, 0xf7, 0x3f, 0xf9, 0x06, 0x35,",
          "2829:  0xa4, 0xab, 0xff, 0x91, 0xe5, 0xed, 0x59, 0x05, 0x19, 0x3b, 0x86, 0x82, 0xb0, 0xbc, 0x38, 0x89,",
          "2830:  0x42, 0x9d, 0x17, 0x8f, 0x0f, 0xcd, 0x8b, 0x2d, 0x2a, 0xf7, 0xbb, 0xe3, 0xf0, 0x84, 0x6e, 0x07,",
          "2831:  0xa5, 0xe9, 0xed, 0x28, 0xde, 0x0b, 0xc2, 0x26, 0x3f, 0xe6, 0xf8, 0xa6, 0x03, 0xd3, 0x42, 0x51,",
          "2832:  0xe4, 0xbd, 0x24, 0x51, 0xd6, 0xf7, 0x8b, 0x68, 0x3c, 0xcd, 0x48, 0x5a, 0xdc, 0xb1, 0xa4, 0xe4,",
          "2833:  0xee, 0x24, 0xd9, 0x28, 0xcc, 0x0c, 0x87, 0xbc, 0x06, 0xa0, 0xee, 0x4b, 0x37, 0x8a, 0xb8, 0x32,",
          "2834:  0xae, 0x06, 0x87, 0xb4, 0x61, 0x42, 0xb0, 0x1d, 0x2d, 0x01, 0x2d, 0x69, 0xe4, 0xcb, 0x0e, 0x4c,",
          "2835:  0xb4, 0xc5, 0xac, 0x88, 0x32, 0xed, 0xa7, 0x8b, 0x9f, 0x15, 0x7b, 0x3e, 0xf4, 0xa6, 0x26, 0x67,",
          "2836:  0x42, 0x0a, 0x27, 0x08, 0x93, 0x41, 0xd8, 0x8c, 0x69, 0xa2, 0x2a, 0x08, 0x1f, 0xb4, 0xc2, 0x88,",
          "2837:  0x45, 0x3f, 0x8a, 0x29, 0x0f, 0x1a, 0x22, 0xaf, 0x5e, 0xf3, 0xda, 0x5e, 0xe8, 0xd3, 0x78, 0x4d,",
          "2838:  0x90, 0x1b, 0xff, 0x2e, 0x01, 0xa8, 0x18, 0xf5, 0x75, 0x53, 0x8f, 0x1f, 0xa7, 0x9b, 0xfa, 0xdc,",
          "2839:  0x27, 0x60, 0xae, 0x6f, 0x19, 0x4f, 0x72, 0xed, 0xeb, 0xdc, 0x47, 0x61, 0xea, 0x41, 0x6f, 0x8c,",
          "2840:  0xfd, 0xc9, 0x84, 0x71, 0xd2, 0x9b, 0x51, 0x9d, 0xb7, 0x11, 0xc7, 0x66, 0x35, 0x65, 0x84, 0x55,",
          "2841:  0x94, 0x6e, 0x58, 0x77, 0x6b, 0x35, 0x10, 0x6d, 0x79, 0x4c, 0x33, 0xbb, 0x5e, 0x4c, 0xc3, 0x87,",
          "2842:  0xaa, 0x99, 0x5b, 0x5a, 0x02, 0x5a, 0xd2, 0x08, 0xcd, 0x9c, 0x1e, 0xac, 0x8c, 0x78, 0x7a, 0xc0,",
          "2843:  0xc2, 0xbd, 0x81, 0x1d, 0x9f, 0x6f, 0x3a, 0x30, 0x1b, 0x66, 0xf4, 0x55, 0x16, 0x92, 0x5f, 0x28,",
          "2844:  0xdc, 0x10, 0xc4, 0xdd, 0x89, 0x2c, 0x0c, 0x73, 0xc2, 0xc9, 0x32, 0x9c, 0x52, 0x2b, 0x90, 0x6d,",
          "2845:  0xe7, 0xd5, 0xb9, 0x36, 0x66, 0xd1, 0x98, 0xa7, 0xb7, 0xee, 0x03, 0x4c, 0x0c, 0xbb, 0x0f, 0x40,",
          "2846:  0xf6, 0xf4, 0xd5, 0x9f, 0xc9, 0x62, 0xaf, 0xfe, 0xc0, 0x80, 0x6b, 0x3f, 0x37, 0xa1, 0xea, 0xc7,",
          "2847:  0xd4, 0x4b, 0x1f, 0xf0, 0x3a, 0x08, 0xff, 0xc2, 0xc0, 0x8a, 0x62, 0x80, 0x86, 0x97, 0xfb, 0xf5,",
          "2848:  0x32, 0x9c, 0x56, 0xd3, 0xa1, 0x2a, 0xac, 0x6c, 0xc3, 0x11, 0x72, 0x4d, 0xe4, 0xa6, 0x37, 0x9c,",
          "2849:  0xab, 0x0a, 0x81, 0x86, 0x86, 0x85, 0x8c, 0x22, 0x7a, 0x4b, 0xf2, 0x27, 0x0e, 0x32, 0x2a, 0x44,",
          "2850:  0x85, 0x27, 0x5f, 0x1f, 0x78, 0xfb, 0xae, 0x80, 0xf3, 0xb5, 0xbe, 0xf2, 0xf0, 0x09, 0xaf, 0xdd,",
          "2851:  0xbd, 0xe1, 0xc0, 0xa9, 0xbd, 0xcc, 0x91, 0xae, 0x72, 0xa4, 0xa3, 0xf4, 0x76, 0x64, 0x0f, 0x89,",
          "2852:  0x8d, 0x0a, 0x66, 0xe1, 0x09, 0xe6, 0x45, 0xbb, 0xff, 0xed, 0x80, 0xed, 0x55, 0x8e, 0x17, 0x6d,",
          "2853:  0x58, 0x77, 0x73, 0x4b, 0xf7, 0xbf, 0x9b, 0xab, 0x03, 0x93, 0xf2, 0xf1, 0xe2, 0xd2, 0xb1, 0x13,",
          "2854:  0xc4, 0xa5, 0xe3, 0x43, 0x23, 0x99, 0xf7, 0x41, 0xb9, 0x17, 0xd4, 0x65, 0x68, 0x69, 0xea, 0xc7,",
          "2855:  0x6b, 0xab, 0xc8, 0xe0, 0xee, 0x5f, 0x8c, 0x9b, 0x24, 0x52, 0x1e, 0x10, 0xfd, 0x58, 0xbc, 0x76,",
          "2856:  0x43, 0xb7, 0xea, 0x88, 0x37, 0xdf, 0xec, 0x6b, 0xd5, 0xf9, 0x85, 0x93, 0x9f, 0xfd, 0x89, 0x09,",
          "2857:  0x1a, 0xd6, 0xa9, 0x33, 0x79, 0xc4, 0xc1, 0xdf, 0x2d, 0xa8, 0xb0, 0xe8, 0x9b, 0xd7, 0x81, 0x2a,",
          "2858:  0x99, 0x41, 0x55, 0xae, 0x4a, 0xf8, 0xbd, 0xc3, 0x85, 0x8f, 0x9d, 0x7c, 0x58, 0xea, 0x69, 0xd4,",
          "2859:  0xfc, 0x49, 0x02, 0x55, 0xf6, 0x9b, 0x9f, 0x51, 0xca, 0xb8, 0xfe, 0x45, 0xed, 0x4e, 0x14, 0xa2,",
          "2860:  0x90, 0x03, 0x50, 0x23, 0x87, 0x84, 0x50, 0xe5, 0x77, 0x7e, 0xb9, 0x50, 0x11, 0xfe, 0x6f, 0xe9,",
          "2861:  0xd3, 0x42, 0x85, 0xb8, 0x77, 0xb8, 0xf0, 0xfc, 0xc9, 0x85, 0xea, 0xc7, 0xd1, 0x88, 0x70, 0xdf,",
          "2862:  0x29, 0x1b, 0xdd, 0x95, 0x1d, 0x5a, 0x3f, 0x16, 0xba, 0xfb, 0x5c, 0x4e, 0x77, 0x2f, 0xf4, 0xe9,",
          "2863:  0xee, 0xac, 0xb9, 0x23, 0x9b, 0xd1, 0xc6, 0x47, 0xba, 0x41, 0x1e, 0x9d, 0x67, 0xf2, 0xb0, 0xe0,",
          "2864:  0xd5, 0x5e, 0x10, 0xd3, 0x64, 0x2b, 0xee, 0x85, 0x41, 0xd8, 0xe4, 0xba, 0x58, 0xb1, 0xc3, 0x82,",
          "2865:  0x0c, 0x1a, 0xf3, 0xf4, 0xee, 0xb7, 0xf9, 0xb9, 0x8d, 0xd5, 0xe8, 0xc0, 0x96, 0xb8, 0xcd, 0x6f,",
          "2866:  0x4e, 0x8b, 0xde, 0x2a, 0xbd, 0xc4, 0xe2, 0xba, 0xb4, 0xc0, 0x91, 0x14, 0x26, 0x77, 0xc5, 0x4d,",
          "2867:  0xb2, 0x02, 0xba, 0x73, 0xe5, 0x9d, 0x34, 0x7e, 0xfb, 0x47, 0x5d, 0x50, 0xbb, 0x67, 0x7e, 0xa2,",
          "2868:  0x12, 0xe5, 0x7e, 0xa3, 0x0c, 0xa7, 0x72, 0x17, 0x7c, 0xc9, 0x87, 0xa1, 0xa2, 0x6e, 0x70, 0xe7,",
          "2869:  0xcb, 0xc5, 0xfa, 0xcb, 0x53, 0x9a, 0x82, 0x7c, 0x06, 0xa0, 0x4e, 0xbb, 0xed, 0xe8, 0x80, 0x47,",
          "2870:  0x1d, 0x63, 0x27, 0x8e, 0x3a, 0x74, 0x7c, 0xba, 0xaa, 0xb9, 0xa0, 0xc5, 0x51, 0x76, 0x93, 0x8d,",
          "2871:  0x8b, 0x4b, 0x72, 0xd9, 0x6e, 0x32, 0xab, 0x37, 0x7d, 0xe2, 0x11, 0xf6, 0xa6, 0x07, 0x70, 0x4a,",
          "2872:  0x8c, 0x4f, 0xf7, 0x13, 0x3c, 0x40, 0xdb, 0xc0, 0x19, 0xa6, 0x4b, 0xab, 0x59, 0x36, 0x98, 0xe7,",
          "2873:  0xeb, 0x7e, 0xb5, 0xc4, 0x02, 0x2f, 0x31, 0xd3, 0x1b, 0xaa, 0x5a, 0xfb, 0x01, 0x98, 0xf0, 0x7a,",
          "2874:  0x69, 0x2b, 0xea, 0xbb, 0xd3, 0xb7, 0xcc, 0xa1, 0x28, 0xb1, 0x64, 0x1d, 0xc6, 0xea, 0x5e, 0xaa,",
          "2875:  0xbe, 0x93, 0x78, 0x92, 0xc1, 0x99, 0x1a, 0x8d, 0x97, 0x52, 0xe4, 0x5c, 0xc8, 0x93, 0x30, 0x96,",
          "2876:  0x7a, 0xcd, 0xcc, 0x57, 0x62, 0x76, 0xbc, 0x66, 0x82, 0x1c, 0x6a, 0x6f, 0x2a, 0x63, 0x47, 0x6c,",
          "2877:  0x2a, 0xcf, 0x5b, 0xdf, 0xee, 0xb4, 0xce, 0x00, 0xfa, 0x3f, 0xb9, 0xc9, 0xe3, 0xf6, 0x2c, 0xad,",
          "2878:  0xfb, 0x33, 0x30, 0x6d, 0x7f, 0x92, 0xf3, 0x58, 0x1d, 0xcd, 0xee, 0xbf, 0x8c, 0xc1, 0x4c, 0xa6,",
          "2879:  0xe7, 0x24, 0xa3, 0xe2, 0xce, 0x91, 0x2a, 0xfe, 0x14, 0x8c, 0x77, 0xe3, 0x5e, 0x48, 0x65, 0x2b,",
          "2880:  0x91, 0x16, 0xc2, 0x2c, 0x9e, 0xa2, 0xc0, 0xb1, 0x55, 0xa9, 0xc7, 0x07, 0xd8, 0x0b, 0x65, 0xb1,",
          "2881:  0x58, 0xaf, 0xca, 0x2a, 0x87, 0xa2, 0xc4, 0x92, 0xcf, 0xc1, 0x74, 0xc2, 0x5d, 0xa1, 0x70, 0x0e,",
          "2882:  0xd2, 0x62, 0xae, 0x8c, 0xfc, 0xf5, 0x01, 0xd9, 0x54, 0xc5, 0xd3, 0x6e, 0x1b, 0x82, 0x19, 0x71,",
          "2883:  0xe4, 0x8b, 0x8e, 0xfd, 0xc5, 0x85, 0x89, 0x91, 0xcf, 0x35, 0xf2, 0xbd, 0x3c, 0xc2, 0x74, 0xee,",
          "2884:  0xff, 0xe1, 0x85, 0xae, 0x36, 0xdb, 0xc9, 0x87, 0x60, 0xb6, 0x30, 0xc0, 0x64, 0x3f, 0x04, 0xd5,",
          "2885:  0x8e, 0x17, 0x06, 0x0d, 0x9a, 0xa4, 0xe2, 0xf3, 0xb9, 0x55, 0x91, 0xed, 0x6c, 0x28, 0x20, 0x1a,",
          "2886:  0x3c, 0xff, 0x36, 0x35, 0x7f, 0x2b, 0x91, 0xab, 0x54, 0xad, 0x6f, 0x53, 0x1b, 0x30, 0xda, 0x34,",
          "2887:  0xee, 0x77, 0x1c, 0x38, 0x3b, 0x70, 0x26, 0xde, 0xbd, 0xf5, 0x3f, 0xf7, 0x3b, 0x25, 0x38, 0x33,",
          "2888:  0xa0, 0x13, 0x8b, 0xec, 0x3f, 0x9c, 0x4f, 0x72, 0xc8, 0x3e, 0xaf, 0x99, 0xa1, 0x5a, 0x71, 0xb2,",
          "2889:  0x6d, 0xc7, 0xb8, 0xfe, 0xf2, 0xa3, 0x73, 0xfd, 0xee, 0x1f, 0x95, 0xc0, 0xfa, 0x60, 0x0c, 0xf9,",
          "2890:  0x15, 0xbb, 0xcf, 0xd0, 0x29, 0xa4, 0x2f, 0x4e, 0x70, 0xd6, 0x4d, 0x8a, 0x62, 0xbe, 0x06, 0xf5,",
          "2891:  0x2c, 0xe6, 0xd5, 0xb4, 0x74, 0xb4, 0x9a, 0x92, 0x40, 0xb5, 0x72, 0x96, 0x0b, 0x6e, 0xe5, 0xac,",
          "2892:  0xf6, 0xb5, 0x71, 0x7e, 0xc3, 0x11, 0xda, 0x95, 0x7b, 0x1f, 0xe3, 0x4b, 0x9d, 0xfb, 0xf8, 0xd2,",
          "2893:  0x0f, 0x43, 0x25, 0xa1, 0xed, 0x06, 0x8b, 0xde, 0xa4, 0xcf, 0xd5, 0xaa, 0xb0, 0x2d, 0xe1, 0xa8,",
          "2894:  0x29, 0xc8, 0x45, 0x00, 0xaf, 0xdd, 0x8e, 0x6e, 0x5f, 0xea, 0x74, 0xd3, 0x03, 0xe9, 0x7d, 0x75,",
          "2895:  0x54, 0xb1, 0xac, 0x31, 0x68, 0x51, 0xb9, 0x3f, 0x74, 0xc4, 0x42, 0xca, 0x20, 0xfc, 0xb9, 0xdc,",
          "2896:  0x35, 0x89, 0xe3, 0xc7, 0xaf, 0x07, 0x00, 0xbe, 0xbe, 0x2c, 0x57, 0xc0, 0xa7, 0x64, 0xcc, 0xcd,",
          "2897:  0x3b, 0xfb, 0x43, 0x27, 0x0a, 0x86, 0x96, 0xb0, 0x8c, 0xc1, 0x94, 0x8f, 0x32, 0x18, 0xf7, 0xdf,",
          "2898:  0x1d, 0xc8, 0xec, 0x0b, 0xa4, 0x03, 0xe3, 0x6c, 0x04, 0x07, 0x05, 0xdc, 0xeb, 0xb3, 0xf9, 0x32,",
          "2899:  0x63, 0x92, 0x0a, 0xc1, 0x7f, 0xa2, 0x90, 0x42, 0x02, 0x19, 0x7b, 0x97, 0x46, 0xbe, 0x3f, 0x6a,",
          "2900:  0x4b, 0x63, 0xa1, 0xbb, 0xfc, 0x2c, 0xa9, 0x0e, 0xe2, 0xdd, 0xe7, 0x60, 0xae, 0x6f, 0x44, 0xbc,",
          "2901:  0xf3, 0x3e, 0x52, 0xd7, 0x18, 0x2d, 0xc5, 0xe3, 0xb7, 0x37, 0x50, 0xe0, 0x58, 0xec, 0x7e, 0x3a,",
          "2902:  0xcf, 0x9e, 0xfc, 0x8e, 0x03, 0x73, 0x49, 0x9e, 0xdf, 0x43, 0x99, 0x35, 0x5d, 0x8b, 0xea, 0x43,",
          "2903:  0x61, 0xff, 0x08, 0xdc, 0xbf, 0x93, 0xce, 0x48, 0x7c, 0xab, 0x5d, 0x6f, 0x22, 0xce, 0xd0, 0x4d,",
          "2904:  0x84, 0x99, 0x95, 0xdf, 0xa2, 0xf5, 0x5e, 0xbb, 0xaf, 0x0f, 0x64, 0x5b, 0xc2, 0x51, 0x53, 0x64,",
          "2905:  0xbe, 0x67, 0x51, 0x3e, 0xf2, 0x7b, 0x16, 0xcf, 0xc2, 0xb4, 0x7d, 0xe3, 0x96, 0x17, 0xc5, 0xe4,",
          "2906:  0x21, 0x80, 0x7d, 0x39, 0x17, 0x33, 0x54, 0xb9, 0xaf, 0x22, 0x8c, 0x1f, 0xf9, 0x55, 0x84, 0xa7,",
          "2907:  0xa1, 0x22, 0xbf, 0x7e, 0xae, 0x8a, 0xae, 0xa2, 0xc9, 0x44, 0xc2, 0x50, 0x63, 0x99, 0x53, 0xe8,",
          "2908:  0x78, 0x61, 0xcf, 0x6b, 0xb3, 0x19, 0x92, 0x5d, 0x4b, 0xda, 0xa0, 0x36, 0x34, 0x06, 0x2d, 0x2a,",
          "2909:  0x66, 0x22, 0xf9, 0xdb, 0xe6, 0x99, 0xde, 0x27, 0xe7, 0xc8, 0xde, 0xa7, 0x6c, 0x77, 0x4e, 0xe9,",
          "2910:  0x58, 0xdd, 0x39, 0x76, 0xe3, 0x4c, 0xf9, 0xbe, 0x8d, 0x33, 0xef, 0x37, 0xb7, 0xdd, 0x44, 0x87,",
          "2911:  0xcd, 0xd4, 0xa0, 0x9b, 0x6e, 0xc4, 0x85, 0x09, 0xdf, 0xd3, 0xcd, 0x8b, 0xd3, 0x22, 0x20, 0x5a,",
          "2912:  0x59, 0xe6, 0x44, 0x12, 0x53, 0x5b, 0x7c, 0xeb, 0x9d, 0xf3, 0x8f, 0x7d, 0xef, 0x9d, 0xf3, 0x8f,",
          "2913:  0xbd, 0xfd, 0xce, 0xf9, 0xc7, 0xbe, 0x70, 0xf7, 0xbc, 0xf3, 0xd6, 0xdd, 0xf3, 0xce, 0xf7, 0xee,",
          "2914:  0x9e, 0x77, 0xde, 0xbe, 0x7b, 0xde, 0xf9, 0xd7, 0xbb, 0xe7, 0x9d, 0xdf, 0xfa, 0xc1, 0xf9, 0xc7,",
          "2915:  0x5e, 0xae, 0x28, 0x5d, 0xfd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x07, 0xe1, 0xc4, 0xde,",
          "2916:  0x67, 0x00, 0x00,",
          "",
          "[Added Lines]",
          "2803:  0x66, 0x0e, 0x6f, 0xac, 0xac, 0xcd, 0xcf, 0x0e, 0x9a, 0xc3, 0x1b, 0x2b, 0x6b, 0x68, 0x68, 0xdc,",
          "2804:  0xd7, 0x4b, 0x70, 0xd6, 0x58, 0x14, 0x7b, 0x95, 0xa0, 0xc1, 0xd4, 0x8a, 0xf7, 0x32, 0x8b, 0xd3,",
          "2805:  0x1c, 0xeb, 0x6b, 0x10, 0x3a, 0x06, 0xd9, 0xd6, 0x18, 0xb4, 0xa8, 0xd8, 0x82, 0xfb, 0x34, 0xe6,",
          "2806:  0x7d, 0x16, 0x79, 0x73, 0x5b, 0x91, 0x70, 0xd4, 0x14, 0xfc, 0x83, 0x13, 0x34, 0x4e, 0x65, 0x71,",
          "2807:  0x2e, 0x7f, 0x8c, 0xb8, 0x62, 0x50, 0x68, 0xd3, 0xb1, 0x8d, 0xcf, 0x57, 0xab, 0xcd, 0x4c, 0x6e,",
          "2808:  0x5a, 0x6c, 0x7c, 0x7a, 0x81, 0x35, 0x56, 0x0d, 0x87, 0x1f, 0x3f, 0x8d, 0xf7, 0x0f, 0x87, 0xe7,",
          "2809:  0x2a, 0x9a, 0xc2, 0xfd, 0x2f, 0x07, 0xde, 0x3b, 0x70, 0x2a, 0x1e, 0x81, 0x0f, 0xed, 0x65, 0x7d,",
          "2810:  0xe8, 0xd6, 0x88, 0x3e, 0xb4, 0xef, 0x15, 0x86, 0xf8, 0xd3, 0x7f, 0x70, 0x60, 0xd6, 0xd0, 0x3f,",
          "2811:  0x82, 0xf7, 0x6c, 0x14, 0xf7, 0xf5, 0x08, 0x33, 0x6e, 0xd1, 0x06, 0x90, 0x79, 0xb1, 0xb7, 0xf9,",
          "2812:  0x8b, 0x89, 0xc8, 0x6f, 0xd9, 0x57, 0x97, 0x37, 0x8f, 0x08, 0xc4, 0xf6, 0x61, 0x82, 0xb7, 0xfa,",
          "2813:  0x27, 0x05, 0x84, 0x9f, 0x59, 0xe1, 0xbc, 0xd6, 0x62, 0xc2, 0x4f, 0xfe, 0x37, 0x41, 0x29, 0x8d,",
          "2814:  0x37, 0x00, 0x05, 0x09, 0xb3, 0xc8, 0xba, 0xac, 0x09, 0x99, 0x06, 0x20, 0x09, 0x47, 0x4d, 0xe1,",
          "2815:  0x76, 0x60, 0x3e, 0xcb, 0x7c, 0x95, 0x36, 0x78, 0x56, 0x7f, 0xac, 0x77, 0x64, 0x19, 0x2e, 0x7f,",
          "2816:  0x6a, 0xbd, 0xe7, 0xe5, 0xaf, 0x6f, 0x2e, 0x2b, 0x04, 0x1a, 0x1a, 0xf7, 0x8f, 0x1c, 0x38, 0x33,",
          "2817:  0xe0, 0x65, 0x0a, 0xac, 0x85, 0xa5, 0xc6, 0xf8, 0x87, 0x5c, 0xa9, 0xad, 0xd3, 0x86, 0xa7, 0x32,",
          "2818:  0x48, 0x2b, 0xdf, 0x5c, 0x15, 0x60, 0x54, 0x78, 0xf7, 0x3f, 0x1c, 0x38, 0x95, 0x1d, 0x6b, 0x42,",
          "2819:  0xae, 0x01, 0x11, 0x2f, 0xb3, 0x1a, 0x24, 0x7e, 0xb4, 0x4f, 0xe3, 0x03, 0xf6, 0xe6, 0x62, 0xd4,",
          "2820:  0xe7, 0x24, 0x27, 0xb2, 0xdc, 0x47, 0x81, 0x03, 0x9e, 0x22, 0x5f, 0xe1, 0x87, 0x8b, 0x6a, 0xb6,",
          "2821:  0x95, 0x9a, 0x6c, 0x17, 0xa6, 0x26, 0x66, 0x25, 0xed, 0xf8, 0x5f, 0xcb, 0x43, 0x5b, 0xb8, 0xfb,",
          "2822:  0xc3, 0x32, 0x4c, 0xab, 0xc7, 0x79, 0xbe, 0x52, 0x50, 0xa6, 0x97, 0xb9, 0xe0, 0x5b, 0x3e, 0xc1,",
          "2823:  0x05, 0xdf, 0xb1, 0xfb, 0x65, 0x38, 0xe2, 0xc2, 0xa9, 0x89, 0x73, 0x2c, 0x47, 0xbf, 0x63, 0x50,",
          "2824:  0x68, 0xd3, 0xb1, 0x91, 0xb4, 0x83, 0x7d, 0x2a, 0x1e, 0x9a, 0xc8, 0x8e, 0x64, 0x5d, 0x21, 0xd0,",
          "2825:  0xd0, 0xb0, 0x91, 0xd4, 0x83, 0x46, 0x83, 0xc7, 0x1a, 0xd6, 0x48, 0xd8, 0xec, 0x20, 0xc7, 0x30,",
          "2826:  0x8a, 0x56, 0x14, 0xed, 0xc9, 0xf0, 0x42, 0x53, 0x5c, 0x8d, 0xa2, 0x3d, 0xe4, 0x18, 0xb2, 0x01,",
          "2827:  0x67, 0xc2, 0x28, 0xee, 0x78, 0xed, 0xe0, 0x35, 0x5a, 0xd7, 0x52, 0x64, 0x58, 0xf1, 0x13, 0xf2,",
          "2828:  0x81, 0x33, 0x9b, 0xfd, 0x24, 0x38, 0xe8, 0x39, 0xa6, 0x7e, 0xdd, 0x98, 0xd6, 0x03, 0x3f, 0xb5,",
          "2829:  0xb9, 0x41, 0x56, 0xfd, 0xb6, 0xfa, 0x28, 0x70, 0xc0, 0x53, 0xee, 0x7f, 0xf2, 0x0d, 0x6a, 0xc8,",
          "2830:  0x35, 0x80, 0x47, 0x96, 0xe8, 0x67, 0x15, 0x64, 0xec, 0x18, 0x0a, 0xc2, 0x12, 0xe9, 0x24, 0x0a,",
          "2831:  0x75, 0x22, 0x3d, 0x3e, 0x34, 0x91, 0xb6, 0xa8, 0xdc, 0xef, 0x8e, 0xc3, 0x13, 0xba, 0x7f, 0x94,",
          "2832:  0xa6, 0xb7, 0xa3, 0x78, 0x2f, 0x08, 0x9b, 0xfc, 0x5c, 0xe4, 0x9b, 0x0e, 0x4c, 0x0b, 0x45, 0x91,",
          "2833:  0x17, 0x99, 0xc4, 0x39, 0x80, 0x5f, 0x44, 0xa7, 0x6a, 0x46, 0xd2, 0xe2, 0x8e, 0x25, 0x25, 0x77,",
          "2834:  0x89, 0xc9, 0x46, 0x61, 0x66, 0x38, 0xe4, 0x35, 0x00, 0x75, 0xc1, 0xba, 0x51, 0xc4, 0x1d, 0x73,",
          "2835:  0x35, 0x38, 0xa4, 0x0d, 0x13, 0x82, 0xed, 0x68, 0x09, 0x68, 0x49, 0x23, 0x5f, 0x76, 0x60, 0xa2,",
          "2836:  0x2d, 0x66, 0x45, 0xd4, 0x75, 0x3f, 0x5d, 0xfc, 0xac, 0xd8, 0xf3, 0xa1, 0x37, 0x35, 0x39, 0x13,",
          "2837:  0x52, 0x38, 0x41, 0x98, 0x0c, 0xc2, 0x66, 0x4c, 0x13, 0x55, 0x72, 0xf8, 0xa0, 0x15, 0x46, 0x2c,",
          "2838:  0xfa, 0x51, 0x4c, 0x79, 0xd0, 0x10, 0x79, 0xf5, 0x9a, 0xd7, 0xf6, 0x42, 0x9f, 0xc6, 0x6b, 0x82,",
          "2839:  0xdc, 0xf8, 0x77, 0x09, 0x40, 0xc5, 0xa8, 0xaf, 0xfd, 0x7a, 0xfc, 0x38, 0xed, 0xd7, 0xe7, 0x3e,",
          "2840:  0x01, 0x73, 0x7d, 0xcb, 0x78, 0x92, 0x7b, 0x62, 0xe7, 0x3e, 0x0a, 0x53, 0x0f, 0x7a, 0xc5, 0xec,",
          "2841:  0x8f, 0x27, 0x8c, 0x93, 0xde, 0x8c, 0xea, 0xbc, 0xef, 0x38, 0x36, 0xab, 0x29, 0x23, 0xac, 0xa2,",
          "2842:  0x74, 0xc3, 0xba, 0x8c, 0xab, 0x81, 0x68, 0xcb, 0x63, 0x9a, 0xd9, 0xf5, 0x62, 0x1a, 0x3e, 0x54,",
          "2843:  0xcd, 0xdc, 0xd2, 0x12, 0xd0, 0x92, 0x46, 0x68, 0xe6, 0xb8, 0x61, 0x65, 0xc4, 0xe3, 0x06, 0x16,",
          "2844:  0xee, 0x0d, 0x6c, 0x11, 0x7d, 0xd3, 0x81, 0xd9, 0x30, 0xa3, 0xaf, 0xb2, 0xf2, 0xfc, 0x42, 0xe1,",
          "2845:  0x86, 0x20, 0x2e, 0x5b, 0x64, 0x61, 0x98, 0x13, 0x4e, 0x96, 0xe1, 0x94, 0x5a, 0x81, 0x6c, 0xff,",
          "2846:  0xaf, 0x4e, 0xce, 0x31, 0x8b, 0xc6, 0x3c, 0xbd, 0x75, 0x81, 0x60, 0x62, 0xd8, 0x05, 0x02, 0xb2,",
          "2847:  0xa7, 0xef, 0x0a, 0x4d, 0x16, 0x7b, 0x57, 0x08, 0x06, 0xdc, 0x13, 0xba, 0x09, 0x55, 0x3f, 0xa6,",
          "2848:  0x5e, 0xfa, 0x80, 0xf7, 0x47, 0xf8, 0x27, 0x09, 0x56, 0x14, 0x03, 0x34, 0xbc, 0xdc, 0xaf, 0x97,",
          "2849:  0xe1, 0xb4, 0x9a, 0x0e, 0x55, 0x92, 0x65, 0x1b, 0x8e, 0x90, 0x6b, 0x22, 0x37, 0xbd, 0xe1, 0x5c,",
          "2850:  0x55, 0x08, 0x34, 0x34, 0x2c, 0x64, 0x14, 0xd1, 0x5b, 0x92, 0x3f, 0xa2, 0x90, 0x51, 0x21, 0x2a,",
          "2851:  0x3c, 0xf9, 0xfa, 0xc0, 0xeb, 0x7a, 0x05, 0x1c, 0xc8, 0xf5, 0xd5, 0x93, 0x4f, 0x78, 0x4f, 0xef,",
          "2852:  0x0d, 0x07, 0x4e, 0xed, 0x65, 0xce, 0x80, 0x95, 0x23, 0x1d, 0xa5, 0x19, 0x24, 0x7b, 0xaa, 0x6c,",
          "2853:  0x54, 0x30, 0x0b, 0x4f, 0x30, 0x2f, 0xda, 0xfd, 0x6f, 0x07, 0x6c, 0xaf, 0x72, 0xbc, 0x68, 0xc3,",
          "2854:  0xba, 0xcc, 0x5b, 0xba, 0xff, 0x65, 0x5e, 0x1d, 0x98, 0x94, 0x8f, 0x17, 0x97, 0x8e, 0x9d, 0x20,",
          "2855:  0x2e, 0x1d, 0x1f, 0x1a, 0xc9, 0xbc, 0x0f, 0xca, 0xbd, 0xa0, 0x2e, 0x43, 0x4b, 0x53, 0x70, 0x5e,",
          "2856:  0x5b, 0x45, 0x06, 0x77, 0xff, 0x7c, 0xdc, 0x24, 0x91, 0xf2, 0x44, 0xe9, 0xc7, 0xe2, 0xb5, 0x1b,",
          "2857:  0xba, 0xb7, 0x47, 0xbc, 0xf9, 0x66, 0x5f, 0x6f, 0xcf, 0x2f, 0x9c, 0xfc, 0xb0, 0x50, 0x4c, 0xd0,",
          "2858:  0xb0, 0xd6, 0x9e, 0xc9, 0x23, 0x4e, 0x0a, 0x6f, 0x41, 0x85, 0x45, 0xdf, 0xbc, 0x0e, 0x54, 0xc9,",
          "2859:  0x0c, 0xaa, 0x72, 0x55, 0xc2, 0xef, 0x1d, 0x2e, 0x7c, 0xec, 0xe4, 0xc3, 0x52, 0x4f, 0xa3, 0xe6,",
          "2860:  0x4f, 0x12, 0xa8, 0xb2, 0xdf, 0xfc, 0x50, 0x53, 0xc6, 0xf5, 0x2f, 0x6a, 0x77, 0xa2, 0x10, 0x85,",
          "2861:  0x9c, 0x98, 0x1a, 0x39, 0x24, 0x84, 0x2a, 0xbf, 0x24, 0xcc, 0x85, 0x8a, 0xf0, 0x7f, 0x4b, 0x1f,",
          "2862:  0x2f, 0x2a, 0xc4, 0xbd, 0xc3, 0x85, 0xe7, 0x4f, 0x2e, 0x54, 0x3f, 0x8e, 0x46, 0x84, 0xfb, 0x4e,",
          "2863:  0xd9, 0xe8, 0xae, 0x6c, 0xe9, 0xfa, 0xb1, 0xd0, 0xdd, 0xe7, 0x72, 0xba, 0x7b, 0xa1, 0x4f, 0x77,",
          "2864:  0x67, 0xcd, 0xa5, 0xda, 0x8c, 0x36, 0x3e, 0xd2, 0x0d, 0xf2, 0xe8, 0x3c, 0x93, 0x87, 0x05, 0xaf,",
          "2865:  0xf6, 0x82, 0x98, 0x26, 0x5b, 0x71, 0x2f, 0x0c, 0xc2, 0x26, 0xd7, 0xc5, 0x8a, 0x1d, 0x16, 0x64,",
          "2866:  0xd0, 0x98, 0xa7, 0x77, 0xbf, 0xcd, 0x0f, 0x7a, 0xac, 0xce, 0x08, 0xb6, 0xc4, 0x6d, 0x7e, 0xd5,",
          "2867:  0x5a, 0x34, 0x63, 0xe9, 0x25, 0x16, 0xf7, 0xab, 0x05, 0x8e, 0xa4, 0x30, 0xb9, 0x2b, 0xae, 0x9e,",
          "2868:  0x15, 0xd0, 0xce, 0x2b, 0x2f, 0xb1, 0xf1, 0xeb, 0x42, 0xea, 0x46, 0xdb, 0x3d, 0xf3, 0x13, 0x95,",
          "2869:  0x28, 0xf7, 0x1b, 0x65, 0x38, 0x95, 0xbb, 0x11, 0x4c, 0x3e, 0x0c, 0x15, 0x75, 0xe5, 0x3b, 0x5f,",
          "2870:  0x2e, 0xd6, 0x9f, 0xaa, 0xd2, 0x14, 0xe4, 0x33, 0x00, 0x75, 0xda, 0x6d, 0x47, 0x07, 0x3c, 0xea,",
          "2871:  0x18, 0x3b, 0x71, 0xd4, 0xa1, 0xe3, 0xd3, 0x55, 0xcd, 0x05, 0x2d, 0x8e, 0xb2, 0xfd, 0x6c, 0x5c,",
          "2872:  0xdc, 0xaa, 0xcb, 0xb6, 0x9f, 0x59, 0xcd, 0xec, 0x13, 0x8f, 0xb0, 0x99, 0x3d, 0x80, 0x53, 0x62,",
          "2873:  0x7c, 0xba, 0x01, 0xe1, 0x01, 0xfa, 0x0c, 0xce, 0x30, 0x5d, 0x5a, 0xcd, 0xb2, 0xc1, 0x3c, 0x5f,",
          "2874:  0xf7, 0xab, 0x25, 0x16, 0x78, 0x89, 0x99, 0xde, 0x50, 0xd5, 0xda, 0x0f, 0xc0, 0x84, 0xd7, 0x4b,",
          "2875:  0x5b, 0x51, 0xdf, 0x25, 0xc0, 0x65, 0x0e, 0x45, 0x89, 0x25, 0xeb, 0x30, 0x56, 0xf7, 0x52, 0xf5,",
          "2876:  0x61, 0xc5, 0x93, 0x0c, 0xce, 0xd4, 0x68, 0xbc, 0x94, 0x22, 0xe7, 0x42, 0x9e, 0x84, 0xb1, 0xd4,",
          "2877:  0x6b, 0x66, 0x3e, 0x2b, 0xb3, 0xe3, 0x35, 0x13, 0xe4, 0x50, 0x7b, 0x53, 0x19, 0x3b, 0x62, 0x53,",
          "2878:  0x79, 0xde, 0xfa, 0xd8, 0xa7, 0x75, 0x06, 0xd0, 0xff, 0x8d, 0x4e, 0x1e, 0xb7, 0x67, 0x69, 0xdd,",
          "2879:  0x9f, 0x81, 0x69, 0xfb, 0x1b, 0x9e, 0xc7, 0x6a, 0x81, 0x76, 0xff, 0x65, 0x0c, 0x66, 0x32, 0x4d,",
          "2880:  0x2a, 0x19, 0x15, 0x77, 0x8e, 0x54, 0xf1, 0xa7, 0x60, 0xbc, 0x1b, 0xf7, 0x42, 0x2a, 0x7b, 0x8f,",
          "2881:  0xb4, 0x10, 0x66, 0xf1, 0x14, 0x05, 0x8e, 0xad, 0x4a, 0x3d, 0x3e, 0xc0, 0x5e, 0x28, 0x8b, 0xc5,",
          "2882:  0x7a, 0x55, 0x56, 0x39, 0x14, 0x25, 0x96, 0x7c, 0x0e, 0xa6, 0x13, 0xee, 0x0a, 0x85, 0x73, 0x90,",
          "2883:  0x16, 0x73, 0x65, 0xe4, 0xcf, 0x15, 0xc8, 0x2e, 0x2c, 0x9e, 0x76, 0xdb, 0x10, 0xcc, 0x88, 0x23,",
          "2884:  0x5f, 0x74, 0xec, 0x4f, 0x34, 0x4c, 0x8c, 0x7c, 0xae, 0x91, 0x6f, 0xfe, 0x11, 0xa6, 0x73, 0xff,",
          "2885:  0x2f, 0x35, 0x74, 0xb5, 0xd9, 0x4e, 0x3e, 0x04, 0xb3, 0x85, 0x01, 0x26, 0xfb, 0x21, 0xa8, 0x76,",
          "2886:  0xbc, 0x30, 0x68, 0xd0, 0x24, 0x15, 0xdf, 0xdb, 0xad, 0x8a, 0x6c, 0x67, 0x43, 0x01, 0xd1, 0xe0,",
          "2887:  0xf9, 0xc7, 0xac, 0xf9, 0x5b, 0x89, 0x5c, 0xa5, 0x6a, 0x7d, 0xcc, 0xda, 0x80, 0xd1, 0xa6, 0x71,",
          "2888:  0xbf, 0xe3, 0xc0, 0xd9, 0x81, 0x33, 0xf1, 0xee, 0xad, 0xff, 0xb9, 0xdf, 0x29, 0xc1, 0x99, 0x01,",
          "2889:  0xad, 0x5b, 0x64, 0xff, 0xe1, 0x7c, 0xc3, 0x43, 0x36, 0x86, 0xcd, 0x0c, 0xd5, 0x8a, 0x93, 0x6d,",
          "2890:  0x3b, 0xc6, 0xf5, 0x97, 0x1f, 0x9d, 0xeb, 0x77, 0xff, 0xb0, 0x04, 0xd6, 0x17, 0x66, 0xc8, 0xaf,",
          "2891:  0xd8, 0x8d, 0x89, 0x4e, 0x21, 0x8d, 0x74, 0x82, 0xb3, 0xee, 0x6a, 0x14, 0xf3, 0x35, 0xa8, 0xc9,",
          "2892:  0x31, 0xaf, 0xa6, 0xa5, 0xa3, 0xd5, 0x94, 0x04, 0xaa, 0xf7, 0xb3, 0x5c, 0x70, 0xef, 0x67, 0xb5,",
          "2893:  0xaf, 0xef, 0xf3, 0x1b, 0x8e, 0xd0, 0xae, 0xdc, 0xfb, 0x18, 0x5f, 0xea, 0xdc, 0xc7, 0x97, 0x7e,",
          "2894:  0x18, 0x2a, 0x09, 0x6d, 0x37, 0x58, 0xf4, 0x26, 0x7d, 0xae, 0x56, 0x85, 0x6d, 0x09, 0x47, 0x4d,",
          "2895:  0x41, 0x2e, 0x02, 0x78, 0xed, 0x76, 0x74, 0xfb, 0x52, 0xa7, 0x9b, 0x1e, 0x48, 0xef, 0xab, 0xa3,",
          "2896:  0x8a, 0x65, 0x8d, 0x41, 0x8b, 0xca, 0xfd, 0xa1, 0x23, 0x16, 0x52, 0x06, 0xe1, 0xcf, 0xe5, 0xee,",
          "2897:  0x55, 0x1c, 0x3f, 0x7e, 0x3d, 0x00, 0xf0, 0xf5, 0xed, 0xba, 0x02, 0xbe, 0x3d, 0x63, 0xae, 0xea,",
          "2898:  0xd9, 0x5f, 0x46, 0x51, 0x30, 0xb4, 0x84, 0x65, 0x0c, 0xa6, 0x7c, 0x94, 0xc1, 0xb8, 0xff, 0xee,",
          "2899:  0x40, 0x66, 0x5f, 0x20, 0x1d, 0x18, 0x67, 0x23, 0x38, 0x28, 0xe0, 0x22, 0xa0, 0xcd, 0x97, 0x19,",
          "2900:  0x93, 0x54, 0x08, 0xfe, 0x13, 0x85, 0x14, 0x12, 0xc8, 0xd8, 0xbb, 0x34, 0xf2, 0x85, 0x53, 0x5b,",
          "2901:  0x1a, 0x0b, 0xdd, 0xe5, 0x77, 0x4c, 0x75, 0x10, 0xef, 0x3e, 0x07, 0x73, 0x7d, 0x23, 0xe2, 0xad,",
          "2902:  0xfa, 0x91, 0xba, 0xf7, 0x68, 0x29, 0x1e, 0xbf, 0xee, 0x81, 0x02, 0xc7, 0x62, 0xf7, 0xd3, 0x79,",
          "2903:  0xf6, 0xe4, 0x77, 0x1c, 0x98, 0x4b, 0xf2, 0xfc, 0x1e, 0xca, 0xac, 0xe9, 0x5a, 0x54, 0x1f, 0x0a,",
          "2904:  0xfb, 0x47, 0xe0, 0xfe, 0xad, 0x74, 0x46, 0xe2, 0xe3, 0xee, 0x7a, 0x13, 0x71, 0x86, 0x6e, 0x22,",
          "2905:  0xcc, 0xac, 0xfc, 0x16, 0xad, 0xf7, 0xda, 0x7d, 0x7d, 0x20, 0xdb, 0x12, 0x8e, 0x9a, 0x22, 0xf3,",
          "2906:  0x01, 0x8c, 0xf2, 0x91, 0x1f, 0xc0, 0x78, 0x16, 0xa6, 0xed, 0x2b, 0xba, 0xbc, 0x28, 0x26, 0x0f,",
          "2907:  0x01, 0xec, 0xdb, 0xbc, 0x98, 0xa1, 0xca, 0x7d, 0x46, 0x61, 0xfc, 0xc8, 0xcf, 0x28, 0x3c, 0x0d,",
          "2908:  0x15, 0xf9, 0xb9, 0x74, 0x55, 0x74, 0x15, 0x4d, 0x26, 0x12, 0x86, 0x1a, 0xcb, 0x9c, 0x42, 0xc7,",
          "2909:  0x0b, 0x7b, 0x5e, 0x9b, 0xcd, 0x90, 0x6c, 0x73, 0xd2, 0x06, 0xb5, 0xa1, 0x31, 0x68, 0x51, 0x31,",
          "2910:  0x13, 0xc9, 0x5f, 0x4f, 0xcf, 0x34, 0x4b, 0x39, 0x47, 0x36, 0x4b, 0x65, 0xbb, 0x73, 0x4a, 0xc7,",
          "2911:  0xea, 0xce, 0xb1, 0x1b, 0x67, 0xca, 0xf7, 0x6d, 0x9c, 0x79, 0xbf, 0xb9, 0x1e, 0x27, 0x3a, 0x6c,",
          "2912:  0xa6, 0x06, 0x5d, 0x8d, 0x23, 0x2e, 0x4c, 0xf8, 0x9e, 0xee, 0x76, 0x9c, 0x16, 0x01, 0xd1, 0xca,",
          "2913:  0x32, 0x27, 0x92, 0x98, 0xda, 0xe2, 0x5b, 0xef, 0x9c, 0x7f, 0xec, 0x7b, 0xef, 0x9c, 0x7f, 0xec,",
          "2914:  0xed, 0x77, 0xce, 0x3f, 0xf6, 0x85, 0xbb, 0xe7, 0x9d, 0xb7, 0xee, 0x9e, 0x77, 0xbe, 0x77, 0xf7,",
          "2915:  0xbc, 0xf3, 0xf6, 0xdd, 0xf3, 0xce, 0xbf, 0xde, 0x3d, 0xef, 0xfc, 0xd6, 0x0f, 0xce, 0x3f, 0xf6,",
          "2916:  0x72, 0x45, 0xe9, 0xea, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x68, 0x16, 0xc5, 0x25, 0x0f, 0x68,",
          "2917:  0x00, 0x00,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5808:  var l int",
          "5809:  _ = l",
          "5810:  i--",
          "5811:  if m.InheritedCreds {",
          "5812:   dAtA[i] = 1",
          "5813:  } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5812:  if m.EnableOCI {",
          "5813:   dAtA[i] = 1",
          "5814:  } else {",
          "5815:   dAtA[i] = 0",
          "5816:  }",
          "5817:  i--",
          "5818:  dAtA[i] = 0x70",
          "5819:  i--",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "8710:  l = len(m.Name)",
          "8711:  n += 1 + l + sovGenerated(uint64(l))",
          "8712:  n += 2",
          "8713:  return n",
          "8714: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8722:  n += 2",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "10235:   `Type:` + fmt.Sprintf(\"%v\", this.Type) + `,`,",
          "10236:   `Name:` + fmt.Sprintf(\"%v\", this.Name) + `,`,",
          "10237:   `InheritedCreds:` + fmt.Sprintf(\"%v\", this.InheritedCreds) + `,`,",
          "10238:   `}`,",
          "10239:  }, \"\")",
          "10240:  return s",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10248:   `EnableOCI:` + fmt.Sprintf(\"%v\", this.EnableOCI) + `,`,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "20273:     }",
          "20274:    }",
          "20275:    m.InheritedCreds = bool(v != 0)",
          "20276:   default:",
          "20277:    iNdEx = preIndex",
          "20278:    skippy, err := skipGenerated(dAtA[iNdEx:])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20287:   case 14:",
          "20288:    if wireType != 0 {",
          "20289:     return fmt.Errorf(\"proto: wrong wireType = %d for field EnableOCI\", wireType)",
          "20290:    }",
          "20291:    var v int",
          "20292:    for shift := uint(0); ; shift += 7 {",
          "20293:     if shift >= 64 {",
          "20294:      return ErrIntOverflowGenerated",
          "20295:     }",
          "20296:     if iNdEx >= l {",
          "20297:      return io.ErrUnexpectedEOF",
          "20298:     }",
          "20299:     b := dAtA[iNdEx]",
          "20300:     iNdEx++",
          "20301:     v |= int(b&0x7F) << shift",
          "20302:     if b < 0x80 {",
          "20303:      break",
          "20304:     }",
          "20305:    }",
          "20306:    m.EnableOCI = bool(v != 0)",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/generated.proto||pkg/apis/application/v1alpha1/generated.proto": [
          "File: pkg/apis/application/v1alpha1/generated.proto -> pkg/apis/application/v1alpha1/generated.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "739:   optional bool inheritedCreds = 13;",
          "740: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:   optional bool enableOCI = 14;",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/openapi_generated.go||pkg/apis/application/v1alpha1/openapi_generated.go": [
          "File: pkg/apis/application/v1alpha1/openapi_generated.go -> pkg/apis/application/v1alpha1/openapi_generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2533:        Format:      \"\",",
          "2534:       },",
          "2535:      },",
          "2536:     },",
          "2537:     Required: []string{\"repo\"},",
          "2538:    },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2536:      \"enableOCI\": {",
          "2537:       SchemaProps: spec.SchemaProps{",
          "2538:        Description: \"Whether helm-oci support should be enabled for this repo\",",
          "2539:        Type:        []string{\"boolean\"},",
          "2540:        Format:      \"\",",
          "2541:       },",
          "2542:      },",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/types.go||pkg/apis/application/v1alpha1/types.go": [
          "File: pkg/apis/application/v1alpha1/types.go -> pkg/apis/application/v1alpha1/types.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:  return a.Chart != \"\"",
          "167: }",
          "169: func (a *ApplicationSource) IsZero() bool {",
          "170:  return a == nil ||",
          "171:   a.RepoURL == \"\" &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: func (a *ApplicationSource) IsHelmOci() bool {",
          "170:  if a.Chart == \"\" {",
          "171:   return false",
          "172:  }",
          "173:  if _, _, ok := helm.IsHelmOci(a.Chart); ok {",
          "174:   return true",
          "175:  }",
          "176:  return false",
          "177: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1303:  Name string `json:\"name,omitempty\" protobuf:\"bytes,12,opt,name=name\"`",
          "1305:  InheritedCreds bool `json:\"inheritedCreds,omitempty\" protobuf:\"bytes,13,opt,name=inheritedCreds\"`",
          "1306: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1317:  EnableOCI bool `json:\"enableOCI,omitempty\" protobuf:\"bytes,14,opt,name=enableOCI\"`",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  parallelismLimitSemaphore *semaphore.Weighted",
          "65:  metricsServer             *metrics.MetricsServer",
          "66:  newGitClient              func(rawRepoURL string, creds git.Creds, insecure bool, enableLfs bool) (git.Client, error)",
          "68:  initConstants             RepoServerInitConstants",
          "70:  now func() time.Time",
          "",
          "[Removed Lines]",
          "67:  newHelmClient             func(repoURL string, creds helm.Creds) helm.Client",
          "",
          "[Added Lines]",
          "67:  newHelmClient             func(repoURL string, creds helm.Creds, enableOci bool) helm.Client",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:   cache:                     cache,",
          "91:   metricsServer:             metricsServer,",
          "92:   newGitClient:              git.NewClient,",
          "95:   },",
          "96:   initConstants: initConstants,",
          "97:   now:           time.Now,",
          "",
          "[Removed Lines]",
          "93:   newHelmClient: func(repoURL string, creds helm.Creds) helm.Client {",
          "94:    return helm.NewClientWithLock(repoURL, creds, sync.NewKeyLock())",
          "",
          "[Added Lines]",
          "93:   newHelmClient: func(repoURL string, creds helm.Creds, enableOci bool) helm.Client {",
          "94:    return helm.NewClientWithLock(repoURL, creds, sync.NewKeyLock(), enableOci)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1189: }",
          "1191: func (s *Service) newHelmClientResolveRevision(repo *v1alpha1.Repository, revision string, chart string) (helm.Client, string, error) {",
          "1193:  if helm.IsVersion(revision) {",
          "1194:   return helmClient, revision, nil",
          "1195:  }",
          "",
          "[Removed Lines]",
          "1192:  helmClient := s.newHelmClient(repo.Repo, repo.GetHelmCreds())",
          "",
          "[Added Lines]",
          "1192:  helmClient := s.newHelmClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1232: }",
          "1234: func (s *Service) GetHelmCharts(ctx context.Context, q *apiclient.HelmChartsRequest) (*apiclient.HelmChartsResponse, error) {",
          "1236:  if err != nil {",
          "1237:   return nil, err",
          "1238:  }",
          "",
          "[Removed Lines]",
          "1235:  index, err := s.newHelmClient(q.Repo.Repo, q.Repo.GetHelmCreds()).GetIndex()",
          "",
          "[Added Lines]",
          "1235:  index, err := s.newHelmClient(q.Repo.Repo, q.Repo.GetHelmCreds(), q.Repo.EnableOCI).GetIndex()",
          "",
          "---------------"
        ],
        "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go": [
          "File: reposerver/repository/repository_test.go -> reposerver/repository/repository_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  service.newGitClient = func(rawRepoURL string, creds git.Creds, insecure bool, enableLfs bool) (client git.Client, e error) {",
          "87:   return gitClient, nil",
          "88:  }",
          "90:   return helmClient",
          "91:  }",
          "92:  return service, gitClient",
          "",
          "[Removed Lines]",
          "89:  service.newHelmClient = func(repoURL string, creds helm.Creds) helm.Client {",
          "",
          "[Added Lines]",
          "89:  service.newHelmClient = func(repoURL string, creds helm.Creds, enableOci bool) helm.Client {",
          "",
          "---------------"
        ],
        "server/application/application.go||server/application/application.go": [
          "File: server/application/application.go -> server/application/application.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1268:   if helm.IsVersion(ambiguousRevision) {",
          "1269:    return ambiguousRevision, ambiguousRevision, nil",
          "1270:   }",
          "1272:   index, err := client.GetIndex()",
          "1273:   if err != nil {",
          "1274:    return \"\", \"\", err",
          "",
          "[Removed Lines]",
          "1271:   client := helm.NewClient(repo.Repo, repo.GetHelmCreds())",
          "",
          "[Added Lines]",
          "1271:   client := helm.NewClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI)",
          "",
          "---------------"
        ],
        "server/repository/repository.go||server/repository/repository.go": [
          "File: server/repository/repository.go -> server/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     Username:  repo.Username,",
          "140:     Insecure:  repo.IsInsecure(),",
          "141:     EnableLFS: repo.EnableLFS,",
          "142:    })",
          "143:   }",
          "144:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     EnableOCI: repo.EnableOCI,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344:   Insecure:          q.Insecure,",
          "345:   TLSClientCertData: q.TlsClientCertData,",
          "346:   TLSClientCertKey:  q.TlsClientCertKey,",
          "347:  }",
          "349:  var repoCreds *appsv1.RepoCreds",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:   EnableOCI:         q.EnableOci,",
          "",
          "---------------"
        ],
        "server/repository/repository.proto||server/repository/repository.proto": [
          "File: server/repository/repository.proto -> server/repository/repository.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  string type = 9;",
          "65:  string name = 10;",
          "66: }",
          "68: message RepoResponse {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:  bool enableOci = 11;",
          "",
          "---------------"
        ],
        "util/argo/argo.go||util/argo/argo.go": [
          "File: util/argo/argo.go -> util/argo/argo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  \"google.golang.org/grpc/status\"",
          "14:  apierr \"k8s.io/apimachinery/pkg/api/errors\"",
          "15:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "16:  \"k8s.io/apimachinery/pkg/runtime/schema\"",
          "17:  \"k8s.io/apimachinery/pkg/types\"",
          "19:  \"github.com/argoproj/argo-cd/common\"",
          "20:  argoappv1 \"github.com/argoproj/argo-cd/pkg/apis/application/v1alpha1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:  \"k8s.io/apimachinery/pkg/fields\"",
          "19:  \"k8s.io/apimachinery/pkg/watch\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  return nil, err",
          "91: }",
          "94:  repo = repo.DeepCopy()",
          "95:  if isHelm {",
          "96:   repo.Type = \"helm\"",
          "97:  } else {",
          "98:   repo.Type = \"git\"",
          "99:  }",
          "100:  return TestRepo(repo)",
          "101: }",
          "",
          "[Removed Lines]",
          "93: func TestRepoWithKnownType(repo *argoappv1.Repository, isHelm bool) error {",
          "",
          "[Added Lines]",
          "97: func WaitForRefresh(ctx context.Context, appIf v1alpha1.ApplicationInterface, name string, timeout *time.Duration) (*argoappv1.Application, error) {",
          "98:  var cancel context.CancelFunc",
          "99:  if timeout != nil {",
          "100:   ctx, cancel = context.WithTimeout(ctx, *timeout)",
          "101:   defer cancel()",
          "102:  }",
          "103:  ch := kube.WatchWithRetry(ctx, func() (i watch.Interface, e error) {",
          "104:   fieldSelector := fields.ParseSelectorOrDie(fmt.Sprintf(\"metadata.name=%s\", name))",
          "105:   listOpts := metav1.ListOptions{FieldSelector: fieldSelector.String()}",
          "106:   return appIf.Watch(ctx, listOpts)",
          "107:  })",
          "108:  for next := range ch {",
          "109:   if next.Error != nil {",
          "110:    return nil, next.Error",
          "111:   }",
          "112:   app, ok := next.Object.(*argoappv1.Application)",
          "113:   if !ok {",
          "114:    return nil, fmt.Errorf(\"Application event object failed conversion: %v\", next)",
          "115:   }",
          "116:   annotations := app.GetAnnotations()",
          "117:   if annotations == nil {",
          "118:    annotations = make(map[string]string)",
          "119:   }",
          "120:   if _, ok := annotations[common.AnnotationKeyRefresh]; !ok {",
          "121:    return app, nil",
          "122:   }",
          "123:  }",
          "124:  return nil, fmt.Errorf(\"application refresh deadline exceeded\")",
          "125: }",
          "127: func TestRepoWithKnownType(repo *argoappv1.Repository, isHelm bool, isHelmOci bool) error {",
          "135:  if isHelmOci {",
          "136:   repo.EnableOCI = true",
          "137:  } else {",
          "138:   repo.EnableOCI = false",
          "139:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:    return git.TestRepo(repo.Repo, repo.GetGitCreds(), repo.IsInsecure(), repo.IsLFSEnabled())",
          "107:   },",
          "108:   \"helm\": func() error {",
          "111:   },",
          "112:  }",
          "113:  if check, ok := checks[repo.Type]; ok {",
          "",
          "[Removed Lines]",
          "109:    _, err := helm.NewClient(repo.Repo, repo.GetHelmCreds()).GetIndex()",
          "110:    return err",
          "",
          "[Added Lines]",
          "149:    if repo.EnableOCI {",
          "150:     _, err := helm.NewClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI).TestHelmOCI()",
          "151:     return err",
          "152:    } else {",
          "153:     _, err := helm.NewClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI).GetIndex()",
          "154:     return err",
          "155:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "152:  }",
          "154:  repoAccessible := false",
          "156:  if err != nil {",
          "157:   conditions = append(conditions, argoappv1.ApplicationCondition{",
          "158:    Type:    argoappv1.ApplicationConditionInvalidSpecError,",
          "",
          "[Removed Lines]",
          "155:  err = TestRepoWithKnownType(repo, app.Spec.Source.IsHelm())",
          "",
          "[Added Lines]",
          "200:  err = TestRepoWithKnownType(repo, app.Spec.Source.IsHelm(), app.Spec.Source.IsHelmOci())",
          "",
          "---------------"
        ],
        "util/db/repository.go||util/db/repository.go": [
          "File: util/db/repository.go -> util/db/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:   InsecureIgnoreHostKey: r.IsInsecure(),",
          "67:   Insecure:              r.IsInsecure(),",
          "68:   EnableLFS:             r.EnableLFS,",
          "69:  }",
          "70:  err = db.updateRepositorySecrets(&repoInfo, r)",
          "71:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:   EnableOci:             r.EnableOCI,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:   InsecureIgnoreHostKey: repoInfo.InsecureIgnoreHostKey,",
          "148:   Insecure:              repoInfo.Insecure,",
          "149:   EnableLFS:             repoInfo.EnableLFS,",
          "150:  }",
          "151:  err := db.unmarshalFromSecretsStr(map[*string]*apiv1.SecretKeySelector{",
          "152:   &repo.Username:          repoInfo.UsernameSecret,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   EnableOCI:             repoInfo.EnableOci,",
          "",
          "---------------"
        ],
        "util/helm/client.go||util/helm/client.go": [
          "File: util/helm/client.go -> util/helm/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:  CleanChartCache(chart string, version *semver.Version) error",
          "43:  ExtractChart(chart string, version *semver.Version) (string, io.Closer, error)",
          "44:  GetIndex() (*Index, error)",
          "45: }",
          "49: }",
          "52:  return &nativeHelmChart{",
          "57:  }",
          "58: }",
          "60: type nativeHelmChart struct {",
          "65: }",
          "67: func fileExist(filePath string) (bool, error) {",
          "",
          "[Removed Lines]",
          "47: func NewClient(repoURL string, creds Creds) Client {",
          "48:  return NewClientWithLock(repoURL, creds, globalLock)",
          "51: func NewClientWithLock(repoURL string, creds Creds, repoLock sync.KeyLock) Client {",
          "53:   repoURL:  repoURL,",
          "54:   creds:    creds,",
          "55:   repoPath: filepath.Join(os.TempDir(), strings.Replace(repoURL, \"/\", \"_\", -1)),",
          "56:   repoLock: repoLock,",
          "61:  repoPath string",
          "62:  repoURL  string",
          "63:  creds    Creds",
          "64:  repoLock sync.KeyLock",
          "",
          "[Added Lines]",
          "45:  TestHelmOCI() (bool, error)",
          "48: func NewClient(repoURL string, creds Creds, enableOci bool) Client {",
          "49:  return NewClientWithLock(repoURL, creds, globalLock, enableOci)",
          "52: func NewClientWithLock(repoURL string, creds Creds, repoLock sync.KeyLock, enableOci bool) Client {",
          "54:   repoURL:   repoURL,",
          "55:   creds:     creds,",
          "56:   repoPath:  filepath.Join(os.TempDir(), strings.Replace(repoURL, \"/\", \"_\", -1)),",
          "57:   repoLock:  repoLock,",
          "58:   enableOci: enableOci,",
          "63:  repoPath  string",
          "64:  repoURL   string",
          "65:  creds     Creds",
          "66:  repoLock  sync.KeyLock",
          "67:  enableOci bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:  }",
          "107:  if !exists {",
          "110:   if err != nil {",
          "111:    return \"\", nil, err",
          "112:   }",
          "",
          "[Removed Lines]",
          "109:   helmCmd, err := NewCmdWithVersion(c.repoPath, HelmV3)",
          "",
          "[Added Lines]",
          "112:   helmCmd, err := NewCmdWithVersion(c.repoPath, HelmV3, c.enableOci)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "117:    return \"\", nil, err",
          "118:   }",
          "121:   tempDest, err := ioutil.TempDir(\"\", \"helm\")",
          "122:   if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:   if c.enableOci {",
          "125:    _, err = helmCmd.Login(c.repoURL, c.creds)",
          "126:    if err != nil {",
          "127:     return \"\", nil, err",
          "128:    }",
          "129:    defer func() {",
          "130:     _, _ = helmCmd.Logout(c.repoURL, c.creds)",
          "131:    }()",
          "132:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:   if err != nil {",
          "128:    return \"\", nil, err",
          "129:   }",
          "132:   infos, err := ioutil.ReadDir(tempDest)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:   if c.enableOci {",
          "146:    _, err = helmCmd.Export(c.repoURL, chart, version.String(), tempDest)",
          "147:    if err != nil {",
          "148:     return \"\", nil, err",
          "149:    }",
          "150:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "177:  return index, nil",
          "178: }",
          "180: func (c *nativeHelmChart) loadRepoIndex() ([]byte, error) {",
          "181:  repoURL, err := url.Parse(c.repoURL)",
          "182:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202: func (c *nativeHelmChart) TestHelmOCI() (bool, error) {",
          "203:  start := time.Now()",
          "205:  tmpDir, err := ioutil.TempDir(\"\", \"helm\")",
          "206:  if err != nil {",
          "207:   return false, err",
          "208:  }",
          "209:  defer func() { _ = os.RemoveAll(tmpDir) }()",
          "211:  helmCmd, err := NewCmdWithVersion(tmpDir, HelmV3, c.enableOci)",
          "212:  if err != nil {",
          "213:   return false, err",
          "214:  }",
          "215:  defer helmCmd.Close()",
          "217:  _, err = helmCmd.Login(c.repoURL, c.creds)",
          "218:  if err != nil {",
          "219:   return false, err",
          "220:  }",
          "221:  defer func() {",
          "222:   _, _ = helmCmd.Logout(c.repoURL, c.creds)",
          "223:  }()",
          "225:  log.WithFields(log.Fields{\"seconds\": time.Since(start).Seconds()}).Info(\"took to test helm oci repository\")",
          "227:  return true, nil",
          "228: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "253: }",
          "255: func (c *nativeHelmChart) getChartPath(chart string, version *semver.Version) string {",
          "256:  return path.Join(c.repoPath, fmt.Sprintf(\"%s-%v.tgz\", normalizeChartName(chart), version))",
          "257: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:  if repoNamespace, chartName, isHelmOci := IsHelmOci(chart); isHelmOci {",
          "307:   return path.Join(c.repoPath, fmt.Sprintf(\"%s-%s-%v.tgz\", repoNamespace, normalizeChartName(chartName), version))",
          "308:  }",
          "312: func IsHelmOci(chart string) (string, string, bool) {",
          "313:  chartArray := strings.Split(chart, \"/\")",
          "314:  if len(chartArray) == 2 {",
          "315:   return chartArray[0], chartArray[1], true",
          "316:  }",
          "317:  return \"\", \"\", false",
          "318: }",
          "",
          "---------------"
        ],
        "util/helm/client_test.go||util/helm/client_test.go": [
          "File: util/helm/client_test.go -> util/helm/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: func TestIndex(t *testing.T) {",
          "14:  t.Run(\"Invalid\", func(t *testing.T) {",
          "16:   _, err := client.GetIndex()",
          "17:   assert.Error(t, err)",
          "18:  })",
          "19:  t.Run(\"Stable\", func(t *testing.T) {",
          "21:   index, err := client.GetIndex()",
          "22:   assert.NoError(t, err)",
          "23:   assert.NotNil(t, index)",
          "",
          "[Removed Lines]",
          "15:   client := NewClient(\"\", Creds{})",
          "20:   client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{})",
          "",
          "[Added Lines]",
          "15:   client := NewClient(\"\", Creds{}, false)",
          "20:   client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:   client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{",
          "27:    Username: \"my-password\",",
          "28:    Password: \"my-username\",",
          "30:   index, err := client.GetIndex()",
          "31:   assert.NoError(t, err)",
          "32:   assert.NotNil(t, index)",
          "",
          "[Removed Lines]",
          "29:   })",
          "",
          "[Added Lines]",
          "29:   }, false)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34: }",
          "36: func Test_nativeHelmChart_ExtractChart(t *testing.T) {",
          "38:  path, closer, err := client.ExtractChart(\"argo-cd\", semver.MustParse(\"0.7.1\"))",
          "39:  assert.NoError(t, err)",
          "40:  defer io.Close(closer)",
          "",
          "[Removed Lines]",
          "37:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{})",
          "",
          "[Added Lines]",
          "37:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false)",
          "",
          "---------------"
        ],
        "util/helm/cmd.go||util/helm/cmd.go": [
          "File: util/helm/cmd.go -> util/helm/cmd.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: type Cmd struct {",
          "18:  HelmVer",
          "22: }",
          "24: func NewCmd(workDir string, version string) (*Cmd, error) {",
          "25:  if version != \"\" {",
          "26:   switch version {",
          "27:   case \"v2\":",
          "29:   case \"v3\":",
          "31:   }",
          "32:  }",
          "33:  helmVersion, err := getHelmVersion(workDir)",
          "",
          "[Removed Lines]",
          "19:  helmHome string",
          "20:  WorkDir  string",
          "21:  IsLocal  bool",
          "28:    return NewCmdWithVersion(workDir, HelmV2)",
          "30:    return NewCmdWithVersion(workDir, HelmV3)",
          "",
          "[Added Lines]",
          "19:  helmHome  string",
          "20:  WorkDir   string",
          "21:  IsLocal   bool",
          "22:  IsHelmOci bool",
          "29:    return NewCmdWithVersion(workDir, HelmV2, false)",
          "31:    return NewCmdWithVersion(workDir, HelmV3, false)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:   return nil, err",
          "36:  }",
          "39: }",
          "42:  tmpDir, err := ioutil.TempDir(\"\", \"helm\")",
          "43:  if err != nil {",
          "44:   return nil, err",
          "45:  }",
          "47: }",
          "49: var redactor = func(text string) string {",
          "",
          "[Removed Lines]",
          "38:  return NewCmdWithVersion(workDir, *helmVersion)",
          "41: func NewCmdWithVersion(workDir string, version HelmVer) (*Cmd, error) {",
          "46:  return &Cmd{WorkDir: workDir, helmHome: tmpDir, HelmVer: version}, err",
          "",
          "[Added Lines]",
          "39:  return NewCmdWithVersion(workDir, *helmVersion, false)",
          "42: func NewCmdWithVersion(workDir string, version HelmVer, isHelmOci bool) (*Cmd, error) {",
          "47:  return &Cmd{WorkDir: workDir, helmHome: tmpDir, HelmVer: version, IsHelmOci: isHelmOci}, err",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:    fmt.Sprintf(\"XDG_DATA_HOME=%s/data\", c.helmHome),",
          "62:    fmt.Sprintf(\"HELM_HOME=%s\", c.helmHome))",
          "63:  }",
          "64:  return executil.RunWithRedactor(cmd, redactor)",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:  if c.IsHelmOci {",
          "67:   cmd.Env = append(cmd.Env, \"HELM_EXPERIMENTAL_OCI=1\")",
          "68:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:  return \"\", nil",
          "72: }",
          "74: func (c *Cmd) RepoAdd(name string, url string, opts Creds) (string, error) {",
          "75:  tmp, err := ioutil.TempDir(\"\", \"helm\")",
          "76:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79: func (c *Cmd) Login(repo string, creds Creds) (string, error) {",
          "80:  args := []string{\"registry\", \"login\"}",
          "81:  args = append(args, repo)",
          "83:  if creds.Username != \"\" {",
          "84:   args = append(args, \"--username\", creds.Username)",
          "85:  }",
          "87:  if creds.Password != \"\" {",
          "88:   args = append(args, \"--password\", creds.Password)",
          "89:  }",
          "91:  if creds.CAPath != \"\" {",
          "92:   args = append(args, \"--ca-file\", creds.CAPath)",
          "93:  }",
          "94:  if len(creds.CertData) > 0 {",
          "95:   filePath, closer, err := writeToTmp(creds.CertData)",
          "96:   if err != nil {",
          "97:    return \"\", err",
          "98:   }",
          "99:   defer io.Close(closer)",
          "100:   args = append(args, \"--cert-file\", filePath)",
          "101:  }",
          "102:  if len(creds.KeyData) > 0 {",
          "103:   filePath, closer, err := writeToTmp(creds.KeyData)",
          "104:   if err != nil {",
          "105:    return \"\", err",
          "106:   }",
          "107:   defer io.Close(closer)",
          "108:   args = append(args, \"--key-file\", filePath)",
          "109:  }",
          "111:  if creds.InsecureSkipVerify {",
          "112:   args = append(args, \"--insecure\")",
          "113:  }",
          "114:  return c.run(args...)",
          "115: }",
          "117: func (c *Cmd) Logout(repo string, creds Creds) (string, error) {",
          "118:  args := []string{\"registry\", \"logout\"}",
          "119:  args = append(args, repo)",
          "121:  if creds.CAPath != \"\" {",
          "122:   args = append(args, \"--ca-file\", creds.CAPath)",
          "123:  }",
          "124:  if len(creds.CertData) > 0 {",
          "125:   filePath, closer, err := writeToTmp(creds.CertData)",
          "126:   if err != nil {",
          "127:    return \"\", err",
          "128:   }",
          "129:   defer io.Close(closer)",
          "130:   args = append(args, \"--cert-file\", filePath)",
          "131:  }",
          "132:  if len(creds.KeyData) > 0 {",
          "133:   filePath, closer, err := writeToTmp(creds.KeyData)",
          "134:   if err != nil {",
          "135:    return \"\", err",
          "136:   }",
          "137:   defer io.Close(closer)",
          "138:   args = append(args, \"--key-file\", filePath)",
          "139:  }",
          "141:  return c.run(args...)",
          "142: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "141: }",
          "143: func (c *Cmd) Fetch(repo, chartName, version, destination string, creds Creds) (string, error) {",
          "154:  }",
          "155:  if creds.CAPath != \"\" {",
          "156:   args = append(args, \"--ca-file\", creds.CAPath)",
          "157:  }",
          "",
          "[Removed Lines]",
          "144:  args := []string{c.pullCommand, \"--destination\", destination}",
          "146:  if version != \"\" {",
          "147:   args = append(args, \"--version\", version)",
          "148:  }",
          "149:  if creds.Username != \"\" {",
          "150:   args = append(args, \"--username\", creds.Username)",
          "151:  }",
          "152:  if creds.Password != \"\" {",
          "153:   args = append(args, \"--password\", creds.Password)",
          "",
          "[Added Lines]",
          "214:  args := []string{}",
          "216:  if _, _, isHelmOci := IsHelmOci(chartName); isHelmOci {",
          "217:   args = append(args, \"chart\", \"pull\")",
          "218:   repoUrl := fmt.Sprintf(repo + \"/\" + chartName + \":\" + version)",
          "219:   args = append(args, repoUrl)",
          "220:  } else {",
          "221:   args = append(args, c.pullCommand, \"--destination\", destination)",
          "222:   if version != \"\" {",
          "223:    args = append(args, \"--version\", version)",
          "224:   }",
          "225:   if creds.Username != \"\" {",
          "226:    args = append(args, \"--username\", creds.Username)",
          "227:   }",
          "228:   if creds.Password != \"\" {",
          "229:    args = append(args, \"--password\", creds.Password)",
          "230:   }",
          "232:   args = append(args, \"--repo\", repo, chartName)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "172:   args = append(args, \"--key-file\", filePath)",
          "173:  }",
          "176:  return c.run(args...)",
          "177: }",
          "179: func (c *Cmd) dependencyBuild() (string, error) {",
          "180:  return c.run(\"dependency\", \"build\")",
          "181: }",
          "",
          "[Removed Lines]",
          "175:  args = append(args, \"--repo\", repo, chartName)",
          "",
          "[Added Lines]",
          "258: func (c *Cmd) Export(repo, chartName, version, destination string) (string, error) {",
          "259:  output := \"\"",
          "260:  var err error",
          "261:  args := []string{\"chart\", \"export\"}",
          "262:  repoUrl := fmt.Sprintf(repo + \"/\" + chartName + \":\" + version)",
          "263:  args = append(args, repoUrl, \"--destination\", destination)",
          "265:  output, err = c.run(args...)",
          "266:  if err != nil {",
          "267:   return \"\", err",
          "268:  }",
          "271:  repoNamespace, repoName, _ := IsHelmOci(chartName)",
          "272:  cmd := exec.Command(\"tar\", \"-zcvf\", repoNamespace+\"-\"+repoName+\"-\"+version+\".tgz\", repoName)",
          "273:  cmd.Dir = destination",
          "274:  _, err = executil.Run(cmd)",
          "275:  if err != nil {",
          "276:   return \"\", err",
          "277:  }",
          "278:  defer func() { _ = os.RemoveAll(destination + \"/\" + repoName) }()",
          "280:  return output, nil",
          "281: }",
          "",
          "---------------"
        ],
        "util/helm/cmd_test.go||util/helm/cmd_test.go": [
          "File: util/helm/cmd_test.go -> util/helm/cmd_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: }",
          "15: func TestCmd_template_kubeVersion(t *testing.T) {",
          "17:  assert.NoError(t, err)",
          "18:  s, err := cmd.template(\"testdata/redis\", &TemplateOpts{",
          "19:   KubeVersion: \"1.14\",",
          "",
          "[Removed Lines]",
          "16:  cmd, err := NewCmdWithVersion(\".\", HelmV3)",
          "",
          "[Added Lines]",
          "16:  cmd, err := NewCmdWithVersion(\".\", HelmV3, false)",
          "",
          "---------------"
        ],
        "util/helm/mocks/Client.go||util/helm/mocks/Client.go": [
          "File: util/helm/mocks/Client.go -> util/helm/mocks/Client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:  return r0, r1",
          "85: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: func (_m *Client) TestHelmOCI() (bool, error) {",
          "89:  ret := _m.Called()",
          "91:  var r0 bool",
          "92:  if rf, ok := ret.Get(0).(func() bool); ok {",
          "93:   r0 = rf()",
          "94:  } else {",
          "95:   if ret.Get(0) != nil {",
          "96:    r0 = ret.Get(0).(bool)",
          "97:   }",
          "98:  }",
          "100:  var r1 error",
          "101:  if rf, ok := ret.Get(1).(func() error); ok {",
          "102:   r1 = rf()",
          "103:  } else {",
          "104:   r1 = ret.Error(1)",
          "105:  }",
          "107:  return r0, r1",
          "108: }",
          "",
          "---------------"
        ],
        "util/settings/settings.go||util/settings/settings.go": [
          "File: util/settings/settings.go -> util/settings/settings.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:  TLSClientCertDataSecret *apiv1.SecretKeySelector `json:\"tlsClientCertDataSecret,omitempty\"`",
          "168:  TLSClientCertKeySecret *apiv1.SecretKeySelector `json:\"tlsClientCertKeySecret,omitempty\"`",
          "169: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:  EnableOci bool `json:\"enableOci,omitempty\"`",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7da1489789a895209f6e21234c627ddffb6caaf",
      "candidate_info": {
        "commit_hash": "c7da1489789a895209f6e21234c627ddffb6caaf",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/c7da1489789a895209f6e21234c627ddffb6caaf",
        "files": [
          "reposerver/repository/lock.go",
          "reposerver/repository/lock_test.go",
          "reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go",
          "reposerver/server.go",
          "util/grpc/sanitizer.go",
          "util/grpc/sanitizer_test.go",
          "util/helm/client.go",
          "util/io/paths.go",
          "util/io/paths_test.go"
        ],
        "message": "Unique repo path and permissions (#8517)\n\nUnique repo path and permissions (#8517)\n\nSigned-off-by: Alexander Matyushentsev <AMatyushentsev@gmail.com>",
        "before_after_code_files": [
          "reposerver/repository/lock.go||reposerver/repository/lock.go",
          "reposerver/repository/lock_test.go||reposerver/repository/lock_test.go",
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go",
          "reposerver/server.go||reposerver/server.go",
          "util/grpc/sanitizer.go||util/grpc/sanitizer.go",
          "util/grpc/sanitizer_test.go||util/grpc/sanitizer_test.go",
          "util/helm/client.go||util/helm/client.go",
          "util/io/paths.go||util/io/paths.go",
          "util/io/paths_test.go||util/io/paths_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go"
          ],
          "candidate": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go"
          ]
        }
      },
      "candidate_diff": {
        "reposerver/repository/lock.go||reposerver/repository/lock.go": [
          "File: reposerver/repository/lock.go -> reposerver/repository/lock.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: }",
          "21:  r.lock.Lock()",
          "22:  state, ok := r.stateByKey[path]",
          "23:  if !ok {",
          "",
          "[Removed Lines]",
          "20: func (r *repositoryLock) Lock(path string, revision string, allowConcurrent bool, init func() error) (io.Closer, error) {",
          "",
          "[Added Lines]",
          "20: func (r *repositoryLock) Lock(path string, revision string, allowConcurrent bool, init func() (io.Closer, error)) (io.Closer, error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   state.cond.L.Lock()",
          "31:   notify := false",
          "32:   state.processCount--",
          "33:   if state.processCount == 0 {",
          "34:    notify = true",
          "35:    state.revision = \"\"",
          "36:   }",
          "37:   state.cond.L.Unlock()",
          "38:   if notify {",
          "39:    state.cond.Broadcast()",
          "40:   }",
          "42:  })",
          "44:  for {",
          "45:   state.cond.L.Lock()",
          "46:   if state.revision == \"\" {",
          "49:     state.cond.L.Unlock()",
          "50:     return nil, err",
          "51:    }",
          "53:    state.revision = revision",
          "54:    state.processCount = 1",
          "55:    state.allowConcurrent = allowConcurrent",
          "",
          "[Removed Lines]",
          "41:   return nil",
          "48:    if err := init(); err != nil {",
          "",
          "[Added Lines]",
          "33:   var err error",
          "37:    err = state.initCloser.Close()",
          "44:   return err",
          "51:    initCloser, err := init()",
          "52:    if err != nil {",
          "56:    state.initCloser = initCloser",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71: type repositoryState struct {",
          "72:  cond            *sync.Cond",
          "73:  revision        string",
          "74:  processCount    int",
          "75:  allowConcurrent bool",
          "76: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:  initCloser      io.Closer",
          "",
          "---------------"
        ],
        "reposerver/repository/lock_test.go||reposerver/repository/lock_test.go": [
          "File: reposerver/repository/lock_test.go -> reposerver/repository/lock_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  }",
          "27: }",
          "33:  }",
          "34: }",
          "",
          "[Removed Lines]",
          "29: func numberOfInits(initializedTimes *int) func() error {",
          "30:  return func() error {",
          "32:   return nil",
          "",
          "[Added Lines]",
          "29: func numberOfInits(initializedTimes *int) func() (io.Closer, error) {",
          "30:  return func() (io.Closer, error) {",
          "32:   return util.NopCloser, nil",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:  lock := NewRepositoryLock()",
          "122:  closer1, done := lockQuickly(func() (io.Closer, error) {",
          "125:   })",
          "126:  })",
          "",
          "[Removed Lines]",
          "123:   return lock.Lock(\"myRepo\", \"1\", true, func() error {",
          "124:    return errors.New(\"failed\")",
          "",
          "[Added Lines]",
          "123:   return lock.Lock(\"myRepo\", \"1\", true, func() (io.Closer, error) {",
          "124:    return util.NopCloser, errors.New(\"failed\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:  assert.Nil(t, closer1)",
          "134:  closer2, done := lockQuickly(func() (io.Closer, error) {",
          "137:   })",
          "138:  })",
          "",
          "[Removed Lines]",
          "135:   return lock.Lock(\"myRepo\", \"1\", true, func() error {",
          "136:    return nil",
          "",
          "[Added Lines]",
          "135:   return lock.Lock(\"myRepo\", \"1\", true, func() (io.Closer, error) {",
          "136:    return util.NopCloser, nil",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  \"encoding/json\"",
          "7:  \"errors\"",
          "8:  \"fmt\"",
          "9:  \"io/ioutil\"",
          "10:  \"net/url\"",
          "11:  \"os\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:  goio \"io\"",
          "10:  \"io/fs\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:  \"strings\"",
          "17:  \"time\"",
          "23:  \"github.com/Masterminds/semver/v3\"",
          "24:  \"github.com/TomOnTime/utfutil\"",
          "25:  \"github.com/argoproj/gitops-engine/pkg/utils/kube\"",
          "",
          "[Removed Lines]",
          "19:  \"github.com/google/go-jsonnet\"",
          "21:  \"github.com/argoproj/argo-cd/v2/util/argo\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "27:  \"github.com/argoproj/pkg/sync\"",
          "28:  jsonpatch \"github.com/evanphx/json-patch\"",
          "29:  \"github.com/ghodss/yaml\"",
          "30:  log \"github.com/sirupsen/logrus\"",
          "31:  \"golang.org/x/sync/semaphore\"",
          "32:  \"google.golang.org/grpc/codes\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:  gogit \"github.com/go-git/go-git/v5\"",
          "29:  \"github.com/google/go-jsonnet\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "44:  \"github.com/argoproj/argo-cd/v2/reposerver/metrics\"",
          "45:  \"github.com/argoproj/argo-cd/v2/util/app/discovery\"",
          "46:  argopath \"github.com/argoproj/argo-cd/v2/util/app/path\"",
          "47:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "48:  \"github.com/argoproj/argo-cd/v2/util/git\"",
          "49:  \"github.com/argoproj/argo-cd/v2/util/glob\"",
          "50:  \"github.com/argoproj/argo-cd/v2/util/gpg\"",
          "51:  \"github.com/argoproj/argo-cd/v2/util/helm\"",
          "52:  \"github.com/argoproj/argo-cd/v2/util/io\"",
          "53:  \"github.com/argoproj/argo-cd/v2/util/ksonnet\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:  \"github.com/argoproj/argo-cd/v2/util/argo\"",
          "52:  \"github.com/argoproj/argo-cd/v2/util/grpc\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "69: type Service struct {",
          "70:  gitCredsStore             git.CredsStore",
          "71:  repoLock                  *repositoryLock",
          "72:  cache                     *reposervercache.Cache",
          "73:  parallelismLimitSemaphore *semaphore.Weighted",
          "74:  metricsServer             *metrics.MetricsServer",
          "75:  resourceTracking          argo.ResourceTracking",
          "77:  newHelmClient             func(repoURL string, creds helm.Creds, enableOci bool, proxy string, opts ...helm.ClientOpts) helm.Client",
          "78:  initConstants             RepoServerInitConstants",
          "",
          "[Removed Lines]",
          "76:  newGitClient              func(rawRepoURL string, creds git.Creds, insecure bool, enableLfs bool, proxy string, opts ...git.ClientOpts) (git.Client, error)",
          "",
          "[Added Lines]",
          "73:  rootDir                   string",
          "74:  gitRepoPaths              *io.TempPaths",
          "75:  chartPaths                *io.TempPaths",
          "76:  gitRepoInitializer        func(rootPath string) goio.Closer",
          "82:  newGitClient              func(rawRepoURL string, root string, creds git.Creds, insecure bool, enableLfs bool, proxy string, opts ...git.ClientOpts) (git.Client, error)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "89: }",
          "93:  var parallelismLimitSemaphore *semaphore.Weighted",
          "94:  if initConstants.ParallelismLimit > 0 {",
          "95:   parallelismLimitSemaphore = semaphore.NewWeighted(initConstants.ParallelismLimit)",
          "",
          "[Removed Lines]",
          "92: func NewService(metricsServer *metrics.MetricsServer, cache *reposervercache.Cache, initConstants RepoServerInitConstants, resourceTracking argo.ResourceTracking, gitCredsStore git.CredsStore) *Service {",
          "",
          "[Added Lines]",
          "98: func NewService(metricsServer *metrics.MetricsServer, cache *reposervercache.Cache, initConstants RepoServerInitConstants, resourceTracking argo.ResourceTracking, gitCredsStore git.CredsStore, rootDir string) *Service {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "100:   repoLock:                  repoLock,",
          "101:   cache:                     cache,",
          "102:   metricsServer:             metricsServer,",
          "104:   resourceTracking:          resourceTracking,",
          "105:   newHelmClient: func(repoURL string, creds helm.Creds, enableOci bool, proxy string, opts ...helm.ClientOpts) helm.Client {",
          "106:    return helm.NewClientWithLock(repoURL, creds, sync.NewKeyLock(), enableOci, proxy, opts...)",
          "107:   },",
          "111:  }",
          "112: }",
          "",
          "[Removed Lines]",
          "103:   newGitClient:              git.NewClient,",
          "108:   initConstants: initConstants,",
          "109:   now:           time.Now,",
          "110:   gitCredsStore: gitCredsStore,",
          "",
          "[Added Lines]",
          "109:   newGitClient:              git.NewClientExt,",
          "114:   initConstants:      initConstants,",
          "115:   now:                time.Now,",
          "116:   gitCredsStore:      gitCredsStore,",
          "117:   gitRepoPaths:       io.NewTempPaths(rootDir),",
          "118:   chartPaths:         io.NewTempPaths(rootDir),",
          "119:   gitRepoInitializer: directoryPermissionInitializer,",
          "120:   rootDir:            rootDir,",
          "121:  }",
          "122: }",
          "124: func (s *Service) Init() error {",
          "125:  _, err := os.Stat(s.rootDir)",
          "126:  if os.IsNotExist(err) {",
          "127:   return os.MkdirAll(s.rootDir, 0300)",
          "128:  }",
          "129:  if err == nil {",
          "131:   err = os.Chmod(s.rootDir, 0700)",
          "132:  }",
          "133:  var files []fs.FileInfo",
          "134:  if err == nil {",
          "135:   files, err = ioutil.ReadDir(s.rootDir)",
          "136:  }",
          "137:  if err != nil {",
          "138:   log.Warnf(\"Failed to restore cloned repositories paths: %v\", err)",
          "139:   return nil",
          "140:  }",
          "142:  for _, file := range files {",
          "143:   if !file.IsDir() {",
          "144:    continue",
          "145:   }",
          "146:   fullPath := filepath.Join(s.rootDir, file.Name())",
          "147:   closer := s.gitRepoInitializer(fullPath)",
          "148:   if repo, err := gogit.PlainOpen(fullPath); err == nil {",
          "149:    if remotes, err := repo.Remotes(); err == nil && len(remotes) > 0 && len(remotes[0].Config().URLs) > 0 {",
          "150:     s.gitRepoPaths.Add(git.NormalizeGitURL(remotes[0].Config().URLs[0]), fullPath)",
          "151:    }",
          "152:   }",
          "153:   io.Close(closer)",
          "156:  return os.Chmod(s.rootDir, 0300)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "148:  s.metricsServer.IncPendingRepoRequest(q.Repo.Repo)",
          "149:  defer s.metricsServer.DecPendingRepoRequest(q.Repo.Repo)",
          "153:  })",
          "155:  if err != nil {",
          "",
          "[Removed Lines]",
          "151:  closer, err := s.repoLock.Lock(gitClient.Root(), commitSHA, true, func() error {",
          "152:   return checkoutRevision(gitClient, commitSHA, s.initConstants.SubmoduleEnabled)",
          "",
          "[Added Lines]",
          "196:  closer, err := s.repoLock.Lock(gitClient.Root(), commitSHA, true, func() (goio.Closer, error) {",
          "197:   return s.checkoutRevision(gitClient, commitSHA, s.initConstants.SubmoduleEnabled)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "207:  operation func(repoRoot, commitSHA, cacheKey string, ctxSrc operationContextSrc) error,",
          "208:  settings operationSettings) error {",
          "210:  var gitClient git.Client",
          "211:  var helmClient helm.Client",
          "212:  var err error",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255:  if sanitizer, ok := grpc.SanitizerFromContext(ctx); ok {",
          "257:   sanitizer.AddRegexReplacement(regexp.MustCompile(`(`+s.rootDir+`/.*?)/`), \".\")",
          "258:  }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "260:    return &operationContext{chartPath, \"\"}, nil",
          "261:   })",
          "262:  } else {",
          "265:   })",
          "267:   if err != nil {",
          "",
          "[Removed Lines]",
          "263:   closer, err := s.repoLock.Lock(gitClient.Root(), revision, settings.allowConcurrent, func() error {",
          "264:    return checkoutRevision(gitClient, revision, s.initConstants.SubmoduleEnabled)",
          "",
          "[Added Lines]",
          "313:   closer, err := s.repoLock.Lock(gitClient.Root(), revision, settings.allowConcurrent, func() (goio.Closer, error) {",
          "314:    return s.checkoutRevision(gitClient, revision, s.initConstants.SubmoduleEnabled)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1626:  s.metricsServer.IncPendingRepoRequest(q.Repo.Repo)",
          "1627:  defer s.metricsServer.DecPendingRepoRequest(q.Repo.Repo)",
          "1631:  })",
          "1633:  if err != nil {",
          "",
          "[Removed Lines]",
          "1629:  closer, err := s.repoLock.Lock(gitClient.Root(), q.Revision, true, func() error {",
          "1630:   return checkoutRevision(gitClient, q.Revision, s.initConstants.SubmoduleEnabled)",
          "",
          "[Added Lines]",
          "1679:  closer, err := s.repoLock.Lock(gitClient.Root(), q.Revision, true, func() (goio.Closer, error) {",
          "1680:   return s.checkoutRevision(gitClient, q.Revision, s.initConstants.SubmoduleEnabled)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1675: }",
          "1677: func (s *Service) newClient(repo *v1alpha1.Repository, opts ...git.ClientOpts) (git.Client, error) {",
          "1678:  opts = append(opts, git.WithEventHandlers(metrics.NewGitClientEventHandlers(s.metricsServer)))",
          "1680: }",
          "",
          "[Removed Lines]",
          "1679:  return s.newGitClient(repo.Repo, repo.GetGitCreds(s.gitCredsStore), repo.IsInsecure(), repo.EnableLFS, repo.Proxy, opts...)",
          "",
          "[Added Lines]",
          "1728:  repoPath, err := s.gitRepoPaths.GetPath(git.NormalizeGitURL(repo.Repo))",
          "1729:  if err != nil {",
          "1730:   return nil, err",
          "1731:  }",
          "1733:  return s.newGitClient(repo.Repo, repoPath, repo.GetGitCreds(s.gitCredsStore), repo.IsInsecure(), repo.EnableLFS, repo.Proxy, opts...)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1696: func (s *Service) newHelmClientResolveRevision(repo *v1alpha1.Repository, revision string, chart string, noRevisionCache bool) (helm.Client, string, error) {",
          "1697:  enableOCI := repo.EnableOCI || helm.IsHelmOciRepo(repo.Repo)",
          "1700:  if helm.IsVersion(revision) || enableOCI {",
          "1701:   return helmClient, revision, nil",
          "",
          "[Removed Lines]",
          "1698:  helmClient := s.newHelmClient(repo.Repo, repo.GetHelmCreds(), enableOCI, repo.Proxy, helm.WithIndexCache(s.cache))",
          "",
          "[Added Lines]",
          "1752:  helmClient := s.newHelmClient(repo.Repo, repo.GetHelmCreds(), enableOCI, repo.Proxy, helm.WithIndexCache(s.cache), helm.WithChartPaths(s.chartPaths))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1719:  return helmClient, version.String(), nil",
          "1720: }",
          "1726:  err := gitClient.Init()",
          "1727:  if err != nil {",
          "1729:  }",
          "1731:  err = gitClient.Fetch(revision)",
          "",
          "[Removed Lines]",
          "1725: func checkoutRevision(gitClient git.Client, revision string, submoduleEnabled bool) error {",
          "1728:   return status.Errorf(codes.Internal, \"Failed to initialize git repo: %v\", err)",
          "",
          "[Added Lines]",
          "1778: func directoryPermissionInitializer(rootPath string) goio.Closer {",
          "1779:  if _, err := os.Stat(rootPath); err == nil {",
          "1780:   if err := os.Chmod(rootPath, 0700); err != nil {",
          "1781:    log.Warnf(\"Failed to restore read/write/execute permissions on %s: %v\", rootPath, err)",
          "1782:   } else {",
          "1783:    log.Debugf(\"Successfully restored read/write/execute permissions on %s\", rootPath)",
          "1784:   }",
          "1785:  }",
          "1787:  return io.NewCloser(func() error {",
          "1788:   if err := os.Chmod(rootPath, 0000); err != nil {",
          "1789:    log.Warnf(\"Failed to remove permissions on %s: %v\", rootPath, err)",
          "1790:   } else {",
          "1791:    log.Debugf(\"Successfully removed permissions on %s\", rootPath)",
          "1792:   }",
          "1793:   return nil",
          "1794:  })",
          "1795: }",
          "1800: func (s *Service) checkoutRevision(gitClient git.Client, revision string, submoduleEnabled bool) (goio.Closer, error) {",
          "1801:  closer := s.gitRepoInitializer(gitClient.Root())",
          "1804:   return closer, status.Errorf(codes.Internal, \"Failed to initialize git repo: %v\", err)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1735:   log.Infof(\"Fallback to fetch default\")",
          "1736:   err = gitClient.Fetch(\"\")",
          "1737:   if err != nil {",
          "1739:   }",
          "1740:   err = gitClient.Checkout(revision, submoduleEnabled)",
          "1741:   if err != nil {",
          "1743:   }",
          "1745:  }",
          "1747:  err = gitClient.Checkout(\"FETCH_HEAD\", submoduleEnabled)",
          "1748:  if err != nil {",
          "1750:  }",
          "1753: }",
          "1755: func (s *Service) GetHelmCharts(ctx context.Context, q *apiclient.HelmChartsRequest) (*apiclient.HelmChartsResponse, error) {",
          "1757:  if err != nil {",
          "1758:   return nil, err",
          "1759:  }",
          "",
          "[Removed Lines]",
          "1738:    return status.Errorf(codes.Internal, \"Failed to fetch default: %v\", err)",
          "1742:    return status.Errorf(codes.Internal, \"Failed to checkout revision %s: %v\", revision, err)",
          "1744:   return err",
          "1749:   return status.Errorf(codes.Internal, \"Failed to checkout FETCH_HEAD: %v\", err)",
          "1752:  return err",
          "1756:  index, err := s.newHelmClient(q.Repo.Repo, q.Repo.GetHelmCreds(), q.Repo.EnableOCI, q.Repo.Proxy).GetIndex(true)",
          "",
          "[Added Lines]",
          "1814:    return closer, status.Errorf(codes.Internal, \"Failed to fetch default: %v\", err)",
          "1818:    return closer, status.Errorf(codes.Internal, \"Failed to checkout revision %s: %v\", revision, err)",
          "1820:   return closer, err",
          "1825:   return closer, status.Errorf(codes.Internal, \"Failed to checkout FETCH_HEAD: %v\", err)",
          "1828:  return closer, err",
          "1832:  index, err := s.newHelmClient(q.Repo.Repo, q.Repo.GetHelmCreds(), q.Repo.EnableOCI, q.Repo.Proxy, helm.WithChartPaths(s.chartPaths)).GetIndex(true)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1814:   if helm.IsVersion(ambiguousRevision) {",
          "1815:    return &apiclient.ResolveRevisionResponse{Revision: ambiguousRevision, AmbiguousRevision: ambiguousRevision}, nil",
          "1816:   }",
          "1818:   index, err := client.GetIndex(false)",
          "1819:   if err != nil {",
          "1820:    return &apiclient.ResolveRevisionResponse{Revision: \"\", AmbiguousRevision: \"\"}, err",
          "",
          "[Removed Lines]",
          "1817:   client := helm.NewClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI || app.Spec.Source.IsHelmOci(), repo.Proxy)",
          "",
          "[Added Lines]",
          "1893:   client := helm.NewClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI || app.Spec.Source.IsHelmOci(), repo.Proxy, helm.WithChartPaths(s.chartPaths))",
          "",
          "---------------"
        ],
        "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go": [
          "File: reposerver/repository/repository_test.go -> reposerver/repository/repository_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "5:  \"encoding/json\"",
          "6:  \"errors\"",
          "7:  \"fmt\"",
          "8:  \"io/ioutil\"",
          "9:  \"os\"",
          "10:  \"os/exec\"",
          "11:  \"path/filepath\"",
          "12:  \"regexp\"",
          "13:  \"strings\"",
          "14:  \"testing\"",
          "15:  \"time\"",
          "19:  \"github.com/ghodss/yaml\"",
          "20:  \"github.com/stretchr/testify/assert\"",
          "21:  \"github.com/stretchr/testify/mock\"",
          "",
          "[Removed Lines]",
          "17:  \"github.com/argoproj/argo-cd/v2/util/argo\"",
          "",
          "[Added Lines]",
          "8:  goio \"io\"",
          "12:  \"path\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:  \"github.com/argoproj/argo-cd/v2/reposerver/cache\"",
          "30:  \"github.com/argoproj/argo-cd/v2/reposerver/metrics\"",
          "31:  fileutil \"github.com/argoproj/argo-cd/v2/test/fixture/path\"",
          "32:  cacheutil \"github.com/argoproj/argo-cd/v2/util/cache\"",
          "33:  \"github.com/argoproj/argo-cd/v2/util/git\"",
          "34:  gitmocks \"github.com/argoproj/argo-cd/v2/util/git/mocks\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:  \"github.com/argoproj/argo-cd/v2/util/argo\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:   cacheutil.NewCache(cacheutil.NewInMemoryCache(1*time.Minute)),",
          "73:   1*time.Minute,",
          "74:   1*time.Minute,",
          "77:  chart := \"my-chart\"",
          "78:  version := \"1.1.0\"",
          "",
          "[Removed Lines]",
          "75:  ), RepoServerInitConstants{ParallelismLimit: 1}, argo.NewResourceTracking(), &git.NoopCredsStore{})",
          "",
          "[Added Lines]",
          "76:  ), RepoServerInitConstants{ParallelismLimit: 1}, argo.NewResourceTracking(), &git.NoopCredsStore{}, os.TempDir())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:  helmClient.On(\"ExtractChart\", chart, version).Return(\"./testdata/my-chart\", io.NopCloser, nil)",
          "83:  helmClient.On(\"CleanChartCache\", chart, version).Return(nil)",
          "86:   return gitClient, nil",
          "87:  }",
          "88:  service.newHelmClient = func(repoURL string, creds helm.Creds, enableOci bool, proxy string, opts ...helm.ClientOpts) helm.Client {",
          "89:   return helmClient",
          "90:  }",
          "91:  return service, gitClient",
          "92: }",
          "",
          "[Removed Lines]",
          "85:  service.newGitClient = func(rawRepoURL string, creds git.Creds, insecure bool, enableLfs bool, prosy string, opts ...git.ClientOpts) (client git.Client, e error) {",
          "",
          "[Added Lines]",
          "86:  service.newGitClient = func(rawRepoURL string, root string, creds git.Creds, insecure bool, enableLfs bool, prosy string, opts ...git.ClientOpts) (client git.Client, e error) {",
          "92:  service.gitRepoInitializer = func(rootPath string) goio.Closer {",
          "93:   return io.NopCloser",
          "94:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "118:   gitClient.On(\"Root\").Return(root)",
          "119:  })",
          "122:   return gitClient, nil",
          "123:  }",
          "",
          "[Removed Lines]",
          "121:  service.newGitClient = func(rawRepoURL string, creds git.Creds, insecure bool, enableLfs bool, proxy string, opts ...git.ClientOpts) (client git.Client, e error) {",
          "",
          "[Added Lines]",
          "125:  service.newGitClient = func(rawRepoURL string, root string, creds git.Creds, insecure bool, enableLfs bool, proxy string, opts ...git.ClientOpts) (client git.Client, e error) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1904:   assert.Equal(t, \"\", p)",
          "1905:  })",
          "1906: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1912: func TestDirectoryPermissionInitializer(t *testing.T) {",
          "1913:  dir, err := ioutil.TempDir(\"\", \"\")",
          "1914:  require.NoError(t, err)",
          "1915:  defer func() {",
          "1916:   _ = os.RemoveAll(dir)",
          "1917:  }()",
          "1919:  file, err := ioutil.TempFile(dir, \"\")",
          "1920:  require.NoError(t, err)",
          "1921:  io.Close(file)",
          "1924:  assert.NoError(t, os.Chmod(dir, 0000))",
          "1925:  closer := directoryPermissionInitializer(dir)",
          "1928:  _, err = ioutil.ReadFile(file.Name())",
          "1929:  require.NoError(t, err)",
          "1932:  io.Close(closer)",
          "1933:  _, err = ioutil.ReadFile(file.Name())",
          "1934:  require.Error(t, err)",
          "1935: }",
          "1937: func initGitRepo(repoPath string, remote string) error {",
          "1938:  if err := os.Mkdir(repoPath, 0755); err != nil {",
          "1939:   return err",
          "1940:  }",
          "1942:  cmd := exec.Command(\"git\", \"init\", repoPath)",
          "1943:  cmd.Dir = repoPath",
          "1944:  if err := cmd.Run(); err != nil {",
          "1945:   return err",
          "1946:  }",
          "1947:  cmd = exec.Command(\"git\", \"remote\", \"add\", \"origin\", remote)",
          "1948:  cmd.Dir = repoPath",
          "1949:  return cmd.Run()",
          "1950: }",
          "1952: func TestInit(t *testing.T) {",
          "1953:  dir, err := ioutil.TempDir(\"\", \"\")",
          "1954:  require.NoError(t, err)",
          "1955:  defer func() {",
          "1956:   _ = os.RemoveAll(dir)",
          "1957:  }()",
          "1959:  repoPath := path.Join(dir, \"repo1\")",
          "1960:  require.NoError(t, initGitRepo(repoPath, \"https://github.com/argo-cd/test-repo1\"))",
          "1962:  service := newService(\".\")",
          "1963:  service.rootDir = dir",
          "1965:  require.NoError(t, service.Init())",
          "1967:  repo1Path, err := service.gitRepoPaths.GetPath(git.NormalizeGitURL(\"https://github.com/argo-cd/test-repo1\"))",
          "1968:  assert.NoError(t, err)",
          "1969:  assert.Equal(t, repoPath, repo1Path)",
          "1971:  _, err = ioutil.ReadDir(dir)",
          "1972:  require.Error(t, err)",
          "1973:  require.NoError(t, initGitRepo(path.Join(dir, \"repo2\"), \"https://github.com/argo-cd/test-repo2\"))",
          "1974: }",
          "",
          "---------------"
        ],
        "reposerver/server.go||reposerver/server.go": [
          "File: reposerver/server.go -> reposerver/server.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"crypto/tls\"",
          "5:  \"fmt\"",
          "6:  \"os\"",
          "8:  grpc_middleware \"github.com/grpc-ecosystem/go-grpc-middleware\"",
          "9:  grpc_logrus \"github.com/grpc-ecosystem/go-grpc-middleware/logging/logrus\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"path/filepath\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: type ArgoCDRepoServer struct {",
          "34:  log           *log.Entry",
          "35:  metricsServer *metrics.MetricsServer",
          "36:  gitCredsStore git.CredsStore",
          "37:  cache         *reposervercache.Cache",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36:  repoService   *repository.Service",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:  serverLog := log.NewEntry(log.StandardLogger())",
          "67:  streamInterceptors := []grpc.StreamServerInterceptor{grpc_logrus.StreamServerInterceptor(serverLog), grpc_prometheus.StreamServerInterceptor, grpc_util.PanicLoggerStreamServerInterceptor(serverLog)}",
          "70:  serverOpts := []grpc.ServerOption{",
          "71:   grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(unaryInterceptors...)),",
          "",
          "[Removed Lines]",
          "68:  unaryInterceptors := []grpc.UnaryServerInterceptor{grpc_logrus.UnaryServerInterceptor(serverLog), grpc_prometheus.UnaryServerInterceptor, grpc_util.PanicLoggerUnaryServerInterceptor(serverLog)}",
          "",
          "[Added Lines]",
          "70:  unaryInterceptors := []grpc.UnaryServerInterceptor{",
          "71:   grpc_logrus.UnaryServerInterceptor(serverLog),",
          "72:   grpc_prometheus.UnaryServerInterceptor,",
          "73:   grpc_util.PanicLoggerUnaryServerInterceptor(serverLog),",
          "74:   grpc_util.ErrorSanitizerUnaryServerInterceptor(),",
          "75:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:  if tlsConfig != nil {",
          "80:   serverOpts = append(serverOpts, grpc.Creds(credentials.NewTLS(tlsConfig)))",
          "81:  }",
          "83:  return &ArgoCDRepoServer{",
          "84:   log:           serverLog,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:  repoService := repository.NewService(metricsServer, cache, initConstants, argo.NewResourceTracking(), gitCredsStore, filepath.Join(os.TempDir(), \"_argocd-repo\"))",
          "90:  if err := repoService.Init(); err != nil {",
          "91:   return nil, err",
          "92:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "87:   initConstants: initConstants,",
          "88:   opts:          serverOpts,",
          "89:   gitCredsStore: gitCredsStore,",
          "90:  }, nil",
          "91: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101:   repoService:   repoService,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "96:  versionpkg.RegisterVersionServiceServer(server, version.NewServer(nil, func() (bool, error) {",
          "97:   return true, nil",
          "98:  }))",
          "102:  healthService := health.NewServer()",
          "103:  grpc_health_v1.RegisterHealthServer(server, healthService)",
          "",
          "[Removed Lines]",
          "99:  manifestService := repository.NewService(a.metricsServer, a.cache, a.initConstants, argo.NewResourceTracking(), a.gitCredsStore)",
          "100:  apiclient.RegisterRepoServerServiceServer(server, manifestService)",
          "",
          "[Added Lines]",
          "111:  apiclient.RegisterRepoServerServiceServer(server, a.repoService)",
          "",
          "---------------"
        ],
        "util/grpc/sanitizer.go||util/grpc/sanitizer.go": [
          "File: util/grpc/sanitizer.go -> util/grpc/sanitizer.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package grpc",
          "3: import (",
          "4:  \"errors\"",
          "5:  \"regexp\"",
          "6:  \"strings\"",
          "8:  \"golang.org/x/net/context\"",
          "9:  \"google.golang.org/grpc\"",
          "10:  \"google.golang.org/grpc/status\"",
          "11: )",
          "13: const (",
          "14:  contextKey = \"sanitizer\"",
          "15: )",
          "19: func ErrorSanitizerUnaryServerInterceptor() grpc.UnaryServerInterceptor {",
          "20:  return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {",
          "21:   sanitizer := NewSanitizer()",
          "22:   resp, err = handler(ContextWithSanitizer(ctx, sanitizer), req)",
          "23:   if err == nil {",
          "24:    return resp, nil",
          "25:   }",
          "27:   if se, ok := err.(interface{ GRPCStatus() *status.Status }); ok {",
          "28:    return resp, status.Error(se.GRPCStatus().Code(), sanitizer.Replace(se.GRPCStatus().Message()))",
          "29:   }",
          "31:   return resp, errors.New(sanitizer.Replace(err.Error()))",
          "32:  }",
          "33: }",
          "36: func ContextWithSanitizer(ctx context.Context, sanitizer Sanitizer) context.Context {",
          "37:  return context.WithValue(ctx, contextKey, sanitizer)",
          "38: }",
          "41: func SanitizerFromContext(ctx context.Context) (Sanitizer, bool) {",
          "42:  res, ok := ctx.Value(contextKey).(Sanitizer)",
          "43:  return res, ok",
          "44: }",
          "47: type Sanitizer interface {",
          "48:  Replace(s string) string",
          "49:  AddReplacement(val string, replacement string)",
          "50:  AddRegexReplacement(regex *regexp.Regexp, replacement string)",
          "51: }",
          "53: type sanitizer struct {",
          "54:  replacers []func(in string) string",
          "55: }",
          "58: func NewSanitizer() *sanitizer {",
          "59:  return &sanitizer{}",
          "60: }",
          "63: func (s *sanitizer) AddReplacement(val string, replacement string) {",
          "64:  s.replacers = append(s.replacers, func(in string) string {",
          "65:   return strings.Replace(in, val, replacement, -1)",
          "66:  })",
          "67: }",
          "70: func (s *sanitizer) AddRegexReplacement(regex *regexp.Regexp, replacement string) {",
          "71:  s.replacers = append(s.replacers, func(in string) string {",
          "72:   return regex.ReplaceAllString(in, replacement)",
          "73:  })",
          "74: }",
          "77: func (s *sanitizer) Replace(val string) string {",
          "78:  for _, replacer := range s.replacers {",
          "79:   val = replacer(val)",
          "80:  }",
          "81:  return val",
          "82: }",
          "",
          "---------------"
        ],
        "util/grpc/sanitizer_test.go||util/grpc/sanitizer_test.go": [
          "File: util/grpc/sanitizer_test.go -> util/grpc/sanitizer_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package grpc",
          "3: import (",
          "4:  \"context\"",
          "5:  \"regexp\"",
          "6:  \"testing\"",
          "8:  \"github.com/stretchr/testify/assert\"",
          "9:  \"github.com/stretchr/testify/require\"",
          "10:  \"google.golang.org/grpc/codes\"",
          "11:  \"google.golang.org/grpc/status\"",
          "12: )",
          "14: func TestSanitizer(t *testing.T) {",
          "15:  s := NewSanitizer()",
          "17:  ctx := ContextWithSanitizer(context.TODO(), s)",
          "19:  sanitizer, ok := SanitizerFromContext(ctx)",
          "20:  require.True(t, ok)",
          "21:  sanitizer.AddReplacement(\"/my-random/path\", \".\")",
          "23:  res := s.Replace(\"error at /my-random/path/sub-dir: something went wrong\")",
          "24:  assert.Equal(t, \"error at ./sub-dir: something went wrong\", res)",
          "25: }",
          "27: func TestSanitizer_RegexReplacement(t *testing.T) {",
          "28:  s := NewSanitizer()",
          "30:  ctx := ContextWithSanitizer(context.TODO(), s)",
          "32:  sanitizer, ok := SanitizerFromContext(ctx)",
          "33:  require.True(t, ok)",
          "35:  sanitizer.AddRegexReplacement(regexp.MustCompile(\"(/my-random/path)\"), \".\")",
          "36:  res := s.Replace(\"error at /my-random/path/something: something went wrong\")",
          "37:  assert.Equal(t, \"error at ./something: something went wrong\", res)",
          "38: }",
          "40: func TestErrorSanitizerUnaryServerInterceptor(t *testing.T) {",
          "41:  interceptor := ErrorSanitizerUnaryServerInterceptor()",
          "43:  _, err := interceptor(context.Background(), nil, nil, func(ctx context.Context, req interface{}) (interface{}, error) {",
          "44:   sanitizer, ok := SanitizerFromContext(ctx)",
          "45:   require.True(t, ok)",
          "46:   sanitizer.AddReplacement(\"/my-random/path\", \".\")",
          "47:   return nil, status.Error(codes.Internal, \"error at /my-random/path/sub-dir: something went wrong\")",
          "48:  })",
          "50:  assert.Equal(t, \"rpc error: code = Internal desc = error at ./sub-dir: something went wrong\", err.Error())",
          "51: }",
          "",
          "---------------"
        ],
        "util/helm/client.go||util/helm/client.go": [
          "File: util/helm/client.go -> util/helm/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"bytes\"",
          "5:  \"crypto/tls\"",
          "6:  \"crypto/x509\"",
          "7:  \"errors\"",
          "8:  \"fmt\"",
          "9:  \"io/ioutil\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"encoding/json\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:  \"time\"",
          "19:  \"github.com/argoproj/pkg/sync\"",
          "20:  log \"github.com/sirupsen/logrus\"",
          "21:  \"gopkg.in/yaml.v2\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  \"github.com/google/uuid\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:  }",
          "61: }",
          "63: func NewClient(repoURL string, creds Creds, enableOci bool, proxy string, opts ...ClientOpts) Client {",
          "64:  return NewClientWithLock(repoURL, creds, globalLock, enableOci, proxy, opts...)",
          "65: }",
          "67: func NewClientWithLock(repoURL string, creds Creds, repoLock sync.KeyLock, enableOci bool, proxy string, opts ...ClientOpts) Client {",
          "68:  c := &nativeHelmChart{",
          "75:  }",
          "76:  for i := range opts {",
          "77:   opts[i](c)",
          "",
          "[Removed Lines]",
          "69:   repoURL:   repoURL,",
          "70:   creds:     creds,",
          "71:   repoPath:  filepath.Join(os.TempDir(), strings.Replace(repoURL, \"/\", \"_\", -1)),",
          "72:   repoLock:  repoLock,",
          "73:   enableOci: enableOci,",
          "74:   proxy:     proxy,",
          "",
          "[Added Lines]",
          "65: func WithChartPaths(chartPaths *io.TempPaths) ClientOpts {",
          "66:  return func(c *nativeHelmChart) {",
          "67:   c.chartCachePaths = chartPaths",
          "68:  }",
          "69: }",
          "77:   repoURL:         repoURL,",
          "78:   creds:           creds,",
          "79:   repoLock:        repoLock,",
          "80:   enableOci:       enableOci,",
          "81:   proxy:           proxy,",
          "82:   chartCachePaths: io.NewTempPaths(os.TempDir()),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82: var _ Client = &nativeHelmChart{}",
          "84: type nativeHelmChart struct {",
          "92: }",
          "94: func fileExist(filePath string) (bool, error) {",
          "",
          "[Removed Lines]",
          "85:  repoPath   string",
          "86:  repoURL    string",
          "87:  creds      Creds",
          "88:  repoLock   sync.KeyLock",
          "89:  enableOci  bool",
          "90:  indexCache indexCache",
          "91:  proxy      string",
          "",
          "[Added Lines]",
          "93:  chartCachePaths *io.TempPaths",
          "94:  repoURL         string",
          "95:  creds           Creds",
          "96:  repoLock        sync.KeyLock",
          "97:  enableOci       bool",
          "98:  indexCache      indexCache",
          "99:  proxy           string",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "102:  return true, nil",
          "103: }",
          "111:   return err",
          "112:  }",
          "118: }",
          "122:  if err != nil {",
          "124:  }",
          "129:  if err != nil {",
          "130:   return \"\", nil, err",
          "",
          "[Removed Lines]",
          "105: func (c *nativeHelmChart) ensureHelmChartRepoPath() error {",
          "106:  c.repoLock.Lock(c.repoPath)",
          "107:  defer c.repoLock.Unlock(c.repoPath)",
          "109:  err := os.Mkdir(c.repoPath, 0700)",
          "110:  if err != nil && !os.IsExist(err) {",
          "113:  return nil",
          "114: }",
          "116: func (c *nativeHelmChart) CleanChartCache(chart string, version string) error {",
          "117:  return os.RemoveAll(c.getCachedChartPath(chart, version))",
          "120: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
          "121:  err := c.ensureHelmChartRepoPath()",
          "123:   return \"\", nil, err",
          "127:  helmCmd, err := NewCmdWithVersion(c.repoPath, HelmV3, c.enableOci, c.proxy)",
          "",
          "[Added Lines]",
          "113: func (c *nativeHelmChart) CleanChartCache(chart string, version string) error {",
          "114:  cachePath, err := c.getCachedChartPath(chart, version)",
          "115:  if err != nil {",
          "118:  return os.RemoveAll(cachePath)",
          "121: func createTempDir() (string, error) {",
          "122:  newUUID, err := uuid.NewRandom()",
          "124:   return \"\", err",
          "125:  }",
          "126:  tempDir := path.Join(os.TempDir(), newUUID.String())",
          "127:  if err := os.Mkdir(tempDir, 0755); err != nil {",
          "128:   return \"\", err",
          "130:  return tempDir, nil",
          "131: }",
          "133: func (c *nativeHelmChart) ExtractChart(chart string, version string, passCredentials bool) (string, io.Closer, error) {",
          "135:  helmCmd, err := NewCmdWithVersion(\"\", HelmV3, c.enableOci, c.proxy)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "137:  }",
          "141:  if err != nil {",
          "142:   return \"\", nil, err",
          "143:  }",
          "147:  c.repoLock.Lock(cachedChartPath)",
          "148:  defer c.repoLock.Unlock(cachedChartPath)",
          "",
          "[Removed Lines]",
          "140:  tempDir, err := ioutil.TempDir(\"\", \"helm\")",
          "145:  cachedChartPath := c.getCachedChartPath(chart, version)",
          "",
          "[Added Lines]",
          "148:  tempDir, err := createTempDir()",
          "153:  cachedChartPath, err := c.getCachedChartPath(chart, version)",
          "154:  if err != nil {",
          "155:   return \"\", nil, err",
          "156:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "156:  if !exists {",
          "159:   if err != nil {",
          "160:    return \"\", nil, err",
          "161:   }",
          "",
          "[Removed Lines]",
          "158:   tempDest, err := ioutil.TempDir(\"\", \"helm\")",
          "",
          "[Added Lines]",
          "169:   tempDest, err := createTempDir()",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "355:  return nc",
          "356: }",
          "360: }",
          "",
          "[Removed Lines]",
          "358: func (c *nativeHelmChart) getCachedChartPath(chart string, version string) string {",
          "359:  return path.Join(c.repoPath, fmt.Sprintf(\"%s-%s.tgz\", strings.ReplaceAll(chart, \"/\", \"_\"), version))",
          "",
          "[Added Lines]",
          "369: func (c *nativeHelmChart) getCachedChartPath(chart string, version string) (string, error) {",
          "370:  keyData, err := json.Marshal(map[string]string{\"url\": c.repoURL, \"chart\": chart, \"version\": version})",
          "371:  if err != nil {",
          "372:   return \"\", err",
          "373:  }",
          "374:  return c.chartCachePaths.GetPath(string(keyData))",
          "",
          "---------------"
        ],
        "util/io/paths.go||util/io/paths.go": [
          "File: util/io/paths.go -> util/io/paths.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io",
          "3: import (",
          "4:  \"path/filepath\"",
          "5:  \"sync\"",
          "7:  \"github.com/google/uuid\"",
          "8: )",
          "11: type TempPaths struct {",
          "12:  root  string",
          "13:  paths map[string]string",
          "14:  lock  sync.Mutex",
          "15: }",
          "17: func NewTempPaths(root string) *TempPaths {",
          "18:  return &TempPaths{",
          "19:   root:  root,",
          "20:   paths: map[string]string{},",
          "21:  }",
          "22: }",
          "24: func (p *TempPaths) Add(key string, value string) {",
          "25:  p.lock.Lock()",
          "26:  defer p.lock.Unlock()",
          "27:  p.paths[key] = value",
          "28: }",
          "31: func (p *TempPaths) GetPath(key string) (string, error) {",
          "32:  p.lock.Lock()",
          "33:  defer p.lock.Unlock()",
          "34:  if val, ok := p.paths[key]; ok {",
          "35:   return val, nil",
          "36:  }",
          "37:  uniqueId, err := uuid.NewRandom()",
          "38:  if err != nil {",
          "39:   return \"\", err",
          "40:  }",
          "41:  repoPath := filepath.Join(p.root, uniqueId.String())",
          "42:  p.paths[key] = repoPath",
          "43:  return repoPath, nil",
          "44: }",
          "",
          "---------------"
        ],
        "util/io/paths_test.go||util/io/paths_test.go": [
          "File: util/io/paths_test.go -> util/io/paths_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package io",
          "3: import (",
          "4:  \"os\"",
          "5:  \"testing\"",
          "7:  \"github.com/stretchr/testify/assert\"",
          "8:  \"github.com/stretchr/testify/require\"",
          "9: )",
          "11: func TestGetPath_SameURLs(t *testing.T) {",
          "12:  paths := NewTempPaths(os.TempDir())",
          "13:  res1, err := paths.GetPath(\"https://localhost/test.txt\")",
          "14:  require.NoError(t, err)",
          "15:  res2, err := paths.GetPath(\"https://localhost/test.txt\")",
          "16:  require.NoError(t, err)",
          "17:  assert.Equal(t, res1, res2)",
          "18: }",
          "20: func TestGetPath_DifferentURLs(t *testing.T) {",
          "21:  paths := NewTempPaths(os.TempDir())",
          "22:  res1, err := paths.GetPath(\"https://localhost/test1.txt\")",
          "23:  require.NoError(t, err)",
          "24:  res2, err := paths.GetPath(\"https://localhost/test2.txt\")",
          "25:  require.NoError(t, err)",
          "26:  assert.NotEqual(t, res1, res2)",
          "27: }",
          "29: func TestGetPath_SameURLsDifferentInstances(t *testing.T) {",
          "30:  paths1 := NewTempPaths(os.TempDir())",
          "31:  res1, err := paths1.GetPath(\"https://localhost/test.txt\")",
          "32:  require.NoError(t, err)",
          "33:  paths2 := NewTempPaths(os.TempDir())",
          "34:  res2, err := paths2.GetPath(\"https://localhost/test.txt\")",
          "35:  require.NoError(t, err)",
          "36:  assert.NotEqual(t, res1, res2)",
          "37: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9476ab5e18be34a8cfc81150c94d08eefe3cee25",
      "candidate_info": {
        "commit_hash": "9476ab5e18be34a8cfc81150c94d08eefe3cee25",
        "repo": "argoproj/argo-cd",
        "commit_url": "https://github.com/argoproj/argo-cd/commit/9476ab5e18be34a8cfc81150c94d08eefe3cee25",
        "files": [
          "assets/swagger.json",
          "cmd/argocd/commands/repo.go",
          "cmd/util/repo.go",
          "docs/operator-manual/declarative-setup.md",
          "docs/operator-manual/server-commands/argocd-util_repo_generate-spec.md",
          "docs/user-guide/commands/argocd_repo_add.md",
          "pkg/apiclient/repository/repository.pb.go",
          "pkg/apis/application/v1alpha1/generated.pb.go",
          "pkg/apis/application/v1alpha1/generated.proto",
          "pkg/apis/application/v1alpha1/openapi_generated.go",
          "pkg/apis/application/v1alpha1/repository_types.go",
          "reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go",
          "server/application/application.go",
          "server/repository/repository.go",
          "server/repository/repository.proto",
          "test/e2e/delarative_test.go",
          "util/argo/argo.go",
          "util/db/repository.go",
          "util/git/client.go",
          "util/git/creds.go",
          "util/git/git.go",
          "util/git/git_test.go",
          "util/git/workaround.go",
          "util/helm/client.go",
          "util/helm/client_test.go",
          "util/helm/cmd.go",
          "util/helm/cmd_test.go",
          "util/helm/helm.go",
          "util/helm/helm_test.go",
          "util/proxy/proxy.go",
          "util/proxy/proxy_test.go",
          "util/settings/settings.go"
        ],
        "message": "feat: add first class support to access repositories using proxy (#5581) (#6286)\n\n* feat: add first class support to access repositories using proxy\n\nCurrently, users need to set the proxy URLs as env variables in the repo server. This is not user-friendly and also error-prone. This PR adds support to maintain proxy URLs along with repository configs in the argocd-cm. Argo CD uses this proxy to access your repository. In case the custom proxy is absent, it defaults to reading the proxy from the env variables.\n\nSigned-off-by: Chetan Banavikalmutt <chetanrns1997@gmail.com>\n\n* set both http & https proxy variables\n\nSigned-off-by: Chetan Banavikalmutt <chetanrns1997@gmail.com>",
        "before_after_code_files": [
          "cmd/argocd/commands/repo.go||cmd/argocd/commands/repo.go",
          "cmd/util/repo.go||cmd/util/repo.go",
          "pkg/apiclient/repository/repository.pb.go||pkg/apiclient/repository/repository.pb.go",
          "pkg/apis/application/v1alpha1/generated.pb.go||pkg/apis/application/v1alpha1/generated.pb.go",
          "pkg/apis/application/v1alpha1/generated.proto||pkg/apis/application/v1alpha1/generated.proto",
          "pkg/apis/application/v1alpha1/openapi_generated.go||pkg/apis/application/v1alpha1/openapi_generated.go",
          "pkg/apis/application/v1alpha1/repository_types.go||pkg/apis/application/v1alpha1/repository_types.go",
          "reposerver/repository/repository.go||reposerver/repository/repository.go",
          "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go",
          "server/application/application.go||server/application/application.go",
          "server/repository/repository.go||server/repository/repository.go",
          "server/repository/repository.proto||server/repository/repository.proto",
          "test/e2e/delarative_test.go||test/e2e/delarative_test.go",
          "util/argo/argo.go||util/argo/argo.go",
          "util/db/repository.go||util/db/repository.go",
          "util/git/client.go||util/git/client.go",
          "util/git/creds.go||util/git/creds.go",
          "util/git/git.go||util/git/git.go",
          "util/git/git_test.go||util/git/git_test.go",
          "util/git/workaround.go||util/git/workaround.go",
          "util/helm/client.go||util/helm/client.go",
          "util/helm/client_test.go||util/helm/client_test.go",
          "util/helm/cmd.go||util/helm/cmd.go",
          "util/helm/cmd_test.go||util/helm/cmd_test.go",
          "util/helm/helm.go||util/helm/helm.go",
          "util/helm/helm_test.go||util/helm/helm_test.go",
          "util/proxy/proxy.go||util/proxy/proxy.go",
          "util/proxy/proxy_test.go||util/proxy/proxy_test.go",
          "util/settings/settings.go||util/settings/settings.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go"
          ],
          "candidate": [
            "reposerver/repository/repository.go||reposerver/repository/repository.go",
            "util/helm/client.go||util/helm/client.go",
            "util/helm/client_test.go||util/helm/client_test.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/argocd/commands/repo.go||cmd/argocd/commands/repo.go": [
          "File: cmd/argocd/commands/repo.go -> cmd/argocd/commands/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:    repoOpts.Repo.GithubAppId = repoOpts.GithubAppId",
          "145:    repoOpts.Repo.GithubAppInstallationId = repoOpts.GithubAppInstallationId",
          "146:    repoOpts.Repo.GitHubAppEnterpriseBaseURL = repoOpts.GitHubAppEnterpriseBaseURL",
          "148:    if repoOpts.Repo.Type == \"helm\" && repoOpts.Repo.Name == \"\" {",
          "149:     errors.CheckError(fmt.Errorf(\"Must specify --name for repos of type 'helm'\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:    repoOpts.Repo.Proxy = repoOpts.Proxy",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:     GithubAppID:                repoOpts.Repo.GithubAppId,",
          "181:     GithubAppInstallationID:    repoOpts.Repo.GithubAppInstallationId,",
          "182:     GithubAppEnterpriseBaseUrl: repoOpts.Repo.GitHubAppEnterpriseBaseURL,",
          "183:    }",
          "184:    _, err := repoIf.ValidateAccess(context.Background(), &repoAccessReq)",
          "185:    errors.CheckError(err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:     Proxy:                      repoOpts.Proxy,",
          "",
          "---------------"
        ],
        "cmd/util/repo.go||cmd/util/repo.go": [
          "File: cmd/util/repo.go -> cmd/util/repo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  GithubAppInstallationId        int64",
          "22:  GithubAppPrivateKeyPath        string",
          "23:  GitHubAppEnterpriseBaseURL     string",
          "24: }",
          "26: func AddRepoFlags(command *cobra.Command, opts *RepoOptions) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:  Proxy                          string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:  command.Flags().Int64Var(&opts.GithubAppInstallationId, \"github-app-installation-id\", 0, \"installation id of the GitHub Application\")",
          "40:  command.Flags().StringVar(&opts.GithubAppPrivateKeyPath, \"github-app-private-key-path\", \"\", \"private key of the GitHub Application\")",
          "41:  command.Flags().StringVar(&opts.GitHubAppEnterpriseBaseURL, \"github-app-enterprise-base-url\", \"\", \"base url to use when using GitHub Enterprise (e.g. https://ghe.example.com/api/v3\")",
          "42: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:  command.Flags().StringVar(&opts.Proxy, \"proxy\", \"\", \"use proxy to access repository\")",
          "",
          "---------------"
        ],
        "pkg/apiclient/repository/repository.pb.go||pkg/apiclient/repository/repository.pb.go": [
          "File: pkg/apiclient/repository/repository.pb.go -> pkg/apiclient/repository/repository.pb.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:  GithubAppInstallationID int64 `protobuf:\"varint,14,opt,name=githubAppInstallationID,proto3\" json:\"githubAppInstallationID,omitempty\"`",
          "345: }",
          "347: func (m *RepoAccessQuery) Reset()         { *m = RepoAccessQuery{} }",
          "",
          "[Removed Lines]",
          "341:  GithubAppEnterpriseBaseUrl string   `protobuf:\"bytes,15,opt,name=githubAppEnterpriseBaseUrl,proto3\" json:\"githubAppEnterpriseBaseUrl,omitempty\"`",
          "342:  XXX_NoUnkeyedLiteral       struct{} `json:\"-\"`",
          "343:  XXX_unrecognized           []byte   `json:\"-\"`",
          "344:  XXX_sizecache              int32    `json:\"-\"`",
          "",
          "[Added Lines]",
          "341:  GithubAppEnterpriseBaseUrl string `protobuf:\"bytes,15,opt,name=githubAppEnterpriseBaseUrl,proto3\" json:\"githubAppEnterpriseBaseUrl,omitempty\"`",
          "343:  Proxy                string   `protobuf:\"bytes,16,opt,name=proxy,proto3\" json:\"proxy,omitempty\"`",
          "344:  XXX_NoUnkeyedLiteral struct{} `json:\"-\"`",
          "345:  XXX_unrecognized     []byte   `json:\"-\"`",
          "346:  XXX_sizecache        int32    `json:\"-\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "475:  return \"\"",
          "476: }",
          "478: type RepoResponse struct {",
          "479:  XXX_NoUnkeyedLiteral struct{} `json:\"-\"`",
          "480:  XXX_unrecognized     []byte   `json:\"-\"`",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480: func (m *RepoAccessQuery) GetProxy() string {",
          "481:  if m != nil {",
          "482:   return m.Proxy",
          "483:  }",
          "484:  return \"\"",
          "485: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "645: }",
          "647: var fileDescriptor_8d38260443475705 = []byte{",
          "717: }",
          "",
          "[Removed Lines]",
          "649:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x5d, 0x6f, 0xdc, 0x44,",
          "650:  0x17, 0x96, 0x93, 0x74, 0x93, 0x4c, 0x3e, 0xba, 0x9d, 0xf4, 0xed, 0x6b, 0xb6, 0x69, 0x1a, 0x4d,",
          "651:  0x4b, 0x15, 0xa2, 0x62, 0x37, 0x8b, 0x10, 0x55, 0x11, 0xa0, 0x34, 0x89, 0xda, 0x88, 0x88, 0x80,",
          "652:  0xab, 0x70, 0x81, 0x40, 0x68, 0xe2, 0x3d, 0xd9, 0x35, 0xf1, 0x7a, 0xa6, 0x33, 0xb3, 0x46, 0x51,",
          "653:  0xd5, 0x1b, 0xae, 0x90, 0x80, 0x0b, 0x84, 0x90, 0x7a, 0xc7, 0x0d, 0x12, 0x17, 0xfc, 0x11, 0x2e,",
          "654:  0x91, 0xf8, 0x03, 0x28, 0xe2, 0x77, 0x20, 0x34, 0x33, 0x5e, 0xdb, 0x9b, 0xfd, 0x48, 0x2a, 0x42,",
          "655:  0xee, 0x66, 0x9e, 0x73, 0xe6, 0x9c, 0xe7, 0x3c, 0x3e, 0x73, 0x6c, 0x23, 0x22, 0x41, 0xa4, 0x20,",
          "656:  0x7c, 0x01, 0x9c, 0xc9, 0x48, 0x31, 0x71, 0x54, 0x5a, 0x7a, 0x5c, 0x30, 0xc5, 0x30, 0x2a, 0x90,",
          "657:  0xda, 0xd5, 0x26, 0x6b, 0x32, 0x03, 0xfb, 0x7a, 0x65, 0x3d, 0x6a, 0x8b, 0x4d, 0xc6, 0x9a, 0x31,",
          "658:  0xf8, 0x94, 0x47, 0x3e, 0x4d, 0x12, 0xa6, 0xa8, 0x8a, 0x58, 0x22, 0x33, 0x2b, 0x39, 0xbc, 0x2f,",
          "659:  0xbd, 0x88, 0x19, 0x6b, 0xc8, 0x04, 0xf8, 0xe9, 0x9a, 0xdf, 0x84, 0x04, 0x04, 0x55, 0xd0, 0xc8,",
          "660:  0x7c, 0x76, 0x9a, 0x91, 0x6a, 0x75, 0xf6, 0xbd, 0x90, 0xb5, 0x7d, 0x2a, 0x4c, 0x8a, 0x2f, 0xcc,",
          "661:  0xe2, 0xf5, 0xb0, 0xe1, 0xa7, 0x75, 0x9f, 0x1f, 0x36, 0xf5, 0x79, 0xe9, 0x53, 0xce, 0xe3, 0x28,",
          "662:  0x34, 0xf1, 0xfd, 0x74, 0x8d, 0xc6, 0xbc, 0x45, 0xfb, 0xa3, 0x6d, 0x9d, 0x12, 0xcd, 0x14, 0x74,",
          "663:  0x6a, 0xe1, 0xe4, 0x3d, 0x34, 0x17, 0x00, 0x67, 0xeb, 0x9c, 0xcb, 0x8f, 0x3a, 0x20, 0x8e, 0x30,",
          "664:  0x46, 0x13, 0xda, 0xc9, 0x75, 0x96, 0x9d, 0x95, 0xe9, 0xc0, 0xac, 0x71, 0x0d, 0x4d, 0x09, 0x48,",
          "665:  0x23, 0x19, 0xb1, 0xc4, 0x1d, 0x33, 0x78, 0xbe, 0x27, 0x6b, 0x68, 0x72, 0x9d, 0xf3, 0xed, 0xe4,",
          "666:  0x80, 0xe9, 0xa3, 0xea, 0x88, 0x43, 0xf7, 0xa8, 0x5e, 0x6b, 0x8c, 0x53, 0xd5, 0xca, 0x8e, 0x99,",
          "667:  0x35, 0x79, 0xe1, 0xa0, 0x85, 0x2c, 0xe9, 0x26, 0x28, 0x1a, 0xc5, 0x59, 0xea, 0x26, 0xaa, 0x48,",
          "668:  0xd6, 0x11, 0xa1, 0x8d, 0x30, 0x53, 0xdf, 0xf5, 0x8a, 0x1a, 0xbd, 0x6e, 0x8d, 0x66, 0xf1, 0x79,",
          "669:  0xd8, 0xf0, 0xd2, 0xba, 0xc7, 0x0f, 0x9b, 0x9e, 0x56, 0xcc, 0x2b, 0x29, 0xe6, 0x75, 0x15, 0xf3,",
          "670:  0xd6, 0x0b, 0xf0, 0x89, 0x09, 0x1b, 0x64, 0xe1, 0xb1, 0x8b, 0x26, 0x29, 0xe7, 0x1f, 0xd0, 0x36,",
          "671:  0x64, 0xbc, 0xba, 0x5b, 0xf2, 0x0e, 0xaa, 0x76, 0xe5, 0x08, 0x40, 0x72, 0x96, 0x48, 0xc0, 0xaf,",
          "672:  0xa1, 0x4b, 0x91, 0x82, 0xb6, 0x74, 0x9d, 0xe5, 0xf1, 0x95, 0x99, 0xfa, 0x82, 0x57, 0x12, 0x31,",
          "673:  0x2b, 0x3d, 0xb0, 0x1e, 0x64, 0x03, 0x4d, 0xeb, 0xe3, 0xc3, 0x95, 0x24, 0x68, 0xf6, 0x80, 0x69,",
          "674:  0x2a, 0x70, 0x20, 0x40, 0x5a, 0x59, 0xa6, 0x82, 0x1e, 0x8c, 0x7c, 0x37, 0x81, 0x2e, 0x1b, 0x12,",
          "675:  0x61, 0x08, 0x72, 0xf4, 0x53, 0xe9, 0x48, 0x10, 0x49, 0x51, 0x46, 0xbe, 0xd7, 0x36, 0x4e, 0xa5,",
          "676:  0xfc, 0x92, 0x89, 0x86, 0x3b, 0x6e, 0x6d, 0xdd, 0x3d, 0xbe, 0x8d, 0xe6, 0xa4, 0x6c, 0x7d, 0x28,",
          "677:  0xa2, 0x94, 0x2a, 0x78, 0x1f, 0x8e, 0xdc, 0x09, 0xe3, 0xd0, 0x0b, 0xea, 0x08, 0x51, 0x22, 0x21,",
          "678:  0xec, 0x08, 0x70, 0x2f, 0x19, 0x96, 0xf9, 0x1e, 0xdf, 0x45, 0x57, 0x54, 0x2c, 0x37, 0xe2, 0x08,",
          "679:  0x12, 0xb5, 0x01, 0x42, 0x6d, 0x52, 0x45, 0xdd, 0x8a, 0x89, 0xd2, 0x6f, 0xc0, 0xab, 0xa8, 0xda,",
          "680:  0x03, 0xea, 0x94, 0x93, 0xc6, 0xb9, 0x0f, 0xcf, 0x5b, 0x68, 0xba, 0xb7, 0x85, 0x4c, 0x8d, 0xc8,",
          "681:  0x62, 0xa6, 0xbe, 0x45, 0x34, 0x0d, 0x09, 0xdd, 0x8f, 0x61, 0x37, 0x8c, 0xdc, 0x19, 0x43, 0xaf,",
          "682:  0x00, 0xf0, 0x3d, 0xb4, 0x60, 0x3b, 0x67, 0x9d, 0xf3, 0x52, 0x9d, 0xb3, 0x26, 0xc0, 0x20, 0x13,",
          "683:  0x5e, 0x46, 0x33, 0x39, 0xbc, 0xbd, 0xe9, 0xce, 0x2d, 0x3b, 0x2b, 0xe3, 0x41, 0x19, 0xc2, 0xf7,",
          "684:  0xd1, 0xff, 0x8b, 0x6d, 0x22, 0x15, 0x8d, 0x63, 0xd3, 0x5a, 0xdb, 0x9b, 0xee, 0xbc, 0xf1, 0x1e,",
          "685:  0x66, 0xc6, 0xef, 0xa2, 0x5a, 0x6e, 0xda, 0x4a, 0x14, 0x08, 0x2e, 0x22, 0x09, 0x0f, 0xa9, 0x84,",
          "686:  0x3d, 0x11, 0xbb, 0x97, 0x0d, 0xa9, 0x11, 0x1e, 0x64, 0x1e, 0xcd, 0xea, 0x76, 0xe8, 0xf6, 0x23,",
          "687:  0xf9, 0xc5, 0x41, 0x57, 0x34, 0xb0, 0x21, 0x80, 0x2a, 0x08, 0xe0, 0x69, 0x07, 0xa4, 0xc2, 0x9f,",
          "688:  0x96, 0x3a, 0x64, 0xa6, 0xfe, 0xf8, 0xdf, 0x5d, 0x9d, 0x20, 0xef, 0xf0, 0xac, 0xd7, 0xae, 0xa1,",
          "689:  0x4a, 0x87, 0x4b, 0x10, 0x2a, 0xeb, 0xd8, 0x6c, 0xa7, 0x9f, 0x43, 0x28, 0xa0, 0x21, 0x77, 0x93,",
          "690:  0xf8, 0xc8, 0x34, 0xda, 0x54, 0x50, 0x00, 0xe4, 0xa9, 0x25, 0xba, 0xc7, 0x1b, 0x17, 0x45, 0xb4,",
          "691:  0xfe, 0xf7, 0xbc, 0xcd, 0x69, 0xc1, 0x27, 0x20, 0xd2, 0x28, 0x04, 0xfc, 0xad, 0x83, 0x26, 0x76,",
          "692:  0x22, 0xa9, 0xf0, 0xff, 0xca, 0x97, 0x37, 0xbf, 0xaa, 0xb5, 0x9d, 0xf3, 0x62, 0xa1, 0x93, 0x90,",
          "693:  0x9b, 0x5f, 0xfd, 0xf1, 0xd7, 0x0f, 0x63, 0xd7, 0xf0, 0x55, 0xf3, 0x3a, 0x48, 0xd7, 0x8a, 0xa9,",
          "694:  0x1b, 0x81, 0xfc, 0x7a, 0xcc, 0xc1, 0xdf, 0x38, 0x68, 0xfc, 0x11, 0x0c, 0x65, 0x73, 0x6e, 0x9a,",
          "695:  0x90, 0x5b, 0x86, 0xc9, 0x0d, 0x7c, 0x7d, 0x10, 0x13, 0xff, 0x99, 0xde, 0x3d, 0xc7, 0x3f, 0x3a,",
          "696:  0xa8, 0xaa, 0x79, 0x07, 0x25, 0xdb, 0xc5, 0x08, 0xb5, 0x38, 0x4a, 0x28, 0xfc, 0x19, 0x9a, 0xb2,",
          "697:  0xb4, 0x0e, 0x86, 0xd2, 0xa9, 0xf6, 0xc2, 0x07, 0x92, 0xac, 0x98, 0x90, 0x04, 0x2f, 0x8f, 0xa8,",
          "698:  0xd8, 0x17, 0x3a, 0x64, 0xdb, 0x86, 0xd7, 0xa3, 0x1e, 0xbf, 0x72, 0x32, 0x7c, 0xfe, 0x3e, 0xac,",
          "699:  0x2d, 0x0e, 0x32, 0xe5, 0x77, 0xf1, 0x4c, 0xe9, 0xa8, 0x4e, 0xf1, 0xbd, 0x83, 0xe6, 0x1e, 0x81,",
          "700:  0x2a, 0xde, 0x79, 0xf8, 0xe6, 0x80, 0xc8, 0xe5, 0xf7, 0x61, 0x8d, 0x0c, 0x77, 0xc8, 0x09, 0xbc,",
          "701:  0x6d, 0x08, 0xbc, 0x49, 0xee, 0x0d, 0x26, 0x60, 0x5f, 0x78, 0x26, 0xce, 0x5e, 0xb0, 0x63, 0xa8,",
          "702:  0x34, 0x6c, 0x84, 0x07, 0xce, 0x2a, 0x4e, 0x0d, 0xa5, 0xc7, 0x10, 0xb7, 0x37, 0x5a, 0x54, 0xa8,",
          "703:  0xa1, 0x32, 0x2f, 0x95, 0xe1, 0xc2, 0x3d, 0x27, 0xe1, 0x19, 0x12, 0x2b, 0xf8, 0xce, 0x28, 0x15,",
          "704:  0x5a, 0x10, 0xb7, 0x43, 0x9b, 0xe6, 0x85, 0x83, 0x2a, 0x76, 0x7a, 0xe1, 0x1b, 0x27, 0x33, 0xf6,",
          "705:  0x4c, 0xb5, 0x73, 0xbc, 0x0a, 0xaf, 0x1a, 0x8e, 0x8b, 0x64, 0x60, 0xaf, 0x3d, 0x30, 0xc3, 0x43,",
          "706:  0x5f, 0xcd, 0x9f, 0x1c, 0x54, 0xed, 0x52, 0xe8, 0x9e, 0xbd, 0x38, 0x92, 0xe4, 0x74, 0x92, 0xf8,",
          "707:  0x67, 0x07, 0x55, 0xec, 0x44, 0xed, 0xe7, 0xd5, 0x33, 0x69, 0xcf, 0x91, 0xd7, 0x9a, 0x7d, 0xc0,",
          "708:  0xb5, 0x11, 0x6d, 0x6e, 0xa8, 0x3c, 0x2f, 0x84, 0xfc, 0xd5, 0x41, 0xd5, 0x2e, 0x9d, 0xe1, 0x42,",
          "709:  0xfe, 0x57, 0x84, 0xbd, 0x97, 0x23, 0x8c, 0x29, 0xaa, 0x6c, 0x42, 0x0c, 0x0a, 0x86, 0x5d, 0x01,",
          "710:  0xf7, 0x24, 0x9c, 0x37, 0xff, 0x1d, 0x3b, 0x63, 0x57, 0x47, 0xcd, 0x58, 0x2d, 0x48, 0x0b, 0x55,",
          "711:  0x6d, 0x8a, 0x92, 0x1e, 0x2f, 0x9d, 0xec, 0xd6, 0x19, 0x92, 0xe1, 0x67, 0x68, 0xfe, 0x63, 0x1a,",
          "712:  0x47, 0x5a, 0x59, 0xfb, 0x0d, 0x89, 0xaf, 0xf7, 0x4d, 0x92, 0xe2, 0xdb, 0x72, 0x44, 0xb6, 0xba,",
          "713:  0xc9, 0x76, 0x97, 0xdc, 0x1e, 0x75, 0xaf, 0xd3, 0x2c, 0x95, 0x55, 0xf2, 0xe1, 0xd6, 0x6f, 0xc7,",
          "714:  0x4b, 0xce, 0xef, 0xc7, 0x4b, 0xce, 0x9f, 0xc7, 0x4b, 0xce, 0x27, 0x6f, 0x9d, 0xed, 0x9f, 0x27,",
          "715:  0x34, 0x1f, 0x81, 0xa5, 0xbf, 0x93, 0xfd, 0x8a, 0xf9, 0x3d, 0x79, 0xe3, 0x9f, 0x00, 0x00, 0x00,",
          "716:  0xff, 0xff, 0xcf, 0x15, 0x31, 0xd4, 0xbd, 0x0d, 0x00, 0x00,",
          "",
          "[Added Lines]",
          "658:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4f, 0x6f, 0x1b, 0x45,",
          "659:  0x14, 0xd7, 0x36, 0xa9, 0x9b, 0x4c, 0xfe, 0xd4, 0x9d, 0x84, 0xb2, 0xb8, 0x69, 0x1a, 0x4d, 0x4b,",
          "660:  0x15, 0xa2, 0xb2, 0xdb, 0x18, 0x21, 0xaa, 0x22, 0x40, 0x69, 0x12, 0xb5, 0x11, 0x11, 0x81, 0xad,",
          "661:  0xc2, 0x01, 0x81, 0xd0, 0x64, 0xfd, 0x62, 0x2f, 0x59, 0xef, 0x4c, 0x67, 0xc6, 0x0b, 0x56, 0xd5,",
          "662:  0x0b, 0x27, 0x24, 0xb8, 0x20, 0x84, 0xd4, 0x1b, 0x07, 0x90, 0x38, 0xf0, 0x45, 0x38, 0x22, 0xf1,",
          "663:  0x05, 0x50, 0xc4, 0xe7, 0x40, 0x68, 0x66, 0xd6, 0xbb, 0xeb, 0xc4, 0x76, 0x52, 0x11, 0x72, 0x9b,",
          "664:  0xf9, 0xbd, 0x37, 0xef, 0xfd, 0xde, 0xcf, 0x6f, 0xde, 0x78, 0x11, 0x91, 0x20, 0x52, 0x10, 0xbe,",
          "665:  0x00, 0xce, 0x64, 0xa4, 0x98, 0xe8, 0x96, 0x96, 0x1e, 0x17, 0x4c, 0x31, 0x8c, 0x0a, 0xa4, 0x36,",
          "666:  0xdf, 0x64, 0x4d, 0x66, 0x60, 0x5f, 0xaf, 0xac, 0x47, 0x6d, 0xa1, 0xc9, 0x58, 0x33, 0x06, 0x9f,",
          "667:  0xf2, 0xc8, 0xa7, 0x49, 0xc2, 0x14, 0x55, 0x11, 0x4b, 0x64, 0x66, 0x25, 0x07, 0xf7, 0xa4, 0x17,",
          "668:  0x31, 0x63, 0x0d, 0x99, 0x00, 0x3f, 0x5d, 0xf5, 0x9b, 0x90, 0x80, 0xa0, 0x0a, 0x1a, 0x99, 0xcf,",
          "669:  0x76, 0x33, 0x52, 0xad, 0xce, 0x9e, 0x17, 0xb2, 0xb6, 0x4f, 0x85, 0x49, 0xf1, 0x85, 0x59, 0xbc,",
          "670:  0x1e, 0x36, 0xfc, 0xb4, 0xee, 0xf3, 0x83, 0xa6, 0x3e, 0x2f, 0x7d, 0xca, 0x79, 0x1c, 0x85, 0x26,",
          "671:  0xbe, 0x9f, 0xae, 0xd2, 0x98, 0xb7, 0xe8, 0xf1, 0x68, 0x9b, 0x27, 0x44, 0x33, 0x05, 0x9d, 0x58,",
          "672:  0x38, 0x79, 0x0f, 0xcd, 0x04, 0xc0, 0xd9, 0x1a, 0xe7, 0xf2, 0xa3, 0x0e, 0x88, 0x2e, 0xc6, 0x68,",
          "673:  0x5c, 0x3b, 0xb9, 0xce, 0x92, 0xb3, 0x3c, 0x19, 0x98, 0x35, 0xae, 0xa1, 0x09, 0x01, 0x69, 0x24,",
          "674:  0x23, 0x96, 0xb8, 0x17, 0x0c, 0x9e, 0xef, 0xc9, 0x2a, 0xba, 0xb4, 0xc6, 0xf9, 0x56, 0xb2, 0xcf,",
          "675:  0xf4, 0x51, 0xd5, 0xe5, 0xd0, 0x3b, 0xaa, 0xd7, 0x1a, 0xe3, 0x54, 0xb5, 0xb2, 0x63, 0x66, 0x4d,",
          "676:  0x9e, 0x3b, 0x68, 0x2e, 0x4b, 0xba, 0x01, 0x8a, 0x46, 0x71, 0x96, 0xba, 0x89, 0x2a, 0x92, 0x75,",
          "677:  0x44, 0x68, 0x23, 0x4c, 0xd5, 0x77, 0xbc, 0xa2, 0x46, 0xaf, 0x57, 0xa3, 0x59, 0x7c, 0x1e, 0x36,",
          "678:  0xbc, 0xb4, 0xee, 0xf1, 0x83, 0xa6, 0xa7, 0x15, 0xf3, 0x4a, 0x8a, 0x79, 0x3d, 0xc5, 0xbc, 0xb5,",
          "679:  0x02, 0x7c, 0x6c, 0xc2, 0x06, 0x59, 0x78, 0xec, 0xa2, 0x4b, 0x94, 0xf3, 0x0f, 0x68, 0x1b, 0x32,",
          "680:  0x5e, 0xbd, 0x2d, 0x79, 0x07, 0x55, 0x7b, 0x72, 0x04, 0x20, 0x39, 0x4b, 0x24, 0xe0, 0xd7, 0xd0,",
          "681:  0xc5, 0x48, 0x41, 0x5b, 0xba, 0xce, 0xd2, 0xd8, 0xf2, 0x54, 0x7d, 0xce, 0x2b, 0x89, 0x98, 0x95,",
          "682:  0x1e, 0x58, 0x0f, 0xb2, 0x8e, 0x26, 0xf5, 0xf1, 0xe1, 0x4a, 0x12, 0x34, 0xbd, 0xcf, 0x34, 0x15,",
          "683:  0xd8, 0x17, 0x20, 0xad, 0x2c, 0x13, 0x41, 0x1f, 0x46, 0x7e, 0x1e, 0x47, 0x97, 0x0d, 0x89, 0x30,",
          "684:  0x04, 0x39, 0xfa, 0x57, 0xe9, 0x48, 0x10, 0x49, 0x51, 0x46, 0xbe, 0xd7, 0x36, 0x4e, 0xa5, 0xfc,",
          "685:  0x92, 0x89, 0x86, 0x3b, 0x66, 0x6d, 0xbd, 0x3d, 0xbe, 0x85, 0x66, 0xa4, 0x6c, 0x7d, 0x28, 0xa2,",
          "686:  0x94, 0x2a, 0x78, 0x1f, 0xba, 0xee, 0xb8, 0x71, 0xe8, 0x07, 0x75, 0x84, 0x28, 0x91, 0x10, 0x76,",
          "687:  0x04, 0xb8, 0x17, 0x0d, 0xcb, 0x7c, 0x8f, 0xef, 0xa0, 0x2b, 0x2a, 0x96, 0xeb, 0x71, 0x04, 0x89,",
          "688:  0x5a, 0x07, 0xa1, 0x36, 0xa8, 0xa2, 0x6e, 0xc5, 0x44, 0x39, 0x6e, 0xc0, 0x2b, 0xa8, 0xda, 0x07,",
          "689:  0xea, 0x94, 0x97, 0x8c, 0xf3, 0x31, 0x3c, 0x6f, 0xa1, 0xc9, 0xfe, 0x16, 0x32, 0x35, 0x22, 0x8b,",
          "690:  0x99, 0xfa, 0x16, 0xd0, 0x24, 0x24, 0x74, 0x2f, 0x86, 0x9d, 0x30, 0x72, 0xa7, 0x0c, 0xbd, 0x02,",
          "691:  0xc0, 0x77, 0xd1, 0x9c, 0xed, 0x9c, 0x35, 0xce, 0x4b, 0x75, 0x4e, 0x9b, 0x00, 0x83, 0x4c, 0x78,",
          "692:  0x09, 0x4d, 0xe5, 0xf0, 0xd6, 0x86, 0x3b, 0xb3, 0xe4, 0x2c, 0x8f, 0x05, 0x65, 0x08, 0xdf, 0x43,",
          "693:  0x2f, 0x17, 0xdb, 0x44, 0x2a, 0x1a, 0xc7, 0xa6, 0xb5, 0xb6, 0x36, 0xdc, 0x59, 0xe3, 0x3d, 0xcc,",
          "694:  0x8c, 0xdf, 0x45, 0xb5, 0xdc, 0xb4, 0x99, 0x28, 0x10, 0x5c, 0x44, 0x12, 0x1e, 0x50, 0x09, 0xbb,",
          "695:  0x22, 0x76, 0x2f, 0x1b, 0x52, 0x23, 0x3c, 0xf0, 0x3c, 0xba, 0xc8, 0x05, 0xfb, 0xaa, 0xeb, 0x56,",
          "696:  0x8d, 0xab, 0xdd, 0x90, 0x59, 0x34, 0xad, 0x9b, 0xa4, 0xd7, 0xa5, 0xe4, 0x57, 0x07, 0x5d, 0xd1,",
          "697:  0xc0, 0xba, 0x00, 0xaa, 0x20, 0x80, 0x27, 0x1d, 0x90, 0x0a, 0x7f, 0x5a, 0xea, 0x9b, 0xa9, 0xfa,",
          "698:  0xa3, 0xff, 0x76, 0xa1, 0x82, 0xbc, 0xef, 0xb3, 0x0e, 0xbc, 0x8a, 0x2a, 0x1d, 0x2e, 0x41, 0xa8,",
          "699:  0xac, 0x8f, 0xb3, 0x9d, 0xfe, 0x75, 0x42, 0x01, 0x0d, 0xb9, 0x93, 0xc4, 0x5d, 0xd3, 0x7e, 0x13,",
          "700:  0x41, 0x01, 0x90, 0x27, 0x96, 0xe8, 0x2e, 0x6f, 0x9c, 0x17, 0xd1, 0xfa, 0x3f, 0xb3, 0x36, 0xa7,",
          "701:  0x05, 0x1f, 0x83, 0x48, 0xa3, 0x10, 0xf0, 0x77, 0x0e, 0x1a, 0xdf, 0x8e, 0xa4, 0xc2, 0x2f, 0x95,",
          "702:  0xaf, 0x74, 0x7e, 0x81, 0x6b, 0xdb, 0x67, 0xc5, 0x42, 0x27, 0x21, 0x37, 0xbe, 0xfe, 0xf3, 0xef,",
          "703:  0x1f, 0x2e, 0x5c, 0xc5, 0xf3, 0xe6, 0x91, 0x48, 0x57, 0x8b, 0x59, 0x1c, 0x81, 0xfc, 0xe6, 0x82,",
          "704:  0x83, 0xbf, 0x75, 0xd0, 0xd8, 0x43, 0x18, 0xca, 0xe6, 0xcc, 0x34, 0x21, 0x37, 0x0d, 0x93, 0xeb,",
          "705:  0xf8, 0xda, 0x20, 0x26, 0xfe, 0x53, 0xbd, 0x7b, 0x86, 0x7f, 0x74, 0x50, 0x55, 0xf3, 0x0e, 0x4a,",
          "706:  0xb6, 0xf3, 0x11, 0x6a, 0x61, 0x94, 0x50, 0xf8, 0x33, 0x34, 0x61, 0x69, 0xed, 0x0f, 0xa5, 0x53,",
          "707:  0xed, 0x87, 0xf7, 0x25, 0x59, 0x36, 0x21, 0x09, 0x5e, 0x1a, 0x51, 0xb1, 0x2f, 0x74, 0xc8, 0xb6,",
          "708:  0x0d, 0xaf, 0x1f, 0x00, 0xfc, 0xca, 0xd1, 0xf0, 0xf9, 0x2b, 0x59, 0x5b, 0x18, 0x64, 0xca, 0xef,",
          "709:  0xe2, 0xa9, 0xd2, 0x51, 0x9d, 0xe2, 0x7b, 0x07, 0xcd, 0x3c, 0x04, 0x55, 0xbc, 0x84, 0xf8, 0xc6,",
          "710:  0x80, 0xc8, 0xe5, 0x57, 0xb2, 0x46, 0x86, 0x3b, 0xe4, 0x04, 0xde, 0x36, 0x04, 0xde, 0x24, 0x77,",
          "711:  0x07, 0x13, 0xb0, 0xcf, 0xa0, 0x89, 0xb3, 0x1b, 0x6c, 0x1b, 0x2a, 0x0d, 0x1b, 0xe1, 0xbe, 0xb3,",
          "712:  0x82, 0x53, 0x43, 0xe9, 0x11, 0xc4, 0xed, 0xf5, 0x16, 0x15, 0x6a, 0xa8, 0xcc, 0x8b, 0x65, 0xb8,",
          "713:  0x70, 0xcf, 0x49, 0x78, 0x86, 0xc4, 0x32, 0xbe, 0x3d, 0x4a, 0x85, 0x16, 0xc4, 0xed, 0xd0, 0xa6,",
          "714:  0x79, 0xee, 0xa0, 0x8a, 0x9d, 0x5e, 0xf8, 0xfa, 0xd1, 0x8c, 0x7d, 0x53, 0xed, 0x0c, 0xaf, 0xc2,",
          "715:  0xab, 0x86, 0xe3, 0x02, 0x19, 0xd8, 0x6b, 0xf7, 0xcd, 0xf0, 0xd0, 0x57, 0xf3, 0x27, 0x07, 0x55,",
          "716:  0x7b, 0x14, 0x7a, 0x67, 0xcf, 0x8f, 0x24, 0x39, 0x99, 0x24, 0xfe, 0xc5, 0x41, 0x15, 0x3b, 0x51,",
          "717:  0x8f, 0xf3, 0xea, 0x9b, 0xb4, 0x67, 0xc8, 0x6b, 0xd5, 0xfe, 0xc0, 0xb5, 0x11, 0x6d, 0x6e, 0xa8,",
          "718:  0x3c, 0x2b, 0x84, 0xfc, 0xcd, 0x41, 0xd5, 0x1e, 0x9d, 0xe1, 0x42, 0xfe, 0x5f, 0x84, 0xbd, 0x17,",
          "719:  0x23, 0x8c, 0x29, 0xaa, 0x6c, 0x40, 0x0c, 0x0a, 0x86, 0x5d, 0x01, 0xf7, 0x28, 0x9c, 0x37, 0xff,",
          "720:  0x6d, 0x3b, 0x63, 0x57, 0x46, 0xcd, 0x58, 0x2d, 0x48, 0x0b, 0x55, 0x6d, 0x8a, 0x92, 0x1e, 0x2f,",
          "721:  0x9c, 0xec, 0xe6, 0x29, 0x92, 0xe1, 0xa7, 0x68, 0xf6, 0x63, 0x1a, 0x47, 0x5a, 0x59, 0xfb, 0xcf,",
          "722:  0x12, 0x5f, 0x3b, 0x36, 0x49, 0x8a, 0x7f, 0x9c, 0x23, 0xb2, 0xd5, 0x4d, 0xb6, 0x3b, 0xe4, 0xd6,",
          "723:  0xa8, 0x7b, 0x9d, 0x66, 0xa9, 0xac, 0x92, 0x0f, 0x36, 0x7f, 0x3f, 0x5c, 0x74, 0xfe, 0x38, 0x5c,",
          "724:  0x74, 0xfe, 0x3a, 0x5c, 0x74, 0x3e, 0x79, 0xeb, 0x74, 0x5f, 0x42, 0xa1, 0xf9, 0x6b, 0x58, 0xfa,",
          "725:  0x66, 0xd9, 0xab, 0x98, 0x8f, 0x96, 0x37, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xce, 0xfa,",
          "726:  0x47, 0xd3, 0x0d, 0x00, 0x00,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1531:   i -= len(m.XXX_unrecognized)",
          "1532:   copy(dAtA[i:], m.XXX_unrecognized)",
          "1533:  }",
          "1534:  if len(m.GithubAppEnterpriseBaseUrl) > 0 {",
          "1535:   i -= len(m.GithubAppEnterpriseBaseUrl)",
          "1536:   copy(dAtA[i:], m.GithubAppEnterpriseBaseUrl)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1544:  if len(m.Proxy) > 0 {",
          "1545:   i -= len(m.Proxy)",
          "1546:   copy(dAtA[i:], m.Proxy)",
          "1547:   i = encodeVarintRepository(dAtA, i, uint64(len(m.Proxy)))",
          "1548:   i--",
          "1549:   dAtA[i] = 0x1",
          "1550:   i--",
          "1551:   dAtA[i] = 0x82",
          "1552:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1925:  if l > 0 {",
          "1926:   n += 1 + l + sovRepository(uint64(l))",
          "1927:  }",
          "1928:  if m.XXX_unrecognized != nil {",
          "1929:   n += len(m.XXX_unrecognized)",
          "1930:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1947:  l = len(m.Proxy)",
          "1948:  if l > 0 {",
          "1949:   n += 2 + l + sovRepository(uint64(l))",
          "1950:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2951:    }",
          "2952:    m.GithubAppEnterpriseBaseUrl = string(dAtA[iNdEx:postIndex])",
          "2953:    iNdEx = postIndex",
          "2954:   default:",
          "2955:    iNdEx = preIndex",
          "2956:    skippy, err := skipRepository(dAtA[iNdEx:])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2977:   case 16:",
          "2978:    if wireType != 2 {",
          "2979:     return fmt.Errorf(\"proto: wrong wireType = %d for field Proxy\", wireType)",
          "2980:    }",
          "2981:    var stringLen uint64",
          "2982:    for shift := uint(0); ; shift += 7 {",
          "2983:     if shift >= 64 {",
          "2984:      return ErrIntOverflowRepository",
          "2985:     }",
          "2986:     if iNdEx >= l {",
          "2987:      return io.ErrUnexpectedEOF",
          "2988:     }",
          "2989:     b := dAtA[iNdEx]",
          "2990:     iNdEx++",
          "2991:     stringLen |= uint64(b&0x7F) << shift",
          "2992:     if b < 0x80 {",
          "2993:      break",
          "2994:     }",
          "2995:    }",
          "2996:    intStringLen := int(stringLen)",
          "2997:    if intStringLen < 0 {",
          "2998:     return ErrInvalidLengthRepository",
          "2999:    }",
          "3000:    postIndex := iNdEx + intStringLen",
          "3001:    if postIndex < 0 {",
          "3002:     return ErrInvalidLengthRepository",
          "3003:    }",
          "3004:    if postIndex > l {",
          "3005:     return io.ErrUnexpectedEOF",
          "3006:    }",
          "3007:    m.Proxy = string(dAtA[iNdEx:postIndex])",
          "3008:    iNdEx = postIndex",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/generated.pb.go||pkg/apis/application/v1alpha1/generated.pb.go": [
          "File: pkg/apis/application/v1alpha1/generated.pb.go -> pkg/apis/application/v1alpha1/generated.pb.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2631: }",
          "2633: var fileDescriptor_030104ce3b95bcac = []byte{",
          "2635:  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3d, 0x5b, 0x6c, 0x24, 0xd9,",
          "2850:  0x1a, 0x36, 0x83, 0x90, 0xf2, 0xa0, 0x8f, 0x08, 0xa7, 0x67, 0x62, 0xee, 0x4b, 0x51, 0x9d, 0x3e,",
          "2852:  0x27, 0x1d, 0x98, 0xca, 0x64, 0xf3, 0x14, 0x64, 0xca, 0xf8, 0xac, 0x88, 0xf8, 0x89, 0x4a, 0x1c,",
          "2853:  0x84, 0x22, 0xe4, 0x52, 0xb1, 0x66, 0x85, 0x41, 0xa1, 0x4d, 0xe7, 0x7e, 0xa6, 0x04, 0x15, 0x15,",
          "2856:  0x20, 0xe9, 0x25, 0x29, 0x6d, 0x5b, 0xae, 0xbb, 0x6b, 0xcd, 0x8e, 0x79, 0x3f, 0x8a, 0x29, 0x9b,",
          "2860:  0x84, 0x8c, 0xa8, 0xd4, 0x7a, 0x8b, 0x9d, 0x8e, 0x0c, 0x32, 0x58, 0xf1, 0x09, 0x1b, 0x8b, 0x39,",
          "2863:  0x78, 0x7e, 0x90, 0xf6, 0xe4, 0x5e, 0x44, 0xdb, 0x91, 0x25, 0x09, 0x47, 0x4d, 0xe1, 0x5e, 0x83,",
          "2865:  0x11, 0x54, 0xd4, 0x25, 0x04, 0xe2, 0x42, 0x39, 0xf0, 0x54, 0x08, 0x48, 0x57, 0x6b, 0x25, 0x49,",
          "2869:  0x3a, 0x45, 0x44, 0xd3, 0x15, 0xdf, 0x21, 0x16, 0xb6, 0x0b, 0x60, 0xf2, 0xc0, 0x8a, 0xb2, 0x2f,",
          "2872:  0xf9, 0xe5, 0x9c, 0x63, 0x51, 0xe0, 0xf4, 0xd5, 0x80, 0xd2, 0xb0, 0xab, 0x01, 0xee, 0x2f, 0x3b,",
          "2896:  0xa1, 0xa4, 0x07, 0x63, 0x22, 0x1d, 0x4c, 0x7a, 0xc7, 0x2f, 0x16, 0x7b, 0xd7, 0x99, 0xed, 0xad,",
          "2914:  0x08, 0xd5, 0x6c, 0x56, 0xea, 0x68, 0xd3, 0x91, 0x77, 0xc2, 0x93, 0xe6, 0x53, 0x44, 0xd0, 0xc4,",
          "2915:  0x6a, 0xbf, 0x2c, 0x4f, 0xb3, 0xe7, 0x24, 0x8b, 0x27, 0x2f, 0x0d, 0x24, 0xab, 0xe3, 0xb0, 0xf2,",
          "2917:  0x71, 0x8b, 0x67, 0x6f, 0x55, 0xcd, 0xab, 0x00, 0x97, 0x82, 0xf4, 0xf2, 0x20, 0x4a, 0x5c, 0xc5,",
          "3048: }",
          "3050: func (m *AWSAuthConfig) Marshal() (dAtA []byte, err error) {",
          "",
          "[Removed Lines]",
          "2636:  0x55, 0x5b, 0xdd, 0x7e, 0x74, 0x1f, 0x3f, 0x66, 0x7c, 0x77, 0x76, 0xd6, 0x19, 0x36, 0xe3, 0x51,",
          "2637:  0xad, 0x92, 0x2c, 0x24, 0xb1, 0xd9, 0x61, 0x09, 0x4b, 0x36, 0x24, 0xb8, 0xed, 0x79, 0x78, 0xc6,",
          "2638:  0x33, 0xf6, 0x1e, 0x7b, 0x66, 0xc8, 0x83, 0xb0, 0xe5, 0xea, 0xdb, 0xed, 0x1a, 0x77, 0x57, 0xf5,",
          "2639:  0x56, 0x55, 0x7b, 0xdc, 0x09, 0x79, 0xa1, 0x40, 0x56, 0xe4, 0xb1, 0x51, 0x12, 0x89, 0x44, 0x42,",
          "2640:  0x10, 0x1e, 0x42, 0xe2, 0x23, 0x02, 0xbe, 0x00, 0x21, 0x7e, 0xf2, 0x15, 0x40, 0x82, 0x48, 0xa0,",
          "2641:  0x24, 0x10, 0x61, 0x92, 0x21, 0x88, 0x87, 0x04, 0x08, 0xc8, 0x0f, 0xf3, 0x85, 0xee, 0xfb, 0x56,",
          "2642:  0x75, 0xf7, 0xd8, 0x1e, 0xd7, 0x4c, 0xa2, 0x88, 0xbf, 0xae, 0x73, 0xce, 0x3d, 0xe7, 0xdc, 0xd7,",
          "2643:  0xb9, 0xe7, 0x9e, 0x7b, 0xee, 0x6d, 0x58, 0x6d, 0x06, 0xe9, 0x76, 0x77, 0x6b, 0xde, 0x8f, 0xda,",
          "2644:  0x0b, 0x5e, 0xdc, 0x8c, 0x3a, 0x71, 0x74, 0x9b, 0xff, 0x78, 0xb3, 0x5f, 0x5f, 0xd8, 0x3d, 0xbf,",
          "2645:  0xd0, 0xd9, 0x69, 0x2e, 0x78, 0x9d, 0x20, 0x59, 0xf0, 0x3a, 0x9d, 0x56, 0xe0, 0x7b, 0x69, 0x10,",
          "2646:  0x85, 0x0b, 0xbb, 0xcf, 0x7a, 0xad, 0xce, 0xb6, 0xf7, 0xec, 0x42, 0x93, 0x86, 0x34, 0xf6, 0x52,",
          "2647:  0x5a, 0x9f, 0xef, 0xc4, 0x51, 0x1a, 0x91, 0xb7, 0x19, 0x6e, 0xf3, 0x8a, 0x1b, 0xff, 0xf1, 0x73,",
          "2648:  0x7e, 0x7d, 0x7e, 0xf7, 0xfc, 0x7c, 0x67, 0xa7, 0x39, 0xcf, 0xb8, 0xcd, 0x5b, 0xdc, 0xe6, 0x15,",
          "2649:  0xb7, 0x33, 0x6f, 0xb6, 0x74, 0x69, 0x46, 0xcd, 0x68, 0x81, 0x33, 0xdd, 0xea, 0x36, 0xf8, 0x17,",
          "2650:  0xff, 0xe0, 0xbf, 0x84, 0xb0, 0x33, 0xee, 0xce, 0xf3, 0xc9, 0x7c, 0x10, 0x31, 0xf5, 0x16, 0xfc,",
          "2651:  0x28, 0xa6, 0x0b, 0xbb, 0x7d, 0x0a, 0x9d, 0x79, 0xce, 0xd0, 0xb4, 0x3d, 0x7f, 0x3b, 0x08, 0x69,",
          "2652:  0xdc, 0x33, 0x75, 0x6a, 0xd3, 0xd4, 0x1b, 0x54, 0x6a, 0x61, 0x58, 0xa9, 0xb8, 0x1b, 0xa6, 0x41,",
          "2653:  0x9b, 0xf6, 0x15, 0x78, 0xcb, 0x41, 0x05, 0x12, 0x7f, 0x9b, 0xb6, 0xbd, 0x7c, 0x39, 0xf7, 0x65,",
          "2654:  0x98, 0x5a, 0xbc, 0xb5, 0xb1, 0xd8, 0x4d, 0xb7, 0x97, 0xa2, 0xb0, 0x11, 0x34, 0xc9, 0x8f, 0xc3,",
          "2655:  0x84, 0xdf, 0xea, 0x26, 0x29, 0x8d, 0xaf, 0x7b, 0x6d, 0x3a, 0xeb, 0x9c, 0x73, 0x9e, 0xa9, 0xd6,",
          "2656:  0x1e, 0xff, 0xca, 0xfe, 0xdc, 0x63, 0x77, 0xf7, 0xe7, 0x26, 0x96, 0x0c, 0x0a, 0x6d, 0x3a, 0xf2,",
          "2657:  0xc3, 0x30, 0x1e, 0x47, 0x2d, 0xba, 0x88, 0xd7, 0x67, 0x4b, 0xbc, 0xc8, 0x09, 0x59, 0x64, 0x1c,",
          "2658:  0x05, 0x18, 0x15, 0xde, 0xfd, 0x5a, 0x09, 0x60, 0xb1, 0xd3, 0x59, 0x8f, 0xa3, 0xdb, 0xd4, 0x4f,",
          "2659:  0xc9, 0x4b, 0x50, 0x61, 0xad, 0x50, 0xf7, 0x52, 0x8f, 0x4b, 0x9b, 0x38, 0xff, 0xa3, 0xf3, 0xa2,",
          "2660:  0x32, 0xf3, 0x76, 0x65, 0x4c, 0xcf, 0x31, 0xea, 0xf9, 0xdd, 0x67, 0xe7, 0xd7, 0xb6, 0x58, 0xf9,",
          "2661:  0x6b, 0x34, 0xf5, 0x6a, 0x44, 0x0a, 0x03, 0x03, 0x43, 0xcd, 0x95, 0x84, 0x30, 0x92, 0x74, 0xa8,",
          "2662:  0xcf, 0x15, 0x9b, 0x38, 0xbf, 0x3a, 0x7f, 0x9c, 0x21, 0x32, 0x6f, 0x34, 0xdf, 0xe8, 0x50, 0xbf,",
          "2663:  0x36, 0x29, 0x25, 0x8f, 0xb0, 0x2f, 0xe4, 0x72, 0xc8, 0x2e, 0x8c, 0x25, 0xa9, 0x97, 0x76, 0x93,",
          "2664:  0xd9, 0x32, 0x97, 0x78, 0xbd, 0x30, 0x89, 0x9c, 0x6b, 0x6d, 0x5a, 0xca, 0x1c, 0x13, 0xdf, 0x28,",
          "2665:  0xa5, 0xb9, 0x7f, 0xef, 0xc0, 0xb4, 0x21, 0x5e, 0x0d, 0x92, 0x94, 0xbc, 0xa7, 0xaf, 0x71, 0xe7,",
          "2666:  0x0f, 0xd7, 0xb8, 0xac, 0x34, 0x6f, 0xda, 0x93, 0x52, 0x58, 0x45, 0x41, 0xac, 0x86, 0x6d, 0xc3,",
          "2667:  0x68, 0x90, 0xd2, 0x76, 0x32, 0x5b, 0x3a, 0x57, 0x7e, 0x66, 0xe2, 0xfc, 0xe5, 0xa2, 0xea, 0x59,",
          "2668:  0x9b, 0x92, 0x42, 0x47, 0x57, 0x18, 0x7b, 0x14, 0x52, 0xdc, 0xef, 0x82, 0x5d, 0x3f, 0xd6, 0xe0,",
          "2669:  0xe4, 0x59, 0x98, 0x48, 0xa2, 0x6e, 0xec, 0x53, 0xa4, 0x9d, 0x28, 0x99, 0x75, 0xce, 0x95, 0xd9,",
          "2670:  0xd0, 0x63, 0x23, 0x75, 0xc3, 0x80, 0xd1, 0xa6, 0x21, 0x9f, 0x72, 0x60, 0xb2, 0x4e, 0x93, 0x34,",
          "2671:  0x08, 0xb9, 0x7c, 0xa5, 0xfc, 0xe6, 0xb1, 0x95, 0x57, 0xc0, 0x65, 0xc3, 0xbc, 0x76, 0x4a, 0x56,",
          "2672:  0x64, 0xd2, 0x02, 0x26, 0x98, 0x91, 0xcf, 0x66, 0x5c, 0x9d, 0x26, 0x7e, 0x1c, 0x74, 0xd8, 0x37,",
          "2673:  0x1f, 0x33, 0xd6, 0x8c, 0x5b, 0x36, 0x28, 0xb4, 0xe9, 0x48, 0x08, 0xa3, 0x6c, 0x46, 0x25, 0xb3,",
          "2674:  0x23, 0x5c, 0xff, 0x95, 0xe3, 0xe9, 0x2f, 0x1b, 0x95, 0x4d, 0x56, 0xd3, 0xfa, 0xec, 0x2b, 0x41,",
          "2675:  0x21, 0x86, 0x7c, 0xd2, 0x81, 0x59, 0x39, 0xe3, 0x91, 0x8a, 0x06, 0xbd, 0xb5, 0x1d, 0xa4, 0xb4,",
          "2676:  0x15, 0x24, 0xe9, 0xec, 0x28, 0xd7, 0x61, 0xe1, 0x70, 0x63, 0xeb, 0x52, 0x1c, 0x75, 0x3b, 0x57,",
          "2677:  0x83, 0xb0, 0x5e, 0x3b, 0x27, 0x25, 0xcd, 0x2e, 0x0d, 0x61, 0x8c, 0x43, 0x45, 0x92, 0xcf, 0x3a,",
          "2678:  0x70, 0x26, 0xf4, 0xda, 0x34, 0xe9, 0x78, 0xac, 0x6b, 0x05, 0xba, 0xd6, 0xf2, 0xfc, 0x1d, 0xae,",
          "2679:  0xd1, 0xd8, 0x83, 0x69, 0xe4, 0x4a, 0x8d, 0xce, 0x5c, 0x1f, 0xca, 0x1a, 0xef, 0x23, 0x96, 0xfc,",
          "2680:  0x96, 0x03, 0x33, 0x51, 0xdc, 0xd9, 0xf6, 0x42, 0x5a, 0x57, 0xd8, 0x64, 0x76, 0x9c, 0x4f, 0xbd,",
          "2681:  0xf7, 0x1e, 0xaf, 0x8b, 0xd6, 0xf2, 0x6c, 0xaf, 0x45, 0x61, 0x90, 0x46, 0xf1, 0x06, 0x4d, 0xd3,",
          "2682:  0x20, 0x6c, 0x26, 0xb5, 0x27, 0xee, 0xee, 0xcf, 0xcd, 0xf4, 0x51, 0x61, 0xbf, 0x3e, 0xe4, 0xfd,",
          "2683:  0x30, 0x91, 0xf4, 0x42, 0xff, 0x56, 0x10, 0xd6, 0xa3, 0x3b, 0xc9, 0x6c, 0xa5, 0x88, 0xe9, 0xbb,",
          "2684:  0xa1, 0x19, 0xca, 0x09, 0x68, 0x04, 0xa0, 0x2d, 0x6d, 0x70, 0xc7, 0x99, 0xa1, 0x54, 0x2d, 0xba,",
          "2685:  0xe3, 0xcc, 0x60, 0xba, 0x8f, 0x58, 0xf2, 0x31, 0x07, 0xa6, 0x92, 0xa0, 0x19, 0x7a, 0x69, 0x37,",
          "2686:  0xa6, 0x57, 0x69, 0x2f, 0x99, 0x05, 0xae, 0xc8, 0x95, 0x63, 0xb6, 0x8a, 0xc5, 0xb2, 0xf6, 0x84,",
          "2687:  0xd4, 0x71, 0xca, 0x86, 0x26, 0x98, 0x95, 0x3b, 0x68, 0xa2, 0x99, 0x61, 0x3d, 0x51, 0xec, 0x44,",
          "2688:  0x33, 0x83, 0x7a, 0xa8, 0x48, 0xf7, 0xcf, 0x4a, 0x70, 0x32, 0xbf, 0x06, 0x91, 0xdf, 0x71, 0xe0,",
          "2689:  0xc4, 0xed, 0x3b, 0xe9, 0x66, 0xb4, 0x43, 0xc3, 0xa4, 0xd6, 0x63, 0x96, 0x82, 0x5b, 0xdf, 0x89,",
          "2690:  0xf3, 0x7e, 0xb1, 0xab, 0xdd, 0xfc, 0x95, 0xac, 0x94, 0x0b, 0x61, 0x1a, 0xf7, 0x6a, 0x4f, 0xca,",
          "2691:  0xfa, 0x9c, 0xb8, 0x72, 0x6b, 0xd3, 0xc6, 0x62, 0x5e, 0xa9, 0x33, 0x1f, 0x77, 0xe0, 0xd4, 0x20,",
          "2692:  0x16, 0xe4, 0x24, 0x94, 0x77, 0x68, 0x4f, 0x38, 0x38, 0xc8, 0x7e, 0x92, 0x9f, 0x85, 0xd1, 0x5d,",
          "2693:  0xaf, 0xd5, 0xa5, 0xd2, 0x51, 0xb8, 0x74, 0xbc, 0x8a, 0x68, 0xcd, 0x50, 0x70, 0x7d, 0x6b, 0xe9,",
          "2694:  0x79, 0xc7, 0xfd, 0xab, 0x32, 0x4c, 0x58, 0x4b, 0xc5, 0x23, 0x70, 0x7e, 0xa2, 0x8c, 0xf3, 0x73,",
          "2695:  0xad, 0xb0, 0x55, 0x6e, 0xa8, 0xf7, 0x73, 0x27, 0xe7, 0xfd, 0xac, 0x15, 0x27, 0xf2, 0xbe, 0xee,",
          "2696:  0x0f, 0x49, 0xa1, 0x1a, 0x75, 0x98, 0x73, 0xcb, 0x56, 0xd1, 0x91, 0x22, 0xba, 0x70, 0x4d, 0xb1,",
          "2697:  0xab, 0x4d, 0xdd, 0xdd, 0x9f, 0xab, 0xea, 0x4f, 0x34, 0x82, 0xdc, 0xaf, 0x3b, 0x70, 0xca, 0xd2,",
          "2698:  0x71, 0x29, 0x0a, 0xeb, 0x01, 0xef, 0xda, 0x73, 0x30, 0x92, 0xf6, 0x3a, 0xca, 0x83, 0xd6, 0x2d,",
          "2699:  0xb5, 0xd9, 0xeb, 0x50, 0xe4, 0x18, 0xe6, 0x33, 0xb7, 0x69, 0x92, 0x78, 0x4d, 0x9a, 0xf7, 0x99,",
          "2700:  0xaf, 0x09, 0x30, 0x2a, 0x3c, 0x89, 0x81, 0xb4, 0xbc, 0x24, 0xdd, 0x8c, 0xbd, 0x30, 0xe1, 0xec,",
          "2701:  0x37, 0x83, 0x36, 0x95, 0x0d, 0xfc, 0x23, 0x87, 0x1b, 0x31, 0xac, 0x44, 0xed, 0xf4, 0xdd, 0xfd,",
          "2702:  0x39, 0xb2, 0xda, 0xc7, 0x09, 0x07, 0x70, 0x77, 0x3f, 0xeb, 0xc0, 0xe9, 0xc1, 0x6e, 0x0d, 0x79,",
          "2703:  0x3d, 0x8c, 0x25, 0x34, 0xde, 0xa5, 0xb1, 0xac, 0x9d, 0xe9, 0x12, 0x0e, 0x45, 0x89, 0x25, 0x0b,",
          "2704:  0x50, 0xd5, 0x26, 0x57, 0xd6, 0x71, 0x46, 0x92, 0x56, 0x8d, 0x9d, 0x36, 0x34, 0xac, 0xd1, 0xd8,",
          "2705:  0x87, 0x74, 0x82, 0x74, 0xa3, 0xf1, 0xfd, 0x06, 0xc7, 0xb8, 0xff, 0xe0, 0xc0, 0x09, 0x4b, 0xab,",
          "2706:  0x47, 0xe0, 0xe5, 0x86, 0x59, 0x2f, 0x77, 0xa5, 0xb0, 0xf1, 0x3c, 0xc4, 0xcd, 0xfd, 0xf2, 0x18,",
          "2707:  0xcc, 0xd8, 0xa3, 0x9e, 0x9b, 0x63, 0xbe, 0xc1, 0xa2, 0x9d, 0xe8, 0x06, 0xae, 0xca, 0x36, 0x37,",
          "2708:  0x1b, 0x2c, 0x01, 0x46, 0x85, 0x67, 0x8d, 0xd8, 0xf1, 0xd2, 0x6d, 0xd9, 0xe0, 0xba, 0x11, 0xd7,",
          "2709:  0xbd, 0x74, 0x1b, 0x39, 0x86, 0xbc, 0x1d, 0xa6, 0x53, 0x2f, 0x6e, 0xd2, 0x14, 0xe9, 0x6e, 0x90,",
          "2710:  0xa8, 0xf9, 0x52, 0xad, 0x9d, 0x96, 0xb4, 0xd3, 0x9b, 0x19, 0x2c, 0xe6, 0xa8, 0xc9, 0xcb, 0x30,",
          "2711:  0xb2, 0x4d, 0x5b, 0x6d, 0xe9, 0xd7, 0x6c, 0x14, 0x37, 0xc3, 0x79, 0x5d, 0x2f, 0xd3, 0x56, 0xbb,",
          "2712:  0x56, 0x61, 0x2a, 0xb3, 0x5f, 0xc8, 0x45, 0x91, 0x5f, 0x74, 0xa0, 0xba, 0xd3, 0x4d, 0xd2, 0xa8,",
          "2713:  0x1d, 0xbc, 0x8f, 0xce, 0x56, 0xb8, 0xe0, 0x9f, 0x29, 0x58, 0xf0, 0x55, 0xc5, 0x5f, 0xcc, 0x77,",
          "2714:  0xfd, 0x89, 0x46, 0x32, 0xf9, 0x00, 0x8c, 0xef, 0x24, 0x51, 0x18, 0x52, 0xe6, 0xa9, 0x30, 0x25,",
          "2715:  0x6e, 0x16, 0xad, 0x84, 0xe0, 0x5e, 0x9b, 0x60, 0x7d, 0x2b, 0x3f, 0x50, 0xc9, 0xe4, 0xcd, 0x50,",
          "2716:  0x0f, 0x62, 0xea, 0xa7, 0x51, 0xdc, 0x9b, 0x85, 0x87, 0xd2, 0x0c, 0xcb, 0x8a, 0xbf, 0x68, 0x06,",
          "2717:  0xfd, 0x89, 0x46, 0x32, 0xe9, 0xc1, 0x58, 0xa7, 0xd5, 0x6d, 0x06, 0xe1, 0xec, 0x04, 0xd7, 0xe1,",
          "2718:  0x46, 0xc1, 0x3a, 0xac, 0x73, 0xe6, 0x35, 0x60, 0x46, 0x45, 0xfc, 0x46, 0x29, 0x90, 0x3c, 0x0d,",
          "2719:  0xa3, 0xfe, 0xb6, 0x17, 0xa7, 0xb3, 0x93, 0x7c, 0xcc, 0xea, 0x49, 0xb4, 0xc4, 0x80, 0x28, 0x70,",
          "2720:  0xee, 0x6f, 0x94, 0xe0, 0xcc, 0xf0, 0x8a, 0x89, 0xd9, 0xe4, 0x77, 0xe3, 0x44, 0xd8, 0xe7, 0x8a,",
          "2721:  0x3d, 0x9b, 0x38, 0x18, 0x15, 0x9e, 0x7c, 0xc4, 0x81, 0xf1, 0xdb, 0xb2, 0xc7, 0x4b, 0x0f, 0xa5,",
          "2722:  0xc7, 0xaf, 0xc8, 0x1e, 0xd7, 0x3a, 0x5c, 0x51, 0xbd, 0x2e, 0xe5, 0x32, 0x75, 0xe9, 0x9e, 0xdf,",
          "2723:  0xea, 0xd6, 0x95, 0x65, 0xd4, 0xa4, 0x17, 0x04, 0x18, 0x15, 0x9e, 0x91, 0x06, 0xa1, 0x20, 0x1d,",
          "2724:  0xc9, 0x92, 0xae, 0x84, 0x92, 0x54, 0xe2, 0xdd, 0xef, 0x94, 0xe1, 0x89, 0x81, 0x93, 0x8f, 0xcc,",
          "2725:  0x03, 0x70, 0x9f, 0xe5, 0x62, 0xc0, 0x36, 0x98, 0x62, 0x57, 0x3d, 0xcd, 0x5c, 0x8c, 0x9b, 0x1a,",
          "2726:  0x8a, 0x16, 0x05, 0xf9, 0x10, 0x40, 0xc7, 0x8b, 0xbd, 0x36, 0x4d, 0x69, 0xac, 0xec, 0xe4, 0xd5,",
          "2727:  0xe3, 0xb5, 0x12, 0xd3, 0x63, 0x5d, 0xf1, 0x34, 0x3e, 0x8e, 0x06, 0x25, 0x68, 0x89, 0x64, 0x7b,",
          "2728:  0xe8, 0x98, 0xb6, 0xa8, 0x97, 0xd0, 0xeb, 0x66, 0xf9, 0xd0, 0x7b, 0x68, 0x34, 0x28, 0xb4, 0xe9,",
          "2729:  0xd8, 0x3a, 0xc6, 0x6b, 0x91, 0xc8, 0xb6, 0xd2, 0xeb, 0x18, 0xaf, 0x67, 0x82, 0x12, 0x4b, 0x5e,",
          "2730:  0x75, 0x60, 0xba, 0x11, 0xb4, 0xa8, 0x91, 0x2e, 0x77, 0xbc, 0x6b, 0xc7, 0xaf, 0xe4, 0x45, 0x9b,",
          "2731:  0xaf, 0xb1, 0xc0, 0x19, 0x70, 0x82, 0x39, 0xf1, 0xac, 0x9b, 0x77, 0x69, 0xcc, 0x4d, 0xf7, 0x58,",
          "2732:  0xb6, 0x9b, 0x6f, 0x0a, 0x30, 0x2a, 0xbc, 0xfb, 0x85, 0x12, 0xcc, 0x0e, 0x1b, 0x73, 0x24, 0x61,",
          "2733:  0x23, 0x2b, 0xbd, 0xe9, 0xc5, 0x89, 0x74, 0xdf, 0x8f, 0xb9, 0x0b, 0x94, 0x7c, 0x6f, 0x7a, 0xb1,",
          "2734:  0x3d, 0x46, 0xb9, 0x00, 0x54, 0x92, 0xc8, 0x6d, 0x18, 0x49, 0x5b, 0x5e, 0x41, 0x61, 0x23, 0x4b,",
          "2735:  0xa2, 0x71, 0xb2, 0x56, 0x17, 0x13, 0xe4, 0x32, 0xc8, 0x53, 0x30, 0xd2, 0x0a, 0xb6, 0x98, 0x33,",
          "2736:  0xca, 0x06, 0x31, 0x5f, 0x55, 0x56, 0x83, 0xad, 0x04, 0x39, 0xd4, 0xfd, 0x9a, 0x33, 0xa0, 0x6d,",
          "2737:  0xa4, 0xd1, 0x65, 0x83, 0x8a, 0x86, 0xbb, 0x41, 0x1c, 0x85, 0x6d, 0x1a, 0xa6, 0xf9, 0x50, 0xe8,",
          "2738:  0x05, 0x83, 0x42, 0x9b, 0x8e, 0xfc, 0x82, 0x33, 0x60, 0x36, 0x1c, 0x33, 0x06, 0x28, 0x55, 0x3a,",
          "2739:  0xf4, 0x84, 0x70, 0xff, 0x73, 0x6c, 0x80, 0xfd, 0xd3, 0x0b, 0x1a, 0x39, 0x0f, 0xc0, 0xbc, 0xa9,",
          "2740:  0xf5, 0x98, 0x36, 0x82, 0x3d, 0x59, 0x33, 0xcd, 0xf2, 0xba, 0xc6, 0xa0, 0x45, 0xa5, 0xca, 0x6c,",
          "2741:  0x74, 0x1b, 0xac, 0x4c, 0xa9, 0xbf, 0x8c, 0xc0, 0xa0, 0x45, 0x45, 0x9e, 0x83, 0xb1, 0xa0, 0xed,",
          "2742:  0x35, 0xa9, 0x6a, 0xff, 0xa7, 0xd8, 0xe4, 0x5a, 0xe1, 0x90, 0x7b, 0xfb, 0x73, 0xd3, 0x5a, 0x21,",
          "2743:  0x0e, 0x42, 0x49, 0x4b, 0x7e, 0xdb, 0x81, 0x49, 0x3f, 0x6a, 0xb7, 0xa3, 0x70, 0xd5, 0xdb, 0xa2,",
          "2744:  0x2d, 0x15, 0xe2, 0xba, 0xfd, 0xb0, 0x96, 0xfb, 0xf9, 0x25, 0x4b, 0x98, 0xd8, 0x60, 0xea, 0xc0,",
          "2745:  0x9d, 0x8d, 0xc2, 0x8c, 0x56, 0xf6, 0x1c, 0x1c, 0xbd, 0xff, 0x1c, 0x24, 0x7f, 0xe4, 0xc0, 0x8c,",
          "2746:  0x28, 0xbb, 0x18, 0x86, 0x51, 0x2a, 0x23, 0x8f, 0x22, 0x46, 0x15, 0x3d, 0xe4, 0x6a, 0x59, 0x12,",
          "2747:  0x45, 0xdd, 0x5e, 0x23, 0xd5, 0x9c, 0xe9, 0xc3, 0x63, 0xbf, 0x92, 0xe4, 0x12, 0xcc, 0x34, 0xa2,",
          "2748:  0xd8, 0xa7, 0x76, 0x43, 0x70, 0xc7, 0xaf, 0x62, 0x18, 0x5d, 0xcc, 0x13, 0x60, 0x7f, 0x19, 0x72,",
          "2749:  0x13, 0x4e, 0x5b, 0x40, 0xbb, 0x1d, 0x2a, 0x9c, 0xdb, 0x59, 0xc9, 0xed, 0xf4, 0xc5, 0x81, 0x54,",
          "2750:  0x38, 0xa4, 0xf4, 0x99, 0x77, 0xc0, 0x4c, 0x5f, 0xff, 0x0d, 0xd8, 0xdd, 0x9f, 0xb2, 0x77, 0xf7,",
          "2751:  0x55, 0x6b, 0x53, 0x7e, 0x66, 0x19, 0x4e, 0x0f, 0x6e, 0xa9, 0xa3, 0x70, 0x71, 0x7f, 0xcd, 0x81,",
          "2752:  0x27, 0x87, 0xb8, 0x31, 0x7a, 0x5b, 0xe3, 0x0c, 0xdb, 0xd6, 0x10, 0x0f, 0xca, 0x34, 0xdc, 0x95,",
          "2753:  0xc6, 0xe2, 0xe2, 0xf1, 0x46, 0xc4, 0x85, 0x70, 0x57, 0x74, 0xf4, 0xf8, 0xdd, 0xfd, 0xb9, 0xf2,",
          "2754:  0x85, 0x70, 0x17, 0x19, 0x6f, 0xf7, 0x73, 0x63, 0x99, 0x9d, 0xd3, 0x86, 0xda, 0xac, 0x73, 0x45,",
          "2755:  0xe5, 0xbe, 0x69, 0xad, 0xe0, 0xb1, 0x68, 0xed, 0x0c, 0x45, 0x08, 0x5e, 0x8a, 0x23, 0x1f, 0x77,",
          "2756:  0x78, 0xd4, 0x5b, 0xed, 0x28, 0xa5, 0x67, 0xf5, 0x70, 0x82, 0xf0, 0x76, 0x2c, 0x5d, 0x01, 0xd1,",
          "2757:  0x96, 0xce, 0x66, 0x72, 0x47, 0x04, 0x9d, 0xf2, 0xfe, 0x95, 0x8a, 0x8b, 0x2b, 0x3c, 0xd9, 0x03,",
          "2758:  0x48, 0x7a, 0xa1, 0xbf, 0x1e, 0xb5, 0x02, 0xbf, 0x27, 0xc3, 0x0c, 0x05, 0x44, 0x4e, 0x05, 0x3f,",
          "2759:  0xe1, 0x64, 0x99, 0x6f, 0xb4, 0x64, 0x91, 0x2f, 0x3a, 0x30, 0x13, 0x34, 0xc3, 0x28, 0xa6, 0xcb,",
          "2760:  0x41, 0xa3, 0x41, 0x63, 0x1a, 0xfa, 0x54, 0xf9, 0x21, 0xb7, 0x8e, 0xa7, 0x81, 0x0a, 0xfa, 0xad,",
          "2761:  0xe4, 0xd9, 0x9b, 0x29, 0xde, 0x87, 0xc2, 0x7e, 0x65, 0x48, 0x1d, 0x46, 0x82, 0xb0, 0x11, 0x49,",
          "2762:  0xc3, 0x56, 0x3b, 0x9e, 0x52, 0x2b, 0x61, 0x23, 0x32, 0x73, 0x85, 0x7d, 0x21, 0xe7, 0x4e, 0x56,",
          "2763:  0xe1, 0x54, 0x2c, 0x77, 0xa2, 0x97, 0x83, 0x84, 0xf9, 0xf3, 0xab, 0x41, 0x3b, 0x48, 0xb9, 0x51,",
          "2764:  0x2a, 0xd7, 0x66, 0xef, 0xee, 0xcf, 0x9d, 0xc2, 0x01, 0x78, 0x1c, 0x58, 0xca, 0x7d, 0xa5, 0x9a,",
          "2765:  0xdd, 0x6e, 0x8b, 0x60, 0xd2, 0x07, 0xa0, 0x1a, 0xeb, 0xf0, 0xbd, 0xf0, 0x8c, 0x56, 0x8b, 0x69,",
          "2766:  0x63, 0x19, 0xc5, 0xd2, 0x71, 0x10, 0x13, 0xa8, 0x37, 0x12, 0x99, 0x87, 0xc4, 0x7a, 0x5e, 0x4e,",
          "2767:  0x8b, 0x02, 0xc6, 0x97, 0x94, 0x6a, 0x02, 0x76, 0xbd, 0xd0, 0x47, 0x2e, 0x83, 0xc4, 0x30, 0xb6,",
          "2768:  0x4d, 0xbd, 0x56, 0xba, 0x2d, 0xe3, 0x49, 0x57, 0x8e, 0xeb, 0xd3, 0x32, 0x5e, 0xf9, 0x58, 0x9d,",
          "2769:  0x80, 0xa2, 0x94, 0x44, 0xf6, 0x60, 0x7c, 0x5b, 0x74, 0x82, 0x5c, 0xdb, 0xaf, 0x1d, 0xb7, 0x71,",
          "2770:  0x33, 0x3d, 0x6b, 0xe6, 0xaf, 0x04, 0xa0, 0x12, 0x47, 0x7e, 0xc9, 0x01, 0xf0, 0x55, 0x90, 0x4e,",
          "2771:  0x4d, 0x1f, 0x2c, 0xcc, 0xee, 0xe8, 0xf8, 0x9f, 0x71, 0x8d, 0x34, 0x28, 0x41, 0x4b, 0x32, 0x79,",
          "2772:  0x09, 0x26, 0x63, 0xea, 0x47, 0xa1, 0x1f, 0xb4, 0x68, 0x7d, 0x31, 0xe5, 0x6e, 0xfc, 0xd1, 0x82,",
          "2773:  0x79, 0x27, 0x99, 0x7f, 0x82, 0x16, 0x0f, 0xcc, 0x70, 0x24, 0xaf, 0x38, 0x30, 0xad, 0x03, 0x95,",
          "2774:  0xac, 0x43, 0xa8, 0x0c, 0xd8, 0xac, 0x16, 0x14, 0x16, 0xe5, 0x3c, 0x6b, 0x84, 0x6d, 0x57, 0xb2,",
          "2775:  0x30, 0xcc, 0xc9, 0x25, 0xef, 0x02, 0x88, 0xb6, 0x78, 0x50, 0x90, 0x55, 0xb5, 0x72, 0xe4, 0xaa,",
          "2776:  0x4e, 0x8b, 0xf8, 0xb6, 0xe2, 0x80, 0x16, 0x37, 0x72, 0x15, 0x40, 0x4c, 0x9b, 0xcd, 0x5e, 0x87,",
          "2777:  0xf2, 0xa0, 0x4c, 0xb5, 0xf6, 0x46, 0xd5, 0xf8, 0x1b, 0x1a, 0x73, 0x6f, 0x7f, 0xae, 0x7f, 0xb7,",
          "2778:  0xcb, 0xa3, 0xb1, 0x56, 0x71, 0xf2, 0x7e, 0x18, 0x4f, 0xba, 0xed, 0xb6, 0xa7, 0x83, 0x2b, 0xeb,",
          "2779:  0xc5, 0xad, 0x88, 0x82, 0xaf, 0x19, 0x9b, 0x12, 0x80, 0x4a, 0xa2, 0x1b, 0x02, 0xe9, 0xa7, 0x27,",
          "2780:  0xcf, 0xc1, 0x24, 0xdd, 0x4b, 0x69, 0x1c, 0x7a, 0xad, 0x1b, 0xb8, 0xaa, 0xb6, 0xe3, 0xbc, 0xf3,",
          "2781:  0x2f, 0x58, 0x70, 0xcc, 0x50, 0x11, 0x57, 0x7b, 0xde, 0x25, 0x4e, 0x0f, 0xc6, 0xf3, 0x56, 0x7e,",
          "2782:  0xb6, 0xfb, 0xbf, 0xa5, 0x8c, 0x47, 0xb0, 0x19, 0x53, 0x4a, 0x22, 0x18, 0x0d, 0xa3, 0xba, 0x36,",
          "2783:  0x7a, 0x57, 0x8a, 0x31, 0x7a, 0xd7, 0xa3, 0xba, 0x75, 0xae, 0xcc, 0xbe, 0x12, 0x14, 0x72, 0xf8,",
          "2784:  0xc1, 0x9b, 0x3a, 0xa1, 0xe4, 0x08, 0xe9, 0x04, 0x15, 0x29, 0x59, 0x1f, 0xbc, 0xad, 0xd9, 0x82,",
          "2785:  0x30, 0x2b, 0x97, 0xec, 0xc0, 0xe8, 0x76, 0x94, 0xa4, 0x62, 0xaf, 0x72, 0x6c, 0x2f, 0xec, 0x72,",
          "2786:  0x94, 0xa4, 0x7c, 0x09, 0xd3, 0xd5, 0x66, 0x90, 0x04, 0x85, 0x0c, 0xf7, 0x9f, 0x9d, 0x4c, 0xf0,",
          "2787:  0xe5, 0x96, 0x97, 0xfa, 0xdb, 0x17, 0x76, 0xd9, 0xfe, 0xf1, 0x6a, 0xe6, 0xe0, 0xe0, 0x27, 0xec,",
          "2788:  0x83, 0x83, 0x7b, 0xfb, 0x73, 0x6f, 0x18, 0x96, 0xe8, 0x73, 0x87, 0x71, 0x98, 0xe7, 0x2c, 0xac,",
          "2789:  0x33, 0x86, 0x0f, 0x3b, 0x30, 0x61, 0xa9, 0x27, 0x17, 0x94, 0x02, 0x63, 0xd8, 0xda, 0xb9, 0xb2,",
          "2790:  0x80, 0x68, 0x8b, 0x74, 0x3f, 0xe3, 0xc0, 0x78, 0xcd, 0xf3, 0x77, 0xa2, 0x46, 0x83, 0xbc, 0x09,",
          "2791:  0x2a, 0xf5, 0xae, 0x3c, 0xa2, 0x11, 0xf5, 0xd3, 0x91, 0xf7, 0x65, 0x09, 0x47, 0x4d, 0xc1, 0xc6,",
          "2792:  0x70, 0xc3, 0xf3, 0xd3, 0x28, 0xe6, 0x6a, 0x97, 0xc5, 0x18, 0xbe, 0xc8, 0x21, 0x28, 0x31, 0x6c,",
          "2793:  0x93, 0xde, 0xf6, 0xf6, 0x54, 0xe1, 0x7c, 0xe4, 0xe7, 0x9a, 0x41, 0xa1, 0x4d, 0xe7, 0xfe, 0xf9,",
          "2794:  0x28, 0x8c, 0xcb, 0xb3, 0xd0, 0x43, 0x9f, 0x66, 0x28, 0x2f, 0xbe, 0x34, 0xd4, 0x8b, 0x4f, 0x60,",
          "2795:  0xcc, 0xe7, 0x69, 0x54, 0x72, 0x29, 0x3d, 0x66, 0x0c, 0x4c, 0x2a, 0x28, 0x32, 0xb3, 0x8c, 0x5a,",
          "2796:  0xe2, 0x1b, 0xa5, 0x28, 0xf2, 0x69, 0x07, 0x4e, 0xf8, 0x51, 0x18, 0x52, 0xdf, 0xd8, 0xf9, 0x91,",
          "2797:  0x22, 0x4e, 0xfb, 0x96, 0xb2, 0x4c, 0xcd, 0xa1, 0x6b, 0x0e, 0x81, 0x79, 0xf1, 0xe4, 0x05, 0x98,",
          "2798:  0x12, 0x6d, 0x76, 0x33, 0xb3, 0x3f, 0x36, 0xe7, 0xdf, 0x36, 0x12, 0xb3, 0xb4, 0x64, 0x5e, 0xc4,",
          "2799:  0x19, 0xf8, 0x81, 0x90, 0xd8, 0x23, 0xcb, 0xe0, 0xa3, 0x3e, 0x31, 0x4a, 0xd0, 0xa2, 0x20, 0x31,",
          "2800:  0x90, 0x98, 0x36, 0x62, 0x9a, 0x6c, 0x23, 0x7d, 0xb9, 0x4b, 0x93, 0x94, 0xaf, 0x31, 0xe3, 0x0f,",
          "2801:  0x76, 0x36, 0x86, 0x7d, 0x9c, 0x70, 0x00, 0x77, 0xb2, 0x23, 0x1d, 0xdd, 0x4a, 0x11, 0xd3, 0x49,",
          "2802:  0x76, 0xf3, 0x50, 0x7f, 0x77, 0x0e, 0x46, 0x93, 0x6d, 0x2f, 0xae, 0xf3, 0xb5, 0xad, 0x5c, 0xab,",
          "2803:  0x32, 0x5b, 0xb2, 0xc1, 0x00, 0x28, 0xe0, 0xee, 0x77, 0x1d, 0x38, 0xa9, 0xc6, 0x8a, 0xe7, 0x6f,",
          "2804:  0x53, 0x56, 0x96, 0xbc, 0x1d, 0xa6, 0xb5, 0x3f, 0xb9, 0x14, 0x75, 0x65, 0x00, 0xab, 0x6c, 0x22,",
          "2805:  0x8c, 0x98, 0xc1, 0x62, 0x8e, 0x9a, 0x2c, 0x40, 0x95, 0xa9, 0x2c, 0x8a, 0x8a, 0xf9, 0xa7, 0x7d,",
          "2806:  0xd6, 0xc5, 0xf5, 0x15, 0x59, 0xca, 0xd0, 0x90, 0x08, 0x66, 0x5a, 0x5e, 0x92, 0x72, 0x0d, 0x98,",
          "2807:  0x7b, 0xf9, 0x80, 0x47, 0x94, 0x3c, 0x8b, 0x65, 0x35, 0xcf, 0x08, 0xfb, 0x79, 0xbb, 0x5f, 0x1f,",
          "2808:  0x81, 0xa9, 0xcc, 0x14, 0x61, 0xe6, 0xa5, 0x9b, 0xb0, 0x35, 0x50, 0xef, 0xb5, 0xb5, 0x79, 0xb9,",
          "2809:  0x21, 0xe1, 0xa8, 0x29, 0x18, 0x75, 0xc7, 0x4b, 0x92, 0x3b, 0x51, 0x5c, 0x97, 0x73, 0x5a, 0x53,",
          "2810:  0xaf, 0x4b, 0x38, 0x6a, 0x0a, 0x66, 0x68, 0xb6, 0xa8, 0x17, 0xd3, 0x98, 0x9f, 0xea, 0xe7, 0x0d,",
          "2811:  0x4d, 0xcd, 0xa0, 0xd0, 0xa6, 0xe3, 0xb3, 0x33, 0x6d, 0x25, 0x4b, 0xad, 0x80, 0x86, 0xa9, 0x50,",
          "2812:  0xb3, 0x98, 0xd9, 0xb9, 0xb9, 0xba, 0x61, 0x33, 0x35, 0xb3, 0x33, 0x87, 0xc0, 0xbc, 0x78, 0xf2,",
          "2813:  0x51, 0x07, 0xa6, 0xbc, 0x3b, 0x89, 0x49, 0xfa, 0xe4, 0xd3, 0xf3, 0xd8, 0xd6, 0x2a, 0x93, 0x47,",
          "2814:  0x5a, 0x9b, 0x61, 0xf3, 0x3c, 0x03, 0xc2, 0xac, 0x50, 0xf2, 0x79, 0x07, 0x08, 0xdd, 0xa3, 0xfe,",
          "2815:  0x7a, 0x1c, 0xed, 0x06, 0x75, 0xd5, 0x87, 0xd2, 0x0f, 0x3e, 0xa6, 0xdb, 0x75, 0xa1, 0x8f, 0xaf,",
          "2816:  0x98, 0xde, 0xfd, 0x70, 0x1c, 0xa0, 0x83, 0xfb, 0x77, 0x65, 0x98, 0xb0, 0x66, 0xe5, 0x40, 0x13,",
          "2817:  0xeb, 0x7c, 0x9f, 0x99, 0xd8, 0xd2, 0x11, 0x4c, 0xec, 0x87, 0xa0, 0xea, 0x2b, 0x43, 0x51, 0x4c,",
          "2818:  0x92, 0x6a, 0xde, 0xfc, 0x18, 0x5b, 0xa1, 0x41, 0x68, 0x64, 0x92, 0x4b, 0x30, 0x63, 0xb1, 0x91,",
          "2819:  0x46, 0x66, 0x84, 0x1b, 0x19, 0x1d, 0x71, 0x58, 0xcc, 0x13, 0x60, 0x7f, 0x19, 0xf2, 0x2c, 0x73,",
          "2820:  0x6f, 0x02, 0x59, 0x2f, 0xb1, 0x9d, 0x93, 0x09, 0xa0, 0x8b, 0xeb, 0x2b, 0x0a, 0x8c, 0x36, 0x8d,",
          "2821:  0xfb, 0x75, 0x47, 0x77, 0xee, 0x23, 0xc8, 0x1e, 0xb8, 0x9d, 0xcd, 0x1e, 0xb8, 0x50, 0x48, 0x33,",
          "2822:  0x0f, 0xc9, 0x1c, 0xb8, 0x0e, 0xe3, 0x4b, 0x51, 0xbb, 0xed, 0x85, 0x75, 0xf2, 0x3a, 0x18, 0xf7,",
          "2823:  0xc5, 0x4f, 0xb9, 0x5f, 0xe0, 0xc7, 0xc9, 0x12, 0x8b, 0x0a, 0x47, 0x9e, 0x82, 0x11, 0x2f, 0x6e,",
          "2824:  0xaa, 0x3d, 0x02, 0x3f, 0x1d, 0x59, 0x8c, 0x9b, 0x09, 0x72, 0xa8, 0xfb, 0xd9, 0x12, 0xc0, 0x52,",
          "2825:  0xd4, 0xee, 0x78, 0x31, 0xad, 0x6f, 0x46, 0xff, 0x1f, 0x2c, 0x14, 0xae, 0xe3, 0x27, 0x1c, 0x20,",
          "2826:  0xac, 0x55, 0xa2, 0x90, 0x86, 0xe6, 0x44, 0x86, 0xad, 0x97, 0xbe, 0x82, 0xca, 0xc5, 0xc7, 0xcc,",
          "2827:  0x01, 0x85, 0x40, 0x43, 0x73, 0x08, 0x77, 0xf2, 0x69, 0x15, 0x6c, 0x2e, 0x67, 0x4f, 0xba, 0xf9,",
          "2828:  0xe9, 0xa4, 0x8c, 0x3d, 0xbb, 0x9f, 0x2b, 0xc1, 0x69, 0x61, 0xb6, 0xae, 0x79, 0xa1, 0xd7, 0xa4,",
          "2829:  0x6d, 0xa6, 0xd5, 0x61, 0xc3, 0xce, 0x3e, 0xf3, 0x63, 0x02, 0x75, 0xb0, 0x7d, 0xdc, 0xc1, 0x29,",
          "2830:  0x06, 0x95, 0x18, 0x46, 0x2b, 0x61, 0x90, 0x22, 0x67, 0x4e, 0x12, 0xa8, 0xa8, 0x6b, 0x07, 0xd2,",
          "2831:  0xd8, 0x14, 0x24, 0x48, 0xcf, 0xbb, 0x4b, 0x92, 0x3d, 0x6a, 0x41, 0xee, 0x97, 0x1d, 0xc8, 0x1b,",
          "2832:  0x51, 0xee, 0xe8, 0x8b, 0xd4, 0xb4, 0xbc, 0xa3, 0x9f, 0xcd, 0x24, 0x3b, 0x42, 0x62, 0xd6, 0x7b,",
          "2833:  0x60, 0xc2, 0x4b, 0x53, 0xda, 0xee, 0x08, 0xaf, 0xb3, 0xfc, 0x60, 0x91, 0x8d, 0x6b, 0x51, 0x3d,",
          "2834:  0x68, 0x04, 0xdc, 0xdb, 0xb4, 0xd9, 0xb9, 0x2f, 0x42, 0x45, 0x05, 0xf3, 0x0f, 0xd1, 0x99, 0x4f,",
          "2835:  0x67, 0xce, 0x26, 0x86, 0x0c, 0x97, 0x7b, 0x25, 0x18, 0xb0, 0x0a, 0xb2, 0x2a, 0x1b, 0x7b, 0x91,",
          "2836:  0xa9, 0xf2, 0xd1, 0x6c, 0x06, 0xd9, 0x13, 0x07, 0x19, 0x62, 0x0b, 0xfd, 0xce, 0xa2, 0x57, 0x71,",
          "2837:  0x73, 0xb6, 0x31, 0x21, 0xf5, 0xd3, 0xe7, 0x1b, 0xe4, 0x3c, 0x80, 0x31, 0xf3, 0xf2, 0x40, 0x5f,",
          "2838:  0x07, 0xe1, 0xcc, 0x6a, 0x80, 0x16, 0x15, 0x73, 0xea, 0x82, 0x30, 0x49, 0xbd, 0x56, 0xeb, 0x72,",
          "2839:  0x10, 0xa6, 0x72, 0x9b, 0xa2, 0x4d, 0xc0, 0x8a, 0x41, 0xa1, 0x4d, 0x77, 0xe6, 0x2d, 0x56, 0xbf,",
          "2840:  0x1c, 0xe5, 0x8c, 0xe8, 0x13, 0x25, 0x98, 0xbe, 0x14, 0x76, 0xd7, 0x2f, 0xad, 0x77, 0xb7, 0x5a,",
          "2841:  0x81, 0x7f, 0x95, 0xf6, 0x58, 0xa7, 0xed, 0xd0, 0xde, 0xca, 0xb2, 0x6c, 0x76, 0xdd, 0x69, 0x57,",
          "2842:  0x19, 0x10, 0x05, 0x8e, 0xa9, 0xd9, 0x08, 0xc2, 0x26, 0x8d, 0x3b, 0x71, 0x20, 0xbd, 0x71, 0x4b,",
          "2843:  0xcd, 0x8b, 0x06, 0x85, 0x36, 0x1d, 0xe3, 0x1d, 0xdd, 0x09, 0x69, 0x9c, 0xb7, 0x1f, 0x6b, 0x0c,",
          "2844:  0x88, 0x02, 0xc7, 0x88, 0xd2, 0xb8, 0x9b, 0xa4, 0xb2, 0xc5, 0x34, 0xd1, 0x26, 0x03, 0xa2, 0xc0,",
          "2845:  0xb1, 0xe1, 0x91, 0x74, 0xb7, 0x78, 0x80, 0x2d, 0x77, 0xd4, 0xb9, 0x21, 0xc0, 0xa8, 0xf0, 0x8c,",
          "2846:  0x74, 0x87, 0xf6, 0x96, 0xd9, 0x6a, 0x9a, 0xcb, 0x4c, 0xb8, 0x2a, 0xc0, 0xa8, 0xf0, 0xee, 0x3f,",
          "2847:  0x39, 0x40, 0xb2, 0xcd, 0xf1, 0x08, 0x16, 0xe4, 0x97, 0xb3, 0x0b, 0xf2, 0x31, 0x63, 0xa1, 0x59,",
          "2848:  0xf5, 0x87, 0xac, 0xcb, 0xbf, 0xe9, 0xc0, 0xa4, 0x1d, 0x16, 0x27, 0xcd, 0x9c, 0x21, 0x5a, 0xcb,",
          "2849:  0x1a, 0xa2, 0x7b, 0xfb, 0x73, 0x3f, 0x35, 0xe8, 0x56, 0x5c, 0x33, 0x48, 0xa3, 0x4e, 0xf2, 0x66,",
          "2851:  0x80, 0x25, 0x73, 0x6f, 0xc1, 0x4c, 0x5f, 0x3a, 0xca, 0x21, 0x8c, 0xce, 0x81, 0xc9, 0x86, 0xee,",
          "2854:  0x9c, 0x3b, 0x84, 0x2a, 0x1f, 0x77, 0x60, 0x4a, 0x6f, 0x8d, 0xb9, 0xc3, 0x5c, 0x48, 0x46, 0x07,",
          "2855:  0xd3, 0x40, 0x1f, 0xbb, 0x31, 0x87, 0x59, 0x7b, 0xee, 0x68, 0x0b, 0xc3, 0xac, 0x6c, 0x72, 0x13,",
          "2857:  0x0b, 0xd7, 0xa3, 0x3a, 0xdd, 0xd0, 0x94, 0xc6, 0x10, 0x1a, 0x18, 0x5a, 0x9c, 0xdc, 0xdf, 0x2b,",
          "2858:  0xc1, 0xc9, 0xbc, 0x4a, 0xe4, 0xdd, 0x30, 0xa9, 0xa4, 0x5b, 0x97, 0x01, 0x55, 0x44, 0x72, 0x12,",
          "2859:  0x2d, 0xdc, 0xbd, 0xfd, 0xb9, 0xb9, 0xfe, 0xdb, 0x90, 0xf3, 0x36, 0x09, 0x66, 0x98, 0x89, 0xf8,",
          "2861:  0x6a, 0xb2, 0x0e, 0xa7, 0x2c, 0xc8, 0x75, 0x1a, 0x34, 0xb7, 0xb7, 0xa2, 0x58, 0x64, 0x9d, 0x97,",
          "2862:  0x6b, 0x4f, 0x49, 0x2e, 0xa7, 0x70, 0x00, 0x0d, 0x0e, 0x2c, 0x49, 0xde, 0x04, 0x15, 0xdf, 0xeb,",
          "2864:  0x91, 0x43, 0x8e, 0xa0, 0x43, 0xad, 0xcb, 0x2f, 0x42, 0x85, 0xb1, 0x63, 0x76, 0xa3, 0x28, 0x96,",
          "2866:  0xba, 0xdc, 0xeb, 0x60, 0x48, 0xf2, 0x34, 0x94, 0xe9, 0x5e, 0x27, 0x1f, 0xeb, 0xb9, 0xb0, 0xd7,",
          "2867:  0x09, 0x62, 0x9a, 0x30, 0x22, 0xba, 0xd7, 0x21, 0x67, 0xa0, 0x14, 0xd4, 0xe5, 0x82, 0x02, 0x92,",
          "2868:  0xa6, 0xb4, 0xb2, 0x8c, 0xa5, 0xa0, 0xee, 0xee, 0x41, 0x55, 0xdf, 0x7a, 0x20, 0x3b, 0xca, 0xce,",
          "2870:  0xe7, 0x60, 0xc4, 0x8f, 0x64, 0xca, 0x65, 0xc5, 0xb0, 0xe1, 0x06, 0x96, 0x63, 0xdc, 0x5b, 0x30,",
          "2871:  0x7d, 0x35, 0x8c, 0xee, 0x84, 0x6c, 0xe1, 0xbb, 0x18, 0xd0, 0x56, 0x9d, 0x31, 0x6e, 0xb0, 0x1f,",
          "2873:  0x70, 0x32, 0x9f, 0xf3, 0xf5, 0x3d, 0xdb, 0x61, 0x7c, 0x98, 0x29, 0xa3, 0x92, 0x8a, 0xd6, 0x3a,",
          "2874:  0xe2, 0xf8, 0xf2, 0x79, 0x98, 0xdc, 0xea, 0x06, 0xad, 0xba, 0xfc, 0x96, 0xfa, 0xe8, 0xb4, 0xa9,",
          "2875:  0x9a, 0x85, 0xc3, 0x0c, 0x25, 0xf3, 0xd3, 0xb6, 0x82, 0xd0, 0x8b, 0x7b, 0xeb, 0x66, 0xdd, 0xd0,",
          "2876:  0xe6, 0xa9, 0xa6, 0x31, 0x68, 0x51, 0xb9, 0x7f, 0x53, 0x06, 0x73, 0xfd, 0x82, 0x04, 0xf2, 0x74,",
          "2877:  0xdc, 0x29, 0x22, 0x6c, 0xb5, 0xd1, 0x0b, 0x7d, 0x73, 0xd1, 0xa3, 0x92, 0x3b, 0x1c, 0xff, 0x98,",
          "2878:  0xc3, 0x3c, 0xc4, 0x20, 0x0d, 0x3c, 0x6e, 0x2c, 0xe4, 0x46, 0x69, 0xbd, 0xa0, 0x03, 0xd4, 0x15,",
          "2879:  0xc1, 0x39, 0x8a, 0x6d, 0x9f, 0x53, 0x0b, 0x43, 0x5b, 0x32, 0x79, 0x49, 0x86, 0x9c, 0xcb, 0x85,",
          "2880:  0xe5, 0x56, 0x54, 0x72, 0x71, 0xe6, 0x0e, 0x8c, 0xc6, 0x34, 0x8d, 0x55, 0x56, 0xcb, 0xd5, 0xe3,",
          "2881:  0x1e, 0xc0, 0xa5, 0x71, 0x6f, 0x23, 0x65, 0x9b, 0xb1, 0xa6, 0xe5, 0x18, 0x71, 0x30, 0x0a, 0x41,",
          "2882:  0x6e, 0x02, 0xa4, 0xbf, 0x2d, 0x8e, 0x18, 0xc5, 0x5d, 0x80, 0xaa, 0xd7, 0x4d, 0xa3, 0x36, 0x6b,",
          "2883:  0x26, 0xde, 0x3d, 0x15, 0x2b, 0x4e, 0xad, 0x10, 0x68, 0x68, 0xdc, 0x57, 0x47, 0x21, 0x77, 0x5c,",
          "2884:  0x4d, 0xf6, 0xec, 0xab, 0x43, 0x4e, 0xb1, 0x57, 0x87, 0xb4, 0x32, 0x83, 0xae, 0x0f, 0x91, 0x26,",
          "2885:  0x8c, 0x76, 0xb6, 0xbd, 0x44, 0xcd, 0xd1, 0x17, 0x55, 0x33, 0xad, 0x33, 0xe0, 0xbd, 0xfd, 0xb9,",
          "2886:  0x9f, 0x3e, 0x9c, 0x1f, 0xc8, 0xc6, 0xea, 0x82, 0xc8, 0xdd, 0x33, 0xa2, 0x39, 0x0f, 0x14, 0xfc,",
          "2887:  0x6d, 0x4f, 0xb0, 0x7c, 0xc0, 0x9e, 0xf6, 0x23, 0x8e, 0xc8, 0x71, 0x42, 0x9a, 0x74, 0x5b, 0xa9,",
          "2888:  0x1c, 0x0d, 0x2f, 0x16, 0x38, 0xcb, 0x04, 0x63, 0x93, 0xec, 0x24, 0xbe, 0xd1, 0x12, 0x4a, 0xde,",
          "2889:  0x0d, 0xd5, 0x24, 0xf5, 0xe2, 0xf4, 0x01, 0x53, 0x23, 0x74, 0xa3, 0x6f, 0x28, 0x26, 0x68, 0xf8,",
          "2890:  0x91, 0x77, 0x01, 0x34, 0x82, 0x30, 0x48, 0xb6, 0x1f, 0xf0, 0xa4, 0x88, 0x2b, 0x7e, 0x51, 0x73,",
          "2891:  0x40, 0x8b, 0x1b, 0xb3, 0x6e, 0x7c, 0x6c, 0x8b, 0x90, 0x66, 0x85, 0xaf, 0xa5, 0xda, 0xba, 0xa1,",
          "2892:  0xc6, 0xa0, 0x45, 0xe5, 0x7e, 0x10, 0x1e, 0xcf, 0x5f, 0xdb, 0x95, 0x5b, 0xc3, 0x66, 0x1c, 0x75,",
          "2893:  0x3b, 0xf9, 0xb5, 0x84, 0x5f, 0xeb, 0x44, 0x81, 0x63, 0x36, 0x7e, 0x27, 0x08, 0xeb, 0x79, 0x1b,",
          "2894:  0x7f, 0x35, 0x08, 0xeb, 0xc8, 0x31, 0x87, 0xb8, 0x53, 0xf5, 0x27, 0x0e, 0x9c, 0x3b, 0xe8, 0x76,",
          "2895:  0x31, 0xdb, 0xf6, 0xdf, 0xf1, 0xe2, 0x50, 0xde, 0x97, 0xe0, 0xb6, 0xe3, 0x96, 0x17, 0x87, 0xc8,",
          "2897:  0x74, 0xb4, 0x46, 0xa4, 0xa2, 0xa1, 0x14, 0xe8, 0xbe, 0xea, 0x00, 0x59, 0xdb, 0xa5, 0x71, 0x1c,",
          "2898:  0xd4, 0xad, 0x04, 0x36, 0xf2, 0x1c, 0x4c, 0xde, 0xde, 0x58, 0xbb, 0xbe, 0x1e, 0x05, 0x21, 0xcf,",
          "2899:  0xc3, 0xb6, 0xd2, 0x26, 0xae, 0x58, 0x70, 0xcc, 0x50, 0x91, 0x25, 0x98, 0xb9, 0xfd, 0x32, 0x5b,",
          "2900:  0x72, 0x2e, 0xec, 0x75, 0x62, 0x9a, 0x24, 0xfa, 0x85, 0x80, 0xaa, 0x38, 0x98, 0xba, 0xf2, 0x62,",
          "2901:  0x0e, 0x89, 0xfd, 0xf4, 0xee, 0x97, 0x4a, 0x30, 0x61, 0x5d, 0xa8, 0x3f, 0x84, 0x3f, 0x92, 0x7b,",
          "2902:  0x03, 0xa0, 0x74, 0xc8, 0x37, 0x00, 0x9e, 0x81, 0x4a, 0x27, 0x6a, 0x05, 0x7e, 0xa0, 0x13, 0xac,",
          "2903:  0x27, 0xf9, 0xe9, 0x95, 0x84, 0xa1, 0xc6, 0x92, 0x3b, 0x50, 0xd5, 0x37, 0x63, 0x65, 0xca, 0x55,",
          "2904:  0x51, 0x1e, 0x99, 0x9e, 0x6b, 0xe6, 0xc6, 0xab, 0x91, 0x45, 0x5c, 0x18, 0xe3, 0x03, 0x55, 0xc5,",
          "2905:  0xe6, 0xf9, 0x19, 0x3e, 0x1f, 0xc1, 0x09, 0x4a, 0x8c, 0xfb, 0x6f, 0xa3, 0x50, 0x45, 0xda, 0x89,",
          "2906:  0x96, 0x62, 0x5a, 0x4f, 0xc8, 0x6b, 0xa1, 0xdc, 0x8d, 0x5b, 0xb2, 0xb1, 0x74, 0x98, 0xe7, 0x06,",
          "2907:  0xae, 0x22, 0x83, 0x67, 0x56, 0x87, 0xd2, 0x91, 0xce, 0xf8, 0xca, 0x07, 0x9e, 0xf1, 0xbd, 0x00,",
          "2908:  0x53, 0x49, 0xb2, 0xbd, 0x1e, 0x07, 0xbb, 0x5e, 0xca, 0xc6, 0x9c, 0x8c, 0x89, 0x98, 0x43, 0x95,",
          "2909:  0x8d, 0xcb, 0x06, 0x89, 0x59, 0x5a, 0x72, 0x09, 0x66, 0xcc, 0x49, 0x1b, 0x8d, 0x53, 0x1e, 0x02,",
          "2910:  0x11, 0xd1, 0x12, 0x7d, 0xa6, 0x61, 0xce, 0xe6, 0x24, 0x01, 0xf6, 0x97, 0x21, 0xcb, 0x70, 0x32,",
          "2911:  0x03, 0x64, 0x8a, 0x88, 0x50, 0xca, 0xac, 0xe4, 0x73, 0x32, 0xc3, 0x87, 0xe9, 0xd2, 0x57, 0x82,",
          "2912:  0x5c, 0x83, 0xc7, 0x45, 0xff, 0xf2, 0x1b, 0xd5, 0xba, 0x46, 0xe3, 0x9c, 0xd1, 0x0f, 0x49, 0x46,",
          "2913:  0x8f, 0x5f, 0xea, 0x27, 0xc1, 0x41, 0xe5, 0xd8, 0x08, 0xd5, 0xe0, 0x95, 0x65, 0x69, 0xd8, 0xf4,",
          "2916:  0x64, 0x0b, 0xce, 0x68, 0xd4, 0x05, 0x36, 0x7b, 0x3b, 0x71, 0x90, 0xd0, 0x9a, 0x97, 0xd0, 0x1b,",
          "2918:  0xfb, 0x70, 0x61, 0xce, 0x05, 0x0d, 0xbd, 0xad, 0x16, 0x5d, 0x5b, 0x5a, 0xe1, 0x37, 0xdd, 0x2c,",
          "2919:  0xe7, 0xe2, 0x82, 0x42, 0xa0, 0xa1, 0xd1, 0xae, 0xfd, 0xe4, 0x50, 0xd7, 0xfe, 0x9b, 0x0e, 0x4c,",
          "2920:  0xe9, 0xc1, 0xfe, 0x08, 0xe2, 0x5d, 0xad, 0x6c, 0xbc, 0xeb, 0xd2, 0x71, 0xbd, 0x3a, 0xa9, 0xf9,",
          "2921:  0x90, 0x8d, 0xd8, 0xaf, 0x54, 0x01, 0xf8, 0x3b, 0x2b, 0x01, 0xcf, 0xb6, 0x3c, 0x07, 0x23, 0x31,",
          "2922:  0xed, 0x44, 0x79, 0xcb, 0xc7, 0x28, 0x90, 0x63, 0xbe, 0x7f, 0xa7, 0xf3, 0xa0, 0x33, 0xdf, 0xd1,",
          "2923:  0xef, 0xed, 0x99, 0xef, 0x06, 0x3c, 0x11, 0x84, 0x09, 0xf5, 0xbb, 0xb1, 0x5c, 0xe8, 0x2e, 0x47,",
          "2924:  0x89, 0xb6, 0x0e, 0x95, 0xda, 0x6b, 0x25, 0xa3, 0x27, 0x56, 0x06, 0x11, 0xe1, 0xe0, 0xb2, 0xac,",
          "2925:  0x49, 0x15, 0x42, 0x5e, 0xeb, 0x30, 0xe1, 0x01, 0x09, 0x47, 0x4d, 0x61, 0x26, 0xc4, 0x6a, 0x43,",
          "2926:  0xdd, 0xdb, 0xc8, 0x4d, 0x88, 0xd5, 0x8b, 0x1b, 0x68, 0x68, 0x06, 0x5b, 0xc5, 0x6a, 0x41, 0x56,",
          "2927:  0x11, 0x8e, 0x6c, 0x15, 0xd5, 0xfc, 0x9c, 0x18, 0x7a, 0x2b, 0x5f, 0x2d, 0xd6, 0x93, 0x43, 0x17,",
          "2928:  0xeb, 0xb7, 0xc3, 0x74, 0x10, 0x6e, 0xd3, 0x38, 0x48, 0x69, 0x9d, 0xcf, 0x85, 0xd9, 0x29, 0xde,",
          "2929:  0x10, 0x3a, 0x72, 0xb5, 0x92, 0xc1, 0x62, 0x8e, 0x3a, 0x6b, 0x54, 0xa6, 0x0f, 0x61, 0x54, 0x86,",
          "2930:  0x98, 0xf2, 0x13, 0xc5, 0x98, 0xf2, 0x93, 0xc7, 0x37, 0xe5, 0x33, 0x0f, 0xd5, 0x94, 0x93, 0x22,",
          "2931:  0x4c, 0xb9, 0xfb, 0x4a, 0x09, 0x9e, 0x30, 0x96, 0x89, 0x8d, 0x87, 0xa0, 0xc1, 0xe6, 0x26, 0xbf,",
          "2932:  0x0c, 0x27, 0xd2, 0x23, 0xac, 0x20, 0xa7, 0x89, 0x97, 0x6a, 0x0c, 0x5a, 0x54, 0x3c, 0x56, 0x48,",
          "2933:  0x63, 0x9e, 0x69, 0x99, 0x37, 0x5b, 0x4b, 0x12, 0x8e, 0x9a, 0x82, 0x3f, 0xaa, 0x46, 0xe3, 0x54,",
          "2934:  0x9e, 0x95, 0xe4, 0x73, 0x87, 0x96, 0x0c, 0x0a, 0x6d, 0x3a, 0xe6, 0xde, 0xf9, 0x6a, 0xca, 0x30,",
          "2935:  0xd3, 0x35, 0x29, 0xdc, 0x3b, 0x3d, 0x4b, 0x34, 0x56, 0xa9, 0xc3, 0x83, 0xc2, 0xa3, 0xfd, 0xea,",
          "2936:  0xf0, 0x4d, 0xbe, 0xa6, 0x70, 0xff, 0xc7, 0x81, 0xd7, 0x0c, 0x6c, 0x8a, 0x47, 0xb0, 0x1c, 0xed,",
          "2937:  0x65, 0x97, 0xa3, 0x8d, 0xe3, 0x2f, 0x47, 0x7d, 0xb5, 0x18, 0xb2, 0x34, 0xfd, 0xad, 0x03, 0xd3,",
          "2938:  0x86, 0xfe, 0x11, 0x54, 0x35, 0x28, 0xf4, 0x79, 0x34, 0xa3, 0xba, 0xc8, 0x00, 0xcc, 0xd4, 0xed,",
          "2939:  0x9b, 0xbc, 0x6e, 0x62, 0xaf, 0xb4, 0xe8, 0xab, 0xf7, 0x47, 0x0e, 0xd8, 0x74, 0xf4, 0x60, 0x8c,",
          "2940:  0xdf, 0x18, 0x4d, 0x8a, 0xd9, 0xb3, 0x65, 0xe5, 0xf3, 0xb0, 0xa5, 0xd9, 0xb3, 0xf1, 0xcf, 0x04,",
          "2941:  0xa5, 0x40, 0x9e, 0x07, 0x1c, 0x24, 0xcc, 0xbe, 0xd5, 0x65, 0x78, 0xd5, 0xe4, 0x01, 0x4b, 0x38,",
          "2942:  0x6a, 0x0a, 0xb7, 0x0d, 0xb3, 0x59, 0xe6, 0xcb, 0xb4, 0xc1, 0x43, 0x63, 0x87, 0xaa, 0xe6, 0x02,",
          "2943:  0x54, 0x3d, 0x5e, 0x6a, 0xb5, 0xeb, 0xe5, 0x1f, 0x21, 0x59, 0x54, 0x08, 0x34, 0x34, 0xee, 0xef,",
          "2944:  0x3a, 0xf0, 0xf8, 0x80, 0xca, 0x14, 0x18, 0x56, 0x4e, 0x8d, 0x15, 0x18, 0xf2, 0x30, 0x4c, 0x9d,",
          "2945:  0x36, 0x3c, 0x15, 0x7c, 0xb1, 0x62, 0x35, 0xcb, 0x02, 0x8c, 0x0a, 0xef, 0xfe, 0xbb, 0x03, 0x27,",
          "2946:  0xb2, 0xba, 0x26, 0xe4, 0x0a, 0x10, 0x51, 0x99, 0xe5, 0x20, 0xf1, 0xa3, 0x5d, 0x1a, 0xf7, 0x58,",
          "2947:  0xcd, 0x85, 0xd6, 0x67, 0x24, 0x27, 0xb2, 0xd8, 0x47, 0x81, 0x03, 0x4a, 0x91, 0x4f, 0xf2, 0xd4,",
          "2948:  0x1b, 0xd5, 0xda, 0x6a, 0xa4, 0xdc, 0x2c, 0x72, 0xa4, 0x98, 0xce, 0xb4, 0x77, 0xbc, 0x5a, 0x24,",
          "2949:  0xda, 0xf2, 0xdd, 0x6f, 0x8d, 0x80, 0x3e, 0x77, 0xe2, 0xdb, 0xfc, 0x82, 0x82, 0x24, 0x99, 0x97,",
          "2950:  0x6a, 0xca, 0x47, 0x78, 0xa9, 0x66, 0xe4, 0x7e, 0x7b, 0x7a, 0xf1, 0x6c, 0x8a, 0xf1, 0x1d, 0x2d,",
          "2951:  0xa3, 0xbf, 0x69, 0x50, 0x68, 0xd3, 0x31, 0x4d, 0x5a, 0xc1, 0x2e, 0x15, 0x85, 0xc6, 0xb2, 0x9a,",
          "2952:  0xac, 0x2a, 0x04, 0x1a, 0x1a, 0xa6, 0x49, 0x3d, 0x68, 0x34, 0xe4, 0xce, 0x4e, 0x6b, 0xc2, 0x5a,",
          "2953:  0x07, 0x39, 0x86, 0x51, 0x6c, 0x47, 0xd1, 0x8e, 0xf4, 0xd7, 0x34, 0xc5, 0xe5, 0x28, 0xda, 0x41,",
          "2954:  0x8e, 0x61, 0x1e, 0x46, 0x18, 0xc5, 0x6d, 0xaf, 0x15, 0xbc, 0x8f, 0xd6, 0xb5, 0x14, 0xe9, 0xa7,",
          "2955:  0x69, 0x0f, 0xe3, 0x7a, 0x3f, 0x09, 0x0e, 0x2a, 0xc7, 0x46, 0x60, 0x27, 0xa6, 0xf5, 0xc0, 0x4f,",
          "2956:  0x6d, 0x6e, 0x90, 0x1d, 0x81, 0xeb, 0x7d, 0x14, 0x38, 0xa0, 0x14, 0x59, 0x84, 0x13, 0xea, 0xdc,",
          "2957:  0x50, 0xe5, 0x76, 0x08, 0xe7, 0x4d, 0xfb, 0xcd, 0x98, 0x45, 0x63, 0x9e, 0x9e, 0x59, 0x9b, 0xb6,",
          "2958:  0xcc, 0xb0, 0xe1, 0x6e, 0x9d, 0x65, 0x6d, 0x54, 0xe6, 0x0d, 0x6a, 0x0a, 0xf7, 0xf7, 0x4b, 0x6c,",
          "2959:  0x75, 0x1c, 0x72, 0x21, 0xf2, 0x91, 0x05, 0xe5, 0xb2, 0x23, 0x72, 0xe4, 0x10, 0x23, 0xf2, 0x39,",
          "2960:  0x98, 0xbc, 0x9d, 0x44, 0xa1, 0x0e, 0x78, 0x8d, 0x0e, 0x0d, 0x78, 0x59, 0x54, 0x83, 0x03, 0x5e,",
          "2961:  0x63, 0x47, 0x0c, 0x78, 0xfd, 0xc5, 0x28, 0x9c, 0xd6, 0x47, 0xbd, 0x34, 0xbd, 0x13, 0xc5, 0x3b,",
          "2962:  0x41, 0xd8, 0xe4, 0xc7, 0xa3, 0x5f, 0x74, 0x60, 0x52, 0x0c, 0x6f, 0x79, 0x75, 0x5c, 0x1c, 0x07,",
          "2963:  0x36, 0x0a, 0xba, 0xdd, 0x93, 0x11, 0x36, 0xbf, 0x69, 0x09, 0xca, 0xdd, 0xe3, 0xb7, 0x51, 0x98,",
          "2964:  0xd1, 0x88, 0x7c, 0x00, 0x40, 0xbd, 0x6f, 0xd4, 0x28, 0xe8, 0x95, 0x27, 0xa5, 0x1f, 0xd2, 0x86,",
          "2965:  0x71, 0x25, 0x37, 0xb5, 0x10, 0xb4, 0x04, 0x92, 0x57, 0x1c, 0x18, 0x6b, 0x89, 0xb6, 0x11, 0x67,",
          "2966:  0x3b, 0x2f, 0x3d, 0x94, 0xb6, 0xb1, 0x5b, 0x45, 0x2f, 0xcb, 0xb2, 0x3d, 0xa4, 0x7c, 0x82, 0x30,",
          "2967:  0x1e, 0x84, 0x4d, 0xd6, 0xad, 0x32, 0x46, 0xf8, 0x86, 0x41, 0xa9, 0x05, 0xab, 0x91, 0x57, 0xaf,",
          "2968:  0x79, 0x2d, 0x2f, 0xf4, 0x69, 0xbc, 0x22, 0xc8, 0xed, 0x57, 0x66, 0x38, 0x00, 0x15, 0xa3, 0xbe,",
          "2969:  0xeb, 0x6b, 0xa3, 0x87, 0xb9, 0xbe, 0x76, 0xe6, 0x1d, 0x30, 0xd3, 0xd7, 0x99, 0x47, 0xba, 0xd4,",
          "2970:  0xff, 0x93, 0x30, 0xf1, 0x80, 0x45, 0xdd, 0x3f, 0x1d, 0x33, 0x6b, 0xcc, 0xf5, 0xa8, 0x2e, 0x2e,",
          "2971:  0x51, 0xc5, 0xa6, 0x47, 0xa5, 0xab, 0x58, 0xe0, 0x10, 0xb1, 0x5e, 0xaa, 0xd1, 0x40, 0xb4, 0x45,",
          "2972:  0xb2, 0x31, 0xda, 0xf1, 0x62, 0x1a, 0x3e, 0xec, 0x31, 0xba, 0xae, 0x85, 0xa0, 0x25, 0x90, 0x6c,",
          "2973:  0x67, 0x0e, 0x1f, 0x2f, 0x1e, 0xff, 0xf0, 0x91, 0x79, 0xaf, 0x03, 0x2f, 0xbb, 0x7c, 0xda, 0x81,",
          "2974:  0xe9, 0x30, 0x33, 0x72, 0xe5, 0x01, 0xd4, 0xe6, 0xc3, 0x98, 0x15, 0xe2, 0xf2, 0x6a, 0x16, 0x86,",
          "2975:  0x39, 0xf9, 0x83, 0x56, 0xa0, 0xd1, 0x23, 0xae, 0x40, 0xe6, 0x36, 0xe6, 0xd8, 0xb0, 0xdb, 0x98,",
          "2976:  0x24, 0xd4, 0xf7, 0xb0, 0xc7, 0x0b, 0xbf, 0x87, 0x0d, 0x03, 0xee, 0x60, 0xdf, 0x82, 0xaa, 0x1f,",
          "2977:  0x53, 0x2f, 0x7d, 0xc0, 0x2b, 0xb9, 0xfc, 0x6d, 0xb0, 0x25, 0xc5, 0x00, 0x0d, 0x2f, 0xf7, 0xaf,",
          "2978:  0xcb, 0x70, 0x52, 0xb5, 0x88, 0x3a, 0x98, 0x61, 0xcb, 0x99, 0x90, 0x6b, 0x7c, 0x51, 0xbd, 0x9c,",
          "2979:  0x5d, 0x56, 0x08, 0x34, 0x34, 0xcc, 0x7d, 0xea, 0x26, 0x74, 0xad, 0x43, 0xc3, 0xd5, 0x60, 0x2b,",
          "2980:  0xe1, 0x2d, 0x6e, 0x65, 0x77, 0xdd, 0x30, 0x28, 0xb4, 0xe9, 0x98, 0xef, 0x2c, 0xdc, 0xd8, 0x24,",
          "2981:  0x7f, 0xce, 0x29, 0xdd, 0x63, 0x54, 0x78, 0xf2, 0x85, 0x81, 0x0f, 0x2a, 0x14, 0x73, 0xc2, 0xdf,",
          "2982:  0x77, 0x1e, 0x75, 0xc4, 0x97, 0x14, 0x5e, 0x75, 0xe0, 0xc4, 0x4e, 0x26, 0xb5, 0x44, 0x99, 0xe4,",
          "2983:  0x63, 0x26, 0x2c, 0x66, 0xf3, 0x55, 0xcc, 0x10, 0xce, 0xc2, 0x13, 0xcc, 0x4b, 0x77, 0xff, 0xcb,",
          "2984:  0x01, 0xdb, 0x3c, 0x1d, 0xce, 0x11, 0xb2, 0x9e, 0xc8, 0x29, 0x1d, 0xf0, 0x44, 0x8e, 0xf2, 0x99,",
          "2985:  0xca, 0x87, 0xf3, 0xd1, 0x47, 0x8e, 0xe0, 0xa3, 0x8f, 0x0e, 0x75, 0xb2, 0x5e, 0x0b, 0xe5, 0x6e,",
          "2986:  0x50, 0x97, 0x6e, 0xb6, 0x39, 0x6b, 0x5a, 0x59, 0x46, 0x06, 0x77, 0xff, 0x78, 0xd4, 0x6c, 0xab,",
          "2987:  0xe5, 0xc1, 0xf4, 0x0f, 0x44, 0xb5, 0x1b, 0x3a, 0xff, 0x54, 0xd4, 0xfc, 0x7a, 0x5f, 0xfe, 0xe9,",
          "2988:  0xdb, 0x8e, 0x9e, 0x77, 0x20, 0x1a, 0x68, 0x58, 0xfa, 0xe9, 0xf8, 0x01, 0x49, 0x07, 0xb7, 0xa1,",
          "2989:  0xc2, 0x76, 0x22, 0x3c, 0x3e, 0x56, 0xc9, 0x28, 0x55, 0xb9, 0x2c, 0xe1, 0xf7, 0xf6, 0xe7, 0xde,",
          "2990:  0x7a, 0x74, 0xb5, 0x54, 0x69, 0xd4, 0xfc, 0x49, 0x02, 0x55, 0xf6, 0x9b, 0xe7, 0x47, 0xc8, 0x3d,",
          "2991:  0xce, 0x0d, 0x6d, 0x8b, 0x14, 0xa2, 0x90, 0xe4, 0x0b, 0x23, 0x87, 0x84, 0x50, 0xe5, 0x8f, 0xb9,",
          "2992:  0x70, 0xa1, 0x62, 0x2b, 0xb4, 0xae, 0xb3, 0x14, 0x14, 0xe2, 0xde, 0xfe, 0xdc, 0x0b, 0x47, 0x17,",
          "2993:  0xaa, 0x8b, 0xa3, 0x11, 0xe1, 0x7e, 0xa7, 0x6c, 0xc6, 0xae, 0x4c, 0x3b, 0xfe, 0x81, 0x18, 0xbb,",
          "2994:  0xcf, 0xe7, 0xc6, 0xee, 0xb9, 0xbe, 0xb1, 0x3b, 0x6d, 0x1e, 0x3c, 0xc9, 0x8c, 0xc6, 0x47, 0xbd,",
          "2995:  0xc0, 0x1e, 0xbc, 0xed, 0xe6, 0x9e, 0xc5, 0xcb, 0xdd, 0x20, 0xa6, 0xc9, 0x7a, 0xdc, 0x0d, 0x83,",
          "2996:  0xb0, 0xc9, 0x87, 0x63, 0xc5, 0xf6, 0x2c, 0x32, 0x68, 0xcc, 0xd3, 0xbb, 0x5f, 0xe2, 0xc7, 0x89,",
          "2997:  0x56, 0xaa, 0x15, 0xeb, 0xe5, 0x16, 0x7f, 0x0f, 0x47, 0x24, 0x7b, 0xea, 0x5e, 0x16, 0x8f, 0xe0,",
          "2998:  0x08, 0x1c, 0xb9, 0x03, 0xe3, 0x5b, 0xe2, 0x4e, 0x7e, 0x31, 0x77, 0x7f, 0xe4, 0x05, 0x7f, 0x7e,",
          "2999:  0xcb, 0x52, 0xdd, 0xf6, 0xbf, 0x67, 0x7e, 0xa2, 0x92, 0xe6, 0xfe, 0x7a, 0x19, 0x4e, 0xe4, 0x5e,",
          "3000:  0x6b, 0x61, 0xfb, 0x73, 0xf5, 0x34, 0x4f, 0x3e, 0x98, 0xae, 0x9f, 0xa0, 0xd5, 0x14, 0xe4, 0xbd,",
          "3001:  0x00, 0x75, 0xda, 0x69, 0x45, 0x3d, 0xee, 0xb8, 0x8c, 0x1c, 0xd9, 0x71, 0xd1, 0xbe, 0xee, 0xb2,",
          "3002:  0xe6, 0x82, 0x16, 0x47, 0x99, 0xe1, 0x3a, 0x2a, 0x5e, 0x1c, 0xc8, 0x66, 0xb8, 0x5a, 0x57, 0xe0,",
          "3003:  0xc6, 0x1e, 0xed, 0x15, 0xb8, 0x00, 0x4e, 0x08, 0x15, 0x75, 0x42, 0xd3, 0x03, 0xe4, 0x2d, 0x3d,",
          "3004:  0xce, 0x46, 0xd4, 0x72, 0x96, 0x0d, 0xe6, 0xf9, 0xba, 0x9f, 0x2a, 0x31, 0xf7, 0x4d, 0x34, 0xf6,",
          "3005:  0x35, 0x15, 0xcb, 0x7e, 0x3d, 0x8c, 0x79, 0xdd, 0x74, 0x3b, 0xea, 0x7b, 0x23, 0x61, 0x91, 0x43,",
          "3006:  0x51, 0x62, 0xc9, 0x2a, 0x8c, 0xd4, 0xbd, 0x54, 0x3d, 0xa1, 0x7e, 0x14, 0xe5, 0x4c, 0xe0, 0xca,",
          "3007:  0x4b, 0x29, 0x72, 0x2e, 0xe4, 0x29, 0x18, 0x49, 0xbd, 0x66, 0xe6, 0xf1, 0xc6, 0x4d, 0xaf, 0x99,",
          "3008:  0x20, 0x87, 0xda, 0xab, 0xcb, 0xc8, 0x01, 0xab, 0xcb, 0x0b, 0xd6, 0xe3, 0xfe, 0xd6, 0x21, 0x49,",
          "3009:  0xff, 0x83, 0xfc, 0x22, 0xe7, 0x3e, 0x43, 0xeb, 0xfe, 0x18, 0x4c, 0xda, 0x0f, 0xf6, 0x1f, 0xea,",
          "3010:  0xca, 0x8e, 0xfb, 0xaf, 0x23, 0x30, 0x95, 0x49, 0x7a, 0xcb, 0x8c, 0x72, 0xe7, 0xc0, 0x51, 0xfe,",
          "3011:  0x34, 0x8c, 0x76, 0xe2, 0x6e, 0x48, 0x65, 0x4a, 0xa3, 0x16, 0xc2, 0xe6, 0x3d, 0x45, 0x81, 0x63,",
          "3012:  0xbd, 0x52, 0x8f, 0x7b, 0xd8, 0x0d, 0x65, 0x10, 0x5d, 0xf7, 0xca, 0x32, 0x87, 0xa2, 0xc4, 0xb2,",
          "3013:  0x0d, 0xec, 0x64, 0xc2, 0x8d, 0xa2, 0xb0, 0x11, 0x72, 0xd6, 0x5c, 0x29, 0xe2, 0x5d, 0x29, 0x99,",
          "3014:  0xe0, 0xc9, 0x37, 0xf4, 0x36, 0x04, 0x33, 0x12, 0xc9, 0x47, 0x1d, 0xfb, 0x45, 0xad, 0xb1, 0x22,",
          "3015:  0x0e, 0x7f, 0xf2, 0x39, 0x85, 0x62, 0x06, 0xdd, 0xff, 0x61, 0xad, 0x44, 0x4f, 0xe0, 0xf1, 0x87,",
          "3016:  0x33, 0x81, 0x61, 0xc0, 0xe4, 0x7d, 0x23, 0x54, 0xdb, 0x5e, 0x18, 0x34, 0x68, 0x92, 0x8a, 0x3f,",
          "3017:  0xdb, 0xa8, 0x8a, 0xdd, 0xd3, 0x35, 0x05, 0x44, 0x83, 0xe7, 0x7f, 0x69, 0xc3, 0x2b, 0x26, 0x36,",
          "3018:  0x31, 0x55, 0xeb, 0x2f, 0x6d, 0x0c, 0x18, 0x6d, 0x1a, 0xf7, 0x0f, 0x1c, 0x78, 0x62, 0x60, 0x63,",
          "3019:  0x7c, 0xff, 0x46, 0x2b, 0xdd, 0x3f, 0x2c, 0xc1, 0xe3, 0x03, 0x92, 0x42, 0x49, 0xef, 0xa1, 0x3d,",
          "3020:  0xbc, 0x26, 0xb3, 0x4e, 0xa7, 0x86, 0x8e, 0x8d, 0xa3, 0x2d, 0x43, 0x66, 0x29, 0x28, 0x3f, 0xd2,",
          "3021:  0xa5, 0xc0, 0xfd, 0x52, 0x09, 0xac, 0x27, 0x02, 0xc9, 0x07, 0xed, 0xfc, 0x67, 0xa7, 0xa8, 0x5c,",
          "3022:  0x5d, 0xc1, 0x5c, 0xe7, 0x4f, 0x8b, 0x56, 0x1b, 0x94, 0x4e, 0x9d, 0x1f, 0xaf, 0xa5, 0x83, 0xc7,",
          "3023:  0x2b, 0x69, 0xa9, 0x44, 0xf3, 0x72, 0xf1, 0x89, 0xe6, 0xd5, 0xbe, 0x24, 0xf3, 0x5f, 0x75, 0xc4,",
          "3024:  0x48, 0xcb, 0x55, 0xc9, 0x58, 0x58, 0xe7, 0x3e, 0x16, 0xf6, 0x4d, 0x50, 0x49, 0x68, 0xab, 0xc1,",
          "3025:  0x3c, 0x3b, 0x69, 0x89, 0xf5, 0x98, 0xd8, 0x90, 0x70, 0xd4, 0x14, 0xfc, 0x0a, 0x6a, 0xab, 0x15,",
          "3026:  0xdd, 0xb9, 0xd0, 0xee, 0xa4, 0x3d, 0x69, 0x93, 0xcd, 0x15, 0x54, 0x8d, 0x41, 0x8b, 0xca, 0xfd,",
          "3027:  0x6f, 0x47, 0x74, 0xa7, 0xf4, 0xd1, 0x9f, 0xcf, 0x5d, 0x0d, 0x3c, 0xbc, 0x7b, 0xfb, 0xf3, 0x00,",
          "3028:  0xbe, 0xbe, 0xac, 0x5f, 0xcc, 0xcb, 0x81, 0xe6, 0xf2, 0xbf, 0xfd, 0x9c, 0x9d, 0x82, 0xa1, 0x25,",
          "3029:  0x2f, 0x33, 0x79, 0xca, 0x07, 0x4d, 0x1e, 0xf7, 0x3f, 0x1c, 0xc8, 0x2c, 0x16, 0xa4, 0x03, 0xa3,",
          "3030:  0x4c, 0x83, 0x5e, 0x31, 0x4f, 0x0b, 0xd8, 0xac, 0xd9, 0xc4, 0x92, 0xc3, 0x82, 0xff, 0x44, 0x21,",
          "3031:  0x88, 0xb4, 0xa4, 0x77, 0x5e, 0x2a, 0xe2, 0xf9, 0x0b, 0x5b, 0x20, 0xf3, 0xef, 0xe5, 0xdf, 0x17,",
          "3032:  0x68, 0x4f, 0xdf, 0x7d, 0x1e, 0x66, 0xfa, 0x94, 0xe2, 0x97, 0x85, 0x22, 0xf5, 0x9e, 0x82, 0x35,",
          "3033:  0x02, 0xf9, 0xd5, 0x45, 0x14, 0x38, 0xe6, 0xe0, 0x9f, 0xcc, 0xb3, 0x27, 0x9f, 0x77, 0x60, 0x26,",
          "3034:  0xc9, 0xf3, 0x7b, 0x58, 0x6d, 0xa7, 0x23, 0x57, 0x7d, 0x28, 0xec, 0x57, 0xc2, 0xfd, 0x4b, 0x69,",
          "3035:  0x9e, 0xc4, 0xdf, 0x3d, 0xe9, 0xc5, 0xc5, 0x19, 0xba, 0xb8, 0xb0, 0x29, 0xe6, 0x6f, 0xd3, 0x7a,",
          "3036:  0xb7, 0xd5, 0x97, 0x4a, 0xb3, 0x21, 0xe1, 0xa8, 0x29, 0x32, 0x2f, 0x88, 0x95, 0x0f, 0x7c, 0x41,",
          "3037:  0xec, 0x39, 0x98, 0xb4, 0xdf, 0x0c, 0xe1, 0x21, 0x34, 0x79, 0xf8, 0x60, 0x3f, 0x2f, 0x82, 0x19,",
          "3038:  0xaa, 0xdc, 0x0b, 0x54, 0xa3, 0x07, 0xbe, 0x40, 0xf5, 0x0c, 0x54, 0xe4, 0xbf, 0x27, 0xa9, 0xf8,",
          "3039:  0xae, 0xc8, 0xd3, 0x91, 0x30, 0xd4, 0x58, 0x66, 0x20, 0xda, 0x5e, 0xd8, 0xf5, 0x5a, 0xac, 0x85,",
          "3040:  0x64, 0xba, 0x9d, 0x9e, 0x59, 0xd7, 0x34, 0x06, 0x2d, 0x2a, 0xf7, 0x5f, 0x1c, 0xc8, 0xbf, 0xe9,",
          "3041:  0x93, 0x49, 0xda, 0x73, 0x0e, 0x4c, 0xda, 0xcb, 0x26, 0x38, 0x95, 0x0e, 0x95, 0xe0, 0x64, 0xe7,",
          "3042:  0x1e, 0x95, 0xef, 0x9b, 0x7b, 0xf4, 0x3a, 0x73, 0xe1, 0x5b, 0x24, 0x29, 0x4d, 0x0c, 0xba, 0xec,",
          "3043:  0x4d, 0x5c, 0x18, 0xf3, 0x3d, 0x9d, 0x13, 0x3d, 0x29, 0x1c, 0xa5, 0xa5, 0x45, 0x4e, 0x24, 0x31,",
          "3044:  0xb5, 0xf9, 0xaf, 0x7c, 0xfb, 0xec, 0x63, 0x5f, 0xfd, 0xf6, 0xd9, 0xc7, 0xbe, 0xf1, 0xed, 0xb3,",
          "3045:  0x8f, 0x7d, 0xf8, 0xee, 0x59, 0xe7, 0x2b, 0x77, 0xcf, 0x3a, 0x5f, 0xbd, 0x7b, 0xd6, 0xf9, 0xc6,",
          "3046:  0xdd, 0xb3, 0xce, 0xb7, 0xee, 0x9e, 0x75, 0x3e, 0xfd, 0x8f, 0x67, 0x1f, 0x7b, 0x57, 0x45, 0x8d,",
          "3047:  0xd5, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x61, 0x05, 0xb7, 0xed, 0x3c, 0x74, 0x00, 0x00,",
          "",
          "[Added Lines]",
          "2636:  0x55, 0x5b, 0xdd, 0x7e, 0x74, 0x1f, 0x3f, 0x66, 0x7c, 0xe7, 0xb1, 0xce, 0xb0, 0x19, 0x8f, 0x6a,",
          "2637:  0x95, 0x64, 0x21, 0x89, 0xcd, 0x0e, 0x4b, 0x58, 0xb2, 0x21, 0xc1, 0x6d, 0xcf, 0xc3, 0x33, 0x9e,",
          "2638:  0x19, 0xef, 0xb1, 0x67, 0x86, 0x3c, 0x08, 0x5b, 0xae, 0xbe, 0xdd, 0xae, 0x71, 0x77, 0x55, 0x6f,",
          "2639:  0x55, 0xb5, 0xc7, 0x9d, 0x90, 0x17, 0x0a, 0x64, 0x45, 0x1e, 0x1b, 0x25, 0xf9, 0x48, 0x24, 0x04,",
          "2640:  0xe1, 0x21, 0x24, 0x3e, 0x22, 0xe0, 0x0b, 0x10, 0xf0, 0x93, 0xaf, 0x00, 0x12, 0x44, 0x02, 0x25,",
          "2641:  0x81, 0x08, 0x93, 0x0c, 0x41, 0x3c, 0x24, 0x40, 0x40, 0x7e, 0x98, 0x2f, 0x74, 0xdf, 0xb7, 0xaa,",
          "2642:  0xbb, 0xc7, 0xf6, 0xb8, 0x66, 0x12, 0x45, 0xfc, 0x75, 0x9d, 0x73, 0xee, 0x39, 0xe7, 0xbe, 0xce,",
          "2643:  0x3d, 0xf7, 0xdc, 0x73, 0x6f, 0xc3, 0x6a, 0x33, 0x48, 0xb7, 0xba, 0x9b, 0xf3, 0x7e, 0xd4, 0x5e,",
          "2644:  0xf0, 0xe2, 0x66, 0xd4, 0x89, 0xa3, 0x3b, 0xfc, 0xc7, 0x9b, 0xfd, 0xfa, 0xc2, 0xce, 0xf9, 0x85,",
          "2645:  0xce, 0x76, 0x73, 0xc1, 0xeb, 0x04, 0xc9, 0x82, 0xd7, 0xe9, 0xb4, 0x02, 0xdf, 0x4b, 0x83, 0x28,",
          "2646:  0x5c, 0xd8, 0x79, 0xd6, 0x6b, 0x75, 0xb6, 0xbc, 0x67, 0x17, 0x9a, 0x34, 0xa4, 0xb1, 0x97, 0xd2,",
          "2647:  0xfa, 0x7c, 0x27, 0x8e, 0xd2, 0x88, 0xbc, 0xcd, 0x70, 0x9b, 0x57, 0xdc, 0xf8, 0x8f, 0x9f, 0xf3,",
          "2648:  0xeb, 0xf3, 0x3b, 0xe7, 0xe7, 0x3b, 0xdb, 0xcd, 0x79, 0xc6, 0x6d, 0xde, 0xe2, 0x36, 0xaf, 0xb8,",
          "2649:  0x9d, 0x79, 0xb3, 0xa5, 0x4b, 0x33, 0x6a, 0x46, 0x0b, 0x9c, 0xe9, 0x66, 0xb7, 0xc1, 0xbf, 0xf8,",
          "2650:  0x07, 0xff, 0x25, 0x84, 0x9d, 0x71, 0xb7, 0x9f, 0x4f, 0xe6, 0x83, 0x88, 0xa9, 0xb7, 0xe0, 0x47,",
          "2651:  0x31, 0x5d, 0xd8, 0xe9, 0x53, 0xe8, 0xcc, 0x73, 0x86, 0xa6, 0xed, 0xf9, 0x5b, 0x41, 0x48, 0xe3,",
          "2652:  0x9e, 0xa9, 0x53, 0x9b, 0xa6, 0xde, 0xa0, 0x52, 0x0b, 0xc3, 0x4a, 0xc5, 0xdd, 0x30, 0x0d, 0xda,",
          "2653:  0xb4, 0xaf, 0xc0, 0x5b, 0xf6, 0x2b, 0x90, 0xf8, 0x5b, 0xb4, 0xed, 0xe5, 0xcb, 0xb9, 0x2f, 0xc3,",
          "2654:  0xd4, 0xe2, 0xed, 0xf5, 0xc5, 0x6e, 0xba, 0xb5, 0x14, 0x85, 0x8d, 0xa0, 0x49, 0x7e, 0x1c, 0x26,",
          "2655:  0xfc, 0x56, 0x37, 0x49, 0x69, 0x7c, 0xdd, 0x6b, 0xd3, 0x59, 0xe7, 0x9c, 0xf3, 0x4c, 0xb5, 0x76,",
          "2656:  0xe2, 0x2b, 0x7b, 0x73, 0x4f, 0xdc, 0xdb, 0x9b, 0x9b, 0x58, 0x32, 0x28, 0xb4, 0xe9, 0xc8, 0x0f,",
          "2657:  0xc3, 0x78, 0x1c, 0xb5, 0xe8, 0x22, 0x5e, 0x9f, 0x2d, 0xf1, 0x22, 0xc7, 0x64, 0x91, 0x71, 0x14,",
          "2658:  0x60, 0x54, 0x78, 0xf7, 0x6b, 0x25, 0x80, 0xc5, 0x4e, 0x67, 0x2d, 0x8e, 0xee, 0x50, 0x3f, 0x25,",
          "2659:  0x2f, 0x41, 0x85, 0xb5, 0x42, 0xdd, 0x4b, 0x3d, 0x2e, 0x6d, 0xe2, 0xfc, 0x8f, 0xce, 0x8b, 0xca,",
          "2660:  0xcc, 0xdb, 0x95, 0x31, 0x3d, 0xc7, 0xa8, 0xe7, 0x77, 0x9e, 0x9d, 0xbf, 0xb1, 0xc9, 0xca, 0x5f,",
          "2661:  0xa3, 0xa9, 0x57, 0x23, 0x52, 0x18, 0x18, 0x18, 0x6a, 0xae, 0x24, 0x84, 0x91, 0xa4, 0x43, 0x7d,",
          "2662:  0xae, 0xd8, 0xc4, 0xf9, 0xd5, 0xf9, 0xa3, 0x0c, 0x91, 0x79, 0xa3, 0xf9, 0x7a, 0x87, 0xfa, 0xb5,",
          "2663:  0x49, 0x29, 0x79, 0x84, 0x7d, 0x21, 0x97, 0x43, 0x76, 0x60, 0x2c, 0x49, 0xbd, 0xb4, 0x9b, 0xcc,",
          "2664:  0x96, 0xb9, 0xc4, 0xeb, 0x85, 0x49, 0xe4, 0x5c, 0x6b, 0xd3, 0x52, 0xe6, 0x98, 0xf8, 0x46, 0x29,",
          "2665:  0xcd, 0xfd, 0x7b, 0x07, 0xa6, 0x0d, 0xf1, 0x6a, 0x90, 0xa4, 0xe4, 0x3d, 0x7d, 0x8d, 0x3b, 0x7f,",
          "2666:  0xb0, 0xc6, 0x65, 0xa5, 0x79, 0xd3, 0x1e, 0x97, 0xc2, 0x2a, 0x0a, 0x62, 0x35, 0x6c, 0x1b, 0x46,",
          "2667:  0x83, 0x94, 0xb6, 0x93, 0xd9, 0xd2, 0xb9, 0xf2, 0x33, 0x13, 0xe7, 0x2f, 0x17, 0x55, 0xcf, 0xda,",
          "2668:  0x94, 0x14, 0x3a, 0xba, 0xc2, 0xd8, 0xa3, 0x90, 0xe2, 0x7e, 0x17, 0xec, 0xfa, 0xb1, 0x06, 0x27,",
          "2669:  0xcf, 0xc2, 0x44, 0x12, 0x75, 0x63, 0x9f, 0x22, 0xed, 0x44, 0xc9, 0xac, 0x73, 0xae, 0xcc, 0x86,",
          "2670:  0x1e, 0x1b, 0xa9, 0xeb, 0x06, 0x8c, 0x36, 0x0d, 0xf9, 0x94, 0x03, 0x93, 0x75, 0x9a, 0xa4, 0x41,",
          "2671:  0xc8, 0xe5, 0x2b, 0xe5, 0x37, 0x8e, 0xac, 0xbc, 0x02, 0x2e, 0x1b, 0xe6, 0xb5, 0x93, 0xb2, 0x22,",
          "2672:  0x93, 0x16, 0x30, 0xc1, 0x8c, 0x7c, 0x36, 0xe3, 0xea, 0x34, 0xf1, 0xe3, 0xa0, 0xc3, 0xbe, 0xf9,",
          "2673:  0x98, 0xb1, 0x66, 0xdc, 0xb2, 0x41, 0xa1, 0x4d, 0x47, 0x42, 0x18, 0x65, 0x33, 0x2a, 0x99, 0x1d,",
          "2674:  0xe1, 0xfa, 0xaf, 0x1c, 0x4d, 0x7f, 0xd9, 0xa8, 0x6c, 0xb2, 0x9a, 0xd6, 0x67, 0x5f, 0x09, 0x0a,",
          "2675:  0x31, 0xe4, 0x93, 0x0e, 0xcc, 0xca, 0x19, 0x8f, 0x54, 0x34, 0xe8, 0xed, 0xad, 0x20, 0xa5, 0xad,",
          "2676:  0x20, 0x49, 0x67, 0x47, 0xb9, 0x0e, 0x0b, 0x07, 0x1b, 0x5b, 0x97, 0xe2, 0xa8, 0xdb, 0xb9, 0x1a,",
          "2677:  0x84, 0xf5, 0xda, 0x39, 0x29, 0x69, 0x76, 0x69, 0x08, 0x63, 0x1c, 0x2a, 0x92, 0x7c, 0xd6, 0x81,",
          "2678:  0x33, 0xa1, 0xd7, 0xa6, 0x49, 0xc7, 0x63, 0x5d, 0x2b, 0xd0, 0xb5, 0x96, 0xe7, 0x6f, 0x73, 0x8d,",
          "2679:  0xc6, 0x1e, 0x4e, 0x23, 0x57, 0x6a, 0x74, 0xe6, 0xfa, 0x50, 0xd6, 0xf8, 0x00, 0xb1, 0xe4, 0x37,",
          "2680:  0x1d, 0x98, 0x89, 0xe2, 0xce, 0x96, 0x17, 0xd2, 0xba, 0xc2, 0x26, 0xb3, 0xe3, 0x7c, 0xea, 0xbd,",
          "2681:  0xf7, 0x68, 0x5d, 0x74, 0x23, 0xcf, 0xf6, 0x5a, 0x14, 0x06, 0x69, 0x14, 0xaf, 0xd3, 0x34, 0x0d,",
          "2682:  0xc2, 0x66, 0x52, 0x3b, 0x75, 0x6f, 0x6f, 0x6e, 0xa6, 0x8f, 0x0a, 0xfb, 0xf5, 0x21, 0xef, 0x87,",
          "2683:  0x89, 0xa4, 0x17, 0xfa, 0xb7, 0x83, 0xb0, 0x1e, 0xdd, 0x4d, 0x66, 0x2b, 0x45, 0x4c, 0xdf, 0x75,",
          "2684:  0xcd, 0x50, 0x4e, 0x40, 0x23, 0x00, 0x6d, 0x69, 0x83, 0x3b, 0xce, 0x0c, 0xa5, 0x6a, 0xd1, 0x1d,",
          "2685:  0x67, 0x06, 0xd3, 0x03, 0xc4, 0x92, 0x8f, 0x39, 0x30, 0x95, 0x04, 0xcd, 0xd0, 0x4b, 0xbb, 0x31,",
          "2686:  0xbd, 0x4a, 0x7b, 0xc9, 0x2c, 0x70, 0x45, 0xae, 0x1c, 0xb1, 0x55, 0x2c, 0x96, 0xb5, 0x53, 0x52,",
          "2687:  0xc7, 0x29, 0x1b, 0x9a, 0x60, 0x56, 0xee, 0xa0, 0x89, 0x66, 0x86, 0xf5, 0x44, 0xb1, 0x13, 0xcd,",
          "2688:  0x0c, 0xea, 0xa1, 0x22, 0xdd, 0x3f, 0x2b, 0xc1, 0xf1, 0xfc, 0x1a, 0x44, 0x7e, 0xdb, 0x81, 0x63,",
          "2689:  0x77, 0xee, 0xa6, 0x1b, 0xd1, 0x36, 0x0d, 0x93, 0x5a, 0x8f, 0x59, 0x0a, 0x6e, 0x7d, 0x27, 0xce,",
          "2690:  0xfb, 0xc5, 0xae, 0x76, 0xf3, 0x57, 0xb2, 0x52, 0x2e, 0x84, 0x69, 0xdc, 0xab, 0x3d, 0x29, 0xeb,",
          "2691:  0x73, 0xec, 0xca, 0xed, 0x0d, 0x1b, 0x8b, 0x79, 0xa5, 0xce, 0x7c, 0xdc, 0x81, 0x93, 0x83, 0x58,",
          "2692:  0x90, 0xe3, 0x50, 0xde, 0xa6, 0x3d, 0xe1, 0xe0, 0x20, 0xfb, 0x49, 0x7e, 0x16, 0x46, 0x77, 0xbc,",
          "2693:  0x56, 0x97, 0x4a, 0x47, 0xe1, 0xd2, 0xd1, 0x2a, 0xa2, 0x35, 0x43, 0xc1, 0xf5, 0xad, 0xa5, 0xe7,",
          "2694:  0x1d, 0xf7, 0xaf, 0xca, 0x30, 0x61, 0x2d, 0x15, 0x8f, 0xc1, 0xf9, 0x89, 0x32, 0xce, 0xcf, 0xb5,",
          "2695:  0xc2, 0x56, 0xb9, 0xa1, 0xde, 0xcf, 0xdd, 0x9c, 0xf7, 0x73, 0xa3, 0x38, 0x91, 0x0f, 0x74, 0x7f,",
          "2696:  0x48, 0x0a, 0xd5, 0xa8, 0xc3, 0x9c, 0x5b, 0xb6, 0x8a, 0x8e, 0x14, 0xd1, 0x85, 0x37, 0x14, 0xbb,",
          "2697:  0xda, 0xd4, 0xbd, 0xbd, 0xb9, 0xaa, 0xfe, 0x44, 0x23, 0xc8, 0xfd, 0xba, 0x03, 0x27, 0x2d, 0x1d,",
          "2698:  0x97, 0xa2, 0xb0, 0x1e, 0xf0, 0xae, 0x3d, 0x07, 0x23, 0x69, 0xaf, 0xa3, 0x3c, 0x68, 0xdd, 0x52,",
          "2699:  0x1b, 0xbd, 0x0e, 0x45, 0x8e, 0x61, 0x3e, 0x73, 0x9b, 0x26, 0x89, 0xd7, 0xa4, 0x79, 0x9f, 0xf9,",
          "2700:  0x9a, 0x00, 0xa3, 0xc2, 0x93, 0x18, 0x48, 0xcb, 0x4b, 0xd2, 0x8d, 0xd8, 0x0b, 0x13, 0xce, 0x7e,",
          "2701:  0x23, 0x68, 0x53, 0xd9, 0xc0, 0x3f, 0x72, 0xb0, 0x11, 0xc3, 0x4a, 0xd4, 0x4e, 0xdf, 0xdb, 0x9b,",
          "2702:  0x23, 0xab, 0x7d, 0x9c, 0x70, 0x00, 0x77, 0xf7, 0xb3, 0x0e, 0x9c, 0x1e, 0xec, 0xd6, 0x90, 0xd7,",
          "2703:  0xc3, 0x58, 0x42, 0xe3, 0x1d, 0x1a, 0xcb, 0xda, 0x99, 0x2e, 0xe1, 0x50, 0x94, 0x58, 0xb2, 0x00,",
          "2704:  0x55, 0x6d, 0x72, 0x65, 0x1d, 0x67, 0x24, 0x69, 0xd5, 0xd8, 0x69, 0x43, 0xc3, 0x1a, 0x8d, 0x7d,",
          "2705:  0x48, 0x27, 0x48, 0x37, 0x1a, 0xdf, 0x6f, 0x70, 0x8c, 0xfb, 0x0f, 0x0e, 0x1c, 0xb3, 0xb4, 0x7a,",
          "2706:  0x0c, 0x5e, 0x6e, 0x98, 0xf5, 0x72, 0x57, 0x0a, 0x1b, 0xcf, 0x43, 0xdc, 0xdc, 0x2f, 0x8f, 0xc1,",
          "2707:  0x8c, 0x3d, 0xea, 0xb9, 0x39, 0xe6, 0x1b, 0x2c, 0xda, 0x89, 0x6e, 0xe2, 0xaa, 0x6c, 0x73, 0xb3,",
          "2708:  0xc1, 0x12, 0x60, 0x54, 0x78, 0xd6, 0x88, 0x1d, 0x2f, 0xdd, 0x92, 0x0d, 0xae, 0x1b, 0x71, 0xcd,",
          "2709:  0x4b, 0xb7, 0x90, 0x63, 0xc8, 0xdb, 0x61, 0x3a, 0xf5, 0xe2, 0x26, 0x4d, 0x91, 0xee, 0x04, 0x89,",
          "2710:  0x9a, 0x2f, 0xd5, 0xda, 0x69, 0x49, 0x3b, 0xbd, 0x91, 0xc1, 0x62, 0x8e, 0x9a, 0xbc, 0x0c, 0x23,",
          "2711:  0x5b, 0xb4, 0xd5, 0x96, 0x7e, 0xcd, 0x7a, 0x71, 0x33, 0x9c, 0xd7, 0xf5, 0x32, 0x6d, 0xb5, 0x6b,",
          "2712:  0x15, 0xa6, 0x32, 0xfb, 0x85, 0x5c, 0x14, 0xf9, 0x45, 0x07, 0xaa, 0xdb, 0xdd, 0x24, 0x8d, 0xda,",
          "2713:  0xc1, 0xfb, 0xe8, 0x6c, 0x85, 0x0b, 0xfe, 0x99, 0x82, 0x05, 0x5f, 0x55, 0xfc, 0xc5, 0x7c, 0xd7,",
          "2714:  0x9f, 0x68, 0x24, 0x93, 0x0f, 0xc0, 0xf8, 0x76, 0x12, 0x85, 0x21, 0x65, 0x9e, 0x0a, 0x53, 0xe2,",
          "2715:  0x56, 0xd1, 0x4a, 0x08, 0xee, 0xb5, 0x09, 0xd6, 0xb7, 0xf2, 0x03, 0x95, 0x4c, 0xde, 0x0c, 0xf5,",
          "2716:  0x20, 0xa6, 0x7e, 0x1a, 0xc5, 0xbd, 0x59, 0x78, 0x24, 0xcd, 0xb0, 0xac, 0xf8, 0x8b, 0x66, 0xd0,",
          "2717:  0x9f, 0x68, 0x24, 0x93, 0x1e, 0x8c, 0x75, 0x5a, 0xdd, 0x66, 0x10, 0xce, 0x4e, 0x70, 0x1d, 0x6e,",
          "2718:  0x16, 0xac, 0xc3, 0x1a, 0x67, 0x5e, 0x03, 0x66, 0x54, 0xc4, 0x6f, 0x94, 0x02, 0xc9, 0xd3, 0x30,",
          "2719:  0xea, 0x6f, 0x79, 0x71, 0x3a, 0x3b, 0xc9, 0xc7, 0xac, 0x9e, 0x44, 0x4b, 0x0c, 0x88, 0x02, 0xe7,",
          "2720:  0xfe, 0x7a, 0x09, 0xce, 0x0c, 0xaf, 0x98, 0x98, 0x4d, 0x7e, 0x37, 0x4e, 0x84, 0x7d, 0xae, 0xd8,",
          "2721:  0xb3, 0x89, 0x83, 0x51, 0xe1, 0xc9, 0x47, 0x1c, 0x18, 0xbf, 0x23, 0x7b, 0xbc, 0xf4, 0x48, 0x7a,",
          "2722:  0xfc, 0x8a, 0xec, 0x71, 0xad, 0xc3, 0x15, 0xd5, 0xeb, 0x52, 0x2e, 0x53, 0x97, 0xee, 0xfa, 0xad,",
          "2723:  0x6e, 0x5d, 0x59, 0x46, 0x4d, 0x7a, 0x41, 0x80, 0x51, 0xe1, 0x19, 0x69, 0x10, 0x0a, 0xd2, 0x91,",
          "2724:  0x2c, 0xe9, 0x4a, 0x28, 0x49, 0x25, 0xde, 0xfd, 0x4e, 0x19, 0x4e, 0x0d, 0x9c, 0x7c, 0x64, 0x1e,",
          "2725:  0x80, 0xfb, 0x2c, 0x17, 0x03, 0xb6, 0xc1, 0x14, 0xbb, 0xea, 0x69, 0xe6, 0x62, 0xdc, 0xd2, 0x50,",
          "2726:  0xb4, 0x28, 0xc8, 0x87, 0x00, 0x3a, 0x5e, 0xec, 0xb5, 0x69, 0x4a, 0x63, 0x65, 0x27, 0xaf, 0x1e,",
          "2727:  0xad, 0x95, 0x98, 0x1e, 0x6b, 0x8a, 0xa7, 0xf1, 0x71, 0x34, 0x28, 0x41, 0x4b, 0x24, 0xdb, 0x43,",
          "2728:  0xc7, 0xb4, 0x45, 0xbd, 0x84, 0x5e, 0x37, 0xcb, 0x87, 0xde, 0x43, 0xa3, 0x41, 0xa1, 0x4d, 0xc7,",
          "2729:  0xd6, 0x31, 0x5e, 0x8b, 0x44, 0xb6, 0x95, 0x5e, 0xc7, 0x78, 0x3d, 0x13, 0x94, 0x58, 0xf2, 0xaa,",
          "2730:  0x03, 0xd3, 0x8d, 0xa0, 0x45, 0x8d, 0x74, 0xb9, 0xe3, 0xbd, 0x71, 0xf4, 0x4a, 0x5e, 0xb4, 0xf9,",
          "2731:  0x1a, 0x0b, 0x9c, 0x01, 0x27, 0x98, 0x13, 0xcf, 0xba, 0x79, 0x87, 0xc6, 0xdc, 0x74, 0x8f, 0x65,",
          "2732:  0xbb, 0xf9, 0x96, 0x00, 0xa3, 0xc2, 0xbb, 0x5f, 0x28, 0xc1, 0xec, 0xb0, 0x31, 0x47, 0x12, 0x36,",
          "2733:  0xb2, 0xd2, 0x5b, 0x5e, 0x9c, 0x48, 0xf7, 0xfd, 0x88, 0xbb, 0x40, 0xc9, 0xf7, 0x96, 0x17, 0xdb,",
          "2734:  0x63, 0x94, 0x0b, 0x40, 0x25, 0x89, 0xdc, 0x81, 0x91, 0xb4, 0xe5, 0x15, 0x14, 0x36, 0xb2, 0x24,",
          "2735:  0x1a, 0x27, 0x6b, 0x75, 0x31, 0x41, 0x2e, 0x83, 0x3c, 0x05, 0x23, 0xad, 0x60, 0x93, 0x39, 0xa3,",
          "2736:  0x6c, 0x10, 0xf3, 0x55, 0x65, 0x35, 0xd8, 0x4c, 0x90, 0x43, 0xdd, 0xaf, 0x39, 0x03, 0xda, 0x46,",
          "2737:  0x1a, 0x5d, 0x36, 0xa8, 0x68, 0xb8, 0x13, 0xc4, 0x51, 0xd8, 0xa6, 0x61, 0x9a, 0x0f, 0x85, 0x5e,",
          "2738:  0x30, 0x28, 0xb4, 0xe9, 0xc8, 0x2f, 0x38, 0x03, 0x66, 0xc3, 0x11, 0x63, 0x80, 0x52, 0xa5, 0x03,",
          "2739:  0x4f, 0x08, 0xf7, 0x3f, 0xc7, 0x06, 0xd8, 0x3f, 0xbd, 0xa0, 0x91, 0xf3, 0x00, 0xcc, 0x9b, 0x5a,",
          "2740:  0x8b, 0x69, 0x23, 0xd8, 0x95, 0x35, 0xd3, 0x2c, 0xaf, 0x6b, 0x0c, 0x5a, 0x54, 0xaa, 0xcc, 0x7a,",
          "2741:  0xb7, 0xc1, 0xca, 0x94, 0xfa, 0xcb, 0x08, 0x0c, 0x5a, 0x54, 0xe4, 0x39, 0x18, 0x0b, 0xda, 0x5e,",
          "2742:  0x93, 0xaa, 0xf6, 0x7f, 0x8a, 0x4d, 0xae, 0x15, 0x0e, 0xb9, 0xbf, 0x37, 0x37, 0xad, 0x15, 0xe2,",
          "2743:  0x20, 0x94, 0xb4, 0xe4, 0xb7, 0x1c, 0x98, 0xf4, 0xa3, 0x76, 0x3b, 0x0a, 0x57, 0xbd, 0x4d, 0xda,",
          "2744:  0x52, 0x21, 0xae, 0x3b, 0x8f, 0x6a, 0xb9, 0x9f, 0x5f, 0xb2, 0x84, 0x89, 0x0d, 0xa6, 0x0e, 0xdc,",
          "2745:  0xd9, 0x28, 0xcc, 0x68, 0x65, 0xcf, 0xc1, 0xd1, 0x07, 0xcf, 0x41, 0xf2, 0x87, 0x0e, 0xcc, 0x88,",
          "2746:  0xb2, 0x8b, 0x61, 0x18, 0xa5, 0x32, 0xf2, 0x28, 0x62, 0x54, 0xd1, 0x23, 0xae, 0x96, 0x25, 0x51,",
          "2747:  0xd4, 0xed, 0x35, 0x52, 0xcd, 0x99, 0x3e, 0x3c, 0xf6, 0x2b, 0x49, 0x2e, 0xc1, 0x4c, 0x23, 0x8a,",
          "2748:  0x7d, 0x6a, 0x37, 0x04, 0x77, 0xfc, 0x2a, 0x86, 0xd1, 0xc5, 0x3c, 0x01, 0xf6, 0x97, 0x21, 0xb7,",
          "2749:  0xe0, 0xb4, 0x05, 0xb4, 0xdb, 0xa1, 0xc2, 0xb9, 0x9d, 0x95, 0xdc, 0x4e, 0x5f, 0x1c, 0x48, 0x85,",
          "2750:  0x43, 0x4a, 0x9f, 0x79, 0x07, 0xcc, 0xf4, 0xf5, 0xdf, 0x80, 0xdd, 0xfd, 0x49, 0x7b, 0x77, 0x5f,",
          "2751:  0xb5, 0x36, 0xe5, 0x67, 0x96, 0xe1, 0xf4, 0xe0, 0x96, 0x3a, 0x0c, 0x17, 0xf7, 0x57, 0x1d, 0x78,",
          "2752:  0x72, 0x88, 0x1b, 0xa3, 0xb7, 0x35, 0xce, 0xb0, 0x6d, 0x0d, 0xf1, 0xa0, 0x4c, 0xc3, 0x1d, 0x69,",
          "2753:  0x2c, 0x2e, 0x1e, 0x6d, 0x44, 0x5c, 0x08, 0x77, 0x44, 0x47, 0x8f, 0xdf, 0xdb, 0x9b, 0x2b, 0x5f,",
          "2754:  0x08, 0x77, 0x90, 0xf1, 0x76, 0x3f, 0x37, 0x96, 0xd9, 0x39, 0xad, 0xab, 0xcd, 0x3a, 0x57, 0x54,",
          "2755:  0xee, 0x9b, 0x6e, 0x14, 0x3c, 0x16, 0xad, 0x9d, 0xa1, 0x08, 0xc1, 0x4b, 0x71, 0xe4, 0xe3, 0x0e,",
          "2756:  0x8f, 0x7a, 0xab, 0x1d, 0xa5, 0xf4, 0xac, 0x1e, 0x4d, 0x10, 0xde, 0x8e, 0xa5, 0x2b, 0x20, 0xda,",
          "2757:  0xd2, 0xd9, 0x4c, 0xee, 0x88, 0xa0, 0x53, 0xde, 0xbf, 0x52, 0x71, 0x71, 0x85, 0x27, 0xbb, 0x00,",
          "2758:  0x49, 0x2f, 0xf4, 0xd7, 0xa2, 0x56, 0xe0, 0xf7, 0x64, 0x98, 0xa1, 0x80, 0xc8, 0xa9, 0xe0, 0x27,",
          "2759:  0x9c, 0x2c, 0xf3, 0x8d, 0x96, 0x2c, 0xf2, 0x45, 0x07, 0x66, 0x82, 0x66, 0x18, 0xc5, 0x74, 0x39,",
          "2760:  0x68, 0x34, 0x68, 0x4c, 0x43, 0x9f, 0x2a, 0x3f, 0xe4, 0xf6, 0xd1, 0x34, 0x50, 0x41, 0xbf, 0x95,",
          "2761:  0x3c, 0x7b, 0x33, 0xc5, 0xfb, 0x50, 0xd8, 0xaf, 0x0c, 0xa9, 0xc3, 0x48, 0x10, 0x36, 0x22, 0x69,",
          "2762:  0xd8, 0x6a, 0x47, 0x53, 0x6a, 0x25, 0x6c, 0x44, 0x66, 0xae, 0xb0, 0x2f, 0xe4, 0xdc, 0xc9, 0x2a,",
          "2763:  0x9c, 0x8c, 0xe5, 0x4e, 0xf4, 0x72, 0x90, 0x30, 0x7f, 0x7e, 0x35, 0x68, 0x07, 0x29, 0x37, 0x4a,",
          "2764:  0xe5, 0xda, 0xec, 0xbd, 0xbd, 0xb9, 0x93, 0x38, 0x00, 0x8f, 0x03, 0x4b, 0xb9, 0xaf, 0x54, 0xb3,",
          "2765:  0xdb, 0x6d, 0x11, 0x4c, 0xfa, 0x00, 0x54, 0x63, 0x1d, 0xbe, 0x17, 0x9e, 0xd1, 0x6a, 0x31, 0x6d,",
          "2766:  0x2c, 0xa3, 0x58, 0x3a, 0x0e, 0x62, 0x02, 0xf5, 0x46, 0x22, 0xf3, 0x90, 0x58, 0xcf, 0xcb, 0x69,",
          "2767:  0x51, 0xc0, 0xf8, 0x92, 0x52, 0x4d, 0xc0, 0xae, 0x17, 0xfa, 0xc8, 0x65, 0x90, 0x18, 0xc6, 0xb6,",
          "2768:  0xa8, 0xd7, 0x4a, 0xb7, 0x64, 0x3c, 0xe9, 0xca, 0x51, 0x7d, 0x5a, 0xc6, 0x2b, 0x1f, 0xab, 0x13,",
          "2769:  0x50, 0x94, 0x92, 0xc8, 0x2e, 0x8c, 0x6f, 0x89, 0x4e, 0x90, 0x6b, 0xfb, 0xb5, 0xa3, 0x36, 0x6e,",
          "2770:  0xa6, 0x67, 0xcd, 0xfc, 0x95, 0x00, 0x54, 0xe2, 0xc8, 0x2f, 0x39, 0x00, 0xbe, 0x0a, 0xd2, 0xa9,",
          "2771:  0xe9, 0x83, 0x85, 0xd9, 0x1d, 0x1d, 0xff, 0x33, 0xae, 0x91, 0x06, 0x25, 0x68, 0x49, 0x26, 0x2f,",
          "2772:  0xc1, 0x64, 0x4c, 0xfd, 0x28, 0xf4, 0x83, 0x16, 0xad, 0x2f, 0xa6, 0xdc, 0x8d, 0x3f, 0x5c, 0x30,",
          "2773:  0xef, 0x38, 0xf3, 0x4f, 0xd0, 0xe2, 0x81, 0x19, 0x8e, 0xe4, 0x15, 0x07, 0xa6, 0x75, 0xa0, 0x92,",
          "2774:  0x75, 0x08, 0x95, 0x01, 0x9b, 0xd5, 0x82, 0xc2, 0xa2, 0x9c, 0x67, 0x8d, 0xb0, 0xed, 0x4a, 0x16,",
          "2775:  0x86, 0x39, 0xb9, 0xe4, 0x5d, 0x00, 0xd1, 0x26, 0x0f, 0x0a, 0xb2, 0xaa, 0x56, 0x0e, 0x5d, 0xd5,",
          "2776:  0x69, 0x11, 0xdf, 0x56, 0x1c, 0xd0, 0xe2, 0x46, 0xae, 0x02, 0x88, 0x69, 0xb3, 0xd1, 0xeb, 0x50,",
          "2777:  0x1e, 0x94, 0xa9, 0xd6, 0xde, 0xa8, 0x1a, 0x7f, 0x5d, 0x63, 0xee, 0xef, 0xcd, 0xf5, 0xef, 0x76,",
          "2778:  0x79, 0x34, 0xd6, 0x2a, 0x4e, 0xde, 0x0f, 0xe3, 0x49, 0xb7, 0xdd, 0xf6, 0x74, 0x70, 0x65, 0xad,",
          "2779:  0xb8, 0x15, 0x51, 0xf0, 0x35, 0x63, 0x53, 0x02, 0x50, 0x49, 0x74, 0x43, 0x20, 0xfd, 0xf4, 0xe4,",
          "2780:  0x39, 0x98, 0xa4, 0xbb, 0x29, 0x8d, 0x43, 0xaf, 0x75, 0x13, 0x57, 0xd5, 0x76, 0x9c, 0x77, 0xfe,",
          "2781:  0x05, 0x0b, 0x8e, 0x19, 0x2a, 0xe2, 0x6a, 0xcf, 0xbb, 0xc4, 0xe9, 0xc1, 0x78, 0xde, 0xca, 0xcf,",
          "2782:  0x76, 0xff, 0xb7, 0x94, 0xf1, 0x08, 0x36, 0x62, 0x4a, 0x49, 0x04, 0xa3, 0x61, 0x54, 0xd7, 0x46,",
          "2783:  0xef, 0x4a, 0x31, 0x46, 0xef, 0x7a, 0x54, 0xb7, 0xce, 0x95, 0xd9, 0x57, 0x82, 0x42, 0x0e, 0x3f,",
          "2784:  0x78, 0x53, 0x27, 0x94, 0x1c, 0x21, 0x9d, 0xa0, 0x22, 0x25, 0xeb, 0x83, 0xb7, 0x1b, 0xb6, 0x20,",
          "2785:  0xcc, 0xca, 0x25, 0xdb, 0x30, 0xba, 0x15, 0x25, 0xa9, 0xd8, 0xab, 0x1c, 0xd9, 0x0b, 0xbb, 0x1c,",
          "2786:  0x25, 0x29, 0x5f, 0xc2, 0x74, 0xb5, 0x19, 0x24, 0x41, 0x21, 0xc3, 0xfd, 0x67, 0x27, 0x13, 0x7c,",
          "2787:  0xb9, 0xed, 0xa5, 0xfe, 0xd6, 0x85, 0x1d, 0xb6, 0x7f, 0xbc, 0x9a, 0x39, 0x38, 0xf8, 0x09, 0xfb,",
          "2788:  0xe0, 0xe0, 0xfe, 0xde, 0xdc, 0x1b, 0x86, 0x25, 0xfa, 0xdc, 0x65, 0x1c, 0xe6, 0x39, 0x0b, 0xeb,",
          "2789:  0x8c, 0xe1, 0xc3, 0x0e, 0x4c, 0x58, 0xea, 0xc9, 0x05, 0xa5, 0xc0, 0x18, 0xb6, 0x76, 0xae, 0x2c,",
          "2790:  0x20, 0xda, 0x22, 0xdd, 0xcf, 0x38, 0x30, 0x5e, 0xf3, 0xfc, 0xed, 0xa8, 0xd1, 0x20, 0x6f, 0x82,",
          "2791:  0x4a, 0xbd, 0x2b, 0x8f, 0x68, 0x44, 0xfd, 0x74, 0xe4, 0x7d, 0x59, 0xc2, 0x51, 0x53, 0xb0, 0x31,",
          "2792:  0xdc, 0xf0, 0xfc, 0x34, 0x8a, 0xb9, 0xda, 0x65, 0x31, 0x86, 0x2f, 0x72, 0x08, 0x4a, 0x0c, 0xdb,",
          "2793:  0xa4, 0xb7, 0xbd, 0x5d, 0x55, 0x38, 0x1f, 0xf9, 0xb9, 0x66, 0x50, 0x68, 0xd3, 0xb9, 0x7f, 0x3e,",
          "2794:  0x0a, 0xe3, 0xf2, 0x2c, 0xf4, 0xc0, 0xa7, 0x19, 0xca, 0x8b, 0x2f, 0x0d, 0xf5, 0xe2, 0x13, 0x18,",
          "2795:  0xf3, 0x79, 0x1a, 0x95, 0x5c, 0x4a, 0x8f, 0x18, 0x03, 0x93, 0x0a, 0x8a, 0xcc, 0x2c, 0xa3, 0x96,",
          "2796:  0xf8, 0x46, 0x29, 0x8a, 0x7c, 0xda, 0x81, 0x63, 0x7e, 0x14, 0x86, 0xd4, 0x37, 0x76, 0x7e, 0xa4,",
          "2797:  0x88, 0xd3, 0xbe, 0xa5, 0x2c, 0x53, 0x73, 0xe8, 0x9a, 0x43, 0x60, 0x5e, 0x3c, 0x79, 0x01, 0xa6,",
          "2798:  0x44, 0x9b, 0xdd, 0xca, 0xec, 0x8f, 0xcd, 0xf9, 0xb7, 0x8d, 0xc4, 0x2c, 0x2d, 0x99, 0x17, 0x71,",
          "2799:  0x06, 0x7e, 0x20, 0x24, 0xf6, 0xc8, 0x32, 0xf8, 0xa8, 0x4f, 0x8c, 0x12, 0xb4, 0x28, 0x48, 0x0c,",
          "2800:  0x24, 0xa6, 0x8d, 0x98, 0x26, 0x5b, 0x48, 0x5f, 0xee, 0xd2, 0x24, 0xe5, 0x6b, 0xcc, 0xf8, 0xc3,",
          "2801:  0x9d, 0x8d, 0x61, 0x1f, 0x27, 0x1c, 0xc0, 0x9d, 0x6c, 0x4b, 0x47, 0xb7, 0x52, 0xc4, 0x74, 0x92,",
          "2802:  0xdd, 0x3c, 0xd4, 0xdf, 0x9d, 0x83, 0xd1, 0x64, 0xcb, 0x8b, 0xeb, 0x7c, 0x6d, 0x2b, 0xd7, 0xaa,",
          "2803:  0xcc, 0x96, 0xac, 0x33, 0x00, 0x0a, 0xb8, 0xfb, 0x5d, 0x07, 0x8e, 0xab, 0xb1, 0xe2, 0xf9, 0x5b,",
          "2804:  0x94, 0x95, 0x25, 0x6f, 0x87, 0x69, 0xed, 0x4f, 0x2e, 0x45, 0x5d, 0x19, 0xc0, 0x2a, 0x9b, 0x08,",
          "2805:  0x23, 0x66, 0xb0, 0x98, 0xa3, 0x26, 0x0b, 0x50, 0x65, 0x2a, 0x8b, 0xa2, 0x62, 0xfe, 0x69, 0x9f,",
          "2806:  0x75, 0x71, 0x6d, 0x45, 0x96, 0x32, 0x34, 0x24, 0x82, 0x99, 0x96, 0x97, 0xa4, 0x5c, 0x03, 0xe6,",
          "2807:  0x5e, 0x3e, 0xe4, 0x11, 0x25, 0xcf, 0x62, 0x59, 0xcd, 0x33, 0xc2, 0x7e, 0xde, 0xee, 0xd7, 0x47,",
          "2808:  0x60, 0x2a, 0x33, 0x45, 0x98, 0x79, 0xe9, 0x26, 0x6c, 0x0d, 0xd4, 0x7b, 0x6d, 0x6d, 0x5e, 0x6e,",
          "2809:  0x4a, 0x38, 0x6a, 0x0a, 0x46, 0xdd, 0xf1, 0x92, 0xe4, 0x6e, 0x14, 0xd7, 0xe5, 0x9c, 0xd6, 0xd4,",
          "2810:  0x6b, 0x12, 0x8e, 0x9a, 0x82, 0x19, 0x9a, 0x4d, 0xea, 0xc5, 0x34, 0xe6, 0xa7, 0xfa, 0x79, 0x43,",
          "2811:  0x53, 0x33, 0x28, 0xb4, 0xe9, 0xf8, 0xec, 0x4c, 0x5b, 0xc9, 0x52, 0x2b, 0xa0, 0x61, 0x2a, 0xd4,",
          "2812:  0x2c, 0x66, 0x76, 0x6e, 0xac, 0xae, 0xdb, 0x4c, 0xcd, 0xec, 0xcc, 0x21, 0x30, 0x2f, 0x9e, 0x7c,",
          "2813:  0xd4, 0x81, 0x29, 0xef, 0x6e, 0x62, 0x92, 0x3e, 0xf9, 0xf4, 0x3c, 0xb2, 0xb5, 0xca, 0xe4, 0x91,",
          "2814:  0xd6, 0x66, 0xd8, 0x3c, 0xcf, 0x80, 0x30, 0x2b, 0x94, 0x7c, 0xde, 0x01, 0x42, 0x77, 0xa9, 0xbf,",
          "2815:  0x16, 0x47, 0x3b, 0x41, 0x5d, 0xf5, 0xa1, 0xf4, 0x83, 0x8f, 0xe8, 0x76, 0x5d, 0xe8, 0xe3, 0x2b,",
          "2816:  0xa6, 0x77, 0x3f, 0x1c, 0x07, 0xe8, 0xe0, 0xfe, 0x5d, 0x19, 0x26, 0xac, 0x59, 0x39, 0xd0, 0xc4,",
          "2817:  0x3a, 0xdf, 0x67, 0x26, 0xb6, 0x74, 0x08, 0x13, 0xfb, 0x21, 0xa8, 0xfa, 0xca, 0x50, 0x14, 0x93,",
          "2818:  0xa4, 0x9a, 0x37, 0x3f, 0xc6, 0x56, 0x68, 0x10, 0x1a, 0x99, 0xe4, 0x12, 0xcc, 0x58, 0x6c, 0xa4,",
          "2819:  0x91, 0x19, 0xe1, 0x46, 0x46, 0x47, 0x1c, 0x16, 0xf3, 0x04, 0xd8, 0x5f, 0x86, 0x3c, 0xcb, 0xdc,",
          "2820:  0x9b, 0x40, 0xd6, 0x4b, 0x6c, 0xe7, 0x64, 0x02, 0xe8, 0xe2, 0xda, 0x8a, 0x02, 0xa3, 0x4d, 0xe3,",
          "2821:  0x7e, 0xdd, 0xd1, 0x9d, 0xfb, 0x18, 0xb2, 0x07, 0xee, 0x64, 0xb3, 0x07, 0x2e, 0x14, 0xd2, 0xcc,",
          "2822:  0x43, 0x32, 0x07, 0xae, 0xc3, 0xf8, 0x52, 0xd4, 0x6e, 0x7b, 0x61, 0x9d, 0xbc, 0x0e, 0xc6, 0x7d,",
          "2823:  0xf1, 0x53, 0xee, 0x17, 0xf8, 0x71, 0xb2, 0xc4, 0xa2, 0xc2, 0x91, 0xa7, 0x60, 0xc4, 0x8b, 0x9b,",
          "2824:  0x6a, 0x8f, 0xc0, 0x4f, 0x47, 0x16, 0xe3, 0x66, 0x82, 0x1c, 0xea, 0x7e, 0xb6, 0x04, 0xb0, 0x14,",
          "2825:  0xb5, 0x3b, 0x5e, 0x4c, 0xeb, 0x1b, 0xd1, 0xff, 0x07, 0x0b, 0x85, 0xeb, 0xf8, 0x09, 0x07, 0x08,",
          "2826:  0x6b, 0x95, 0x28, 0xa4, 0xa1, 0x39, 0x91, 0x61, 0xeb, 0xa5, 0xaf, 0xa0, 0x72, 0xf1, 0x31, 0x73,",
          "2827:  0x40, 0x21, 0xd0, 0xd0, 0x1c, 0xc0, 0x9d, 0x7c, 0x5a, 0x05, 0x9b, 0xcb, 0xd9, 0x93, 0x6e, 0x7e,",
          "2828:  0x3a, 0x29, 0x63, 0xcf, 0xee, 0xe7, 0x4a, 0x70, 0x5a, 0x98, 0xad, 0x6b, 0x5e, 0xe8, 0x35, 0x69,",
          "2829:  0x9b, 0x69, 0x75, 0xd0, 0xb0, 0xb3, 0xcf, 0xfc, 0x98, 0x40, 0x1d, 0x6c, 0x1f, 0x75, 0x70, 0x8a,",
          "2830:  0x41, 0x25, 0x86, 0xd1, 0x4a, 0x18, 0xa4, 0xc8, 0x99, 0x93, 0x04, 0x2a, 0xea, 0xda, 0x81, 0x34,",
          "2831:  0x36, 0x05, 0x09, 0xd2, 0xf3, 0xee, 0x92, 0x64, 0x8f, 0x5a, 0x90, 0xfb, 0x65, 0x07, 0xf2, 0x46,",
          "2832:  0x94, 0x3b, 0xfa, 0x22, 0x35, 0x2d, 0xef, 0xe8, 0x67, 0x33, 0xc9, 0x0e, 0x91, 0x98, 0xf5, 0x1e,",
          "2833:  0x98, 0xf0, 0xd2, 0x94, 0xb6, 0x3b, 0xc2, 0xeb, 0x2c, 0x3f, 0x5c, 0x64, 0xe3, 0x5a, 0x54, 0x0f,",
          "2834:  0x1a, 0x01, 0xf7, 0x36, 0x6d, 0x76, 0xee, 0x8b, 0x50, 0x51, 0xc1, 0xfc, 0x03, 0x74, 0xe6, 0xd3,",
          "2835:  0x99, 0xb3, 0x89, 0x21, 0xc3, 0xe5, 0x7e, 0x09, 0x06, 0xac, 0x82, 0xac, 0xca, 0xc6, 0x5e, 0x64,",
          "2836:  0xaa, 0x7c, 0x38, 0x9b, 0x41, 0x76, 0xc5, 0x41, 0x86, 0xd8, 0x42, 0xbf, 0xb3, 0xe8, 0x55, 0xdc,",
          "2837:  0x9c, 0x6d, 0x4c, 0x48, 0xfd, 0xf4, 0xf9, 0x06, 0x39, 0x0f, 0x60, 0xcc, 0xbc, 0x3c, 0xd0, 0xd7,",
          "2838:  0x41, 0x38, 0xb3, 0x1a, 0xa0, 0x45, 0xc5, 0x9c, 0xba, 0x20, 0x4c, 0x52, 0xaf, 0xd5, 0xba, 0x1c,",
          "2839:  0x84, 0xa9, 0xdc, 0xa6, 0x68, 0x13, 0xb0, 0x62, 0x50, 0x68, 0xd3, 0x9d, 0x79, 0x8b, 0xd5, 0x2f,",
          "2840:  0x87, 0x39, 0x23, 0xfa, 0x44, 0x09, 0xa6, 0x2f, 0x85, 0xdd, 0xb5, 0x4b, 0x6b, 0xdd, 0xcd, 0x56,",
          "2841:  0xe0, 0x5f, 0xa5, 0x3d, 0xd6, 0x69, 0xdb, 0xb4, 0xb7, 0xb2, 0x2c, 0x9b, 0x5d, 0x77, 0xda, 0x55,",
          "2842:  0x06, 0x44, 0x81, 0x63, 0x6a, 0x36, 0x82, 0xb0, 0x49, 0xe3, 0x4e, 0x1c, 0x48, 0x6f, 0xdc, 0x52,",
          "2843:  0xf3, 0xa2, 0x41, 0xa1, 0x4d, 0xc7, 0x78, 0x47, 0x77, 0x43, 0x1a, 0xe7, 0xed, 0xc7, 0x0d, 0x06,",
          "2844:  0x44, 0x81, 0x63, 0x44, 0x69, 0xdc, 0x4d, 0x52, 0xd9, 0x62, 0x9a, 0x68, 0x83, 0x01, 0x51, 0xe0,",
          "2845:  0xd8, 0xf0, 0x48, 0xba, 0x9b, 0x3c, 0xc0, 0x96, 0x3b, 0xea, 0x5c, 0x17, 0x60, 0x54, 0x78, 0x46,",
          "2846:  0xba, 0x4d, 0x7b, 0xcb, 0x6c, 0x35, 0xcd, 0x65, 0x26, 0x5c, 0x15, 0x60, 0x54, 0x78, 0xf7, 0x9f,",
          "2847:  0x1c, 0x20, 0xd9, 0xe6, 0x78, 0x0c, 0x0b, 0xf2, 0xcb, 0xd9, 0x05, 0xf9, 0x88, 0xb1, 0xd0, 0xac,",
          "2848:  0xfa, 0x43, 0xd6, 0xe5, 0xdf, 0x70, 0x60, 0xd2, 0x0e, 0x8b, 0x93, 0x66, 0xce, 0x10, 0xdd, 0xc8,",
          "2849:  0x1a, 0xa2, 0xfb, 0x7b, 0x73, 0x3f, 0x35, 0xe8, 0x56, 0x5c, 0x33, 0x48, 0xa3, 0x4e, 0xf2, 0x66,",
          "2851:  0x84, 0x25, 0x73, 0x6f, 0xc3, 0x4c, 0x5f, 0x3a, 0xca, 0x01, 0x8c, 0xce, 0xbe, 0xc9, 0x86, 0xee,",
          "2854:  0x9c, 0x3b, 0x80, 0x2a, 0x1f, 0x77, 0x60, 0x4a, 0x6f, 0x8d, 0xb9, 0xc3, 0x5c, 0x48, 0x46, 0x07,",
          "2855:  0xd3, 0x40, 0x1f, 0xbb, 0x31, 0x87, 0x59, 0x7b, 0xee, 0x68, 0x0b, 0xc3, 0xac, 0x6c, 0x72, 0x0b,",
          "2857:  0x0b, 0xd7, 0xa3, 0x3a, 0x5d, 0xd7, 0x94, 0xc6, 0x10, 0x1a, 0x18, 0x5a, 0x9c, 0xdc, 0xdf, 0x2d,",
          "2858:  0xc1, 0xf1, 0xbc, 0x4a, 0xe4, 0xdd, 0x30, 0xa9, 0xa4, 0x5b, 0x97, 0x01, 0x55, 0x44, 0x72, 0x12,",
          "2859:  0x2d, 0xdc, 0xfd, 0xbd, 0xb9, 0xb9, 0xfe, 0xdb, 0x90, 0xf3, 0x36, 0x09, 0x66, 0x98, 0x89, 0xf8,",
          "2861:  0x6a, 0xb2, 0x06, 0x27, 0x2d, 0xc8, 0x75, 0x1a, 0x34, 0xb7, 0x36, 0xa3, 0x58, 0x64, 0x9d, 0x97,",
          "2862:  0x6b, 0x4f, 0x49, 0x2e, 0x27, 0x71, 0x00, 0x0d, 0x0e, 0x2c, 0x49, 0xde, 0x04, 0x15, 0xdf, 0xeb,",
          "2864:  0x91, 0x03, 0x8e, 0xa0, 0x03, 0xad, 0xcb, 0x2f, 0x42, 0x85, 0xb1, 0x63, 0x76, 0xa3, 0x28, 0x96,",
          "2866:  0xba, 0xdc, 0xeb, 0x60, 0x48, 0xf2, 0x34, 0x94, 0xe9, 0x6e, 0x27, 0x1f, 0xeb, 0xb9, 0xb0, 0xdb,",
          "2867:  0x09, 0x62, 0x9a, 0x30, 0x22, 0xba, 0xdb, 0x21, 0x67, 0xa0, 0x14, 0xd4, 0xe5, 0x82, 0x02, 0x92,",
          "2868:  0xa6, 0xb4, 0xb2, 0x8c, 0xa5, 0xa0, 0xee, 0xee, 0x42, 0x55, 0xdf, 0x7a, 0x20, 0xdb, 0xca, 0xce,",
          "2870:  0xe7, 0x60, 0xc4, 0x8f, 0x64, 0xca, 0x65, 0xc5, 0xb0, 0xe1, 0x06, 0x96, 0x63, 0xdc, 0xdb, 0x30,",
          "2871:  0x7d, 0x35, 0x8c, 0xee, 0x86, 0x6c, 0xe1, 0xbb, 0x18, 0xd0, 0x56, 0x9d, 0x31, 0x6e, 0xb0, 0x1f,",
          "2873:  0x70, 0x3c, 0x9f, 0xf3, 0xf5, 0x3d, 0xdb, 0x61, 0x7c, 0x98, 0x29, 0xa3, 0x92, 0x8a, 0x6e, 0x74,",
          "2874:  0xc4, 0xf1, 0xe5, 0xf3, 0x30, 0xb9, 0xd9, 0x0d, 0x5a, 0x75, 0xf9, 0x2d, 0xf5, 0xd1, 0x69, 0x53,",
          "2875:  0x35, 0x0b, 0x87, 0x19, 0x4a, 0xe6, 0xa7, 0x6d, 0x06, 0xa1, 0x17, 0xf7, 0xd6, 0xcc, 0xba, 0xa1,",
          "2876:  0xcd, 0x53, 0x4d, 0x63, 0xd0, 0xa2, 0x72, 0xff, 0xa6, 0x0c, 0xe6, 0xfa, 0x05, 0x09, 0xe4, 0xe9,",
          "2877:  0xb8, 0x53, 0x44, 0xd8, 0x6a, 0xbd, 0x17, 0xfa, 0xe6, 0xa2, 0x47, 0x25, 0x77, 0x38, 0xfe, 0x31,",
          "2878:  0x87, 0x79, 0x88, 0x41, 0x1a, 0x78, 0xdc, 0x58, 0xc8, 0x8d, 0xd2, 0x5a, 0x41, 0x07, 0xa8, 0x2b,",
          "2879:  0x82, 0x73, 0x14, 0xdb, 0x3e, 0xa7, 0x16, 0x86, 0xb6, 0x64, 0xf2, 0x92, 0x0c, 0x39, 0x97, 0x0b,",
          "2880:  0xcb, 0xad, 0xa8, 0xe4, 0xe2, 0xcc, 0x1d, 0x18, 0x8d, 0x69, 0x1a, 0xab, 0xac, 0x96, 0xab, 0x47,",
          "2881:  0x3d, 0x80, 0x4b, 0xe3, 0xde, 0x7a, 0xca, 0x36, 0x63, 0x4d, 0xcb, 0x31, 0xe2, 0x60, 0x14, 0x82,",
          "2882:  0xdc, 0x04, 0x48, 0x7f, 0x5b, 0x1c, 0x32, 0x8a, 0xbb, 0x00, 0x55, 0xaf, 0x9b, 0x46, 0x6d, 0xd6,",
          "2883:  0x4c, 0xbc, 0x7b, 0x2a, 0x56, 0x9c, 0x5a, 0x21, 0xd0, 0xd0, 0xb8, 0xaf, 0x8e, 0x42, 0xee, 0xb8,",
          "2884:  0x9a, 0xec, 0xda, 0x57, 0x87, 0x9c, 0x62, 0xaf, 0x0e, 0x69, 0x65, 0x06, 0x5d, 0x1f, 0x22, 0x4d,",
          "2885:  0x18, 0xed, 0x6c, 0x79, 0x89, 0x9a, 0xa3, 0x2f, 0xaa, 0x66, 0x5a, 0x63, 0xc0, 0xfb, 0x7b, 0x73,",
          "2886:  0x3f, 0x7d, 0x30, 0x3f, 0x90, 0x8d, 0xd5, 0x05, 0x91, 0xbb, 0x67, 0x44, 0x73, 0x1e, 0x28, 0xf8,",
          "2887:  0xdb, 0x9e, 0x60, 0x79, 0x9f, 0x3d, 0xed, 0x47, 0x1c, 0x91, 0xe3, 0x84, 0x34, 0xe9, 0xb6, 0x52,",
          "2888:  0x39, 0x1a, 0x5e, 0x2c, 0x70, 0x96, 0x09, 0xc6, 0x26, 0xd9, 0x49, 0x7c, 0xa3, 0x25, 0x94, 0xbc,",
          "2889:  0x1b, 0xaa, 0x49, 0xea, 0xc5, 0xe9, 0x43, 0xa6, 0x46, 0xe8, 0x46, 0x5f, 0x57, 0x4c, 0xd0, 0xf0,",
          "2890:  0x23, 0xef, 0x02, 0x68, 0x04, 0x61, 0x90, 0x6c, 0x3d, 0xe4, 0x49, 0x11, 0x57, 0xfc, 0xa2, 0xe6,",
          "2891:  0x80, 0x16, 0x37, 0x66, 0xdd, 0xf8, 0xd8, 0x16, 0x21, 0xcd, 0x0a, 0x5f, 0x4b, 0xb5, 0x75, 0x43,",
          "2892:  0x8d, 0x41, 0x8b, 0xca, 0xfd, 0x20, 0x9c, 0xc8, 0x5f, 0xdb, 0x95, 0x5b, 0xc3, 0x66, 0x1c, 0x75,",
          "2893:  0x3b, 0xf9, 0xb5, 0x84, 0x5f, 0xeb, 0x44, 0x81, 0x63, 0x36, 0x7e, 0x3b, 0x08, 0xeb, 0x79, 0x1b,",
          "2894:  0x7f, 0x35, 0x08, 0xeb, 0xc8, 0x31, 0x07, 0xb8, 0x53, 0xf5, 0xc7, 0x0e, 0x9c, 0xdb, 0xef, 0x76,",
          "2895:  0x31, 0xdb, 0xf6, 0xdf, 0xf5, 0xe2, 0x50, 0xde, 0x97, 0xe0, 0xb6, 0xe3, 0xb6, 0x17, 0x87, 0xc8,",
          "2897:  0x74, 0xb4, 0x46, 0xa4, 0xa2, 0xa1, 0x14, 0xe8, 0xbe, 0xea, 0x00, 0xb9, 0xb1, 0x43, 0xe3, 0x38,",
          "2898:  0xa8, 0x5b, 0x09, 0x6c, 0xe4, 0x39, 0x98, 0xbc, 0xb3, 0x7e, 0xe3, 0xfa, 0x5a, 0x14, 0x84, 0x3c,",
          "2899:  0x0f, 0xdb, 0x4a, 0x9b, 0xb8, 0x62, 0xc1, 0x31, 0x43, 0x45, 0x96, 0x60, 0xe6, 0xce, 0xcb, 0x6c,",
          "2900:  0xc9, 0xb9, 0xb0, 0xdb, 0x89, 0x69, 0x92, 0xe8, 0x17, 0x02, 0xaa, 0xe2, 0x60, 0xea, 0xca, 0x8b,",
          "2901:  0x39, 0x24, 0xf6, 0xd3, 0xbb, 0x5f, 0x2a, 0xc1, 0x84, 0x75, 0xa1, 0xfe, 0x00, 0xfe, 0x48, 0xee,",
          "2902:  0x0d, 0x80, 0xd2, 0x01, 0xdf, 0x00, 0x78, 0x06, 0x2a, 0x9d, 0xa8, 0x15, 0xf8, 0x81, 0x4e, 0xb0,",
          "2903:  0x9e, 0xe4, 0xa7, 0x57, 0x12, 0x86, 0x1a, 0x4b, 0xee, 0x42, 0x55, 0xdf, 0x8c, 0x95, 0x29, 0x57,",
          "2904:  0x45, 0x79, 0x64, 0x7a, 0xae, 0x99, 0x1b, 0xaf, 0x46, 0x16, 0x71, 0x61, 0x8c, 0x0f, 0x54, 0x15,",
          "2905:  0x9b, 0xe7, 0x67, 0xf8, 0x7c, 0x04, 0x27, 0x28, 0x31, 0xee, 0xbf, 0x8d, 0x42, 0x15, 0x69, 0x27,",
          "2906:  0x5a, 0x8a, 0x69, 0x3d, 0x21, 0xaf, 0x85, 0x72, 0x37, 0x6e, 0xc9, 0xc6, 0xd2, 0x61, 0x9e, 0x9b,",
          "2907:  0xb8, 0x8a, 0x0c, 0x9e, 0x59, 0x1d, 0x4a, 0x87, 0x3a, 0xe3, 0x2b, 0xef, 0x7b, 0xc6, 0xf7, 0x02,",
          "2908:  0x4c, 0x25, 0xc9, 0xd6, 0x5a, 0x1c, 0xec, 0x78, 0x29, 0x1b, 0x73, 0x32, 0x26, 0x62, 0x0e, 0x55,",
          "2909:  0xd6, 0x2f, 0x1b, 0x24, 0x66, 0x69, 0xc9, 0x25, 0x98, 0x31, 0x27, 0x6d, 0x34, 0x4e, 0x79, 0x08,",
          "2910:  0x44, 0x44, 0x4b, 0xf4, 0x99, 0x86, 0x39, 0x9b, 0x93, 0x04, 0xd8, 0x5f, 0x86, 0x2c, 0xc3, 0xf1,",
          "2911:  0x0c, 0x90, 0x29, 0x22, 0x42, 0x29, 0xb3, 0x92, 0xcf, 0xf1, 0x0c, 0x1f, 0xa6, 0x4b, 0x5f, 0x09,",
          "2912:  0x72, 0x0d, 0x4e, 0x88, 0xfe, 0xe5, 0x37, 0xaa, 0x75, 0x8d, 0xc6, 0x39, 0xa3, 0x1f, 0x92, 0x8c,",
          "2913:  0x4e, 0x5c, 0xea, 0x27, 0xc1, 0x41, 0xe5, 0xd8, 0x08, 0xd5, 0xe0, 0x95, 0x65, 0x69, 0xd8, 0xf4,",
          "2916:  0x64, 0x13, 0xce, 0x68, 0xd4, 0x05, 0x36, 0x7b, 0x3b, 0x71, 0x90, 0xd0, 0x9a, 0x97, 0xd0, 0x9b,",
          "2918:  0x07, 0x70, 0x61, 0xce, 0x05, 0x0d, 0xbd, 0xcd, 0x16, 0xbd, 0xb1, 0xb4, 0xc2, 0x6f, 0xba, 0x59,",
          "2919:  0xce, 0xc5, 0x05, 0x85, 0x40, 0x43, 0xa3, 0x5d, 0xfb, 0xc9, 0xa1, 0xae, 0xfd, 0x37, 0x1d, 0x98,",
          "2920:  0xd2, 0x83, 0xfd, 0x31, 0xc4, 0xbb, 0x5a, 0xd9, 0x78, 0xd7, 0xa5, 0xa3, 0x7a, 0x75, 0x52, 0xf3,",
          "2921:  0x21, 0x1b, 0xb1, 0x3f, 0xa9, 0x02, 0xf0, 0x77, 0x56, 0x02, 0x9e, 0x6d, 0x79, 0x0e, 0x46, 0x62,",
          "2922:  0xda, 0x89, 0xf2, 0x96, 0x8f, 0x51, 0x20, 0xc7, 0x7c, 0xff, 0x4e, 0xe7, 0x41, 0x67, 0xbe, 0xa3,",
          "2923:  0xdf, 0xdb, 0x33, 0xdf, 0x75, 0x38, 0x15, 0x84, 0x09, 0xf5, 0xbb, 0xb1, 0x5c, 0xe8, 0x2e, 0x47,",
          "2924:  0x89, 0xb6, 0x0e, 0x95, 0xda, 0x6b, 0x25, 0xa3, 0x53, 0x2b, 0x83, 0x88, 0x70, 0x70, 0x59, 0xd6,",
          "2925:  0xa4, 0x0a, 0x21, 0xaf, 0x75, 0x98, 0xf0, 0x80, 0x84, 0xa3, 0xa6, 0x30, 0x13, 0x62, 0xb5, 0xa1,",
          "2926:  0xee, 0x6d, 0xe4, 0x26, 0xc4, 0xea, 0xc5, 0x75, 0x34, 0x34, 0x83, 0xad, 0x62, 0xb5, 0x20, 0xab,",
          "2927:  0x08, 0x87, 0xb6, 0x8a, 0x6a, 0x7e, 0x4e, 0x0c, 0xbd, 0x95, 0xaf, 0x16, 0xeb, 0xc9, 0xa1, 0x8b,",
          "2928:  0xf5, 0xdb, 0x61, 0x3a, 0x08, 0xb7, 0x68, 0x1c, 0xa4, 0xb4, 0xce, 0xe7, 0xc2, 0xec, 0x14, 0x6f,",
          "2929:  0x08, 0x1d, 0xb9, 0x5a, 0xc9, 0x60, 0x31, 0x47, 0x9d, 0x35, 0x2a, 0xd3, 0x07, 0x30, 0x2a, 0x43,",
          "2930:  0x4c, 0xf9, 0xb1, 0x62, 0x4c, 0xf9, 0xf1, 0xa3, 0x9b, 0xf2, 0x99, 0x47, 0x6a, 0xca, 0x49, 0x21,",
          "2931:  0xa6, 0xfc, 0x69, 0x18, 0xed, 0xc4, 0xd1, 0x6e, 0x6f, 0xf6, 0x44, 0xd6, 0x9b, 0x5e, 0x63, 0x40,",
          "2932:  0x14, 0x38, 0xf7, 0x95, 0x12, 0x9c, 0x32, 0xe6, 0x8b, 0x0d, 0x9a, 0xa0, 0xc1, 0x26, 0x30, 0xbf,",
          "2933:  0x31, 0x27, 0x72, 0x28, 0xac, 0x48, 0xa8, 0x09, 0xaa, 0x6a, 0x0c, 0x5a, 0x54, 0x3c, 0xa0, 0x48,",
          "2934:  0x63, 0x9e, 0x8e, 0x99, 0xb7, 0x6d, 0x4b, 0x12, 0x8e, 0x9a, 0x82, 0xbf, 0xbc, 0x46, 0xe3, 0x54,",
          "2935:  0x1e, 0xa8, 0xe4, 0x13, 0x8c, 0x96, 0x0c, 0x0a, 0x6d, 0x3a, 0xe6, 0x03, 0xfa, 0x6a, 0x5e, 0x31,",
          "2936:  0xfb, 0x36, 0x29, 0x7c, 0x40, 0x3d, 0x95, 0x34, 0x56, 0xa9, 0xc3, 0x23, 0xc7, 0xa3, 0xfd, 0xea,",
          "2937:  0xf0, 0x48, 0x80, 0xa6, 0x70, 0xff, 0xc7, 0x81, 0xd7, 0x0c, 0x6c, 0x8a, 0xc7, 0xb0, 0x66, 0xed,",
          "2938:  0x66, 0xd7, 0xac, 0xf5, 0xa3, 0xaf, 0x59, 0x7d, 0xb5, 0x18, 0xb2, 0x7e, 0xfd, 0xad, 0x03, 0xd3,",
          "2939:  0x86, 0xfe, 0x31, 0x54, 0x35, 0x28, 0xf4, 0x0d, 0x35, 0xa3, 0xba, 0x48, 0x13, 0xcc, 0xd4, 0xed,",
          "2940:  0x9b, 0xbc, 0x6e, 0x62, 0x43, 0xb5, 0xe8, 0xab, 0x47, 0x4a, 0xf6, 0xd9, 0x99, 0xf4, 0x60, 0x8c,",
          "2941:  0x5f, 0x2b, 0x4d, 0x8a, 0xd9, 0xd8, 0x65, 0xe5, 0xf3, 0xd8, 0xa6, 0xd9, 0xd8, 0xf1, 0xcf, 0x04,",
          "2942:  0xa5, 0x40, 0x9e, 0x2c, 0x1c, 0x24, 0xcc, 0x08, 0xd6, 0x65, 0x0c, 0xd6, 0x24, 0x0b, 0x4b, 0x38,",
          "2943:  0x6a, 0x0a, 0xb7, 0x0d, 0xb3, 0x59, 0xe6, 0xcb, 0xb4, 0xc1, 0xe3, 0x67, 0x07, 0xaa, 0xe6, 0x02,",
          "2944:  0x54, 0x3d, 0x5e, 0x6a, 0xb5, 0xeb, 0xe5, 0x5f, 0x2a, 0x59, 0x54, 0x08, 0x34, 0x34, 0xee, 0xef,",
          "2945:  0x38, 0x70, 0x62, 0x40, 0x65, 0x0a, 0x8c, 0x3d, 0xa7, 0xc6, 0x0a, 0x0c, 0x79, 0x3d, 0xa6, 0x4e,",
          "2946:  0x1b, 0x9e, 0x8a, 0xd0, 0x58, 0x01, 0x9d, 0x65, 0x01, 0x46, 0x85, 0x77, 0xff, 0xdd, 0x81, 0x63,",
          "2947:  0x59, 0x5d, 0x13, 0x72, 0x05, 0x88, 0xa8, 0xcc, 0x72, 0x90, 0xf8, 0xd1, 0x0e, 0x8d, 0x7b, 0xac,",
          "2948:  0xe6, 0x42, 0xeb, 0x33, 0x92, 0x13, 0x59, 0xec, 0xa3, 0xc0, 0x01, 0xa5, 0xc8, 0x27, 0x79, 0x7e,",
          "2949:  0x8e, 0x6a, 0x6d, 0x35, 0x52, 0x6e, 0x15, 0x39, 0x52, 0x4c, 0x67, 0xda, 0xdb, 0x62, 0x2d, 0x12,",
          "2950:  0x6d, 0xf9, 0xee, 0xb7, 0x46, 0x40, 0x1f, 0x4e, 0xf1, 0x58, 0x40, 0x41, 0x91, 0x94, 0xcc, 0x73,",
          "2951:  0x36, 0xe5, 0x43, 0x3c, 0x67, 0x33, 0xf2, 0xa0, 0x8d, 0xbf, 0x78, 0x5b, 0xc5, 0x38, 0x98, 0x96,",
          "2952:  0xd1, 0xdf, 0x30, 0x28, 0xb4, 0xe9, 0x98, 0x26, 0xad, 0x60, 0x87, 0x8a, 0x42, 0x63, 0x59, 0x4d,",
          "2953:  0x56, 0x15, 0x02, 0x0d, 0x0d, 0xd3, 0xa4, 0x1e, 0x34, 0x1a, 0x72, 0xfb, 0xa7, 0x35, 0x61, 0xad,",
          "2954:  0x83, 0x1c, 0xc3, 0x28, 0xb6, 0xa2, 0x68, 0x5b, 0x3a, 0x75, 0x9a, 0xe2, 0x72, 0x14, 0x6d, 0x23,",
          "2955:  0xc7, 0x30, 0x37, 0x24, 0x8c, 0xe2, 0xb6, 0xd7, 0x0a, 0xde, 0x47, 0xeb, 0x5a, 0x8a, 0x74, 0xe6,",
          "2956:  0xb4, 0x1b, 0x72, 0xbd, 0x9f, 0x04, 0x07, 0x95, 0x63, 0x23, 0xb0, 0x13, 0xd3, 0x7a, 0xe0, 0xa7,",
          "2957:  0x36, 0x37, 0xc8, 0x8e, 0xc0, 0xb5, 0x3e, 0x0a, 0x1c, 0x50, 0x8a, 0x2c, 0xc2, 0x31, 0x75, 0xb8,",
          "2958:  0xa8, 0x12, 0x40, 0x84, 0x87, 0xa7, 0x9d, 0x6b, 0xcc, 0xa2, 0x31, 0x4f, 0xcf, 0xac, 0x4d, 0x5b,",
          "2959:  0xa6, 0xe1, 0x70, 0xdf, 0xcf, 0xb2, 0x36, 0x2a, 0x3d, 0x07, 0x35, 0x85, 0xfb, 0x7b, 0x25, 0xb6,",
          "2960:  0x3a, 0x0e, 0xb9, 0x35, 0xf9, 0xd8, 0x22, 0x77, 0xd9, 0x11, 0x39, 0x72, 0x80, 0x11, 0xf9, 0x1c,",
          "2961:  0x4c, 0xde, 0x49, 0xa2, 0x50, 0x47, 0xc5, 0x46, 0x87, 0x46, 0xc5, 0x2c, 0xaa, 0xc1, 0x51, 0xb1,",
          "2962:  0xb1, 0x43, 0x46, 0xc5, 0xfe, 0x62, 0x14, 0x4e, 0xeb, 0xf3, 0x60, 0x9a, 0xde, 0x8d, 0xe2, 0xed,",
          "2963:  0x20, 0x6c, 0xf2, 0x33, 0xd4, 0x2f, 0x3a, 0x30, 0x29, 0x86, 0xb7, 0xbc, 0x5f, 0x2e, 0xce, 0x0c,",
          "2964:  0x1b, 0x05, 0x5d, 0x01, 0xca, 0x08, 0x9b, 0xdf, 0xb0, 0x04, 0xe5, 0x2e, 0xfb, 0xdb, 0x28, 0xcc,",
          "2965:  0x68, 0x44, 0x3e, 0x00, 0xa0, 0x1e, 0x41, 0x6a, 0x14, 0xf4, 0x14, 0x94, 0xd2, 0x0f, 0x69, 0xc3,",
          "2966:  0xb8, 0x92, 0x1b, 0x5a, 0x08, 0x5a, 0x02, 0xc9, 0x2b, 0x0e, 0x8c, 0xb5, 0x44, 0xdb, 0x88, 0x03,",
          "2967:  0xa0, 0x97, 0x1e, 0x49, 0xdb, 0xd8, 0xad, 0xa2, 0x97, 0x65, 0xd9, 0x1e, 0x52, 0x3e, 0x41, 0x18,",
          "2968:  0x0f, 0xc2, 0x26, 0xeb, 0x56, 0x19, 0x48, 0x7c, 0xc3, 0xa0, 0xfc, 0x83, 0xd5, 0xc8, 0xab, 0xd7,",
          "2969:  0xbc, 0x96, 0x17, 0xfa, 0x34, 0x5e, 0x11, 0xe4, 0xf6, 0x53, 0x34, 0x1c, 0x80, 0x8a, 0x51, 0xdf,",
          "2970:  0x1d, 0xb7, 0xd1, 0x83, 0xdc, 0x71, 0x3b, 0xf3, 0x0e, 0x98, 0xe9, 0xeb, 0xcc, 0x43, 0xdd, 0xfc,",
          "2971:  0xff, 0x49, 0x98, 0x78, 0xc8, 0xa2, 0xee, 0x9f, 0x8e, 0x99, 0x35, 0xe6, 0x7a, 0x54, 0x17, 0x37,",
          "2972:  0xad, 0x62, 0xd3, 0xa3, 0xd2, 0x55, 0x2c, 0x70, 0x88, 0x58, 0xcf, 0xd9, 0x68, 0x20, 0xda, 0x22,",
          "2973:  0xd9, 0x18, 0xed, 0x78, 0x31, 0x0d, 0x1f, 0xf5, 0x18, 0x5d, 0xd3, 0x42, 0xd0, 0x12, 0x48, 0xb6,",
          "2974:  0x32, 0x27, 0x94, 0x17, 0x8f, 0x7e, 0x42, 0xc9, 0xbc, 0xd7, 0x81, 0x37, 0x62, 0x3e, 0xed, 0xc0,",
          "2975:  0x74, 0x98, 0x19, 0xb9, 0xf2, 0x94, 0x6a, 0xe3, 0x51, 0xcc, 0x0a, 0x71, 0xc3, 0x35, 0x0b, 0xc3,",
          "2976:  0x9c, 0xfc, 0x41, 0x2b, 0xd0, 0xe8, 0x21, 0x57, 0x20, 0x73, 0x65, 0x73, 0x6c, 0xd8, 0x95, 0x4d,",
          "2977:  0x12, 0xea, 0xcb, 0xda, 0xe3, 0x85, 0x5f, 0xd6, 0x86, 0x01, 0x17, 0xb5, 0x6f, 0x43, 0xd5, 0x8f,",
          "2978:  0xa9, 0x97, 0x3e, 0xe4, 0xbd, 0x5d, 0xfe, 0x80, 0xd8, 0x92, 0x62, 0x80, 0x86, 0x97, 0xfb, 0xd7,",
          "2979:  0x65, 0x38, 0xae, 0x5a, 0x44, 0x9d, 0xde, 0xb0, 0xe5, 0x4c, 0xc8, 0x35, 0xbe, 0xa8, 0x5e, 0xce,",
          "2980:  0x2e, 0x2b, 0x04, 0x1a, 0x1a, 0xe6, 0x3e, 0x75, 0x13, 0x7a, 0xa3, 0x43, 0xc3, 0xd5, 0x60, 0x33,",
          "2981:  0xe1, 0x2d, 0x6e, 0xa5, 0x80, 0xdd, 0x34, 0x28, 0xb4, 0xe9, 0x98, 0xef, 0x2c, 0xdc, 0xd8, 0x24,",
          "2982:  0x7f, 0x18, 0x2a, 0xdd, 0x63, 0x54, 0x78, 0xf2, 0x85, 0x81, 0xaf, 0x2e, 0x14, 0x93, 0x06, 0xd0,",
          "2983:  0x77, 0x68, 0x75, 0xc8, 0xe7, 0x16, 0x5e, 0x75, 0xe0, 0xd8, 0x76, 0x26, 0xff, 0x44, 0x99, 0xe4,",
          "2984:  0x23, 0x66, 0x35, 0x66, 0x93, 0x5a, 0xcc, 0x10, 0xce, 0xc2, 0x13, 0xcc, 0x4b, 0x77, 0xff, 0xcb,",
          "2985:  0x01, 0xdb, 0x3c, 0x1d, 0xcc, 0x11, 0xb2, 0xde, 0xd1, 0x29, 0xed, 0xf3, 0x8e, 0x8e, 0xf2, 0x99,",
          "2986:  0xca, 0x07, 0xf3, 0xd1, 0x47, 0x0e, 0xe1, 0xa3, 0x8f, 0x0e, 0x75, 0xb2, 0x5e, 0x0b, 0xe5, 0x6e,",
          "2987:  0x50, 0x97, 0x6e, 0xb6, 0x39, 0x90, 0x5a, 0x59, 0x46, 0x06, 0x77, 0xff, 0x68, 0xd4, 0x6c, 0xab,",
          "2988:  0xe5, 0xe9, 0xf5, 0x0f, 0x44, 0xb5, 0x1b, 0x3a, 0x49, 0x55, 0xd4, 0xfc, 0x7a, 0x5f, 0x92, 0xea,",
          "2989:  0xdb, 0x0e, 0x9f, 0x9c, 0x20, 0x1a, 0x68, 0x58, 0x8e, 0xea, 0xf8, 0x3e, 0x99, 0x09, 0x77, 0xa0,",
          "2990:  0xc2, 0x76, 0x22, 0x3c, 0x3e, 0x56, 0xc9, 0x28, 0x55, 0xb9, 0x2c, 0xe1, 0xf7, 0xf7, 0xe6, 0xde,",
          "2991:  0x7a, 0x78, 0xb5, 0x54, 0x69, 0xd4, 0xfc, 0x49, 0x02, 0x55, 0xf6, 0x9b, 0x27, 0x51, 0xc8, 0x3d,",
          "2992:  0xce, 0x4d, 0x6d, 0x8b, 0x14, 0xa2, 0x90, 0x0c, 0x0d, 0x23, 0x87, 0x84, 0x50, 0xe5, 0x2f, 0xbe,",
          "2993:  0x70, 0xa1, 0x62, 0x2b, 0xb4, 0xa6, 0x53, 0x19, 0x14, 0xe2, 0xfe, 0xde, 0xdc, 0x0b, 0x87, 0x17,",
          "2994:  0xaa, 0x8b, 0xa3, 0x11, 0xe1, 0x7e, 0xa7, 0x6c, 0xc6, 0xae, 0xcc, 0x4d, 0xfe, 0x81, 0x18, 0xbb,",
          "2995:  0xcf, 0xe7, 0xc6, 0xee, 0xb9, 0xbe, 0xb1, 0x3b, 0x6d, 0x5e, 0x45, 0xc9, 0x8c, 0xc6, 0xc7, 0xbd,",
          "2996:  0xc0, 0xee, 0xbf, 0xed, 0xe6, 0x9e, 0xc5, 0xcb, 0xdd, 0x20, 0xa6, 0xc9, 0x5a, 0xdc, 0x0d, 0x83,",
          "2997:  0xb0, 0xc9, 0x87, 0x63, 0xc5, 0xf6, 0x2c, 0x32, 0x68, 0xcc, 0xd3, 0xbb, 0x5f, 0xe2, 0x67, 0x8e,",
          "2998:  0x56, 0x3e, 0x16, 0xeb, 0xe5, 0x16, 0x7f, 0x34, 0x47, 0x64, 0x84, 0xea, 0x5e, 0x16, 0x2f, 0xe5,",
          "2999:  0x08, 0x1c, 0xb9, 0x0b, 0xe3, 0x9b, 0xe2, 0xe2, 0x7e, 0x31, 0x17, 0x84, 0xe4, 0x2b, 0x00, 0xfc,",
          "3000:  0x2a, 0xa6, 0x7a, 0x12, 0xe0, 0xbe, 0xf9, 0x89, 0x4a, 0x9a, 0xfb, 0x6b, 0x65, 0x38, 0x96, 0x7b,",
          "3001:  0xd2, 0x85, 0xed, 0xcf, 0xd5, 0xfb, 0x3d, 0xf9, 0x60, 0xba, 0x7e, 0xa7, 0x56, 0x53, 0x90, 0xf7,",
          "3002:  0x02, 0xd4, 0x69, 0xa7, 0x15, 0xf5, 0xb8, 0xe3, 0x32, 0x72, 0x68, 0xc7, 0x45, 0xfb, 0xba, 0xcb,",
          "3003:  0x9a, 0x0b, 0x5a, 0x1c, 0x65, 0x1a, 0xec, 0xa8, 0x78, 0x96, 0x20, 0x9b, 0x06, 0x6b, 0xdd, 0x93,",
          "3004:  0x1b, 0x7b, 0xbc, 0xf7, 0xe4, 0x02, 0x38, 0x26, 0x54, 0xd4, 0x59, 0x4f, 0x0f, 0x91, 0xdc, 0x74,",
          "3005:  0x82, 0x8d, 0xa8, 0xe5, 0x2c, 0x1b, 0xcc, 0xf3, 0x75, 0x3f, 0x55, 0x62, 0xee, 0x9b, 0x68, 0xec,",
          "3006:  0x6b, 0x2a, 0x96, 0xfd, 0x7a, 0x18, 0xf3, 0xba, 0xe9, 0x56, 0xd4, 0xf7, 0x90, 0xc2, 0x22, 0x87,",
          "3007:  0xa2, 0xc4, 0x92, 0x55, 0x18, 0xa9, 0x7b, 0xa9, 0x7a, 0x67, 0xfd, 0x30, 0xca, 0x99, 0xc0, 0x95,",
          "3008:  0x97, 0x52, 0xe4, 0x5c, 0xc8, 0x53, 0x30, 0x92, 0x7a, 0xcd, 0xcc, 0x0b, 0x8f, 0x1b, 0x5e, 0x33,",
          "3009:  0x41, 0x0e, 0xb5, 0x57, 0x97, 0x91, 0x7d, 0x56, 0x97, 0x17, 0xac, 0x7f, 0x00, 0xb0, 0x0e, 0x49,",
          "3010:  0xfa, 0x5f, 0xed, 0x17, 0x89, 0xf9, 0x19, 0x5a, 0xf7, 0xc7, 0x60, 0xd2, 0x7e, 0xd5, 0xff, 0x40,",
          "3011:  0xf7, 0x7a, 0xdc, 0x7f, 0x1d, 0x81, 0xa9, 0x4c, 0x66, 0x5c, 0x66, 0x94, 0x3b, 0xfb, 0x8e, 0x72,",
          "3012:  0x7e, 0xa6, 0xd5, 0x0d, 0xa9, 0xcc, 0x7b, 0xb4, 0xce, 0xb4, 0xba, 0x21, 0x45, 0x81, 0x63, 0xbd,",
          "3013:  0x52, 0x8f, 0x7b, 0xd8, 0x0d, 0x65, 0x10, 0x5d, 0xf7, 0xca, 0x32, 0x87, 0xa2, 0xc4, 0xb2, 0x0d,",
          "3014:  0xec, 0x64, 0xc2, 0x8d, 0xa2, 0xb0, 0x11, 0x72, 0xd6, 0x5c, 0x29, 0xe2, 0xf1, 0x29, 0x99, 0x05,",
          "3015:  0xca, 0x37, 0xf4, 0x36, 0x04, 0x33, 0x12, 0xc9, 0x47, 0x1d, 0xfb, 0xd9, 0xad, 0xb1, 0x22, 0x0e,",
          "3016:  0x7f, 0xf2, 0x89, 0x87, 0x62, 0x06, 0x3d, 0xf8, 0xf5, 0xad, 0x44, 0x4f, 0xe0, 0xf1, 0x47, 0x33,",
          "3017:  0x81, 0x61, 0xc0, 0xe4, 0x7d, 0x23, 0x54, 0xdb, 0x5e, 0x18, 0x34, 0x68, 0x92, 0x8a, 0x7f, 0xe4,",
          "3018:  0xa8, 0x8a, 0xdd, 0xd3, 0x35, 0x05, 0x44, 0x83, 0xe7, 0xff, 0x7b, 0xc3, 0x2b, 0x26, 0x36, 0x31,",
          "3019:  0x55, 0xeb, 0x7f, 0x6f, 0x0c, 0x18, 0x6d, 0x1a, 0xf7, 0xf7, 0x1d, 0x38, 0x35, 0xb0, 0x31, 0xbe,",
          "3020:  0x7f, 0xa3, 0x95, 0xee, 0x1f, 0x94, 0xe0, 0xc4, 0x80, 0xcc, 0x51, 0xd2, 0x7b, 0x64, 0xaf, 0xb3,",
          "3021:  0xc9, 0xd4, 0xd4, 0xa9, 0xa1, 0x63, 0xe3, 0x70, 0xcb, 0x90, 0x59, 0x0a, 0xca, 0x8f, 0x75, 0x29,",
          "3022:  0x70, 0xbf, 0x54, 0x02, 0xeb, 0x1d, 0x41, 0xf2, 0x41, 0x3b, 0x49, 0xda, 0x29, 0x2a, 0xa1, 0x57,",
          "3023:  0x30, 0xd7, 0x49, 0xd6, 0xa2, 0xd5, 0x06, 0xe5, 0x5c, 0xe7, 0xc7, 0x6b, 0x69, 0xff, 0xf1, 0x4a,",
          "3024:  0x5a, 0x2a, 0x1b, 0xbd, 0x5c, 0x7c, 0x36, 0x7a, 0xb5, 0x2f, 0x13, 0xfd, 0x57, 0x1c, 0x31, 0xd2,",
          "3025:  0x72, 0x55, 0x32, 0x16, 0xd6, 0x79, 0x80, 0x85, 0x7d, 0x13, 0x54, 0x12, 0xda, 0x6a, 0x30, 0xcf,",
          "3026:  0x4e, 0x5a, 0x62, 0x3d, 0x26, 0xd6, 0x25, 0x1c, 0x35, 0x05, 0xbf, 0xa7, 0xda, 0x6a, 0x45, 0x77,",
          "3027:  0x2f, 0xb4, 0x3b, 0x69, 0x4f, 0xda, 0x64, 0x73, 0x4f, 0x55, 0x63, 0xd0, 0xa2, 0x72, 0xff, 0xdb,",
          "3028:  0x11, 0xdd, 0x29, 0x7d, 0xf4, 0xe7, 0x73, 0xf7, 0x07, 0x0f, 0xee, 0xde, 0xfe, 0x3c, 0x80, 0xaf,",
          "3029:  0x6f, 0xf4, 0x17, 0xf3, 0xbc, 0xa0, 0x79, 0x21, 0xc0, 0x7e, 0xf3, 0x4e, 0xc1, 0xd0, 0x92, 0x97,",
          "3030:  0x99, 0x3c, 0xe5, 0xfd, 0x26, 0x8f, 0xfb, 0x1f, 0x0e, 0x64, 0x16, 0x0b, 0xd2, 0x81, 0x51, 0xa6,",
          "3031:  0x41, 0xaf, 0x98, 0xf7, 0x07, 0x6c, 0xd6, 0x6c, 0x62, 0xc9, 0x61, 0xc1, 0x7f, 0xa2, 0x10, 0x44,",
          "3032:  0x5a, 0xd2, 0x3b, 0x2f, 0x15, 0xf1, 0x46, 0x86, 0x2d, 0x90, 0xf9, 0xf7, 0xf2, 0x3f, 0x0e, 0xb4,",
          "3033:  0xa7, 0xef, 0x3e, 0x0f, 0x33, 0x7d, 0x4a, 0xf1, 0x1b, 0x45, 0x91, 0x7a, 0x74, 0xc1, 0x1a, 0x81,",
          "3034:  0xfc, 0x7e, 0x23, 0x0a, 0x1c, 0x73, 0xf0, 0x8f, 0xe7, 0xd9, 0x93, 0xcf, 0x3b, 0x30, 0x93, 0xe4,",
          "3035:  0xf9, 0x3d, 0xaa, 0xb6, 0xd3, 0x91, 0xab, 0x3e, 0x14, 0xf6, 0x2b, 0xe1, 0xfe, 0xa5, 0x34, 0x4f,",
          "3036:  0xe2, 0x3f, 0xa1, 0xf4, 0xe2, 0xe2, 0x0c, 0x5d, 0x5c, 0xd8, 0x14, 0xf3, 0xb7, 0x68, 0xbd, 0xdb,",
          "3037:  0xea, 0x4b, 0xa5, 0x59, 0x97, 0x70, 0xd4, 0x14, 0x99, 0x67, 0xc6, 0xca, 0xfb, 0x3e, 0x33, 0xf6,",
          "3038:  0x1c, 0x4c, 0xda, 0x0f, 0x8b, 0xf0, 0x10, 0x9a, 0x3c, 0x7c, 0xb0, 0xdf, 0x20, 0xc1, 0x0c, 0x55,",
          "3039:  0xee, 0x99, 0xaa, 0xd1, 0x7d, 0x9f, 0xa9, 0x7a, 0x06, 0x2a, 0xf2, 0x2f, 0x96, 0x54, 0x7c, 0x57,",
          "3040:  0xe4, 0xe9, 0x48, 0x18, 0x6a, 0x2c, 0x33, 0x10, 0x6d, 0x2f, 0xec, 0x7a, 0x2d, 0xd6, 0x42, 0x32,",
          "3041:  0x27, 0x4f, 0xcf, 0xac, 0x6b, 0x1a, 0x83, 0x16, 0x95, 0xfb, 0x2f, 0x0e, 0xe4, 0x1f, 0xfe, 0xc9,",
          "3042:  0x64, 0xf6, 0x39, 0xfb, 0x66, 0xf6, 0x65, 0x13, 0x9c, 0x4a, 0x07, 0x4a, 0x70, 0xb2, 0x73, 0x8f,",
          "3043:  0xca, 0x0f, 0xcc, 0x3d, 0x7a, 0x9d, 0xb9, 0x15, 0x2e, 0x92, 0x94, 0x26, 0x06, 0xdd, 0x08, 0x27,",
          "3044:  0x2e, 0x8c, 0xf9, 0x9e, 0x4e, 0x9c, 0x9e, 0x14, 0x8e, 0xd2, 0xd2, 0x22, 0x27, 0x92, 0x98, 0xda,",
          "3045:  0xfc, 0x57, 0xbe, 0x7d, 0xf6, 0x89, 0xaf, 0x7e, 0xfb, 0xec, 0x13, 0xdf, 0xf8, 0xf6, 0xd9, 0x27,",
          "3046:  0x3e, 0x7c, 0xef, 0xac, 0xf3, 0x95, 0x7b, 0x67, 0x9d, 0xaf, 0xde, 0x3b, 0xeb, 0x7c, 0xe3, 0xde,",
          "3047:  0x59, 0xe7, 0x5b, 0xf7, 0xce, 0x3a, 0x9f, 0xfe, 0xc7, 0xb3, 0x4f, 0xbc, 0xab, 0xa2, 0xc6, 0xea,",
          "3048:  0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x6e, 0xec, 0x2c, 0x61, 0x74, 0x00, 0x00,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6221:  _ = i",
          "6222:  var l int",
          "6223:  _ = l",
          "6224:  i -= len(m.GitHubAppEnterpriseBaseURL)",
          "6225:  copy(dAtA[i:], m.GitHubAppEnterpriseBaseURL)",
          "6226:  i = encodeVarintGenerated(dAtA, i, uint64(len(m.GitHubAppEnterpriseBaseURL)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6225:  i -= len(m.Proxy)",
          "6226:  copy(dAtA[i:], m.Proxy)",
          "6227:  i = encodeVarintGenerated(dAtA, i, uint64(len(m.Proxy)))",
          "6228:  i--",
          "6229:  dAtA[i] = 0x1",
          "6230:  i--",
          "6231:  dAtA[i] = 0x9a",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9298:  n += 2 + sovGenerated(uint64(m.GithubAppInstallationId))",
          "9299:  l = len(m.GitHubAppEnterpriseBaseURL)",
          "9300:  n += 2 + l + sovGenerated(uint64(l))",
          "9301:  return n",
          "9302: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9309:  l = len(m.Proxy)",
          "9310:  n += 2 + l + sovGenerated(uint64(l))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10922:   `GithubAppId:` + fmt.Sprintf(\"%v\", this.GithubAppId) + `,`,",
          "10923:   `GithubAppInstallationId:` + fmt.Sprintf(\"%v\", this.GithubAppInstallationId) + `,`,",
          "10924:   `GitHubAppEnterpriseBaseURL:` + fmt.Sprintf(\"%v\", this.GitHubAppEnterpriseBaseURL) + `,`,",
          "10925:   `}`,",
          "10926:  }, \"\")",
          "10927:  return s",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10935:   `Proxy:` + fmt.Sprintf(\"%v\", this.Proxy) + `,`,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "22033:    }",
          "22034:    m.GitHubAppEnterpriseBaseURL = string(dAtA[iNdEx:postIndex])",
          "22035:    iNdEx = postIndex",
          "22036:   default:",
          "22037:    iNdEx = preIndex",
          "22038:    skippy, err := skipGenerated(dAtA[iNdEx:])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22047:   case 19:",
          "22048:    if wireType != 2 {",
          "22049:     return fmt.Errorf(\"proto: wrong wireType = %d for field Proxy\", wireType)",
          "22050:    }",
          "22051:    var stringLen uint64",
          "22052:    for shift := uint(0); ; shift += 7 {",
          "22053:     if shift >= 64 {",
          "22054:      return ErrIntOverflowGenerated",
          "22055:     }",
          "22056:     if iNdEx >= l {",
          "22057:      return io.ErrUnexpectedEOF",
          "22058:     }",
          "22059:     b := dAtA[iNdEx]",
          "22060:     iNdEx++",
          "22061:     stringLen |= uint64(b&0x7F) << shift",
          "22062:     if b < 0x80 {",
          "22063:      break",
          "22064:     }",
          "22065:    }",
          "22066:    intStringLen := int(stringLen)",
          "22067:    if intStringLen < 0 {",
          "22068:     return ErrInvalidLengthGenerated",
          "22069:    }",
          "22070:    postIndex := iNdEx + intStringLen",
          "22071:    if postIndex < 0 {",
          "22072:     return ErrInvalidLengthGenerated",
          "22073:    }",
          "22074:    if postIndex > l {",
          "22075:     return io.ErrUnexpectedEOF",
          "22076:    }",
          "22077:    m.Proxy = string(dAtA[iNdEx:postIndex])",
          "22078:    iNdEx = postIndex",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/generated.proto||pkg/apis/application/v1alpha1/generated.proto": [
          "File: pkg/apis/application/v1alpha1/generated.proto -> pkg/apis/application/v1alpha1/generated.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "879:   optional string githubAppEnterpriseBaseUrl = 18;",
          "880: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "882:   optional string proxy = 19;",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/openapi_generated.go||pkg/apis/application/v1alpha1/openapi_generated.go": [
          "File: pkg/apis/application/v1alpha1/openapi_generated.go -> pkg/apis/application/v1alpha1/openapi_generated.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "2983:        Format:      \"\",",
          "2984:       },",
          "2985:      },",
          "2986:     },",
          "2987:     Required: []string{\"repo\"},",
          "2988:    },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2986:      \"proxy\": {",
          "2987:       SchemaProps: spec.SchemaProps{",
          "2988:        Description: \"Proxy specifies the HTTP/HTTPS proxy used to access the repo\",",
          "2989:        Type:        []string{\"string\"},",
          "2990:        Format:      \"\",",
          "2991:       },",
          "2992:      },",
          "",
          "---------------"
        ],
        "pkg/apis/application/v1alpha1/repository_types.go||pkg/apis/application/v1alpha1/repository_types.go": [
          "File: pkg/apis/application/v1alpha1/repository_types.go -> pkg/apis/application/v1alpha1/repository_types.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:  GithubAppInstallationId int64 `json:\"githubAppInstallationID,omitempty\" protobuf:\"bytes,17,opt,name=githubAppInstallationID\"`",
          "80:  GitHubAppEnterpriseBaseURL string `json:\"githubAppEnterpriseBaseUrl,omitempty\" protobuf:\"bytes,18,opt,name=githubAppEnterpriseBaseUrl\"`",
          "81: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:  Proxy string `json:\"proxy,omitempty\" protobuf:\"bytes,19,opt,name=proxy\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "167:   return git.NopCreds{}",
          "168:  }",
          "169:  if repo.Username != \"\" && repo.Password != \"\" {",
          "171:  }",
          "172:  if repo.SSHPrivateKey != \"\" {",
          "173:   return git.NewSSHCreds(repo.SSHPrivateKey, getCAPath(repo.Repo), repo.IsInsecure())",
          "",
          "[Removed Lines]",
          "170:   return git.NewHTTPSCreds(repo.Username, repo.Password, repo.TLSClientCertData, repo.TLSClientCertKey, repo.IsInsecure())",
          "",
          "[Added Lines]",
          "172:   return git.NewHTTPSCreds(repo.Username, repo.Password, repo.TLSClientCertData, repo.TLSClientCertKey, repo.IsInsecure(), repo.Proxy)",
          "",
          "---------------"
        ],
        "reposerver/repository/repository.go||reposerver/repository/repository.go": [
          "File: reposerver/repository/repository.go -> reposerver/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:  cache                     *reposervercache.Cache",
          "69:  parallelismLimitSemaphore *semaphore.Weighted",
          "70:  metricsServer             *metrics.MetricsServer",
          "73:  initConstants             RepoServerInitConstants",
          "75:  now func() time.Time",
          "",
          "[Removed Lines]",
          "71:  newGitClient              func(rawRepoURL string, creds git.Creds, insecure bool, enableLfs bool, opts ...git.ClientOpts) (git.Client, error)",
          "72:  newHelmClient             func(repoURL string, creds helm.Creds, enableOci bool, opts ...helm.ClientOpts) helm.Client",
          "",
          "[Added Lines]",
          "71:  newGitClient              func(rawRepoURL string, creds git.Creds, insecure bool, enableLfs bool, proxy string, opts ...git.ClientOpts) (git.Client, error)",
          "72:  newHelmClient             func(repoURL string, creds helm.Creds, enableOci bool, proxy string, opts ...helm.ClientOpts) helm.Client",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:   cache:                     cache,",
          "96:   metricsServer:             metricsServer,",
          "97:   newGitClient:              git.NewClient,",
          "100:   },",
          "101:   initConstants: initConstants,",
          "102:   now:           time.Now,",
          "",
          "[Removed Lines]",
          "98:   newHelmClient: func(repoURL string, creds helm.Creds, enableOci bool, opts ...helm.ClientOpts) helm.Client {",
          "99:    return helm.NewClientWithLock(repoURL, creds, sync.NewKeyLock(), enableOci, opts...)",
          "",
          "[Added Lines]",
          "98:   newHelmClient: func(repoURL string, creds helm.Creds, enableOci bool, proxy string, opts ...helm.ClientOpts) helm.Client {",
          "99:    return helm.NewClientWithLock(repoURL, creds, sync.NewKeyLock(), enableOci, proxy, opts...)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "657:   }",
          "658:  }",
          "661:  if err != nil {",
          "662:   return nil, err",
          "663:  }",
          "",
          "[Removed Lines]",
          "660:  h, err := helm.NewHelmApp(appPath, getHelmRepos(q.Repos), isLocal, version)",
          "",
          "[Added Lines]",
          "660:  var proxy string",
          "661:  if q.Repo != nil {",
          "662:   proxy = q.Repo.Proxy",
          "663:  }",
          "665:  h, err := helm.NewHelmApp(appPath, getHelmRepos(q.Repos), isLocal, version, proxy)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1239:    version = q.Source.Helm.Version",
          "1240:   }",
          "1241:  }",
          "1243:  if err != nil {",
          "1244:   return err",
          "1245:  }",
          "",
          "[Removed Lines]",
          "1242:  h, err := helm.NewHelmApp(appPath, getHelmRepos(q.Repos), false, version)",
          "",
          "[Added Lines]",
          "1247:  h, err := helm.NewHelmApp(appPath, getHelmRepos(q.Repos), false, version, q.Repo.Proxy)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1409: func (s *Service) newClient(repo *v1alpha1.Repository, opts ...git.ClientOpts) (git.Client, error) {",
          "1410:  opts = append(opts, git.WithEventHandlers(metrics.NewGitClientEventHandlers(s.metricsServer)))",
          "1412: }",
          "",
          "[Removed Lines]",
          "1411:  return s.newGitClient(repo.Repo, repo.GetGitCreds(), repo.IsInsecure(), repo.EnableLFS, opts...)",
          "",
          "[Added Lines]",
          "1416:  return s.newGitClient(repo.Repo, repo.GetGitCreds(), repo.IsInsecure(), repo.EnableLFS, repo.Proxy, opts...)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1428: func (s *Service) newHelmClientResolveRevision(repo *v1alpha1.Repository, revision string, chart string, noRevisionCache bool) (helm.Client, string, error) {",
          "1429:  enableOCI := repo.EnableOCI || helm.IsHelmOciRepo(repo.Repo)",
          "1432:  if helm.IsVersion(revision) || enableOCI {",
          "1433:   return helmClient, revision, nil",
          "",
          "[Removed Lines]",
          "1430:  helmClient := s.newHelmClient(repo.Repo, repo.GetHelmCreds(), enableOCI, helm.WithIndexCache(s.cache))",
          "",
          "[Added Lines]",
          "1435:  helmClient := s.newHelmClient(repo.Repo, repo.GetHelmCreds(), enableOCI, repo.Proxy, helm.WithIndexCache(s.cache))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1485: }",
          "1487: func (s *Service) GetHelmCharts(ctx context.Context, q *apiclient.HelmChartsRequest) (*apiclient.HelmChartsResponse, error) {",
          "1489:  if err != nil {",
          "1490:   return nil, err",
          "1491:  }",
          "",
          "[Removed Lines]",
          "1488:  index, err := s.newHelmClient(q.Repo.Repo, q.Repo.GetHelmCreds(), q.Repo.EnableOCI).GetIndex(true)",
          "",
          "[Added Lines]",
          "1493:  index, err := s.newHelmClient(q.Repo.Repo, q.Repo.GetHelmCreds(), q.Repo.EnableOCI, q.Repo.Proxy).GetIndex(true)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1506:  repo := q.Repo",
          "1507:  checks := map[string]func() error{",
          "1508:   \"git\": func() error {",
          "1510:   },",
          "1511:   \"helm\": func() error {",
          "1512:    if repo.EnableOCI {",
          "1513:     if !helm.IsHelmOciRepo(repo.Repo) {",
          "1514:      return errors.New(\"OCI Helm repository URL should include hostname and port only\")",
          "1515:     }",
          "1517:     return err",
          "1518:    } else {",
          "1520:     return err",
          "1521:    }",
          "1522:   },",
          "",
          "[Removed Lines]",
          "1509:    return git.TestRepo(repo.Repo, repo.GetGitCreds(), repo.IsInsecure(), repo.IsLFSEnabled())",
          "1516:     _, err := helm.NewClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI).TestHelmOCI()",
          "1519:     _, err := helm.NewClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI).GetIndex(false)",
          "",
          "[Added Lines]",
          "1514:    return git.TestRepo(repo.Repo, repo.GetGitCreds(), repo.IsInsecure(), repo.IsLFSEnabled(), repo.Proxy)",
          "1521:     _, err := helm.NewClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI, repo.Proxy).TestHelmOCI()",
          "1524:     _, err := helm.NewClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI, repo.Proxy).GetIndex(false)",
          "",
          "---------------"
        ],
        "reposerver/repository/repository_test.go||reposerver/repository/repository_test.go": [
          "File: reposerver/repository/repository_test.go -> reposerver/repository/repository_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:  helmClient.On(\"ExtractChart\", chart, version).Return(\"./testdata/my-chart\", io.NopCloser, nil)",
          "81:  helmClient.On(\"CleanChartCache\", chart, version).Return(nil)",
          "84:   return gitClient, nil",
          "85:  }",
          "87:   return helmClient",
          "88:  }",
          "89:  return service, gitClient",
          "",
          "[Removed Lines]",
          "83:  service.newGitClient = func(rawRepoURL string, creds git.Creds, insecure bool, enableLfs bool, opts ...git.ClientOpts) (client git.Client, e error) {",
          "86:  service.newHelmClient = func(repoURL string, creds helm.Creds, enableOci bool, opts ...helm.ClientOpts) helm.Client {",
          "",
          "[Added Lines]",
          "83:  service.newGitClient = func(rawRepoURL string, creds git.Creds, insecure bool, enableLfs bool, prosy string, opts ...git.ClientOpts) (client git.Client, e error) {",
          "86:  service.newHelmClient = func(repoURL string, creds helm.Creds, enableOci bool, proxy string, opts ...helm.ClientOpts) helm.Client {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:   gitClient.On(\"Root\").Return(root)",
          "117:  })",
          "120:   return gitClient, nil",
          "121:  }",
          "",
          "[Removed Lines]",
          "119:  service.newGitClient = func(rawRepoURL string, creds git.Creds, insecure bool, enableLfs bool, opts ...git.ClientOpts) (client git.Client, e error) {",
          "",
          "[Added Lines]",
          "119:  service.newGitClient = func(rawRepoURL string, creds git.Creds, insecure bool, enableLfs bool, proxy string, opts ...git.ClientOpts) (client git.Client, e error) {",
          "",
          "---------------"
        ],
        "server/application/application.go||server/application/application.go": [
          "File: server/application/application.go -> server/application/application.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1510:   if helm.IsVersion(ambiguousRevision) {",
          "1511:    return ambiguousRevision, ambiguousRevision, nil",
          "1512:   }",
          "1514:   index, err := client.GetIndex(false)",
          "1515:   if err != nil {",
          "1516:    return \"\", \"\", err",
          "",
          "[Removed Lines]",
          "1513:   client := helm.NewClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI || app.Spec.Source.IsHelmOci())",
          "",
          "[Added Lines]",
          "1513:   client := helm.NewClient(repo.Repo, repo.GetHelmCreds(), repo.EnableOCI || app.Spec.Source.IsHelmOci(), repo.Proxy)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1537:   if err != nil {",
          "1538:    return \"\", \"\", err",
          "1539:   }",
          "1541:   if err != nil {",
          "1542:    return \"\", \"\", err",
          "1543:   }",
          "",
          "[Removed Lines]",
          "1540:   gitClient, err := git.NewClient(repo.Repo, repo.GetGitCreds(), repo.IsInsecure(), repo.IsLFSEnabled())",
          "",
          "[Added Lines]",
          "1540:   gitClient, err := git.NewClient(repo.Repo, repo.GetGitCreds(), repo.IsInsecure(), repo.IsLFSEnabled(), repo.Proxy)",
          "",
          "---------------"
        ],
        "server/repository/repository.go||server/repository/repository.go": [
          "File: server/repository/repository.go -> server/repository/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   GithubAppId:                repo.GithubAppId,",
          "119:   GithubAppInstallationId:    repo.GithubAppInstallationId,",
          "120:   GitHubAppEnterpriseBaseURL: repo.GitHubAppEnterpriseBaseURL,",
          "121:  }",
          "123:  item.ConnectionState = s.getConnectionState(ctx, item.Repo, q.ForceRefresh)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:   Proxy:                      repo.Proxy,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:     Insecure:  repo.IsInsecure(),",
          "149:     EnableLFS: repo.EnableLFS,",
          "150:     EnableOCI: repo.EnableOCI,",
          "151:    })",
          "152:   }",
          "153:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:     Proxy:     repo.Proxy,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389:   GithubAppId:                q.GithubAppID,",
          "390:   GithubAppInstallationId:    q.GithubAppInstallationID,",
          "391:   GitHubAppEnterpriseBaseURL: q.GithubAppEnterpriseBaseUrl,",
          "392:  }",
          "394:  var repoCreds *appsv1.RepoCreds",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:   Proxy:                      q.Proxy,",
          "",
          "---------------"
        ],
        "server/repository/repository.proto||server/repository/repository.proto": [
          "File: server/repository/repository.proto -> server/repository/repository.proto",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:  int64 githubAppInstallationID = 14;",
          "76:  string githubAppEnterpriseBaseUrl = 15;",
          "77: }",
          "79: message RepoResponse {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:  string proxy = 16;",
          "",
          "---------------"
        ],
        "test/e2e/delarative_test.go||test/e2e/delarative_test.go": [
          "File: test/e2e/delarative_test.go -> test/e2e/delarative_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  Given(t).",
          "67:   Path(\"whatever\").",
          "68:   When().",
          "70:   Then().",
          "71:   Expect(Success(\"\")).",
          "72:   Expect(HealthIs(health.HealthStatusHealthy)).",
          "",
          "[Removed Lines]",
          "69:   DeclarativeWithCustomRepo(\"declarative-apps/app.yaml\", \"http://github.com\").",
          "",
          "[Added Lines]",
          "69:   DeclarativeWithCustomRepo(\"declarative-apps/app.yaml\", \"https://github.com\").",
          "",
          "---------------"
        ],
        "util/argo/argo.go||util/argo/argo.go": [
          "File: util/argo/argo.go -> util/argo/argo.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "407:  req := apiclient.ManifestRequest{",
          "408:   Repo: &argoappv1.Repository{",
          "412:   },",
          "413:   Repos:             helmRepos,",
          "414:   Revision:          spec.Source.TargetRevision,",
          "",
          "[Removed Lines]",
          "409:    Repo: spec.Source.RepoURL,",
          "410:    Type: repoRes.Type,",
          "411:    Name: repoRes.Name,",
          "",
          "[Added Lines]",
          "409:    Repo:  spec.Source.RepoURL,",
          "410:    Type:  repoRes.Type,",
          "411:    Name:  repoRes.Name,",
          "412:    Proxy: repoRes.Proxy,",
          "",
          "---------------"
        ],
        "util/db/repository.go||util/db/repository.go": [
          "File: util/db/repository.go -> util/db/repository.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   return nil, status.Errorf(codes.AlreadyExists, \"repository '%s' already exists\", r.Repo)",
          "52:  }",
          "68:  repoInfo := settings.Repository{",
          "69:   URL:                        r.Repo,",
          "70:   Type:                       r.Type,",
          "",
          "[Removed Lines]",
          "54:  data := make(map[string][]byte)",
          "55:  if r.Username != \"\" {",
          "56:   data[username] = []byte(r.Username)",
          "57:  }",
          "58:  if r.Password != \"\" {",
          "59:   data[password] = []byte(r.Password)",
          "60:  }",
          "61:  if r.SSHPrivateKey != \"\" {",
          "62:   data[sshPrivateKey] = []byte(r.SSHPrivateKey)",
          "63:  }",
          "64:  if r.GithubAppPrivateKey != \"\" {",
          "65:   data[githubAppPrivateKey] = []byte(r.GithubAppPrivateKey)",
          "66:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   GithubAppId:                r.GithubAppId,",
          "77:   GithubAppInstallationId:    r.GithubAppInstallationId,",
          "78:   GithubAppEnterpriseBaseURL: r.GitHubAppEnterpriseBaseURL,",
          "79:  }",
          "80:  err = db.updateRepositorySecrets(&repoInfo, r)",
          "81:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65:   Proxy:                      r.Proxy,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "184:   GithubAppId:                repoInfo.GithubAppId,",
          "185:   GithubAppInstallationId:    repoInfo.GithubAppInstallationId,",
          "186:   GitHubAppEnterpriseBaseURL: repoInfo.GithubAppEnterpriseBaseURL,",
          "187:  }",
          "188:  err := db.unmarshalFromSecretsStr(map[*SecretMaperValidation]*apiv1.SecretKeySelector{",
          "189:   &SecretMaperValidation{Dest: &repo.Username, Transform: StripCRLFCharacter}:            repoInfo.UsernameSecret,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174:   Proxy:                      repoInfo.Proxy,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "237:  repoInfo.InsecureIgnoreHostKey = r.IsInsecure()",
          "238:  repoInfo.Insecure = r.IsInsecure()",
          "239:  repoInfo.EnableLFS = r.EnableLFS",
          "241:  repos[index] = repoInfo",
          "242:  err = db.settingsMgr.SaveRepositories(repos)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:  repoInfo.Proxy = r.Proxy",
          "",
          "---------------"
        ],
        "util/git/client.go||util/git/client.go": [
          "File: util/git/client.go -> util/git/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  \"github.com/argoproj/argo-cd/v2/common\"",
          "29:  certutil \"github.com/argoproj/argo-cd/v2/util/cert\"",
          "30:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "31: )",
          "33: type RevisionMetadata struct {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:  gitRefCache gitRefCache",
          "89:  loadRefFromCache bool",
          "90: }",
          "92: var (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:  proxy string",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:  }",
          "121: }",
          "124:  r := regexp.MustCompile(\"(/|:)\")",
          "125:  root := filepath.Join(os.TempDir(), r.ReplaceAllString(NormalizeGitURL(rawRepoURL), \"_\"))",
          "126:  if root == os.TempDir() {",
          "127:   return nil, fmt.Errorf(\"Repository '%s' cannot be initialized, because its root would be system temp at %s\", rawRepoURL, root)",
          "128:  }",
          "130: }",
          "133:  client := &nativeGitClient{",
          "134:   repoURL:   rawRepoURL,",
          "135:   root:      root,",
          "136:   creds:     creds,",
          "137:   insecure:  insecure,",
          "138:   enableLfs: enableLfs,",
          "139:  }",
          "140:  for i := range opts {",
          "141:   opts[i](client)",
          "",
          "[Removed Lines]",
          "123: func NewClient(rawRepoURL string, creds Creds, insecure bool, enableLfs bool, opts ...ClientOpts) (Client, error) {",
          "129:  return NewClientExt(rawRepoURL, root, creds, insecure, enableLfs, opts...)",
          "132: func NewClientExt(rawRepoURL string, root string, creds Creds, insecure bool, enableLfs bool, opts ...ClientOpts) (Client, error) {",
          "",
          "[Added Lines]",
          "126: func NewClient(rawRepoURL string, creds Creds, insecure bool, enableLfs bool, proxy string, opts ...ClientOpts) (Client, error) {",
          "132:  return NewClientExt(rawRepoURL, root, creds, insecure, enableLfs, proxy, opts...)",
          "135: func NewClientExt(rawRepoURL string, root string, creds Creds, insecure bool, enableLfs bool, proxy string, opts ...ClientOpts) (Client, error) {",
          "142:   proxy:     proxy,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156:  var customHTTPClient = &http.Client{",
          "",
          "[Removed Lines]",
          "154: func GetRepoHTTPClient(repoURL string, insecure bool, creds Creds) *http.Client {",
          "",
          "[Added Lines]",
          "158: func GetRepoHTTPClient(repoURL string, insecure bool, creds Creds, proxyURL string) *http.Client {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:   },",
          "163:  }",
          "167:  clientCertFunc := func(req *tls.CertificateRequestInfo) (*tls.Certificate, error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:  proxyFunc := proxy.GetCallback(proxyURL)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "190:  if insecure {",
          "191:   customHTTPClient.Transport = &http.Transport{",
          "193:    TLSClientConfig: &tls.Config{",
          "194:     InsecureSkipVerify:   true,",
          "195:     GetClientCertificate: clientCertFunc,",
          "",
          "[Removed Lines]",
          "192:    Proxy: http.ProxyFromEnvironment,",
          "",
          "[Added Lines]",
          "198:    Proxy: proxyFunc,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "207:   } else if len(serverCertificatePem) > 0 {",
          "208:    certPool := certutil.GetCertPoolFromPEMData(serverCertificatePem)",
          "209:    customHTTPClient.Transport = &http.Transport{",
          "211:     TLSClientConfig: &tls.Config{",
          "212:      RootCAs:              certPool,",
          "213:      GetClientCertificate: clientCertFunc,",
          "",
          "[Removed Lines]",
          "210:     Proxy: http.ProxyFromEnvironment,",
          "",
          "[Added Lines]",
          "216:     Proxy: proxyFunc,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "217:   } else {",
          "219:    customHTTPClient.Transport = &http.Transport{",
          "221:     TLSClientConfig: &tls.Config{",
          "222:      GetClientCertificate: clientCertFunc,",
          "223:     },",
          "",
          "[Removed Lines]",
          "220:     Proxy: http.ProxyFromEnvironment,",
          "",
          "[Added Lines]",
          "226:     Proxy: proxyFunc,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "415:  if err != nil {",
          "416:   return nil, err",
          "417:  }",
          "419:  if err == nil && m.gitRefCache != nil {",
          "420:   if err := m.gitRefCache.SetGitReferences(m.repoURL, res); err != nil {",
          "421:    log.Warnf(\"Failed to store git references to cache: %v\", err)",
          "",
          "[Removed Lines]",
          "418:  res, err := listRemote(remote, &git.ListOptions{Auth: auth}, m.insecure, m.creds)",
          "",
          "[Added Lines]",
          "424:  res, err := listRemote(remote, &git.ListOptions{Auth: auth}, m.insecure, m.creds, m.proxy)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "619:    }",
          "620:   }",
          "621:  }",
          "622:  return executil.Run(cmd)",
          "623: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629:  cmd.Env = proxy.UpsertEnv(cmd, m.proxy)",
          "",
          "---------------"
        ],
        "util/git/creds.go||util/git/creds.go": [
          "File: util/git/creds.go -> util/git/creds.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  clientCertData string",
          "84:  clientCertKey string",
          "85: }",
          "88:  return HTTPSCreds{",
          "89:   username,",
          "90:   password,",
          "91:   insecure,",
          "92:   clientCertData,",
          "93:   clientCertKey,",
          "94:  }",
          "95: }",
          "",
          "[Removed Lines]",
          "87: func NewHTTPSCreds(username string, password string, clientCertData string, clientCertKey string, insecure bool) GenericHTTPSCreds {",
          "",
          "[Added Lines]",
          "86:  proxy string",
          "89: func NewHTTPSCreds(username string, password string, clientCertData string, clientCertKey string, insecure bool, proxy string) GenericHTTPSCreds {",
          "96:   proxy,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:  clientCertData string",
          "241:  clientCertKey  string",
          "242:  insecure       bool",
          "243: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:  proxy          string",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "340:  }",
          "344:  itr, err := ghinstallation.New(c.Transport,",
          "345:   g.appID,",
          "346:   g.appInstallId,",
          "",
          "[Removed Lines]",
          "343:  c := GetRepoHTTPClient(baseUrl, g.insecure, g)",
          "",
          "[Added Lines]",
          "347:  c := GetRepoHTTPClient(baseUrl, g.insecure, g, g.proxy)",
          "",
          "---------------"
        ],
        "util/git/git.go||util/git/git.go": [
          "File: util/git/git.go -> util/git/git.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  commitSHARegex = regexp.MustCompile(\"^[0-9A-Fa-f]{40}$\")",
          "27:  sshURLRegex    = regexp.MustCompile(\"^(ssh://)?([^/:]*?)@[^@]+$\")",
          "28:  httpsURLRegex  = regexp.MustCompile(\"^(https://).*\")",
          "29: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:  httpURLRegex   = regexp.MustCompile(\"^(http://).*\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:  return httpsURLRegex.MatchString(url)",
          "85: }",
          "90:  if err != nil {",
          "91:   return err",
          "92:  }",
          "",
          "[Removed Lines]",
          "88: func TestRepo(repo string, creds Creds, insecure bool, enableLfs bool) error {",
          "89:  clnt, err := NewClient(repo, creds, insecure, enableLfs)",
          "",
          "[Added Lines]",
          "89: func IsHTTPURL(url string) bool {",
          "90:  return httpURLRegex.MatchString(url)",
          "91: }",
          "94: func TestRepo(repo string, creds Creds, insecure bool, enableLfs bool, proxy string) error {",
          "95:  clnt, err := NewClient(repo, creds, insecure, enableLfs, proxy)",
          "",
          "---------------"
        ],
        "util/git/git_test.go||util/git/git_test.go": [
          "File: util/git/git_test.go -> util/git/git_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "146:  assert.NotEqual(t, \"\", string(keyData))",
          "151:  assert.NotNil(t, client)",
          "152:  assert.NotNil(t, client.Transport)",
          "153:  if client.Transport != nil {",
          "",
          "[Removed Lines]",
          "149:  creds := NewHTTPSCreds(\"test\", \"test\", string(certData), string(keyData), false)",
          "150:  client := GetRepoHTTPClient(\"https://localhost:9443/foo/bar\", false, creds)",
          "",
          "[Added Lines]",
          "149:  creds := NewHTTPSCreds(\"test\", \"test\", string(certData), string(keyData), false, \"http://proxy:5000\")",
          "150:  client := GetRepoHTTPClient(\"https://localhost:9443/foo/bar\", false, creds, \"http://proxy:5000\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:     assert.NotNil(t, cert.PrivateKey)",
          "167:    }",
          "168:   }",
          "169:  }",
          "174:  assert.NotNil(t, client)",
          "175:  assert.NotNil(t, client.Transport)",
          "176:  if client.Transport != nil {",
          "",
          "[Removed Lines]",
          "172:  creds = NewHTTPSCreds(\"test\", \"test\", \"\", \"\", true)",
          "173:  client = GetRepoHTTPClient(\"https://localhost:9443/foo/bar\", true, creds)",
          "",
          "[Added Lines]",
          "169:   proxy, err := httpClient.Proxy(nil)",
          "170:   assert.Nil(t, err)",
          "171:   assert.Equal(t, \"http://proxy:5000\", proxy.String())",
          "174:  os.Setenv(\"http_proxy\", \"http://proxy-from-env:7878\")",
          "175:  defer func() {",
          "176:   assert.Nil(t, os.Unsetenv(\"http_proxy\"))",
          "177:  }()",
          "180:  creds = NewHTTPSCreds(\"test\", \"test\", \"\", \"\", true, \"\")",
          "181:  client = GetRepoHTTPClient(\"https://localhost:9443/foo/bar\", true, creds, \"\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:     assert.Nil(t, cert.PrivateKey)",
          "190:    }",
          "191:   }",
          "192:  }",
          "193: }",
          "195: func TestLsRemote(t *testing.T) {",
          "197:  assert.NoError(t, err)",
          "198:  xpass := []string{",
          "199:   \"HEAD\",",
          "",
          "[Removed Lines]",
          "196:  clnt, err := NewClientExt(\"https://github.com/argoproj/argo-cd.git\", \"/tmp\", NopCreds{}, false, false)",
          "",
          "[Added Lines]",
          "200:   req, err := http.NewRequest(\"GET\", \"http://proxy-from-env:7878\", nil)",
          "201:   assert.Nil(t, err)",
          "202:   proxy, err := httpClient.Proxy(req)",
          "203:   assert.Nil(t, err)",
          "204:   assert.Equal(t, \"http://proxy-from-env:7878\", proxy.String())",
          "209:  clnt, err := NewClientExt(\"https://github.com/argoproj/argo-cd.git\", \"/tmp\", NopCreds{}, false, false, \"\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "238:   defer func() { _ = os.RemoveAll(tempDir) }()",
          "239:  }",
          "242:  assert.NoError(t, err)",
          "244:  commitSHA, err := client.LsRemote(\"HEAD\")",
          "",
          "[Removed Lines]",
          "241:  client, err := NewClientExt(\"https://github.com/argoproj-labs/argocd-testrepo-lfs\", tempDir, NopCreds{}, false, true)",
          "",
          "[Added Lines]",
          "254:  client, err := NewClientExt(\"https://github.com/argoproj-labs/argocd-testrepo-lfs\", tempDir, NopCreds{}, false, true, \"\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "277:  }",
          "278:  defer os.RemoveAll(p)",
          "281:  assert.NoError(t, err)",
          "283:  err = client.Init()",
          "",
          "[Removed Lines]",
          "280:  client, err := NewClientExt(\"https://github.com/argoproj/argo-cd.git\", p, NopCreds{}, false, false)",
          "",
          "[Added Lines]",
          "293:  client, err := NewClientExt(\"https://github.com/argoproj/argo-cd.git\", p, NopCreds{}, false, false, \"\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "336:   assert.NoError(t, err)",
          "337:   defer func() { _ = os.RemoveAll(dirName) }()",
          "340:   assert.NoError(t, err)",
          "341:   commitSHA, err := client.LsRemote(\"HEAD\")",
          "342:   assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "339:   client, err := NewClientExt(tt.args.url, dirName, NopCreds{}, tt.args.insecureIgnoreHostKey, false)",
          "",
          "[Added Lines]",
          "352:   client, err := NewClientExt(tt.args.url, dirName, NopCreds{}, tt.args.insecureIgnoreHostKey, false, \"\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "377:  defer os.RemoveAll(dir)",
          "379:  repoURL := \"https://github.com/argoproj/argo-cd.git\"",
          "381:  assert.NoError(t, err)",
          "383:  lsResult, err := client.LsRefs()",
          "",
          "[Removed Lines]",
          "380:  client, err := NewClientExt(repoURL, dir, NopCreds{}, false, false)",
          "",
          "[Added Lines]",
          "393:  client, err := NewClientExt(repoURL, dir, NopCreds{}, false, false, \"\")",
          "",
          "---------------"
        ],
        "util/git/workaround.go||util/git/workaround.go": [
          "File: util/git/workaround.go -> util/git/workaround.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  if err != nil {",
          "19:   return nil, err",
          "20:  }",
          "",
          "[Removed Lines]",
          "16: func newUploadPackSession(url string, auth transport.AuthMethod, insecure bool, creds Creds) (transport.UploadPackSession, error) {",
          "17:  c, ep, err := newClient(url, insecure, creds)",
          "",
          "[Added Lines]",
          "16: func newUploadPackSession(url string, auth transport.AuthMethod, insecure bool, creds Creds, proxy string) (transport.UploadPackSession, error) {",
          "17:  c, ep, err := newClient(url, insecure, creds, proxy)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:  return c.NewUploadPackSession(ep, auth)",
          "23: }",
          "26:  ep, err := transport.NewEndpoint(url)",
          "27:  if err != nil {",
          "28:   return nil, nil, err",
          "29:  }",
          "38:   if err != nil {",
          "39:    return nil, nil, err",
          "40:   }",
          "41:  }",
          "43: }",
          "47:  if err != nil {",
          "48:   return nil, err",
          "49:  }",
          "",
          "[Removed Lines]",
          "25: func newClient(url string, insecure bool, creds Creds) (transport.Transport, *transport.Endpoint, error) {",
          "31:  var c transport.Transport",
          "34:  if IsHTTPSURL(url) {",
          "35:   c = http.NewClient(GetRepoHTTPClient(url, insecure, creds))",
          "36:  } else {",
          "37:   c, err = client.NewClient(ep)",
          "42:  return c, ep, err",
          "45: func listRemote(r *git.Remote, o *git.ListOptions, insecure bool, creds Creds) (rfs []*plumbing.Reference, err error) {",
          "46:  s, err := newUploadPackSession(r.Config().URLs[0], o.Auth, insecure, creds)",
          "",
          "[Added Lines]",
          "25: func newClient(url string, insecure bool, creds Creds, proxy string) (transport.Transport, *transport.Endpoint, error) {",
          "31:  if !IsHTTPSURL(url) && !IsHTTPURL(url) {",
          "33:   c, err := client.NewClient(ep)",
          "37:   return c, ep, nil",
          "40:  return http.NewClient(GetRepoHTTPClient(url, insecure, creds, proxy)), ep, nil",
          "43: func listRemote(r *git.Remote, o *git.ListOptions, insecure bool, creds Creds, proxy string) (rfs []*plumbing.Reference, err error) {",
          "44:  s, err := newUploadPackSession(r.Config().URLs[0], o.Auth, insecure, creds, proxy)",
          "",
          "---------------"
        ],
        "util/helm/client.go||util/helm/client.go": [
          "File: util/helm/client.go -> util/helm/client.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"github.com/argoproj/argo-cd/v2/util/cache\"",
          "24:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "25:  \"github.com/argoproj/argo-cd/v2/util/io\"",
          "26: )",
          "28: var (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:  }",
          "60: }",
          "64: }",
          "67:  c := &nativeHelmChart{",
          "68:   repoURL:   repoURL,",
          "69:   creds:     creds,",
          "70:   repoPath:  filepath.Join(os.TempDir(), strings.Replace(repoURL, \"/\", \"_\", -1)),",
          "71:   repoLock:  repoLock,",
          "72:   enableOci: enableOci,",
          "73:  }",
          "74:  for i := range opts {",
          "75:   opts[i](c)",
          "",
          "[Removed Lines]",
          "62: func NewClient(repoURL string, creds Creds, enableOci bool, opts ...ClientOpts) Client {",
          "63:  return NewClientWithLock(repoURL, creds, globalLock, enableOci, opts...)",
          "66: func NewClientWithLock(repoURL string, creds Creds, repoLock sync.KeyLock, enableOci bool, opts ...ClientOpts) Client {",
          "",
          "[Added Lines]",
          "63: func NewClient(repoURL string, creds Creds, enableOci bool, proxy string, opts ...ClientOpts) Client {",
          "64:  return NewClientWithLock(repoURL, creds, globalLock, enableOci, proxy, opts...)",
          "67: func NewClientWithLock(repoURL string, creds Creds, repoLock sync.KeyLock, enableOci bool, proxy string, opts ...ClientOpts) Client {",
          "74:   proxy:     proxy,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:  repoLock   sync.KeyLock",
          "87:  enableOci  bool",
          "88:  indexCache indexCache",
          "89: }",
          "91: func fileExist(filePath string) (bool, error) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:  proxy      string",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:  }",
          "126:  if err != nil {",
          "127:   return \"\", nil, err",
          "",
          "[Removed Lines]",
          "124:  helmCmd, err := NewCmdWithVersion(c.repoPath, HelmV3, c.enableOci)",
          "",
          "[Added Lines]",
          "127:  helmCmd, err := NewCmdWithVersion(c.repoPath, HelmV3, c.enableOci, c.proxy)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "268:  }",
          "269:  defer func() { _ = os.RemoveAll(tmpDir) }()",
          "272:  if err != nil {",
          "273:   return false, err",
          "274:  }",
          "",
          "[Removed Lines]",
          "271:  helmCmd, err := NewCmdWithVersion(tmpDir, HelmV3, c.enableOci)",
          "",
          "[Added Lines]",
          "274:  helmCmd, err := NewCmdWithVersion(tmpDir, HelmV3, c.enableOci, c.proxy)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "310:  if err != nil {",
          "311:   return nil, err",
          "312:  }",
          "313:  tr := &http.Transport{",
          "315:   TLSClientConfig: tlsConf,",
          "316:  }",
          "317:  client := http.Client{Transport: tr}",
          "",
          "[Removed Lines]",
          "314:   Proxy:           http.ProxyFromEnvironment,",
          "",
          "[Added Lines]",
          "318:   Proxy:           proxy.GetCallback(c.proxy),",
          "",
          "---------------"
        ],
        "util/helm/client_test.go||util/helm/client_test.go": [
          "File: util/helm/client_test.go -> util/helm/client_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: func TestIndex(t *testing.T) {",
          "30:  t.Run(\"Invalid\", func(t *testing.T) {",
          "32:   _, err := client.GetIndex(false)",
          "33:   assert.Error(t, err)",
          "34:  })",
          "35:  t.Run(\"Stable\", func(t *testing.T) {",
          "37:   index, err := client.GetIndex(false)",
          "38:   assert.NoError(t, err)",
          "39:   assert.NotNil(t, index)",
          "",
          "[Removed Lines]",
          "31:   client := NewClient(\"\", Creds{}, false)",
          "36:   client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false)",
          "",
          "[Added Lines]",
          "31:   client := NewClient(\"\", Creds{}, false, \"\")",
          "36:   client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:   client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{",
          "43:    Username: \"my-password\",",
          "44:    Password: \"my-username\",",
          "46:   index, err := client.GetIndex(false)",
          "47:   assert.NoError(t, err)",
          "48:   assert.NotNil(t, index)",
          "",
          "[Removed Lines]",
          "45:   }, false)",
          "",
          "[Added Lines]",
          "45:   }, false, \"\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:   err := yaml.NewEncoder(&data).Encode(fakeIndex)",
          "55:   require.NoError(t, err)",
          "58:   index, err := client.GetIndex(false)",
          "60:   assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "57:   client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, WithIndexCache(&fakeIndexCache{data: data.Bytes()}))",
          "",
          "[Added Lines]",
          "57:   client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\", WithIndexCache(&fakeIndexCache{data: data.Bytes()}))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64: }",
          "66: func Test_nativeHelmChart_ExtractChart(t *testing.T) {",
          "68:  path, closer, err := client.ExtractChart(\"argo-cd\", \"0.7.1\")",
          "69:  assert.NoError(t, err)",
          "70:  defer io.Close(closer)",
          "",
          "[Removed Lines]",
          "67:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false)",
          "",
          "[Added Lines]",
          "67:  client := NewClient(\"https://argoproj.github.io/argo-helm\", Creds{}, false, \"\")",
          "",
          "---------------"
        ],
        "util/helm/cmd.go||util/helm/cmd.go": [
          "File: util/helm/cmd.go -> util/helm/cmd.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  executil \"github.com/argoproj/argo-cd/v2/util/exec\"",
          "13:  \"github.com/argoproj/argo-cd/v2/util/io\"",
          "14: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:  \"github.com/argoproj/argo-cd/v2/util/proxy\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:  WorkDir   string",
          "21:  IsLocal   bool",
          "22:  IsHelmOci bool",
          "23: }",
          "27:  switch version {",
          "28:  case \"v2\":",
          "31:  case \"\", \"v3\":",
          "33:  }",
          "34:  return nil, fmt.Errorf(\"helm chart version '%s' is not supported\", version)",
          "35: }",
          "38:  tmpDir, err := ioutil.TempDir(\"\", \"helm\")",
          "39:  if err != nil {",
          "40:   return nil, err",
          "41:  }",
          "43: }",
          "45: var redactor = func(text string) string {",
          "",
          "[Removed Lines]",
          "25: func NewCmd(workDir string, version string) (*Cmd, error) {",
          "29:   return NewCmdWithVersion(workDir, HelmV2, false)",
          "32:   return NewCmdWithVersion(workDir, HelmV3, false)",
          "37: func NewCmdWithVersion(workDir string, version HelmVer, isHelmOci bool) (*Cmd, error) {",
          "42:  return &Cmd{WorkDir: workDir, helmHome: tmpDir, HelmVer: version, IsHelmOci: isHelmOci}, err",
          "",
          "[Added Lines]",
          "24:  proxy     string",
          "27: func NewCmd(workDir string, version string, proxy string) (*Cmd, error) {",
          "31:   return NewCmdWithVersion(workDir, HelmV2, false, proxy)",
          "34:   return NewCmdWithVersion(workDir, HelmV3, false, proxy)",
          "39: func NewCmdWithVersion(workDir string, version HelmVer, isHelmOci bool, proxy string) (*Cmd, error) {",
          "44:  return &Cmd{WorkDir: workDir, helmHome: tmpDir, HelmVer: version, IsHelmOci: isHelmOci, proxy: proxy}, err",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:  if c.IsHelmOci {",
          "62:   cmd.Env = append(cmd.Env, \"HELM_EXPERIMENTAL_OCI=1\")",
          "63:  }",
          "64:  return executil.RunWithRedactor(cmd, redactor)",
          "65: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:  cmd.Env = proxy.UpsertEnv(cmd, c.proxy)",
          "",
          "---------------"
        ],
        "util/helm/cmd_test.go||util/helm/cmd_test.go": [
          "File: util/helm/cmd_test.go -> util/helm/cmd_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: }",
          "16: func TestCmd_template_kubeVersion(t *testing.T) {",
          "18:  assert.NoError(t, err)",
          "19:  s, err := cmd.template(\"testdata/redis\", &TemplateOpts{",
          "20:   KubeVersion: \"1.14\",",
          "",
          "[Removed Lines]",
          "17:  cmd, err := NewCmdWithVersion(\".\", HelmV3, false)",
          "",
          "[Added Lines]",
          "17:  cmd, err := NewCmdWithVersion(\".\", HelmV3, false, \"\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: }",
          "26: func TestNewCmd_helmV2(t *testing.T) {",
          "28:  assert.NoError(t, err)",
          "29:  assert.Equal(t, \"helm2\", cmd.HelmVer.binaryName)",
          "30: }",
          "32: func TestNewCmd_helmV3(t *testing.T) {",
          "34:  assert.NoError(t, err)",
          "35:  assert.Equal(t, \"helm\", cmd.HelmVer.binaryName)",
          "36: }",
          "38: func TestNewCmd_helmDefaultVersion(t *testing.T) {",
          "40:  assert.NoError(t, err)",
          "41:  assert.Equal(t, \"helm\", cmd.HelmVer.binaryName)",
          "42: }",
          "44: func TestNewCmd_helmInvalidVersion(t *testing.T) {",
          "46:  log.Println(err)",
          "47:  assert.EqualError(t, err, \"helm chart version 'abcd' is not supported\")",
          "48: }",
          "",
          "[Removed Lines]",
          "27:  cmd, err := NewCmd(\".\", \"v2\")",
          "33:  cmd, err := NewCmd(\".\", \"v3\")",
          "39:  cmd, err := NewCmd(\".\", \"\")",
          "45:  _, err := NewCmd(\".\", \"abcd\")",
          "",
          "[Added Lines]",
          "27:  cmd, err := NewCmd(\".\", \"v2\", \"\")",
          "33:  cmd, err := NewCmd(\".\", \"v3\", \"\")",
          "39:  cmd, err := NewCmd(\".\", \"\", \"\")",
          "45:  _, err := NewCmd(\".\", \"abcd\", \"\")",
          "50: func TestNewCmd_withProxy(t *testing.T) {",
          "51:  cmd, err := NewCmd(\".\", \"\", \"https://proxy:8888\")",
          "52:  assert.NoError(t, err)",
          "53:  assert.Equal(t, \"https://proxy:8888\", cmd.proxy)",
          "54: }",
          "",
          "---------------"
        ],
        "util/helm/helm.go||util/helm/helm.go": [
          "File: util/helm/helm.go -> util/helm/helm.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: }",
          "42:  if err != nil {",
          "43:   return nil, err",
          "44:  }",
          "",
          "[Removed Lines]",
          "40: func NewHelmApp(workDir string, repos []HelmRepository, isLocal bool, version string) (Helm, error) {",
          "41:  cmd, err := NewCmd(workDir, version)",
          "",
          "[Added Lines]",
          "40: func NewHelmApp(workDir string, repos []HelmRepository, isLocal bool, version string, proxy string) (Helm, error) {",
          "41:  cmd, err := NewCmd(workDir, version, proxy)",
          "",
          "---------------"
        ],
        "util/helm/helm_test.go||util/helm/helm_test.go": [
          "File: util/helm/helm_test.go -> util/helm/helm_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: }",
          "25: func TestHelmTemplateParams(t *testing.T) {",
          "27:  assert.NoError(t, err)",
          "28:  opts := TemplateOpts{",
          "29:   Name: \"test\",",
          "",
          "[Removed Lines]",
          "26:  h, err := NewHelmApp(\"./testdata/minio\", []HelmRepository{}, false, \"\")",
          "",
          "[Added Lines]",
          "26:  h, err := NewHelmApp(\"./testdata/minio\", []HelmRepository{}, false, \"\", \"\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52: }",
          "54: func TestHelmTemplateValues(t *testing.T) {",
          "56:  assert.NoError(t, err)",
          "57:  opts := TemplateOpts{",
          "58:   Name:   \"test\",",
          "",
          "[Removed Lines]",
          "55:  h, err := NewHelmApp(\"./testdata/redis\", []HelmRepository{}, false, \"\")",
          "",
          "[Added Lines]",
          "55:  h, err := NewHelmApp(\"./testdata/redis\", []HelmRepository{}, false, \"\", \"\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "73: }",
          "75: func TestHelmGetParams(t *testing.T) {",
          "77:  assert.NoError(t, err)",
          "78:  params, err := h.GetParameters([]string{})",
          "79:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "76:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\")",
          "",
          "[Added Lines]",
          "76:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\")",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83: }",
          "85: func TestHelmGetParamsValueFiles(t *testing.T) {",
          "87:  assert.NoError(t, err)",
          "88:  params, err := h.GetParameters([]string{\"values-production.yaml\"})",
          "89:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "86:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\")",
          "",
          "[Added Lines]",
          "86:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\")",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "93: }",
          "95: func TestHelmGetParamsValueFilesThatExist(t *testing.T) {",
          "97:  assert.NoError(t, err)",
          "98:  params, err := h.GetParameters([]string{\"values-missing.yaml\", \"values-production.yaml\"})",
          "99:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "96:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\")",
          "",
          "[Added Lines]",
          "96:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\")",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "114:    }",
          "115:    clean()",
          "116:    defer clean()",
          "118:    assert.NoError(t, err)",
          "119:    err = h.Init()",
          "120:    assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "117:    h, err := NewHelmApp(fmt.Sprintf(\"./testdata/%s\", chart), helmRepos, false, \"\")",
          "",
          "[Added Lines]",
          "117:    h, err := NewHelmApp(fmt.Sprintf(\"./testdata/%s\", chart), helmRepos, false, \"\", \"\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "129: }",
          "131: func TestHelmTemplateReleaseNameOverwrite(t *testing.T) {",
          "133:  assert.NoError(t, err)",
          "135:  objs, err := template(h, &TemplateOpts{Name: \"my-release\"})",
          "",
          "[Removed Lines]",
          "132:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\")",
          "",
          "[Added Lines]",
          "132:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\")",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "147: }",
          "149: func TestHelmTemplateReleaseName(t *testing.T) {",
          "151:  assert.NoError(t, err)",
          "152:  objs, err := template(h, &TemplateOpts{Name: \"test\"})",
          "153:  assert.Nil(t, err)",
          "",
          "[Removed Lines]",
          "150:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\")",
          "",
          "[Added Lines]",
          "150:  h, err := NewHelmApp(\"./testdata/redis\", nil, false, \"\", \"\")",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "206: }",
          "208: func TestAPIVersions(t *testing.T) {",
          "210:  if !assert.NoError(t, err) {",
          "211:   return",
          "212:  }",
          "",
          "[Removed Lines]",
          "209:  h, err := NewHelmApp(\"./testdata/api-versions\", nil, false, \"\")",
          "",
          "[Added Lines]",
          "209:  h, err := NewHelmApp(\"./testdata/api-versions\", nil, false, \"\", \"\")",
          "",
          "---------------"
        ],
        "util/proxy/proxy.go||util/proxy/proxy.go": [
          "File: util/proxy/proxy.go -> util/proxy/proxy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package proxy",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"net/http\"",
          "6:  \"net/url\"",
          "7:  \"os/exec\"",
          "8:  \"strings\"",
          "9: )",
          "12: func UpsertEnv(cmd *exec.Cmd, proxy string) []string {",
          "13:  envs := []string{}",
          "14:  if proxy == \"\" {",
          "15:   return cmd.Env",
          "16:  }",
          "18:  for i, env := range cmd.Env {",
          "19:   proxyEnv := strings.ToLower(env)",
          "20:   if strings.HasPrefix(proxyEnv, \"http_proxy\") || strings.HasPrefix(proxyEnv, \"https_proxy\") {",
          "21:    continue",
          "22:   }",
          "23:   envs = append(envs, cmd.Env[i])",
          "24:  }",
          "25:  return append(envs, httpProxy(proxy), httpsProxy(proxy))",
          "26: }",
          "29: func GetCallback(proxy string) func(*http.Request) (*url.URL, error) {",
          "30:  if proxy != \"\" {",
          "31:   return func(r *http.Request) (*url.URL, error) {",
          "32:    return url.Parse(proxy)",
          "33:   }",
          "34:  }",
          "36:  return http.ProxyFromEnvironment",
          "37: }",
          "39: func httpProxy(url string) string {",
          "40:  return fmt.Sprintf(\"http_proxy=%s\", url)",
          "41: }",
          "43: func httpsProxy(url string) string {",
          "44:  return fmt.Sprintf(\"https_proxy=%s\", url)",
          "45: }",
          "",
          "---------------"
        ],
        "util/proxy/proxy_test.go||util/proxy/proxy_test.go": [
          "File: util/proxy/proxy_test.go -> util/proxy/proxy_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package proxy",
          "3: import (",
          "4:  \"net/http/httptest\"",
          "5:  \"os\"",
          "6:  \"os/exec\"",
          "7:  \"testing\"",
          "9:  \"github.com/stretchr/testify/assert\"",
          "10: )",
          "12: func TestAddProxyEnvIfAbsent(t *testing.T) {",
          "13:  t.Run(\"Existing proxy env variables\", func(t *testing.T) {",
          "14:   proxy := \"https://proxy:5000\"",
          "15:   cmd := exec.Command(\"test\")",
          "16:   cmd.Env = []string{`http_proxy=\"https_proxy=https://env-proxy:8888\"`, \"key=val\"}",
          "17:   got := UpsertEnv(cmd, proxy)",
          "18:   assert.EqualValues(t, []string{\"key=val\", httpProxy(proxy), httpsProxy(proxy)}, got)",
          "19:  })",
          "20:  t.Run(\"proxy env variables not found\", func(t *testing.T) {",
          "21:   proxy := \"http://proxy:5000\"",
          "22:   cmd := exec.Command(\"test\")",
          "23:   cmd.Env = []string{\"key=val\"}",
          "24:   got := UpsertEnv(cmd, proxy)",
          "25:   assert.EqualValues(t, []string{\"key=val\", httpProxy(proxy), httpsProxy(proxy)}, got)",
          "26:  })",
          "27: }",
          "29: func TestGetCallBack(t *testing.T) {",
          "30:  t.Run(\"custom proxy present\", func(t *testing.T) {",
          "31:   proxy := \"http://proxy:8888\"",
          "32:   url, err := GetCallback(proxy)(nil)",
          "33:   assert.Nil(t, err)",
          "34:   assert.Equal(t, proxy, url.String())",
          "35:  })",
          "36:  t.Run(\"custom proxy absent\", func(t *testing.T) {",
          "37:   proxyEnv := \"http://proxy:8888\"",
          "38:   os.Setenv(\"http_proxy\", \"http://proxy:8888\")",
          "39:   defer os.Unsetenv(\"http_proxy\")",
          "40:   url, err := GetCallback(\"\")(httptest.NewRequest(\"GET\", proxyEnv, nil))",
          "41:   assert.Nil(t, err)",
          "42:   assert.Equal(t, proxyEnv, url.String())",
          "43:  })",
          "44: }",
          "",
          "---------------"
        ],
        "util/settings/settings.go||util/settings/settings.go": [
          "File: util/settings/settings.go -> util/settings/settings.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:  GithubAppInstallationId int64 `json:\"githubAppInstallationID,omitempty\"`",
          "198:  GithubAppEnterpriseBaseURL string `json:\"githubAppEnterpriseBaseUrl,omitempty\"`",
          "199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:  Proxy string `json:\"proxy,omitempty\"`",
          "",
          "---------------"
        ]
      }
    }
  ]
}