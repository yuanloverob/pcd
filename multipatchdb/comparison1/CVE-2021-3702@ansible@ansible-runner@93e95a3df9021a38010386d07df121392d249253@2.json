{
  "cve_id": "CVE-2021-3702",
  "cve_desc": "A race condition flaw was found in ansible-runner, where an attacker could watch for rapid creation and deletion of a temporary directory, substitute their directory at that name, and then have access to ansible-runner's private_data_dir the next time ansible-runner made use of the private_data_dir. The highest Threat out of this flaw is to integrity and confidentiality.",
  "repo": "ansible/ansible-runner",
  "patch_hash": "93e95a3df9021a38010386d07df121392d249253",
  "patch_info": {
    "commit_hash": "93e95a3df9021a38010386d07df121392d249253",
    "repo": "ansible/ansible-runner",
    "commit_url": "https://github.com/ansible/ansible-runner/commit/93e95a3df9021a38010386d07df121392d249253",
    "files": [
      "ansible_runner/interface.py",
      "ansible_runner/runner.py",
      "ansible_runner/streaming.py"
    ],
    "message": "Successfully runs\n\nStreamController and StreamWorker are now fleshed out.",
    "before_after_code_files": [
      "ansible_runner/interface.py||ansible_runner/interface.py",
      "ansible_runner/runner.py||ansible_runner/runner.py",
      "ansible_runner/streaming.py||ansible_runner/streaming.py"
    ]
  },
  "patch_diff": {
    "ansible_runner/interface.py||ansible_runner/interface.py": [
      "File: ansible_runner/interface.py -> ansible_runner/interface.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: from ansible_runner import output",
      "25: from ansible_runner.runner_config import RunnerConfig",
      "26: from ansible_runner.runner import Runner",
      "28: from ansible_runner.utils import (",
      "29:     dump_artifacts,",
      "30:     check_isolation_executable_installed,",
      "",
      "[Removed Lines]",
      "27: from ansible_runner.streaming import StreamWorker",
      "",
      "[Added Lines]",
      "27: from ansible_runner.streaming import StreamController, StreamWorker",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:     event_callback_handler = kwargs.pop('event_handler', None)",
      "66:     status_callback_handler = kwargs.pop('status_handler', None)",
      "67:     cancel_callback = kwargs.pop('cancel_callback', None)",
      "69:     finished_callback = kwargs.pop('finished_callback', None)",
      "71:     control_out = kwargs.pop('control_out', None)",
      "78:     rc = RunnerConfig(**kwargs)",
      "79:     rc.prepare()",
      "",
      "[Removed Lines]",
      "68:     artifacts_callback = kwargs.pop('artifacts_callback', None)  # Currently not expected",
      "72:     if control_out is not None:",
      "73:         stream_worker = StreamWorker(control_out)",
      "74:         status_callback_handler = stream_worker.status_handler",
      "75:         event_callback_handler = stream_worker.event_handler",
      "76:         artifacts_callback = stream_worker.artifacts_callback",
      "",
      "[Added Lines]",
      "67:     artifacts_handler = kwargs.pop('artifacts_handler', None)",
      "71:     control_in = kwargs.pop('control_in', None)",
      "73:     worker_in = kwargs.pop('worker_in', None)",
      "74:     worker_out = kwargs.pop('worker_out', None)",
      "76:     if worker_in is not None and worker_out is not None:",
      "77:         stream_worker = StreamWorker(worker_in, worker_out, **kwargs)",
      "78:         return stream_worker",
      "80:     if control_in is not None and control_out is not None:",
      "81:         stream_controller = StreamController(control_in, control_out,",
      "82:                                              event_handler=event_callback_handler,",
      "83:                                              status_handler=status_callback_handler,",
      "84:                                              artifacts_handler=artifacts_handler,",
      "85:                                              cancel_callback=cancel_callback,",
      "86:                                              finished_callback=finished_callback,",
      "88:         return stream_controller",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "81:     return Runner(rc,",
      "82:                   event_handler=event_callback_handler,",
      "83:                   status_handler=status_callback_handler,",
      "84:                   cancel_callback=cancel_callback,",
      "86:                   finished_callback=finished_callback)",
      "",
      "[Removed Lines]",
      "85:                   artifacts_callback=artifacts_callback,",
      "",
      "[Added Lines]",
      "96:                   artifacts_handler=artifacts_handler,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "124:     :param artifact_dir: The path to the directory where artifacts should live, this defaults to 'artifacts' under the private data dir",
      "125:     :param project_dir: The path to the playbook content, this defaults to 'project' within the private data dir",
      "126:     :param rotate_artifacts: Keep at most n artifact directories, disable with a value of 0 which is the default",
      "128:     :param event_handler: An optional callback that will be invoked any time an event is received by Runner itself, return True to keep the event",
      "129:     :param cancel_callback: An optional callback that can inform runner to cancel (returning True) or not (returning False)",
      "130:     :param finished_callback: An optional callback that will be invoked at shutdown after process cleanup.",
      "131:     :param status_handler: An optional callback that will be invoked any time the status changes (e.g...started, running, failed, successful, timeout)",
      "132:     :param process_isolation: Enable process isolation, using either a container engine (e.g. podman) or a sandbox (e.g. bwrap).",
      "133:     :param process_isolation_executable: Process isolation executable or container engine used to isolate execution. (default: podman)",
      "134:     :param process_isolation_path: Path that an isolated playbook run will use for staging. (default: /tmp)",
      "",
      "[Removed Lines]",
      "127:     :param control_out: A file-like object used for streaming information back to a control instance of Runner",
      "",
      "[Added Lines]",
      "139:     :param control_in: A file object used for receiving streamed data back from a worker instance of Runner",
      "140:     :param control_out: A file object used for streaming project data to a worker instance of Runner",
      "141:     :param worker_in: A file object used for streaming project data to a worker instance of Runner",
      "142:     :param worker_out: A file object used for streaming information back to a control instance of Runner",
      "147:     :param artifacts_handler: An optional callback that will be invoked at the end of the run to deal with the artifacts from the run.",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "170:     :type forks: int",
      "171:     :type quiet: bool",
      "172:     :type verbosity: int",
      "173:     :type control_out: file",
      "174:     :type event_handler: function",
      "175:     :type cancel_callback: function",
      "176:     :type finished_callback: function",
      "177:     :type status_handler: function",
      "178:     :type process_isolation: bool",
      "179:     :type process_isolation_executable: str",
      "180:     :type process_isolation_path: str",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "189:     :type control_in: file",
      "191:     :type worker_in: file",
      "192:     :type worker_out: file",
      "197:     :type artifacts_handler: function",
      "",
      "---------------"
    ],
    "ansible_runner/runner.py||ansible_runner/runner.py": [
      "File: ansible_runner/runner.py -> ansible_runner/runner.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: class Runner(object):",
      "29:     def __init__(self, config, cancel_callback=None, remove_partials=True, event_handler=None,",
      "31:         self.config = config",
      "32:         self.cancel_callback = cancel_callback",
      "33:         self.event_handler = event_handler",
      "35:         self.finished_callback = finished_callback",
      "36:         self.status_handler = status_handler",
      "37:         self.canceled = False",
      "",
      "[Removed Lines]",
      "30:                  artifacts_callback=None, finished_callback=None, status_handler=None):",
      "34:         self.artifacts_callback = artifacts_callback",
      "",
      "[Added Lines]",
      "30:                  artifacts_handler=None, finished_callback=None, status_handler=None):",
      "34:         self.artifacts_handler = artifacts_handler",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "284:                 logger.error('Failed to delete cgroup: {}'.format(stderr))",
      "285:                 raise RuntimeError('Failed to delete cgroup: {}'.format(stderr))",
      "288:             try:",
      "290:             except Exception as e:",
      "291:                 raise CallbackError(\"Exception in Artifact Callback: {}\".format(e))",
      "",
      "[Removed Lines]",
      "287:         if self.artifacts_callback is not None:",
      "289:                 self.artifacts_callback(self.config.artifact_dir)",
      "",
      "[Added Lines]",
      "287:         if self.artifacts_handler is not None:",
      "289:                 self.artifacts_handler(self.config.artifact_dir)",
      "",
      "---------------"
    ],
    "ansible_runner/streaming.py||ansible_runner/streaming.py": [
      "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import base64",
      "2: import io",
      "3: import json",
      "4: import os",
      "5: import zipfile",
      "10:         self.control_out = control_out",
      "14:         self.control_out.write(b'\\n')",
      "15:         self.control_out.flush()",
      "17:     def event_handler(self, event_data):",
      "23:         buf = io.BytesIO()",
      "24:         with zipfile.ZipFile(buf, 'w', compression=zipfile.ZIP_DEFLATED, allowZip64=True) as archive:",
      "25:             for dirpath, dirs, files in os.walk(artifact_dir):",
      "",
      "[Removed Lines]",
      "8: class StreamWorker(object):",
      "9:     def __init__(self, control_out):",
      "12:     def status_handler(self, status, runner_config):",
      "13:         self.control_out.write(json.dumps(status).encode('utf-8'))",
      "18:         self.control_out.write(json.dumps(event_data).encode('utf-8'))",
      "19:         self.control_out.write(b'\\n')",
      "20:         self.control_out.flush()",
      "22:     def artifacts_callback(self, artifact_dir):",
      "",
      "[Added Lines]",
      "2: import codecs",
      "6: import stat",
      "7: import tempfile",
      "8: import uuid",
      "11: import ansible_runner",
      "12: import ansible_runner.plugins",
      "15: class UUIDEncoder(json.JSONEncoder):",
      "16:     def default(self, obj):",
      "17:         if isinstance(obj, uuid.UUID):",
      "18:             return obj.hex",
      "19:         return json.JSONEncoder.default(self, obj)",
      "22: # List of kwargs options to the run method that should be sent to the remote executor.",
      "23: remote_run_options = (",
      "24:     'forks',",
      "25:     'host_pattern',",
      "26:     'ident',",
      "27:     'ignore_logging',",
      "28:     'inventory',",
      "29:     'limit',",
      "30:     'module',",
      "31:     'module_args',",
      "32:     'omit_event_data',",
      "33:     'only_failed_event_data',",
      "34:     'playbook',",
      "35:     'verbosity',",
      "36: )",
      "39: class StreamController(object):",
      "40:     def __init__(self, control_in, control_out, status_handler=None, event_handler=None,",
      "41:                  artifacts_handler=None, cancel_callback=None, finished_callback=None, **kwargs):",
      "42:         self.control_in = control_in",
      "45:         self.kwargs = kwargs",
      "46:         self.config = ansible_runner.RunnerConfig(**kwargs)",
      "47:         self.status_handler = status_handler",
      "48:         self.event_handler = event_handler",
      "49:         self.artifacts_handler = artifacts_handler",
      "51:         self.cancel_callback = cancel_callback",
      "52:         self.finished_callback = finished_callback",
      "54:         self.status = \"unstarted\"",
      "55:         self.rc = None",
      "57:     def run(self):",
      "58:         self.send_job()",
      "60:         job_events_path = os.path.join(self.config.artifact_dir, 'job_events')",
      "61:         if not os.path.exists(job_events_path):",
      "62:             os.mkdir(job_events_path, 0o700)",
      "64:         for line in self.control_in:",
      "65:             data = json.loads(line)",
      "66:             if 'status' in data:",
      "67:                 self.status_callback(data)",
      "68:             elif 'artifacts' in data:",
      "69:                 self.artifacts_callback(data)",
      "70:             elif 'eof' in data:",
      "71:                 break",
      "72:             else:",
      "73:                 self.event_callback(data)",
      "75:         if self.finished_callback is not None:",
      "76:             self.finished_callback(self)",
      "77:         return self.status, self.rc",
      "79:     def send_job(self):",
      "80:         self.config.prepare()",
      "81:         remote_options = {key: value for key, value in self.kwargs.items() if key in remote_run_options}",
      "83:         buf = io.BytesIO()",
      "84:         with zipfile.ZipFile(buf, 'w', compression=zipfile.ZIP_DEFLATED, allowZip64=True) as archive:",
      "85:             private_data_dir = self.kwargs.get('private_data_dir', None)",
      "86:             if private_data_dir:",
      "87:                 for dirpath, dirs, files in os.walk(private_data_dir):",
      "88:                     relpath = os.path.relpath(dirpath, private_data_dir)",
      "89:                     if relpath == \".\":",
      "90:                         relpath = \"\"",
      "91:                     for fname in files:",
      "92:                         archive.write(os.path.join(dirpath, fname), arcname=os.path.join(relpath, fname))",
      "94:             kwargs = json.dumps(remote_options, cls=UUIDEncoder)",
      "95:             archive.writestr('kwargs', kwargs)",
      "96:             archive.close()",
      "97:         buf.flush()",
      "99:         data = {",
      "100:             'private_data_dir': True,",
      "101:             'payload': base64.b64encode(buf.getvalue()).decode('ascii'),",
      "102:         }",
      "103:         self.control_out.write(json.dumps(data).encode('utf-8'))",
      "106:         self.control_out.close()",
      "108:     def status_callback(self, status_data):",
      "109:         self.status = status_data['status']",
      "111:         for plugin in ansible_runner.plugins:",
      "112:             ansible_runner.plugins[plugin].status_handler(self.config, status_data)",
      "113:         if self.status_handler is not None:",
      "114:             self.status_handler(status_data, runner_config=self.config)",
      "116:     def event_callback(self, event_data):",
      "117:         full_filename = os.path.join(self.config.artifact_dir,",
      "118:                                      'job_events',",
      "119:                                      '{}-{}.json'.format(event_data['counter'],",
      "120:                                                          event_data['uuid']))",
      "122:         if self.event_handler is not None:",
      "123:             should_write = self.event_handler(event_data)",
      "124:         else:",
      "125:             should_write = True",
      "126:         for plugin in ansible_runner.plugins:",
      "127:             ansible_runner.plugins[plugin].event_handler(self.config, event_data)",
      "128:         if should_write:",
      "129:             with codecs.open(full_filename, 'w', encoding='utf-8') as write_file:",
      "130:                 os.chmod(full_filename, stat.S_IRUSR | stat.S_IWUSR)",
      "131:                 json.dump(event_data, write_file)",
      "133:     def artifacts_callback(self, artifacts_data):  # FIXME",
      "134:         if self.artifacts_handler is not None:",
      "135:             self.artifacts_handler()",
      "138: class StreamWorker(object):",
      "139:     def __init__(self, worker_in, worker_out, **kwargs):",
      "140:         self.worker_in = worker_in",
      "141:         self.worker_out = worker_out",
      "143:         self.kwargs = kwargs",
      "145:         self.private_data_dir = tempfile.TemporaryDirectory().name",
      "147:     def run(self):",
      "148:         for line in self.worker_in:",
      "149:             data = json.loads(line)",
      "150:             if data.get('private_data_dir'):",
      "151:                 buf = io.BytesIO(base64.b64decode(data['payload']))",
      "152:                 with zipfile.ZipFile(buf, 'r') as archive:",
      "153:                     archive.extractall(path=self.private_data_dir)",
      "155:         kwargs_path = os.path.join(self.private_data_dir, 'kwargs')",
      "156:         if os.path.exists(kwargs_path):",
      "157:             with open(kwargs_path, \"r\") as kwf:",
      "158:                 kwargs = json.load(kwf)",
      "159:             if not isinstance(kwargs, dict):",
      "160:                 raise ValueError(\"Invalid kwargs data\")",
      "161:         else:",
      "162:             kwargs = {}",
      "164:         self.kwargs.update(kwargs)",
      "166:         self.kwargs['quiet'] = True",
      "167:         self.kwargs['private_data_dir'] = self.private_data_dir",
      "168:         self.kwargs['status_handler'] = self.status_handler",
      "169:         self.kwargs['event_handler'] = self.event_handler",
      "170:         self.kwargs['artifacts_handler'] = self.artifacts_handler",
      "171:         self.kwargs['finished_callback'] = self.finished_callback",
      "173:         ansible_runner.interface.run(**self.kwargs)",
      "175:         # FIXME: do cleanup on the tempdir",
      "177:     def status_handler(self, status, runner_config):",
      "178:         self.worker_out.write(json.dumps(status).encode('utf-8'))",
      "179:         self.worker_out.write(b'\\n')",
      "180:         self.worker_out.flush()",
      "183:         self.worker_out.write(json.dumps(event_data).encode('utf-8'))",
      "184:         self.worker_out.write(b'\\n')",
      "185:         self.worker_out.flush()",
      "187:     def artifacts_handler(self, artifact_dir):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34:             'artifacts': True,",
      "35:             'payload': base64.b64encode(buf.getvalue()).decode('ascii'),",
      "36:         }",
      "",
      "[Removed Lines]",
      "37:         self.control_out.write(json.dumps(data).encode('utf-8'))",
      "38:         self.control_out.write(b'\\n')",
      "39:         self.control_out.flush()",
      "40:         self.control_out.close()",
      "",
      "[Added Lines]",
      "202:         self.worker_out.write(json.dumps(data).encode('utf-8'))",
      "203:         self.worker_out.write(b'\\n')",
      "204:         self.worker_out.flush()",
      "206:     def finished_callback(self, runner_obj):",
      "207:         self.worker_out.write(json.dumps({'eof': True}).encode('utf-8'))",
      "208:         self.worker_out.write(b'\\n')",
      "209:         self.worker_out.flush()",
      "210:         self.worker_out.close()",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d161669e3287df323696f92fc41a9053ecb7dfc",
      "candidate_info": {
        "commit_hash": "5d161669e3287df323696f92fc41a9053ecb7dfc",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/5d161669e3287df323696f92fc41a9053ecb7dfc",
        "files": [
          "ansible_runner/streaming.py"
        ],
        "message": "Updated to provide and read a specified length for the artifacts blob",
        "before_after_code_files": [
          "ansible_runner/streaming.py||ansible_runner/streaming.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ],
          "candidate": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/streaming.py||ansible_runner/streaming.py": [
          "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:             if 'status' in data:",
          "69:                 self.status_callback(data)",
          "70:             elif 'artifacts' in data:",
          "72:                 break",
          "73:             else:",
          "74:                 self.event_callback(data)",
          "",
          "[Removed Lines]",
          "71:                 self.artifacts_callback(self.control_in.read())",
          "",
          "[Added Lines]",
          "71:                 self.artifacts_callback(self.control_in.read(data['artifacts']))",
          "72:             elif 'eof' in data:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:         self.worker_out.flush()",
          "192:     def artifacts_handler(self, artifact_dir):",
          "197:         buf = io.BytesIO()",
          "198:         with zipfile.ZipFile(buf, 'w', compression=zipfile.ZIP_DEFLATED, allowZip64=True) as archive:",
          "199:             for dirpath, dirs, files in os.walk(artifact_dir):",
          "",
          "[Removed Lines]",
          "193:         self.worker_out.write(json.dumps({'artifacts': True}).encode('utf-8'))",
          "194:         self.worker_out.write(b'\\n')",
          "195:         self.worker_out.flush()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:                     archive.write(os.path.join(dirpath, fname), arcname=os.path.join(relpath, fname))",
          "205:             archive.close()",
          "208:         self.worker_out.flush()",
          "210:     def finished_callback(self, runner_obj):",
          "211:         self.worker_out.flush()",
          "212:         self.worker_out.close()",
          "",
          "[Removed Lines]",
          "207:         self.worker_out.write(buf.getvalue())",
          "",
          "[Added Lines]",
          "204:         payload = buf.getvalue()",
          "206:         self.worker_out.write(json.dumps({'artifacts': len(payload)}).encode('utf-8'))",
          "207:         self.worker_out.write(b'\\n')",
          "208:         self.worker_out.write(payload)",
          "212:         self.worker_out.write(json.dumps({'eof': True}).encode('utf-8'))",
          "213:         self.worker_out.write(b'\\n')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d08ef1e97c132e0376b7469c35e95ebf3aa8be53",
      "candidate_info": {
        "commit_hash": "d08ef1e97c132e0376b7469c35e95ebf3aa8be53",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/d08ef1e97c132e0376b7469c35e95ebf3aa8be53",
        "files": [
          "ansible_runner/__main__.py",
          "ansible_runner/streaming.py",
          "ansible_runner/utils.py"
        ],
        "message": "Factor out the directory zipping and make the transmitter use it",
        "before_after_code_files": [
          "ansible_runner/__main__.py||ansible_runner/__main__.py",
          "ansible_runner/streaming.py||ansible_runner/streaming.py",
          "ansible_runner/utils.py||ansible_runner/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ],
          "candidate": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/__main__.py||ansible_runner/__main__.py": [
          "File: ansible_runner/__main__.py -> ansible_runner/__main__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "863:         if not os.path.exists(stderr_path):",
          "864:             os.close(os.open(stderr_path, os.O_CREAT, stat.S_IRUSR | stat.S_IWUSR))",
          "868:         if vargs.get('command') == 'start':",
          "869:             import daemon",
          "",
          "[Removed Lines]",
          "866:     if vargs.get('command') in ('start', 'run', 'transmit', 'worker', 'adhoc', 'playbook'):",
          "",
          "[Added Lines]",
          "866:     if vargs.get('command') in ('start', 'run', 'transmit', 'worker', 'process', 'adhoc', 'playbook'):",
          "",
          "---------------"
        ],
        "ansible_runner/streaming.py||ansible_runner/streaming.py": [
          "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import ansible_runner",
          "13: import ansible_runner.plugins",
          "16: class UUIDEncoder(json.JSONEncoder):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: from ansible_runner import utils",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:         self.config.prepare()",
          "53:         remote_options = {key: value for key, value in self.kwargs.items() if key in remote_run_options}",
          "77:         self._output.write(b'\\n')",
          "78:         self._output.flush()",
          "79:         # self._output.close()",
          "",
          "[Removed Lines]",
          "55:         buf = io.BytesIO()",
          "56:         with zipfile.ZipFile(buf, 'w', compression=zipfile.ZIP_DEFLATED, allowZip64=True) as archive:",
          "57:             private_data_dir = self.kwargs.get('private_data_dir', None)",
          "58:             if private_data_dir:",
          "59:                 for dirpath, dirs, files in os.walk(private_data_dir):",
          "60:                     relpath = os.path.relpath(dirpath, private_data_dir)",
          "61:                     if relpath == \".\":",
          "62:                         relpath = \"\"",
          "63:                     for fname in files:",
          "64:                         archive.write(os.path.join(dirpath, fname), arcname=os.path.join(relpath, fname))",
          "66:             kwargs = json.dumps(remote_options, cls=UUIDEncoder)",
          "67:             archive.writestr('kwargs', kwargs)",
          "68:             archive.close()",
          "69:         buf.flush()",
          "71:         data = {",
          "72:             'private_data_dir': True,",
          "73:             'payload': base64.b64encode(buf.getvalue()).decode('ascii'),",
          "74:         }",
          "75:         self._output.flush()",
          "76:         self._output.write(json.dumps(data).encode('utf-8'))",
          "",
          "[Added Lines]",
          "56:         private_data_dir = self.kwargs.get('private_data_dir', None)",
          "57:         self._output.write(",
          "58:             utils.stream_dir(private_data_dir, kwargs=json.dumps(remote_options, cls=UUIDEncoder)))",
          "59:         self._output.write(json.dumps({'eof': True}).encode('utf-8'))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:         self.rc = None",
          "103:     def run(self):",
          "105:             data = json.loads(line)",
          "108:                 with zipfile.ZipFile(buf, 'r') as archive:",
          "109:                     archive.extractall(path=self.private_data_dir)",
          "111:         kwargs_path = os.path.join(self.private_data_dir, 'kwargs')",
          "112:         if os.path.exists(kwargs_path):",
          "",
          "[Removed Lines]",
          "104:         for line in self._input:",
          "106:             if data.get('private_data_dir'):",
          "107:                 buf = io.BytesIO(base64.b64decode(data['payload']))",
          "",
          "[Added Lines]",
          "87:         while True:",
          "88:             line = self._input.readline()",
          "91:             if 'zipfile' in data:",
          "92:                 zip_data = self._input.read(data['zipfile'])",
          "93:                 buf = io.BytesIO(zip_data)",
          "96:             elif 'eof' in data:",
          "97:                 break",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:         self._output.flush()",
          "147:     def artifacts_handler(self, artifact_dir):",
          "163:         self._output.flush()",
          "165:     def finished_callback(self, runner_obj):",
          "",
          "[Removed Lines]",
          "148:         buf = io.BytesIO()",
          "149:         with zipfile.ZipFile(buf, 'w', compression=zipfile.ZIP_DEFLATED, allowZip64=True) as archive:",
          "150:             for dirpath, dirs, files in os.walk(artifact_dir):",
          "151:                 relpath = os.path.relpath(dirpath, artifact_dir)",
          "152:                 if relpath == \".\":",
          "153:                     relpath = \"\"",
          "154:                 for fname in files:",
          "155:                     archive.write(os.path.join(dirpath, fname), arcname=os.path.join(relpath, fname))",
          "156:             archive.close()",
          "158:         payload = buf.getvalue()",
          "160:         self._output.write(json.dumps({'artifacts': len(payload)}).encode('utf-8'))",
          "161:         self._output.write(b'\\n')",
          "162:         self._output.write(payload)",
          "",
          "[Added Lines]",
          "136:         self._output.write(utils.stream_dir(artifact_dir))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235:             if 'status' in data:",
          "236:                 self.status_callback(data)",
          "239:             elif 'eof' in data:",
          "240:                 break",
          "241:             else:",
          "",
          "[Removed Lines]",
          "237:             elif 'artifacts' in data:",
          "238:                 self.artifacts_callback(self._input.read(data['artifacts']))",
          "",
          "[Added Lines]",
          "211:             elif 'zipfile' in data:",
          "212:                 self.artifacts_callback(self._input.read(data['zipfile']))",
          "",
          "---------------"
        ],
        "ansible_runner/utils.py||ansible_runner/utils.py": [
          "File: ansible_runner/utils.py -> ansible_runner/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: import pipes",
          "15: import uuid",
          "16: import codecs",
          "18: try:",
          "19:     from collections.abc import Iterable, Mapping",
          "20: except ImportError:",
          "21:     from collections import Iterable, Mapping",
          "23: from six import string_types, PY2, PY3, text_type, binary_type",
          "",
          "[Removed Lines]",
          "22: from io import StringIO",
          "",
          "[Added Lines]",
          "17: import zipfile",
          "23: from io import BytesIO, StringIO",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:         return False",
          "85: def dump_artifact(obj, path, filename=None):",
          "86:     '''",
          "87:     Write the artifact to disk at the specified path",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: def stream_dir(directory, **additional):",
          "87:     buf = BytesIO()",
          "88:     with zipfile.ZipFile(buf, 'w', compression=zipfile.ZIP_DEFLATED, allowZip64=True) as archive:",
          "89:         if directory:",
          "90:             for dirpath, dirs, files in os.walk(directory):",
          "91:                 relpath = os.path.relpath(dirpath, directory)",
          "92:                 if relpath == \".\":",
          "93:                     relpath = \"\"",
          "94:                 for fname in files:",
          "95:                     archive.write(os.path.join(dirpath, fname), arcname=os.path.join(relpath, fname))",
          "97:         for fname, data in additional.items():",
          "98:             archive.writestr(fname, data)",
          "99:         archive.close()",
          "101:     payload = buf.getvalue()",
          "102:     return b'\\n'.join((json.dumps({'zipfile': len(payload)}).encode('utf-8'), payload))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33e963b119d732ff7d7381c78a757a2e00cad275",
      "candidate_info": {
        "commit_hash": "33e963b119d732ff7d7381c78a757a2e00cad275",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/33e963b119d732ff7d7381c78a757a2e00cad275",
        "files": [
          "ansible_runner/__main__.py",
          "ansible_runner/streaming.py"
        ],
        "message": "Get the worker phase hooked up",
        "before_after_code_files": [
          "ansible_runner/__main__.py||ansible_runner/__main__.py",
          "ansible_runner/streaming.py||ansible_runner/streaming.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ],
          "candidate": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/__main__.py||ansible_runner/__main__.py": [
          "File: ansible_runner/__main__.py -> ansible_runner/__main__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "807:     if vargs.get('command') in ('adhoc', 'playbook'):",
          "808:         cli_execenv_cmd = vargs.get('command')",
          "809:         if not vargs.get('private_data_dir'):",
          "810:             temp_private_dir = tempfile.mkdtemp()",
          "811:             vargs['private_data_dir'] = temp_private_dir",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "810:         if not leftover_args:",
          "811:             parser.exit(",
          "812:                 status=1,",
          "813:                 message=\"The {} subcommand requires arguments to pass to Ansible inside the container.\\n\".format(",
          "814:                     vargs.get('command')",
          "815:                 )",
          "816:             )",
          "818:     if vargs.get('command') in ('worker', 'process', 'adhoc', 'playbook'):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "816:                 def conditonally_clean_cli_execenv_tempdir():",
          "817:                     shutil.rmtree(temp_private_dir)",
          "827:     if vargs.get('command') in ('start', 'run', 'transmit'):",
          "828:         if vargs.get('hosts') and not (vargs.get('module') or vargs.get('role')):",
          "829:             parser.exit(status=1, message=\"The --hosts option can only be used with -m or -r\\n\")",
          "",
          "[Removed Lines]",
          "819:         if not leftover_args:",
          "820:             parser.exit(",
          "821:                 status=1,",
          "822:                 message=\"The {} subcommand requires arguments to pass to Ansible inside the container.\\n\".format(",
          "823:                     vargs.get('command')",
          "824:                 )",
          "825:             )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "861:         if not os.path.exists(stderr_path):",
          "862:             os.close(os.open(stderr_path, os.O_CREAT, stat.S_IRUSR | stat.S_IWUSR))",
          "866:         if vargs.get('command') == 'start':",
          "867:             import daemon",
          "",
          "[Removed Lines]",
          "864:     if vargs.get('command') in ('start', 'run', 'transmit', 'adhoc', 'playbook'):",
          "",
          "[Added Lines]",
          "866:     if vargs.get('command') in ('start', 'run', 'transmit', 'worker', 'adhoc', 'playbook'):",
          "",
          "---------------"
        ],
        "ansible_runner/streaming.py||ansible_runner/streaming.py": [
          "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:         self._output.write(json.dumps(data).encode('utf-8'))",
          "77:         self._output.write(b'\\n')",
          "78:         self._output.flush()",
          "82: class Worker(object):",
          "",
          "[Removed Lines]",
          "79:         self._output.close()",
          "",
          "[Added Lines]",
          "79:         # self._output.close()",
          "81:         return self.status, self.rc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:         self.kwargs = kwargs",
          "95:     def run(self):",
          "96:         for line in self._input:",
          "",
          "[Removed Lines]",
          "93:         self.private_data_dir = tempfile.TemporaryDirectory().name",
          "",
          "[Added Lines]",
          "95:         private_data_dir = kwargs.get('private_data_dir')",
          "96:         if not private_data_dir:",
          "97:             private_data_dir = tempfile.TemporaryDirectory().name",
          "98:         self.private_data_dir = private_data_dir",
          "100:         self.status = \"unstarted\"",
          "101:         self.rc = None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:         self.kwargs['artifacts_handler'] = self.artifacts_handler",
          "119:         self.kwargs['finished_callback'] = self.finished_callback",
          "123:         # FIXME: do cleanup on the tempdir",
          "127:         self._output.write(b'\\n')",
          "128:         self._output.flush()",
          "",
          "[Removed Lines]",
          "121:         ansible_runner.interface.run(**self.kwargs)",
          "125:     def status_handler(self, status, runner_config):",
          "126:         self._output.write(json.dumps(status).encode('utf-8'))",
          "",
          "[Added Lines]",
          "129:         r = ansible_runner.interface.run(**self.kwargs)",
          "130:         self.status, self.rc = r.status, r.rc",
          "134:         return self.status, self.rc",
          "136:     def status_handler(self, status_data, runner_config):",
          "137:         self.status = status_data['status']",
          "138:         self._output.write(json.dumps(status_data).encode('utf-8'))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:         self._output.write(json.dumps({'eof': True}).encode('utf-8'))",
          "155:         self._output.write(b'\\n')",
          "156:         self._output.flush()",
          "160: class Processor(object):",
          "",
          "[Removed Lines]",
          "157:         self._output.close()",
          "",
          "[Added Lines]",
          "169:         # self._output.close()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94ac93e43b50bb541248d5eb145faf3c4d8fdc93",
      "candidate_info": {
        "commit_hash": "94ac93e43b50bb541248d5eb145faf3c4d8fdc93",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/94ac93e43b50bb541248d5eb145faf3c4d8fdc93",
        "files": [
          "ansible_runner/streaming.py",
          "test/integration/test_transmit_worker_process.py"
        ],
        "message": "Merge pull request #1 from AlanCoding/buffer_ballet\n\nStart on basic python interface test for new remote commands",
        "before_after_code_files": [
          "ansible_runner/streaming.py||ansible_runner/streaming.py",
          "test/integration/test_transmit_worker_process.py||test/integration/test_transmit_worker_process.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ],
          "candidate": [
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/streaming.py||ansible_runner/streaming.py": [
          "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:     def artifacts_callback(self, artifacts_data):",
          "201:         buf = io.BytesIO(self._input.read(artifacts_data['zipfile']))",
          "202:         with zipfile.ZipFile(buf, 'r') as archive:",
          "205:         if self.artifacts_handler is not None:",
          "208:     def run(self):",
          "209:         job_events_path = os.path.join(self.artifact_dir, 'job_events')",
          "",
          "[Removed Lines]",
          "203:             archive.extractall(path=self.config.artifact_dir)",
          "206:             self.artifacts_handler(self.config.artifact_dir)",
          "",
          "[Added Lines]",
          "203:             archive.extractall(path=self.artifact_dir)",
          "206:             self.artifacts_handler(self.artifact_dir)",
          "",
          "---------------"
        ],
        "test/integration/test_transmit_worker_process.py||test/integration/test_transmit_worker_process.py": [
          "File: test/integration/test_transmit_worker_process.py -> test/integration/test_transmit_worker_process.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import os",
          "2: import io",
          "4: from ansible_runner.streaming import Transmitter, Worker, Processor",
          "7: def test_remote_job_interface(tmpdir, test_data_dir):",
          "8:     worker_dir = str(tmpdir.mkdir('for_worker'))",
          "9:     process_dir = str(tmpdir.mkdir('for_process'))",
          "11:     original_dir = os.path.join(test_data_dir, 'debug')",
          "13:     outgoing_buffer = io.BytesIO()",
          "15:     # Intended AWX and Tower use case",
          "16:     transmitter = Transmitter(",
          "17:         _output = outgoing_buffer,",
          "18:         private_data_dir = original_dir,",
          "19:         playbook = 'debug.yml'",
          "20:     )",
          "22:     print(transmitter.kwargs)",
          "23:     assert transmitter.kwargs.get('playbook', '') == 'debug.yml'",
          "25:     status, rc = transmitter.run()",
          "26:     assert rc in (None, 0)",
          "27:     assert status == 'unstarted'",
          "29:     outgoing_buffer.seek(0)  # rewind so we can start reading",
          "31:     sent = outgoing_buffer.getvalue()",
          "32:     assert sent  # should not be blank at least",
          "33:     assert b'zipfile' in sent",
          "35:     incoming_buffer = io.BytesIO()",
          "37:     worker = Worker(",
          "38:         _input = outgoing_buffer,",
          "39:         _output = incoming_buffer,",
          "40:         private_data_dir = worker_dir",
          "41:     )",
          "42:     worker.run()",
          "44:     assert set(os.listdir(worker_dir)) == set(['artifacts', 'inventory', 'project']), outgoing_buffer.getvalue()",
          "46:     incoming_buffer.seek(0)  # again, be kind, rewind",
          "48:     processor = Processor(",
          "49:         _input = incoming_buffer,",
          "50:         private_data_dir = process_dir",
          "51:     )",
          "52:     processor.run()",
          "54:     assert set(os.listdir(process_dir)) == set(['artifacts']), outgoing_buffer.getvalue()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9d55e0426bfad11b566e693f05b16c37e30a74f",
      "candidate_info": {
        "commit_hash": "e9d55e0426bfad11b566e693f05b16c37e30a74f",
        "repo": "ansible/ansible-runner",
        "commit_url": "https://github.com/ansible/ansible-runner/commit/e9d55e0426bfad11b566e693f05b16c37e30a74f",
        "files": [
          "ansible_runner/interface.py",
          "ansible_runner/streaming.py",
          "ansible_runner/utils.py"
        ],
        "message": "Pass the original job kwargs as a message\n\ninstead of injecting them as a special file in the zipfile stream.",
        "before_after_code_files": [
          "ansible_runner/interface.py||ansible_runner/interface.py",
          "ansible_runner/streaming.py||ansible_runner/streaming.py",
          "ansible_runner/utils.py||ansible_runner/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ansible_runner/interface.py||ansible_runner/interface.py",
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ],
          "candidate": [
            "ansible_runner/interface.py||ansible_runner/interface.py",
            "ansible_runner/streaming.py||ansible_runner/streaming.py"
          ]
        }
      },
      "candidate_diff": {
        "ansible_runner/interface.py||ansible_runner/interface.py": [
          "File: ansible_runner/interface.py -> ansible_runner/interface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     :param module: The module that will be invoked in ad-hoc mode by runner when executing Ansible.",
          "113:     :param module_args: The module arguments that will be supplied to ad-hoc mode.",
          "114:     :param host_pattern: The host pattern to match when running in ad-hoc mode.",
          "116:                       a specific host or list of hosts. This can take the form of",
          "117:       - Path to the inventory file in the ``private_data_dir``",
          "118:       - Native python dict supporting the YAML/json inventory structure",
          "",
          "[Removed Lines]",
          "115:     :param inventory: Overridees the inventory directory/file (supplied at ``private_data_dir/inventory``) with",
          "",
          "[Added Lines]",
          "115:     :param inventory: Overrides the inventory directory/file (supplied at ``private_data_dir/inventory``) with",
          "",
          "---------------"
        ],
        "ansible_runner/streaming.py||ansible_runner/streaming.py": [
          "File: ansible_runner/streaming.py -> ansible_runner/streaming.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:         return json.JSONEncoder.default(self, obj)",
          "40: class Transmitter(object):",
          "",
          "[Removed Lines]",
          "23: # List of kwargs options to the run method that should be sent to the remote executor.",
          "24: remote_run_options = (",
          "25:     'forks',",
          "26:     'host_pattern',",
          "27:     'ident',",
          "28:     'ignore_logging',",
          "29:     'inventory',",
          "30:     'limit',",
          "31:     'module',",
          "32:     'module_args',",
          "33:     'omit_event_data',",
          "34:     'only_failed_event_data',",
          "35:     'playbook',",
          "36:     'verbosity',",
          "37: )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         self.rc = None",
          "50:     def run(self):",
          "54:         self._output.write(",
          "56:         self._output.write(json.dumps({'eof': True}).encode('utf-8'))",
          "57:         self._output.write(b'\\n')",
          "58:         self._output.flush()",
          "",
          "[Removed Lines]",
          "51:         remote_options = {key: value for key, value in self.kwargs.items() if key in remote_run_options}",
          "53:         private_data_dir = self.kwargs.get('private_data_dir', None)",
          "55:             utils.stream_dir(private_data_dir, kwargs=json.dumps(remote_options, cls=UUIDEncoder)))",
          "",
          "[Added Lines]",
          "37:             json.dumps({'kwargs': self.kwargs}, cls=UUIDEncoder).encode('utf-8')",
          "38:         )",
          "39:         self._output.flush()",
          "41:         private_data_dir = self.kwargs.get('private_data_dir')",
          "42:         self._output.write(utils.stream_dir(private_data_dir))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:         self._output = _output",
          "72:         self.kwargs = kwargs",
          "74:         private_data_dir = kwargs.get('private_data_dir')",
          "76:             private_data_dir = tempfile.TemporaryDirectory().name",
          "77:         self.private_data_dir = private_data_dir",
          "",
          "[Removed Lines]",
          "75:         if not private_data_dir:",
          "",
          "[Added Lines]",
          "60:         self.job_kwargs = None",
          "63:         if private_data_dir is None:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:             line = self._input.readline()",
          "85:             data = json.loads(line)",
          "88:                 zip_data = self._input.read(data['zipfile'])",
          "89:                 buf = io.BytesIO(zip_data)",
          "90:                 with zipfile.ZipFile(buf, 'r') as archive:",
          "",
          "[Removed Lines]",
          "87:             if 'zipfile' in data:",
          "",
          "[Added Lines]",
          "75:             if 'kwargs' in data:",
          "76:                 self.job_kwargs = data['kwargs']",
          "77:             elif 'zipfile' in data:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92:             elif 'eof' in data:",
          "93:                 break",
          "106:         self.kwargs['quiet'] = True",
          "107:         self.kwargs['private_data_dir'] = self.private_data_dir",
          "108:         self.kwargs['status_handler'] = self.status_handler",
          "",
          "[Removed Lines]",
          "95:         kwargs_path = os.path.join(self.private_data_dir, 'kwargs')",
          "96:         if os.path.exists(kwargs_path):",
          "97:             with open(kwargs_path, \"r\") as kwf:",
          "98:                 kwargs = json.load(kwf)",
          "99:             if not isinstance(kwargs, dict):",
          "100:                 raise ValueError(\"Invalid kwargs data\")",
          "101:         else:",
          "102:             kwargs = {}",
          "104:         self.kwargs.update(kwargs)",
          "",
          "[Added Lines]",
          "85:         self.kwargs.update(self.job_kwargs)",
          "",
          "---------------"
        ],
        "ansible_runner/utils.py||ansible_runner/utils.py": [
          "File: ansible_runner/utils.py -> ansible_runner/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:         return False",
          "87:     buf = BytesIO()",
          "88:     with zipfile.ZipFile(buf, 'w', compression=zipfile.ZIP_DEFLATED, allowZip64=True) as archive:",
          "89:         if directory:",
          "",
          "[Removed Lines]",
          "86: def stream_dir(directory, **additional):",
          "",
          "[Added Lines]",
          "86: def stream_dir(directory):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:                     relpath = \"\"",
          "94:                 for fname in files:",
          "95:                     archive.write(os.path.join(dirpath, fname), arcname=os.path.join(relpath, fname))",
          "99:         archive.close()",
          "101:     payload = buf.getvalue()",
          "",
          "[Removed Lines]",
          "97:         for fname, data in additional.items():",
          "98:             archive.writestr(fname, data)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}