{
  "cve_id": "CVE-2019-3808",
  "cve_desc": "A flaw was found in Moodle versions 3.6 to 3.6.1, 3.5 to 3.5.3, 3.4 to 3.4.6, 3.1 to 3.1.15 and earlier unsupported versions. The 'manage groups' capability did not have the 'XSS risk' flag assigned to it, but does have that access in certain places. Note that the capability is intended for use by trusted users, and is only assigned to teachers and managers by default.",
  "repo": "moodle/moodle",
  "patch_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
  "patch_info": {
    "commit_hash": "6360f87cdca744a6a71c315853f6d811a3e54e26",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/6360f87cdca744a6a71c315853f6d811a3e54e26",
    "files": [
      "lib/db/access.php",
      "version.php"
    ],
    "message": "MDL-64395 groups: Added XSS Risk to the manage groups capability",
    "before_after_code_files": [
      "lib/db/access.php||lib/db/access.php",
      "version.php||version.php"
    ]
  },
  "patch_diff": {
    "lib/db/access.php||lib/db/access.php": [
      "File: lib/db/access.php -> lib/db/access.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1123:     ),",
      "1125:     'moodle/course:managegroups' => array(",
      "1127:         'captype' => 'write',",
      "1128:         'contextlevel' => CONTEXT_COURSE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1126:         'riskbitmask' => RISK_XSS,",
      "",
      "---------------"
    ],
    "version.php||version.php": [
      "File: version.php -> version.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: defined('MOODLE_INTERNAL') || die();",
      "",
      "[Removed Lines]",
      "32: $version  = 2018122000.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "[Added Lines]",
      "32: $version  = 2018122000.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "637707bcb00723090f5e062baf6c18eab5e5b60d",
      "candidate_info": {
        "commit_hash": "637707bcb00723090f5e062baf6c18eab5e5b60d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/637707bcb00723090f5e062baf6c18eab5e5b60d",
        "files": [
          "comment/classes/external.php",
          "comment/lib.php",
          "comment/tests/externallib_test.php",
          "comment/upgrade.txt",
          "lib/db/services.php",
          "version.php"
        ],
        "message": "Merge branch 'MDL-64588-master-2' of git://github.com/snake/moodle",
        "before_after_code_files": [
          "comment/classes/external.php||comment/classes/external.php",
          "comment/lib.php||comment/lib.php",
          "comment/tests/externallib_test.php||comment/tests/externallib_test.php",
          "lib/db/services.php||lib/db/services.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "comment/classes/external.php||comment/classes/external.php": [
          "File: comment/classes/external.php -> comment/classes/external.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:             'comments' => $comments,",
          "132:             'count' => $commentobject->count(),",
          "133:             'perpage' => (!empty($CFG->commentsperpage)) ? $CFG->commentsperpage : 15,",
          "134:             'warnings' => $warnings",
          "135:         );",
          "136:         return $results;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:             'canpost'  => $commentobject->can_post(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "146:         return new external_single_structure(",
          "147:             array(",
          "148:                 'comments' => new external_multiple_structure(",
          "164:                 ),",
          "165:                 'count' => new external_value(PARAM_INT,  'Total number of comments.', VALUE_OPTIONAL),",
          "166:                 'perpage' => new external_value(PARAM_INT,  'Number of comments per page.', VALUE_OPTIONAL),",
          "167:                 'warnings' => new external_warnings()",
          "168:             )",
          "169:         );",
          "170:     }",
          "171: }",
          "",
          "[Removed Lines]",
          "149:                     new external_single_structure(",
          "150:                         array(",
          "151:                             'id'             => new external_value(PARAM_INT,  'Comment ID'),",
          "152:                             'content'        => new external_value(PARAM_RAW,  'The content text formated'),",
          "153:                             'format'         => new external_format_value('content'),",
          "154:                             'timecreated'    => new external_value(PARAM_INT,  'Time created (timestamp)'),",
          "155:                             'strftimeformat' => new external_value(PARAM_NOTAGS, 'Time format'),",
          "156:                             'profileurl'     => new external_value(PARAM_URL,  'URL profile'),",
          "157:                             'fullname'       => new external_value(PARAM_NOTAGS, 'fullname'),",
          "158:                             'time'           => new external_value(PARAM_NOTAGS, 'Time in human format'),",
          "159:                             'avatar'         => new external_value(PARAM_RAW,  'HTML user picture'),",
          "160:                             'userid'         => new external_value(PARAM_INT,  'User ID'),",
          "161:                             'delete'         => new external_value(PARAM_BOOL, 'Permission to delete=true/false', VALUE_OPTIONAL)",
          "162:                         ), 'comment'",
          "163:                     ), 'List of comments'",
          "",
          "[Added Lines]",
          "150:                     self::get_comment_structure(), 'List of comments'",
          "154:                 'canpost' => new external_value(PARAM_BOOL, 'Whether the user can post in this comment area.', VALUE_OPTIONAL),",
          "165:     protected static function get_comment_structure() {",
          "166:         return new external_single_structure(",
          "167:             array(",
          "168:                 'id'             => new external_value(PARAM_INT,  'Comment ID'),",
          "169:                 'content'        => new external_value(PARAM_RAW,  'The content text formatted'),",
          "170:                 'format'         => new external_format_value('content'),",
          "171:                 'timecreated'    => new external_value(PARAM_INT,  'Time created (timestamp)'),",
          "172:                 'strftimeformat' => new external_value(PARAM_NOTAGS, 'Time format'),",
          "173:                 'profileurl'     => new external_value(PARAM_URL,  'URL profile'),",
          "174:                 'fullname'       => new external_value(PARAM_NOTAGS, 'fullname'),",
          "175:                 'time'           => new external_value(PARAM_NOTAGS, 'Time in human format'),",
          "176:                 'avatar'         => new external_value(PARAM_RAW,  'HTML user picture'),",
          "177:                 'userid'         => new external_value(PARAM_INT,  'User ID'),",
          "178:                 'delete'         => new external_value(PARAM_BOOL, 'Permission to delete=true/false', VALUE_OPTIONAL)",
          "179:             ), 'comment'",
          "180:         );",
          "181:     }",
          "189:     public static function add_comments_parameters() {",
          "190:         return new external_function_parameters(",
          "191:             [",
          "192:                 'comments' => new external_multiple_structure(",
          "193:                     new external_single_structure(",
          "194:                         [",
          "195:                             'contextlevel' => new external_value(PARAM_ALPHA, 'contextlevel system, course, user...'),",
          "196:                             'instanceid'   => new external_value(PARAM_INT, 'the id of item associated with the contextlevel'),",
          "197:                             'component'    => new external_value(PARAM_COMPONENT, 'component'),",
          "198:                             'content'      => new external_value(PARAM_RAW, 'component'),",
          "199:                             'itemid'       => new external_value(PARAM_INT, 'associated id'),",
          "200:                             'area'         => new external_value(PARAM_AREA, 'string comment area', VALUE_DEFAULT, ''),",
          "201:                         ]",
          "202:                     )",
          "203:                 )",
          "204:             ]",
          "205:         );",
          "206:     }",
          "216:     public static function add_comments($comments) {",
          "217:         global $CFG, $SITE;",
          "219:         if (empty($CFG->usecomments)) {",
          "220:             throw new comment_exception('commentsnotenabled', 'moodle');",
          "221:         }",
          "223:         $params = self::validate_parameters(self::add_comments_parameters(), ['comments' => $comments]);",
          "226:         foreach ($params['comments'] as $index => $comment) {",
          "227:             $context = self::get_context_from_params($comment);",
          "228:             self::validate_context($context);",
          "230:             list($context, $course, $cm) = get_context_info_array($context->id);",
          "231:             if ($context->id == SYSCONTEXTID) {",
          "232:                 $course = $SITE;",
          "233:             }",
          "236:             $args = new stdClass();",
          "237:             $args->context   = $context;",
          "238:             $args->course    = $course;",
          "239:             $args->cm        = $cm;",
          "240:             $args->component = $comment['component'];",
          "241:             $args->itemid    = $comment['itemid'];",
          "242:             $args->area      = $comment['area'];",
          "244:             $manager = new comment($args);",
          "245:             if (!$manager->can_post()) {",
          "246:                 throw new comment_exception('nopermissiontocomment');",
          "247:             }",
          "249:             $params['comments'][$index]['preparedcomment'] = $manager;",
          "250:         }",
          "253:         $results = [];",
          "254:         foreach ($params['comments'] as $comment) {",
          "255:             $manager = $comment['preparedcomment'];",
          "256:             $newcomment = $manager->add($comment['content']);",
          "257:             $newcomment->delete = true; // USER created the comment, so they can delete it.",
          "258:             $results[] = $newcomment;",
          "259:         }",
          "261:         return $results;",
          "262:     }",
          "270:     public static function add_comments_returns() {",
          "271:         return new external_multiple_structure(",
          "272:             self::get_comment_structure()",
          "273:         );",
          "274:     }",
          "282:     public static function delete_comments_parameters() {",
          "283:         return new external_function_parameters(",
          "284:             [",
          "285:                 'comments' => new external_multiple_structure(",
          "286:                     new external_value(PARAM_INT, 'id of the comment', VALUE_DEFAULT, 0)",
          "287:                 )",
          "288:             ]",
          "289:         );",
          "290:     }",
          "300:     public static function delete_comments(array $comments) {",
          "301:         global $CFG, $DB, $USER, $SITE;",
          "303:         if (empty($CFG->usecomments)) {",
          "304:             throw new comment_exception('commentsnotenabled', 'moodle');",
          "305:         }",
          "307:         $params = self::validate_parameters(self::delete_comments_parameters(), ['comments' => $comments]);",
          "308:         $commentids = $params['comments'];",
          "310:         list($insql, $inparams) = $DB->get_in_or_equal($commentids);",
          "311:         $commentrecords = $DB->get_records_select('comments', \"id {$insql}\", $inparams);",
          "314:         if (count($commentrecords) != count($comments)) {",
          "315:             $invalidcomments = array_diff($commentids, array_column($commentrecords, 'id'));",
          "316:             $invalidcommentsstr = implode(',', $invalidcomments);",
          "317:             throw new comment_exception(\"One or more comments could not be found by id: $invalidcommentsstr\");",
          "318:         }",
          "321:         $comments = []; // Holds the comment objects, for later deletion.",
          "322:         foreach ($commentrecords as $commentrecord) {",
          "324:             list($context, $course, $cm) = get_context_info_array($commentrecord->contextid);",
          "325:             if ($context->id == SYSCONTEXTID) {",
          "326:                 $course = $SITE;",
          "327:             }",
          "328:             self::validate_context($context);",
          "331:             $args = new stdClass;",
          "332:             $args->context   = $context;",
          "333:             $args->course    = $course;",
          "334:             $args->cm        = $cm;",
          "335:             $args->component = $commentrecord->component;",
          "336:             $args->itemid    = $commentrecord->itemid;",
          "337:             $args->area      = $commentrecord->commentarea;",
          "338:             $manager = new comment($args);",
          "340:             if ($commentrecord->userid != $USER->id && !$manager->can_delete($commentrecord->id)) {",
          "341:                 throw new comment_exception('nopermissiontodelentry');",
          "342:             }",
          "345:             $comments[$commentrecord->id] = $manager;",
          "346:         }",
          "349:         foreach ($comments as $commentid => $comment) {",
          "350:             $comment->delete($commentid);",
          "351:         }",
          "353:         return [];",
          "354:     }",
          "362:     public static function delete_comments_returns() {",
          "363:         return new external_warnings();",
          "364:     }",
          "",
          "---------------"
        ],
        "comment/lib.php||comment/lib.php": [
          "File: comment/lib.php -> comment/lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:                        c.commentarea = :commentarea AND",
          "567:                        c.itemid = :itemid AND",
          "568:                        $componentwhere",
          "570:         $params['contextid'] = $this->contextid;",
          "571:         $params['commentarea'] = $this->commentarea;",
          "572:         $params['itemid'] = $this->itemid;",
          "",
          "[Removed Lines]",
          "569:               ORDER BY c.timecreated $sortdirection\";",
          "",
          "[Added Lines]",
          "569:               ORDER BY c.timecreated $sortdirection, c.id $sortdirection\";",
          "",
          "---------------"
        ],
        "comment/tests/externallib_test.php||comment/tests/externallib_test.php": [
          "File: comment/tests/externallib_test.php -> comment/tests/externallib_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     protected function setUp() {",
          "51:     }",
          "61:         $CFG->usecomments = true;",
          "65:         $studentrole = $DB->get_record('role', array('shortname' => 'student'));",
          "68:         $record = new stdClass();",
          "71:         $record->intro = \"Some intro of some sort\";",
          "72:         $record->comments = 1;",
          "77:         $fielddetail = new stdClass();",
          "78:         $fielddetail->name = 'Name';",
          "",
          "[Removed Lines]",
          "48:         global $CFG;",
          "50:         require_once($CFG->dirroot . '/comment/lib.php');",
          "56:     public function test_get_comments() {",
          "57:         global $DB, $CFG;",
          "59:         $this->resetAfterTest(true);",
          "63:         $user = $this->getDataGenerator()->create_user();",
          "64:         $course = $this->getDataGenerator()->create_course(array('enablecomment' => 1));",
          "66:         $this->getDataGenerator()->enrol_user($user->id, $course->id, $studentrole->id);",
          "69:         $record->course = $course->id;",
          "70:         $record->name = \"Mod data  test\";",
          "74:         $module = $this->getDataGenerator()->create_module('data', $record);",
          "75:         $field = data_get_field_new('text', $module);",
          "",
          "[Added Lines]",
          "48:         $this->resetAfterTest();",
          "56:     protected function setup_course_and_users_basic() {",
          "57:         global $CFG, $DB;",
          "59:         require_once($CFG->dirroot . '/comment/lib.php');",
          "63:         $student1 = $this->getDataGenerator()->create_user();",
          "64:         $student2 = $this->getDataGenerator()->create_user();",
          "65:         $teacher1 = $this->getDataGenerator()->create_user();",
          "66:         $course1 = $this->getDataGenerator()->create_course(array('enablecomment' => 1));",
          "68:         $teacherrole = $DB->get_record('role', array('shortname' => 'editingteacher'));",
          "69:         $this->getDataGenerator()->enrol_user($student1->id, $course1->id, $studentrole->id);",
          "70:         $this->getDataGenerator()->enrol_user($student2->id, $course1->id, $studentrole->id);",
          "71:         $this->getDataGenerator()->enrol_user($teacher1->id, $course1->id, $teacherrole->id);",
          "75:         $record->course = $course1->id;",
          "76:         $record->name = \"Mod data test\";",
          "80:         $module1 = $this->getDataGenerator()->create_module('data', $record);",
          "81:         $field = data_get_field_new('text', $module1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         $field->define_field($fielddetail);",
          "82:         $field->insert_field();",
          "85:         $datacontent = array();",
          "86:         $datacontent['fieldid'] = $field->field->id;",
          "87:         $datacontent['recordid'] = $recordid;",
          "88:         $datacontent['content'] = 'Asterix';",
          "112:         $contextlevel = 'module';",
          "114:         $component = 'mod_data';",
          "115:         $itemid = $recordid;",
          "116:         $area = 'database_entry';",
          "117:         $page = 0;",
          "119:         $result = core_comment_external::get_comments($contextlevel, $instanceid, $component, $itemid, $area, $page);",
          "124:         $this->assertCount(0, $result['warnings']);",
          "125:         $this->assertCount(2, $result['comments']);",
          "126:         $this->assertEquals(2, $result['count']);",
          "127:         $this->assertEquals(15, $result['perpage']);",
          "136:         $CFG->commentsperpage = 1;",
          "",
          "[Removed Lines]",
          "83:         $recordid = data_add_record($module);",
          "90:         $contentid = $DB->insert_record('data_content', $datacontent);",
          "91:         $cm = get_coursemodule_from_instance('data', $module->id, $course->id);",
          "93:         $context = context_module::instance($module->cmid);",
          "95:         $this->setUser($user);",
          "98:         $newcmt = new stdClass;",
          "99:         $newcmt->contextid    = $context->id;",
          "100:         $newcmt->commentarea  = 'database_entry';",
          "101:         $newcmt->itemid       = $recordid;",
          "102:         $newcmt->content      = 'New comment';",
          "103:         $newcmt->format       = 0;",
          "104:         $newcmt->userid       = $user->id;",
          "105:         $newcmt->timecreated  = time();",
          "106:         $cmtid1 = $DB->insert_record('comments', $newcmt);",
          "108:         $newcmt->content  = 'New comment 2';",
          "109:         $newcmt->timecreated  = time() + 1;",
          "110:         $cmtid2 = $DB->insert_record('comments', $newcmt);",
          "113:         $instanceid = $cm->id;",
          "121:         $result = external_api::clean_returnvalue(",
          "122:             core_comment_external::get_comments_returns(), $result);",
          "129:         $this->assertEquals($user->id, $result['comments'][0]['userid']);",
          "130:         $this->assertEquals($user->id, $result['comments'][1]['userid']);",
          "132:         $this->assertEquals($cmtid2, $result['comments'][0]['id']); // Default ordering newer first.",
          "133:         $this->assertEquals($cmtid1, $result['comments'][1]['id']);",
          "",
          "[Added Lines]",
          "89:         $recordid = data_add_record($module1);",
          "95:         $DB->insert_record('data_content', $datacontent);",
          "97:         return [$module1, $recordid, $teacher1, $student1, $student2];",
          "98:     }",
          "103:     public function test_get_comments() {",
          "104:         global $CFG;",
          "105:         [$module1, $recordid, $teacher1, $student1, $student2] = $this->setup_course_and_users_basic();",
          "108:         $this->setUser($student1);",
          "109:         $inputdata = [",
          "110:             [",
          "111:                 'contextlevel' => 'module',",
          "112:                 'instanceid' => $module1->cmid,",
          "113:                 'component' => 'mod_data',",
          "114:                 'content' => 'abc',",
          "115:                 'itemid' => $recordid,",
          "116:                 'area' => 'database_entry'",
          "117:             ],",
          "118:             [",
          "119:                 'contextlevel' => 'module',",
          "120:                 'instanceid' => $module1->cmid,",
          "121:                 'component' => 'mod_data',",
          "122:                 'content' => 'def',",
          "123:                 'itemid' => $recordid,",
          "124:                 'area' => 'database_entry'",
          "125:             ]",
          "126:         ];",
          "127:         $result = core_comment_external::add_comments($inputdata);",
          "128:         $result = external_api::clean_returnvalue(core_comment_external::add_comments_returns(), $result);",
          "129:         $ids = array_column($result, 'id');",
          "133:         $instanceid = $module1->cmid;",
          "139:         $result = external_api::clean_returnvalue(core_comment_external::get_comments_returns(), $result);",
          "145:         $this->assertTrue($result['canpost']);",
          "147:         $this->assertEquals($student1->id, $result['comments'][0]['userid']);",
          "148:         $this->assertEquals($student1->id, $result['comments'][1]['userid']);",
          "150:         $this->assertEquals($ids[1], $result['comments'][0]['id']); // Default ordering newer first.",
          "151:         $this->assertEquals($ids[0], $result['comments'][1]['id']);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:         $this->assertCount(1, $result['comments']); // Only one per page.",
          "142:         $this->assertEquals(2, $result['count']);",
          "143:         $this->assertEquals($CFG->commentsperpage, $result['perpage']);",
          "147:         $result = core_comment_external::get_comments($contextlevel, $instanceid, $component, $itemid, $area, $page + 1, 'ASC');",
          "",
          "[Removed Lines]",
          "144:         $this->assertEquals($cmtid1, $result['comments'][0]['id']); // Comments order older first.",
          "",
          "[Added Lines]",
          "162:         $this->assertEquals($ids[0], $result['comments'][0]['id']); // Comments order older first.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151:         $this->assertCount(1, $result['comments']);",
          "152:         $this->assertEquals(2, $result['count']);",
          "153:         $this->assertEquals($CFG->commentsperpage, $result['perpage']);",
          "155:     }",
          "156: }",
          "",
          "[Removed Lines]",
          "154:         $this->assertEquals($cmtid2, $result['comments'][0]['id']);",
          "",
          "[Added Lines]",
          "172:         $this->assertEquals($ids[1], $result['comments'][0]['id']);",
          "173:     }",
          "178:     public function test_add_comments_not_enabled_site_level() {",
          "179:         global $CFG;",
          "180:         [$module1, $recordid, $teacher1, $student1, $student2] = $this->setup_course_and_users_basic();",
          "183:         $this->setUser($student1);",
          "184:         $CFG->usecomments = false;",
          "186:         $this->expectException(comment_exception::class);",
          "187:         core_comment_external::add_comments([",
          "188:             [",
          "189:                 'contextlevel' => 'module',",
          "190:                 'instanceid' => $module1->cmid,",
          "191:                 'component' => 'mod_data',",
          "192:                 'content' => 'abc',",
          "193:                 'itemid' => $recordid,",
          "194:                 'area' => 'database_entry'",
          "195:             ]",
          "196:         ]);",
          "197:     }",
          "202:     public function test_add_comments_not_enabled_module_level() {",
          "203:         global $DB;",
          "204:         [$module1, $recordid, $teacher1, $student1, $student2] = $this->setup_course_and_users_basic();",
          "207:         $DB->set_field('data', 'comments', 0, array('id' => $module1->id));",
          "210:         $this->setUser($student1);",
          "211:         $this->expectException(comment_exception::class);",
          "212:         core_comment_external::add_comments([",
          "213:             [",
          "214:                 'contextlevel' => 'module',",
          "215:                 'instanceid' => $module1->cmid,",
          "216:                 'component' => 'mod_data',",
          "217:                 'content' => 'abc',",
          "218:                 'itemid' => $recordid,",
          "219:                 'area' => 'database_entry'",
          "220:             ]",
          "221:         ]);",
          "222:     }",
          "227:     public function test_add_comments_single() {",
          "228:         [$module1, $recordid, $teacher1, $student1, $student2] = $this->setup_course_and_users_basic();",
          "231:         $this->setUser($student1);",
          "232:         $result = core_comment_external::add_comments([",
          "233:             [",
          "234:                 'contextlevel' => 'module',",
          "235:                 'instanceid' => $module1->cmid,",
          "236:                 'component' => 'mod_data',",
          "237:                 'content' => 'abc',",
          "238:                 'itemid' => $recordid,",
          "239:                 'area' => 'database_entry'",
          "240:             ]",
          "241:         ]);",
          "242:         $result = external_api::clean_returnvalue(core_comment_external::add_comments_returns(), $result);",
          "245:         $this->assertCount(1, $result);",
          "247:         $expectedkeys = [",
          "248:             'id',",
          "249:             'content',",
          "250:             'format',",
          "251:             'timecreated',",
          "252:             'strftimeformat',",
          "253:             'profileurl',",
          "254:             'fullname',",
          "255:             'time',",
          "256:             'avatar',",
          "257:             'userid',",
          "258:             'delete',",
          "259:         ];",
          "260:         foreach ($expectedkeys as $key) {",
          "261:             $this->assertArrayHasKey($key, $result[0]);",
          "262:         }",
          "263:     }",
          "270:     public function test_add_comments_multiple_contains_invalid() {",
          "271:         [$module1, $recordid, $teacher1, $student1, $student2] = $this->setup_course_and_users_basic();",
          "274:         $this->setUser($student1);",
          "275:         $this->expectException(comment_exception::class);",
          "276:         core_comment_external::add_comments([",
          "277:             [",
          "278:                 'contextlevel' => 'module',",
          "279:                 'instanceid' => $module1->cmid,",
          "280:                 'component' => 'mod_data',",
          "281:                 'content' => 'abc',",
          "282:                 'itemid' => $recordid,",
          "283:                 'area' => 'database_entry'",
          "284:             ],",
          "285:             [",
          "286:                 'contextlevel' => 'module',",
          "287:                 'instanceid' => $module1->cmid,",
          "288:                 'component' => 'mod_data',",
          "289:                 'content' => 'def',",
          "290:                 'itemid' => $recordid,",
          "291:                 'area' => 'badarea'",
          "292:             ],",
          "293:         ]);",
          "294:     }",
          "301:     public function test_add_comments_multiple_all_valid() {",
          "302:         [$module1, $recordid, $teacher1, $student1, $student2] = $this->setup_course_and_users_basic();",
          "305:         $this->setUser($student1);",
          "306:         $inputdata = [",
          "307:             [",
          "308:                 'contextlevel' => 'module',",
          "309:                 'instanceid' => $module1->cmid,",
          "310:                 'component' => 'mod_data',",
          "311:                 'content' => 'abc',",
          "312:                 'itemid' => $recordid,",
          "313:                 'area' => 'database_entry'",
          "314:             ],",
          "315:             [",
          "316:                 'contextlevel' => 'module',",
          "317:                 'instanceid' => $module1->cmid,",
          "318:                 'component' => 'mod_data',",
          "319:                 'content' => 'def',",
          "320:                 'itemid' => $recordid,",
          "321:                 'area' => 'database_entry'",
          "322:             ]",
          "323:         ];",
          "324:         $result = core_comment_external::add_comments($inputdata);",
          "325:         $result = external_api::clean_returnvalue(core_comment_external::add_comments_returns(), $result);",
          "328:         $this->assertCount(2, $result);",
          "331:         foreach ($result as $index => $comment) {",
          "332:             $formatoptions = array('overflowdiv' => true, 'blanktarget' => true);",
          "333:             $expectedcontent = format_text($inputdata[$index]['content'], FORMAT_MOODLE, $formatoptions);",
          "334:             $this->assertEquals($expectedcontent, $comment['content']);",
          "335:         }",
          "336:     }",
          "341:     public function test_add_comments_invalid_area() {",
          "342:         [$module1, $recordid, $teacher1, $student1, $student2] = $this->setup_course_and_users_basic();",
          "345:         $this->setUser($student1);",
          "346:         $comments = [",
          "347:             [",
          "348:                 'contextlevel' => 'module',",
          "349:                 'instanceid' => $module1->cmid,",
          "350:                 'component' => 'mod_data',",
          "351:                 'content' => 'abc',",
          "352:                 'itemid' => $recordid,",
          "353:                 'area' => 'spaghetti'",
          "354:             ]",
          "355:         ];",
          "356:         $this->expectException(comment_exception::class);",
          "357:         core_comment_external::add_comments($comments);",
          "358:     }",
          "363:     public function test_delete_comments_invalid_comment_id() {",
          "364:         [$module1, $recordid, $teacher1, $student1, $student2] = $this->setup_course_and_users_basic();",
          "365:         $this->setUser($student1);",
          "367:         $this->expectException(comment_exception::class);",
          "368:         core_comment_external::delete_comments([-1, 0]);",
          "369:     }",
          "374:     public function test_delete_comments_own_user() {",
          "375:         [$module1, $recordid, $teacher1, $student1, $student2] = $this->setup_course_and_users_basic();",
          "378:         $this->setUser($student1);",
          "379:         $result = core_comment_external::add_comments([",
          "380:             [",
          "381:                 'contextlevel' => 'module',",
          "382:                 'instanceid' => $module1->cmid,",
          "383:                 'component' => 'mod_data',",
          "384:                 'content' => 'abc',",
          "385:                 'itemid' => $recordid,",
          "386:                 'area' => 'database_entry'",
          "387:             ],",
          "388:             [",
          "389:                 'contextlevel' => 'module',",
          "390:                 'instanceid' => $module1->cmid,",
          "391:                 'component' => 'mod_data',",
          "392:                 'content' => 'def',",
          "393:                 'itemid' => $recordid,",
          "394:                 'area' => 'database_entry'",
          "395:             ]",
          "396:         ]);",
          "397:         $result = external_api::clean_returnvalue(core_comment_external::add_comments_returns(), $result);",
          "400:         $result = core_comment_external::delete_comments([",
          "401:             $result[0]['id'],",
          "402:             $result[1]['id']",
          "403:         ]);",
          "404:         $result = external_api::clean_returnvalue(core_comment_external::delete_comments_returns(), $result);",
          "405:         $this->assertEquals([], $result);",
          "406:     }",
          "411:     public function test_delete_comment_other_student() {",
          "412:         [$module1, $recordid, $teacher1, $student1, $student2] = $this->setup_course_and_users_basic();",
          "415:         $this->setUser($student1);",
          "416:         $result = core_comment_external::add_comments([",
          "417:             [",
          "418:                 'contextlevel' => 'module',",
          "419:                 'instanceid' => $module1->cmid,",
          "420:                 'component' => 'mod_data',",
          "421:                 'content' => 'abc',",
          "422:                 'itemid' => $recordid,",
          "423:                 'area' => 'database_entry'",
          "424:             ]",
          "425:         ]);",
          "426:         $result = external_api::clean_returnvalue(core_comment_external::add_comments_returns(), $result);",
          "429:         $this->setUser($student2);",
          "430:         $this->expectException(comment_exception::class);",
          "431:         core_comment_external::delete_comments([$result[0]['id']]);",
          "432:     }",
          "437:     public function test_delete_comments_as_teacher() {",
          "438:         [$module1, $recordid, $teacher1, $student1, $student2] = $this->setup_course_and_users_basic();",
          "441:         $this->setUser($student1);",
          "442:         $result = core_comment_external::add_comments([",
          "443:             [",
          "444:                 'contextlevel' => 'module',",
          "445:                 'instanceid' => $module1->cmid,",
          "446:                 'component' => 'mod_data',",
          "447:                 'content' => 'abc',",
          "448:                 'itemid' => $recordid,",
          "449:                 'area' => 'database_entry'",
          "450:             ]",
          "451:         ]);",
          "452:         $result = external_api::clean_returnvalue(core_comment_external::add_comments_returns(), $result);",
          "455:         $this->setUser($teacher1);",
          "456:         $result = core_comment_external::delete_comments([$result[0]['id']]);",
          "457:         $result = external_api::clean_returnvalue(core_comment_external::delete_comments_returns(), $result);",
          "458:         $this->assertEquals([], $result);",
          "",
          "---------------"
        ],
        "lib/db/services.php||lib/db/services.php": [
          "File: lib/db/services.php -> lib/db/services.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "334:         'capabilities' => 'moodle/comment:view',",
          "335:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "336:     ),",
          "337:     'core_completion_get_activities_completion_status' => array(",
          "338:         'classname' => 'core_completion_external',",
          "339:         'methodname' => 'get_activities_completion_status',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:     ),",
          "337:     'core_comment_add_comments' => array(",
          "338:         'classname' => 'core_comment_external',",
          "339:         'methodname' => 'add_comments',",
          "340:         'description' => 'Adds a comment or comments.',",
          "341:         'type' => 'write',",
          "342:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "343:     ),",
          "344:     'core_comment_delete_comments' => array(",
          "345:         'classname' => 'core_comment_external',",
          "346:         'methodname' => 'delete_comments',",
          "347:         'description' => 'Deletes a comment or comments.',",
          "348:         'type' => 'write',",
          "349:         'services' => array(MOODLE_OFFICIAL_MOBILE_SERVICE),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019092700.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019092700.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2e970779d5d34cdaeb52e508282a4acb46d3e00",
      "candidate_info": {
        "commit_hash": "c2e970779d5d34cdaeb52e508282a4acb46d3e00",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/c2e970779d5d34cdaeb52e508282a4acb46d3e00",
        "files": [
          "admin/settings/plugins.php",
          "lib/db/upgrade.php",
          "lib/dml/mariadb_native_moodle_database.php",
          "lib/dml/moodle_database.php",
          "lib/dml/mysqli_native_moodle_database.php",
          "lib/dml/pgsql_native_moodle_database.php",
          "lib/dml/sqlsrv_native_moodle_database.php",
          "lib/upgrade.txt",
          "search/classes/document.php",
          "search/engine/simpledb/classes/engine.php",
          "search/engine/simpledb/db/install.php",
          "search/engine/simpledb/db/uninstall.php",
          "search/engine/simpledb/tests/engine_test.php",
          "search/engine/simpledb/version.php",
          "version.php"
        ],
        "message": "MDL-53226 search_simpledb: Refine the patch\n\n- Clumsy fallback only when there is no full-text search support\n- Mimic solr tests\n- pgsql tokenization using simple configuration\n- workaround for mysql '*' search issue\n- total results proper calculation\n- SQL server FTS support\n- Standarize dml full-text search checkings\n- Upgrade note about the new dml method\n- Set search_simpledb as default engine if no solr config",
        "before_after_code_files": [
          "admin/settings/plugins.php||admin/settings/plugins.php",
          "lib/db/upgrade.php||lib/db/upgrade.php",
          "lib/dml/mariadb_native_moodle_database.php||lib/dml/mariadb_native_moodle_database.php",
          "lib/dml/moodle_database.php||lib/dml/moodle_database.php",
          "lib/dml/mysqli_native_moodle_database.php||lib/dml/mysqli_native_moodle_database.php",
          "lib/dml/pgsql_native_moodle_database.php||lib/dml/pgsql_native_moodle_database.php",
          "lib/dml/sqlsrv_native_moodle_database.php||lib/dml/sqlsrv_native_moodle_database.php",
          "search/classes/document.php||search/classes/document.php",
          "search/engine/simpledb/classes/engine.php||search/engine/simpledb/classes/engine.php",
          "search/engine/simpledb/db/install.php||search/engine/simpledb/db/install.php",
          "search/engine/simpledb/db/uninstall.php||search/engine/simpledb/db/uninstall.php",
          "search/engine/simpledb/tests/engine_test.php||search/engine/simpledb/tests/engine_test.php",
          "search/engine/simpledb/version.php||search/engine/simpledb/version.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/plugins.php||admin/settings/plugins.php": [
          "File: admin/settings/plugins.php -> admin/settings/plugins.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:     $temp->add(new admin_setting_heading('searchengineheading', new lang_string('searchengine', 'admin'), ''));",
          "558:     $temp->add(new admin_setting_configselect('searchengine',",
          "560:     $temp->add(new admin_setting_heading('searchoptionsheading', new lang_string('searchoptions', 'admin'), ''));",
          "561:     $temp->add(new admin_setting_configcheckbox('searchindexwhendisabled',",
          "562:             new lang_string('searchindexwhendisabled', 'admin'), new lang_string('searchindexwhendisabled_desc', 'admin'),",
          "",
          "[Removed Lines]",
          "559:                                 new lang_string('selectsearchengine', 'admin'), '', 'solr', $engines));",
          "",
          "[Added Lines]",
          "559:                                 new lang_string('selectsearchengine', 'admin'), '', 'simpledb', $engines));",
          "",
          "---------------"
        ],
        "lib/db/upgrade.php||lib/db/upgrade.php": [
          "File: lib/db/upgrade.php -> lib/db/upgrade.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2020:         upgrade_main_savepoint(true, 2018022800.03);",
          "2021:     }",
          "2023:     return true;",
          "2024: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2023:     if ($oldversion < 2018031600.01) {",
          "2026:         if (empty($CFG->enableglobalsearch) && empty(get_config('search_solr', 'indexname'))) {",
          "2027:             set_config('searchengine', 'simpledb');",
          "2028:         }",
          "2029:         upgrade_main_savepoint(true, 2018031600.01);",
          "2030:     }",
          "",
          "---------------"
        ],
        "lib/dml/mariadb_native_moodle_database.php||lib/dml/mariadb_native_moodle_database.php": [
          "File: lib/dml/mariadb_native_moodle_database.php -> lib/dml/mariadb_native_moodle_database.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:         }",
          "108:         return true;",
          "109:     }",
          "110: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     public function is_fulltext_search_supported() {",
          "117:         $info = $this->get_server_info();",
          "119:         if (version_compare($info['version'], '10.0.5', '>=')) {",
          "120:             return true;",
          "121:         }",
          "122:         return false;",
          "123:     }",
          "",
          "---------------"
        ],
        "lib/dml/moodle_database.php||lib/dml/moodle_database.php": [
          "File: lib/dml/moodle_database.php -> lib/dml/moodle_database.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2687:     public function perf_get_queries_time() {",
          "2688:         return $this->queriestime;",
          "2689:     }",
          "2690: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2696:     public function is_fulltext_search_supported() {",
          "2698:         return false;",
          "2699:     }",
          "",
          "---------------"
        ],
        "lib/dml/mysqli_native_moodle_database.php||lib/dml/mysqli_native_moodle_database.php": [
          "File: lib/dml/mysqli_native_moodle_database.php -> lib/dml/mysqli_native_moodle_database.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1989:             $this->change_database_structure(\"ALTER TABLE {$prefix}$tablename $rowformat\");",
          "1990:         }",
          "1991:     }",
          "1992: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1998:     public function is_fulltext_search_supported() {",
          "1999:         $info = $this->get_server_info();",
          "2001:         if (version_compare($info['version'], '5.6.4', '>=')) {",
          "2002:             return true;",
          "2003:         }",
          "2004:         return false;",
          "2005:     }",
          "",
          "---------------"
        ],
        "lib/dml/pgsql_native_moodle_database.php||lib/dml/pgsql_native_moodle_database.php": [
          "File: lib/dml/pgsql_native_moodle_database.php -> lib/dml/pgsql_native_moodle_database.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1497:     private function trim_quotes($str) {",
          "1498:         return trim(trim($str), \"'\\\"\");",
          "1499:     }",
          "1500: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1506:     public function is_fulltext_search_supported() {",
          "1507:         return true;",
          "1508:     }",
          "",
          "---------------"
        ],
        "lib/dml/sqlsrv_native_moodle_database.php||lib/dml/sqlsrv_native_moodle_database.php": [
          "File: lib/dml/sqlsrv_native_moodle_database.php -> lib/dml/sqlsrv_native_moodle_database.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1586:         $result = sqlsrv_rollback($this->sqlsrv);",
          "1587:         $this->query_end($result);",
          "1588:     }",
          "1589: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1595:     public function is_fulltext_search_supported() {",
          "1596:         global $CFG;",
          "1598:         $sql = \"SELECT FULLTEXTSERVICEPROPERTY('IsFullTextInstalled')\";",
          "1599:         $this->query_start($sql, null, SQL_QUERY_AUX);",
          "1600:         $result = sqlsrv_query($this->sqlsrv, $sql);",
          "1601:         $this->query_end($result);",
          "1602:         if ($result) {",
          "1603:             if ($row = sqlsrv_fetch_array($result)) {",
          "1604:                 $property = (bool)reset($row);",
          "1605:             }",
          "1606:         }",
          "1607:         $this->free_result($result);",
          "1609:         return !empty($property);",
          "1610:     }",
          "",
          "---------------"
        ],
        "search/classes/document.php||search/classes/document.php": [
          "File: search/classes/document.php -> search/classes/document.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:     public static function format_string_for_engine($string) {",
          "412:     }",
          "",
          "[Removed Lines]",
          "411:         return fix_utf8($string);",
          "",
          "[Added Lines]",
          "410:         return $string;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:     public static function format_text_for_engine($text) {",
          "426:     }",
          "",
          "[Removed Lines]",
          "425:         return fix_utf8($text);",
          "",
          "[Added Lines]",
          "423:         return $text;",
          "",
          "---------------"
        ],
        "search/engine/simpledb/classes/engine.php||search/engine/simpledb/classes/engine.php": [
          "File: search/engine/simpledb/classes/engine.php -> search/engine/simpledb/classes/engine.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: class engine extends \\core_search\\engine {",
          "47:         global $DB, $USER;",
          "",
          "[Removed Lines]",
          "46:     public function execute_query($filters, $usercontexts) {",
          "",
          "[Added Lines]",
          "43:     protected $totalresults = null;",
          "54:     public function execute_query($filters, $usercontexts, $limit = 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:             throw new \\core_search\\engine_exception('engineserverstatus', 'search');",
          "55:         }",
          "58:         $params = array();",
          "",
          "[Removed Lines]",
          "57:         $sql = 'SELECT * FROM {search_simpledb_index} WHERE ';",
          "",
          "[Added Lines]",
          "65:         if (empty($limit)) {",
          "66:             $limit = \\core_search\\manager::MAX_RESULTS;",
          "67:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:             $allcontexts = array();",
          "73:             foreach ($usercontexts as $areaid => $areacontexts) {",
          "76:                     continue;",
          "77:                 }",
          "",
          "[Removed Lines]",
          "74:                 if (!empty($data->areaid) && ($areaid !== $data->areaid)) {",
          "",
          "[Added Lines]",
          "85:                 if (!empty($data->areaids) && !in_array($areaid, $data->areaids)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:         }",
          "103:             $ands[] = 'areaid ' . $conditionsql;",
          "104:             $params = array_merge($params, $conditionparams);",
          "105:         }",
          "107:         if (!empty($data->title)) {",
          "111:         }",
          "113:         if (!empty($data->timestart)) {",
          "",
          "[Removed Lines]",
          "101:         if (!empty($data->areaid)) {",
          "102:             list($conditionsql, $conditionparams) = $DB->get_in_or_equal($data->areaid);",
          "108:             list($conditionsql, $conditionparams) = $DB->get_in_or_equal($data->title);",
          "109:             $ands[] = 'title ' . $conditionsql;",
          "110:             $params = array_merge($params, $conditionparams);",
          "",
          "[Added Lines]",
          "112:         if (!empty($data->areaids)) {",
          "113:             list($conditionsql, $conditionparams) = $DB->get_in_or_equal($data->areaids);",
          "119:             $ands[] = $DB->sql_like('title', '?', false, false);",
          "120:             $params[] = $data->title;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:         }",
          "156:         }",
          "167:         $docs = array();",
          "169:             if (!$searcharea = $this->get_search_area($docdata->areaid)) {",
          "170:                 continue;",
          "171:             }",
          "",
          "[Removed Lines]",
          "123:         switch ($DB->get_dbfamily()) {",
          "124:             case 'postgres':",
          "125:                 $ands[] = \"(\" .",
          "126:                     \"to_tsvector('simple', title) @@ plainto_tsquery(?) OR \".",
          "127:                     \"to_tsvector('simple', content) @@ plainto_tsquery(?) OR \".",
          "128:                     \"to_tsvector('simple', description1) @@ plainto_tsquery(?) OR \".",
          "129:                     \"to_tsvector('simple', description2) @@ plainto_tsquery(?)\".",
          "130:                     \")\";",
          "131:                 $params[] = $data->q;",
          "132:                 $params[] = $data->q;",
          "133:                 $params[] = $data->q;",
          "134:                 $params[] = $data->q;",
          "135:                 break;",
          "136:             case 'mysql':",
          "137:                 $ands[] = \"MATCH (title, content, description1, description2) AGAINST (?)\";",
          "138:                 $params[] = $data->q;",
          "139:                 break;",
          "140:             case 'mssql':",
          "141:                 $ands[] = \"CONTAINS ((title, content, description1, description2), ?)\";",
          "142:                 $params[] = $data->q;",
          "143:                 break;",
          "144:             default:",
          "145:                 $ands[] = '(' .",
          "146:                     $DB->sql_like('title', '?', false, false) . ' OR ' .",
          "147:                     $DB->sql_like('content', '?', false, false) . ' OR ' .",
          "148:                     $DB->sql_like('description1', '?', false, false) . ' OR ' .",
          "149:                     $DB->sql_like('description2', '?', false, false) .",
          "150:                     ')';",
          "151:                 $params[] = '%' . $data->q . '%';",
          "152:                 $params[] = '%' . $data->q . '%';",
          "153:                 $params[] = '%' . $data->q . '%';",
          "154:                 $params[] = '%' . $data->q . '%';",
          "155:                 break;",
          "158:         $recordset = $DB->get_recordset_sql($sql . implode(' AND ', $ands), $params, 0, \\core_search\\manager::MAX_RESULTS);",
          "160:         $numgranted = 0;",
          "162:         if (!$recordset->valid()) {",
          "163:             return array();",
          "164:         }",
          "168:         foreach ($recordset as $docdata) {",
          "",
          "[Added Lines]",
          "133:         if (!empty($data->q)) {",
          "134:             switch ($DB->get_dbfamily()) {",
          "135:                 case 'postgres':",
          "136:                     $ands[] = \"(\" .",
          "137:                         \"to_tsvector('simple', title) @@ plainto_tsquery('simple', ?) OR \".",
          "138:                         \"to_tsvector('simple', content) @@ plainto_tsquery('simple', ?) OR \".",
          "139:                         \"to_tsvector('simple', description1) @@ plainto_tsquery('simple', ?) OR \".",
          "140:                         \"to_tsvector('simple', description2) @@ plainto_tsquery('simple', ?)\".",
          "141:                         \")\";",
          "142:                     $params[] = $data->q;",
          "143:                     $params[] = $data->q;",
          "144:                     $params[] = $data->q;",
          "145:                     $params[] = $data->q;",
          "146:                     break;",
          "147:                 case 'mysql':",
          "148:                     if ($DB->is_fulltext_search_supported()) {",
          "149:                         $ands[] = \"MATCH (title, content, description1, description2) AGAINST (?)\";",
          "150:                         $params[] = $data->q;",
          "154:                         if ($data->q === '*') {",
          "155:                             return array();",
          "156:                         }",
          "157:                     } else {",
          "159:                         list($queryand, $queryparams) = $this->get_simple_query($data->q);",
          "160:                         $ands[] = $queryand;",
          "161:                         $params = array_merge($params, $queryparams);",
          "162:                     }",
          "163:                     break;",
          "164:                 case 'mssql':",
          "165:                     if ($DB->is_fulltext_search_supported()) {",
          "166:                         $ands[] = \"CONTAINS ((title, content, description1, description2), ?)\";",
          "170:                         $params[] = '\"' . str_replace('\"', '', $data->q) . '\"';",
          "171:                     } else {",
          "173:                         list($queryand, $queryparams) = $this->get_simple_query($data->q);",
          "174:                         $ands[] = $queryand;",
          "175:                         $params = array_merge($params, $queryparams);",
          "176:                     }",
          "177:                     break;",
          "178:                 default:",
          "179:                     list($queryand, $queryparams) = $this->get_simple_query($data->q);",
          "180:                     $ands[] = $queryand;",
          "181:                     $params = array_merge($params, $queryparams);",
          "182:                     break;",
          "183:             }",
          "187:         $documents = $DB->get_records_select('search_simpledb_index', implode(' AND ', $ands), $params, '', '*', 0, $limit);",
          "190:         $this->totalresults = $DB->count_records_select('search_simpledb_index', implode(' AND ', $ands), $params);",
          "192:         $numgranted = 0;",
          "196:         foreach ($documents as $docdata) {",
          "197:             if ($docdata->owneruserid != \\core_search\\manager::NO_OWNER_ID && $docdata->owneruserid != $USER->id) {",
          "199:                 continue;",
          "200:             }",
          "203:                 $this->totalresults--;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178:             switch ($access) {",
          "179:                 case \\core_search\\manager::ACCESS_DELETED:",
          "180:                     $this->delete_by_id($docdata->id);",
          "181:                     break;",
          "182:                 case \\core_search\\manager::ACCESS_DENIED:",
          "183:                     break;",
          "184:                 case \\core_search\\manager::ACCESS_GRANTED:",
          "185:                     $numgranted++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:                     $this->totalresults--;",
          "218:                     $this->totalresults--;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "188:             }",
          "193:                 break;",
          "194:             }",
          "195:         }",
          "198:         return $docs;",
          "199:     }",
          "",
          "[Removed Lines]",
          "191:             if ($numgranted >= \\core_search\\manager::MAX_RESULTS) {",
          "192:                 $docs = array_slice($docs, 0, \\core_search\\manager::MAX_RESULTS, true);",
          "196:         $recordset->close();",
          "",
          "[Added Lines]",
          "227:             if ($numgranted >= $limit) {",
          "228:                 $docs = array_slice($docs, 0, $limit, true);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "228:         } catch (\\dml_exception $ex) {",
          "229:             debugging('dml error while trying to insert document with id ' . $doc->docid . ': ' . $ex->getMessage(),",
          "230:                 DEBUG_DEVELOPER);",
          "231:         }",
          "233:         return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:             return false;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "281:     public function is_installed() {",
          "282:         return true;",
          "283:     }",
          "284: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "328:     public function get_query_total_count() {",
          "329:         if (!is_null($this->totalresults)) {",
          "331:             return \\core_search\\manager::MAX_RESULTS;",
          "332:         }",
          "334:         return $this->totalresults;",
          "335:     }",
          "343:     protected function get_simple_query($q) {",
          "344:         global $DB;",
          "346:         $sql = '(' .",
          "347:             $DB->sql_like('title', '?', false, false) . ' OR ' .",
          "348:             $DB->sql_like('content', '?', false, false) . ' OR ' .",
          "349:             $DB->sql_like('description1', '?', false, false) . ' OR ' .",
          "350:             $DB->sql_like('description2', '?', false, false) .",
          "351:             ')';",
          "352:         $params = array(",
          "353:             '%' . $q . '%',",
          "354:             '%' . $q . '%',",
          "355:             '%' . $q . '%',",
          "356:             '%' . $q . '%'",
          "357:         );",
          "358:         return array($sql, $params);",
          "359:     }",
          "",
          "---------------"
        ],
        "search/engine/simpledb/db/install.php||search/engine/simpledb/db/install.php": [
          "File: search/engine/simpledb/db/install.php -> search/engine/simpledb/db/install.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die;",
          "27: function xmldb_search_simpledb_install() {",
          "28:     global $DB;",
          "30:     switch ($DB->get_dbfamily()) {",
          "31:         case 'postgres':",
          "37:             break;",
          "38:         case 'mysql':",
          "41:             break;",
          "42:         case 'mssql':",
          "47:             break;",
          "48:     }",
          "49: }",
          "",
          "[Removed Lines]",
          "33:             $DB->execute(\"CREATE INDEX psql_search_title ON {search_simpledb_index} USING gin(to_tsvector('simple', title))\");",
          "34:             $DB->execute(\"CREATE INDEX psql_search_content ON {search_simpledb_index} USING gin(to_tsvector('simple', content))\");",
          "35:             $DB->execute(\"CREATE INDEX psql_search_description1 ON {search_simpledb_index} USING gin(to_tsvector('simple', description1))\");",
          "36:             $DB->execute(\"CREATE INDEX psql_search_description2 ON {search_simpledb_index} USING gin(to_tsvector('simple', description2))\");",
          "39:             $DB->execute(\"CREATE FULLTEXT INDEX mysql_search_index",
          "40:                           ON {search_simpledb_index} (title, content, description1, description2)\");",
          "44:             $DB->execute(\"CREATE FULLTEXT CATALOG {search_simpledb_catalog}\");",
          "45:             $DB->execute(\"CREATE FULLTEXT INDEX ON {search_simpledb_index} (title, content, description1, description2)",
          "46:                           KEY INDEX {searsimpinde_id_pk} ON {search_simpledb_catalog}\");",
          "",
          "[Added Lines]",
          "40:             $DB->execute(\"CREATE INDEX {search_simpledb_title} ON {search_simpledb_index} \" .",
          "41:                 \"USING gin(to_tsvector('simple', title))\");",
          "42:             $DB->execute(\"CREATE INDEX {search_simpledb_content} ON {search_simpledb_index} \" .",
          "43:                 \"USING gin(to_tsvector('simple', content))\");",
          "44:             $DB->execute(\"CREATE INDEX {search_simpledb_description1} ON {search_simpledb_index} \" .",
          "45:                 \"USING gin(to_tsvector('simple', description1))\");",
          "46:             $DB->execute(\"CREATE INDEX {search_simpledb_description2} ON {search_simpledb_index} \" .",
          "47:                 \"USING gin(to_tsvector('simple', description2))\");",
          "50:             if ($DB->is_fulltext_search_supported()) {",
          "51:                 $DB->execute(\"CREATE FULLTEXT INDEX {search_simpledb_index_index}",
          "52:                               ON {search_simpledb_index} (title, content, description1, description2)\");",
          "53:             }",
          "56:             if ($DB->is_fulltext_search_supported()) {",
          "58:                 $catalogname = $DB->get_prefix() . 'search_simpledb_catalog';",
          "59:                 if (!$DB->record_exists_sql('SELECT * FROM sys.fulltext_catalogs WHERE name = ?', array($catalogname))) {",
          "60:                     $DB->execute(\"CREATE FULLTEXT CATALOG {search_simpledb_catalog} WITH ACCENT_SENSITIVITY=OFF\");",
          "61:                 }",
          "63:                 if (defined('PHPUNIT_UTIL') and PHPUNIT_UTIL) {",
          "65:                     $changetracking = 'MANUAL';",
          "66:                 } else {",
          "67:                     $changetracking = 'AUTO';",
          "68:                 }",
          "69:                 $DB->execute(\"CREATE FULLTEXT INDEX ON {search_simpledb_index} (title, content, description1, description2)",
          "70:                               KEY INDEX {searsimpinde_id_pk} ON {search_simpledb_catalog} WITH CHANGE_TRACKING $changetracking\");",
          "71:             }",
          "",
          "---------------"
        ],
        "search/engine/simpledb/db/uninstall.php||search/engine/simpledb/db/uninstall.php": [
          "File: search/engine/simpledb/db/uninstall.php -> search/engine/simpledb/db/uninstall.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die;",
          "27: function xmldb_search_simpledb_uninstall() {",
          "28:     global $DB;",
          "30:     switch ($DB->get_dbfamily()) {",
          "31:         case 'mssql':",
          "33:             break;",
          "34:     }",
          "35: }",
          "",
          "[Removed Lines]",
          "32:             $DB->execute(\"DROP FULLTEXT CATALOG {search_simpledb_catalog}\");",
          "",
          "[Added Lines]",
          "38:         case 'postgres':",
          "39:             $DB->execute(\"DROP INDEX {search_simpledb_title}\");",
          "40:             $DB->execute(\"DROP INDEX {search_simpledb_content}\");",
          "41:             $DB->execute(\"DROP INDEX {search_simpledb_description1}\");",
          "42:             $DB->execute(\"DROP INDEX {search_simpledb_description2}\");",
          "43:             break;",
          "44:         case 'mysql':",
          "45:             if ($DB->is_fulltext_search_supported()) {",
          "46:                 $DB->execute(\"ALTER TABLE {search_simpledb_index} DROP INDEX {search_simpledb_index_index}\");",
          "47:             }",
          "48:             break;",
          "50:             if ($DB->is_fulltext_search_supported()) {",
          "51:                 $DB->execute(\"DROP FULLTEXT CATALOG {search_simpledb_catalog}\");",
          "52:             }",
          "",
          "---------------"
        ],
        "search/engine/simpledb/tests/engine_test.php||search/engine/simpledb/tests/engine_test.php": [
          "File: search/engine/simpledb/tests/engine_test.php -> search/engine/simpledb/tests/engine_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     protected $search = null;",
          "47:     public function setUp() {",
          "48:         $this->resetAfterTest();",
          "49:         set_config('enableglobalsearch', true);",
          "57:     }",
          "59:     public function test_index() {",
          "60:         global $DB;",
          "65:         $this->assertTrue($this->search->index());",
          "",
          "[Removed Lines]",
          "53:         $searchengine = new \\search_simpledb\\engine();",
          "54:         $this->search = testable_core_search::instance($searchengine);",
          "55:         $areaid = \\core_search\\manager::generate_areaid('core_mocksearch', 'role_capabilities');",
          "56:         $this->search->add_search_area($areaid, new core_mocksearch\\search\\role_capabilities());",
          "62:         $noneditingteacherid = $DB->get_field('role', 'id', array('shortname' => 'teacher'));",
          "",
          "[Added Lines]",
          "50:     protected $engine = null;",
          "55:     protected $generator = null;",
          "65:         if ($this->requires_manual_index_update()) {",
          "67:             $this->preventResetByRollback();",
          "68:         }",
          "75:         $this->engine = new \\search_simpledb\\engine();",
          "76:         $this->search = testable_core_search::instance($this->engine);",
          "77:         $areaid = \\core_search\\manager::generate_areaid('core_mocksearch', 'mock_search_area');",
          "78:         $this->search->add_search_area($areaid, new core_mocksearch\\search\\mock_search_area());",
          "80:         $this->generator = self::getDataGenerator()->get_plugin_generator('core_search');",
          "81:         $this->generator->setup();",
          "83:         $this->setAdminUser();",
          "84:     }",
          "91:     public function tearDown() {",
          "93:         if ($this->generator) {",
          "95:             $this->generator->teardown();",
          "96:             $this->generator = null;",
          "97:         }",
          "108:         $record = new \\stdClass();",
          "109:         $record->timemodified = time() - 1;",
          "110:         $this->generator->create_record($record);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:         sleep(1);",
          "69:         $this->assertFalse($this->search->index());",
          "75:         $this->assertTrue($this->search->index());",
          "",
          "[Removed Lines]",
          "71:         assign_capability('moodle/course:renameroles', CAP_ALLOW, $noneditingteacherid, context_system::instance()->id);",
          "72:         accesslib_clear_all_caches_for_unit_testing();",
          "",
          "[Added Lines]",
          "119:         $this->generator->create_record();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:     public function test_search() {",
          "84:         global $USER, $DB;",
          "98:         $this->search->index();",
          "100:         $querydata = new stdClass();",
          "101:         $querydata->q = 'message';",
          "",
          "[Removed Lines]",
          "86:         $this->setAdminUser();",
          "88:         $noneditingteacherid = $DB->get_field('role', 'id', array('shortname' => 'teacher'));",
          "90:         $this->search->index();",
          "93:         $rolecaps = $DB->get_records('role_capabilities', array('capability' => 'moodle/course:renameroles'));",
          "94:         $rolecap = reset($rolecaps);",
          "95:         $rolecap->timemodified = time();",
          "96:         $DB->update_record('role_capabilities', $rolecap);",
          "",
          "[Added Lines]",
          "133:         $this->generator->create_record();",
          "134:         $record = new \\stdClass();",
          "135:         $record->title = \"Special title\";",
          "136:         $this->generator->create_record($record);",
          "139:         $this->update_index();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:         $this->assertEquals($USER->id, $results[0]->get('userid'));",
          "111:         $this->assertCount(0, $this->search->search($querydata));",
          "112:         $querydata->q = 'message';",
          "114:         sleep(1);",
          "115:         $beforeadding = time();",
          "116:         sleep(1);",
          "119:         $this->search->index();",
          "122:         $querydata->timestart = $beforeadding;",
          "126:         unset($querydata->timestart);",
          "127:         $querydata->timeend = $beforeadding;",
          "131:         unset($querydata->timeend);",
          "133:         $this->assertCount(1, $this->search->search($querydata));",
          "",
          "[Removed Lines]",
          "107:         $this->assertEquals(\\context_system::instance()->id, $results[0]->get('contextid'));",
          "110:         $querydata->q = \\core_search\\manager::generate_areaid('core_mocksearch', 'role_capabilities');",
          "117:         assign_capability('moodle/course:renameroles', CAP_ALLOW, $noneditingteacherid, context_system::instance()->id);",
          "118:         accesslib_clear_all_caches_for_unit_testing();",
          "123:         $this->assertCount(2, $this->search->search($querydata));",
          "128:         $this->assertCount(1, $this->search->search($querydata));",
          "132:         $querydata->title = 'moodle/course:renameroles roleid 1';",
          "",
          "[Added Lines]",
          "148:         $this->assertEquals(\\context_course::instance(SITEID)->id, $results[0]->get('contextid'));",
          "151:         $querydata->q = \\core_search\\manager::generate_areaid('core_mocksearch', 'mock_search_area');",
          "158:         $this->generator->create_record();",
          "160:         $this->update_index();",
          "164:         $this->assertCount(1, $this->search->search($querydata));",
          "169:         $this->assertCount(2, $this->search->search($querydata));",
          "173:         $querydata->title = 'Special title';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:         $querydata->courseids = array(SITEID);",
          "141:         $this->assertCount(3, $this->search->search($querydata));",
          "145:         $this->search->index(true);",
          "146:         unset($querydata->title);",
          "148:         $this->assertCount(0, $this->search->search($querydata));",
          "149:     }",
          "151:     public function test_delete() {",
          "152:         $this->search->index();",
          "154:         $querydata = new stdClass();",
          "155:         $querydata->q = 'message';",
          "157:         $this->assertCount(2, $this->search->search($querydata));",
          "160:         $this->search->delete_index($areaid);",
          "161:         $this->assertCount(0, $this->search->search($querydata));",
          "162:     }",
          "164:     public function test_alloweduserid() {",
          "177:         $doc = $area->get_document($record);",
          "180:         $users = array();",
          "181:         $users[] = $this->getDataGenerator()->create_user();",
          "",
          "[Removed Lines]",
          "144:         $DB->delete_records('role_capabilities', array('capability' => 'moodle/course:renameroles'));",
          "147:         $querydata->q = '*renameroles*';",
          "159:         $areaid = \\core_search\\manager::generate_areaid('core_mocksearch', 'role_capabilities');",
          "165:         $engine = $this->search->get_engine();",
          "166:         $area = new core_mocksearch\\search\\role_capabilities();",
          "169:         $recordset = $area->get_recordset_by_timestamp();",
          "170:         foreach ($recordset as $r) {",
          "171:             $record = $r;",
          "172:             break;",
          "173:         }",
          "174:         $recordset->close();",
          "178:         $engine->add_document($doc);",
          "",
          "[Added Lines]",
          "185:         unset($querydata->courseids);",
          "186:         $forumpostareaid = \\core_search\\manager::generate_areaid('mod_forum', 'post');",
          "187:         $mockareaid = \\core_search\\manager::generate_areaid('core_mocksearch', 'mock_search_area');",
          "189:         $querydata->areaids = array($forumpostareaid);",
          "190:         $this->assertCount(0, $this->search->search($querydata));",
          "192:         $querydata->areaids = array($forumpostareaid, $mockareaid);",
          "193:         $this->assertCount(3, $this->search->search($querydata));",
          "195:         $querydata->areaids = array($mockareaid);",
          "196:         $this->assertCount(3, $this->search->search($querydata));",
          "198:         $querydata->areaids = array();",
          "199:         $this->assertCount(3, $this->search->search($querydata));",
          "202:         $this->generator->delete_all();",
          "204:         $this->update_index();",
          "206:         $querydata->q = '';",
          "217:         $this->generator->create_record();",
          "218:         $this->generator->create_record();",
          "220:         $this->update_index();",
          "227:         $areaid = \\core_search\\manager::generate_areaid('core_mocksearch', 'mock_search_area');",
          "229:         $this->update_index();",
          "240:         $area = new core_mocksearch\\search\\mock_search_area();",
          "242:         $record = $this->generator->create_record();",
          "246:         $this->engine->add_document($doc);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "190:             $doc = $area->get_document($record);",
          "191:             $doc->set('id', $originalid.'-'.$user->id);",
          "192:             $doc->set('owneruserid', $user->id);",
          "194:         }",
          "198:         $querydata = new stdClass();",
          "199:         $querydata->q = 'message';",
          "",
          "[Removed Lines]",
          "193:             $engine->add_document($doc);",
          "196:         $engine->area_index_complete($area->get_area_id());",
          "",
          "[Added Lines]",
          "261:             $this->engine->add_document($doc);",
          "263:         $this->update_index();",
          "265:         $this->engine->area_index_complete($area->get_area_id());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "239:     }",
          "241:     public function test_delete_by_id() {",
          "243:         $this->search->index();",
          "246:         $querydata = new stdClass();",
          "250:         $results = $this->search->search($querydata);",
          "251:         $this->assertCount(2, $results);",
          "253:         $first = reset($results);",
          "254:         $deleteid = $first->get('id');",
          "259:         $results = $this->search->search($querydata);",
          "",
          "[Removed Lines]",
          "244:         $engine = $this->search->get_engine();",
          "249:         $querydata->q = 'moodle/course:renameroles';",
          "256:         $engine->delete_by_id($deleteid);",
          "",
          "[Added Lines]",
          "312:         $this->generator->create_record();",
          "313:         $this->generator->create_record();",
          "315:         $this->update_index();",
          "320:         $querydata->q = 'message';",
          "327:         $this->engine->delete_by_id($deleteid);",
          "328:         $this->update_index();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "261:         $result = reset($results);",
          "262:         $this->assertNotEquals($deleteid, $result->get('id'));",
          "263:     }",
          "264: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:     private function update_index() {",
          "343:         global $DB;",
          "345:         if (!$this->requires_manual_index_update()) {",
          "346:             return;",
          "347:         }",
          "349:         $DB->execute(\"ALTER FULLTEXT INDEX ON t_search_simpledb_index START UPDATE POPULATION\");",
          "351:         $catalogname = $DB->get_prefix() . 'search_simpledb_catalog';",
          "352:         $retries = 0;",
          "353:         do {",
          "355:             usleep(200000);",
          "357:             $record = $DB->get_record_sql(\"SELECT FULLTEXTCATALOGPROPERTY(cat.name, 'PopulateStatus') AS [PopulateStatus]",
          "358:                                              FROM sys.fulltext_catalogs AS cat",
          "359:                                             WHERE cat.name = ?\", array($catalogname));",
          "360:             $retries++;",
          "362:         } while ($retries < 100 && $record->populatestatus != '0');",
          "364:         if ($retries === 100) {",
          "366:             $this->fail('Sorry, your SQL server fulltext search index is too slow.');",
          "367:         }",
          "368:     }",
          "375:     private function requires_manual_index_update() {",
          "376:         global $DB;",
          "377:         return ($DB->get_dbfamily() === 'mssql' && $DB->is_fulltext_search_supported());",
          "378:     }",
          "",
          "---------------"
        ],
        "search/engine/simpledb/version.php||search/engine/simpledb/version.php": [
          "File: search/engine/simpledb/version.php -> search/engine/simpledb/version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: defined('MOODLE_INTERNAL') || die();",
          "29: $plugin->component = 'search_simpledb';",
          "",
          "[Removed Lines]",
          "27: $plugin->version = 2016030100;",
          "28: $plugin->requires = 2015111000;",
          "",
          "[Added Lines]",
          "27: $plugin->version = 2017072700;",
          "28: $plugin->requires = 2017072700;",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2018031600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2018031600.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26a1bee8636fa55b77549da33951beca7e65b61b",
      "candidate_info": {
        "commit_hash": "26a1bee8636fa55b77549da33951beca7e65b61b",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/26a1bee8636fa55b77549da33951beca7e65b61b",
        "files": [
          "version.php"
        ],
        "message": "weekly release 3.7.3+",
        "before_after_code_files": [
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "38: $branch   = '37';                       // This version's branch.",
          "39: $maturity = MATURITY_STABLE;             // This version's maturity level.",
          "",
          "[Removed Lines]",
          "32: $version  = 2019052003.02;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.3+ (Build: 20191122)'; // Human-friendly version name",
          "",
          "[Added Lines]",
          "32: $version  = 2019052003.03;              // 20190520      = branching date YYYYMMDD - do not modify!",
          "36: $release  = '3.7.3+ (Build: 20191129)'; // Human-friendly version name",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "360755cc5635566e9d033fe3d6cdb9efbd7efb09",
      "candidate_info": {
        "commit_hash": "360755cc5635566e9d033fe3d6cdb9efbd7efb09",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/360755cc5635566e9d033fe3d6cdb9efbd7efb09",
        "files": [
          "lang/en/role.php",
          "lib/db/access.php",
          "version.php"
        ],
        "message": "MDL-66609 core_h5p: New capability h5p:setdisplayoptions",
        "before_after_code_files": [
          "lang/en/role.php||lang/en/role.php",
          "lib/db/access.php||lib/db/access.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ],
          "candidate": [
            "lib/db/access.php||lib/db/access.php",
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "lang/en/role.php||lang/en/role.php": [
          "File: lang/en/role.php -> lang/en/role.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: $string['grade:view'] = 'View own grades';",
          "261: $string['grade:viewall'] = 'View grades of other users';",
          "262: $string['grade:viewhidden'] = 'View hidden grades for owner';",
          "263: $string['highlightedcellsshowdefault'] = 'The permissions highlighted in the table below are the defaults for the role archetype currently selected above.';",
          "264: $string['highlightedcellsshowinherit'] = 'The highlighted cells in the table below show the permission (if any) that will be inherited. Apart from the capabilities whose permission you actually want to alter, you should leave everything set to Inherit.';",
          "265: $string['checkglobalpermissions'] = 'Check system permissions';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263: $string['h5p:setdisplayoptions'] = 'Set the display options to an H5P content';",
          "",
          "---------------"
        ],
        "lib/db/access.php||lib/db/access.php": [
          "File: lib/db/access.php -> lib/db/access.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2430:             'user' => CAP_ALLOW",
          "2431:         )",
          "2432:     ),",
          "2433: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2435:     'moodle/h5p:setdisplayoptions' => array(",
          "2436:         'captype' => 'write',",
          "2437:         'contextlevel' => CONTEXT_MODULE,",
          "2438:         'archetypes' => array(",
          "2439:             'editingteacher' => CAP_ALLOW,",
          "2440:         )",
          "2441:     ),",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019102500.01;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019102500.02;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7e4481e9875ff79e74b90e79d23c726f730e178",
      "candidate_info": {
        "commit_hash": "d7e4481e9875ff79e74b90e79d23c726f730e178",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d7e4481e9875ff79e74b90e79d23c726f730e178",
        "files": [
          "admin/settings/courses.php",
          "admin/settings/server.php",
          "backup/backup.php",
          "backup/controller/backup_controller.class.php",
          "backup/moodle2/backup_root_task.class.php",
          "backup/util/dbops/backup_plan_dbops.class.php",
          "backup/util/dbops/restore_dbops.class.php",
          "backup/util/helper/backup_cron_helper.class.php",
          "backup/util/helper/backup_helper.class.php",
          "backup/util/ui/backup_ui_stage.class.php",
          "backup/util/ui/renderer.php",
          "lang/en/admin.php",
          "lang/en/backup.php",
          "lib/filestorage/file_storage.php",
          "lib/filestorage/file_system.php",
          "lib/filestorage/file_system_filedir.php",
          "version.php"
        ],
        "message": "MDL-35773 Backup: API should have option to not backup files\n\nAllow both UI and automated backups to be created without\nincluding files.  Instead include only file references.\nThis is essentially implementing \"SAMESITE\" to backup files\ninstead of only for import and export functionality.\nA new backup setting to include files (defaults to yes)\nhas been included.\n\nThe restore process will also look for and attempt to\nrestore files from the trashdir as part of restoring\nbackups.  Additionally to support this process the\nammount of time files are kept in trashdir before they\nare cleaned up via cron is also adjustable via admin\nsetting.",
        "before_after_code_files": [
          "admin/settings/courses.php||admin/settings/courses.php",
          "admin/settings/server.php||admin/settings/server.php",
          "backup/backup.php||backup/backup.php",
          "backup/controller/backup_controller.class.php||backup/controller/backup_controller.class.php",
          "backup/moodle2/backup_root_task.class.php||backup/moodle2/backup_root_task.class.php",
          "backup/util/dbops/backup_plan_dbops.class.php||backup/util/dbops/backup_plan_dbops.class.php",
          "backup/util/dbops/restore_dbops.class.php||backup/util/dbops/restore_dbops.class.php",
          "backup/util/helper/backup_cron_helper.class.php||backup/util/helper/backup_cron_helper.class.php",
          "backup/util/helper/backup_helper.class.php||backup/util/helper/backup_helper.class.php",
          "backup/util/ui/backup_ui_stage.class.php||backup/util/ui/backup_ui_stage.class.php",
          "backup/util/ui/renderer.php||backup/util/ui/renderer.php",
          "lang/en/admin.php||lang/en/admin.php",
          "lang/en/backup.php||lang/en/backup.php",
          "lib/filestorage/file_storage.php||lib/filestorage/file_storage.php",
          "lib/filestorage/file_system.php||lib/filestorage/file_system.php",
          "lib/filestorage/file_system_filedir.php||lib/filestorage/file_system_filedir.php",
          "version.php||version.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.php||version.php"
          ],
          "candidate": [
            "version.php||version.php"
          ]
        }
      },
      "candidate_diff": {
        "admin/settings/courses.php||admin/settings/courses.php": [
          "File: admin/settings/courses.php -> admin/settings/courses.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_role_assignments', new lang_string('generalroleassignments','backup'), new lang_string('configgeneralroleassignments','backup'), array('value'=>1, 'locked'=>0)));",
          "207:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_activities', new lang_string('generalactivities','backup'), new lang_string('configgeneralactivities','backup'), array('value'=>1, 'locked'=>0)));",
          "208:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_blocks', new lang_string('generalblocks','backup'), new lang_string('configgeneralblocks','backup'), array('value'=>1, 'locked'=>0)));",
          "209:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_filters', new lang_string('generalfilters','backup'), new lang_string('configgeneralfilters','backup'), array('value'=>1, 'locked'=>0)));",
          "210:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_comments', new lang_string('generalcomments','backup'), new lang_string('configgeneralcomments','backup'), array('value'=>1, 'locked'=>0)));",
          "211:     $temp->add(new admin_setting_configcheckbox_with_lock('backup/backup_general_badges', new lang_string('generalbadges','backup'), new lang_string('configgeneralbadges','backup'), array('value'=>1,'locked'=>0)));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:     $temp->add(new admin_setting_configcheckbox_with_lock(",
          "210:             'backup/backup_general_files',",
          "211:             new lang_string('generalfiles', 'backup'),",
          "212:             new lang_string('configgeneralfiles', 'backup'),",
          "213:             array('value' => '1', 'locked' => 0)));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "342:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_activities', new lang_string('generalactivities','backup'), new lang_string('configgeneralactivities','backup'), 1));",
          "343:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_blocks', new lang_string('generalblocks','backup'), new lang_string('configgeneralblocks','backup'), 1));",
          "344:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_filters', new lang_string('generalfilters','backup'), new lang_string('configgeneralfilters','backup'), 1));",
          "345:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_comments', new lang_string('generalcomments','backup'), new lang_string('configgeneralcomments','backup'), 1));",
          "346:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_badges', new lang_string('generalbadges','backup'), new lang_string('configgeneralbadges','backup'), 1));",
          "347:     $temp->add(new admin_setting_configcheckbox('backup/backup_auto_calendarevents', new lang_string('generalcalendarevents','backup'), new lang_string('configgeneralcalendarevents','backup'), 1));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350:     $temp->add(new admin_setting_configcheckbox(",
          "351:             'backup/backup_auto_files',",
          "352:             new lang_string('generalfiles', 'backup'),",
          "353:             new lang_string('configgeneralfiles', 'backup'), '1'));",
          "",
          "---------------"
        ],
        "admin/settings/server.php||admin/settings/server.php": [
          "File: admin/settings/server.php -> admin/settings/server.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: $ADMIN->add('server', $temp);",
          "177: $ADMIN->add('server', new admin_externalpage('environment', new lang_string('environment','admin'), \"$CFG->wwwroot/$CFG->admin/environment.php\"));",
          "178: $ADMIN->add('server', new admin_externalpage('phpinfo', new lang_string('phpinfo'), \"$CFG->wwwroot/$CFG->admin/phpinfo.php\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     $temp->add(new admin_setting_configduration('filescleanupperiod',",
          "176:         new lang_string('filescleanupperiod', 'admin'),",
          "177:         new lang_string('filescleanupperiod_help', 'admin'),",
          "178:         86400));",
          "",
          "---------------"
        ],
        "backup/backup.php||backup/backup.php": [
          "File: backup/backup.php -> backup/backup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:     $loghtml = '';",
          "151:     if ($backup->get_stage() == backup_ui::STAGE_FINAL) {",
          "153:         if ($backupmode != backup::MODE_ASYNC) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:         if ($backup->get_setting_value('files') == 0) {",
          "156:             $bc->set_mode(backup::MODE_SAMESITE);",
          "157:             $renderer->set_samesite_notification();",
          "158:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:                     'restoreurl' => $restoreurl->out(),",
          "204:                     'headingident' => 'backup'",
          "205:             );",
          "206:             echo $renderer->render_from_template('core/async_backup_status', $progresssetup);",
          "207:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:             echo $renderer->set_samesite_notification();",
          "",
          "---------------"
        ],
        "backup/controller/backup_controller.class.php||backup/controller/backup_controller.class.php": [
          "File: backup/controller/backup_controller.class.php -> backup/controller/backup_controller.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:         backup_check::check_security($this, false);",
          "186:     }",
          "188:     public function set_status($status) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:     public function set_mode($mode) {",
          "194:         $this->mode = $mode;",
          "195:         $this->set_include_files(); // Need to check if files are included as mode may have changed.",
          "196:         $this->save_controller();",
          "197:         $tbc = self::load_controller($this->backupid);",
          "198:         $this->logger = $tbc->logger; // Wakeup loggers.",
          "199:         $tbc->plan->destroy(); // Clean plan controller structures, keeping logger alive.",
          "200:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410:             $includefiles = false;",
          "411:         }",
          "413:         $this->includefiles = (int) $includefiles;",
          "414:         $this->log(\"setting file inclusion to {$this->includefiles}\", backup::LOG_DEBUG);",
          "415:         return $this->includefiles;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "429:         $backupautofiles = (bool)get_config('backup', 'backup_auto_files');",
          "430:         if ($this->get_mode() === backup::MODE_AUTOMATED && !$backupautofiles) {",
          "431:             $includefiles = false;",
          "432:         }",
          "",
          "---------------"
        ],
        "backup/moodle2/backup_root_task.class.php||backup/moodle2/backup_root_task.class.php": [
          "File: backup/moodle2/backup_root_task.class.php -> backup/moodle2/backup_root_task.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:         $this->add_setting($blocks);",
          "111:         $this->converter_deps($blocks, $converters);",
          "114:         $filters = new backup_generic_setting('filters', base_setting::IS_BOOLEAN, true);",
          "115:         $filters->set_ui(new backup_setting_ui_checkbox($filters, get_string('rootsettingfilters', 'backup')));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:         $files = new backup_generic_setting('files', base_setting::IS_BOOLEAN, true);",
          "115:         $files->set_ui(new backup_setting_ui_checkbox($files, get_string('rootsettingfiles', 'backup')));",
          "116:         $this->add_setting($files);",
          "117:         $this->converter_deps($files, $converters);",
          "",
          "---------------"
        ],
        "backup/util/dbops/backup_plan_dbops.class.php||backup/util/dbops/backup_plan_dbops.class.php": [
          "File: backup/util/dbops/backup_plan_dbops.class.php -> backup/util/dbops/backup_plan_dbops.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:         global $DB;",
          "",
          "[Removed Lines]",
          "204:     public static function get_default_backup_filename($format, $type, $id, $users, $anonymised, $useidonly = false) {",
          "",
          "[Added Lines]",
          "204:     public static function get_default_backup_filename($format, $type, $id, $users, $anonymised,",
          "205:             $useidonly = false, $files = true) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "251:             $info = '-an';",
          "252:         }",
          "254:         return $backupword . '-' . $format . '-' . $type . '-' .",
          "255:                $name . '-' . $date . $info . '.mbz';",
          "256:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256:         if (!$files) {",
          "257:             $info .= '-nf';",
          "258:         }",
          "",
          "---------------"
        ],
        "backup/util/dbops/restore_dbops.class.php||backup/util/dbops/restore_dbops.class.php": [
          "File: backup/util/dbops/restore_dbops.class.php -> backup/util/dbops/restore_dbops.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1055:                     if (!$fs->file_exists($newcontextid, $component, $filearea, $rec->newitemid, $file->filepath, $file->filename)) {",
          "1060:                         if ($foundfiles = $DB->get_records('files', array('contenthash' => $file->contenthash), '', '*', 0, 1)) {",
          "1062:                             $foundfile = reset($foundfiles);",
          "1063:                             $fs->create_file_from_storedfile($file_record, $foundfile->id);",
          "1064:                         } else {",
          "1068:                         }",
          "1069:                     }",
          "1070:                 }",
          "",
          "[Removed Lines]",
          "1066:                             $results[] = self::get_missing_file_result($file);",
          "1067:                             continue;",
          "",
          "[Added Lines]",
          "1066:                             $filesytem = $fs->get_file_system();",
          "1067:                             $restorefile = $file;",
          "1068:                             $restorefile->contextid = $newcontextid;",
          "1069:                             $storedfile = new stored_file($fs, $restorefile);",
          "1070:                             $trashrecovery = $filesytem->recover_file($storedfile, true);",
          "1071:                             if (!$trashrecovery) {",
          "1073:                                 $results[] = self::get_missing_file_result($file);",
          "1074:                                 continue;",
          "1075:                             }",
          "",
          "---------------"
        ],
        "backup/util/helper/backup_cron_helper.class.php||backup/util/helper/backup_cron_helper.class.php": [
          "File: backup/util/helper/backup_cron_helper.class.php -> backup/util/helper/backup_cron_helper.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:             $id = $bc->get_id();",
          "416:             $users = $bc->get_plan()->get_setting('users')->get_value();",
          "417:             $anonymised = $bc->get_plan()->get_setting('anonymize')->get_value();",
          "418:             $bc->get_plan()->get_setting('filename')->set_value(backup_plan_dbops::get_default_backup_filename($format, $type,",
          "421:             $bc->set_status(backup::STATUS_AWAITING);",
          "",
          "[Removed Lines]",
          "419:                     $id, $users, $anonymised));",
          "",
          "[Added Lines]",
          "418:             $incfiles = (bool)$config->backup_auto_files;",
          "420:                     $id, $users, $anonymised, false, $incfiles));",
          "",
          "---------------"
        ],
        "backup/util/helper/backup_helper.class.php||backup/util/helper/backup_helper.class.php": [
          "File: backup/util/helper/backup_helper.class.php -> backup/util/helper/backup_helper.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:             $config = get_config('backup');",
          "288:             $dir = $config->backup_auto_destination;",
          "289:             if ($config->backup_auto_storage == 1 and $dir and is_dir($dir) and is_writable($dir)) {",
          "292:                 if (@rename($filepath, $filedest)) {",
          "293:                     return null;",
          "",
          "[Removed Lines]",
          "290:                 $filedest = $dir.'/'.backup_plan_dbops::get_default_backup_filename($format, $backuptype, $courseid, $hasusers, $isannon, !$config->backup_shortname);",
          "",
          "[Added Lines]",
          "290:                 $filedest = $dir.'/'",
          "291:                         .backup_plan_dbops::get_default_backup_filename(",
          "292:                                 $format,",
          "293:                                 $backuptype,",
          "294:                                 $courseid,",
          "295:                                 $hasusers,",
          "296:                                 $isannon,",
          "297:                                 !$config->backup_shortname,",
          "298:                                 (bool)$config->backup_auto_files);",
          "",
          "---------------"
        ],
        "backup/util/ui/backup_ui_stage.class.php||backup/util/ui/backup_ui_stage.class.php": [
          "File: backup/util/ui/backup_ui_stage.class.php -> backup/util/ui/backup_ui_stage.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:                             $this->ui->get_type(),",
          "156:                             $this->ui->get_controller_id(),",
          "157:                             $this->ui->get_setting_value('users'),",
          "159:                         );",
          "160:                         $setting->set_value($filename);",
          "161:                     }",
          "",
          "[Removed Lines]",
          "158:                             $this->ui->get_setting_value('anonymize')",
          "",
          "[Added Lines]",
          "158:                             $this->ui->get_setting_value('anonymize'),",
          "159:                             false,",
          "160:                             (bool)$this->ui->get_setting_value('files')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:                         $id = $this->ui->get_controller_id();",
          "458:                         $users = $this->ui->get_setting_value('users');",
          "459:                         $anonymised = $this->ui->get_setting_value('anonymize');",
          "461:                     }",
          "462:                     $form->add_setting($setting, $task);",
          "463:                     break;",
          "",
          "[Removed Lines]",
          "460:                         $setting->set_value(backup_plan_dbops::get_default_backup_filename($format, $type, $id, $users, $anonymised));",
          "",
          "[Added Lines]",
          "462:                         $files = (bool)$this->ui->get_setting_value('files');",
          "463:                         $filename = backup_plan_dbops::get_default_backup_filename(",
          "464:                                 $format,",
          "465:                                 $type,",
          "466:                                 $id,",
          "467:                                 $users,",
          "468:                                 $anonymised,",
          "469:                                 false,",
          "470:                                 $files);",
          "471:                         $setting->set_value($filename);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "628:         if (!empty($this->results['missing_files_in_pool'])) {",
          "629:             $output .= $renderer->notification(get_string('missingfilesinpool', 'backup'), 'notifyproblem');",
          "630:         }",
          "631:         $output .= $renderer->notification(get_string('executionsuccess', 'backup'), 'notifysuccess');",
          "632:         $output .= $renderer->continue_button($restorerul);",
          "633:         $output .= $renderer->box_end();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "642:         $output .= $renderer->get_samesite_notification();",
          "",
          "---------------"
        ],
        "backup/util/ui/renderer.php||backup/util/ui/renderer.php": [
          "File: backup/util/ui/renderer.php -> backup/util/ui/renderer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: class core_backup_renderer extends plugin_renderer_base {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     private $samesitenotification = '';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:         return $out;",
          "81:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:     public function set_samesite_notification() {",
          "95:         $this->samesitenotification = $this->output->notification(get_string('samesitenotification', 'backup'), 'info');",
          "96:     }",
          "102:     public function get_samesite_notification() {",
          "103:         return $this->samesitenotification;",
          "104:     }",
          "",
          "---------------"
        ],
        "lang/en/admin.php||lang/en/admin.php": [
          "File: lang/en/admin.php -> lang/en/admin.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "564: $string['extendedusernamechars'] = 'Allow extended characters in usernames';",
          "565: $string['extramemorylimit'] = 'Extra PHP memory limit';",
          "566: $string['fatalsessionautostart'] = '<p>Serious configuration error detected, please notify server administrator.</p><p> To operate properly, Moodle requires that administrator changes PHP settings.</p><p><code>session.auto_start</code> must be set to <code>off</code>.</p><p>This setting is controlled by editing <code>php.ini</code>, Apache/IIS <br />configuration or <code>.htaccess</code> file on the server.</p>';",
          "567: $string['fileconversioncleanuptask'] = 'Cleanup of temporary records for file conversions.';",
          "568: $string['filecreated'] = 'New file created';",
          "569: $string['filestoredin'] = 'Save file into folder :';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567: $string['filescleanupperiod'] = 'Clean trash pool files';",
          "568: $string['filescleanupperiod_help'] = 'How often trash files are removed. These are files that are associated with a context that no longer exists';",
          "",
          "---------------"
        ],
        "lang/en/backup.php||lang/en/backup.php": [
          "File: lang/en/backup.php -> lang/en/backup.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: $string['configgeneralcalendarevents'] = 'Sets the default for including calendar events in a backup.';",
          "128: $string['configgeneralcomments'] = 'Sets the default for including comments in a backup.';",
          "129: $string['configgeneralcompetencies'] = 'Sets the default for including competencies in a backup.';",
          "130: $string['configgeneralfilters'] = 'Sets the default for including filters in a backup.';",
          "131: $string['configgeneralhistories'] = 'Sets the default for including user history within a backup.';",
          "132: $string['configgenerallogs'] = 'If enabled logs will be included in backups by default.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: $string['configgeneralfiles'] = 'Sets the default for including files in a backup.';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202: $string['generalcomments'] = 'Include comments';",
          "203: $string['generalcompetencies'] = 'Include competencies';",
          "204: $string['generalenrolments'] = 'Include enrolment methods';",
          "205: $string['generalfilters'] = 'Include filters';",
          "206: $string['generalhistories'] = 'Include histories';",
          "207: $string['generalgradehistories'] = 'Include histories';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: $string['generalfiles'] = 'Include files';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "328: $string['rootsettingblocks'] = 'Include blocks';",
          "329: $string['rootsettingcompetencies'] = 'Include competencies';",
          "330: $string['rootsettingfilters'] = 'Include filters';",
          "331: $string['rootsettingcomments'] = 'Include comments';",
          "332: $string['rootsettingcalendarevents'] = 'Include calendar events';",
          "333: $string['rootsettinguserscompletion'] = 'Include user completion details';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333: $string['rootsettingfiles'] = 'Include files';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "337: $string['rootsettinggroups'] = 'Include groups and groupings';",
          "338: $string['rootsettingimscc1'] = 'Convert to IMS Common Cartridge 1.0';",
          "339: $string['rootsettingimscc11'] = 'Convert to IMS Common Cartridge 1.1';",
          "340: $string['sitecourseformatwarning'] = 'This is a front page backup, note that they can only be restored on the front page';",
          "341: $string['storagecourseonly'] = 'Course backup filearea';",
          "342: $string['storagecourseandexternal'] = 'Course backup filearea and the specified directory';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "343: $string['samesitenotification'] = 'This backup was created with only references to files, not the files themselves. Restoring will only work on this site.';",
          "",
          "---------------"
        ],
        "lib/filestorage/file_storage.php||lib/filestorage/file_storage.php": [
          "File: lib/filestorage/file_storage.php -> lib/filestorage/file_storage.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "2245:             require_once($CFG->libdir.'/filelib.php');",
          "2247:             mtrace('Cleaning up files from deleted contexts... ', '');",
          "",
          "[Removed Lines]",
          "2244:         if (empty($CFG->fileslastcleanup) or $CFG->fileslastcleanup < time() - 60*60*24) {",
          "",
          "[Added Lines]",
          "2244:         $filescleanupperiod = empty($CFG->filescleanupperiod) ? 86400 : $CFG->filescleanupperiod;",
          "2245:         if (empty($CFG->fileslastcleanup) || ($CFG->fileslastcleanup < time() - $filescleanupperiod)) {",
          "",
          "---------------"
        ],
        "lib/filestorage/file_system.php||lib/filestorage/file_system.php": [
          "File: lib/filestorage/file_system.php -> lib/filestorage/file_system.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:     abstract public function remove_file($contenthash);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:     abstract public function recover_file(stored_file $file, $createrecord=false);",
          "",
          "---------------"
        ],
        "lib/filestorage/file_system_filedir.php||lib/filestorage/file_system_filedir.php": [
          "File: lib/filestorage/file_system_filedir.php -> lib/filestorage/file_system_filedir.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:         return copy($source, $target);",
          "235:     }",
          "244:         $contentfile = $this->get_local_path_from_storedfile($file, false);",
          "246:         if (file_exists($contentfile)) {",
          "",
          "[Removed Lines]",
          "243:     protected function recover_file(stored_file $file) {",
          "",
          "[Added Lines]",
          "247:     protected function create_recovery_record(stored_file $file) {",
          "248:         $filerecord = new stdClass();",
          "250:         $filerecord->contextid = $file->get_contextid();",
          "251:         $filerecord->component = $file->get_component();",
          "252:         $filerecord->filearea  = $file->get_filearea();",
          "253:         $filerecord->itemid    = $file->get_itemid();",
          "254:         $filerecord->filepath  = $file->get_filepath();",
          "255:         $filerecord->filename  = $file->get_filename();",
          "256:         $filerecord->timecreated  = $file->get_timecreated();",
          "257:         $filerecord->timemodified = $file->get_timemodified();",
          "258:         $filerecord->userid       = empty($file->get_userid()) ? null : $file->get_userid();",
          "259:         $filerecord->source       = empty($file->get_source()) ? null : $file->get_source();",
          "260:         $filerecord->author       = empty($file->get_author()) ? null : $file->get_author();",
          "261:         $filerecord->license      = empty($file->get_license()) ? null : $file->get_license();",
          "262:         $filerecord->status       = empty($file->get_status()) ? 0 : $file->get_status();",
          "263:         $filerecord->sortorder    = $file->get_sortorder();",
          "264:         $filerecord->contenthash  = $file->get_contenthash();",
          "266:         return $filerecord;",
          "267:     }",
          "276:     public function recover_file(stored_file $file, $createrecord=false) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:             }",
          "275:         }",
          "280:     }",
          "",
          "[Removed Lines]",
          "279:         return rename($trashfile, $contentfile);",
          "",
          "[Added Lines]",
          "311:         if ($createrecord) {",
          "312:             $recoveryrecord = $this->create_recovery_record($file);",
          "314:             $fs = new file_storage();",
          "315:             $fs->create_file_from_pathname($recoveryrecord, $trashfile);",
          "319:             unlink($trashfile);",
          "321:         } else {",
          "325:             return rename($trashfile, $contentfile);",
          "326:         }",
          "328:         return true;",
          "",
          "---------------"
        ],
        "version.php||version.php": [
          "File: version.php -> version.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: defined('MOODLE_INTERNAL') || die();",
          "",
          "[Removed Lines]",
          "32: $version  = 2019072500.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "[Added Lines]",
          "32: $version  = 2019072600.00;              // YYYYMMDD      = weekly release date of this DEV branch.",
          "",
          "---------------"
        ]
      }
    }
  ]
}