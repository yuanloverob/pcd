{
  "cve_id": "CVE-2020-1936",
  "cve_desc": "A cross-site scripting issue was found in Apache Ambari Views. This was addressed in Apache Ambari 2.7.4.",
  "repo": "apache/ambari",
  "patch_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
  "patch_info": {
    "commit_hash": "a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "repo": "apache/ambari",
    "commit_url": "https://github.com/apache/ambari/pull/3040/commits/a9cfdb9dcce63a3494c07c81ebb2cf8da218a210",
    "files": [
      "ambari-web/app/views/common/breadcrumbs_view.js"
    ],
    "message": "AMBARI-25329. Ambari breadcrumbs xss vulnerability",
    "before_after_code_files": [
      "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js"
    ]
  },
  "patch_diff": {
    "ambari-web/app/views/common/breadcrumbs_view.js||ambari-web/app/views/common/breadcrumbs_view.js": [
      "File: ambari-web/app/views/common/breadcrumbs_view.js -> ambari-web/app/views/common/breadcrumbs_view.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "149:   createLabel() {",
      "150:     let label = this.get('label');",
      "151:     let labelBindingPath = this.get('labelBindingPath');",
      "154:     this.set('formattedLabel', this.labelPostFormat(formattedLabel));",
      "155:   },",
      "",
      "[Removed Lines]",
      "153:     let formattedLabel = labelBindingPath ? App.get(_getLabelPathWithoutApp(labelBindingPath)) : label;",
      "",
      "[Added Lines]",
      "152:     let formattedLabel;",
      "154:     if (labelBindingPath) {",
      "155:       formattedLabel = Ember.Handlebars.Utils.escapeExpression(App.get(_getLabelPathWithoutApp(labelBindingPath)));",
      "156:     } else{",
      "157:       formattedLabel = label;",
      "158:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "216:       }",
      "217:       currentState = currentState.get('parentState');",
      "218:     }",
      "220:     if (items.length) {",
      "221:       items.get('lastObject').setProperties({",
      "222:         disabled: true,",
      "",
      "[Removed Lines]",
      "219:     items = items.reverse().map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "[Added Lines]",
      "227:     items.reverse();",
      "228:     items.slice(1).forEach(item => item.label = Ember.Handlebars.Utils.escapeExpression(item.label));",
      "229:     items = items.map(item => App.BreadcrumbItem.extend(item).create());",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c8fb065f3a4996405e06227f1db64cc3afabdeb",
      "candidate_info": {
        "commit_hash": "8c8fb065f3a4996405e06227f1db64cc3afabdeb",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/8c8fb065f3a4996405e06227f1db64cc3afabdeb",
        "files": [
          "contrib/views/wfmanager/src/main/resources/ui/app/components/spark-action.js",
          "contrib/views/wfmanager/src/main/resources/ui/app/styles/app.less",
          "contrib/views/wfmanager/src/main/resources/ui/app/templates/components/spark-action.hbs"
        ],
        "message": "AMBARI-24491. Workflow Manager should add / string to the beginning of app path (#2524)",
        "before_after_code_files": [
          "contrib/views/wfmanager/src/main/resources/ui/app/components/spark-action.js||contrib/views/wfmanager/src/main/resources/ui/app/components/spark-action.js",
          "contrib/views/wfmanager/src/main/resources/ui/app/styles/app.less||contrib/views/wfmanager/src/main/resources/ui/app/styles/app.less",
          "contrib/views/wfmanager/src/main/resources/ui/app/templates/components/spark-action.hbs||contrib/views/wfmanager/src/main/resources/ui/app/templates/components/spark-action.hbs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "contrib/views/wfmanager/src/main/resources/ui/app/components/spark-action.js||contrib/views/wfmanager/src/main/resources/ui/app/components/spark-action.js": [
          "File: contrib/views/wfmanager/src/main/resources/ui/app/components/spark-action.js -> contrib/views/wfmanager/src/main/resources/ui/app/components/spark-action.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     this.set('isJar', this.get('actionModel.jar') && this.get('actionModel.jar').endsWith('.jar'));",
          "55:     this.sendAction('register','sparkAction', this);",
          "56:   }.on('init'),",
          "57:   initialize : function(){",
          "58:     this.on('fileSelected',function(fileName){",
          "59:       this.set(this.get('filePathModel'), fileName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:   appendNameNode: false,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:       this.$('#collapseOne').collapse('show');",
          "106:     }",
          "107:   }.on('didUpdate'),",
          "108:   actions : {",
          "109:     openFileBrowser(model, context){",
          "110:       if(undefined === context){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:   validateJarPathAndAppend() {",
          "110:       let nameNode = this.get('actionModel.nameNode'), jar = this.get('actionModel.jar');",
          "111:       if(!jar) {",
          "112:         return;",
          "113:       }",
          "114:       this.toggleProperty('appendNameNode');",
          "115:       if(!jar.startsWith('${nameNode}') && this.get('appendNameNode')) {",
          "116:         this.set('actionModel.jar', `${nameNode}${jar}`);",
          "117:       } else if(jar.startsWith('${nameNode}') && this.get('appendNameNode')) {",
          "118:         this.set('actionModel.jar', `${jar}`);",
          "119:       } else {",
          "120:         this.set('actionModel.jar', jar.replace('${nameNode}', ''));",
          "121:       }",
          "122:   },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:     register (name, context){",
          "117:       this.sendAction('register',name , context);",
          "118:     },",
          "119:     onMasterChange (elt){",
          "120:       var value = this.$(elt).val();",
          "121:       if(value !== 'other'){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:     appendNamenode() {",
          "135:       this.validateJarPathAndAppend();",
          "136:     },",
          "",
          "---------------"
        ],
        "contrib/views/wfmanager/src/main/resources/ui/app/styles/app.less||contrib/views/wfmanager/src/main/resources/ui/app/styles/app.less": [
          "File: contrib/views/wfmanager/src/main/resources/ui/app/styles/app.less -> contrib/views/wfmanager/src/main/resources/ui/app/styles/app.less",
          "--- Hunk 1 ---",
          "[Context before]",
          "1824: .note-info {",
          "1825:   position: relative;",
          "1826:   top: 10px;",
          "1827: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1827: }",
          "1828: .spark-namenode {",
          "1829:   top: 15px;",
          "",
          "---------------"
        ],
        "contrib/views/wfmanager/src/main/resources/ui/app/templates/components/spark-action.hbs||contrib/views/wfmanager/src/main/resources/ui/app/templates/components/spark-action.hbs": [
          "File: contrib/views/wfmanager/src/main/resources/ui/app/templates/components/spark-action.hbs -> contrib/views/wfmanager/src/main/resources/ui/app/templates/components/spark-action.hbs",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:       </div>",
          "49:     </div>",
          "50:     {{/if}}",
          "51:     <div class=\"form-group\">",
          "52:       <label for=\"inputEmail\" class=\"control-label col-xs-2\">Runs On<span class=\"requiredField\">&nbsp;*</span></label>",
          "53:       {{#each mastersList as |master|}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     <div class=\"form-group\">",
          "52:       <label for=\"inputEmail\" class=\"control-label col-xs-2\">Append master<span class=\"requiredField\">&nbsp;*</span></label>",
          "53:       <div class=\"col-xs-2 spark-namenode\">",
          "54:           <input type=\"checkbox\" name=\"master\" checked={{appendNameNode}} value=\"other\" onchange={{action \"appendNamenode\" value=\"target\"}}>",
          "55:       </div>",
          "56:     </div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d343757add5e64cdff171ee05bc46044a0ecaf6",
      "candidate_info": {
        "commit_hash": "0d343757add5e64cdff171ee05bc46044a0ecaf6",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0d343757add5e64cdff171ee05bc46044a0ecaf6",
        "files": [
          "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/ServiceUpdateEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java"
        ],
        "message": "AMBARI-24762. Ambari server continues to send request updates after all commands were completed. (#2448)\n\n* AMBARI-24762. Ambari server continues to send request updates after all commands were completed. (mpapirkovskyy)\n\n* AMBARI-24762. Ambari server continues to send request updates after all commands were completed. (mpapirkovskyy)",
        "before_after_code_files": [
          "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java||ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/ServiceUpdateEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/ServiceUpdateEvent.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java||ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java",
          "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java||ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java -> ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "895:         }",
          "897:         updateRoleStats(status, roleStats.get(roleStr));",
          "899:       }",
          "900:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "898:         if (status == HostRoleStatus.FAILED) {",
          "899:           LOG.info(\"Role {} on host {} was failed\", roleStr, host);",
          "900:         }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/ServiceUpdateEvent.java||ambari-server/src/main/java/org/apache/ambari/server/events/ServiceUpdateEvent.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/ServiceUpdateEvent.java -> ambari-server/src/main/java/org/apache/ambari/server/events/ServiceUpdateEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.ambari.server.state.MaintenanceState;",
          "22: import org.apache.ambari.server.state.State;",
          "24: import com.fasterxml.jackson.annotation.JsonInclude;",
          "25: import com.fasterxml.jackson.annotation.JsonProperty;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import com.fasterxml.jackson.annotation.JsonIgnore;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:   @JsonProperty(\"state\")",
          "43:   private State state;",
          "46:     super(Type.SERVICE);",
          "47:     this.clusterName = clusterName;",
          "48:     this.maintenanceState = maintenanceState;",
          "49:     this.serviceName = serviceName;",
          "50:     this.state = state;",
          "51:   }",
          "53:   public String getClusterName() {",
          "",
          "[Removed Lines]",
          "45:   public ServiceUpdateEvent(String clusterName, MaintenanceState maintenanceState, String serviceName, State state) {",
          "",
          "[Added Lines]",
          "46:   @JsonIgnore",
          "47:   private boolean stateChanged = false;",
          "49:   public ServiceUpdateEvent(String clusterName, MaintenanceState maintenanceState, String serviceName, State state,",
          "50:                             boolean stateChanged) {",
          "56:     this.stateChanged = stateChanged;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82:     this.state = state;",
          "83:   }",
          "85:   @Override",
          "86:   public boolean equals(Object o) {",
          "87:     if (this == o) return true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:   public boolean isStateChanged() {",
          "92:     return stateChanged;",
          "93:   }",
          "95:   public void setStateChanged(boolean stateChanged) {",
          "96:     this.stateChanged = stateChanged;",
          "97:   }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java||ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java -> ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.ambari.server.AmbariException;",
          "26: import org.apache.ambari.server.EagerSingleton;",
          "29: import org.apache.ambari.server.events.HostComponentUpdate;",
          "30: import org.apache.ambari.server.events.HostComponentsUpdateEvent;",
          "31: import org.apache.ambari.server.events.MaintenanceModeEvent;",
          "32: import org.apache.ambari.server.events.ServiceUpdateEvent;",
          "33: import org.apache.ambari.server.events.publishers.AmbariEventPublisher;",
          "34: import org.apache.ambari.server.events.publishers.STOMPUpdatePublisher;",
          "36: import org.apache.ambari.server.state.Clusters;",
          "37: import org.apache.ambari.server.state.MaintenanceState;",
          "40: import com.google.common.eventbus.Subscribe;",
          "41: import com.google.inject.Inject;",
          "",
          "[Removed Lines]",
          "27: import org.apache.ambari.server.controller.utilities.ServiceCalculatedStateFactory;",
          "28: import org.apache.ambari.server.controller.utilities.state.ServiceCalculatedState;",
          "35: import org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO;",
          "38: import org.apache.ambari.server.state.State;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: @Singleton",
          "46: @EagerSingleton",
          "47: public class ServiceUpdateListener {",
          "50:   private STOMPUpdatePublisher STOMPUpdatePublisher;",
          "55:   @Inject",
          "56:   private Provider<Clusters> m_clusters;",
          "",
          "[Removed Lines]",
          "48:   private Map<Long, Map<String, State>> states = new HashMap<>();",
          "52:   @Inject",
          "53:   private ServiceDesiredStateDAO serviceDesiredStateDAO;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:       Long clusterId = clusterServices.getKey();",
          "76:       String clusterName = m_clusters.get().getClusterById(clusterId).getClusterName();",
          "77:       for (String serviceName : clusterServices.getValue()) {",
          "87:       }",
          "88:     }",
          "89:   }",
          "",
          "[Removed Lines]",
          "78:         ServiceCalculatedState serviceCalculatedState = ServiceCalculatedStateFactory.getServiceStateProvider(serviceName);",
          "79:         State serviceState = serviceCalculatedState.getState(clusterName, serviceName);",
          "82:         if (states.containsKey(clusterId) && states.get(clusterId).containsKey(serviceName) && states.get(clusterId).get(serviceName).equals(serviceState)) {",
          "83:           continue;",
          "84:         }",
          "85:         states.computeIfAbsent(clusterId, c -> new HashMap<>()).put(serviceName, serviceState);",
          "86:         STOMPUpdatePublisher.publish(new ServiceUpdateEvent(clusterName, null, serviceName, serviceState));",
          "",
          "[Added Lines]",
          "70:         STOMPUpdatePublisher.publish(new ServiceUpdateEvent(clusterName, null, serviceName, null,",
          "71:             true));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:     MaintenanceState maintenanceState = event.getMaintenanceState();",
          "103:   }",
          "104: }",
          "",
          "[Removed Lines]",
          "102:     STOMPUpdatePublisher.publish(new ServiceUpdateEvent(clusterName, maintenanceState, serviceName, null));",
          "",
          "[Added Lines]",
          "87:     STOMPUpdatePublisher.publish(new ServiceUpdateEvent(clusterName, maintenanceState, serviceName, null,",
          "88:         false));",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import java.util.concurrent.Executors;",
          "25: import java.util.concurrent.ScheduledExecutorService;",
          "26: import java.util.concurrent.TimeUnit;",
          "30: import com.google.common.eventbus.EventBus;",
          "31: import com.google.inject.Singleton;",
          "",
          "[Removed Lines]",
          "27: import java.util.concurrent.atomic.AtomicBoolean;",
          "28: import java.util.concurrent.atomic.AtomicLong;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: public abstract class BufferedUpdateEventPublisher<T> {",
          "36:   private static final long TIMEOUT = 1000L;",
          "39:   private final ConcurrentLinkedQueue<T> buffer = new ConcurrentLinkedQueue<>();",
          "42:   public void publish(T event, EventBus m_eventBus) {",
          "55:     }",
          "56:   }",
          "60:   protected List<T> retrieveBuffer() {",
          "62:     List<T> bufferContent = new ArrayList<>();",
          "63:     while (!buffer.isEmpty()) {",
          "64:       bufferContent.add(buffer.poll());",
          "",
          "[Removed Lines]",
          "37:   private final AtomicLong previousTime = new AtomicLong(0);",
          "38:   private final AtomicBoolean collecting = new AtomicBoolean(false);",
          "40:   private final ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);",
          "43:     long eventTime = System.currentTimeMillis();",
          "44:     if ((eventTime - previousTime.get() <= TIMEOUT) && !collecting.get()) {",
          "45:       buffer.add(event);",
          "46:       collecting.set(true);",
          "47:       scheduledExecutorService.schedule(getScheduledPublisher(m_eventBus),",
          "48:           TIMEOUT, TimeUnit.MILLISECONDS);",
          "49:     } else if (collecting.get()) {",
          "50:       buffer.add(event);",
          "51:     } else {",
          "53:       previousTime.set(eventTime);",
          "54:       m_eventBus.post(event);",
          "58:   protected abstract Runnable getScheduledPublisher(EventBus m_eventBus);",
          "61:     resetCollecting();",
          "",
          "[Added Lines]",
          "37:   private ScheduledExecutorService scheduledExecutorService;",
          "40:     if (scheduledExecutorService == null) {",
          "41:       scheduledExecutorService =",
          "42:           Executors.newScheduledThreadPool(1);",
          "43:       scheduledExecutorService",
          "44:           .scheduleWithFixedDelay(getScheduledPublisher(m_eventBus), TIMEOUT, TIMEOUT, TimeUnit.MILLISECONDS);",
          "46:     buffer.add(event);",
          "49:   protected MergingRunnable getScheduledPublisher(EventBus m_eventBus) {",
          "50:     return new MergingRunnable(m_eventBus);",
          "51:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:     return bufferContent;",
          "67:   }",
          "72:   }",
          "73: }",
          "",
          "[Removed Lines]",
          "69:   protected void resetCollecting() {",
          "70:     previousTime.set(System.currentTimeMillis());",
          "71:     collecting.set(false);",
          "",
          "[Added Lines]",
          "61:   public abstract void mergeBufferAndPost(List<T> events, EventBus m_eventBus);",
          "63:   private class MergingRunnable implements Runnable {",
          "65:     private final EventBus m_eventBus;",
          "67:     public MergingRunnable(EventBus m_eventBus) {",
          "68:       this.m_eventBus = m_eventBus;",
          "69:     }",
          "71:     @Override",
          "72:     public final void run() {",
          "73:       List<T> events = retrieveBuffer();",
          "74:       if (events.isEmpty()) {",
          "75:         return;",
          "76:       }",
          "77:       mergeBufferAndPost(events, m_eventBus);",
          "78:     }",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: public class HostComponentUpdateEventPublisher extends BufferedUpdateEventPublisher<HostComponentsUpdateEvent> {",
          "33:   @Override",
          "59:   }",
          "60: }",
          "",
          "[Removed Lines]",
          "34:   protected Runnable getScheduledPublisher(EventBus m_eventBus) {",
          "35:     return new HostComponentsEventRunnable(m_eventBus);",
          "36:   }",
          "38:   private class HostComponentsEventRunnable implements Runnable {",
          "40:     private final EventBus eventBus;",
          "42:     public HostComponentsEventRunnable(EventBus eventBus) {",
          "43:       this.eventBus = eventBus;",
          "44:     }",
          "46:     @Override",
          "47:     public void run() {",
          "48:       List<HostComponentsUpdateEvent> hostComponentUpdateEvents = retrieveBuffer();",
          "49:       if (hostComponentUpdateEvents.isEmpty()) {",
          "50:         return;",
          "51:       }",
          "52:       List<HostComponentUpdate> hostComponentUpdates = hostComponentUpdateEvents.stream().flatMap(",
          "53:           u -> u.getHostComponentUpdates().stream()).collect(Collectors.toList());",
          "55:       HostComponentsUpdateEvent resultEvents = new HostComponentsUpdateEvent(hostComponentUpdates);",
          "57:       eventBus.post(resultEvents);",
          "58:     }",
          "",
          "[Added Lines]",
          "34:   public void mergeBufferAndPost(List<HostComponentsUpdateEvent> events, EventBus m_eventBus) {",
          "35:     List<HostComponentUpdate> hostComponentUpdates = events.stream().flatMap(",
          "36:         u -> u.getHostComponentUpdates().stream()).collect(Collectors.toList());",
          "38:     HostComponentsUpdateEvent resultEvents = new HostComponentsUpdateEvent(hostComponentUpdates);",
          "40:     m_eventBus.post(resultEvents);",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.events.publishers;",
          "25: import org.apache.ambari.server.controller.internal.CalculatedStatus;",
          "26: import org.apache.ambari.server.events.RequestUpdateEvent;",
          "",
          "[Removed Lines]",
          "21: import java.util.concurrent.ConcurrentHashMap;",
          "22: import java.util.concurrent.Executors;",
          "23: import java.util.concurrent.TimeUnit;",
          "",
          "[Added Lines]",
          "21: import java.util.HashMap;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import com.google.inject.Singleton;",
          "37: @Singleton",
          "44:   @Inject",
          "45:   private HostRoleCommandDAO hostRoleCommandDAO;",
          "",
          "[Removed Lines]",
          "38: public class RequestUpdateEventPublisher {",
          "40:   private final Long TIMEOUT = 1000L;",
          "41:   private ConcurrentHashMap<Long, Long> previousTime = new ConcurrentHashMap<>();",
          "42:   private ConcurrentHashMap<Long, RequestUpdateEvent> buffer = new ConcurrentHashMap<>();",
          "",
          "[Added Lines]",
          "38: public class RequestUpdateEventPublisher extends BufferedUpdateEventPublisher<RequestUpdateEvent> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   @Inject",
          "54:   private ClusterDAO clusterDAO;",
          "61:     }",
          "77:     }",
          "78:   }",
          "",
          "[Removed Lines]",
          "56:   public void publish(RequestUpdateEvent event, EventBus m_eventBus) {",
          "57:     Long eventTime = System.currentTimeMillis();",
          "58:     Long requestId = event.getRequestId();",
          "59:     if (!previousTime.containsKey(requestId)) {",
          "60:       previousTime.put(requestId, 0L);",
          "62:     if (eventTime - previousTime.get(requestId) <= TIMEOUT && !buffer.containsKey(requestId)) {",
          "63:       buffer.put(event.getRequestId(), event);",
          "64:       Executors.newScheduledThreadPool(1).schedule(new RequestEventRunnable(requestId, m_eventBus),",
          "65:           TIMEOUT, TimeUnit.MILLISECONDS);",
          "66:     } else if (buffer.containsKey(requestId)) {",
          "68:       buffer.get(requestId).setEndTime(event.getEndTime());",
          "69:       buffer.get(requestId).setRequestStatus(event.getRequestStatus());",
          "70:       buffer.get(requestId).setRequestContext(event.getRequestContext());",
          "71:       buffer.get(requestId).getHostRoleCommands().removeAll(event.getHostRoleCommands());",
          "72:       buffer.get(requestId).getHostRoleCommands().addAll(event.getHostRoleCommands());",
          "73:     } else {",
          "74:       previousTime.put(requestId, eventTime);",
          "76:       m_eventBus.post(fillRequest(event));",
          "",
          "[Added Lines]",
          "52:   @Override",
          "53:   public void mergeBufferAndPost(List<RequestUpdateEvent> events, EventBus m_eventBus) {",
          "54:     Map<Long, RequestUpdateEvent> filteredRequests = new HashMap<>();",
          "55:     for (RequestUpdateEvent event : events) {",
          "56:       Long requestId = event.getRequestId();",
          "57:       if (filteredRequests.containsKey(requestId)) {",
          "58:         RequestUpdateEvent filteredRequest = filteredRequests.get(requestId);",
          "59:         filteredRequest.setEndTime(event.getEndTime());",
          "60:         filteredRequest.setRequestStatus(event.getRequestStatus());",
          "61:         filteredRequest.setRequestContext(event.getRequestContext());",
          "62:         filteredRequest.getHostRoleCommands().removeAll(event.getHostRoleCommands());",
          "63:         filteredRequest.getHostRoleCommands().addAll(event.getHostRoleCommands());",
          "64:       } else {",
          "65:         filteredRequests.put(requestId, event);",
          "66:       }",
          "68:     for (RequestUpdateEvent requestUpdateEvent : filteredRequests.values()) {",
          "69:       RequestUpdateEvent filled = fillRequest(requestUpdateEvent);",
          "70:       m_eventBus.post(filled);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:     }",
          "95:     return event;",
          "96:   }",
          "117: }",
          "",
          "[Removed Lines]",
          "98:   private class RequestEventRunnable implements Runnable {",
          "100:     private final long requestId;",
          "101:     private final EventBus eventBus;",
          "103:     public RequestEventRunnable(long requestId, EventBus eventBus) {",
          "104:       this.requestId = requestId;",
          "105:       this.eventBus = eventBus;",
          "106:     }",
          "108:     @Override",
          "109:     public void run() {",
          "110:       RequestUpdateEvent resultEvent = buffer.get(requestId);",
          "112:       eventBus.post(fillRequest(resultEvent));",
          "113:       buffer.remove(requestId);",
          "114:       previousTime.remove(requestId);",
          "115:     }",
          "116:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java||ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java": [
          "File: ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java -> ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.ambari.server.events.publishers;",
          "21: import java.util.ArrayList;",
          "22: import java.util.List;",
          "24: import org.apache.ambari.server.events.ServiceUpdateEvent;",
          "26: import com.google.common.eventbus.EventBus;",
          "27: import com.google.inject.Singleton;",
          "29: @Singleton",
          "30: public class ServiceUpdateEventPublisher extends BufferedUpdateEventPublisher<ServiceUpdateEvent> {",
          "43:     }",
          "63:         }",
          "64:       }",
          "68:     }",
          "69:   }",
          "70: }",
          "",
          "[Removed Lines]",
          "32:   @Override",
          "33:   protected Runnable getScheduledPublisher(EventBus m_eventBus) {",
          "34:     return new ServiceEventRunnable(m_eventBus);",
          "35:   }",
          "37:   private class ServiceEventRunnable implements Runnable {",
          "39:     private final EventBus eventBus;",
          "41:     public ServiceEventRunnable(EventBus eventBus) {",
          "42:       this.eventBus = eventBus;",
          "45:     @Override",
          "46:     public void run() {",
          "47:       List<ServiceUpdateEvent> serviceUpdates = retrieveBuffer();",
          "48:       if (serviceUpdates.isEmpty()) {",
          "49:         return;",
          "50:       }",
          "51:       List<ServiceUpdateEvent> filtered = new ArrayList<>();",
          "52:       for (ServiceUpdateEvent event : serviceUpdates) {",
          "53:         int pos = filtered.indexOf(event);",
          "54:         if (pos != -1) {",
          "55:           if (event.getState() != null) {",
          "56:             filtered.get(pos).setState(event.getState());",
          "57:           }",
          "58:           if (event.getMaintenanceState() != null) {",
          "59:             filtered.get(pos).setMaintenanceState(event.getMaintenanceState());",
          "60:           }",
          "61:         } else {",
          "62:           filtered.add(event);",
          "65:       for (ServiceUpdateEvent serviceUpdateEvent : serviceUpdates) {",
          "66:         eventBus.post(serviceUpdateEvent);",
          "67:       }",
          "",
          "[Added Lines]",
          "22: import java.util.HashMap;",
          "24: import java.util.Map;",
          "26: import org.apache.ambari.server.controller.utilities.ServiceCalculatedStateFactory;",
          "27: import org.apache.ambari.server.controller.utilities.state.ServiceCalculatedState;",
          "29: import org.apache.ambari.server.state.State;",
          "36:   private Map<String, Map<String, State>> states = new HashMap<>();",
          "39:   @Override",
          "40:   public void mergeBufferAndPost(List<ServiceUpdateEvent> events, EventBus eventBus) {",
          "41:     List<ServiceUpdateEvent> filtered = new ArrayList<>();",
          "42:     for (ServiceUpdateEvent event : events) {",
          "43:       int pos = filtered.indexOf(event);",
          "44:       if (pos != -1) {",
          "45:         if (event.isStateChanged()) {",
          "46:           filtered.get(pos).setStateChanged(true);",
          "47:         }",
          "48:         if (event.getMaintenanceState() != null) {",
          "49:           filtered.get(pos).setMaintenanceState(event.getMaintenanceState());",
          "50:         }",
          "51:       } else {",
          "52:         filtered.add(event);",
          "53:       }",
          "55:     for (ServiceUpdateEvent serviceUpdateEvent : filtered) {",
          "57:       if (serviceUpdateEvent.isStateChanged()) {",
          "58:         ServiceCalculatedState serviceCalculatedState =",
          "59:             ServiceCalculatedStateFactory.getServiceStateProvider(serviceUpdateEvent.getServiceName());",
          "60:         State serviceState =",
          "61:             serviceCalculatedState.getState(serviceUpdateEvent.getClusterName(), serviceUpdateEvent.getServiceName());",
          "63:         String serviceName = serviceUpdateEvent.getServiceName();",
          "64:         String clusterName = serviceUpdateEvent.getClusterName();",
          "68:         if (states.containsKey(clusterName) && states.get(clusterName).containsKey(serviceName)",
          "69:             && states.get(clusterName).get(serviceName).equals(serviceState)",
          "70:             && serviceUpdateEvent.getMaintenanceState() == null) {",
          "71:           continue;",
          "73:         states.computeIfAbsent(clusterName, c -> new HashMap<>()).put(serviceName, serviceState);",
          "74:         serviceUpdateEvent.setState(serviceState);",
          "77:       eventBus.post(serviceUpdateEvent);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1df7f0c71e00dff0c6be5d390a877a2a9dcb74dd",
      "candidate_info": {
        "commit_hash": "1df7f0c71e00dff0c6be5d390a877a2a9dcb74dd",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/1df7f0c71e00dff0c6be5d390a877a2a9dcb74dd",
        "files": [
          "ambari-web/app/controllers/main/host/details.js"
        ],
        "message": "AMBARI-24618. Ambari generates wrong zookeeper connection string for KMS HA configuration",
        "before_after_code_files": [
          "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-web/app/controllers/main/host/details.js||ambari-web/app/controllers/main/host/details.js": [
          "File: ambari-web/app/controllers/main/host/details.js -> ambari-web/app/controllers/main/host/details.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1574:   },",
          "1576:   getZookeeperConnectionString: function () {",
          "1578:       return host + ':2181';",
          "1579:     }).join(',');",
          "1580:   },",
          "",
          "[Removed Lines]",
          "1577:     return this.getRangerKMSServerHosts().map(function (host) {",
          "",
          "[Added Lines]",
          "1577:     var zookeeperHosts = App.MasterComponent.find('ZOOKEEPER_SERVER').get('hostNames');",
          "1578:     return zookeeperHosts.map(function (host) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "219a23623349bc3715f6c667369477bd32ef1b0b",
      "candidate_info": {
        "commit_hash": "219a23623349bc3715f6c667369477bd32ef1b0b",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/219a23623349bc3715f6c667369477bd32ef1b0b",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "ambari-agent/src/main/python/ambari_agent/PythonExecutor.py"
        ],
        "message": "AMBARI-24270. Agent Status Command Are Randomly Failing With Empty stderr (aonishuk) (#1728)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py||ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "ambari-agent/src/main/python/ambari_agent/PythonExecutor.py||ambari-agent/src/main/python/ambari_agent/PythonExecutor.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py||ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py": [
          "File: ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py -> ambari-agent/src/main/python/ambari_agent/ComponentStatusExecutor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:     if status == LiveStatus.DEAD_STATUS:",
          "137:       stderr = component_status_result['stderr']",
          "138:       if not \"ComponentIsNotRunning\" in stderr and not \"ClientComponentHasNoStatus\" in stderr:",
          "141:     result = {",
          "142:       'serviceName': service_name,",
          "",
          "[Removed Lines]",
          "139:         logger.info(\"Status command for {0} failed:\\n{1}\".format(component_name, stderr))",
          "",
          "[Added Lines]",
          "139:         logger.info(\"Status command for {0} failed ({1}) :\\n{2}\".format(component_name, component_status_result, stderr))",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py||ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py": [
          "File: ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py -> ambari-agent/src/main/python/ambari_agent/CustomServiceOrchestrator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:     try:",
          "328:       command = self.generate_command(command_header)",
          "329:       script_type = command['commandParams']['script_type']",
          "330:       script = command['commandParams']['script']",
          "331:       timeout = int(command['commandParams']['command_timeout'])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:       logger.info(\"Generated command\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:         command_name = command['roleCommand']",
          "340:       else:",
          "341:         task_id = 'status'",
          "343:       if forced_command_name is not None:  # If not supplied as an argument",
          "344:         command_name = forced_command_name",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:       logger.info(\"[{0}]\".format(task_id))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:         if log_out_files:",
          "423:           script_params.append(\"-o\")",
          "425:         ret = python_executor.run_file(py_file, script_params,",
          "426:                                tmpoutfile, tmperrfile, timeout,",
          "427:                                tmpstrucoutfile, self.map_task_to_process,",
          "428:                                task_id, override_output_files, backup_log_files = backup_log_files,",
          "429:                                handle = handle, log_info_on_failure=log_info_on_failure)",
          "430:         # Next run_file() invocations should always append to current output",
          "431:         override_output_files = False",
          "432:         if ret['exitcode'] != 0:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "428:         logger.info(\"[{0}] python_executor.run_file({1})\".format(task_id, (py_file, script_params,",
          "429:                                tmpoutfile, tmperrfile, timeout,",
          "430:                                tmpstrucoutfile, self.map_task_to_process,",
          "431:                                task_id, override_output_files, backup_log_files,",
          "432:                                handle, log_info_on_failure)))",
          "439:         logger.info(\"[{0}] python_executor.run_file() returned {1}\", task_id, ret)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "438:       # if canceled and not background command",
          "439:       if handle is None:",
          "440:         cancel_reason = self.command_canceled_reason(task_id)",
          "441:         if cancel_reason is not None:",
          "442:           ret['stdout'] += cancel_reason",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:         logger.info(\"[{0}] canceled\", task_id)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "512:      Exit code 0 means that component is running and any other exit code means that",
          "513:      component is not running",
          "514:     \"\"\"",
          "515:     override_output_files=True # by default, we override status command output",
          "516:     if logger.level == logging.DEBUG:",
          "517:       override_output_files = False",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:     logger.info(\"Requesting component status {0}\".format(command_header))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "519:     res = self.runCommand(command_header, self.status_commands_stdout,",
          "520:                           self.status_commands_stderr, self.COMMAND_NAME_STATUS,",
          "521:                           override_output_files=override_output_files, is_status_command=True)",
          "522:     return res",
          "524:   def resolve_script_path(self, base_dir, script):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535:     logger.info(\"requestComponentStatus return={0}\".format(res))",
          "",
          "---------------"
        ],
        "ambari-agent/src/main/python/ambari_agent/PythonExecutor.py||ambari-agent/src/main/python/ambari_agent/PythonExecutor.py": [
          "File: ambari-agent/src/main/python/ambari_agent/PythonExecutor.py -> ambari-agent/src/main/python/ambari_agent/PythonExecutor.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   used as a singleton for a concurrent execution of python scripts",
          "45:   \"\"\"",
          "46:   NO_ERROR = \"none\"",
          "48:   def __init__(self, tmpDir, config):",
          "49:     self.grep = Grep()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   i = 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     recreated or appended.",
          "94:     The structured out file, however, is preserved during multiple invocations that use the same file.",
          "95:     \"\"\"",
          "96:     pythonCommand = self.python_command(script, script_params)",
          "100:     if handle is None:",
          "101:       tmpout, tmperr = self.open_subprocess32_files(tmpoutfile, tmperrfile, override_output_files, backup_log_files)",
          "103:       process = self.launch_python_subprocess32(pythonCommand, tmpout, tmperr)",
          "104:       # map task_id to pid",
          "105:       callback(task_id, process.pid)",
          "106:       logger.debug(\"Launching watchdog thread\")",
          "",
          "[Removed Lines]",
          "97:     if logger.isEnabledFor(logging.DEBUG):",
          "98:       logger.debug(\"Running command %s\", pprint.pformat(pythonCommand))",
          "",
          "[Added Lines]",
          "97:     PythonExecutor.i += 1",
          "100:     logger.info(\"[%d] Running command %s\", PythonExecutor.i, pprint.pformat(pythonCommand))",
          "106:       logger.info(\"[%d] Started process with pid = %s\", PythonExecutor.i, process.pid)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110:       thread.start()",
          "111:       # Waiting for the process to be either finished or killed",
          "112:       process.communicate()",
          "113:       self.event.set()",
          "114:       thread.join()",
          "115:       result = self.prepare_process_result(process.returncode, tmpoutfile, tmperrfile, tmpstructedoutfile, timeout=timeout)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:       logger.info(\"[{0}] Process communicated {1}\", PythonExecutor.i, (process.returncode, tmpoutfile, tmperrfile, tmpstructedoutfile, timeout))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:       if log_info_on_failure and result['exitcode']:",
          "118:         self.on_failure(pythonCommand, result)",
          "120:       return result",
          "121:     else:",
          "122:       holder = Holder(pythonCommand, tmpoutfile, tmperrfile, tmpstructedoutfile, handle)",
          "124:       background = BackgroundThread(holder, self)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:       logger.info(\"[{0}] PE.run_file() returned {1}\", PythonExecutor.i, result)",
          "127:       logger.info(\"[{0}] has handle\", PythonExecutor.i)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "176:       for k, v in command_env.iteritems():",
          "177:         command_env[k] = str(v)",
          "179:     return subprocess32.Popen(command,",
          "180:       stdout=tmpout,",
          "181:       stderr=tmperr, close_fds=close_fds, env=command_env, preexec_fn=self.preexec_fn)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:     logger.info(\"[{0}] launch_python_subprocess32 {1}\".format(PythonExecutor.i, (command, tmpout, tmperr, close_fds, self.preexec_fn)))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a06a9348cdefe01bc50895e81d6e713b5bd4da5",
      "candidate_info": {
        "commit_hash": "0a06a9348cdefe01bc50895e81d6e713b5bd4da5",
        "repo": "apache/ambari",
        "commit_url": "https://github.com/apache/ambari/commit/0a06a9348cdefe01bc50895e81d6e713b5bd4da5",
        "files": [
          "ambari-agent/src/main/python/ambari_agent/HostInfo.py",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/AgentResourceTest.java",
          "ambari-server/src/test/python/TestSetupSso.py",
          "ambari-web/app/mixins/main/host/details/actions/check_host.js"
        ],
        "message": "AMBARI-25518. DB connection details in API call. (#3202) (dvitiiuk via dgrinenko)",
        "before_after_code_files": [
          "ambari-agent/src/main/python/ambari_agent/HostInfo.py||ambari-agent/src/main/python/ambari_agent/HostInfo.py",
          "ambari-server/src/test/java/org/apache/ambari/server/agent/AgentResourceTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/AgentResourceTest.java",
          "ambari-server/src/test/python/TestSetupSso.py||ambari-server/src/test/python/TestSetupSso.py",
          "ambari-web/app/mixins/main/host/details/actions/check_host.js||ambari-web/app/mixins/main/host/details/actions/check_host.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/ambari/pull/3633",
          "https://github.com/apache/ambari/pull/3631",
          "https://github.com/apache/ambari/pull/3637",
          "https://github.com/apache/ambari/pull/3632",
          "https://github.com/apache/ambari/pull/3634",
          "https://github.com/apache/ambari/pull/3635"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ambari-agent/src/main/python/ambari_agent/HostInfo.py||ambari-agent/src/main/python/ambari_agent/HostInfo.py": [
          "File: ambari-agent/src/main/python/ambari_agent/HostInfo.py -> ambari-agent/src/main/python/ambari_agent/HostInfo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:             for filter in self.PROC_FILTER:",
          "258:               if filter in cmd:",
          "259:                 metrics['hadoop'] = True",
          "261:             for line in open(os.path.join('/proc', pid, 'status')):",
          "262:               if line.startswith('Uid:'):",
          "263:                 uid = int(line.split()[1])",
          "",
          "[Removed Lines]",
          "260:             metrics['command'] = unicode(cmd.strip(), errors='ignore')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/test/java/org/apache/ambari/server/agent/AgentResourceTest.java||ambari-server/src/test/java/org/apache/ambari/server/agent/AgentResourceTest.java": [
          "File: ambari-server/src/test/java/org/apache/ambari/server/agent/AgentResourceTest.java -> ambari-server/src/test/java/org/apache/ambari/server/agent/AgentResourceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "228:     String PackageDetailJSON = \"[{name:'abc', version:'2.3', repoName:'HDP'},{name:'abc', version:'3.3', repoName:'HDP-epel'}]\";",
          "229:     String ExistingUserJSON = \"[{name:'hdfs', homeDir:'/var/lib/hadoop', status:''}, \" +",
          "230:             \"{name:'ambari_qa', homeDir:'/var/home/ambari_qa',status:'None'}]\";",
          "233:     String AlternativeJSON = \"[{name:'/etc/alternatives/hdfs-conf', target:'/etc/hadoop/conf.dist'}, \" +",
          "234:             \"{name:'abc', target:'def'}]\";",
          "235:     String AgentEnvJSON = \"{\\\"alternatives\\\": \" + AlternativeJSON +",
          "",
          "[Removed Lines]",
          "231:     String JavaProcJSON = \"[{user:'root', pid:'355', hadoop:'True', command:'cmd'}, \" +",
          "232:             \"{user:'hdfs', pid:'325', hadoop:'False', command:'cmd = 2'}]\";",
          "",
          "[Added Lines]",
          "231:     String JavaProcJSON = \"[{user:'root', pid:'355', hadoop:'True'}, \" +",
          "232:             \"{user:'hdfs', pid:'325', hadoop:'False'}]\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:         JavaProcJSON, AgentEnv.JavaProc[].class);",
          "259:     Assert.assertEquals(\"root\", procs[0].getUser());",
          "260:     Assert.assertEquals(355, procs[0].getPid());",
          "262:     Assert.assertEquals(false, procs[1].isHadoop());",
          "264:     AgentEnv.Alternative[] alternatives = getJsonFormString(",
          "",
          "[Removed Lines]",
          "261:     Assert.assertEquals(\"cmd = 2\", procs[1].getCommand());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ambari-server/src/test/python/TestSetupSso.py||ambari-server/src/test/python/TestSetupSso.py": [
          "File: ambari-server/src/test/python/TestSetupSso.py -> ambari-server/src/test/python/TestSetupSso.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:       with patch.object(os_utils, \"parse_log4j_file\", return_value={'ambari.log.dir': '/var/log/ambari-server'}):",
          "65:         with patch(\"platform.linux_distribution\", return_value = os_distro_value):",
          "66:           with patch(\"os.symlink\"):",
          "76: class TestSetupSso(unittest.TestCase):",
          "77:   @patch(\"ambari_server.setupSso.is_server_runing\")",
          "",
          "[Removed Lines]",
          "67:             with patch(\"glob.glob\", return_value = ['/etc/init.d/postgresql-9.3']):",
          "68:               _ambari_server_ = __import__('ambari-server')",
          "69:               with patch(\"__builtin__.open\"):",
          "70:                 from ambari_commons.exceptions import FatalException, NonFatalException",
          "71:                 from ambari_server.properties import Properties",
          "72:                 from ambari_server.setupSso import setup_sso, AMBARI_SSO_AUTH_ENABLED, \\",
          "73:                   SSO_PROVIDER_URL, SSO_CERTIFICATE, JWT_COOKIE_NAME, JWT_AUDIENCES, \\",
          "74:                   SSO_ENABLED_SERVICES, SSO_MANAGE_SERVICES",
          "",
          "[Added Lines]",
          "67:             with patch.object(os_utils, \"is_service_exist\", return_value = True):",
          "68:               with patch(\"glob.glob\", return_value = ['/etc/init.d/postgresql-9.3']):",
          "69:                 _ambari_server_ = __import__('ambari-server')",
          "70:                 with patch(\"__builtin__.open\"):",
          "71:                   from ambari_commons.exceptions import FatalException, NonFatalException",
          "72:                   from ambari_server.properties import Properties",
          "73:                   from ambari_server.setupSso import setup_sso, AMBARI_SSO_AUTH_ENABLED, \\",
          "74:                     SSO_PROVIDER_URL, SSO_CERTIFICATE, JWT_COOKIE_NAME, JWT_AUDIENCES, \\",
          "75:                     SSO_ENABLED_SERVICES, SSO_MANAGE_SERVICES",
          "",
          "---------------"
        ],
        "ambari-web/app/mixins/main/host/details/actions/check_host.js||ambari-web/app/mixins/main/host/details/actions/check_host.js": [
          "File: ambari-web/app/mixins/main/host/details/actions/check_host.js -> ambari-web/app/mixins/main/host/details/actions/check_host.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "617:             warning.hosts.push(hostName);",
          "618:             warning.hostsLong.push(hostName);",
          "619:           } else {",
          "620:             warningCategories.processesWarnings[process.pid] = warning = {",
          "622:               hosts: [hostName],",
          "623:               hostsLong: [hostName],",
          "624:               category: 'processes',",
          "625:               user: process.user,",
          "626:               pid: process.pid,",
          "631:             };",
          "632:           }",
          "633:           host.warnings.push(warning);",
          "",
          "[Removed Lines]",
          "621:               name: (process.command.substr(0, 35) + '...'),",
          "627:               command: '<table><tr><td style=\"word-break: break-all;\">' +",
          "628:               ((process.command.length < 500) ? process.command : process.command.substr(0, 230) + '...' +",
          "629:               '<p style=\"text-align: center\">................</p>' +",
          "630:               '...' + process.command.substr(-230)) + '</td></tr></table>'",
          "",
          "[Added Lines]",
          "620:             var command = 'pid=' + process.pid + ', user=' + process.user;",
          "622:               name: command.length > 36 ? (command.substr(0, 35) + '...') : command,",
          "628:               command: command",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "851:             warning.hosts.push(_host.Hosts.host_name);",
          "852:             warning.hostsLong.push(_host.Hosts.host_name);",
          "853:           } else {",
          "854:             warningCategories.processesWarnings[process.pid] = warning = {",
          "856:               hosts: [_host.Hosts.host_name],",
          "857:               hostsLong: [_host.Hosts.host_name],",
          "858:               category: 'processes',",
          "859:               user: process.user,",
          "860:               pid: process.pid,",
          "865:             };",
          "866:           }",
          "867:           host.warnings.push(warning);",
          "",
          "[Removed Lines]",
          "855:               name: (process.command.substr(0, 35) + '...'),",
          "861:               command: '<table><tr><td style=\"word-break: break-all;\">' +",
          "862:               ((process.command.length < 500) ? process.command : process.command.substr(0, 230) + '...' +",
          "863:               '<p style=\"text-align: center\">................</p>' +",
          "864:               '...' + process.command.substr(-230)) + '</td></tr></table>'",
          "",
          "[Added Lines]",
          "852:             var command = 'pid=' + process.pid + ', user=' + process.user;",
          "854:               name: command.length > 36 ? (command.substr(0, 35) + '...') : command,",
          "860:               command: command",
          "",
          "---------------"
        ]
      }
    }
  ]
}