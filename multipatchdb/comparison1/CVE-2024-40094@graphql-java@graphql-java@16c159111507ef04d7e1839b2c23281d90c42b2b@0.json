{
  "cve_id": "CVE-2024-40094",
  "cve_desc": "GraphQL Java (aka graphql-java) before 21.5 does not properly consider ExecutableNormalizedFields (ENFs) as part of preventing denial of service via introspection queries. 20.9 and 19.11 are also fixed versions.",
  "repo": "graphql-java/graphql-java",
  "patch_hash": "16c159111507ef04d7e1839b2c23281d90c42b2b",
  "patch_info": {
    "commit_hash": "16c159111507ef04d7e1839b2c23281d90c42b2b",
    "repo": "graphql-java/graphql-java",
    "commit_url": "https://github.com/graphql-java/graphql-java/commit/16c159111507ef04d7e1839b2c23281d90c42b2b",
    "files": [
      "src/main/java/graphql/Assert.java",
      "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
      "src/main/java/graphql/analysis/QueryTransformer.java",
      "src/main/java/graphql/analysis/QueryTraversalContext.java",
      "src/main/java/graphql/analysis/QueryTraverser.java",
      "src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/execution/FieldCollector.java",
      "src/main/java/graphql/execution/FieldCollectorParameters.java",
      "src/main/java/graphql/execution/conditional/ConditionalNodes.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/main/java/graphql/schema/impl/SchemaUtil.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/BenchmarkUtils.java",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ],
    "message": "Merge pull request #3543 from graphql-java/19.x-backport-enf-introspection\n\n19.x Backport PR 3539",
    "before_after_code_files": [
      "src/main/java/graphql/Assert.java||src/main/java/graphql/Assert.java",
      "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
      "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java",
      "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java",
      "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java",
      "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java",
      "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java",
      "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java",
      "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java",
      "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "src/main/java/graphql/schema/impl/SchemaUtil.java||src/main/java/graphql/schema/impl/SchemaUtil.java",
      "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
      "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
      "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java",
      "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
    ]
  },
  "patch_diff": {
    "src/main/java/graphql/Assert.java||src/main/java/graphql/Assert.java": [
      "File: src/main/java/graphql/Assert.java -> src/main/java/graphql/Assert.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "85:         throw new AssertException(\"condition expected to be true\");",
      "86:     }",
      "88:     public static void assertFalse(boolean condition, Supplier<String> msg) {",
      "89:         if (!condition) {",
      "90:             return;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "88:     public static void assertTrue(boolean condition, String constantMsg) {",
      "89:         if (condition) {",
      "90:             return;",
      "91:         }",
      "92:         throwAssert(constantMsg);",
      "93:     }",
      "95:     public static void assertTrue(boolean condition, String msgFmt, Object arg1) {",
      "96:         if (condition) {",
      "97:             return;",
      "98:         }",
      "99:         throwAssert(msgFmt, arg1);",
      "100:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:         throw new AssertException(String.format(invalidNameErrorMessage, name));",
      "118:     }",
      "120: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "134:     private static <T> T throwAssert(String format, Object... args) {",
      "135:         throw new AssertException(format(format, args));",
      "136:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java": [
      "File: src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java -> src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.analysis;",
      "3: import graphql.Internal;",
      "4: import graphql.execution.CoercedVariables;",
      "6: import graphql.execution.ValuesResolver;",
      "7: import graphql.introspection.Introspection;",
      "8: import graphql.language.Argument;",
      "9: import graphql.language.Directive;",
      "",
      "[Removed Lines]",
      "5: import graphql.execution.ConditionalNodes;",
      "",
      "[Added Lines]",
      "3: import graphql.GraphQLContext;",
      "7: import graphql.execution.conditional.ConditionalNodes;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:     @Override",
      "68:     public TraversalControl visitInlineFragment(InlineFragment inlineFragment, TraverserContext<Node> context) {",
      "70:             return TraversalControl.ABORT;",
      "71:         }",
      "",
      "[Removed Lines]",
      "69:         if (!conditionalNodes.shouldInclude(variables, inlineFragment.getDirectives())) {",
      "",
      "[Added Lines]",
      "70:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "71:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "72:         if (!conditionalNodes.shouldInclude(inlineFragment, variables, null, graphQLContext)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "80:         preOrderCallback.visitInlineFragment(inlineFragmentEnvironment);",
      "85:         GraphQLCompositeType fragmentCondition;",
      "86:         if (inlineFragment.getTypeCondition() != null) {",
      "",
      "[Removed Lines]",
      "83:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "90:             fragmentCondition = parentEnv.getUnwrappedOutputType();",
      "91:         }",
      "94:         return TraversalControl.CONTINUE;",
      "95:     }",
      "97:     @Override",
      "100:             return TraversalControl.ABORT;",
      "101:         }",
      "105:         if (context.getPhase() == LEAVE) {",
      "106:             postOrderCallback.visitFragmentDefinition(fragmentEnvironment);",
      "",
      "[Removed Lines]",
      "93:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(fragmentCondition, parentEnv.getEnvironment(), inlineFragment));",
      "98:     public TraversalControl visitFragmentDefinition(FragmentDefinition node, TraverserContext<Node> context) {",
      "99:         if (!conditionalNodes.shouldInclude(variables, node.getDirectives())) {",
      "103:         QueryVisitorFragmentDefinitionEnvironment fragmentEnvironment = new QueryVisitorFragmentDefinitionEnvironmentImpl(node, context, schema);",
      "",
      "[Added Lines]",
      "95:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(fragmentCondition, parentEnv.getEnvironment(), inlineFragment, graphQLContext));",
      "100:     public TraversalControl visitFragmentDefinition(FragmentDefinition fragmentDefinition, TraverserContext<Node> context) {",
      "101:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "102:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "103:         if (!conditionalNodes.shouldInclude(fragmentDefinition, variables, null, graphQLContext)) {",
      "107:         QueryVisitorFragmentDefinitionEnvironment fragmentEnvironment = new QueryVisitorFragmentDefinitionEnvironmentImpl(fragmentDefinition, context, schema);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "108:         }",
      "109:         preOrderCallback.visitFragmentDefinition(fragmentEnvironment);",
      "114:         return TraversalControl.CONTINUE;",
      "115:     }",
      "117:     @Override",
      "118:     public TraversalControl visitFragmentSpread(FragmentSpread fragmentSpread, TraverserContext<Node> context) {",
      "120:             return TraversalControl.ABORT;",
      "121:         }",
      "123:         FragmentDefinition fragmentDefinition = fragmentsByName.get(fragmentSpread.getName());",
      "125:             return TraversalControl.ABORT;",
      "126:         }",
      "",
      "[Removed Lines]",
      "111:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "112:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(node.getTypeCondition().getName());",
      "113:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), node));",
      "119:         if (!conditionalNodes.shouldInclude(variables, fragmentSpread.getDirectives())) {",
      "124:         if (!conditionalNodes.shouldInclude(variables, fragmentDefinition.getDirectives())) {",
      "",
      "[Added Lines]",
      "115:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(fragmentDefinition.getTypeCondition().getName());",
      "116:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition, graphQLContext));",
      "122:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "123:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "124:         if (!conditionalNodes.shouldInclude(fragmentSpread, variables, null, graphQLContext)) {",
      "129:         if (!conditionalNodes.shouldInclude(fragmentDefinition, variables, null, graphQLContext)) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "134:         preOrderCallback.visitFragmentSpread(fragmentSpreadEnvironment);",
      "138:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(fragmentDefinition.getTypeCondition().getName());",
      "139:         assertNotNull(typeCondition,",
      "140:                 () -> format(\"Invalid type condition '%s' in fragment '%s'\", fragmentDefinition.getTypeCondition().getName(),",
      "141:                         fragmentDefinition.getName()));",
      "143:         return TraversalControl.CONTINUE;",
      "144:     }",
      "146:     @Override",
      "147:     public TraversalControl visitField(Field field, TraverserContext<Node> context) {",
      "148:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "150:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(schema, (GraphQLCompositeType) unwrapAll(parentEnv.getOutputType()), field.getName());",
      "151:         boolean isTypeNameIntrospectionField = fieldDefinition == schema.getIntrospectionTypenameFieldDefinition();",
      "",
      "[Removed Lines]",
      "136:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
      "142:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition));",
      "",
      "[Added Lines]",
      "146:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition, graphQLContext));",
      "153:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "167:             return TraversalControl.CONTINUE;",
      "168:         }",
      "171:             return TraversalControl.ABORT;",
      "172:         }",
      "",
      "[Removed Lines]",
      "170:         if (!conditionalNodes.shouldInclude(variables, field.getDirectives())) {",
      "",
      "[Added Lines]",
      "175:         if (!conditionalNodes.shouldInclude(field, variables, null, graphQLContext)) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "176:         GraphQLUnmodifiedType unmodifiedType = unwrapAll(fieldDefinition.getType());",
      "177:         QueryTraversalContext fieldEnv = (unmodifiedType instanceof GraphQLCompositeType)",
      "182:         context.setVar(QueryTraversalContext.class, fieldEnv);",
      "",
      "[Removed Lines]",
      "178:                 ? new QueryTraversalContext(fieldDefinition.getType(), environment, field)",
      "179:                 : new QueryTraversalContext(null, environment, field);// Terminal (scalar) node, EMPTY FRAME",
      "",
      "[Added Lines]",
      "183:                 ? new QueryTraversalContext(fieldDefinition.getType(), environment, field, graphQLContext)",
      "184:                 : new QueryTraversalContext(null, environment, field, graphQLContext);// Terminal (scalar) node, EMPTY FRAME",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "252:         }",
      "253:         return preOrderCallback.visitArgumentValue(environment);",
      "254:     }",
      "",
      "[Removed Lines]",
      "255: }",
      "",
      "[Added Lines]",
      "260: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java": [
      "File: src/main/java/graphql/analysis/QueryTransformer.java -> src/main/java/graphql/analysis/QueryTransformer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.analysis;",
      "3: import graphql.PublicApi;",
      "4: import graphql.language.FragmentDefinition;",
      "5: import graphql.language.Node;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.GraphQLContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "67:         NodeVisitorWithTypeTracking nodeVisitor = new NodeVisitorWithTypeTracking(queryVisitor, noOp, variables, schema, fragmentsByName);",
      "69:         Map<Class<?>, Object> rootVars = new LinkedHashMap<>();",
      "72:         TraverserVisitor<Node> nodeTraverserVisitor = new TraverserVisitor<Node>() {",
      "",
      "[Removed Lines]",
      "70:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null));",
      "",
      "[Added Lines]",
      "71:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null, GraphQLContext.getDefault()));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163:             return new QueryTransformer(schema, root, rootParentType, fragmentsByName, variables);",
      "164:         }",
      "165:     }",
      "",
      "[Removed Lines]",
      "166: }",
      "",
      "[Added Lines]",
      "167: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java": [
      "File: src/main/java/graphql/analysis/QueryTraversalContext.java -> src/main/java/graphql/analysis/QueryTraversalContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.analysis;",
      "3: import graphql.Internal;",
      "4: import graphql.language.SelectionSetContainer;",
      "5: import graphql.schema.GraphQLCompositeType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.GraphQLContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:     private final GraphQLOutputType outputType;",
      "18:     private final QueryVisitorFieldEnvironment environment;",
      "21:     QueryTraversalContext(GraphQLOutputType outputType,",
      "22:                           QueryVisitorFieldEnvironment environment,",
      "24:         this.outputType = outputType;",
      "25:         this.environment = environment;",
      "26:         this.selectionSetContainer = selectionSetContainer;",
      "27:     }",
      "29:     public GraphQLOutputType getOutputType() {",
      "",
      "[Removed Lines]",
      "19:     private final SelectionSetContainer selectionSetContainer;",
      "23:                           SelectionSetContainer selectionSetContainer) {",
      "",
      "[Added Lines]",
      "20:     private final SelectionSetContainer<?> selectionSetContainer;",
      "21:     private final GraphQLContext graphQLContext;",
      "25:                           SelectionSetContainer<?> selectionSetContainer,",
      "26:                           GraphQLContext graphQLContext) {",
      "30:         this.graphQLContext = graphQLContext;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "34:         return (GraphQLCompositeType) GraphQLTypeUtil.unwrapAll(outputType);",
      "35:     }",
      "38:     public QueryVisitorFieldEnvironment getEnvironment() {",
      "39:         return environment;",
      "40:     }",
      "44:         return selectionSetContainer;",
      "45:     }",
      "",
      "[Removed Lines]",
      "42:     public SelectionSetContainer getSelectionSetContainer() {",
      "46: }",
      "",
      "[Added Lines]",
      "45:     public SelectionSetContainer<?> getSelectionSetContainer() {",
      "49:     public GraphQLContext getGraphQLContext() {",
      "50:         return graphQLContext;",
      "51:     }",
      "52: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java": [
      "File: src/main/java/graphql/analysis/QueryTraverser.java -> src/main/java/graphql/analysis/QueryTraverser.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.analysis;",
      "3: import graphql.PublicApi;",
      "4: import graphql.execution.CoercedVariables;",
      "5: import graphql.execution.RawVariables;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.GraphQLContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "176:     private Object visitImpl(QueryVisitor visitFieldCallback, Boolean preOrder) {",
      "177:         Map<Class<?>, Object> rootVars = new LinkedHashMap<>();",
      "180:         QueryVisitor preOrderCallback;",
      "181:         QueryVisitor postOrderCallback;",
      "",
      "[Removed Lines]",
      "178:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null));",
      "",
      "[Added Lines]",
      "179:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null, GraphQLContext.getDefault()));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "341:         }",
      "343:     }",
      "",
      "[Removed Lines]",
      "344: }",
      "",
      "[Added Lines]",
      "345: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java": [
      "File: src/main/java/graphql/execution/ExecutionContext.java -> src/main/java/graphql/execution/ExecutionContext.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "80:         this.errors.set(builder.errors);",
      "81:         this.localContext = builder.localContext;",
      "82:         this.executionInput = builder.executionInput;",
      "84:     }",
      "",
      "[Removed Lines]",
      "83:         queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "[Added Lines]",
      "83:         this.queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java": [
      "File: src/main/java/graphql/execution/FieldCollector.java -> src/main/java/graphql/execution/FieldCollector.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import graphql.Internal;",
      "5: import graphql.language.Field;",
      "6: import graphql.language.FragmentDefinition;",
      "7: import graphql.language.FragmentSpread;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: import graphql.execution.conditional.ConditionalNodes;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "76:         if (visitedFragments.contains(fragmentSpread.getName())) {",
      "77:             return;",
      "78:         }",
      "80:             return;",
      "81:         }",
      "82:         visitedFragments.add(fragmentSpread.getName());",
      "83:         FragmentDefinition fragmentDefinition = parameters.getFragmentsByName().get(fragmentSpread.getName());",
      "86:             return;",
      "87:         }",
      "88:         if (!doesFragmentConditionMatch(parameters, fragmentDefinition)) {",
      "",
      "[Removed Lines]",
      "79:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentSpread.getDirectives())) {",
      "85:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentDefinition.getDirectives())) {",
      "",
      "[Added Lines]",
      "80:         if (!conditionalNodes.shouldInclude(fragmentSpread,",
      "81:                 parameters.getVariables(),",
      "82:                 parameters.getGraphQLSchema(),",
      "83:                 parameters.getGraphQLContext())) {",
      "89:         if (!conditionalNodes.shouldInclude(fragmentDefinition,",
      "90:                 parameters.getVariables(),",
      "91:                 parameters.getGraphQLSchema(),",
      "92:                 parameters.getGraphQLContext())) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "92:     }",
      "94:     private void collectInlineFragment(FieldCollectorParameters parameters, Set<String> visitedFragments, Map<String, MergedField> fields, InlineFragment inlineFragment) {",
      "96:                 !doesFragmentConditionMatch(parameters, inlineFragment)) {",
      "97:             return;",
      "98:         }",
      "",
      "[Removed Lines]",
      "95:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), inlineFragment.getDirectives()) ||",
      "",
      "[Added Lines]",
      "102:         if (!conditionalNodes.shouldInclude(inlineFragment,",
      "103:                 parameters.getVariables(),",
      "104:                 parameters.getGraphQLSchema(),",
      "105:                 parameters.getGraphQLContext()) ||",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "100:     }",
      "102:     private void collectField(FieldCollectorParameters parameters, Map<String, MergedField> fields, Field field) {",
      "104:             return;",
      "105:         }",
      "106:         String name = field.getResultKey();",
      "",
      "[Removed Lines]",
      "103:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), field.getDirectives())) {",
      "",
      "[Added Lines]",
      "113:         if (!conditionalNodes.shouldInclude(field,",
      "114:                 parameters.getVariables(),",
      "115:                 parameters.getGraphQLSchema(),",
      "116:                 parameters.getGraphQLContext())) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "143:     }",
      "",
      "[Removed Lines]",
      "146: }",
      "",
      "[Added Lines]",
      "159: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java": [
      "File: src/main/java/graphql/execution/FieldCollectorParameters.java -> src/main/java/graphql/execution/FieldCollectorParameters.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.execution;",
      "3: import graphql.Assert;",
      "4: import graphql.Internal;",
      "5: import graphql.language.FragmentDefinition;",
      "6: import graphql.schema.GraphQLObjectType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: import graphql.GraphQLContext;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17:     private final Map<String, FragmentDefinition> fragmentsByName;",
      "18:     private final Map<String, Object> variables;",
      "19:     private final GraphQLObjectType objectType;",
      "21:     public GraphQLSchema getGraphQLSchema() {",
      "22:         return graphQLSchema;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21:     private final GraphQLContext graphQLContext;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "34:         return objectType;",
      "35:     }",
      "42:     }",
      "44:     public static Builder newParameters() {",
      "",
      "[Removed Lines]",
      "37:     private FieldCollectorParameters(GraphQLSchema graphQLSchema, Map<String, Object> variables, Map<String, FragmentDefinition> fragmentsByName, GraphQLObjectType objectType) {",
      "38:         this.fragmentsByName = fragmentsByName;",
      "39:         this.graphQLSchema = graphQLSchema;",
      "40:         this.variables = variables;",
      "41:         this.objectType = objectType;",
      "",
      "[Added Lines]",
      "39:     public GraphQLContext getGraphQLContext() {",
      "40:         return graphQLContext;",
      "41:     }",
      "43:     private FieldCollectorParameters(Builder builder) {",
      "44:         this.fragmentsByName = builder.fragmentsByName;",
      "45:         this.graphQLSchema = builder.graphQLSchema;",
      "46:         this.variables = builder.variables;",
      "47:         this.objectType = builder.objectType;",
      "48:         this.graphQLContext = builder.graphQLContext;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "50:         private Map<String, FragmentDefinition> fragmentsByName;",
      "51:         private Map<String, Object> variables;",
      "52:         private GraphQLObjectType objectType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "60:         private GraphQLContext graphQLContext = GraphQLContext.getDefault();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "68:             return this;",
      "69:         }",
      "71:         public Builder fragments(Map<String, FragmentDefinition> fragmentsByName) {",
      "72:             this.fragmentsByName = fragmentsByName;",
      "73:             return this;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "79:         public Builder graphQLContext(GraphQLContext graphQLContext) {",
      "80:             this.graphQLContext = graphQLContext;",
      "81:             return this;",
      "82:         }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "81:         public FieldCollectorParameters build() {",
      "82:             Assert.assertNotNull(graphQLSchema, () -> \"You must provide a schema\");",
      "84:         }",
      "86:     }",
      "",
      "[Removed Lines]",
      "83:             return new FieldCollectorParameters(graphQLSchema, variables, fragmentsByName, objectType);",
      "87: }",
      "",
      "[Added Lines]",
      "96:             return new FieldCollectorParameters(this);",
      "100: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java": [
      "File: src/main/java/graphql/execution/ConditionalNodes.java -> src/main/java/graphql/execution/conditional/ConditionalNodes.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.Assert;",
      "4: import graphql.Internal;",
      "5: import graphql.language.Directive;",
      "6: import graphql.language.NodeUtil;",
      "8: import java.util.List;",
      "9: import java.util.Map;",
      "",
      "[Removed Lines]",
      "1: package graphql.execution;",
      "",
      "[Added Lines]",
      "1: package graphql.execution.conditional;",
      "4: import graphql.GraphQLContext;",
      "6: import graphql.execution.CoercedVariables;",
      "7: import graphql.execution.ValuesResolver;",
      "9: import graphql.language.DirectivesContainer;",
      "11: import graphql.schema.GraphQLSchema;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "14: @Internal",
      "15: public class ConditionalNodes {",
      "17:     public boolean shouldInclude(Map<String, Object> variables, List<Directive> directives) {",
      "19:         if (directives.isEmpty()) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23:     public boolean shouldInclude(DirectivesContainer<?> element,",
      "24:                                  Map<String, Object> variables,",
      "25:                                  GraphQLSchema graphQLSchema,",
      "26:                                  GraphQLContext graphQLContext",
      "27:     ) {",
      "28:         return shouldInclude(variables, element.getDirectives());",
      "30:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "27:         return getDirectiveResult(variables, directives, IncludeDirective.getName(), true);",
      "28:     }",
      "31:         Directive foundDirective = NodeUtil.findNodeByName(directives, directiveName);",
      "32:         if (foundDirective != null) {",
      "33:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(SkipDirective.getArguments(), foundDirective.getArguments(), CoercedVariables.of(variables));",
      "34:             Object flag = argumentValues.get(\"if\");",
      "36:             return (Boolean) flag;",
      "37:         }",
      "38:         return defaultValue;",
      "39:     }",
      "",
      "[Removed Lines]",
      "30:     private boolean getDirectiveResult(Map<String, Object> variables, List<Directive> directives, String directiveName, boolean defaultValue) {",
      "35:             Assert.assertTrue(flag instanceof Boolean, () -> String.format(\"The '%s' directive MUST have a value for the 'if' argument\", directiveName));",
      "41: }",
      "",
      "[Added Lines]",
      "46:     private boolean getDirectiveResult(Map<String, Object> variables, List<Directive> directives, String",
      "47:             directiveName, boolean defaultValue) {",
      "52:             Assert.assertTrue(flag instanceof Boolean, \"The '%s' directive MUST have a value for the 'if' argument\", directiveName);",
      "58: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java": [
      "File: src/main/java/graphql/introspection/GoodFaithIntrospection.java -> src/main/java/graphql/introspection/GoodFaithIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: import java.util.Optional;",
      "21: import java.util.concurrent.atomic.AtomicBoolean;",
      "23: import static graphql.schema.FieldCoordinates.coordinates;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23: import static graphql.normalized.ExecutableNormalizedOperationFactory.Options;",
      "24: import static graphql.normalized.ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "46:     public static final String GOOD_FAITH_INTROSPECTION_DISABLED = \"GOOD_FAITH_INTROSPECTION_DISABLED\";",
      "48:     private static final AtomicBoolean ENABLED_STATE = new AtomicBoolean(true);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54:     public static final int GOOD_FAITH_MAX_FIELDS_COUNT = 500;",
      "58:     public static final int GOOD_FAITH_MAX_DEPTH_COUNT = 20;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "79:     public static Optional<ExecutionResult> checkIntrospection(ExecutionContext executionContext) {",
      "80:         if (isIntrospectionEnabled(executionContext.getGraphQLContext())) {",
      "82:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToENFs = operation.getCoordinatesToNormalizedFields();",
      "83:             for (Map.Entry<FieldCoordinates, Integer> entry : ALLOWED_FIELD_INSTANCES.entrySet()) {",
      "84:                 FieldCoordinates coordinates = entry.getKey();",
      "",
      "[Removed Lines]",
      "81:             ExecutableNormalizedOperation operation = executionContext.getNormalizedQueryTree().get();",
      "",
      "[Added Lines]",
      "91:             ExecutableNormalizedOperation operation = mkOperation(executionContext);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "93:         return Optional.empty();",
      "94:     }",
      "96:     private static boolean isIntrospectionEnabled(GraphQLContext graphQlContext) {",
      "97:         if (!isEnabledJvmWide()) {",
      "98:             return false;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114:     private static ExecutableNormalizedOperation mkOperation(ExecutionContext executionContext) {",
      "115:         Options options = Options.defaultOptions()",
      "116:                 .maxFieldsCount(GOOD_FAITH_MAX_FIELDS_COUNT)",
      "117:                 .maxChildrenDepth(GOOD_FAITH_MAX_DEPTH_COUNT)",
      "118:                 .locale(executionContext.getLocale())",
      "119:                 .graphQLContext(executionContext.getGraphQLContext());",
      "121:         return createExecutableNormalizedOperation(executionContext.getGraphQLSchema(),",
      "122:                 executionContext.getOperationDefinition(),",
      "123:                 executionContext.getFragmentsByName(),",
      "124:                 executionContext.getCoercedVariables(),",
      "125:                 options);",
      "127:     }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java": [
      "File: src/main/java/graphql/introspection/Introspection.java -> src/main/java/graphql/introspection/Introspection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "116:     public static Optional<ExecutionResult> isIntrospectionSensible(MergedSelectionSet mergedSelectionSet, ExecutionContext executionContext) {",
      "117:         GraphQLContext graphQLContext = executionContext.getGraphQLContext();",
      "128:             }",
      "129:         }",
      "132:             return GoodFaithIntrospection.checkIntrospection(executionContext);",
      "133:         }",
      "134:         return Optional.empty();",
      "",
      "[Removed Lines]",
      "118:         MergedField schemaField = mergedSelectionSet.getSubField(SchemaMetaFieldDef.getName());",
      "119:         if (schemaField != null) {",
      "120:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "121:                 return mkDisabledError(schemaField);",
      "122:             }",
      "123:         }",
      "124:         MergedField typeField = mergedSelectionSet.getSubField(TypeMetaFieldDef.getName());",
      "125:         if (typeField != null) {",
      "126:             if (!isIntrospectionEnabled(graphQLContext)) {",
      "127:                 return mkDisabledError(typeField);",
      "130:         if (schemaField != null || typeField != null)",
      "131:         {",
      "",
      "[Added Lines]",
      "119:         boolean isIntrospection = false;",
      "120:         for (String key : mergedSelectionSet.getKeys()) {",
      "121:             String fieldName = mergedSelectionSet.getSubField(key).getName();",
      "122:             if (fieldName.equals(SchemaMetaFieldDef.getName())",
      "123:                     || fieldName.equals(TypeMetaFieldDef.getName())) {",
      "124:                 if (!isIntrospectionEnabled(graphQLContext)) {",
      "125:                     return mkDisabledError(mergedSelectionSet.getSubField(key));",
      "126:                 }",
      "127:                 isIntrospection = true;",
      "128:                 break;",
      "131:         if (isIntrospection) {",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import com.google.common.collect.ImmutableListMultimap;",
      "4: import graphql.Assert;",
      "6: import graphql.execution.MergedField;",
      "7: import graphql.execution.ResultPath;",
      "8: import graphql.language.Field;",
      "9: import graphql.language.OperationDefinition;",
      "10: import graphql.schema.FieldCoordinates;",
      "",
      "[Removed Lines]",
      "5: import graphql.Internal;",
      "",
      "[Added Lines]",
      "5: import graphql.PublicApi;",
      "8: import graphql.execution.directives.QueryDirectives;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "13: import java.util.List;",
      "14: import java.util.Map;",
      "17: public class ExecutableNormalizedOperation {",
      "18:     private final OperationDefinition.Operation operation;",
      "19:     private final String operationName;",
      "20:     private final List<ExecutableNormalizedField> topLevelFields;",
      "21:     private final ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField;",
      "22:     private final Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField;",
      "23:     private final ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields;",
      "25:     public ExecutableNormalizedOperation(",
      "26:             OperationDefinition.Operation operation,",
      "",
      "[Removed Lines]",
      "16: @Internal",
      "",
      "[Added Lines]",
      "25: @PublicApi",
      "32:     private final Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives;",
      "34:     private final int operationFieldCount;",
      "35:     private final int operationDepth;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "28:             List<ExecutableNormalizedField> topLevelFields,",
      "29:             ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField,",
      "30:             Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
      "33:         this.operation = operation;",
      "34:         this.operationName = operationName;",
      "35:         this.topLevelFields = topLevelFields;",
      "36:         this.fieldToNormalizedField = fieldToNormalizedField;",
      "37:         this.normalizedFieldToMergedField = normalizedFieldToMergedField;",
      "38:         this.coordinatesToNormalizedFields = coordinatesToNormalizedFields;",
      "39:     }",
      "41:     public OperationDefinition.Operation getOperation() {",
      "42:         return operation;",
      "43:     }",
      "45:     public String getOperationName() {",
      "46:         return operationName;",
      "47:     }",
      "49:     public ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> getCoordinatesToNormalizedFields() {",
      "50:         return coordinatesToNormalizedFields;",
      "51:     }",
      "53:     public List<ExecutableNormalizedField> getTopLevelFields() {",
      "54:         return topLevelFields;",
      "55:     }",
      "62:     public ImmutableListMultimap<Field, ExecutableNormalizedField> getFieldToNormalizedField() {",
      "63:         return fieldToNormalizedField;",
      "64:     }",
      "66:     public List<ExecutableNormalizedField> getNormalizedFields(Field field) {",
      "67:         return fieldToNormalizedField.get(field);",
      "68:     }",
      "70:     public Map<ExecutableNormalizedField, MergedField> getNormalizedFieldToMergedField() {",
      "71:         return normalizedFieldToMergedField;",
      "72:     }",
      "74:     public MergedField getMergedField(ExecutableNormalizedField executableNormalizedField) {",
      "75:         return normalizedFieldToMergedField.get(executableNormalizedField);",
      "76:     }",
      "78:     public ExecutableNormalizedField getNormalizedField(MergedField mergedField, GraphQLFieldsContainer fieldsContainer, ResultPath resultPath) {",
      "79:         List<ExecutableNormalizedField> executableNormalizedFields = fieldToNormalizedField.get(mergedField.getSingleField());",
      "80:         List<String> keysOnlyPath = resultPath.getKeysOnly();",
      "",
      "[Removed Lines]",
      "31:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields",
      "32:     ) {",
      "",
      "[Added Lines]",
      "43:             Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives,",
      "44:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "45:             int operationFieldCount,",
      "46:             int operationDepth) {",
      "52:         this.normalizedFieldToQueryDirectives = normalizedFieldToQueryDirectives;",
      "54:         this.operationFieldCount = operationFieldCount;",
      "55:         this.operationDepth = operationDepth;",
      "75:     public int getOperationFieldCount() {",
      "76:         return operationFieldCount;",
      "77:     }",
      "82:     public int getOperationDepth() {",
      "83:         return operationDepth;",
      "84:     }",
      "143:     public Map<ExecutableNormalizedField, QueryDirectives> getNormalizedFieldToQueryDirectives() {",
      "144:         return normalizedFieldToQueryDirectives;",
      "146:     }",
      "155:     public QueryDirectives getQueryDirectives(ExecutableNormalizedField executableNormalizedField) {",
      "156:         return normalizedFieldToQueryDirectives.get(executableNormalizedField);",
      "157:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "87:         }",
      "88:         return Assert.assertShouldNeverHappen(\"normalized field not found\");",
      "89:     }",
      "",
      "[Removed Lines]",
      "90: }",
      "",
      "[Added Lines]",
      "180: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
      "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import com.google.common.collect.ImmutableListMultimap;",
      "5: import com.google.common.collect.ImmutableMap;",
      "6: import com.google.common.collect.ImmutableSet;",
      "8: import graphql.collect.ImmutableKit;",
      "9: import graphql.execution.CoercedVariables;",
      "11: import graphql.execution.MergedField;",
      "12: import graphql.execution.RawVariables;",
      "13: import graphql.execution.ValuesResolver;",
      "15: import graphql.introspection.Introspection;",
      "16: import graphql.language.Document;",
      "17: import graphql.language.Field;",
      "",
      "[Removed Lines]",
      "7: import graphql.Internal;",
      "10: import graphql.execution.ConditionalNodes;",
      "14: import graphql.execution.nextgen.Common;",
      "",
      "[Added Lines]",
      "7: import graphql.GraphQLContext;",
      "8: import graphql.PublicApi;",
      "10: import graphql.execution.AbortExecutionException;",
      "15: import graphql.execution.conditional.ConditionalNodes;",
      "16: import graphql.execution.directives.QueryDirectives;",
      "17: import graphql.execution.directives.QueryDirectivesImpl;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "27: import graphql.schema.GraphQLCompositeType;",
      "28: import graphql.schema.GraphQLFieldDefinition;",
      "29: import graphql.schema.GraphQLInterfaceType;",
      "30: import graphql.schema.GraphQLObjectType;",
      "31: import graphql.schema.GraphQLSchema;",
      "32: import graphql.schema.GraphQLType;",
      "34: import graphql.schema.GraphQLUnionType;",
      "35: import graphql.schema.GraphQLUnmodifiedType;",
      "36: import org.jetbrains.annotations.Nullable;",
      "38: import java.util.ArrayList;",
      "39: import java.util.Collection;",
      "40: import java.util.LinkedHashMap;",
      "41: import java.util.List;",
      "42: import java.util.Map;",
      "43: import java.util.Set;",
      "45: import static graphql.Assert.assertNotNull;",
      "46: import static graphql.Assert.assertShouldNeverHappen;",
      "47: import static graphql.collect.ImmutableKit.map;",
      "49: import static graphql.schema.GraphQLTypeUtil.unwrapAll;",
      "50: import static graphql.util.FpKit.filterSet;",
      "51: import static graphql.util.FpKit.groupingBy;",
      "",
      "[Removed Lines]",
      "33: import graphql.schema.GraphQLTypeUtil;",
      "48: import static graphql.execution.MergedField.newMergedField;",
      "",
      "[Added Lines]",
      "33: import graphql.schema.GraphQLNamedOutputType;",
      "39: import graphql.schema.impl.SchemaUtil;",
      "46: import java.util.Locale;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "53: import static java.util.Collections.singleton;",
      "54: import static java.util.Collections.singletonList;",
      "57: public class ExecutableNormalizedOperationFactory {",
      "65:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "67:     }",
      "69:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "70:                                                                                     OperationDefinition operationDefinition,",
      "71:                                                                                     Map<String, FragmentDefinition> fragments,",
      "72:                                                                                     CoercedVariables coercedVariableValues) {",
      "74:     }",
      "76:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(GraphQLSchema graphQLSchema,",
      "77:                                                                                                     Document document,",
      "78:                                                                                                     String operationName,",
      "79:                                                                                                     RawVariables rawVariables) {",
      "82:     }",
      "94:     }",
      "147:     }",
      "173:         }",
      "181:         }",
      "188:         }",
      "209:         }",
      "221:         }",
      "227:             }",
      "236:         }",
      "250:         }",
      "285:                 }",
      "288:                 }",
      "293:             }",
      "294:         }",
      "333:         }",
      "340:         }",
      "345:         }",
      "350:         }",
      "368:             }",
      "369:         }",
      "389:         }",
      "400:         }",
      "420:         }",
      "428:         }",
      "440:         }",
      "444:         }",
      "455:         }",
      "468:             }",
      "469:         }",
      "484:         }",
      "485:     }",
      "",
      "[Removed Lines]",
      "56: @Internal",
      "59:     private final ConditionalNodes conditionalNodes = new ConditionalNodes();",
      "61:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "62:                                                                                     Document document,",
      "63:                                                                                     String operationName,",
      "64:                                                                                     CoercedVariables coercedVariableValues) {",
      "66:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema, getOperationResult.operationDefinition, getOperationResult.fragmentsByName, coercedVariableValues, null);",
      "73:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema, operationDefinition, fragments, coercedVariableValues, null);",
      "80:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "81:         return new ExecutableNormalizedOperationFactory().createExecutableNormalizedOperationImplWithRawVariables(graphQLSchema, getOperationResult.operationDefinition, getOperationResult.fragmentsByName, rawVariables);",
      "84:     private ExecutableNormalizedOperation createExecutableNormalizedOperationImplWithRawVariables(GraphQLSchema graphQLSchema,",
      "85:                                                                                                   OperationDefinition operationDefinition,",
      "86:                                                                                                   Map<String, FragmentDefinition> fragments,",
      "87:                                                                                                   RawVariables rawVariables",
      "88:     ) {",
      "90:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
      "91:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema, variableDefinitions, rawVariables);",
      "92:         Map<String, NormalizedInputValue> normalizedVariableValues = ValuesResolver.getNormalizedVariableValues(graphQLSchema, variableDefinitions, rawVariables);",
      "93:         return createNormalizedQueryImpl(graphQLSchema, operationDefinition, fragments, coercedVariableValues, normalizedVariableValues);",
      "99:     private ExecutableNormalizedOperation createNormalizedQueryImpl(GraphQLSchema graphQLSchema,",
      "100:                                                                     OperationDefinition operationDefinition,",
      "101:                                                                     Map<String, FragmentDefinition> fragments,",
      "102:                                                                     CoercedVariables coercedVariableValues,",
      "103:                                                                     @Nullable Map<String, NormalizedInputValue> normalizedVariableValues) {",
      "104:         FieldCollectorNormalizedQueryParams parameters = FieldCollectorNormalizedQueryParams",
      "105:                 .newParameters()",
      "106:                 .fragments(fragments)",
      "107:                 .schema(graphQLSchema)",
      "108:                 .coercedVariables(coercedVariableValues.toMap())",
      "109:                 .normalizedVariables(normalizedVariableValues)",
      "110:                 .build();",
      "112:         GraphQLObjectType rootType = Common.getOperationRootType(graphQLSchema, operationDefinition);",
      "114:         CollectNFResult collectFromOperationResult = collectFromOperation(parameters, operationDefinition, rootType);",
      "116:         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
      "117:         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "118:         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "120:         for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
      "121:             ImmutableList<FieldAndAstParent> mergedField = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
      "122:             normalizedFieldToMergedField.put(topLevel, newMergedField(map(mergedField, fieldAndAstParent -> fieldAndAstParent.field)).build());",
      "123:             updateFieldToNFMap(topLevel, mergedField, fieldToNormalizedField);",
      "124:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, topLevel);",
      "126:             buildFieldWithChildren(topLevel,",
      "127:                     mergedField,",
      "128:                     parameters,",
      "129:                     fieldToNormalizedField,",
      "130:                     normalizedFieldToMergedField,",
      "131:                     coordinatesToNormalizedFields,",
      "132:                     1);",
      "134:         }",
      "135:         for (FieldCollectorNormalizedQueryParams.PossibleMerger possibleMerger : parameters.possibleMergerList) {",
      "136:             List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
      "137:             ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
      "138:         }",
      "139:         return new ExecutableNormalizedOperation(",
      "140:                 operationDefinition.getOperation(),",
      "141:                 operationDefinition.getName(),",
      "142:                 new ArrayList<>(collectFromOperationResult.children),",
      "143:                 fieldToNormalizedField.build(),",
      "144:                 normalizedFieldToMergedField.build(),",
      "145:                 coordinatesToNormalizedFields.build()",
      "146:         );",
      "150:     private void buildFieldWithChildren(ExecutableNormalizedField field,",
      "151:                                         ImmutableList<FieldAndAstParent> mergedField,",
      "152:                                         FieldCollectorNormalizedQueryParams fieldCollectorNormalizedQueryParams,",
      "153:                                         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldNormalizedField,",
      "154:                                         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
      "155:                                         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
      "156:                                         int curLevel) {",
      "157:         CollectNFResult nextLevel = collectFromMergedField(fieldCollectorNormalizedQueryParams, field, mergedField, curLevel + 1);",
      "159:         for (ExecutableNormalizedField child : nextLevel.children) {",
      "160:             field.addChild(child);",
      "161:             ImmutableList<FieldAndAstParent> mergedFieldForChild = nextLevel.normalizedFieldToAstFields.get(child);",
      "162:             normalizedFieldToMergedField.put(child, newMergedField(map(mergedFieldForChild, fieldAndAstParent -> fieldAndAstParent.field)).build());",
      "163:             updateFieldToNFMap(child, mergedFieldForChild, fieldNormalizedField);",
      "164:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, child);",
      "166:             buildFieldWithChildren(child,",
      "167:                     mergedFieldForChild,",
      "168:                     fieldCollectorNormalizedQueryParams,",
      "169:                     fieldNormalizedField,",
      "170:                     normalizedFieldToMergedField,",
      "171:                     coordinatesToNormalizedFields,",
      "172:                     curLevel + 1);",
      "174:     }",
      "176:     private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
      "177:                                     ImmutableList<FieldAndAstParent> mergedField,",
      "178:                                     ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField) {",
      "179:         for (FieldAndAstParent astField : mergedField) {",
      "180:             fieldToNormalizedField.put(astField.field, executableNormalizedField);",
      "182:     }",
      "184:     private void updateCoordinatedToNFMap(ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields, ExecutableNormalizedField topLevel) {",
      "185:         for (String objectType : topLevel.getObjectTypeNames()) {",
      "186:             FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
      "187:             coordinatesToNormalizedFields.put(coordinates, topLevel);",
      "189:     }",
      "191:     private static class FieldAndAstParent {",
      "192:         final Field field;",
      "193:         final GraphQLCompositeType astParentType;",
      "195:         private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
      "196:             this.field = field;",
      "197:             this.astParentType = astParentType;",
      "198:         }",
      "199:     }",
      "202:     public static class CollectNFResult {",
      "203:         private final Collection<ExecutableNormalizedField> children;",
      "204:         private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
      "206:         public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
      "207:             this.children = children;",
      "208:             this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
      "210:     }",
      "213:     public CollectNFResult collectFromMergedField(FieldCollectorNormalizedQueryParams parameters,",
      "214:                                                   ExecutableNormalizedField executableNormalizedField,",
      "215:                                                   ImmutableList<FieldAndAstParent> mergedField,",
      "216:                                                   int level) {",
      "217:         List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(parameters.getGraphQLSchema());",
      "218:         Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs, parameters.getGraphQLSchema());",
      "219:         if (possibleObjects.isEmpty()) {",
      "220:             return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
      "223:         List<CollectedField> collectedFields = new ArrayList<>();",
      "224:         for (FieldAndAstParent fieldAndAstParent : mergedField) {",
      "225:             if (fieldAndAstParent.field.getSelectionSet() == null) {",
      "226:                 continue;",
      "228:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
      "229:             GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
      "230:             this.collectFromSelectionSet(parameters,",
      "231:                     fieldAndAstParent.field.getSelectionSet(),",
      "232:                     collectedFields,",
      "233:                     (GraphQLCompositeType) astParentType,",
      "234:                     possibleObjects",
      "235:             );",
      "237:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "238:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "239:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "241:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
      "243:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "244:     }",
      "246:     private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
      "247:         Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
      "248:         for (CollectedField collectedField : collectedFields) {",
      "249:             fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
      "251:         return fieldsByName;",
      "252:     }",
      "254:     public CollectNFResult collectFromOperation(FieldCollectorNormalizedQueryParams parameters,",
      "255:                                                 OperationDefinition operationDefinition,",
      "256:                                                 GraphQLObjectType rootType) {",
      "259:         Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
      "260:         List<CollectedField> collectedFields = new ArrayList<>();",
      "261:         collectFromSelectionSet(parameters, operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
      "263:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "264:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "265:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "267:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, 1, null);",
      "269:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "270:     }",
      "272:     private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
      "273:                            FieldCollectorNormalizedQueryParams parameters,",
      "274:                            Map<String, List<CollectedField>> fieldsByName,",
      "275:                            ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
      "276:                            int level,",
      "277:                            ExecutableNormalizedField parent) {",
      "278:         for (String resultKey : fieldsByName.keySet()) {",
      "279:             List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
      "280:             List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
      "281:             for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
      "282:                 ExecutableNormalizedField nf = createNF(parameters, fieldGroup, level, parent);",
      "283:                 if (nf == null) {",
      "284:                     continue;",
      "286:                 for (CollectedField collectedField : fieldGroup.fields) {",
      "287:                     normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
      "289:                 nfListBuilder.add(nf);",
      "290:             }",
      "291:             if (commonParentsGroups.size() > 1) {",
      "292:                 parameters.addPossibleMergers(parent, resultKey);",
      "295:     }",
      "297:     private ExecutableNormalizedField createNF(FieldCollectorNormalizedQueryParams parameters,",
      "298:                                                CollectedFieldGroup collectedFieldGroup,",
      "299:                                                int level,",
      "300:                                                ExecutableNormalizedField parent) {",
      "301:         Field field;",
      "302:         Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "303:         field = collectedFieldGroup.fields.iterator().next().field;",
      "304:         String fieldName = field.getName();",
      "305:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), objectTypes.iterator().next(), fieldName);",
      "307:         Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(),CoercedVariables.of(parameters.getCoercedVariableValues()));",
      "308:         Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
      "309:         if (parameters.getNormalizedVariableValues() != null) {",
      "310:             normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), parameters.getNormalizedVariableValues());",
      "311:         }",
      "312:         ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
      "314:         return ExecutableNormalizedField.newNormalizedField()",
      "315:                 .alias(field.getAlias())",
      "316:                 .resolvedArguments(argumentValues)",
      "317:                 .normalizedArguments(normalizedArgumentValues)",
      "318:                 .astArguments(field.getArguments())",
      "319:                 .objectTypeNames(objectTypeNames)",
      "320:                 .fieldName(fieldName)",
      "321:                 .level(level)",
      "322:                 .parent(parent)",
      "323:                 .build();",
      "324:     }",
      "326:     private static class CollectedFieldGroup {",
      "327:         Set<GraphQLObjectType> objectTypes;",
      "328:         Set<CollectedField> fields;",
      "330:         public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
      "331:             this.fields = fields;",
      "332:             this.objectTypes = objectTypes;",
      "334:     }",
      "336:     private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
      "337:         ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
      "338:         for (CollectedField collectedField : fields) {",
      "339:             objectTypes.addAll(collectedField.objectTypes);",
      "341:         Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
      "342:         Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
      "343:         if (groupByAstParent.size() == 1) {",
      "344:             return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
      "346:         ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
      "347:         for (GraphQLObjectType objectType : allRelevantObjects) {",
      "348:             Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
      "349:             result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
      "351:         return result.build();",
      "352:     }",
      "355:     private void collectFromSelectionSet(FieldCollectorNormalizedQueryParams parameters,",
      "356:                                          SelectionSet selectionSet,",
      "357:                                          List<CollectedField> result,",
      "358:                                          GraphQLCompositeType astTypeCondition,",
      "359:                                          Set<GraphQLObjectType> possibleObjects",
      "360:     ) {",
      "361:         for (Selection<?> selection : selectionSet.getSelections()) {",
      "362:             if (selection instanceof Field) {",
      "363:                 collectField(parameters, result, (Field) selection, possibleObjects, astTypeCondition);",
      "364:             } else if (selection instanceof InlineFragment) {",
      "365:                 collectInlineFragment(parameters, result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
      "366:             } else if (selection instanceof FragmentSpread) {",
      "367:                 collectFragmentSpread(parameters, result, (FragmentSpread) selection, possibleObjects, astTypeCondition);",
      "370:     }",
      "372:     private static class CollectedField {",
      "373:         Field field;",
      "374:         Set<GraphQLObjectType> objectTypes;",
      "375:         GraphQLCompositeType astTypeCondition;",
      "377:         public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
      "378:             this.field = field;",
      "379:             this.objectTypes = objectTypes;",
      "380:             this.astTypeCondition = astTypeCondition;",
      "381:         }",
      "383:         public boolean isAbstract() {",
      "384:             return GraphQLTypeUtil.isInterfaceOrUnion(astTypeCondition);",
      "385:         }",
      "387:         public boolean isConcrete() {",
      "388:             return GraphQLTypeUtil.isObjectType(astTypeCondition);",
      "390:     }",
      "392:     private void collectFragmentSpread(FieldCollectorNormalizedQueryParams parameters,",
      "393:                                        List<CollectedField> result,",
      "394:                                        FragmentSpread fragmentSpread,",
      "395:                                        Set<GraphQLObjectType> possibleObjects,",
      "396:                                        GraphQLCompositeType astTypeCondition",
      "397:     ) {",
      "398:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentSpread.getDirectives())) {",
      "399:             return;",
      "401:         FragmentDefinition fragmentDefinition = assertNotNull(parameters.getFragmentsByName().get(fragmentSpread.getName()));",
      "403:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentDefinition.getDirectives())) {",
      "404:             return;",
      "405:         }",
      "406:         GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(parameters.getGraphQLSchema().getType(fragmentDefinition.getTypeCondition().getName()));",
      "407:         Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
      "408:         collectFromSelectionSet(parameters, fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "409:     }",
      "412:     private void collectInlineFragment(FieldCollectorNormalizedQueryParams parameters,",
      "413:                                        List<CollectedField> result,",
      "414:                                        InlineFragment inlineFragment,",
      "415:                                        Set<GraphQLObjectType> possibleObjects,",
      "416:                                        GraphQLCompositeType astTypeCondition",
      "417:     ) {",
      "418:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), inlineFragment.getDirectives())) {",
      "419:             return;",
      "421:         Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
      "422:         GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
      "424:         if (inlineFragment.getTypeCondition() != null) {",
      "425:             newAstTypeCondition = (GraphQLCompositeType) parameters.getGraphQLSchema().getType(inlineFragment.getTypeCondition().getName());",
      "426:             newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
      "429:         collectFromSelectionSet(parameters, inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "430:     }",
      "432:     private void collectField(FieldCollectorNormalizedQueryParams parameters,",
      "433:                               List<CollectedField> result,",
      "434:                               Field field,",
      "435:                               Set<GraphQLObjectType> possibleObjectTypes,",
      "436:                               GraphQLCompositeType astTypeCondition",
      "437:     ) {",
      "438:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), field.getDirectives())) {",
      "439:             return;",
      "442:         if (possibleObjectTypes.isEmpty()) {",
      "443:             return;",
      "445:         result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
      "446:     }",
      "448:     private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
      "449:                                                              GraphQLCompositeType typeCondition,",
      "450:                                                              GraphQLSchema graphQLSchema) {",
      "452:         ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition, graphQLSchema);",
      "453:         if (currentOnes.isEmpty()) {",
      "454:             return resolvedTypeCondition;",
      "458:         return intersection(currentOnes, resolvedTypeCondition);",
      "459:     }",
      "461:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs, GraphQLSchema graphQLSchema) {",
      "462:         ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
      "464:         for (GraphQLFieldDefinition def : defs) {",
      "465:             GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
      "466:             if (outputType instanceof GraphQLCompositeType) {",
      "467:                 builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType, graphQLSchema));",
      "471:         return builder.build();",
      "472:     }",
      "474:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type, GraphQLSchema graphQLSchema) {",
      "475:         if (type instanceof GraphQLObjectType) {",
      "476:             return ImmutableSet.of((GraphQLObjectType) type);",
      "477:         } else if (type instanceof GraphQLInterfaceType) {",
      "478:             return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
      "479:         } else if (type instanceof GraphQLUnionType) {",
      "480:             List types = ((GraphQLUnionType) type).getTypes();",
      "481:             return ImmutableSet.copyOf(types);",
      "482:         } else {",
      "483:             return assertShouldNeverHappen();",
      "486: }",
      "",
      "[Added Lines]",
      "64: @PublicApi",
      "67:     public static class Options {",
      "68:         private final GraphQLContext graphQLContext;",
      "69:         private final Locale locale;",
      "70:         private final int maxChildrenDepth;",
      "71:         private final int maxFieldsCount;",
      "73:         private Options(GraphQLContext graphQLContext,",
      "74:                         Locale locale,",
      "75:                         int maxChildrenDepth,",
      "76:                         int maxFieldsCount) {",
      "77:             this.graphQLContext = graphQLContext;",
      "78:             this.locale = locale;",
      "79:             this.maxChildrenDepth = maxChildrenDepth;",
      "80:             this.maxFieldsCount = maxFieldsCount;",
      "81:         }",
      "83:         public static Options defaultOptions() {",
      "84:             return new Options(",
      "85:                     GraphQLContext.getDefault(),",
      "86:                     Locale.getDefault(),",
      "87:                     Integer.MAX_VALUE,",
      "88:                     Integer.MAX_VALUE);",
      "89:         }",
      "100:         public Options locale(Locale locale) {",
      "101:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.maxFieldsCount);",
      "102:         }",
      "112:         public Options graphQLContext(GraphQLContext graphQLContext) {",
      "113:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount);",
      "114:         }",
      "124:         public Options maxChildrenDepth(int maxChildrenDepth) {",
      "125:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.maxFieldsCount);",
      "126:         }",
      "136:         public Options maxFieldsCount(int maxFieldsCount) {",
      "137:             return new Options(this.graphQLContext, this.locale, this.maxChildrenDepth, maxFieldsCount);",
      "138:         }",
      "145:         public GraphQLContext getGraphQLContext() {",
      "146:             return graphQLContext;",
      "147:         }",
      "154:         public Locale getLocale() {",
      "155:             return locale;",
      "156:         }",
      "163:         public int getMaxChildrenDepth() {",
      "164:             return maxChildrenDepth;",
      "165:         }",
      "167:         public int getMaxFieldsCount() {",
      "168:             return maxFieldsCount;",
      "169:         }",
      "171:     }",
      "173:     private static final ConditionalNodes conditionalNodes = new ConditionalNodes();",
      "175:     private ExecutableNormalizedOperationFactory() {",
      "177:     }",
      "190:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
      "191:             GraphQLSchema graphQLSchema,",
      "192:             Document document,",
      "193:             String operationName,",
      "194:             CoercedVariables coercedVariableValues",
      "195:     ) {",
      "196:         return createExecutableNormalizedOperation(",
      "197:                 graphQLSchema,",
      "198:                 document,",
      "199:                 operationName,",
      "200:                 coercedVariableValues,",
      "201:                 Options.defaultOptions());",
      "202:     }",
      "216:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
      "217:             GraphQLSchema graphQLSchema,",
      "218:             Document document,",
      "219:             String operationName,",
      "220:             CoercedVariables coercedVariableValues,",
      "221:             Options options",
      "222:     ) {",
      "225:         return new ExecutableNormalizedOperationFactoryImpl(",
      "226:                 graphQLSchema,",
      "227:                 getOperationResult.operationDefinition,",
      "228:                 getOperationResult.fragmentsByName,",
      "229:                 coercedVariableValues,",
      "230:                 null,",
      "231:                 options",
      "232:         ).createNormalizedQueryImpl();",
      "250:         return createExecutableNormalizedOperation(graphQLSchema,",
      "251:                 operationDefinition,",
      "252:                 fragments,",
      "253:                 coercedVariableValues,",
      "254:                 Options.defaultOptions());",
      "268:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
      "269:                                                                                     OperationDefinition operationDefinition,",
      "270:                                                                                     Map<String, FragmentDefinition> fragments,",
      "271:                                                                                     CoercedVariables coercedVariableValues,",
      "272:                                                                                     Options options) {",
      "273:         return new ExecutableNormalizedOperationFactoryImpl(",
      "274:                 graphQLSchema,",
      "275:                 operationDefinition,",
      "276:                 fragments,",
      "277:                 coercedVariableValues,",
      "278:                 null,",
      "279:                 options",
      "280:         ).createNormalizedQueryImpl();",
      "281:     }",
      "298:         return createExecutableNormalizedOperationWithRawVariables(graphQLSchema,",
      "299:                 document,",
      "300:                 operationName,",
      "301:                 rawVariables,",
      "302:                 Options.defaultOptions());",
      "319:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(",
      "320:             GraphQLSchema graphQLSchema,",
      "321:             Document document,",
      "322:             String operationName,",
      "323:             RawVariables rawVariables,",
      "324:             GraphQLContext graphQLContext,",
      "325:             Locale locale",
      "326:     ) {",
      "327:         return createExecutableNormalizedOperationWithRawVariables(",
      "328:                 graphQLSchema,",
      "329:                 document,",
      "330:                 operationName,",
      "331:                 rawVariables,",
      "332:                 Options.defaultOptions().graphQLContext(graphQLContext).locale(locale));",
      "348:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(GraphQLSchema graphQLSchema,",
      "349:                                                                                                     Document document,",
      "350:                                                                                                     String operationName,",
      "351:                                                                                                     RawVariables rawVariables,",
      "352:                                                                                                     Options options) {",
      "353:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
      "354:         OperationDefinition operationDefinition = getOperationResult.operationDefinition;",
      "356:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
      "357:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema,",
      "358:                 variableDefinitions,",
      "359:                 rawVariables);",
      "360:         Map<String, NormalizedInputValue> normalizedVariableValues = ValuesResolver.getNormalizedVariableValues(graphQLSchema,",
      "361:                 variableDefinitions,",
      "362:                 rawVariables);",
      "364:         return new ExecutableNormalizedOperationFactoryImpl(",
      "365:                 graphQLSchema,",
      "366:                 operationDefinition,",
      "367:                 getOperationResult.fragmentsByName,",
      "368:                 coercedVariableValues,",
      "369:                 normalizedVariableValues,",
      "370:                 options",
      "371:         ).createNormalizedQueryImpl();",
      "375:     private static class ExecutableNormalizedOperationFactoryImpl {",
      "376:         private final GraphQLSchema graphQLSchema;",
      "377:         private final OperationDefinition operationDefinition;",
      "378:         private final Map<String, FragmentDefinition> fragments;",
      "379:         private final CoercedVariables coercedVariableValues;",
      "380:         private final @Nullable Map<String, NormalizedInputValue> normalizedVariableValues;",
      "381:         private final Options options;",
      "383:         private final List<PossibleMerger> possibleMergerList = new ArrayList<>();",
      "385:         private final ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
      "386:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
      "387:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
      "388:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
      "389:         private int fieldCount = 0;",
      "390:         private int maxDepthSeen = 0;",
      "392:         private ExecutableNormalizedOperationFactoryImpl(",
      "393:                 GraphQLSchema graphQLSchema,",
      "394:                 OperationDefinition operationDefinition,",
      "395:                 Map<String, FragmentDefinition> fragments,",
      "396:                 CoercedVariables coercedVariableValues,",
      "397:                 @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
      "398:                 Options options",
      "399:         ) {",
      "400:             this.graphQLSchema = graphQLSchema;",
      "401:             this.operationDefinition = operationDefinition;",
      "402:             this.fragments = fragments;",
      "403:             this.coercedVariableValues = coercedVariableValues;",
      "404:             this.normalizedVariableValues = normalizedVariableValues;",
      "405:             this.options = options;",
      "411:         private ExecutableNormalizedOperation createNormalizedQueryImpl() {",
      "412:             GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
      "414:             CollectNFResult collectFromOperationResult = collectFromOperation(rootType);",
      "416:             for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
      "417:                 ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
      "418:                 MergedField mergedField = newMergedField(fieldAndAstParents);",
      "420:                 captureMergedField(topLevel, mergedField);",
      "422:                 updateFieldToNFMap(topLevel, fieldAndAstParents);",
      "423:                 updateCoordinatedToNFMap(topLevel);",
      "425:                 int depthSeen = buildFieldWithChildren(",
      "426:                         topLevel,",
      "427:                         fieldAndAstParents,",
      "428:                         1);",
      "429:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "430:             }",
      "432:             for (PossibleMerger possibleMerger : possibleMergerList) {",
      "433:                 List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
      "434:                 ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
      "435:             }",
      "436:             return new ExecutableNormalizedOperation(",
      "437:                     operationDefinition.getOperation(),",
      "438:                     operationDefinition.getName(),",
      "439:                     new ArrayList<>(collectFromOperationResult.children),",
      "440:                     fieldToNormalizedField.build(),",
      "441:                     normalizedFieldToMergedField.build(),",
      "442:                     normalizedFieldToQueryDirectives.build(),",
      "443:                     coordinatesToNormalizedFields.build(),",
      "444:                     fieldCount,",
      "445:                     maxDepthSeen",
      "446:             );",
      "449:         private void captureMergedField(ExecutableNormalizedField enf, MergedField mergedFld) {",
      "451:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap());",
      "452:             normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
      "453:             normalizedFieldToMergedField.put(enf, mergedFld);",
      "456:         private int buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
      "457:                                            ImmutableList<FieldAndAstParent> fieldAndAstParents,",
      "458:                                            int curLevel) {",
      "459:             checkMaxDepthExceeded(curLevel);",
      "461:             CollectNFResult nextLevel = collectFromMergedField(executableNormalizedField, fieldAndAstParents, curLevel + 1);",
      "463:             int maxDepthSeen = curLevel;",
      "464:             for (ExecutableNormalizedField childENF : nextLevel.children) {",
      "465:                 executableNormalizedField.addChild(childENF);",
      "466:                 ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
      "468:                 MergedField mergedField = newMergedField(childFieldAndAstParents);",
      "469:                 captureMergedField(childENF, mergedField);",
      "471:                 updateFieldToNFMap(childENF, childFieldAndAstParents);",
      "472:                 updateCoordinatedToNFMap(childENF);",
      "474:                 int depthSeen = buildFieldWithChildren(childENF,",
      "475:                         childFieldAndAstParents,",
      "476:                         curLevel + 1);",
      "477:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
      "479:                 checkMaxDepthExceeded(maxDepthSeen);",
      "480:             }",
      "481:             return maxDepthSeen;",
      "484:         private void checkMaxDepthExceeded(int depthSeen) {",
      "485:             if (depthSeen > this.options.getMaxChildrenDepth()) {",
      "486:                 throw new AbortExecutionException(\"Maximum query depth exceeded. \" + depthSeen + \" > \" + this.options.getMaxChildrenDepth());",
      "487:             }",
      "488:         }",
      "490:         private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
      "491:             return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
      "494:         private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
      "495:                                         ImmutableList<FieldAndAstParent> mergedField) {",
      "496:             for (FieldAndAstParent astField : mergedField) {",
      "497:                 fieldToNormalizedField.put(astField.field, executableNormalizedField);",
      "498:             }",
      "499:         }",
      "501:         private void updateCoordinatedToNFMap(ExecutableNormalizedField topLevel) {",
      "502:             for (String objectType : topLevel.getObjectTypeNames()) {",
      "503:                 FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
      "504:                 coordinatesToNormalizedFields.put(coordinates, topLevel);",
      "508:         public CollectNFResult collectFromMergedField(ExecutableNormalizedField executableNormalizedField,",
      "509:                                                       ImmutableList<FieldAndAstParent> mergedField,",
      "510:                                                       int level) {",
      "511:             List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(graphQLSchema);",
      "512:             Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs);",
      "513:             if (possibleObjects.isEmpty()) {",
      "514:                 return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
      "515:             }",
      "517:             List<CollectedField> collectedFields = new ArrayList<>();",
      "518:             for (FieldAndAstParent fieldAndAstParent : mergedField) {",
      "519:                 if (fieldAndAstParent.field.getSelectionSet() == null) {",
      "520:                     continue;",
      "521:                 }",
      "522:                 GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
      "523:                 GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
      "524:                 this.collectFromSelectionSet(fieldAndAstParent.field.getSelectionSet(),",
      "525:                         collectedFields,",
      "526:                         (GraphQLCompositeType) astParentType,",
      "527:                         possibleObjects",
      "528:                 );",
      "529:             }",
      "530:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "531:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "532:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "534:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
      "536:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "537:         }",
      "539:         private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
      "540:             Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
      "541:             for (CollectedField collectedField : collectedFields) {",
      "542:                 fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
      "543:             }",
      "544:             return fieldsByName;",
      "547:         public CollectNFResult collectFromOperation(GraphQLObjectType rootType) {",
      "550:             Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
      "551:             List<CollectedField> collectedFields = new ArrayList<>();",
      "552:             collectFromSelectionSet(operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
      "554:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
      "555:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
      "556:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
      "558:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, 1, null);",
      "560:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
      "561:         }",
      "563:         private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
      "564:                                Map<String, List<CollectedField>> fieldsByName,",
      "565:                                ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
      "566:                                int level,",
      "567:                                ExecutableNormalizedField parent) {",
      "568:             for (String resultKey : fieldsByName.keySet()) {",
      "569:                 List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
      "570:                 List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
      "571:                 for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
      "572:                     ExecutableNormalizedField nf = createNF(fieldGroup, level, parent);",
      "573:                     if (nf == null) {",
      "574:                         continue;",
      "575:                     }",
      "576:                     for (CollectedField collectedField : fieldGroup.fields) {",
      "577:                         normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
      "578:                     }",
      "579:                     nfListBuilder.add(nf);",
      "581:                 if (commonParentsGroups.size() > 1) {",
      "582:                     possibleMergerList.add(new PossibleMerger(parent, resultKey));",
      "587:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
      "588:                                                    int level,",
      "589:                                                    ExecutableNormalizedField parent) {",
      "591:             this.fieldCount++;",
      "592:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
      "593:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
      "594:             }",
      "595:             Field field;",
      "596:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
      "597:             field = collectedFieldGroup.fields.iterator().next().field;",
      "598:             String fieldName = field.getName();",
      "599:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, objectTypes.iterator().next(), fieldName);",
      "601:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(this.coercedVariableValues.toMap()));",
      "602:             Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
      "603:             if (this.normalizedVariableValues != null) {",
      "604:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
      "605:             }",
      "606:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
      "607:             return ExecutableNormalizedField.newNormalizedField()",
      "608:                     .alias(field.getAlias())",
      "609:                     .resolvedArguments(argumentValues)",
      "610:                     .normalizedArguments(normalizedArgumentValues)",
      "611:                     .astArguments(field.getArguments())",
      "612:                     .objectTypeNames(objectTypeNames)",
      "613:                     .fieldName(fieldName)",
      "614:                     .level(level)",
      "615:                     .parent(parent)",
      "616:                     .build();",
      "619:         private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
      "620:             return groupByCommonParentsNoDeferSupport(fields);",
      "623:         private List<CollectedFieldGroup> groupByCommonParentsNoDeferSupport(Collection<CollectedField> fields) {",
      "624:             ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
      "625:             for (CollectedField collectedField : fields) {",
      "626:                 objectTypes.addAll(collectedField.objectTypes);",
      "627:             }",
      "628:             Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
      "629:             Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
      "630:             if (groupByAstParent.size() == 1) {",
      "631:                 return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
      "632:             }",
      "633:             ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
      "634:             for (GraphQLObjectType objectType : allRelevantObjects) {",
      "635:                 Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
      "636:                 result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
      "637:             }",
      "638:             return result.build();",
      "641:         private void collectFromSelectionSet(SelectionSet selectionSet,",
      "642:                                              List<CollectedField> result,",
      "643:                                              GraphQLCompositeType astTypeCondition,",
      "644:                                              Set<GraphQLObjectType> possibleObjects",
      "645:         ) {",
      "646:             for (Selection<?> selection : selectionSet.getSelections()) {",
      "647:                 if (selection instanceof Field) {",
      "648:                     collectField(result, (Field) selection, possibleObjects, astTypeCondition);",
      "649:                 } else if (selection instanceof InlineFragment) {",
      "650:                     collectInlineFragment(result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
      "651:                 } else if (selection instanceof FragmentSpread) {",
      "652:                     collectFragmentSpread(result, (FragmentSpread) selection, possibleObjects);",
      "653:                 }",
      "654:             }",
      "657:         private void collectFragmentSpread(List<CollectedField> result,",
      "658:                                            FragmentSpread fragmentSpread,",
      "659:                                            Set<GraphQLObjectType> possibleObjects",
      "660:         ) {",
      "661:             if (!conditionalNodes.shouldInclude(fragmentSpread,",
      "662:                     this.coercedVariableValues.toMap(),",
      "663:                     this.graphQLSchema,",
      "664:                     this.options.graphQLContext)) {",
      "665:                 return;",
      "666:             }",
      "667:             FragmentDefinition fragmentDefinition = assertNotNull(this.fragments.get(fragmentSpread.getName()));",
      "669:             if (!conditionalNodes.shouldInclude(fragmentDefinition,",
      "670:                     this.coercedVariableValues.toMap(),",
      "671:                     this.graphQLSchema,",
      "672:                     this.options.graphQLContext)) {",
      "673:                 return;",
      "675:             GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(this.graphQLSchema.getType(fragmentDefinition.getTypeCondition().getName()));",
      "676:             Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
      "678:             collectFromSelectionSet(fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "681:         private void collectInlineFragment(List<CollectedField> result,",
      "682:                                            InlineFragment inlineFragment,",
      "683:                                            Set<GraphQLObjectType> possibleObjects,",
      "684:                                            GraphQLCompositeType astTypeCondition",
      "685:         ) {",
      "686:             if (!conditionalNodes.shouldInclude(inlineFragment, this.coercedVariableValues.toMap(), this.graphQLSchema, this.options.graphQLContext)) {",
      "687:                 return;",
      "688:             }",
      "689:             Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
      "690:             GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
      "692:             if (inlineFragment.getTypeCondition() != null) {",
      "693:                 newAstTypeCondition = (GraphQLCompositeType) this.graphQLSchema.getType(inlineFragment.getTypeCondition().getName());",
      "694:                 newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
      "696:             }",
      "698:             collectFromSelectionSet(inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
      "701:         private void collectField(List<CollectedField> result,",
      "702:                                   Field field,",
      "703:                                   Set<GraphQLObjectType> possibleObjectTypes,",
      "704:                                   GraphQLCompositeType astTypeCondition",
      "705:         ) {",
      "706:             if (!conditionalNodes.shouldInclude(field,",
      "707:                     this.coercedVariableValues.toMap(),",
      "708:                     this.graphQLSchema,",
      "709:                     this.options.graphQLContext)) {",
      "710:                 return;",
      "711:             }",
      "713:             if (possibleObjectTypes.isEmpty()) {",
      "714:                 return;",
      "715:             }",
      "716:             result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
      "719:         private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
      "720:                                                                  GraphQLCompositeType typeCondition) {",
      "722:             ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition);",
      "723:             if (currentOnes.isEmpty()) {",
      "724:                 return resolvedTypeCondition;",
      "725:             }",
      "728:             return intersection(currentOnes, resolvedTypeCondition);",
      "731:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs) {",
      "732:             ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
      "734:             for (GraphQLFieldDefinition def : defs) {",
      "735:                 GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
      "736:                 if (outputType instanceof GraphQLCompositeType) {",
      "737:                     builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType));",
      "738:                 }",
      "739:             }",
      "741:             return builder.build();",
      "744:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type) {",
      "745:             if (type instanceof GraphQLObjectType) {",
      "746:                 return ImmutableSet.of((GraphQLObjectType) type);",
      "747:             } else if (type instanceof GraphQLInterfaceType) {",
      "748:                 return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
      "749:             } else if (type instanceof GraphQLUnionType) {",
      "750:                 List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
      "751:                 return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
      "752:             } else {",
      "753:                 return assertShouldNeverHappen();",
      "754:             }",
      "757:         private static class PossibleMerger {",
      "758:             ExecutableNormalizedField parent;",
      "759:             String resultKey;",
      "761:             public PossibleMerger(ExecutableNormalizedField parent, String resultKey) {",
      "762:                 this.parent = parent;",
      "763:                 this.resultKey = resultKey;",
      "764:             }",
      "767:         private static class CollectedField {",
      "768:             Field field;",
      "769:             Set<GraphQLObjectType> objectTypes;",
      "770:             GraphQLCompositeType astTypeCondition;",
      "772:             public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
      "773:                 this.field = field;",
      "774:                 this.objectTypes = objectTypes;",
      "775:                 this.astTypeCondition = astTypeCondition;",
      "776:             }",
      "779:         public static class CollectNFResult {",
      "780:             private final Collection<ExecutableNormalizedField> children;",
      "781:             private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
      "783:             public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
      "784:                 this.children = children;",
      "785:                 this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
      "786:             }",
      "787:         }",
      "789:         private static class FieldAndAstParent {",
      "790:             final Field field;",
      "791:             final GraphQLCompositeType astParentType;",
      "793:             private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
      "794:                 this.field = field;",
      "795:                 this.astParentType = astParentType;",
      "799:         private static class CollectedFieldGroup {",
      "800:             Set<GraphQLObjectType> objectTypes;",
      "801:             Set<CollectedField> fields;",
      "803:             public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
      "804:                 this.fields = fields;",
      "805:                 this.objectTypes = objectTypes;",
      "806:             }",
      "810: }",
      "",
      "---------------"
    ],
    "src/main/java/graphql/schema/impl/SchemaUtil.java||src/main/java/graphql/schema/impl/SchemaUtil.java": [
      "File: src/main/java/graphql/schema/impl/SchemaUtil.java -> src/main/java/graphql/schema/impl/SchemaUtil.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: import com.google.common.collect.ImmutableMap;",
      "5: import graphql.Internal;",
      "6: import graphql.schema.GraphQLImplementingType;",
      "7: import graphql.schema.GraphQLNamedOutputType;",
      "8: import graphql.schema.GraphQLNamedType;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.MissingRootTypeException;",
      "7: import graphql.language.OperationDefinition;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "21: import java.util.Map;",
      "22: import java.util.TreeMap;",
      "24: @Internal",
      "25: public class SchemaUtil {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import static graphql.Assert.assertShouldNeverHappen;",
      "27: import static graphql.language.OperationDefinition.Operation.MUTATION;",
      "28: import static graphql.language.OperationDefinition.Operation.QUERY;",
      "29: import static graphql.language.OperationDefinition.Operation.SUBSCRIPTION;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "93:         final Map<String, GraphQLNamedType> typeMap = schema.getTypeMap();",
      "94:         List<GraphQLSchemaElement> roots = new ArrayList<>(typeMap.values());",
      "95:         roots.addAll(schema.getDirectives());",
      "96:         SchemaTraverser schemaTraverser = new SchemaTraverser(schemaElement -> schemaElement.getChildrenWithTypeReferences().getChildrenAsList());",
      "97:         schemaTraverser.depthFirst(new GraphQLTypeResolvingVisitor(typeMap), roots);",
      "98:     }",
      "",
      "[Removed Lines]",
      "99: }",
      "",
      "[Added Lines]",
      "103:         roots.addAll(schema.getSchemaAppliedDirectives());",
      "108:     public static GraphQLObjectType getOperationRootType(GraphQLSchema graphQLSchema, OperationDefinition operationDefinition) {",
      "109:         OperationDefinition.Operation operation = operationDefinition.getOperation();",
      "110:         if (operation == MUTATION) {",
      "111:             GraphQLObjectType mutationType = graphQLSchema.getMutationType();",
      "112:             if (mutationType == null) {",
      "113:                 throw new MissingRootTypeException(\"Schema is not configured for mutations.\", operationDefinition.getSourceLocation());",
      "114:             }",
      "115:             return mutationType;",
      "116:         } else if (operation == QUERY) {",
      "117:             GraphQLObjectType queryType = graphQLSchema.getQueryType();",
      "118:             if (queryType == null) {",
      "119:                 throw new MissingRootTypeException(\"Schema does not define the required query root type.\", operationDefinition.getSourceLocation());",
      "120:             }",
      "121:             return queryType;",
      "122:         } else if (operation == SUBSCRIPTION) {",
      "123:             GraphQLObjectType subscriptionType = graphQLSchema.getSubscriptionType();",
      "124:             if (subscriptionType == null) {",
      "125:                 throw new MissingRootTypeException(\"Schema is not configured for subscriptions.\", operationDefinition.getSourceLocation());",
      "126:             }",
      "127:             return subscriptionType;",
      "128:         } else {",
      "129:             return assertShouldNeverHappen(\"Unhandled case. An extra operation enum has been added without code support\");",
      "130:         }",
      "131:     }",
      "132: }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy": [
      "File: src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy -> src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "892:         given:",
      "893:         def graphQLSchema = createComplexSchema()",
      "895:         when:",
      "897:             {",
      "898:                 nodeType: __type(name: \"Node\") {",
      "899:                     possibleTypes {",
      "",
      "[Removed Lines]",
      "896:         def result = GraphQL.newGraphQL(graphQLSchema).build().execute(\"\"\"",
      "",
      "[Added Lines]",
      "895:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
      "898:         String query = \"\"\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "901:                         name",
      "902:                     }",
      "903:                 }",
      "905:                     possibleTypes {",
      "906:                         kind",
      "907:                         name",
      "",
      "[Removed Lines]",
      "904:                 resourceType: __type(name: \"Resource\") {",
      "",
      "[Added Lines]",
      "906:             }",
      "907:         \"\"\"",
      "908:         def result = graphQL.execute(query)",
      "910:         then:",
      "911:         !result.errors",
      "912:         result.data == [",
      "913:                 nodeType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "914:         ]",
      "916:         when:",
      "917:         query = \"\"\"",
      "918:         {",
      "919:             resourceType: __type(name: \"Resource\") {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "910:                         kind",
      "911:                         name",
      "912:                     }",
      "915:                     interfaces {",
      "916:                         kind",
      "917:                         name",
      "918:                     }",
      "919:                 }",
      "923:         then:",
      "924:         !result.errors",
      "925:         result.data == [",
      "927:                 imageType   : [interfaces: [[kind: 'INTERFACE', name: 'Resource'], [kind: 'INTERFACE', name: 'Node']]],",
      "929:         ]",
      "930:     }",
      "",
      "[Removed Lines]",
      "913:                 }",
      "914:                 imageType: __type(name: \"Image\") {",
      "920:             }",
      "921:         \"\"\")",
      "926:                 nodeType    : [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
      "928:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "",
      "[Added Lines]",
      "928:                 }",
      "929:         }",
      "930:         \"\"\"",
      "931:         result = graphQL.execute(query)",
      "933:         then:",
      "934:         !result.errors",
      "935:         result.data == [",
      "936:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
      "937:         ]",
      "939:         when:",
      "941:         query = \"\"\"",
      "942:         {",
      "943:             imageType: __type(name: \"Image\") {",
      "949:         }",
      "950:         \"\"\"",
      "951:         result = graphQL.execute(query)",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy": [
      "File: src/test/groovy/graphql/UnionTest.groovy -> src/test/groovy/graphql/UnionTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: class UnionTest extends Specification {",
      "9:         def query = \"\"\"",
      "10:             {",
      "11:                 Named: __type(name: \"Named\") {",
      "",
      "[Removed Lines]",
      "8:     def \"can introspect on union and intersection types\"() {",
      "",
      "[Added Lines]",
      "7:     def \"can introspect on union types\"() {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16:                   possibleTypes { name }",
      "17:                   enumValues { name }",
      "18:                   inputFields { name }",
      "28:                 }",
      "29:             }",
      "30:             \"\"\"",
      "",
      "[Removed Lines]",
      "19:             }",
      "20:                 Pet: __type(name: \"Pet\") {",
      "21:                   kind",
      "22:                   name",
      "23:                   fields { name }",
      "24:                   interfaces { name }",
      "25:                   possibleTypes { name }",
      "26:                   enumValues { name }",
      "27:                   inputFields { name }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "43:                 ],",
      "44:                 enumValues   : null,",
      "45:                 inputFields  : null",
      "48:                                       kind         : 'UNION',",
      "49:                                       name         : 'Pet',",
      "50:                                       fields       : null,",
      "",
      "[Removed Lines]",
      "46:         ],",
      "47:                               Pet  : [",
      "",
      "[Added Lines]",
      "36:         ]]",
      "37:         when:",
      "38:         def executionResult = GraphQL.newGraphQL(GarfieldSchema.GarfieldSchema).build().execute(query)",
      "40:         then:",
      "41:         executionResult.data == expectedResult",
      "44:     }",
      "46:     def \"can introspect on intersection types\"() {",
      "47:         def query = \"\"\"",
      "48:             {",
      "49:                 Pet: __type(name: \"Pet\") {",
      "50:                   kind",
      "51:                   name",
      "52:                   fields { name }",
      "53:                   interfaces { name }",
      "54:                   possibleTypes { name }",
      "55:                   enumValues { name }",
      "56:                   inputFields { name }",
      "57:                 }",
      "58:             }",
      "59:             \"\"\"",
      "61:         def expectedResult = [Pet  : [",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy": [
      "File: src/test/groovy/graphql/execution/ConditionalNodesTest.groovy -> src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.execution",
      "4: import graphql.language.Argument",
      "5: import graphql.language.BooleanValue",
      "6: import graphql.language.Directive",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.execution.conditional.ConditionalNodes",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy": [
      "File: src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy -> src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import graphql.ExecutionInput",
      "4: import graphql.ExecutionResult",
      "5: import graphql.TestUtil",
      "6: import spock.lang.Specification",
      "8: class GoodFaithIntrospectionInstrumentationTest extends Specification {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import graphql.execution.AbortExecutionException",
      "7: import graphql.execution.CoercedVariables",
      "8: import graphql.language.Document",
      "9: import graphql.normalized.ExecutableNormalizedOperationFactory",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "12:     def setup() {",
      "13:         GoodFaithIntrospection.enabledJvmWide(true)",
      "14:     }",
      "15:     def cleanup() {",
      "16:         GoodFaithIntrospection.enabledJvmWide(true)",
      "17:     }",
      "19:     def \"test asking for introspection in good faith\"() {",
      "21:         when:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24:     def \"standard introspection query is inside limits just in general\"() {",
      "26:         when:",
      "27:         Document document = TestUtil.toDocument(IntrospectionQuery.INTROSPECTION_QUERY)",
      "28:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(), document,",
      "29:                 \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
      "31:         then:",
      "32:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 189",
      "33:         eno.getOperationDepth() < GoodFaithIntrospection.GOOD_FAITH_MAX_DEPTH_COUNT  // currently 13",
      "34:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "69:                 alias1 :  __type(name : \"t1\") { name }",
      "70:             }",
      "71:         \"\"\"                                                                                           | _",
      "73:         \"\"\" query badActor {",
      "74:                 __schema { types { name} }",
      "75:                 alias1 : __schema { types { name} }",
      "76:             }",
      "77:         \"\"\"                                                                                           | _",
      "78:     }",
      "80:     def \"mixed general queries and introspections will be stopped anyway\"() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "90:         \"\"\" query badActor {",
      "91:                 a1: __type(name : \"t\") { name }",
      "92:                 a2 :  __type(name : \"t1\") { name }",
      "93:             }",
      "94:         \"\"\"                                                                                           | _",
      "102:         \"\"\" query badActor {",
      "103:                 a1: __schema { types { name} }",
      "104:                 a2 : __schema { types { name} }",
      "105:             }",
      "106:         \"\"\"                                                                                           | _",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "133:         !er.errors.isEmpty()",
      "134:         er.errors[0] instanceof GoodFaithIntrospection.BadFaithIntrospectionError",
      "135:     }",
      "136: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "167:     def \"can stop deep queries\"() {",
      "169:         when:",
      "170:         def query = createDeepQuery(depth)",
      "171:         def then = System.currentTimeMillis()",
      "172:         ExecutionResult er = graphql.execute(query)",
      "173:         def ms = System.currentTimeMillis()-then",
      "175:         then:",
      "176:         !er.errors.isEmpty()",
      "177:         er.errors[0].class == targetError",
      "178:         er.data == null // it stopped hard - it did not continue to normal business",
      "179:         println \"Took \" + ms + \"ms\"",
      "181:         where:",
      "182:         depth | targetError",
      "183:         2     | GoodFaithIntrospection.BadFaithIntrospectionError.class",
      "184:         10    | AbortExecutionException.class",
      "185:         15    | AbortExecutionException.class",
      "186:         20    | AbortExecutionException.class",
      "187:         25    | AbortExecutionException.class",
      "188:         50    | AbortExecutionException.class",
      "189:         100    | AbortExecutionException.class",
      "190:     }",
      "192:     String createDeepQuery(int depth = 25) {",
      "193:         def result = \"\"\"",
      "194: query test {",
      "195:   __schema {",
      "196:     types {",
      "197:       ...F1",
      "198:     }",
      "199:   }",
      "200: }",
      "201: \"\"\"",
      "202:         for (int i = 1; i < depth; i++) {",
      "203:             result += \"\"\"",
      "204:         fragment F$i on __Type {",
      "205:           fields {",
      "206:             type {",
      "207:               ...F${i + 1}",
      "208:             }",
      "209:           }",
      "211:   ofType {",
      "212:     ...F${i + 1}",
      "213:   }",
      "214: }",
      "217: \"\"\"",
      "218:         }",
      "219:         result += \"\"\"",
      "220:         fragment F$depth on __Type {",
      "221:           fields {",
      "222:             type {",
      "223: name",
      "224:             }",
      "225:           }",
      "226: }",
      "229: \"\"\"",
      "230:         return result",
      "231:     }",
      "",
      "---------------"
    ],
    "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
      "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package graphql.normalized",
      "3: import graphql.GraphQL",
      "4: import graphql.TestUtil",
      "5: import graphql.execution.CoercedVariables",
      "6: import graphql.execution.MergedField",
      "7: import graphql.execution.RawVariables",
      "8: import graphql.language.Document",
      "9: import graphql.language.Field",
      "10: import graphql.language.FragmentDefinition",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import graphql.ExecutionInput",
      "6: import graphql.execution.AbortExecutionException",
      "10: import graphql.execution.directives.QueryAppliedDirective",
      "11: import graphql.introspection.IntrospectionQuery",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17: import graphql.util.TraverserVisitorStub",
      "18: import spock.lang.Specification",
      "20: import static graphql.TestUtil.schema",
      "21: import static graphql.language.AstPrinter.printAst",
      "22: import static graphql.parser.Parser.parseValue",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import java.util.stream.Collectors",
      "25: import java.util.stream.IntStream",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "109:         Document document = TestUtil.parseQuery(query)",
      "113:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "115:         expect:",
      "",
      "[Removed Lines]",
      "111:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "112:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "118:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "195:         Document document = TestUtil.parseQuery(query)",
      "199:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "201:         expect:",
      "",
      "[Removed Lines]",
      "197:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "198:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "203:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "275:         Document document = TestUtil.parseQuery(query)",
      "279:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "281:         expect:",
      "",
      "[Removed Lines]",
      "277:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "278:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "282:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "326:         Document document = TestUtil.parseQuery(query)",
      "330:         def printedTree = printTree(tree)",
      "332:         expect:",
      "",
      "[Removed Lines]",
      "328:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "329:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "333:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "369:         Document document = TestUtil.parseQuery(query)",
      "373:         def printedTree = printTree(tree)",
      "375:         expect:",
      "",
      "[Removed Lines]",
      "371:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "372:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "376:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "419:         Document document = TestUtil.parseQuery(query)",
      "423:         def printedTree = printTree(tree)",
      "425:         expect:",
      "",
      "[Removed Lines]",
      "421:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "422:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "426:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "482:         Document document = TestUtil.parseQuery(query)",
      "486:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "488:         expect:",
      "",
      "[Removed Lines]",
      "484:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "485:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "489:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "528:         Document document = TestUtil.parseQuery(query)",
      "532:         def printedTree = printTree(tree)",
      "534:         expect:",
      "",
      "[Removed Lines]",
      "530:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "531:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "535:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "572:         Document document = TestUtil.parseQuery(query)",
      "576:         def printedTree = printTree(tree)",
      "578:         expect:",
      "",
      "[Removed Lines]",
      "574:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "575:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "579:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "616:         Document document = TestUtil.parseQuery(query)",
      "620:         def printedTree = printTree(tree)",
      "622:         expect:",
      "",
      "[Removed Lines]",
      "618:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "619:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "623:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "648:         Document document = TestUtil.parseQuery(query)",
      "652:         def printedTree = printTree(tree)",
      "654:         expect:",
      "",
      "[Removed Lines]",
      "650:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "651:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "655:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "699:         Document document = TestUtil.parseQuery(query)",
      "703:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "705:         expect:",
      "",
      "[Removed Lines]",
      "701:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "702:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "706:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "707:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "709:         expect:",
      "710:         printedTree == ['-Query.pet: Pet',",
      "711:                         '--[Bird, Cat, Dog].name: String'",
      "712:         ]",
      "713:     }",
      "715:     def \"query with fragment and type condition merged together 2\"() {",
      "716:         def graphQLSchema = TestUtil.schema(\"\"\"",
      "717:             type Query {",
      "718:                 pet : Pet",
      "719:             }",
      "720:             interface Pet {",
      "721:                 name : String",
      "722:             }",
      "724:             type Dog implements Pet {",
      "725:                 name : String",
      "726:             }",
      "728:             type Bird implements Pet {",
      "729:                 name : String",
      "730:             }",
      "732:             type Cat implements Pet {",
      "733:                 name : String",
      "734:             }",
      "735:         \"\"\")",
      "736:         def query = \"\"\"",
      "737:         {",
      "738:             pet {",
      "739:                 name",
      "740:                 ... on Dog {",
      "741:                     name",
      "742:                 }",
      "743:                 ... CatFrag",
      "744:             }",
      "745:          }",
      "747:         fragment CatFrag on Cat {",
      "748:             name",
      "749:         }",
      "750:             \"\"\"",
      "751:         assertValidQuery(graphQLSchema, query)",
      "753:         Document document = TestUtil.parseQuery(query)",
      "756:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "737:         Document document = TestUtil.parseQuery(query)",
      "741:         def printedTree = printTree(tree)",
      "743:         expect:",
      "",
      "[Removed Lines]",
      "739:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "740:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "795:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "781:         Document document = TestUtil.parseQuery(query)",
      "785:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "787:         expect:",
      "",
      "[Removed Lines]",
      "783:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "784:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "839:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "821:         Document document = TestUtil.parseQuery(query)",
      "825:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "827:         expect:",
      "",
      "[Removed Lines]",
      "823:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "824:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "879:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "869:         Document document = TestUtil.parseQuery(query)",
      "873:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "875:         expect:",
      "",
      "[Removed Lines]",
      "871:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "872:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "927:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "895:         result",
      "896:     }",
      "898:     static List<String> printTreeWithLevelInfo(ExecutableNormalizedOperation queryExecutionTree, GraphQLSchema schema) {",
      "899:         def result = []",
      "900:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "953:     List<String> printTreeAndDirectives(ExecutableNormalizedOperation queryExecutionTree) {",
      "954:         def result = []",
      "955:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
      "956:         traverser.traverse(queryExecutionTree.getTopLevelFields(), new TraverserVisitorStub<ExecutableNormalizedField>() {",
      "957:             @Override",
      "958:             TraversalControl enter(TraverserContext<ExecutableNormalizedField> context) {",
      "959:                 ExecutableNormalizedField queryExecutionField = context.thisNode()",
      "960:                 def queryDirectives = queryExecutionTree.getQueryDirectives(queryExecutionField)",
      "962:                 def fieldDetails = queryExecutionField.printDetails()",
      "963:                 if (queryDirectives != null) {",
      "964:                     def appliedDirectivesByName = queryDirectives.getImmediateAppliedDirectivesByName()",
      "965:                     if (!appliedDirectivesByName.isEmpty()) {",
      "966:                         fieldDetails += \" \" + printDirectives(appliedDirectivesByName)",
      "967:                     }",
      "968:                 }",
      "969:                 result << fieldDetails",
      "970:                 return TraversalControl.CONTINUE",
      "971:             }",
      "973:             String printDirectives(Map<String, List<QueryAppliedDirective>> stringListMap) {",
      "974:                 String s = stringListMap.collect { entry ->",
      "975:                     entry.value.collect {",
      "976:                         \" @\" + it.name + \"(\" + it.getArguments().collect {",
      "977:                             it.name + \" : \" + '\"' + it.value + '\"'",
      "978:                         }.join(\",\") + \")\"",
      "979:                     }.join(' ')",
      "980:                 }.join(\" \")",
      "981:                 return s",
      "982:             }",
      "983:         })",
      "984:         result",
      "985:     }",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "937:         Document document = TestUtil.parseQuery(query)",
      "938:         def subFooField = (document.getDefinitions()[1] as FragmentDefinition).getSelectionSet().getSelections()[0] as Field",
      "942:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
      "944:         expect:",
      "",
      "[Removed Lines]",
      "940:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "941:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1030:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "980:         def petsField = (document.getDefinitions()[0] as OperationDefinition).getSelectionSet().getSelections()[0] as Field",
      "981:         def idField = petsField.getSelectionSet().getSelections()[0] as Field",
      "985:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
      "",
      "[Removed Lines]",
      "983:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "984:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1073:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1029:         def schemaField = selections[2] as Field",
      "1030:         def typeField = selections[3] as Field",
      "1034:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
      "1036:         expect:",
      "",
      "[Removed Lines]",
      "1032:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1033:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1122:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1087:         Document document = TestUtil.parseQuery(query)",
      "1091:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "1093:         expect:",
      "",
      "[Removed Lines]",
      "1089:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1090:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1179:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1130:         Document document = TestUtil.parseQuery(query)",
      "1134:         def printedTree = printTree(tree)",
      "1136:         expect:",
      "",
      "[Removed Lines]",
      "1132:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1133:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1222:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1158:         Document document = TestUtil.parseQuery(query)",
      "1162:         def normalizedFieldToMergedField = tree.getNormalizedFieldToMergedField()",
      "1163:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
      "1164:         List<MergedField> result = new ArrayList<>()",
      "",
      "[Removed Lines]",
      "1160:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1161:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1250:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1196:         Document document = TestUtil.parseQuery(query)",
      "1200:         when:",
      "1202:         def coordinatesToNormalizedFields = tree.coordinatesToNormalizedFields",
      "1204:         then:",
      "",
      "[Removed Lines]",
      "1198:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1201:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1289:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "1297:         Document document = TestUtil.parseQuery(mutation)",
      "1301:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "1303:         expect:",
      "",
      "[Removed Lines]",
      "1299:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1300:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1388:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "1315:     private void assertValidQuery(GraphQLSchema graphQLSchema, String query, Map variables = [:]) {",
      "1316:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
      "1318:     }",
      "1320:     def \"normalized arguments\"() {",
      "",
      "[Removed Lines]",
      "1317:         assert graphQL.execute(query, null, variables).errors.size() == 0",
      "",
      "[Added Lines]",
      "1405:         def ei = ExecutionInput.newExecutionInput(query).variables(variables).build()",
      "1406:         assert graphQL.execute(ei).errors.size() == 0",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "1346:         assertValidQuery(graphQLSchema, query)",
      "1347:         Document document = TestUtil.parseQuery(query)",
      "1349:         def variables = [",
      "1350:                 var1: [bar: 123],",
      "1351:                 var2: [foo: \"foo\", input2: [bar: 123]]",
      "",
      "[Removed Lines]",
      "1348:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "1354:         def expectedNormalizedArgValue = [foo: new NormalizedInputValue(\"String\", parseValue('\"foo\"')), input2: new NormalizedInputValue(\"Input2\", [bar: new NormalizedInputValue(\"Int\", parseValue(\"123\"))])]",
      "1355:         when:",
      "1357:         def topLevelField = tree.getTopLevelFields().get(0)",
      "1358:         def secondField = topLevelField.getChildren().get(0)",
      "1359:         def arg1 = secondField.getNormalizedArgument(\"arg1\")",
      "",
      "[Removed Lines]",
      "1356:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "1445:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "1393:         assertValidQuery(graphQLSchema, query)",
      "1394:         def document = TestUtil.parseQuery(query)",
      "1397:         when:",
      "1400:         then:",
      "1401:         def topLevelField = tree.getTopLevelFields().get(0)",
      "",
      "[Removed Lines]",
      "1395:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1396:         def variables = [:]",
      "1398:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "1486:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "1429:         assertValidQuery(graphQLSchema, query)",
      "1430:         def document = TestUtil.parseQuery(query)",
      "1432:         def variables = [",
      "1433:                 varIds  : null,",
      "1434:                 otherVar: null,",
      "1435:         ]",
      "1436:         when:",
      "1439:         then:",
      "1440:         def topLevelField = tree.getTopLevelFields().get(0)",
      "",
      "[Removed Lines]",
      "1431:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1437:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "1525:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "1484:         ]",
      "1485:         assertValidQuery(graphQLSchema, query, variables)",
      "1486:         Document document = TestUtil.parseQuery(query)",
      "1488:         when:",
      "1490:         def topLevelField = tree.getTopLevelFields().get(0)",
      "1491:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
      "1492:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
      "",
      "[Removed Lines]",
      "1487:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1489:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "1577:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1537:         ]",
      "1538:         assertValidQuery(graphQLSchema, query, variables)",
      "1539:         Document document = TestUtil.parseQuery(query)",
      "1541:         when:",
      "1543:         def topLevelField = tree.getTopLevelFields().get(0)",
      "1544:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
      "1545:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
      "",
      "[Removed Lines]",
      "1540:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1542:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "1630:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1592:         '''",
      "1593:         assertValidQuery(graphQLSchema, query)",
      "1594:         Document document = TestUtil.parseQuery(query)",
      "1596:         when:",
      "1599:         then:",
      "1600:         tree.normalizedFieldToMergedField.size() == 3",
      "",
      "[Removed Lines]",
      "1595:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1597:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1685:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "1650:         '''",
      "1651:         assertValidQuery(graphQLSchema, query)",
      "1652:         Document document = TestUtil.parseQuery(query)",
      "1654:         when:",
      "1663:         then:",
      "1664:         tree.normalizedFieldToMergedField.size() == 5",
      "1665:         tree.fieldToNormalizedField.size() == 7",
      "1666:     }",
      "",
      "[Removed Lines]",
      "1653:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1655:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "1656:         println String.join(\"\\n\", printTree(tree))",
      "",
      "[Added Lines]",
      "1743:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "1744:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "1748:         printedTree == ['-Query.pets: Pet',",
      "1749:                         '--friend: Cat.catFriend: CatFriend',",
      "1750:                         '---CatFriend.catFriendName: String',",
      "1751:                         '--friend: Dog.dogFriend: DogFriend',",
      "1752:                         '---DogFriend.dogFriendName: String']",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "1696:         '''",
      "1697:         assertValidQuery(graphQLSchema, query)",
      "1698:         Document document = TestUtil.parseQuery(query)",
      "1700:         when:",
      "1702:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "1704:         then:",
      "1705:         printedTree == ['-Query.pets: Pet',",
      "1706:                         '--Cat.name: String',",
      "1707:                         '--Dog.name: String'",
      "1708:         ]",
      "1709:     }",
      "1711:     def \"diverging fields with the same parent type on deeper level\"() {",
      "1712:         given:",
      "1713:         def schema = schema('''",
      "",
      "[Removed Lines]",
      "1699:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1701:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1791:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "1767:         '''",
      "1768:         assertValidQuery(schema, query)",
      "1769:         Document document = TestUtil.parseQuery(query)",
      "1771:         when:",
      "1773:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "1775:         then:",
      "",
      "[Removed Lines]",
      "1770:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1772:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1867:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "1831:         '''",
      "1832:         assertValidQuery(schema, query)",
      "1833:         Document document = TestUtil.parseQuery(query)",
      "1835:         when:",
      "1837:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "1839:         then:",
      "",
      "[Removed Lines]",
      "1834:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1836:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1931:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "1888:         '''",
      "1889:         assertValidQuery(schema, query)",
      "1890:         Document document = TestUtil.parseQuery(query)",
      "1892:         when:",
      "1894:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "1896:         then:",
      "",
      "[Removed Lines]",
      "1891:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1893:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "1988:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "1963:         '''",
      "1964:         assertValidQuery(schema, query)",
      "1965:         Document document = TestUtil.parseQuery(query)",
      "1967:         when:",
      "1969:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "1971:         then:",
      "",
      "[Removed Lines]",
      "1966:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "1968:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2063:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "2025:         '''",
      "2026:         assertValidQuery(schema, query)",
      "2027:         Document document = TestUtil.parseQuery(query)",
      "2029:         when:",
      "2031:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2033:         then:",
      "",
      "[Removed Lines]",
      "2028:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2030:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2125:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "2067:         '''",
      "2068:         assertValidQuery(schema, query)",
      "2069:         Document document = TestUtil.parseQuery(query)",
      "2071:         when:",
      "2073:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2075:         then:",
      "",
      "[Removed Lines]",
      "2070:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2072:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2167:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "2110:         '''",
      "2111:         assertValidQuery(schema, query)",
      "2112:         Document document = TestUtil.parseQuery(query)",
      "2114:         when:",
      "2116:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2118:         then:",
      "",
      "[Removed Lines]",
      "2113:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2115:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2210:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "2153:         '''",
      "2154:         assertValidQuery(schema, query)",
      "2155:         Document document = TestUtil.parseQuery(query)",
      "2157:         when:",
      "2159:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2161:         then:",
      "",
      "[Removed Lines]",
      "2156:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2158:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2253:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "2228:         '''",
      "2229:         assertValidQuery(schema, query)",
      "2230:         Document document = TestUtil.parseQuery(query)",
      "2232:         when:",
      "2234:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2236:         then:",
      "",
      "[Removed Lines]",
      "2231:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2233:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2328:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 47 ---",
      "[Context before]",
      "2304:         '''",
      "2305:         assertValidQuery(schema, query)",
      "2306:         Document document = TestUtil.parseQuery(query)",
      "2308:         when:",
      "2310:         def printedTree = printTreeWithLevelInfo(tree, schema)",
      "2312:         then:",
      "",
      "[Removed Lines]",
      "2307:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2309:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "[Added Lines]",
      "2404:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
      "",
      "---------------",
      "--- Hunk 48 ---",
      "[Context before]",
      "2366:         def variables = [\"true\": Boolean.TRUE, \"false\": Boolean.FALSE]",
      "2367:         assertValidQuery(graphQLSchema, query, variables)",
      "2368:         Document document = TestUtil.parseQuery(query)",
      "2370:         when:",
      "2372:         println String.join(\"\\n\", printTree(tree))",
      "2373:         def printedTree = printTree(tree)",
      "",
      "[Removed Lines]",
      "2369:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
      "2371:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "[Added Lines]",
      "2466:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "",
      "---------------",
      "--- Hunk 49 ---",
      "[Context before]",
      "2383:         ]",
      "2384:     }",
      "2386:     def \"missing argument\"() {",
      "2387:         given:",
      "2388:         String schema = \"\"\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2482:     def \"query directives are captured is respected\"() {",
      "2483:         given:",
      "2484:         String schema = \"\"\"",
      "2485:         directive @fieldDirective(target : String!) on FIELD",
      "2486:         directive @fieldXDirective(target : String!) on FIELD",
      "2488:         type Query {",
      "2489:           pets: Pet",
      "2490:         }",
      "2491:         interface Pet {",
      "2492:           name: String",
      "2493:         }",
      "2494:         type Cat implements Pet {",
      "2495:           name: String",
      "2496:         }",
      "2497:         type Dog implements Pet {",
      "2498:             name: String",
      "2499:         }",
      "2500:         \"\"\"",
      "2501:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2503:         String query = '''",
      "2504:           query q {",
      "2505:               pets {",
      "2506:                 ... on Cat {",
      "2507:                     cName : name @fieldDirective(target : \"Cat.name\")",
      "2508:               }",
      "2509:                 ... on Dog {",
      "2510:                     dName : name @fieldDirective(target : \"Dog.name\") @fieldXDirective(target : \"Dog.name\")",
      "2511:               }",
      "2512:               ... on Pet {",
      "2513:                     pName : name @fieldDirective(target : \"Pet.name\")",
      "2514:               }",
      "2515:           }}",
      "2516:         '''",
      "2518:         def variables = [:]",
      "2519:         assertValidQuery(graphQLSchema, query, variables)",
      "2520:         Document document = TestUtil.parseQuery(query)",
      "2522:         when:",
      "2523:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
      "2524:         def printedTree = printTreeAndDirectives(tree)",
      "2526:         then:",
      "2527:         printedTree == ['Query.pets',",
      "2528:                         'cName: Cat.name  @fieldDirective(target : \"Cat.name\")',",
      "2529:                         'dName: Dog.name  @fieldDirective(target : \"Dog.name\")  @fieldXDirective(target : \"Dog.name\")',",
      "2530:                         'pName: [Cat, Dog].name  @fieldDirective(target : \"Pet.name\")',",
      "2531:         ]",
      "2532:     }",
      "",
      "---------------",
      "--- Hunk 50 ---",
      "[Context before]",
      "2405:         printedTree == ['Query.hello']",
      "2406:         tree.getTopLevelFields().get(0).getNormalizedArguments().isEmpty()",
      "2407:     }",
      "2408: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2557:     def \"reused field via fragments\"() {",
      "2558:         String schema = \"\"\"",
      "2559:         type Query {",
      "2560:           pet: Pet",
      "2561:         }",
      "2562:         type Pet {",
      "2563:           owner: Person",
      "2564:           emergencyContact: Person",
      "2565:         }",
      "2566:         type Person {",
      "2567:           name: String",
      "2568:         }",
      "2569:         \"\"\"",
      "2570:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2572:         String query = \"\"\"",
      "2573: { pet {",
      "2574:   owner { ...personName }",
      "2575:   emergencyContact { ...personName }",
      "2576: }}",
      "2577: fragment personName on Person {",
      "2578:   name",
      "2579: }",
      "2580:         \"\"\"",
      "2582:         assertValidQuery(graphQLSchema, query)",
      "2584:         Document document = TestUtil.parseQuery(query)",
      "2587:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "2588:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "2590:         expect:",
      "2591:         printedTree == ['-Query.pet: Pet',",
      "2592:                         '--Pet.owner: Person',",
      "2593:                         '---Person.name: String',",
      "2594:                         '--Pet.emergencyContact: Person',",
      "2595:                         '---Person.name: String'",
      "2596:         ]",
      "2598:     }",
      "2601:     def \"test interface fields with three different output types (covariance) on the implementations\"() {",
      "2602:         def graphQLSchema = schema(\"\"\"",
      "2603:         interface Animal {",
      "2604:             parent: Animal",
      "2605:             name: String",
      "2606:         }",
      "2607:         type Cat implements Animal {",
      "2608:             name: String",
      "2609:             parent: Cat",
      "2610:         }",
      "2611:         type Dog implements Animal {",
      "2612:             name: String",
      "2613:             parent: Dog",
      "2614:             isGoodBoy: Boolean",
      "2615:         }",
      "2616:         type Bird implements Animal {",
      "2617:             name: String",
      "2618:             parent: Bird",
      "2619:         }",
      "2620:         type Query {",
      "2621:             animal: Animal",
      "2622:         }",
      "2623:         \"\"\")",
      "2625:         def query = \"\"\"",
      "2626:         {",
      "2627:             animal {",
      "2628:                 parent {",
      "2629:                     name",
      "2630:                 }",
      "2631:             }",
      "2632:         }",
      "2633:         \"\"\"",
      "2635:         assertValidQuery(graphQLSchema, query)",
      "2637:         Document document = TestUtil.parseQuery(query)",
      "2640:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "2641:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "2643:         expect:",
      "2644:         printedTree == [",
      "2645:                 \"-Query.animal: Animal\",",
      "2646:                 \"--[Bird, Cat, Dog].parent: Bird, Cat, Dog\",",
      "2647:                 \"---[Bird, Cat, Dog].name: String\",",
      "2648:         ]",
      "2649:     }",
      "2651:     def \"covariants with union fields\"() {",
      "2652:         def graphQLSchema = schema(\"\"\"",
      "2653:         type Query {",
      "2654:             animal: Animal",
      "2655:         }",
      "2656:         interface Animal {",
      "2657:             parent: DogOrCat",
      "2658:             name: String",
      "2659:         }",
      "2660:         type Cat implements Animal {",
      "2661:             name: String",
      "2662:             parent: Cat",
      "2663:         }",
      "2664:         type Dog implements Animal {",
      "2665:             name: String",
      "2666:             parent: Dog",
      "2667:             isGoodBoy: Boolean",
      "2668:         }",
      "2669:         union DogOrCat = Dog | Cat",
      "2670:         \"\"\")",
      "2672:         def query = \"\"\"",
      "2673:         {",
      "2674:             animal {",
      "2675:                 parent {",
      "2676:                   __typename",
      "2677:                 }",
      "2678:             }",
      "2679:         }",
      "2680:         \"\"\"",
      "2682:         assertValidQuery(graphQLSchema, query)",
      "2684:         Document document = TestUtil.parseQuery(query)",
      "2687:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
      "2688:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
      "2690:         expect:",
      "2691:         printedTree == [",
      "2692:                 \"-Query.animal: Animal\",",
      "2693:                 \"--[Cat, Dog].parent: Cat, Dog\",",
      "2694:                 \"---[Cat, Dog].__typename: String!\",",
      "2695:         ]",
      "2696:     }",
      "2698:     def \"query cannot exceed max depth\"() {",
      "2699:         String schema = \"\"\"",
      "2700:         type Query {",
      "2701:             animal: Animal",
      "2702:         }",
      "2703:         interface Animal {",
      "2704:             name: String",
      "2705:             friends: [Animal]",
      "2706:         }",
      "2707:         type Bird implements Animal {",
      "2708:             name: String",
      "2709:             friends: [Animal]",
      "2710:         }",
      "2711:         type Cat implements Animal {",
      "2712:             name: String",
      "2713:             friends: [Animal]",
      "2714:             breed: String",
      "2715:         }",
      "2716:         type Dog implements Animal {",
      "2717:             name: String",
      "2718:             breed: String",
      "2719:             friends: [Animal]",
      "2720:         }",
      "2721:         \"\"\"",
      "2722:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2727:         def animalSubselection = IntStream.rangeClosed(1, queryDepth - 2)",
      "2728:                 .mapToObj {",
      "2729:                     \"\"",
      "2730:                 }",
      "2731:                 .reduce(\"CHILD\") { acc, value ->",
      "2732:                     acc.replace(\"CHILD\", \"friends { CHILD }\")",
      "2733:                 }",
      "2734:                 .replace(\"CHILD\", \"name\")",
      "2737:         String query = \"\"\"",
      "2738:         {",
      "2739:             animal {",
      "2740:                 $animalSubselection",
      "2741:             }",
      "2742:         }",
      "2743:         \"\"\"",
      "2745:         def limit = 50",
      "2747:         assertValidQuery(graphQLSchema, query)",
      "2749:         Document document = TestUtil.parseQuery(query)",
      "2751:         when:",
      "2752:         Exception exception",
      "2753:         try {",
      "2754:             ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2755:                     graphQLSchema,",
      "2756:                     document,",
      "2757:                     null,",
      "2758:                     RawVariables.emptyVariables(),",
      "2759:                     ExecutableNormalizedOperationFactory.Options.defaultOptions().maxChildrenDepth(limit))",
      "2760:         } catch (Exception e) {",
      "2761:             exception = e",
      "2762:         }",
      "2764:         then:",
      "2765:         if (queryDepth > limit) {",
      "2766:             assert exception != null",
      "2767:             assert exception.message.contains(\"depth exceeded\")",
      "2768:             assert exception.message.contains(\"> 50\")",
      "2769:         } else {",
      "2770:             assert exception == null",
      "2771:         }",
      "2773:         where:",
      "2774:         _ | queryDepth",
      "2775:         _ | 49",
      "2776:         _ | 50",
      "2777:         _ | 51",
      "2778:     }",
      "2780:     def \"big query is fine as long as depth is under limit\"() {",
      "2781:         String schema = \"\"\"",
      "2782:         type Query {",
      "2783:             animal: Animal",
      "2784:         }",
      "2785:         interface Animal {",
      "2786:             name: String",
      "2787:             friends: [Friend]",
      "2788:         }",
      "2789:         union Pet = Dog | Cat",
      "2790:         type Friend {",
      "2791:             name: String",
      "2792:             isBirdOwner: Boolean",
      "2793:             isCatOwner: Boolean",
      "2794:             pets: [Pet]",
      "2795:         }",
      "2796:         type Bird implements Animal {",
      "2797:             name: String",
      "2798:             friends: [Friend]",
      "2799:         }",
      "2800:         type Cat implements Animal {",
      "2801:             name: String",
      "2802:             friends: [Friend]",
      "2803:             breed: String",
      "2804:         }",
      "2805:         type Dog implements Animal {",
      "2806:             name: String",
      "2807:             breed: String",
      "2808:             friends: [Friend]",
      "2809:         }",
      "2810:         \"\"\"",
      "2812:         def garbageFields = IntStream.range(0, 1000)",
      "2813:                 .mapToObj {",
      "2814:                     \"\"\"test_$it: friends { name }\"\"\"",
      "2815:                 }",
      "2816:                 .collect(Collectors.joining(\"\\n\"))",
      "2818:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2820:         String query = \"\"\"",
      "2821:         {",
      "2822:             animal {",
      "2823:                 name",
      "2824:                 otherName: name",
      "2825:                 ... on Animal {",
      "2826:                     name",
      "2827:                 }",
      "2828:                 ... on Cat {",
      "2829:                     name",
      "2830:                     friends {",
      "2831:                         ... on Friend {",
      "2832:                             isCatOwner",
      "2833:                             pets {",
      "2834:                                 ... on Dog {",
      "2835:                                     name",
      "2836:                                 }",
      "2837:                             }",
      "2838:                         }",
      "2839:                     }",
      "2840:                 }",
      "2841:                 ... on Bird {",
      "2842:                     friends {",
      "2843:                         isBirdOwner",
      "2844:                     }",
      "2845:                     friends {",
      "2846:                         name",
      "2847:                         pets {",
      "2848:                             ... on Cat {",
      "2849:                                 breed",
      "2850:                             }",
      "2851:                         }",
      "2852:                     }",
      "2853:                 }",
      "2854:                 ... on Dog {",
      "2855:                     name",
      "2856:                 }",
      "2857:                 $garbageFields",
      "2858:             }",
      "2859:         }",
      "2860:         \"\"\"",
      "2862:         assertValidQuery(graphQLSchema, query)",
      "2864:         Document document = TestUtil.parseQuery(query)",
      "2866:         when:",
      "2867:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2868:                 graphQLSchema,",
      "2869:                 document,",
      "2870:                 null,",
      "2871:                 RawVariables.emptyVariables(),",
      "2872:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxChildrenDepth(5))",
      "2874:         then:",
      "2875:         noExceptionThrown()",
      "2876:     }",
      "2878:     def \"big query exceeding fields count\"() {",
      "2879:         String schema = \"\"\"",
      "2880:         type Query {",
      "2881:             animal: Animal",
      "2882:         }",
      "2883:         interface Animal {",
      "2884:             name: String",
      "2885:             friends: [Friend]",
      "2886:         }",
      "2887:         union Pet = Dog | Cat",
      "2888:         type Friend {",
      "2889:             name: String",
      "2890:             isBirdOwner: Boolean",
      "2891:             isCatOwner: Boolean",
      "2892:             pets: [Pet]",
      "2893:         }",
      "2894:         type Bird implements Animal {",
      "2895:             name: String",
      "2896:             friends: [Friend]",
      "2897:         }",
      "2898:         type Cat implements Animal {",
      "2899:             name: String",
      "2900:             friends: [Friend]",
      "2901:             breed: String",
      "2902:         }",
      "2903:         type Dog implements Animal {",
      "2904:             name: String",
      "2905:             breed: String",
      "2906:             friends: [Friend]",
      "2907:         }",
      "2908:         \"\"\"",
      "2910:         def garbageFields = IntStream.range(0, 1000)",
      "2911:                 .mapToObj {",
      "2912:                     \"\"\"test_$it: friends { name }\"\"\"",
      "2913:                 }",
      "2914:                 .collect(Collectors.joining(\"\\n\"))",
      "2916:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2918:         String query = \"\"\"",
      "2919:         {",
      "2920:             animal {",
      "2921:                 name",
      "2922:                 otherName: name",
      "2923:                 ... on Animal {",
      "2924:                     name",
      "2925:                 }",
      "2926:                 ... on Cat {",
      "2927:                     name",
      "2928:                     friends {",
      "2929:                         ... on Friend {",
      "2930:                             isCatOwner",
      "2931:                             pets {",
      "2932:                                 ... on Dog {",
      "2933:                                     name",
      "2934:                                 }",
      "2935:                             }",
      "2936:                         }",
      "2937:                     }",
      "2938:                 }",
      "2939:                 ... on Bird {",
      "2940:                     friends {",
      "2941:                         isBirdOwner",
      "2942:                     }",
      "2943:                     friends {",
      "2944:                         name",
      "2945:                         pets {",
      "2946:                             ... on Cat {",
      "2947:                                 breed",
      "2948:                             }",
      "2949:                         }",
      "2950:                     }",
      "2951:                 }",
      "2952:                 ... on Dog {",
      "2953:                     name",
      "2954:                 }",
      "2955:                 $garbageFields",
      "2956:             }",
      "2957:         }",
      "2958:         \"\"\"",
      "2960:         assertValidQuery(graphQLSchema, query)",
      "2962:         Document document = TestUtil.parseQuery(query)",
      "2964:         when:",
      "2965:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2966:                 graphQLSchema,",
      "2967:                 document,",
      "2968:                 null,",
      "2969:                 RawVariables.emptyVariables(),",
      "2970:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(2013))",
      "2972:         then:",
      "2973:         def e = thrown(AbortExecutionException)",
      "2974:         e.message == \"Maximum field count exceeded. 2014 > 2013\"",
      "2975:     }",
      "2977:     def \"small query exceeding fields count\"() {",
      "2978:         String schema = \"\"\"",
      "2979:         type Query {",
      "2980:             hello: String",
      "2981:         }",
      "2982:         \"\"\"",
      "2984:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "2986:         String query = \"\"\" {hello a1: hello}\"\"\"",
      "2988:         assertValidQuery(graphQLSchema, query)",
      "2990:         Document document = TestUtil.parseQuery(query)",
      "2992:         when:",
      "2993:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "2994:                 graphQLSchema,",
      "2995:                 document,",
      "2996:                 null,",
      "2997:                 RawVariables.emptyVariables(),",
      "2998:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(1))",
      "3000:         then:",
      "3001:         def e = thrown(AbortExecutionException)",
      "3002:         e.message == \"Maximum field count exceeded. 2 > 1\"",
      "3005:     }",
      "3007:     def \"query not exceeding fields count\"() {",
      "3008:         String schema = \"\"\"",
      "3009:         type Query {",
      "3010:             dogs: [Dog]",
      "3011:         }",
      "3012:         type Dog {",
      "3013:             name: String",
      "3014:             breed: String",
      "3015:         }",
      "3016:         \"\"\"",
      "3018:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3020:         String query = \"\"\" {dogs{name breed }}\"\"\"",
      "3022:         assertValidQuery(graphQLSchema, query)",
      "3024:         Document document = TestUtil.parseQuery(query)",
      "3026:         when:",
      "3027:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3028:                 graphQLSchema,",
      "3029:                 document,",
      "3030:                 null,",
      "3031:                 RawVariables.emptyVariables(),",
      "3032:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(3))",
      "3034:         then:",
      "3035:         notThrown(AbortExecutionException)",
      "3038:     }",
      "3040:     def \"query with meta fields exceeding fields count\"() {",
      "3041:         String schema = \"\"\"",
      "3042:         type Query {",
      "3043:             hello: String",
      "3044:         }",
      "3045:         \"\"\"",
      "3047:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3049:         String query = IntrospectionQuery.INTROSPECTION_QUERY",
      "3051:         assertValidQuery(graphQLSchema, query)",
      "3053:         Document document = TestUtil.parseQuery(query)",
      "3055:         when:",
      "3056:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3057:                 graphQLSchema,",
      "3058:                 document,",
      "3059:                 null,",
      "3060:                 RawVariables.emptyVariables(),",
      "3063:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(187))",
      "3064:         println result.normalizedFieldToMergedField.size()",
      "3066:         then:",
      "3067:         def e = thrown(AbortExecutionException)",
      "3070:         e.message == \"Maximum field count exceeded. 188 > 187\"",
      "3071:     }",
      "3073:     def \"can capture depth and field count\"() {",
      "3074:         String schema = \"\"\"",
      "3075:         type Query {",
      "3076:             foo: Foo",
      "3077:         }",
      "3079:         type Foo {",
      "3080:             stop : String",
      "3081:             bar : Bar",
      "3082:         }",
      "3084:         type Bar {",
      "3085:             stop : String",
      "3086:             foo : Foo",
      "3087:         }",
      "3088:         \"\"\"",
      "3090:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
      "3092:         String query = \"{ foo { bar { foo { bar { foo { stop bar { stop }}}}}}}\"",
      "3094:         assertValidQuery(graphQLSchema, query)",
      "3096:         Document document = TestUtil.parseQuery(query)",
      "3098:         when:",
      "3099:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3100:                 graphQLSchema,",
      "3101:                 document,",
      "3102:                 null,",
      "3103:                 RawVariables.emptyVariables()",
      "3104:         )",
      "3106:         then:",
      "3107:         result.getOperationDepth() == 7",
      "3108:         result.getOperationFieldCount() == 8",
      "3109:     }",
      "3111:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperation(",
      "3112:             GraphQLSchema graphQLSchema,",
      "3113:             Document document,",
      "3114:             String operationName,",
      "3115:             CoercedVariables coercedVariableValues",
      "3116:     ) {",
      "3118:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
      "3120:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, operationName, coercedVariableValues, options)",
      "3121:     }",
      "3123:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperationWithRawVariables(",
      "3124:             GraphQLSchema graphQLSchema,",
      "3125:             Document document,",
      "3126:             String operationName,",
      "3127:             RawVariables rawVariables",
      "3128:     ) {",
      "3130:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
      "3132:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
      "3133:                 graphQLSchema,",
      "3134:                 document,",
      "3135:                 operationName,",
      "3136:                 rawVariables,",
      "3137:                 options",
      "3138:         )",
      "3139:     }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java": [
      "File: src/test/java/benchmark/BenchmarkUtils.java -> src/test/java/benchmark/BenchmarkUtils.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: package benchmark;",
      "6: import java.net.URL;",
      "7: import java.nio.charset.Charset;",
      "8: import java.util.concurrent.Callable;",
      "10: public class BenchmarkUtils {",
      "12:     static String loadResource(String name) {",
      "13:         return asRTE(() -> {",
      "14:             URL resource = BenchmarkUtils.class.getClassLoader().getResource(name);",
      "17:         });",
      "18:     }",
      "",
      "[Removed Lines]",
      "3: import com.google.common.io.Files;",
      "5: import java.io.File;",
      "15:             return String.join(\"\\n\", Files.readLines(new File(resource.toURI()), Charset.defaultCharset()));",
      "",
      "[Added Lines]",
      "3: import com.google.common.io.ByteStreams;",
      "5: import java.io.BufferedReader;",
      "6: import java.io.IOException;",
      "7: import java.io.InputStream;",
      "8: import java.io.InputStreamReader;",
      "11: import java.time.LocalDateTime;",
      "12: import java.time.format.DateTimeFormatter;",
      "17:     @SuppressWarnings(\"UnstableApiUsage\")",
      "21:             if (resource == null) {",
      "22:                 throw new IllegalArgumentException(\"missing resource: \" + name);",
      "23:             }",
      "24:             byte[] bytes;",
      "25:             try (InputStream inputStream = resource.openStream()) {",
      "27:                 bytes = ByteStreams.toByteArray(inputStream);",
      "28:             }",
      "29:             return new String(bytes, Charset.defaultCharset());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25:         }",
      "26:     }",
      "",
      "[Removed Lines]",
      "28: }",
      "",
      "[Added Lines]",
      "41:     public static void runInToolingForSomeTimeThenExit(Runnable setup, Runnable r, Runnable tearDown) {",
      "42:         int runForMillis = getRunForMillis();",
      "43:         if (runForMillis <= 0) {",
      "44:             System.out.print(\"'runForMillis' environment var is not set - continuing  \\n\");",
      "45:             return;",
      "46:         }",
      "47:         System.out.printf(\"Running initial code in some tooling - runForMillis=%d  \\n\", runForMillis);",
      "48:         System.out.print(\"Get your tooling in order and press enter...\");",
      "49:         readLine();",
      "50:         System.out.print(\"Lets go...\\n\");",
      "51:         setup.run();",
      "53:         DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"HH:mm:ss\");",
      "54:         long now, then = System.currentTimeMillis();",
      "55:         do {",
      "56:             now = System.currentTimeMillis();",
      "57:             long msLeft = runForMillis - (now - then);",
      "58:             System.out.printf(\"\\t%s Running in loop... %s ms left\\n\", dtf.format(LocalDateTime.now()), msLeft);",
      "59:             r.run();",
      "60:             now = System.currentTimeMillis();",
      "61:         } while ((now - then) < runForMillis);",
      "63:         tearDown.run();",
      "65:         System.out.printf(\"This ran for %d millis.  Exiting...\\n\", System.currentTimeMillis() - then);",
      "66:         System.exit(0);",
      "67:     }",
      "69:     private static void readLine() {",
      "70:         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));",
      "71:         try {",
      "72:             br.readLine();",
      "73:         } catch (IOException e) {",
      "74:             throw new RuntimeException(e);",
      "75:         }",
      "76:     }",
      "78:     private static int getRunForMillis() {",
      "79:         String runFor = System.getenv(\"runForMillis\");",
      "80:         try {",
      "81:             return Integer.parseInt(runFor);",
      "82:         } catch (NumberFormatException e) {",
      "83:             return -1;",
      "84:         }",
      "85:     }",
      "87: }",
      "",
      "---------------"
    ],
    "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java": [
      "File: src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java -> src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package benchmark;",
      "3: import graphql.execution.CoercedVariables;",
      "4: import graphql.language.Document;",
      "5: import graphql.normalized.ExecutableNormalizedOperation;",
      "6: import graphql.normalized.ExecutableNormalizedOperationFactory;",
      "7: import graphql.parser.Parser;",
      "8: import graphql.schema.GraphQLSchema;",
      "9: import graphql.schema.idl.SchemaGenerator;",
      "10: import org.openjdk.jmh.annotations.Benchmark;",
      "11: import org.openjdk.jmh.annotations.BenchmarkMode;",
      "12: import org.openjdk.jmh.annotations.Fork;",
      "13: import org.openjdk.jmh.annotations.Level;",
      "14: import org.openjdk.jmh.annotations.Measurement;",
      "15: import org.openjdk.jmh.annotations.Mode;",
      "16: import org.openjdk.jmh.annotations.OutputTimeUnit;",
      "17: import org.openjdk.jmh.annotations.Param;",
      "18: import org.openjdk.jmh.annotations.Scope;",
      "19: import org.openjdk.jmh.annotations.Setup;",
      "20: import org.openjdk.jmh.annotations.State;",
      "21: import org.openjdk.jmh.annotations.Warmup;",
      "22: import org.openjdk.jmh.runner.Runner;",
      "23: import org.openjdk.jmh.runner.RunnerException;",
      "24: import org.openjdk.jmh.runner.options.Options;",
      "25: import org.openjdk.jmh.runner.options.OptionsBuilder;",
      "27: import java.util.concurrent.TimeUnit;",
      "29: import static graphql.normalized.ExecutableNormalizedOperationFactory.*;",
      "31: @State(Scope.Benchmark)",
      "32: @Warmup(iterations = 2, time = 5)",
      "33: @Measurement(iterations = 3, time = 5)",
      "34: @Fork(2)",
      "35: public class ENFBenchmarkDeepIntrospection {",
      "37:     @Param({\"2\", \"10\", \"20\"})",
      "38:     int howDeep = 2;",
      "40:     String query = \"\";",
      "42:     GraphQLSchema schema;",
      "43:     Document document;",
      "45:     @Setup(Level.Trial)",
      "46:     public void setUp() {",
      "47:         String schemaString = BenchmarkUtils.loadResource(\"large-schema-2.graphqls\");",
      "48:         schema = SchemaGenerator.createdMockedSchema(schemaString);",
      "50:         query = createDeepQuery(howDeep);",
      "51:         document = Parser.parse(query);",
      "52:     }",
      "53:     @Benchmark",
      "54:     @BenchmarkMode(Mode.AverageTime)",
      "55:     @OutputTimeUnit(TimeUnit.MILLISECONDS)",
      "56:     public ExecutableNormalizedOperation benchMarkAvgTime() {",
      "57:         ExecutableNormalizedOperationFactory.Options options  = ExecutableNormalizedOperationFactory.Options.defaultOptions();",
      "58:         ExecutableNormalizedOperation executableNormalizedOperation = createExecutableNormalizedOperation(schema,",
      "59:                 document,",
      "60:                 null,",
      "61:                 CoercedVariables.emptyVariables(),",
      "62:                 options);",
      "63:         return executableNormalizedOperation;",
      "64:     }",
      "66:     public static void main(String[] args) throws RunnerException {",
      "67:         runAtStartup();",
      "69:         Options opt = new OptionsBuilder()",
      "70:                 .include(\"benchmark.ENFBenchmarkDeepIntrospection\")",
      "71:                 .build();",
      "73:         new Runner(opt).run();",
      "74:     }",
      "76:     private static void runAtStartup() {",
      "78:         ENFBenchmarkDeepIntrospection benchmarkIntrospection = new ENFBenchmarkDeepIntrospection();",
      "79:         benchmarkIntrospection.howDeep = 2;",
      "81:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
      "82:                 benchmarkIntrospection::setUp,",
      "83:                 () -> { while (true) { benchmarkIntrospection.benchMarkAvgTime(); }},",
      "84:                 () ->{}",
      "85:         );",
      "86:     }",
      "90:     private static String createDeepQuery(int depth) {",
      "91:         String result = \"query test {\\n\" +",
      "92:                 \"  __schema {\\n\" +",
      "93:                 \"    types {\\n\" +",
      "94:                 \"      ...F1\\n\" +",
      "95:                 \"    }\\n\" +",
      "96:                 \"  }\\n\" +",
      "97:                 \"}\\n\";",
      "99:         for (int i = 1; i < depth; i++) {",
      "100:             result += \"        fragment F\" + i + \" on __Type {\\n\" +",
      "101:                     \"          fields {\\n\" +",
      "102:                     \"            type {\\n\" +",
      "103:                     \"              ...F\" + (i + 1) +\"\\n\" +",
      "104:                     \"            }\\n\" +",
      "105:                     \"          }\\n\" +",
      "106:                     \"\\n\" +",
      "107:                     \"          ofType {\\n\" +",
      "108:                     \"            ...F\"+ (i + 1) + \"\\n\" +",
      "109:                     \"          }\\n\" +",
      "110:                     \"        }\\n\";",
      "111:         }",
      "112:         result += \"        fragment F\" + depth + \" on __Type {\\n\" +",
      "113:                 \"          fields {\\n\" +",
      "114:                 \"            type {\\n\" +",
      "115:                 \"name\\n\" +",
      "116:                 \"            }\\n\" +",
      "117:                 \"          }\\n\" +",
      "118:                 \"}\\n\";",
      "119:         return result;",
      "120:     }",
      "122: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "81d5cb6aac3825741d2a09964fa497b0ab9ebd3b",
      "candidate_info": {
        "commit_hash": "81d5cb6aac3825741d2a09964fa497b0ab9ebd3b",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/81d5cb6aac3825741d2a09964fa497b0ab9ebd3b",
        "files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
        ],
        "message": "Fix typo (backport PR #3544)",
        "before_after_code_files": [
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql-java/graphql-java/pull/3543"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
          ],
          "candidate": [
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:         public Options maxFieldsCount(int maxFieldsCount) {",
          "138:         }",
          "",
          "[Removed Lines]",
          "137:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, maxFieldsCount);",
          "",
          "[Added Lines]",
          "137:             return new Options(this.graphQLContext, this.locale, this.maxChildrenDepth, maxFieldsCount);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "512827f4c4d651837dd8cf6928a440bcef090908",
      "candidate_info": {
        "commit_hash": "512827f4c4d651837dd8cf6928a440bcef090908",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/512827f4c4d651837dd8cf6928a440bcef090908",
        "files": [
          "src/main/java/graphql/execution/conditional/ConditionalNodes.java"
        ],
        "message": "comment",
        "before_after_code_files": [
          "src/main/java/graphql/execution/conditional/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql-java/graphql-java/pull/3543"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/execution/conditional/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java": [
          "File: src/main/java/graphql/execution/conditional/ConditionalNodes.java -> src/main/java/graphql/execution/conditional/ConditionalNodes.java"
        ]
      }
    },
    {
      "candidate_hash": "01296ce1dbfc8bf61d50361a8c1704594242e832",
      "candidate_info": {
        "commit_hash": "01296ce1dbfc8bf61d50361a8c1704594242e832",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/01296ce1dbfc8bf61d50361a8c1704594242e832",
        "files": [
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ],
        "message": "bring ENOF test up to date with master",
        "before_after_code_files": [
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql-java/graphql-java/pull/3543"
        ],
        "olp_code_files": {
          "patch": [
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ],
          "candidate": [
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.normalized",
          "3: import graphql.GraphQL",
          "4: import graphql.TestUtil",
          "5: import graphql.execution.AbortExecutionException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import graphql.ExecutionInput",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:         Document document = TestUtil.parseQuery(query)",
          "118:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "120:         expect:",
          "",
          "[Removed Lines]",
          "116:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "117:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "118:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:         Document document = TestUtil.parseQuery(query)",
          "204:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "206:         expect:",
          "",
          "[Removed Lines]",
          "202:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "203:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "203:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:         Document document = TestUtil.parseQuery(query)",
          "284:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "286:         expect:",
          "",
          "[Removed Lines]",
          "282:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "283:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "282:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "331:         Document document = TestUtil.parseQuery(query)",
          "335:         def printedTree = printTree(tree)",
          "337:         expect:",
          "",
          "[Removed Lines]",
          "333:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "334:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "333:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "374:         Document document = TestUtil.parseQuery(query)",
          "378:         def printedTree = printTree(tree)",
          "380:         expect:",
          "",
          "[Removed Lines]",
          "376:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "377:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "376:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "424:         Document document = TestUtil.parseQuery(query)",
          "428:         def printedTree = printTree(tree)",
          "430:         expect:",
          "",
          "[Removed Lines]",
          "426:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "427:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "426:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "487:         Document document = TestUtil.parseQuery(query)",
          "491:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "493:         expect:",
          "",
          "[Removed Lines]",
          "489:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "490:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "489:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "533:         Document document = TestUtil.parseQuery(query)",
          "537:         def printedTree = printTree(tree)",
          "539:         expect:",
          "",
          "[Removed Lines]",
          "535:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "536:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "535:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "577:         Document document = TestUtil.parseQuery(query)",
          "581:         def printedTree = printTree(tree)",
          "583:         expect:",
          "",
          "[Removed Lines]",
          "579:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "580:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "579:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "621:         Document document = TestUtil.parseQuery(query)",
          "625:         def printedTree = printTree(tree)",
          "627:         expect:",
          "",
          "[Removed Lines]",
          "623:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "624:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "623:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "653:         Document document = TestUtil.parseQuery(query)",
          "657:         def printedTree = printTree(tree)",
          "659:         expect:",
          "",
          "[Removed Lines]",
          "655:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "656:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "655:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "704:         Document document = TestUtil.parseQuery(query)",
          "708:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "710:         expect:",
          "",
          "[Removed Lines]",
          "706:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "707:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "706:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "754:         Document document = TestUtil.parseQuery(query)",
          "758:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "760:         expect:",
          "",
          "[Removed Lines]",
          "756:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "757:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "756:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "793:         Document document = TestUtil.parseQuery(query)",
          "797:         def printedTree = printTree(tree)",
          "799:         expect:",
          "",
          "[Removed Lines]",
          "795:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "796:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "795:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "837:         Document document = TestUtil.parseQuery(query)",
          "841:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "843:         expect:",
          "",
          "[Removed Lines]",
          "839:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "840:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "839:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "877:         Document document = TestUtil.parseQuery(query)",
          "881:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "883:         expect:",
          "",
          "[Removed Lines]",
          "879:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "880:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "879:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "925:         Document document = TestUtil.parseQuery(query)",
          "929:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "931:         expect:",
          "",
          "[Removed Lines]",
          "927:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "928:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "927:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1027:         Document document = TestUtil.parseQuery(query)",
          "1028:         def subFooField = (document.getDefinitions()[1] as FragmentDefinition).getSelectionSet().getSelections()[0] as Field",
          "1032:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "1034:         expect:",
          "",
          "[Removed Lines]",
          "1030:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1031:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1030:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1070:         def petsField = (document.getDefinitions()[0] as OperationDefinition).getSelectionSet().getSelections()[0] as Field",
          "1071:         def idField = petsField.getSelectionSet().getSelections()[0] as Field",
          "1075:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "",
          "[Removed Lines]",
          "1073:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1074:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1073:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1119:         def schemaField = selections[2] as Field",
          "1120:         def typeField = selections[3] as Field",
          "1124:         def fieldToNormalizedField = tree.getFieldToNormalizedField()",
          "1126:         expect:",
          "",
          "[Removed Lines]",
          "1122:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1123:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1122:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1177:         Document document = TestUtil.parseQuery(query)",
          "1181:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1183:         expect:",
          "",
          "[Removed Lines]",
          "1179:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1180:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1179:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1220:         Document document = TestUtil.parseQuery(query)",
          "1224:         def printedTree = printTree(tree)",
          "1226:         expect:",
          "",
          "[Removed Lines]",
          "1222:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1223:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1222:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1248:         Document document = TestUtil.parseQuery(query)",
          "1252:         def normalizedFieldToMergedField = tree.getNormalizedFieldToMergedField()",
          "1253:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
          "1254:         List<MergedField> result = new ArrayList<>()",
          "",
          "[Removed Lines]",
          "1250:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1251:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1250:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1286:         Document document = TestUtil.parseQuery(query)",
          "1290:         when:",
          "1292:         def coordinatesToNormalizedFields = tree.coordinatesToNormalizedFields",
          "1294:         then:",
          "",
          "[Removed Lines]",
          "1288:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1291:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1289:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1387:         Document document = TestUtil.parseQuery(mutation)",
          "1391:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1393:         expect:",
          "",
          "[Removed Lines]",
          "1389:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1390:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1388:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1405:     private void assertValidQuery(GraphQLSchema graphQLSchema, String query, Map variables = [:]) {",
          "1406:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
          "1408:     }",
          "1410:     def \"normalized arguments\"() {",
          "",
          "[Removed Lines]",
          "1407:         assert graphQL.execute(query, null, variables).errors.size() == 0",
          "",
          "[Added Lines]",
          "1405:         def ei = ExecutionInput.newExecutionInput(query).variables(variables).build()",
          "1406:         assert graphQL.execute(ei).errors.size() == 0",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1436:         assertValidQuery(graphQLSchema, query)",
          "1437:         Document document = TestUtil.parseQuery(query)",
          "1439:         def variables = [",
          "1440:                 var1: [bar: 123],",
          "1441:                 var2: [foo: \"foo\", input2: [bar: 123]]",
          "",
          "[Removed Lines]",
          "1438:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1444:         def expectedNormalizedArgValue = [foo: new NormalizedInputValue(\"String\", parseValue('\"foo\"')), input2: new NormalizedInputValue(\"Input2\", [bar: new NormalizedInputValue(\"Int\", parseValue(\"123\"))])]",
          "1445:         when:",
          "1447:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1448:         def secondField = topLevelField.getChildren().get(0)",
          "1449:         def arg1 = secondField.getNormalizedArgument(\"arg1\")",
          "",
          "[Removed Lines]",
          "1446:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1445:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1483:         assertValidQuery(graphQLSchema, query)",
          "1484:         def document = TestUtil.parseQuery(query)",
          "1487:         when:",
          "1490:         then:",
          "1491:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1485:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1486:         def variables = [:]",
          "1488:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1486:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1519:         assertValidQuery(graphQLSchema, query)",
          "1520:         def document = TestUtil.parseQuery(query)",
          "1522:         def variables = [",
          "1523:                 varIds  : null,",
          "1524:                 otherVar: null,",
          "1525:         ]",
          "1526:         when:",
          "1529:         then:",
          "1530:         def topLevelField = tree.getTopLevelFields().get(0)",
          "",
          "[Removed Lines]",
          "1521:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1527:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1525:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1574:         ]",
          "1575:         assertValidQuery(graphQLSchema, query, variables)",
          "1576:         Document document = TestUtil.parseQuery(query)",
          "1578:         when:",
          "1580:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1581:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
          "1582:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
          "",
          "[Removed Lines]",
          "1577:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1579:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1577:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1627:         ]",
          "1628:         assertValidQuery(graphQLSchema, query, variables)",
          "1629:         Document document = TestUtil.parseQuery(query)",
          "1631:         when:",
          "1633:         def topLevelField = tree.getTopLevelFields().get(0)",
          "1634:         def arg1 = topLevelField.getNormalizedArgument(\"arg1\")",
          "1635:         def arg2 = topLevelField.getNormalizedArgument(\"arg2\")",
          "",
          "[Removed Lines]",
          "1630:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1632:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "1630:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1682:         '''",
          "1683:         assertValidQuery(graphQLSchema, query)",
          "1684:         Document document = TestUtil.parseQuery(query)",
          "1686:         when:",
          "1689:         then:",
          "1690:         tree.normalizedFieldToMergedField.size() == 3",
          "",
          "[Removed Lines]",
          "1685:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1687:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1685:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1740:         '''",
          "1741:         assertValidQuery(graphQLSchema, query)",
          "1742:         Document document = TestUtil.parseQuery(query)",
          "1744:         when:",
          "1746:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1748:         then:",
          "",
          "[Removed Lines]",
          "1743:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1745:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1743:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1788:         '''",
          "1789:         assertValidQuery(graphQLSchema, query)",
          "1790:         Document document = TestUtil.parseQuery(query)",
          "1792:         when:",
          "1794:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1796:         then:",
          "",
          "[Removed Lines]",
          "1791:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1793:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1791:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1864:         '''",
          "1865:         assertValidQuery(schema, query)",
          "1866:         Document document = TestUtil.parseQuery(query)",
          "1868:         when:",
          "1870:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1872:         then:",
          "",
          "[Removed Lines]",
          "1867:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1869:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1867:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1928:         '''",
          "1929:         assertValidQuery(schema, query)",
          "1930:         Document document = TestUtil.parseQuery(query)",
          "1932:         when:",
          "1934:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1936:         then:",
          "",
          "[Removed Lines]",
          "1931:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1933:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1931:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1985:         '''",
          "1986:         assertValidQuery(schema, query)",
          "1987:         Document document = TestUtil.parseQuery(query)",
          "1989:         when:",
          "1991:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "1993:         then:",
          "",
          "[Removed Lines]",
          "1988:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1990:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "1988:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2060:         '''",
          "2061:         assertValidQuery(schema, query)",
          "2062:         Document document = TestUtil.parseQuery(query)",
          "2064:         when:",
          "2066:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2068:         then:",
          "",
          "[Removed Lines]",
          "2063:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2065:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2063:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2122:         '''",
          "2123:         assertValidQuery(schema, query)",
          "2124:         Document document = TestUtil.parseQuery(query)",
          "2126:         when:",
          "2128:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2130:         then:",
          "",
          "[Removed Lines]",
          "2125:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2127:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2125:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2164:         '''",
          "2165:         assertValidQuery(schema, query)",
          "2166:         Document document = TestUtil.parseQuery(query)",
          "2168:         when:",
          "2170:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2172:         then:",
          "",
          "[Removed Lines]",
          "2167:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2169:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2167:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2207:         '''",
          "2208:         assertValidQuery(schema, query)",
          "2209:         Document document = TestUtil.parseQuery(query)",
          "2211:         when:",
          "2213:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2215:         then:",
          "",
          "[Removed Lines]",
          "2210:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2212:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2210:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2250:         '''",
          "2251:         assertValidQuery(schema, query)",
          "2252:         Document document = TestUtil.parseQuery(query)",
          "2254:         when:",
          "2256:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2258:         then:",
          "",
          "[Removed Lines]",
          "2253:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2255:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2253:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2325:         '''",
          "2326:         assertValidQuery(schema, query)",
          "2327:         Document document = TestUtil.parseQuery(query)",
          "2329:         when:",
          "2331:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2333:         then:",
          "",
          "[Removed Lines]",
          "2328:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2330:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2328:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2401:         '''",
          "2402:         assertValidQuery(schema, query)",
          "2403:         Document document = TestUtil.parseQuery(query)",
          "2405:         when:",
          "2407:         def printedTree = printTreeWithLevelInfo(tree, schema)",
          "2409:         then:",
          "",
          "[Removed Lines]",
          "2404:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2406:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2404:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(schema, document, null, RawVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2463:         def variables = [\"true\": Boolean.TRUE, \"false\": Boolean.FALSE]",
          "2464:         assertValidQuery(graphQLSchema, query, variables)",
          "2465:         Document document = TestUtil.parseQuery(query)",
          "2467:         when:",
          "2469:         println String.join(\"\\n\", printTree(tree))",
          "2470:         def printedTree = printTree(tree)",
          "",
          "[Removed Lines]",
          "2466:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2468:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2466:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "2520:         def variables = [:]",
          "2521:         assertValidQuery(graphQLSchema, query, variables)",
          "2522:         Document document = TestUtil.parseQuery(query)",
          "2524:         when:",
          "2526:         def printedTree = printTreeAndDirectives(tree)",
          "2528:         then:",
          "",
          "[Removed Lines]",
          "2523:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2525:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "[Added Lines]",
          "2523:         def tree = localCreateExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "2586:         Document document = TestUtil.parseQuery(query)",
          "2590:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2592:         expect:",
          "",
          "[Removed Lines]",
          "2588:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2589:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2587:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "2639:         Document document = TestUtil.parseQuery(query)",
          "2643:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2645:         expect:",
          "",
          "[Removed Lines]",
          "2641:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2642:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2640:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "2686:         Document document = TestUtil.parseQuery(query)",
          "2690:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2692:         expect:",
          "",
          "[Removed Lines]",
          "2688:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2689:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "[Added Lines]",
          "2687:         def tree = localCreateExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3139:                 options",
          "3140:         )",
          "3141:     }",
          "",
          "[Removed Lines]",
          "3142: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "592ec17d20f7b307bf10fdab26868da1445cde76",
      "candidate_info": {
        "commit_hash": "592ec17d20f7b307bf10fdab26868da1445cde76",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/592ec17d20f7b307bf10fdab26868da1445cde76",
        "files": [
          "src/main/java/graphql/Assert.java",
          "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
          "src/main/java/graphql/analysis/QueryTransformer.java",
          "src/main/java/graphql/analysis/QueryTraversalContext.java",
          "src/main/java/graphql/analysis/QueryTraverser.java",
          "src/main/java/graphql/execution/ExecutionContext.java",
          "src/main/java/graphql/execution/FieldCollector.java",
          "src/main/java/graphql/execution/FieldCollectorParameters.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodes.java",
          "src/main/java/graphql/introspection/GoodFaithIntrospection.java",
          "src/main/java/graphql/introspection/Introspection.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/main/java/graphql/schema/impl/SchemaUtil.java",
          "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "src/test/groovy/graphql/UnionTest.groovy",
          "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
          "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "src/test/java/benchmark/BenchmarkUtils.java",
          "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
        ],
        "message": "Backport PR 3539 and bring more files up to v21 for API compatibility",
        "before_after_code_files": [
          "src/main/java/graphql/Assert.java||src/main/java/graphql/Assert.java",
          "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
          "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java",
          "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java",
          "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java",
          "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java",
          "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java",
          "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java",
          "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java",
          "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "src/main/java/graphql/schema/impl/SchemaUtil.java||src/main/java/graphql/schema/impl/SchemaUtil.java",
          "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
          "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
          "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
          "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java",
          "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql-java/graphql-java/pull/3543"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/Assert.java||src/main/java/graphql/Assert.java",
            "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
            "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java",
            "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java",
            "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java",
            "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java",
            "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java",
            "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java",
            "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java",
            "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/main/java/graphql/schema/impl/SchemaUtil.java||src/main/java/graphql/schema/impl/SchemaUtil.java",
            "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
            "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
            "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
            "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
            "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java",
            "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
          ],
          "candidate": [
            "src/main/java/graphql/Assert.java||src/main/java/graphql/Assert.java",
            "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
            "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java",
            "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java",
            "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java",
            "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java",
            "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java",
            "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java",
            "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java",
            "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
            "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
            "src/main/java/graphql/schema/impl/SchemaUtil.java||src/main/java/graphql/schema/impl/SchemaUtil.java",
            "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
            "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy",
            "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
            "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
            "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
            "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java",
            "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/Assert.java||src/main/java/graphql/Assert.java": [
          "File: src/main/java/graphql/Assert.java -> src/main/java/graphql/Assert.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         throw new AssertException(\"condition expected to be true\");",
          "86:     }",
          "88:     public static void assertFalse(boolean condition, Supplier<String> msg) {",
          "89:         if (!condition) {",
          "90:             return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     public static void assertTrue(boolean condition, String constantMsg) {",
          "89:         if (condition) {",
          "90:             return;",
          "91:         }",
          "92:         throwAssert(constantMsg);",
          "93:     }",
          "95:     public static void assertTrue(boolean condition, String msgFmt, Object arg1) {",
          "96:         if (condition) {",
          "97:             return;",
          "98:         }",
          "99:         throwAssert(msgFmt, arg1);",
          "100:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:         throw new AssertException(String.format(invalidNameErrorMessage, name));",
          "118:     }",
          "120: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:     private static <T> T throwAssert(String format, Object... args) {",
          "135:         throw new AssertException(format(format, args));",
          "136:     }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java||src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java": [
          "File: src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java -> src/main/java/graphql/analysis/NodeVisitorWithTypeTracking.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.analysis;",
          "3: import graphql.Internal;",
          "4: import graphql.execution.CoercedVariables;",
          "6: import graphql.execution.ValuesResolver;",
          "7: import graphql.introspection.Introspection;",
          "8: import graphql.language.Argument;",
          "9: import graphql.language.Directive;",
          "",
          "[Removed Lines]",
          "5: import graphql.execution.ConditionalNodes;",
          "",
          "[Added Lines]",
          "3: import graphql.GraphQLContext;",
          "7: import graphql.execution.conditional.ConditionalNodes;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     @Override",
          "68:     public TraversalControl visitInlineFragment(InlineFragment inlineFragment, TraverserContext<Node> context) {",
          "70:             return TraversalControl.ABORT;",
          "71:         }",
          "",
          "[Removed Lines]",
          "69:         if (!conditionalNodes.shouldInclude(variables, inlineFragment.getDirectives())) {",
          "",
          "[Added Lines]",
          "70:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "71:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
          "72:         if (!conditionalNodes.shouldInclude(inlineFragment, variables, null, graphQLContext)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:         preOrderCallback.visitInlineFragment(inlineFragmentEnvironment);",
          "85:         GraphQLCompositeType fragmentCondition;",
          "86:         if (inlineFragment.getTypeCondition() != null) {",
          "",
          "[Removed Lines]",
          "83:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:             fragmentCondition = parentEnv.getUnwrappedOutputType();",
          "91:         }",
          "94:         return TraversalControl.CONTINUE;",
          "95:     }",
          "97:     @Override",
          "100:             return TraversalControl.ABORT;",
          "101:         }",
          "105:         if (context.getPhase() == LEAVE) {",
          "106:             postOrderCallback.visitFragmentDefinition(fragmentEnvironment);",
          "",
          "[Removed Lines]",
          "93:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(fragmentCondition, parentEnv.getEnvironment(), inlineFragment));",
          "98:     public TraversalControl visitFragmentDefinition(FragmentDefinition node, TraverserContext<Node> context) {",
          "99:         if (!conditionalNodes.shouldInclude(variables, node.getDirectives())) {",
          "103:         QueryVisitorFragmentDefinitionEnvironment fragmentEnvironment = new QueryVisitorFragmentDefinitionEnvironmentImpl(node, context, schema);",
          "",
          "[Added Lines]",
          "95:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(fragmentCondition, parentEnv.getEnvironment(), inlineFragment, graphQLContext));",
          "100:     public TraversalControl visitFragmentDefinition(FragmentDefinition fragmentDefinition, TraverserContext<Node> context) {",
          "101:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "102:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
          "103:         if (!conditionalNodes.shouldInclude(fragmentDefinition, variables, null, graphQLContext)) {",
          "107:         QueryVisitorFragmentDefinitionEnvironment fragmentEnvironment = new QueryVisitorFragmentDefinitionEnvironmentImpl(fragmentDefinition, context, schema);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "108:         }",
          "109:         preOrderCallback.visitFragmentDefinition(fragmentEnvironment);",
          "114:         return TraversalControl.CONTINUE;",
          "115:     }",
          "117:     @Override",
          "118:     public TraversalControl visitFragmentSpread(FragmentSpread fragmentSpread, TraverserContext<Node> context) {",
          "120:             return TraversalControl.ABORT;",
          "121:         }",
          "123:         FragmentDefinition fragmentDefinition = fragmentsByName.get(fragmentSpread.getName());",
          "125:             return TraversalControl.ABORT;",
          "126:         }",
          "",
          "[Removed Lines]",
          "111:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "112:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(node.getTypeCondition().getName());",
          "113:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), node));",
          "119:         if (!conditionalNodes.shouldInclude(variables, fragmentSpread.getDirectives())) {",
          "124:         if (!conditionalNodes.shouldInclude(variables, fragmentDefinition.getDirectives())) {",
          "",
          "[Added Lines]",
          "115:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(fragmentDefinition.getTypeCondition().getName());",
          "116:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition, graphQLContext));",
          "122:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "123:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
          "124:         if (!conditionalNodes.shouldInclude(fragmentSpread, variables, null, graphQLContext)) {",
          "129:         if (!conditionalNodes.shouldInclude(fragmentDefinition, variables, null, graphQLContext)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134:         preOrderCallback.visitFragmentSpread(fragmentSpreadEnvironment);",
          "138:         GraphQLCompositeType typeCondition = (GraphQLCompositeType) schema.getType(fragmentDefinition.getTypeCondition().getName());",
          "139:         assertNotNull(typeCondition,",
          "140:                 () -> format(\"Invalid type condition '%s' in fragment '%s'\", fragmentDefinition.getTypeCondition().getName(),",
          "141:                         fragmentDefinition.getName()));",
          "143:         return TraversalControl.CONTINUE;",
          "144:     }",
          "146:     @Override",
          "147:     public TraversalControl visitField(Field field, TraverserContext<Node> context) {",
          "148:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "150:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(schema, (GraphQLCompositeType) unwrapAll(parentEnv.getOutputType()), field.getName());",
          "151:         boolean isTypeNameIntrospectionField = fieldDefinition == schema.getIntrospectionTypenameFieldDefinition();",
          "",
          "[Removed Lines]",
          "136:         QueryTraversalContext parentEnv = context.getVarFromParents(QueryTraversalContext.class);",
          "142:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition));",
          "",
          "[Added Lines]",
          "146:         context.setVar(QueryTraversalContext.class, new QueryTraversalContext(typeCondition, parentEnv.getEnvironment(), fragmentDefinition, graphQLContext));",
          "153:         GraphQLContext graphQLContext = parentEnv.getGraphQLContext();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "167:             return TraversalControl.CONTINUE;",
          "168:         }",
          "171:             return TraversalControl.ABORT;",
          "172:         }",
          "",
          "[Removed Lines]",
          "170:         if (!conditionalNodes.shouldInclude(variables, field.getDirectives())) {",
          "",
          "[Added Lines]",
          "175:         if (!conditionalNodes.shouldInclude(field, variables, null, graphQLContext)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "176:         GraphQLUnmodifiedType unmodifiedType = unwrapAll(fieldDefinition.getType());",
          "177:         QueryTraversalContext fieldEnv = (unmodifiedType instanceof GraphQLCompositeType)",
          "182:         context.setVar(QueryTraversalContext.class, fieldEnv);",
          "",
          "[Removed Lines]",
          "178:                 ? new QueryTraversalContext(fieldDefinition.getType(), environment, field)",
          "179:                 : new QueryTraversalContext(null, environment, field);// Terminal (scalar) node, EMPTY FRAME",
          "",
          "[Added Lines]",
          "183:                 ? new QueryTraversalContext(fieldDefinition.getType(), environment, field, graphQLContext)",
          "184:                 : new QueryTraversalContext(null, environment, field, graphQLContext);// Terminal (scalar) node, EMPTY FRAME",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "252:         }",
          "253:         return preOrderCallback.visitArgumentValue(environment);",
          "254:     }",
          "",
          "[Removed Lines]",
          "255: }",
          "",
          "[Added Lines]",
          "260: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/analysis/QueryTransformer.java||src/main/java/graphql/analysis/QueryTransformer.java": [
          "File: src/main/java/graphql/analysis/QueryTransformer.java -> src/main/java/graphql/analysis/QueryTransformer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.analysis;",
          "3: import graphql.PublicApi;",
          "4: import graphql.language.FragmentDefinition;",
          "5: import graphql.language.Node;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import graphql.GraphQLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         NodeVisitorWithTypeTracking nodeVisitor = new NodeVisitorWithTypeTracking(queryVisitor, noOp, variables, schema, fragmentsByName);",
          "69:         Map<Class<?>, Object> rootVars = new LinkedHashMap<>();",
          "72:         TraverserVisitor<Node> nodeTraverserVisitor = new TraverserVisitor<Node>() {",
          "",
          "[Removed Lines]",
          "70:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null));",
          "",
          "[Added Lines]",
          "71:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null, GraphQLContext.getDefault()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163:             return new QueryTransformer(schema, root, rootParentType, fragmentsByName, variables);",
          "164:         }",
          "165:     }",
          "",
          "[Removed Lines]",
          "166: }",
          "",
          "[Added Lines]",
          "167: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/analysis/QueryTraversalContext.java||src/main/java/graphql/analysis/QueryTraversalContext.java": [
          "File: src/main/java/graphql/analysis/QueryTraversalContext.java -> src/main/java/graphql/analysis/QueryTraversalContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.analysis;",
          "3: import graphql.Internal;",
          "4: import graphql.language.SelectionSetContainer;",
          "5: import graphql.schema.GraphQLCompositeType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import graphql.GraphQLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     private final GraphQLOutputType outputType;",
          "18:     private final QueryVisitorFieldEnvironment environment;",
          "21:     QueryTraversalContext(GraphQLOutputType outputType,",
          "22:                           QueryVisitorFieldEnvironment environment,",
          "24:         this.outputType = outputType;",
          "25:         this.environment = environment;",
          "26:         this.selectionSetContainer = selectionSetContainer;",
          "27:     }",
          "29:     public GraphQLOutputType getOutputType() {",
          "",
          "[Removed Lines]",
          "19:     private final SelectionSetContainer selectionSetContainer;",
          "23:                           SelectionSetContainer selectionSetContainer) {",
          "",
          "[Added Lines]",
          "20:     private final SelectionSetContainer<?> selectionSetContainer;",
          "21:     private final GraphQLContext graphQLContext;",
          "25:                           SelectionSetContainer<?> selectionSetContainer,",
          "26:                           GraphQLContext graphQLContext) {",
          "30:         this.graphQLContext = graphQLContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:         return (GraphQLCompositeType) GraphQLTypeUtil.unwrapAll(outputType);",
          "35:     }",
          "38:     public QueryVisitorFieldEnvironment getEnvironment() {",
          "39:         return environment;",
          "40:     }",
          "44:         return selectionSetContainer;",
          "45:     }",
          "",
          "[Removed Lines]",
          "42:     public SelectionSetContainer getSelectionSetContainer() {",
          "46: }",
          "",
          "[Added Lines]",
          "45:     public SelectionSetContainer<?> getSelectionSetContainer() {",
          "49:     public GraphQLContext getGraphQLContext() {",
          "50:         return graphQLContext;",
          "51:     }",
          "52: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/analysis/QueryTraverser.java||src/main/java/graphql/analysis/QueryTraverser.java": [
          "File: src/main/java/graphql/analysis/QueryTraverser.java -> src/main/java/graphql/analysis/QueryTraverser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.analysis;",
          "3: import graphql.PublicApi;",
          "4: import graphql.execution.CoercedVariables;",
          "5: import graphql.execution.RawVariables;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import graphql.GraphQLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:     private Object visitImpl(QueryVisitor visitFieldCallback, Boolean preOrder) {",
          "177:         Map<Class<?>, Object> rootVars = new LinkedHashMap<>();",
          "180:         QueryVisitor preOrderCallback;",
          "181:         QueryVisitor postOrderCallback;",
          "",
          "[Removed Lines]",
          "178:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null));",
          "",
          "[Added Lines]",
          "179:         rootVars.put(QueryTraversalContext.class, new QueryTraversalContext(rootParentType, null, null, GraphQLContext.getDefault()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:         }",
          "343:     }",
          "",
          "[Removed Lines]",
          "344: }",
          "",
          "[Added Lines]",
          "345: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/ExecutionContext.java||src/main/java/graphql/execution/ExecutionContext.java": [
          "File: src/main/java/graphql/execution/ExecutionContext.java -> src/main/java/graphql/execution/ExecutionContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:         this.errors.set(builder.errors);",
          "81:         this.localContext = builder.localContext;",
          "82:         this.executionInput = builder.executionInput;",
          "84:     }",
          "",
          "[Removed Lines]",
          "83:         queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
          "",
          "[Added Lines]",
          "83:         this.queryTree = FpKit.interThreadMemoize(() -> ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, operationDefinition, fragmentsByName, coercedVariables));",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/FieldCollector.java||src/main/java/graphql/execution/FieldCollector.java": [
          "File: src/main/java/graphql/execution/FieldCollector.java -> src/main/java/graphql/execution/FieldCollector.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import graphql.Internal;",
          "5: import graphql.language.Field;",
          "6: import graphql.language.FragmentDefinition;",
          "7: import graphql.language.FragmentSpread;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import graphql.execution.conditional.ConditionalNodes;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:         if (visitedFragments.contains(fragmentSpread.getName())) {",
          "77:             return;",
          "78:         }",
          "80:             return;",
          "81:         }",
          "82:         visitedFragments.add(fragmentSpread.getName());",
          "83:         FragmentDefinition fragmentDefinition = parameters.getFragmentsByName().get(fragmentSpread.getName());",
          "86:             return;",
          "87:         }",
          "88:         if (!doesFragmentConditionMatch(parameters, fragmentDefinition)) {",
          "",
          "[Removed Lines]",
          "79:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentSpread.getDirectives())) {",
          "85:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), fragmentDefinition.getDirectives())) {",
          "",
          "[Added Lines]",
          "80:         if (!conditionalNodes.shouldInclude(fragmentSpread,",
          "81:                 parameters.getVariables(),",
          "82:                 parameters.getGraphQLSchema(),",
          "83:                 parameters.getGraphQLContext())) {",
          "89:         if (!conditionalNodes.shouldInclude(fragmentDefinition,",
          "90:                 parameters.getVariables(),",
          "91:                 parameters.getGraphQLSchema(),",
          "92:                 parameters.getGraphQLContext())) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:     }",
          "94:     private void collectInlineFragment(FieldCollectorParameters parameters, Set<String> visitedFragments, Map<String, MergedField> fields, InlineFragment inlineFragment) {",
          "96:                 !doesFragmentConditionMatch(parameters, inlineFragment)) {",
          "97:             return;",
          "98:         }",
          "",
          "[Removed Lines]",
          "95:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), inlineFragment.getDirectives()) ||",
          "",
          "[Added Lines]",
          "102:         if (!conditionalNodes.shouldInclude(inlineFragment,",
          "103:                 parameters.getVariables(),",
          "104:                 parameters.getGraphQLSchema(),",
          "105:                 parameters.getGraphQLContext()) ||",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:     }",
          "102:     private void collectField(FieldCollectorParameters parameters, Map<String, MergedField> fields, Field field) {",
          "104:             return;",
          "105:         }",
          "106:         String name = field.getResultKey();",
          "",
          "[Removed Lines]",
          "103:         if (!conditionalNodes.shouldInclude(parameters.getVariables(), field.getDirectives())) {",
          "",
          "[Added Lines]",
          "113:         if (!conditionalNodes.shouldInclude(field,",
          "114:                 parameters.getVariables(),",
          "115:                 parameters.getGraphQLSchema(),",
          "116:                 parameters.getGraphQLContext())) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:     }",
          "",
          "[Removed Lines]",
          "146: }",
          "",
          "[Added Lines]",
          "159: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/FieldCollectorParameters.java||src/main/java/graphql/execution/FieldCollectorParameters.java": [
          "File: src/main/java/graphql/execution/FieldCollectorParameters.java -> src/main/java/graphql/execution/FieldCollectorParameters.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.execution;",
          "3: import graphql.Assert;",
          "4: import graphql.Internal;",
          "5: import graphql.language.FragmentDefinition;",
          "6: import graphql.schema.GraphQLObjectType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import graphql.GraphQLContext;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     private final Map<String, FragmentDefinition> fragmentsByName;",
          "18:     private final Map<String, Object> variables;",
          "19:     private final GraphQLObjectType objectType;",
          "21:     public GraphQLSchema getGraphQLSchema() {",
          "22:         return graphQLSchema;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:     private final GraphQLContext graphQLContext;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "34:         return objectType;",
          "35:     }",
          "42:     }",
          "44:     public static Builder newParameters() {",
          "",
          "[Removed Lines]",
          "37:     private FieldCollectorParameters(GraphQLSchema graphQLSchema, Map<String, Object> variables, Map<String, FragmentDefinition> fragmentsByName, GraphQLObjectType objectType) {",
          "38:         this.fragmentsByName = fragmentsByName;",
          "39:         this.graphQLSchema = graphQLSchema;",
          "40:         this.variables = variables;",
          "41:         this.objectType = objectType;",
          "",
          "[Added Lines]",
          "39:     public GraphQLContext getGraphQLContext() {",
          "40:         return graphQLContext;",
          "41:     }",
          "43:     private FieldCollectorParameters(Builder builder) {",
          "44:         this.fragmentsByName = builder.fragmentsByName;",
          "45:         this.graphQLSchema = builder.graphQLSchema;",
          "46:         this.variables = builder.variables;",
          "47:         this.objectType = builder.objectType;",
          "48:         this.graphQLContext = builder.graphQLContext;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:         private Map<String, FragmentDefinition> fragmentsByName;",
          "51:         private Map<String, Object> variables;",
          "52:         private GraphQLObjectType objectType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:         private GraphQLContext graphQLContext = GraphQLContext.getDefault();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "68:             return this;",
          "69:         }",
          "71:         public Builder fragments(Map<String, FragmentDefinition> fragmentsByName) {",
          "72:             this.fragmentsByName = fragmentsByName;",
          "73:             return this;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:         public Builder graphQLContext(GraphQLContext graphQLContext) {",
          "80:             this.graphQLContext = graphQLContext;",
          "81:             return this;",
          "82:         }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "81:         public FieldCollectorParameters build() {",
          "82:             Assert.assertNotNull(graphQLSchema, () -> \"You must provide a schema\");",
          "84:         }",
          "86:     }",
          "",
          "[Removed Lines]",
          "83:             return new FieldCollectorParameters(graphQLSchema, variables, fragmentsByName, objectType);",
          "87: }",
          "",
          "[Added Lines]",
          "96:             return new FieldCollectorParameters(this);",
          "100: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java": [
          "File: src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java -> src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.execution.conditional;",
          "3: import graphql.ExperimentalApi;",
          "11: @ExperimentalApi",
          "12: public interface ConditionalNodeDecision {",
          "21:     boolean shouldInclude(ConditionalNodeDecisionEnvironment decisionEnv);",
          "22: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java": [
          "File: src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java -> src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.execution.conditional;",
          "3: import graphql.GraphQLContext;",
          "4: import graphql.execution.CoercedVariables;",
          "5: import graphql.language.Directive;",
          "6: import graphql.language.DirectivesContainer;",
          "7: import graphql.schema.GraphQLSchema;",
          "8: import org.jetbrains.annotations.Nullable;",
          "10: import java.util.List;",
          "15: public interface ConditionalNodeDecisionEnvironment {",
          "25:     DirectivesContainer<?> getDirectivesContainer();",
          "30:     default List<Directive> getDirectives() {",
          "31:         return getDirectivesContainer().getDirectives();",
          "32:     }",
          "37:     CoercedVariables getVariables();",
          "42:     @Nullable GraphQLSchema getGraphQlSchema();",
          "47:     GraphQLContext getGraphQLContext();",
          "48: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/conditional/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java": [
          "File: src/main/java/graphql/execution/conditional/ConditionalNodes.java -> src/main/java/graphql/execution/conditional/ConditionalNodes.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package graphql.execution.conditional;",
          "3: import graphql.Assert;",
          "4: import graphql.GraphQLContext;",
          "5: import graphql.Internal;",
          "6: import graphql.execution.CoercedVariables;",
          "7: import graphql.execution.ValuesResolver;",
          "8: import graphql.language.Directive;",
          "9: import graphql.language.DirectivesContainer;",
          "10: import graphql.language.NodeUtil;",
          "11: import graphql.schema.GraphQLSchema;",
          "13: import java.util.List;",
          "14: import java.util.Locale;",
          "15: import java.util.Map;",
          "17: import static graphql.Directives.IncludeDirective;",
          "18: import static graphql.Directives.SkipDirective;",
          "20: @Internal",
          "21: public class ConditionalNodes {",
          "24:     public boolean shouldInclude(DirectivesContainer<?> element,",
          "25:                                  Map<String, Object> variables,",
          "26:                                  GraphQLSchema graphQLSchema,",
          "27:                                  GraphQLContext graphQLContext",
          "28:     ) {",
          "31:         if (!shouldInclude(variables, element.getDirectives())) {",
          "32:             return false;",
          "33:         }",
          "37:         if (graphQLContext != null) {",
          "38:             ConditionalNodeDecision conditionalDecision = graphQLContext.get(ConditionalNodeDecision.class);",
          "39:             if (conditionalDecision != null) {",
          "40:                 return customShouldInclude(variables, element, graphQLSchema, graphQLContext, conditionalDecision);",
          "41:             }",
          "42:         }",
          "44:         return true;",
          "45:     }",
          "47:     private boolean customShouldInclude(Map<String, Object> variables,",
          "48:                                         DirectivesContainer<?> element,",
          "49:                                         GraphQLSchema graphQLSchema,",
          "50:                                         GraphQLContext graphQLContext,",
          "51:                                         ConditionalNodeDecision conditionalDecision",
          "52:     ) {",
          "53:         CoercedVariables coercedVariables = CoercedVariables.of(variables);",
          "54:         return conditionalDecision.shouldInclude(new ConditionalNodeDecisionEnvironment() {",
          "55:             @Override",
          "56:             public DirectivesContainer<?> getDirectivesContainer() {",
          "57:                 return element;",
          "58:             }",
          "60:             @Override",
          "61:             public CoercedVariables getVariables() {",
          "62:                 return coercedVariables;",
          "63:             }",
          "65:             @Override",
          "66:             public GraphQLSchema getGraphQlSchema() {",
          "67:                 return graphQLSchema;",
          "68:             }",
          "70:             @Override",
          "71:             public GraphQLContext getGraphQLContext() {",
          "72:                 return graphQLContext;",
          "73:             }",
          "74:         });",
          "75:     }",
          "78:     private boolean shouldInclude(Map<String, Object> variables, List<Directive> directives) {",
          "80:         if (directives.isEmpty()) {",
          "81:             return true;",
          "82:         }",
          "83:         boolean skip = getDirectiveResult(variables, directives, SkipDirective.getName(), false);",
          "84:         if (skip) {",
          "85:             return false;",
          "86:         }",
          "88:         return getDirectiveResult(variables, directives, IncludeDirective.getName(), true);",
          "89:     }",
          "91:     private boolean getDirectiveResult(Map<String, Object> variables, List<Directive> directives, String directiveName, boolean defaultValue) {",
          "92:         Directive foundDirective = NodeUtil.findNodeByName(directives, directiveName);",
          "93:         if (foundDirective != null) {",
          "94:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(SkipDirective.getArguments(), foundDirective.getArguments(), CoercedVariables.of(variables));",
          "95:             Object flag = argumentValues.get(\"if\");",
          "96:             Assert.assertTrue(flag instanceof Boolean, \"The '%s' directive MUST have a value for the 'if' argument\", directiveName);",
          "97:             return (Boolean) flag;",
          "98:         }",
          "99:         return defaultValue;",
          "100:     }",
          "102: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/introspection/GoodFaithIntrospection.java||src/main/java/graphql/introspection/GoodFaithIntrospection.java": [
          "File: src/main/java/graphql/introspection/GoodFaithIntrospection.java -> src/main/java/graphql/introspection/GoodFaithIntrospection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.util.Optional;",
          "21: import java.util.concurrent.atomic.AtomicBoolean;",
          "23: import static graphql.schema.FieldCoordinates.coordinates;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import static graphql.normalized.ExecutableNormalizedOperationFactory.Options;",
          "24: import static graphql.normalized.ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     public static final String GOOD_FAITH_INTROSPECTION_DISABLED = \"GOOD_FAITH_INTROSPECTION_DISABLED\";",
          "48:     private static final AtomicBoolean ENABLED_STATE = new AtomicBoolean(true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     public static final int GOOD_FAITH_MAX_FIELDS_COUNT = 500;",
          "58:     public static final int GOOD_FAITH_MAX_DEPTH_COUNT = 20;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:     public static Optional<ExecutionResult> checkIntrospection(ExecutionContext executionContext) {",
          "80:         if (isIntrospectionEnabled(executionContext.getGraphQLContext())) {",
          "82:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToENFs = operation.getCoordinatesToNormalizedFields();",
          "83:             for (Map.Entry<FieldCoordinates, Integer> entry : ALLOWED_FIELD_INSTANCES.entrySet()) {",
          "84:                 FieldCoordinates coordinates = entry.getKey();",
          "",
          "[Removed Lines]",
          "81:             ExecutableNormalizedOperation operation = executionContext.getNormalizedQueryTree().get();",
          "",
          "[Added Lines]",
          "91:             ExecutableNormalizedOperation operation = mkOperation(executionContext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "93:         return Optional.empty();",
          "94:     }",
          "96:     private static boolean isIntrospectionEnabled(GraphQLContext graphQlContext) {",
          "97:         if (!isEnabledJvmWide()) {",
          "98:             return false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     private static ExecutableNormalizedOperation mkOperation(ExecutionContext executionContext) {",
          "115:         Options options = Options.defaultOptions()",
          "116:                 .maxFieldsCount(GOOD_FAITH_MAX_FIELDS_COUNT)",
          "117:                 .maxChildrenDepth(GOOD_FAITH_MAX_DEPTH_COUNT)",
          "118:                 .locale(executionContext.getLocale())",
          "119:                 .graphQLContext(executionContext.getGraphQLContext());",
          "121:         return createExecutableNormalizedOperation(executionContext.getGraphQLSchema(),",
          "122:                 executionContext.getOperationDefinition(),",
          "123:                 executionContext.getFragmentsByName(),",
          "124:                 executionContext.getCoercedVariables(),",
          "125:                 options);",
          "127:     }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/introspection/Introspection.java||src/main/java/graphql/introspection/Introspection.java": [
          "File: src/main/java/graphql/introspection/Introspection.java -> src/main/java/graphql/introspection/Introspection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     public static Optional<ExecutionResult> isIntrospectionSensible(MergedSelectionSet mergedSelectionSet, ExecutionContext executionContext) {",
          "117:         GraphQLContext graphQLContext = executionContext.getGraphQLContext();",
          "128:             }",
          "129:         }",
          "132:             return GoodFaithIntrospection.checkIntrospection(executionContext);",
          "133:         }",
          "134:         return Optional.empty();",
          "",
          "[Removed Lines]",
          "118:         MergedField schemaField = mergedSelectionSet.getSubField(SchemaMetaFieldDef.getName());",
          "119:         if (schemaField != null) {",
          "120:             if (!isIntrospectionEnabled(graphQLContext)) {",
          "121:                 return mkDisabledError(schemaField);",
          "122:             }",
          "123:         }",
          "124:         MergedField typeField = mergedSelectionSet.getSubField(TypeMetaFieldDef.getName());",
          "125:         if (typeField != null) {",
          "126:             if (!isIntrospectionEnabled(graphQLContext)) {",
          "127:                 return mkDisabledError(typeField);",
          "130:         if (schemaField != null || typeField != null)",
          "131:         {",
          "",
          "[Added Lines]",
          "119:         boolean isIntrospection = false;",
          "120:         for (String key : mergedSelectionSet.getKeys()) {",
          "121:             String fieldName = mergedSelectionSet.getSubField(key).getName();",
          "122:             if (fieldName.equals(SchemaMetaFieldDef.getName())",
          "123:                     || fieldName.equals(TypeMetaFieldDef.getName())) {",
          "124:                 if (!isIntrospectionEnabled(graphQLContext)) {",
          "125:                     return mkDisabledError(mergedSelectionSet.getSubField(key));",
          "126:                 }",
          "127:                 isIntrospection = true;",
          "128:                 break;",
          "131:         if (isIntrospection) {",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/ExecutableNormalizedOperation.java||src/main/java/graphql/normalized/ExecutableNormalizedOperation.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperation.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperation.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import com.google.common.collect.ImmutableListMultimap;",
          "4: import graphql.Assert;",
          "6: import graphql.execution.MergedField;",
          "7: import graphql.execution.ResultPath;",
          "8: import graphql.language.Field;",
          "9: import graphql.language.OperationDefinition;",
          "10: import graphql.schema.FieldCoordinates;",
          "",
          "[Removed Lines]",
          "5: import graphql.Internal;",
          "",
          "[Added Lines]",
          "5: import graphql.PublicApi;",
          "8: import graphql.execution.directives.QueryDirectives;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: import java.util.List;",
          "14: import java.util.Map;",
          "17: public class ExecutableNormalizedOperation {",
          "18:     private final OperationDefinition.Operation operation;",
          "19:     private final String operationName;",
          "20:     private final List<ExecutableNormalizedField> topLevelFields;",
          "21:     private final ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField;",
          "22:     private final Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField;",
          "23:     private final ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields;",
          "25:     public ExecutableNormalizedOperation(",
          "26:             OperationDefinition.Operation operation,",
          "",
          "[Removed Lines]",
          "16: @Internal",
          "",
          "[Added Lines]",
          "25: @PublicApi",
          "32:     private final Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives;",
          "34:     private final int operationFieldCount;",
          "35:     private final int operationDepth;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "28:             List<ExecutableNormalizedField> topLevelFields,",
          "29:             ImmutableListMultimap<Field, ExecutableNormalizedField> fieldToNormalizedField,",
          "30:             Map<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
          "33:         this.operation = operation;",
          "34:         this.operationName = operationName;",
          "35:         this.topLevelFields = topLevelFields;",
          "36:         this.fieldToNormalizedField = fieldToNormalizedField;",
          "37:         this.normalizedFieldToMergedField = normalizedFieldToMergedField;",
          "38:         this.coordinatesToNormalizedFields = coordinatesToNormalizedFields;",
          "39:     }",
          "41:     public OperationDefinition.Operation getOperation() {",
          "42:         return operation;",
          "43:     }",
          "45:     public String getOperationName() {",
          "46:         return operationName;",
          "47:     }",
          "49:     public ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> getCoordinatesToNormalizedFields() {",
          "50:         return coordinatesToNormalizedFields;",
          "51:     }",
          "53:     public List<ExecutableNormalizedField> getTopLevelFields() {",
          "54:         return topLevelFields;",
          "55:     }",
          "62:     public ImmutableListMultimap<Field, ExecutableNormalizedField> getFieldToNormalizedField() {",
          "63:         return fieldToNormalizedField;",
          "64:     }",
          "66:     public List<ExecutableNormalizedField> getNormalizedFields(Field field) {",
          "67:         return fieldToNormalizedField.get(field);",
          "68:     }",
          "70:     public Map<ExecutableNormalizedField, MergedField> getNormalizedFieldToMergedField() {",
          "71:         return normalizedFieldToMergedField;",
          "72:     }",
          "74:     public MergedField getMergedField(ExecutableNormalizedField executableNormalizedField) {",
          "75:         return normalizedFieldToMergedField.get(executableNormalizedField);",
          "76:     }",
          "78:     public ExecutableNormalizedField getNormalizedField(MergedField mergedField, GraphQLFieldsContainer fieldsContainer, ResultPath resultPath) {",
          "79:         List<ExecutableNormalizedField> executableNormalizedFields = fieldToNormalizedField.get(mergedField.getSingleField());",
          "80:         List<String> keysOnlyPath = resultPath.getKeysOnly();",
          "",
          "[Removed Lines]",
          "31:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields",
          "32:     ) {",
          "",
          "[Added Lines]",
          "43:             Map<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives,",
          "44:             ImmutableListMultimap<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
          "45:             int operationFieldCount,",
          "46:             int operationDepth) {",
          "52:         this.normalizedFieldToQueryDirectives = normalizedFieldToQueryDirectives;",
          "54:         this.operationFieldCount = operationFieldCount;",
          "55:         this.operationDepth = operationDepth;",
          "75:     public int getOperationFieldCount() {",
          "76:         return operationFieldCount;",
          "77:     }",
          "82:     public int getOperationDepth() {",
          "83:         return operationDepth;",
          "84:     }",
          "143:     public Map<ExecutableNormalizedField, QueryDirectives> getNormalizedFieldToQueryDirectives() {",
          "144:         return normalizedFieldToQueryDirectives;",
          "146:     }",
          "155:     public QueryDirectives getQueryDirectives(ExecutableNormalizedField executableNormalizedField) {",
          "156:         return normalizedFieldToQueryDirectives.get(executableNormalizedField);",
          "157:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "87:         }",
          "88:         return Assert.assertShouldNeverHappen(\"normalized field not found\");",
          "89:     }",
          "",
          "[Removed Lines]",
          "90: }",
          "",
          "[Added Lines]",
          "180: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java||src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java": [
          "File: src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java -> src/main/java/graphql/normalized/ExecutableNormalizedOperationFactory.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import com.google.common.collect.ImmutableListMultimap;",
          "5: import com.google.common.collect.ImmutableMap;",
          "6: import com.google.common.collect.ImmutableSet;",
          "8: import graphql.collect.ImmutableKit;",
          "9: import graphql.execution.CoercedVariables;",
          "11: import graphql.execution.MergedField;",
          "12: import graphql.execution.RawVariables;",
          "13: import graphql.execution.ValuesResolver;",
          "15: import graphql.introspection.Introspection;",
          "16: import graphql.language.Document;",
          "17: import graphql.language.Field;",
          "",
          "[Removed Lines]",
          "7: import graphql.Internal;",
          "10: import graphql.execution.ConditionalNodes;",
          "14: import graphql.execution.nextgen.Common;",
          "",
          "[Added Lines]",
          "7: import graphql.GraphQLContext;",
          "8: import graphql.PublicApi;",
          "10: import graphql.execution.AbortExecutionException;",
          "15: import graphql.execution.conditional.ConditionalNodes;",
          "16: import graphql.execution.directives.QueryDirectives;",
          "17: import graphql.execution.directives.QueryDirectivesImpl;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: import graphql.schema.GraphQLCompositeType;",
          "28: import graphql.schema.GraphQLFieldDefinition;",
          "29: import graphql.schema.GraphQLInterfaceType;",
          "30: import graphql.schema.GraphQLObjectType;",
          "31: import graphql.schema.GraphQLSchema;",
          "32: import graphql.schema.GraphQLType;",
          "34: import graphql.schema.GraphQLUnionType;",
          "35: import graphql.schema.GraphQLUnmodifiedType;",
          "36: import org.jetbrains.annotations.Nullable;",
          "38: import java.util.ArrayList;",
          "39: import java.util.Collection;",
          "40: import java.util.LinkedHashMap;",
          "41: import java.util.List;",
          "42: import java.util.Map;",
          "43: import java.util.Set;",
          "45: import static graphql.Assert.assertNotNull;",
          "46: import static graphql.Assert.assertShouldNeverHappen;",
          "47: import static graphql.collect.ImmutableKit.map;",
          "49: import static graphql.schema.GraphQLTypeUtil.unwrapAll;",
          "50: import static graphql.util.FpKit.filterSet;",
          "51: import static graphql.util.FpKit.groupingBy;",
          "",
          "[Removed Lines]",
          "33: import graphql.schema.GraphQLTypeUtil;",
          "48: import static graphql.execution.MergedField.newMergedField;",
          "",
          "[Added Lines]",
          "33: import graphql.schema.GraphQLNamedOutputType;",
          "39: import graphql.schema.impl.SchemaUtil;",
          "46: import java.util.Locale;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53: import static java.util.Collections.singleton;",
          "54: import static java.util.Collections.singletonList;",
          "57: public class ExecutableNormalizedOperationFactory {",
          "65:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
          "67:     }",
          "69:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
          "70:                                                                                     OperationDefinition operationDefinition,",
          "71:                                                                                     Map<String, FragmentDefinition> fragments,",
          "72:                                                                                     CoercedVariables coercedVariableValues) {",
          "74:     }",
          "76:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(GraphQLSchema graphQLSchema,",
          "77:                                                                                                     Document document,",
          "78:                                                                                                     String operationName,",
          "79:                                                                                                     RawVariables rawVariables) {",
          "82:     }",
          "94:     }",
          "147:     }",
          "173:         }",
          "181:         }",
          "188:         }",
          "209:         }",
          "221:         }",
          "227:             }",
          "236:         }",
          "250:         }",
          "285:                 }",
          "288:                 }",
          "293:             }",
          "294:         }",
          "333:         }",
          "340:         }",
          "345:         }",
          "350:         }",
          "368:             }",
          "369:         }",
          "389:         }",
          "400:         }",
          "420:         }",
          "428:         }",
          "440:         }",
          "444:         }",
          "455:         }",
          "468:             }",
          "469:         }",
          "484:         }",
          "485:     }",
          "",
          "[Removed Lines]",
          "56: @Internal",
          "59:     private final ConditionalNodes conditionalNodes = new ConditionalNodes();",
          "61:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
          "62:                                                                                     Document document,",
          "63:                                                                                     String operationName,",
          "64:                                                                                     CoercedVariables coercedVariableValues) {",
          "66:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema, getOperationResult.operationDefinition, getOperationResult.fragmentsByName, coercedVariableValues, null);",
          "73:         return new ExecutableNormalizedOperationFactory().createNormalizedQueryImpl(graphQLSchema, operationDefinition, fragments, coercedVariableValues, null);",
          "80:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
          "81:         return new ExecutableNormalizedOperationFactory().createExecutableNormalizedOperationImplWithRawVariables(graphQLSchema, getOperationResult.operationDefinition, getOperationResult.fragmentsByName, rawVariables);",
          "84:     private ExecutableNormalizedOperation createExecutableNormalizedOperationImplWithRawVariables(GraphQLSchema graphQLSchema,",
          "85:                                                                                                   OperationDefinition operationDefinition,",
          "86:                                                                                                   Map<String, FragmentDefinition> fragments,",
          "87:                                                                                                   RawVariables rawVariables",
          "88:     ) {",
          "90:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
          "91:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema, variableDefinitions, rawVariables);",
          "92:         Map<String, NormalizedInputValue> normalizedVariableValues = ValuesResolver.getNormalizedVariableValues(graphQLSchema, variableDefinitions, rawVariables);",
          "93:         return createNormalizedQueryImpl(graphQLSchema, operationDefinition, fragments, coercedVariableValues, normalizedVariableValues);",
          "99:     private ExecutableNormalizedOperation createNormalizedQueryImpl(GraphQLSchema graphQLSchema,",
          "100:                                                                     OperationDefinition operationDefinition,",
          "101:                                                                     Map<String, FragmentDefinition> fragments,",
          "102:                                                                     CoercedVariables coercedVariableValues,",
          "103:                                                                     @Nullable Map<String, NormalizedInputValue> normalizedVariableValues) {",
          "104:         FieldCollectorNormalizedQueryParams parameters = FieldCollectorNormalizedQueryParams",
          "105:                 .newParameters()",
          "106:                 .fragments(fragments)",
          "107:                 .schema(graphQLSchema)",
          "108:                 .coercedVariables(coercedVariableValues.toMap())",
          "109:                 .normalizedVariables(normalizedVariableValues)",
          "110:                 .build();",
          "112:         GraphQLObjectType rootType = Common.getOperationRootType(graphQLSchema, operationDefinition);",
          "114:         CollectNFResult collectFromOperationResult = collectFromOperation(parameters, operationDefinition, rootType);",
          "116:         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
          "117:         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
          "118:         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
          "120:         for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
          "121:             ImmutableList<FieldAndAstParent> mergedField = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
          "122:             normalizedFieldToMergedField.put(topLevel, newMergedField(map(mergedField, fieldAndAstParent -> fieldAndAstParent.field)).build());",
          "123:             updateFieldToNFMap(topLevel, mergedField, fieldToNormalizedField);",
          "124:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, topLevel);",
          "126:             buildFieldWithChildren(topLevel,",
          "127:                     mergedField,",
          "128:                     parameters,",
          "129:                     fieldToNormalizedField,",
          "130:                     normalizedFieldToMergedField,",
          "131:                     coordinatesToNormalizedFields,",
          "132:                     1);",
          "134:         }",
          "135:         for (FieldCollectorNormalizedQueryParams.PossibleMerger possibleMerger : parameters.possibleMergerList) {",
          "136:             List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
          "137:             ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
          "138:         }",
          "139:         return new ExecutableNormalizedOperation(",
          "140:                 operationDefinition.getOperation(),",
          "141:                 operationDefinition.getName(),",
          "142:                 new ArrayList<>(collectFromOperationResult.children),",
          "143:                 fieldToNormalizedField.build(),",
          "144:                 normalizedFieldToMergedField.build(),",
          "145:                 coordinatesToNormalizedFields.build()",
          "146:         );",
          "150:     private void buildFieldWithChildren(ExecutableNormalizedField field,",
          "151:                                         ImmutableList<FieldAndAstParent> mergedField,",
          "152:                                         FieldCollectorNormalizedQueryParams fieldCollectorNormalizedQueryParams,",
          "153:                                         ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldNormalizedField,",
          "154:                                         ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField,",
          "155:                                         ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields,",
          "156:                                         int curLevel) {",
          "157:         CollectNFResult nextLevel = collectFromMergedField(fieldCollectorNormalizedQueryParams, field, mergedField, curLevel + 1);",
          "159:         for (ExecutableNormalizedField child : nextLevel.children) {",
          "160:             field.addChild(child);",
          "161:             ImmutableList<FieldAndAstParent> mergedFieldForChild = nextLevel.normalizedFieldToAstFields.get(child);",
          "162:             normalizedFieldToMergedField.put(child, newMergedField(map(mergedFieldForChild, fieldAndAstParent -> fieldAndAstParent.field)).build());",
          "163:             updateFieldToNFMap(child, mergedFieldForChild, fieldNormalizedField);",
          "164:             updateCoordinatedToNFMap(coordinatesToNormalizedFields, child);",
          "166:             buildFieldWithChildren(child,",
          "167:                     mergedFieldForChild,",
          "168:                     fieldCollectorNormalizedQueryParams,",
          "169:                     fieldNormalizedField,",
          "170:                     normalizedFieldToMergedField,",
          "171:                     coordinatesToNormalizedFields,",
          "172:                     curLevel + 1);",
          "174:     }",
          "176:     private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
          "177:                                     ImmutableList<FieldAndAstParent> mergedField,",
          "178:                                     ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField) {",
          "179:         for (FieldAndAstParent astField : mergedField) {",
          "180:             fieldToNormalizedField.put(astField.field, executableNormalizedField);",
          "182:     }",
          "184:     private void updateCoordinatedToNFMap(ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields, ExecutableNormalizedField topLevel) {",
          "185:         for (String objectType : topLevel.getObjectTypeNames()) {",
          "186:             FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
          "187:             coordinatesToNormalizedFields.put(coordinates, topLevel);",
          "189:     }",
          "191:     private static class FieldAndAstParent {",
          "192:         final Field field;",
          "193:         final GraphQLCompositeType astParentType;",
          "195:         private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
          "196:             this.field = field;",
          "197:             this.astParentType = astParentType;",
          "198:         }",
          "199:     }",
          "202:     public static class CollectNFResult {",
          "203:         private final Collection<ExecutableNormalizedField> children;",
          "204:         private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
          "206:         public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
          "207:             this.children = children;",
          "208:             this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
          "210:     }",
          "213:     public CollectNFResult collectFromMergedField(FieldCollectorNormalizedQueryParams parameters,",
          "214:                                                   ExecutableNormalizedField executableNormalizedField,",
          "215:                                                   ImmutableList<FieldAndAstParent> mergedField,",
          "216:                                                   int level) {",
          "217:         List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(parameters.getGraphQLSchema());",
          "218:         Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs, parameters.getGraphQLSchema());",
          "219:         if (possibleObjects.isEmpty()) {",
          "220:             return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
          "223:         List<CollectedField> collectedFields = new ArrayList<>();",
          "224:         for (FieldAndAstParent fieldAndAstParent : mergedField) {",
          "225:             if (fieldAndAstParent.field.getSelectionSet() == null) {",
          "226:                 continue;",
          "228:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
          "229:             GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
          "230:             this.collectFromSelectionSet(parameters,",
          "231:                     fieldAndAstParent.field.getSelectionSet(),",
          "232:                     collectedFields,",
          "233:                     (GraphQLCompositeType) astParentType,",
          "234:                     possibleObjects",
          "235:             );",
          "237:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "238:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "239:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "241:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
          "243:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "244:     }",
          "246:     private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
          "247:         Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
          "248:         for (CollectedField collectedField : collectedFields) {",
          "249:             fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
          "251:         return fieldsByName;",
          "252:     }",
          "254:     public CollectNFResult collectFromOperation(FieldCollectorNormalizedQueryParams parameters,",
          "255:                                                 OperationDefinition operationDefinition,",
          "256:                                                 GraphQLObjectType rootType) {",
          "259:         Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
          "260:         List<CollectedField> collectedFields = new ArrayList<>();",
          "261:         collectFromSelectionSet(parameters, operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
          "263:         Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "264:         ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "265:         ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "267:         createNFs(resultNFs, parameters, fieldsByName, normalizedFieldToAstFields, 1, null);",
          "269:         return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "270:     }",
          "272:     private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
          "273:                            FieldCollectorNormalizedQueryParams parameters,",
          "274:                            Map<String, List<CollectedField>> fieldsByName,",
          "275:                            ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
          "276:                            int level,",
          "277:                            ExecutableNormalizedField parent) {",
          "278:         for (String resultKey : fieldsByName.keySet()) {",
          "279:             List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
          "280:             List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
          "281:             for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
          "282:                 ExecutableNormalizedField nf = createNF(parameters, fieldGroup, level, parent);",
          "283:                 if (nf == null) {",
          "284:                     continue;",
          "286:                 for (CollectedField collectedField : fieldGroup.fields) {",
          "287:                     normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
          "289:                 nfListBuilder.add(nf);",
          "290:             }",
          "291:             if (commonParentsGroups.size() > 1) {",
          "292:                 parameters.addPossibleMergers(parent, resultKey);",
          "295:     }",
          "297:     private ExecutableNormalizedField createNF(FieldCollectorNormalizedQueryParams parameters,",
          "298:                                                CollectedFieldGroup collectedFieldGroup,",
          "299:                                                int level,",
          "300:                                                ExecutableNormalizedField parent) {",
          "301:         Field field;",
          "302:         Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
          "303:         field = collectedFieldGroup.fields.iterator().next().field;",
          "304:         String fieldName = field.getName();",
          "305:         GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(parameters.getGraphQLSchema(), objectTypes.iterator().next(), fieldName);",
          "307:         Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(),CoercedVariables.of(parameters.getCoercedVariableValues()));",
          "308:         Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
          "309:         if (parameters.getNormalizedVariableValues() != null) {",
          "310:             normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), parameters.getNormalizedVariableValues());",
          "311:         }",
          "312:         ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
          "314:         return ExecutableNormalizedField.newNormalizedField()",
          "315:                 .alias(field.getAlias())",
          "316:                 .resolvedArguments(argumentValues)",
          "317:                 .normalizedArguments(normalizedArgumentValues)",
          "318:                 .astArguments(field.getArguments())",
          "319:                 .objectTypeNames(objectTypeNames)",
          "320:                 .fieldName(fieldName)",
          "321:                 .level(level)",
          "322:                 .parent(parent)",
          "323:                 .build();",
          "324:     }",
          "326:     private static class CollectedFieldGroup {",
          "327:         Set<GraphQLObjectType> objectTypes;",
          "328:         Set<CollectedField> fields;",
          "330:         public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
          "331:             this.fields = fields;",
          "332:             this.objectTypes = objectTypes;",
          "334:     }",
          "336:     private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
          "337:         ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
          "338:         for (CollectedField collectedField : fields) {",
          "339:             objectTypes.addAll(collectedField.objectTypes);",
          "341:         Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
          "342:         Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
          "343:         if (groupByAstParent.size() == 1) {",
          "344:             return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
          "346:         ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
          "347:         for (GraphQLObjectType objectType : allRelevantObjects) {",
          "348:             Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
          "349:             result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
          "351:         return result.build();",
          "352:     }",
          "355:     private void collectFromSelectionSet(FieldCollectorNormalizedQueryParams parameters,",
          "356:                                          SelectionSet selectionSet,",
          "357:                                          List<CollectedField> result,",
          "358:                                          GraphQLCompositeType astTypeCondition,",
          "359:                                          Set<GraphQLObjectType> possibleObjects",
          "360:     ) {",
          "361:         for (Selection<?> selection : selectionSet.getSelections()) {",
          "362:             if (selection instanceof Field) {",
          "363:                 collectField(parameters, result, (Field) selection, possibleObjects, astTypeCondition);",
          "364:             } else if (selection instanceof InlineFragment) {",
          "365:                 collectInlineFragment(parameters, result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
          "366:             } else if (selection instanceof FragmentSpread) {",
          "367:                 collectFragmentSpread(parameters, result, (FragmentSpread) selection, possibleObjects, astTypeCondition);",
          "370:     }",
          "372:     private static class CollectedField {",
          "373:         Field field;",
          "374:         Set<GraphQLObjectType> objectTypes;",
          "375:         GraphQLCompositeType astTypeCondition;",
          "377:         public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
          "378:             this.field = field;",
          "379:             this.objectTypes = objectTypes;",
          "380:             this.astTypeCondition = astTypeCondition;",
          "381:         }",
          "383:         public boolean isAbstract() {",
          "384:             return GraphQLTypeUtil.isInterfaceOrUnion(astTypeCondition);",
          "385:         }",
          "387:         public boolean isConcrete() {",
          "388:             return GraphQLTypeUtil.isObjectType(astTypeCondition);",
          "390:     }",
          "392:     private void collectFragmentSpread(FieldCollectorNormalizedQueryParams parameters,",
          "393:                                        List<CollectedField> result,",
          "394:                                        FragmentSpread fragmentSpread,",
          "395:                                        Set<GraphQLObjectType> possibleObjects,",
          "396:                                        GraphQLCompositeType astTypeCondition",
          "397:     ) {",
          "398:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentSpread.getDirectives())) {",
          "399:             return;",
          "401:         FragmentDefinition fragmentDefinition = assertNotNull(parameters.getFragmentsByName().get(fragmentSpread.getName()));",
          "403:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), fragmentDefinition.getDirectives())) {",
          "404:             return;",
          "405:         }",
          "406:         GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(parameters.getGraphQLSchema().getType(fragmentDefinition.getTypeCondition().getName()));",
          "407:         Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
          "408:         collectFromSelectionSet(parameters, fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "409:     }",
          "412:     private void collectInlineFragment(FieldCollectorNormalizedQueryParams parameters,",
          "413:                                        List<CollectedField> result,",
          "414:                                        InlineFragment inlineFragment,",
          "415:                                        Set<GraphQLObjectType> possibleObjects,",
          "416:                                        GraphQLCompositeType astTypeCondition",
          "417:     ) {",
          "418:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), inlineFragment.getDirectives())) {",
          "419:             return;",
          "421:         Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
          "422:         GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
          "424:         if (inlineFragment.getTypeCondition() != null) {",
          "425:             newAstTypeCondition = (GraphQLCompositeType) parameters.getGraphQLSchema().getType(inlineFragment.getTypeCondition().getName());",
          "426:             newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition, parameters.getGraphQLSchema());",
          "429:         collectFromSelectionSet(parameters, inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "430:     }",
          "432:     private void collectField(FieldCollectorNormalizedQueryParams parameters,",
          "433:                               List<CollectedField> result,",
          "434:                               Field field,",
          "435:                               Set<GraphQLObjectType> possibleObjectTypes,",
          "436:                               GraphQLCompositeType astTypeCondition",
          "437:     ) {",
          "438:         if (!conditionalNodes.shouldInclude(parameters.getCoercedVariableValues(), field.getDirectives())) {",
          "439:             return;",
          "442:         if (possibleObjectTypes.isEmpty()) {",
          "443:             return;",
          "445:         result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
          "446:     }",
          "448:     private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
          "449:                                                              GraphQLCompositeType typeCondition,",
          "450:                                                              GraphQLSchema graphQLSchema) {",
          "452:         ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition, graphQLSchema);",
          "453:         if (currentOnes.isEmpty()) {",
          "454:             return resolvedTypeCondition;",
          "458:         return intersection(currentOnes, resolvedTypeCondition);",
          "459:     }",
          "461:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs, GraphQLSchema graphQLSchema) {",
          "462:         ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
          "464:         for (GraphQLFieldDefinition def : defs) {",
          "465:             GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
          "466:             if (outputType instanceof GraphQLCompositeType) {",
          "467:                 builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType, graphQLSchema));",
          "471:         return builder.build();",
          "472:     }",
          "474:     private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type, GraphQLSchema graphQLSchema) {",
          "475:         if (type instanceof GraphQLObjectType) {",
          "476:             return ImmutableSet.of((GraphQLObjectType) type);",
          "477:         } else if (type instanceof GraphQLInterfaceType) {",
          "478:             return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
          "479:         } else if (type instanceof GraphQLUnionType) {",
          "480:             List types = ((GraphQLUnionType) type).getTypes();",
          "481:             return ImmutableSet.copyOf(types);",
          "482:         } else {",
          "483:             return assertShouldNeverHappen();",
          "486: }",
          "",
          "[Added Lines]",
          "64: @PublicApi",
          "67:     public static class Options {",
          "68:         private final GraphQLContext graphQLContext;",
          "69:         private final Locale locale;",
          "70:         private final int maxChildrenDepth;",
          "71:         private final int maxFieldsCount;",
          "73:         private Options(GraphQLContext graphQLContext,",
          "74:                         Locale locale,",
          "75:                         int maxChildrenDepth,",
          "76:                         int maxFieldsCount) {",
          "77:             this.graphQLContext = graphQLContext;",
          "78:             this.locale = locale;",
          "79:             this.maxChildrenDepth = maxChildrenDepth;",
          "80:             this.maxFieldsCount = maxFieldsCount;",
          "81:         }",
          "83:         public static Options defaultOptions() {",
          "84:             return new Options(",
          "85:                     GraphQLContext.getDefault(),",
          "86:                     Locale.getDefault(),",
          "87:                     Integer.MAX_VALUE,",
          "88:                     Integer.MAX_VALUE);",
          "89:         }",
          "100:         public Options locale(Locale locale) {",
          "101:             return new Options(this.graphQLContext, locale, this.maxChildrenDepth, this.maxFieldsCount);",
          "102:         }",
          "112:         public Options graphQLContext(GraphQLContext graphQLContext) {",
          "113:             return new Options(graphQLContext, this.locale, this.maxChildrenDepth, this.maxFieldsCount);",
          "114:         }",
          "124:         public Options maxChildrenDepth(int maxChildrenDepth) {",
          "125:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, this.maxFieldsCount);",
          "126:         }",
          "136:         public Options maxFieldsCount(int maxFieldsCount) {",
          "137:             return new Options(this.graphQLContext, this.locale, maxChildrenDepth, maxFieldsCount);",
          "138:         }",
          "145:         public GraphQLContext getGraphQLContext() {",
          "146:             return graphQLContext;",
          "147:         }",
          "154:         public Locale getLocale() {",
          "155:             return locale;",
          "156:         }",
          "163:         public int getMaxChildrenDepth() {",
          "164:             return maxChildrenDepth;",
          "165:         }",
          "167:         public int getMaxFieldsCount() {",
          "168:             return maxFieldsCount;",
          "169:         }",
          "171:     }",
          "173:     private static final ConditionalNodes conditionalNodes = new ConditionalNodes();",
          "175:     private ExecutableNormalizedOperationFactory() {",
          "177:     }",
          "190:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
          "191:             GraphQLSchema graphQLSchema,",
          "192:             Document document,",
          "193:             String operationName,",
          "194:             CoercedVariables coercedVariableValues",
          "195:     ) {",
          "196:         return createExecutableNormalizedOperation(",
          "197:                 graphQLSchema,",
          "198:                 document,",
          "199:                 operationName,",
          "200:                 coercedVariableValues,",
          "201:                 Options.defaultOptions());",
          "202:     }",
          "216:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(",
          "217:             GraphQLSchema graphQLSchema,",
          "218:             Document document,",
          "219:             String operationName,",
          "220:             CoercedVariables coercedVariableValues,",
          "221:             Options options",
          "222:     ) {",
          "225:         return new ExecutableNormalizedOperationFactoryImpl(",
          "226:                 graphQLSchema,",
          "227:                 getOperationResult.operationDefinition,",
          "228:                 getOperationResult.fragmentsByName,",
          "229:                 coercedVariableValues,",
          "230:                 null,",
          "231:                 options",
          "232:         ).createNormalizedQueryImpl();",
          "250:         return createExecutableNormalizedOperation(graphQLSchema,",
          "251:                 operationDefinition,",
          "252:                 fragments,",
          "253:                 coercedVariableValues,",
          "254:                 Options.defaultOptions());",
          "268:     public static ExecutableNormalizedOperation createExecutableNormalizedOperation(GraphQLSchema graphQLSchema,",
          "269:                                                                                     OperationDefinition operationDefinition,",
          "270:                                                                                     Map<String, FragmentDefinition> fragments,",
          "271:                                                                                     CoercedVariables coercedVariableValues,",
          "272:                                                                                     Options options) {",
          "273:         return new ExecutableNormalizedOperationFactoryImpl(",
          "274:                 graphQLSchema,",
          "275:                 operationDefinition,",
          "276:                 fragments,",
          "277:                 coercedVariableValues,",
          "278:                 null,",
          "279:                 options",
          "280:         ).createNormalizedQueryImpl();",
          "281:     }",
          "298:         return createExecutableNormalizedOperationWithRawVariables(graphQLSchema,",
          "299:                 document,",
          "300:                 operationName,",
          "301:                 rawVariables,",
          "302:                 Options.defaultOptions());",
          "319:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(",
          "320:             GraphQLSchema graphQLSchema,",
          "321:             Document document,",
          "322:             String operationName,",
          "323:             RawVariables rawVariables,",
          "324:             GraphQLContext graphQLContext,",
          "325:             Locale locale",
          "326:     ) {",
          "327:         return createExecutableNormalizedOperationWithRawVariables(",
          "328:                 graphQLSchema,",
          "329:                 document,",
          "330:                 operationName,",
          "331:                 rawVariables,",
          "332:                 Options.defaultOptions().graphQLContext(graphQLContext).locale(locale));",
          "348:     public static ExecutableNormalizedOperation createExecutableNormalizedOperationWithRawVariables(GraphQLSchema graphQLSchema,",
          "349:                                                                                                     Document document,",
          "350:                                                                                                     String operationName,",
          "351:                                                                                                     RawVariables rawVariables,",
          "352:                                                                                                     Options options) {",
          "353:         NodeUtil.GetOperationResult getOperationResult = NodeUtil.getOperation(document, operationName);",
          "354:         OperationDefinition operationDefinition = getOperationResult.operationDefinition;",
          "356:         List<VariableDefinition> variableDefinitions = operationDefinition.getVariableDefinitions();",
          "357:         CoercedVariables coercedVariableValues = ValuesResolver.coerceVariableValues(graphQLSchema,",
          "358:                 variableDefinitions,",
          "359:                 rawVariables);",
          "360:         Map<String, NormalizedInputValue> normalizedVariableValues = ValuesResolver.getNormalizedVariableValues(graphQLSchema,",
          "361:                 variableDefinitions,",
          "362:                 rawVariables);",
          "364:         return new ExecutableNormalizedOperationFactoryImpl(",
          "365:                 graphQLSchema,",
          "366:                 operationDefinition,",
          "367:                 getOperationResult.fragmentsByName,",
          "368:                 coercedVariableValues,",
          "369:                 normalizedVariableValues,",
          "370:                 options",
          "371:         ).createNormalizedQueryImpl();",
          "375:     private static class ExecutableNormalizedOperationFactoryImpl {",
          "376:         private final GraphQLSchema graphQLSchema;",
          "377:         private final OperationDefinition operationDefinition;",
          "378:         private final Map<String, FragmentDefinition> fragments;",
          "379:         private final CoercedVariables coercedVariableValues;",
          "380:         private final @Nullable Map<String, NormalizedInputValue> normalizedVariableValues;",
          "381:         private final Options options;",
          "383:         private final List<PossibleMerger> possibleMergerList = new ArrayList<>();",
          "385:         private final ImmutableListMultimap.Builder<Field, ExecutableNormalizedField> fieldToNormalizedField = ImmutableListMultimap.builder();",
          "386:         private final ImmutableMap.Builder<ExecutableNormalizedField, MergedField> normalizedFieldToMergedField = ImmutableMap.builder();",
          "387:         private final ImmutableMap.Builder<ExecutableNormalizedField, QueryDirectives> normalizedFieldToQueryDirectives = ImmutableMap.builder();",
          "388:         private final ImmutableListMultimap.Builder<FieldCoordinates, ExecutableNormalizedField> coordinatesToNormalizedFields = ImmutableListMultimap.builder();",
          "389:         private int fieldCount = 0;",
          "390:         private int maxDepthSeen = 0;",
          "392:         private ExecutableNormalizedOperationFactoryImpl(",
          "393:                 GraphQLSchema graphQLSchema,",
          "394:                 OperationDefinition operationDefinition,",
          "395:                 Map<String, FragmentDefinition> fragments,",
          "396:                 CoercedVariables coercedVariableValues,",
          "397:                 @Nullable Map<String, NormalizedInputValue> normalizedVariableValues,",
          "398:                 Options options",
          "399:         ) {",
          "400:             this.graphQLSchema = graphQLSchema;",
          "401:             this.operationDefinition = operationDefinition;",
          "402:             this.fragments = fragments;",
          "403:             this.coercedVariableValues = coercedVariableValues;",
          "404:             this.normalizedVariableValues = normalizedVariableValues;",
          "405:             this.options = options;",
          "411:         private ExecutableNormalizedOperation createNormalizedQueryImpl() {",
          "412:             GraphQLObjectType rootType = SchemaUtil.getOperationRootType(graphQLSchema, operationDefinition);",
          "414:             CollectNFResult collectFromOperationResult = collectFromOperation(rootType);",
          "416:             for (ExecutableNormalizedField topLevel : collectFromOperationResult.children) {",
          "417:                 ImmutableList<FieldAndAstParent> fieldAndAstParents = collectFromOperationResult.normalizedFieldToAstFields.get(topLevel);",
          "418:                 MergedField mergedField = newMergedField(fieldAndAstParents);",
          "420:                 captureMergedField(topLevel, mergedField);",
          "422:                 updateFieldToNFMap(topLevel, fieldAndAstParents);",
          "423:                 updateCoordinatedToNFMap(topLevel);",
          "425:                 int depthSeen = buildFieldWithChildren(",
          "426:                         topLevel,",
          "427:                         fieldAndAstParents,",
          "428:                         1);",
          "429:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
          "430:             }",
          "432:             for (PossibleMerger possibleMerger : possibleMergerList) {",
          "433:                 List<ExecutableNormalizedField> childrenWithSameResultKey = possibleMerger.parent.getChildrenWithSameResultKey(possibleMerger.resultKey);",
          "434:                 ENFMerger.merge(possibleMerger.parent, childrenWithSameResultKey, graphQLSchema);",
          "435:             }",
          "436:             return new ExecutableNormalizedOperation(",
          "437:                     operationDefinition.getOperation(),",
          "438:                     operationDefinition.getName(),",
          "439:                     new ArrayList<>(collectFromOperationResult.children),",
          "440:                     fieldToNormalizedField.build(),",
          "441:                     normalizedFieldToMergedField.build(),",
          "442:                     normalizedFieldToQueryDirectives.build(),",
          "443:                     coordinatesToNormalizedFields.build(),",
          "444:                     fieldCount,",
          "445:                     maxDepthSeen",
          "446:             );",
          "449:         private void captureMergedField(ExecutableNormalizedField enf, MergedField mergedFld) {",
          "451:             QueryDirectives queryDirectives = new QueryDirectivesImpl(mergedFld, graphQLSchema, coercedVariableValues.toMap());",
          "452:             normalizedFieldToQueryDirectives.put(enf, queryDirectives);",
          "453:             normalizedFieldToMergedField.put(enf, mergedFld);",
          "456:         private int buildFieldWithChildren(ExecutableNormalizedField executableNormalizedField,",
          "457:                                            ImmutableList<FieldAndAstParent> fieldAndAstParents,",
          "458:                                            int curLevel) {",
          "459:             checkMaxDepthExceeded(curLevel);",
          "461:             CollectNFResult nextLevel = collectFromMergedField(executableNormalizedField, fieldAndAstParents, curLevel + 1);",
          "463:             int maxDepthSeen = curLevel;",
          "464:             for (ExecutableNormalizedField childENF : nextLevel.children) {",
          "465:                 executableNormalizedField.addChild(childENF);",
          "466:                 ImmutableList<FieldAndAstParent> childFieldAndAstParents = nextLevel.normalizedFieldToAstFields.get(childENF);",
          "468:                 MergedField mergedField = newMergedField(childFieldAndAstParents);",
          "469:                 captureMergedField(childENF, mergedField);",
          "471:                 updateFieldToNFMap(childENF, childFieldAndAstParents);",
          "472:                 updateCoordinatedToNFMap(childENF);",
          "474:                 int depthSeen = buildFieldWithChildren(childENF,",
          "475:                         childFieldAndAstParents,",
          "476:                         curLevel + 1);",
          "477:                 maxDepthSeen = Math.max(maxDepthSeen,depthSeen);",
          "479:                 checkMaxDepthExceeded(maxDepthSeen);",
          "480:             }",
          "481:             return maxDepthSeen;",
          "484:         private void checkMaxDepthExceeded(int depthSeen) {",
          "485:             if (depthSeen > this.options.getMaxChildrenDepth()) {",
          "486:                 throw new AbortExecutionException(\"Maximum query depth exceeded. \" + depthSeen + \" > \" + this.options.getMaxChildrenDepth());",
          "487:             }",
          "488:         }",
          "490:         private static MergedField newMergedField(ImmutableList<FieldAndAstParent> fieldAndAstParents) {",
          "491:             return MergedField.newMergedField(map(fieldAndAstParents, fieldAndAstParent -> fieldAndAstParent.field)).build();",
          "494:         private void updateFieldToNFMap(ExecutableNormalizedField executableNormalizedField,",
          "495:                                         ImmutableList<FieldAndAstParent> mergedField) {",
          "496:             for (FieldAndAstParent astField : mergedField) {",
          "497:                 fieldToNormalizedField.put(astField.field, executableNormalizedField);",
          "498:             }",
          "499:         }",
          "501:         private void updateCoordinatedToNFMap(ExecutableNormalizedField topLevel) {",
          "502:             for (String objectType : topLevel.getObjectTypeNames()) {",
          "503:                 FieldCoordinates coordinates = FieldCoordinates.coordinates(objectType, topLevel.getFieldName());",
          "504:                 coordinatesToNormalizedFields.put(coordinates, topLevel);",
          "508:         public CollectNFResult collectFromMergedField(ExecutableNormalizedField executableNormalizedField,",
          "509:                                                       ImmutableList<FieldAndAstParent> mergedField,",
          "510:                                                       int level) {",
          "511:             List<GraphQLFieldDefinition> fieldDefs = executableNormalizedField.getFieldDefinitions(graphQLSchema);",
          "512:             Set<GraphQLObjectType> possibleObjects = resolvePossibleObjects(fieldDefs);",
          "513:             if (possibleObjects.isEmpty()) {",
          "514:                 return new CollectNFResult(ImmutableKit.emptyList(), ImmutableListMultimap.of());",
          "515:             }",
          "517:             List<CollectedField> collectedFields = new ArrayList<>();",
          "518:             for (FieldAndAstParent fieldAndAstParent : mergedField) {",
          "519:                 if (fieldAndAstParent.field.getSelectionSet() == null) {",
          "520:                     continue;",
          "521:                 }",
          "522:                 GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, fieldAndAstParent.astParentType, fieldAndAstParent.field.getName());",
          "523:                 GraphQLUnmodifiedType astParentType = unwrapAll(fieldDefinition.getType());",
          "524:                 this.collectFromSelectionSet(fieldAndAstParent.field.getSelectionSet(),",
          "525:                         collectedFields,",
          "526:                         (GraphQLCompositeType) astParentType,",
          "527:                         possibleObjects",
          "528:                 );",
          "529:             }",
          "530:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "531:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "532:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "534:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, level, executableNormalizedField);",
          "536:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "537:         }",
          "539:         private Map<String, List<CollectedField>> fieldsByResultKey(List<CollectedField> collectedFields) {",
          "540:             Map<String, List<CollectedField>> fieldsByName = new LinkedHashMap<>();",
          "541:             for (CollectedField collectedField : collectedFields) {",
          "542:                 fieldsByName.computeIfAbsent(collectedField.field.getResultKey(), ignored -> new ArrayList<>()).add(collectedField);",
          "543:             }",
          "544:             return fieldsByName;",
          "547:         public CollectNFResult collectFromOperation(GraphQLObjectType rootType) {",
          "550:             Set<GraphQLObjectType> possibleObjects = ImmutableSet.of(rootType);",
          "551:             List<CollectedField> collectedFields = new ArrayList<>();",
          "552:             collectFromSelectionSet(operationDefinition.getSelectionSet(), collectedFields, rootType, possibleObjects);",
          "554:             Map<String, List<CollectedField>> fieldsByName = fieldsByResultKey(collectedFields);",
          "555:             ImmutableList.Builder<ExecutableNormalizedField> resultNFs = ImmutableList.builder();",
          "556:             ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields = ImmutableListMultimap.builder();",
          "558:             createNFs(resultNFs, fieldsByName, normalizedFieldToAstFields, 1, null);",
          "560:             return new CollectNFResult(resultNFs.build(), normalizedFieldToAstFields.build());",
          "561:         }",
          "563:         private void createNFs(ImmutableList.Builder<ExecutableNormalizedField> nfListBuilder,",
          "564:                                Map<String, List<CollectedField>> fieldsByName,",
          "565:                                ImmutableListMultimap.Builder<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields,",
          "566:                                int level,",
          "567:                                ExecutableNormalizedField parent) {",
          "568:             for (String resultKey : fieldsByName.keySet()) {",
          "569:                 List<CollectedField> fieldsWithSameResultKey = fieldsByName.get(resultKey);",
          "570:                 List<CollectedFieldGroup> commonParentsGroups = groupByCommonParents(fieldsWithSameResultKey);",
          "571:                 for (CollectedFieldGroup fieldGroup : commonParentsGroups) {",
          "572:                     ExecutableNormalizedField nf = createNF(fieldGroup, level, parent);",
          "573:                     if (nf == null) {",
          "574:                         continue;",
          "575:                     }",
          "576:                     for (CollectedField collectedField : fieldGroup.fields) {",
          "577:                         normalizedFieldToAstFields.put(nf, new FieldAndAstParent(collectedField.field, collectedField.astTypeCondition));",
          "578:                     }",
          "579:                     nfListBuilder.add(nf);",
          "581:                 if (commonParentsGroups.size() > 1) {",
          "582:                     possibleMergerList.add(new PossibleMerger(parent, resultKey));",
          "587:         private ExecutableNormalizedField createNF(CollectedFieldGroup collectedFieldGroup,",
          "588:                                                    int level,",
          "589:                                                    ExecutableNormalizedField parent) {",
          "591:             this.fieldCount++;",
          "592:             if (this.fieldCount > this.options.getMaxFieldsCount()) {",
          "593:                 throw new AbortExecutionException(\"Maximum field count exceeded. \" + this.fieldCount + \" > \" + this.options.getMaxFieldsCount());",
          "594:             }",
          "595:             Field field;",
          "596:             Set<GraphQLObjectType> objectTypes = collectedFieldGroup.objectTypes;",
          "597:             field = collectedFieldGroup.fields.iterator().next().field;",
          "598:             String fieldName = field.getName();",
          "599:             GraphQLFieldDefinition fieldDefinition = Introspection.getFieldDef(graphQLSchema, objectTypes.iterator().next(), fieldName);",
          "601:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(fieldDefinition.getArguments(), field.getArguments(), CoercedVariables.of(this.coercedVariableValues.toMap()));",
          "602:             Map<String, NormalizedInputValue> normalizedArgumentValues = null;",
          "603:             if (this.normalizedVariableValues != null) {",
          "604:                 normalizedArgumentValues = ValuesResolver.getNormalizedArgumentValues(fieldDefinition.getArguments(), field.getArguments(), this.normalizedVariableValues);",
          "605:             }",
          "606:             ImmutableList<String> objectTypeNames = map(objectTypes, GraphQLObjectType::getName);",
          "607:             return ExecutableNormalizedField.newNormalizedField()",
          "608:                     .alias(field.getAlias())",
          "609:                     .resolvedArguments(argumentValues)",
          "610:                     .normalizedArguments(normalizedArgumentValues)",
          "611:                     .astArguments(field.getArguments())",
          "612:                     .objectTypeNames(objectTypeNames)",
          "613:                     .fieldName(fieldName)",
          "614:                     .level(level)",
          "615:                     .parent(parent)",
          "616:                     .build();",
          "619:         private List<CollectedFieldGroup> groupByCommonParents(Collection<CollectedField> fields) {",
          "620:             return groupByCommonParentsNoDeferSupport(fields);",
          "623:         private List<CollectedFieldGroup> groupByCommonParentsNoDeferSupport(Collection<CollectedField> fields) {",
          "624:             ImmutableSet.Builder<GraphQLObjectType> objectTypes = ImmutableSet.builder();",
          "625:             for (CollectedField collectedField : fields) {",
          "626:                 objectTypes.addAll(collectedField.objectTypes);",
          "627:             }",
          "628:             Set<GraphQLObjectType> allRelevantObjects = objectTypes.build();",
          "629:             Map<GraphQLType, ImmutableList<CollectedField>> groupByAstParent = groupingBy(fields, fieldAndType -> fieldAndType.astTypeCondition);",
          "630:             if (groupByAstParent.size() == 1) {",
          "631:                 return singletonList(new CollectedFieldGroup(ImmutableSet.copyOf(fields), allRelevantObjects));",
          "632:             }",
          "633:             ImmutableList.Builder<CollectedFieldGroup> result = ImmutableList.builder();",
          "634:             for (GraphQLObjectType objectType : allRelevantObjects) {",
          "635:                 Set<CollectedField> relevantFields = filterSet(fields, field -> field.objectTypes.contains(objectType));",
          "636:                 result.add(new CollectedFieldGroup(relevantFields, singleton(objectType)));",
          "637:             }",
          "638:             return result.build();",
          "641:         private void collectFromSelectionSet(SelectionSet selectionSet,",
          "642:                                              List<CollectedField> result,",
          "643:                                              GraphQLCompositeType astTypeCondition,",
          "644:                                              Set<GraphQLObjectType> possibleObjects",
          "645:         ) {",
          "646:             for (Selection<?> selection : selectionSet.getSelections()) {",
          "647:                 if (selection instanceof Field) {",
          "648:                     collectField(result, (Field) selection, possibleObjects, astTypeCondition);",
          "649:                 } else if (selection instanceof InlineFragment) {",
          "650:                     collectInlineFragment(result, (InlineFragment) selection, possibleObjects, astTypeCondition);",
          "651:                 } else if (selection instanceof FragmentSpread) {",
          "652:                     collectFragmentSpread(result, (FragmentSpread) selection, possibleObjects);",
          "653:                 }",
          "654:             }",
          "657:         private void collectFragmentSpread(List<CollectedField> result,",
          "658:                                            FragmentSpread fragmentSpread,",
          "659:                                            Set<GraphQLObjectType> possibleObjects",
          "660:         ) {",
          "661:             if (!conditionalNodes.shouldInclude(fragmentSpread,",
          "662:                     this.coercedVariableValues.toMap(),",
          "663:                     this.graphQLSchema,",
          "664:                     this.options.graphQLContext)) {",
          "665:                 return;",
          "666:             }",
          "667:             FragmentDefinition fragmentDefinition = assertNotNull(this.fragments.get(fragmentSpread.getName()));",
          "669:             if (!conditionalNodes.shouldInclude(fragmentDefinition,",
          "670:                     this.coercedVariableValues.toMap(),",
          "671:                     this.graphQLSchema,",
          "672:                     this.options.graphQLContext)) {",
          "673:                 return;",
          "675:             GraphQLCompositeType newAstTypeCondition = (GraphQLCompositeType) assertNotNull(this.graphQLSchema.getType(fragmentDefinition.getTypeCondition().getName()));",
          "676:             Set<GraphQLObjectType> newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
          "678:             collectFromSelectionSet(fragmentDefinition.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "681:         private void collectInlineFragment(List<CollectedField> result,",
          "682:                                            InlineFragment inlineFragment,",
          "683:                                            Set<GraphQLObjectType> possibleObjects,",
          "684:                                            GraphQLCompositeType astTypeCondition",
          "685:         ) {",
          "686:             if (!conditionalNodes.shouldInclude(inlineFragment, this.coercedVariableValues.toMap(), this.graphQLSchema, this.options.graphQLContext)) {",
          "687:                 return;",
          "688:             }",
          "689:             Set<GraphQLObjectType> newPossibleObjects = possibleObjects;",
          "690:             GraphQLCompositeType newAstTypeCondition = astTypeCondition;",
          "692:             if (inlineFragment.getTypeCondition() != null) {",
          "693:                 newAstTypeCondition = (GraphQLCompositeType) this.graphQLSchema.getType(inlineFragment.getTypeCondition().getName());",
          "694:                 newPossibleObjects = narrowDownPossibleObjects(possibleObjects, newAstTypeCondition);",
          "696:             }",
          "698:             collectFromSelectionSet(inlineFragment.getSelectionSet(), result, newAstTypeCondition, newPossibleObjects);",
          "701:         private void collectField(List<CollectedField> result,",
          "702:                                   Field field,",
          "703:                                   Set<GraphQLObjectType> possibleObjectTypes,",
          "704:                                   GraphQLCompositeType astTypeCondition",
          "705:         ) {",
          "706:             if (!conditionalNodes.shouldInclude(field,",
          "707:                     this.coercedVariableValues.toMap(),",
          "708:                     this.graphQLSchema,",
          "709:                     this.options.graphQLContext)) {",
          "710:                 return;",
          "711:             }",
          "713:             if (possibleObjectTypes.isEmpty()) {",
          "714:                 return;",
          "715:             }",
          "716:             result.add(new CollectedField(field, possibleObjectTypes, astTypeCondition));",
          "719:         private Set<GraphQLObjectType> narrowDownPossibleObjects(Set<GraphQLObjectType> currentOnes,",
          "720:                                                                  GraphQLCompositeType typeCondition) {",
          "722:             ImmutableSet<GraphQLObjectType> resolvedTypeCondition = resolvePossibleObjects(typeCondition);",
          "723:             if (currentOnes.isEmpty()) {",
          "724:                 return resolvedTypeCondition;",
          "725:             }",
          "728:             return intersection(currentOnes, resolvedTypeCondition);",
          "731:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(List<GraphQLFieldDefinition> defs) {",
          "732:             ImmutableSet.Builder<GraphQLObjectType> builder = ImmutableSet.builder();",
          "734:             for (GraphQLFieldDefinition def : defs) {",
          "735:                 GraphQLUnmodifiedType outputType = unwrapAll(def.getType());",
          "736:                 if (outputType instanceof GraphQLCompositeType) {",
          "737:                     builder.addAll(resolvePossibleObjects((GraphQLCompositeType) outputType));",
          "738:                 }",
          "739:             }",
          "741:             return builder.build();",
          "744:         private ImmutableSet<GraphQLObjectType> resolvePossibleObjects(GraphQLCompositeType type) {",
          "745:             if (type instanceof GraphQLObjectType) {",
          "746:                 return ImmutableSet.of((GraphQLObjectType) type);",
          "747:             } else if (type instanceof GraphQLInterfaceType) {",
          "748:                 return ImmutableSet.copyOf(graphQLSchema.getImplementations((GraphQLInterfaceType) type));",
          "749:             } else if (type instanceof GraphQLUnionType) {",
          "750:                 List<GraphQLNamedOutputType> unionTypes = ((GraphQLUnionType) type).getTypes();",
          "751:                 return ImmutableSet.copyOf(ImmutableKit.map(unionTypes, GraphQLObjectType.class::cast));",
          "752:             } else {",
          "753:                 return assertShouldNeverHappen();",
          "754:             }",
          "757:         private static class PossibleMerger {",
          "758:             ExecutableNormalizedField parent;",
          "759:             String resultKey;",
          "761:             public PossibleMerger(ExecutableNormalizedField parent, String resultKey) {",
          "762:                 this.parent = parent;",
          "763:                 this.resultKey = resultKey;",
          "764:             }",
          "767:         private static class CollectedField {",
          "768:             Field field;",
          "769:             Set<GraphQLObjectType> objectTypes;",
          "770:             GraphQLCompositeType astTypeCondition;",
          "772:             public CollectedField(Field field, Set<GraphQLObjectType> objectTypes, GraphQLCompositeType astTypeCondition) {",
          "773:                 this.field = field;",
          "774:                 this.objectTypes = objectTypes;",
          "775:                 this.astTypeCondition = astTypeCondition;",
          "776:             }",
          "779:         public static class CollectNFResult {",
          "780:             private final Collection<ExecutableNormalizedField> children;",
          "781:             private final ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields;",
          "783:             public CollectNFResult(Collection<ExecutableNormalizedField> children, ImmutableListMultimap<ExecutableNormalizedField, FieldAndAstParent> normalizedFieldToAstFields) {",
          "784:                 this.children = children;",
          "785:                 this.normalizedFieldToAstFields = normalizedFieldToAstFields;",
          "786:             }",
          "787:         }",
          "789:         private static class FieldAndAstParent {",
          "790:             final Field field;",
          "791:             final GraphQLCompositeType astParentType;",
          "793:             private FieldAndAstParent(Field field, GraphQLCompositeType astParentType) {",
          "794:                 this.field = field;",
          "795:                 this.astParentType = astParentType;",
          "799:         private static class CollectedFieldGroup {",
          "800:             Set<GraphQLObjectType> objectTypes;",
          "801:             Set<CollectedField> fields;",
          "803:             public CollectedFieldGroup(Set<CollectedField> fields, Set<GraphQLObjectType> objectTypes) {",
          "804:                 this.fields = fields;",
          "805:                 this.objectTypes = objectTypes;",
          "806:             }",
          "810: }",
          "",
          "---------------"
        ],
        "src/main/java/graphql/schema/impl/SchemaUtil.java||src/main/java/graphql/schema/impl/SchemaUtil.java": [
          "File: src/main/java/graphql/schema/impl/SchemaUtil.java -> src/main/java/graphql/schema/impl/SchemaUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import com.google.common.collect.ImmutableMap;",
          "5: import graphql.Internal;",
          "6: import graphql.schema.GraphQLImplementingType;",
          "7: import graphql.schema.GraphQLNamedOutputType;",
          "8: import graphql.schema.GraphQLNamedType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import graphql.execution.MissingRootTypeException;",
          "7: import graphql.language.OperationDefinition;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: import java.util.Map;",
          "22: import java.util.TreeMap;",
          "24: @Internal",
          "25: public class SchemaUtil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import static graphql.Assert.assertShouldNeverHappen;",
          "27: import static graphql.language.OperationDefinition.Operation.MUTATION;",
          "28: import static graphql.language.OperationDefinition.Operation.QUERY;",
          "29: import static graphql.language.OperationDefinition.Operation.SUBSCRIPTION;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93:         final Map<String, GraphQLNamedType> typeMap = schema.getTypeMap();",
          "94:         List<GraphQLSchemaElement> roots = new ArrayList<>(typeMap.values());",
          "95:         roots.addAll(schema.getDirectives());",
          "96:         SchemaTraverser schemaTraverser = new SchemaTraverser(schemaElement -> schemaElement.getChildrenWithTypeReferences().getChildrenAsList());",
          "97:         schemaTraverser.depthFirst(new GraphQLTypeResolvingVisitor(typeMap), roots);",
          "98:     }",
          "",
          "[Removed Lines]",
          "99: }",
          "",
          "[Added Lines]",
          "103:         roots.addAll(schema.getSchemaAppliedDirectives());",
          "108:     public static GraphQLObjectType getOperationRootType(GraphQLSchema graphQLSchema, OperationDefinition operationDefinition) {",
          "109:         OperationDefinition.Operation operation = operationDefinition.getOperation();",
          "110:         if (operation == MUTATION) {",
          "111:             GraphQLObjectType mutationType = graphQLSchema.getMutationType();",
          "112:             if (mutationType == null) {",
          "113:                 throw new MissingRootTypeException(\"Schema is not configured for mutations.\", operationDefinition.getSourceLocation());",
          "114:             }",
          "115:             return mutationType;",
          "116:         } else if (operation == QUERY) {",
          "117:             GraphQLObjectType queryType = graphQLSchema.getQueryType();",
          "118:             if (queryType == null) {",
          "119:                 throw new MissingRootTypeException(\"Schema does not define the required query root type.\", operationDefinition.getSourceLocation());",
          "120:             }",
          "121:             return queryType;",
          "122:         } else if (operation == SUBSCRIPTION) {",
          "123:             GraphQLObjectType subscriptionType = graphQLSchema.getSubscriptionType();",
          "124:             if (subscriptionType == null) {",
          "125:                 throw new MissingRootTypeException(\"Schema is not configured for subscriptions.\", operationDefinition.getSourceLocation());",
          "126:             }",
          "127:             return subscriptionType;",
          "128:         } else {",
          "129:             return assertShouldNeverHappen(\"Unhandled case. An extra operation enum has been added without code support\");",
          "130:         }",
          "131:     }",
          "132: }",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy||src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy": [
          "File: src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy -> src/test/groovy/graphql/InterfacesImplementingInterfacesTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "892:         given:",
          "893:         def graphQLSchema = createComplexSchema()",
          "895:         when:",
          "897:             {",
          "898:                 nodeType: __type(name: \"Node\") {",
          "899:                     possibleTypes {",
          "",
          "[Removed Lines]",
          "896:         def result = GraphQL.newGraphQL(graphQLSchema).build().execute(\"\"\"",
          "",
          "[Added Lines]",
          "895:         GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build()",
          "898:         String query = \"\"\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "901:                         name",
          "902:                     }",
          "903:                 }",
          "905:                     possibleTypes {",
          "906:                         kind",
          "907:                         name",
          "",
          "[Removed Lines]",
          "904:                 resourceType: __type(name: \"Resource\") {",
          "",
          "[Added Lines]",
          "906:             }",
          "907:         \"\"\"",
          "908:         def result = graphQL.execute(query)",
          "910:         then:",
          "911:         !result.errors",
          "912:         result.data == [",
          "913:                 nodeType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
          "914:         ]",
          "916:         when:",
          "917:         query = \"\"\"",
          "918:         {",
          "919:             resourceType: __type(name: \"Resource\") {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "910:                         kind",
          "911:                         name",
          "912:                     }",
          "915:                     interfaces {",
          "916:                         kind",
          "917:                         name",
          "918:                     }",
          "919:                 }",
          "923:         then:",
          "924:         !result.errors",
          "925:         result.data == [",
          "927:                 imageType   : [interfaces: [[kind: 'INTERFACE', name: 'Resource'], [kind: 'INTERFACE', name: 'Node']]],",
          "929:         ]",
          "930:     }",
          "",
          "[Removed Lines]",
          "913:                 }",
          "914:                 imageType: __type(name: \"Image\") {",
          "920:             }",
          "921:         \"\"\")",
          "926:                 nodeType    : [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']]],",
          "928:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
          "",
          "[Added Lines]",
          "928:                 }",
          "929:         }",
          "930:         \"\"\"",
          "931:         result = graphQL.execute(query)",
          "933:         then:",
          "934:         !result.errors",
          "935:         result.data == [",
          "936:                 resourceType: [possibleTypes: [[kind: 'OBJECT', name: 'File'], [kind: 'OBJECT', name: 'Image']], interfaces: [[kind: 'INTERFACE', name: 'Node']]]",
          "937:         ]",
          "939:         when:",
          "941:         query = \"\"\"",
          "942:         {",
          "943:             imageType: __type(name: \"Image\") {",
          "949:         }",
          "950:         \"\"\"",
          "951:         result = graphQL.execute(query)",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/UnionTest.groovy||src/test/groovy/graphql/UnionTest.groovy": [
          "File: src/test/groovy/graphql/UnionTest.groovy -> src/test/groovy/graphql/UnionTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: class UnionTest extends Specification {",
          "9:         def query = \"\"\"",
          "10:             {",
          "11:                 Named: __type(name: \"Named\") {",
          "",
          "[Removed Lines]",
          "8:     def \"can introspect on union and intersection types\"() {",
          "",
          "[Added Lines]",
          "7:     def \"can introspect on union types\"() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:                   possibleTypes { name }",
          "17:                   enumValues { name }",
          "18:                   inputFields { name }",
          "28:                 }",
          "29:             }",
          "30:             \"\"\"",
          "",
          "[Removed Lines]",
          "19:             }",
          "20:                 Pet: __type(name: \"Pet\") {",
          "21:                   kind",
          "22:                   name",
          "23:                   fields { name }",
          "24:                   interfaces { name }",
          "25:                   possibleTypes { name }",
          "26:                   enumValues { name }",
          "27:                   inputFields { name }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:                 ],",
          "44:                 enumValues   : null,",
          "45:                 inputFields  : null",
          "48:                                       kind         : 'UNION',",
          "49:                                       name         : 'Pet',",
          "50:                                       fields       : null,",
          "",
          "[Removed Lines]",
          "46:         ],",
          "47:                               Pet  : [",
          "",
          "[Added Lines]",
          "36:         ]]",
          "37:         when:",
          "38:         def executionResult = GraphQL.newGraphQL(GarfieldSchema.GarfieldSchema).build().execute(query)",
          "40:         then:",
          "41:         executionResult.data == expectedResult",
          "44:     }",
          "46:     def \"can introspect on intersection types\"() {",
          "47:         def query = \"\"\"",
          "48:             {",
          "49:                 Pet: __type(name: \"Pet\") {",
          "50:                   kind",
          "51:                   name",
          "52:                   fields { name }",
          "53:                   interfaces { name }",
          "54:                   possibleTypes { name }",
          "55:                   enumValues { name }",
          "56:                   inputFields { name }",
          "57:                 }",
          "58:             }",
          "59:             \"\"\"",
          "61:         def expectedResult = [Pet  : [",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/execution/ConditionalNodesTest.groovy||src/test/groovy/graphql/execution/ConditionalNodesTest.groovy": [
          "File: src/test/groovy/graphql/execution/ConditionalNodesTest.groovy -> src/test/groovy/graphql/execution/ConditionalNodesTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package graphql.execution",
          "4: import graphql.language.Argument",
          "5: import graphql.language.BooleanValue",
          "6: import graphql.language.Directive",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import graphql.execution.conditional.ConditionalNodes",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy||src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy": [
          "File: src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy -> src/test/groovy/graphql/introspection/GoodFaithIntrospectionInstrumentationTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphql.ExecutionInput",
          "4: import graphql.ExecutionResult",
          "5: import graphql.TestUtil",
          "6: import spock.lang.Specification",
          "8: class GoodFaithIntrospectionInstrumentationTest extends Specification {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import graphql.execution.AbortExecutionException",
          "7: import graphql.execution.CoercedVariables",
          "8: import graphql.language.Document",
          "9: import graphql.normalized.ExecutableNormalizedOperationFactory",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:     def setup() {",
          "13:         GoodFaithIntrospection.enabledJvmWide(true)",
          "14:     }",
          "15:     def cleanup() {",
          "16:         GoodFaithIntrospection.enabledJvmWide(true)",
          "17:     }",
          "19:     def \"test asking for introspection in good faith\"() {",
          "21:         when:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:     def \"standard introspection query is inside limits just in general\"() {",
          "26:         when:",
          "27:         Document document = TestUtil.toDocument(IntrospectionQuery.INTROSPECTION_QUERY)",
          "28:         def eno = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphql.getGraphQLSchema(), document,",
          "29:                 \"IntrospectionQuery\", CoercedVariables.emptyVariables())",
          "31:         then:",
          "32:         eno.getOperationFieldCount() < GoodFaithIntrospection.GOOD_FAITH_MAX_FIELDS_COUNT  // currently 189",
          "33:         eno.getOperationDepth() < GoodFaithIntrospection.GOOD_FAITH_MAX_DEPTH_COUNT  // currently 13",
          "34:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:                 alias1 :  __type(name : \"t1\") { name }",
          "70:             }",
          "71:         \"\"\"                                                                                           | _",
          "73:         \"\"\" query badActor {",
          "74:                 __schema { types { name} }",
          "75:                 alias1 : __schema { types { name} }",
          "76:             }",
          "77:         \"\"\"                                                                                           | _",
          "78:     }",
          "80:     def \"mixed general queries and introspections will be stopped anyway\"() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:         \"\"\" query badActor {",
          "91:                 a1: __type(name : \"t\") { name }",
          "92:                 a2 :  __type(name : \"t1\") { name }",
          "93:             }",
          "94:         \"\"\"                                                                                           | _",
          "102:         \"\"\" query badActor {",
          "103:                 a1: __schema { types { name} }",
          "104:                 a2 : __schema { types { name} }",
          "105:             }",
          "106:         \"\"\"                                                                                           | _",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:         !er.errors.isEmpty()",
          "134:         er.errors[0] instanceof GoodFaithIntrospection.BadFaithIntrospectionError",
          "135:     }",
          "136: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:     def \"can stop deep queries\"() {",
          "169:         when:",
          "170:         def query = createDeepQuery(depth)",
          "171:         def then = System.currentTimeMillis()",
          "172:         ExecutionResult er = graphql.execute(query)",
          "173:         def ms = System.currentTimeMillis()-then",
          "175:         then:",
          "176:         !er.errors.isEmpty()",
          "177:         er.errors[0].class == targetError",
          "178:         er.data == null // it stopped hard - it did not continue to normal business",
          "179:         println \"Took \" + ms + \"ms\"",
          "181:         where:",
          "182:         depth | targetError",
          "183:         2     | GoodFaithIntrospection.BadFaithIntrospectionError.class",
          "184:         10    | AbortExecutionException.class",
          "185:         15    | AbortExecutionException.class",
          "186:         20    | AbortExecutionException.class",
          "187:         25    | AbortExecutionException.class",
          "188:         50    | AbortExecutionException.class",
          "189:         100    | AbortExecutionException.class",
          "190:     }",
          "192:     String createDeepQuery(int depth = 25) {",
          "193:         def result = \"\"\"",
          "194: query test {",
          "195:   __schema {",
          "196:     types {",
          "197:       ...F1",
          "198:     }",
          "199:   }",
          "200: }",
          "201: \"\"\"",
          "202:         for (int i = 1; i < depth; i++) {",
          "203:             result += \"\"\"",
          "204:         fragment F$i on __Type {",
          "205:           fields {",
          "206:             type {",
          "207:               ...F${i + 1}",
          "208:             }",
          "209:           }",
          "211:   ofType {",
          "212:     ...F${i + 1}",
          "213:   }",
          "214: }",
          "217: \"\"\"",
          "218:         }",
          "219:         result += \"\"\"",
          "220:         fragment F$depth on __Type {",
          "221:           fields {",
          "222:             type {",
          "223: name",
          "224:             }",
          "225:           }",
          "226: }",
          "229: \"\"\"",
          "230:         return result",
          "231:     }",
          "",
          "---------------"
        ],
        "src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy||src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy": [
          "File: src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy -> src/test/groovy/graphql/normalized/ExecutableNormalizedOperationFactoryTest.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import graphql.GraphQL",
          "4: import graphql.TestUtil",
          "5: import graphql.execution.CoercedVariables",
          "6: import graphql.execution.MergedField",
          "7: import graphql.execution.RawVariables",
          "8: import graphql.language.Document",
          "9: import graphql.language.Field",
          "10: import graphql.language.FragmentDefinition",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import graphql.execution.AbortExecutionException",
          "9: import graphql.execution.directives.QueryAppliedDirective",
          "10: import graphql.introspection.IntrospectionQuery",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: import graphql.util.TraverserVisitorStub",
          "18: import spock.lang.Specification",
          "20: import static graphql.TestUtil.schema",
          "21: import static graphql.language.AstPrinter.printAst",
          "22: import static graphql.parser.Parser.parseValue",
          "23: import static graphql.schema.FieldCoordinates.coordinates",
          "25: class ExecutableNormalizedOperationFactoryTest extends Specification {",
          "27:     def \"test\"() {",
          "28:         String schema = \"\"\"",
          "29: type Query{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.stream.Collectors",
          "24: import java.util.stream.IntStream",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "708:         ]",
          "709:     }",
          "711:     def \"query with interface in between\"() {",
          "712:         def graphQLSchema = schema(\"\"\"",
          "713:         type Query {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "716:     def \"query with fragment and type condition merged together 2\"() {",
          "717:         def graphQLSchema = TestUtil.schema(\"\"\"",
          "718:             type Query {",
          "719:                 pet : Pet",
          "720:             }",
          "721:             interface Pet {",
          "722:                 name : String",
          "723:             }",
          "725:             type Dog implements Pet {",
          "726:                 name : String",
          "727:             }",
          "729:             type Bird implements Pet {",
          "730:                 name : String",
          "731:             }",
          "733:             type Cat implements Pet {",
          "734:                 name : String",
          "735:             }",
          "736:         \"\"\")",
          "737:         def query = \"\"\"",
          "738:         {",
          "739:             pet {",
          "740:                 name",
          "741:                 ... on Dog {",
          "742:                     name",
          "743:                 }",
          "744:                 ... CatFrag",
          "745:             }",
          "746:          }",
          "748:         fragment CatFrag on Cat {",
          "749:             name",
          "750:         }",
          "751:             \"\"\"",
          "752:         assertValidQuery(graphQLSchema, query)",
          "754:         Document document = TestUtil.parseQuery(query)",
          "756:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "757:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "758:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "760:         expect:",
          "761:         printedTree == ['-Query.pet: Pet',",
          "762:                         '--[Bird, Cat, Dog].name: String'",
          "763:         ]",
          "764:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "895:         result",
          "896:     }",
          "898:     static List<String> printTreeWithLevelInfo(ExecutableNormalizedOperation queryExecutionTree, GraphQLSchema schema) {",
          "899:         def result = []",
          "900:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "954:     List<String> printTreeAndDirectives(ExecutableNormalizedOperation queryExecutionTree) {",
          "955:         def result = []",
          "956:         Traverser<ExecutableNormalizedField> traverser = Traverser.depthFirst({ it.getChildren() })",
          "957:         traverser.traverse(queryExecutionTree.getTopLevelFields(), new TraverserVisitorStub<ExecutableNormalizedField>() {",
          "958:             @Override",
          "959:             TraversalControl enter(TraverserContext<ExecutableNormalizedField> context) {",
          "960:                 ExecutableNormalizedField queryExecutionField = context.thisNode()",
          "961:                 def queryDirectives = queryExecutionTree.getQueryDirectives(queryExecutionField)",
          "963:                 def fieldDetails = queryExecutionField.printDetails()",
          "964:                 if (queryDirectives != null) {",
          "965:                     def appliedDirectivesByName = queryDirectives.getImmediateAppliedDirectivesByName()",
          "966:                     if (!appliedDirectivesByName.isEmpty()) {",
          "967:                         fieldDetails += \" \" + printDirectives(appliedDirectivesByName)",
          "968:                     }",
          "969:                 }",
          "970:                 result << fieldDetails",
          "971:                 return TraversalControl.CONTINUE",
          "972:             }",
          "974:             String printDirectives(Map<String, List<QueryAppliedDirective>> stringListMap) {",
          "975:                 String s = stringListMap.collect { entry ->",
          "976:                     entry.value.collect {",
          "977:                         \" @\" + it.name + \"(\" + it.getArguments().collect {",
          "978:                             it.name + \" : \" + '\"' + it.value + '\"'",
          "979:                         }.join(\",\") + \")\"",
          "980:                     }.join(' ')",
          "981:                 }.join(\" \")",
          "982:                 return s",
          "983:             }",
          "984:         })",
          "985:         result",
          "986:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1653:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "1654:         when:",
          "1655:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.emptyVariables())",
          "1663:         then:",
          "1664:         tree.normalizedFieldToMergedField.size() == 5",
          "1665:         tree.fieldToNormalizedField.size() == 7",
          "1666:     }",
          "",
          "[Removed Lines]",
          "1656:         println String.join(\"\\n\", printTree(tree))",
          "",
          "[Added Lines]",
          "1746:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "1750:         printedTree == ['-Query.pets: Pet',",
          "1751:                         '--friend: Cat.catFriend: CatFriend',",
          "1752:                         '---CatFriend.catFriendName: String',",
          "1753:                         '--friend: Dog.dogFriend: DogFriend',",
          "1754:                         '---DogFriend.dogFriendName: String']",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2383:         ]",
          "2384:     }",
          "2386:     def \"missing argument\"() {",
          "2387:         given:",
          "2388:         String schema = \"\"\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2484:     def \"query directives are captured is respected\"() {",
          "2485:         given:",
          "2486:         String schema = \"\"\"",
          "2487:         directive @fieldDirective(target : String!) on FIELD",
          "2488:         directive @fieldXDirective(target : String!) on FIELD",
          "2490:         type Query {",
          "2491:           pets: Pet",
          "2492:         }",
          "2493:         interface Pet {",
          "2494:           name: String",
          "2495:         }",
          "2496:         type Cat implements Pet {",
          "2497:           name: String",
          "2498:         }",
          "2499:         type Dog implements Pet {",
          "2500:             name: String",
          "2501:         }",
          "2502:         \"\"\"",
          "2503:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "2505:         String query = '''",
          "2506:           query q {",
          "2507:               pets {",
          "2508:                 ... on Cat {",
          "2509:                     cName : name @fieldDirective(target : \"Cat.name\")",
          "2510:               }",
          "2511:                 ... on Dog {",
          "2512:                     dName : name @fieldDirective(target : \"Dog.name\") @fieldXDirective(target : \"Dog.name\")",
          "2513:               }",
          "2514:               ... on Pet {",
          "2515:                     pName : name @fieldDirective(target : \"Pet.name\")",
          "2516:               }",
          "2517:           }}",
          "2518:         '''",
          "2520:         def variables = [:]",
          "2521:         assertValidQuery(graphQLSchema, query, variables)",
          "2522:         Document document = TestUtil.parseQuery(query)",
          "2523:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2524:         when:",
          "2525:         def tree = dependencyGraph.createExecutableNormalizedOperationWithRawVariables(graphQLSchema, document, null, RawVariables.of(variables))",
          "2526:         def printedTree = printTreeAndDirectives(tree)",
          "2528:         then:",
          "2529:         printedTree == ['Query.pets',",
          "2530:                         'cName: Cat.name  @fieldDirective(target : \"Cat.name\")',",
          "2531:                         'dName: Dog.name  @fieldDirective(target : \"Dog.name\")  @fieldXDirective(target : \"Dog.name\")',",
          "2532:                         'pName: [Cat, Dog].name  @fieldDirective(target : \"Pet.name\")',",
          "2533:         ]",
          "2534:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2405:         printedTree == ['Query.hello']",
          "2406:         tree.getTopLevelFields().get(0).getNormalizedArguments().isEmpty()",
          "2407:     }",
          "2408: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2559:     def \"reused field via fragments\"() {",
          "2560:         String schema = \"\"\"",
          "2561:         type Query {",
          "2562:           pet: Pet",
          "2563:         }",
          "2564:         type Pet {",
          "2565:           owner: Person",
          "2566:           emergencyContact: Person",
          "2567:         }",
          "2568:         type Person {",
          "2569:           name: String",
          "2570:         }",
          "2571:         \"\"\"",
          "2572:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "2574:         String query = \"\"\"",
          "2575: { pet {",
          "2576:   owner { ...personName }",
          "2577:   emergencyContact { ...personName }",
          "2578: }}",
          "2579: fragment personName on Person {",
          "2580:   name",
          "2582:         \"\"\"",
          "2584:         assertValidQuery(graphQLSchema, query)",
          "2586:         Document document = TestUtil.parseQuery(query)",
          "2588:         ExecutableNormalizedOperationFactory dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2589:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "2590:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2592:         expect:",
          "2593:         printedTree == ['-Query.pet: Pet',",
          "2594:                         '--Pet.owner: Person',",
          "2595:                         '---Person.name: String',",
          "2596:                         '--Pet.emergencyContact: Person',",
          "2597:                         '---Person.name: String'",
          "2598:         ]",
          "2600:     }",
          "2603:     def \"test interface fields with three different output types (covariance) on the implementations\"() {",
          "2604:         def graphQLSchema = schema(\"\"\"",
          "2605:         interface Animal {",
          "2606:             parent: Animal",
          "2607:             name: String",
          "2608:         }",
          "2609:         type Cat implements Animal {",
          "2610:             name: String",
          "2611:             parent: Cat",
          "2612:         }",
          "2613:         type Dog implements Animal {",
          "2614:             name: String",
          "2615:             parent: Dog",
          "2616:             isGoodBoy: Boolean",
          "2617:         }",
          "2618:         type Bird implements Animal {",
          "2619:             name: String",
          "2620:             parent: Bird",
          "2621:         }",
          "2622:         type Query {",
          "2623:             animal: Animal",
          "2624:         }",
          "2625:         \"\"\")",
          "2627:         def query = \"\"\"",
          "2628:         {",
          "2629:             animal {",
          "2630:                 parent {",
          "2631:                     name",
          "2632:                 }",
          "2633:             }",
          "2634:         }",
          "2635:         \"\"\"",
          "2637:         assertValidQuery(graphQLSchema, query)",
          "2639:         Document document = TestUtil.parseQuery(query)",
          "2641:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2642:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "2643:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2645:         expect:",
          "2646:         printedTree == [",
          "2647:                 \"-Query.animal: Animal\",",
          "2648:                 \"--[Bird, Cat, Dog].parent: Bird, Cat, Dog\",",
          "2649:                 \"---[Bird, Cat, Dog].name: String\",",
          "2650:         ]",
          "2651:     }",
          "2653:     def \"covariants with union fields\"() {",
          "2654:         def graphQLSchema = schema(\"\"\"",
          "2655:         type Query {",
          "2656:             animal: Animal",
          "2657:         }",
          "2658:         interface Animal {",
          "2659:             parent: DogOrCat",
          "2660:             name: String",
          "2661:         }",
          "2662:         type Cat implements Animal {",
          "2663:             name: String",
          "2664:             parent: Cat",
          "2665:         }",
          "2666:         type Dog implements Animal {",
          "2667:             name: String",
          "2668:             parent: Dog",
          "2669:             isGoodBoy: Boolean",
          "2670:         }",
          "2671:         union DogOrCat = Dog | Cat",
          "2672:         \"\"\")",
          "2674:         def query = \"\"\"",
          "2675:         {",
          "2676:             animal {",
          "2677:                 parent {",
          "2678:                   __typename",
          "2679:                 }",
          "2680:             }",
          "2681:         }",
          "2682:         \"\"\"",
          "2684:         assertValidQuery(graphQLSchema, query)",
          "2686:         Document document = TestUtil.parseQuery(query)",
          "2688:         def dependencyGraph = new ExecutableNormalizedOperationFactory()",
          "2689:         def tree = dependencyGraph.createExecutableNormalizedOperation(graphQLSchema, document, null, CoercedVariables.emptyVariables())",
          "2690:         def printedTree = printTreeWithLevelInfo(tree, graphQLSchema)",
          "2692:         expect:",
          "2693:         printedTree == [",
          "2694:                 \"-Query.animal: Animal\",",
          "2695:                 \"--[Cat, Dog].parent: Cat, Dog\",",
          "2696:                 \"---[Cat, Dog].__typename: String!\",",
          "2697:         ]",
          "2698:     }",
          "2700:     def \"query cannot exceed max depth\"() {",
          "2701:         String schema = \"\"\"",
          "2702:         type Query {",
          "2703:             animal: Animal",
          "2704:         }",
          "2705:         interface Animal {",
          "2706:             name: String",
          "2707:             friends: [Animal]",
          "2708:         }",
          "2709:         type Bird implements Animal {",
          "2710:             name: String",
          "2711:             friends: [Animal]",
          "2712:         }",
          "2713:         type Cat implements Animal {",
          "2714:             name: String",
          "2715:             friends: [Animal]",
          "2716:             breed: String",
          "2717:         }",
          "2718:         type Dog implements Animal {",
          "2719:             name: String",
          "2720:             breed: String",
          "2721:             friends: [Animal]",
          "2722:         }",
          "2723:         \"\"\"",
          "2724:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "2729:         def animalSubselection = IntStream.rangeClosed(1, queryDepth - 2)",
          "2730:                 .mapToObj {",
          "2731:                     \"\"",
          "2732:                 }",
          "2733:                 .reduce(\"CHILD\") { acc, value ->",
          "2734:                     acc.replace(\"CHILD\", \"friends { CHILD }\")",
          "2735:                 }",
          "2736:                 .replace(\"CHILD\", \"name\")",
          "2739:         String query = \"\"\"",
          "2740:         {",
          "2741:             animal {",
          "2742:                 $animalSubselection",
          "2743:             }",
          "2744:         }",
          "2745:         \"\"\"",
          "2747:         def limit = 50",
          "2749:         assertValidQuery(graphQLSchema, query)",
          "2751:         Document document = TestUtil.parseQuery(query)",
          "2753:         when:",
          "2754:         Exception exception",
          "2755:         try {",
          "2756:             ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "2757:                     graphQLSchema,",
          "2758:                     document,",
          "2759:                     null,",
          "2760:                     RawVariables.emptyVariables(),",
          "2761:                     ExecutableNormalizedOperationFactory.Options.defaultOptions().maxChildrenDepth(limit))",
          "2762:         } catch (Exception e) {",
          "2763:             exception = e",
          "2764:         }",
          "2766:         then:",
          "2767:         if (queryDepth > limit) {",
          "2768:             assert exception != null",
          "2769:             assert exception.message.contains(\"depth exceeded\")",
          "2770:             assert exception.message.contains(\"> 50\")",
          "2771:         } else {",
          "2772:             assert exception == null",
          "2773:         }",
          "2775:         where:",
          "2776:         _ | queryDepth",
          "2777:         _ | 49",
          "2778:         _ | 50",
          "2779:         _ | 51",
          "2780:     }",
          "2782:     def \"big query is fine as long as depth is under limit\"() {",
          "2783:         String schema = \"\"\"",
          "2784:         type Query {",
          "2785:             animal: Animal",
          "2786:         }",
          "2787:         interface Animal {",
          "2788:             name: String",
          "2789:             friends: [Friend]",
          "2790:         }",
          "2791:         union Pet = Dog | Cat",
          "2792:         type Friend {",
          "2793:             name: String",
          "2794:             isBirdOwner: Boolean",
          "2795:             isCatOwner: Boolean",
          "2796:             pets: [Pet]",
          "2797:         }",
          "2798:         type Bird implements Animal {",
          "2799:             name: String",
          "2800:             friends: [Friend]",
          "2801:         }",
          "2802:         type Cat implements Animal {",
          "2803:             name: String",
          "2804:             friends: [Friend]",
          "2805:             breed: String",
          "2806:         }",
          "2807:         type Dog implements Animal {",
          "2808:             name: String",
          "2809:             breed: String",
          "2810:             friends: [Friend]",
          "2811:         }",
          "2812:         \"\"\"",
          "2814:         def garbageFields = IntStream.range(0, 1000)",
          "2815:                 .mapToObj {",
          "2816:                     \"\"\"test_$it: friends { name }\"\"\"",
          "2817:                 }",
          "2818:                 .collect(Collectors.joining(\"\\n\"))",
          "2820:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "2822:         String query = \"\"\"",
          "2823:         {",
          "2824:             animal {",
          "2825:                 name",
          "2826:                 otherName: name",
          "2827:                 ... on Animal {",
          "2828:                     name",
          "2829:                 }",
          "2830:                 ... on Cat {",
          "2831:                     name",
          "2832:                     friends {",
          "2833:                         ... on Friend {",
          "2834:                             isCatOwner",
          "2835:                             pets {",
          "2836:                                 ... on Dog {",
          "2837:                                     name",
          "2838:                                 }",
          "2839:                             }",
          "2840:                         }",
          "2841:                     }",
          "2842:                 }",
          "2843:                 ... on Bird {",
          "2844:                     friends {",
          "2845:                         isBirdOwner",
          "2846:                     }",
          "2847:                     friends {",
          "2848:                         name",
          "2849:                         pets {",
          "2850:                             ... on Cat {",
          "2851:                                 breed",
          "2852:                             }",
          "2853:                         }",
          "2854:                     }",
          "2855:                 }",
          "2856:                 ... on Dog {",
          "2857:                     name",
          "2858:                 }",
          "2859:                 $garbageFields",
          "2860:             }",
          "2861:         }",
          "2862:         \"\"\"",
          "2864:         assertValidQuery(graphQLSchema, query)",
          "2866:         Document document = TestUtil.parseQuery(query)",
          "2868:         when:",
          "2869:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "2870:                 graphQLSchema,",
          "2871:                 document,",
          "2872:                 null,",
          "2873:                 RawVariables.emptyVariables(),",
          "2874:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxChildrenDepth(5))",
          "2876:         then:",
          "2877:         noExceptionThrown()",
          "2878:     }",
          "2880:     def \"big query exceeding fields count\"() {",
          "2881:         String schema = \"\"\"",
          "2882:         type Query {",
          "2883:             animal: Animal",
          "2884:         }",
          "2885:         interface Animal {",
          "2886:             name: String",
          "2887:             friends: [Friend]",
          "2888:         }",
          "2889:         union Pet = Dog | Cat",
          "2890:         type Friend {",
          "2891:             name: String",
          "2892:             isBirdOwner: Boolean",
          "2893:             isCatOwner: Boolean",
          "2894:             pets: [Pet]",
          "2895:         }",
          "2896:         type Bird implements Animal {",
          "2897:             name: String",
          "2898:             friends: [Friend]",
          "2899:         }",
          "2900:         type Cat implements Animal {",
          "2901:             name: String",
          "2902:             friends: [Friend]",
          "2903:             breed: String",
          "2904:         }",
          "2905:         type Dog implements Animal {",
          "2906:             name: String",
          "2907:             breed: String",
          "2908:             friends: [Friend]",
          "2909:         }",
          "2910:         \"\"\"",
          "2912:         def garbageFields = IntStream.range(0, 1000)",
          "2913:                 .mapToObj {",
          "2914:                     \"\"\"test_$it: friends { name }\"\"\"",
          "2915:                 }",
          "2916:                 .collect(Collectors.joining(\"\\n\"))",
          "2918:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "2920:         String query = \"\"\"",
          "2921:         {",
          "2922:             animal {",
          "2923:                 name",
          "2924:                 otherName: name",
          "2925:                 ... on Animal {",
          "2926:                     name",
          "2927:                 }",
          "2928:                 ... on Cat {",
          "2929:                     name",
          "2930:                     friends {",
          "2931:                         ... on Friend {",
          "2932:                             isCatOwner",
          "2933:                             pets {",
          "2934:                                 ... on Dog {",
          "2935:                                     name",
          "2936:                                 }",
          "2937:                             }",
          "2938:                         }",
          "2939:                     }",
          "2940:                 }",
          "2941:                 ... on Bird {",
          "2942:                     friends {",
          "2943:                         isBirdOwner",
          "2944:                     }",
          "2945:                     friends {",
          "2946:                         name",
          "2947:                         pets {",
          "2948:                             ... on Cat {",
          "2949:                                 breed",
          "2950:                             }",
          "2951:                         }",
          "2952:                     }",
          "2953:                 }",
          "2954:                 ... on Dog {",
          "2955:                     name",
          "2956:                 }",
          "2957:                 $garbageFields",
          "2958:             }",
          "2959:         }",
          "2960:         \"\"\"",
          "2962:         assertValidQuery(graphQLSchema, query)",
          "2964:         Document document = TestUtil.parseQuery(query)",
          "2966:         when:",
          "2967:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "2968:                 graphQLSchema,",
          "2969:                 document,",
          "2970:                 null,",
          "2971:                 RawVariables.emptyVariables(),",
          "2972:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(2013))",
          "2974:         then:",
          "2975:         def e = thrown(AbortExecutionException)",
          "2976:         e.message == \"Maximum field count exceeded. 2014 > 2013\"",
          "2977:     }",
          "2979:     def \"small query exceeding fields count\"() {",
          "2980:         String schema = \"\"\"",
          "2981:         type Query {",
          "2982:             hello: String",
          "2983:         }",
          "2984:         \"\"\"",
          "2986:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "2988:         String query = \"\"\" {hello a1: hello}\"\"\"",
          "2990:         assertValidQuery(graphQLSchema, query)",
          "2992:         Document document = TestUtil.parseQuery(query)",
          "2994:         when:",
          "2995:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "2996:                 graphQLSchema,",
          "2997:                 document,",
          "2998:                 null,",
          "2999:                 RawVariables.emptyVariables(),",
          "3000:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(1))",
          "3002:         then:",
          "3003:         def e = thrown(AbortExecutionException)",
          "3004:         e.message == \"Maximum field count exceeded. 2 > 1\"",
          "3007:     }",
          "3009:     def \"query not exceeding fields count\"() {",
          "3010:         String schema = \"\"\"",
          "3011:         type Query {",
          "3012:             dogs: [Dog]",
          "3013:         }",
          "3014:         type Dog {",
          "3015:             name: String",
          "3016:             breed: String",
          "3017:         }",
          "3018:         \"\"\"",
          "3020:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "3022:         String query = \"\"\" {dogs{name breed }}\"\"\"",
          "3024:         assertValidQuery(graphQLSchema, query)",
          "3026:         Document document = TestUtil.parseQuery(query)",
          "3028:         when:",
          "3029:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "3030:                 graphQLSchema,",
          "3031:                 document,",
          "3032:                 null,",
          "3033:                 RawVariables.emptyVariables(),",
          "3034:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(3))",
          "3036:         then:",
          "3037:         notThrown(AbortExecutionException)",
          "3040:     }",
          "3042:     def \"query with meta fields exceeding fields count\"() {",
          "3043:         String schema = \"\"\"",
          "3044:         type Query {",
          "3045:             hello: String",
          "3046:         }",
          "3047:         \"\"\"",
          "3049:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "3051:         String query = IntrospectionQuery.INTROSPECTION_QUERY",
          "3053:         assertValidQuery(graphQLSchema, query)",
          "3055:         Document document = TestUtil.parseQuery(query)",
          "3057:         when:",
          "3058:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "3059:                 graphQLSchema,",
          "3060:                 document,",
          "3061:                 null,",
          "3062:                 RawVariables.emptyVariables(),",
          "3065:                 ExecutableNormalizedOperationFactory.Options.defaultOptions().maxFieldsCount(187))",
          "3066:         println result.normalizedFieldToMergedField.size()",
          "3068:         then:",
          "3069:         def e = thrown(AbortExecutionException)",
          "3072:         e.message == \"Maximum field count exceeded. 188 > 187\"",
          "3073:     }",
          "3075:     def \"can capture depth and field count\"() {",
          "3076:         String schema = \"\"\"",
          "3077:         type Query {",
          "3078:             foo: Foo",
          "3079:         }",
          "3081:         type Foo {",
          "3082:             stop : String",
          "3083:             bar : Bar",
          "3084:         }",
          "3086:         type Bar {",
          "3087:             stop : String",
          "3088:             foo : Foo",
          "3089:         }",
          "3090:         \"\"\"",
          "3092:         GraphQLSchema graphQLSchema = TestUtil.schema(schema)",
          "3094:         String query = \"{ foo { bar { foo { bar { foo { stop bar { stop }}}}}}}\"",
          "3096:         assertValidQuery(graphQLSchema, query)",
          "3098:         Document document = TestUtil.parseQuery(query)",
          "3100:         when:",
          "3101:         def result = ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "3102:                 graphQLSchema,",
          "3103:                 document,",
          "3104:                 null,",
          "3105:                 RawVariables.emptyVariables()",
          "3106:         )",
          "3108:         then:",
          "3109:         result.getOperationDepth() == 7",
          "3110:         result.getOperationFieldCount() == 8",
          "3111:     }",
          "3113:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperation(",
          "3114:             GraphQLSchema graphQLSchema,",
          "3115:             Document document,",
          "3116:             String operationName,",
          "3117:             CoercedVariables coercedVariableValues",
          "3118:     ) {",
          "3120:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
          "3122:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperation(graphQLSchema, document, operationName, coercedVariableValues, options)",
          "3123:     }",
          "3125:     private static ExecutableNormalizedOperation localCreateExecutableNormalizedOperationWithRawVariables(",
          "3126:             GraphQLSchema graphQLSchema,",
          "3127:             Document document,",
          "3128:             String operationName,",
          "3129:             RawVariables rawVariables",
          "3130:     ) {",
          "3132:         def options = ExecutableNormalizedOperationFactory.Options.defaultOptions()",
          "3134:         return ExecutableNormalizedOperationFactory.createExecutableNormalizedOperationWithRawVariables(",
          "3135:                 graphQLSchema,",
          "3136:                 document,",
          "3137:                 operationName,",
          "3138:                 rawVariables,",
          "3139:                 options",
          "3140:         )",
          "3141:     }",
          "3142: }",
          "",
          "---------------"
        ],
        "src/test/java/benchmark/BenchmarkUtils.java||src/test/java/benchmark/BenchmarkUtils.java": [
          "File: src/test/java/benchmark/BenchmarkUtils.java -> src/test/java/benchmark/BenchmarkUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package benchmark;",
          "6: import java.net.URL;",
          "7: import java.nio.charset.Charset;",
          "8: import java.util.concurrent.Callable;",
          "10: public class BenchmarkUtils {",
          "12:     static String loadResource(String name) {",
          "13:         return asRTE(() -> {",
          "14:             URL resource = BenchmarkUtils.class.getClassLoader().getResource(name);",
          "17:         });",
          "18:     }",
          "",
          "[Removed Lines]",
          "3: import com.google.common.io.Files;",
          "5: import java.io.File;",
          "15:             return String.join(\"\\n\", Files.readLines(new File(resource.toURI()), Charset.defaultCharset()));",
          "",
          "[Added Lines]",
          "3: import com.google.common.io.ByteStreams;",
          "5: import java.io.BufferedReader;",
          "6: import java.io.IOException;",
          "7: import java.io.InputStream;",
          "8: import java.io.InputStreamReader;",
          "11: import java.time.LocalDateTime;",
          "12: import java.time.format.DateTimeFormatter;",
          "17:     @SuppressWarnings(\"UnstableApiUsage\")",
          "21:             if (resource == null) {",
          "22:                 throw new IllegalArgumentException(\"missing resource: \" + name);",
          "23:             }",
          "24:             byte[] bytes;",
          "25:             try (InputStream inputStream = resource.openStream()) {",
          "27:                 bytes = ByteStreams.toByteArray(inputStream);",
          "28:             }",
          "29:             return new String(bytes, Charset.defaultCharset());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:         }",
          "26:     }",
          "",
          "[Removed Lines]",
          "28: }",
          "",
          "[Added Lines]",
          "41:     public static void runInToolingForSomeTimeThenExit(Runnable setup, Runnable r, Runnable tearDown) {",
          "42:         int runForMillis = getRunForMillis();",
          "43:         if (runForMillis <= 0) {",
          "44:             System.out.print(\"'runForMillis' environment var is not set - continuing  \\n\");",
          "45:             return;",
          "46:         }",
          "47:         System.out.printf(\"Running initial code in some tooling - runForMillis=%d  \\n\", runForMillis);",
          "48:         System.out.print(\"Get your tooling in order and press enter...\");",
          "49:         readLine();",
          "50:         System.out.print(\"Lets go...\\n\");",
          "51:         setup.run();",
          "53:         DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"HH:mm:ss\");",
          "54:         long now, then = System.currentTimeMillis();",
          "55:         do {",
          "56:             now = System.currentTimeMillis();",
          "57:             long msLeft = runForMillis - (now - then);",
          "58:             System.out.printf(\"\\t%s Running in loop... %s ms left\\n\", dtf.format(LocalDateTime.now()), msLeft);",
          "59:             r.run();",
          "60:             now = System.currentTimeMillis();",
          "61:         } while ((now - then) < runForMillis);",
          "63:         tearDown.run();",
          "65:         System.out.printf(\"This ran for %d millis.  Exiting...\\n\", System.currentTimeMillis() - then);",
          "66:         System.exit(0);",
          "67:     }",
          "69:     private static void readLine() {",
          "70:         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));",
          "71:         try {",
          "72:             br.readLine();",
          "73:         } catch (IOException e) {",
          "74:             throw new RuntimeException(e);",
          "75:         }",
          "76:     }",
          "78:     private static int getRunForMillis() {",
          "79:         String runFor = System.getenv(\"runForMillis\");",
          "80:         try {",
          "81:             return Integer.parseInt(runFor);",
          "82:         } catch (NumberFormatException e) {",
          "83:             return -1;",
          "84:         }",
          "85:     }",
          "87: }",
          "",
          "---------------"
        ],
        "src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java||src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java": [
          "File: src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java -> src/test/java/benchmark/ENFBenchmarkDeepIntrospection.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package benchmark;",
          "3: import graphql.execution.CoercedVariables;",
          "4: import graphql.language.Document;",
          "5: import graphql.normalized.ExecutableNormalizedOperation;",
          "6: import graphql.normalized.ExecutableNormalizedOperationFactory;",
          "7: import graphql.parser.Parser;",
          "8: import graphql.schema.GraphQLSchema;",
          "9: import graphql.schema.idl.SchemaGenerator;",
          "10: import org.openjdk.jmh.annotations.Benchmark;",
          "11: import org.openjdk.jmh.annotations.BenchmarkMode;",
          "12: import org.openjdk.jmh.annotations.Fork;",
          "13: import org.openjdk.jmh.annotations.Level;",
          "14: import org.openjdk.jmh.annotations.Measurement;",
          "15: import org.openjdk.jmh.annotations.Mode;",
          "16: import org.openjdk.jmh.annotations.OutputTimeUnit;",
          "17: import org.openjdk.jmh.annotations.Param;",
          "18: import org.openjdk.jmh.annotations.Scope;",
          "19: import org.openjdk.jmh.annotations.Setup;",
          "20: import org.openjdk.jmh.annotations.State;",
          "21: import org.openjdk.jmh.annotations.Warmup;",
          "22: import org.openjdk.jmh.runner.Runner;",
          "23: import org.openjdk.jmh.runner.RunnerException;",
          "24: import org.openjdk.jmh.runner.options.Options;",
          "25: import org.openjdk.jmh.runner.options.OptionsBuilder;",
          "27: import java.util.concurrent.TimeUnit;",
          "29: import static graphql.normalized.ExecutableNormalizedOperationFactory.*;",
          "31: @State(Scope.Benchmark)",
          "32: @Warmup(iterations = 2, time = 5)",
          "33: @Measurement(iterations = 3, time = 5)",
          "34: @Fork(2)",
          "35: public class ENFBenchmarkDeepIntrospection {",
          "37:     @Param({\"2\", \"10\", \"20\"})",
          "38:     int howDeep = 2;",
          "40:     String query = \"\";",
          "42:     GraphQLSchema schema;",
          "43:     Document document;",
          "45:     @Setup(Level.Trial)",
          "46:     public void setUp() {",
          "47:         String schemaString = BenchmarkUtils.loadResource(\"large-schema-2.graphqls\");",
          "48:         schema = SchemaGenerator.createdMockedSchema(schemaString);",
          "50:         query = createDeepQuery(howDeep);",
          "51:         document = Parser.parse(query);",
          "52:     }",
          "53:     @Benchmark",
          "54:     @BenchmarkMode(Mode.AverageTime)",
          "55:     @OutputTimeUnit(TimeUnit.MILLISECONDS)",
          "56:     public ExecutableNormalizedOperation benchMarkAvgTime() {",
          "57:         ExecutableNormalizedOperationFactory.Options options  = ExecutableNormalizedOperationFactory.Options.defaultOptions();",
          "58:         ExecutableNormalizedOperation executableNormalizedOperation = createExecutableNormalizedOperation(schema,",
          "59:                 document,",
          "60:                 null,",
          "61:                 CoercedVariables.emptyVariables(),",
          "62:                 options);",
          "63:         return executableNormalizedOperation;",
          "64:     }",
          "66:     public static void main(String[] args) throws RunnerException {",
          "67:         runAtStartup();",
          "69:         Options opt = new OptionsBuilder()",
          "70:                 .include(\"benchmark.ENFBenchmarkDeepIntrospection\")",
          "71:                 .build();",
          "73:         new Runner(opt).run();",
          "74:     }",
          "76:     private static void runAtStartup() {",
          "78:         ENFBenchmarkDeepIntrospection benchmarkIntrospection = new ENFBenchmarkDeepIntrospection();",
          "79:         benchmarkIntrospection.howDeep = 2;",
          "81:         BenchmarkUtils.runInToolingForSomeTimeThenExit(",
          "82:                 benchmarkIntrospection::setUp,",
          "83:                 () -> { while (true) { benchmarkIntrospection.benchMarkAvgTime(); }},",
          "84:                 () ->{}",
          "85:         );",
          "86:     }",
          "90:     private static String createDeepQuery(int depth) {",
          "91:         String result = \"query test {\\n\" +",
          "92:                 \"  __schema {\\n\" +",
          "93:                 \"    types {\\n\" +",
          "94:                 \"      ...F1\\n\" +",
          "95:                 \"    }\\n\" +",
          "96:                 \"  }\\n\" +",
          "97:                 \"}\\n\";",
          "99:         for (int i = 1; i < depth; i++) {",
          "100:             result += \"        fragment F\" + i + \" on __Type {\\n\" +",
          "101:                     \"          fields {\\n\" +",
          "102:                     \"            type {\\n\" +",
          "103:                     \"              ...F\" + (i + 1) +\"\\n\" +",
          "104:                     \"            }\\n\" +",
          "105:                     \"          }\\n\" +",
          "106:                     \"\\n\" +",
          "107:                     \"          ofType {\\n\" +",
          "108:                     \"            ...F\"+ (i + 1) + \"\\n\" +",
          "109:                     \"          }\\n\" +",
          "110:                     \"        }\\n\";",
          "111:         }",
          "112:         result += \"        fragment F\" + depth + \" on __Type {\\n\" +",
          "113:                 \"          fields {\\n\" +",
          "114:                 \"            type {\\n\" +",
          "115:                 \"name\\n\" +",
          "116:                 \"            }\\n\" +",
          "117:                 \"          }\\n\" +",
          "118:                 \"}\\n\";",
          "119:         return result;",
          "120:     }",
          "122: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9cf1b7f0cb6a0243d48f74dec5e16fccd16ca09",
      "candidate_info": {
        "commit_hash": "e9cf1b7f0cb6a0243d48f74dec5e16fccd16ca09",
        "repo": "graphql-java/graphql-java",
        "commit_url": "https://github.com/graphql-java/graphql-java/commit/e9cf1b7f0cb6a0243d48f74dec5e16fccd16ca09",
        "files": [
          "src/main/java/graphql/execution/ConditionalNodes.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodes.java"
        ],
        "message": "remove not needed conditional node decision code",
        "before_after_code_files": [
          "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/ConditionalNodes.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
          "src/main/java/graphql/execution/conditional/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/graphql-java/graphql-java/pull/3543"
        ],
        "olp_code_files": {
          "patch": [
            "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java"
          ],
          "candidate": [
            "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/ConditionalNodes.java"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/graphql/execution/ConditionalNodes.java||src/main/java/graphql/execution/ConditionalNodes.java": [
          "File: src/main/java/graphql/execution/ConditionalNodes.java -> src/main/java/graphql/execution/ConditionalNodes.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java": [
          "File: src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java -> src/main/java/graphql/execution/conditional/ConditionalNodeDecision.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java||src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java": [
          "File: src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java -> src/main/java/graphql/execution/conditional/ConditionalNodeDecisionEnvironment.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main/java/graphql/execution/conditional/ConditionalNodes.java||src/main/java/graphql/execution/conditional/ConditionalNodes.java": [
          "File: src/main/java/graphql/execution/conditional/ConditionalNodes.java -> src/main/java/graphql/execution/conditional/ConditionalNodes.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import graphql.schema.GraphQLSchema;",
          "13: import java.util.List;",
          "15: import java.util.Map;",
          "17: import static graphql.Directives.IncludeDirective;",
          "",
          "[Removed Lines]",
          "14: import java.util.Locale;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:                                  GraphQLSchema graphQLSchema,",
          "27:                                  GraphQLContext graphQLContext",
          "28:     ) {",
          "75:     }",
          "80:         if (directives.isEmpty()) {",
          "81:             return true;",
          "",
          "[Removed Lines]",
          "31:         if (!shouldInclude(variables, element.getDirectives())) {",
          "32:             return false;",
          "33:         }",
          "37:         if (graphQLContext != null) {",
          "38:             ConditionalNodeDecision conditionalDecision = graphQLContext.get(ConditionalNodeDecision.class);",
          "39:             if (conditionalDecision != null) {",
          "40:                 return customShouldInclude(variables, element, graphQLSchema, graphQLContext, conditionalDecision);",
          "41:             }",
          "42:         }",
          "44:         return true;",
          "45:     }",
          "47:     private boolean customShouldInclude(Map<String, Object> variables,",
          "48:                                         DirectivesContainer<?> element,",
          "49:                                         GraphQLSchema graphQLSchema,",
          "50:                                         GraphQLContext graphQLContext,",
          "51:                                         ConditionalNodeDecision conditionalDecision",
          "52:     ) {",
          "53:         CoercedVariables coercedVariables = CoercedVariables.of(variables);",
          "54:         return conditionalDecision.shouldInclude(new ConditionalNodeDecisionEnvironment() {",
          "55:             @Override",
          "56:             public DirectivesContainer<?> getDirectivesContainer() {",
          "57:                 return element;",
          "58:             }",
          "60:             @Override",
          "61:             public CoercedVariables getVariables() {",
          "62:                 return coercedVariables;",
          "63:             }",
          "65:             @Override",
          "66:             public GraphQLSchema getGraphQlSchema() {",
          "67:                 return graphQLSchema;",
          "68:             }",
          "70:             @Override",
          "71:             public GraphQLContext getGraphQLContext() {",
          "72:                 return graphQLContext;",
          "73:             }",
          "74:         });",
          "78:     private boolean shouldInclude(Map<String, Object> variables, List<Directive> directives) {",
          "",
          "[Added Lines]",
          "28:         return shouldInclude(variables, element.getDirectives());",
          "32:     public boolean shouldInclude(Map<String, Object> variables, List<Directive> directives) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:         return getDirectiveResult(variables, directives, IncludeDirective.getName(), true);",
          "89:     }",
          "92:         Directive foundDirective = NodeUtil.findNodeByName(directives, directiveName);",
          "93:         if (foundDirective != null) {",
          "94:             Map<String, Object> argumentValues = ValuesResolver.getArgumentValues(SkipDirective.getArguments(), foundDirective.getArguments(), CoercedVariables.of(variables));",
          "",
          "[Removed Lines]",
          "91:     private boolean getDirectiveResult(Map<String, Object> variables, List<Directive> directives, String directiveName, boolean defaultValue) {",
          "",
          "[Added Lines]",
          "45:     private boolean getDirectiveResult(Map<String, Object> variables, List<Directive> directives, String",
          "46:             directiveName, boolean defaultValue) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}